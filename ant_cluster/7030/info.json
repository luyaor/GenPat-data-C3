{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "385306b929b9bba57dbf1a3de482b321", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ebf64d9e3edbcf1c40e72bef1d52626", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipEntry.java", "commitBeforeChange": "aa43e37a025cdf54b8914b8283e57419a253ed59", "commitAfterChange": "dee95e3acc5154aee03ff5f91f9a56426ae79f3f", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 43, "signatureBeforeChange": "     public boolean equals(Object o)", "signatureAfterChange": "     @Override     public boolean equals(Object obj)", "diff": ["-    public boolean equals(Object o) {", "-        return (this == o);", "+     */", "+    @Override", "+    public boolean equals(Object obj) {", "+        if (this == obj) {", "+            return true;", "+        }", "+        if (obj == null || getClass() != obj.getClass()) {", "+            return false;", "+        }", "+        ZipEntry other = (ZipEntry) obj;", "+        String myName = getName();", "+        String otherName = other.getName();", "+        if (myName == null) {", "+            if (otherName != null) {", "+                return false;", "+            }", "+        } else if (!myName.equals(otherName)) {", "+            return false;", "+        }", "+        String myComment = getComment();", "+        String otherComment = other.getComment();", "+        if (myComment == null) {", "+            myComment = \"\";", "+        }", "+        if (otherComment == null) {", "+            otherComment = \"\";", "+        }", "+        return getTime() == other.getTime()", "+            && myComment.equals(otherComment)", "+            && getInternalAttributes() == other.getInternalAttributes()", "+            && getPlatform() == other.getPlatform()", "+            && getExternalAttributes() == other.getExternalAttributes()", "+            && getMethod() == other.getMethod()", "+            && getSize() == other.getSize()", "+            && getCrc() == other.getCrc()", "+            && getCompressedSize() == other.getCompressedSize()", "+            && Arrays.equals(getCentralDirectoryExtra(),", "+                             other.getCentralDirectoryExtra())", "+            && Arrays.equals(getLocalFileDataExtra(),", "+                             other.getLocalFileDataExtra())", "+            && gpb.equals(other.gpb);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95e1757a82fa80fcd1b9080ebb46173e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Project.java", "commitBeforeChange": "9d009f659f2d444ff28c16ec9636cb3062760bac", "commitAfterChange": "284174e86e92dbaeb24202065bcc92157100989d", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "     public void executeTargets(Vector targetNames) throws BuildException", "signatureAfterChange": "     public void executeTargets(Vector targetNames) throws BuildException", "diff": ["-        BuildException thrownException = null;", "-        for (int i = 0; i < targetNames.size(); i++) {", "+        Object o = getReference(\"ant.executor\");", "+        if (o == null) {", "+            String classname = getProperty(\"ant.executor.class\");", "+            if (classname == null) {", "+                classname = (keepGoingMode)", "+                    ? KeepGoingExecutor.class.getName()", "+                    : DefaultExecutor.class.getName();", "+            }", "+            log(\"Attempting to create object of type \" + classname, MSG_DEBUG);", "-                executeTarget((String) targetNames.elementAt(i));", "-            } catch (BuildException ex) {", "-                if (!(keepGoingMode)) {", "-                    throw ex; // Throw further", "+                o = Class.forName(classname, true, coreLoader).newInstance();", "+            } catch (ClassNotFoundException seaEnEfEx) {", "+                //try the current classloader", "+                try {", "+                    o = Class.forName(classname).newInstance();", "+                } catch (Exception ex) {", "+                    log(ex.toString(), MSG_ERR);", "-                thrownException = ex;", "+            } catch (Exception ex) {", "+                log(ex.toString(), MSG_ERR);", "+            }", "+            if (o != null) {", "+                addReference(\"ant.executor\", o);", "-        if (thrownException != null) {", "-            throw thrownException;", "+", "+        if (o == null) {", "+            throw new BuildException(\"Unable to obtain a Target Executor instance.\");", "+        } else {", "+            String[] targetNameArray = (String[])(targetNames.toArray(", "+                new String[targetNames.size()]));", "+            ((Executor)o).executeTargets(this, targetNameArray);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db196a7e0835480362dc60c0a42c214d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "2a816a5361ec39c8693a6a4bbac559ffe5948c6e", "commitAfterChange": "f2d32ac66d804c5dfeb14adcfa0ab31ff8f648e8", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 95, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+            ", "+            // If an initial command was configured then send it.", "+            // Some FTP servers offer different modes of operation,", "+            // E.G. switching between a UNIX file system mode and", "+            // a legacy file system.", "+            if (this.initialSiteCommand != null) {", "+                RetryHandler h = new RetryHandler(this.retriesAllowed, this);", "+                final FTPClient lftp = ftp;", "+                executeRetryable(h, new Retryable() {", "+                    public void execute() throws IOException {", "+                        doSiteCommand(lftp, FTP.this.initialSiteCommand);", "+                    }", "+                }, \"initial site command: \"+ this.initialSiteCommand);", "+            }", "+", "-                doSiteCommand(ftp, \"umask \" + umask);", "+                RetryHandler h = new RetryHandler(this.retriesAllowed, this);", "+                final FTPClient lftp = ftp;", "+                executeRetryable(h, new Retryable() {", "+                    public void execute() throws IOException {", "+                        doSiteCommand(lftp, \"umask \" + umask);", "+                    }", "+                }, \"umask \" + umask);", "+            } else if (action == SITE_CMD) {", "+                    RetryHandler h = new RetryHandler(this.retriesAllowed, this);", "+                    final FTPClient lftp = ftp;", "+                    executeRetryable(h, new Retryable() {", "+                        public void execute() throws IOException {", "+                            doSiteCommand(lftp, FTP.this.siteCommand);", "+                        }", "+                    }, \"Site Command: \" + this.siteCommand);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e05a13d5df4a496ef0ce09d0d833ea3c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/Frame.java", "commitBeforeChange": "83dc385bd01fbc8ee2fb166b9a5605bdc6958d76", "commitAfterChange": "bf844382c856f7b51c56024189c93f11d34cb720", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     protected void executeTasks(Iterator taskIterator)          throws ExecutionException", "signatureAfterChange": "     protected void executeTasks(Iterator taskIterator)          throws ExecutionException", "diff": ["-            Throwable failureCause = null;", "-            ImportInfo importInfo", "-                 = componentManager.getDefinition(model.getType());", "-            if (importInfo == null) {", "-                throw new ExecutionException(\"There is no definition for the <\"", "-                     + model.getType() + \"> element\", model.getLocation());", "-            }", "-", "-                if (importInfo.getDefinitionType() == AntLibrary.TASKDEF) {", "-                    TaskContext taskContext = configureTask(model);", "-                    eventSupport.fireTaskStarted(model);", "-", "-                    ClassLoader currentLoader", "-                         = setContextLoader(taskContext.getLoader());", "-                    taskContext.execute();", "-                    setContextLoader(currentLoader);", "-                    taskContext.destroy();", "+                Object component = componentManager.createComponent(model);", "+                if (component instanceof Task) {", "+                    execService.executeTask((Task)component);", "-                    // typedef", "-                    String typeId = model.getAspectValue(ANT_ASPECT, \"id\");", "-                    Object typeInstance = configureType(model.getType(), model);", "+                    String typeId ", "+                        = model.getAspectValue(Constants.ANT_ASPECT, \"id\");", "-                        setDataValue(typeId, typeInstance, true);", "+                        setDataValue(typeId, component, true);", "-                failureCause = e;", "-                failureCause = ee;", "-            } finally {", "-                eventSupport.fireTaskFinished(model, failureCause);"]}]}
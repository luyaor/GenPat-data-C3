{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ce7a3fb5e79ec9f344b368c09aa76504", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ba30f69f9d82f1a0141db840188ab67", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "e854f481c9a76b41680eb0f605de524556b059ad", "commitAfterChange": "7a3448dcea316f454dd0ba470f8b0825504ae309", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public File normalize( String path )", "signatureAfterChange": "     public File normalize( String path )         throws TaskException", "diff": ["+        throws TaskException", "-             )", "+        )", "-            throw new BuildException( msg );", "+            throw new TaskException( msg );", "-            sb.append( Character.toUpperCase( ca[0] ) ).append( ':' );", "+            sb.append( Character.toUpperCase( ca[ 0 ] ) ).append( ':' );", "-                if( ( ca[i] != '\\\\' ) ||", "-                    ( ca[i] == '\\\\' && ca[i - 1] != '\\\\' )", "-                     )", "+                if( ( ca[ i ] != '\\\\' ) ||", "+                    ( ca[ i ] == '\\\\' && ca[ i - 1 ] != '\\\\' )", "+                )", "-                    sb.append( ca[i] );", "+                    sb.append( ca[ i ] );", "-                    throw new BuildException( \"Cannot resolve path \" + orig );", "+                    throw new TaskException( \"Cannot resolve path \" + orig );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3463453e4c8ccc75eaa323bd9acf09d7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/ejb/WLRun.java", "commitBeforeChange": "f73917168fc78f993f09f5f3eccbc4d663018c40", "commitAfterChange": "b8c50342cacdaa5bc7e3e4e72eb8351da5824716", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "      private void executeWLS()", "signatureAfterChange": "      private void executeWLS()         throws TaskException", "diff": ["+        throws TaskException", "-                throw new BuildException( \"Properties file \" + weblogicPropertiesFile +", "-                    \" not found in weblogic home \" + weblogicSystemHome +", "-                    \" or as absolute file\" );", "+                throw new TaskException( \"Properties file \" + weblogicPropertiesFile +", "+                                         \" not found in weblogic home \" + weblogicSystemHome +", "+                                         \" or as absolute file\" );", "-        Java weblogicServer = ( Java )project.createTask( \"java\" );", "+        Java weblogicServer = (Java)project.createTask( \"java\" );", "-            throw new BuildException( \"Execution of weblogic server failed\" );", "+            throw new TaskException( \"Execution of weblogic server failed\" );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f5bf5ee9118f692e3c29556c39d50c5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/ejb/WebsphereDeploymentTool.java", "commitBeforeChange": "7a3448dcea316f454dd0ba470f8b0825504ae309", "commitAfterChange": "b3cc9d80b2398ace0096a303b714bd13b791d9fc", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "      protected boolean isRebuildRequired( File genericJarFile, File websphereJarFile )", "signatureAfterChange": "     protected boolean isRebuildRequired( File genericJarFile, File websphereJarFile )         throws TaskException", "diff": ["-", "+        throws TaskException", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-                Project.MSG_VERBOSE );", "+                 Project.MSG_VERBOSE );", "-", "-                 && websphereJarFile.exists() && websphereJarFile.isFile() )", "+                && websphereJarFile.exists() && websphereJarFile.isFile() )", "-", "-", "-", "-", "-", "-", "-", "-                for( Enumeration e = genericJar.entries(); e.hasMoreElements();  )", "+                for( Enumeration e = genericJar.entries(); e.hasMoreElements(); )", "-", "-                    JarEntry je = ( JarEntry )e.nextElement();", "-", "+                    JarEntry je = (JarEntry)e.nextElement();", "-", "-                for( Enumeration e = wasJar.entries(); e.hasMoreElements();  )", "+                for( Enumeration e = wasJar.entries(); e.hasMoreElements(); )", "-", "-                    JarEntry je = ( JarEntry )e.nextElement();", "-", "+                    JarEntry je = (JarEntry)e.nextElement();", "-", "-", "-", "-", "-                for( Enumeration e = genericEntries.keys(); e.hasMoreElements();  )", "+                for( Enumeration e = genericEntries.keys(); e.hasMoreElements(); )", "-", "-                    String filepath = ( String )e.nextElement();", "-", "+                    String filepath = (String)e.nextElement();", "-", "-", "-", "-                        JarEntry genericEntry = ( JarEntry )genericEntries.get( filepath );", "-", "-                        JarEntry wasEntry = ( JarEntry )wasEntries.get( filepath );", "-", "+                        JarEntry genericEntry = (JarEntry)genericEntries.get( filepath );", "+                        JarEntry wasEntry = (JarEntry)wasEntries.get( filepath );", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-                    for( Enumeration e = wasEntries.elements(); e.hasMoreElements();  )", "+                    for( Enumeration e = wasEntries.elements(); e.hasMoreElements(); )", "-", "-                        byte[] buffer = new byte[1024];", "-", "+                        byte[] buffer = new byte[ 1024 ];", "-", "-", "-                        JarEntry je = ( JarEntry )e.nextElement();", "-", "+                        JarEntry je = (JarEntry)e.nextElement();", "-", "-", "-", "-", "-", "-", "-", "-", "-                                Project.MSG_VERBOSE );", "+                                 Project.MSG_VERBOSE );", "-                            je = ( JarEntry )replaceEntries.get( je.getName() );", "-", "+                            je = (JarEntry)replaceEntries.get( je.getName() );", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-                 + \". Details: \"", "-", "-                 + cnfe.getMessage();", "-", "-            throw new BuildException( cnfmsg, cnfe );", "-", "+                + \". Details: \"", "+                + cnfe.getMessage();", "+            throw new TaskException( cnfmsg, cnfe );", "-", "-", "-", "-                 + \". Details: \"", "-", "-                 + ioe.getMessage();", "-", "-            throw new BuildException( msg, ioe );", "-", "+                + \". Details: \"", "+                + ioe.getMessage();", "+            throw new TaskException( msg, ioe );", "-", "-", "-", "-", "-", "-", "-                {}", "-", "+                {", "+                }", "-", "-", "-", "-", "-", "-", "-", "-                {}", "-", "+                {", "+                }", "-", "-", "-", "-", "-", "-", "-", "-                {}", "-", "-", "-", "+                {", "+                }", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "434540e0c1b2291de498541d3a58290d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java", "commitBeforeChange": "7a3448dcea316f454dd0ba470f8b0825504ae309", "commitAfterChange": "b3cc9d80b2398ace0096a303b714bd13b791d9fc", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "     protected boolean isRebuildRequired( File genericJarFile, File weblogicJarFile )", "signatureAfterChange": "     protected boolean isRebuildRequired( File genericJarFile, File weblogicJarFile )         throws TaskException", "diff": ["+        throws TaskException", "-                Project.MSG_VERBOSE );", "+                 Project.MSG_VERBOSE );", "-                 && weblogicJarFile.exists() && weblogicJarFile.isFile() )", "+                && weblogicJarFile.exists() && weblogicJarFile.isFile() )", "-                for( Enumeration e = genericJar.entries(); e.hasMoreElements();  )", "+                for( Enumeration e = genericJar.entries(); e.hasMoreElements(); )", "-                    JarEntry je = ( JarEntry )e.nextElement();", "+                    JarEntry je = (JarEntry)e.nextElement();", "-                for( Enumeration e = wlJar.entries(); e.hasMoreElements();  )", "+                for( Enumeration e = wlJar.entries(); e.hasMoreElements(); )", "-                    JarEntry je = ( JarEntry )e.nextElement();", "+                    JarEntry je = (JarEntry)e.nextElement();", "-                for( Enumeration e = genericEntries.keys(); e.hasMoreElements();  )", "+                for( Enumeration e = genericEntries.keys(); e.hasMoreElements(); )", "-                    String filepath = ( String )e.nextElement();", "+                    String filepath = (String)e.nextElement();", "-                        JarEntry genericEntry = ( JarEntry )genericEntries.get( filepath );", "-                        JarEntry wlEntry = ( JarEntry )wlEntries.get( filepath );", "+                        JarEntry genericEntry = (JarEntry)genericEntries.get( filepath );", "+                        JarEntry wlEntry = (JarEntry)wlEntries.get( filepath );", "-                        ( genericEntry.getSize() != wlEntry.getSize() ) )", "+                            ( genericEntry.getSize() != wlEntry.getSize() ) )", "-                    for( Enumeration e = wlEntries.elements(); e.hasMoreElements();  )", "+                    for( Enumeration e = wlEntries.elements(); e.hasMoreElements(); )", "-                        byte[] buffer = new byte[1024];", "+                        byte[] buffer = new byte[ 1024 ];", "-                        JarEntry je = ( JarEntry )e.nextElement();", "+                        JarEntry je = (JarEntry)e.nextElement();", "-                            je = ( JarEntry )replaceEntries.get( je.getName() );", "+                            je = (JarEntry)replaceEntries.get( je.getName() );", "-                 + \". Details: \"", "-                 + cnfe.getMessage();", "-            throw new BuildException( cnfmsg, cnfe );", "+                + \". Details: \"", "+                + cnfe.getMessage();", "+            throw new TaskException( cnfmsg, cnfe );", "-                 + \". Details: \"", "-                 + ioe.getMessage();", "-            throw new BuildException( msg, ioe );", "+                + \". Details: \"", "+                + ioe.getMessage();", "+            throw new TaskException( msg, ioe );", "-                {}", "+                {", "+                }", "-                {}", "+                {", "+                }", "-                {}", "+                {", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4aa554aad02df8b035f5adaf12a3057a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "e854f481c9a76b41680eb0f605de524556b059ad", "commitAfterChange": "7a3448dcea316f454dd0ba470f8b0825504ae309", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public File normalize( String path )", "signatureAfterChange": "     public File normalize( String path )         throws TaskException", "diff": ["+        throws TaskException", "-             )", "+        )", "-            throw new BuildException( msg );", "+            throw new TaskException( msg );", "-            sb.append( Character.toUpperCase( ca[0] ) ).append( ':' );", "+            sb.append( Character.toUpperCase( ca[ 0 ] ) ).append( ':' );", "-                if( ( ca[i] != '\\\\' ) ||", "-                    ( ca[i] == '\\\\' && ca[i - 1] != '\\\\' )", "-                     )", "+                if( ( ca[ i ] != '\\\\' ) ||", "+                    ( ca[ i ] == '\\\\' && ca[ i - 1 ] != '\\\\' )", "+                )", "-                    sb.append( ca[i] );", "+                    sb.append( ca[ i ] );", "-                    throw new BuildException( \"Cannot resolve path \" + orig );", "+                    throw new TaskException( \"Cannot resolve path \" + orig );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7650cb8adcb56c04568f54993455dd87", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/types/PatternSet.java", "commitBeforeChange": "7a3448dcea316f454dd0ba470f8b0825504ae309", "commitAfterChange": "b3cc9d80b2398ace0096a303b714bd13b791d9fc", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private void readFiles( Project p )", "signatureAfterChange": "     private void readFiles( Project p )         throws TaskException", "diff": ["+        throws TaskException", "-                NameEntry ne = ( NameEntry )e.nextElement();", "+                NameEntry ne = (NameEntry)e.nextElement();", "-                        throw new BuildException( \"Includesfile \"", "-                             + inclFile.getAbsolutePath()", "-                             + \" not found.\" );", "+                        throw new TaskException( \"Includesfile \"", "+                                                 + inclFile.getAbsolutePath()", "+                                                 + \" not found.\" );", "-                NameEntry ne = ( NameEntry )e.nextElement();", "+                NameEntry ne = (NameEntry)e.nextElement();", "-                        throw new BuildException( \"Excludesfile \"", "-                             + exclFile.getAbsolutePath()", "-                             + \" not found.\" );", "+                        throw new TaskException( \"Excludesfile \"", "+                                                 + exclFile.getAbsolutePath()", "+                                                 + \" not found.\" );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3955ae6d66418e5ed33f66d8a40e0a3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "e854f481c9a76b41680eb0f605de524556b059ad", "commitAfterChange": "7a3448dcea316f454dd0ba470f8b0825504ae309", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     public void resetThreadContextLoader()", "signatureAfterChange": "     public void resetThreadContextLoader()     throws TaskException", "diff": ["+    throws TaskException", "-                throw new BuildException( t.toString() );", "+                throw new TaskException( t.toString() );", "-                throw new BuildException( e.toString() );", "+                throw new TaskException( e.toString() );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2044a08b93912b1030a62544dfcefbf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/types/PatternSet.java", "commitBeforeChange": "7a3448dcea316f454dd0ba470f8b0825504ae309", "commitAfterChange": "b3cc9d80b2398ace0096a303b714bd13b791d9fc", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private void readFiles( Project p )", "signatureAfterChange": "     private void readFiles( Project p )         throws TaskException", "diff": ["+        throws TaskException", "-                NameEntry ne = ( NameEntry )e.nextElement();", "+                NameEntry ne = (NameEntry)e.nextElement();", "-                        throw new BuildException( \"Includesfile \"", "-                             + inclFile.getAbsolutePath()", "-                             + \" not found.\" );", "+                        throw new TaskException( \"Includesfile \"", "+                                                 + inclFile.getAbsolutePath()", "+                                                 + \" not found.\" );", "-                NameEntry ne = ( NameEntry )e.nextElement();", "+                NameEntry ne = (NameEntry)e.nextElement();", "-                        throw new BuildException( \"Excludesfile \"", "-                             + exclFile.getAbsolutePath()", "-                             + \" not found.\" );", "+                        throw new TaskException( \"Excludesfile \"", "+                                                 + exclFile.getAbsolutePath()", "+                                                 + \" not found.\" );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da43546f4af4000103a4570ebf631fbc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/ejb/WLRun.java", "commitBeforeChange": "f73917168fc78f993f09f5f3eccbc4d663018c40", "commitAfterChange": "b8c50342cacdaa5bc7e3e4e72eb8351da5824716", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "      private void executeWLS()", "signatureAfterChange": "      private void executeWLS()         throws TaskException", "diff": ["+        throws TaskException", "-                throw new BuildException( \"Properties file \" + weblogicPropertiesFile +", "-                    \" not found in weblogic home \" + weblogicSystemHome +", "-                    \" or as absolute file\" );", "+                throw new TaskException( \"Properties file \" + weblogicPropertiesFile +", "+                                         \" not found in weblogic home \" + weblogicSystemHome +", "+                                         \" or as absolute file\" );", "-        Java weblogicServer = ( Java )project.createTask( \"java\" );", "+        Java weblogicServer = (Java)project.createTask( \"java\" );", "-            throw new BuildException( \"Execution of weblogic server failed\" );", "+            throw new TaskException( \"Execution of weblogic server failed\" );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1d36a08c99f4ca384ae47bea857e941", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "e854f481c9a76b41680eb0f605de524556b059ad", "commitAfterChange": "7a3448dcea316f454dd0ba470f8b0825504ae309", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     public void resetThreadContextLoader()", "signatureAfterChange": "     public void resetThreadContextLoader()     throws TaskException", "diff": ["+    throws TaskException", "-                throw new BuildException( t.toString() );", "+                throw new TaskException( t.toString() );", "-                throw new BuildException( e.toString() );", "+                throw new TaskException( e.toString() );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7909fe1cb23c453c177e90684f37a6c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java", "commitBeforeChange": "7a3448dcea316f454dd0ba470f8b0825504ae309", "commitAfterChange": "b3cc9d80b2398ace0096a303b714bd13b791d9fc", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "     protected boolean isRebuildRequired( File genericJarFile, File weblogicJarFile )", "signatureAfterChange": "     protected boolean isRebuildRequired( File genericJarFile, File weblogicJarFile )         throws TaskException", "diff": ["+        throws TaskException", "-                Project.MSG_VERBOSE );", "+                 Project.MSG_VERBOSE );", "-                 && weblogicJarFile.exists() && weblogicJarFile.isFile() )", "+                && weblogicJarFile.exists() && weblogicJarFile.isFile() )", "-                for( Enumeration e = genericJar.entries(); e.hasMoreElements();  )", "+                for( Enumeration e = genericJar.entries(); e.hasMoreElements(); )", "-                    JarEntry je = ( JarEntry )e.nextElement();", "+                    JarEntry je = (JarEntry)e.nextElement();", "-                for( Enumeration e = wlJar.entries(); e.hasMoreElements();  )", "+                for( Enumeration e = wlJar.entries(); e.hasMoreElements(); )", "-                    JarEntry je = ( JarEntry )e.nextElement();", "+                    JarEntry je = (JarEntry)e.nextElement();", "-                for( Enumeration e = genericEntries.keys(); e.hasMoreElements();  )", "+                for( Enumeration e = genericEntries.keys(); e.hasMoreElements(); )", "-                    String filepath = ( String )e.nextElement();", "+                    String filepath = (String)e.nextElement();", "-                        JarEntry genericEntry = ( JarEntry )genericEntries.get( filepath );", "-                        JarEntry wlEntry = ( JarEntry )wlEntries.get( filepath );", "+                        JarEntry genericEntry = (JarEntry)genericEntries.get( filepath );", "+                        JarEntry wlEntry = (JarEntry)wlEntries.get( filepath );", "-                        ( genericEntry.getSize() != wlEntry.getSize() ) )", "+                            ( genericEntry.getSize() != wlEntry.getSize() ) )", "-                    for( Enumeration e = wlEntries.elements(); e.hasMoreElements();  )", "+                    for( Enumeration e = wlEntries.elements(); e.hasMoreElements(); )", "-                        byte[] buffer = new byte[1024];", "+                        byte[] buffer = new byte[ 1024 ];", "-                        JarEntry je = ( JarEntry )e.nextElement();", "+                        JarEntry je = (JarEntry)e.nextElement();", "-                            je = ( JarEntry )replaceEntries.get( je.getName() );", "+                            je = (JarEntry)replaceEntries.get( je.getName() );", "-                 + \". Details: \"", "-                 + cnfe.getMessage();", "-            throw new BuildException( cnfmsg, cnfe );", "+                + \". Details: \"", "+                + cnfe.getMessage();", "+            throw new TaskException( cnfmsg, cnfe );", "-                 + \". Details: \"", "-                 + ioe.getMessage();", "-            throw new BuildException( msg, ioe );", "+                + \". Details: \"", "+                + ioe.getMessage();", "+            throw new TaskException( msg, ioe );", "-                {}", "+                {", "+                }", "-                {}", "+                {", "+                }", "-                {}", "+                {", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fea37dac984cd4f5ff2d4e928314654b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/ejb/WebsphereDeploymentTool.java", "commitBeforeChange": "7a3448dcea316f454dd0ba470f8b0825504ae309", "commitAfterChange": "b3cc9d80b2398ace0096a303b714bd13b791d9fc", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "      protected boolean isRebuildRequired( File genericJarFile, File websphereJarFile )", "signatureAfterChange": "     protected boolean isRebuildRequired( File genericJarFile, File websphereJarFile )         throws TaskException", "diff": ["-", "+        throws TaskException", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-                Project.MSG_VERBOSE );", "+                 Project.MSG_VERBOSE );", "-", "-                 && websphereJarFile.exists() && websphereJarFile.isFile() )", "+                && websphereJarFile.exists() && websphereJarFile.isFile() )", "-", "-", "-", "-", "-", "-", "-", "-                for( Enumeration e = genericJar.entries(); e.hasMoreElements();  )", "+                for( Enumeration e = genericJar.entries(); e.hasMoreElements(); )", "-", "-                    JarEntry je = ( JarEntry )e.nextElement();", "-", "+                    JarEntry je = (JarEntry)e.nextElement();", "-", "-                for( Enumeration e = wasJar.entries(); e.hasMoreElements();  )", "+                for( Enumeration e = wasJar.entries(); e.hasMoreElements(); )", "-", "-                    JarEntry je = ( JarEntry )e.nextElement();", "-", "+                    JarEntry je = (JarEntry)e.nextElement();", "-", "-", "-", "-", "-                for( Enumeration e = genericEntries.keys(); e.hasMoreElements();  )", "+                for( Enumeration e = genericEntries.keys(); e.hasMoreElements(); )", "-", "-                    String filepath = ( String )e.nextElement();", "-", "+                    String filepath = (String)e.nextElement();", "-", "-", "-", "-                        JarEntry genericEntry = ( JarEntry )genericEntries.get( filepath );", "-", "-                        JarEntry wasEntry = ( JarEntry )wasEntries.get( filepath );", "-", "+                        JarEntry genericEntry = (JarEntry)genericEntries.get( filepath );", "+                        JarEntry wasEntry = (JarEntry)wasEntries.get( filepath );", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-                    for( Enumeration e = wasEntries.elements(); e.hasMoreElements();  )", "+                    for( Enumeration e = wasEntries.elements(); e.hasMoreElements(); )", "-", "-                        byte[] buffer = new byte[1024];", "-", "+                        byte[] buffer = new byte[ 1024 ];", "-", "-", "-                        JarEntry je = ( JarEntry )e.nextElement();", "-", "+                        JarEntry je = (JarEntry)e.nextElement();", "-", "-", "-", "-", "-", "-", "-", "-", "-                                Project.MSG_VERBOSE );", "+                                 Project.MSG_VERBOSE );", "-                            je = ( JarEntry )replaceEntries.get( je.getName() );", "-", "+                            je = (JarEntry)replaceEntries.get( je.getName() );", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-                 + \". Details: \"", "-", "-                 + cnfe.getMessage();", "-", "-            throw new BuildException( cnfmsg, cnfe );", "-", "+                + \". Details: \"", "+                + cnfe.getMessage();", "+            throw new TaskException( cnfmsg, cnfe );", "-", "-", "-", "-                 + \". Details: \"", "-", "-                 + ioe.getMessage();", "-", "-            throw new BuildException( msg, ioe );", "-", "+                + \". Details: \"", "+                + ioe.getMessage();", "+            throw new TaskException( msg, ioe );", "-", "-", "-", "-", "-", "-", "-                {}", "-", "+                {", "+                }", "-", "-", "-", "-", "-", "-", "-", "-                {}", "-", "+                {", "+                }", "-", "-", "-", "-", "-", "-", "-", "-                {}", "-", "-", "-", "+                {", "+                }", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"]}]}
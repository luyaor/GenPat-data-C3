{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "10f8513fff08e3c0c794a4e7a218a206", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34b4dc7b7f477fbcc628b881d69f65fe", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Available.java", "commitBeforeChange": "816d018e67a8703d14b55316e338ea7a6ded4e17", "commitAfterChange": "5728d77e073954bae5660e35dd9486e448cf0e0d", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      private boolean checkFile()", "signatureAfterChange": "      private boolean checkFile()", "diff": ["-                File filename = new File(paths[i]);", "+                /* ", "+                ** filepath can be a list of directory and/or", "+                ** file names (gen'd via <fileset>)", "+                **", "+                ** look for:", "+                **   full-pathname specified == path in list", "+                **   full-pathname specified == parent dir of path in list", "+                **   simple name specified   == path in list", "+                **   simple name specified   == path in list + name", "+                **   simple name specified   == parent dir + name", "+                **   simple name specified   == parent of parent dir + name", "+                **", "+                */", "+                File path = new File(paths[i]);", "+                String dirname = path.getParent();", "-                        String dir = filename.getParent();", "-                        if(dir != null) {", "-                            int index = dir.lastIndexOf(File.separator);", "-                            String dirname = dir.substring(index + 1);", "-                            if(dirname.equals(file.getName())) {", "-                                log(\"Found directory: \" + dir, Project.MSG_VERBOSE);", "+                        if (path.isFile()) {", "+                            // full-pathname specified", "+                            if (dirname.equals(path.toString())) {", "+                                log(\"Found directory: \" + path, Project.MSG_VERBOSE);", "+                                return true;", "+                            // simple name specified", "+                            } else if(new File(dirname, file).isDirectory()) {", "+                                log(\"Found directory: \" + dirname + File.separator + file, Project.MSG_VERBOSE);", "+                        // full-pathname specified", "+                        } else if (path.toString().equals(new File(file).toString()) && path.isDirectory()) {", "+                                log(\"Found directory: \" + path, Project.MSG_VERBOSE);", "+                                return true;", "+                        // simple name specified", "+                        } else if (new File(path, file).isDirectory()) {", "+                                log(\"Found directory: \" + path + File.separator + file, Project.MSG_VERBOSE);", "+                                return true;", "-                    } else if (type.equalsIgnoreCase(\"file\")) {", "-                        if(filename.isFile()) {", "-                            if(filename.getName().equals(file.getName())) {", "-                                log(\"Found file: \" + filename, Project.MSG_VERBOSE);", "+                    /* end check for type dir */", "+                    } else {", "+                        if (path.toString().equals(new File(file).toString()) && path.isFile()) {", "+                                log(\"Found file: \" + path, Project.MSG_VERBOSE);", "-                            }", "+                        } else if (new File(path, file).isFile()) {", "+                            log(\"Found file: \" + path + File.separator + file, Project.MSG_VERBOSE);", "+                            return true;", "+                        } else if (new File(dirname, file).isFile()) {", "+                            log(\"Found file: \" + dirname + File.separator + file, Project.MSG_VERBOSE);", "+                            return true;", "-                } else if(filename.isFile()) {", "-                    if(filename.getName().equals(file.getName())) {", "-                        log(\"Found file: \" + filename, Project.MSG_VERBOSE);", "+                /* end check for specified type */", "+                } else {", "+                    if (path.toString().equals(new File(file).toString())) {", "+                        log(\"Found: \" + path, Project.MSG_VERBOSE);", "+                    } else if (new File(path, file).exists()) {", "+                        log(\"Found: \" + path + File.separator + file, Project.MSG_VERBOSE);", "+                        return true;", "+                    } else if (new File(dirname, file).exists()) {", "+                        log(\"Found: \" + dirname + File.separator + file, Project.MSG_VERBOSE);", "+                        return true;", "+                    } else {", "+                        File dir = new File(dirname);", "+                        dirname = dir.getParent();", "+                        if (new File(dirname, file).exists()) {", "+                            log(\"Found: \" + dirname + File.separator + file, Project.MSG_VERBOSE);", "+                            return true;", "+                        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e489c5b5368dbab8d4c5308a3e070f4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/bootstrap/org/apache/ant/builder/Builder.java", "commitBeforeChange": "e7d7a265edad357f5cec5384fa7e8c19b14a0e6b", "commitAfterChange": "0b2bea8de1c7eed2d38886c63529fefced7aec7d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private File[] getAnt1Files()", "signatureAfterChange": "     private File[] getAnt1Files()", "diff": ["-        files.add(new File(PACKAGE_ROOT, \"types/EnumeratedAttribute.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"types/Path.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"types/FileSet.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"types/PatternSet.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"types/Reference.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"types/FilterSet.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"types/FilterSetCollection.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"types/Mapper.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"types/ZipFileSet.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"types/ZipScanner.java\"));", "+        files.add(new File(TYPES_ROOT, \"EnumeratedAttribute.java\"));", "+        files.add(new File(TYPES_ROOT, \"Path.java\"));", "+        files.add(new File(TYPES_ROOT, \"FileSet.java\"));", "+        files.add(new File(TYPES_ROOT, \"PatternSet.java\"));", "+        files.add(new File(TYPES_ROOT, \"Reference.java\"));", "+        files.add(new File(TYPES_ROOT, \"FilterSet.java\"));", "+        files.add(new File(TYPES_ROOT, \"FilterSetCollection.java\"));", "+        files.add(new File(TYPES_ROOT, \"Mapper.java\"));", "+        files.add(new File(TYPES_ROOT, \"ZipFileSet.java\"));", "+        files.add(new File(TYPES_ROOT, \"ZipScanner.java\"));", "+        files.add(new File(TYPES_ROOT, \"FilterChain.java\"));", "+        files.add(new File(TYPES_ROOT, \"Parameter.java\"));", "+        files.add(new File(TYPES_ROOT, \"Parameterizable.java\"));", "+        files.add(new File(TYPES_ROOT, \"RegularExpression.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"types/Commandline.java\"));", "+        files.add(new File(PACKAGE_ROOT, \"util/regexp/Regexp.java\"));", "+        files.add(new File(PACKAGE_ROOT, \"util/regexp/RegexpMatcher.java\"));", "+        files.add(new File(PACKAGE_ROOT, \"util/regexp/RegexpFactory.java\"));", "+        files.add(new File(PACKAGE_ROOT, \"util/regexp/RegexpMatcherFactory.java\"));", "+        files.add(new File(TYPES_ROOT, \"Commandline.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"types/defaults.properties\"));", "+        files.add(new File(TYPES_ROOT, \"defaults.properties\"));", "+        ", "+        files.add(new File(FILTERS_ROOT, \"util/ChainReaderHelper.java\"));", "+        files.add(new File(FILTERS_ROOT, \"ClassConstants.java\"));", "+        files.add(new File(FILTERS_ROOT, \"ExpandProperties.java\"));", "+        files.add(new File(FILTERS_ROOT, \"HeadFilter.java\"));", "+        files.add(new File(FILTERS_ROOT, \"LineContains.java\"));", "+        files.add(new File(FILTERS_ROOT, \"LineContainsRegExp.java\"));", "+        files.add(new File(FILTERS_ROOT, \"PrefixLines.java\"));", "+        files.add(new File(FILTERS_ROOT, \"ReplaceTokens.java\"));", "+        files.add(new File(FILTERS_ROOT, \"StripJavaComments.java\"));", "+        files.add(new File(FILTERS_ROOT, \"StripLineBreaks.java\"));", "+        files.add(new File(FILTERS_ROOT, \"StripLineComments.java\"));", "+        files.add(new File(FILTERS_ROOT, \"TabsToSpaces.java\"));", "+        files.add(new File(FILTERS_ROOT, \"TailFilter.java\"));", "+        files.add(new File(FILTERS_ROOT, \"BaseFilterReader.java\"));", "+        files.add(new File(FILTERS_ROOT, \"ChainableReader.java\"));", "+        files.add(new File(TYPES_ROOT, \"AntFilterReader.java\"));", "+        files.add(new File(FILTERS_ROOT, \"BaseParamFilterReader.java\"));", "+        files.add(new File(FILTERS_ROOT, \".java\"));"]}]}
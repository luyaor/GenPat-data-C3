{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c26ee6e92fe9c17c934cd975d5fe41a5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64ebe05413460d81a2d96b45545dae74", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "fd2eebcccff567bb945e4712e990a06c36478ccf", "commitAfterChange": "af102bbd3d062facf9d1b393aefbc7e2c49f25a1", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 84, "signatureBeforeChange": "     private void evaluatePackages(Commandline toExecute, Path sourcePath,                                    Vector packages)", "signatureAfterChange": "     private void evaluatePackages(Commandline toExecute, Path sourcePath,                                    Vector packages)", "diff": ["+        FileSet fs = new FileSet();", "+        fs.setDefaultexcludes(useDefaultExcludes);", "+", "+        Enumeration e = packages.elements();", "+        while (e.hasMoreElements()) {", "+            String pkg = (String)e.nextElement();", "+            pkg = pkg.replace('.','/');", "+            if (pkg.endsWith(\"*\")) {", "+                pkg += \"*\";", "+            }", "+", "+            fs.createInclude().setName(pkg);", "+        } // while", "+", "-            Vector foundPackages = findPackages(source);", "+            fs.setDir(source);", "-            Enumeration e = foundPackages.elements();", "-            while (e.hasMoreElements()) {", "-                String pack = (String) e.nextElement();", "-                for (int i = 0; i < packages.size(); i++) {", "-                    if (matches(pack, (String) packages.elementAt(i))) {", "-                        if (!addedPackages.contains(pack)) {", "-                            toExecute.createArgument().setValue(pack);", "-                            addedPackages.addElement(pack);", "+            DirectoryScanner ds = fs.getDirectoryScanner(project);", "+            String[] packageDirs = ds.getIncludedDirectories();", "+", "+            for (int i=0; i<packageDirs.length; i++) {", "+                File pd = new File(source, packageDirs[i]);", "+                String[] files = pd.list(new FilenameFilter () {", "+                    public boolean accept(File dir1, String name) {", "+                        if (name.endsWith(\".java\")) {", "+                            return true;", "-                        break;", "+                        return false;\t// ignore dirs", "+                    }", "+                });", "+", "+                if (files.length > 0) {", "+                    String pkgDir = packageDirs[i].replace('/','.').replace('\\\\','.');", "+                    if (!addedPackages.contains(pkgDir)) {", "+                        toExecute.createArgument().setValue(pkgDir);", "+                        addedPackages.addElement(pkgDir);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83e80879ffc319bfd126ace2c2d15cc9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/PathConvert.java", "commitBeforeChange": "23b6d1df6030af3535bf7a588935312b240263ae", "commitAfterChange": "b7858a9322909d250bc55efe54d4af9bd335d174", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 19, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        Union savedPath = path;", "+        Resources savedPath = path;", "-            // Get the list of path components in canonical form", "-            String[] elems = path.list();", "-", "-            if (mapper != null) {", "-                FileNameMapper impl = mapper.getImplementation();", "-                List ret = new ArrayList();", "-                for (int i = 0; i < elems.length; ++i) {", "-                    String[] mapped = impl.mapFileName(elems[i]);", "-                    for (int m = 0; mapped != null && m < mapped.length; ++m) {", "-                        ret.add(mapped[m]);", "-                    }", "+            ResourceCollection resources = isPreserveDuplicates() ? (ResourceCollection) path : new Union(path);", "+            List ret = new ArrayList();", "+            FileNameMapper mapperImpl = mapper == null ? new IdentityMapper() : mapper.getImplementation();", "+            for (Iterator iter = resources.iterator(); iter.hasNext(); ) {", "+                String[] mapped = mapperImpl.mapFileName(String.valueOf(iter.next()));", "+                for (int m = 0; mapped != null && m < mapped.length; ++m) {", "+                    ret.add(mapped[m]);", "-                elems = (String[]) ret.toArray(new String[ret.size()]);", "-            for (int i = 0; i < elems.length; i++) {", "-                String elem = mapElement(elems[i]); // Apply the path prefix map", "+            boolean first = true;", "+            for (Iterator mappedIter = ret.iterator(); mappedIter.hasNext(); ) {", "+                String elem = mapElement((String) mappedIter.next()); // Apply the path prefix map", "-                if (i != 0) {", "+                if (first) {", "+                    first = false;", "-                StringTokenizer stDirectory =", "-                    new StringTokenizer(elem, fromDirSep, true);", "+                StringTokenizer stDirectory = new StringTokenizer(elem, fromDirSep, true);", "-                    log(\"Set property \" + property + \" = \" + value,", "-                        Project.MSG_VERBOSE);", "+                    log(\"Set property \" + property + \" = \" + value, Project.MSG_VERBOSE);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "16349c0783e73dbb86408cedce773c47", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b581464fe6afb16d60f232478894b06", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Checksum.java", "commitBeforeChange": "03d0b81deb49fb4b6b87fa7dd648daf8f3bcbf4b", "commitAfterChange": "80080d456c543d039426db35bcf35d90694bbd96", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private boolean validateAndExecute() throws BuildException", "signatureAfterChange": "     private boolean validateAndExecute() throws BuildException", "diff": ["-                    throw new BuildException(", "-                        \"Multiple files cannot be used when Property is specified\");", "+                    throw new BuildException(\"Multiple files cannot be used \" ", "+                        + \"when Property is specified\");", "-                    throw new BuildException(", "-                        \"Multiple files cannot be used when Property is specified\");", "+                    throw new BuildException(\"Multiple files cannot be used \" ", "+                        + \"when Property is specified\");", "-            throw new BuildException(", "-                \"ForceOverwrite cannot be used when conditions are being used.\");", "+            throw new BuildException(\"ForceOverwrite cannot be used when \" ", "+                + \"conditions are being used.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72392d00bf7240c02e3d78465aa5a7ce", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/pvcs/Pvcs.java", "commitBeforeChange": "fd6087beada84581d77aec9a94991cc2dfc4bb13", "commitAfterChange": "6154080061f869b4e425d608da3bd61fad967564", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void execute() throws org.apache.tools.ant.BuildException", "signatureAfterChange": "     public void execute() throws org.apache.tools.ant.BuildException", "diff": ["-        if(repository == null || repository.trim().equals(\"\")) {", "+        if (repository == null || repository.trim().equals(\"\")) {", "-        if(getWorkspace()!=null) {", "-            commandLine.createArgument().setValue(\"-sp\"+getWorkspace());", "+        if (getWorkspace() != null) {", "+            commandLine.createArgument().setValue(\"-sp\" + getWorkspace());", "-        commandLine.createArgument().setValue(\"-pr\"+getRepository());", "+        commandLine.createArgument().setValue(\"-pr\" + getRepository());", "-        if(getPvcsproject() == null && getPvcsprojects().isEmpty()) {", "+        if (getPvcsproject() == null && getPvcsprojects().isEmpty()) {", "-        if(getPvcsproject()!=null) {", "+        if (getPvcsproject() != null) {", "-        if(!getPvcsprojects().isEmpty()) {", "+        if (!getPvcsprojects().isEmpty()) {", "-                String projectName = ((PvcsProject)e.nextElement()).getName();", "+                String projectName = ((PvcsProject) e.nextElement()).getName();", "-                    throw new BuildException(\"name is a required attribute of pvcsproject\");", "+                    throw new BuildException(\"name is a required attribute \" ", "+                        + \"of pvcsproject\");", "-            tmp = new File(\"pvcs_ant_\"+rand.nextLong()+\".log\");", "-            tmp2 = new File(\"pvcs_ant_\"+rand.nextLong()+\".log\");", "+            tmp = new File(\"pvcs_ant_\" + rand.nextLong() + \".log\");", "+            tmp2 = new File(\"pvcs_ant_\" + rand.nextLong() + \".log\");", "-            result = runCmd(commandLine, new PumpStreamHandler(new FileOutputStream(tmp), new LogOutputStream(this,Project.MSG_WARN)));", "-            if ( result != 0 && !ignorerc) {", "+            result = runCmd(commandLine, ", "+                new PumpStreamHandler(new FileOutputStream(tmp), ", "+                new LogOutputStream(this, Project.MSG_WARN)));", "+            if (result != 0 && !ignorerc) {", "-            if(!tmp.exists()) {", "-                throw new BuildException(\"Communication between ant and pvcs failed. No output generated from executing PVCS commandline interface \\\"pcli\\\" and \\\"get\\\"\");", "+            if (!tmp.exists()) {", "+                throw new BuildException(\"Communication between ant and pvcs \" ", "+                    + \"failed. No output generated from executing PVCS \" ", "+                    + \"commandline interface \\\"pcli\\\" and \\\"get\\\"\");", "-            if(getForce()!=null && getForce().equals(\"yes\")) {", "+            if (getForce() != null && getForce().equals(\"yes\")) {", "-            if(getPromotiongroup()!=null) {", "-                commandLine.createArgument().setValue(\"-G\"+getPromotiongroup());", "+            if (getPromotiongroup() != null) {", "+                commandLine.createArgument().setValue(\"-G\" ", "+                    + getPromotiongroup());", "-                if(getLabel()!=null) {", "-                    commandLine.createArgument().setValue(\"-r\"+getLabel());", "+                if (getLabel() != null) {", "+                    commandLine.createArgument().setValue(\"-r\" + getLabel());", "-            commandLine.createArgument().setValue(\"@\"+tmp2.getAbsolutePath());", "+            commandLine.createArgument().setValue(\"@\" + tmp2.getAbsolutePath());", "-            result = runCmd(commandLine, new LogStreamHandler(this,Project.MSG_INFO, Project.MSG_WARN));", "-            if ( result != 0 && !ignorerc) {", "-                String msg = \"Failed executing: \" + commandLine.toString() + \". Return code was \"+result;", "+            result = runCmd(commandLine, ", "+                new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN));", "+            if (result != 0 && !ignorerc) {", "+                String msg = \"Failed executing: \" + commandLine.toString() ", "+                    + \". Return code was \" + result;", "-        } catch(FileNotFoundException e) {", "-            String msg = \"Failed executing: \" + commandLine.toString() + \". Exception: \"+e.getMessage();", "-            throw new BuildException(msg,location);", "-        } catch(IOException e) {", "-            String msg = \"Failed executing: \" + commandLine.toString() + \". Exception: \"+e.getMessage();", "-            throw new BuildException(msg,location);", "-        } catch(ParseException e) {", "-            String msg = \"Failed executing: \" + commandLine.toString() + \". Exception: \"+e.getMessage();", "-            throw new BuildException(msg,location);", "+        } catch (FileNotFoundException e) {", "+            String msg = \"Failed executing: \" + commandLine.toString() ", "+                + \". Exception: \" + e.getMessage();", "+            throw new BuildException(msg, location);", "+        } catch (IOException e) {", "+            String msg = \"Failed executing: \" + commandLine.toString() ", "+                + \". Exception: \" + e.getMessage();", "+            throw new BuildException(msg, location);", "+        } catch (ParseException e) {", "+            String msg = \"Failed executing: \" + commandLine.toString() ", "+                + \". Exception: \" + e.getMessage();", "+            throw new BuildException(msg, location);"]}]}
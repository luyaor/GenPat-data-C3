{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "42ae8e132f1d2b9781bc42c83e7d2ae8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "072c92ae2db78815e8620fff26125bec", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipFile.java", "commitBeforeChange": "aa43e37a025cdf54b8914b8283e57419a253ed59", "commitAfterChange": "dee95e3acc5154aee03ff5f91f9a56426ae79f3f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private Map populateFromCentralDirectory()         throws IOException", "signatureAfterChange": "     private Map<ZipEntry, NameAndComment> populateFromCentralDirectory()         throws IOException", "diff": ["-    private Map populateFromCentralDirectory()", "+    private Map<ZipEntry, NameAndComment> populateFromCentralDirectory()", "-        HashMap noUTF8Flag = new HashMap();", "+        HashMap<ZipEntry, NameAndComment> noUTF8Flag =", "+            new HashMap<ZipEntry, NameAndComment>();", "-", "-        byte[] cfh = new byte[CFH_LEN];", "-        final long cfhSig = ZipLong.getValue(ZipOutputStream.CFH_SIG);", "-        if (sig != cfhSig && startsWithLocalFileHeader()) {", "+", "+        if (sig != CFH_SIG && startsWithLocalFileHeader()) {", "-        while (sig == cfhSig) {", "-            archive.readFully(cfh);", "-            int off = 0;", "-            ZipEntry ze = new ZipEntry();", "-            int versionMadeBy = ZipShort.getValue(cfh, off);", "-            off += SHORT;", "-            ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);", "-", "-            off += SHORT; // skip version info", "-", "-            final int generalPurposeFlag = ZipShort.getValue(cfh, off);", "-            final boolean hasUTF8Flag = ", "-                (generalPurposeFlag & ZipOutputStream.UFT8_NAMES_FLAG) != 0;", "-            final ZipEncoding entryEncoding =", "-                hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;", "-", "-            off += SHORT;", "-", "-            ze.setMethod(ZipShort.getValue(cfh, off));", "-            off += SHORT;", "-", "-            // FIXME this is actually not very cpu cycles friendly as we are converting from", "-            // dos to java while the underlying Sun implementation will convert", "-            // from java to dos time for internal storage...", "-            long time = dosToJavaTime(ZipLong.getValue(cfh, off));", "-            ze.setTime(time);", "-            off += WORD;", "-", "-            ze.setCrc(ZipLong.getValue(cfh, off));", "-            off += WORD;", "-", "-            ze.setCompressedSize(ZipLong.getValue(cfh, off));", "-            off += WORD;", "-", "-            ze.setSize(ZipLong.getValue(cfh, off));", "-            off += WORD;", "-", "-            int fileNameLen = ZipShort.getValue(cfh, off);", "-            off += SHORT;", "-", "-            int extraLen = ZipShort.getValue(cfh, off);", "-            off += SHORT;", "-", "-            int commentLen = ZipShort.getValue(cfh, off);", "-            off += SHORT;", "-", "-            off += SHORT; // disk number", "-", "-            ze.setInternalAttributes(ZipShort.getValue(cfh, off));", "-            off += SHORT;", "-", "-            ze.setExternalAttributes(ZipLong.getValue(cfh, off));", "-            off += WORD;", "-", "-            byte[] fileName = new byte[fileNameLen];", "-            archive.readFully(fileName);", "-            ze.setName(entryEncoding.decode(fileName));", "-", "-            // LFH offset,", "-            OffsetEntry offset = new OffsetEntry();", "-            offset.headerOffset = ZipLong.getValue(cfh, off);", "-            // data offset will be filled later", "-            entries.put(ze, offset);", "-", "-            nameMap.put(ze.getName(), ze);", "-", "-            byte[] cdExtraData = new byte[extraLen];", "-            archive.readFully(cdExtraData);", "-            ze.setCentralDirectoryExtra(cdExtraData);", "-", "-            byte[] comment = new byte[commentLen];", "-            archive.readFully(comment);", "-            ze.setComment(entryEncoding.decode(comment));", "-", "+        while (sig == CFH_SIG) {", "+            readCentralDirectoryEntry(noUTF8Flag);", "-", "-            if (!hasUTF8Flag && useUnicodeExtraFields) {", "-                noUTF8Flag.put(ze, new NameAndComment(fileName, comment));", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a8f0f2f905dc3adceb0cc4b6a0eaedd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/types/selectors/DependSelectorTest.java", "commitBeforeChange": "33832587a4070693dd77d6e08fcf4e7d0d9a2b99", "commitAfterChange": "126daf8b31f6c01d1c6891581195db9956142970", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void testSelectionBehaviour()", "signatureAfterChange": "     public void testSelectionBehaviour()", "diff": ["-            if (!JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)) {", "-                s = (DependSelector)getInstance();", "-                s.setTargetdir(beddir);", "-                m = s.createMapper();", "-                m.setType(merge);", "-                m.setTo(\"asf-logo.gif.gz\");", "-                results = selectionString(s);", "-                assertEquals(\"TFFFFTTTFFF\", results.substring(0,11));", "+            s = (DependSelector)getInstance();", "+            s.setTargetdir(beddir);", "+            m = s.createMapper();", "+            m.setType(merge);", "+            m.setTo(\"asf-logo.gif.gz\");", "+            results = selectionString(s);", "+            assertEquals(\"TFFFFTTTFFF\", results.substring(0,11));", "-                s = (DependSelector)getInstance();", "-                s.setTargetdir(beddir);", "-                m = s.createMapper();", "-                m.setType(merge);", "-                m.setTo(\"asf-logo.gif.bz2\");", "-                results = selectionString(s);", "-                assertEquals(\"TTFTTTTTTTTT\", results);", "+            s = (DependSelector)getInstance();", "+            s.setTargetdir(beddir);", "+            m = s.createMapper();", "+            m.setType(merge);", "+            m.setTo(\"asf-logo.gif.bz2\");", "+            results = selectionString(s);", "+            assertEquals(\"TTFTTTTTTTTT\", results);", "-                // Test for path relative to project base directory", "-                s = (DependSelector)getInstance();", "-                subdir = new File(\"selectortest/tar/bz2\");", "-                s.setTargetdir(subdir);", "-                m = s.createMapper();", "-                m.setType(glob);", "-                m.setFrom(\"*.bz2\");", "-                m.setTo(\"*.tar.bz2\");", "-                results = selectionString(s);", "-                assertEquals(\"FFTFFFFFFTTF\", results);", "-            }", "+            // Test for path relative to project base directory", "+            s = (DependSelector)getInstance();", "+            subdir = new File(\"selectortest/tar/bz2\");", "+            s.setTargetdir(subdir);", "+            m = s.createMapper();", "+            m.setType(glob);", "+            m.setFrom(\"*.bz2\");", "+            m.setTo(\"*.tar.bz2\");", "+            results = selectionString(s);", "+            assertEquals(\"FFTFFFFFFTTF\", results);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac5e6972d7d0026690d71240626e35e2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04831766d358f8e1dcb4234b74769efa", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ComponentManager.java", "commitBeforeChange": "26d9c6536e7e605b92a6e4b20eb0cd25e116a689", "commitAfterChange": "f19f07d6e4c72f241057ecfc32d80be21201bbf7", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private Object createComponent(String componentName, BuildElement model)          throws AntException", "signatureAfterChange": "     private Object createComponent(String componentName, BuildElement model)          throws AntException", "diff": ["-        Object component = null;", "-        if (model != null) {", "-            for (Iterator i = aspects.iterator(); i.hasNext();) {", "-                Aspect aspect = (Aspect) i.next();", "-                component = aspect.preCreateComponent(component, model);", "-            }", "+        ImportInfo importInfo = getImport(componentName);", "+        if (importInfo == null) {", "+            throw new ExecutionException(\"There is no definition of the <\"", "+            + componentName + \"> component\");", "+        String className = importInfo.getClassName();", "-        if (component == null) {", "-            ImportInfo importInfo = getImport(componentName);", "-            if (importInfo == null) {", "-                throw new ExecutionException(\"There is no definition of the <\"", "-                + componentName + \"> component\");", "-            }", "-            String className = importInfo.getClassName();", "-", "-            ComponentLibrary componentLibrary", "+        ComponentLibrary componentLibrary", "-            component = createComponentFromDef(componentName, componentLibrary,", "-                importInfo.getDefinition(), model);", "-        }", "-", "-        if (model != null) {", "-            for (Iterator i = aspects.iterator(); i.hasNext();) {", "-                Aspect aspect = (Aspect) i.next();", "-                component = aspect.postCreateComponent(component, model);", "-            }", "-        }", "-", "-        return component;", "+        return createComponentFromDef(componentName, componentLibrary,", "+            importInfo.getDefinition(), model);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bd6c1dc9920913484d7c0d7c56c622a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/vfs/impl/DefaultFileSystemManager.java", "commitBeforeChange": "0cab9c1f29b2189d302d6b2e626595290dfef611", "commitAfterChange": "8c22fa33f300cd8587dee8635a7dda5c318f6540", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public FileObject resolveFile( FileObject baseFile, String uri ) throws FileSystemException", "signatureAfterChange": "     public FileObject resolveFile( final File baseFile, final String uri )         throws FileSystemException", "diff": ["+     */", "+    public FileObject resolveFile( final File baseFile, final String uri )", "+        throws FileSystemException", "+    {", "+        final FileObject baseFileObj = m_localFileProvider.findFileByLocalName( baseFile );", "+        return resolveFile( baseFileObj, uri );", "-    public FileObject resolveFile( FileObject baseFile, String uri ) throws FileSystemException", "-        String scheme = UriParser.extractScheme( uri );", "-            FileSystemProvider provider = (FileSystemProvider)m_providers.get( scheme );", "-            return m_localFileProvider.findFileByLocalName( uri );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dffc9602285f18edffae88293dc0382b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/Mapper.java", "commitBeforeChange": "3375d671acfa1fceb3325dc54fda5484b9e19208", "commitAfterChange": "2ead66e52c56fbc1a59789187ddba634ebe4ae2d", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public FileNameMapper getImplementation() throws BuildException", "signatureAfterChange": "     public FileNameMapper getImplementation() throws BuildException", "diff": ["-            if (type != null || classname != null ||", "-                to != null || from != null) {", "-                throw new BuildException(", "-                    \"for nested mappers, type, classname, to and from\" +", "-                    \" attributes are not allowed\");", "-            }", "-            if (chained != null) {", "-                container.setChained(chained.booleanValue());", "-            }", "-            if (type != null) {", "-                classname = type.getImplementation();", "-            }", "-", "-            Class c = null;", "-            if (classpath == null) {", "-                c = Class.forName(classname);", "-            } else {", "-                AntClassLoader al = getProject().createClassLoader(classpath);", "-                c = Class.forName(classname, true, al);", "-            }", "-", "-            FileNameMapper m = (FileNameMapper) c.newInstance();", "+            FileNameMapper m", "+                = (FileNameMapper)(getImplementationClass().newInstance());", "+", "-        } finally {", "-            if (type != null) {", "-                classname = null;", "-            }"]}]}
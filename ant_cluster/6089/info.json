{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bc01a4232484d6aefc10761251e8e76c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ea27a2fd693d766e955e39aa62e4796", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultObjectConfigurer.java", "commitBeforeChange": "1a02a5f570c6b91a6efc7233b47ad45feeee8b75", "commitAfterChange": "e0bed0aa143b567e005e51e811e5622e5103eacd", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void enableProperties()         throws ConfigurationException", "signatureAfterChange": "     private void enableProperties()         throws ConfigurationException", "diff": ["-        final Map creators = findCreators();", "-        final Set elemNames = new HashSet();", "-        elemNames.addAll( creators.keySet() );", "-        elemNames.addAll( adders.keySet() );", "-        final Iterator iterator = elemNames.iterator();", "+        final Iterator iterator = adders.keySet().iterator();", "-            final Method createMethod = (Method)creators.get( propName );", "-            Class type;", "-            if( createMethod != null && addMethod != null )", "-            {", "-                // Make sure the add method is more general than the create", "-                // method", "-                type = createMethod.getReturnType();", "-                final Class addType = addMethod.getParameterTypes()[ 0 ];", "-                if( !addType.isAssignableFrom( type ) )", "-                {", "-                    final String message =", "-                        REZ.getString( \"incompatible-element-types.error\",", "-                                       m_class.getName(),", "-                                       propName );", "-                    throw new ConfigurationException( message );", "-                }", "-            }", "-            else if( createMethod != null )", "-            {", "-                type = createMethod.getReturnType();", "-            }", "-            else", "-            {", "-                type = addMethod.getParameterTypes()[ 0 ];", "-            }", "-", "+            final Class type = addMethod.getParameterTypes()[ 0 ];", "-                                               createMethod,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd64cb697ad923a6051b540d45d6a7fc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/antlib/src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "6540a295cd786c80c28c14f6c544aa1d64ab3778", "commitAfterChange": "5cdfabc038e26f67080037ea0c7ad6ab284d821c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public Object createElement(Project project, Object element, String elementName)         throws BuildException", "signatureAfterChange": "     public Object createElement(Project project, Object parent,          String elementName) throws BuildException", "diff": ["-    public Object createElement(Project project, Object element, String elementName)", "-        throws BuildException {", "-\t", "+    public Object createElement(Project project, Object parent, ", "+        String elementName) throws BuildException {", "+        NestedCreator nc = (NestedCreator) nestedCreators.get(elementName);", "+        if (nc == null && parent instanceof DynamicConfigurator) {", "+            DynamicConfigurator dc = (DynamicConfigurator) parent;", "+            Object nestedElement = dc.createDynamicElement(elementName);", "+            if (nestedElement != null) {", "+                if (nestedElement instanceof ProjectComponent) {", "+                    ((ProjectComponent) nestedElement).setProject(project);", "+                }", "+                return nestedElement;", "+            }", "+        }", "+        if (nc == null) {", "+            String msg = project.getElementName(parent) +", "+                \" doesn't support the nested \\\"\" + elementName + \"\\\" element.\";", "+            throw new BuildException(msg);", "+        }", "-\t    // First check if there are any roles supported by this class", "-\t    Object nestedElement = project.createInRole(element, elementName);", "-\t    if (nestedElement == null) {", "-\t\tNestedCreator nc = ", "-\t\t    (NestedCreator) nestedCreators.get(elementName);", "-\t\tif (nc == null) {", "-\t\t    String msg = getElementName(project, element) +", "-\t\t\t\" doesn't support the nested \\\"\" + elementName + ", "-\t\t\t\"\\\" element.\";", "-\t\t    throw new BuildException(msg);", "-\t\t}", "-\t\tnestedElement = nc.create(element);", "-\t    }", "+            Object nestedElement = nc.create(parent);"]}]}
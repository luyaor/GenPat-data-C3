{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "31175e796ce8aaa4251a18a080c3688d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "465b6ad1b80ed18a2e79680f98dd5ec4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/AbstractClasspathResource.java", "commitBeforeChange": "28ca0623119a788c754840b78a50b052518b2006", "commitAfterChange": "211d0a8ea6b0e7f4c28b83abab1961b40bba90e7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public InputStream getInputStream() throws IOException", "signatureAfterChange": "     public InputStream getInputStream() throws IOException", "diff": ["+", "+        final ClassLoaderWithFlag classLoader = getClassLoader();", "+        return !classLoader.needsCleanup()", "+            ? openInputStream(classLoader.getLoader())", "+            : new FilterInputStream(openInputStream(classLoader.getLoader())) {", "+                    public void close() throws IOException {", "+                        FileUtils.close(in);", "+                        classLoader.cleanup();", "+                    }", "+                    protected void finalize() throws Throwable {", "+                        try {", "+                            close();", "+                        } finally {", "+                            super.finalize();", "+                        }", "+                    }", "+                };", "+    }", "-", "-        final ClassLoader classLoader = cl;", "-        return !clNeedsCleanup", "-            ? openInputStream(cl)", "-            : new FilterInputStream(openInputStream(cl)) {", "-                    public void close() throws IOException {", "-                        FileUtils.close(in);", "-                        ((AntClassLoader) classLoader).cleanup();", "-                    }", "-                    protected void finalize() throws Throwable {", "-                        try {", "-                            close();", "-                        } finally {", "-                            super.finalize();", "-                        }", "-                    }", "-                };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93f30c00c42a12a37b1c5c700b1be750", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ResourceUtils.java", "commitBeforeChange": "50558dd274c428071d86fbc78ce5431ebb88935c", "commitAfterChange": "a4c986354481641bc4b9811854fefaf2fec7f86a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public static ResourceCollection selectOutOfDateSources(ProjectComponent logTo,                                                             ResourceCollection source,                                                             FileNameMapper mapper,                                                             ResourceFactory targets,                                                             final long granularity)", "signatureAfterChange": "     public static ResourceCollection selectOutOfDateSources(ProjectComponent logTo,                                                             ResourceCollection source,                                                             FileNameMapper mapper,                                                             ResourceFactory targets,                                                             final long granularity)", "diff": ["+        logFuture(logTo, source, granularity);", "+        ResourceSelectorProvider p = ", "+            new ResourceSelectorProvider() {", "+                public ResourceSelector", "+                    getTargetSelectorForSource(final Resource sr) {", "+                    return new ResourceSelector() {", "+                        public boolean isSelected(Resource target) {", "+                            /* Extra I/O, probably wasted:", "+                               if (target.isDirectory()) {", "+                               return false;", "+                               }", "+                            */", "+                            return SelectorUtils.isOutOfDate(sr, target,", "+                                                             granularity);", "+                        }", "+                    };", "+                }", "+            };", "+        return selectSources(logTo, source, mapper, targets, p);", "+    }", "-        logFuture(logTo, source, granularity);", "-            r.add(new ResourceSelector() {", "-                public boolean isSelected(Resource target) {", "-                    /* Extra I/O, probably wasted:", "-                    if (target.isDirectory()) {", "-                        return false;", "-                    }", "-                     */", "-                    return SelectorUtils.isOutOfDate(sr, target, granularity);", "-                }", "-            });"]}]}
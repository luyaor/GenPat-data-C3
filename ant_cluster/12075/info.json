{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bcfc666adfe9fe4c8d116ad62e1c49c8", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0670afb3c8e4bd42b7a32d0992ccebea", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/starteam/TreeBasedTask.java", "commitBeforeChange": "6e6abf78f4cbabecf38ed8b9664b5bef88915742", "commitAfterChange": "f87b5ed7757c30daca5cf875c95520a00dce2269", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 16, "signatureBeforeChange": "            public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-     ", "-     public void execute() throws BuildException {", "-        // Get view as of the current time?", "-        View view = StarTeamFinder.openView(getUserName() + \":\" + getPassword()", "-                + \"@\" + getURL());", "-        View snapshot = new View(view, ViewConfiguration.createFromTime(", "-                new OLEDate()));", "-        Folder starteamrootfolder = ", "-\t    StarTeamFinder.findFolder(snapshot.getRootFolder(), this.rootStarteamFolder);", "-        if ( null == starteamrootfolder) {", "-            throw new BuildException(\"Unable to find root folderin repository.\");", "+    public void execute() throws BuildException {", "+        try {", "+            if (null != this.rootLocalFolder && !this.forced) {", "+                log(\"Warning: rootLocalFolder specified, but forcing off.\",", "+                        Project.MSG_WARN);", "+            }", "+            // Open the view", "+            View view =", "+                    StarTeamFinder.openView(getUserName() + \":\"", "+                    + getPassword()", "+                    + \"@\" + getURL());", "+", "+            if (null == view) {", "+                throw new BuildException(\"Cannot find view\" + getURL() +", "+                        \" in repository()\");", "+            }", "+", "+            View snapshot = createSnapshotView(view);", "+", "+            // find the starteam folder specified to be the root of the", "+            // operation.  Throw if it can't be found.", "+            Folder starteamrootfolder =", "+                    StarTeamFinder.findFolder(snapshot.getRootFolder(),", "+                            this.rootStarteamFolder);", "+", "+            if (null == starteamrootfolder) {", "+                throw new BuildException(", "+                        \"Unable to find root folder in repository.\");", "+            }", "+", "+            // set the local folder.", "+            java.io.File localrootfolder;", "+            if (null == this.rootLocalFolder) {", "+                // use Star Team's default", "+                localrootfolder =", "+                        new java.io.File(starteamrootfolder.getPath());", "+            } else {", "+                // force StarTeam to use our folder", "+                localrootfolder = new java.io.File(getRootLocalFolder());", "+                log(\"overriding local folder to \" + localrootfolder);", "+            }", "+", "+            // Inspect everything in the root folder and then recursively", "+            visit(starteamrootfolder, localrootfolder);", "+        } catch (Exception e) {", "+            throw new BuildException(e);", "-", "-\tjava.io.File localrootfolder;", "-", "-\tif (null == this.rootLocalFolder) {", "-\t    // use Star Team's default", "-\t    localrootfolder = new java.io.File(starteamrootfolder.getPath());", "-\t} else {", "-\t    // force StarTeam to use our folder", "-\t    localrootfolder = new java.io.File(getRootLocalFolder());", "-\t    log(\"overriding local folder to \" + localrootfolder);", "-\t}", "-", "-        // Inspect everything in the root folder and then recursively", "-        visit(starteamrootfolder, localrootfolder);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c11ab9a3d4a88b2c4c113ee525f8761b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "3ce64dd501a7e5dfd84967399cc4c68c643de810", "commitAfterChange": "b941f2ef443cbbaec2b995b3c34958067c4979c3", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 49, "signatureBeforeChange": "     private void cat(ResourceCollection c)", "signatureAfterChange": "     private void pump(InputStream in, OutputStream out)", "diff": ["-    /** perform the concatenation */", "-    private void cat(ResourceCollection c) {", "-        OutputStream os = null;", "-        char[] buffer = new char[BUFFER_SIZE];", "-", "-        try {", "-            PrintWriter writer = null;", "-", "-            if (outputWriter != null) {", "-                writer = new PrintWriter(outputWriter);", "-            } else {", "-                if (destinationFile == null) {", "-                    // Log using WARN so it displays in 'quiet' mode.", "-                    os = new LogOutputStream(this, Project.MSG_WARN);", "-                } else {", "-                    // ensure that the parent dir of dest file exists", "-                    File parent = destinationFile.getParentFile();", "-                    if (!parent.exists()) {", "-                        parent.mkdirs();", "-                    }", "-                    os = new FileOutputStream(destinationFile.getAbsolutePath(),", "-                                              append);", "-                }", "-                if (outputEncoding == null) {", "-                    writer = new PrintWriter(", "-                        new BufferedWriter(", "-                            new OutputStreamWriter(os)));", "-                } else {", "-                    writer = new PrintWriter(", "-                        new BufferedWriter(", "-                            new OutputStreamWriter(os, outputEncoding)));", "-                }", "-            }", "-            if (header != null) {", "-                if (header.getFiltering()) {", "-                    concatenate(", "-                        buffer, writer, new StringReader(header.getValue()));", "-                } else {", "-                    writer.print(header.getValue());", "-                }", "-            }", "-            if (c.size() > 0) {", "-                concatenate(buffer, writer, new MultiReader(c));", "-            }", "-            if (footer != null) {", "-                if (footer.getFiltering()) {", "-                    concatenate(", "-                        buffer, writer, new StringReader(footer.getValue()));", "-                } else {", "-                    writer.print(footer.getValue());", "-                }", "-            }", "-            writer.flush();", "-            if (os != null) {", "-                os.flush();", "-            }", "-        } catch (IOException ioex) {", "-            throw new BuildException(\"Error while concatenating: \"", "-                                     + ioex.getMessage(), ioex);", "-        } finally {", "-            FileUtils.close(os);", "-        }", "-    }", "+     */", "+    private void pump(InputStream in, OutputStream out) {", "+        Thread t = new Thread(new StreamPumper(in, out));", "+        t.start();", "+        try {", "+            t.join();", "+        } catch (InterruptedException e) {", "+            try {", "+                t.join();", "+            } catch (InterruptedException ee) {", "+                // Empty", "+            }", "+        } finally {", "+            FileUtils.close(in);", "+            FileUtils.close(out);", "+        }", "+    }"]}]}
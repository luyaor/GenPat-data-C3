{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2ec3a61a438d59a0fc77737b90c42c62", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1aed0a8df40353468adf65077075f0ed", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/PropertyHelper.java", "commitBeforeChange": "f9de93c35b4a4327c0cf29afd25ecf9c486f7647", "commitAfterChange": "902b72ec83e985a35e2e9fc26e41e2319cc7ea1e", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public Object parseProperties(String value) throws BuildException", "signatureAfterChange": "     public Object parseProperties(String value) throws BuildException", "diff": ["-        if (value == null || \"\".equals(value)) {", "-            return value;", "-        }", "-        ParsePosition pos = new ParsePosition(0);", "-        Object o = parseNextProperty(value, pos);", "-        if (o != null && pos.getIndex() == value.length()) {", "-            return o;", "-        }", "-        StringBuffer sb = new StringBuffer(value.length() * 2);", "-        if (o == null) {", "-            sb.append(value.charAt(pos.getIndex()));", "-            pos.setIndex(pos.getIndex() + 1);", "-        } else {", "-            sb.append(o);", "-        }", "-        while (pos.getIndex() < value.length()) {", "-            o = parseNextProperty(value, pos);", "-            if (o == null) {", "-                sb.append(value.charAt(pos.getIndex()));", "-                pos.setIndex(pos.getIndex() + 1);", "-            } else {", "-                sb.append(o);", "-            }", "-        }", "-        return sb.toString();", "+        return new ParseProperties(getProject(), getExpanders(), this)", "+            .parseProperties(value);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62e7b22c3c77389e00461857af1900e4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/regexp/Jdk14RegexpRegexp.java", "commitBeforeChange": "dfc1957328247cc79d3df7eb6f6c113e58c1dc31", "commitAfterChange": "be53ecfdc2ff0f8e955eada253ea8d3db38addeb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public String substitute(String input, String argument, int options)         throws BuildException", "signatureAfterChange": "      public String substitute(String input, String argument, int options)         throws BuildException", "diff": ["+        // translate \\1 to $(1) so that the Matcher will work", "+        StringBuffer subst = new StringBuffer();", "+        for (int i=0; i<argument.length(); i++) {", "+            char c = argument.charAt(i);", "+            if (c == '\\\\') {", "+                if (++i < argument.length()) {", "+                    c = argument.charAt(i);", "+                    int value = Character.digit(c, 10);", "+                    if (value > -1) {", "+                        subst.append(\"$(\").append(value).append(\")\");", "+                    } else {", "+                        subst.append(c);", "+                    }", "+                } else {", "+                    // XXX - should throw an exception instead?", "+                    subst.append('\\\\');", "+                }", "+            } else {", "+                subst.append(c);", "+            }", "+        }", "+        argument = subst.toString();", "+        ", "-            if (res)", "+            if (res) {", "-            else", "+                m.appendTail(sb);", "+            } else {", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2664d2ddb70f32bb91e6395a61e428a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/dotnet/DotnetCompile.java", "commitBeforeChange": "c5d224e2fabd860332b84182429505a5f2a2ee54", "commitAfterChange": "6f8402d926c54252e54ac79efa3f5480ab7323c3", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "      protected int addReferenceFilesets(NetCommand command, long outputTimestamp)", "signatureAfterChange": "      protected int addReferenceFilesets(NetCommand command, long outputTimestamp)", "diff": ["-        StringBuffer referenceList = new StringBuffer(REFERENCE_OPTION);", "-        boolean firstEntry = true;", "-                if (!firstEntry) {", "-                    referenceList.append(getReferenceDelimiter());", "-                } else if (isWindows) {", "-                    referenceList.append('\\\"');", "-                }", "-                referenceList.append(file.toString());", "-                firstEntry = false;", "+                if (isWindows) command.addArgument('\"'+REFERENCE_OPTION+file.toString()+'\"');", "+                else command.addArgument(REFERENCE_OPTION+file.toString());", "-        // hack: This means we've added at least one reference that's", "-        // a managed binary", "-        if (!firstEntry) {", "-            //add it all to an argument", "-            if (isWindows) {", "-                command.addArgument(referenceList.toString() + '\\\"');", "-            } else {", "-                command.addArgument(referenceList.toString());", "-            }", "-        }", "-        ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2fcd63d5ce15f76532a1259681639a2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/IPlanetEjbc.java", "commitBeforeChange": "aa2742957752bcb4e6511924b16f1704446178b4", "commitAfterChange": "41bb266266921a6fbc381b7b22b788f54797afb3", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 56, "signatureBeforeChange": "         private long sourceClassesModified(File buildDir)", "signatureAfterChange": "         private long sourceClassesModified(File buildDir)", "diff": ["+            File pkFile;         // File for the EJB primary key class", "+", "+            /* Check the timestamp of the primary key class */", "+            if (primaryKey != null) {", "+                pkFile = primaryKey.getClassFile(buildDir);", "+                modified = pkFile.lastModified();", "+                if (modified == -1) {", "+                    System.out.println(\"The class \"", "+                                    + primaryKey.getQualifiedClassName() + \"couldn't be \"", "+                                    + \"found on the classpath\");", "+                    return -1;", "+                }", "+                latestModified = Math.max(latestModified, modified);", "+            }", "+            else {", "+                pkFile = null;", "+            }", "+", "+            if (pkFile != null) {", "+                pathToFile = primaryKey.getQualifiedClassName();", "+                pathToFile = pathToFile.replace('.', File.separatorChar) + \".class\";", "+                ejbFiles.put(pathToFile, pkFile);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9195e98534f10a655925b25978d65d2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/regexp/JakartaOroRegexp.java", "commitBeforeChange": "dfc1957328247cc79d3df7eb6f6c113e58c1dc31", "commitAfterChange": "be53ecfdc2ff0f8e955eada253ea8d3db38addeb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public String substitute(String input, String argument, int options)         throws BuildException", "signatureAfterChange": "      public String substitute(String input, String argument, int options)         throws BuildException", "diff": ["-        // Determine replacement Type", "-        int sOptions = getSubsOptions(options);", "+        // translate \\1 to $1 so that the Perl5Substitution will work", "+        StringBuffer subst = new StringBuffer();", "+        for (int i=0; i<argument.length(); i++) {", "+            char c = argument.charAt(i);", "+            if (c == '\\\\') {", "+                if (++i < argument.length()) {", "+                    c = argument.charAt(i);", "+                    int value = Character.digit(c, 10);", "+                    if (value > -1) {", "+                        subst.append(\"$\").append(value);", "+                    } else {", "+                        subst.append(c);", "+                    }", "+                } else {", "+                    // XXX - should throw an exception instead?", "+                    subst.append('\\\\');", "+                }", "+            } else {", "+                subst.append(c);", "+            }", "+        }", "+        ", "-        Substitution s = new Perl5Substitution(argument, sOptions);", "+        Substitution s = ", "+            new Perl5Substitution(subst.toString(), ", "+                                  Perl5Substitution.INTERPOLATE_ALL);", "-                               input);", "+                               input,", "+                               getSubsOptions(options));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f44bbde2cc8a05aeb9b846f7ca3eecc3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/optional/image/Scale.java", "commitBeforeChange": "f8c14ca446cbd22d0d9e633ff2b0a13a10ccd313", "commitAfterChange": "ff9b546d81da21c253e71319dc8a756380bac15c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public PlanarImage performScale(PlanarImage image)", "signatureAfterChange": "      public PlanarImage performScale(PlanarImage image)", "diff": ["-        float x_fl = getWidth();", "-        float y_fl = getHeight();", "+        float xFl = getWidth();", "+        float yFl = getHeight();", "-        if (!x_percent) {", "-            x_fl = (x_fl / image.getWidth());", "+        if (!xPercent) {", "+            xFl = (xFl / image.getWidth());", "-        if (!y_percent) {", "-            y_fl = (y_fl / image.getHeight());", "+        if (!yPercent) {", "+            yFl = (yFl / image.getHeight());", "-            y_fl = x_fl;", "+            yFl = xFl;", "-            x_fl = y_fl;", "+            xFl = yFl;", "-            x_fl = y_fl = Math.min(x_fl, y_fl);", "+            yFl = Math.min(xFl, yFl);", "+            xFl = yFl;", "-            x_fl = y_fl = Math.max(x_fl, y_fl);", "+            yFl = Math.max(xFl, yFl);", "+            xFl = yFl;", "-        pb.add(new Float(x_fl));", "-        pb.add(new Float(y_fl));", "+        pb.add(new Float(xFl));", "+        pb.add(new Float(yFl));", "-        log(\"\\tScaling to \" + (x_fl * 100) + \"% x \" + (y_fl * 100) + \"%\");", "+        log(\"\\tScaling to \" + (xFl * 100) + \"% x \" + (yFl * 100) + \"%\");"]}]}
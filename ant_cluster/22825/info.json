{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "42ad5522dde3f5221b273cf11666716a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "434e01175f36495fc65d3fcaee39f1bc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/condition/IsFileSelectedTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void testNotSelector()", "signatureAfterChange": "      @Test     public void testNotSelector()", "diff": ["+", "+    @Test", "-        expectBuildExceptionContaining(", "-            \"not.selector\", \"checking for use as a selector (not allowed)\",", "-            \"fileset doesn't support the nested \\\"isfile\");", "+        try {", "+            buildRule.executeTarget(\"not.selector\");", "+            fail(\"Exception should have been thrown: checking for use as a selector (not allowed)\");", "+        } catch(BuildException ex) {", "+            AntAssert.assertContains(\"fileset doesn't support the nested \\\"isfile\",", "+                    ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b77d00914a8e513181328676e4003c83", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/LoaderRefTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testBadRef()", "signatureAfterChange": "     @Test \tpublic void testBadRef()", "diff": ["-    public void testBadRef() {", "-        expectBuildExceptionContaining(\"testbadref\", \"Should fail due to ref \"", "-            + \"not being a class loader\", \"does not reference a class loader\");", "+    @Test", "+\tpublic void testBadRef() {", "+    \ttry {", "+    \t\tbuildRule.executeTarget(\"testbadref\");", "+    \t\tfail(\"BuildRule should have thrown an exception due to a bad classloader being specified\");", "+    \t} catch (BuildException ex) {", "+    \t\tassertContains(\"Should fail due to ref not being a class loader\", \"does not reference a class loader\", ex.getMessage());", "+    \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e28d183a4261cc9688c57df010e5ff2d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/AddTypeTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void testConditionConditionTask()", "signatureAfterChange": "          @Test     public void testConditionConditionTask()", "diff": ["+    ", "+    @Test", "-        expectBuildExceptionContaining(", "-            \"condition.condition.task\", \"task masking condition\",", "-            \"doesn't support the nested\");", "+        try {", "+            buildRule.executeTarget(\"condition.condition.task\");", "+            fail(\"Build exception expected: Task masking condition\");", "+        } catch (BuildException ex) {", "+             AntAssert.assertContains(\"doesn't support the nested\", ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaa00c3cc417bf43890d08e5638d0df2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/AddTypeTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public void testNestedAB()", "signatureAfterChange": "      @Test     public void testNestedAB()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(", "-            \"nested.ab\", \"Should have got ambiguous\", \"ambiguous\");", "+        try {", "+            buildRule.executeTarget(\"nested.ab\");", "+            fail(\"Build exception expected: Should have got ambiguous\");", "+        } catch (BuildException ex) {", "+            AntAssert.assertContains(\"ambiguous\", ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f47b8ee279e157b044707fc8536d86ea", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/condition/TypeFoundTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void testUndefined()", "signatureAfterChange": "      @Test     public void testUndefined()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testUndefined\",\"left out the name attribute\", \"No type specified\");", "+        try {", "+            buildRule.executeTarget(\"testUndefined\");", "+            fail(\"Build exception expected: left out the name attribute\");", "+        } catch(BuildException ex) {", "+            AntAssert.assertContains(\"No type specified\", ex.getMessage());", "+        }"]}]}
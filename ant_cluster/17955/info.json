{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "79714a13e91d8535cfac8c0e68d18e8a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e06b38c30541ec0982e06d5fce1ef16", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javac.java", "commitBeforeChange": "40cfacf23be83a5ef4fb8a5edf0fba6c7db909fc", "commitAfterChange": "2f3fc4ceb269ba3d0285afb816295ff76e503b10", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "     protected Path getCompileClasspath(boolean addRuntime)", "signatureAfterChange": "     protected Path getCompileClasspath(boolean addRuntime)", "diff": ["-            String order = project.getProperty(\"build.sysclasspath\");", "-            if (order == null) order=\"first\";", "-", "-            if (order.equals(\"only\")) {", "-                // only: the developer knows what (s)he is doing", "-                classpath.addExisting(Path.systemClasspath);", "-", "-            } else if (order.equals(\"last\")) {", "-                // last: don't trust the developer", "-                classpath.addExisting(compileClasspath);", "-                classpath.addExisting(Path.systemClasspath);", "-", "-            } else if (order.equals(\"ignore\")) {", "-                // ignore: don't trust anyone", "-                classpath.addExisting(compileClasspath);", "-                addRuntime = true;", "-", "-            } else {", "-                // first: developer could use a little help", "-                classpath.addExisting(Path.systemClasspath);", "-                classpath.addExisting(compileClasspath);", "-            }", "+            classpath.addExisting(compileClasspath.concatSystemClasspath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55339f0af5bcec58ad42f62c43ddb04e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Rmic.java", "commitBeforeChange": "926fcdcbeb003e509c0a1d03208f0eab2bab6813", "commitAfterChange": "5cc29f61e6a8fbcf8cb8f0fe2f848955c41f486a", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 15, "signatureBeforeChange": "      private Path getCompileClasspath(File baseFile)", "signatureAfterChange": "     public Path getClasspath()", "diff": ["+     */", "+    public Path getClasspath() {", "+        return compileClasspath; ", "+    }", "-", "-    private Path getCompileClasspath(File baseFile) {", "-        // add dest dir to classpath so that previously compiled and", "-        // untouched classes are on classpath", "-        Path classpath = new Path(project, baseFile.getAbsolutePath());", "-", "-        // Combine the build classpath with the system classpath, in an ", "-        // order determined by the value of build.classpath", "-        if (compileClasspath == null) {", "-            classpath.addExisting(Path.systemClasspath);", "-        } else {", "-            classpath.addExisting(compileClasspath.concatSystemClasspath());", "-        }", "-", "-        // in jdk 1.2, the system classes are not on the visible classpath.", "-        if (Project.getJavaVersion().startsWith(\"1.2\")) {", "-            String bootcp = System.getProperty(\"sun.boot.class.path\");", "-            if (bootcp != null) {", "-                classpath.addExisting(new Path(project, bootcp));", "-        return classpath;"]}]}
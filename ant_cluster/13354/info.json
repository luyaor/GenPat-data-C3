{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f5a802e68ac84841001a002cf7157706", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a190b921af9c53079e7d2a62d7d89b3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/tar/TarOutputStream.java", "commitBeforeChange": "86fad58f2d862eaa97e4633c6819dbe86912c9a7", "commitAfterChange": "18e098d81f228e4e36bbbbf98ed41203556a422c", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void putNextEntry(TarEntry entry) throws IOException", "signatureAfterChange": "     public void putNextEntry(TarEntry entry) throws IOException", "diff": ["-        final ByteBuffer encodedName = encoding.encode(entryName);", "-        final int nameLen = encodedName.limit() - encodedName.position();", "-        boolean paxHeaderContainsPath = false;", "-        if (nameLen >= TarConstants.NAMELEN) {", "+        boolean paxHeaderContainsPath = handleLongName(entryName, paxHeaders, \"path\",", "+                                                       TarConstants.LF_GNUTYPE_LONGNAME);", "-            if (longFileMode == LONGFILE_POSIX) {", "-                paxHeaders.put(\"path\", entryName);", "-                paxHeaderContainsPath = true;", "-            } else if (longFileMode == LONGFILE_GNU) {", "-                // create a TarEntry for the LongLink, the contents", "-                // of which are the entry's name", "-                TarEntry longLinkEntry = new TarEntry(TarConstants.GNU_LONGLINK,", "-                                                      TarConstants.LF_GNUTYPE_LONGNAME);", "-", "-                longLinkEntry.setSize(nameLen + 1); // +1 for NUL", "-                putNextEntry(longLinkEntry);", "-                write(encodedName.array(), encodedName.arrayOffset(), nameLen);", "-                write(0); // NUL terminator", "-                closeEntry();", "-            } else if (longFileMode != LONGFILE_TRUNCATE) {", "-                throw new RuntimeException(\"file name '\" + entryName", "-                                           + \"' is too long ( > \"", "-                                           + TarConstants.NAMELEN + \" bytes)\");", "-            }", "-        }", "+        final String linkName = entry.getLinkName();", "+        boolean paxHeaderContainsLinkPath = linkName != null", "+            && handleLongName(linkName, paxHeaders, \"linkpath\",", "+                              TarConstants.LF_GNUTYPE_LONGLINK);", "-        if (addPaxHeadersForNonAsciiNames", "+        if (addPaxHeadersForNonAsciiNames && !paxHeaderContainsLinkPath", "-            && !ASCII.canEncode(entry.getLinkName())) {", "-            paxHeaders.put(\"linkpath\", entry.getLinkName());", "+            && !ASCII.canEncode(linkName)) {", "+            paxHeaders.put(\"linkpath\", linkName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4cd287ff8cc63c1d6e054219d374896", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/tar/TarOutputStream.java", "commitBeforeChange": "b43f4224d8fe9d1e7d628e88df394a7dfed46d1b", "commitAfterChange": "2e5b53fa106b848646493cb6f6ea74616973aca0", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void putNextEntry(TarEntry entry) throws IOException", "signatureAfterChange": "     public void putNextEntry(TarEntry entry) throws IOException", "diff": ["-        if (entry.getName().length() >= TarConstants.NAMELEN) {", "+        if(finished) {", "+            throw new IOException(\"Stream has already been finished\");", "+        }", "+        Map<String, String> paxHeaders = new HashMap<String, String>();", "+        final String entryName = entry.getName();", "+        final byte[] nameBytes = encoding.encode(entryName).array();", "+        boolean paxHeaderContainsPath = false;", "+        if (nameBytes.length >= TarConstants.NAMELEN) {", "-            if (longFileMode == LONGFILE_GNU) {", "+            if (longFileMode == LONGFILE_POSIX) {", "+                paxHeaders.put(\"path\", entryName);", "+                paxHeaderContainsPath = true;", "+            } else if (longFileMode == LONGFILE_GNU) {", "-                longLinkEntry.setSize(entry.getName().length() + 1);", "+                longLinkEntry.setSize(nameBytes.length + 1); // +1 for NUL", "-                write(entry.getName().getBytes());", "-                write(0);", "+                write(nameBytes);", "+                write(0); // NUL terminator", "-                throw new RuntimeException(\"file name '\" + entry.getName()", "-                                             + \"' is too long ( > \"", "-                                             + TarConstants.NAMELEN + \" bytes)\");", "+                throw new RuntimeException(\"file name '\" + entryName", "+                                           + \"' is too long ( > \"", "+                                           + TarConstants.NAMELEN + \" bytes)\");", "-        entry.writeEntryHeader(recordBuf);", "+        if (bigNumberMode == BIGNUMBER_POSIX) {", "+            addPaxHeadersForBigNumbers(paxHeaders, entry);", "+        } else if (bigNumberMode != BIGNUMBER_STAR) {", "+            failForBigNumbers(entry);", "+        }", "+", "+        if (addPaxHeadersForNonAsciiNames && !paxHeaderContainsPath", "+            && !ASCII.canEncode(entryName)) {", "+            paxHeaders.put(\"path\", entryName);", "+        }", "+", "+        if (addPaxHeadersForNonAsciiNames", "+            && (entry.isLink() || entry.isSymbolicLink())", "+            && !ASCII.canEncode(entry.getLinkName())) {", "+            paxHeaders.put(\"linkpath\", entry.getLinkName());", "+        }", "+", "+        if (paxHeaders.size() > 0) {", "+            writePaxHeaders(entryName, paxHeaders);", "+        }", "+", "+        entry.writeEntryHeader(recordBuf, encoding,", "+                               bigNumberMode == BIGNUMBER_STAR);", "-        currName = entry.getName();", "+        currName = entryName;", "+        haveUnclosedEntry = true;"]}]}
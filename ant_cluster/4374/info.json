{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4912668136118854f9fa09dee3d88934", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f9e676217009dc7bb029eddc879544b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/dotnet/CSharp.java", "commitBeforeChange": "e5a85d7265ed5c9a0e391d5d00596368229e8014", "commitAfterChange": "620b8828e3694634896ff05057883da63211fc2f", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public void execute()              throws BuildException", "signatureAfterChange": "     public String getFileExtension()", "diff": ["-     */", "-    public void execute()", "-             throws BuildException {", "-        if (srcDir == null) {", "-            srcDir = getProject().resolveFile(\".\");", "-        }", "-        log(\"CSC working from source directory \" + srcDir, Project.MSG_VERBOSE);", "-        validate();", "-", "-        NetCommand command = new NetCommand(this, \"CSC\", csc_exe_name);", "-        command.setFailOnError(getFailOnError());", "-        //DEBUG helper", "-        command.setTraceCommandLine(true);", "-        //fill in args", "-        command.addArgument(\"/nologo\");", "-        command.addArgument(getAdditionalModulesParameter());", "-        command.addArgument(getDefinitionsParameter());", "-        command.addArgument(getDebugParameter());", "-        command.addArgument(getDocFileParameter());", "-        command.addArgument(getIncrementalParameter());", "-        command.addArgument(getMainClassParameter());", "-        command.addArgument(getOptimizeParameter());", "-        command.addArgument(getReferencesParameter());", "-        command.addArgument(getTargetTypeParameter());", "-        command.addArgument(getUnsafeParameter());", "-        command.addArgument(getWarnLevelParameter());", "-        command.addArgument(getWin32IconParameter());", "-        command.addArgument(getOutputFileParameter());", "-        command.addArgument(getIncludeDefaultReferencesParameter());", "-        command.addArgument(getDefaultReferenceParameter());", "-        command.addArgument(getWin32ResParameter());", "-        command.addArgument(getUtf8OutputParameter());", "-        command.addArgument(getNoConfigParameter());", "-        command.addArgument(getFullPathsParameter());", "-        command.addArgument(getExtraOptionsParameter());", "-        command.addArgument(getFileAlignParameter());", "-", "-        long outputTimestamp;", "-        if (outputFile != null && outputFile.exists()) {", "-            outputTimestamp = outputFile.lastModified();", "-        } else {", "-            outputTimestamp = 0;", "-        }", "-        int filesOutOfDate = 0;", "-        //get dependencies list.", "-        DirectoryScanner scanner = super.getDirectoryScanner(srcDir);", "-        String[] dependencies = scanner.getIncludedFiles();", "-        log(\"compiling \" + dependencies.length + \" file\" + ((dependencies.length == 1) ? \"\" : \"s\"));", "-        File base = scanner.getBasedir();", "-        //add to the command", "-        for (int i = 0; i < dependencies.length; i++) {", "-            File targetFile = new File(base, dependencies[i]);", "-            log(targetFile.toString(), Project.MSG_VERBOSE);", "-            command.addArgument(targetFile.toString());", "-            if (targetFile.lastModified() > outputTimestamp) {", "-                filesOutOfDate++;", "-                log(\"Source file \" + targetFile.toString() + \" is out of date\",", "-                        Project.MSG_VERBOSE);", "-            } else {", "-                log(\"Source file \" + targetFile.toString() + \" is up to date\",", "-                        Project.MSG_VERBOSE);", "-            ", "-        }", "-", "-        //now run the command of exe + settings + files", "-        if (filesOutOfDate > 0) {", "-            command.runCommand();", "+     */", "+    public String getFileExtension() {", "+        return \"cs\";", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0233a5c003c08f1d4aceab256e85928", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Java.java", "commitBeforeChange": "31b5a1c762df9ad5cf58134ce1a09a6c97440759", "commitAfterChange": "6872650389c074d2a941d8192dfa348a216b4848", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public int executeJava() throws BuildException", "signatureAfterChange": "     public int executeJava() throws BuildException", "diff": ["+        return executeJava(getCommandLine());", "+    }", "-                    return fork(getCommandLine().getCommandline());", "-                    spawn(getCommandLine().getCommandline());", "-                    run(getCommandLine());"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f9ff4ceb923b3018a0b925e0247cf35a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bf9dc77cb57b6d472672a4ebe7bda9d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/launch/Locator.java", "commitBeforeChange": "a500ff1e5013cbbb7830d5b47fa24dc4db1bc400", "commitAfterChange": "bcf84f5f14a9f80df80ca5836fc5b08d8be7c295", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public static File getResourceSource(ClassLoader c, String resource)", "signatureAfterChange": "     public static File getResourceSource(ClassLoader c, String resource)", "diff": ["-            if (u.startsWith(\"jar:file:\")) {", "-                int pling = u.indexOf(\"!\");", "-                String jarName = u.substring(4, pling);", "-                return new File(fromURI(jarName));", "-            } else if (u.startsWith(\"file:\")) {", "-                int tail = u.indexOf(resource);", "-                String dirName = u.substring(0, tail);", "-                return new File(fromURI(dirName));", "+            try {", "+                if (u.startsWith(\"jar:file:\")) {", "+                    int pling = u.indexOf(\"!\");", "+                    String jarName = u.substring(4, pling);", "+                    return new File(fromURI(jarName));", "+                } else if (u.startsWith(\"file:\")) {", "+                    int tail = u.indexOf(resource);", "+                    String dirName = u.substring(0, tail);", "+                    return new File(fromURI(dirName));", "+                }", "+            } catch (IllegalArgumentException e) {", "+                //unable to determine the URI for reasons unknown.", "+                return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec0e19a2c3bfe5a227a241557f095622", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTest.java", "commitBeforeChange": "10c41029aeaba31241f1a85f9b02591b357e20b6", "commitAfterChange": "818cb969adef1df0f5918ba62f80f62502d5e53e", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 21, "signatureBeforeChange": "      public void setCommandline(String [] args)", "signatureAfterChange": "      public boolean shouldRun(Project p)", "diff": ["-", "-    public void setCommandline(String [] args) {", "-        for (int i=0; i<args.length; i++) {", "-            if (args[i] == null) continue;", "-            if (args[i].startsWith(\"haltOnError=\")) {", "-                haltOnError = Project.toBoolean(args[i].substring(12));", "-            } else if (args[i].startsWith(\"haltOnFailure=\")) {", "-                haltOnFail = Project.toBoolean(args[i].substring(14));", "-            } else if (args[i].startsWith(\"printSummary=\")) {", "-                printSummary = Project.toBoolean(args[i].substring(13));", "-            } else if (args[i].startsWith(\"printXML=\")) {", "-                printXml = Project.toBoolean(args[i].substring(9));", "-            } else if (args[i].startsWith(\"outfile=\")) {", "-                outfile = args[i].substring(8);", "-            }", "-    }", "+", "+    public boolean shouldRun(Project p) {", "+        if (ifProperty != null && p.getProperty(ifProperty) == null) {", "+            return false;", "+        } else if (unlessProperty != null && ", "+                   p.getProperty(unlessProperty) != null) {", "+            return false;", "+        }", "+        return true;", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d54be5622cfe4ceecef835fbbc275ce7", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44f795ee416e1d6bf5f6e4dc49f39bc0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "c35a248ef870c9f98b7eda39ba9e3653775aea82", "commitAfterChange": "4653e638dd921ac96a2e8583851b121e46477ae9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void putNextEntry(ZipEntry ze) throws IOException", "signatureAfterChange": "     public void putNextEntry(ZipEntry ze) throws IOException", "diff": ["-        if (entry.getMethod() == STORED) {", "+        // Size/CRC not required if RandomAccessFile is used", "+        if (entry.getMethod() == STORED && raf == null) {", "-                throw new ZipException(\"uncompressed size is required for STORED method\");", "+                throw new ZipException(\"uncompressed size is required for\"", "+                                       + \" STORED method when not writing to a\"", "+                                       + \" file\");", "-                throw new ZipException(\"crc checksum is required for STORED method\");", "+                throw new ZipException(\"crc checksum is required for STORED\"", "+                                       + \" method when not writing to a file\");", "-        } else if (hasCompressionLevelChanged) {", "+        } ", "+", "+        if (entry.getMethod() == DEFLATED && hasCompressionLevelChanged) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ade36cc7fe3ccda7fe91d171ed76ebe", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntTypeDefinition.java", "commitBeforeChange": "cd8a8e0cc286ceb9111845fbd0606efb25669ef8", "commitAfterChange": "960cd2a7117d0fa96b4247c3081da7b5363ba0d8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void checkClass(Project project)", "signatureAfterChange": "     public void checkClass(Project project)", "diff": ["-        if (adapterClass != null) {", "-            boolean needToCheck = true;", "-            if (adaptToClass != null", "-                && adaptToClass.isAssignableFrom(clazz)) {", "-                needToCheck = false;", "+        if (adapterClass != null && (adaptToClass == null", "+            || !adaptToClass.isAssignableFrom(clazz))) {", "+            TypeAdapter adapter = (TypeAdapter) createAndSet(", "+                project, adapterClass);", "+            if (adapter == null) {", "+                throw new BuildException(\"Unable to create adapter object\");", "-            if (needToCheck) {", "-                TypeAdapter adapter = (TypeAdapter) createAndSet(", "-                    project, adapterClass);", "-                if (adapter == null) {", "-                    throw new BuildException(\"Unable to create adapter object\");", "-                }", "-                adapter.checkProxyClass(clazz);", "-            }", "+            adapter.checkProxyClass(clazz);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "999479238d53873ad87df473ab1c3d84", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/email/MimeMailer.java", "commitBeforeChange": "e7fb9570418c8f963123c259470373667ac8a84e", "commitAfterChange": "f5b5a8b53cad568d5a5ab97ed35c91f698fb1c8e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "        public InputStream getInputStream() throws IOException", "signatureAfterChange": "          public InputStream getInputStream() throws IOException", "diff": ["-      public InputStream getInputStream() throws IOException {", "-        if (data == null && out == null) {", "-          throw new IOException(\"No data\");", "-        } else {", "-          if (out != null) {", "-            data = (data != null) ? data.concat(out.toString(charset)) : out.toString(charset);", "-            out = null;", "-          }", "-          return new ByteArrayInputStream(data.getBytes(charset));", "+        public InputStream getInputStream() throws IOException {", "+            if (data == null && out == null) {", "+                throw new IOException(\"No data\");", "+            }", "+            if (out != null) {", "+                String encodedOut = out.toString(charset);", "+                data = (data != null) ? data.concat(encodedOut) : encodedOut;", "+                out = null;", "+            }", "+            return new ByteArrayInputStream(data.getBytes(charset));", "-      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a63c4395b17f2b9b9b8180551e9b0841", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Definer.java", "commitBeforeChange": "b0078a54717eaf1f896ce3094adeed0540f6bd8e", "commitAfterChange": "7527ef19625d2d77806b9ce8262b49e667bb7101", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            throw new BuildException(", "-                \"name, file or resource attribute of \"", "-                + getTaskName() + \" is undefined\", getLocation());", "-        }", "+            //we arent fully defined yet. this is an error unless", "+            //we are in an antlib, in which case the resource name is determined", "+            //automatically.", "+            //NB: URIs in the ant core package will be \"\" at this point.", "+            if (getURI()!=null && getURI().startsWith(MagicNames.ANTLIB_PREFIX)) {", "+                //convert the URI to a resource", "+                String uri1 = getURI();", "+                setResource(makeResourceFromURI(uri1));", "+            } else {", "+                    throw new BuildException(", "+                        \"name, file or resource attribute of \"", "+                        + getTaskName() + \" is undefined\", getLocation());", "+                }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0df6f1fd235133ec5eb6d16a71835c6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteOn.java", "commitBeforeChange": "3ca199cab8dfc0449835efa717423d54f1ee1ad6", "commitAfterChange": "23a1c7d3a76b7d15fbddeff0789aa3960879b02f", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     protected void checkConfiguration()", "signatureAfterChange": "     protected void checkConfiguration()", "diff": ["-        if (targetFilePos != null || mapperElement != null", "-            || destDir != null) {", "-", "-            if (mapperElement == null) {", "-                throw new BuildException(\"no mapper specified\", getLocation());", "-            }", "-            if (destDir == null) {", "-                throw new BuildException(\"no dest attribute specified\",", "-                                         getLocation());", "-            }", "+        if (targetFilePos != null && mapperElement == null) {", "+            throw new BuildException(\"targetfile specified without mapper\",", "+                                     getLocation());", "+        }", "+        if (destDir != null && mapperElement == null) {", "+            throw new BuildException(\"dest specified without mapper\",", "+                                     getLocation());", "+        }", "+        if (mapperElement != null) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d90733509ab5c55ff261325c4db9b1a8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "e11e04dc6e6d6dcabe531346f60b597a8a58c453", "commitAfterChange": "fffe72edb5a6a6deb6222d79841a42c1663ccd36", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": "     protected boolean isUpToDate(FTPClient ftp, File localFile, String remoteFile)         throws IOException, BuildException", "signatureAfterChange": "     protected boolean isUpToDate(FTPClient ftp, File localFile, String remoteFile)         throws IOException, BuildException", "diff": ["-        ", "+", "-        if (!FTPReply.isPositiveCompletion(ftp.getReplyCode()))", "-        {", "-            throw new BuildException(", "-                                     \"could not date test remote file: \" +", "-                                     ftp.getReplyString());", "-        }", "-            return false;", "+            // If we are sending files, then assume out of date.", "+            // If we are getting files, then throw an error", "+", "+            if( action == SEND_FILES ) {", "+                log(\"Could not date test remote file: \" + remoteFile", "+                    + \"assuming out of date.\", Project.MSG_VERBOSE);", "+                return false;", "+            } else {", "+                throw new BuildException(\"could not date test remote file: \" +", "+                                         ftp.getReplyString());", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0f7ee94584f172520084f183517c08f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Definer.java", "commitBeforeChange": "a6dd53bb41fa834bbf872fb37ad5041ceb4c9532", "commitAfterChange": "f599537b1b64559fcdd4ce25d2d7ef70a7a09aa3", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            if (getURI()!=null && getURI().startsWith(MagicNames.ANTLIB_PREFIX)) {", "+            if (getURI() == null) {", "+                throw new BuildException(", "+                        \"name, file or resource attribute of \"", "+                                + getTaskName() + \" is undefined\",", "+                        getLocation());", "+            }", "+", "+            if (getURI().startsWith(MagicNames.ANTLIB_PREFIX)) {", "-                    throw new BuildException(", "-                        \"name, file or resource attribute of \"", "-                        + getTaskName() + \" is undefined\", getLocation());", "-                }", "+                throw new BuildException(", "+                        \"Only antlib URIs can be located from the URI alone,\"", "+                                + \"not the URI \" + getURI());", "+        }"]}]}
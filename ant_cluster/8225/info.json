{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1d0353c4ed447d9c0513cdaf5f417b24", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e5c0ca2f30a8d4a0d06c769526932e0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "c51cce56b802399a1712e67544a3224da62b7c49", "commitAfterChange": "36e5ac64fd1e76c49877ce8bb5596589a2c55ddf", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 26, "signatureBeforeChange": "         private void runTransaction(PrintStream out)             throws IOException, SQLException", "signatureAfterChange": "         private void runTransaction(PrintStream out)             throws IOException, SQLException", "diff": ["-            if (tSrcFile != null) {", "-                log(\"Executing file: \" + tSrcFile.getAbsolutePath(),", "+            if (tSrcResource != null) {", "+                log(\"Executing resource: \" + tSrcResource.toString(),", "-                Reader reader =", "-                    (encoding == null) ? new FileReader(tSrcFile)", "-                                       : new InputStreamReader(", "-                                             new FileInputStream(tSrcFile),", "-                                             encoding);", "+                InputStream is = null;", "+                Reader reader = null;", "+                    is = tSrcResource.getInputStream();", "+                    reader =", "+                        (encoding == null) ? new InputStreamReader(is)", "+                        : new InputStreamReader(is, encoding);", "-                    reader.close();", "+                    FileUtils.close(is);", "+                    FileUtils.close(reader);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaaef7f9fa55116620a223fa4229354a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Jar.java", "commitBeforeChange": "6a67c09afc7a13e47b43334358e7287abe2af2b3", "commitAfterChange": "8aaa005834f2ab61dd187115ca3c922517f2b850", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private void writeServices(ZipOutputStream zOut) throws IOException", "signatureAfterChange": "     private void writeServices(ZipOutputStream zOut) throws IOException", "diff": ["-           //stolen from writeManifest", "-           super.zipFile(service.getAsStream(), zOut,", "-                         \"META-INF/services/\" + service.getType(),", "-                         System.currentTimeMillis(), null,", "-                         ZipFileSet.DEFAULT_FILE_MODE);", "+", "+           InputStream is = null;", "+           try {", "+               is = service.getAsStream();", "+               //stolen from writeManifest", "+               super.zipFile(is, zOut,", "+                             \"META-INF/services/\" + service.getType(),", "+                             System.currentTimeMillis(), null,", "+                             ZipFileSet.DEFAULT_FILE_MODE);", "+           } finally {", "+               // technically this is unnecessary since", "+               // Service.getAsStream returns a ByteArrayInputStream", "+               // and not closing it wouldn't do any harm.", "+               FileUtils.close(is);", "+           }"]}]}
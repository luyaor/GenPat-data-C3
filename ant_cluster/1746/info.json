{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9dc0636c7e9d8496a4c856ef7ea42e10", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e78a11b06e132633b72b9f40d7dbae62", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Exec.java", "commitBeforeChange": "edb71783adeffc29a56df203f97b5ac0e4566a5d", "commitAfterChange": "fd287b3a808daed93021646efdcf52a31957e35a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "          public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-    ", "+", "-\ttry {", "-\t    // test if os match", "-\t    String myos=System.getProperty(\"os.name\");", "-\t    project.log(\"Myos= \" + myos, Project.MSG_VERBOSE);", "-\t    if( ( os != null ) && ( os.indexOf(myos) < 0 ) ){", "-\t\t// this command will be executed only on the specified OS", "-\t\tproject.log(\"Not found in \" + os, Project.MSG_VERBOSE);", "-\t\treturn;", "-\t    }", "-\t\t", "-\t    // XXX: we should use JCVS (www.ice.com/JCVS) instead of command line", "-\t    // execution so that we don't rely on having native CVS stuff around (SM)", "-\t    ", "-\t    String ant=project.getProperty(\"ant.home\");", "-\t    if(ant==null) throw new BuildException(\"Needs ant.home\");", "-\t\t", "-\t    String antRun = project.resolveFile(ant + \"/bin/antRun\").toString();", "-\t    if (myos.toLowerCase().indexOf(\"windows\")>=0)", "-\t\tantRun=antRun+\".bat\";", "-\t    command=antRun + \" \" + project.resolveFile(dir) + \" \" + command;", "-            project.log(command, Project.MSG_VERBOSE);", "-\t\t", "-\t    // exec command on system runtime", "-\t    Process proc = Runtime.getRuntime().exec( command);", "-\t    // ignore response", "-\t    InputStreamReader isr=new InputStreamReader(proc.getInputStream());", "-\t    BufferedReader din = new BufferedReader(isr);", "-\t    ", "-\t    PrintWriter fos=null;", "-\t    if( out!=null )  {", "-\t\tfos=new PrintWriter( new FileWriter( out ) );", "-        \tproject.log(\"Output redirected to \" + out, Project.MSG_VERBOSE);", "-\t    }", "+        // test if os match", "+        String myos = System.getProperty(\"os.name\");", "+        project.log(\"Myos = \" + myos, Project.MSG_VERBOSE);", "+        if ((os != null) && (os.indexOf(myos) < 0)){", "+            // this command will be executed only on the specified OS", "+            project.log(\"Not found in \" + os, Project.MSG_VERBOSE);", "+            return;", "+        }", "+        ", "+        String ant = project.getProperty(\"ant.home\");", "+        if (ant == null) throw new BuildException(\"Property 'ant.home' not found\");", "-\t    // pipe CVS output to STDOUT", "-\t    String line;", "-\t    while((line = din.readLine()) != null) {", "-\t\tif( fos==null)", "-\t\t    project.log(line, \"exec\", Project.MSG_INFO);", "-\t\telse", "-\t\t    fos.println(line);", "-\t    }", "-\t    if(fos!=null)", "-\t\tfos.close();", "-\t    ", "-\t    proc.waitFor();", "-\t    int err = proc.exitValue();", "-\t    if (err != 0) {", "-\t\tproject.log(\"Result: \" + err, \"exec\", Project.MSG_ERR);", "-\t    }", "-\t    ", "-\t} catch (IOException ioe) {", "-\t    throw new BuildException(\"Error exec: \" + command );", "-\t} catch (InterruptedException ex) {", "-\t}", "+        String antRun = project.resolveFile(ant + \"/bin/antRun\").toString();", "+        if (myos.toLowerCase().indexOf(\"windows\") >= 0) antRun = antRun + \".bat\";", "+        command = antRun + \" \" + project.resolveFile(dir) + \" \" + command;", "+        ", "+        run(command);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebc881bfcd76dbd88984bc99ece6788a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/pvcs/Pvcs.java", "commitBeforeChange": "537a07b019e2de8769ae71acad23e90e725050f8", "commitAfterChange": "0e650797a55ba63d32831b2b77e809554e31bcd2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void execute() throws org.apache.tools.ant.BuildException", "signatureAfterChange": "     public void execute() throws org.apache.tools.ant.BuildException", "diff": ["+        File tmp2 = null;", "-            tmp = new File(\"pvcs_ant_\"+(new Random(System.currentTimeMillis())).nextLong()+\".log\");", "+            Random rand = new Random(System.currentTimeMillis());", "+            tmp = new File(\"pvcs_ant_\"+rand.nextLong()+\".log\");", "+            tmp2 = new File(\"pvcs_ant_\"+rand.nextLong()+\".log\");", "+            log(\"Executing \" + commandLine.toString(), Project.MSG_VERBOSE);", "-                throw new BuildException(\"Communication between ant and pvcs failed\");", "-                                ", "-            // Create foldes in workspace", "+                throw new BuildException(\"Communication between ant and pvcs failed. No output generated from executing PVCS commandline interface \\\"pcli\\\" and \\\"get\\\"\");", "+", "+            // Create folders in workspace", "+            log(\"Creating folders\", Project.MSG_INFO);", "+", "+            // Massage PCLI lvf output transforming '\\' to '/' so get command works appropriately", "+            massagePCLI(tmp, tmp2);", "-            commandLine.createArgument().setValue(\"@\"+tmp.getAbsolutePath());", "+", "+            if (updateOnly) {", "+                commandLine.createArgument().setValue(\"-U\");", "+            }", "+", "+            commandLine.createArgument().setValue(\"@\"+tmp2.getAbsolutePath());", "+            log(\"Getting files\", Project.MSG_INFO);", "+            log(\"Executing \" + commandLine.toString(), Project.MSG_VERBOSE);", "-                String msg = \"Failed executing: \" + commandLine.toString();", "+                String msg = \"Failed executing: \" + commandLine.toString() + \". Return code was \"+result;", "-            String msg = \"Failed executing: \" + commandLine.toString();", "-            throw new BuildException(e.getMessage(),location);", "+            String msg = \"Failed executing: \" + commandLine.toString() + \". Exception: \"+e.getMessage();", "+            throw new BuildException(msg,location);", "-            String msg = \"Failed executing: \" + commandLine.toString();", "-            throw new BuildException(e.getMessage(),location);", "+            String msg = \"Failed executing: \" + commandLine.toString() + \". Exception: \"+e.getMessage();", "+            throw new BuildException(msg,location);", "-            String msg = \"Failed executing: \" + commandLine.toString();", "-            throw new BuildException(e.getMessage(),location);", "+            String msg = \"Failed executing: \" + commandLine.toString() + \". Exception: \"+e.getMessage();", "+            throw new BuildException(msg,location);", "+            }", "+            if (tmp2 != null) {", "+                tmp2.delete();"]}]}
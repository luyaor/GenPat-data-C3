{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "29db23255403b7cd08f9e9f58cac8358", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d8bdcd03e68fece54382251e965f678", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/listener/CommonsLoggingListener.java", "commitBeforeChange": "8372d91e2632e11426949885f056804ae7717537", "commitAfterChange": "988ec061641b11cce372f8d85e12aa9f0134a8ae", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void messageLogged(BuildEvent event)", "signatureAfterChange": "     public void messageLogged(BuildEvent event)", "diff": ["+            String categoryString=null;", "+            String categoryDetail=null;", "+", "+                    categoryString=\"org.apache.tools.ant.Project\";", "+                    categoryDetail=event.getProject().getName();", "+                } else {", "+                    categoryString= \"org.apache.tools.ant.Target\";", "+                    categoryDetail=event.getTarget().getName();", "+            } else {", "+                // It's a task - append the target", "+                if( event.getTarget() != null ) {", "+                    categoryString=categoryObject.getClass().getName();", "+                    categoryDetail=event.getTarget().getName();", "+                } else {", "+                    categoryString=categoryObject.getClass().getName();", "+                }", "+", "-            Log log = logFactory.getInstance(categoryObject.getClass().getName());", "-            switch (event.getPriority()) {", "-                case Project.MSG_ERR:", "-                    log.error(event.getMessage());", "-                    break;", "-                case Project.MSG_WARN:", "-                    log.warn(event.getMessage());", "-                    break;", "-                case Project.MSG_INFO:", "-                    log.info(event.getMessage());", "-                    break;", "-                case Project.MSG_VERBOSE:", "-                    log.debug(event.getMessage());", "-                    break;", "-                case Project.MSG_DEBUG:", "-                    log.debug(event.getMessage());", "-                    break;", "-                default:", "-                    log.error(event.getMessage());", "-                    break;", "-            }", "+            Log log = getLog(categoryString, categoryDetail);", "+            int priority=event.getPriority();", "+            String message=event.getMessage();", "+            realLog( log, message, priority , null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a61a4457e6654e797340f9b7804d2755", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "92ff24a7e3d486fc2176ab1704e66d481e38d9c8", "commitAfterChange": "5fef1f8fdeb0bddad97fe16b69f7592275cefa2a", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "     private AttributeSetter createAttributeSetter(final Method m,                                                   Class arg,                                                   final String attrName)", "signatureAfterChange": "     private AttributeSetter createAttributeSetter(final Method m,                                                   Class arg,                                                   final String attrName)", "diff": ["-        // resolve relative paths through Project", "-        } else if (org.apache.tools.ant.types.Path.class.equals(reflectedArg)) {", "-            return new AttributeSetter() {", "-                    public void set(Project p, Object parent, String value)", "-                        throws InvocationTargetException, IllegalAccessException {", "-                        m.invoke(parent, new Path[] {new Path(p, value)});", "-                    }", "-", "-                };", "-", "+        // also supports new Whatever(Project, String) as for Path or Reference", "+            boolean includeProject;", "+            Constructor c;", "-                final Constructor c =", "-                    reflectedArg.getConstructor(new Class[] {java.lang.String.class});", "-", "-                return new AttributeSetter() {", "-                        public void set(Project p, Object parent,", "-                                        String value)", "-                            throws InvocationTargetException,", "-                                   IllegalAccessException, BuildException {", "-                            try {", "-                                Object attribute = c.newInstance(new String[] {value});", "-                                if (p != null) {", "-                                    p.setProjectReference(attribute);", "-                                }", "-                                m.invoke(parent, new Object[] {attribute});", "-                            } catch (InstantiationException ie) {", "-                                throw new BuildException(ie);", "-                            }", "-                        }", "-                    };", "-", "+                // First try with Project.", "+                c = reflectedArg.getConstructor(new Class[] {Project.class, String.class});", "+                includeProject = true;", "-                // ignore", "+                // OK, try without.", "+                try {", "+                    c = reflectedArg.getConstructor(new Class[] {String.class});", "+                    includeProject = false;", "+                } catch (NoSuchMethodException nme2) {", "+                    // Well, no matching constructor.", "+                    return null;", "+                }", "+            final boolean finalIncludeProject = includeProject;", "+            final Constructor finalConstructor = c;", "+            ", "+            return new AttributeSetter() {", "+                public void set(Project p, Object parent, String value)", "+                        throws InvocationTargetException, IllegalAccessException, BuildException {", "+                    try {", "+                        Object[] args;", "+                        if (finalIncludeProject) {", "+                            args = new Object[] {p, value};", "+                        } else {", "+                            args = new Object[] {value};", "+                        }", "+                        Object attribute = finalConstructor.newInstance(args);", "+                        if (p != null) {", "+                            p.setProjectReference(attribute);", "+                        }", "+                        m.invoke(parent, new Object[] {attribute});", "+                    } catch (InstantiationException ie) {", "+                        throw new BuildException(ie);", "+                    }", "+                }", "+            };", "+            ", "-", "-        return null;"]}]}
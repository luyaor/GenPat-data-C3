{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d77e4df0a58b550a72b4d3babdba610c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84215b2176d15f4ef14f5d60290f2bb5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/pvcs/Pvcs.java", "commitBeforeChange": "a2c15cb080a27a1535b6770628ac0a19655d1885", "commitAfterChange": "0f1c5dd88eba7cb386d894c0bf8aa34c883b4051", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void execute()         throws TaskException", "signatureAfterChange": "      public void execute()         throws TaskException", "diff": ["-     */", "-        if( repository == null || repository.trim().equals( \"\" ) )", "-            throw new TaskException( \"Required argument repository not specified\" );", "+        validate();", "+        final File filelist = getFileList();", "+", "+        final Commandline cmd = buildGetCommand( filelist );", "+        getLogger().info( \"Getting files\" );", "+        getLogger().debug( \"Executing \" + cmd.toString() );", "+        try", "+        {", "+            final Execute2 exe = new Execute2();", "+            setupLogger( exe );", "+            exe.setWorkingDirectory( getBaseDirectory() );", "+            exe.setCommandline( cmd.getCommandline() );", "+            result = exe.execute();", "+            checkResultCode( result, cmd );", "+        }", "+        catch( IOException e )", "+        {", "+            String msg = \"Failed executing: \" + cmd.toString() + \". Exception: \" + e.getMessage();", "+            throw new TaskException( msg );", "+        }", "+        finally", "+        {", "+            if( filelist != null )", "+            {", "+                filelist.delete();", "+            }", "+        }", "+    }", "-        Commandline commandLine = new Commandline();", "-        commandLine.setExecutable( getExecutable( PCLI_EXE ) );", "-", "-        commandLine.createArgument().setValue( \"lvf\" );", "-        commandLine.createArgument().setValue( \"-z\" );", "-        commandLine.createArgument().setValue( \"-aw\" );", "-        if( getWorkspace() != null )", "-            commandLine.createArgument().setValue( \"-sp\" + getWorkspace() );", "-        commandLine.createArgument().setValue( \"-pr\" + getRepository() );", "-", "-        // default pvcs project is \"/\"", "-        if( getPvcsproject() == null && getPvcsprojects().isEmpty() )", "-            pvcsProject = \"/\";", "-", "-        if( getPvcsproject() != null )", "-            commandLine.createArgument().setValue( getPvcsproject() );", "-        if( !getPvcsprojects().isEmpty() )", "-        {", "-            Iterator e = getPvcsprojects().iterator();", "-            while( e.hasNext() )", "-            {", "-                String projectName = ( (PvcsProject)e.next() ).getName();", "-                if( projectName == null || ( projectName.trim() ).equals( \"\" ) )", "-                    throw new TaskException( \"name is a required attribute of pvcsproject\" );", "-                commandLine.createArgument().setValue( projectName );", "-            }", "-        }", "-        File tmp2 = null;", "-            Random rand = new Random( System.currentTimeMillis() );", "-            tmp = new File( \"pvcs_ant_\" + rand.nextLong() + \".log\" );", "-            tmp2 = new File( \"pvcs_ant_\" + rand.nextLong() + \".log\" );", "-            getLogger().debug( \"Executing \" + commandLine.toString() );", "-            result = runCmd( commandLine, new FileOutputStream( tmp ),", "-                             new LogOutputStream( getLogger(), true ) );", "-            if( result != 0 && !ignorerc )", "-            {", "-                String msg = \"Failed executing: \" + commandLine.toString();", "-                throw new TaskException( msg );", "-            }", "-                throw new TaskException( \"Communication between ant and pvcs failed. No output generated from executing PVCS commandline interface \\\"pcli\\\" and \\\"get\\\"\" );", "-            massagePCLI( tmp, tmp2 );", "-", "-            // Launch get on output captured from PCLI lvf", "-            commandLine.clearArgs();", "-            commandLine.setExecutable( getExecutable( GET_EXE ) );", "-", "-            if( getForce() != null && getForce().equals( \"yes\" ) )", "-                commandLine.createArgument().setValue( \"-Y\" );", "-            else", "-                commandLine.createArgument().setValue( \"-N\" );", "-", "-            if( getPromotiongroup() != null )", "-                commandLine.createArgument().setValue( \"-G\" + getPromotiongroup() );", "-            else", "-            {", "-                if( getLabel() != null )", "-                    commandLine.createArgument().setValue( \"-r\" + getLabel() );", "-            }", "-", "-            if( updateOnly )", "-            {", "-                commandLine.createArgument().setValue( \"-U\" );", "-            }", "-", "-            commandLine.createArgument().setValue( \"@\" + tmp2.getAbsolutePath() );", "-            getLogger().info( \"Getting files\" );", "-            getLogger().debug( \"Executing \" + commandLine.toString() );", "-            final LogOutputStream output = new LogOutputStream( getLogger(), false );", "-            final LogOutputStream error = new LogOutputStream( getLogger(), true );", "-            result = runCmd( commandLine, output, error );", "-", "-            if( result != 0 && !ignorerc )", "-            {", "-                String msg = \"Failed executing: \" + commandLine.toString() + \". Return code was \" + result;", "-                throw new TaskException( msg );", "-            }", "-", "-        catch( FileNotFoundException e )", "-            String msg = \"Failed executing: \" + commandLine.toString() + \". Exception: \" + e.getMessage();", "-            throw new TaskException( msg );", "-        catch( IOException e )", "-            String msg = \"Failed executing: \" + commandLine.toString() + \". Exception: \" + e.getMessage();", "-            throw new TaskException( msg );", "-        }", "-        catch( ParseException e )", "-        {", "-            String msg = \"Failed executing: \" + commandLine.toString() + \". Exception: \" + e.getMessage();", "-            throw new TaskException( msg );", "-            if( tmp != null )", "-            if( tmp2 != null )", "-            {", "-                tmp2.delete();", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efbb608351b4f43c26deb1d255f99b78", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/pvcs/Pvcs.java", "commitBeforeChange": "a2c15cb080a27a1535b6770628ac0a19655d1885", "commitAfterChange": "0f1c5dd88eba7cb386d894c0bf8aa34c883b4051", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void execute()         throws TaskException", "signatureAfterChange": "      public void execute()         throws TaskException", "diff": ["-     */", "-        if( repository == null || repository.trim().equals( \"\" ) )", "-            throw new TaskException( \"Required argument repository not specified\" );", "+        validate();", "+        final File filelist = getFileList();", "+", "+        final Commandline cmd = buildGetCommand( filelist );", "+        getLogger().info( \"Getting files\" );", "+        getLogger().debug( \"Executing \" + cmd.toString() );", "+        try", "+        {", "+            final Execute2 exe = new Execute2();", "+            setupLogger( exe );", "+            exe.setWorkingDirectory( getBaseDirectory() );", "+            exe.setCommandline( cmd.getCommandline() );", "+            result = exe.execute();", "+            checkResultCode( result, cmd );", "+        }", "+        catch( IOException e )", "+        {", "+            String msg = \"Failed executing: \" + cmd.toString() + \". Exception: \" + e.getMessage();", "+            throw new TaskException( msg );", "+        }", "+        finally", "+        {", "+            if( filelist != null )", "+            {", "+                filelist.delete();", "+            }", "+        }", "+    }", "-        Commandline commandLine = new Commandline();", "-        commandLine.setExecutable( getExecutable( PCLI_EXE ) );", "-", "-        commandLine.createArgument().setValue( \"lvf\" );", "-        commandLine.createArgument().setValue( \"-z\" );", "-        commandLine.createArgument().setValue( \"-aw\" );", "-        if( getWorkspace() != null )", "-            commandLine.createArgument().setValue( \"-sp\" + getWorkspace() );", "-        commandLine.createArgument().setValue( \"-pr\" + getRepository() );", "-", "-        // default pvcs project is \"/\"", "-        if( getPvcsproject() == null && getPvcsprojects().isEmpty() )", "-            pvcsProject = \"/\";", "-", "-        if( getPvcsproject() != null )", "-            commandLine.createArgument().setValue( getPvcsproject() );", "-        if( !getPvcsprojects().isEmpty() )", "-        {", "-            Iterator e = getPvcsprojects().iterator();", "-            while( e.hasNext() )", "-            {", "-                String projectName = ( (PvcsProject)e.next() ).getName();", "-                if( projectName == null || ( projectName.trim() ).equals( \"\" ) )", "-                    throw new TaskException( \"name is a required attribute of pvcsproject\" );", "-                commandLine.createArgument().setValue( projectName );", "-            }", "-        }", "-        File tmp2 = null;", "-            Random rand = new Random( System.currentTimeMillis() );", "-            tmp = new File( \"pvcs_ant_\" + rand.nextLong() + \".log\" );", "-            tmp2 = new File( \"pvcs_ant_\" + rand.nextLong() + \".log\" );", "-            getLogger().debug( \"Executing \" + commandLine.toString() );", "-            result = runCmd( commandLine, new FileOutputStream( tmp ),", "-                             new LogOutputStream( getLogger(), true ) );", "-            if( result != 0 && !ignorerc )", "-            {", "-                String msg = \"Failed executing: \" + commandLine.toString();", "-                throw new TaskException( msg );", "-            }", "-                throw new TaskException( \"Communication between ant and pvcs failed. No output generated from executing PVCS commandline interface \\\"pcli\\\" and \\\"get\\\"\" );", "-            massagePCLI( tmp, tmp2 );", "-", "-            // Launch get on output captured from PCLI lvf", "-            commandLine.clearArgs();", "-            commandLine.setExecutable( getExecutable( GET_EXE ) );", "-", "-            if( getForce() != null && getForce().equals( \"yes\" ) )", "-                commandLine.createArgument().setValue( \"-Y\" );", "-            else", "-                commandLine.createArgument().setValue( \"-N\" );", "-", "-            if( getPromotiongroup() != null )", "-                commandLine.createArgument().setValue( \"-G\" + getPromotiongroup() );", "-            else", "-            {", "-                if( getLabel() != null )", "-                    commandLine.createArgument().setValue( \"-r\" + getLabel() );", "-            }", "-", "-            if( updateOnly )", "-            {", "-                commandLine.createArgument().setValue( \"-U\" );", "-            }", "-", "-            commandLine.createArgument().setValue( \"@\" + tmp2.getAbsolutePath() );", "-            getLogger().info( \"Getting files\" );", "-            getLogger().debug( \"Executing \" + commandLine.toString() );", "-            final LogOutputStream output = new LogOutputStream( getLogger(), false );", "-            final LogOutputStream error = new LogOutputStream( getLogger(), true );", "-            result = runCmd( commandLine, output, error );", "-", "-            if( result != 0 && !ignorerc )", "-            {", "-                String msg = \"Failed executing: \" + commandLine.toString() + \". Return code was \" + result;", "-                throw new TaskException( msg );", "-            }", "-", "-        catch( FileNotFoundException e )", "-            String msg = \"Failed executing: \" + commandLine.toString() + \". Exception: \" + e.getMessage();", "-            throw new TaskException( msg );", "-        catch( IOException e )", "-            String msg = \"Failed executing: \" + commandLine.toString() + \". Exception: \" + e.getMessage();", "-            throw new TaskException( msg );", "-        }", "-        catch( ParseException e )", "-        {", "-            String msg = \"Failed executing: \" + commandLine.toString() + \". Exception: \" + e.getMessage();", "-            throw new TaskException( msg );", "-            if( tmp != null )", "-            if( tmp2 != null )", "-            {", "-                tmp2.delete();", "-            }"]}]}
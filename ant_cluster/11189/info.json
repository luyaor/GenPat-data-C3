{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "70e204226c546a5d3dd6aef1a1dc577c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "131bf356d80297447fb0ac43d5aef36d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Delete.java", "commitBeforeChange": "d3b91deae0ef14621eda83711e6afebd50deb810", "commitAfterChange": "a360e39fa70b203d8faf34c0fa43c5709b8f3295", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        Restrict e = new Restrict();", "-        e.add(EXISTS);", "-        e.add(p);", "+        Restrict exists = new Restrict();", "+        exists.add(EXISTS);", "+        exists.add(p);", "-        s.add(e);", "-        for (Iterator iter = s.iterator(); iter.hasNext();) {", "-            FileResource r = (FileResource) iter.next();", "-            if (!(r.isDirectory()) || r.getFile().list().length == 0) {", "-                log(\"Deleting \" + r, verbosity);", "-                if (!delete(r.getFile())) {", "-                    String message = \"Unable to delete \"", "-                        + (r.isDirectory() ? \"directory \" : \"file \") + r;", "-                    if (failonerror) {", "-                        throw new BuildException(message);", "+        s.add(exists);", "+        String errorMessage = null;", "+        try {", "+            for (Iterator iter = s.iterator(); iter.hasNext();) {", "+                FileResource r = (FileResource) iter.next();", "+                if (!(r.isDirectory()) || r.getFile().list().length == 0) {", "+                    log(\"Deleting \" + r, verbosity);", "+                    if (!delete(r.getFile())) {", "+                        errorMessage = \"Unable to delete \"", "+                            + (r.isDirectory() ? \"directory \" : \"file \") + r;", "-                    log(message,", "-                        quiet ? Project.MSG_VERBOSE : Project.MSG_WARN);", "+        } catch (Exception e) {", "+            errorMessage = e.getMessage();", "+        }", "+        if (errorMessage != null) {", "+            if (failonerror) {", "+                throw new BuildException(errorMessage);", "+            }", "+            log(errorMessage, quiet ? Project.MSG_VERBOSE : Project.MSG_WARN);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92d8f3914a14b2a625e8dae8f98c5ee5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "85875db138d8efbc050b5d34dbba19cc9c707db6", "commitAfterChange": "d53f5e961288efbb6a95db34d841b31d9571ea1b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void execute()          throws BuildException", "signatureAfterChange": "     public void execute()          throws BuildException", "diff": ["-        // Iterate the FileSet collection, concatenating each file as", "-        // it is encountered.", "-        for (Enumeration e = fileSets.elements(); e.hasMoreElements(); ) {", "-", "-            // Root directory for files.", "-            File fileSetBase = null;", "-", "-            // List of files.", "-            String[] srcFiles = null;", "-", "-            // Get the next file set, which could be a FileSet or a", "-            // FileList instance.", "-            Object next = e.nextElement();", "-", "-            if (next instanceof FileSet) {", "-", "-                FileSet fileSet = (FileSet) next;", "-", "-                // Get a directory scanner from the file set, which will", "-                // determine the files from the set which need to be", "-                // concatenated.", "-                DirectoryScanner scanner = ", "-                    fileSet.getDirectoryScanner(project);", "-", "-                // Determine the root path.", "-                fileSetBase = fileSet.getDir(project);", "-", "-                // Get the list of files.", "-                srcFiles = scanner.getIncludedFiles();", "-", "-            } else if (next instanceof FileList) {", "-", "-                FileList fileList = (FileList) next;", "-", "-                // Determine the root path.", "-                fileSetBase = fileList.getDir(project);", "-", "-                // Get the list of files.", "-                srcFiles = fileList.getFiles(project);", "-", "-            }", "-", "-            // Concatenate the files.", "-            catFiles(fileSetBase, srcFiles);", "+        // If using filesets, disallow inline text. This is similar to", "+        // using GNU 'cat' with file arguments -- stdin is simply", "+        // ignored.", "+        if (fileSets.size() > 0 && textBuffer != null) {", "+            throw new BuildException(\"Cannot include inline text \" + ", "+                                     \"when using filesets.\");", "+        boolean savedAppend = append;", "+        try {", "+            // Iterate the FileSet collection, concatenating each file as", "+            // it is encountered.", "+            for (Enumeration e = fileSets.elements(); e.hasMoreElements(); ) {", "+                ", "+                // Root directory for files.", "+                File fileSetBase = null;", "+                ", "+                // List of files.", "+                String[] srcFiles = null;", "+                ", "+                // Get the next file set, which could be a FileSet or a", "+                // FileList instance.", "+                Object next = e.nextElement();", "+                ", "+                if (next instanceof FileSet) {", "+                    ", "+                    FileSet fileSet = (FileSet) next;", "+                    ", "+                    // Get a directory scanner from the file set, which will", "+                    // determine the files from the set which need to be", "+                    // concatenated.", "+                    DirectoryScanner scanner = ", "+                        fileSet.getDirectoryScanner(project);", "+                    ", "+                    // Determine the root path.", "+                    fileSetBase = fileSet.getDir(project);", "+                    ", "+                    // Get the list of files.", "+                    srcFiles = scanner.getIncludedFiles();", "+                    ", "+                } else if (next instanceof FileList) {", "+                    ", "+                    FileList fileList = (FileList) next;", "+                    ", "+                    // Determine the root path.", "+                    fileSetBase = fileList.getDir(project);", "+                    ", "+                    // Get the list of files.", "+                    srcFiles = fileList.getFiles(project);", "+                    ", "+                }", "+", "+                // Concatenate the files.", "+                if (srcFiles != null) {", "+                    catFiles(fileSetBase, srcFiles);", "+                }", "+            }", "+        } finally {", "+            append = savedAppend;", "+        }", "+        ", "+    }", "-        // Reset state to default."]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f9c0ac3cb4bd8f26c9ce7623855b6f2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54e82e5f89358f1505e6f102e2026bcb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/PropertySet.java", "commitBeforeChange": "5909b77dc45210c94075bceb1f5fda411213d50f", "commitAfterChange": "14ea08b49e98e020cde9265cc199b40a42990337", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     public Properties getProperties()", "signatureAfterChange": "     public Properties getProperties()", "diff": ["-        Set names = null;", "-        Project prj = getProject();", "-        Hashtable props =", "-            prj == null ? getAllSystemProperties() : prj.getProperties();", "+        Hashtable props = getEffectiveProperties();", "+        Set names = getPropertyNames(props);", "-        //quick & dirty, to make nested mapped p-sets work:", "-        for (Enumeration e = setRefs.elements(); e.hasMoreElements();) {", "-            PropertySet set = (PropertySet) e.nextElement();", "-            props.putAll(set.getProperties());", "-        }", "-", "-        if (getDynamic() || cachedNames == null) {", "-            names = new HashSet();", "-            addPropertyNames(names, props);", "-            // Add this PropertySet's nested PropertySets' property names.", "-            for (Enumeration e = setRefs.elements(); e.hasMoreElements();) {", "-                PropertySet set = (PropertySet) e.nextElement();", "-                names.addAll(set.getProperties().keySet());", "-            }", "-            if (negate) {", "-                //make a copy...", "-                HashSet complement = new HashSet(props.keySet());", "-                complement.removeAll(names);", "-                names = complement;", "-            }", "-            if (!getDynamic()) {", "-                cachedNames = names;", "-            }", "-        } else {", "-            names = cachedNames;", "-        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b96970ceea4417229480f2a0e9fe6869", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "1266e53bd199e68ea11ce1bcf38b58d8fc1ea0a1", "commitAfterChange": "3ef74849efee36e856e6a1a37199a13ee15499a6", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "     private TestResultHolder executeAsForked(JUnitTest test,                                              ExecuteWatchdog watchdog,                                              File casesFile)         throws BuildException", "signatureAfterChange": "     private TestResultHolder executeAsForked(JUnitTest test,                                              ExecuteWatchdog watchdog,                                              File casesFile)         throws BuildException", "diff": ["-        if (includeAntRuntime) {", "-            Vector v = Execute.getProcEnvironment();", "-            Enumeration e = v.elements();", "-            while (e.hasMoreElements()) {", "-                String s = (String) e.nextElement();", "-                if (s.startsWith(CLASSPATH)) {", "-                    cmd.createClasspath(getProject()).createPath()", "-                        .append(new Path(getProject(),", "-                                         s.substring(CLASSPATH.length()", "-                                                     )));", "-                }", "-            }", "-            log(\"Implicitly adding \" + antRuntimeClasses + \" to CLASSPATH\",", "-                Project.MSG_VERBOSE);", "-            cmd.createClasspath(getProject()).createPath()", "-                .append(antRuntimeClasses);", "-        }", "+        checkIncludeAntRuntime(cmd);", "-        if (summary) {", "-            String prefix = \"\";", "-            if (\"withoutanderr\".equalsIgnoreCase(summaryValue)) {", "-                prefix = \"OutErr\";", "-            }", "-            cmd.createArgument()", "-                .setValue(Constants.FORMATTER", "-                          + \"org.apache.tools.ant.taskdefs.optional.junit.\"", "-                          + prefix + \"SummaryJUnitResultFormatter\");", "-        }", "+        checkIncludeSummary(cmd);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea5b2328d25616fe7b7ea3b69a51f3b5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4fb1f6369e2da0fb36c47fd4f55a6f6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicTOPLinkDeploymentTool.java", "commitBeforeChange": "a04d66471422958bfad8b4497d76b1bfdeb064b3", "commitAfterChange": "614d36db8a2d97939574dc278afb7afe95b6e6c4", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected void addVendorFiles(Hashtable ejbFiles, String baseName)", "signatureAfterChange": "     protected void addVendorFiles(Hashtable ejbFiles, String baseName)", "diff": ["-        File toplinkDD = new File(getConfig().descriptorDir, toplinkDescriptor);", "+        File toplinkDD = null;", "+        if (usingBaseJarName()) {", "+            toplinkDD = new File(getConfig().descriptorDir, toplinkDescriptor);", "+        }", "+        else {", "+            String ddPrefix = baseName + getConfig().baseNameTerminator;", "+            File actualDir = (new File(getConfig().descriptorDir, ddPrefix)).getParentFile();", "+            toplinkDD = new File(actualDir, toplinkDescriptor);", "+        }", "+        ", "+        else {", "+            log(\"Unable to locate toplink deployment descriptor. It was expected to be in \" + ", "+                toplinkDD.getPath(), Project.MSG_WARN);", "+        }                "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4d937c63f2efe7f273e2e5e9725b3af", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/taskdefs/JarTest.java", "commitBeforeChange": "21660b7678a4317e417e236d2cd36d12ec102434", "commitAfterChange": "745031fad77dc006d12f34731b46f0e755343ea5", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 14, "signatureBeforeChange": "      public void XXXtest5()", "signatureAfterChange": "      private void testRecreate(String firstTarget, String secondTarget)", "diff": ["-    public void XXXtest5() {", "-        executeTarget(\"test5\");", "-        assertEquals(jarModifiedDate, jarFile.lastModified());", "+", "+    private void testRecreate(String firstTarget, String secondTarget) {", "+        executeTarget(firstTarget);", "+        try {", "+            // give Windows a chance", "+            Thread.currentThread().sleep(2500);", "+        } catch (InterruptedException e) {", "+        } // end of try-catch", "+        File jarFile = new File(getProjectDir(), tempJar);", "+        long jarModifiedDate = jarFile.lastModified();", "+        executeTarget(secondTarget);", "+        jarFile = new File(getProjectDir(), tempJar);", "+        assertTrue(\"jar has been recreated in \" + secondTarget,", "+                   jarModifiedDate < jarFile.lastModified());"]}]}
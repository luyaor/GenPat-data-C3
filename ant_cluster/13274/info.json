{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4f914bbc7fb7f979093a148b8c891dc5", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05b2349730345a246662ae176a539538", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/jsp/JspC.java", "commitBeforeChange": "3e35ab334b7e5ecd691960f61b58069130c4a2b0", "commitAfterChange": "6acb5be183f9d189628089d186ede0caf887cf0c", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 32, "signatureBeforeChange": "     protected void scanDir(File srcDir, File destDir, String files[])", "signatureAfterChange": "     protected void scanDir(File srcDir, File destDir, String files[])", "diff": ["-            File srcFile = new File(srcDir, files[i]);", "-            if (files[i].endsWith(\".jsp\")) {", "-                // drop leading path (if any)", "-                int fileStart =", "-                    files[i].lastIndexOf(File.separatorChar) + 1;", "-                File javaFile = new File(destDir, files[i].substring(fileStart,", "-                                                                     files[i].indexOf(\".jsp\")) + \".java\");", "+            String filename=files[i];", "+            File srcFile = new File(srcDir, filename);", "+            File javaFile=mapToJavaFile(srcFile);", "-                if (srcFile.lastModified() > now) {", "-                    log(\"Warning: file modified in the future: \" +", "-                        files[i], Project.MSG_WARN);", "-                }", "+            if (srcFile.lastModified() > now) {", "+                    log(\"Warning: file modified in the future: \" +filename,", "+                            Project.MSG_WARN);", "+            }", "+            boolean shouldCompile=false;", "-                if (!javaFile.exists() ||", "-                    srcFile.lastModified() > javaFile.lastModified())", "-                    {", "-                        if (!javaFile.exists()) {", "-                            log(\"Compiling \" + srcFile.getPath() +", "-                                \" because java file \"", "-                                + javaFile.getPath() + \" does not exist\",", "-                                Project.MSG_DEBUG);", "-                        } else {", "-                            log(\"Compiling \" + srcFile.getPath() +", "-                                \" because it is out of date with respect to \"", "-                                + javaFile.getPath(), Project.MSG_DEBUG);", "-                        }", "-                        compileList.addElement(srcFile.getAbsolutePath());", "+            if (!javaFile.exists()) {", "+                shouldCompile=true;", "+                log(\"Compiling \" + srcFile.getPath() +", "+                        \" because java file \"+ javaFile.getPath() + \" does not exist\",", "+                        Project.MSG_DEBUG);", "+                } else {", "+                    if( srcFile.lastModified() > javaFile.lastModified()) {", "+                        shouldCompile=true;", "+                        log(\"Compiling \" + srcFile.getPath() +", "+                            \" because it is out of date with respect to \" + javaFile.getPath(),", "+                            Project.MSG_DEBUG);", "+            }", "+            if(shouldCompile) {", "+                compileList.addElement(srcFile.getAbsolutePath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "680da4fdf9d36170515175879b447748", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/GenericDeploymentTool.java", "commitBeforeChange": "ebb7f7ca8c9b5990f6418557719641f8345516e8", "commitAfterChange": "febf421b27c789d4b426d3d59b24dc42e07785b1", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     protected void checkAndAddInherited(Hashtable checkEntries) throws BuildException", "signatureAfterChange": "     protected void checkAndAddInherited(Hashtable checkEntries) throws BuildException", "diff": ["-", "-                                if (!interfaces[i].getName().equals(\"javax.ejb.EJBObject\")) // do not add home interfaces", "-                                { ", "-                                    File superClassFile = new File(srcDir.getAbsolutePath() ", "-                                                                    + File.separatorChar ", "-                                                                    + interfaces[i].getName().replace('.',File.separatorChar)", "-                                                                    + \".class\"", "-                                                                    );", "-                                    if (superClassFile.exists() && superClassFile.isFile())", "-                                    {", "-                                        if (checkInterfaceClasses(interfaces[i].getName().replace('.',File.separatorChar)+\".class\", ", "-                                              superClassFile, checkEntries))", "-                                        {", "-                                            checkEntries.put(interfaces[i].getName().replace('.',File.separatorChar)+\".class\",", "-                                                 superClassFile);", "-                                        }", "-                                    }", "-                                }", "+                                addInterface(interfaces[i], checkEntries);", "-                            if (!s.getName().equals(\"java.lang.Object\"))", "-                            {", "-                                File superClassFile = new File(srcDir.getAbsolutePath() ", "-                                + File.separatorChar ", "-                                + s.getName().replace('.',File.separatorChar)", "-                                + \".class\"", "-                                );", "-                                if (superClassFile.exists() && superClassFile.isFile())", "-                                {", "-                                    checkSuperClasses(s.getName().replace('.',File.separatorChar) + \".class\", ", "-                                    superClassFile, checkEntries);", "-                                    checkEntries.put(s.getName().replace('.',File.separatorChar) + \".class\", ", "-                                    superClassFile);", "-                                }               ", "-                            }", "+                            addSuperClass(c.getSuperclass(), checkEntries);"]}]}
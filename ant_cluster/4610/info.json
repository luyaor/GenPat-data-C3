{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e887e3979c6fc01180049c058f497d3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "158d767785970914794f17d743626cb4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/Main.java", "commitBeforeChange": "58f8db35ee5db94294191fc2599cb02a8086b881", "commitAfterChange": "8c97911720b40557d78672245bc2e7f724917297", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 6, "signatureBeforeChange": "     protected void setupClassLoader( final File libDir )", "signatureAfterChange": "     protected ClassLoader createClassLoader( final File libDir )", "diff": ["-    protected void setupClassLoader( final File libDir )", "+    protected ClassLoader createClassLoader( final File libDir )", "+        final ClassLoader candidate = getClass().getClassLoader();", "+        ", "+        if( !(candidate instanceof AntClassLoader) )", "+        {", "+            getLogger().warn( \"Warning: Unable to add entries from \" + ", "+                              \"lib-path to classloader\" );", "+            return candidate;", "+        }", "+        ", "+        final AntClassLoader classLoader = (AntClassLoader)candidate;", "+", "-", "-        final AntLoader classLoader = AntLoader.getLoader();", "-    }", "+        return classLoader;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "718b82c04d4a50f68eda26d1ffc49cdc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/property/ResolvePropertyMap.java", "commitBeforeChange": "9b19344ae6777673cc093b5882e02fd43fba99f0", "commitAfterChange": "f67b8649e8b40f489ea4091276cfffb010beae99", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void resolveAllProperties(Map map, String prefix)", "signatureAfterChange": "     public void resolveAllProperties(Map map, String prefix,                                      boolean prefixValues)", "diff": ["-        this.map = map; // The map gets used in the getProperty callback", "+     */", "+    public void resolveAllProperties(Map map, String prefix,", "+                                     boolean prefixValues) {", "+        // The map, prefix and prefixValues flag get used in the", "+        // getProperty callback", "+        this.map = map;", "+        this.prefixValues = prefixValues;", "+", "+            expandingLHS = true;", "-            Object result = getProperty(key);", "+", "+            // if the property has already been set to the name it", "+            // will have in the end, then return the existing value to", "+            // ensure properties remain immutable", "+            String fullKey = key;", "+            if (prefix != null) {", "+                fullKey = prefix + key;", "+            }", "+            Object result = master.getProperty(fullKey);", "+", "+            if (result == null) {", "+                result = getProperty(key);", "+            }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8af4cc1521a05f97b7e25bb580dad52f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a8bdfce8875db54988f485f2976752f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/main/org/apache/ant/frontend/Commandline.java", "commitBeforeChange": "a48208f6cf8cf80ef1e144305ff8dfe0958599d5", "commitAfterChange": "c2e518039b65dc5b8c9c31f9f78b2d72ea8db2d1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "          public void runAnt(String[] args)", "signatureAfterChange": "          public void runAnt(String[] args)", "diff": ["-        ExecutionManager executionManager = null;", "+        ExecutionFrame mainFrame = null;", "-            executionManager = new ExecutionManager();", "-            executionManager.addLibraries(libraries);", "-            executionManager.setProject(project);", "-            addBuildListeners(executionManager);", "+", "+            mainFrame = new ExecutionFrame(project, libraries);", "+            ", "+            // We iterate through all nodes of all projects and make sure every node is OK", "+            Map state = new HashMap();", "+            Stack visiting = new Stack();", "+            List dependencyOrder = new ArrayList();", "+    ", "+            mainFrame.checkTargets(dependencyOrder, state, visiting);", "+            addBuildListeners(mainFrame);", "-            System.out.print(e.getMessage());", "+            System.out.println(e.getMessage());", "-                System.out.println();", "-                System.out.print(\"Root cause: \" + cause.getClass().getName() + \": \" + cause.getMessage());", "+                System.out.println(\"Root cause: \" + cause.getClass().getName() + \": \" + cause.getMessage());", "-            System.out.println();", "-            executionManager.runBuild(targets);", "+            mainFrame.runBuild(targets);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4efd7dac786b9453361aaa558e618815", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/frontend/org/apache/ant/cli/Commandline.java", "commitBeforeChange": "65b70febb53b077317c4d678291f9af547c3d116", "commitAfterChange": "f9d1c1691c7e9d80b793f5178f6113c949fc2441", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void process(String[] args, InitConfig initConfig)", "signatureAfterChange": "     private void process(String[] args, InitConfig initConfig)", "diff": ["-        ExecutionManager executionManager = null;", "+        Frame mainFrame = null;", "-            AntConfig userConfig = ", "+            AntConfig userConfig =", "-                AntConfig runConfig ", "+                AntConfig runConfig", "-                throw new ConfigException(\"Remote Projects are not allowed: \"", "+                throw new FrontendException(\"Remote Projects are not allowed: \"", "-            executionManager = new ExecutionManager(initConfig, config);", "+            mainFrame = new Frame(initConfig, config);", "-                = new DemuxOutputStream(executionManager, false);", "+                = new DemuxOutputStream(mainFrame, false);", "-                = new DemuxOutputStream(executionManager, true);", "+                = new DemuxOutputStream(mainFrame, true);", "-            addBuildListeners(executionManager);", "+            addBuildListeners(mainFrame);", "-            executionManager.runBuild(project, targets, definedProperties);", "+            mainFrame.setProject(project);", "+            mainFrame.initialize(definedProperties);", "+", "+            mainFrame.startBuild(targets);"]}]}
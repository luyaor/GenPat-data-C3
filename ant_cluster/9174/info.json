{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "db2de4591ec0562888245edfd23f0851", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "885ab15b21035d08e4fa7ec288301eae", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/taskdefs/sitraka/Coverage.java", "commitBeforeChange": "7513ab1efa12321b3e2014764bfb23d16b425caf", "commitAfterChange": "299ea801bc1031e308bfe07a22e51edd1b972872", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     protected String[] getParameters()         throws TaskException", "signatureAfterChange": "     protected String[] getParameters()         throws TaskException", "diff": ["-        ArrayList params = new ArrayList();", "-        params.add( \"-jp_function=coverage\" );", "+        Commandline params = new Commandline();", "+        params.addArgument( \"-jp_function=coverage\" );", "-            params.add( \"-jp_vm=\" + m_vm );", "+            params.addArgument( \"-jp_vm=\" + m_vm );", "-            params.add( \"-jp_java_exe=\" + getContext().resolveFile( m_javaExe.getPath() ) );", "+            params.addArgument( \"-jp_java_exe=\" + m_javaExe.getPath() );", "-        params.add( \"-jp_working_dir=\" + m_workingDir.getPath() );", "-        params.add( \"-jp_snapshot_dir=\" + m_snapshotDir.getPath() );", "-        params.add( \"-jp_record_from_start=\" + m_recordFromStart );", "-        params.add( \"-jp_warn=\" + m_warnLevel );", "+        params.addArgument( \"-jp_working_dir=\" + m_workingDir.getPath() );", "+        params.addArgument( \"-jp_snapshot_dir=\" + m_snapshotDir.getPath() );", "+        params.addArgument( \"-jp_record_from_start=\" + m_recordFromStart );", "+        params.addArgument( \"-jp_warn=\" + m_warnLevel );", "-            params.add( \"-jp_output_file=\" + m_seedName );", "+            params.addArgument( \"-jp_output_file=\" + m_seedName );", "-        params.add( \"-jp_filter=\" + m_filters.toString() );", "+        params.addArgument( \"-jp_filter=\" + m_filters.toString() );", "-            params.add( \"-jp_trigger=\" + m_triggers.toString() );", "+            params.addArgument( \"-jp_trigger=\" + m_triggers.toString() );", "-            params.add( \"-jp_final_snapshot=\" + m_finalSnapshot );", "+            params.addArgument( \"-jp_final_snapshot=\" + m_finalSnapshot );", "-        params.add( \"-jp_exit_prompt=\" + m_exitPrompt );", "+        params.addArgument( \"-jp_exit_prompt=\" + m_exitPrompt );", "-        params.add( \"-jp_track_natives=\" + m_trackNatives );", "+        params.addArgument( \"-jp_track_natives=\" + m_trackNatives );", "-        String[] vmargs = cmdlJava.getVmCommand().getArguments();", "-        for( int i = 0; i < vmargs.length; i++ )", "-        {", "-            params.add( vmargs[ i ] );", "-        }", "+        params.addArguments( m_vmArgs );", "+", "-        Path classpath = cmdlJava.getClasspath();", "-        if( classpath != null && ! classpath.isEmpty() )", "+        if( ! m_classpath.isEmpty() )", "-            params.add( \"-classpath \" + PathUtil.formatPath( classpath ) );", "+            params.addArgument( \"-classpath\" );", "+            params.addArgument( PathUtil.formatPath( m_classpath ) );", "-        if( cmdlJava.getClassname() != null )", "+        if( m_className != null )", "-            params.add( cmdlJava.getClassname() );", "+            params.addArgument( m_className );", "-        String[] args = cmdlJava.getJavaCommand().getArguments();", "-        for( int i = 0; i < args.length; i++ )", "-        {", "-            params.add( args[ i ] );", "-        }", "+        params.addArguments( m_args );", "-        return (String[])params.toArray( new String[ params.size() ] );", "+        return params.getArguments();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b96db11c5688a4f7f55f703e6eb44c9b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/xml/XSLTProcess.java", "commitBeforeChange": "030fd751f51bef1c60b27cc4034cf1b013551520", "commitAfterChange": "0deb15031e9e934900b3b41f0d191dabdece8f80", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public void execute()         throws TaskException", "signatureAfterChange": "      public void execute()         throws TaskException", "diff": ["-        DirectoryScanner scanner;", "-        String[] list;", "-        String[] dirs;", "+        validate();", "-        if( m_xslFile == null )", "-        {", "-            throw new TaskException( \"no stylesheet specified\" );", "-        }", "+        final FileSet fileSet = getFileSet();", "+        fileSet.setDir( m_basedir );", "+        final DirectoryScanner scanner = ScannerUtil.getDirectoryScanner( fileSet );", "-        if( m_baseDir == null )", "-        {", "-            m_baseDir = getBaseDirectory();", "-        }", "-", "-        m_liaison = getLiaison();", "-", "-        // check if liaison wants to log errors using us as logger", "-        setupLogger( m_liaison );", "-", "-        getLogger().debug( \"Using \" + m_liaison.getClass().toString() );", "-        File stylesheet = resolveFile( m_xslFile );", "+        prepareProcessor();", "-        if( m_inFile != null && m_outFile != null )", "+        if( m_in != null && m_out != null )", "-            process( m_inFile, m_outFile, stylesheet );", "+            processSingleFile( m_in, m_out );", "-        /*", "-         * if we get here, in and out have not been specified, we are", "-         * in batch processing mode.", "-         */", "-        //-- make sure Source directory exists...", "-        if( m_destDir == null )", "-        {", "-            String msg = \"destdir attributes must be set!\";", "-            throw new TaskException( msg );", "-        }", "-        scanner = getDirectoryScanner( m_baseDir );", "-        getLogger().info( \"Transforming into \" + m_destDir );", "+        final String message = \"Transforming into \" + m_destdir;", "+        getLogger().info( message );", "-        list = scanner.getIncludedFiles();", "-        for( int i = 0; i < list.length; ++i )", "-        {", "-            process( m_baseDir, list[ i ], m_destDir, stylesheet );", "-        }", "+        processFiles( scanner );", "-        dirs = scanner.getIncludedDirectories();", "-        for( int j = 0; j < dirs.length; ++j )", "+        processDirs( scanner );", "+    }", "-            list = new File( m_baseDir, dirs[ j ] ).list();", "-            for( int i = 0; i < list.length; ++i )", "-                process( m_baseDir, list[ i ], m_destDir, stylesheet );"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8fe96de0bf74d7f0849f452a43a51cf1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25a869f17de4519e778f027fb439df61", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/SSHExec.java", "commitBeforeChange": "6585a8aa207d2adf2f5f92ab52482b312302b3fe", "commitAfterChange": "70802b2319e95db5b1f4bcab9247da14856a3bd8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+", "+                // this is the wrong test if the remote OS is OpenVMS,", "+                // but there doesn't seem to be a way to detect it.", "+                int ec = channel.getExitStatus();", "+                if (ec != 0) {", "+                    String msg = \"Remote command failed with exit status \" + ec;", "+                    if (getFailonerror()) {", "+                        throw new BuildException(msg);", "+                    } else {", "+                        log(msg, Project.MSG_ERR);", "+                    }", "+                }", "+        } catch (BuildException e) {", "+            throw e;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce05444dec144256e6a6dfc2f4f09507", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javac.java", "commitBeforeChange": "9092eca069240e6318976481d0ba6961997977ce", "commitAfterChange": "aa4eb280adf2995ed0aa4621a526d3a753534a46", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-\t\tlog(\"Since fork is true, ignoring build.compiler setting.\", Project.MSG_WARN);", "-\t    }\t    ", "-\t    compiler = \"extJavac\";", "+                if (isJdkCompiler(compiler)) {", "+                    log(\"Since fork is true, ignoring build.compiler setting.\",", "+                        Project.MSG_WARN);", "+                    compiler = \"extJavac\";", "+                }", "+                else {", "+                    log(\"Since build.compiler setting isn't classic or modern, ignoring fork setting.\", Project.MSG_WARN);", "+                }", "+\t    }", "+            else {", "+                compiler = \"extJavac\";", "+            }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "95809767770ddcb5a63603a60d2f4ea7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3de24eaa8c7ba8505b3c9663c743cbd5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/repository/HttpRepository.java", "commitBeforeChange": "c8203de650acea3fa8e0e1a6acce7425f5bbe322", "commitAfterChange": "7651d02856325bec057619d215ee30c4c605ee80", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public boolean fetch(Library library) throws IOException", "signatureAfterChange": "     public boolean fetch(Library library) throws IOException", "diff": ["+        URL remoteURL=new URL(path);", "-        GetMethod get = createGet(path);", "+        long start, finish;", "+        start = System.currentTimeMillis();", "+        finish = System.currentTimeMillis();", "-        if (useTimestamps) {", "-            setIfModifiedSinceHeader(get, library.getLastModified());", "-        }", "-        try {", "-            long start, finish;", "-            start = System.currentTimeMillis();", "-            client.executeMethod(get);", "-            if (useTimestamps && get.getStatusCode() == HttpStatus.SC_NOT_MODIFIED) {", "-                logDebug(\"File is not modified\");", "-                //we get here if there is no change in timestamp", "-                //so no fetch", "-                return false;", "-            }", "-            if (get.getStatusCode() != HttpStatus.SC_OK) {", "-                String message = \"Request Failed:\"", "-                        + get.getStatusCode()", "-                        + \" from \" + get.getPath();", "-                logVerbose(message);", "-                logVerbose(get.getStatusLine().toString());", "-                logVerbose(get.getStatusText());", "-                throw new BuildException(message);", "-            }", "-            saveStreamToLibrary(get, library);", "-            finish = System.currentTimeMillis();", "-            long diff = finish - start;", "-            logVerbose(\"downloaded in \" + diff / 1000 + \" seconds\");", "-        } finally {", "-            // Release the connection.", "-            get.releaseConnection();", "-        }", "+        boolean success=get(remoteURL, library.getLibraryFile(),useTimestamps,", "+                username, password);", "+        long diff = finish - start;", "+        logVerbose(\"downloaded in \" + diff / 1000 + \" seconds\");", "-        return true;", "+        return success;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5c7f15a33af48796328c898268731f0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Checksum.java", "commitBeforeChange": "16a5d1b56ceb8dca9875b074ebb36c626ce06763", "commitAfterChange": "931a037496b3bc1c55734fd221a3ef773dc8cabb", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private boolean generateChecksums() throws BuildException", "signatureAfterChange": "     private boolean generateChecksums() throws BuildException", "diff": ["-                StringBuffer checksumSb = new StringBuffer();", "-                for (int i = 0; i < fileDigest.length; i++) {", "-                    String hexStr = Integer.toHexString(0x00ff & fileDigest[i]);", "-                    if (hexStr.length() < 2) {", "-                        checksumSb.append(\"0\");", "-                    }", "-                    checksumSb.append(hexStr);", "+                if (totalproperty != null) {", "+                    allDigests.put(src,fileDigest);", "-                String checksum = checksumSb.toString();", "+                String checksum = createDigestString(fileDigest);", "+            if (totalproperty != null) {", "+                // Calculate the total checksum", "+                // Convert the keys (source files) into a sorted array.", "+                Set keys = allDigests.keySet();", "+                Object[] keyArray = keys.toArray();", "+                // File is Comparable, so sorting is trivial", "+                Arrays.sort(keyArray);", "+                // Loop over the checksums and generate a total hash.", "+                messageDigest.reset();", "+                for (int i = 0; i < keyArray.length; i++) {", "+                    File src = (File) keyArray[i];", "+", "+                    // Add the digest for the file content", "+                    byte[] digest = (byte[]) allDigests.get(src);", "+                    messageDigest.update(digest);", "+", "+                    // Add the file path", "+                    String fileName = (String) relativeFilePaths.get(src);", "+                    messageDigest.update(fileName.getBytes());", "+                }", "+                String totalChecksum = createDigestString(messageDigest.digest());", "+                getProject().setNewProperty(totalproperty, totalChecksum);", "+            }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d750f8ee2a8f1392af28221b2bcfae56", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f015f457462ca5b2b660249c4e899d0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/selectors/FilenameSelector.java", "commitBeforeChange": "02e939c261d79e9d1c2df779bfe1b787b63dd55c", "commitAfterChange": "d814a03e98431c1ae142e398f02be2a3b7205b3c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public boolean isSelected(File basedir, String filename, File file)", "signatureAfterChange": "     public boolean isSelected(File basedir, String filename, File file)", "diff": ["-", "+        if (pattern != null) {", "+        } else {", "+            if (reg == null) {", "+                reg = new RegularExpression();", "+                reg.setPattern(regex);", "+                expression = reg.getRegexp(getProject());", "+            }", "+            int options = Regexp.MATCH_DEFAULT;", "+            if (!casesensitive) {", "+                options |= Regexp.MATCH_CASE_INSENSITIVE;", "+            }", "+            return expression.matches(filename, options) == !negated;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e25a687c3e4b062ed2ae49bf2d304ad", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/taskdefs/ExecuteJava.java", "commitBeforeChange": "7513ab1efa12321b3e2014764bfb23d16b425caf", "commitAfterChange": "299ea801bc1031e308bfe07a22e51edd1b972872", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void execNonForked( final TaskContext context )         throws TaskException", "signatureAfterChange": "     public void executeNonForked( final TaskContext context )         throws TaskException", "diff": ["-    private void execNonForked( final TaskContext context )", "+    public void executeNonForked( final TaskContext context )", "+        if( m_className == null )", "+        {", "+            throw new TaskException( \"Classname must not be null.\" );", "+        }", "+        if( m_jar != null )", "+        {", "+            throw new TaskException( \"Cannot execute a jar in non-forked mode.\" );", "+        }", "+        if( m_vmArgs.size() > 0 )", "+        {", "+            context.warn( \"JVM args ignored when same JVM is used.\" );", "+        }", "+        if( m_workingDirectory != null )", "+        {", "+            context.warn( \"Working directory ignored when same JVM is used.\" );", "+        }", "+        if( m_sysProperties.size() > 0 )", "+        {", "+            context.warn( \"System properties ignored when same JVM is used.\" );", "+        }", "+"]}]}
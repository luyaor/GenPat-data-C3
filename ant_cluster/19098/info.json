{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "29df580f25e968389967f9283dca8244", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7521b2dbeeec2f1dcabc314ba222dca7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/Frame.java", "commitBeforeChange": "752f49d5b18f9743f8e4a6dbdc8065d240d9c97a", "commitAfterChange": "da4e1a3aa99899d6aecc6d14c2a7498fa51647aa", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 38, "signatureBeforeChange": "     public void startBuild(List targets) throws AntException", "signatureAfterChange": "     public void startBuild(List targets) throws AntException", "diff": ["-            URL systemLibs", "-                = new URL(antEnv.getLibraryURL(), \"syslibs/\");", "-            componentManager.loadLib(systemLibs, false);", "+            log(\"Loading system antlibs.\", MessageLevel.DEBUG);", "+            URL systemLibsURL = antEnv.getSyslibsURL();", "+            componentManager.loadLib(systemLibsURL, false);", "+            log(\"Importing standard components.\", MessageLevel.DEBUG);", "+            log(\"Executing global configuration tasks\", MessageLevel.DEBUG);", "-            URL antLibs = new URL(antEnv.getLibraryURL(), \"antlibs/\");", "-            componentManager.loadLib(antLibs, false);", "+            log(\"Loading standard antlibs.\", MessageLevel.DEBUG);", "+            URL antLibsURL = antEnv.getAntlibsURL();", "+            componentManager.loadLib(antLibsURL, false);", "-        } catch (MalformedURLException e) {", "-            ExecutionException ee =", "-                new ExecutionException(\"Unable to initialize antlibs\", e);", "-            buildFailureCause = ee;", "-            throw ee;", "+        } catch (Throwable e) {", "+            ExecutionException ee =", "+                new ExecutionException(\"Unable to initialize antlibs\", e);", "+            buildFailureCause = ee;", "+            throw ee;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a4c5b0b8686ac70d88e85fc10fd6ae2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/repository/GetLibraries.java", "commitBeforeChange": "4d831bb7cbb2bb2839303380a28f888c587802a0", "commitAfterChange": "f630ef56ed68316b07aaa27e05cf871de1070498", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 28, "signatureBeforeChange": "         public Object next()", "signatureAfterChange": "     public void markAllLibrariesForFetch(boolean fetch)", "diff": ["+     */", "+    public void markAllLibrariesForFetch(boolean fetch) {", "+        Iterator it = libraryIterator();", "+        while (it.hasNext()) {", "+            Library library = (Library) it.next();", "+            library._setToFetch(fetch);", "+        }", "+    }", "-         */", "-        public Object next() {", "-            if (!hasNext()) {", "-                throw new NoSuchElementException();", "-            }", "-            Library result = _next;", "-            _next = null;", "-            return result;", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa989092be0a24cf18c74f21a3b18712", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "aa43e37a025cdf54b8914b8283e57419a253ed59", "commitAfterChange": "dee95e3acc5154aee03ff5f91f9a56426ae79f3f", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 41, "signatureBeforeChange": "      private void writeVersionNeededToExtractAndGeneralPurposeBits(final int                                                                   zipMethod,                                                                   final boolean                                                                   utfFallback)         throws IOException", "signatureAfterChange": "      private void writeVersionNeededToExtractAndGeneralPurposeBits(final int                                                                   zipMethod,                                                                   final boolean                                                                   utfFallback,                                                                   final boolean                                                                   zip64)         throws IOException", "diff": ["-                                                                  utfFallback)", "+                                                                  utfFallback,", "+                                                                  final boolean", "+                                                                  zip64)", "-        int versionNeededToExtract = 10;", "-        int generalPurposeFlag = (useUTF8Flag || utfFallback) ? UFT8_NAMES_FLAG : 0;", "+        int versionNeededToExtract = INITIAL_VERSION;", "+        GeneralPurposeBit b = new GeneralPurposeBit();", "+        b.useUTF8ForNames(useUTF8Flag || utfFallback);", "-            versionNeededToExtract =  20;", "-            // bit3 set to signal, we use a data descriptor", "-            generalPurposeFlag |= 8;", "+            versionNeededToExtract = DATA_DESCRIPTOR_MIN_VERSION;", "+            b.useDataDescriptor(true);", "+        }", "+        if (zip64) {", "+            versionNeededToExtract = ZIP64_MIN_VERSION;", "-        writeOut(ZipShort.getBytes(generalPurposeFlag));", "+        writeOut(b.encode());", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b98d693faa0386caf96e9b66cec6ac06", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2112a3689c05f83d47fd209266cf9345", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "d5b535aa9a9f69dcd2d0cada46e88e7f3295c084", "commitAfterChange": "f8e71b50339d8fc15bdf6813eaa91d24096817a7", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "     protected void printResults(ResultSet rs, PrintStream out)         throws SQLException", "signatureAfterChange": "     protected void printResults(ResultSet rs, PrintStream out) throws SQLException", "diff": ["-    protected void printResults(ResultSet rs, PrintStream out)", "-        throws SQLException {", "+    protected void printResults(ResultSet rs, PrintStream out) throws SQLException {", "-            StringBuffer line = new StringBuffer();", "-            if (showheaders) {", "-                for (int col = 1; col < columnCount; col++) {", "-                     line.append(md.getColumnName(col));", "-                     line.append(\",\");", "-                }", "-                line.append(md.getColumnName(columnCount));", "-                out.println(line);", "-                line = new StringBuffer();", "-            }", "-            while (rs.next()) {", "-                boolean first = true;", "-                for (int col = 1; col <= columnCount; col++) {", "-                    String columnValue = rs.getString(col);", "-                    if (columnValue != null) {", "-                        columnValue = columnValue.trim();", "+            if (columnCount > 0) {", "+                if (showheaders) {", "+                    out.print(md.getColumnName(1));", "+                    for (int col = 2; col <= columnCount; col++) {", "+                         out.write(',');", "+                         out.print(md.getColumnName(col));", "-", "-                    if (first) {", "-                        first = false;", "-                    } else {", "-                        line.append(\",\");", "-                    }", "-                    line.append(columnValue);", "+                    out.println();", "-                out.println(line);", "-                line = new StringBuffer();", "+                while (rs.next()) {", "+                    out.print(rs.getString(1));", "+                    for (int col = 2; col <= columnCount; col++) {", "+                        out.write(',');", "+                        out.print(rs.getString(col));", "+                    }", "+                    out.println();", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ad24ff0c892603ce3c134271dad84a8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "4b3e0ee2041826e51ec60af99e7bcca7024bf676", "commitAfterChange": "ed3fafb887fef0afbcd90eef7f263fef3bde95d9", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private Object createdTypedObject( final String name,                                        final Class type )         throws Exception", "signatureAfterChange": "     private Object createTypedObject( final String name,                                       final Class type )         throws Exception", "diff": ["-    private Object createdTypedObject( final String name,", "-                                       final Class type )", "-        // Attempt to create the object", "-        final Object obj;", "-        try", "-        {", "-            final TypeFactory factory = m_typeManager.getFactory( DataType.class );", "-            obj = factory.create( name );", "-        }", "-        catch( final Exception e )", "-        {", "-            final String message =", "-                REZ.getString( \"create-typed-object.error\",", "-                               name,", "-                               type.getName() );", "-            throw new ConfigurationException( message, e );", "-        // Check the types", "-        if( !type.isInstance( obj ) )", "-            final String message =", "-                REZ.getString( \"mismatched-typed-object.error\", name, type.getName() );", "-        return obj;", "+     */", "+    private Object createTypedObject( final String name,", "+                                      final Class type )", "+        throws Exception", "+    {", "+        // Map the expected type to a role.  If found, attempt to create", "+        // an instance", "+        final RoleInfo roleInfo = m_roleManager.getRoleByType( type );", "+        if( roleInfo != null )", "+        {", "+            final TypeFactory factory = m_typeManager.getFactory( roleInfo.getType() );", "+            if( factory.canCreate( name ) )", "+            {", "+                return factory.create( name );", "+            }", "+        }", "+", "+        // Use the generic 'data-type' role.", "+        final TypeFactory factory = m_typeManager.getFactory( DataType.class );", "+        if( ! factory.canCreate( name ) )", "+        {", "+            throw new NoSuchPropertyException();", "+        }", "+        return factory.create( name );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2ac43f2723cb571a26b8115739e53fc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "677491b9276e57da76218487af18cfda70aa28af", "commitAfterChange": "a05d1f12196d34b23d4ab80c3598f6fb63410ac5", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     protected void writeLocalFileHeader(ZipEntry ze) throws IOException", "signatureAfterChange": "     protected void writeLocalFileHeader(ZipEntry ze) throws IOException", "diff": ["-        offsets.put(ze, new ZipLong(written));", "+        offsets.put(ze, ZipLong.getBytes(written));", "-        writeOut(LFH_SIG.getBytes());", "+        writeOut(LFH_SIG);", "-            writeOut((new ZipShort(20)).getBytes());", "+            writeOut(ZipShort.getBytes(20));", "-            writeOut((new ZipShort(8)).getBytes());", "+            writeOut(ZipShort.getBytes(8));", "-            writeOut((new ZipShort(10)).getBytes());", "+            writeOut(ZipShort.getBytes(10));", "-        writeOut((new ZipShort(ze.getMethod())).getBytes());", "+        writeOut(ZipShort.getBytes(ze.getMethod()));", "-            writeOut((new ZipLong(ze.getCrc())).getBytes());", "-            writeOut((new ZipLong(ze.getSize())).getBytes());", "-            writeOut((new ZipLong(ze.getSize())).getBytes());", "+            writeOut(ZipLong.getBytes(ze.getCrc()));", "+            writeOut(ZipLong.getBytes(ze.getSize()));", "+            writeOut(ZipLong.getBytes(ze.getSize()));", "-        writeOut((new ZipShort(name.length)).getBytes());", "+        writeOut(ZipShort.getBytes(name.length));", "-        writeOut((new ZipShort(extra.length)).getBytes());", "+        writeOut(ZipShort.getBytes(extra.length));"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e7b43ad699760970b2136daa1d06118", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "369a5f9d0876e2afe25f09391d268929", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ExtraFieldUtils.java", "commitBeforeChange": "1c5c68f3ed2854776e2377bf5486caadc8ecc5b8", "commitAfterChange": "f665a4d33564ecc12851996978a9847024643829", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public static ZipExtraField[] parse(byte[] data, boolean local)         throws ZipException", "signatureAfterChange": "     public static ZipExtraField[] parse(byte[] data, boolean local,                                         UnparseableExtraField onUnparseableData)         throws ZipException", "diff": ["+     */", "+    public static ZipExtraField[] parse(byte[] data, boolean local,", "+                                        UnparseableExtraField onUnparseableData)", "+        throws ZipException {", "+        LOOP:", "-                throw new ZipException(\"data starting at \" + start", "-                    + \" is in unknown format\");", "+                switch(onUnparseableData.getKey()) {", "+                case UnparseableExtraField.THROW_KEY:", "+                    throw new ZipException(\"bad extra field starting at \"", "+                                           + start + \".  Block length of \"", "+                                           + length + \" bytes exceeds remaining\"", "+                                           + \" data of \"", "+                                           + (data.length - start - WORD)", "+                                           + \" bytes.\");", "+                case UnparseableExtraField.READ_KEY:", "+                    UnparseableExtraFieldData field =", "+                        new UnparseableExtraFieldData();", "+                    if (local) {", "+                        field.parseFromLocalFileData(data, start,", "+                                                     data.length - start);", "+                    } else {", "+                        field.parseFromCentralDirectoryData(data, start,", "+                                                            data.length - start);", "+                    }", "+                    v.add(field);", "+                    /*FALLTHROUGH*/", "+                case UnparseableExtraField.SKIP_KEY:", "+                    // since we cannot parse the data we must assume", "+                    // the extra field consumes the whole rest of the", "+                    // available data", "+                    break LOOP;", "+                default:", "+                    throw new ZipException(\"unknown UnparseableExtraField key: \"", "+                                           + onUnparseableData.getKey());", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59ec31f15c2efe5c569301b688386607", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ExecutionFrame.java", "commitBeforeChange": "7499c443d67445ea8fd0b8f4bd56c72251b18bf4", "commitAfterChange": "b7e43ad8c5906ae2b6d6b42f8b2715dc7d2e7a16", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 33, "signatureBeforeChange": "     private void configureElement(Object element, BuildElement model)          throws ExecutionException, TaskException", "signatureAfterChange": "     private void configureElement(Object element, BuildElement model)          throws ExecutionException", "diff": ["-         throws ExecutionException, TaskException {", "+         throws ExecutionException {", "+            if (!reflector.supportsAttribute(attributeName)) {", "+                throw new ExecutionException(model.getType()", "+                     + \" does not support the \\\"\" + attributeName", "+                     + \"\\\" attribute\", model.getLocation());", "+            }", "-                replacePropertyRefs(attributeValue));", "+                dataService.replacePropertyRefs(attributeValue));", "-            reflector.addText(element, replacePropertyRefs(modelText));", "+            if (!reflector.supportsText()) {", "+                throw new ExecutionException(model.getType()", "+                     + \" does not support content\", model.getLocation());", "+            }", "+            reflector.addText(element,", "+                dataService.replacePropertyRefs(modelText));", "-                Object nestedElement = createNestedElement(reflector, element,", "-                    nestedElementModel);", "-                reflector.addElement(element, nestedElementName, nestedElement);", "+                if (reflector.supportsNestedAdder(nestedElementName)) {", "+                    addNestedElement(reflector, element, nestedElementModel);", "+                } else if (reflector.supportsNestedCreator(nestedElementName)) {", "+                    createNestedElement(reflector, element, nestedElementModel);", "+                } else {", "+                    throw new ExecutionException(model.getType()", "+                         + \" does not support the \\\"\" + nestedElementName", "+                         + \"\\\" nested element\",", "+                        nestedElementModel.getLocation());", "+                }", "+"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "95008ee578d4921e06c6350f592f4ba7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "072c92ae2db78815e8620fff26125bec", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipFile.java", "commitBeforeChange": "aa43e37a025cdf54b8914b8283e57419a253ed59", "commitAfterChange": "dee95e3acc5154aee03ff5f91f9a56426ae79f3f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private Map populateFromCentralDirectory()         throws IOException", "signatureAfterChange": "     private Map<ZipEntry, NameAndComment> populateFromCentralDirectory()         throws IOException", "diff": ["-    private Map populateFromCentralDirectory()", "+    private Map<ZipEntry, NameAndComment> populateFromCentralDirectory()", "-        HashMap noUTF8Flag = new HashMap();", "+        HashMap<ZipEntry, NameAndComment> noUTF8Flag =", "+            new HashMap<ZipEntry, NameAndComment>();", "-", "-        byte[] cfh = new byte[CFH_LEN];", "-        final long cfhSig = ZipLong.getValue(ZipOutputStream.CFH_SIG);", "-        if (sig != cfhSig && startsWithLocalFileHeader()) {", "+", "+        if (sig != CFH_SIG && startsWithLocalFileHeader()) {", "-        while (sig == cfhSig) {", "-            archive.readFully(cfh);", "-            int off = 0;", "-            ZipEntry ze = new ZipEntry();", "-            int versionMadeBy = ZipShort.getValue(cfh, off);", "-            off += SHORT;", "-            ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);", "-", "-            off += SHORT; // skip version info", "-", "-            final int generalPurposeFlag = ZipShort.getValue(cfh, off);", "-            final boolean hasUTF8Flag = ", "-                (generalPurposeFlag & ZipOutputStream.UFT8_NAMES_FLAG) != 0;", "-            final ZipEncoding entryEncoding =", "-                hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;", "-", "-            off += SHORT;", "-", "-            ze.setMethod(ZipShort.getValue(cfh, off));", "-            off += SHORT;", "-", "-            // FIXME this is actually not very cpu cycles friendly as we are converting from", "-            // dos to java while the underlying Sun implementation will convert", "-            // from java to dos time for internal storage...", "-            long time = dosToJavaTime(ZipLong.getValue(cfh, off));", "-            ze.setTime(time);", "-            off += WORD;", "-", "-            ze.setCrc(ZipLong.getValue(cfh, off));", "-            off += WORD;", "-", "-            ze.setCompressedSize(ZipLong.getValue(cfh, off));", "-            off += WORD;", "-", "-            ze.setSize(ZipLong.getValue(cfh, off));", "-            off += WORD;", "-", "-            int fileNameLen = ZipShort.getValue(cfh, off);", "-            off += SHORT;", "-", "-            int extraLen = ZipShort.getValue(cfh, off);", "-            off += SHORT;", "-", "-            int commentLen = ZipShort.getValue(cfh, off);", "-            off += SHORT;", "-", "-            off += SHORT; // disk number", "-", "-            ze.setInternalAttributes(ZipShort.getValue(cfh, off));", "-            off += SHORT;", "-", "-            ze.setExternalAttributes(ZipLong.getValue(cfh, off));", "-            off += WORD;", "-", "-            byte[] fileName = new byte[fileNameLen];", "-            archive.readFully(fileName);", "-            ze.setName(entryEncoding.decode(fileName));", "-", "-            // LFH offset,", "-            OffsetEntry offset = new OffsetEntry();", "-            offset.headerOffset = ZipLong.getValue(cfh, off);", "-            // data offset will be filled later", "-            entries.put(ze, offset);", "-", "-            nameMap.put(ze.getName(), ze);", "-", "-            byte[] cdExtraData = new byte[extraLen];", "-            archive.readFully(cdExtraData);", "-            ze.setCentralDirectoryExtra(cdExtraData);", "-", "-            byte[] comment = new byte[commentLen];", "-            archive.readFully(comment);", "-            ze.setComment(entryEncoding.decode(comment));", "-", "+        while (sig == CFH_SIG) {", "+            readCentralDirectoryEntry(noUTF8Flag);", "-", "-            if (!hasUTF8Flag && useUnicodeExtraFields) {", "-                noUTF8Flag.put(ze, new NameAndComment(fileName, comment));", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "564a833e399c474b7c25a5772bebdc07", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "4cbbf3629a15a78615a3ce63ffe6f3fc028b172d", "commitAfterChange": "2c04d7e833b4e5dab1a3c5ddfe14b572aea8c112", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 35, "signatureBeforeChange": "     protected void writeLocalFileHeader(ZipEntry ze) throws IOException", "signatureAfterChange": "     protected void writeLocalFileHeader(ZipEntry ze) throws IOException", "diff": ["-        offsets.put(ze, Long.valueOf(written));", "+        final byte[] localHeader = createLocalFileHeader(ze, name, encodable);", "+        final long localHeaderStart = written;", "+        offsets.put(ze, localHeaderStart);", "+        entry.localDataStart = localHeaderStart + LFH_CRC_OFFSET; // At crc offset", "+        writeCounted(localHeader);", "+        entry.dataStart = written;", "+    }", "-        writeOut(LFH_SIG);", "-        written += WORD;", "-        writeVersionNeededToExtractAndGeneralPurposeBits(zipMethod,", "-                                                         !encodable", "-                                                         && fallbackToUTF8,", "-                                                         hasZip64Extra(ze));", "-        written += WORD;", "-        writeOut(ZipShort.getBytes(zipMethod));", "-        written += SHORT;", "-        // last mod. time and date", "-        writeOut(ZipUtil.toDosTime(ze.getTime()));", "-        written += WORD;", "-        entry.localDataStart = written;", "-        if (zipMethod == DEFLATED || raf != null) {", "-            writeOut(LZERO);", "-            if (hasZip64Extra(entry.entry)) {", "-                // point to ZIP64 extended information extra field for", "-                // sizes, may get rewritten once sizes are known if", "-                // stream is seekable", "-                writeOut(ZipLong.ZIP64_MAGIC.getBytes());", "-                writeOut(ZipLong.ZIP64_MAGIC.getBytes());", "-            } else {", "-                writeOut(LZERO);", "-                writeOut(LZERO);", "-            }", "-        } else {", "-            writeOut(ZipLong.getBytes(ze.getCrc()));", "-            byte[] size = ZipLong.ZIP64_MAGIC.getBytes();", "-            if (!hasZip64Extra(ze)) {", "-                size = ZipLong.getBytes(ze.getSize());", "-            }", "-            writeOut(size);", "-            writeOut(size);", "-        // CheckStyle:MagicNumber OFF", "-        written += 12;", "-        // CheckStyle:MagicNumber ON", "-", "-        writeOut(ZipShort.getBytes(name.limit()));", "-        written += SHORT;", "-        byte[] extra = ze.getLocalFileDataExtra();", "-        writeOut(ZipShort.getBytes(extra.length));", "-        written += SHORT;", "-        writeOut(name.array(), name.arrayOffset(),", "-                 name.limit() - name.position());", "-        written += name.limit();", "-        // extra field", "-        writeOut(extra);", "-        written += extra.length;", "-", "-        entry.dataStart = written;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b1c03aa89aa1f3247f2b1d527196acc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "4cbbf3629a15a78615a3ce63ffe6f3fc028b172d", "commitAfterChange": "2c04d7e833b4e5dab1a3c5ddfe14b572aea8c112", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 39, "signatureBeforeChange": "     protected void writeCentralFileHeader(ZipEntry ze) throws IOException", "signatureAfterChange": "     protected void writeCentralFileHeader(ZipEntry ze) throws IOException", "diff": ["-        writeOut(CFH_SIG);", "-        written += WORD;", "+        byte[] centralFileHeader = createCentralFileHeader(ze);", "+        writeCounted(centralFileHeader);", "+    }", "-        final long lfhOffset = offsets.get(ze).longValue();", "-            || ze.getCompressedSize() >= ZIP64_MAGIC", "-            || ze.getSize() >= ZIP64_MAGIC", "-            || lfhOffset >= ZIP64_MAGIC;", "-            // exception would have been throw in putNextEntry or", "-            // closeEntry", "-                                             .ARCHIVE_TOO_BIG_MESSAGE);", "-        // version made by", "-        // CheckStyle:MagicNumber OFF", "-        writeOut(ZipShort.getBytes((ze.getPlatform() << 8) |", "-                                   (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION", "-                                                  : ZIP64_MIN_VERSION)));", "-        written += SHORT;", "-        final int zipMethod = ze.getMethod();", "-        final boolean encodable = zipEncoding.canEncode(ze.getName());", "-        writeVersionNeededToExtractAndGeneralPurposeBits(zipMethod,", "-                                                         !encodable", "-                                                         && fallbackToUTF8,", "-                                                         needsZip64Extra);", "-        written += WORD;", "-", "-        // compression method", "-        writeOut(ZipShort.getBytes(zipMethod));", "-        written += SHORT;", "-", "-        // last mod. time and date", "-        writeOut(ZipUtil.toDosTime(ze.getTime()));", "-        written += WORD;", "-", "-        // CRC", "-        // compressed length", "-        // uncompressed length", "-        writeOut(ZipLong.getBytes(ze.getCrc()));", "-        if (ze.getCompressedSize() >= ZIP64_MAGIC", "-            || ze.getSize() >= ZIP64_MAGIC) {", "-            writeOut(ZipLong.ZIP64_MAGIC.getBytes());", "-            writeOut(ZipLong.ZIP64_MAGIC.getBytes());", "-        } else {", "-            writeOut(ZipLong.getBytes(ze.getCompressedSize()));", "-            writeOut(ZipLong.getBytes(ze.getSize()));", "-        }", "-        // CheckStyle:MagicNumber OFF", "-        written += 12;", "-        // CheckStyle:MagicNumber ON", "-", "-        ByteBuffer name = getName(ze);", "-", "-        writeOut(ZipShort.getBytes(name.limit()));", "-        written += SHORT;", "-", "-        // extra field length", "-        writeOut(ZipShort.getBytes(extra.length));", "-        written += SHORT;", "-        writeOut(ZipShort.getBytes(commentB.limit()));", "-        written += SHORT;", "-        writeOut(ZERO);", "-        written += SHORT;", "-        writeOut(ZipShort.getBytes(ze.getInternalAttributes()));", "-        written += SHORT;", "-        writeOut(ZipLong.getBytes(ze.getExternalAttributes()));", "-        written += WORD;", "-        writeOut(ZipLong.getBytes(Math.min(lfhOffset, ZIP64_MAGIC)));", "-        written += WORD;", "-        writeOut(name.array(), name.arrayOffset(),", "-                 name.limit() - name.position());", "-        written += name.limit();", "-        // extra field", "-        writeOut(extra);", "-        written += extra.length;", "-        writeOut(commentB.array(), commentB.arrayOffset(),", "-                 commentB.limit() - commentB.position());", "-        written += commentB.limit();"]}]}
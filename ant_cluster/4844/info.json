{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "68eece069c2e65b0b864d93796c3f410", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9608ce07b6ca85d38be162757792c393", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/net/TelnetTask.java", "commitBeforeChange": "14ce1527da98295378a4539fc827a9e38998ec61", "commitAfterChange": "f735f5f44df9fa52266e7b8b7f2741c2b7560d22", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void setTimeout( Integer i )", "signatureAfterChange": "     private void processTasks( final AntTelnetClient telnet )         throws TaskException", "diff": ["-    public void setTimeout( Integer i )", "-        this.defaultTimeout = i;", "+     */", "+    private void processTasks( final AntTelnetClient telnet )", "+        throws TaskException", "+    {", "+        final Iterator tasks = m_telnetTasks.iterator();", "+        while( tasks != null && tasks.hasNext() )", "+        {", "+            final TelnetSubTask task = (TelnetSubTask)tasks.next();", "+            if( task instanceof TelnetRead && m_defaultTimeout != null )", "+            {", "+                ( (TelnetRead)task ).setDefaultTimeout( m_defaultTimeout );", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfcf94df8d604b8b45d7705931663595", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/net/TelnetTask.java", "commitBeforeChange": "14ce1527da98295378a4539fc827a9e38998ec61", "commitAfterChange": "f735f5f44df9fa52266e7b8b7f2741c2b7560d22", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void setTimeout( Integer i )", "signatureAfterChange": "     private void processTasks( final AntTelnetClient telnet )         throws TaskException", "diff": ["-    public void setTimeout( Integer i )", "-        this.defaultTimeout = i;", "+     */", "+    private void processTasks( final AntTelnetClient telnet )", "+        throws TaskException", "+    {", "+        final Iterator tasks = m_telnetTasks.iterator();", "+        while( tasks != null && tasks.hasNext() )", "+        {", "+            final TelnetSubTask task = (TelnetSubTask)tasks.next();", "+            if( task instanceof TelnetRead && m_defaultTimeout != null )", "+            {", "+                ( (TelnetRead)task ).setDefaultTimeout( m_defaultTimeout );", "+            }", "+        }", "+    }"]}]}
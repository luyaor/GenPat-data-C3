{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "48b1036c3ab5c129d1fadc3bb42b5929", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dd8385c014022d2c7f3cfd1cfb1d91c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private void runBuild(ClassLoader coreLoader) throws BuildException", "signatureAfterChange": "     private void runBuild(final ClassLoader coreLoader) throws BuildException", "diff": ["-    private void runBuild(ClassLoader coreLoader) throws BuildException {", "+    private void runBuild(final ClassLoader coreLoader) throws BuildException {", "-        ArgumentProcessorRegistry processorRegistry = ArgumentProcessorRegistry.getInstance();", "+        final ArgumentProcessorRegistry processorRegistry = ArgumentProcessorRegistry.getInstance();", "-        for (ArgumentProcessor processor : processorRegistry.getProcessors()) {", "-            List<String> extraArgs = extraArguments.get(processor.getClass());", "+        for (final ArgumentProcessor processor : processorRegistry.getProcessors()) {", "+            final List<String> extraArgs = extraArguments.get(processor.getClass());", "-            PrintStream savedErr = System.err;", "-            PrintStream savedOut = System.out;", "-            InputStream savedIn = System.in;", "+            final PrintStream savedErr = System.err;", "+            final PrintStream savedOut = System.out;", "+            final InputStream savedIn = System.in;", "-                    } catch (SecurityException swallowed) {", "+                    } catch (final SecurityException swallowed) {", "-                    ProxySetup proxySetup = new ProxySetup(project);", "+                    final ProxySetup proxySetup = new ProxySetup(project);", "-                for (ArgumentProcessor processor : processorRegistry.getProcessors()) {", "-                    List<String> extraArgs = extraArguments.get(processor.getClass());", "+                for (final ArgumentProcessor processor : processorRegistry.getProcessors()) {", "+                    final List<String> extraArgs = extraArguments.get(processor.getClass());", "-                for (ArgumentProcessor processor : processorRegistry.getProcessors()) {", "-                    List<String> extraArgs = extraArguments.get(processor.getClass());", "+                for (final ArgumentProcessor processor : processorRegistry.getProcessors()) {", "+                    final List<String> extraArgs = extraArguments.get(processor.getClass());", "-        } catch (RuntimeException exc) {", "+        } catch (final RuntimeException exc) {", "-        } catch (Error e) {", "+        } catch (final Error e) {", "-                } catch (Throwable t) {", "+                } catch (final Throwable t) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68e98b431252935f576eee9fbd747a44", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "     public static void main(String[] args) throws IOException", "signatureAfterChange": "     public static void main(final String[] args) throws IOException", "diff": ["-    public static void main(String[] args) throws IOException {", "+    public static void main(final String[] args) throws IOException {", "-        Properties props = new Properties();", "+        final Properties props = new Properties();", "-                    String methodsList = args[i].substring(Constants.METHOD_NAMES.length());", "+                    final String methodsList = args[i].substring(Constants.METHOD_NAMES.length());", "-                } catch (IllegalArgumentException ex) {", "+                } catch (final IllegalArgumentException ex) {", "-                } catch (BuildException be) {", "+                } catch (final BuildException be) {", "-                FileInputStream in = new FileInputStream(args[i]", "+                final FileInputStream in = new FileInputStream(args[i]", "-                antThreadID = Integer.parseInt( args[i].substring(Constants.THREADID.length()) );", "+                antThreadID = Integer.parseInt(args[i].substring(Constants.THREADID.length()));", "-        Hashtable p = System.getProperties();", "-        for (Enumeration e = p.keys(); e.hasMoreElements();) {", "-            Object key = e.nextElement();", "+        final Hashtable p = System.getProperties();", "+        for (final Enumeration e = p.keys(); e.hasMoreElements();) {", "+            final Object key = e.nextElement();", "-                java.io.BufferedReader reader =", "+                final java.io.BufferedReader reader =", "-                    StringTokenizer st = new StringTokenizer(line, \",\");", "-                    String testListSpec = st.nextToken();", "-                    int colonIndex = testListSpec.indexOf(':');", "+                    final StringTokenizer st = new StringTokenizer(line, \",\");", "+                    final String testListSpec = st.nextToken();", "+                    final int colonIndex = testListSpec.indexOf(':');", "-                    JUnitTest t = new JUnitTest(testCaseName);", "+                    final JUnitTest t = new JUnitTest(testCaseName);", "-            } catch (IOException e) {", "+            } catch (final IOException e) {", "-            JUnitTest t = new JUnitTest(args[0]);", "+            final JUnitTest t = new JUnitTest(args[0]);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "daed7859e6441f6b1051fd50f4b08341", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "753b53edb9f7280a7b0d9b30a9333a50", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/filters/TokenFilterTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 18, "signatureBeforeChange": "      public void testFilterContainsRegex() throws IOException", "signatureAfterChange": "      @Test     public void testFilterContainsRegex() throws IOException", "diff": ["+    @Test", "-        if (! hasRegex(\"testFilterContainsRegex\"))", "-            return;", "-        String contents = getFileString(", "-            \"filtercontainsregex\", getProject().getProperty(\"output\") + \"/filtercontainsregex\");", "-        assertStringContains(contents, \"hello world\");", "-        assertStringNotContains(contents, \"this is the moon\");", "-        assertStringContains(contents, \"World here\");", "+    \tbuildRule.executeTarget(\"hasregex\");", "+        Assume.assumeTrue(\"Regex not present\", getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\").contains(\"bye world\"));", "+", "+        buildRule.executeTarget(\"filtercontainsregex\");", "+        String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/filtercontainsregex\");", "+        assertContains(\"hello world\", contents);", "+        assertNotContains(\"this is the moon\", contents);", "+        assertContains(\"World here\", contents);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bb9f685650442a2f308237797c7e4ca", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/filters/TokenFilterTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 17, "signatureBeforeChange": "      public void testContainsRegex() throws IOException", "signatureAfterChange": "      @Test     public void testContainsRegex() throws IOException", "diff": ["+    @Test", "-        if (! hasRegex(\"testContainsRegex\"))", "-            return;", "-        String contents = getFileString(", "-            \"containsregex\", getProject().getProperty(\"output\") + \"/containsregex\");", "-        assertStringContains(contents, \"hello world\");", "-        assertStringNotContains(contents, \"this is the moon\");", "-        assertStringContains(contents, \"World here\");", "+    \tbuildRule.executeTarget(\"hasregex\");", "+        Assume.assumeTrue(\"Regex not present\", getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\").contains(\"bye world\"));", "+", "+        //expectFileContains(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\", \"bye world\");", "+", "+        buildRule.executeTarget(\"containsregex\");", "+        String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/containsregex\");", "+        assertContains(\"hello world\", contents);", "+        assertNotContains(\"this is the moon\", contents);", "+        assertContains(\"World here\", contents);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "512900aa886f46456c0f3b16ff725235", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22abec8c7860ec3db500590a95d984a1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "403c32e5c5322f65e184f6d21496d0295d74f6e1", "commitAfterChange": "655df7f9e198a141defc9dcfb45f7f14cd7749f8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 8, "signatureBeforeChange": "     protected Class loadClass(String classname, boolean resolve) throws ClassNotFoundException", "signatureAfterChange": "     protected Class loadClass(String classname, boolean resolve) throws ClassNotFoundException", "diff": ["-        ", "+", "+        // default to the global setting and then see", "+        // if this class belongs to a package which has been", "+        // designated to use a specific loader first (this one or the system one)", "+        boolean useSystemFirst = systemFirst; ", "+", "+        for (Enumeration e = systemPackages.elements(); e.hasMoreElements();) {", "+            String packageName = (String)e.nextElement();", "+            if (classname.startsWith(packageName)) {", "+                useSystemFirst = true;", "+                break;", "+            }", "+        }", "+", "+        for (Enumeration e = loaderPackages.elements(); e.hasMoreElements();) {", "+            String packageName = (String)e.nextElement();", "+            if (classname.startsWith(packageName)) {", "+                useSystemFirst = false;", "+                break;", "+            }", "+        }", "+", "-            try {", "-                theClass = findSystemClass(classname);", "+            if (useSystemFirst) {", "+                try {", "+                    theClass = findSystemClass(classname);", "+                    project.log(\"Class \" + classname + \" loaded from system loader\", Project.MSG_VERBOSE);", "+                }", "+                catch (ClassNotFoundException cnfe) {", "+                    theClass = findClass(classname);", "+                    project.log(\"Class \" + classname + \" loaded from ant loader\", Project.MSG_VERBOSE);", "+                }", "-            catch (ClassNotFoundException cnfe) {", "-                theClass = findClass(classname);", "+            else {", "+                try {", "+                    theClass = findClass(classname);", "+                    project.log(\"Class \" + classname + \" loaded from ant loader\", Project.MSG_VERBOSE);", "+                }", "+                catch (ClassNotFoundException cnfe) {", "+                    theClass = findSystemClass(classname);", "+                    project.log(\"Class \" + classname + \" loaded from system loader\", Project.MSG_VERBOSE);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "683e5ed69f4aef805ed2a26871ec8dd1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/PatternSet.java", "commitBeforeChange": "55ed11a225d2a2c7d2cc28a6b07d425a79d3b91a", "commitAfterChange": "c2e92b31856632faa104d9d1a93c7e1480aa8b92", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 25, "signatureBeforeChange": "     private void readFiles(Project p)", "signatureAfterChange": "     private void readFiles(Project p)", "diff": ["-        if (incl != null) {", "-            readPatterns(incl, includeList, p);", "-            incl = null;", "+        if (includesFileList.size() > 0) {", "+            Enumeration e = includesFileList.elements();", "+            while (e.hasMoreElements()) {", "+            \tNameEntry ne = (NameEntry)e.nextElement();", "+            \tString fileName = ne.evalName(p);", "+            \tif (fileName != null) {", "+                    File inclFile = p.resolveFile(fileName);", "+                    if (!inclFile.exists())", "+                        throw new BuildException(\"Includesfile \"", "+                                                 + inclFile.getAbsolutePath()", "+                                                 + \" not found.\");", "+                    readPatterns(inclFile, includeList, p);", "+            \t}", "+            }", "+            includesFileList.clear();", "-        if (excl != null) {", "-            readPatterns(excl, excludeList, p);", "-            excl = null;", "-        }", "-    }", "+        if (excludesFileList.size() > 0) {", "+            Enumeration e = includesFileList.elements();", "+            while (e.hasMoreElements()) {", "+            \tNameEntry ne = (NameEntry)e.nextElement();", "+            \tString fileName = ne.evalName(p);", "+            \tif (fileName != null) {", "+                    File exclFile = p.resolveFile(fileName);", "+                    if (!exclFile.exists())", "+                        throw new BuildException(\"Excludesfile \"", "+                                                 + exclFile.getAbsolutePath()", "+                                                 + \" not found.\");", "+                    readPatterns(exclFile, excludeList, p);", "+            \t}", "+            }", "+            excludesFileList.clear();", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9b8ff7b0e91022122dbade1e793f9f50", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "063a4b8413bd05e8aaa2eb2eb99f9199", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ProcessDestroyer.java", "commitBeforeChange": "97263e1fedac0972ffe52f673da89a531556cba2", "commitAfterChange": "5e4408208a34ba760533b1c6738ccb71cdfa03ba", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void removeShutdownHook()", "signatureAfterChange": "     private void removeShutdownHook()", "diff": ["-        if (removeShutdownHookMethod != null && destroyProcessThread != null) {", "+        if (removeShutdownHookMethod != null && added && !running) {", "-                // start the hook thread, a unstarted thread may not be", "-                // eligible for garbage collection", "-                // Cf.: http://developer.java.sun.com/developer/bugParade/bugs/4533087.html", "-                destroyProcessThread.setShouldDestroy(false);", "-                destroyProcessThread.start();", "-                // this should return quickly, since Process.destroy()", "-                try {", "-                    destroyProcessThread.join(20000);", "-                } catch (InterruptedException ie) {", "-                    // the thread didn't die in time", "-                    // it should not kill any processes unexpectedly", "-                }", "-                destroyProcessThread = null;", "-                added = false;", "-                e.printStackTrace();", "+                Throwable t = e.getCause();", "+                if (t != null && t.getClass() == IllegalStateException.class) {", "+                    // shutdown already is in progress", "+                    running = true;", "+                } else {", "+                    e.printStackTrace();", "+                }", "+            // start the hook thread, a unstarted thread may not be", "+            // eligible for garbage collection", "+            // Cf.: http://developer.java.sun.com/developer/bugParade/bugs/4533087.html", "+            destroyProcessThread.setShouldDestroy(false);", "+            destroyProcessThread.start();", "+            // this should return quickly, since it basically is a NO-OP.", "+            try {", "+                destroyProcessThread.join(20000);", "+            } catch (InterruptedException ie) {", "+                // the thread didn't die in time", "+                // it should not kill any processes unexpectedly", "+            }", "+            destroyProcessThread = null;", "+            added = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b15d002f9fc32ee571555c22bb010a20", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Move.java", "commitBeforeChange": "adb161cdc40c45f6f563cdd7816973bc91a75178", "commitAfterChange": "39a4da86733bb32057e0bacac1c73895717f6181", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     protected boolean renameFile(File sourceFile, File destFile, boolean filtering,                                  boolean overwrite) throws IOException, BuildException", "signatureAfterChange": "     protected boolean renameFile(File sourceFile, File destFile, boolean filtering,                                  boolean overwrite) throws IOException, BuildException", "diff": ["-        boolean renamed = false;", "-        if ((getFilterSets().size() + getFilterChains().size() == 0)", "-                && !(filtering || destFile.isDirectory())) {", "-            // ensure that parent dir of dest file exists!", "-            File parent = destFile.getParentFile();", "-            if (parent != null && !parent.exists()) {", "-                parent.mkdirs();", "-            }", "-            if (destFile.isFile() && !getFileUtils().fileNameEquals(sourceFile, destFile)", "-                    && !destFile.delete()) {", "-                throw new BuildException(\"Unable to remove existing \" + \"file \" + destFile);", "-            }", "-            renamed = sourceFile.renameTo(destFile);", "+        if (destFile.isDirectory() || filtering || getFilterSets().size() > 0", "+                || getFilterChains().size() > 0) {", "+            return false;", "-        return renamed;", "+        // ensure that parent dir of dest file exists!", "+        File parent = destFile.getParentFile();", "+        if (parent != null && !parent.exists()) {", "+            parent.mkdirs();", "+        } else if (destFile.isFile() && !getFileUtils().fileNameEquals(sourceFile, destFile)", "+                && !destFile.delete()) {", "+            throw new BuildException(\"Unable to remove existing file \" + destFile);", "+        }", "+        return sourceFile.renameTo(destFile);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcba5d75ed4fadb3a6a2a9f0779a0a73", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ANTLR.java", "commitBeforeChange": "c99b33079f5cd10abf44645de85729fe35b82cda", "commitAfterChange": "161579a6d082eac88d197ee70491745c54d48b92", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     protected void addClasspathEntry(String resource)", "signatureAfterChange": "     protected void addClasspathEntry(String resource)", "diff": ["-        URL url = getClass().getResource(resource);", "-        if (url != null) {", "-            String u = url.toString();", "-            if (u.startsWith(\"jar:file:\")) {", "-                int pling = u.indexOf(\"!\");", "-                String jarName = u.substring(9, pling);", "-                log(\"Implicitly adding \" + jarName + \" to classpath\",", "-                        Project.MSG_DEBUG);", "-                createClasspath().setLocation(new File((new File(jarName)).getAbsolutePath()));", "-            } else if (u.startsWith(\"file:\")) {", "-                int tail = u.indexOf(resource);", "-                String dirName = u.substring(5, tail);", "-                log(\"Implicitly adding \" + dirName + \" to classpath\",", "-                        Project.MSG_DEBUG);", "-                createClasspath().setLocation(new File((new File(dirName)).getAbsolutePath()));", "-            } else {", "-                log(\"Don\\'t know how to handle resource URL \" + u,", "-                        Project.MSG_DEBUG);", "-            }", "+        /* ", "+         * pre Ant 1.6 this method used to call getClass().getResource", "+         * while Ant 1.6 will call ClassLoader.getResource().", "+         *", "+         * The difference is that Class.getResource expects a leading", "+         * slash for \"absolute\" resources and will strip it before", "+         * delegating to ClassLoader.getResource - so we now have to", "+         * emulate Class's behavior.", "+         */", "+        if (resource.startsWith(\"/\")) {", "+            resource = resource.substring(1);", "+        } else {", "+            resource = \"org/apache/tools/ant/taskdefs/optional/\"", "+                + resource;", "+        }", "+        ", "+        File f = LoaderUtils.getResourceSource(getClass().getClassLoader(),", "+                                               resource);", "+        if (f != null) {", "+            log(\"Found \" + f.getAbsolutePath(), Project.MSG_DEBUG);", "+            createClasspath().setLocation(f);"]}]}
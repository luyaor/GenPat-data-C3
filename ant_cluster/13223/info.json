{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "32cc6830f78ea51eb3338559d32c39e6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce9ee574cd87aed9a7c4d8833072a40c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/XalanExecutor.java", "commitBeforeChange": "cde70b0faf37b85f91e047dc0648d81851f2cfbe", "commitAfterChange": "d891e90f617556a2f4694ce5878912a92a884c19", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     static XalanExecutor newInstance(AggregateTransformer caller) throws BuildException", "signatureAfterChange": "     static XalanExecutor newInstance(AggregateTransformer caller)          throws BuildException", "diff": ["-    static XalanExecutor newInstance(AggregateTransformer caller) throws BuildException {", "-        Class procVersion = null;", "+    static XalanExecutor newInstance(AggregateTransformer caller) ", "+        throws BuildException {", "-            procVersion = Class.forName(\"org.apache.xalan.processor.XSLProcessorVersion\");", "-            executor = (XalanExecutor) Class.forName(", "-                \"org.apache.tools.ant.taskdefs.optional.junit.Xalan2Executor\").newInstance();", "-        } catch (Exception xalan2missing) {", "-            StringWriter swr = new StringWriter();", "-            xalan2missing.printStackTrace(new PrintWriter(swr));", "-            caller.task.log(\"Didn't find Xalan2.\", Project.MSG_DEBUG);", "-            caller.task.log(swr.toString(), Project.MSG_DEBUG);", "+            Class clazz = Class.forName(pack + \"Xalan2Executor\");", "+            executor = (XalanExecutor)clazz.newInstance();", "+        } catch (Exception xsltcApacheMissing){", "+            caller.task.log(xsltcApacheMissing.toString());", "-                procVersion = Class.forName(\"org.apache.xalan.xslt.XSLProcessorVersion\");", "-                executor = (XalanExecutor) Class.forName(", "-                    \"org.apache.tools.ant.taskdefs.optional.junit.Xalan1Executor\").newInstance();", "-            } catch (Exception xalan1missing) {", "-                swr = new StringWriter();", "-                xalan1missing.printStackTrace(new PrintWriter(swr));", "-                caller.task.log(\"Didn't find Xalan1.\", Project.MSG_DEBUG);", "-                caller.task.log(swr.toString(), Project.MSG_DEBUG);", "-                String msg = \"Could not find xalan2 nor xalan1 \"", "-                    + \"in the classpath. Check http://xml.apache.org/xalan-j/\";", "-                if (!JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)", "-                    && !JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_2)", "-                    && !JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_3)", "-                    && !JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_4)) {", "-                    msg += \"\\r\\nStarting with JDK 1.5, the built-in processor \"", "-                        + \"of the JDK is no longer Xalan\\r\\nbut XSLTC which is \"", "-                        + \"not (yet) supported by the junitreport task.\";", "-                }", "-                throw new BuildException(msg);", "+                Class clazz = Class.forName(pack + \"Xalan1Executor\");", "+                executor = (XalanExecutor) clazz.newInstance();", "+            } catch (Exception xalan1Missing){", "+                caller.task.log(xalan1Missing.toString());", "+                throw new BuildException(\"Could not find xstlc nor xalan2 nor \"", "+                                         + \"xalan1 in the classpath. Check \"", "+                                         + \"http://xml.apache.org/xalan-j\");", "-        String version = getXalanVersion(procVersion);", "-        caller.task.log(\"Using Xalan version: \" + version);", "+        String classNameImpl = executor.getImplementation();", "+        String version = executor.getProcVersion(classNameImpl);", "+        caller.task.log(\"Using \" + version, Project.MSG_VERBOSE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d010e45be8f7159b73ef99967c0d5538", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Definer.java", "commitBeforeChange": "26f6bfe2be0861267eca5624537b48daa7574dd6", "commitAfterChange": "8701272b2418d74536d09b289f118d1833d42217", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 34, "signatureBeforeChange": "     private void addDefinition(ClassLoader al, String name, String value)         throws BuildException", "signatureAfterChange": "      protected void addDefinition(ClassLoader al, String name, String classname)         throws BuildException", "diff": ["-     */", "-    private void addDefinition(ClassLoader al, String name, String value)", "-        throws BuildException {", "-        try {", "-            Class c = al.loadClass(value);", "-            AntClassLoader.initializeClass(c);", "-            addDefinition(name, c);", "-        } catch (ClassNotFoundException cnfe) {", "-            String msg = getTaskName() + \" class \" + value", "-                + \" cannot be found\";", "-            throw new BuildException(msg, cnfe, getLocation());", "-        } catch (NoClassDefFoundError ncdfe) {", "-            String msg = getTaskName() + \": A class needed by class \"", "-                + value + \" cannot be found: \" + ncdfe.getMessage();", "-            throw new BuildException(msg, ncdfe, location);", "-        }", "-    }", "+    protected void addDefinition(ClassLoader al, String name, String classname)", "+        throws BuildException", "+    {", "+        Class cl = null;", "+        try {", "+            try {", "+                if (onError != OnError.IGNORE) {", "+                    cl = al.loadClass(classname);", "+                    AntClassLoader.initializeClass(cl);", "+                }", "+                ", "+                if (adapter != null) {", "+                    adapterClass = al.loadClass(adapter);", "+                    AntClassLoader.initializeClass(adapterClass);", "+                }", "+", "+                if (adaptTo != null) {", "+                    adaptToClass = al.loadClass(adaptTo);", "+                    AntClassLoader.initializeClass(adaptToClass);", "+                }", "+", "+                AntTypeDefinition def = new AntTypeDefinition();", "+                def.setName(name);", "+                def.setProject(getProject());", "+                def.setClassName(classname);", "+                def.setClass(cl);", "+                def.setAdapterClass(adapterClass);", "+                def.setAdaptToClass(adaptToClass);", "+                def.setClassLoader(al);", "+                if (cl != null) {", "+                    def.checkClass();", "+                }", "+                ComponentHelper.getComponentHelper(getProject())", "+                    .addDataTypeDefinition(def);", "+            } catch (ClassNotFoundException cnfe) {", "+                String msg = getTaskName() + \" class \" + classname", "+                    + \" cannot be found\";", "+                throw new BuildException(msg, cnfe, getLocation());", "+            } catch (NoClassDefFoundError ncdfe) {", "+                String msg = getTaskName() + \"A class needed by class \"", "+                    + classname + \" cannot be found: \" + ncdfe.getMessage();", "+                throw new BuildException(msg, ncdfe, location);", "+            }", "+        } catch (BuildException ex) {", "+            switch (onError) {", "+                case OnError.FAIL:", "+                    throw ex;", "+                case OnError.REPORT:", "+                    log(ex.getLocation() + \"Warning: \" + ex.getMessage(),", "+                        Project.MSG_WARN);", "+                    break;", "+                default:", "+                    log(ex.getLocation() + ex.getMessage(),", "+                        Project.MSG_DEBUG);", "+            }", "+        }", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7d5f282a6730fb3e3c9b75aeeff30ca5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1838d2aec4fc2f23a2f5de2d0a15b5dd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Available.java", "commitBeforeChange": "0b508c32847329e6cabb15c97c051e0feaea567c", "commitAfterChange": "9bab4dab1ab3b86354929a1929906fe471d9fa93", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void setClassname(String classname)", "signatureAfterChange": "      public void setClassname(String classname)", "diff": ["-        this.classname = classname;", "+        if (!\"\".equals(classname)) {", "+            this.classname = classname;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4572afbaa09c5b77554eeab4357a4252", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ComponentHelper.java", "commitBeforeChange": "780ad2d725a7f88a26d8ea33a804fa5c8becfc8f", "commitAfterChange": "31deeb980977afb1cfe3234eb17a1360aab49d5e", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 18, "signatureBeforeChange": "     public void addDataTypeDefinition(AntTypeDefinition def)", "signatureAfterChange": "     public void addDataTypeDefinition(AntTypeDefinition def)", "diff": ["-        updateDataTypeDefinition(def);", "+        if (!def.isRestrict()) {", "+           updateDataTypeDefinition(def);", "+        } else {", "+            updateRestrictedDefinition(def);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61af098fd291c500e9c9d353a4a797f6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/TaskAdapter.java", "commitBeforeChange": "2c4b09e15f09ece3d4e8276687a809ddefa9408f", "commitAfterChange": "9f1eefd3a2e6760daa8941c1c69b4825f4c136fa", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void checkTaskClass(final Class taskClass,                                       final Project project)", "signatureAfterChange": "     public static void checkTaskClass(final Class taskClass,                                       final Project project)", "diff": ["-        // don't have to check for interface, since then", "-        // taskClass would be abstract too.", "-        try {", "-            final Method executeM = taskClass.getMethod(\"execute\", null);", "-            // don't have to check for public, since", "-            // getMethod finds public method only.", "-            // don't have to check for abstract, since then", "+        if (!Dispatchable.class.isAssignableFrom(taskClass)) {", "+            // don't have to check for interface, since then", "-            if (!Void.TYPE.equals(executeM.getReturnType())) {", "-                final String message = \"return type of execute() should be \"", "-                    + \"void but was \\\"\" + executeM.getReturnType() + \"\\\" in \"", "-                    + taskClass;", "-                project.log(message, Project.MSG_WARN);", "+            try {", "+                final Method executeM = taskClass.getMethod(\"execute\", null);", "+                // don't have to check for public, since", "+                // getMethod finds public method only.", "+                // don't have to check for abstract, since then", "+                // taskClass would be abstract too.", "+                if (!Void.TYPE.equals(executeM.getReturnType())) {", "+                    final String message = \"return type of execute() should be \"", "+                        + \"void but was \\\"\" + executeM.getReturnType() + \"\\\" in \"", "+                        + taskClass;", "+                    project.log(message, Project.MSG_WARN);", "+                }", "+            } catch (NoSuchMethodException e) {", "+                final String message = \"No public execute() in \" + taskClass;", "+                project.log(message, Project.MSG_ERR);", "+                throw new BuildException(message);", "+            } catch (LinkageError e) {", "+                String message = \"Could not load \" + taskClass + \": \" + e;", "+                project.log(message, Project.MSG_ERR);", "+                throw new BuildException(message, e);", "-        } catch (NoSuchMethodException e) {", "-            final String message = \"No public execute() in \" + taskClass;", "-            project.log(message, Project.MSG_ERR);", "-            throw new BuildException(message);", "-        } catch (LinkageError e) {", "-            String message = \"Could not load \" + taskClass + \": \" + e;", "-            project.log(message, Project.MSG_ERR);", "-            throw new BuildException(message, e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7812144f09d4bd011237ff09fa70c17", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/mail/MailMessage.java", "commitBeforeChange": "1c4c6da22620b4aa3ec84a3acc9d6c1f3eeda54d", "commitAfterChange": "3f78457877d6713f35dc7b5d2838f4818f4f16dc", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "    void setReplyToHeader()", "signatureAfterChange": "   void setReplyToHeader()", "diff": ["+  // RFC 822 s4.1: \"Reply-To:\" header is optional", "+    if (!replyto.isEmpty()) {", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9139c90a08aad66db02fa1c30261668", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/mail/MailMessage.java", "commitBeforeChange": "1c4c6da22620b4aa3ec84a3acc9d6c1f3eeda54d", "commitAfterChange": "3f78457877d6713f35dc7b5d2838f4818f4f16dc", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "    void setCcHeader()", "signatureAfterChange": "    void setCcHeader()", "diff": ["-    setHeader(\"Cc\", vectorToList(cc));", "+    if (!cc.isEmpty()) {", "+      setHeader(\"Cc\", vectorToList(cc));", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be1c6c17f26bcfb9cde4bbee1813dfac", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Exit.java", "commitBeforeChange": "a87eaeff37296a08e63423bdbf8782df06d944ed", "commitAfterChange": "b546691d3a2e8cc7f59435683d0c1bf7413c50cd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "          public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["+", "-        if (message != null && message.length() > 0) { ", "-            throw new BuildException(message);", "-        } else {", "-            throw new BuildException(\"No message\");", "+        if (testIfCondition() && testUnlessCondition()) {", "+            if (message != null && message.length() > 0) { ", "+                throw new BuildException(message);", "+            } else {", "+                throw new BuildException(\"No message\");", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff2b0d1c2da5354b91539874263fdfeb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/mail/MailMessage.java", "commitBeforeChange": "1c4c6da22620b4aa3ec84a3acc9d6c1f3eeda54d", "commitAfterChange": "3f78457877d6713f35dc7b5d2838f4818f4f16dc", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   void setToHeader()", "signatureAfterChange": "    void setToHeader()", "diff": ["+", "-    setHeader(\"To\", vectorToList(to));", "+    if (!to.isEmpty()) {", "+      setHeader(\"To\", vectorToList(to));", "+    }"]}]}
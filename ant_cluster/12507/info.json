{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a51404d1d6744dcdabfb34db00f543d3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "434540e0c1b2291de498541d3a58290d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java", "commitBeforeChange": "7a3448dcea316f454dd0ba470f8b0825504ae309", "commitAfterChange": "b3cc9d80b2398ace0096a303b714bd13b791d9fc", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "     protected boolean isRebuildRequired( File genericJarFile, File weblogicJarFile )", "signatureAfterChange": "     protected boolean isRebuildRequired( File genericJarFile, File weblogicJarFile )         throws TaskException", "diff": ["+        throws TaskException", "-                Project.MSG_VERBOSE );", "+                 Project.MSG_VERBOSE );", "-                 && weblogicJarFile.exists() && weblogicJarFile.isFile() )", "+                && weblogicJarFile.exists() && weblogicJarFile.isFile() )", "-                for( Enumeration e = genericJar.entries(); e.hasMoreElements();  )", "+                for( Enumeration e = genericJar.entries(); e.hasMoreElements(); )", "-                    JarEntry je = ( JarEntry )e.nextElement();", "+                    JarEntry je = (JarEntry)e.nextElement();", "-                for( Enumeration e = wlJar.entries(); e.hasMoreElements();  )", "+                for( Enumeration e = wlJar.entries(); e.hasMoreElements(); )", "-                    JarEntry je = ( JarEntry )e.nextElement();", "+                    JarEntry je = (JarEntry)e.nextElement();", "-                for( Enumeration e = genericEntries.keys(); e.hasMoreElements();  )", "+                for( Enumeration e = genericEntries.keys(); e.hasMoreElements(); )", "-                    String filepath = ( String )e.nextElement();", "+                    String filepath = (String)e.nextElement();", "-                        JarEntry genericEntry = ( JarEntry )genericEntries.get( filepath );", "-                        JarEntry wlEntry = ( JarEntry )wlEntries.get( filepath );", "+                        JarEntry genericEntry = (JarEntry)genericEntries.get( filepath );", "+                        JarEntry wlEntry = (JarEntry)wlEntries.get( filepath );", "-                        ( genericEntry.getSize() != wlEntry.getSize() ) )", "+                            ( genericEntry.getSize() != wlEntry.getSize() ) )", "-                    for( Enumeration e = wlEntries.elements(); e.hasMoreElements();  )", "+                    for( Enumeration e = wlEntries.elements(); e.hasMoreElements(); )", "-                        byte[] buffer = new byte[1024];", "+                        byte[] buffer = new byte[ 1024 ];", "-                        JarEntry je = ( JarEntry )e.nextElement();", "+                        JarEntry je = (JarEntry)e.nextElement();", "-                            je = ( JarEntry )replaceEntries.get( je.getName() );", "+                            je = (JarEntry)replaceEntries.get( je.getName() );", "-                 + \". Details: \"", "-                 + cnfe.getMessage();", "-            throw new BuildException( cnfmsg, cnfe );", "+                + \". Details: \"", "+                + cnfe.getMessage();", "+            throw new TaskException( cnfmsg, cnfe );", "-                 + \". Details: \"", "-                 + ioe.getMessage();", "-            throw new BuildException( msg, ioe );", "+                + \". Details: \"", "+                + ioe.getMessage();", "+            throw new TaskException( msg, ioe );", "-                {}", "+                {", "+                }", "-                {}", "+                {", "+                }", "-                {}", "+                {", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7909fe1cb23c453c177e90684f37a6c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java", "commitBeforeChange": "7a3448dcea316f454dd0ba470f8b0825504ae309", "commitAfterChange": "b3cc9d80b2398ace0096a303b714bd13b791d9fc", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "     protected boolean isRebuildRequired( File genericJarFile, File weblogicJarFile )", "signatureAfterChange": "     protected boolean isRebuildRequired( File genericJarFile, File weblogicJarFile )         throws TaskException", "diff": ["+        throws TaskException", "-                Project.MSG_VERBOSE );", "+                 Project.MSG_VERBOSE );", "-                 && weblogicJarFile.exists() && weblogicJarFile.isFile() )", "+                && weblogicJarFile.exists() && weblogicJarFile.isFile() )", "-                for( Enumeration e = genericJar.entries(); e.hasMoreElements();  )", "+                for( Enumeration e = genericJar.entries(); e.hasMoreElements(); )", "-                    JarEntry je = ( JarEntry )e.nextElement();", "+                    JarEntry je = (JarEntry)e.nextElement();", "-                for( Enumeration e = wlJar.entries(); e.hasMoreElements();  )", "+                for( Enumeration e = wlJar.entries(); e.hasMoreElements(); )", "-                    JarEntry je = ( JarEntry )e.nextElement();", "+                    JarEntry je = (JarEntry)e.nextElement();", "-                for( Enumeration e = genericEntries.keys(); e.hasMoreElements();  )", "+                for( Enumeration e = genericEntries.keys(); e.hasMoreElements(); )", "-                    String filepath = ( String )e.nextElement();", "+                    String filepath = (String)e.nextElement();", "-                        JarEntry genericEntry = ( JarEntry )genericEntries.get( filepath );", "-                        JarEntry wlEntry = ( JarEntry )wlEntries.get( filepath );", "+                        JarEntry genericEntry = (JarEntry)genericEntries.get( filepath );", "+                        JarEntry wlEntry = (JarEntry)wlEntries.get( filepath );", "-                        ( genericEntry.getSize() != wlEntry.getSize() ) )", "+                            ( genericEntry.getSize() != wlEntry.getSize() ) )", "-                    for( Enumeration e = wlEntries.elements(); e.hasMoreElements();  )", "+                    for( Enumeration e = wlEntries.elements(); e.hasMoreElements(); )", "-                        byte[] buffer = new byte[1024];", "+                        byte[] buffer = new byte[ 1024 ];", "-                        JarEntry je = ( JarEntry )e.nextElement();", "+                        JarEntry je = (JarEntry)e.nextElement();", "-                            je = ( JarEntry )replaceEntries.get( je.getName() );", "+                            je = (JarEntry)replaceEntries.get( je.getName() );", "-                 + \". Details: \"", "-                 + cnfe.getMessage();", "-            throw new BuildException( cnfmsg, cnfe );", "+                + \". Details: \"", "+                + cnfe.getMessage();", "+            throw new TaskException( cnfmsg, cnfe );", "-                 + \". Details: \"", "-                 + ioe.getMessage();", "-            throw new BuildException( msg, ioe );", "+                + \". Details: \"", "+                + ioe.getMessage();", "+            throw new TaskException( msg, ioe );", "-                {}", "+                {", "+                }", "-                {}", "+                {", "+                }", "-                {}", "+                {", "+                }"]}]}
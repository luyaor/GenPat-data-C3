{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5b0d29a34e92bbbeb0ed98c68f3fc559", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "531f14730160ca248fa20b243bcf7cc2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ReplaceRegExp.java", "commitBeforeChange": "7171341fc60cfd4d7cd4f92bda0778bf98c17094", "commitAfterChange": "1bae2089f57cca232ec1e2d96473391c6ad1385b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        if (file != null && filesets.size() > 0) {", "+        if (file != null && resources != null) {", "-                                     + \"and filesets at the same time.\");", "+                                     + \"and resource collections at the same \"", "+                                     + \"time.\");", "-        int sz = filesets.size();", "-", "-        for (int i = 0; i < sz; i++) {", "-            FileSet fs = (FileSet) (filesets.elementAt(i));", "-            DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "-", "-            String[] files = ds.getIncludedFiles();", "-", "-            for (int j = 0; j < files.length; j++) {", "-                File f = new File(fs.getDir(getProject()), files[j]);", "+        if (resources != null) {", "+            for (Iterator i = resources.iterator(); i.hasNext(); ) {", "+                FileProvider fp =", "+                    (FileProvider) ((Resource) i.next()).as(FileProvider.class);", "+                File f = fp.getFile();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96745893c4fb186b6ddb51ac0d9098b4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Checksum.java", "commitBeforeChange": "e562f879e82fea2c7960533aaa097c769429968c", "commitAfterChange": "4db83aaa5baa9b47810796035a0e9cafeab911d7", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private boolean validateAndExecute() throws BuildException", "signatureAfterChange": "     private boolean validateAndExecute() throws BuildException", "diff": ["-        if (file == null && filesets.size() == 0) {", "+        if (file == null && (resources == null || resources.size() == 0)) {", "-                                     \"Specify at least one source - a file or a fileset.\");", "+                \"Specify at least one source - a file or a resource collection.\");", "-", "+        if (!(resources == null || resources.isFilesystemOnly())) {", "+            throw new BuildException(\"Can only calculate checksums for file-based resources.\");", "+        }", "-            throw new BuildException(", "-                                     \"Checksum cannot be generated for directories\");", "+            throw new BuildException(\"Checksum cannot be generated for directories\");", "-", "-            throw new BuildException(", "-                                     \"File and Totalproperty cannot co-exist.\");", "+            throw new BuildException(\"File and Totalproperty cannot co-exist.\");", "-", "-            throw new BuildException(", "-                                     \"Property and FileExt cannot co-exist.\");", "+            throw new BuildException(\"Property and FileExt cannot co-exist.\");", "-", "-", "+            int ct = 0;", "+            if (resources != null) {", "+                ct += resources.size();", "+            }", "-                if (filesets.size() > 0) {", "-                    throw new BuildException(\"Multiple files cannot be used \"", "-                                             + \"when Property is specified\");", "-                }", "-            } else {", "-                if (filesets.size() > 1", "-                    || ((FileSet) filesets.get(0)).size() > 1) {", "-                    throw new BuildException(\"Multiple files cannot be used \"", "-                                             + \"when Property is specified\");", "-                }", "+                ct++;", "+            }", "+            if (ct > 1) {", "+                throw new BuildException(", "+                    \"Multiple files cannot be used when Property is specified\");", "-", "-", "-            throw new BuildException(", "-                                     \"VerifyProperty and ForceOverwrite cannot co-exist.\");", "+            throw new BuildException(\"VerifyProperty and ForceOverwrite cannot co-exist.\");", "-", "-            throw new BuildException(\"ForceOverwrite cannot be used when \"", "-                                     + \"conditions are being used.\");", "+            throw new BuildException(", "+                \"ForceOverwrite cannot be used when conditions are being used.\");", "-", "-", "-            throw new BuildException(\"Unable to create Message Digest\",", "-                                     getLocation());", "+            throw new BuildException(\"Unable to create Message Digest\", getLocation());", "-", "-            throw new BuildException(", "-                                     \"File extension when specified must not be an empty string\");", "+            throw new BuildException(\"File extension when specified must not be an empty string\");", "-", "-            int sizeofFileSet = filesets.size();", "-            for (int i = 0; i < sizeofFileSet; i++) {", "-                FileSet fs = (FileSet) filesets.elementAt(i);", "-                DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "-                String[] srcFiles = ds.getIncludedFiles();", "-                for (int j = 0; j < srcFiles.length; j++) {", "-                    File src = new File(fs.getDir(getProject()), srcFiles[j]);", "+            if (resources != null) {", "+                for (Iterator i = resources.iterator(); i.hasNext();) {", "+                    FileResource fr = (FileResource) i.next();", "+                    File src = fr.getFile();", "-                        String relativePath = srcFiles[j].replace(File.separatorChar, '/');", "-                        relativeFilePaths.put(src, relativePath);", "+                        relativeFilePaths.put(src, fr.getName().replace(File.separatorChar, '/'));", "-", "-            addToIncludeFileMap(file);", "-", "+            if (file != null) {", "+                addToIncludeFileMap(file);", "+            }"]}]}
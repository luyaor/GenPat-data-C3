{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "55a32932dac408a37df5d353cad894c8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e32b7af39091375231305240a7f37c5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/jsp/compilers/JasperC.java", "commitBeforeChange": "1e745fe39610746a046ce2ea1eef71fa15a6ea8e", "commitAfterChange": "38dce34edfdb4041103530c656e12e6ed61e2bd6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private Commandline setupJasperCommand()", "signatureAfterChange": "     private Commandline setupJasperCommand()", "diff": ["-            cmd.createArgument().setValue( \"-d\" );", "-            cmd.createArgument().setFile( jspc.getDestdir() );", "+            cmd.addArgument( \"-d\" );", "+            cmd.addArgument( jspc.getDestdir() );", "-            cmd.createArgument().setValue( \"-p\" );", "-            cmd.createArgument().setValue( jspc.getPackage() );", "+            cmd.addArgument( \"-p\" );", "+            cmd.addArgument( jspc.getPackage() );", "-            cmd.createArgument().setValue( \"-v\" + jspc.getVerbose() );", "+            cmd.addArgument( \"-v\" + jspc.getVerbose() );", "-            cmd.createArgument().setValue( \"-mapped\" );", "+            cmd.addArgument( \"-mapped\" );", "-            cmd.createArgument().setValue( \"-ieplugin\" );", "-            cmd.createArgument().setValue( jspc.getIeplugin() );", "+            cmd.addArgument( \"-ieplugin\" );", "+            cmd.addArgument( jspc.getIeplugin() );", "-            cmd.createArgument().setValue( \"-uriroot\" );", "-            cmd.createArgument().setValue( jspc.getUriroot().toString() );", "+            cmd.addArgument( \"-uriroot\" );", "+            cmd.addArgument( jspc.getUriroot().toString() );", "-            cmd.createArgument().setValue( \"-uribase\" );", "-            cmd.createArgument().setValue( jspc.getUribase().toString() );", "+            cmd.addArgument( \"-uribase\" );", "+            cmd.addArgument( jspc.getUribase().toString() );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52bc43ad9f33840659896441e6a567b8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/jsp/compilers/JasperC.java", "commitBeforeChange": "1e745fe39610746a046ce2ea1eef71fa15a6ea8e", "commitAfterChange": "38dce34edfdb4041103530c656e12e6ed61e2bd6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private Commandline setupJasperCommand()", "signatureAfterChange": "     private Commandline setupJasperCommand()", "diff": ["-            cmd.createArgument().setValue( \"-d\" );", "-            cmd.createArgument().setFile( jspc.getDestdir() );", "+            cmd.addArgument( \"-d\" );", "+            cmd.addArgument( jspc.getDestdir() );", "-            cmd.createArgument().setValue( \"-p\" );", "-            cmd.createArgument().setValue( jspc.getPackage() );", "+            cmd.addArgument( \"-p\" );", "+            cmd.addArgument( jspc.getPackage() );", "-            cmd.createArgument().setValue( \"-v\" + jspc.getVerbose() );", "+            cmd.addArgument( \"-v\" + jspc.getVerbose() );", "-            cmd.createArgument().setValue( \"-mapped\" );", "+            cmd.addArgument( \"-mapped\" );", "-            cmd.createArgument().setValue( \"-ieplugin\" );", "-            cmd.createArgument().setValue( jspc.getIeplugin() );", "+            cmd.addArgument( \"-ieplugin\" );", "+            cmd.addArgument( jspc.getIeplugin() );", "-            cmd.createArgument().setValue( \"-uriroot\" );", "-            cmd.createArgument().setValue( jspc.getUriroot().toString() );", "+            cmd.addArgument( \"-uriroot\" );", "+            cmd.addArgument( jspc.getUriroot().toString() );", "-            cmd.createArgument().setValue( \"-uribase\" );", "-            cmd.createArgument().setValue( jspc.getUribase().toString() );", "+            cmd.addArgument( \"-uribase\" );", "+            cmd.addArgument( jspc.getUribase().toString() );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3abaf4c6d0a8137f20491d041cae678", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultObjectConfigurer.java", "commitBeforeChange": "ba1f6f147af327833c018a27a46347cbd46625f3", "commitAfterChange": "a989b254f04d33e5bc2370b62121bd56830ac2f1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private Map findPropertyConfigurers()         throws ConfigurationException", "signatureAfterChange": "     private Collection findMethods( final String prefix,                                     final boolean exactMatch )         throws ConfigurationException", "diff": ["-    private Map findPropertyConfigurers()", "-        final Map adders = new HashMap();", "-        final List methodSet = new ArrayList();", "-        findMethodsWithPrefix( \"add\", methodSet );", "-        findMethodsWithPrefix( \"set\", methodSet );", "-        final Iterator iterator = methodSet.iterator();", "+     */", "+    private Collection findMethods( final String prefix,", "+                                    final boolean exactMatch )", "+        throws ConfigurationException", "+    {", "+        final Map methods = new HashMap();", "+        final List allMethods = findMethodsWithPrefix( prefix, exactMatch );", "+", "+        final Iterator iterator = allMethods.iterator();", "-            // Skip the text content method", "-            if( methodName.equals( \"addContent\" ) )", "-            {", "-                continue;", "-            }", "-", "-            final String propName = extractName( 3, methodName );", "-            if( adders.containsKey( propName ) )", "+            if( methods.containsKey( methodName ) )", "-                final Method candidate = (Method)adders.get( propName );", "-                final String operation = methodName.substring( 0, 3 );", "-                if( !candidate.getName().startsWith( operation ) )", "-                {", "-                    continue;", "-                }", "-", "+                final Method candidate = (Method)methods.get( methodName );", "-                    // Both are string, or both are not string", "+                    // Both are string (which would be odd), or both are not string", "-                        REZ.getString( \"multiple-adder-methods-for-element.error\",", "+                        REZ.getString( \"multiple-methods-for-element.error\",", "-                                       propName );", "+                                       methodName );", "-                // continue below, and overwrite the current method", "+                // continue below, and replace the current method", "-            adders.put( propName, method );", "+            methods.put( methodName, method );", "-        return adders;", "-    }", "+        return methods.values();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe9ce62008b9f4333a87d51e3e1280c8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/FilterSet.java", "commitBeforeChange": "1ad988059ed9ac9467bf5e44a702304d08e5abcd", "commitAfterChange": "3e94ca9450e57d4f0321527cf3e3d53625a30c62", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 23, "signatureBeforeChange": "     private String replaceTokens(String line, String parent)         throws BuildException", "signatureAfterChange": "     private synchronized String replaceTokens(String line, String parent)         throws BuildException", "diff": ["-    private String replaceTokens(String line, String parent)", "+    private synchronized String replaceTokens(String line, String parent)", "+        String beginToken = getBeginToken();", "+        String endToken = getEndToken();", "-            StringBuffer sb = new StringBuffer();", "-            sb.append(\"Infinite loop in tokens. Currently known tokens : \");", "-            sb.append(passedTokens);", "-            sb.append(\"\\nProblem token : \" + getBeginToken() + parent", "-                + getEndToken());", "-            sb.append(\" called from \" + getBeginToken()", "-                + passedTokens.lastElement());", "-            sb.append(getEndToken());", "-            System.out.println(sb.toString());", "+            System.out.println(", "+                \"Infinite loop in tokens. Currently known tokens : \"", "+                + passedTokens.toString() + \"\\nProblem token : \" + beginToken", "+                + parent + endToken + \" called from \" + beginToken", "+                + passedTokens.lastElement().toString() + endToken);", "-        if (value.indexOf(getBeginToken()) == -1 && !duplicateToken) {", "+        if (value.indexOf(beginToken) == -1 && !duplicateToken) {", "-                value = (String) passedTokens.lastElement();", "-                passedTokens.removeElementAt(passedTokens.size() - 1);", "+                value = (String) passedTokens.remove(passedTokens.size() - 1);", "-                    value = getBeginToken() + value + getEndToken();", "+                    value = beginToken + value + endToken;"]}]}
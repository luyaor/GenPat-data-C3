{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1edae99893ab6593b1032fcd989cf660", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "701f49dc895a6bac88be3e360638431a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "519b97d7cf70e486ddcc74dc70285642320ef109", "commitAfterChange": "49727a3da8d30bd6abcb219f140097f4a3b6fe95", "methodNumberBeforeChange": 124, "methodNumberAfterChange": 127, "signatureBeforeChange": "     private void addFileSets(Vector sf)", "signatureAfterChange": "     private void addSourceFiles(Vector sf)", "diff": ["-    private void addFileSets(Vector sf) {", "-        Enumeration e = fileSets.elements();", "-        while (e.hasMoreElements()) {", "-            FileSet fs = (FileSet) e.nextElement();", "+    private void addSourceFiles(Vector sf) {", "+        Iterator e = nestedSourceFiles.iterator();", "+        while (e.hasNext()) {", "+            ResourceCollection rc = (ResourceCollection) e.next();", "+            if (!rc.isFilesystemOnly()) {", "+                throw new BuildException(\"only file system based resources are\"", "+                                         + \" supported by javadoc\");", "+            }", "+            if (rc instanceof FileSet) {", "+                FileSet fs = (FileSet) rc;", "-            File baseDir = fs.getDir(getProject());", "-            DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "-            String[] files = ds.getIncludedFiles();", "-            for (int i = 0; i < files.length; i++) {", "-                sf.addElement(new SourceFile(new File(baseDir, files[i])));", "+            }", "+            Iterator iter = rc.iterator();", "+            while (iter.hasNext()) {", "+                sf.addElement(new SourceFile(((FileResource) iter.next())", "+                                             .getFile()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e31429ca180e1fa9c599d1df41b54aed", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "cca008dd0001628eefae7a0ebffba4815a6909f1", "commitAfterChange": "021fdf251c92ecb3981724d83c0265dc770280b3", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        Enumeration list = getIndividualTests();", "-        while (list.hasMoreElements()) {", "-            JUnitTest test = (JUnitTest) list.nextElement();", "-            if (test.shouldRun(getProject())) {", "-                execute(test);", "+        List testLists = new ArrayList();", "+", "+        boolean forkPerTest = forkStyle.getValue().equals(ForkStyle.PER_TEST);", "+        if (forkPerTest || forkStyle.getValue().equals(ForkStyle.ONCE)) {", "+            testLists.addAll(executeOrQueue(getIndividualTests(),", "+                                            forkPerTest));", "+        } else { /* forkStyle.getValue().equals(ForkStyle.PER_BATCH) */", "+            final int count = batchTests.size();", "+            for (int i = 0; i < count; i++) {", "+                BatchTest batchtest = (BatchTest) batchTests.elementAt(i);", "+                testLists.addAll(executeOrQueue(batchtest.elements(), false));", "+            testLists.addAll(executeOrQueue(tests.elements(), forkPerTest));", "+        }", "+", "+        Iterator iter = testLists.iterator();", "+        while (iter.hasNext()) {", "+            List l = (List) iter.next();", "+            if (l.size() == 1) {", "+                execute((JUnitTest) l.get(0));", "+            } else {", "+                execute(l);", "+            }            "]}]}
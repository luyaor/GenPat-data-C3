{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b94a82fc5dbdffffc8e7f64127eaf42", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b845985b8f49f1cc726b4b8fbe753a6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/MacroInstance.java", "commitBeforeChange": "5e4408208a34ba760533b1c6738ccb71cdfa03ba", "commitAfterChange": "278074659bf5724cde17788d210699876f7ffa4e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public Object createDynamicElement(String name) throws BuildException", "signatureAfterChange": "     public Object createDynamicElement(String name) throws BuildException", "diff": ["-        if (getNsElements().get(name) == null) {", "-            throw new BuildException(\"unsupported element \" + name);", "-        }", "-        if (presentElements.get(name) != null) {", "-            throw new BuildException(\"Element \" + name + \" already present\");", "-        }", "-        Element ret = new Element();", "-        presentElements.put(name, ret);", "-        return ret;", "+        throw new BuildException(\"Not implemented any more\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ab931c4ef4a9f66d2230cc118674bba", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Replace.java", "commitBeforeChange": "b3cb9a9d4f526df3bfef0706e46bc82857babdc3", "commitAfterChange": "06f6d787d2c96939d850d1cd735d12dd4355d6fa", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void validateAttributes() throws BuildException", "signatureAfterChange": "     public void validateAttributes() throws BuildException", "diff": ["+        if (token == null && replacefilters.size() == 0) {", "+            String message = \"Either token or a nested replacefilter \"", "+                + \"must be specified\";", "+            throw new BuildException(message, location);", "+        }", "+        if (token != null && \"\".equals(token.getText())) {", "+            String message =\"The token attribute must not be an empty string.\";", "+            throw new BuildException(message, location);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4e5af6b10f89fa72de02352644f1dc3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Replace.java", "commitBeforeChange": "6b2e7156fce5c379bb51f9aad53a90bad9e719ce", "commitAfterChange": "75a677f70106e16a72273368148b5cb68711252d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "         public void validate() throws BuildException", "signatureAfterChange": "         public void validate() throws BuildException", "diff": ["-                String message = \"token is a mandatory attribute \"", "-                    + \"of replacefilter.\";", "+                String message = \"token is a mandatory for replacefilter.\";", "-            if (\"\".equals(token)) {", "-                String message = \"The token attribute must not be an empty \"", "+            if (\"\".equals(token.getText())) {", "+                String message = \"The token must not be an empty \""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be1c6c17f26bcfb9cde4bbee1813dfac", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Exit.java", "commitBeforeChange": "a87eaeff37296a08e63423bdbf8782df06d944ed", "commitAfterChange": "b546691d3a2e8cc7f59435683d0c1bf7413c50cd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "          public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["+", "-        if (message != null && message.length() > 0) { ", "-            throw new BuildException(message);", "-        } else {", "-            throw new BuildException(\"No message\");", "+        if (testIfCondition() && testUnlessCondition()) {", "+            if (message != null && message.length() > 0) { ", "+                throw new BuildException(message);", "+            } else {", "+                throw new BuildException(\"No message\");", "+            }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a73c0b9c574bc8929248720bff00343a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2111baa5a92673e17d26e96c5bf25275", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/launcher/Main.java", "commitBeforeChange": "321497ad25f76931e5b18e384fbd73ca8d198d92", "commitAfterChange": "ec74722dcd89659e5f1b1241acd59dc3f5978be7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static final void main( final String[] args )         throws Exception", "signatureAfterChange": "     public static final void main( final String[] args )         throws Exception", "diff": ["-            //actually try to discover the install directory based on where", "-            // the myrmidon.jar is", "+            final Map properties = new HashMap();", "+", "+            // Try to discover the install directory based on where the", "+            // launcher Jar is", "-            System.setProperty( \"myrmidon.home\", installDirectory.toString() );", "+            properties.put( \"myrmidon.home\", installDirectory );", "-            final URLClassLoader sharedClassLoader = createSharedClassLoader( installDirectory );", "-            final URLClassLoader classLoader =", "-                createContainerClassLoader( installDirectory, sharedClassLoader );", "+            // Build the shared classloader", "+            final URL[] sharedClassPath = getSharedClassPath( installDirectory );", "+            properties.put( \"myrmidon.shared.classpath\", sharedClassPath );", "+            final URLClassLoader sharedClassLoader = new URLClassLoader( sharedClassPath );", "+            properties.put( \"myrmidon.shared.classloader\", sharedClassLoader );", "-            execMainClass( classLoader, args );", "+            // Build the container classloader", "+            final URL[] containerClassPath = getContainerClassPath( installDirectory );", "+            properties.put( \"myrmidon.container.classpath\", containerClassPath );", "+            final URLClassLoader containerClassLoader = new URLClassLoader( containerClassPath, sharedClassLoader );", "+            properties.put( \"myrmidon.container.classloader\", containerClassLoader );", "+", "+            execMainClass( containerClassLoader, properties, args );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4a09ef49e01180f08e41e5ea7955695", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/classloader/DefaultClassLoaderManager.java", "commitBeforeChange": "62562693ac733d0697b5a522972f36ea5570225c", "commitAfterChange": "a816a71d9e2587a83890f499dd2cabb7c6e02889", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public ClassLoader createClassLoader( File file ) throws DeploymentException", "signatureAfterChange": "     public ClassLoader createClassLoader( final File[] files ) throws ClassLoaderException", "diff": ["-    public ClassLoader createClassLoader( File file ) throws DeploymentException", "+     */", "+    public ClassLoader createClassLoader( final File[] files ) throws ClassLoaderException", "-            final File canonFile = file.getCanonicalFile();", "+            // Build a list of canonical file names", "+            final ArrayList canonFiles = new ArrayList( files.length );", "+            for( int i = 0; i < files.length; i++ )", "+            {", "+                canonFiles.add( files[ i ].getCanonicalFile() );", "+            }", "-            URLClassLoader classLoader = (URLClassLoader)m_fileDeployers.get( canonFile );", "+            ClassLoader classLoader = (ClassLoader)m_fileDeployers.get( canonFiles );", "-                checkFile( canonFile );", "-                final File[] extensions = getOptionalPackagesFor( canonFile );", "-                final URL[] urls = buildClasspath( canonFile, extensions );", "-                classLoader = new URLClassLoader( urls, m_baseClassLoader );", "-                m_fileDeployers.put( canonFile, classLoader );", "+                classLoader = buildClassLoader( canonFiles );", "+                m_fileDeployers.put( canonFiles, classLoader );", "-        catch( Exception e )", "+        catch( final Exception e )", "-            final String message = REZ.getString( \"create-classloader-for-file.error\", file );", "-            throw new DeploymentException( message );", "+            final String fileNames = PathUtil.formatPath( files );", "+            final String message = REZ.getString( \"create-classloader-for-file.error\", fileNames );", "+            throw new ClassLoaderException( message, e );", "+    }"]}]}
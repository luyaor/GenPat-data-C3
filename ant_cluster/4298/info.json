{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d142d32d8d9cf9fca4636c19fccc654d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11a1e4ee8356689af4e508cb95d6ff54", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Tar.java", "commitBeforeChange": "1400dc3c1b536c70697f83be990b0725121cba90", "commitAfterChange": "b5fcf10604f56a8061d10f332570342b34cc7a9d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": "         public String getUserName()", "signatureAfterChange": "     protected boolean check(File basedir, String[] files)", "diff": ["+     */", "+    protected boolean check(File basedir, String[] files) {", "+        boolean upToDate = true;", "+        if (!archiveIsUpToDate(files, basedir)) {", "+            upToDate = false;", "+        }", "+", "+        for (int i = 0; i < files.length; ++i) {", "+            if (tarFile.equals(new File(basedir, files[i]))) {", "+                throw new BuildException(\"A tar file cannot include \"", "+                                         + \"itself\", getLocation());", "+            }", "+        }", "+        return upToDate;", "+    }", "-         */", "-        public String getUserName() {", "-            return userName;", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c020b156c8257186c882fd3c3162e48f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultObjectConfigurer.java", "commitBeforeChange": "c4dee0afafcc57ede3e3d1e81d2d4a1455c484a4", "commitAfterChange": "f52a170159f6dc5beebe07bfb945cb5b3fa5290b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public Class getType()", "signatureAfterChange": "     public Object finishConfiguration( final ConfigurationState state )         throws ConfigurationException", "diff": ["-    public Class getType()", "-        return m_class;", "+     */", "+    public Object finishConfiguration( final ConfigurationState state )", "+        throws ConfigurationException", "+    {", "+        // Make sure there are no pending created objects", "+        final DefaultConfigurationState defState = (DefaultConfigurationState)state;", "+        for( int i = 0; i < m_allProps.size(); i++ )", "+        {", "+            if( defState.getCreatedObject( i ) != null )", "+            {", "+                final String message = REZ.getString( \"pending-property-value.error\" );", "+                throw new ConfigurationException( message );", "+            }", "+        }", "+", "+        return defState.getObject();"]}]}
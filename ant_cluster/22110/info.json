{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc7bf7d8cdf01601d3daaab23ac54430", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "085184422f66cf3ca18bc9b028dab637", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/EchoProperties.java", "commitBeforeChange": "a34ad0e8fa17754d15a1eb454a854ba2158a1a4d", "commitAfterChange": "7dd5e65a056c490727f5edb12a5f58642c7fa269", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 12, "signatureBeforeChange": "      protected void xmlSaveProperties(Properties props,                                      OutputStream os) throws IOException", "signatureAfterChange": "      protected void xmlSaveProperties(Properties props,                                      OutputStream os) throws IOException", "diff": ["+", "+        List sorted=sortProperties(props);", "+", "+", "-        String name;", "-        Enumeration e = props.propertyNames();", "-        while (e.hasMoreElements()) {", "-            name = (String) e.nextElement();", "+        Iterator iten = sorted.iterator();", "+        while (iten.hasNext()) {", "+            Tuple tuple = (Tuple) iten.next();", "-            propElement.setAttribute(ATTR_NAME, name);", "-            propElement.setAttribute(ATTR_VALUE, props.getProperty(name));", "+            propElement.setAttribute(ATTR_NAME, tuple.key);", "+            propElement.setAttribute(ATTR_VALUE, tuple.value);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "927a1092a9d0dc316b570c700c819882", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/MoveTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void testDirectoryRemoval() throws IOException", "signatureAfterChange": "     @Test     public void testDirectoryRemoval() throws IOException", "diff": ["+    @Test", "-        executeTarget(\"testDirectoryRemoval\");", "-        assertTrue(!new File(getOutputDir(),\"E/B/1\").exists());", "-        assertTrue(new File(getOutputDir(),\"E/C/2\").exists());", "-        assertTrue(new File(getOutputDir(),\"E/D/3\").exists());", "-        assertTrue(new File(getOutputDir(),\"A/B/1\").exists());", "-        assertTrue(!new File(getOutputDir(),\"A/C/2\").exists());", "-        assertTrue(!new File(getOutputDir(),\"A/D/3\").exists());", "-        assertTrue(!new File(getOutputDir(),\"A/C\").exists());", "-        assertTrue(!new File(getOutputDir(),\"A/D\").exists());", "+", "+        buildRule.executeTarget(\"testDirectoryRemoval\");", "+        String output = buildRule.getProject().getProperty(\"output\");", "+        assertTrue(!new File(output,\"E/B/1\").exists());", "+        assertTrue(new File(output, \"E/C/2\").exists());", "+        assertTrue(new File(output,\"E/D/3\").exists());", "+        assertTrue(new File(output,\"A/B/1\").exists());", "+        assertTrue(!new File(output,\"A/C/2\").exists());", "+        assertTrue(!new File(output,\"A/D/3\").exists());", "+        assertTrue(!new File(output,\"A/C\").exists());", "+        assertTrue(!new File(output,\"A/D\").exists());"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "63dd69ad79baf16b29a1e7963d6aa9a3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16c507089ce34f1f1f2a901a44d74099", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2InputStream.java", "commitBeforeChange": "9f2aca50e33a1be8154bd90b93a1f658e4b6d910", "commitAfterChange": "7a4e9ca2278d5e22a3492abb964312150d0286b9", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "      private void hbCreateDecodeTables(int[] limit, int[] base,                                       int[] perm, char[] length,                                       int minLen, int maxLen, int alphaSize)", "signatureAfterChange": "      private void hbCreateDecodeTables(int[] limit, int[] base,                                       int[] perm, char[] length,                                       int minLen, int maxLen, int alphaSize)", "diff": ["-        for(i = minLen; i <= maxLen; i++)", "-            for(j = 0; j < alphaSize; j++)", "+        for(i = minLen; i <= maxLen; i++) {", "+            for(j = 0; j < alphaSize; j++) {", "-                };", "+                }", "+            }", "+        };", "-        for(i = 0; i < MAX_CODE_LEN; i++)", "+        for(i = 0; i < MAX_CODE_LEN; i++) {", "-        for(i = 0; i < alphaSize; i++)", "+        }", "+        for(i = 0; i < alphaSize; i++) {", "+        }", "-        for (i = 0; i < MAX_CODE_LEN; i++)", "+        for (i = 0; i < MAX_CODE_LEN; i++) {", "+        }", "-        for (i = minLen + 1; i <= maxLen; i++)", "+        for (i = minLen + 1; i <= maxLen; i++) {", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbcc461209ac0937cda8fa48290f9e6f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2InputStream.java", "commitBeforeChange": "dd4f44627a1edd3c29886c19e51b02ada66fd4ac", "commitAfterChange": "f7940f8b485f7251cf7abeac93793d44dd18b42e", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "      private void hbCreateDecodeTables(int[] limit, int[] base,                                       int[] perm, char[] length,                                       int minLen, int maxLen, int alphaSize)", "signatureAfterChange": "      private void hbCreateDecodeTables(int[] limit, int[] base,                                       int[] perm, char[] length,                                       int minLen, int maxLen, int alphaSize)", "diff": ["-        for(i = minLen; i <= maxLen; i++) {", "-            for(j = 0; j < alphaSize; j++) {", "+        for(i = minLen; i <= maxLen; i++)", "+            for(j = 0; j < alphaSize; j++)", "-                }", "-            }", "-        };", "+                };", "-        for(i = 0; i < MAX_CODE_LEN; i++) {", "+        for(i = 0; i < MAX_CODE_LEN; i++)", "-        }", "-        for(i = 0; i < alphaSize; i++) {", "+        for(i = 0; i < alphaSize; i++)", "-        }", "-        for (i = 0; i < MAX_CODE_LEN; i++) {", "+        for (i = 0; i < MAX_CODE_LEN; i++)", "-        }", "-        for (i = minLen + 1; i <= maxLen; i++) {", "+        for (i = minLen + 1; i <= maxLen; i++)", "-        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "437afaca4a5122d775f9f77b723f83a8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "187cd23585c089cae1a4885afd3a244d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/FormatterElement.java", "commitBeforeChange": "ed475344e72f1fb4d9e19cf627ddf8e67cc23942", "commitAfterChange": "bd578f489a9200bf0c1e361023cb235c15d743e7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      JUnitResultFormatter createFormatter() throws BuildException", "signatureAfterChange": "     JUnitResultFormatter createFormatter() throws BuildException", "diff": ["+     */", "+        return createFormatter(null);", "+    }", "-            f = Class.forName(classname);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a2f3f4e0d8ee1880a7126f148e650c3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "47a487c0dd073ced71720ad46588eeb38e12e47c", "commitAfterChange": "67c71a89e9e02b6e4841f748c79350b7ca190a00", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "     protected Class defineClassFromData(File container, byte[] classData,                                         String classname) throws IOException", "signatureAfterChange": "     protected Class defineClassFromData(File container, byte[] classData,                                         String classname) throws IOException", "diff": ["-        // Simply put:", "-        // defineClass(classname, classData, 0, classData.length,", "-        //             Project.class.getProtectionDomain());", "-        // Made more elaborate to be 1.1-safe.", "-        if (defineClassProtectionDomain != null) {", "-            try {", "-                Object domain", "-                    = getProtectionDomain.invoke(Project.class, new Object[0]);", "-                Object[] args", "-                    = new Object[] {classname, classData, new Integer(0),", "-                                    new Integer(classData.length), domain};", "-                return (Class) defineClassProtectionDomain.invoke(this, args);", "-            } catch (InvocationTargetException ite) {", "-                Throwable t = ite.getTargetException();", "-                if (t instanceof ClassFormatError) {", "-                    throw (ClassFormatError) t;", "-                } else if (t instanceof NoClassDefFoundError) {", "-                    throw (NoClassDefFoundError) t;", "-                } else if (t instanceof SecurityException) {", "-                    throw (SecurityException) t;", "-                } else {", "-                    throw new IOException(t.toString());", "-                }", "-            } catch (Exception e) {", "-                throw new IOException(e.toString());", "-            }", "+        definePackage(container, classname);", "+        // XXX should instead make a new ProtectionDomain with a CodeSource", "+        // corresponding to container.toURI().toURL() and the same", "+        // PermissionCollection as Project.class.protectionDomain had", "+        return defineClass(classname, classData, 0, classData.length,", "+                           Project.class.getProtectionDomain());", "+    }", "-            return defineClass(classname, classData, 0, classData.length);"]}]}
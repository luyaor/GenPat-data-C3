{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ae224024b217aaa41c1b3942253a7247", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cdd64e25f67ab20ea9eed4f50d5fd23", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/URLResource.java", "commitBeforeChange": "51441438ebb9828dfdabb99d2cbba501c3001307", "commitAfterChange": "2d283dd117933aba230e7100ba4bb56502b412e5", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private synchronized boolean isExists(boolean closeConnection)", "signatureAfterChange": "     private synchronized boolean isExists(boolean closeConnection)", "diff": ["+            if (conn instanceof HttpURLConnection) {", "+                int sc = ((HttpURLConnection) conn).getResponseCode();", "+                // treating inaccessible resources as non-existent", "+                return sc < 400;", "+            } else if (url.getProtocol().startsWith(\"ftp\")) {", "+                closeConnection = true;", "+                InputStream in = null;", "+                try {", "+                    in = conn.getInputStream();", "+                } finally {", "+                    FileUtils.close(in);", "+                }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b8c8728fd297ae180fc24a93ef5e02f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/main/org/apache/ant/core/execution/ExecutionFrame.java", "commitBeforeChange": "8d130028151fa7cc9d93e3cdf9ea1637cb16fcde", "commitAfterChange": "362903a2bd195f64f594d4b3f333900d67a3c7bc", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "        private void configureElement(Object element, TaskElement model)          throws ExecutionException, ConfigException", "signatureAfterChange": "        private void configureElement(Object element, TaskElement model)          throws ExecutionException, ConfigException", "diff": ["-", "+        ", "+        if (element instanceof Task) {", "+            Task task = (Task)element;", "+            ExecutionContext context = new ExecutionContext(this, eventSupport, model);", "+            task.setTaskContext(context);", "+        }", "+            List aspects = getActiveAspects(model);", "+            for (Iterator i = aspects.iterator(); i.hasNext(); ) {", "+                AspectHandler aspectHandler = (AspectHandler)i.next();", "+                aspectHandler.beforeConfigElement(element);", "+            }", "+            ", "-            List aspects = getActiveAspects(model);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bede16559aee025728b7cd5249da5914", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Manifest.java", "commitBeforeChange": "05f8f8bd0222ad18fdc6cbeaa798ac06ff40be04", "commitAfterChange": "77024a43a293e7911609d3c3192e773f082688ce", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 21, "signatureBeforeChange": "         public void merge(Section section) throws ManifestException", "signatureAfterChange": "         public void merge(Section section, boolean mergeClassPaths)             throws ManifestException", "diff": ["+         */", "+        public void merge(Section section, boolean mergeClassPaths)", "+            throws ManifestException {", "-                // the merge file *always* wins, even for Class-Path", "+                if (mergeClassPaths) {", "+                    Attribute currentCp = getAttribute(ATTRIBUTE_CLASSPATH);", "+                    if (currentCp != null) {", "+                        for (Enumeration attribEnum = currentCp.getValues();", "+                             attribEnum.hasMoreElements(); ) {", "+                            String value = (String) attribEnum.nextElement();", "+                            classpathAttribute.addValue(value);", "+                        }", "+                    }", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9b7e7d1c17659645766107b071f20e1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/builder/DefaultProjectBuilder.java", "commitBeforeChange": "e2cc34fa963ffa74a7e6dc7fa60d8ba32042b83c", "commitAfterChange": "7b867a10d26f96911855430e79c668df0e053cef", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public Project build( final File projectFile )         throws Exception", "signatureAfterChange": "      private Project build( final File file, final HashMap projects )         throws Exception", "diff": ["-    public Project build( final File projectFile )", "+", "+    private Project build( final File file, final HashMap projects )", "+        throws Exception", "+    {", "+        final String systemID = file.toURL().toString();", "+", "+        Project result = (Project)projects.get( systemID );", "+        if( null != result )", "+        {", "+            return result;", "+        }", "+", "-        final String location = projectFile.toURL().toString();", "-        parser.parse( location );", "+        parser.parse( systemID );", "-        return build( projectFile, handler.getConfiguration() );", "-    }", "+        final Configuration configuration = handler.getConfiguration();", "+        final DefaultProject project = buildProject( file, configuration );", "+        projects.put( systemID, project );", "+", "+        //build using all top-level attributes", "+        buildTopLevelProject( project, configuration, projects );", "+", "+        return project;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "737e7472f13cd29b14e9265f2bf528c8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f7f2cc14a7f08714e35a65c97251e80", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/antlib/AntLibManager.java", "commitBeforeChange": "26d9c6536e7e605b92a6e4b20eb0cd25e116a689", "commitAfterChange": "f19f07d6e4c72f241057ecfc32d80be21201bbf7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void addLibPath(String libraryId, URL libPath)          throws AntLibException", "signatureAfterChange": "     public void addLibPath(String libraryId, URL libPath)          throws AntLibException", "diff": ["-        System.out.println(\"Adding path \" + libPath + \" for \" + libraryId);", "-        libPaths.add(libPath);", "+", "+        List newPaths = new ArrayList();", "+        newPaths.add(libPath);", "+        if (libPath.getProtocol().equals(\"file\")) {", "+            File dir = new File(libPath.getFile());", "+            if (dir.isDirectory()) {", "+                try {", "+                    URL[] pathURLs = LoaderUtils.getLocationURLs(libPath,", "+                        null, ANTLIB_EXTENSIONS);", "+                    for (int i = 0; i < pathURLs.length; ++i) {", "+                        newPaths.add(pathURLs[i]);", "+                    }", "+                } catch (MalformedURLException e) {", "+                    // ignore and just use what we were given", "+                }", "+            }", "+        }", "-        if (antLibrary != null) {", "-            antLibrary.addLibraryURL(libPath);", "+        for (Iterator i = newPaths.iterator(); i.hasNext();) {", "+            URL newPath = (URL) i.next();", "+            libPaths.add(newPath);", "+            if (antLibrary != null) {", "+                antLibrary.addLibraryURL(newPath);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0720511e01d30a1e3ce3b2400f5d1be", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/AbstractSshMessage.java", "commitBeforeChange": "83b7e75aa816063b22de558a2fb64883d977dd47", "commitAfterChange": "4041791887e6e3ee08c82c6e437495cab8762526", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     protected final int trackProgress(int filesize, int totalLength,                                        int percentTransmitted)", "signatureAfterChange": "     protected final int trackProgress(int filesize, int totalLength,                                        int percentTransmitted)", "diff": ["-        int percent = (int) Math.round(Math.floor((totalLength ", "-                                                   / (double)filesize) ", "-                                                  * 100));", "+        int percent = (int) Math.round(Math.floor((totalLength /", "+                                                   (double)filesize) * 100));", "+", "-            if (filesize < 1048576 && (percent % 10 != 0)) {", "-                // do not track between tenths", "+            if (filesize < 1048576) {", "+                if (percent % 10 == 0) {", "+                    if (percent == 100) {", "+                        System.out.println(\" 100%\");", "+                    } else {", "+                        System.out.print(\"*\");", "+                    }", "+                }", "-                log(\"\" + percent + \"%\");", "+                if (percent == 50) {", "+                    System.out.println(\" 50%\");", "+                } else if (percent == 100) {", "+                    System.out.println(\" 100%\");", "+                } else {", "+                    System.out.print(\".\");", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df62c275f52ee1907a63053236282236", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "c34b9ee41bcc31359f581d04d38e0b5615eee21b", "commitAfterChange": "df6e16ab5f83605b7bb379d04af8eb4be0e2a858", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            FileOutputStream fos = new FileOutputStream(dest);", "-", "-            byte[] buffer = new byte[100 * 1024];", "-            int length;", "-", "-            while ((length = is.read(buffer)) >= 0) {", "-                fos.write(buffer, 0, length);", "-                if (verbose) {", "-                    System.out.print(\".\");", "+            FileOutputStream fos = new FileOutputStream(dest);", "+            try {", "+                byte[] buffer = new byte[100 * 1024];", "+                int length;", "+                ", "+                while ((length = is.read(buffer)) >= 0) {", "+                    fos.write(buffer, 0, length);", "+                    if (verbose) {", "+                        System.out.print(\".\");", "+                    }", "+                if (verbose) {", "+                    System.out.println();", "+                }", "+            } finally {", "+                if (fos != null) {", "+                    fos.close();", "+                }", "+                is.close();", "-            if (verbose) {", "-                System.out.println();", "-            }", "-            fos.close();", "-            is.close();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df65e166f1cb4d2eb3e57ac79db317ee", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Diagnostics.java", "commitBeforeChange": "948e2c6f0d0673bd81e77bdca01fb0bef73d3863", "commitAfterChange": "6cc29239b3603a513225c5709d0fb6b73ebe2271", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "     private static void doReportTempDir(PrintStream out)", "signatureAfterChange": "     private static void doReportTempDir(PrintStream out)", "diff": ["+        FileInputStream filein = null;", "+", "+            // read to make sure the file has been written completely", "+            Thread.sleep(1000);", "+            filein = new FileInputStream(tempFile);", "+            int total = 0;", "+            int read = 0;", "+            while ((read = filein.read(buffer, 0, KILOBYTE)) > 0) {", "+                total += read;", "+            }", "+            filein.close();", "+            filein = null;", "+", "-            tempFile.delete();", "-            out.println(\"Temp dir is writeable\");", "+            tempFile.delete();", "+", "+            out.print(\"Temp dir is writeable\");", "+            if (total != TEST_FILE_SIZE * KILOBYTE) {", "+                out.println(\", but seems to be full.  Wrote \"", "+                            + (TEST_FILE_SIZE * KILOBYTE)", "+                            + \"but could only read \" + total + \" bytes.\");", "+            } else {", "+                out.println();", "+            }", "+", "+        } catch (InterruptedException e) {", "+            ignoreThrowable(e);", "+            out.println(\"Failed to check whether tempdir is writable\");", "+            FileUtils.close(filein);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e677bbca1ab7f5f096daf21ea77c1381", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/pvcs/Pvcs.java", "commitBeforeChange": "270394a09fddda0ea9ffa2330956c5f399ab840f", "commitAfterChange": "6bd8d6e938a45868902ecd1092858e8372933c7c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void massagePCLI(File in, File out)          throws FileNotFoundException, IOException", "signatureAfterChange": "     private void massagePCLI(File in, File out)          throws FileNotFoundException, IOException", "diff": ["-        BufferedReader inReader = new BufferedReader(new FileReader(in));", "-        BufferedWriter outWriter = new BufferedWriter(new FileWriter(out));", "-        String s = null;", "-        while ((s = inReader.readLine()) != null) {", "-            String sNormal = s.replace('\\\\', '/');", "-            outWriter.write(sNormal);", "-            outWriter.newLine();", "+        BufferedReader inReader = null;", "+        BufferedWriter outWriter = null;", "+        try {", "+            inReader = new BufferedReader(new FileReader(in));", "+            outWriter = new BufferedWriter(new FileWriter(out));", "+            String s = null;", "+            while ((s = inReader.readLine()) != null) {", "+                String sNormal = s.replace('\\\\', '/');", "+                outWriter.write(sNormal);", "+                outWriter.newLine();", "+            }", "+        } finally {", "+            if (inReader != null) {", "+                inReader.close();", "+            }", "+            if (outWriter != null) {", "+                outWriter.close();", "+            }", "-        inReader.close();", "-        outWriter.close();"]}]}
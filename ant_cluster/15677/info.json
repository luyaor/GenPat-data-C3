{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "332ceba54d554aa0ca0cb445f4f3f04d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bf0de766328fbcd4c6e75a30ab2ff7b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/filterreaders/src/main/org/apache/tools/ant/util/ChainReaderHelper.java", "commitBeforeChange": "c5a6bd97758856408365e17d4625d486c9769486", "commitAfterChange": "7899d6c4a6c335eeffa486f6b09fa3725b0e3a7b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public final String processStream()         throws BuildException, IOException", "signatureAfterChange": "     public final String processStream()         throws BuildException, IOException", "diff": ["-                final AntFilterReader afr =", "-                    (AntFilterReader) filterReaders.elementAt(j);", "-                finalFilters.addElement(afr);", "+                finalFilters.addElement(filterReaders.elementAt(j));", "-                final AntFilterReader filter =", "-                    (AntFilterReader) finalFilters.elementAt(i);", "-                final String className = filter.getClassName();", "-                final Path classpath = filter.getClasspath();", "-                final Project project = filter.getProject();", "-                if (className != null) {", "-                    try {", "-                        Class clazz = null;", "-                        if (classpath == null) {", "-                            clazz = Class.forName(className);", "-                        } else {", "-                            AntClassLoader al = new AntClassLoader(project,", "-                                                                   classpath);", "-                            clazz = al.loadClass(className);", "-                            AntClassLoader.initializeClass(clazz);", "-                        }", "-                        if (clazz != null) {", "-                            if (!FilterReader.class.isAssignableFrom(clazz)) {", "-                                throw new BuildException(className +", "-                                    \" does not extend java.io.FilterReader\");", "+                Object o = finalFilters.elementAt(i);", "+", "+                if (o instanceof AntFilterReader) {", "+                    final AntFilterReader filter = (AntFilterReader) finalFilters.elementAt(i);", "+                    final String className = filter.getClassName();", "+                    final Path classpath = filter.getClasspath();", "+                    final Project project = filter.getProject();", "+                    if (className != null) {", "+                        try {", "+                            Class clazz = null;", "+                            if (classpath == null) {", "+                                clazz = Class.forName(className);", "+                            } else {", "+                                AntClassLoader al = new AntClassLoader(project,", "+                                                                       classpath);", "+                                clazz = al.loadClass(className);", "+                                AntClassLoader.initializeClass(clazz);", "-                            final Constructor[] constructors =", "-                                clazz.getConstructors();", "-                            final Reader[] rdr = {instream};", "-                            instream =", "-                                (Reader) constructors[0].newInstance(rdr);", "-                            if (Parameterizable.class.isAssignableFrom(clazz)) {", "-                                final Parameter[] params = filter.getParams();", "-                                ((Parameterizable)", "-                                    instream).setParameters(params);", "+                            if (clazz != null) {", "+                                if (!FilterReader.class.isAssignableFrom(clazz)) {", "+                                    throw new BuildException(className +", "+                                        \" does not extend java.io.FilterReader\");", "+                                }", "+                                final Constructor[] constructors =", "+                                    clazz.getConstructors();", "+                                int j = 0;", "+                                for (; j < constructors.length; j++) {", "+                                    Class[] types = constructors[j]", "+                                                      .getParameterTypes();", "+                                    if (types.length == 1 &&", "+                                        types[0].isAssignableFrom(Reader.class)) {", "+                                        break;", "+                                    }", "+                                }", "+                                final Reader[] rdr = {instream};", "+                                instream =", "+                                    (Reader) constructors[j].newInstance(rdr);", "+                                if (Parameterizable.class.isAssignableFrom(clazz)) {", "+                                    final Parameter[] params = filter.getParams();", "+                                    ((Parameterizable)", "+                                        instream).setParameters(params);", "+                                }", "+                        } catch (final ClassNotFoundException cnfe) {", "+                            throw new BuildException(cnfe);", "+                        } catch (final InstantiationException ie) {", "+                            throw new BuildException(ie);", "+                        } catch (final IllegalAccessException iae) {", "+                            throw new BuildException(iae);", "+                        } catch (final InvocationTargetException ite) {", "+                            throw new BuildException(ite);", "-                    } catch (final ClassNotFoundException cnfe) {", "-                        throw new BuildException(cnfe);", "-                    } catch (final InstantiationException ie) {", "-                        throw new BuildException(ie);", "-                    } catch (final IllegalAccessException iae) {", "-                        throw new BuildException(iae);", "-                    } catch (final InvocationTargetException ite) {", "-                        throw new BuildException(ite);", "+                } else if (o instanceof CloneableReader &&", "+                           o instanceof Reader) {", "+                    instream = ((CloneableReader) o).clone(instream);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c07ccff0ba6cfc6eebf3271055310da9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/jdepend/JDependTask.java", "commitBeforeChange": "8d3002cf8ab1b9f87d38b0b4e5682d15ffb7002a", "commitAfterChange": "9c51b355f7e7c16c5466e43b59019cad49a1fe56", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 25, "signatureBeforeChange": "     public int executeAsForked(CommandlineJava commandline,                                ExecuteWatchdog watchdog) throws BuildException", "signatureAfterChange": "     public int executeAsForked(CommandlineJava commandline,                                ExecuteWatchdog watchdog) throws BuildException", "diff": ["-        PathTokenizer sourcesPath ", "-            = new PathTokenizer(getSourcespath().toString());", "-        while (sourcesPath.hasMoreTokens()) {", "-            File f = new File(sourcesPath.nextToken());", "+        // This is deprecated - use classespath in the future", "+        String[] sourcesPath = getSourcespath().list();", "+        for (int i = 0; i < sourcesPath.length; i++) {", "+            File f = new File(sourcesPath[i]);", "+        // This is the new way - use classespath - code is the same for now", "+        String[] classesPath = getClassespath().list();", "+        for (int i = 0; i < classesPath.length; i++) {", "+            File f = new File(classesPath[i]);", "+            // not necessary as JDepend would fail, but why loose some time?", "+            if (!f.exists() || !f.isDirectory()) {", "+                throw new BuildException(\"\\\"\" + f.getPath() + \"\\\" does not \"", "+                        + \"represent a valid directory. JDepend would fail.\");", "+            }", "+            commandline.createArgument().setValue(f.getPath());", "+        }", "+"]}]}
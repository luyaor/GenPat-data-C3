{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d2f07b33b8927cced35f075b2c375711", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d7d7be8b73a65da41b538cbff08a704", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XSLTProcess.java", "commitBeforeChange": "834d0d120161d495fd02545d0380d5a83b6f0e54", "commitAfterChange": "f0565366fe94c3cdf2a35c881ce385a67bc0b88d", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 66, "signatureBeforeChange": "     protected void configureLiaison(Resource stylesheet) throws BuildException", "signatureAfterChange": "     protected void configureLiaison(Resource stylesheet) throws BuildException", "diff": ["-            for (Enumeration e = params.elements(); e.hasMoreElements();) {", "-                Param p = (Param) e.nextElement();", "+            for (Param p : params) {", "-                    liaison.addParam(p.getName(), p.getExpression());", "+                    Object evaluatedParam = evaluateParam(p);", "+                    if (liaison instanceof XSLTLiaison4) {", "+                        ((XSLTLiaison4)liaison).addParam(p.getName(), evaluatedParam);", "+                    } else {", "+                        if (evaluatedParam == null || evaluatedParam instanceof String) {", "+                            liaison.addParam(p.getName(), (String)evaluatedParam);", "+                        } else {", "+                            log(\"XSLTLiaison '\" + liaison.getClass().getName()", "+                                    + \"' supports only String parameters. Converting parameter '\" + p.getName()", "+                                    + \"' to its String value '\" + evaluatedParam, Project.MSG_WARN);", "+                            liaison.addParam(p.getName(), String.valueOf(evaluatedParam));", "+                        }", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d108db25b1eb1d42a8eaaa6f4491e31", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Tar.java", "commitBeforeChange": "ed654080ab790e351e7d0e43b3e5638541421a6e", "commitAfterChange": "867ec77b0d9efa8819be2ebf82cace4600b929ee", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      protected void tarFile(File file, TarOutputStream tOut, String vPath,                            TarFileSet tarFileSet)         throws IOException", "signatureAfterChange": "      protected void tarFile(File file, TarOutputStream tOut, String vPath,                            TarFileSet tarFileSet)         throws IOException", "diff": ["+            if (vPath.length() >= TarConstants.NAMELEN) {", "+                if (longFileMode.equalsIgnoreCase(TRUNCATE)) {", "+                    log(\"Skipping: \"+ vPath, Project.MSG_INFO);", "+                    return;", "+                } else if (longFileMode.equalsIgnoreCase(WARN)) {", "+                    log(\"Entry: \"+ vPath + \" longer than \" + ", "+                        TarConstants.NAMELEN + \" characters.\", Project.MSG_WARN);", "+                    log(\"Resulting tar file can only be processed successfully\"", "+                        + \" by GNU compatible tar commands\", Project.MSG_WARN);", "+                } else if (longFileMode.equalsIgnoreCase(FAIL)) {", "+                    throw new BuildException(", "+                        \"Entry: \"+ vPath + \" longer than \" + ", "+                        TarConstants.NAMELEN + \"characters.\", location);", "+                }", "+            }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f80df4f6e9846e8da87e83a6bfad86a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/tar/TarOutputStream.java", "commitBeforeChange": "51516f38d58c48f261be98eedf80bf52fafd236b", "commitAfterChange": "6ff2c8367d444eefd444295b032a36805baa617d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void putNextEntry(TarEntry entry) throws IOException", "signatureAfterChange": "     public void putNextEntry(TarEntry entry) throws IOException", "diff": ["+        if (entry.getName().length() > TarConstants.NAMELEN) {", "+", "+            if (longFileMode == LONGFILE_GNU) {", "+                // create a TarEntry for the LongLink, the contents", "+                // of which are the entry's name ", "+                TarEntry longLinkEntry = new TarEntry(TarConstants.GNU_LONGLINK,", "+                                                      TarConstants.LF_GNUTYPE_LONGNAME);", "+                 ", "+                longLinkEntry.setSize(entry.getName().length() + 1);", "+                putNextEntry(longLinkEntry);                                                    ", "+                write(entry.getName().getBytes());", "+                write(0);", "+                closeEntry();", "+            }", "+            else if (longFileMode != LONGFILE_TRUNCATE) {", "+                throw new RuntimeException(\"file name '\" + entry.getName() ", "+                                             + \"' is too long ( > \" ", "+                                             + TarConstants.NAMELEN + \" bytes)\");", "+            }", "+        } ", "+"]}]}
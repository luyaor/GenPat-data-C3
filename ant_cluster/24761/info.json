{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df470deb3e9d17572fc35e94203bd77e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19364f7c8aeeec8f27c746592b15ece5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Available.java", "commitBeforeChange": "2bc2f8e4fa99ff51eaec0156d0a7a97bad5eab53", "commitAfterChange": "b971cbef85dab5b0bf2a3c9624bc2f94db9dee8b", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private boolean checkFile()", "signatureAfterChange": "     private boolean checkFile()", "diff": ["-                if (parent != null && parent.exists() && searchParents) {", "+                while (searchParents && parent != null && parent.exists()) {", "-                }", "-                // **   simple name specified   == parent of parent dir + name", "-                if (parent != null && searchParents) {", "-                    File grandParent = parent.getParentFile();", "-                    if (grandParent != null && grandParent.exists()) {", "-                        if (checkFile(new File(grandParent, filename),", "-                                      filename + \" in \" + grandParent)) {", "-                            return true;", "-                        }", "-                    }", "+                    parent = parent.getParentFile();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53a3e82000702c231ca27878fddb49dd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/GenericDeploymentTool.java", "commitBeforeChange": "f19f07d6e4c72f241057ecfc32d80be21201bbf7", "commitAfterChange": "ca91f8cb7e4f2bfe1a191dea6126a32649af9565", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 29, "signatureBeforeChange": "     protected void writeJar(String baseName, File jarfile, Hashtable files,                             String publicId) throws BuildException", "signatureAfterChange": "     protected void writeJar(String baseName, File jarfile, Hashtable files,                             String publicId) throws BuildException", "diff": ["-                File manifestFile = new File(getConfig().descriptorDir, baseName + \"-manifest.mf\");", "-                if (manifestFile.exists()) {", "+                File manifestFile = (File) files.get(MANIFEST);", "+                if (manifestFile != null && manifestFile.exists()) {", "-                } else if (config.manifest != null) {", "-                    in = new FileInputStream(config.manifest);", "-                    if (in == null) {", "-                        throw new BuildException(\"Could not find manifest file: \" + config.manifest,", "-                                                  getLocation());", "-                    }", "+                if (entryName.equals(MANIFEST)) {", "+                    continue;", "+                }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87bb3a78cd25bb681f55138dae0e4113", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultObjectConfigurer.java", "commitBeforeChange": "8af1905a98b1e04a63ab7473d64a41bfda91f15e", "commitAfterChange": "7a5c30f33c46dec3fb201dac6878a09c4cfcaf2c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void enableAdders()         throws ConfigurationException", "signatureAfterChange": "     private void enableProperties()         throws ConfigurationException", "diff": ["-    public void enableAdders()", "+    private void enableProperties()", "+            final boolean isTypedProp = (propName.length() == 0);", "+            if( isTypedProp && !type.isInterface() )", "+            {", "+                final String message =", "+                    REZ.getString( \"typed-adder-non-interface.error\",", "+                                   m_class.getName(),", "+                                   type.getName() );", "+                throw new ConfigurationException( message );", "+            }", "+", "-            m_props.put( propName, configurer );", "+            if( isTypedProp )", "+            {", "+                m_typedPropConfigurer = configurer;", "+            }", "+            else", "+            {", "+                m_props.put( propName, configurer );", "+            }"]}]}
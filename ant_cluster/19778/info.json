{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7a08b23e14342a972fa0113dcbbe3b7c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87d7d7f8aa60b499d90f56596eaff4e2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ResourceUtils.java", "commitBeforeChange": "127199510da5c3579a0814f19a2635e95bbca901", "commitAfterChange": "e05733aa9b6666651f4aa455e3ce0dc0158951b2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static Resource[] selectOutOfDateSources(ProjectComponent logTo,                                                     Resource[] source,                                                     FileNameMapper mapper,                                                     ResourceFactory targets)", "signatureAfterChange": "     public static Resource[] selectOutOfDateSources(ProjectComponent logTo,                                                     Resource[] source,                                                     FileNameMapper mapper,                                                     ResourceFactory targets)", "diff": ["-        long now = (new java.util.Date()).getTime();", "+        return selectOutOfDateSources(logTo, source, mapper, targets,", "+                                      FileUtils.newFileUtils()", "+                                      .getFileTimestampGranularity());", "+    }", "-        /*", "-          If we're on Windows, we have to munge the time up to 2 secs to", "-          be able to check file modification times.", "-          (Windows has a max resolution of two secs for modification times)", "-          Actually this is a feature of the FAT file system, NTFS does", "-          not have it, so if we could reliably passively test for an NTFS", "-          file systems we could turn this off...", "-        */", "-        if (Os.isFamily(\"windows\")) {", "-            now += 2000;", "-        }", "-                    } else if (!atarget.isDirectory() && atarget.getLastModified()", "-                               < source[counter].getLastModified()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93f30c00c42a12a37b1c5c700b1be750", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ResourceUtils.java", "commitBeforeChange": "50558dd274c428071d86fbc78ce5431ebb88935c", "commitAfterChange": "a4c986354481641bc4b9811854fefaf2fec7f86a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public static ResourceCollection selectOutOfDateSources(ProjectComponent logTo,                                                             ResourceCollection source,                                                             FileNameMapper mapper,                                                             ResourceFactory targets,                                                             final long granularity)", "signatureAfterChange": "     public static ResourceCollection selectOutOfDateSources(ProjectComponent logTo,                                                             ResourceCollection source,                                                             FileNameMapper mapper,                                                             ResourceFactory targets,                                                             final long granularity)", "diff": ["+        logFuture(logTo, source, granularity);", "+        ResourceSelectorProvider p = ", "+            new ResourceSelectorProvider() {", "+                public ResourceSelector", "+                    getTargetSelectorForSource(final Resource sr) {", "+                    return new ResourceSelector() {", "+                        public boolean isSelected(Resource target) {", "+                            /* Extra I/O, probably wasted:", "+                               if (target.isDirectory()) {", "+                               return false;", "+                               }", "+                            */", "+                            return SelectorUtils.isOutOfDate(sr, target,", "+                                                             granularity);", "+                        }", "+                    };", "+                }", "+            };", "+        return selectSources(logTo, source, mapper, targets, p);", "+    }", "-        logFuture(logTo, source, granularity);", "-            r.add(new ResourceSelector() {", "-                public boolean isSelected(Resource target) {", "-                    /* Extra I/O, probably wasted:", "-                    if (target.isDirectory()) {", "-                        return false;", "-                    }", "-                     */", "-                    return SelectorUtils.isOutOfDate(sr, target, granularity);", "-                }", "-            });"]}]}
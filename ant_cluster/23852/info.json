{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7396e42fd54a28d51be6519d799e78fd", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17edfa9b159f2e23f2c0cebaa3a837d8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/test/org/apache/myrmidon/components/AbstractComponentTest.java", "commitBeforeChange": "8cab56ee0ec0c658d0dec674d305630eb8e88bf4", "commitAfterChange": "f5ba55efa18fa862c2a4f5762198c2a9481f287e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected final ServiceManager getServiceManager() throws Exception", "signatureAfterChange": "     protected final ServiceManager getServiceManager() throws Exception", "diff": ["+            // Contextualise the components", "+            final Context context = new DefaultContext( getParameters() );", "+            for( Iterator iterator = components.iterator(); iterator.hasNext(); )", "+            {", "+                Object obj = iterator.next();", "+                if( obj instanceof Contextualizable )", "+                {", "+                    final Contextualizable contextualizable = (Contextualizable)obj;", "+                    contextualizable.contextualize( context );", "+                }", "+            }", "+", "-                }", "-            }", "-", "-            // Parameterise the components", "-            final Parameters parameters = getParameters();", "-            for( Iterator iterator = components.iterator(); iterator.hasNext(); )", "-            {", "-                Object obj = iterator.next();", "-                if( obj instanceof Parameterizable )", "-                {", "-                    final Parameterizable parameterizable = (Parameterizable)obj;", "-                    parameterizable.parameterize( parameters );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4781748facbd38b828bddff1d5abf328", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/MappedResourceCollection.java", "commitBeforeChange": "bc221496581a8391d9210666b828a7c63cddd89e", "commitAfterChange": "45485bd5486044bc45821941cc6d33d83c22f939", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "          public Object next()", "signatureAfterChange": "      private Collection getCollection()", "diff": ["+    private Collection getCollection() {", "+        Collection collected = new ArrayList();", "+        FileNameMapper m =", "+            mapper != null ? mapper.getImplementation() : new IdentityMapper();", "+        for (Iterator iter = nested.iterator(); iter.hasNext(); ) {", "+            Resource r = (Resource) iter.next();", "+            if (enableMultipleMappings) {", "+                String[] n = m.mapFileName(r.getName());", "+                if (n != null) {", "+                    for (int i = 0; i < n.length; i++) {", "+                        collected.add(new MappedResource(r,", "+                                                         new MergingMapper(n[i]))", "+                                      );", "+                    }", "+                }", "+                collected.add(new MappedResource(r, m));", "-", "-        public Object next() {", "-            return new MappedResource((Resource) sourceIterator.next(),", "-                                      mapper);", "-        }", "+        return collected;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a64e300685af92da360db4d5060aa78", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/Path.java", "commitBeforeChange": "0a41a60d0fece26541adf1cb8cfd22a5f8a3f5a7", "commitAfterChange": "157e6f3305b448bee38aae65e6fcfaff4c7e11d0", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 22, "signatureBeforeChange": "     protected Collection getCollection()", "signatureAfterChange": "     public String toString()", "diff": ["-    protected Collection getCollection() {", "-        for (Iterator i = getResourceCollections().iterator(); i.hasNext();) {", "-            ResourceCollection rc = (ResourceCollection) i.next();", "-            if (!(rc.isFilesystemOnly())) {", "-                throw new BuildException(getDataTypeName()", "-                    + \" allows only filesystem resources.\");", "-            }", "-            if (rc instanceof PathElement", "-                && ((PathElement) rc).getParts() == null) {", "-                throw new BuildException(", "-                    \"Either location or path must be set on a pathelement.\");", "-            } else if (rc instanceof Path) {", "-                Path p = (Path) rc;", "-                if (p.getProject() == null) {", "-                    p.setProject(getProject());", "-                }", "-            }", "-        return super.getCollection();", "+     */", "+    public String toString() {", "+        return isReference() ? getCheckedRef().toString() :", "+            union == null ? \"\" : union.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e29561932ae1788a9444bc3f51f8b06b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/Restrict.java", "commitBeforeChange": "cf12b9b863b658fec3fa94eecd4c0e7df3b8e986", "commitAfterChange": "05988f712e1b2011194e635b8ffe5b57aebd8bf1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 0, "signatureBeforeChange": "     protected Collection getCollection()", "signatureAfterChange": "         protected Collection getCollection()", "diff": ["+         */", "+        protected Collection getCollection() {", "+            ArrayList result = new ArrayList();", "+outer:      for (Iterator ri = w.getResourceCollection().iterator(); ri.hasNext();) {", "+                Resource r = (Resource) ri.next();", "+                for (Iterator i = getSelectors(); i.hasNext();) {", "+                    if (!((ResourceSelector) (i.next())).isSelected(r)) {", "+                        continue outer;", "+                    }", "+                }", "+                result.add(r);", "+            }", "+            return result;", "+        }", "-     */", "-    protected Collection getCollection() {", "-        ArrayList result = new ArrayList();", "-outer:  for (Iterator ri = rc.iterator(); ri.hasNext();) {", "-            Resource r = (Resource) ri.next();", "-            for (Iterator i = getSelectors(); i.hasNext();) {", "-                if (!((ResourceSelector) (i.next())).isSelected(r)) {", "-                    continue outer;", "-                }", "-            }", "-            result.add(r);", "-        }", "-        return result;", "-    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "39ccc1ae621b10f96e721f20c39dbcc8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "462e27b1bf1c971b3ed2399221084607", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "2c4faa154f069f3f69d6c3c95629409a7b8b0cc4", "commitAfterChange": "8b58203e3120ecbeb7c53ce127fb41316f7eea92", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 42, "signatureBeforeChange": "     private boolean couldHoldIncluded(TokenizedPath tokenizedName)", "signatureAfterChange": "     private boolean couldHoldIncluded(TokenizedPath tokenizedName)", "diff": ["-        int wildCardCount = 0;", "-        for (int i = 0; i < includes.length; i++) {", "-            TokenizedPattern tokenizedInclude;", "-            boolean wildcard = SelectorUtils.hasWildcards(includes[i]);", "-            if (wildcard) {", "-                tokenizedInclude = includePatterns[wildCardCount++];", "-            } else {", "-                tokenizedInclude = new TokenizedPattern(includes[i]);", "+        for (int i = 0; i < includePatterns.length; i++) {", "+            if (couldHoldIncluded(tokenizedName, includePatterns[i])) {", "+                return true;", "-            if (tokenizedInclude.matchStartOf(tokenizedName, isCaseSensitive())", "-                && isMorePowerfulThanExcludes(tokenizedName.toString())", "-                && isDeeper(tokenizedInclude, tokenizedName)) {", "+        }", "+        for (Iterator iter = includeNonPatterns.values().iterator();", "+             iter.hasNext(); ) {", "+            if (couldHoldIncluded(tokenizedName,", "+                                  ((TokenizedPath) iter.next()).toPattern())) {", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65860bb57ecd7170ee893cbe8f1e4c52", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "d5b535aa9a9f69dcd2d0cada46e88e7f3295c084", "commitAfterChange": "f8e71b50339d8fc15bdf6813eaa91d24096817a7", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     protected void runStatements(Reader reader, PrintStream out)         throws SQLException, IOException", "signatureAfterChange": "     protected void runStatements(Reader reader, PrintStream out)         throws SQLException, IOException", "diff": ["-            if (!keepformat) {", "-                sql.append(\" \");", "-                sql.append(line);", "-            } else {", "-                sql.append(\"\\n\");", "-                sql.append(line);", "-            }", "+            sql.append(keepformat ? \"\\n\" : \" \").append(line);", "-            if (!keepformat) {", "-                if (line.indexOf(\"--\") >= 0) {", "-                    sql.append(\"\\n\");", "-                }", "+            if (!keepformat && line.indexOf(\"--\") >= 0) {", "+                sql.append(\"\\n\");", "-            if ((delimiterType.equals(DelimiterType.NORMAL)", "-                 && StringUtils.endsWith(sql, delimiter))", "-                ||", "-                (delimiterType.equals(DelimiterType.ROW)", "-                 && line.equals(delimiter))) {", "-                execSQL(sql.substring(0, sql.length() - delimiter.length()),", "-                        out);", "+            if ((delimiterType.equals(DelimiterType.NORMAL) && StringUtils.endsWith(sql, delimiter))", "+                    || (delimiterType.equals(DelimiterType.ROW) && line.equals(delimiter))) {", "+                execSQL(sql.substring(0, sql.length() - delimiter.length()), out);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0b72c4a089c5673b002151b51b4b4370", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b59620a2c3055d5fb75cb5c25ea19c9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     @Override \tpublic void execute() throws BuildException", "diff": ["-    public void execute() throws BuildException {", "-        File savedFile = file; // may be altered in validateAttributes", "-        File savedDestFile = destFile;", "-        File savedDestDir = destDir;", "+    @Override", "+\tpublic void execute() throws BuildException {", "+        final File savedFile = file; // may be altered in validateAttributes", "+        final File savedDestFile = destFile;", "+        final File savedDestDir = destDir;", "-            savedRc = (ResourceCollection) rcs.elementAt(0);", "+            savedRc = rcs.elementAt(0);", "-            } catch (BuildException e) {", "+            } catch (final BuildException e) {", "-            HashMap<File, List<String>> filesByBasedir = new HashMap<File, List<String>>();", "-            HashMap<File, List<String>> dirsByBasedir = new HashMap<File, List<String>>();", "-            HashSet<File> baseDirs = new HashSet<File>();", "-            ArrayList<Resource> nonFileResources = new ArrayList<Resource>();", "+            final HashMap<File, List<String>> filesByBasedir = new HashMap<File, List<String>>();", "+            final HashMap<File, List<String>> dirsByBasedir = new HashMap<File, List<String>>();", "+            final HashSet<File> baseDirs = new HashSet<File>();", "+            final ArrayList<Resource> nonFileResources = new ArrayList<Resource>();", "-                ResourceCollection rc = rcs.elementAt(i);", "+                final ResourceCollection rc = rcs.elementAt(i);", "-                    FileSet fs = (FileSet) rc;", "+                    final FileSet fs = (FileSet) rc;", "-                    } catch (BuildException e) {", "+                    } catch (final BuildException e) {", "-                    File fromDir = fs.getDir(getProject());", "+                    final File fromDir = fs.getDir(getProject());", "-                    String[] srcFiles = ds.getIncludedFiles();", "-                    String[] srcDirs = ds.getIncludedDirectories();", "+                    final String[] srcFiles = ds.getIncludedFiles();", "+                    final String[] srcDirs = ds.getIncludedDirectories();", "-                    for (Resource r : rc) {", "+                    for (final Resource r : rc) {", "-                            String message = \"Warning: Could not find resource \"", "+                            final String message = \"Warning: Could not find resource \"", "-                        FileProvider fp = r.as(FileProvider.class);", "+                        final FileProvider fp = r.as(FileProvider.class);", "-                            FileResource fr = ResourceUtils.asFileResource(fp);", "+                            final FileResource fr = ResourceUtils.asFileResource(fp);", "-            } catch (BuildException e) {", "+            } catch (final BuildException e) {", "-                Resource[] nonFiles =", "-                    (Resource[]) nonFileResources.toArray(new Resource[nonFileResources.size()]);", "+                final Resource[] nonFiles =", "+                    nonFileResources.toArray(new Resource[nonFileResources.size()]);", "-                Map<Resource, String[]> map = scan(nonFiles, destDir);", "+                final Map<Resource, String[]> map = scan(nonFiles, destDir);", "-                            new String[] { destFile.getAbsolutePath() });", "+                            new String[] {destFile.getAbsolutePath()});", "-                } catch (BuildException e) {", "+                } catch (final BuildException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3b5940cde59edca818746912570ba20", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/DirectoryScannerTest.java", "commitBeforeChange": "02f7f5bc1e0feef4f516ecc8fbbb7084f61b150e", "commitAfterChange": "c0e5ece04f0f654317bff4e63f3d398d0aaae74b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void compareFiles(DirectoryScanner ds, String[] expectedFiles, String[] expectedDirectories)", "signatureAfterChange": "      private void compareFiles(DirectoryScanner ds, String[] expectedFiles,                                String[] expectedDirectories)", "diff": ["-    private void compareFiles(DirectoryScanner ds, String[] expectedFiles, String[] expectedDirectories) {", "-        String includedFiles[] = ds.getIncludedFiles();", "-        String includedDirectories[] = ds.getIncludedDirectories();", "-        assertTrue(\"expecting : \" + expectedFiles.length + \" files, present : \" + includedFiles.length, includedFiles.length == expectedFiles.length);", "-        assertTrue(\"expecting : \" + expectedDirectories.length + \" directories, present : \" + includedDirectories.length, includedDirectories.length == expectedDirectories.length);", "-        TreeSet files = new TreeSet();", "-        for (int counter=0; counter < includedFiles.length; counter++) {", "-            files.add(includedFiles[counter].replace(File.separatorChar,'/'));", "-        }", "-        TreeSet directories = new TreeSet();", "-        for (int counter=0; counter < includedDirectories.length; counter++) {", "-            directories.add(includedDirectories[counter].replace(File.separatorChar,'/'));", "-        }", "-        String currentfile;", "-        Iterator i = files.iterator();", "-        int counter = 0;", "-        while (i.hasNext()) {", "-            currentfile = (String) i.next();", "-            assertTrue(\"expecting file \" + expectedFiles[counter], currentfile.equals(expectedFiles[counter]));", "-            counter++;", "-        }", "-        String currentdirectory;", "-        Iterator dirit = directories.iterator();", "-        counter = 0;", "-        while (dirit.hasNext()) {", "-            currentdirectory = (String) dirit.next();", "-            assertTrue(\"expecting directory \" + expectedDirectories[counter], currentdirectory.equals(expectedDirectories[counter]));", "-            counter++;", "-        }", "+    private void compareFiles(DirectoryScanner ds, String[] expectedFiles, ", "+                              String[] expectedDirectories) {", "+        String includedFiles[] = ds.getIncludedFiles();", "+        String includedDirectories[] = ds.getIncludedDirectories();", "+        assertEquals(\"file present: \", expectedFiles.length,  ", "+                     includedFiles.length);", "+        assertEquals(\"directories present: \", expectedDirectories.length,  ", "+                     includedDirectories.length);", "+", "+        TreeSet files = new TreeSet();", "+        for (int counter=0; counter < includedFiles.length; counter++) {", "+            files.add(includedFiles[counter].replace(File.separatorChar, '/'));", "+        }", "+        TreeSet directories = new TreeSet();", "+        for (int counter=0; counter < includedDirectories.length; counter++) {", "+            directories.add(includedDirectories[counter]", "+                            .replace(File.separatorChar, '/'));", "+        }", "+", "+        String currentfile;", "+        Iterator i = files.iterator();", "+        int counter = 0;", "+        while (i.hasNext()) {", "+            currentfile = (String) i.next();", "+            assertEquals(expectedFiles[counter], currentfile);", "+            counter++;", "+        }", "+        String currentdirectory;", "+        Iterator dirit = directories.iterator();", "+        counter = 0;", "+        while (dirit.hasNext()) {", "+            currentdirectory = (String) dirit.next();", "+            assertEquals(expectedDirectories[counter], currentdirectory);", "+            counter++;", "+        }", "+    }"]}]}
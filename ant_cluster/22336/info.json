{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "52cd605f62a3a135a045690d0013b98b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d0f80bab2d092b48abf6659083e57b8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/javacc/JavaCC.java", "commitBeforeChange": "46c40044e121ccf6096148a2def4159a4887e405", "commitAfterChange": "5c5152c705ed97f52e319498b7fcb7e639f75cc8", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     protected static String getMainClass(File home, int type)          throws BuildException", "signatureAfterChange": "     protected static String getMainClass(File home, int type)          throws BuildException", "diff": ["-            case 1:", "-            case 2:", "-                packagePrefix = COM_PACKAGE;", "+        case 1:", "+        case 2:", "+            packagePrefix = COM_PACKAGE;", "-                switch (type) {", "-                    case TASKDEF_TYPE_JAVACC:", "-                        mainClass = COM_JAVACC_CLASS;", "-", "-                        break;", "-", "-                    case TASKDEF_TYPE_JJTREE:", "-                        mainClass = COM_JJTREE_CLASS;", "-", "-                        break;", "-", "-                    case TASKDEF_TYPE_JJDOC:", "-                        mainClass = COM_JJDOC_CLASS;", "-", "-                        break;", "-                }", "+            switch (type) {", "+            case TASKDEF_TYPE_JAVACC:", "+                mainClass = COM_JAVACC_CLASS;", "-            case 3:", "-                packagePrefix = ORG_PACKAGE;", "-", "-                switch (type) {", "-                    case TASKDEF_TYPE_JAVACC:", "-                        mainClass = ORG_JAVACC_CLASS;", "-", "-                        break;", "-", "-                    case TASKDEF_TYPE_JJTREE:", "-                        mainClass = ORG_JJTREE_CLASS;", "-", "-                        break;", "-", "-                    case TASKDEF_TYPE_JJDOC:", "-                        mainClass = ORG_JJDOC_CLASS;", "-", "-                        break;", "-                }", "+            case TASKDEF_TYPE_JJTREE:", "+                mainClass = COM_JJTREE_CLASS;", "+", "+            case TASKDEF_TYPE_JJDOC:", "+                mainClass = COM_JJDOC_CLASS;", "+", "+                break;", "+            }", "+", "+            break;", "+", "+        case 3:", "+            /* ", "+             * This is where the fun starts, JavaCC 3.0 uses", "+             * org.netbeans.javacc, 3.1 uses org.javacc - I wonder", "+             * which version is going to use net.java.javacc.", "+             *", "+             * Look into to the archive to pick up the best", "+             * package.", "+             */", "+            ZipFile zf = null;", "+            try {", "+                zf = new ZipFile(getArchiveFile(home));", "+                if (zf.getEntry(ORG_PACKAGE.replace('.', '/')) != null) {", "+                    packagePrefix = ORG_PACKAGE;", "+                } else {", "+                    packagePrefix = ORG_JAVACC_PACKAGE;", "+                }", "+            } catch (IOException e) {", "+                throw new BuildException(\"Error reading javacc.jar\", e);", "+            } finally {", "+                if (zf != null) {", "+                    try {", "+                        zf.close();", "+                    } catch (IOException e) {", "+                        throw new BuildException(e);", "+                    }", "+                }", "+            }", "+", "+            switch (type) {", "+            case TASKDEF_TYPE_JAVACC:", "+                mainClass = ORG_JAVACC_CLASS;", "+", "+                break;", "+", "+            case TASKDEF_TYPE_JJTREE:", "+                mainClass = ORG_JJTREE_CLASS;", "+", "+                break;", "+", "+            case TASKDEF_TYPE_JJDOC:", "+                mainClass = ORG_JJDOC_CLASS;", "+", "+                break;", "+            }", "+", "+            break;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbdff8fc7c65560a7ef62cc333c67be9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Echo.java", "commitBeforeChange": "3f2688a0edbb0994a6b274971a0d75e55ef5d20f", "commitAfterChange": "0b508c32847329e6cabb15c97c051e0feaea567c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-\tSystem.out.println(message);", "+        if (file == null) {", "+            System.out.println(message);", "+        } else {", "+            FileWriter out = null;", "+            try {", "+                out = new FileWriter(file.getAbsolutePath(), append);", "+                out.write(message, 0, message.length());", "+            } catch (IOException ioe) {", "+                throw new BuildException(ioe, location);", "+            } finally {", "+                if (out != null) {", "+                    try {", "+                        out.close();", "+                    } catch (IOException ioex) {}", "+                }", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef753b87fbf1092a04976afc19c8b309", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Java.java", "commitBeforeChange": "73db4788f651cb51e829b92b92b462b5bfb1f0ee", "commitAfterChange": "6f18050729f77a61ff648cc7b9c102f61fd6c6b0", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private int run(String[] command) throws BuildException", "signatureAfterChange": "     private int run(String[] command) throws BuildException", "diff": ["-        Execute exe = new Execute(new LogStreamHandler(this, Project.MSG_INFO,", "+        FileOutputStream fos = null;", "+        try {", "+            Execute exe = null;", "+            if (out == null) {", "+                exe = new Execute(new LogStreamHandler(this, Project.MSG_INFO,", "-        ", "-        ", "-        exe.setAntRun(project);", "-", "-        if (dir == null) {", "-            dir = project.getBaseDir();", "-        } else if (!dir.exists() || !dir.isDirectory()) {", "-            throw new BuildException(dir.getAbsolutePath()+\" is not a valid directory\",", "-                                     location);", "-        }", "-", "-        exe.setWorkingDirectory(dir);", "-", "-        exe.setCommandline(command);", "-        try {", "-            return exe.execute();", "-        } catch (IOException e) {", "-            throw new BuildException(e, location);", "+            } else {", "+                fos = new FileOutputStream(out);", "+                exe = new Execute(new PumpStreamHandler(fos), null);", "+            }", "+            ", "+            exe.setAntRun(project);", "+            ", "+            if (dir == null) {", "+                dir = project.getBaseDir();", "+            } else if (!dir.exists() || !dir.isDirectory()) {", "+                throw new BuildException(dir.getAbsolutePath()+\" is not a valid directory\",", "+                                         location);", "+            }", "+            ", "+            exe.setWorkingDirectory(dir);", "+            ", "+            exe.setCommandline(command);", "+            try {", "+                return exe.execute();", "+            } catch (IOException e) {", "+                throw new BuildException(e, location);", "+            }", "+        } catch (IOException io) {", "+            throw new BuildException(io, location);", "+        } finally {", "+            if (fos != null) {", "+                try {fos.close();} catch (IOException io) {}", "+            }"]}]}
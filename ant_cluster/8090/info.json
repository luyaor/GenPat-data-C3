{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "74ac6d8ce74e36fd47b68327d9039bd4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07e53b21252e881a5a7273aa223ca2fa", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/FileResource.java", "commitBeforeChange": "f7cec58a607900954a1686009fb5ebe4ea6ddea6", "commitAfterChange": "3ae69e82c33e0e03941387a3506561accc2697d3", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public OutputStream getOutputStream() throws IOException", "signatureAfterChange": "     public OutputStream getOutputStream() throws IOException", "diff": ["-            return ((Resource) getCheckedRef()).getOutputStream();", "+            return ((FileResource) getCheckedRef()).getOutputStream();", "+        return getOutputStream(false);", "+    }", "-            if (f.isFile()) {", "-        return new FileOutputStream(f);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f0a0a071bba63b36a3f1d40cd516047", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "1c33fb242a98335e8043db0c22ff713d2e9769d9", "commitAfterChange": "530826d07632632bee538dc1ee635e38d817ad75", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void processArgs(String[] args)", "signatureAfterChange": "     private void processArgs(String[] args)", "diff": ["-        //this is the list of lu", "-        HashMap launchCommands = new HashMap();", "-        launchCommands.put(\"-lib\", \"\");", "-        launchCommands.put(\"-cp\", \"\");", "-        launchCommands.put(\"-noclasspath\", \"\");", "-        launchCommands.put(\"--noclasspath\", \"\");", "-        launchCommands.put(\"-nouserlib\", \"\");", "-        launchCommands.put(\"--nouserlib\", \"\");", "-        launchCommands.put(\"-main\", \"\");", "-            } else if (launchCommands.get(arg) != null) {", "+            } else if (LAUNCH_COMMANDS.contains(arg)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c32b406d41fb2246f8e5ff6980fb3e7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/taskdefs/FixCrLfTest.java", "commitBeforeChange": "775e413520be803bba2a22b304cea64a2336115f", "commitAfterChange": "0fb6ce69c29faf80158c280c98e57e08327dd576", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      public void testNoOverwrite() throws IOException", "signatureAfterChange": "      public void testNoOverwrite() throws IOException", "diff": ["-        executeTarget(\"test1\");", "-        File result =", "-            new File(System.getProperty(\"root\"), \"src/etc/testcases/taskdefs/fixcrlf/result/Junk1.java\");", "-        long modTime = result.lastModified();", "-", "-        /*", "-         * Sleep for some time to make sure a newer file would get a", "-         * more recent timestamp according to the file system's", "-         * granularity (should be > 2s to account for Windows FAT).", "-         */", "-        try {", "-            Thread.sleep(5000);", "-        } catch (InterruptedException ie) {", "-            fail(ie.getMessage());", "-        } // end of try-catch", "-", "-        /*", "-         * make sure we get a new Project instance or the target won't get run", "-         * a second time.", "-         */", "-        configureProject(\"src/etc/testcases/taskdefs/fixcrlf/build.xml\");", "-", "-        executeTarget(\"test1\");", "-        result =", "-            new File(System.getProperty(\"root\"), \"src/etc/testcases/taskdefs/fixcrlf/result/Junk1.java\");", "-        assertEquals(modTime, result.lastModified());", "+        executeTarget(\"testNoOverwrite\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fe8078fc97b4e42843082a774f41a7e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/taskdefs/ExecTaskTest.java", "commitBeforeChange": "f0724e7b098588dd0742d5dd4adef7fef13e7eb2", "commitAfterChange": "7aff2d5b921ab730204dba2e47d936ce53c0c129", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "          public void buildFinished(BuildEvent event)", "signatureAfterChange": "          public void buildFinished(BuildEvent event)", "diff": ["-            try {", "-                Thread.sleep((TIME_TO_WAIT) * 1000 + SECURITY_MARGIN);", "-            } catch (InterruptedException e) {", "-                System.out.println(\"my sleep was interrupted\");", "-            }", "-            // time of the build in milli seconds", "-            long elapsed = myBuild.getTimeElapsed();", "-            assertTrue(\"we waited more than the process lasted\", TIME_TO_WAIT * 1000 > elapsed);", "-            logFile = new File(logFile.getAbsolutePath());", "-            System.out.println(\"log file exists \"+ logFile.exists());", "-            assertTrue(\"log file found after spawn\", logFile.exists());", "+            buildFinished = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "700436619ed7995b89d0b7e97361166d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/DOMElementWriter.java", "commitBeforeChange": "fb2d2b20ba111990c473116f488661b5dd7c86c5", "commitAfterChange": "9cde786c6e08fbec044847fcad158d1d6ae698f1", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public String encodedata(final String value)", "signatureAfterChange": "     public String encodedata(final String value)", "diff": ["-        String result = sb.substring(0);", "-        int cdEnd = result.indexOf(\"]]>\");", "-        while (cdEnd != -1) {", "-            sb.setLength(cdEnd);", "-            // CheckStyle:MagicNumber OFF", "-            sb.append(\"&#x5d;&#x5d;&gt;\")", "-                .append(result.substring(cdEnd + 3));", "-            // CheckStyle:MagicNumber ON", "-            result = sb.substring(0);", "-            cdEnd = result.indexOf(\"]]>\");", "-        }", "-", "-        return result;", "+        return sb.toString().replace(\"]]>\", \"]]]]><![CDATA[>\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70eb56c1fce10f556b799e9739e87b9b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/ZipFileSet.java", "commitBeforeChange": "4af209f564ee4c3b8408f089a8f23723a99a6704", "commitAfterChange": "a96627738decba56e1c94e54fa23ecbd7bfdb9a2", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public DirectoryScanner getDirectoryScanner(Project p)", "signatureAfterChange": "      protected ArchiveScanner newArchiveScanner()", "diff": ["-     */", "-    public DirectoryScanner getDirectoryScanner(Project p) {", "-        if (isReference()) {", "-            return getRef(p).getDirectoryScanner(p);", "-        }", "-        if (srcFile == null) {", "-            return super.getDirectoryScanner(p);", "-        }", "+    protected ArchiveScanner newArchiveScanner() {", "-        zs.setSrc(srcFile);", "-        super.setDir(p.getBaseDir());", "-        setupDirectoryScanner(zs, p);", "-        zs.init();", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91cb644ab0b68f577dccb06f83d4f195", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/taskdefs/TarTest.java", "commitBeforeChange": "1400dc3c1b536c70697f83be990b0725121cba90", "commitAfterChange": "b5fcf10604f56a8061d10f332570342b34cc7a9d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public void test7()", "signatureAfterChange": "      public void test7()", "diff": ["-        executeTarget(\"test7\");", "+        test7(\"test7\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa550f4deb51e05a9dee42eb0db1c1f6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "789c3b031646e92b56aeb7d0a14ee44cbc075072", "commitAfterChange": "23dac944330ed36cc3b91be50c54961428660f57", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                if (!isAutocommit() && conn != null && onError.equals(\"abort\")) {", "-                    try {", "-                        conn.rollback();", "-                    } catch (SQLException ex) {", "-                        // ignore", "-                    }", "-                }", "+                closeQuietly();", "-                if (!isAutocommit() && conn != null && onError.equals(\"abort\")) {", "-                    try {", "-                        conn.rollback();", "-                    } catch (SQLException ex) {", "-                        // ignore", "-                    }", "-                }", "+                closeQuietly();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad10a751cd36abd97d4dcaba870c17d4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ReplaceRegExp.java", "commitBeforeChange": "7717aa2b685d16b86151c2d921d9a861a258361d", "commitAfterChange": "c3a903876567116c619bad264e20e31851d70c28", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     protected void doReplace(File f, int options)          throws IOException", "signatureAfterChange": "     protected void doReplace(File f, int options)          throws IOException", "diff": ["-                int flen = (int) f.length();", "-                char tmpBuf[] = new char[flen];", "-                int numread = 0;", "-                int totread = 0;", "-", "-                while (numread != -1 && totread < flen) {", "-                    numread = br.read(tmpBuf, totread, flen);", "-                    totread += numread;", "-                }", "-", "-                String buf = new String(tmpBuf);", "+                String buf = fileUtils.readFully(br);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9243bc06e8e52f4fbe389fa2ce279ad", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipEntry.java", "commitBeforeChange": "4cbbf3629a15a78615a3ce63ffe6f3fc028b172d", "commitAfterChange": "2c04d7e833b4e5dab1a3c5ddfe14b572aea8c112", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     public ZipExtraField[] getExtraFields(final boolean includeUnparseable)", "signatureAfterChange": "     public ZipExtraField[] getExtraFields(final boolean includeUnparseable)", "diff": ["+        return includeUnparseable ?", "+                getAllExtraFields() :", "+                getParseableExtraFields();", "+    }", "-            return !includeUnparseable || unparseableExtra == null", "-                ? new ZipExtraField[0]", "-                : new ZipExtraField[] {unparseableExtra};", "-        final List<ZipExtraField> result =", "-            new ArrayList<ZipExtraField>(extraFields.values());", "-        if (includeUnparseable && unparseableExtra != null) {", "-            result.add(unparseableExtra);", "-        return result.toArray(new ZipExtraField[0]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6e185648458f6b1f4b13d5b88da372a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "ec980be7345681968c93f0609e9a3fecb39b9753", "commitAfterChange": "fbb9886634198d8377104bef9ec697fadeb134df", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 31, "signatureBeforeChange": "     public boolean contentEquals(File f1, File f2, boolean textfile) throws IOException", "signatureAfterChange": "     public boolean contentEquals(File f1, File f2, boolean textfile) throws IOException", "diff": ["-        if (f1.exists() != f2.exists()) {", "-            return false;", "-        }", "-        if (!f1.exists()) {", "-            // two not existing files are equal", "-            return true;", "-        }", "-        // should the following two be switched?  If f1 and f2 refer to the same file,", "-        // isn't their content equal regardless of whether that file is a directory?", "-        if (f1.isDirectory() || f2.isDirectory()) {", "-            // don't want to compare directory contents for now", "-            return false;", "-        }", "-        if (fileNameEquals(f1, f2)) {", "-            // same filename => true", "-            return true;", "-        }", "-        return textfile ? textEquals(f1, f2) : binaryEquals(f1, f2);", "+        return contentEquals(new FileResource(f1), new FileResource(f2), textfile);"]}]}
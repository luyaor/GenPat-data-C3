{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "698f1fe2426f3ebed07464f52d8b8ecd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c7edcb390ef2e0b758aa1632b05c0b5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/workspace/DefaultWorkspace.java", "commitBeforeChange": "b20531c93c277088ee73f7410025051b383d302e", "commitAfterChange": "7edeb4e678f61ddb643d348cfd8fede79b1cfbe5", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private ExecutionFrame createExecutionFrame( final Project project )         throws TaskException, ComponentException", "signatureAfterChange": "     private ExecutionFrame createExecutionFrame( final Project project )         throws TaskException, ServiceException", "diff": ["-        throws TaskException, ComponentException", "+        throws TaskException, ServiceException", "-        final DefaultComponentManager componentManager =", "-            new DefaultComponentManager( m_componentManager );", "+        final DefaultServiceManager serviceManager =", "+            new DefaultServiceManager( m_serviceManager );", "-        componentManager.put( TypeManager.ROLE, typeManager );", "+        serviceManager.put( TypeManager.ROLE, typeManager );", "-        final Deployer deployer;", "-        deployer = m_deployer.createChildDeployer( componentManager );", "-        componentManager.put( Deployer.ROLE, deployer );", "+        final Deployer deployer = m_deployer.createChildDeployer( serviceManager );", "+        serviceManager.put( Deployer.ROLE, deployer );", "-        componentManager.put( Workspace.ROLE, this );", "-        componentManager.put( Project.ROLE, project );", "+        serviceManager.put( Workspace.ROLE, this );", "+        serviceManager.put( Project.ROLE, project );", "-            componentManager.put( Project.ROLE + \"/\" + name, other );", "+            serviceManager.put( Project.ROLE + \"/\" + name, other );", "-        final MultiSourceServiceManager serviceManager = new MultiSourceServiceManager();", "-        serviceManager.add( (ServiceManager)componentManager.lookup( ServiceManager.ROLE ) );", "-        serviceManager.add( new ComponentManagerAdaptor( componentManager ) );", "+        final MultiSourceServiceManager msServiceManager = new MultiSourceServiceManager();", "+        msServiceManager.add( (AntServiceManager)serviceManager.lookup( AntServiceManager.ROLE ) );", "+        msServiceManager.add( new ServiceManagerAdaptor( serviceManager ) );", "-            new DefaultTaskContext( m_baseContext, serviceManager );", "+            new DefaultTaskContext( m_baseContext, msServiceManager );", "-        componentManager.put( ExecutionFrame.ROLE, frame );", "+        serviceManager.put( ExecutionFrame.ROLE, frame );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e62668ecfed3c581c3e4e9ce1efcdac7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/test/org/apache/myrmidon/components/AbstractComponentTest.java", "commitBeforeChange": "b20531c93c277088ee73f7410025051b383d302e", "commitAfterChange": "7edeb4e678f61ddb643d348cfd8fede79b1cfbe5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected void setUp()         throws Exception", "signatureAfterChange": "     protected void setUp()         throws Exception", "diff": ["-        m_componentManager = new DefaultComponentManager();", "+        m_serviceManager = new DefaultServiceManager();", "-        Component component = new DefaultMasterConverter();", "-        m_componentManager.put( MasterConverter.ROLE, component );", "+        Object component = new DefaultMasterConverter();", "+        m_serviceManager.put( MasterConverter.ROLE, component );", "-        m_componentManager.put( ConverterRegistry.ROLE, component );", "+        m_serviceManager.put( ConverterRegistry.ROLE, component );", "-        m_componentManager.put( TypeManager.ROLE, component );", "+        m_serviceManager.put( TypeManager.ROLE, component );", "-        m_componentManager.put( Configurer.ROLE, component );", "+        m_serviceManager.put( Configurer.ROLE, component );", "-        m_componentManager.put( Deployer.ROLE, component );", "+        m_serviceManager.put( Deployer.ROLE, component );", "-        m_componentManager.put( ClassLoaderManager.ROLE, classLoaderMgr );", "+        m_serviceManager.put( ClassLoaderManager.ROLE, classLoaderMgr );", "-        m_componentManager.put( ExtensionManager.ROLE, component );", "+        m_serviceManager.put( ExtensionManager.ROLE, component );", "-        m_componentManager.put( RoleManager.ROLE, component );", "+        m_serviceManager.put( RoleManager.ROLE, component );", "-        m_componentManager.put( ServiceManager.ROLE, component );", "+        m_serviceManager.put( ServiceManager.ROLE, component );", "-            if( obj instanceof Composable )", "+            if( obj instanceof Serviceable )", "-                final Composable composable = (Composable)obj;", "-                composable.compose( m_componentManager );", "+                final Serviceable serviceable = (Serviceable)obj;", "+                serviceable.service( m_serviceManager );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed9df0bee18daf302d1914b8c44cf078", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/testcases/org/apache/myrmidon/components/AbstractComponentTest.java", "commitBeforeChange": "b20531c93c277088ee73f7410025051b383d302e", "commitAfterChange": "7edeb4e678f61ddb643d348cfd8fede79b1cfbe5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected void setUp()         throws Exception", "signatureAfterChange": "     protected void setUp()         throws Exception", "diff": ["-        m_componentManager = new DefaultComponentManager();", "+        m_serviceManager = new DefaultServiceManager();", "-        Component component = new DefaultMasterConverter();", "-        m_componentManager.put( MasterConverter.ROLE, component );", "+        Object component = new DefaultMasterConverter();", "+        m_serviceManager.put( MasterConverter.ROLE, component );", "-        m_componentManager.put( ConverterRegistry.ROLE, component );", "+        m_serviceManager.put( ConverterRegistry.ROLE, component );", "-        m_componentManager.put( TypeManager.ROLE, component );", "+        m_serviceManager.put( TypeManager.ROLE, component );", "-        m_componentManager.put( Configurer.ROLE, component );", "+        m_serviceManager.put( Configurer.ROLE, component );", "-        m_componentManager.put( Deployer.ROLE, component );", "+        m_serviceManager.put( Deployer.ROLE, component );", "-        m_componentManager.put( ClassLoaderManager.ROLE, classLoaderMgr );", "+        m_serviceManager.put( ClassLoaderManager.ROLE, classLoaderMgr );", "-        m_componentManager.put( ExtensionManager.ROLE, component );", "+        m_serviceManager.put( ExtensionManager.ROLE, component );", "-        m_componentManager.put( RoleManager.ROLE, component );", "+        m_serviceManager.put( RoleManager.ROLE, component );", "-        m_componentManager.put( ServiceManager.ROLE, component );", "+        m_serviceManager.put( ServiceManager.ROLE, component );", "-            if( obj instanceof Composable )", "+            if( obj instanceof Serviceable )", "-                final Composable composable = (Composable)obj;", "-                composable.compose( m_componentManager );", "+                final Serviceable serviceable = (Serviceable)obj;", "+                serviceable.service( m_serviceManager );"]}]}
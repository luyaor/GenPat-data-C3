{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "09e4d25e513ea7d0f3ae6ca67c5652c3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a36f3619a1392a425611c41389ffadf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/cvslib/ChangeLogTask.java", "commitBeforeChange": "57248b5dfac3551c05f70d9fbbb3b1b20c53e479", "commitAfterChange": "5ec7e1db1b76797c2513ada02a7cdc4fa23903b4", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-", "-            final Commandline command = new Commandline();", "-            command.setExecutable(\"cvs\");", "-            command.createArgument().setValue(\"log\");", "+            setCommand(\"log\");", "+            if (getTag() != null) {", "+                CvsVersion myCvsVersion = new CvsVersion();", "+                myCvsVersion.setProject(getProject());", "+                myCvsVersion.setTaskName(\"cvsversion\");", "+                myCvsVersion.setCvsRoot(getCvsRoot());", "+                myCvsVersion.setCvsRsh(getCvsRsh());", "+                myCvsVersion.setPassfile(getPassFile());", "+                myCvsVersion.setDest(m_dir);", "+                myCvsVersion.execute();", "+                if (myCvsVersion.supportsCvsLogWithSOption()) {", "+                    addCommandArgument(\"-S\");", "+                }", "+            }", "-                command.createArgument().setValue(\"-d\");", "-                command.createArgument().setValue(dateRange);", "+                addCommandArgument(\"-d\");", "+                addCommandArgument(dateRange);", "-                        command.createArgument().setValue(files[i]);", "+                        addCommandArgument(files[i]);", "-            log(command.describeCommand(), Project.MSG_VERBOSE);", "+            log(getCommand(), Project.MSG_VERBOSE);", "-            final Execute exe = new Execute(handler);", "-", "-            exe.setWorkingDirectory(m_dir);", "-            exe.setCommandline(command.getCommandline());", "-            exe.setAntRun(getProject());", "-            try {", "-                final int resultCode = exe.execute();", "-", "-                if (Execute.isFailure(resultCode)) {", "-                    throw new BuildException(\"Error running cvs log\");", "-                }", "-            } catch (final IOException ioe) {", "-                throw new BuildException(ioe.toString());", "-            }", "-", "+            setDest(m_dir);", "+            setExecuteStreamHandler(handler);", "+            super.execute();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "626230a94a928ae174eff9289c2d9bf0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/perforce/P4Base.java", "commitBeforeChange": "0380eac20a5d2f2fef36091bc8a51135eb916c27", "commitAfterChange": "0db510656aabc378951525537403492f9b684e81", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "     protected void execP4Command( String command, P4Handler handler )         throws TaskException", "signatureAfterChange": "     protected void execP4Command( final String command,                                   ExecOutputHandler handler )         throws TaskException", "diff": ["-    protected void execP4Command( String command, P4Handler handler )", "+    protected void execP4Command( final String command,", "+                                  ExecOutputHandler handler )", "-", "-            Commandline commandline = new Commandline();", "-            commandline.setExecutable( \"p4\" );", "+            final Commandline cmd = new Commandline();", "+            cmd.setExecutable( \"p4\" );", "-            if( P4Port != null && P4Port.length() != 0 )", "+            if( m_p4Port != null && m_p4Port.length() != 0 )", "-                commandline.createArgument().setValue( P4Port );", "+                cmd.createArgument().setValue( m_p4Port );", "-            if( P4User != null && P4User.length() != 0 )", "+            if( m_p4User != null && m_p4User.length() != 0 )", "-                commandline.createArgument().setValue( P4User );", "+                cmd.createArgument().setValue( m_p4User );", "-            if( P4Client != null && P4Client.length() != 0 )", "+            if( m_p4Client != null && m_p4Client.length() != 0 )", "-                commandline.createArgument().setValue( P4Client );", "+                cmd.createArgument().setValue( m_p4Client );", "-            commandline.createArgument().setLine( command );", "+            cmd.createArgument().setLine( command );", "-            String[] cmdline = commandline.getCommandline();", "+            String[] cmdline = cmd.getCommandline();", "-", "-                handler = new SimpleP4OutputHandler( this );", "+            {", "+                handler = this;", "+            }", "-            final Execute exe = new Execute( handler );", "-            exe.setCommandline( commandline.getCommandline() );", "+            final Execute2 exe = new Execute2();", "+            exe.setExecOutputHandler( handler );", "+            exe.setCommandline( cmd.getCommandline() );", "-            finally", "+            if( null != m_error )", "-                try", "-                {", "-                    handler.stop();", "-                }", "-                catch( Exception e )", "-                {", "-                }", "+                throw m_error;", "-", "+        }", "+        catch( TaskException te )", "+        {", "+            throw te;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f67a90d1855410f5a06a67ec7005a792", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/perforce/P4Base.java", "commitBeforeChange": "0380eac20a5d2f2fef36091bc8a51135eb916c27", "commitAfterChange": "0db510656aabc378951525537403492f9b684e81", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "     protected void execP4Command( String command, P4Handler handler )         throws TaskException", "signatureAfterChange": "     protected void execP4Command( final String command,                                   ExecOutputHandler handler )         throws TaskException", "diff": ["-    protected void execP4Command( String command, P4Handler handler )", "+    protected void execP4Command( final String command,", "+                                  ExecOutputHandler handler )", "-", "-            Commandline commandline = new Commandline();", "-            commandline.setExecutable( \"p4\" );", "+            final Commandline cmd = new Commandline();", "+            cmd.setExecutable( \"p4\" );", "-            if( P4Port != null && P4Port.length() != 0 )", "+            if( m_p4Port != null && m_p4Port.length() != 0 )", "-                commandline.createArgument().setValue( P4Port );", "+                cmd.createArgument().setValue( m_p4Port );", "-            if( P4User != null && P4User.length() != 0 )", "+            if( m_p4User != null && m_p4User.length() != 0 )", "-                commandline.createArgument().setValue( P4User );", "+                cmd.createArgument().setValue( m_p4User );", "-            if( P4Client != null && P4Client.length() != 0 )", "+            if( m_p4Client != null && m_p4Client.length() != 0 )", "-                commandline.createArgument().setValue( P4Client );", "+                cmd.createArgument().setValue( m_p4Client );", "-            commandline.createArgument().setLine( command );", "+            cmd.createArgument().setLine( command );", "-            String[] cmdline = commandline.getCommandline();", "+            String[] cmdline = cmd.getCommandline();", "-", "-                handler = new SimpleP4OutputHandler( this );", "+            {", "+                handler = this;", "+            }", "-            final Execute exe = new Execute( handler );", "-            exe.setCommandline( commandline.getCommandline() );", "+            final Execute2 exe = new Execute2();", "+            exe.setExecOutputHandler( handler );", "+            exe.setCommandline( cmd.getCommandline() );", "-            finally", "+            if( null != m_error )", "-                try", "-                {", "-                    handler.stop();", "-                }", "-                catch( Exception e )", "-                {", "-                }", "+                throw m_error;", "-", "+        }", "+        catch( TaskException te )", "+        {", "+            throw te;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d1fcb935c2664fb206bf4b5ceba1d2b7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e11cd58d8712c3a75006b507021b70e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/BorlandDeploymentTool.java", "commitBeforeChange": "3a35c7d914d8b5a1f203561ae6f89afb5d2b80ec", "commitAfterChange": "24eb5693d6b7363262ea941cac63d15230aa1aab", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private void generateClient(File sourceJar)", "signatureAfterChange": "     private void generateClient(File sourceJar)", "diff": ["-            gentask = (BorlandGenerateClient) getTask().getProject().createTask(\"internal_bas_generateclient\");", "+            Project project = getTask().getProject();", "+            gentask", "+                = (BorlandGenerateClient) project.createTask(\"internal_bas_generateclient\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ec113dffbb4b0ad6eb981d935ac961c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/PropertyHelper.java", "commitBeforeChange": "695ce2ed1c7ffb7ce113fcdc05d12cd70abad525", "commitAfterChange": "1c7138c4dfbc65b68862f53d156cfaaed4415788", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "     protected List getDelegates(Class type)", "signatureAfterChange": "     protected List getDelegates(Class type)", "diff": ["-        return delegates.containsKey(type)", "-                ? (List) new ArrayList((List) delegates.get(type)) : Collections.EMPTY_LIST;", "+        Hashtable curDelegates = delegates;", "+        return curDelegates.containsKey(type)", "+                ? (List) new ArrayList((List) curDelegates.get(type)) : Collections.EMPTY_LIST;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "791377475839cfe422efebcef5f48978", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "9f6981d2a21d4a2d0d8f3fafee609080c65dbf6e", "commitAfterChange": "b36b67d9e2f4304e706efad7d4090dcfdf03e215", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private BuildLogger createLogger()", "signatureAfterChange": "     private BuildLogger createLogger()", "diff": ["-                logger = (BuildLogger) (Class.forName(loggerClassname).newInstance());", "+                Class loggerClass = Class.forName(loggerClassname);", "+                logger = (BuildLogger) (loggerClass.newInstance());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aeb815a286b35aa6b53c21e01dc6d2e3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/acs/ElementTreeModel.java", "commitBeforeChange": "df3ce6106dd8870ddbbb29b89426526409c97556", "commitAfterChange": "237bbc895936f5236884d0083d7f9f967875fd09", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public Object getChild(Object parent, int index)", "signatureAfterChange": "     public Object getChild(Object parent, int index)", "diff": ["-            return getChildren(n).get(index);", "+            List children = getChildren(n);", "+            return children.get(index);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b064deefbab1f964fdf5d2feb3fe5890", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/filters/LineContainsTest.java", "commitBeforeChange": "686d04d125202806c4f41a9a76ef614d6f5d6966", "commitAfterChange": "c8b3893a88d4aac6e42b8c2f4b2fd89b78d5c8fc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "          public void testLineContains() throws IOException", "signatureAfterChange": "          public void testLineContains() throws IOException", "diff": ["-        assertTrue(FileUtils.newFileUtils().contentEquals(expected, result));", "+        FileUtils fu = FileUtils.newFileUtils();", "+        assertTrue(fu.contentEquals(expected, result));"]}]}
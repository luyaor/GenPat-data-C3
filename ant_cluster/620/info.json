{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c0017770bd34250b054a480a1d1743c5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6023f3b53f560bdfa9a3459e21fb2588", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/JavaTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 25, "signatureBeforeChange": "      public void testReleasedInput() throws Exception", "signatureAfterChange": "      @Test     public void testReleasedInput() throws Exception", "diff": ["+    @Test", "-        project.setInputHandler(new DefaultInputHandler() {", "+        buildRule.getProject().setInputHandler(new DefaultInputHandler() {", "-        project.setDefaultInputStream(in);", "+        buildRule.getProject().setDefaultInputStream(in);", "-        java.setProject(project);", "+        java.setProject(buildRule.getProject());", "-                input.setProject(project);", "+                input.setProject(buildRule.getProject());", "-        assertEquals(\"foo\", project.getProperty(\"input.value\"));", "+        assertEquals(\"foo\", buildRule.getProject().getProperty(\"input.value\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f328aa345bd20e20ed4ccaa4d7c8d14", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/JavaTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 28, "signatureBeforeChange": "      public void testFlushedInput() throws Exception", "signatureAfterChange": "      @Test     public void testFlushedInput() throws Exception", "diff": ["+    @Test", "-        project.setInputHandler(new DefaultInputHandler() {", "+        buildRule.getProject().setInputHandler(new DefaultInputHandler() {", "-        project.setDefaultInputStream(in);", "+        buildRule.getProject().setDefaultInputStream(in);", "-                    // don't care", "+                    throw new AssumptionViolatedException(\"Thread interrupted\", e);", "-        executeTarget(\"flushedInput\");", "+        buildRule.executeTarget(\"flushedInput\");"]}]}
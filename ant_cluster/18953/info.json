{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3b272a1c270ba30a7013a9d23e5a012f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df7aa6ab507bc63672051d0fbac63081", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Expand.java", "commitBeforeChange": "ec1437bc19cd82c489e329496bd0529d9e7eb072", "commitAfterChange": "b113154a3acb81036230d6bacbffb6ea977271b5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected void expandFile(FileUtils fileUtils, File srcF, File dir)", "signatureAfterChange": "     protected void expandFile(FileUtils fileUtils, File srcF, File dir)", "diff": ["+        FileInputStream fis = null;", "+        RandomAccessFile raf = null;", "+        byte[] buff = new byte[MARKER_SIZE];", "-            // code from WarExpand", "-            zis = new ZipInputStream(new FileInputStream(srcF));", "-            ZipEntry ze = null;", "+            raf = new RandomAccessFile(srcF, \"r\");", "+            long offset = 0;", "+            int more = raf.read(buff);", "+            boolean foundMarker = false;", "+            while (more != -1 || offset < MAX_LOOKAHEAD) {", "+                if (Arrays.equals(buff, ZIPMARKER)) {", "+                    foundMarker = true;", "+                    break;", "+                }", "+                raf.seek(++offset);", "+                more = raf.read(buff);", "+            }", "+            raf.close();", "+            raf = null;", "+            fis = new FileInputStream(srcF);", "+            if (foundMarker && offset > 0) {", "+                log(\"found a preamble of \" + offset ", "+                    + \" bytes, probably a self-extracting archive\");", "+                fis.skip(offset);", "+            }", "+            ", "+            zis = new ZipInputStream(fis);", "+            ZipEntry ze = null;", "+            if (raf != null) {", "+                try {", "+                    raf.close();", "+                } catch (IOException e) {}", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbdc1aadb3f96805381e3f6c611a2184", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Replace.java", "commitBeforeChange": "c32873b51961cb99f47b4ae6da2922b7b46a6f89", "commitAfterChange": "c437e0d2a0833a49114fa69e746b5f5ee9ed7d8d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void processFile(File src) throws BuildException", "signatureAfterChange": "     private void processFile(File src) throws BuildException", "diff": ["-            throw new BuildException(\"Replace: temporary file \" + temp.getPath() + \" already exists\");", "+            throw new BuildException(\"Replace: temporary file \" + temp.getPath() + \" already exists\", location);", "-            String line;", "-            ", "-            while (true) {", "-                line = br.readLine();", "-                if (line == null) break;", "-                if (line.length() != 0) bw.write(replace(line));", "-                bw.newLine();", "+            // read the entire file into a char[]", "+            int fileLength = (int)(src.length());", "+            char[] tmpBuf = new char[fileLength];", "+            int numread = 0;", "+            int totread = 0;", "+            while (numread != -1 && totread < fileLength) {", "+                numread = br.read(tmpBuf,totread,fileLength);", "+                totread += numread;", "-             ", "+", "+            // create a String so we can use indexOf", "+            String buf = new String(tmpBuf);", "+", "+            // line separators in values and tokens are \"\\n\"", "+            // in order to compare with the file contents, replace them", "+            // as needed", "+            String linesep = System.getProperty(\"line.separator\");", "+            String val = stringReplace(value.getText(), \"\\n\", linesep);", "+            String tok = stringReplace(token.getText(), \"\\n\", linesep);", "+", "+            // for each found token, replace with value and write to the", "+            // output file", "+            buf = stringReplace(buf, tok, val);", "+            bw.write(buf,0,buf.length());", "+            ", "+            // cleanup", "-            ", "-            throw new BuildException(ioe);", "+            throw new BuildException(ioe, location);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cf6dccb1244cf7d8b546a80dcfec3356", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "189ca9d2560a761cf58a4a051d5bfd11", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/taskdefs/AntTest.java", "commitBeforeChange": "6ef4875d061c42465f53150b1397b4d7d3b65905", "commitAfterChange": "3745d5dc705f587314a801d7a7ffe9dd2a0e60b3", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "          public void targetStarted(BuildEvent event)", "signatureAfterChange": "          public void targetStarted(BuildEvent event)", "diff": ["-                    assertEquals(\"Call \"+calls+\" refid=\\'\"+keys[calls]+\"\\'\", ", "-                                 expectSame[calls],", "-                                 event.getProject().getReferences().get(keys[calls++]) == value);", "+                    String msg = ", "+                        \"Call \" + calls + \" refid=\\'\" + keys[calls] + \"\\'\";", "+                    if (value == null) {", "+                        Object o = event.getProject().getReference(keys[calls]);", "+                        if (expectSame[calls++]) {", "+                            assertNull(msg, o);", "+                        } else {", "+                            assertNotNull(msg, o);", "+                        }", "+                    } else {", "+                        // a rather convoluted equals() test", "+                        Path expect = (Path) value;", "+                        Path received = (Path) event.getProject().getReference(keys[calls]);", "+                        boolean shouldBeEqual = expectSame[calls++];", "+                        if (received == null) {", "+                            assertTrue(msg, !shouldBeEqual);", "+                        } else {", "+                            String[] l1 = expect.list();", "+                            String[] l2 = received.list();", "+                            if (l1.length == l2.length) {", "+                                for (int i=0; i<l1.length; i++) {", "+                                    if (!l1[i].equals(l2[i])) {", "+                                        assertTrue(msg, !shouldBeEqual);", "+                                    }", "+                                }", "+                                assertTrue(msg, shouldBeEqual);", "+                            } else {", "+                                assertTrue(msg, !shouldBeEqual);", "+                            }", "+                        }", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d932272178cfab4983ae4771529ac5d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/starteam/StarTeamCheckout.java", "commitBeforeChange": "225893c4b96e202aae6654f8ab2354b307ad35ef", "commitAfterChange": "6409f0ec87cfcc04196be80e0c72aec39a76ec04", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     protected void visit(Folder starteamFolder, java.io.File targetFolder)             throws BuildException", "signatureAfterChange": "     protected void visit(Folder starteamFolder, java.io.File targetFolder)             throws BuildException", "diff": ["+            if (!targetFolder.exists()) {", "+                if (!this.isUsingRevisionLabel()) {", "+                    if (this.createDirs) {", "+                        if (targetFolder.mkdirs()) {", "+                            log(\"Creating folder: \" + targetFolder);", "+                        } else {", "+                            throw new BuildException(", "+                                \"Failed to create local folder \" + targetFolder);", "+                        }", "+                    }", "+                }", "+            }", "+            ", "+", "+            if (this.isUsingRevisionLabel()) {", "+", "+                // prune away any files not belonging to the revision label", "+                // this is one ugly API from Starteam SDK", "+                ", "+                Hashtable labelItems = new Hashtable(filesList.length);", "+                int s = filesList.length;", "+                int[] ids = new int[s];", "+                for (int i=0; i < s; i++) {", "+                    ids[i]=filesList[i].getItemID();", "+                    labelItems.put(new Integer(ids[i]), new Integer(i));", "+                }", "+                int[] foundIds = getLabelInUse().getLabeledItemIDs(ids);", "+                s = foundIds.length;", "+                Item[] labeledFiles = new Item[s];", "+                for (int i=0; i < s; i++) {", "+                    Integer ID = new Integer(foundIds[i]);", "+                    labeledFiles[i] = ", "+                        filesList[((Integer) labelItems.get(ID)).intValue()];", "+                }", "+                filesList = labeledFiles;", "+            }", "-                     if (!subfolder.exists()) {", "-                         if (this.createDirs) {", "-                             log(\"Creating folder: \" + subfolder);", "-                             subfolder.mkdirs();", "-                         }", "-                     }", "-                     if (subfolder.exists()) {", "-            }"]}]}
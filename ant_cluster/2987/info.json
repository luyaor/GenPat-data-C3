{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d15a9077991c2d559478d82f9eb86540", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "461c3483f0d5db29f6e7c493ba339005", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipFile.java", "commitBeforeChange": "1a22123f5c7a236164cadc975673d2b3bcc4033f", "commitAfterChange": "362376d624ba86f6a8f54b47806ac4b40f74df9f", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 26, "signatureBeforeChange": "     private void resolveLocalFileHeaderData(Map<ZipEntry, NameAndComment>                                             entriesWithoutUTF8Flag)         throws IOException", "signatureAfterChange": "     private void resolveLocalFileHeaderData(Map<ZipEntry, NameAndComment>                                             entriesWithoutUTF8Flag)         throws IOException", "diff": ["-        // changing the name of a ZipEntry is going to change", "-        // the hashcode - see COMPRESS-164", "-        // Map needs to be reconstructed in order to keep central", "-        // directory order", "-        Map<ZipEntry, OffsetEntry> origMap =", "-            new LinkedHashMap<ZipEntry, OffsetEntry>(entries);", "-        entries.clear();", "-        for (Map.Entry<ZipEntry, OffsetEntry> ent : origMap.entrySet()) {", "-            ZipEntry ze = ent.getKey();", "-            OffsetEntry offsetEntry = ent.getValue();", "+        for (Iterator<ZipEntry> it = entries.iterator(); it.hasNext(); ) {", "+            // entries is filled in populateFromCentralDirectory and", "+            // never modified", "+            Entry ze = (Entry) it.next();", "+            OffsetEntry offsetEntry = ze.getOffsetEntry();", "-                String orig = ze.getName();", "-                if (!orig.equals(ze.getName())) {", "-                    nameMap.remove(orig);", "-                    nameMap.put(ze.getName(), ze);", "-                }", "-            entries.put(ze, offsetEntry);", "+", "+            String name = ze.getName();", "+            LinkedList<ZipEntry> entriesOfThatName = nameMap.get(name);", "+            if (entriesOfThatName == null) {", "+                entriesOfThatName = new LinkedList<ZipEntry>();", "+                nameMap.put(name, entriesOfThatName);", "+            }", "+            entriesOfThatName.addLast(ze);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5afa7936fbe7cb3f24a5c13528beb9b2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/optional/ScriptRunner.java", "commitBeforeChange": "ebefa298a138aaf7088ad1af981a392b895eff85", "commitAfterChange": "c0b535098106a3b4549151960da251a6e78e627e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void addBeans(Map dictionary)", "signatureAfterChange": "     public boolean supportsLanguage()", "diff": ["-    public void addBeans(Map dictionary) {", "-        for (Iterator i = dictionary.keySet().iterator(); i.hasNext();) {", "-            String key = (String) i.next();", "-            try {", "-                Object val = dictionary.get(key);", "-                addBean(key, val);", "-            } catch (BuildException ex) {", "-                // The key is in the dictionary but cannot be retrieved", "-                // This is usually due references that refer to tasks", "-                // that have not been taskdefed in the current run.", "-                // Ignore", "-            }", "+    public boolean supportsLanguage() {", "+        if (manager != null) {", "+            return true;", "-    }", "+        checkLanguage();", "+        ClassLoader origLoader = replaceContextLoader();", "+        try {", "+            BSFManager m = createManager();", "+            BSFEngine e =", "+                engine != null", "+                ? engine", "+                : m.loadScriptingEngine(getLanguage());", "+            return e != null;", "+        } catch (Exception ex) {", "+            return false;", "+        } finally {", "+            restoreContextLoader(origLoader);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abed1b6edf0ebf11a740a30dd7c156e7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Manifest.java", "commitBeforeChange": "299ea801bc1031e308bfe07a22e51edd1b972872", "commitAfterChange": "eca5133693881d72fbd157619b03647e7e255789", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 19, "signatureBeforeChange": "         public void merge(Section section) throws ManifestException", "signatureAfterChange": "         public void merge(Section section) throws ManifestException", "diff": ["-            if (name == null && section.getName() != null ||", "-                    name != null && !(name.equalsIgnoreCase(section.getName()))) {", "-                throw new ManifestException(\"Unable to merge sections with different names\");", "+            if (name == null && section.getName() != null ", "+                || name != null ", "+                && !(name.equalsIgnoreCase(section.getName()))) {", "+                throw new ManifestException(\"Unable to merge sections \" ", "+                    + \"with different names\");", "-            for (Enumeration e = section.attributes.keys(); e.hasMoreElements();) {", "+            Enumeration e = section.getAttributeKeys();", "+            while (e.hasMoreElements()) {", "+                Attribute attribute = section.getAttribute(attributeName);", "-                    // classpath entries are vetors which are merged", "-                    Vector classpathAttrs = (Vector)section.attributes.get(attributeName);", "-                    Vector ourClasspathAttrs = (Vector)attributes.get(attributeName);", "-                    for (Enumeration e2 = classpathAttrs.elements(); e2.hasMoreElements();) {", "-                        ourClasspathAttrs.addElement(e2.nextElement());", "+                    Attribute ourClassPath = getAttribute(attributeName);", "+                    Enumeration cpe = attribute.getValues();", "+                    while (cpe.hasMoreElements()) {", "+                        String value = (String)cpe.nextElement();", "+                        ourClassPath.addValue(value);", "-                }", "-                else {", "+                } else {", "-                    attributes.put(attributeName, section.attributes.get(attributeName));", "+                    storeAttribute(attribute);", "-            for (Enumeration e = section.warnings.elements(); e.hasMoreElements();) {", "-                warnings.addElement(e.nextElement());", "+            Enumeration warnEnum = section.warnings.elements();", "+            while (warnEnum.hasMoreElements()) {", "+                warnings.addElement(warnEnum.nextElement());"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ff06b528922dc7b42d3849c987f978fd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4dbf8dfa949cf5a314db630f1bff24fa", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/Recorder.java", "commitBeforeChange": "c4385b7b1baf768791391474a0f58441bbcd6261", "commitAfterChange": "07382b400af7ecebc64eff5c55b4f562efd156d5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     protected RecorderEntry getRecorder( String name, Project proj )         throws TaskException", "signatureAfterChange": "     protected RecorderEntry getRecorder( final String name )         throws TaskException", "diff": ["-    protected RecorderEntry getRecorder( String name, Project proj )", "+    protected RecorderEntry getRecorder( final String name )", "-        Object o = recorderEntries.get( name );", "-        RecorderEntry entry;", "-        if( o == null )", "+        final Object o = c_recorderEntries.get( name );", "+        if( null == o )", "-            // create a recorder entry", "-            try", "-            {", "-                entry = new RecorderEntry( name );", "-                PrintStream out = null;", "-                if( append == null )", "-                {", "-                    out = new PrintStream(", "-                        new FileOutputStream( name ) );", "-                }", "-                else", "-                {", "-                    out = new PrintStream(", "-                        new FileOutputStream( name, append.booleanValue() ) );", "-                }", "-                entry.setErrorPrintStream( out );", "-                entry.setOutputPrintStream( out );", "-            }", "-            catch( IOException ioe )", "-            {", "-                throw new TaskException( \"Problems creating a recorder entry\",", "-                                         ioe );", "-            }", "-            proj.addBuildListener( entry );", "-            recorderEntries.put( name, entry );", "+            return (RecorderEntry)o;", "+        }", "+", "+        // create a recorder entry", "+        try", "+        {", "+            final PrintStream output = createOutput( name );", "+            final RecorderEntry entry = new RecorderEntry( output );", "+            c_recorderEntries.put( name, entry );", "+            return entry;", "+        }", "+        catch( final IOException ioe )", "+        {", "+            throw new TaskException( \"Problems creating a recorder entry\",", "+                                     ioe );", "+        }", "+    }", "-            entry = (RecorderEntry)o;", "-        return entry;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5dadb011d6cfa35c4ad39c250ee92edf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Input.java", "commitBeforeChange": "6de0aa04319c4fb4fd6947f033da16f8efbe95e6", "commitAfterChange": "550607147fe6a0c89a1b6e6c85f5e69b334d31d7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void execute () throws BuildException", "signatureAfterChange": "     public void execute () throws BuildException", "diff": ["-        Vector accept = null;", "+        InputRequest request = null;", "-            accept = new Vector();", "-            StringTokenizer stok = new StringTokenizer(validargs, \",\", false);", "-            while (stok.hasMoreTokens()) {", "-                accept.addElement(stok.nextToken());", "-            }", "-        }", "-        log(message, Project.MSG_WARN);", "-        if (input == null) {", "-            try {", "-                BufferedReader in = new BufferedReader(new InputStreamReader(System.in));", "-                input = in.readLine();", "-                if (accept != null) {", "-                    while (!accept.contains(input)) {", "-                        log(message, Project.MSG_WARN);", "-                        input = in.readLine();", "-                    }", "-                }", "-            } catch (IOException e) {", "-                throw  new BuildException(\"Failed to read input from Console.\", e);", "-            }", "+            Vector accept = StringUtils.split(validargs, ',');", "+            request = new MultipleChoiceInputRequest(message, accept);", "-            // not quite the original intention of this task but for the sake", "-            // of testing ;-)", "-            if (accept != null && (!accept.contains(input))) {", "-                throw  new BuildException(\"Invalid input please reenter.\");", "-            }", "+            request = new InputRequest(message);", "-        // adopted from org.apache.tools.ant.taskdefs.Property", "+", "+        getProject().getInputHandler().handleInput(request);", "+", "-            if (project.getProperty(addproperty) == null) {", "-                project.setProperty(addproperty, input);", "-            } else {", "-                log(\"Override ignored for \" + addproperty, Project.MSG_VERBOSE);", "-            }", "+            project.setNewProperty(addproperty, request.getInput());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c47b7073a9c43ef7ee4d895725e934db", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/Recorder.java", "commitBeforeChange": "c4385b7b1baf768791391474a0f58441bbcd6261", "commitAfterChange": "07382b400af7ecebc64eff5c55b4f562efd156d5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     protected RecorderEntry getRecorder( String name, Project proj )         throws TaskException", "signatureAfterChange": "     protected RecorderEntry getRecorder( final String name )         throws TaskException", "diff": ["-    protected RecorderEntry getRecorder( String name, Project proj )", "+    protected RecorderEntry getRecorder( final String name )", "-        Object o = recorderEntries.get( name );", "-        RecorderEntry entry;", "-        if( o == null )", "+        final Object o = c_recorderEntries.get( name );", "+        if( null == o )", "-            // create a recorder entry", "-            try", "-            {", "-                entry = new RecorderEntry( name );", "-                PrintStream out = null;", "-                if( append == null )", "-                {", "-                    out = new PrintStream(", "-                        new FileOutputStream( name ) );", "-                }", "-                else", "-                {", "-                    out = new PrintStream(", "-                        new FileOutputStream( name, append.booleanValue() ) );", "-                }", "-                entry.setErrorPrintStream( out );", "-                entry.setOutputPrintStream( out );", "-            }", "-            catch( IOException ioe )", "-            {", "-                throw new TaskException( \"Problems creating a recorder entry\",", "-                                         ioe );", "-            }", "-            proj.addBuildListener( entry );", "-            recorderEntries.put( name, entry );", "+            return (RecorderEntry)o;", "+        }", "+", "+        // create a recorder entry", "+        try", "+        {", "+            final PrintStream output = createOutput( name );", "+            final RecorderEntry entry = new RecorderEntry( output );", "+            c_recorderEntries.put( name, entry );", "+            return entry;", "+        }", "+        catch( final IOException ioe )", "+        {", "+            throw new TaskException( \"Problems creating a recorder entry\",", "+                                     ioe );", "+        }", "+    }", "-            entry = (RecorderEntry)o;", "-        return entry;"]}]}
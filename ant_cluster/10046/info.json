{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "173421cea4581b948b52de3f36ad96ef", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a03259f4b56bab392a24c7f9b9f68d9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Target.java", "commitBeforeChange": "1885612e5d6666e09a655fbe4f1ee888e2e26f69", "commitAfterChange": "9585ec663a4244b8b75bdfe173c115189cbd08c4", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        if (!testIfAllows()) {", "-            project.log(this, \"Skipped because property '\" + project.replaceProperties(ifCondition)", "+        if (ifCondition != null && !ifCondition.eval()) {", "+            project.log(this, \"Skipped because property '\" + project.replaceProperties(ifString)", "-        if (!testUnlessAllows()) {", "+        if (unlessCondition != null && unlessCondition.eval()) {", "-                    + project.replaceProperties(unlessCondition) + \"' set.\", Project.MSG_VERBOSE);", "+                    + project.replaceProperties(unlessString) + \"' set.\", Project.MSG_VERBOSE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88250c268467988a667b810fc207f927", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "1764b5fda8fe5b4166269d73a00f975b4c7fb75d", "commitAfterChange": "1e599c6651b3baafbf807462fe32a975b416f1d1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void setAttribute(Project p, Object element, String attributeName,                              String value) throws BuildException", "signatureAfterChange": "     public void setAttribute(Project p, Object element, String attributeName,             Object value) throws BuildException", "diff": ["+     */", "+    public void setAttribute(Project p, Object element, String attributeName,", "+            Object value) throws BuildException {", "+        AttributeSetter as = (AttributeSetter) attributeSetters.get(", "+                attributeName.toLowerCase(Locale.US));", "+        if (as == null && value != null) {", "+            if (element instanceof DynamicAttributeNS) {", "+                DynamicAttributeNS dc = (DynamicAttributeNS) element;", "+                String uriPlusPrefix = ProjectHelper.extractUriFromComponentName(attributeName);", "+                String uri = ProjectHelper.extractUriFromComponentName(uriPlusPrefix);", "+                String localName = ProjectHelper.extractNameFromComponentName(attributeName);", "+                String qName = \"\".equals(uri) ? localName : uri + \":\" + localName;", "+                dc.setDynamicAttribute(uri, localName, qName, value.toString());", "+                return;", "+            }", "+            if (element instanceof DynamicAttribute) {", "+                DynamicAttribute dc = (DynamicAttribute) element;", "+                dc.setDynamicAttribute(attributeName.toLowerCase(Locale.US), value.toString());", "+                return;", "+            }", "+            if (attributeName.indexOf(':') >= 0) {", "+                return; // Ignore attribute from unknown uri's", "+            }", "+            String msg = getElementName(p, element)", "+                    + \" doesn't support the \\\"\" + attributeName + \"\\\" attribute.\";", "+            throw new UnsupportedAttributeException(msg, attributeName);", "+        }", "+        try {", "+            as.setObject(p, element, value);", "+        } catch (IllegalAccessException ie) {", "+            // impossible as getMethods should only return public methods", "+            throw new BuildException(ie);", "+        } catch (InvocationTargetException ite) {", "+            throw extractBuildException(ite);", "+        }", "+    }", "-        AttributeSetter as = (AttributeSetter) attributeSetters.get(", "-                attributeName.toLowerCase(Locale.US));", "-        if (as == null) {", "-            if (element instanceof DynamicAttributeNS) {", "-                DynamicAttributeNS dc = (DynamicAttributeNS) element;", "-                String uriPlusPrefix = ProjectHelper.extractUriFromComponentName(attributeName);", "-                String uri = ProjectHelper.extractUriFromComponentName(uriPlusPrefix);", "-                String localName = ProjectHelper.extractNameFromComponentName(attributeName);", "-                String qName = \"\".equals(uri) ? localName : uri + \":\" + localName;", "-                dc.setDynamicAttribute(uri, localName, qName, value);", "-                return;", "-            }", "-            if (element instanceof DynamicAttribute) {", "-                DynamicAttribute dc = (DynamicAttribute) element;", "-                dc.setDynamicAttribute(attributeName.toLowerCase(Locale.US), value);", "-                return;", "-            }", "-            if (attributeName.indexOf(':') != -1) {", "-                return; // Ignore attribute from unknown uri's", "-            }", "-            String msg = getElementName(p, element)", "-                    + \" doesn't support the \\\"\" + attributeName + \"\\\" attribute.\";", "-            throw new UnsupportedAttributeException(msg, attributeName);", "-        }", "-        try {", "-            as.set(p, element, value);", "-        } catch (IllegalAccessException ie) {", "-            // impossible as getMethods should only return public methods", "-            throw new BuildException(ie);", "-        } catch (InvocationTargetException ite) {", "-            throw extractBuildException(ite);", "-        }"]}]}
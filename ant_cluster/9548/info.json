{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cfac6d2e06e47d6030b42bfe986f192c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02fd6897b4076f73b953842d34e0191a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public boolean doGet(URL source, File dest, int logLevel,                          DownloadProgress progress)         throws IOException", "signatureAfterChange": "     public boolean doGet(final URL source, final File dest, final int logLevel,                          DownloadProgress progress)         throws IOException", "diff": ["-    public boolean doGet(URL source, File dest, int logLevel,", "+    public boolean doGet(final URL source, final File dest, final int logLevel,", "-                Date t = new Date(timestamp);", "+                final Date t = new Date(timestamp);", "-        GetThread getThread = new GetThread(source, dest,", "+        final GetThread getThread = new GetThread(source, dest,", "-        } catch (InterruptedException ie) {", "+        } catch (final InterruptedException ie) {", "-            String msg = \"The GET operation took longer than \" + maxTime", "+            final String msg = \"The GET operation took longer than \" + maxTime"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0788c9a010414c16b107dae4935dfd7d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Project.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": "     public void executeSortedTargets(Vector<Target> sortedTargets)         throws BuildException", "signatureAfterChange": "     public void executeSortedTargets(final Vector<Target> sortedTargets)         throws BuildException", "diff": ["-    public void executeSortedTargets(Vector<Target> sortedTargets)", "+    public void executeSortedTargets(final Vector<Target> sortedTargets)", "-        Set<String> succeededTargets = new HashSet<String>();", "+        final Set<String> succeededTargets = new HashSet<String>();", "-        for (Target curtarget : sortedTargets) {", "+        for (final Target curtarget : sortedTargets) {", "-            for (Enumeration<String> depIter = curtarget.getDependencies();", "+            for (final Enumeration<String> depIter = curtarget.getDependencies();", "-                String dependencyName = depIter.nextElement();", "+                final String dependencyName = depIter.nextElement();", "-                } catch (RuntimeException ex) {", "+                } catch (final RuntimeException ex) {", "-                } catch (Throwable ex) {", "+                } catch (final Throwable ex) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10abb68b92a5bf54f6beb1a722d14038", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/SSHSession.java", "commitBeforeChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "commitAfterChange": "789422e131b6c2c003d94f394169a64297e986c6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void setLocaltunnels(String tunnels)", "signatureAfterChange": "     public void setLocaltunnels(final String tunnels)", "diff": ["-    public void setLocaltunnels(String tunnels) {", "-        String[] specs = tunnels.split(\", \");", "+    public void setLocaltunnels(final String tunnels) {", "+        final String[] specs = tunnels.split(\", \");", "-                String[] spec = specs[i].split(\":\", 3);", "-                int lport = Integer.parseInt(spec[0]);", "-                String rhost = spec[1];", "-                int rport = Integer.parseInt(spec[2]);", "-                LocalTunnel tunnel = createLocalTunnel();", "+                final String[] spec = specs[i].split(\":\", 3);", "+                final int lport = Integer.parseInt(spec[0]);", "+                final String rhost = spec[1];", "+                final int rport = Integer.parseInt(spec[2]);", "+                final LocalTunnel tunnel = createLocalTunnel();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "133abf127630452ab54b46b6a416c059", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ResourceUtils.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public static int compareContent(Resource r1, Resource r2, boolean text) throws IOException", "signatureAfterChange": "     public static int compareContent(final Resource r1, final Resource r2, final boolean text) throws IOException", "diff": ["-    public static int compareContent(Resource r1, Resource r2, boolean text) throws IOException {", "+    public static int compareContent(final Resource r1, final Resource r2, final boolean text) throws IOException {", "-        boolean e1 = r1.isExists();", "-        boolean e2 = r2.isExists();", "+        final boolean e1 = r1.isExists();", "+        final boolean e2 = r2.isExists();", "-        boolean d1 = r1.isDirectory();", "-        boolean d2 = r2.isDirectory();", "+        final boolean d1 = r1.isDirectory();", "+        final boolean d2 = r2.isDirectory();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16eb2611aeef97dc55184b0f00a56e5e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XSLTProcess.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "     private void process(File baseDir, String xmlFile, File destDir, Resource stylesheet)             throws BuildException", "signatureAfterChange": "     private void process(final File baseDir, final String xmlFile, final File destDir, final Resource stylesheet)             throws BuildException", "diff": ["-    private void process(File baseDir, String xmlFile, File destDir, Resource stylesheet)", "+    private void process(final File baseDir, final String xmlFile, final File destDir, final Resource stylesheet)", "-            long styleSheetLastModified = stylesheet.getLastModified();", "+            final long styleSheetLastModified = stylesheet.getLastModified();", "-            String[] outFileName = mapper.mapFileName(xmlFile);", "+            final String[] outFileName = mapper.mapFileName(xmlFile);", "-        } catch (Exception ex) {", "+        } catch (final Exception ex) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d90331b28d27a63388a2968a97a4f5c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "      private void setProperties(final Project project)", "signatureAfterChange": "      private void setProperties(final Project project)", "diff": ["-        PropertyHelper propertyHelper = PropertyHelper.getPropertyHelper(project);", "+        final PropertyHelper propertyHelper = PropertyHelper.getPropertyHelper(project);", "+\t\tfinal", "+\t\tfinal", "-        ResolvePropertyMap resolver = new ResolvePropertyMap(project,", "+        final ResolvePropertyMap resolver = new ResolvePropertyMap(project,", "-        for (Entry<String, Object> ent : props.entrySet()) {", "-            String arg = ent.getKey();", "-            Object value = ent.getValue();", "+        for (final Entry<String, Object> ent : props.entrySet()) {", "+            final String arg = ent.getKey();", "+            final Object value = ent.getValue();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f3869b989b2cb7b005cd41a8360c5a6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 155, "methodNumberAfterChange": 155, "signatureBeforeChange": "      private int postProcess(File file, String fixData) throws IOException", "signatureAfterChange": "      private int postProcess(final File file, final String fixData) throws IOException", "diff": ["-    private int postProcess(File file, String fixData) throws IOException {", "-        String enc = docEncoding != null ? docEncoding", "+    private int postProcess(final File file, final String fixData) throws IOException {", "+        final String enc = docEncoding != null ? docEncoding", "-        InputStream fin = new FileInputStream(file);", "+        final InputStream fin = new FileInputStream(file);", "-            String patchedFileContents = patchContent(fileContents, fixData);", "+            final String patchedFileContents = patchContent(fileContents, fixData);", "-                FileOutputStream fos = new FileOutputStream(file);", "+                final FileOutputStream fos = new FileOutputStream(file);", "-                    OutputStreamWriter w = new OutputStreamWriter(fos, enc);", "+                    final OutputStreamWriter w = new OutputStreamWriter(fos, enc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "206db15a2f991fd737f48745442bd405", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      private static boolean containsTests(Class<?> testClass, boolean isJUnit4)", "signatureAfterChange": "      private static boolean containsTests(final Class<?> testClass, final boolean isJUnit4)", "diff": ["-    private static boolean containsTests(Class<?> testClass, boolean isJUnit4) {", "+    private static boolean containsTests(final Class<?> testClass, final boolean isJUnit4) {", "-        } catch (ClassNotFoundException e) {", "+        } catch (final ClassNotFoundException e) {", "-        } catch(ClassNotFoundException ex) {", "+        } catch(final ClassNotFoundException ex) {", "-        } catch(ClassNotFoundException ex) {", "+        } catch(final ClassNotFoundException ex) {", "-        for (Class<?> innerClass : testClass.getDeclaredClasses()) {", "+        for (final Class<?> innerClass : testClass.getDeclaredClasses()) {", "-        for (Method m : testClass.getMethods()) {", "+        for (final Method m : testClass.getMethods()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c2e3df1a86a40908c797678777860c8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public JUnitTestRunner(JUnitTest test, String[] methods, boolean haltOnError,                            boolean filtertrace, boolean haltOnFailure,                            boolean showOutput, boolean logTestListenerEvents)", "signatureAfterChange": "     public JUnitTestRunner(final JUnitTest test, final String[] methods, final boolean haltOnError,                            final boolean filtertrace, final boolean haltOnFailure,                            final boolean showOutput, final boolean logTestListenerEvents)", "diff": ["-    public JUnitTestRunner(JUnitTest test, String[] methods, boolean haltOnError,", "-                           boolean filtertrace, boolean haltOnFailure,", "-                           boolean showOutput, boolean logTestListenerEvents) {", "+    public JUnitTestRunner(final JUnitTest test, final String[] methods, final boolean haltOnError,", "+                           final boolean filtertrace, final boolean haltOnFailure,", "+                           final boolean showOutput, final boolean logTestListenerEvents) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2db5a3b61946d0b9490a36827dece386", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/Scp.java", "commitBeforeChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "commitAfterChange": "789422e131b6c2c003d94f394169a64297e986c6", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "      private void upload(List fileSet, String toSshUri)         throws IOException, JSchException", "signatureAfterChange": "      private void upload(final List fileSet, final String toSshUri)         throws IOException, JSchException", "diff": ["-    private void upload(List fileSet, String toSshUri)", "+    private void upload(final List fileSet, final String toSshUri)", "-        String file = parseUri(toSshUri);", "+        final String file = parseUri(toSshUri);", "-            List list = new ArrayList(fileSet.size());", "-            for (Iterator i = fileSet.iterator(); i.hasNext();) {", "-                FileSet set = (FileSet) i.next();", "-                Directory d = createDirectory(set);", "+            final List list = new ArrayList(fileSet.size());", "+            for (final Iterator i = fileSet.iterator(); i.hasNext();) {", "+                final FileSet set = (FileSet) i.next();", "+                final Directory d = createDirectory(set);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fa431ece38af9f8a1b8319512e1dc75", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": "     protected void zipDir(Resource dir, ZipOutputStream zOut, String vPath,                           int mode, ZipExtraField[] extra)         throws IOException", "signatureAfterChange": "     protected void zipDir(final Resource dir, final ZipOutputStream zOut, final String vPath,                           final int mode, final ZipExtraField[] extra)         throws IOException", "diff": ["-    protected void zipDir(Resource dir, ZipOutputStream zOut, String vPath,", "-                          int mode, ZipExtraField[] extra)", "+    protected void zipDir(final Resource dir, final ZipOutputStream zOut, final String vPath,", "+                          final int mode, final ZipExtraField[] extra)", "-            ZipEntry ze = new ZipEntry (vPath);", "+            final ZipEntry ze = new ZipEntry (vPath);", "-            int millisToAdd = roundUp ? ROUNDUP_MILLIS : 0;", "+            final int millisToAdd = roundUp ? ROUNDUP_MILLIS : 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "436dd652275749a673c47f99fd17cf48", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/XMLJUnitResultFormatter.java", "commitBeforeChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "commitAfterChange": "789422e131b6c2c003d94f394169a64297e986c6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void startTestSuite(JUnitTest suite)", "signatureAfterChange": " \tpublic void startTestSuite(final JUnitTest suite)", "diff": ["-\tpublic void startTestSuite(JUnitTest suite) {", "+\tpublic void startTestSuite(final JUnitTest suite) {", "-        String n = suite.getName();", "+        final String n = suite.getName();", "-        Element propsElement = doc.createElement(PROPERTIES);", "+        final Element propsElement = doc.createElement(PROPERTIES);", "-        Properties props = suite.getProperties();", "+        final Properties props = suite.getProperties();", "-            Enumeration e = props.propertyNames();", "+            final Enumeration e = props.propertyNames();", "-                String name = (String) e.nextElement();", "-                Element propElement = doc.createElement(PROPERTY);", "+                final String name = (String) e.nextElement();", "+                final Element propElement = doc.createElement(PROPERTY);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ad1c071bb747fb2a23c968ecfe0475e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "     protected void definePackage(File container, String packageName, Manifest manifest)", "signatureAfterChange": "     protected void definePackage(final File container, final String packageName, final Manifest manifest)", "diff": ["-    protected void definePackage(File container, String packageName, Manifest manifest) {", "-        String sectionName = packageName.replace('.', '/') + \"/\";", "+    protected void definePackage(final File container, final String packageName, final Manifest manifest) {", "+        final String sectionName = packageName.replace('.', '/') + \"/\";", "-        Attributes sectionAttributes = manifest.getAttributes(sectionName);", "+        final Attributes sectionAttributes = manifest.getAttributes(sectionName);", "-        Attributes mainAttributes = manifest.getMainAttributes();", "+        final Attributes mainAttributes = manifest.getMainAttributes();", "-            } catch (MalformedURLException e) {", "+            } catch (final MalformedURLException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "672bf02b8f5be58246fa5f86a31db1fd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/compilers/AptCompilerAdapter.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     static void setAptCommandlineSwitches(Apt apt, Commandline cmd)", "signatureAfterChange": "     static void setAptCommandlineSwitches(final Apt apt, final Commandline cmd)", "diff": ["-    static void setAptCommandlineSwitches(Apt apt, Commandline cmd) {", "+    static void setAptCommandlineSwitches(final Apt apt, final Commandline cmd) {", "-        String factory = apt.getFactory();", "+        final String factory = apt.getFactory();", "-        Path factoryPath = apt.getFactoryPath();", "+        final Path factoryPath = apt.getFactoryPath();", "-        File preprocessDir = apt.getPreprocessDir();", "+        final File preprocessDir = apt.getPreprocessDir();", "-        Vector options = apt.getOptions();", "-        Enumeration elements = options.elements();", "+        final Vector options = apt.getOptions();", "+        final Enumeration elements = options.elements();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68ca595336d5bf3c4ace06a7b034651b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/SSHSession.java", "commitBeforeChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "commitAfterChange": "789422e131b6c2c003d94f394169a64297e986c6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void setRemotetunnels(String tunnels)", "signatureAfterChange": "     public void setRemotetunnels(final String tunnels)", "diff": ["-    public void setRemotetunnels(String tunnels) {", "-        String[] specs = tunnels.split(\", \");", "+    public void setRemotetunnels(final String tunnels) {", "+        final String[] specs = tunnels.split(\", \");", "-                String[] spec = specs[i].split(\":\", 3);", "-                int rport = Integer.parseInt(spec[0]);", "-                String lhost = spec[1];", "-                int lport = Integer.parseInt(spec[2]);", "-                RemoteTunnel tunnel = createRemoteTunnel();", "+                final String[] spec = specs[i].split(\":\", 3);", "+                final int rport = Integer.parseInt(spec[0]);", "+                final String lhost = spec[1];", "+                final int lport = Integer.parseInt(spec[2]);", "+                final RemoteTunnel tunnel = createRemoteTunnel();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71e1a14dec07c3fdd188ba9860f238cb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "          GetThread(URL source, File dest,                   boolean h, long t, DownloadProgress p, int l, String userAgent)", "signatureAfterChange": "          GetThread(final URL source, final File dest,                   final boolean h, final long t, final DownloadProgress p, final int l, final String userAgent)", "diff": ["-        GetThread(URL source, File dest,", "-                  boolean h, long t, DownloadProgress p, int l, String userAgent) {", "+        GetThread(final URL source, final File dest,", "+                  final boolean h, final long t, final DownloadProgress p, final int l, final String userAgent) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7aff6537b65249aa456fc4c338afc980", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/LayoutPreservingProperties.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private String readLines(InputStream is) throws IOException", "signatureAfterChange": "     private String readLines(final InputStream is) throws IOException", "diff": ["-    private String readLines(InputStream is) throws IOException {", "-        InputStreamReader isr = new InputStreamReader(is, ResourceUtils.ISO_8859_1);", "-        PushbackReader pbr = new PushbackReader(isr, 1);", "+    private String readLines(final InputStream is) throws IOException {", "+        final InputStreamReader isr = new InputStreamReader(is, ResourceUtils.ISO_8859_1);", "+        final PushbackReader pbr = new PushbackReader(isr, 1);", "-        BufferedReader br = new BufferedReader(pbr);", "+        final BufferedReader br = new BufferedReader(pbr);", "-        StringBuffer fileBuffer = new StringBuffer();", "-        StringBuffer logicalLineBuffer = new StringBuffer();", "+        final StringBuffer fileBuffer = new StringBuffer();", "+        final StringBuffer logicalLineBuffer = new StringBuffer();", "-                    String key = unescape(((Pair)line).getName());", "+                    final String key = unescape(((Pair)line).getName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84d84a40a7bf38eddf3f92a65d45140e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "     protected Class<?> defineClassFromData(File container, byte[] classData, String classname)             throws IOException", "signatureAfterChange": "     protected Class<?> defineClassFromData(final File container, final byte[] classData, final String classname)             throws IOException", "diff": ["-    protected Class<?> defineClassFromData(File container, byte[] classData, String classname)", "+    protected Class<?> defineClassFromData(final File container, final byte[] classData, final String classname)", "-        ProtectionDomain currentPd = Project.class.getProtectionDomain();", "-        String classResource = getClassFilename(classname);", "-        CodeSource src = new CodeSource(FILE_UTILS.getFileURL(container),", "+        final ProtectionDomain currentPd = Project.class.getProtectionDomain();", "+        final String classResource = getClassFilename(classname);", "+        final CodeSource src = new CodeSource(FILE_UTILS.getFileURL(container),", "-        ProtectionDomain classesPd =", "+        final ProtectionDomain classesPd ="]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95384d816d747849f282cc47d05dbf80", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/TraXLiaison.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "      private void logError(TransformerException e, String type)", "signatureAfterChange": "      private void logError(final TransformerException e, final String type)", "diff": ["-    private void logError(TransformerException e, String type) {", "+    private void logError(final TransformerException e, final String type) {", "-        StringBuffer msg = new StringBuffer();", "-        SourceLocator locator = e.getLocator();", "+        final StringBuffer msg = new StringBuffer();", "+        final SourceLocator locator = e.getLocator();", "-            String systemid = locator.getSystemId();", "+            final String systemid = locator.getSystemId();", "-            int line = locator.getLineNumber();", "+            final int line = locator.getLineNumber();", "-                int column = locator.getColumnNumber();", "+                final int column = locator.getColumnNumber();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4ae2821759c80a3215407ed1b2c94f9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "     private void addDirectoryResource(Resource r, String name, String prefix,                                       File base, ZipOutputStream zOut,                                       int defaultDirMode, int thisDirMode)         throws IOException", "signatureAfterChange": "     private void addDirectoryResource(final Resource r, String name, final String prefix,                                       final File base, final ZipOutputStream zOut,                                       final int defaultDirMode, final int thisDirMode)         throws IOException", "diff": ["-    private void addDirectoryResource(Resource r, String name, String prefix,", "-                                      File base, ZipOutputStream zOut,", "-                                      int defaultDirMode, int thisDirMode)", "+    private void addDirectoryResource(final Resource r, String name, final String prefix,", "+                                      final File base, final ZipOutputStream zOut,", "+                                      final int defaultDirMode, final int thisDirMode)", "-        int nextToLastSlash = name.lastIndexOf(\"/\", name.length() - 2);", "+        final int nextToLastSlash = name.lastIndexOf(\"/\", name.length() - 2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2558554a2f92974ad0f296318bdfaa6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public JUnitTestRunner(JUnitTest test, boolean haltOnError,                            boolean filtertrace, boolean haltOnFailure,                            boolean showOutput, boolean logTestListenerEvents,                            ClassLoader loader)", "signatureAfterChange": "     public JUnitTestRunner(final JUnitTest test, final boolean haltOnError,                            final boolean filtertrace, final boolean haltOnFailure,                            final boolean showOutput, final boolean logTestListenerEvents,                            final ClassLoader loader)", "diff": ["-    public JUnitTestRunner(JUnitTest test, boolean haltOnError,", "-                           boolean filtertrace, boolean haltOnFailure,", "-                           boolean showOutput, boolean logTestListenerEvents,", "-                           ClassLoader loader) {", "-        this(test, null, haltOnError, filtertrace, haltOnFailure, showOutput, ", "+    public JUnitTestRunner(final JUnitTest test, final boolean haltOnError,", "+                           final boolean filtertrace, final boolean haltOnFailure,", "+                           final boolean showOutput, final boolean logTestListenerEvents,", "+                           final ClassLoader loader) {", "+        this(test, null, haltOnError, filtertrace, haltOnFailure, showOutput,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba29df13c73ae136c342959951943f5f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "     private TestResultHolder executeInVM(JUnitTest arg) throws BuildException", "signatureAfterChange": "     private TestResultHolder executeInVM(final JUnitTest arg) throws BuildException", "diff": ["-    private TestResultHolder executeInVM(JUnitTest arg) throws BuildException {", "+    private TestResultHolder executeInVM(final JUnitTest arg) throws BuildException {", "-        JUnitTest test = (JUnitTest) arg.clone();", "+        final JUnitTest test = (JUnitTest) arg.clone();", "-        CommandlineJava.SysProperties sysProperties =", "+        final CommandlineJava.SysProperties sysProperties =", "-                JUnitTaskMirror.SummaryJUnitResultFormatterMirror f =", "+                final JUnitTaskMirror.SummaryJUnitResultFormatterMirror f =", "-                FormatterElement fe = feArray[i];", "+                final FormatterElement fe = feArray[i];", "-                    File outFile = getOutput(fe, test);", "+                    final File outFile = getOutput(fe, test);", "-            TestResultHolder result = new TestResultHolder();", "+            final TestResultHolder result = new TestResultHolder();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb6c0c8a1ef93cf3af5e3ebe6da8af49", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": "     protected final void zipFile(InputStream in, ZipOutputStream zOut,                                  String vPath, long lastModified,                                  File fromArchive, int mode,                                  ZipExtraField[] extra)         throws IOException", "signatureAfterChange": "     protected final void zipFile(final InputStream in, final ZipOutputStream zOut,                                  final String vPath, final long lastModified,                                  final File fromArchive, final int mode,                                  final ZipExtraField[] extra)         throws IOException", "diff": ["-    protected final void zipFile(InputStream in, ZipOutputStream zOut,", "-                                 String vPath, long lastModified,", "-                                 File fromArchive, int mode,", "-                                 ZipExtraField[] extra)", "+    protected final void zipFile(final InputStream in, final ZipOutputStream zOut,", "+                                 final String vPath, final long lastModified,", "+                                 final File fromArchive, final int mode,", "+                                 final ZipExtraField[] extra)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bebd4a5186f7c757f99e58eaff1b33d0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "     protected Resource[][] grabResources(FileSet[] filesets)", "signatureAfterChange": "     protected Resource[][] grabResources(final FileSet[] filesets)", "diff": ["-    protected Resource[][] grabResources(FileSet[] filesets) {", "-        Resource[][] result = new Resource[filesets.length][];", "+    protected Resource[][] grabResources(final FileSet[] filesets) {", "+        final Resource[][] result = new Resource[filesets.length][];", "-                ZipFileSet zfs = (ZipFileSet) filesets[i];", "+                final ZipFileSet zfs = (ZipFileSet) filesets[i];", "-            DirectoryScanner rs =", "+            final DirectoryScanner rs =", "-            Vector<Resource> resources = new Vector<Resource>();", "+            final Vector<Resource> resources = new Vector<Resource>();", "-                String[] directories = rs.getIncludedDirectories();", "+                final String[] directories = rs.getIncludedDirectories();", "-            String[] files = rs.getIncludedFiles();", "+            final String[] files = rs.getIncludedFiles();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8caf88a5d14447fa2a26614fb97e553", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipFile.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private void setSizesAndOffsetFromZip64Extra(ZipEntry ze,                                                  OffsetEntry offset,                                                  int diskStart)         throws IOException", "signatureAfterChange": "     private void setSizesAndOffsetFromZip64Extra(final ZipEntry ze,                                                  final OffsetEntry offset,                                                  final int diskStart)         throws IOException", "diff": ["-    private void setSizesAndOffsetFromZip64Extra(ZipEntry ze,", "-                                                 OffsetEntry offset,", "-                                                 int diskStart)", "+    private void setSizesAndOffsetFromZip64Extra(final ZipEntry ze,", "+                                                 final OffsetEntry offset,", "+                                                 final int diskStart)", "-        Zip64ExtendedInformationExtraField z64 =", "+        final Zip64ExtendedInformationExtraField z64 =", "-            boolean hasUncompressedSize = ze.getSize() == ZIP64_MAGIC;", "-            boolean hasCompressedSize = ze.getCompressedSize() == ZIP64_MAGIC;", "-            boolean hasRelativeHeaderOffset =", "+            final boolean hasUncompressedSize = ze.getSize() == ZIP64_MAGIC;", "+            final boolean hasCompressedSize = ze.getCompressedSize() == ZIP64_MAGIC;", "+            final boolean hasRelativeHeaderOffset ="]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca280e2cecdd25eeed013b9d43ad91b9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": "     private boolean causesIllegalSymlinkLoop(String dirName, File parent,                                              LinkedList<String> directoryNamesFollowed)", "signatureAfterChange": "     private boolean causesIllegalSymlinkLoop(final String dirName, final File parent,                                              final LinkedList<String> directoryNamesFollowed)", "diff": ["-    private boolean causesIllegalSymlinkLoop(String dirName, File parent,", "-                                             LinkedList<String> directoryNamesFollowed) {", "+    private boolean causesIllegalSymlinkLoop(final String dirName, final File parent,", "+                                             final LinkedList<String> directoryNamesFollowed) {", "-                ArrayList<String> files = new ArrayList<String>();", "+                final ArrayList<String> files = new ArrayList<String>();", "-                String target = f.getCanonicalPath();", "+                final String target = f.getCanonicalPath();", "-                for (String dir : directoryNamesFollowed) {", "+                for (final String dir : directoryNamesFollowed) {", "-        } catch (IOException ex) {", "+        } catch (final IOException ex) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d114a88caa81edb142d07f5810b7b5bb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ResourceUtils.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private static void logFuture(ProjectComponent logTo,                                   ResourceCollection rc, long granularity)", "signatureAfterChange": "     private static void logFuture(final ProjectComponent logTo,                                   final ResourceCollection rc, final long granularity)", "diff": ["-    private static void logFuture(ProjectComponent logTo,", "-                                  ResourceCollection rc, long granularity) {", "-        long now = System.currentTimeMillis() + granularity;", "-        Date sel = new Date();", "+    private static void logFuture(final ProjectComponent logTo,", "+                                  final ResourceCollection rc, final long granularity) {", "+        final long now = System.currentTimeMillis() + granularity;", "+        final Date sel = new Date();", "-        Restrict future = new Restrict();", "+        final Restrict future = new Restrict();", "-        for (Resource r : future) {", "+        for (final Resource r : future) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbb08dd73a132d0ed3078c6c21eaeda4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/XMLJUnitResultFormatter.java", "commitBeforeChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "commitAfterChange": "789422e131b6c2c003d94f394169a64297e986c6", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      private void formatError(String type, Test test, Throwable t)", "signatureAfterChange": "      private void formatError(final String type, final Test test, final Throwable t)", "diff": ["-    private void formatError(String type, Test test, Throwable t) {", "+    private void formatError(final String type, final Test test, final Throwable t) {", "-        Element nested = doc.createElement(type);", "+        final Element nested = doc.createElement(type);", "-        String message = t.getMessage();", "+        final String message = t.getMessage();", "-        String strace = JUnitTestRunner.getFilteredTrace(t);", "-        Text trace = doc.createTextNode(strace);", "+        final String strace = JUnitTestRunner.getFilteredTrace(t);", "+        final Text trace = doc.createTextNode(strace);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1866d4ca270009a1bbcafe2b7861039", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": "      private MethodAndObject createRestricted(         ComponentHelper helper, String elementName, List<Method> addTypeMethods)", "signatureAfterChange": "      private MethodAndObject createRestricted(         final ComponentHelper helper, final String elementName, final List<Method> addTypeMethods)", "diff": ["-        ComponentHelper helper, String elementName, List<Method> addTypeMethods) {", "+        final ComponentHelper helper, final String elementName, final List<Method> addTypeMethods) {", "-        Project project = helper.getProject();", "+        final Project project = helper.getProject();", "-        AntTypeDefinition restrictedDefinition =", "+        final AntTypeDefinition restrictedDefinition =", "-        Method addMethod = findMatchingMethod(", "+        final Method addMethod = findMatchingMethod(", "-        Object addedObject = restrictedDefinition.create(project);", "+        final Object addedObject = restrictedDefinition.create(project);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edb3f355076f7ab45ba4e015317453c4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/ScpToMessageBySftp.java", "commitBeforeChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "commitAfterChange": "789422e131b6c2c003d94f394169a64297e986c6", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      private void sendFileToRemote(ChannelSftp channel,                                   File localFile,                                   String remotePath)         throws IOException, SftpException", "signatureAfterChange": "      private void sendFileToRemote(final ChannelSftp channel,                                   final File localFile,                                   String remotePath)         throws IOException, SftpException", "diff": ["-    private void sendFileToRemote(ChannelSftp channel,", "-                                  File localFile,", "+    private void sendFileToRemote(final ChannelSftp channel,", "+                                  final File localFile,", "-        long filesize = localFile.length();", "+        final long filesize = localFile.length();", "-        long startTime = System.currentTimeMillis();", "-        long totalLength = filesize;", "+        final long startTime = System.currentTimeMillis();", "+        final long totalLength = filesize;", "-        boolean trackProgress = getVerbose() && filesize > HUNDRED_KILOBYTES;", "+        final boolean trackProgress = getVerbose() && filesize > HUNDRED_KILOBYTES;", "-                long endTime = System.currentTimeMillis();", "+                final long endTime = System.currentTimeMillis();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f61c3d1917115e7f4f6bb3242e490232", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ResourceUtils.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static Resource[] selectOutOfDateSources(ProjectComponent logTo,                                                     Resource[] source,                                                     FileNameMapper mapper,                                                     ResourceFactory targets,                                                     long granularity)", "signatureAfterChange": "     public static Resource[] selectOutOfDateSources(final ProjectComponent logTo,                                                     final Resource[] source,                                                     final FileNameMapper mapper,                                                     final ResourceFactory targets,                                                     final long granularity)", "diff": ["-    public static Resource[] selectOutOfDateSources(ProjectComponent logTo,", "-                                                    Resource[] source,", "-                                                    FileNameMapper mapper,", "-                                                    ResourceFactory targets,", "-                                                    long granularity) {", "-        Union u = new Union();", "+    public static Resource[] selectOutOfDateSources(final ProjectComponent logTo,", "+                                                    final Resource[] source,", "+                                                    final FileNameMapper mapper,", "+                                                    final ResourceFactory targets,", "+                                                    final long granularity) {", "+        final Union u = new Union();", "-        ResourceCollection rc", "+        final ResourceCollection rc"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f70122dc134c8723d04bede69bdbc4f1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/vfs/provider/UriParser.java", "commitBeforeChange": "b6ed0b49348d6e8f820f4e5590bd71782c111976", "commitAfterChange": "5b48abc10df6339a4114a4135fdab2b38b9252bd", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected void extractToPath( String uri, StringBuffer name, ParsedUri parsedUri )         throws FileSystemException", "signatureAfterChange": "     protected void extractToPath( final String uri,                                   final StringBuffer name,                                   final ParsedUri parsedUri )         throws FileSystemException", "diff": ["-    protected void extractToPath( String uri, StringBuffer name, ParsedUri parsedUri )", "+    protected void extractToPath( final String uri,", "+                                  final StringBuffer name,", "+                                  final ParsedUri parsedUri )", "-        String scheme = extractScheme( uri, name );", "+        final String scheme = extractScheme( uri, name );", "-        String userInfo = extractUserInfo( name );", "+        final String userInfo = extractUserInfo( name );", "-        String hostName = extractHostName( name );", "+        final String hostName = extractHostName( name );", "-        String port = extractPort( name );", "+        final String port = extractPort( name );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd16ce139f1930cccbf78e8c0e998906", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": "     private AntTypeDefinition findRestrictedDefinition(         ComponentHelper helper, String componentName, List<Method> methods)", "signatureAfterChange": "     private AntTypeDefinition findRestrictedDefinition(         final ComponentHelper helper, final String componentName, final List<Method> methods)", "diff": ["-        ComponentHelper helper, String componentName, List<Method> methods) {", "+        final ComponentHelper helper, final String componentName, final List<Method> methods) {", "-        List<AntTypeDefinition> definitions = helper.getRestrictedDefinitions(componentName);", "+        final List<AntTypeDefinition> definitions = helper.getRestrictedDefinitions(componentName);", "-                AntTypeDefinition d = definitions.get(i);", "-                Class<?> exposedClass = d.getExposedClass(helper.getProject());", "+                final AntTypeDefinition d = definitions.get(i);", "+                final Class<?> exposedClass = d.getExposedClass(helper.getProject());", "-                Method method  = findMatchingMethod(exposedClass, methods);", "+                final Method method  = findMatchingMethod(exposedClass, methods);"]}]}
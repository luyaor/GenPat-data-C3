{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3992e772ad7fb4262290b0634c56b745", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b52d00c0738a45d454c75aa79f7b6c08", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/event/EventBus.java", "commitBeforeChange": "a18fbb4649bfe9577aa4648d3ab2cfb7712453e8", "commitAfterChange": "c70641243c667093d23f689c7c28866fa661b1af", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void postEvent(EventObject event)", "signatureAfterChange": "     public void postEvent(EventObject event)", "diff": ["-        synchronized(_memberSet) {", "-            // XXX need to insert code here to test whether we are being", "-            // executed by the AWTEventQueue, or some other thread. If ", "-            // the latter, then we need to insert our execution on the ", "-            // AWTEventQueue thread as all code executing commands assumes ", "-            // that context.", "+        EventDispatcher disp = new EventDispatcher(event);", "-\t\t\tfor(int i = 0; i < _memberSet.length; i++) {", "-\t\t\t\tif(_memberSet[i] == null) continue;", "+        // Events need to be dispatched on the AWTEvent thread, as the UI", "+        // components assume that.", "+        if(SwingUtilities.isEventDispatchThread()) {", "+            disp.run();", "+        }", "+        else {", "+            SwingUtilities.invokeLater(disp);", "+        }", "+    }", "-\t\t\t\tIterator it = _memberSet[i].iterator();", "-\t\t\t\twhile(it.hasNext()) {", "-\t\t\t\t\tBusMember next = (BusMember) it.next();", "-\t\t\t\t\tBusFilter filter = next.getBusFilter();", "-\t\t\t\t\tif(filter == null || filter.accept(event)) {", "-\t\t\t\t\t\tnext.eventPosted(event);", "-\t\t\t\t\t}", "-\t\t\t\t\t// Check to see if the member cancelled the event. If so", "-\t\t\t\t\t// then don't send it on to the other members.", "-\t\t\t\t\tif(event instanceof AntEvent &&", "-\t\t\t\t\t   ((AntEvent)event).isCancelled()) break;", "-\t\t\t\t}", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f58783b419c3df247be832a32b2cf0c6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/dotnet/Ilasm.java", "commitBeforeChange": "92f62e7eb8c10fe5aa19d817d6d9367dc59397e9", "commitAfterChange": "77ee46ba7a31a04ce8697925985e8f9f1a59d52e", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     public void execute()              throws BuildException", "signatureAfterChange": "     public void execute()              throws BuildException", "diff": ["-        //get dependencies list.", "-        DirectoryScanner scanner = super.getDirectoryScanner(srcDir);", "-        String[] dependencies = scanner.getIncludedFiles();", "-        log(\"assembling \" + dependencies.length + \" file\" + ((dependencies.length == 1) ? \"\" : \"s\"));", "-        String baseDir = scanner.getBasedir().toString();", "-        //add to the command", "-        for (int i = 0; i < dependencies.length; i++) {", "-            String targetFile = dependencies[i];", "-            targetFile = baseDir + File.separator + targetFile;", "-            executeOneFile(targetFile);", "-        }", "+        NetCommand command = buildIlasmCommand();", "+", "+        addFilesAndExecute(command);"]}]}
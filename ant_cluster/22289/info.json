{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a52292df191fc38f74d6f01555e3de0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "058ce6ecaf5fa4de18e77a264b3009ff", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "fbe81719e1385b36a6ea1baba6b413d7adca4df7", "commitAfterChange": "fc9085997489296fefa9bf8994033cf6cb1f05f1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public Object createElement(Object element, String elementName)          throws BuildException", "signatureAfterChange": "     public Object createElement(Object element, String elementName)          throws BuildException", "diff": ["+        if (nc == null) {", "+            String msg = \"Class \" + element.getClass().getName() +", "+                \" doesn't support the nested \\\"\" + elementName + \"\\\" element\";", "+            throw new BuildException(msg);", "+        }", "-            if (nc == null) {", "-                Object nestedElement = null;", "-                if (elementFactoryMethod != null) {", "-                    nestedElement ", "-                        = elementFactoryMethod.invoke(element, new Object[] {elementName});", "-                }", "-                if (nestedElement == null) {", "-                    String msg = \"Class \" + element.getClass().getName() +", "-                        \" doesn't support the nested \\\"\" + elementName + \"\\\" element\";", "-                    throw new BuildException(msg);", "-                }", "-                return nestedElement;", "-            }", "-            else {", "-                return nc.create(element);", "-            }", "+            return nc.create(element);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "343b7e16c7dc2a3fa7cfb78c969c3818", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/TraXLiaison.java", "commitBeforeChange": "6d5ce5b54d4424f74298d7aac6778539e286b8f4", "commitAfterChange": "44735223d94bae810d33e7f820d587bfb49728fd", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void transform(File infile, File outfile) throws Exception", "signatureAfterChange": "      public void transform(File infile, File outfile) throws Exception", "diff": ["-            StreamSource src = new StreamSource(fis);", "+            // FIXME: need to use a SAXSource as the source for the transform", "+            // so we can plug in our own entity resolver", "+            Source src = null;", "+            if (resolver != null) {", "+                if (tfactory.getFeature(SAXSource.FEATURE)) {", "+                    SAXParserFactory spFactory = SAXParserFactory.newInstance();", "+                    spFactory.setNamespaceAware( true ); ", "+                    XMLReader reader = spFactory.newSAXParser().getXMLReader();", "+                    reader.setEntityResolver(resolver);", "+                    src = new SAXSource(reader, new InputSource(fis));", "+                } else {", "+                    throw new IllegalStateException(\"xcatalog specified, but \"+", "+                        \"parser doesn't support SAX\");", "+                }", "+            } else {", "+                src = new StreamSource(fis);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b83a0edb7f7538aa8d36b532374cf9fa", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "dbecca155c71b3db823e8b6b9998503a4c42077d", "commitAfterChange": "9bc78e6c258fbc9ff142f959d67730b990f4834f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public Object createElement(Object element, String elementName)          throws BuildException", "signatureAfterChange": "     public Object createElement(Object element, String elementName)          throws BuildException", "diff": ["-        if (nc == null) {", "-            String msg = \"Class \" + element.getClass().getName() +", "-                \" doesn't support the nested \\\"\" + elementName + \"\\\" element\";", "-            throw new BuildException(msg);", "-        }", "-            return nc.create(element);", "+            if (nc == null) {", "+                Object nestedElement = null;", "+                if (elementFactoryMethod != null) {", "+                    nestedElement ", "+                        = elementFactoryMethod.invoke(element, new Object[] {elementName});", "+                }", "+                if (nestedElement == null) {", "+                    String msg = \"Class \" + element.getClass().getName() +", "+                        \" doesn't support the nested \\\"\" + elementName + \"\\\" element\";", "+                    throw new BuildException(msg);", "+                }", "+                return nestedElement;", "+            }", "+            else {", "+                return nc.create(element);", "+            }"]}]}
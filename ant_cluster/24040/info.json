{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "929a90054527bd45c0662c829fc1883b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "060b5bd5019f0086d62458e770bf71c8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/filters/ConcatFilterTest.java", "commitBeforeChange": "ae18914d138e337a097b745f0baa015371ef4354", "commitAfterChange": "8a19a4e64fcf0eccf49faa383aecbcf974f4a69e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void tearDown()", "signatureAfterChange": "      public void tearDown()", "diff": ["-        // I dont know why - but on my machine I always get a", "-        // \"Unable to delete file ...result\\append.txt\" (or prepend.txt)", "-        // from Delete.removeDir(Delete.java:612).", "-        // Win2000, JDK 1.4.1_02", "-        // A <sleep> before <delete> doesn\ufffdt work. From 10ms to 3000ms.", "-        // I modified the taskdefs.Delete.DELETE_RETRY_SLEEP_MILLIS", "-        // from 10 up to 2000 ms, but no success.", "-        // So I give up - and hope for a suggestion from another one.", "-        // But this shouldn\ufffdt let the testcases fail, so I do the cleanup", "-        // inside a try-block", "-        //    Jan", "-        try {", "-            executeTarget(\"cleanup\");", "-        } catch (Exception e) {", "-            e.printStackTrace();", "-        }", "+        executeTarget(\"cleanup\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15867567e58eda16fb399ca415084b1e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "b04c338caa73cc14ad6e8b258280426c3522de38", "commitAfterChange": "4c83562c6c9f681cdcd17c86f5e3c68c910dd5f8", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 37, "signatureBeforeChange": "     public String toURI(String path)", "signatureAfterChange": "     public String toURI(String path)", "diff": ["-        boolean isDir = (new File(path)).isDirectory();", "+        boolean isDir = new File(path).isDirectory();", "-        // catch exception if normalize thinks this is not an absolute path", "-        try {", "-            path = normalize(path).getAbsolutePath();", "-            sb.append(\"//\");", "-            // add an extra slash for filesystems with drive-specifiers", "-            if (!path.startsWith(File.separator)) {", "-                sb.append(\"/\");", "-            }", "-        } catch (BuildException e) {", "-            // relative path", "+        path = resolveFile(null, path).getPath();", "+        sb.append(\"//\");", "+        // add an extra slash for filesystems with drive-specifiers", "+        if (!path.startsWith(File.separator)) {", "+            sb.append(\"/\");", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "284bf209c4727a12a4bf5a20d68959b1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/jdepend/JDependTask.java", "commitBeforeChange": "ca77bf7cd306d07ef1a37b97a97b1de17f07f701", "commitAfterChange": "d09fc12e5806f0129b029350af8e7b75ab8743fe", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private int executeAsForked( final CommandlineJava commandline )         throws TaskException", "signatureAfterChange": "     private int executeAsForked( final CommandlineJava commandline )         throws TaskException", "diff": ["-        try", "-        {", "-            return exe.execute();", "-        }", "-        catch( IOException e )", "-        {", "-            throw new TaskException( \"Process fork failed.\", e );", "-        }", "+        return exe.execute();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32a809458a13a12a966ca9dc6ea6efca", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/vss/MSVSS.java", "commitBeforeChange": "ca77bf7cd306d07ef1a37b97a97b1de17f07f701", "commitAfterChange": "d09fc12e5806f0129b029350af8e7b75ab8743fe", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      protected int run( Commandline cmd )         throws TaskException", "signatureAfterChange": "      protected int run( Commandline cmd )         throws TaskException", "diff": ["-        try", "-        {", "-            final ExecManager execManager = (ExecManager)getService( ExecManager.class );", "-            final Execute exe = new Execute( execManager );", "+        final ExecManager execManager = (ExecManager)getService( ExecManager.class );", "+        final Execute exe = new Execute( execManager );", "-            // If location of ss.ini is specified we need to set the", "-            // environment-variable SSDIR to this value", "-            if( m_serverPath != null )", "-            {", "-                final Properties env = new Properties();", "-                env.setProperty( \"SSDIR\", m_serverPath );", "-                exe.setEnvironment( env );", "-            }", "-", "-            exe.setWorkingDirectory( getBaseDirectory() );", "-            exe.setCommandline( cmd );", "-            return exe.execute();", "-        }", "-        catch( IOException e )", "+        // If location of ss.ini is specified we need to set the", "+        // environment-variable SSDIR to this value", "+        if( m_serverPath != null )", "-            throw new TaskException( \"Error\", e );", "+            final Properties env = new Properties();", "+            env.setProperty( \"SSDIR\", m_serverPath );", "+            exe.setEnvironment( env );", "+", "+        exe.setWorkingDirectory( getBaseDirectory() );", "+        exe.setCommandline( cmd );", "+        return exe.execute();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "542a6bf54e8209e46b4a911081f74ce8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/perforce/P4Base.java", "commitBeforeChange": "ca77bf7cd306d07ef1a37b97a97b1de17f07f701", "commitAfterChange": "d09fc12e5806f0129b029350af8e7b75ab8743fe", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     protected void execP4Command( final String command,                                   ExecOutputHandler handler )         throws TaskException", "signatureAfterChange": "     protected void execP4Command( final String command,                                   ExecOutputHandler handler )         throws TaskException", "diff": ["-            try", "-            {", "-                exe.execute();", "-            }", "-            catch( IOException e )", "-            {", "-                throw new TaskException( \"Error\", e );", "-            }", "+            exe.execute();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "565c852fadcae6eeaf4156c46df9a6a5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XSLTProcess.java", "commitBeforeChange": "244252d7c9ed28035af96f36dad07288ad111ead", "commitAfterChange": "7cbd5df0177f449706fe1ad6f84fa401ca264e18", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "      protected XSLTLiaison getLiaison()", "signatureAfterChange": "      protected XSLTLiaison getLiaison()", "diff": ["-                            resolveProcessor(\"adaptx\");", "+                            resolveProcessor(\"xslp\");", "-                            try {", "-                                resolveProcessor(\"xslp\");", "-                            } catch (Throwable e4) {", "-                                e4.printStackTrace();", "-                                e3.printStackTrace();", "-                                e2.printStackTrace();", "-                                throw new BuildException(e1);", "-                            }", "+                            e3.printStackTrace();", "+                            e2.printStackTrace();", "+                            throw new BuildException(e1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bb723c3865833f0ec45cc9b5bd3d57e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/vss/MSVSS.java", "commitBeforeChange": "ca77bf7cd306d07ef1a37b97a97b1de17f07f701", "commitAfterChange": "d09fc12e5806f0129b029350af8e7b75ab8743fe", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      protected int run( Commandline cmd )         throws TaskException", "signatureAfterChange": "      protected int run( Commandline cmd )         throws TaskException", "diff": ["-        try", "-        {", "-            final ExecManager execManager = (ExecManager)getService( ExecManager.class );", "-            final Execute exe = new Execute( execManager );", "+        final ExecManager execManager = (ExecManager)getService( ExecManager.class );", "+        final Execute exe = new Execute( execManager );", "-            // If location of ss.ini is specified we need to set the", "-            // environment-variable SSDIR to this value", "-            if( m_serverPath != null )", "-            {", "-                final Properties env = new Properties();", "-                env.setProperty( \"SSDIR\", m_serverPath );", "-                exe.setEnvironment( env );", "-            }", "-", "-            exe.setWorkingDirectory( getBaseDirectory() );", "-            exe.setCommandline( cmd );", "-            return exe.execute();", "-        }", "-        catch( IOException e )", "+        // If location of ss.ini is specified we need to set the", "+        // environment-variable SSDIR to this value", "+        if( m_serverPath != null )", "-            throw new TaskException( \"Error\", e );", "+            final Properties env = new Properties();", "+            env.setProperty( \"SSDIR\", m_serverPath );", "+            exe.setEnvironment( env );", "+", "+        exe.setWorkingDirectory( getBaseDirectory() );", "+        exe.setCommandline( cmd );", "+        return exe.execute();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f706427239c64617fca38a738c89d51", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/FixCRLF.java", "commitBeforeChange": "e0ad7527a06eb0e9513160b0c5b49bc9f8ab5f5b", "commitAfterChange": "8d02bfc707ffeb41a31153bba6adbccebb06106b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        try {", "-            for (int i = 0; i < files.length; i++) {", "-                File srcFile = new File(srcDir, files[i]);", "+        for (int i = 0; i < files.length; i++) {", "+            File srcFile = new File(srcDir, files[i]);", "-                // read the contents of the file", "-                int count = (int)srcFile.length();", "-                byte indata[] = new byte[count];", "-                try {", "-                    FileInputStream inStream = new FileInputStream(srcFile);", "-                    inStream.read(indata);", "-                    inStream.close();", "-                } catch (IOException e) {", "-                    throw new BuildException(e);", "-                }", "+            // read the contents of the file", "+            int count = (int)srcFile.length();", "+            byte indata[] = new byte[count];", "+            try {", "+                FileInputStream inStream = new FileInputStream(srcFile);", "+                inStream.read(indata);", "+                inStream.close();", "+            } catch (IOException e) {", "+                throw new BuildException(e);", "+            }", "-                // count the number of cr, lf,  and tab characters", "-                int cr = 0;", "-                int lf = 0;", "-                int tab = 0;", "+            // count the number of cr, lf,  and tab characters", "+            int cr = 0;", "+            int lf = 0;", "+            int tab = 0;", "-                for (int k=0; k<count; k++) {", "-                    byte c = indata[k];", "-                    if (c == '\\r') cr++;", "-                    if (c == '\\n') lf++;", "-                    if (c == '\\t') tab++;", "-                }", "+            for (int k=0; k<count; k++) {", "+                byte c = indata[k];", "+                if (c == '\\r') cr++;", "+                if (c == '\\n') lf++;", "+                if (c == '\\t') tab++;", "+            }", "-                // check for trailing eof", "-                boolean eof = ((count>0) && (indata[count-1] == 0x1A));", "+            // check for trailing eof", "+            boolean eof = ((count>0) && (indata[count-1] == 0x1A));", "-                // log stats (before fixes)", "-                project.log(srcFile + \": size=\" + count + \" cr=\" + cr +", "-                            \" lf=\" + lf + \" tab=\" + tab + \" eof=\" + eof,", "-                            \"fixcrlf\", project.MSG_VERBOSE);", "+            // log stats (before fixes)", "+            project.log(srcFile + \": size=\" + count + \" cr=\" + cr +", "+                        \" lf=\" + lf + \" tab=\" + tab + \" eof=\" + eof,", "+                        \"fixcrlf\", project.MSG_VERBOSE);", "-                // determine the output buffer size (slightly pessimisticly)", "-                int outsize = count;", "-                if (addcr  !=  0) outsize-=cr;", "-                if (addcr  == +1) outsize+=lf;", "-                if (addtab == -1) outsize+=tab*7;", "-                if (ctrlz  == +1) outsize+=1;", "+            // determine the output buffer size (slightly pessimisticly)", "+            int outsize = count;", "+            if (addcr  !=  0) outsize-=cr;", "+            if (addcr  == +1) outsize+=lf;", "+            if (addtab == -1) outsize+=tab*7;", "+            if (ctrlz  == +1) outsize+=1;", "-                // copy the data", "-                byte outdata[] = new byte[outsize];", "-                int o = 0;    // output offset", "-                int line = o; // beginning of line", "-                int col = 0;  // desired column", "+            // copy the data", "+            byte outdata[] = new byte[outsize];", "+            int o = 0;    // output offset", "+            int line = o; // beginning of line", "+            int col = 0;  // desired column", "-                for (int k=0; k<count; k++) {", "-                    switch (indata[k]) {", "-                        case ' ':", "-                            // advance column", "-                            if (addtab == 0) outdata[o++]=(byte)' ';", "+            for (int k=0; k<count; k++) {", "+                switch (indata[k]) {", "+                    case ' ':", "+                        // advance column", "+                        if (addtab == 0) outdata[o++]=(byte)' ';", "+                        col++;", "+                        break;", "+", "+                    case '\\t':", "+                        if (addtab == 0) {", "+                            // treat like any other character", "+                            outdata[o++]=(byte)'\\t';", "-                            break;", "+                        } else {", "+                            // advance column to next tab stop", "+                            col = (col|7)+1;", "+                        }", "+                        break;", "-                        case '\\t':", "-                            if (addtab == 0) {", "-                                // treat like any other character", "+                    case '\\r':", "+                        if (addcr == 0) {", "+                            // treat like any other character", "+                            outdata[o++]=(byte)'\\r';", "+                            col++;", "+                        }", "+                        break;", "+", "+                    case '\\n':", "+                        // start a new line (optional CR followed by LF)", "+                        if (addcr == +1) outdata[o++]=(byte)'\\r';", "+                        outdata[o++]=(byte)'\\n';", "+                        line=o;", "+                        col=0;", "+                        break;", "+", "+                    default:", "+                        // add tabs if two or more spaces are required", "+                        if (addtab>0 && o+1<line+col) {", "+                            // determine logical column", "+                            int diff=o-line;", "+", "+                            // add tabs until this column would be passed", "+                            // note: the start of line is adjusted to match", "+                            while ((diff|7)<col) {", "-                                col++;", "-                            } else {", "-                                // advance column to next tab stop", "-                                col = (col|7)+1;", "-                            }", "-                            break;", "-", "-                        case '\\r':", "-                            if (addcr == 0) {", "-                                // treat like any other character", "-                                outdata[o++]=(byte)'\\r';", "-                                col++;", "-                            }", "-                            break;", "-", "-                        case '\\n':", "-                            // start a new line (optional CR followed by LF)", "-                            if (addcr == +1) outdata[o++]=(byte)'\\r';", "-                            outdata[o++]=(byte)'\\n';", "-                            line=o;", "-                            col=0;", "-                            break;", "-", "-                        default:", "-                            // add tabs if two or more spaces are required", "-                            if (addtab>0 && o+1<line+col) {", "-                                // determine logical column", "-                                int diff=o-line;", "-", "-                                // add tabs until this column would be passed", "-                                // note: the start of line is adjusted to match", "-                                while ((diff|7)<col) {", "-                                    outdata[o++]=(byte)'\\t';", "-                                    line-=7-(diff&7);", "-                                    diff=o-line;", "-                                };", "+                                line-=7-(diff&7);", "+                                diff=o-line;", "+                        };", "-                            // space out to desired column", "-                            while (o<line+col) outdata[o++]=(byte)' ';", "+                        // space out to desired column", "+                        while (o<line+col) outdata[o++]=(byte)' ';", "-                            // append desired character", "-                            outdata[o++]=indata[k];", "-                            col++;", "-                    }", "+                        // append desired character", "+                        outdata[o++]=indata[k];", "+                        col++;", "+            }", "-                // add or remove an eof character as required", "-                if (ctrlz == +1) {", "-                    if (outdata[o-1]!=0x1A) outdata[o++]=0x1A;", "-                } else if (ctrlz == -1) {", "-                    if (o>2 && outdata[o-1]==0x0A && outdata[o-2]==0x1A) o--;", "-                    if (o>1 && outdata[o-1]==0x1A) o--;", "-                }", "+            // add or remove an eof character as required", "+            if (ctrlz == +1) {", "+                if (outdata[o-1]!=0x1A) outdata[o++]=0x1A;", "+            } else if (ctrlz == -1) {", "+                if (o>2 && outdata[o-1]==0x0A && outdata[o-2]==0x1A) o--;", "+                if (o>1 && outdata[o-1]==0x1A) o--;", "+            }", "-                // output the data", "-                try {", "-                    File destFile = srcFile;", "-                    if (destDir != null) destFile = new File(destDir, files[i]);", "-                    FileOutputStream outStream = new FileOutputStream(destFile);", "-                    outStream.write(outdata,0,o);", "-                    outStream.close();", "-                } catch (IOException e) {", "-                    throw new BuildException(e);", "-                }", "+            // output the data", "+            try {", "+                File destFile = srcFile;", "+                if (destDir != null) destFile = new File(destDir, files[i]);", "+                FileOutputStream outStream = new FileOutputStream(destFile);", "+                outStream.write(outdata,0,o);", "+                outStream.close();", "+            } catch (IOException e) {", "+                throw new BuildException(e);", "+            }", "-            } /* end for */", "-        } catch (Exception e) {", "-            e.printStackTrace();", "-            throw new BuildException(e);", "-        }", "+        } /* end for */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e64666e490bbe815c22d0a29b8b936e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/executor/DefaultExecutor.java", "commitBeforeChange": "6f3f9cca3e46d9b295f612635ddc47d887d760ce", "commitAfterChange": "d32c26fc168f32a03444486b5b2b23b19564bb9b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void execute( final Configuration taskData, final TaskContext context )         throws AntException", "signatureAfterChange": "      public void execute( final Configuration taskData, final TaskContext context )         throws TaskException", "diff": ["-        throws AntException", "+        throws TaskException", "-        try { task.execute(); }", "-        catch( final Exception e )", "-        {", "-            throw new AntException( \"Error executing task\", e );", "-        }", "+        task.execute();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e763a2e1de760603fde4a0c08b8d76e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/URLResource.java", "commitBeforeChange": "4183b28e9ee1f938706125089cad2ef0112fee36", "commitAfterChange": "359ac4f9675dc4c2bb7add039015fc00f403e9d8", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public synchronized long getLastModified()", "signatureAfterChange": "     public synchronized long getLastModified()", "diff": ["-        if (!isExists()) {", "+        if (!isExists(false)) {", "-        try {", "-            connect();", "-            return conn.getLastModified();", "-        } catch (IOException e) {", "-            return 0L;", "-        }", "+        return conn.getLastModified();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "817ef2b3fcfad91468298c6252d7844f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/build/Patch.java", "commitBeforeChange": "ca77bf7cd306d07ef1a37b97a97b1de17f07f701", "commitAfterChange": "d09fc12e5806f0129b029350af8e7b75ab8743fe", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public void execute()         throws TaskException", "signatureAfterChange": "      public void execute()         throws TaskException", "diff": ["-", "-", "-        try", "-        {", "-            exe.execute();", "-        }", "-        catch( IOException e )", "-        {", "-            throw new TaskException( \"Error\", e );", "-        }", "+        exe.execute();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "859a379836d19165fdce5455c703600b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/jdepend/JDependTask.java", "commitBeforeChange": "ca77bf7cd306d07ef1a37b97a97b1de17f07f701", "commitAfterChange": "d09fc12e5806f0129b029350af8e7b75ab8743fe", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private int executeAsForked( final CommandlineJava commandline )         throws TaskException", "signatureAfterChange": "     private int executeAsForked( final CommandlineJava commandline )         throws TaskException", "diff": ["-        try", "-        {", "-            return exe.execute();", "-        }", "-        catch( IOException e )", "-        {", "-            throw new TaskException( \"Process fork failed.\", e );", "-        }", "+        return exe.execute();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91ac684f0f227249225c577d9455825e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/clearcase/ClearCase.java", "commitBeforeChange": "ca77bf7cd306d07ef1a37b97a97b1de17f07f701", "commitAfterChange": "d09fc12e5806f0129b029350af8e7b75ab8743fe", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      protected int run( Commandline cmd )         throws TaskException", "signatureAfterChange": "      protected int run( Commandline cmd )         throws TaskException", "diff": ["-        try", "-        {", "-            final ExecManager execManager = (ExecManager)getService( ExecManager.class );", "-            final Execute exe = new Execute( execManager );", "-            exe.setWorkingDirectory( getBaseDirectory() );", "-            exe.setCommandline( cmd );", "-            return exe.execute();", "-        }", "-        catch( IOException e )", "-        {", "-            throw new TaskException( \"Error\", e );", "-        }", "+        final ExecManager execManager = (ExecManager)getService( ExecManager.class );", "+        final Execute exe = new Execute( execManager );", "+        exe.setWorkingDirectory( getBaseDirectory() );", "+        exe.setCommandline( cmd );", "+        return exe.execute();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93be46144a762b1d551b723e1b75700e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Property.java", "commitBeforeChange": "be12707c63314ce0314959ff551e37fe59b83943", "commitAfterChange": "4f3e4e1690289144b15872597586ed34ae92efb5", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "      protected void loadEnvironment( String prefix )", "signatureAfterChange": "      protected void loadEnvironment( String prefix )", "diff": ["-        try {", "-            Vector osEnv = Execute.getProcEnvironment();", "-            for (Enumeration e = osEnv.elements(); e.hasMoreElements(); ) {", "-                String entry = (String)e.nextElement();", "-                int pos = entry.indexOf('=');", "-                if (pos == -1) {", "-                    log(\"Ignoring: \" + entry, Project.MSG_WARN);", "-                } else {", "-                    props.put(prefix + entry.substring(0, pos), ", "-                              entry.substring(pos + 1));", "-                }", "+        Vector osEnv = Execute.getProcEnvironment();", "+        for (Enumeration e = osEnv.elements(); e.hasMoreElements(); ) {", "+            String entry = (String)e.nextElement();", "+            int pos = entry.indexOf('=');", "+            if (pos == -1) {", "+                log(\"Ignoring: \" + entry, Project.MSG_WARN);", "+            } else {", "+                props.put(prefix + entry.substring(0, pos), ", "+                entry.substring(pos + 1));", "-            addProperties(props);", "-        } catch (Exception ex) {", "-            throw new BuildException(ex, location);", "+        addProperties(props);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9990ca49a5c3aabf7985129c321b5402", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Property.java", "commitBeforeChange": "be12707c63314ce0314959ff551e37fe59b83943", "commitAfterChange": "4f3e4e1690289144b15872597586ed34ae92efb5", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        try {", "-            if ((name != null) && (value != null)) {", "-                addProperty(name, value);", "+        if ((name != null) && (value != null)) {", "+            addProperty(name, value);", "+        }", "+        ", "+        if (file != null) loadFile(file);", "+        ", "+        if (resource != null) loadResource(resource);", "+        ", "+        if (env != null) loadEnvironment(env);", "+        ", "+        if ((name != null) && (ref != null)) {", "+            Object obj = ref.getReferencedObject(getProject());", "+            if (obj != null) {", "+                addProperty(name, obj.toString());", "-", "-            if (file != null) loadFile(file);", "-", "-            if (resource != null) loadResource(resource);", "-", "-            if (env != null) loadEnvironment(env);", "-", "-            if ((name != null) && (ref != null)) {", "-                Object obj = ref.getReferencedObject(getProject());", "-                if (obj != null) {", "-                    addProperty(name, obj.toString());", "-                }", "-            }", "-", "-        } catch (Exception e) {", "-            throw new BuildException(e, location);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b87a6fed9c9525f15bf68537b82120da", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/perforce/P4Base.java", "commitBeforeChange": "ca77bf7cd306d07ef1a37b97a97b1de17f07f701", "commitAfterChange": "d09fc12e5806f0129b029350af8e7b75ab8743fe", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     protected void execP4Command( final String command,                                   ExecOutputHandler handler )         throws TaskException", "signatureAfterChange": "     protected void execP4Command( final String command,                                   ExecOutputHandler handler )         throws TaskException", "diff": ["-            try", "-            {", "-                exe.execute();", "-            }", "-            catch( IOException e )", "-            {", "-                throw new TaskException( \"Error\", e );", "-            }", "+            exe.execute();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d15a44957b4f046b5acee8670b7b8a79", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/BaseFilterReader.java", "commitBeforeChange": "8fbf9a4b9a81ca815e9d44060fbe15d37dd449e6", "commitAfterChange": "231d01856902f3729b8a0891fe3b124976012328", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public BaseFilterReader()", "signatureAfterChange": "     public BaseFilterReader()", "diff": ["-        try {", "-            close();", "-        } catch (IOException  ioe) {", "-            // Ignore", "-        }", "+        FileUtils.close(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d709119bf8b441dd321f52f5fb496e57", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "ab7f4306cb20279ee99a9d0a71f24a6f210dbcd5", "commitAfterChange": "45b244fd64d057b560ef40646408bb8178000128", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "     private TestResultHolder executeAsForked(JUnitTest test,                                              ExecuteWatchdog watchdog,                                              File casesFile)         throws BuildException", "signatureAfterChange": "     private TestResultHolder executeAsForked(JUnitTest test,                                              ExecuteWatchdog watchdog,                                              File casesFile)         throws BuildException", "diff": ["-                try {", "-                    br.close();", "-                } catch (IOException ioe) {", "-                    // nothing", "-                }", "+                FileUtils.close(br);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e236764f81b149418ba5eec4e6122dc3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ANTLR.java", "commitBeforeChange": "7a0e0d691c38aa04dc0c6a1633a116549a4be7c1", "commitAfterChange": "5eb7ef1a5a006ab960024ae6bc501537c816a085", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "     private int run(String[] command) throws BuildException", "signatureAfterChange": "     private int run(String[] command) throws BuildException", "diff": ["-            try {", "-                bos.close();", "-            } catch (IOException e) {", "-                // ignore", "-            }", "+            FileUtils.close(bos);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6784382b542e9b0914b5386f2d1ba72", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "7c34ff10987ddfe9e31aeb7cd80da9fb2577512f", "commitAfterChange": "c653fb30690000a5abfb53aec967eb5c14722920", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private void binaryCat(ResourceCollection c)", "signatureAfterChange": "     private void binaryCat(ResourceCollection c)", "diff": ["-            try {", "-                in = new ConcatResourceInputStream(c);", "-                ((ConcatResourceInputStream) in).setManagingComponent(this);", "-            } catch (IOException e) {", "-                throw new BuildException(e);", "-            }", "+            in = new ConcatResourceInputStream(c);", "+            ((ConcatResourceInputStream) in).setManagingComponent(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa86a037c1ddecc04a6055d9bd7a8dff", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/ClearCase.java", "commitBeforeChange": "ca77bf7cd306d07ef1a37b97a97b1de17f07f701", "commitAfterChange": "d09fc12e5806f0129b029350af8e7b75ab8743fe", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      protected int run( Commandline cmd )         throws TaskException", "signatureAfterChange": "      protected int run( Commandline cmd )         throws TaskException", "diff": ["-        try", "-        {", "-            final ExecManager execManager = (ExecManager)getService( ExecManager.class );", "-            final Execute exe = new Execute( execManager );", "-            exe.setWorkingDirectory( getBaseDirectory() );", "-            exe.setCommandline( cmd );", "-            return exe.execute();", "-        }", "-        catch( IOException e )", "-        {", "-            throw new TaskException( \"Error\", e );", "-        }", "+        final ExecManager execManager = (ExecManager)getService( ExecManager.class );", "+        final Execute exe = new Execute( execManager );", "+        exe.setWorkingDirectory( getBaseDirectory() );", "+        exe.setCommandline( cmd );", "+        return exe.execute();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb7aef379b8cd5567eb66a1a47fa6ec8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "2d446f3df2b49ea07727bbd5b330f45a95024d42", "commitAfterChange": "f152ff3665854eda95df9916a022351da219efac", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "      protected void runStatements(Reader reader, PrintStream out) throws SQLException, IOException", "signatureAfterChange": "      protected void runStatements(Reader reader, PrintStream out)          throws SQLException, IOException", "diff": ["-    protected void runStatements(Reader reader, PrintStream out) throws SQLException, IOException {", "+    protected void runStatements(Reader reader, PrintStream out) ", "+        throws SQLException, IOException {", "-        try{", "-            while ((line=in.readLine()) != null){", "-                line = line.trim();", "-                line = project.replaceProperties(line);", "-                if (line.startsWith(\"//\")) {", "-                  continue;", "-                }", "-                if (line.startsWith(\"--\")) {", "-                  continue;", "-                }", "-                StringTokenizer st = new StringTokenizer(line);", "-                if (st.hasMoreTokens()) {", "-                    String token = st.nextToken();", "-                    if (\"REM\".equalsIgnoreCase(token)) {", "-                        continue;", "-                    }", "-                }", "-", "-                sql += \" \" + line;", "-                sql = sql.trim();", "-", "-                // SQL defines \"--\" as a comment to EOL", "-                // and in Oracle it may contain a hint", "-                // so we cannot just remove it, instead we must end it", "-                if (line.indexOf(\"--\") >= 0) {", "-                  sql += \"\\n\";", "-                }", "-", "-                if (delimiterType.equals(DelimiterType.NORMAL) && sql.endsWith(delimiter) ||", "-                    delimiterType.equals(DelimiterType.ROW) && line.equals(delimiter)) {", "-                    log(\"SQL: \" + sql, Project.MSG_VERBOSE);", "-                    execSQL(sql.substring(0, sql.length() - delimiter.length()), out);", "-                    sql = \"\";", "+        while ((line=in.readLine()) != null){", "+            line = line.trim();", "+            line = project.replaceProperties(line);", "+            if (line.startsWith(\"//\")) {", "+                continue;", "+            }", "+            if (line.startsWith(\"--\")) {", "+                continue;", "+            }", "+            StringTokenizer st = new StringTokenizer(line);", "+            if (st.hasMoreTokens()) {", "+                String token = st.nextToken();", "+                if (\"REM\".equalsIgnoreCase(token)) {", "+                    continue;", "- ", "-            // Catch any statements not followed by ;", "-            if(!sql.equals(\"\")){", "-                execSQL(sql, out);", "+            ", "+            sql += \" \" + line;", "+            sql = sql.trim();", "+            ", "+            // SQL defines \"--\" as a comment to EOL", "+            // and in Oracle it may contain a hint", "+            // so we cannot just remove it, instead we must end it", "+            if (line.indexOf(\"--\") >= 0) {", "+                sql += \"\\n\";", "-        }catch(SQLException e){", "-            throw e;", "+            ", "+            if ((delimiterType.equals(DelimiterType.NORMAL) ", "+                 && sql.endsWith(delimiter)) ", "+                ||", "+                (delimiterType.equals(DelimiterType.ROW) ", "+                 && line.equals(delimiter))) {", "+                log(\"SQL: \" + sql, Project.MSG_VERBOSE);", "+                execSQL(sql.substring(0, sql.length() - delimiter.length()), ", "+                        out);", "+                sql = \"\";", "+            }", "-", "+        ", "+        // Catch any statements not followed by ;", "+        if(!sql.equals(\"\")){", "+            execSQL(sql, out);", "+        }"]}]}
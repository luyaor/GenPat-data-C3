{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d19d72e649c4ffb98fc4d2ceff26e2de", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0dfe1d4172db6e09c15db6794e994736", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ComponentHelper.java", "commitBeforeChange": "7bf41207e0b3bef0fe3f8d1a88ca7b872e69f0e9", "commitAfterChange": "9ae85e523be191767f8d56d68a8f33651acd4f0b", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "     public String diagnoseCreationFailure(String componentName, String type)", "signatureAfterChange": "     public String diagnoseCreationFailure(String componentName, String type)", "diff": ["+        String antHomeLib;", "+        boolean probablyIDE=false;", "+        String anthome = System.getProperty(MagicNames.ANT_HOME);", "+        if(anthome!=null) {", "+            File antHomeLibDir = new File(anthome,\"lib\");", "+            antHomeLib=antHomeLibDir.getAbsolutePath();", "+        } else {", "+            //running under an IDE that doesn't set ANT_HOME", "+            probablyIDE=true;", "+            antHomeLib = \"ANT_HOME\" +File.separatorChar +\"lib\";", "+        }", "+        StringBuffer dirListingText = new StringBuffer();", "+        final String tab = \"        -\";", "+        dirListingText.append(tab);", "+        dirListingText.append(antHomeLib);", "+        dirListingText.append('\\n');", "+        if(probablyIDE) {", "+            dirListingText.append(tab);", "+            dirListingText.append(\"the IDE Ant configuration dialogs\");", "+        } else {", "+            dirListingText.append(tab);", "+            dirListingText.append(libDir);", "+            dirListingText.append('\\n');", "+            dirListingText.append(tab);", "+            dirListingText.append(", "+                    \"a directory added on the command line with the -lib argument\");", "+        }", "+", "+        String dirListing=dirListingText.toString();", "+        ", "-                out.println(\"Action: Check that the implementing library exists \"", "-                        + \"in ANT_HOME/lib or in \");", "-                out.println(\"        \" + libDir);", "+                out.println(\"Action: Check that the implementing library exists in one of:\");", "+                out.println(dirListing);", "-                    out.println(\"Action: Check that the appropriate optional JAR exists \"", "-                            + \"in ANT_HOME/lib or in \");", "-                    out.println(\"        \" + libDir);", "+                    out.println(\"Action: Check that the appropriate optional JAR exists in\");", "+                    out.println(dirListing);", "-                    out.println(\"        and that the implementing JAR is in ANT_HOME/lib or in\");", "-                    out.println(\"        \" + libDir);", "+                    out.println(\"        and that the implementing JAR is in one of:\");", "+                    out.println(dirListing);", "-                    out.println(\"       It is not enough to have Ant's optional JAR, you need the JAR\");", "-                    out.println(\"       files that it depends upon.\");", "-                    out.println(\"Ant's optional task dependencies are listed in the manual.\");", "+                    out.println(\"       It is not enough to have Ant's optional JARs\");", "+                    out.println(\"       you need the JAR files that the optional tasks depend upon.\");", "+                    out.println(\"       Ant's optional task dependencies are listed in the manual.\");", "-                out.println(\"Action: Determine what extra JAR files are needed, and place them\");", "-                out.println(\"        in ANT_HOME/lib or\");", "-                out.println(\"        in \" + libDir);", "+                out.println(\"Action: Determine what extra JAR files are needed, and place them in one of:\");", "+                out.println(dirListing);", "-                    out.println(\"Action: Determine what extra JAR files are needed, and place them\");", "-                    out.println(\"        in ANT_HOME/lib or\");", "-                    out.println(\"        in \" + libDir);", "+                    out.println(\"Action: Determine what extra JAR files are needed, and place them in:\");", "+                    out.println(dirListing);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cbe66f6efd218cfd27be1e62284bb3e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/perforce/P4Label.java", "commitBeforeChange": "52579e96823f78d8588c70e92d5cded416cbeb9a", "commitAfterChange": "c3633d1c5a471deebcca60685fe7ebec2e55cf52", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "          public void execute() throws BuildException", "signatureAfterChange": "              public void execute() throws BuildException", "diff": ["-    ", "+        ", "-", "+\t\tif(lock != null && !lock.equalsIgnoreCase(\"locked\")) {", "+        \tlog(\"lock attribute invalid - ignoring\",Project.MSG_WARN);", "+\t\t}", "+        ", "+        //We have to create a unlocked label first", "+", "+        //Now lock if required", "+        if (lock != null && lock.equalsIgnoreCase(\"locked\"))  {", "+        ", "+        \tlog(\"Modifying lock status to 'locked'\",Project.MSG_INFO);", "+", "+        \tfinal StringBuffer labelSpec = new StringBuffer();", "+            ", "+\t\t\t//Read back the label spec from perforce, ", "+            //Replace Options", "+            //Submit back to Perforce", "+            ", "+        \thandler = new P4HandlerAdapter()  {", "+           \t\tpublic void process(String line)  {", "+                \tlog(line, Project.MSG_VERBOSE);", "+                    ", "+\t\t\t\t\tif(util.match(\"/^Options:/\",line)) {", "+   \t                \tline = \"Options: \"+lock;", "+\t\t\t\t\t}", "+                    ", "+                    labelSpec.append(line+\"\\n\");", "+           \t\t}", "+        \t};", "+        ", "+        \t", "+            ", "+\t\t\texecP4Command(\"label -o \"+name, handler);", "+            log(labelSpec.toString(),Project.MSG_DEBUG);", "+", "+            log(\"Now locking label...\",Project.MSG_VERBOSE);", "+\t\t\thandler = new P4HandlerAdapter() {", "+\t\t\t\tpublic void process(String line) {", "+\t\t\t\t\tlog(line, Project.MSG_VERBOSE);", "+\t\t\t\t}", "+        \t};", "+", "+            handler.setOutput(labelSpec.toString());", "+\t\t\texecP4Command(\"label -i\", handler);", "+        }", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c57656fbc49a6e7d42579287d248af00", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "536a84c211f50992fedce887f3120414eec39068", "commitAfterChange": "d0cb590844449882c124f78aa671ef8750c75ea9", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 76, "signatureBeforeChange": "     protected int transferFiles(FTPClient ftp, FileSet fs)          throws IOException, BuildException", "signatureAfterChange": "     protected int transferFiles(final FTPClient ftp, FileSet fs)          throws IOException, BuildException", "diff": ["-    protected int transferFiles(FTPClient ftp, FileSet fs)", "+    protected int transferFiles(final FTPClient ftp, FileSet fs)", "+            RetryHandler h = new RetryHandler(this.retriesAllowed, this);", "-                    rmDir(ftp, dsfiles[i]);", "+                    final String dsfile = dsfiles[i];", "+                    executeRetryable(h, new Retryable() {", "+                        public void execute() throws IOException {", "+                            rmDir(ftp, dsfile);", "+                        }", "+                    }, dsfile);", "+                final BufferedWriter fbw = bw;", "+                final String fdir = dir;", "-                    switch (action) {", "-                        case SEND_FILES:", "-                            sendFile(ftp, dir, dsfiles[i]);", "-                            break;", "-                        case GET_FILES:", "-                            getFile(ftp, dir, dsfiles[i]);", "-                            break;", "-                        case DEL_FILES:", "-                            delFile(ftp, dsfiles[i]);", "-                            break;", "-                        case LIST_FILES:", "-                            listFile(ftp, bw, dsfiles[i]);", "-                            break;", "-                        case CHMOD:", "-                            doSiteCommand(ftp, \"chmod \" + chmod + \" \" + resolveFile(dsfiles[i]));", "-                            transferred++;", "-                            break;", "-                        default:", "-                            throw new BuildException(\"unknown ftp action \" + action);", "-                    }", "+                    final String dsfile = dsfiles[i];", "+                    executeRetryable(h, new Retryable() {", "+                        public void execute() throws IOException {", "+                            switch (action) {", "+                                case SEND_FILES:", "+                                    sendFile(ftp, fdir, dsfile);", "+                                    break;", "+                                case GET_FILES:", "+                                    getFile(ftp, fdir, dsfile);", "+                                    break;", "+                                case DEL_FILES:", "+                                    delFile(ftp, dsfile);", "+                                    break;", "+                                case LIST_FILES:", "+                                    listFile(ftp, fbw, dsfile);", "+                                    break;", "+                                case CHMOD:", "+                                    doSiteCommand(ftp, \"chmod \" + chmod + \" \" + resolveFile(dsfile));", "+                                    transferred++;", "+                                    break;", "+                                default:", "+                                    throw new BuildException(\"unknown ftp action \" + action);", "+                            }", "+                        }", "+                    }, dsfile);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5acd4ea26341e8626814f1170cbfaca", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "6ecbe242189a8d7feba3d56c8ec89582e77b1b29", "commitAfterChange": "409b0917b6f737faf5c8b804fdbec8bd1f7f5274", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+            ", "+            System.err.println(test.getFork());", "+", "-                    fe.setOutfile(project.resolveFile(test.getOutfile()", "-                                                      +fe.getExtension()));", "+                    if (fe.getUseFile()) {", "+                        fe.setOutfile(project.resolveFile(test.getOutfile()", "+                                                          +fe.getExtension()));", "+                    } else {", "+                        fe.setOutput(new LogOutputStream(this, Project.MSG_INFO));", "+                    }", "-                    add[i].setOutfile(project.resolveFile(test.getOutfile()", "-                                                          +add[i].getExtension()));", "+                    if (add[i].getUseFile()) {", "+                        add[i].setOutfile(project.resolveFile(test.getOutfile()", "+                                                              +add[i].getExtension()));", "+                    } else {", "+                        add[i].setOutput(new LogOutputStream(this, Project.MSG_INFO));", "+                    }", "+                StringBuffer formatterArg = new StringBuffer();", "-                    cmd.createArgument().setValue(\"formatter=\" +", "-                                                  fe.getClassname() + \",\"", "-                                                  + project.resolveFile(test.getOutfile()", "-                                                                               +fe.getExtension()).getAbsolutePath());", "+                    formatterArg.append(\"formatter=\");", "+                    formatterArg.append(fe.getClassname());", "+                    if (fe.getUseFile()) {", "+                        formatterArg.append(\",\");", "+                        formatterArg.append(project.resolveFile(test.getOutfile()", "+                                                                +fe.getExtension())", "+                                            .getAbsolutePath());", "+                    }", "+                    cmd.createArgument().setValue(formatterArg.toString());", "+                    formatterArg.setLength(0);", "-                    cmd.createArgument().setValue(\"formatter=\" +", "-                                                  add[i].getClassname() + \",\"", "-                                                  + project.resolveFile(test.getOutfile()", "-                                                                               +add[i].getExtension()).getAbsolutePath());", "+                    formatterArg.append(\"formatter=\");", "+                    formatterArg.append(add[i].getClassname());", "+                    if (add[i].getUseFile()) {", "+                        formatterArg.append(\",\");", "+                        formatterArg.append(project.resolveFile(test.getOutfile()", "+                                                                +add[i].getExtension())", "+                                            .getAbsolutePath());", "+                    }", "+                    cmd.createArgument().setValue(formatterArg.toString());", "+                    formatterArg.setLength(0);", "+                log(\"Executing: \"+cmd.toString(), Project.MSG_VERBOSE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db196a7e0835480362dc60c0a42c214d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "2a816a5361ec39c8693a6a4bbac559ffe5948c6e", "commitAfterChange": "f2d32ac66d804c5dfeb14adcfa0ab31ff8f648e8", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 95, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+            ", "+            // If an initial command was configured then send it.", "+            // Some FTP servers offer different modes of operation,", "+            // E.G. switching between a UNIX file system mode and", "+            // a legacy file system.", "+            if (this.initialSiteCommand != null) {", "+                RetryHandler h = new RetryHandler(this.retriesAllowed, this);", "+                final FTPClient lftp = ftp;", "+                executeRetryable(h, new Retryable() {", "+                    public void execute() throws IOException {", "+                        doSiteCommand(lftp, FTP.this.initialSiteCommand);", "+                    }", "+                }, \"initial site command: \"+ this.initialSiteCommand);", "+            }", "+", "-                doSiteCommand(ftp, \"umask \" + umask);", "+                RetryHandler h = new RetryHandler(this.retriesAllowed, this);", "+                final FTPClient lftp = ftp;", "+                executeRetryable(h, new Retryable() {", "+                    public void execute() throws IOException {", "+                        doSiteCommand(lftp, \"umask \" + umask);", "+                    }", "+                }, \"umask \" + umask);", "+            } else if (action == SITE_CMD) {", "+                    RetryHandler h = new RetryHandler(this.retriesAllowed, this);", "+                    final FTPClient lftp = ftp;", "+                    executeRetryable(h, new Retryable() {", "+                        public void execute() throws IOException {", "+                            doSiteCommand(lftp, FTP.this.siteCommand);", "+                        }", "+                    }, \"Site Command: \" + this.siteCommand);"]}]}
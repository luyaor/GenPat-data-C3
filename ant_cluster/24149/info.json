{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c12dcbe433be384aa5c72465b0460413", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b8927f591f344fff9906d287e2c5396", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/PropertyFile.java", "commitBeforeChange": "334ac128fea4c6e8e76c7c8af8061a47b5019bf4", "commitAfterChange": "ba37bf7991e099b567f8cd5a09178893ff55bb9c", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 18, "signatureBeforeChange": "         private void executeInteger(String oldValue) throws BuildException", "signatureAfterChange": "         private void executeInteger(String oldValue) throws BuildException", "diff": ["-        private void executeInteger(String oldValue) throws BuildException ", "+        private void executeInteger(String oldValue) throws BuildException", "-            String newValue = \"\";", "-            int currentValue = 0;", "-            try ", "-            {", "-                currentValue = new Integer(oldValue).intValue();", "+            int value = 0;", "+            int newValue  = 0;", "+", "+            DecimalFormat fmt = (m_pattern != null) ? new DecimalFormat(m_pattern)", "+                                                    : new DecimalFormat();", "+", "+            if (m_value != null) {", "+                try {", "+                    value = fmt.parse(m_value).intValue();", "+                }", "+                catch (NumberFormatException nfe) { /* swollow */ }", "+                catch (ParseException pe)  { /* swollow */ }", "-            catch (NumberFormatException nfe) ", "-            {", "-                // Do nothing", "+            if (oldValue != null) {", "+                try {", "+                    newValue = fmt.parse(oldValue).intValue();", "+                }", "+                catch (NumberFormatException nfe) { /* swollow */ }", "+                catch (ParseException pe)  { /* swollow */ }", "+            }", "+            else if (m_default != null) {", "+                try {", "+                    newValue = fmt.parse(m_default).intValue();", "+                }", "+                catch (NumberFormatException nfe) { /* swollow */ }", "+                catch (ParseException pe)  { /* swollow */ }", "-            if (m_operation.equals(INCREMENT_OPER)) ", "-            {", "-                currentValue++;", "-                m_value = new String(\"\"+currentValue);", "+            if (m_operation == Operation.EQUALS_OPER) {", "+                newValue = value;", "-            else if (m_operation.equals(DECREMENT_OPER)) ", "-            {", "-                currentValue--;", "-                m_value = new String(\"\"+currentValue);", "+            else if (m_operation == Operation.INCREMENT_OPER) {", "+                newValue += value;", "+            }", "+            else if (m_operation == Operation.DECREMENT_OPER) {", "+                newValue -= value;", "+            }", "+            m_value = fmt.format(newValue);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab0149d9e2e19f0b2399ff35b0e93020", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "00d986bfdc4e0fd94afd90429515632e0d702e70", "commitAfterChange": "b5324fb76804f9e6ea2e7b7e5fda34874fd514cc", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public static void parsePropertyString(String value, Vector fragments,                                             Vector propertyRefs)         throws BuildException", "signatureAfterChange": "     public static void parsePropertyString(String value, Vector fragments,                                             Vector propertyRefs)         throws BuildException", "diff": ["-        throws BuildException {", "-        int prev = 0;", "-        int pos;", "-        //search for the next instance of $ from the 'prev' position", "-        while ((pos = value.indexOf(\"$\", prev)) >= 0) {", "-", "-            //if there was any text before this, add it as a fragment", "-            //TODO, this check could be modified to go if pos>prev;", "-            //seems like this current version could stick empty strings", "-            //into the list", "-            if (pos > 0) {", "-                fragments.addElement(value.substring(prev, pos));", "-            }", "-            //if we are at the end of the string, we tack on a $", "-            //then move past it", "-            if (pos == (value.length() - 1)) {", "-                fragments.addElement(\"$\");", "-                prev = pos + 1;", "-            } else if (value.charAt(pos + 1) != '{') {", "-                //peek ahead to see if the next char is a property or not", "-                //not a property: insert the char as a literal", "-                /*", "-                fragments.addElement(value.substring(pos + 1, pos + 2));", "-                prev = pos + 2;", "-                */", "-                if (value.charAt(pos + 1) == '$') {", "-                    //backwards compatibility two $ map to one mode", "-                    fragments.addElement(\"$\");", "-                    prev = pos + 2;", "-                } else {", "-                    //new behaviour: $X maps to $X for all values of X!='$'", "-                    fragments.addElement(value.substring(pos, pos + 2));", "-                    prev = pos + 2;", "-                }", "-                ", "-            } else {", "-                //property found, extract its name or bail on a typo", "-                int endName = value.indexOf('}', pos);", "-                if (endName < 0) {", "-                    throw new BuildException(\"Syntax error in property: \"", "-                                                 + value);", "-                }", "-                String propertyName = value.substring(pos + 2, endName);", "-                fragments.addElement(null);", "-                propertyRefs.addElement(propertyName);", "-                prev = endName + 1;", "-            }", "-        }", "-        //no more $ signs found", "-        //if there is any tail to the file, append it", "-        if (prev < value.length()) {", "-            fragments.addElement(value.substring(prev));", "-        }", "+        throws BuildException", "+    {", "+        PropertyHelper.parsePropertyStringDefault(value, fragments,", "+                propertyRefs);"]}]}
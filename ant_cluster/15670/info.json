{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9cc2109ab88558e40b60fcb0abffd6b2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "410a556b8cd7ba9bfc3ee21f79059f5e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Expand.java", "commitBeforeChange": "dc00bd536bd6a1cd2bae07cecc352c085a8a0f9d", "commitAfterChange": "80d371a3b4e1ba3f845e1b9a8f831fd6a11fafd5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        ", "+", "+        if (source == null && filesets.size() == 0) {", "+            throw new BuildException(\"src attribute and/or filesets must be specified\");", "+        }", "+", "+        if (dest == null && outFile == null) {", "+            throw new BuildException(", "+                \"Dest and/or the OutFile attribute \" +", "+                \"must be specified\");", "+        }", "+", "+        if (dest != null && dest.exists() && !dest.isDirectory()) {", "+            throw new BuildException(\"Dest must be a directory.\", location);", "+        }", "+", "+        if (verbose && outFile == null) {", "+            throw new BuildException(", "+                \"Verbose can be set only when OutFile is \" +", "+                \"specified\");", "+        }", "-        ", "-        if (source == null) {", "-            throw new BuildException(\"Source attribute must be specified\");", "-        }", "-        if (dest == null) {", "-            throw new BuildException(\"Dest attribute must be specified\");", "-        }", "-        if (source.isDirectory()) {", "-            // get all the files in the descriptor directory", "-            DirectoryScanner ds = super.getDirectoryScanner(source);", "-    ", "-            String[] files = ds.getIncludedFiles();", "-            for (int i = 0; i < files.length; ++i) {", "-                File file = new File(source, files[i]);", "-                expandFile(touch, file, dest);", "+        try {", "+            if (outFile != null) {", "+                if (outFile.isDirectory()) {", "+                    throw new BuildException(\"Outfile \" + outFile", "+                        + \" must not be a directory.\");", "+                }", "+                if (!outFile.exists()) {", "+                    File parent = new File(outFile.getParent());", "+                    if (!parent.exists()) {", "+                        if (!parent.mkdirs()) {", "+                            throw new BuildException(\"Unable to create \"", "+                                + outFile);", "+                        }", "+                    }", "+                }", "+                fw = new FileWriter(outFile);", "+                bw = new BufferedWriter(fw);", "+                pw = new PrintWriter(bw, true);", "+            }", "+        } catch (IOException ioe) {", "+            throw new BuildException(ioe.getMessage(), location);", "+        }", "+        if (source != null) {", "+            if (source.isDirectory()) {", "+                // get all the files in the descriptor directory", "+                DirectoryScanner ds = super.getDirectoryScanner(source);", "+", "+                String[] files = ds.getIncludedFiles();", "+                for (int i = 0; i < files.length; ++i) {", "+                    File file = new File(source, files[i]);", "+                    expandFile(touch, file, dest);", "+                }", "+            }", "+            else {", "+                expandFile(touch, source, dest);", "-        else {", "-            expandFile(touch, source, dest);", "+        if (filesets.size() > 0) {", "+            for (int j=0; j < filesets.size(); j++) {", "+                FileSet fs = (FileSet) filesets.elementAt(j);", "+                DirectoryScanner ds = fs.getDirectoryScanner(project);", "+                File fromDir = fs.getDir(project);", "+", "+                String[] files = ds.getIncludedFiles();", "+                for (int i = 0; i < files.length; ++i) {", "+                    File file = new File(fromDir, files[i]);", "+                    expandFile(touch, file, dest);", "+                }", "+            }", "+        }", "+        try {", "+            if (pw != null) {", "+                pw.close();", "+            }", "+            if (bw != null) {", "+                bw.close();", "+            }", "+            if (fw != null) {", "+                fw.close();", "+            }", "+        } catch (IOException ioe1) {", "+            //Oh, well!  We did our best"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cadc425db064c50574551c1f5faed215", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Ant.java", "commitBeforeChange": "5e2008922a1fe38ae7867c07cfd049e247e95f1e", "commitAfterChange": "c672e8778ed4d0f929d9bb413532a4b2e421fa16", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        String savedTarget = target;", "+        Vector locals = new Vector(targets);", "-            log(\"calling target \" + (target != null ? target : \"[default]\")", "-                    + \" in build file \" +  antFile, Project.MSG_VERBOSE);", "+            log(\"calling target(s) \"", "+                + ((locals.size() == 0) ? locals.toString() : \"[default]\")", "+                + \" in build file \" + antFile, Project.MSG_VERBOSE);", "-            if (target == null) {", "-                target = newProject.getDefaultTarget();", "+            if (locals.size() == 0) {", "+                String defaultTarget = newProject.getDefaultTarget();", "+                if (defaultTarget != null) {", "+                    locals.add(defaultTarget);", "+                }", "-                if (owningTargetName.equals(target)) {", "+                if (locals.contains(owningTargetName)) {", "-                    Target other =", "-                        (Target) getProject().getTargets().get(target);", "-                    if (other != null && other.dependsOn(owningTargetName)) {", "+                    boolean circular = false;", "+                    for (Iterator it = locals.iterator(); !circular && it.hasNext();) {", "+                        Target other = (Target)(getProject().getTargets().get(", "+                            (String)(it.next())));", "+                        circular |= (other != null", "+                            && other.dependsOn(owningTargetName));", "+                    }", "+                    if (circular) {", "-            if (target != null && !\"\".equals(target)) {", "+            if (locals.size() > 0 && !(locals.size() == 1 && locals.get(0) == \"\")) {", "-                    newProject.executeTarget(target);", "+                    String[] nameArray =", "+                        (String[])(locals.toArray(new String[locals.size()]));", "+", "+                    Hashtable targets = newProject.getTargets();", "+                    Vector sortedTargets = newProject.topoSort(nameArray, targets);", "+", "+                    sortedTargets.setSize(sortedTargets.indexOf(targets.get(", "+                        locals.lastElement())) + 1);", "+                    newProject.executeSortedTargets(sortedTargets);", "-            target = savedTarget;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a8bcd7331f6be67977ea382cbba259a7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f9296b12e37eb466349a9a420b0b5d7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Delete.java", "commitBeforeChange": "40bf7243ac6b80a6aca5f4a56b6634b7018db629", "commitAfterChange": "2c8c53f98ad69042c3ecb1dbbb6844c8a7cc4020", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "   public void execute() throws BuildException", "diff": ["+   */", "+  public void execute() throws BuildException {", "+", "+    if (f == null && delDir == null) {", "+      throw new BuildException(\"<file> or <dir> attribute must be set!\");", "-    public void execute() throws BuildException {", "-        if (f.exists()) {", "-            if (f.isDirectory()) { ", "-                project.log(\"Directory: \" + f.getAbsolutePath() + ", "-                    \" cannot be removed with delete.  Use Deltree instead.\");", "-            } else {", "-                project.log(\"Deleting: \" + f.getAbsolutePath());", "-                f.delete();", "-            }", "+    // old <delete> functionality must still work", "+    if (f != null) {", "+      if (f.exists()) {", "+        if (f.isDirectory()) {", "+          project", "+            .log(\"Directory: \" + f.getAbsolutePath()", "+                 + \" cannot be removed with delete.  Use Deltree instead.\");", "+        else {", "+          project.log(\"Deleting: \" + f.getAbsolutePath());", "+          f.delete();", "+        }", "+      }", "+", "+    // now we'll do the fancy pattern-driven deletes", "+    if (delDir == null) {", "+      return;", "+    }", "+    if (!delDir.exists()) {", "+      throw new BuildException(\"dir does not exist!\");", "+    }", "+    DirectoryScanner ds    = super.getDirectoryScanner(delDir);", "+    String[]         files = ds.getIncludedFiles();", "+", "+    if (files.length > 0) {", "+      project.log(\"Deleting \" + files.length + \" files from \" + delDir.getAbsolutePath());", "+      for (int i = 0; i < files.length; i++) {", "+        File f = new File(delDir, files[i]);", "+", "+        if (f.exists()) {", "+          project.log(\"Deleting: \" + f.getAbsolutePath(), verbosity);", "+          f.delete();", "+        }", "+      }", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "839c803c40c6afaad291521ccc506add", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ExecutionFrame.java", "commitBeforeChange": "e0fef5cf64773a98734998b9736ded96fc8be2c7", "commitAfterChange": "81c17b6164451315e24ae774f1bed668cbca99ce", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 28, "signatureBeforeChange": "     private AntLibFactory getLibFactory(AntLibrary antLibrary)          throws ExecutionException", "signatureAfterChange": "     private void determineBaseDirs() throws ExecutionException", "diff": ["-    private AntLibFactory getLibFactory(AntLibrary antLibrary)", "-         throws ExecutionException {", "-        String libraryId = antLibrary.getLibraryId();", "-        if (libFactories.containsKey(libraryId)) {", "-            return (AntLibFactory)libFactories.get(libraryId);", "+    private void determineBaseDirs() throws ExecutionException {", "+        if (isDataValueSet(BASEDIR_PROP)) {", "+            baseDir = new File(getDataValue(BASEDIR_PROP).toString());", "+        } else {", "+            URL projectURL = project.getSourceURL();", "+            if (projectURL.getProtocol().equals(\"file\")) {", "+                File projectFile = new File(projectURL.getFile());", "+                File projectFileParent = projectFile.getParentFile();", "+                String base = project.getBase();", "+                if (base == null) {", "+                    baseDir = projectFileParent;", "+                } else {", "+                    FileUtils fileUtils = new FileUtils();", "+                    baseDir = fileUtils.resolveFile(projectFileParent, base);", "+                }", "+            } else {", "+                baseDir = new File(\".\");", "+            }", "+            setDataValue(BASEDIR_PROP, baseDir.getPath(), true);", "-        AntLibFactory libFactory = antLibrary.getFactory();", "-        if (libFactory == null) {", "-            libFactory = new StandardLibFactory();", "+", "+        for (Iterator i = getReferencedFrames(); i.hasNext(); ) {", "+            ExecutionFrame refFrame = (ExecutionFrame)i.next();", "+            refFrame.determineBaseDirs();", "-        libFactories.put(libraryId, libFactory);", "-        libFactory.init(new ExecutionContext(this, eventSupport));", "-        return libFactory;"]}]}
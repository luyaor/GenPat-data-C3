{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3f118fae667b313bef57f06475fa68c8", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdf558b399cf9e1b239b202ef8141748", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/SchemaValidateTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void testNoDoubleSchemaLocation() throws Exception", "signatureAfterChange": "      @Test     public void testNoDoubleSchemaLocation() throws Exception", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testNoDoubleSchemaLocation\",", "-                \"two locations for schemas\",", "-                SchemaValidate.SchemaLocation.ERROR_TWO_LOCATIONS);", "+        try {", "+            buildRule.executeTarget(\"testNoDoubleSchemaLocation\");", "+            fail(\"Two locations for schemas\");", "+        } catch (BuildException ex) {", "+            AntAssert.assertContains(SchemaValidate.SchemaLocation.ERROR_TWO_LOCATIONS,", "+                    ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec886c62aa3eeaeb33b3e94ad8fdccd9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/SchemaValidateTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void testNoEmptySchemaLocation() throws Exception", "signatureAfterChange": "      @Test     public void testNoEmptySchemaLocation() throws Exception", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testNoEmptySchemaLocation\",", "-                \"empty schema location\",", "-                SchemaValidate.SchemaLocation.ERROR_NO_LOCATION);", "+        try {", "+            buildRule.executeTarget(\"testNoEmptySchemaLocation\");", "+            fail(\"Empty schema location\");", "+        } catch (BuildException ex) {", "+            AntAssert.assertContains(SchemaValidate.SchemaLocation.ERROR_NO_LOCATION,", "+                    ex.getMessage());", "+        }"]}]}
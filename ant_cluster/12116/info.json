{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c76fdca2c0b0d70a1e9229123ab984cf", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23bd1dae39726ce5f0f74095a3fed90e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/builder/DefaultProjectBuilder.java", "commitBeforeChange": "b3c44651dba0b0dd33a68baab7afdb4175d6fe93", "commitAfterChange": "f522a0a7baf7e79ed933ed7714e6c6c15c51ac0a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private void buildProjectRef( final DefaultProject project,                                   final Configuration element,                                   final HashMap projects )         throws Exception", "signatureAfterChange": "      private void buildProjectRef( final DefaultProject project,                                   final Configuration element,                                   final HashMap projects )         throws Exception", "diff": ["-            throw new Exception( \"Malformed projectref without a name attribute at \" +", "-                                 element.getLocation() );", "+            final String message = ", "+                REZ.getString( \"ant.projectref-no-name.error\", element.getLocation() );", "+            throw new Exception( message );", "-            throw new Exception( \"Projectref with an invalid name attribute at \" +", "-                                 element.getLocation() );", "+            final String message = ", "+                REZ.getString( \"ant.projectref-bad-name.error\", element.getLocation() );", "+            throw new Exception( message );", "-            throw new Exception( \"Malformed projectref without a location attribute at \" +", "-                                 element.getLocation() );", "+            final String message = ", "+                REZ.getString( \"ant.projectref-no-location.error\", element.getLocation() );", "+            throw new Exception( message );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "316e0dfae94d3d6e83aba608d34f45c9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/workspace/DefaultWorkspace.java", "commitBeforeChange": "a3bafc4dc65a60091a09c190752987fa491412e1", "commitAfterChange": "c748e33dc59acb6c057543af70964487dedf97c3", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private void executeTarget( final String name,                                 final Target target,                                 final ExecutionFrame frame )         throws TaskException", "signatureAfterChange": "     private void executeTarget( final String name,                                 final Target target,                                 final ExecutionFrame frame )         throws TaskException", "diff": ["-                    getLogger().debug( \"Skipping target \" + name +", "-                                       \" as it does not satisfy condition\" );", "+                    final String message = REZ.getString( \"skip-target.notice\", name );", "+                    getLogger().debug( message );", "-                throw new TaskException( \"Error evaluating Condition for target \" + ", "-                                         name, ce );", "+                final String message = REZ.getString( \"condition-eval.error\", name );", "+                throw new TaskException( message, ce );", "-        getLogger().debug( \"Executing target \" + name );", "+        final String message = REZ.getString( \"exec-target.notice\", name );", "+        getLogger().debug( message );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f150316da33fc7520fd47fa5e2f7ec96", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/workspace/DefaultTaskContext.java", "commitBeforeChange": "5f35e5e952c7732af5b98e484a87b8a90d8f2fa4", "commitAfterChange": "f09afe103c9bd8540483fbdafab92df1cdf049e2", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     protected void checkPropertyValid( final String name, final Object value )         throws TaskException", "signatureAfterChange": "     protected void checkPropertyValid( final String name, final Object value )         throws TaskException", "diff": ["-            throw new TaskException( \"Property \" + BASE_DIRECTORY +", "-                                     \" must have a value of type \" +", "-                                     File.class.getName() );", "+            final String message = ", "+                REZ.getString( \"bad-property.error\", BASE_DIRECTORY, File.class.getName() );", "+            throw new TaskException( message );", "-            throw new TaskException( \"Property \" + NAME +", "-                                     \" must have a value of type \" +", "-                                     String.class.getName() );", "+            final String message = ", "+                REZ.getString( \"bad-property.error\", NAME, String.class.getName() );", "+            throw new TaskException( message );", "-            throw new TaskException( \"Property \" + JAVA_VERSION +", "-                                     \" must have a value of type \" +", "-                                     JavaVersion.class.getName() );", "+            final String message = ", "+                REZ.getString( \"bad-property.error\", JAVA_VERSION, JavaVersion.class.getName() );", "+            throw new TaskException( message );"]}]}
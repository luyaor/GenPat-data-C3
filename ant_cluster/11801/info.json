{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e0c48b5e8f4ffe3b9e39053ab72ffd52", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a00e4d7f60b8adb3c88db162bfed14f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/taskdefs/IContract.java", "commitBeforeChange": "6a20789293e6588a94560a11697fb59dd0d9338c", "commitAfterChange": "d319ab594b9d0b5a3a2ee264845172ca590496f3", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public void execute()         throws TaskException", "signatureAfterChange": "     public void execute()         throws TaskException", "diff": ["-            Path beforeInstrumentationClasspath = ( (Path)baseClasspath.clone() );", "-            beforeInstrumentationClasspath.append( new Path( srcDir.getAbsolutePath() ) );", "+            Path beforeInstrumentationClasspath = new Path();", "+            beforeInstrumentationClasspath.addPath( baseClasspath );", "+            beforeInstrumentationClasspath.addLocation( srcDir );", "-            Path afterInstrumentationClasspath = ( (Path)baseClasspath.clone() );", "-            afterInstrumentationClasspath.append( new Path( instrumentDir.getAbsolutePath() ) );", "-            afterInstrumentationClasspath.append( new Path( repositoryDir.getAbsolutePath() ) );", "-            afterInstrumentationClasspath.append( new Path( srcDir.getAbsolutePath() ) );", "-            afterInstrumentationClasspath.append( new Path( buildDir.getAbsolutePath() ) );", "+            Path afterInstrumentationClasspath = new Path();", "+            afterInstrumentationClasspath.addPath( baseClasspath );", "+            afterInstrumentationClasspath.addLocation( instrumentDir );", "+            afterInstrumentationClasspath.addLocation( repositoryDir );", "+            afterInstrumentationClasspath.addLocation( srcDir );", "+            afterInstrumentationClasspath.addLocation( buildDir );", "-            Path repositoryClasspath = ( (Path)baseClasspath.clone() );", "-            repositoryClasspath.append( new Path( instrumentDir.getAbsolutePath() ) );", "-            repositoryClasspath.append( new Path( srcDir.getAbsolutePath() ) );", "-            repositoryClasspath.append( new Path( repositoryDir.getAbsolutePath() ) );", "-            repositoryClasspath.append( new Path( buildDir.getAbsolutePath() ) );", "+            Path repositoryClasspath = new Path();", "+            repositoryClasspath.addPath( baseClasspath );", "+            repositoryClasspath.addLocation( instrumentDir );", "+            repositoryClasspath.addLocation( srcDir );", "+            repositoryClasspath.addLocation( repositoryDir );", "+            repositoryClasspath.addLocation( buildDir );", "-            Path iContractClasspath = ( (Path)baseClasspath.clone() );", "-            iContractClasspath.append( new Path( System.getProperty( \"java.home\" ) + File.separator + \"..\" + File.separator + \"lib\" + File.separator + \"tools.jar\" ) );", "-            iContractClasspath.append( new Path( srcDir.getAbsolutePath() ) );", "-            iContractClasspath.append( new Path( repositoryDir.getAbsolutePath() ) );", "-            iContractClasspath.append( new Path( instrumentDir.getAbsolutePath() ) );", "-            iContractClasspath.append( new Path( buildDir.getAbsolutePath() ) );", "+            Path iContractClasspath = new Path();", "+            iContractClasspath.addPath( baseClasspath );", "+            iContractClasspath.addLocation( new File(System.getProperty( \"java.home\" ) + File.separator + \"..\" + File.separator + \"lib\" + File.separator + \"tools.jar\" ) );", "+            iContractClasspath.addLocation( srcDir );", "+            iContractClasspath.addLocation( repositoryDir );", "+            iContractClasspath.addLocation( instrumentDir );", "+            iContractClasspath.addLocation( buildDir );", "-                iControlProps.setProperty( \"classpath\", afterInstrumentationClasspath.toString() );", "+                iControlProps.setProperty( \"classpath\", PathUtil.formatPath( afterInstrumentationClasspath ) );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7d7b2666b5001de09993c5f46c77918", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/util/FileUtilsTest.java", "commitBeforeChange": "ad6b39a6207abd8443094050224f58dc1afda3b9", "commitAfterChange": "94dd480d07ac2028fc94d46a253abcd2ddb189a8", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void testCreateTempFile()", "signatureAfterChange": "     public void testCreateTempFile()", "diff": ["-    // null parent dir", "-    File tmp1 = FILE_UTILS.createTempFile(\"pre\", \".suf\", null, false);", "-    String  tmploc = System.getProperty(\"java.io.tmpdir\");", "-    String name = tmp1.getName();", "-    assertTrue(\"starts with pre\", name.startsWith(\"pre\"));", "-    assertTrue(\"ends with .suf\", name.endsWith(\".suf\"));", "-    assertTrue(\"File was created\", tmp1.exists());", "-    assertEquals((new File(tmploc, tmp1.getName())).getAbsolutePath(),", "-                 tmp1.getAbsolutePath());", "-    tmp1.delete();", "-    ", "-    File dir2 = new File(tmploc+\"/ant-test\");", "-    dir2.mkdir();", "-    removeThis = dir2;", "-    ", "-    File tmp2 = FILE_UTILS.createTempFile(\"pre\", \".suf\", dir2, true);", "-    String name2 = tmp2.getName();", "-    assertTrue(\"starts with pre\", name2.startsWith(\"pre\"));", "-    assertTrue(\"ends with .suf\", name2.endsWith(\".suf\"));", "-    assertTrue(\"File was created\", tmp2.exists());", "-    assertEquals((new File(dir2, tmp2.getName())).getAbsolutePath(),", "-                 tmp2.getAbsolutePath());", "-    tmp2.delete();", "-    dir2.delete();", "-    }", "+        // null parent dir", "+        File tmp1 = FILE_UTILS.createTempFile(\"pre\", \".suf\", null, false, true);", "+        String tmploc = System.getProperty(\"java.io.tmpdir\");", "+        assertTrue(\"File was created\", tmp1.exists());", "+        assertEquals((new File(tmploc, tmp1.getName())).getAbsolutePath(), tmp1", "+                .getAbsolutePath());", "+        tmp1.delete();", "+        File dir2 = new File(tmploc + \"/ant-test\");", "+        dir2.mkdir();", "+        removeThis = dir2;", "+", "+        File tmp2 = FILE_UTILS.createTempFile(\"pre\", \".suf\", dir2, true, true);", "+        String name2 = tmp2.getName();", "+        assertTrue(\"starts with pre\", name2.startsWith(\"pre\"));", "+        assertTrue(\"ends with .suf\", name2.endsWith(\".suf\"));", "+        assertTrue(\"File was created\", tmp2.exists());", "+        assertEquals((new File(dir2, tmp2.getName())).getAbsolutePath(), tmp2", "+                .getAbsolutePath());", "+        tmp2.delete();", "+        dir2.delete();", "+", "+        File parent = new File((new File(\"/tmp\")).getAbsolutePath());", "+        tmp1 = FILE_UTILS.createTempFile(\"pre\", \".suf\", parent, false);", "+        assertTrue(\"new file\", !tmp1.exists());", "+", "+        name = tmp1.getName();", "+        assertTrue(\"starts with pre\", name.startsWith(\"pre\"));", "+        assertTrue(\"ends with .suf\", name.endsWith(\".suf\"));", "+        assertEquals(\"is inside parent dir\", parent.getAbsolutePath(), tmp1", "+                .getParent());", "+", "+        tmp2 = FILE_UTILS.createTempFile(\"pre\", \".suf\", parent, false);", "+        assertTrue(\"files are different\", !tmp1.getAbsolutePath().equals(", "+                tmp2.getAbsolutePath()));", "+        File tmp3 = FILE_UTILS.createTempFile(\"pre\", \".suf\", null, false);", "+        tmploc = System.getProperty(\"java.io.tmpdir\");", "+        assertEquals((new File(tmploc, tmp3.getName())).getAbsolutePath(), tmp3", "+                .getAbsolutePath());"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6fe77db36580689526bdb5bfe9443ebb", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "464f57d0cc9cfdce6c7b36c95570b661", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/image/Image.java", "commitBeforeChange": "26839fdb3234b8344a313d1bee71aff8494b3842", "commitAfterChange": "541157c5de95bf1cb2ff9f47b8aadac0b3ee98e1", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void processFile(File file)", "signatureAfterChange": "     public void processFile(File file, File newFile)", "diff": ["+     */", "+    public void processFile(File file, File newFile) {", "-            FileSeekableStream input = new FileSeekableStream(file);", "-            PlanarImage image = JAI.create(\"stream\", input);", "-            for (int i = 0; i < instructions.size(); i++) {", "-                Object instr = instructions.elementAt(i);", "-                if (instr instanceof TransformOperation) {", "-                    image = ((TransformOperation) instr)", "-                        .executeTransformOperation(image);", "-                } else {", "-                    log(\"Not a TransformOperation: \" + instr);", "-                }", "-            }", "-            input.close();", "-            if (str_encoding.toLowerCase().equals(\"jpg\")) {", "-                str_encoding = \"JPEG\";", "-            } else if (str_encoding.toLowerCase().equals(\"tif\")) {", "-                str_encoding = \"TIFF\";", "+            FileSeekableStream input = null;", "+            PlanarImage image = null;", "+            try {", "+                input = new FileSeekableStream(file);", "+                image = JAI.create(\"stream\", input);", "+                for (int i = 0; i < instructions.size(); i++) {", "+                    Object instr = instructions.elementAt(i);", "+                    if (instr instanceof TransformOperation) {", "+                        image = ((TransformOperation) instr)", "+                            .executeTransformOperation(image);", "+                    } else {", "+                        log(\"Not a TransformOperation: \" + instr);", "+                    }", "+                }", "+            } finally {", "+                FileUtils.close(input);", "-            if (destDir == null) {", "-                destDir = srcDir;", "+", "+            File dstParent = newFile.getParentFile();", "+            if (!dstParent.isDirectory() && !dstParent.mkdirs()){", "+                throw new BuildException(\"Failed to create parent directory \"", "+                                         + dstParent);", "-            File newFile = new File(destDir, file.getName());", "-            FileOutputStream stream = new FileOutputStream(newFile);", "-            JAI.create(\"encode\", image, stream, str_encoding.toUpperCase(),", "-                       null);", "-            stream.flush();", "-            stream.close();", "+            FileOutputStream stream = null;", "+            try {", "+                stream = new FileOutputStream(newFile);", "+", "+                JAI.create(\"encode\", image, stream, str_encoding.toUpperCase(),", "+                           null);", "+                stream.flush();", "+            } finally {", "+                FileUtils.close(stream);", "+            }", "+            if (!file.equals(newFile)){", "+                newFile.delete();", "+            }", "+            if (!file.equals(newFile)){", "+                newFile.delete();", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e5ac01ae0bc20bddaee612a3ecee0d1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Replace.java", "commitBeforeChange": "79ab8ae1d59ed007337a3657ac5c6c78107cc0d8", "commitAfterChange": "c8c751af8ea4cb0607690327d79a0b56d6054925", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private void processFile(File src) throws BuildException", "signatureAfterChange": "     private void processFile(File src) throws BuildException", "diff": ["-        File temp = fileUtils.createTempFile(\"rep\", \".tmp\",", "-                                             fileUtils.getParentFile(src));", "-        temp.deleteOnExit();", "-", "+        File temp = null;", "-            writer = encoding == null ? new FileWriter(temp)", "-                : new OutputStreamWriter(new FileOutputStream(temp), encoding);", "-            BufferedWriter bw = new BufferedWriter(writer);", "+            br.close();", "+            reader = null;", "+", "-            //Preserve original string (buf) so we can compare the result", "-            String newString = new String(buf);", "+            StringBuffer buffer = new StringBuffer(buf);", "+            buf = null;", "-            if (token != null) {", "-                // line separators in values and tokens are \"\\n\"", "-                // in order to compare with the file contents, replace them", "-                // as needed", "-                String val = stringReplace(value.getText(), \"\\r\\n\",", "-                                           \"\\n\", false);", "-                val = stringReplace(val, \"\\n\",", "-                                           StringUtils.LINE_SEP, false);", "-                String tok = stringReplace(token.getText(), \"\\r\\n\",", "-                                            \"\\n\", false);", "-                tok = stringReplace(tok, \"\\n\",", "-                                           StringUtils.LINE_SEP, false);", "+            int repCountStart = replaceCount;", "-                // for each found token, replace with value", "-                log(\"Replacing in \" + src.getPath() + \": \" + token.getText()", "-                    + \" --> \" + value.getText(), Project.MSG_VERBOSE);", "-                newString = stringReplace(newString, tok, val, true);", "-            }", "+            processReplacefilters(buffer, src.getPath());", "-            if (replacefilters.size() > 0) {", "-                newString = processReplacefilters(newString, src.getPath());", "-            }", "-", "-            boolean changes = !newString.equals(buf);", "+            boolean changes = (replaceCount != repCountStart);", "-                bw.write(newString, 0, newString.length());", "+                String out = buffer.toString();", "+                temp = fileUtils.createTempFile(\"rep\", \".tmp\",", "+                        src.getParentFile());", "+                temp.deleteOnExit();", "+                writer = encoding == null ? new FileWriter(temp)", "+                        : new OutputStreamWriter(new FileOutputStream(temp), encoding);", "+                BufferedWriter bw = new BufferedWriter(writer);", "+                bw.write(out, 0, out.length());", "-            }", "-", "-            // cleanup", "-            bw.close();", "-            writer = null;", "-            br.close();", "-            reader = null;", "-", "-            // If there were changes, move the new one to the old one;", "-            // otherwise, delete the new one", "-            if (changes) {", "+                bw.close();", "+                writer = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abf1fe573a136c04d25597a37dae0f69", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Replace.java", "commitBeforeChange": "c28ec7da7aefa85051bcb81e0eea06c74e17342a", "commitAfterChange": "50c1cfa5726c79d5184a0c9d258afb159a5e0899", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 32, "signatureBeforeChange": "     private void processFile(File src) throws BuildException", "signatureAfterChange": "     private void processFile(File src) throws BuildException", "diff": ["-        File temp = null;", "-        FileInput in = null;", "-        FileOutput out = null;", "+        int repCountStart = replaceCount;", "+        logFilterChain(src.getPath());", "+", "-            in = new FileInput(src);", "-", "-            temp = FILE_UTILS.createTempFile(\"rep\", \".tmp\",", "+            File temp = FILE_UTILS.createTempFile(\"rep\", \".tmp\",", "-            out = new FileOutput(temp);", "+            try {", "+                FileInput in = new FileInput(src);", "+                try {", "+                    FileOutput out = new FileOutput(temp);", "+                    try {", "+                        out.setInputBuffer(buildFilterChain(in.getOutputBuffer()));", "-            int repCountStart = replaceCount;", "+                        while (in.readChunk()) {", "+                            if (processFilterChain()) {", "+                                out.process();", "+                            }", "+                        }", "-            logFilterChain(src.getPath());", "+                        flushFilterChain();", "-            out.setInputBuffer(buildFilterChain(in.getOutputBuffer()));", "-", "-            while (in.readChunk()) {", "-                if (processFilterChain()) {", "-                    out.process();", "+                        out.flush();", "+                    } finally {", "+                        out.close();", "+                    }", "+                } finally {", "+                    in.close();", "-            }", "-", "-            flushFilterChain();", "-", "-            out.flush();", "-            in.close();", "-            in = null;", "-            out.close();", "-            out = null;", "-", "-            boolean changes = (replaceCount != repCountStart);", "-            if (changes) {", "-                fileCount++;", "-                long origLastModified = src.lastModified();", "-                FILE_UTILS.rename(temp, src);", "-                if (preserveLastModified) {", "-                    FILE_UTILS.setFileLastModified(src, origLastModified);", "+                boolean changes = (replaceCount != repCountStart);", "+                if (changes) {", "+                    fileCount++;", "+                    long origLastModified = src.lastModified();", "+                    FILE_UTILS.rename(temp, src);", "+                    if (preserveLastModified) {", "+                        FILE_UTILS.setFileLastModified(src, origLastModified);", "+                    }", "-                temp = null;", "+            } finally {", "+                if (temp.isFile() && !temp.delete()) {", "+                    temp.deleteOnExit();", "+                }", "-        } finally {", "-            if (null != in) {", "-                in.closeQuietly();", "-            }", "-            if (null != out) {", "-                out.closeQuietly();", "-            }", "-            if (temp != null) {", "-                if (!temp.delete()) {", "-                    temp.deleteOnExit();", "-                }", "-            }"]}]}
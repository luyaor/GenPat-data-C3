{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "469872f4664a6f8a1615549d15bb98d0", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0941ff6bb59c70d65a52b8ee176c36c7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/DOMElementWriter.java", "commitBeforeChange": "7ad041a63e3584527e97f2d931906e499ef9e348", "commitAfterChange": "b746aeaa3768fb8b9fbe7eddd3bdc4eb59bfc13a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void write(Element element, Writer out, int indent,                       String indentWith)         throws IOException", "signatureAfterChange": "     public void write(Element element, Writer out, int indent,                       String indentWith)         throws IOException", "diff": ["-        openElement(element, out, indent, indentWith);", "-", "-        boolean hasChildren = false;", "-        for (int i = 0; i < children.getLength(); i++) {", "-            Node child = children.item(i);", "+        boolean hasChildren = (children.getLength() > 0);", "+        openElement(element, out, indent, indentWith, hasChildren);", "-            switch (child.getNodeType()) {", "-", "-            case Node.ELEMENT_NODE:", "-                if (!hasChildren) {", "-                    out.write(lSep);", "-                    hasChildren = true;", "+        if (hasChildren) {", "+            for (int i = 0; i < children.getLength(); i++) {", "+                Node child = children.item(i);", "+    ", "+                switch (child.getNodeType()) {", "+    ", "+                case Node.ELEMENT_NODE:", "+                    if (i == 0) {", "+                        out.write(lSep);", "+                    }", "+                    write((Element) child, out, indent + 1, indentWith);", "+                    break;", "+    ", "+                case Node.TEXT_NODE:", "+                    out.write(encode(child.getNodeValue()));", "+                    break;", "+    ", "+                case Node.COMMENT_NODE:", "+                    out.write(\"<!--\");", "+                    out.write(encode(child.getNodeValue()));", "+                    out.write(\"-->\");", "+                    break;", "+    ", "+                case Node.CDATA_SECTION_NODE:", "+                    out.write(\"<![CDATA[\");", "+                    out.write(encodedata(((Text) child).getData()));", "+                    out.write(\"]]>\");", "+                    break;", "+    ", "+                case Node.ENTITY_REFERENCE_NODE:", "+                    out.write('&');", "+                    out.write(child.getNodeName());", "+                    out.write(';');", "+                    break;", "+    ", "+                case Node.PROCESSING_INSTRUCTION_NODE:", "+                    out.write(\"<?\");", "+                    out.write(child.getNodeName());", "+                    String data = child.getNodeValue();", "+                    if (data != null && data.length() > 0) {", "+                        out.write(' ');", "+                        out.write(data);", "+                    }", "+                    out.write(\"?>\");", "+                    break;", "+                default:", "+                    // Do nothing", "-                write((Element) child, out, indent + 1, indentWith);", "-                break;", "-", "-            case Node.TEXT_NODE:", "-                out.write(encode(child.getNodeValue()));", "-                break;", "-", "-            case Node.COMMENT_NODE:", "-                out.write(\"<!--\");", "-                out.write(encode(child.getNodeValue()));", "-                out.write(\"-->\");", "-                break;", "-", "-            case Node.CDATA_SECTION_NODE:", "-                out.write(\"<![CDATA[\");", "-                out.write(encodedata(((Text) child).getData()));", "-                out.write(\"]]>\");", "-                break;", "-", "-            case Node.ENTITY_REFERENCE_NODE:", "-                out.write('&');", "-                out.write(child.getNodeName());", "-                out.write(';');", "-                break;", "-", "-            case Node.PROCESSING_INSTRUCTION_NODE:", "-                out.write(\"<?\");", "-                out.write(child.getNodeName());", "-                String data = child.getNodeValue();", "-                if (data != null && data.length() > 0) {", "-                    out.write(' ');", "-                    out.write(data);", "-                }", "-                out.write(\"?>\");", "-                break;", "-            default:", "-                // Do nothing", "+            closeElement(element, out, indent, indentWith, true);", "-", "-        closeElement(element, out, indent, indentWith, hasChildren);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87ad662bac9803dac62af53aab91661c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "596d7e465f62f4783ed3ac41870098d56d018322", "commitAfterChange": "f4fc4080573cc5711f0e2b888fe9d0af6720eaca", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     protected void printResults() throws java.sql.SQLException", "signatureAfterChange": "     protected void printResults(PrintStream out) throws java.sql.SQLException", "diff": ["-    protected void printResults() throws java.sql.SQLException {", "+    protected void printResults(PrintStream out) throws java.sql.SQLException {", "-        PrintStream out = System.out;", "-        try {", "-            if (output != null) {", "-\t\tlog(\"Opening PrintStream to output file \" + output, Project.MSG_VERBOSE);", "-                out = new PrintStream(new BufferedOutputStream(new FileOutputStream(output)));", "-            }", "-            do {", "-                rs = statement.getResultSet();", "-                if (rs != null) {", "-        \t    log(\"Processing new result set.\", Project.MSG_VERBOSE);", "-                    ResultSetMetaData md = rs.getMetaData();", "-                    int columnCount = md.getColumnCount();", "-                    StringBuffer line = new StringBuffer();", "-                    if (showheaders) {", "-                        for (int col = 1; col < columnCount; col++) {", "-                            line.append(md.getColumnName(col));", "+        do {", "+            rs = statement.getResultSet();", "+            if (rs != null) {", "+      \t        log(\"Processing new result set.\", Project.MSG_VERBOSE);", "+                ResultSetMetaData md = rs.getMetaData();", "+                int columnCount = md.getColumnCount();", "+                StringBuffer line = new StringBuffer();", "+                if (showheaders) {", "+                    for (int col = 1; col < columnCount; col++) {", "+                         line.append(md.getColumnName(col));", "+                         line.append(\",\");", "+                    }", "+                    line.append(md.getColumnName(columnCount));", "+                    out.println(line);", "+                    line.setLength(0);", "+                }", "+                while (rs.next()) {", "+                    boolean first = true;", "+                    for (int col = 1; col <= columnCount; col++) {", "+                        String columnValue = rs.getString(col);", "+                        if (columnValue != null) {", "+                            columnValue = columnValue.trim();", "+                        }", "+                         ", "+                        if (first) {", "+                            first = false;", "+                        }", "+                        else {", "-                        line.append(md.getColumnName(columnCount));", "-                        out.println(line);", "-                        line.setLength(0);", "+                        line.append(columnValue);", "-                    while (rs.next()) {", "-                        boolean first = true;", "-                        for (int col = 1; col <= columnCount; col++) {", "-                            String columnValue = rs.getString(col);", "-                            if (columnValue != null) {", "-                                columnValue = columnValue.trim();", "-                            }", "-                             ", "-                            if (first) {", "-                                first = false;", "-                            }", "-                            else {", "-                                line.append(\",\");", "-                            }", "-                            line.append(columnValue);", "-                        }", "-                        out.println(line);", "-                        line.setLength(0);", "-                    }", "+                    out.println(line);", "+                    line.setLength(0);", "-            while (statement.getMoreResults());", "-        catch (IOException ioe) {", "-            throw new BuildException(\"Error writing \" + output.getAbsolutePath(), ioe, location);", "-        }", "-        finally {", "-            if (out != null && out != System.out) {", "-                out.close();", "-            }", "-        }", "+        while (statement.getMoreResults());", "+        out.println();"]}]}
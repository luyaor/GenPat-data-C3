{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c152f97f99653b1180467d2ba85bd518", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5446599361c6101d6027848fd208af04", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "9fb2961443b0e15a6fd0be0aceed9d78e8c9cad7", "commitAfterChange": "f613801836c18d2ed1d7da7deab40f0867b99620", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+        File savedFile = file; // may be altered in validateAttributes", "+        File savedDestFile = destFile;", "+        File savedDestDir = destDir;", "+        FileSet savedFileSet = null;", "+        if (file == null && destFile != null && filesets.size() == 1) {", "+            // will be removed in validateAttributes", "+            savedFileSet = (FileSet) filesets.elementAt(0);", "+        }", "+        ", "-        // deal with the single file", "-        if (file != null) {", "-            if (file.exists()) {", "-                if (destFile == null) {", "-                    destFile = new File(destDir, file.getName());", "-                }", "+        try {", "+            ", "+            // deal with the single file", "+            if (file != null) {", "+                if (file.exists()) {", "+                    if (destFile == null) {", "+                        destFile = new File(destDir, file.getName());", "+                    }", "-                if (forceOverwrite ||", "-                    (file.lastModified() > destFile.lastModified())) {", "-                    fileCopyMap.put(file.getAbsolutePath(), destFile.getAbsolutePath());", "+                    if (forceOverwrite ||", "+                        (file.lastModified() > destFile.lastModified())) {", "+                        fileCopyMap.put(file.getAbsolutePath(), ", "+                                        destFile.getAbsolutePath());", "+                    } else {", "+                        log(file + \" omitted as \" + destFile ", "+                            + \" is up to date.\", Project.MSG_VERBOSE);", "+                    }", "-                    log(file + \" omitted as \" + destFile + \" is up to date.\",", "-                        Project.MSG_VERBOSE);", "-                }", "-            } else {", "-                String message = \"Warning: Could not find file \"", "-                                 + file.getAbsolutePath() + \" to copy.\";", "-                if(!failonerror) {", "-                    log(message);", "-                } else {", "-                    throw new BuildException(message);", "+                    String message = \"Warning: Could not find file \"", "+                        + file.getAbsolutePath() + \" to copy.\";", "+                    if(!failonerror) {", "+                        log(message);", "+                    } else {", "+                        throw new BuildException(message);", "+                    }", "-        }", "-        // deal with the filesets", "-        for (int i=0; i<filesets.size(); i++) {", "-            FileSet fs = (FileSet) filesets.elementAt(i);", "-            DirectoryScanner ds = fs.getDirectoryScanner(project);", "-            File fromDir = fs.getDir(project);", "-", "-            String[] srcFiles = ds.getIncludedFiles();", "-            String[] srcDirs = ds.getIncludedDirectories();", "-            boolean isEverythingIncluded = ds.isEverythingIncluded();", "-            if (isEverythingIncluded", "-                && !flatten && mapperElement == null) {", "-                completeDirMap.put(fromDir, destDir);", "+            // deal with the filesets", "+            for (int i=0; i<filesets.size(); i++) {", "+                FileSet fs = (FileSet) filesets.elementAt(i);", "+                DirectoryScanner ds = fs.getDirectoryScanner(project);", "+                File fromDir = fs.getDir(project);", "+                ", "+                String[] srcFiles = ds.getIncludedFiles();", "+                String[] srcDirs = ds.getIncludedDirectories();", "+                boolean isEverythingIncluded = ds.isEverythingIncluded();", "+                if (isEverythingIncluded", "+                    && !flatten && mapperElement == null) {", "+                    completeDirMap.put(fromDir, destDir);", "+                }", "+                scan(fromDir, destDir, srcFiles, srcDirs);", "-            scan(fromDir, destDir, srcFiles, srcDirs);", "-        }", "+            ", "+            // do all the copy operations now...", "+            doFileOperations();", "+        } finally {", "+            // clean up again, so this instance can be used a second", "+            // time", "+            file = savedFile;", "+            destFile = savedDestFile;", "+            destDir = savedDestDir;", "+            if (savedFileSet != null) {", "+                filesets.insertElementAt(savedFileSet, 0);", "+            }", "-        // do all the copy operations now...", "-        doFileOperations();", "-", "-        // clean up destDir again - so this instance can be used a second", "-        // time without throwing an exception", "-        if (destFile != null) {", "-            destDir = null;", "+            fileCopyMap.clear();", "+            dirCopyMap.clear();", "+            completeDirMap.clear();", "-        fileCopyMap.clear();", "-        dirCopyMap.clear();", "-        completeDirMap.clear();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0e925270e5722a6ee8246b97222566e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "5b362efc980668c8bd04aa2ea6405174bd443f16", "commitAfterChange": "d93d7b09161b9fed366062f9fc095e46e772a69e", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 29, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        FileSet savedFileSet = null;", "-        if (file == null && destFile != null && filesets.size() == 1) {", "+\tResourceCollection savedRc = null;", "+        if (file == null && destFile != null && rcs.size() == 1) {", "-            savedFileSet = (FileSet) filesets.elementAt(0);", "+\t    savedRc = (ResourceCollection) rcs.elementAt(0);", "-            // deal with the filesets", "-            for (int i = 0; i < filesets.size(); i++) {", "-                FileSet fs = (FileSet) filesets.elementAt(i);", "-                DirectoryScanner ds = null;", "-                try {", "-                    ds = fs.getDirectoryScanner(getProject());", "-                } catch (BuildException e) {", "-                    if (failonerror", "-                        || !e.getMessage().endsWith(\" not found.\")) {", "-                        throw e;", "-                    } else {", "-                        log(\"Warning: \" + e.getMessage());", "-                        continue;", "-                    }", "-                }", "-                File fromDir = fs.getDir(getProject());", "+            // deal with the ResourceCollections", "-                String[] srcFiles = ds.getIncludedFiles();", "-                String[] srcDirs = ds.getIncludedDirectories();", "-                if (!flatten && mapperElement == null", "-                    && ds.isEverythingIncluded() && !fs.hasPatterns()) {", "-                    completeDirMap.put(fromDir, destDir);", "-                }", "-                scan(fromDir, destDir, srcFiles, srcDirs);", "+\t    /* for historical and performance reasons we have to do", "+\t       things in a rather complex way.", "+\t    ", "+\t       (1) Move is optimized to move directories if a fileset", "+\t       has been included completely, therefore FileSets need a", "+\t       special treatment.  This is also required to support", "+\t       the failOnError semantice (skip filesets with broken", "+\t       basedir but handle the remaining collections).", "+", "+\t       (2) We carry around a few protected methods that work", "+\t       on basedirs and arrays of names.  To optimize stuff, all", "+\t       resources with the same basedir get collected in", "+\t       separate lists and then each list is handled in one go.", "+\t    */", "+", "+\t    HashMap filesByBasedir = new HashMap();", "+\t    HashMap dirsByBasedir = new HashMap();", "+\t    HashSet baseDirs = new HashSet();", "+            for (int i = 0; i < rcs.size(); i++) {", "+\t\tResourceCollection rc = (ResourceCollection) rcs.elementAt(i);", "+", "+\t\tif (rc.isFilesystemOnly()) {", "+", "+\t\t    // Step (1)", "+\t\t    if (rc instanceof FileSet) {", "+\t\t\tFileSet fs = (FileSet) rc;", "+\t\t\tDirectoryScanner ds = null;", "+\t\t\ttry {", "+\t\t\t    ds = fs.getDirectoryScanner(getProject());", "+\t\t\t} catch (BuildException e) {", "+\t\t\t    if (failonerror", "+\t\t\t\t|| !e.getMessage().endsWith(\" not found.\")) {", "+\t\t\t\tthrow e;", "+\t\t\t    } else {", "+\t\t\t\tlog(\"Warning: \" + e.getMessage());", "+\t\t\t\tcontinue;", "+\t\t\t    }", "+\t\t\t}", "+\t\t\tFile fromDir = fs.getDir(getProject());", "+", "+\t\t\tString[] srcFiles = ds.getIncludedFiles();", "+\t\t\tString[] srcDirs = ds.getIncludedDirectories();", "+\t\t\tif (!flatten && mapperElement == null", "+\t\t\t    && ds.isEverythingIncluded() && !fs.hasPatterns()) {", "+\t\t\t    completeDirMap.put(fromDir, destDir);", "+\t\t\t}", "+\t\t\tadd(fromDir, srcFiles, filesByBasedir);", "+\t\t\tadd(fromDir, srcDirs, dirsByBasedir);", "+\t\t\tbaseDirs.add(fromDir);", "+\t\t    } else { // not a fileset", "+", "+\t\t\tIterator resources = rc.iterator();", "+\t\t\twhile (resources.hasNext()) {", "+\t\t\t    FileResource fr = (FileResource) resources.next();", "+\t\t\t    if (!fr.isExists()) {", "+\t\t\t\tcontinue;", "+\t\t\t    }", "+\t\t\t    File baseDir = getKeyFile(fr.getBaseDir());", "+\t\t\t    add(baseDir, ", "+\t\t\t\tbaseDir == NULL_FILE_PLACEHOLDER", "+\t\t\t\t? fr.getFile().getAbsolutePath() : fr.getName(),", "+\t\t\t\tfr.isDirectory() ? dirsByBasedir ", "+\t\t\t\t                 : filesByBasedir);", "+\t\t\t    baseDirs.add(baseDir);", "+\t\t\t}", "+\t\t    }", "+", "+\t\t    Iterator iter = baseDirs.iterator();", "+\t\t    while (iter.hasNext()) {", "+\t\t\tFile f = (File) iter.next();", "+\t\t\tList files = (List) filesByBasedir.get(f);", "+\t\t\tList dirs = (List) dirsByBasedir.get(f);", "+", "+\t\t\tString[] srcFiles = new String[0];", "+\t\t\tif (files != null) {", "+\t\t\t    srcFiles = (String[]) files.toArray(srcFiles);", "+\t\t\t}", "+\t\t\tString[] srcDirs = new String[0];", "+\t\t\tif (dirs != null) {", "+\t\t\t    srcDirs = (String[]) dirs.toArray(srcDirs);", "+\t\t\t}", "+\t\t\tscan(f == NULL_FILE_PLACEHOLDER ? null : f, destDir,", "+\t\t\t     srcFiles, srcDirs);", "+\t\t    }", "+\t\t} else { // not a File resource collection", "+\t\t    throw new BuildException(\"Only FileSystem resources are\"", "+\t\t\t\t\t     + \" supported.\");", "+\t\t}", "-            if (savedFileSet != null) {", "-                filesets.insertElementAt(savedFileSet, 0);", "+            if (savedRc != null) {", "+                rcs.insertElementAt(savedRc, 0);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac460f86eafb618f25a163f217861e36", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b6cdaf3d70ba180e5a7e92270f9163c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "cbd20a77eba224b21654251583971e054729f006", "commitAfterChange": "752d64fa43db2172327771ba4d36bee3f2d3b49a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     protected byte[] getBytes(String name) throws ZipException", "signatureAfterChange": "     protected byte[] getBytes(String name) throws ZipException", "diff": ["-        if (encoding == null) {", "-            return name.getBytes();", "-        } else {", "-            try {", "-                return ZipEncodingHelper.encodeName(name, encoding);", "-            } catch (java.nio.charset.UnsupportedCharsetException ex) {", "-                // Java 1.4's NIO doesn't recognize a few names that", "-                // String.getBytes does", "-                try {", "-                    return name.getBytes(encoding);", "-                } catch (UnsupportedEncodingException uee) {", "-                    throw new ZipException(uee.getMessage());", "-                }", "-            }", "+        try {", "+            ByteBuffer b =", "+                ZipEncodingHelper.getZipEncoding(encoding).encode(name);", "+            byte[] result = new byte[b.limit()];", "+            System.arraycopy(b.array(), b.arrayOffset(), result, 0,", "+                             result.length);", "+            return result;", "+        } catch (IOException ex) {", "+            throw new ZipException(\"Failed to encode name: \" + ex.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d567e14a3fc8b22147f2dcdd13631696", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/PatternSet.java", "commitBeforeChange": "f9239036ddb3e5c1434a3b3a310c5947357e47ad", "commitAfterChange": "351fe71fecbb7b419331eccc9e0431c5d6b4a129", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "     public Object clone()", "signatureAfterChange": "     public Object clone()", "diff": ["-        if (isReference()) {", "-            return getRef(getProject()).clone();", "-        } else {", "-            try {", "-                PatternSet ps = (PatternSet) super.clone();", "-                ps.includeList = (Vector) includeList.clone();", "-                ps.excludeList = (Vector) excludeList.clone();", "-                ps.includesFileList = (Vector) includesFileList.clone();", "-                ps.excludesFileList = (Vector) excludesFileList.clone();", "-                return ps;", "-            } catch (CloneNotSupportedException e) {", "-                throw new BuildException(e);", "-            }", "+        try {", "+            PatternSet ps = (PatternSet) super.clone();", "+            ps.includeList = (Vector) includeList.clone();", "+            ps.excludeList = (Vector) excludeList.clone();", "+            ps.includesFileList = (Vector) includesFileList.clone();", "+            ps.excludesFileList = (Vector) excludesFileList.clone();", "+            return ps;", "+        } catch (CloneNotSupportedException e) {", "+            throw new BuildException(e);"]}]}
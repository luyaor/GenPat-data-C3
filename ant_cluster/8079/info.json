{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "be1cf1076a70707c871caa393cda5fe4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04831766d358f8e1dcb4234b74769efa", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ComponentManager.java", "commitBeforeChange": "26d9c6536e7e605b92a6e4b20eb0cd25e116a689", "commitAfterChange": "f19f07d6e4c72f241057ecfc32d80be21201bbf7", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private Object createComponent(String componentName, BuildElement model)          throws AntException", "signatureAfterChange": "     private Object createComponent(String componentName, BuildElement model)          throws AntException", "diff": ["-        Object component = null;", "-        if (model != null) {", "-            for (Iterator i = aspects.iterator(); i.hasNext();) {", "-                Aspect aspect = (Aspect) i.next();", "-                component = aspect.preCreateComponent(component, model);", "-            }", "+        ImportInfo importInfo = getImport(componentName);", "+        if (importInfo == null) {", "+            throw new ExecutionException(\"There is no definition of the <\"", "+            + componentName + \"> component\");", "+        String className = importInfo.getClassName();", "-        if (component == null) {", "-            ImportInfo importInfo = getImport(componentName);", "-            if (importInfo == null) {", "-                throw new ExecutionException(\"There is no definition of the <\"", "-                + componentName + \"> component\");", "-            }", "-            String className = importInfo.getClassName();", "-", "-            ComponentLibrary componentLibrary", "+        ComponentLibrary componentLibrary", "-            component = createComponentFromDef(componentName, componentLibrary,", "-                importInfo.getDefinition(), model);", "-        }", "-", "-        if (model != null) {", "-            for (Iterator i = aspects.iterator(); i.hasNext();) {", "-                Aspect aspect = (Aspect) i.next();", "-                component = aspect.postCreateComponent(component, model);", "-            }", "-        }", "-", "-        return component;", "+        return createComponentFromDef(componentName, componentLibrary,", "+            importInfo.getDefinition(), model);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e833edd4ce9bb895bcd805e3c511a50", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/selectors/modifiedselector/ModifiedSelector.java", "commitBeforeChange": "7829faf36a6f4bc565e0e8b92aa85cc948718176", "commitAfterChange": "9caeed5081071d6a2de28844d0a724918f8c6d86", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void configure()", "signatureAfterChange": "     public void configure()", "diff": ["-        Comparator defaultComparator = new EqualComparator();", "+        Comparator<? super String> defaultComparator = new EqualComparator();", "-        for (Iterator itConfig = configParameter.iterator(); itConfig.hasNext();) {", "-            Parameter par = (Parameter) itConfig.next();", "-            if (par.getName().indexOf(\".\") > 0) {", "+        for (Parameter parameter : configParameter) {", "+            if (parameter.getName().indexOf(\".\") > 0) {", "-                specialParameter.add(par);", "+                specialParameter.add(parameter);", "-                useParameter(par);", "+                useParameter(parameter);", "-        configParameter = new Vector();", "+        configParameter = new Vector<Parameter>();", "-                comparator = (Comparator) loadClass(", "-                    comparatorClass,", "-                    \"is not a Comparator.\",", "-                    Comparator.class);", "+                @SuppressWarnings(\"unchecked\")", "+                Comparator<? super String> localComparator = loadClass(comparatorClass, \"is not a Comparator.\", Comparator.class);", "+                comparator = localComparator;", "-        for (Iterator itSpecial = specialParameter.iterator(); itSpecial.hasNext();) {", "-            Parameter par = (Parameter) itSpecial.next();", "+        for (Iterator<Parameter> itSpecial = specialParameter.iterator(); itSpecial.hasNext();) {", "+            Parameter par = itSpecial.next();", "-        specialParameter = new Vector();", "+        specialParameter = new Vector<Parameter>();"]}]}
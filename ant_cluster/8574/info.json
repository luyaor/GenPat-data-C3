{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5e4af7d73a0c58b8a937c60675481e9f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2ee6e5ff5f13467194bb135ecb43db9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/filters/TokenFilterTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void testFileTokenizer() throws IOException", "signatureAfterChange": "      @Test     public void testFileTokenizer() throws IOException", "diff": ["+    @Test", "-        String contents = getFileString(", "-            \"filetokenizer\", getProject().getProperty(\"output\") + \"/filetokenizer\");", "-        assertStringContains(contents, \"   of words\");", "-        assertStringNotContains(contents, \" This is\");", "+    \tbuildRule.executeTarget(\"filetokenizer\");", "+        String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/filetokenizer\");", "+        assertContains(\"   of words\", contents);", "+        assertNotContains(\" This is\", contents);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3791a11b7b5f291ba1d61863e684470", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/filters/TokenFilterTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": "      public void testContainsString() throws IOException", "signatureAfterChange": "      @Test     public void testContainsString() throws IOException", "diff": ["+    @Test", "-        String contents = getFileString(", "-            \"containsstring\", getProject().getProperty(\"output\") + \"/containsstring\");", "-        assertStringContains(contents, \"this is a line contains foo\");", "-        assertStringNotContains(contents, \"this line does not\");", "+    \tbuildRule.executeTarget(\"containsstring\");", "+        String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/containsstring\");", "+        assertContains(\"this is a line contains foo\", contents);", "+        assertNotContains(\"this line does not\", contents);"]}]}
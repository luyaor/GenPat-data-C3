{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "95bf42d95ce6a7c3924c9bbd70d79223", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a2990c939abb04d2c035802759c5ad9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Replace.java", "commitBeforeChange": "79ab8ae1d59ed007337a3657ac5c6c78107cc0d8", "commitAfterChange": "c8c751af8ea4cb0607690327d79a0b56d6054925", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+", "+        if (token != null) {", "+            // line separators in values and tokens are \"\\n\"", "+            // in order to compare with the file contents, replace them", "+            // as needed", "+            StringBuffer val = new StringBuffer(value.getText());", "+            stringReplace(val, \"\\r\\n\", \"\\n\", false);", "+            stringReplace(val, \"\\n\", StringUtils.LINE_SEP, false);", "+            StringBuffer tok = new StringBuffer(token.getText());", "+            stringReplace(tok, \"\\r\\n\", \"\\n\", false);", "+            stringReplace(tok, \"\\n\", StringUtils.LINE_SEP, false);", "+            Replacefilter firstFilter = createPrimaryfilter();", "+            firstFilter.setToken(tok.toString());", "+            firstFilter.setValue(val.toString());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da0d3912c76ce87adfcfeb15c086532c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Replace.java", "commitBeforeChange": "9fdb1c85ba0d2fab36ce8f3b0563f393d955ac9d", "commitAfterChange": "a51c373c0fcf539fc8f71b5c21951fa64439d361", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 31, "signatureBeforeChange": "     private void processReplacefilters(StringBuffer buffer, String filename)", "signatureAfterChange": "     private StringBuffer buildFilterChain(StringBuffer inputBuffer)", "diff": ["-    private void processReplacefilters(StringBuffer buffer, String filename) {", "-", "-            //for each found token, replace with value", "-            log(\"Replacing in \" + filename + \": \" + filter.getToken()", "-                + \" --> \" + filter.getReplaceValue(), Project.MSG_VERBOSE);", "-            stringReplace(buffer, filter.getToken(),", "-                                      filter.getReplaceValue(), true);", "+     */", "+    private StringBuffer buildFilterChain(StringBuffer inputBuffer) {", "+        StringBuffer buf = inputBuffer;", "+        for (int i = 0; i < replacefilters.size(); i++) {", "+            Replacefilter filter = (Replacefilter) replacefilters.elementAt(i);", "+            filter.setInputBuffer(buf);", "+            buf = filter.getOutputBuffer();", "+        }", "+        return buf;", "+    }"]}]}
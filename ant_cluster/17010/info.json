{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9a877712004acfe540d3fbe0b3061f00", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bd12bb6cbc2e1125dbcf01c86c00e3d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/helper/ProjectHelper2.java", "commitBeforeChange": "45cb0df5be14920514cc67ad7ba14fb8eb26541a", "commitAfterChange": "2ef9a200ad3991e75ca0bd5d909b751ce7a704c7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void parse(Project project, Object source, RootHandler handler) throws BuildException", "signatureAfterChange": "     public void parse(Project project, Object source, RootHandler handler) throws BuildException", "diff": ["+        } else if (source instanceof URL) {", "+            url = (URL) source;", "+        } else if (source instanceof Resource) {", "+            FileProvider fp =", "+                (FileProvider) ((Resource) source).as(FileProvider.class);", "+            if (fp != null) {", "+                buildFile = fp.getFile();", "+            } else {", "+                URLProvider up =", "+                    (URLProvider) ((Resource) source).as(URLProvider.class);", "+                if (up != null) {", "+                    url = up.getURL();", "+                }", "+            }", "+        }", "+        if (buildFile != null) {", "-//         } else if (source instanceof InputStream ) {", "-        } else if (source instanceof URL) {", "-            url = (URL) source;", "+        } else if (url != null) {", "-//         } else if (source instanceof InputSource ) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ebddf5291dee7a5de111780ec4c28e1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "382b3c9bf107e6875a0c57c4a62dee0d2fc5c660", "commitAfterChange": "8cb8f75cddb280d3aed7aa489d8076277102fd27", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     protected void validateAttributes() throws BuildException", "signatureAfterChange": "     protected void validateAttributes() throws BuildException", "diff": ["-            throw new BuildException(\"Cannot concatenate multple files into a single file.\");", "+            if (filesets.size() > 1) {", "+                throw new BuildException(", "+                    \"Cannot concatenate multiple files into a single file.\");", "+            } else {", "+                FileSet fs = (FileSet) filesets.elementAt(0);", "+                DirectoryScanner ds = fs.getDirectoryScanner(project);", "+                String[] srcFiles = ds.getIncludedFiles();", "+", "+                if (srcFiles.length > 0) {", "+                    if (file == null) {", "+                        file = new File(srcFiles[0]);", "+                        filesets.removeElementAt(0);", "+                    } else {", "+                        throw new BuildException(", "+                            \"Cannot concatenate multiple files into a single file.\");", "+                    }", "+                } else {", "+                    throw new BuildException(", "+                        \"Cannot perform operation from directory to file.\");", "+                }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d8cfa6cf125165a00e53a952ae0ad42", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "956f4eec6cac8bce92f4c1585829d4c4ff5e31e1", "commitAfterChange": "1af1e04eefdc1cd751ef1286fb680420f6131d19", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "          public int read() throws IOException", "signatureAfterChange": "          public int read() throws IOException", "diff": ["-                if (c == '*') {", "+                if (c == '/') {", "+                    while (c != '\\n') c = in.read();", "+                } else if (c == '*') {", "-                                c = in.read();", "+                                c = read();", "+            if (c == '\"') {", "+                while (true) {", "+                    c = in.read();", "+                    if (c == '\\\\') c = in.read();", "+                    if (c == '\"') {", "+                        c = read();", "+                        break;", "+                    }", "+                }", "+            }", "+            if (c == '\\'') {", "+                c = in.read();", "+                if (c == '\\\\') c = in.read();", "+                c = in.read();", "+                c = read();", "+            }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "624bcb9d18cc8e88f5a8ffa11dc52850", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c8fd0d98be1c3fe1aa57874834cc931", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/rmic/RmicAdapterFactory.java", "commitBeforeChange": "4f1e68bd2b9b912702ce0d1588688b5491be0ad5", "commitAfterChange": "c767541c7d35c9eef55bf65e686373b02b71af2a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public static RmicAdapter getRmic(String rmicType, Task task,                                       Path classpath)         throws BuildException", "signatureAfterChange": "     public static RmicAdapter getRmic(String rmicType, Task task,                                       Path classpath)         throws BuildException", "diff": ["-        //convert to lower case in the English locale,", "-        String compiler = rmicType.toLowerCase(Locale.ENGLISH);", "-", "-        if (DEFAULT_COMPILER.equals(compiler) || compiler.length() == 0) {", "-            compiler = KaffeRmic.isAvailable()", "+        if (DEFAULT_COMPILER.equalsIgnoreCase(rmicType) || rmicType.length() == 0) {", "+            rmicType = KaffeRmic.isAvailable()", "-        if (SunRmic.COMPILER_NAME.equals(compiler)) {", "+        if (SunRmic.COMPILER_NAME.equalsIgnoreCase(rmicType)) {", "-        } else if (KaffeRmic.COMPILER_NAME.equals(compiler)) {", "+        } else if (KaffeRmic.COMPILER_NAME.equalsIgnoreCase(rmicType)) {", "-        } else if (WLRmic.COMPILER_NAME.equals(compiler)) {", "+        } else if (WLRmic.COMPILER_NAME.equalsIgnoreCase(rmicType)) {", "-        } else if (ForkingSunRmic.COMPILER_NAME.equals(compiler)) {", "+        } else if (ForkingSunRmic.COMPILER_NAME.equalsIgnoreCase(rmicType)) {", "-        } else if (XNewRmic.COMPILER_NAME.equals(compiler)) {", "+        } else if (XNewRmic.COMPILER_NAME.equalsIgnoreCase(rmicType)) {", "-        //no match? ask for the non-lower-cased type", "+        //no match?"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4588389a4282859087e551f57086390", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/rmic/RmicAdapterFactory.java", "commitBeforeChange": "3af802db9e5aeffef84e30608a573719f0d347a2", "commitAfterChange": "29fface4fb93fb33b33c86124a168c04779271c0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static RmicAdapter getRmic(String rmicType, Task task)         throws BuildException", "signatureAfterChange": "     public static RmicAdapter getRmic(String rmicType, Task task)         throws BuildException", "diff": ["+        //convert to lower case in the English locale, ", "+        String compiler = rmicType.toLowerCase(Locale.ENGLISH);", "-        //handle default specially.", "-        if (DEFAULT_COMPILER.equalsIgnoreCase(rmicType) || rmicType.length() == 0) {", "-            String adapter = KaffeRmic.isAvailable()", "+        //handle default specially by choosing the sun or kaffe compiler", "+        if (DEFAULT_COMPILER.equals(compiler) || compiler.length() == 0) {", "+            compiler = KaffeRmic.isAvailable()", "-            return getRmic(adapter, task);", "-", "-        if (SunRmic.COMPILER_NAME.equalsIgnoreCase(rmicType)) {", "+        if (SunRmic.COMPILER_NAME.equals(compiler)) {", "-        } else if (KaffeRmic.COMPILER_NAME.equalsIgnoreCase(rmicType)) {", "+        } else if (KaffeRmic.COMPILER_NAME.equals(compiler)) {", "-        } else if (WLRmic.COMPILER_NAME.equalsIgnoreCase(rmicType)) {", "+        } else if (WLRmic.COMPILER_NAME.equals(compiler)) {", "-        } else if (ForkingSunRmic.COMPILER_NAME.equalsIgnoreCase(rmicType)) {", "+        } else if (ForkingSunRmic.COMPILER_NAME.equals(compiler)) {", "+        } else if (XNewRmic.COMPILER_NAME.equals(compiler)) {", "+            return new XNewRmic();", "+        //no match? ask for the non-lower-cased type"]}]}
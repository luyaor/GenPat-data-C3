{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bdda3cbcf786670b8a19b4e95a9459df", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "660aad3923cc7db4765091fe2fc40c2d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ccm/CCMCheck.java", "commitBeforeChange": "d794c8efabe57b118c8b46c820d7b9244c73c5b3", "commitAfterChange": "98a9c95a45f2d1cf952691150a32422e7ef1ea67", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+", "+        if (file == null && filesets.size() == 0) {", "+            throw new BuildException(", "+                \"Specify at least one source - a file or a fileset.\");", "+        }", "+", "+        if (file != null && file.exists() && file.isDirectory()) {", "+            throw new BuildException(\"CCMCheck cannot be generated for directories\");", "+        }", "+        ", "+        if (file != null  && filesets.size() > 0) {", "+            throw new BuildException(\"Choose between file and fileset !\");", "+        }", "+", "+        if ( getFile() !=null ) {", "+            doit();", "+            return ;", "+        }", "+                        ", "+        int sizeofFileSet = filesets.size();", "+        for (int i = 0; i < sizeofFileSet; i++) {", "+            FileSet fs = (FileSet) filesets.elementAt(i);", "+            DirectoryScanner ds = fs.getDirectoryScanner(project);", "+            String[] srcFiles = ds.getIncludedFiles();", "+            for (int j = 0; j < srcFiles.length; j++) {", "+                File src = new File(fs.getDir(project), srcFiles[j]);", "+                setFile(src);", "+                doit();", "+            }", "+        }", "+    }", "-        int result = 0;", "-        // as specified in the CLEARTOOL.EXE help", "-", "-", "-        result = run(commandLine);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f95b2e652d4f8a659ddaa39aca57584c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "96e6561e659a24f1e2122d884e83561327cb0f48", "commitAfterChange": "88dcebf815f27d9b16735745605342963870010e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void execute()          throws BuildException", "signatureAfterChange": "     public void execute()          throws BuildException", "diff": ["-        if (fileSets.size() == 0 && textBuffer == null) {", "+        if (sources.size() == 0 && textBuffer == null) {", "-        if (fileSets.size() > 0 && textBuffer != null) {", "+        if (sources.size() > 0 && textBuffer != null) {", "-        boolean savedAppend = append;", "-        try {", "-            // Iterate the FileSet collection, concatenating each file as", "-            // it is encountered.", "-            for (Enumeration e = fileSets.elements(); e.hasMoreElements();) {", "-                ", "-                // Root directory for files.", "-                File fileSetBase = null;", "-                ", "-                // List of files.", "-                String[] srcFiles = null;", "-                ", "-                // Get the next file set, which could be a FileSet or a", "-                // FileList instance.", "-                Object next = e.nextElement();", "-                ", "-                if (next instanceof FileSet) {", "-                    ", "-                    FileSet fileSet = (FileSet) next;", "-                    ", "-                    // Get a directory scanner from the file set, which will", "-                    // determine the files from the set which need to be", "-                    // concatenated.", "-                    DirectoryScanner scanner = ", "-                        fileSet.getDirectoryScanner(getProject());", "-                    ", "-                    // Determine the root path.", "-                    fileSetBase = fileSet.getDir(getProject());", "-                    ", "-                    // Get the list of files.", "-                    srcFiles = scanner.getIncludedFiles();", "-                    ", "-                } else if (next instanceof FileList) {", "-                    ", "-                    FileList fileList = (FileList) next;", "-                    ", "-                    // Determine the root path.", "-                    fileSetBase = fileList.getDir(getProject());", "-                    ", "-                    // Get the list of files.", "-                    srcFiles = fileList.getFiles(getProject());", "-                    ", "-                }", "+        // Iterate thru the sources - paths, filesets and filelists", "+        for (Enumeration e = sources.elements(); e.hasMoreElements();) {", "+            Object o = e.nextElement();", "+            if (o instanceof Path) {", "+                Path path = (Path) o;", "+                checkAddFiles(null, path.list());", "-                // Concatenate the files.", "-                if (srcFiles != null) {", "-                    catFiles(fileSetBase, srcFiles);", "-                } else {", "-                    log(\"Warning: Concat received empty fileset.\", ", "-                        Project.MSG_WARN);", "+            } else if (o instanceof FileSet) {", "+                FileSet fileSet = (FileSet) o;", "+                DirectoryScanner scanner =", "+                    fileSet.getDirectoryScanner(getProject());", "+                checkAddFiles(fileSet.getDir(getProject()),", "+                              scanner.getIncludedFiles());", "+", "+            } else if (o instanceof FileList) {", "+                FileList fileList = (FileList) o;", "+                checkAddFiles(fileList.getDir(getProject()),", "+                              fileList.getFiles(getProject()));", "+            }", "+        }", "+", "+        // check if the files are outofdate", "+        if (destinationFile != null && !forceOverwrite", "+            && (sourceFiles.size() > 0) && destinationFile.exists()) {", "+            boolean outofdate = false;", "+            for (int i = 0; i < sourceFiles.size(); ++i) {", "+                File file = (File) sourceFiles.elementAt(i);", "+                if (file.lastModified() > destinationFile.lastModified()) {", "+                    outofdate = true;", "+                    break;", "-        } finally {", "-            append = savedAppend;", "+            if (!outofdate) {", "+                log(destinationFile + \" is up-to-date.\", Project.MSG_VERBOSE);", "+                return; // no need to do anything", "+            }", "-        ", "-        // Now, cat the inline text, if applicable.", "-        catText();", "+", "+        // Do nothing if all the sources are not present", "+        // And textBuffer is null", "+        if (textBuffer == null && sourceFiles.size() == 0 ", "+            && header == null && footer == null) {", "+            log(\"No existing files and no nested text, doing nothing\", ", "+                Project.MSG_INFO);", "+            return;", "+        }", "+", "+        cat();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7c84d98b3403124f75c68d1f7645fe0f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f333ddac6d4e08a25e63db062ebaeab", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/ProjectTest.java", "commitBeforeChange": "b4c15a336731c50e57ddb0f8bfda86689affb3a4", "commitAfterChange": "4c0e25065b0808b151417e79522b617bbc12e188", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void testResolveFile()", "signatureAfterChange": "     public void testResolveFile()", "diff": ["-            assertEquals(driveSpec + \"\\\\\",", "-                         p.resolveFile(driveSpec + \"/\", null).getPath());", "-            assertEquals(driveSpec + \"\\\\\",", "-                         p.resolveFile(driveSpec + \"\\\\\", null).getPath());", "-            assertEquals(driveSpec + \"\\\\\",", "+            ", "+            assertEqualsIgnoreDriveCase(driveSpecLower + \"\\\\\",", "+                         p.resolveFile(driveSpec + \"/\", null).getPath());", "+            assertEqualsIgnoreDriveCase(driveSpecLower + \"\\\\\",", "+                         p.resolveFile(driveSpec + \"\\\\\", null).getPath());", "+            assertEqualsIgnoreDriveCase(driveSpecLower + \"\\\\\",", "-            assertEquals(driveSpec + \"\\\\\",", "+            assertEqualsIgnoreDriveCase(driveSpecLower + \"\\\\\",", "-            assertEquals(driveSpec + \"\\\\\",", "+            assertEqualsIgnoreDriveCase(driveSpec + \"\\\\\",", "-            assertEquals(driveSpec + \"\\\\\",", "+            assertEqualsIgnoreDriveCase(driveSpec + \"\\\\\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54091968e33e45393f3fe22a224d453c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/types/PathTest.java", "commitBeforeChange": "f19f07d6e4c72f241057ecfc32d80be21201bbf7", "commitAfterChange": "ca91f8cb7e4f2bfe1a191dea6126a32649af9565", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void testConstructorNetWareStyle()", "signatureAfterChange": "      public void testConstructorNetWareStyle()", "diff": ["+", "+        // try a multi-part netware-volume length path with UNIX", "+        // separator (this testcase if from an actual bug that was", "+        // found, in AvailableTest, which uses PathTokenizer)", "+        p = new Path(project, ", "+                     \"SYS:\\\\JAVA/lib/rt.jar:SYS:\\\\JAVA/lib/classes.zip\");", "+        l = p.list();", "+        if (isUnixStyle) {", "+            assertEquals(\"no drives on Unix\", 3, l.length);", "+            assertTrue(\"sys resolved relative to project\\'s basedir\", ", "+                   l[0].endsWith(\"/SYS\"));", "+            assertEquals(\"/JAVA/lib/rt.jar\", l[1]);", "+            assertEquals(\"/JAVA/lib/classes.zip\", l[2]);", "+        } else if (isNetWare) {", "+            assertEquals(\"volumes on NetWare\", 2, l.length);", "+            assertEquals(\"sys:\\\\java\\\\lib\\\\rt.jar\", l[0].toLowerCase(Locale.US));", "+            assertEquals(\"sys:\\\\java\\\\lib\\\\classes.zip\", l[1].toLowerCase(Locale.US));", "+        } else {", "+            assertEquals(\"no multiple character-length volumes on Windows\", 3, l.length);", "+            assertTrue(\"sys resolved relative to project\\'s basedir\", ", "+                   l[0].endsWith(\"\\\\SYS\"));", "+            assertTrue(\"java/lib/rt.jar resolved relative to project\\'s basedir\", ", "+                   l[1].endsWith(\"\\\\JAVA\\\\lib\\\\rt.jar\"));", "+            assertTrue(\"java/lib/classes.zip resolved relative to project\\'s basedir\", ", "+                   l[2].endsWith(\"\\\\JAVA\\\\lib\\\\classes.zip\"));", "+        }"]}]}
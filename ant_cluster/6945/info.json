{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9639324ff9d6f513f3f7b9bc613708a9", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43c94f9162240dcb30e9870d127cea41", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/Main.java", "commitBeforeChange": "f6a78a634593cd4660e2efa17a80f71a927df3d5", "commitAfterChange": "1d3dc3765d4efd6ae54488feab07f6a17315ebe6", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      protected ClassLoader createClassLoader( final File libDir )", "signatureAfterChange": "      protected void setupClassLoader( final File libDir )", "diff": ["-    protected ClassLoader createClassLoader( final File libDir )", "+    protected void setupClassLoader( final File libDir )", "-        final ArrayList urlList = new ArrayList();", "-        toURLS( urlList, libDir.listFiles( filter ) );", "-        ", "-        final URL urls[] = (URL[])urlList.toArray( new URL[0] );", "+        final File[] files = libDir.listFiles( filter );", "-        return new URLClassLoader( urls, ClassLoader.getSystemClassLoader() );", "-    }", "+        final AntLoader classLoader = AntLoader.getLoader();", "+            if( !files[ i ].getName().equals( \"ant.jar\" ) &&", "+                !files[ i ].getName().equals( \"myrmidon.jar\" ) &&", "+                !files[ i ].getName().equals( \"avalonapi.jar\" ) )", "+            {                ", "+                try { classLoader.addURL( files[ i ].toURL() ); }", "+                catch( final MalformedURLException mue ) {}", "+            }", "+        }        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e06fa94be56eb4bfa1d1eb36a8c9b8c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "10c41029aeaba31241f1a85f9b02591b357e20b6", "commitAfterChange": "818cb969adef1df0f5918ba62f80f62502d5e53e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public static void main(String[] args) throws IOException", "signatureAfterChange": "     public static void main(String[] args) throws IOException", "diff": ["-        boolean printSummary = true;", "-        boolean printXml = false;", "-        PrintWriter out = null;", "-            if (exitAtEnd) {", "-                System.exit(2);", "-            }", "-        } else {", "+            System.exit(ERRORS);", "+        }", "-            JUnitTest test = new JUnitTest();", "-            test.setName(args[0]);", "-            args[0] = null;", "-            test.setCommandline(args);", "-            JUnitTestRunner runner = new JUnitTestRunner(test);", "-            runner.run();", "-", "-            if (exitAtEnd) {", "-                System.exit(runner.getRetCode());", "+        for (int i=1; i<args.length; i++) {", "+            if (args[i].startsWith(\"haltOnError=\")) {", "+                haltError = Project.toBoolean(args[i].substring(12));", "+            } else if (args[i].startsWith(\"haltOnFailure=\")) {", "+                haltFail = Project.toBoolean(args[i].substring(14));", "+            } else if (args[i].startsWith(\"formatter=\")) {", "+                try {", "+                    createAndStoreFormatter(args[i].substring(10));", "+                } catch (BuildException be) {", "+                    System.err.println(be.getMessage());", "+                    System.exit(ERRORS);", "+                }", "+        }", "+        ", "+        JUnitTest t = new JUnitTest(args[0]);", "+        JUnitTestRunner runner = new JUnitTestRunner(t, haltError, haltFail);", "+        transferFormatters(runner);", "+        runner.run();", "+        System.exit(runner.getRetCode());", "+    }"]}]}
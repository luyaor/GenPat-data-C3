{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8dfb633643615eb537bff7b70216119c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21c6f274031c3fa7b996577747b46bfa", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Available.java", "commitBeforeChange": "70b420621ba892d07049960e4cc4ac34c58549f6", "commitAfterChange": "55dcf2dee8cad363de7fd0a2d8317c857349c6bb", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["+", "+        if (eval()) {", "+            this.project.setProperty(property, value);", "+        }", "+    }", "-            return;", "-            return;", "-            return;", "-        this.project.setProperty(property, value);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5224b197ae81c91135463b5de3fe42f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ComponentManager.java", "commitBeforeChange": "fcc7e2b47f01468c83803caa09ce8266e56f213c", "commitAfterChange": "d571dff958cd85b5083a2a829f84e35b4abe4434", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private void addNestedElement(AntLibFactory factory, Setter setter,                                   Object element, BuildElement model)          throws ExecutionException", "signatureAfterChange": "     private void addNestedElement(AntLibFactory factory, Setter setter,                                   Object element, BuildElement model)          throws ExecutionException", "diff": ["-        String refId ", "-            = model.getAspectAttributeValue(Constants.ANT_ASPECT, \"refid\");", "-        if (refId != null && typeName != null) {", "-            throw new ExecutionException(\"Only one of \" + Constants.ANT_ASPECT", "-                 + \":type and \" + Constants.ANT_ASPECT", "-                 + \":refid may be specified at a time\", model.getLocation());", "-        }", "-        } else if (refId != null) {", "-            // We have a reference to an existing instance. Need to check if", "-            // it is compatible with the type expected by the nested element's", "-            // adder method", "-            typeInstance = frame.getDataValue(refId);", "-            if (model.getAttributeNames().hasNext() ||", "-                model.getNestedElements().hasNext() ||", "-                model.getText().length() != 0) {", "-                throw new ExecutionException(\"Element <\" + nestedElementName", "-                     + \"> is defined by reference and hence may not specify \"", "-                     + \"any attributes, nested elements or content\",", "-                    model.getLocation());", "-            }", "-            if (typeInstance == null) {", "-                throw new ExecutionException(\"The given ant:refid value '\"", "-                     + refId + \"' is not defined\", model.getLocation());", "-            }", "-            if (refId != null) {", "-                throw new ExecutionException(\"The value specified by refId \"", "-                     + refId + \" is not compatible with the <\"", "-                     + nestedElementName + \"> nested element\",", "-                    model.getLocation());", "-            } else if (typeName != null) {", "-                throw new ExecutionException(\"The type \"", "-                     + typeName + \" is not compatible with the <\"", "-                     + nestedElementName + \"> nested element\",", "-                    model.getLocation());", "-            }", "+            throw new ExecutionException(\"The type \"", "+                + typeName + \" is not compatible with the <\"", "+                + nestedElementName + \"> nested element\", model.getLocation());"]}]}
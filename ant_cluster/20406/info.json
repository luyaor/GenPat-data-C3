{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b5e4712dfde5997a4c2476da9e45805", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d525d1b7d4549f84b1918b9b46fbecd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/selectors/DateSelectorTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testSelectionBehaviour()", "signatureAfterChange": "     @Test     public void testSelectionBehaviour()", "diff": ["+    @Test", "-        try {", "-            makeBed();", "-            s = (DateSelector)getInstance();", "-            s.setDatetime(\"10/10/1999 1:45 PM\");", "-            s.setWhen(before);", "-            results = selectionString(s);", "-            assertEquals(\"TFFFFFFFFFFT\", results);", "+        s = new DateSelector();", "+        s.setDatetime(\"10/10/1999 1:45 PM\");", "+        s.setWhen(before);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TFFFFFFFFFFT\", results);", "-            s = (DateSelector)getInstance();", "-            s.setDatetime(\"10/10/1999 1:45 PM\");", "-            s.setWhen(before);", "-            s.setCheckdirs(true);", "-            results = selectionString(s);", "-            assertEquals(\"FFFFFFFFFFFF\", results);", "+        s = new DateSelector();", "+        s.setDatetime(\"10/10/1999 1:45 PM\");", "+        s.setWhen(before);", "+        s.setCheckdirs(true);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"FFFFFFFFFFFF\", results);", "-            s = (DateSelector)getInstance();", "-            s.setDatetime(\"10/10/1999 1:45 PM\");", "-            s.setWhen(after);", "-            results = selectionString(s);", "-            assertEquals(\"TTTTTTTTTTTT\", results);", "+        s = new DateSelector();", "+        s.setDatetime(\"10/10/1999 1:45 PM\");", "+        s.setWhen(after);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TTTTTTTTTTTT\", results);", "-            s = (DateSelector)getInstance();", "-            s.setDatetime(\"11/21/2001 4:54 AM\");", "-            s.setWhen(before);", "-            results = selectionString(s);", "-            assertEquals(\"TFTFFFFFFFFT\", results);", "+        s = new DateSelector();", "+        s.setDatetime(\"11/21/2001 4:54 AM\");", "+        s.setWhen(before);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TFTFFFFFFFFT\", results);", "-            s = (DateSelector)getInstance();", "-            s.setDatetime(\"11/21/2001 4:55 AM\");", "+        s = new DateSelector();", "+        s.setDatetime(\"11/21/2001 4:55 AM\");", "-            long milliseconds = s.getMillis();", "-            s.setWhen(equal);", "-            results = selectionString(s);", "-            assertEquals(\"TTFFTFFFTTTT\", results);", "+        long milliseconds = s.getMillis();", "+        s.setWhen(equal);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TTFFTFFFTTTT\", results);", "-            s = (DateSelector)getInstance();", "-            s.setMillis(milliseconds);", "-            s.setWhen(equal);", "-            results = selectionString(s);", "-            assertEquals(\"TTFFTFFFTTTT\", results);", "+        s = new DateSelector();", "+        s.setMillis(milliseconds);", "+        s.setWhen(equal);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TTFFTFFFTTTT\", results);", "-            s = (DateSelector)getInstance();", "-            s.setDatetime(\"11/21/2001 4:56 AM\");", "-            s.setWhen(after);", "-            results = selectionString(s);", "-            assertEquals(\"TFFTFTTTFFFT\", results);", "+        s = new DateSelector();", "+        s.setDatetime(\"11/21/2001 4:56 AM\");", "+        s.setWhen(after);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TFFTFTTTFFFT\", results);", "-            s = (DateSelector)getInstance();", "-            Parameter param1 = new Parameter();", "-            Parameter param2 = new Parameter();", "-            param1.setName(\"datetime\");", "-            param1.setValue(\"11/21/2001 4:56 AM\");", "-            param2.setName(\"when\");", "-            param2.setValue(\"after\");", "-            Parameter[] params = {param1,param2};", "-            s.setParameters(params);", "-            results = selectionString(s);", "-            assertEquals(\"TFFTFTTTFFFT\", results);", "-            try {", "-                makeMirror();", "+        s = new DateSelector();", "+        Parameter param1 = new Parameter();", "+        Parameter param2 = new Parameter();", "+        param1.setName(\"datetime\");", "+        param1.setValue(\"11/21/2001 4:56 AM\");", "+        param2.setName(\"when\");", "+        param2.setValue(\"after\");", "+        Parameter[] params = {param1,param2};", "+        s.setParameters(params);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TFFTFTTTFFFT\", results);", "-                s = (DateSelector)getInstance();", "-                long testtime = mirrorfiles[5].lastModified();", "-                s.setMillis(testtime);", "-                s.setWhen(after);", "-                s.setGranularity(2);", "-                results = mirrorSelectionString(s);", "-                assertEquals(\"TFFFFTTTTTTT\", results);", "+        s = new DateSelector();", "+        long testtime = selectorRule.getMirrorFiles()[5].lastModified();", "+        s.setMillis(testtime);", "+        s.setWhen(after);", "+        s.setGranularity(2);", "-                s = (DateSelector)getInstance();", "-                testtime = mirrorfiles[6].lastModified();", "-                s.setMillis(testtime);", "-                s.setWhen(before);", "-                s.setGranularity(2);", "-                results = mirrorSelectionString(s);", "-                assertEquals(\"TTTTTTTFFFFT\", results);", "-            }", "-            finally {", "-                cleanupMirror();", "-            }", "-", "+        // setup the modified timestamp to match what the test needs, although be aware that the 3rd and 4th", "+        // files don't exist so can't be changed, so don't try and loop over them", "+        for (int i = 1; i <=2; i++) {", "+            Assume.assumeTrue(\"Cannot setup file times for test\", selectorRule.getMirrorFiles()[i].setLastModified(testtime - (3*60*60*100)));", "-        finally {", "-            cleanupBed();", "+", "+", "+        results = selectorRule.mirrorSelectionString(s);", "+        assertEquals(\"TFFFFTTTTTTT\", results);", "+", "+        s = new DateSelector();", "+        testtime = selectorRule.getMirrorFiles()[6].lastModified();", "+        s.setMillis(testtime);", "+        s.setWhen(before);", "+        s.setGranularity(2);", "+        for (int i = 7; i <= 10; i++) {", "+            Assume.assumeTrue(\"Cannot setup file times for test\", selectorRule.getMirrorFiles()[i].setLastModified(testtime + (3*60*60*100)));", "+        results = selectorRule.mirrorSelectionString(s);", "+        assertEquals(\"TTTTTTTFFFFT\", results);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1fc9b6add464b9680d67098d1215300", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/types/selectors/DateSelectorTest.java", "commitBeforeChange": "e5235423ccd494cb7516a1df6e3e13a74a22b767", "commitAfterChange": "da5a13f8e4e0e4475f942b5ae5670271b711d423", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void testSelectionBehaviour()", "signatureAfterChange": "     public void testSelectionBehaviour()", "diff": ["-            s = (DateSelector)getInstance();", "-            s.setDatetime(\"11/21/2001 4:54 AM\");", "-            s.setWhen(before);", "-            results = selectionString(s);", "-            assertEquals(\"TFTFFFFFFFFT\", results);", "-/*", "-            s = (DateSelector)getInstance();", "-            s.setDatetime(\"11/21/2001 4:55 AM\");", "-            java.util.Date d = new java.util.Date(\"11/21/2001 4:55 AM\");", "-            long milliseconds = s.getMillis();", "-            s.setWhen(equal);", "-            results = selectionString(s);", "-            assertEquals(\"TTFFTFFFTTTT\", results);", "+            if (!JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)) {", "+                s = (DateSelector)getInstance();", "+                s.setDatetime(\"11/21/2001 4:54 AM\");", "+                s.setWhen(before);", "+                results = selectionString(s);", "+                assertEquals(\"TFTFFFFFFFFT\", results);", "-            s = (DateSelector)getInstance();", "-            s.setMillis(1006347300000L);", "-            s.setWhen(equal);", "-            results = selectionString(s);", "-            assertEquals(\"TTFFTFFFTTTT\", results);", "+                s = (DateSelector)getInstance();", "+                s.setDatetime(\"11/21/2001 4:55 AM\");", "+                SimpleDateFormat formatter = new SimpleDateFormat();", "+                Date d = formatter.parse(\"11/21/2001 4:55 AM\",new ParsePosition(0));", "-            s = (DateSelector)getInstance();", "-            s.setMillis(milliseconds);", "-            s.setWhen(equal);", "-            results = selectionString(s);", "-            assertEquals(\"TTFFTFFFTTTT\", results);", "+                long milliseconds = s.getMillis();", "+                s.setWhen(equal);", "+                results = selectionString(s);", "+                assertEquals(\"TTFFTFFFTTTT\", results);", "-            s = (DateSelector)getInstance();", "-            s.setMillis(1006347305000L);", "-            s.setWhen(equal);", "-            s.setGranularity(15000);", "-            results = selectionString(s);", "-            assertEquals(\"TTFFTFFFTTTT\", results);", "-*/", "-            s = (DateSelector)getInstance();", "-            s.setDatetime(\"11/21/2001 4:56 AM\");", "-            s.setWhen(after);", "-            results = selectionString(s);", "-            assertEquals(\"TFFTFTTTFFFT\", results);", "+                s = (DateSelector)getInstance();", "+                s.setMillis(milliseconds);", "+                s.setWhen(equal);", "+                results = selectionString(s);", "+                assertEquals(\"TTFFTFFFTTTT\", results);", "-            s = (DateSelector)getInstance();", "-            Parameter param1 = new Parameter();", "-            Parameter param2 = new Parameter();", "-            param1.setName(\"datetime\");", "-            param1.setValue(\"11/21/2001 4:56 AM\");", "-            param2.setName(\"when\");", "-            param2.setValue(\"after\");", "-            Parameter[] params = {param1,param2};", "-            s.setParameters(params);", "-            results = selectionString(s);", "-            assertEquals(\"TFFTFTTTFFFT\", results);", "+                s = (DateSelector)getInstance();", "+                s.setDatetime(\"11/21/2001 4:56 AM\");", "+                s.setWhen(after);", "+                results = selectionString(s);", "+                assertEquals(\"TFFTFTTTFFFT\", results);", "+", "+                s = (DateSelector)getInstance();", "+                Parameter param1 = new Parameter();", "+                Parameter param2 = new Parameter();", "+                param1.setName(\"datetime\");", "+                param1.setValue(\"11/21/2001 4:56 AM\");", "+                param2.setName(\"when\");", "+                param2.setValue(\"after\");", "+                Parameter[] params = {param1,param2};", "+                s.setParameters(params);", "+                results = selectionString(s);", "+                assertEquals(\"TFFTFTTTFFFT\", results);", "+            }", "+            try {", "+                makeMirror();", "+", "+                s = (DateSelector)getInstance();", "+                long testtime = mirrorfiles[5].lastModified();", "+                s.setMillis(testtime);", "+                s.setWhen(after);", "+                s.setGranularity(2);", "+                results = mirrorSelectionString(s);", "+                assertEquals(\"TFFFFTTTTTTT\", results);", "+", "+                s = (DateSelector)getInstance();", "+                testtime = mirrorfiles[6].lastModified();", "+                s.setMillis(testtime);", "+                s.setWhen(before);", "+                s.setGranularity(2);", "+                results = mirrorSelectionString(s);", "+                assertEquals(\"TTTTTTTFFFFT\", results);", "+            }", "+            finally {", "+                cleanupMirror();", "+            }"]}]}
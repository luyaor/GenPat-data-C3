{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ddf27064cc15168583a43cf23127c049", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "181ef4af72638b24200cb2ef019c4af4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/ManifestClassPathTest.java", "commitBeforeChange": "c4cc9c42b1186ff585b7506c4ece1434a5127ce0", "commitAfterChange": "2487a905056a72e96e91a8116eb3d150d96e5469", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "      public void testDifferentWindowsDrive()", "signatureAfterChange": "      public void testDifferentWindowsDrive()", "diff": ["+            // the lines below try to find a drive name different than the one containing the temp dir", "+            // if the temp dir is C will try to use D", "+            // if the temp dir is on D or other will try to use C", "+            File tmpdir = new File(System.getProperty(\"java.io.tmpdir\"));", "+            String driveLetter = \"C\";", "-                new java.io.File(\"D:/foo.txt\").getCanonicalPath();", "+                String tmpCanonicalPath = tmpdir.getCanonicalPath();", "+                driveLetter = tmpCanonicalPath.substring(1).toUpperCase();", "+            } catch (IOException ioe) {", "+                System.out.println(\"exception happened getting canonical path of java.io.tmpdir : \" + ioe.getMessage());", "+            }", "+            String altDriveLetter = null;", "+            try {", "+                if (\"C\".equals(driveLetter)) {", "+                    altDriveLetter = \"D\";", "+                } else {", "+                    altDriveLetter = \"C\";", "+                }", "+                new java.io.File(altDriveLetter + \":/foo.txt\").getCanonicalPath();", "-                System.out.println(\"drive d: doesn't exist or is not ready,\"", "+                System.out.println(\"drive \" + altDriveLetter + \": doesn't exist or is not ready,\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55a5baabf7b10cea12ea56f74b24d5db", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Move.java", "commitBeforeChange": "dd59f330e28468c67b69a1d4e352f4e5bafcb27f", "commitAfterChange": "a5a1cf23953be08f91c28840a830e295eb7b171c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected void doFileOperations()", "signatureAfterChange": "     protected void doFileOperations()", "diff": ["+                boolean renamed = false;", "-                    renameFile(fromDir, toDir, filtering, forceOverwrite);", "+                    renamed =", "+                        renameFile(fromDir, toDir, filtering, forceOverwrite);", "+                if (!renamed) {", "+                    FileSet fs = new FileSet();", "+                    fs.setProject(getProject());", "+                    fs.setDir(fromDir);", "+                    addFileset(fs);", "+                    DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "+                    String[] files = ds.getIncludedFiles();", "+                    String[] dirs = ds.getIncludedDirectories();", "+                    scan(fromDir, toDir, files, dirs);", "+                }", "-        if (fileCopyMap.size() > 0) {   // files to move", "-            log(\"Moving \" + fileCopyMap.size() + \" files to \"", "-                + destDir.getAbsolutePath());", "+        int moveCount = fileCopyMap.size();", "+        if (moveCount > 0) {   // files to move", "+            log(\"Moving \" + moveCount + \" file\"", "+                + ((moveCount == 1) ? \"\" : \"s\")", "+                + \" to \" + destDir.getAbsolutePath());"]}]}
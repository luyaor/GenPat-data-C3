{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "98ce287a37f6940205b18496327227b0", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ad148ef331121127aa7478db339508c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Jar.java", "commitBeforeChange": "7e7fa2f905e691ba00568bc670cc80060c224fd4", "commitAfterChange": "590936af269c77bda5fb410fd81e19958062efe6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      protected void initZipOutputStream(ZipOutputStream zOut)         throws IOException, BuildException", "signatureAfterChange": "      protected void initZipOutputStream(ZipOutputStream zOut)         throws IOException, BuildException", "diff": ["-        // If no manifest is specified, add the default one.", "-        if (manifest == null) {", "-            execManifest = null;", "+        try {", "+            // If no manifest is specified, add the default one.", "+            if (manifest == null) {", "+                execManifest = null;", "+            }", "+            else {", "+                execManifest = new Manifest();", "+                execManifest.merge(manifest);", "+            }", "+            zipDir(null, zOut, \"META-INF/\");", "+            super.initZipOutputStream(zOut);", "-        else {", "-            execManifest = new Manifest();", "-            execManifest.merge(manifest);", "+        catch (ManifestException e) {", "+                log(\"Manifest is invalid: \" + e.getMessage(), Project.MSG_ERR);", "+                throw new BuildException(\"Invalid Manifest\", e, getLocation());", "-        zipDir(null, zOut, \"META-INF/\");", "-        super.initZipOutputStream(zOut);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cb8450b3fdceb21db32a4cc4910b34f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Jar.java", "commitBeforeChange": "7e7fa2f905e691ba00568bc670cc80060c224fd4", "commitAfterChange": "590936af269c77bda5fb410fd81e19958062efe6", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void zipManifestEntry(InputStream is) throws IOException", "signatureAfterChange": "     private void zipManifestEntry(InputStream is) throws IOException", "diff": ["-        if (execManifest == null) {", "-            execManifest = new Manifest(is);", "+        try {", "+            if (execManifest == null) {", "+                execManifest = new Manifest(is);", "+            }", "+            else if (isAddingNewFiles()) {", "+                execManifest.merge(new Manifest(is));", "+            }", "-        else if (isAddingNewFiles()) {", "-            execManifest.merge(new Manifest(is));", "+        catch (ManifestException e) {", "+            log(\"Manifest is invalid: \" + e.getMessage(), Project.MSG_ERR);", "+            throw new BuildException(\"Invalid Manifest\", e, getLocation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94bd6e4e5bfeb9ed2423783ef3b17436", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Jar.java", "commitBeforeChange": "1fa5ccf5682707c6b5e33482b641009e48190013", "commitAfterChange": "bec2a0777e910345fa7877d5aaa209ddde0937e3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      protected void initZipOutputStream(ZipOutputStream zOut)         throws IOException, BuildException", "signatureAfterChange": "      protected void initZipOutputStream(ZipOutputStream zOut)         throws IOException, BuildException", "diff": ["-            // If no manifest is specified, add the default one.", "-            if (manifest == null) {", "-                execManifest = null;", "-            }", "-            else {", "-                execManifest = new Manifest();", "+            execManifest = getDefaultManifest();", "+", "+            if (manifest != null) {", "+            for (Enumeration e = execManifest.getWarnings(); e.hasMoreElements(); ) {", "+                log(\"Manifest warning: \" + (String)e.nextElement(), Project.MSG_WARN);", "+            }", "+        ", "+            // time to write the manifest", "+            ByteArrayOutputStream baos = new ByteArrayOutputStream();", "+            PrintWriter writer = new PrintWriter(baos);", "+            execManifest.write(writer);", "+            writer.flush();", "+        ", "+            ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());", "+            super.zipFile(bais, zOut, \"META-INF/MANIFEST.MF\", System.currentTimeMillis());", "-                log(\"Manifest is invalid: \" + e.getMessage(), Project.MSG_ERR);", "-                throw new BuildException(\"Invalid Manifest\", e, getLocation());", "+            log(\"Manifest is invalid: \" + e.getMessage(), Project.MSG_ERR);", "+            throw new BuildException(\"Invalid Manifest\", e, getLocation());"]}]}
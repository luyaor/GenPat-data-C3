{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5cd1042b6f8f02854e5c65046fb96f98", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19b95fceed1ca6c9f408d6707b66db78", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/testcases/org/apache/myrmidon/AbstractMyrmidonTest.java", "commitBeforeChange": "50fb7f5643cba98640e7d4ce2b00736e9d42cbab", "commitAfterChange": "6ff9bf50ad2e4fcda69911d207c8dfe93e7b4e0b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "     protected Logger createLogger()", "signatureAfterChange": "     protected Logger getLogger()", "diff": ["-    protected Logger createLogger()", "+    protected Logger getLogger()", "-        // Setup a logger", "-        final Priority priority = Priority.WARN;", "-        final org.apache.log.Logger targetLogger = Hierarchy.getDefaultHierarchy().getLoggerFor( \"myrmidon\" );", "-", "-        final PatternFormatter formatter = new PatternFormatter( PATTERN );", "-        final StreamTarget target = new StreamTarget( System.out, formatter );", "-        targetLogger.setLogTargets( new LogTarget[]{target} );", "-        targetLogger.setPriority( priority );", "-", "-        return new LogKitLogger( targetLogger );", "+        if( m_logger == null )", "+        {", "+            m_logger = new BasicLogger( \"[test]\", BasicLogger.LEVEL_WARN );", "+        }", "+        return m_logger;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81dfbf97f29424353b074d358ea44261", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/test/org/apache/myrmidon/AbstractMyrmidonTest.java", "commitBeforeChange": "50fb7f5643cba98640e7d4ce2b00736e9d42cbab", "commitAfterChange": "6ff9bf50ad2e4fcda69911d207c8dfe93e7b4e0b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "     protected Logger createLogger()", "signatureAfterChange": "     protected Logger getLogger()", "diff": ["-    protected Logger createLogger()", "+    protected Logger getLogger()", "-        // Setup a logger", "-        final Priority priority = Priority.WARN;", "-        final org.apache.log.Logger targetLogger = Hierarchy.getDefaultHierarchy().getLoggerFor( \"myrmidon\" );", "-", "-        final PatternFormatter formatter = new PatternFormatter( PATTERN );", "-        final StreamTarget target = new StreamTarget( System.out, formatter );", "-        targetLogger.setLogTargets( new LogTarget[]{target} );", "-        targetLogger.setPriority( priority );", "-", "-        return new LogKitLogger( targetLogger );", "+        if( m_logger == null )", "+        {", "+            m_logger = new BasicLogger( \"[test]\", BasicLogger.LEVEL_WARN );", "+        }", "+        return m_logger;"]}]}
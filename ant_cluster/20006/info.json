{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "27b858aa13b5c27f534b624510f96efe", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b2a8df238f4423d71f2d00bfefefd34", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/IContract.java", "commitBeforeChange": "72053e82f182e41019dfda7b72b4b81676e48660", "commitAfterChange": "60ed8507e7718d1e5b0d5f36d18571ff07c8c017", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private void scan() throws BuildException", "signatureAfterChange": "     private void scan() throws BuildException", "diff": ["-        FileSet fileset = new FileSet();", "-        fileset.setDefaultexcludes( true );", "-        fileset.setDir( srcDir );", "-        DirectoryScanner ds = fileset.getDirectoryScanner( project );", "+        DirectoryScanner ds = null;", "+        ds = getDirectoryScanner( srcDir );", "+        FileOutputStream targetOutputStream = null;", "+        PrintStream targetPrinter = null;", "+        boolean writeTargets = false;", "-            targets = File.createTempFile( \"iContractTargets\", \"tmp\", new File( System.getProperty( \"user.dir\" ) ) );", "-            targets.deleteOnExit();", "-            FileOutputStream fos = new FileOutputStream( targets );", "-            PrintStream ps = new PrintStream( fos );", "+            if( targets == null ) {", "+                targets = new File( \"targets\" );", "+                log( \"Warning: targets file not specified. generating file: \" + targets.getName() );", "+                writeTargets = true;", "+            } else if( !targets.exists() ) {", "+                log( \"Specified targets file doesn't exist. generating file: \" + targets.getName() );", "+                writeTargets = true;", "+            }", "+            if( writeTargets ) {", "+                log( \"You should consider using iControl to create a target file.\" );", "+                targetOutputStream = new FileOutputStream( targets );", "+                targetPrinter = new PrintStream( targetOutputStream );", "+            }", "-                    ps.println( srcFile.getAbsolutePath() );", "-", "-                    File classFile = new File( instrumentDir, files[i].substring( 0, files[i].indexOf( \".java\" ) ) + \".class\" );", "+                    // print the target, while we're at here. (Only if generatetarget=true).", "+                    if( targetPrinter != null ) {", "+                        targetPrinter.println( srcFile.getAbsolutePath() );", "+                    }", "+                    File classFile = new File( buildDir, files[i].substring( 0, files[i].indexOf( \".java\" ) ) + \".class\" );", "-            ps.flush();", "-            ps.close();", "+            if( targetPrinter != null ) {", "+                targetPrinter.flush();", "+                targetPrinter.close();", "+            }", "-            throw new BuildException( \"Could not create temporary file:\" + e.getMessage() );", "+            throw new BuildException( \"Could not create target file:\" + e.getMessage() );", "-                if( controlFile.exists() && instrumentDir.exists() ) {", "+                if( controlFile.exists() && buildDir.exists() ) {", "-                    fileset.setDir( instrumentDir );", "-                    ds = fileset.getDirectoryScanner( project );", "+                    ds = getDirectoryScanner( buildDir );", "-                        File srcFile = new File(srcDir, files[i]);", "+                        File srcFile = new File( srcDir, files[i] );", "-            System.out.println( \"FATAL\" );", "-            t.printStackTrace();", "+            throw new BuildException( \"Got an interesting exception:\" + t.getMessage() );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5157193fc88b3daace5a3b4de5ee3c8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/junit/src/main/org/apache/tools/ant/taskdefs/optional/rjunit/remote/EventDispatcher.java", "commitBeforeChange": "5c43f6c93edfa3d34075b59a4ae199eb7257dab9", "commitAfterChange": "778a6800cfdfe174d4e21108400d4827124dadac", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void dispatchEvent(TestRunEvent evt)", "signatureAfterChange": "     public void dispatchEvent(TestRunEvent evt)", "diff": ["-       // I hate switch/case but no need to design a complex", "-       // system for limited events.", "-        switch (evt.getType()){", "-            case TestRunEvent.RUN_STARTED:", "-                fireRunStarted(evt);", "-                break;", "-            case TestRunEvent.RUN_ENDED:", "-                fireRunEnded(evt);", "-                break;", "-            case TestRunEvent.RUN_STOPPED:", "-                fireRunStopped(evt);", "-                break;", "-            case TestRunEvent.TEST_STARTED:", "-                fireTestStarted(evt);", "-                break;", "-            case TestRunEvent.TEST_ERROR:", "-                fireTestError(evt);", "-                break;", "-            case TestRunEvent.TEST_FAILURE:", "-                fireTestFailure(evt);", "-                break;", "-            case TestRunEvent.TEST_ENDED:", "-                fireTestEnded(evt);", "-                break;", "-            case TestRunEvent.SUITE_ENDED:", "-                fireSuiteEnded(evt);", "-                break;", "-            case TestRunEvent.SUITE_STARTED:", "-                fireSuiteStarted(evt);", "-                break;", "-            default:", "-                // should not happen", "+        final Integer type = new Integer(evt.getType());", "+        final EventAction action = (EventAction) eventMap.get(type);", "+        if (action == null) {", "+            return;", "-    }", "+            final int count = listeners.size();", "+            for (int i = 0; i < count; i++) {", "+                TestRunListener listener = (TestRunListener) listeners.get(i);", "+                action.dispatch(listener, evt);"]}]}
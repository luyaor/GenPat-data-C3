{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "24a9dec1a512a59aef1053a2ee6cc8f2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bf54d4e592c4dedef9e4ff5fdb579b2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelperRepository.java", "commitBeforeChange": "d6b9d9ccd3f9966f41414c4af4534eaeb7b35c65", "commitAfterChange": "abe09254ece327ed1ba12e7ae2b0d31ca2407e7a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private void registerProjectHelper(ProjectHelper projectHelper)", "signatureAfterChange": "      private void registerProjectHelper(ProjectHelper projectHelper)", "diff": ["-                    projectHelper.getClass().getName() + \" registered.\");", "+                               projectHelper.getClass().getName()", "+                               + \" registered.\");", "-        helpers.add(projectHelper);", "+        try {", "+            helpers.add(projectHelper.getClass().getConstructor(NO_CLASS));", "+        } catch (NoSuchMethodException nse) {", "+            // impossible to get here", "+            throw new BuildException(\"Couldn't find no-arg constructor in \"", "+                                     + projectHelper.getClass().getName());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78e668a192a04d7ae5528cef6a463211", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ExecutionFrame.java", "commitBeforeChange": "1523b24a93d8e4b849afd938ab7eaffcb6031969", "commitAfterChange": "ce1af4647df3f1fab5344250d1751b334e774d77", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": "     private TaskContext configureTask(BuildElement model)          throws ExecutionException", "signatureAfterChange": "     private TaskContext configureTask(BuildElement model)          throws ExecutionException", "diff": ["-            configureElement(element, model);", "+            configureElement(libFactory, element, model);", "+        } catch (RuntimeException e) {", "+            throw new ExecutionException(e.getClass().getName() + \": \"", "+                 + e.getMessage(), e, model.getLocation());"]}]}
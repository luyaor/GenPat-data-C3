{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6fcea5bc9bbe0f90831897cd25c63f3c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44e9fb99c66c3401068a331e8f41c3ae", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "888d09c10709a969536ebc92d89e6af26f1c9d69", "commitAfterChange": "4461e98f844764730b62743e3ab9be0eed6a2cc3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      private static void configureTargets(Project project, Element root)         throws BuildException", "signatureAfterChange": "      private static void configureProject(Project project, Element root)         throws BuildException", "diff": ["-    private static void configureTargets(Project project, Element root)", "+    private static void configureProject(Project project, Element root)", "+        // configure taskdefs", "+        NodeList list = root.getElementsByTagName(\"taskdef\");", "+        for (int i = 0; i < list.getLength(); i++) {", "+            Taskdef taskdef = new Taskdef();", "+            configure(project, taskdef, (Element)list.item(i));", "+            taskdef.setProject(project);", "+            taskdef.init();", "+        }", "+", "+        // configure properties", "+        list = root.getElementsByTagName(\"property\");", "+        for (int i = 0; i < list.getLength(); i++) {", "+            Property property = new Property();", "+            configure(project, property, (Element)list.item(i));", "+            property.setProject(project);", "+            property.init();", "+        }", "+", "-        NodeList list = root.getElementsByTagName(\"target\");", "+        list = root.getElementsByTagName(\"target\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9588aad67d0f9b27a26863648a6b8770", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/framework/AbstractTypeDef.java", "commitBeforeChange": "d957fa1151163d513197a174a098e2aac8745b1e", "commitAfterChange": "87ceed8170a6359ac2c4714b6ad22c55d2b1f571", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void setLib( final File lib )", "signatureAfterChange": "     public void configure( Configuration configuration ) throws ConfigurationException", "diff": ["-    public void setLib( final File lib )", "+     */", "+    public void configure( Configuration configuration ) throws ConfigurationException", "-        //In the future this would be replaced by ClassPath sub-element", "-        m_lib = lib;", "+        m_typeDef = createTypeDefinition();", "+", "+        // Configure attributes", "+        final String[] attrs = configuration.getAttributeNames();", "+        for( int i = 0; i < attrs.length; i++ )", "+        {", "+            final String name = attrs[ i ];", "+            final String value = configuration.getAttribute( name );", "+            if( name.equalsIgnoreCase( \"lib\" ) )", "+            {", "+                m_lib = (File)convert( File.class, value );", "+            }", "+            else", "+            {", "+                configure( m_typeDef, name, value );", "+            }", "+        }", "+", "+        // Configure nested elements", "+        final Configuration[] elements = configuration.getChildren();", "+        for( int i = 0; i < elements.length; i++ )", "+        {", "+            Configuration element = elements[ i ];", "+            configure( m_typeDef, element );", "+        }"]}]}
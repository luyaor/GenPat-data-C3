{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "de72d3d847e15f202e8cbb5e5ccea3e0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b6cdaf3d70ba180e5a7e92270f9163c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "cbd20a77eba224b21654251583971e054729f006", "commitAfterChange": "752d64fa43db2172327771ba4d36bee3f2d3b49a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     protected byte[] getBytes(String name) throws ZipException", "signatureAfterChange": "     protected byte[] getBytes(String name) throws ZipException", "diff": ["-        if (encoding == null) {", "-            return name.getBytes();", "-        } else {", "-            try {", "-                return ZipEncodingHelper.encodeName(name, encoding);", "-            } catch (java.nio.charset.UnsupportedCharsetException ex) {", "-                // Java 1.4's NIO doesn't recognize a few names that", "-                // String.getBytes does", "-                try {", "-                    return name.getBytes(encoding);", "-                } catch (UnsupportedEncodingException uee) {", "-                    throw new ZipException(uee.getMessage());", "-                }", "-            }", "+        try {", "+            ByteBuffer b =", "+                ZipEncodingHelper.getZipEncoding(encoding).encode(name);", "+            byte[] result = new byte[b.limit()];", "+            System.arraycopy(b.array(), b.arrayOffset(), result, 0,", "+                             result.length);", "+            return result;", "+        } catch (IOException ex) {", "+            throw new ZipException(\"Failed to encode name: \" + ex.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c105a7550e8df5e11776983aa50b1bd3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/SSHExec.java", "commitBeforeChange": "1d600fe6da225ed331cf90bfcf836da4c90fecc8", "commitAfterChange": "7171341fc60cfd4d7cd4f92bda0778bf98c17094", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-", "+        StringBuffer output = new StringBuffer();", "-                ByteArrayOutputStream out = executeCommand(session, command);", "-                if (outputProperty != null) {", "-                    //#bugzilla 43437", "-                    getProject().setNewProperty(outputProperty, command + \" : \" + out);", "-                }", "+                output.append(command).append(\" : \");", "+                executeCommand(session, command, output);", "-                    String output = \"\";", "-                        ByteArrayOutputStream out = executeCommand(session, cmd);", "-                        output += cmd + \" : \" + out + \"\\n\";", "-                    }", "-                    if (outputProperty != null) {", "-                        //#bugzilla 43437", "-                        getProject().setNewProperty(outputProperty, output);", "+                        output.append(cmd).append(\" : \");", "+                        executeCommand(session, cmd, output);", "+                        output.append(\"\\n\");", "+            if (outputProperty != null) {", "+                getProject().setNewProperty(outputProperty, output.toString());", "+            }"]}]}
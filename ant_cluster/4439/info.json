{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "297909d66cac9ac8ff6bac2755f680c5", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "164a63c8605dd98bb473bfbe82c35cba", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/main/org/apache/ant/core/model/BuildElement.java", "commitBeforeChange": "a48208f6cf8cf80ef1e144305ff8dfe0958599d5", "commitAfterChange": "c2e518039b65dc5b8c9c31f9f78b2d72ea8db2d1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void setAspects(Map aspects)", "signatureAfterChange": "     public void setAspects(Map aspects)", "diff": ["-        this.aspects = aspects;", "+        aspectMaps = new HashMap();", "+        for (Iterator i = aspects.keySet().iterator(); i.hasNext(); ) {", "+            String aspectName = (String)i.next();", "+            int separator = aspectName.indexOf(\":\");", "+            if (separator != -1) {", "+                String prefix = aspectName.substring(0, separator);", "+                String name = aspectName.substring(separator + 1);", "+                if (prefix.length() != 0 && name.length() != 0) {", "+                    Map prefixMap = (Map)aspectMaps.get(prefix);", "+                    if (prefixMap == null) {", "+                        prefixMap = new HashMap();", "+                        aspectMaps.put(prefix, prefixMap);", "+                    }", "+                    prefixMap.put(name, aspects.get(aspectName));", "+                }", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c23e99de28980d6bf0c1cb1ce8b481eb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/common/org/apache/ant/common/model/ModelElement.java", "commitBeforeChange": "69d9b9a49622889f44d6792faf00f886857828d6", "commitAfterChange": "fcc7e2b47f01468c83803caa09ce8266e56f213c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void setAspects(Map aspects)", "signatureAfterChange": "     public void addAspectAttributes(Map aspectAttributes)", "diff": ["-    public void setAspects(Map aspects) {", "-        aspectMaps = new HashMap();", "-        for (Iterator i = aspects.keySet().iterator(); i.hasNext();) {", "-            String aspectName = (String) i.next();", "-            int separator = aspectName.indexOf(\":\");", "-            if (separator != -1) {", "-                String prefix = aspectName.substring(0, separator);", "-                String name = aspectName.substring(separator + 1);", "-                if (prefix.length() != 0 && name.length() != 0) {", "-                    Map prefixMap = (Map) aspectMaps.get(prefix);", "-                    if (prefixMap == null) {", "-                        prefixMap = new HashMap();", "-                        aspectMaps.put(prefix, prefixMap);", "-                    }", "-                    prefixMap.put(name, aspects.get(aspectName));", "-                }", "-            }", "-        }", "+    public void addAspectAttributes(Map aspectAttributes) {", "+        aspectValues.addAttributes(aspectAttributes);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bcab5a4811ac844fc8a5786261be7f24", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b46437410a4719b0cf1770954cdd9ad", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "6b3d8a02956aad55938df6c7a1b2994a4acc5f6a", "commitAfterChange": "fe4a5cb02940376fddc661302141394be20d1f02", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 22, "signatureBeforeChange": "      private static void processNestedProperties(Project project,                                                 Object target,                                                 Element targetElement)         throws BuildException", "signatureAfterChange": "          public NestedPropertyHandler(DocumentHandler parentHandler, Object target)", "diff": ["-    private static void processNestedProperties(Project project,", "-                                                Object target,", "-                                                Element targetElement)", "-        throws BuildException", "-    {", "-        Class targetClass = target.getClass();", "-        NodeList list = targetElement.getChildNodes();", "-        for (int i = 0; i < list.getLength(); i++) {", "-            Node node = list.item(i);", "-            // right now, all we are interested in is element nodes", "-            // not quite sure what to do with others except drop 'em", "+        public NestedPropertyHandler(DocumentHandler parentHandler, Object target) {", "+            super(parentHandler);", "-            if (node.getNodeType() == Node.TEXT_NODE) {", "-                String text = ((Text)node).getData();", "-                try {", "-                    Method addProp = targetClass.getMethod(", "-                        \"addText\", new Class[]{\"\".getClass()});", "-                    Object child = addProp.invoke(target, new Object[] {text});", "-                } catch (NoSuchMethodException nsme) {", "-                    if (text.trim().length() > 0)", "-                        throw new BuildException(targetClass + ", "-                            \" does not support nested text elements\");", "-                } catch (InvocationTargetException ite) {", "-                    throw new BuildException(ite.getMessage());", "-                } catch (IllegalAccessException iae) {", "-                    throw new BuildException(iae.getMessage());", "-                }", "+            this.target = target;", "+        }", "-            if (node.getNodeType() == Node.ELEMENT_NODE) {", "-                Element element = (Element)node;", "-                String propType = element.getTagName();", "-                String methodName = \"create\" +", "-\t\t    Character.toUpperCase(propType.charAt(0)) +", "-                    propType.substring(1);", "-", "-                try {", "-                    Method addProp =", "-                        targetClass.getMethod(methodName, new Class[]{});", "-                    Object child = addProp.invoke(target, new Object[] {});", "-", "-                    configure(project, child, element);", "-", "-                    processNestedProperties(project, child, element);", "-                } catch (NoSuchMethodException nsme) {", "-                    throw new BuildException(targetClass + ", "-                        \" does not support nested \" + propType + \" properties\");", "-                } catch (InvocationTargetException ite) {", "-                    throw new BuildException(ite.getMessage());", "-                } catch (IllegalAccessException iae) {", "-                    throw new BuildException(iae.getMessage());", "-                }", "-", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89d33138503da27a30e2bd91374a7a2b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/filterreaders/src/main/org/apache/tools/ant/taskdefs/LoadFile.java", "commitBeforeChange": "2986a1b266db0241341764c2ee3c240a45ac3cfd", "commitAfterChange": "e886871506743df400949c1c6c3e87820290119b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private final String processStream(Reader instream, final int size)         throws IOException", "signatureAfterChange": "     private final String processStream(final Reader inputReader, final int size)         throws BuildException, IOException", "diff": ["-    private final String processStream(Reader instream, final int size)", "-        throws IOException {", "+    private final String processStream(final Reader inputReader, final int size)", "+        throws BuildException, IOException {", "+        Reader instream = inputReader;", "-            final FilterReaderSet filterset = (FilterReaderSet) filterReaderSets.elementAt(i);", "+            final FilterReaderSet filterset =", "+                (FilterReaderSet) filterReaderSets.elementAt(i);", "-                final AntFilterReader fr = (AntFilterReader) filterReaders.elementAt(j);", "-                finalFilters.addElement(fr);", "+                final AntFilterReader afr =", "+                    (AntFilterReader) filterReaders.elementAt(j);", "+                finalFilters.addElement(afr);", "-                final AntFilterReader filter = (AntFilterReader) finalFilters.elementAt(i);", "-                final String clazz = filter.getClassName();", "-                if (clazz != null) {", "+                final AntFilterReader filter =", "+                    (AntFilterReader) finalFilters.elementAt(i);", "+                final String className = filter.getClassName();", "+                if (className != null) {", "-                        final Class c = Class.forName(clazz);", "-                        if (c != null) {", "-                            final Constructor[] constructors = c.getConstructors();", "+                        final Class clazz = Class.forName(className);", "+                        if (clazz != null) {", "+                            final Constructor[] constructors =", "+                                clazz.getConstructors();", "-                            instream = (Reader) constructors[0].newInstance(rdr);", "-                            if (Parameterizable.class.isAssignableFrom(c)) {", "+                            instream =", "+                                (Reader) constructors[0].newInstance(rdr);", "+                            if (Parameterizable.class.isAssignableFrom(clazz)) {", "-                                ((Parameterizable) instream).setParameters(params);", "+                                ((Parameterizable)", "+                                    instream).setParameters(params);", "-                        throw new BuildException(cnfe);", "+                        throw new BuildException(cnfe, location);", "-                        throw new BuildException(ie);", "+                        throw new BuildException(ie, location);", "-                        throw new BuildException(iae);", "+                        throw new BuildException(iae, location);", "-                        throw new BuildException(ite);", "+                        throw new BuildException(ite, location);"]}]}
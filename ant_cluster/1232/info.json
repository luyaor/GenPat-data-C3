{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e34153649d8109bb4140a0873d19607b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b2a8df238f4423d71f2d00bfefefd34", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/IContract.java", "commitBeforeChange": "72053e82f182e41019dfda7b72b4b81676e48660", "commitAfterChange": "60ed8507e7718d1e5b0d5f36d18571ff07c8c017", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private void scan() throws BuildException", "signatureAfterChange": "     private void scan() throws BuildException", "diff": ["-        FileSet fileset = new FileSet();", "-        fileset.setDefaultexcludes( true );", "-        fileset.setDir( srcDir );", "-        DirectoryScanner ds = fileset.getDirectoryScanner( project );", "+        DirectoryScanner ds = null;", "+        ds = getDirectoryScanner( srcDir );", "+        FileOutputStream targetOutputStream = null;", "+        PrintStream targetPrinter = null;", "+        boolean writeTargets = false;", "-            targets = File.createTempFile( \"iContractTargets\", \"tmp\", new File( System.getProperty( \"user.dir\" ) ) );", "-            targets.deleteOnExit();", "-            FileOutputStream fos = new FileOutputStream( targets );", "-            PrintStream ps = new PrintStream( fos );", "+            if( targets == null ) {", "+                targets = new File( \"targets\" );", "+                log( \"Warning: targets file not specified. generating file: \" + targets.getName() );", "+                writeTargets = true;", "+            } else if( !targets.exists() ) {", "+                log( \"Specified targets file doesn't exist. generating file: \" + targets.getName() );", "+                writeTargets = true;", "+            }", "+            if( writeTargets ) {", "+                log( \"You should consider using iControl to create a target file.\" );", "+                targetOutputStream = new FileOutputStream( targets );", "+                targetPrinter = new PrintStream( targetOutputStream );", "+            }", "-                    ps.println( srcFile.getAbsolutePath() );", "-", "-                    File classFile = new File( instrumentDir, files[i].substring( 0, files[i].indexOf( \".java\" ) ) + \".class\" );", "+                    // print the target, while we're at here. (Only if generatetarget=true).", "+                    if( targetPrinter != null ) {", "+                        targetPrinter.println( srcFile.getAbsolutePath() );", "+                    }", "+                    File classFile = new File( buildDir, files[i].substring( 0, files[i].indexOf( \".java\" ) ) + \".class\" );", "-            ps.flush();", "-            ps.close();", "+            if( targetPrinter != null ) {", "+                targetPrinter.flush();", "+                targetPrinter.close();", "+            }", "-            throw new BuildException( \"Could not create temporary file:\" + e.getMessage() );", "+            throw new BuildException( \"Could not create target file:\" + e.getMessage() );", "-                if( controlFile.exists() && instrumentDir.exists() ) {", "+                if( controlFile.exists() && buildDir.exists() ) {", "-                    fileset.setDir( instrumentDir );", "-                    ds = fileset.getDirectoryScanner( project );", "+                    ds = getDirectoryScanner( buildDir );", "-                        File srcFile = new File(srcDir, files[i]);", "+                        File srcFile = new File( srcDir, files[i] );", "-            System.out.println( \"FATAL\" );", "-            t.printStackTrace();", "+            throw new BuildException( \"Got an interesting exception:\" + t.getMessage() );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2a0550b1246c3bdbae983d55b7c9325", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/Move.java", "commitBeforeChange": "f73917168fc78f993f09f5f3eccbc4d663018c40", "commitAfterChange": "b8c50342cacdaa5bc7e3e4e72eb8351da5824716", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      protected void doFileOperations()", "signatureAfterChange": "      protected void doFileOperations()", "diff": ["-                File fromDir = ( File )e.nextElement();", "-                File toDir = ( File )completeDirMap.get( fromDir );", "+                File fromDir = (File)e.nextElement();", "+                File toDir = (File)completeDirMap.get( fromDir );", "-                        \" to \" + toDir, verbosity );", "+                         \" to \" + toDir, verbosity );", "-                         + \" to \" + toDir", "-                         + \" due to \" + ioe.getMessage();", "-                    throw new BuildException( msg, ioe );", "+                        + \" to \" + toDir", "+                        + \" due to \" + ioe.getMessage();", "+                    throw new TaskException( msg, ioe );", "-                destDir.getAbsolutePath() );", "+                 destDir.getAbsolutePath() );", "-                String fromFile = ( String )e.nextElement();", "-                String toFile = ( String )fileCopyMap.get( fromFile );", "+                String fromFile = (String)e.nextElement();", "+                String toFile = (String)fileCopyMap.get( fromFile );", "-                            \" to \" + toFile, verbosity );", "+                             \" to \" + toFile, verbosity );", "-                             + \" to \" + toFile", "-                             + \" due to \" + ioe.getMessage();", "-                        throw new BuildException( msg, ioe );", "+                            + \" to \" + toFile", "+                            + \" due to \" + ioe.getMessage();", "+                        throw new TaskException( msg, ioe );", "-                            for( Enumeration filterEnum = getFilterSets().elements(); filterEnum.hasMoreElements();  )", "+                            for( Enumeration filterEnum = getFilterSets().elements(); filterEnum.hasMoreElements(); )", "-                                executionFilters.addFilterSet( ( FilterSet )filterEnum.nextElement() );", "+                                executionFilters.addFilterSet( (FilterSet)filterEnum.nextElement() );", "-                                forceOverwrite );", "+                                                     forceOverwrite );", "-                                throw new BuildException( \"Unable to delete file \"", "-                                     + f.getAbsolutePath() );", "+                                throw new TaskException( \"Unable to delete file \"", "+                                                         + f.getAbsolutePath() );", "-                                 + toFile", "-                                 + \" due to \" + ioe.getMessage();", "-                            throw new BuildException( msg, ioe );", "+                                + toFile", "+                                + \" due to \" + ioe.getMessage();", "+                            throw new TaskException( msg, ioe );", "-                File d = new File( ( String )e.nextElement() );", "+                File d = new File( (String)e.nextElement() );", "-                FileSet fs = ( FileSet )e.nextElement();", "+                FileSet fs = (FileSet)e.nextElement();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3d71a652ff6cc09f1f156d9ad11b763", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/extension/JarLibResolveTask.java", "commitBeforeChange": "f83f5c68c975f31a384cc24e94be4e5ebfa2da4d", "commitAfterChange": "f463bd2cab8b132695d8bf60c889212628eba281", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public void execute()         throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-    public void execute()", "-        throws BuildException", "-    {", "+     */", "+    public void execute() throws BuildException {", "-        getProject().log( \"Resolving extension: \" + m_extension,", "-                          Project.MSG_VERBOSE );", "+        getProject().log(\"Resolving extension: \" + requiredExtension,", "+                          Project.MSG_VERBOSE);", "-            getProject().getProperty( m_property );", "+            getProject().getProperty(propertyName);", "-        if( null != candidate )", "-        {", "+        if (null != candidate) {", "-            if( m_failOnError )", "-            {", "-                throw new BuildException( message );", "-            }", "-            else", "-            {", "-                getProject().log( message, Project.MSG_ERR );", "+            if (failOnError) {", "+                throw new BuildException(message);", "+            } else {", "+                getProject().log(message, Project.MSG_ERR);", "-        final int size = m_resolvers.size();", "-        for( int i = 0; i < size; i++ )", "-        {", "+        final int size = resolvers.size();", "+        for (int i = 0; i < size; i++) {", "-                (ExtensionResolver)m_resolvers.get( i );", "+                (ExtensionResolver) resolvers.get(i);", "-            getProject().log( \"Searching for extension using Resolver:\" + resolver,", "-                              Project.MSG_VERBOSE );", "+            getProject().log(\"Searching for extension using Resolver:\" + resolver,", "+                              Project.MSG_VERBOSE);", "-            try", "-            {", "+            try {", "-                    resolver.resolve( m_extension, getProject() );", "-                try", "-                {", "-                    checkExtension( file );", "+                    resolver.resolve(requiredExtension, getProject());", "+                try {", "+                    checkExtension(file);", "+                } catch (final BuildException be) {", "+                    final String message = \"File \" + file + \" returned by \"", "+                        + \"resolver failed to satisfy extension due to: \"", "+                        + be.getMessage();", "+                    getProject().log(message, Project.MSG_WARN);", "-                catch( final BuildException be )", "-                {", "-                    final String message =", "-                        \"File \" + file + \" returned by resolver failed \" +", "-                        \"to satisfy extension due to: \" + be.getMessage();", "-                    getProject().log( message, Project.MSG_WARN );", "-                }", "-            }", "-            catch( final BuildException be )", "-            {", "-                final String message =", "-                    \"Failed to resolve extension to file \" +", "-                    \"using resolver \" + resolver + \" due to: \" + be;", "-                getProject().log( message, Project.MSG_WARN );", "+            } catch (final BuildException be) {", "+                final String message = \"Failed to resolve extension to file \"", "+                    + \"using resolver \" + resolver + \" due to: \" + be;", "+                getProject().log(message, Project.MSG_WARN);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9939d8fd7b66ab251d03ce4d53b2164", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/Move.java", "commitBeforeChange": "f73917168fc78f993f09f5f3eccbc4d663018c40", "commitAfterChange": "b8c50342cacdaa5bc7e3e4e72eb8351da5824716", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      protected void doFileOperations()", "signatureAfterChange": "      protected void doFileOperations()", "diff": ["-                File fromDir = ( File )e.nextElement();", "-                File toDir = ( File )completeDirMap.get( fromDir );", "+                File fromDir = (File)e.nextElement();", "+                File toDir = (File)completeDirMap.get( fromDir );", "-                        \" to \" + toDir, verbosity );", "+                         \" to \" + toDir, verbosity );", "-                         + \" to \" + toDir", "-                         + \" due to \" + ioe.getMessage();", "-                    throw new BuildException( msg, ioe );", "+                        + \" to \" + toDir", "+                        + \" due to \" + ioe.getMessage();", "+                    throw new TaskException( msg, ioe );", "-                destDir.getAbsolutePath() );", "+                 destDir.getAbsolutePath() );", "-                String fromFile = ( String )e.nextElement();", "-                String toFile = ( String )fileCopyMap.get( fromFile );", "+                String fromFile = (String)e.nextElement();", "+                String toFile = (String)fileCopyMap.get( fromFile );", "-                            \" to \" + toFile, verbosity );", "+                             \" to \" + toFile, verbosity );", "-                             + \" to \" + toFile", "-                             + \" due to \" + ioe.getMessage();", "-                        throw new BuildException( msg, ioe );", "+                            + \" to \" + toFile", "+                            + \" due to \" + ioe.getMessage();", "+                        throw new TaskException( msg, ioe );", "-                            for( Enumeration filterEnum = getFilterSets().elements(); filterEnum.hasMoreElements();  )", "+                            for( Enumeration filterEnum = getFilterSets().elements(); filterEnum.hasMoreElements(); )", "-                                executionFilters.addFilterSet( ( FilterSet )filterEnum.nextElement() );", "+                                executionFilters.addFilterSet( (FilterSet)filterEnum.nextElement() );", "-                                forceOverwrite );", "+                                                     forceOverwrite );", "-                                throw new BuildException( \"Unable to delete file \"", "-                                     + f.getAbsolutePath() );", "+                                throw new TaskException( \"Unable to delete file \"", "+                                                         + f.getAbsolutePath() );", "-                                 + toFile", "-                                 + \" due to \" + ioe.getMessage();", "-                            throw new BuildException( msg, ioe );", "+                                + toFile", "+                                + \" due to \" + ioe.getMessage();", "+                            throw new TaskException( msg, ioe );", "-                File d = new File( ( String )e.nextElement() );", "+                File d = new File( (String)e.nextElement() );", "-                FileSet fs = ( FileSet )e.nextElement();", "+                FileSet fs = (FileSet)e.nextElement();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d49dfff4e6115e7aea25734cc81b97c2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "490f2aabcd6135b601b53fe20479845d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/converter/DefaultMasterConverter.java", "commitBeforeChange": "0f01837a97b71ef0050e4a8dadeaadbf221066ec", "commitAfterChange": "1081cadc83321c93e551269a920df162dc4cc42e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private String getConverterName( final Class originalClass,                                      final Class destination )         throws ConverterException", "signatureAfterChange": "     private String getConverterClassname( final String source, final String destination )", "diff": ["-    private String getConverterName( final Class originalClass,", "-                                     final Class destination )", "-            final String name = m_registry.getConverterName( clazz.getName(),", "-                                                             destination.getName() );", "+     */", "+    private String getConverterClassname( final String source, final String destination )", "+    {", "+        final HashMap map = (HashMap)m_mapping.get( source );", "+        if( null == map )", "+        {", "+            return null;", "+        }", "+        return (String)map.get( destination );", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaf96e19e12a7340864c1a1abb6ac888", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/classloader/DefaultClassLoaderManager.java", "commitBeforeChange": "274da3301287be067b66a5778b27bfa98ef0a662", "commitAfterChange": "b91e4a3c1d8310dea42c2c353ab016d9c5425109", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private void getOptionalPackagesFor( final File jarFile, final List packages )         throws Exception", "signatureAfterChange": "     private OptionalPackage[] getOptionalPackagesFor( final OptionalPackage pkg )         throws Exception", "diff": ["-    private void getOptionalPackagesFor( final File jarFile, final List packages )", "-        final URL url = new URL( \"jar:\" + jarFile.getCanonicalFile().toURL() + \"!/\" );", "-        final JarURLConnection connection = (JarURLConnection)url.openConnection();", "-        final Manifest manifest = connection.getManifest();", "-        final Extension[] available = Extension.getAvailable( manifest );", "-        if( getLogger().isDebugEnabled() )", "+     */", "+    private OptionalPackage[] getOptionalPackagesFor( final OptionalPackage pkg )", "+        throws Exception", "+    {", "+        // Locate the optional packages that provide the required extesions", "+        final Extension[] required = pkg.getRequiredExtensions();", "+        final ArrayList packages = new ArrayList();", "+        for( int i = 0; i < required.length; i++ )", "-            final String message1 =", "-                REZ.getString( \"available-extensions.notice\", Arrays.asList( available ) );", "-            getLogger().debug( message1 );", "-            final String message2 =", "-                REZ.getString( \"required-extensions.notice\", Arrays.asList( required ) );", "-            getLogger().debug( message2 );", "+            final Extension extension = required[i ];", "+            final OptionalPackage optionalPackage = m_extensionManager.getOptionalPackage( extension );", "+            if( optionalPackage == null )", "+            {", "+                final String message =", "+                    REZ.getString( \"unsatisfied.extension.error\",", "+                                   pkg.getFile(),", "+                                   extension.getExtensionName(),", "+                                   extension.getSpecificationVersion() );", "+                throw new Exception( message );", "+            }", "+            packages.add( optionalPackage );", "-        final ArrayList dependencies = new ArrayList();", "-        final ArrayList unsatisfied = new ArrayList();", "-", "-        m_packageManager.scanDependencies( required,", "-                                           available,", "-                                           dependencies,", "-                                           unsatisfied );", "-", "-        if( 0 != unsatisfied.size() )", "-        {", "-            final String message =", "-                REZ.getString( \"unsatisfied.extensions.error\", new Integer( unsatisfied.size() ) );", "-            throw new Exception( message );", "-        }", "-", "-        final int count = dependencies.size();", "-        for( int i = 0; i < count; i++ )", "-        {", "-            final OptionalPackage optionalPackage = (OptionalPackage)dependencies.get(i );", "-            packages.add( optionalPackage.getFile() );", "-        }", "+        return (OptionalPackage[])packages.toArray( new OptionalPackage[packages.size() ] );"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f9d91e6f62b1912cd07e58e8dca81ab1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e330e42888b9fe9e41bba79623f31e2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/XmlPropertyTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private void doTest(String msg, boolean keepRoot, boolean collapse,                         boolean semantic, boolean include, boolean localRoot)", "signatureAfterChange": "     private void doTest(String msg, boolean keepRoot, boolean collapse,                         boolean semantic, boolean include, boolean localRoot) throws IOException", "diff": ["-                        boolean semantic, boolean include, boolean localRoot) {", "+                        boolean semantic, boolean include, boolean localRoot) throws IOException {", "-            try {", "-                File propertyFile = getGoldfile(inputFile, keepRoot, collapse,", "-                                                semantic, include, localRoot);", "-                if (!propertyFile.exists()) {", "+            File propertyFile = getGoldfile(inputFile, keepRoot, collapse,", "+                                            semantic, include, localRoot);", "+            if (!propertyFile.exists()) {", "-                    continue;", "-                }", "-", "-                //                System.out.println(msg + \" (\" + propertyFile.getName() + \") in (\" + workingDir + \")\");", "-", "-                Project p = new Project();", "-", "-                XmlProperty xmlproperty = new XmlProperty();", "-                xmlproperty.setProject(p);", "-                xmlproperty.setFile(inputFile);", "-", "-                xmlproperty.setKeeproot(keepRoot);", "-                xmlproperty.setCollapseAttributes(collapse);", "-                xmlproperty.setSemanticAttributes(semantic);", "-                xmlproperty.setIncludeSemanticAttribute(include);", "-                xmlproperty.setRootDirectory(workingDir);", "-", "-                // Set a property on the project to make sure that loading", "-                // a property with the same name from an xml file will", "-                // *not* change it.", "-                p.setNewProperty(\"override.property.test\", \"foo\");", "-", "-                xmlproperty.execute();", "-", "-                Properties props = new Properties();", "-                props.load(new FileInputStream(propertyFile));", "-", "-                //printProperties(p.getProperties());", "-", "-                ensureProperties(msg, inputFile, workingDir, p, props);", "-                ensureReferences(msg, inputFile, p.getReferences());", "-", "-            } catch (IOException ex) {", "-                fail(ex.toString());", "+                continue;", "+", "+            //                System.out.println(msg + \" (\" + propertyFile.getName() + \") in (\" + workingDir + \")\");", "+", "+            Project p = new Project();", "+", "+            XmlProperty xmlproperty = new XmlProperty();", "+            xmlproperty.setProject(p);", "+            xmlproperty.setFile(inputFile);", "+", "+            xmlproperty.setKeeproot(keepRoot);", "+            xmlproperty.setCollapseAttributes(collapse);", "+            xmlproperty.setSemanticAttributes(semantic);", "+            xmlproperty.setIncludeSemanticAttribute(include);", "+            xmlproperty.setRootDirectory(workingDir);", "+", "+            // Set a property on the project to make sure that loading", "+            // a property with the same name from an xml file will", "+            // *not* change it.", "+            p.setNewProperty(\"override.property.test\", \"foo\");", "+", "+            xmlproperty.execute();", "+", "+            Properties props = new Properties();", "+            props.load(new FileInputStream(propertyFile));", "+", "+            //printProperties(p.getProperties());", "+", "+            ensureProperties(msg, inputFile, workingDir, p, props);", "+            ensureReferences(msg, inputFile, p.getReferences());", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "214c62dbae780173cdc0972a964847e7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/XMLCatalogTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void testAbsolutePath()", "signatureAfterChange": "     @Test     public void testAbsolutePath() throws IOException, SAXException", "diff": ["-    public void testAbsolutePath() {", "+    @Test", "+    public void testAbsolutePath() throws IOException, SAXException {", "-        try {", "-            InputSource result = catalog.resolveEntity(\"-//stevo//DTD doc 1.0//EN\",", "-                                                       \"nap:chemical+brothers\");", "-            assertNotNull(result);", "-            assertEquals(toURLString(dtdFile),", "-                         result.getSystemId());", "-        } catch (Exception e) {", "-            fail(\"resolveEntity() failed!\" + e.toString());", "-        }", "+        InputSource result = catalog.resolveEntity(\"-//stevo//DTD doc 1.0//EN\",", "+                                                   \"nap:chemical+brothers\");", "+        assertNotNull(result);", "+        assertEquals(toURLString(dtdFile),", "+                     result.getSystemId());", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "426481aa7da9abf920e3e65af4468cf1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/XMLCatalogTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 9, "signatureBeforeChange": "      public void testSimpleEntry()", "signatureAfterChange": "      @Test     public void testSimpleEntry() throws IOException, SAXException", "diff": ["-    public void testSimpleEntry() {", "+    @Test", "+    public void testSimpleEntry() throws IOException, SAXException {", "-        try {", "-            InputSource result = catalog.resolveEntity(\"-//stevo//DTD doc 1.0//EN\",", "-                                                       \"nap:chemical+brothers\");", "-            assertNotNull(result);", "-            assertEquals(toURLString(dtdFile),", "-                         result.getSystemId());", "-        } catch (Exception e) {", "-            fail(\"resolveEntity() failed!\" + e.toString());", "-        }", "+        InputSource result = catalog.resolveEntity(\"-//stevo//DTD doc 1.0//EN\",", "+                                                   \"nap:chemical+brothers\");", "+        assertNotNull(result);", "+        assertEquals(toURLString(dtdFile),", "+                     result.getSystemId());", "+"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da14d815a40af5e8c63796d88b466405", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "019ef6b2753a6643c5309a5265ca50d9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "196c36bc28dec63b239595132e8b00c55951c860", "commitAfterChange": "689fca41585cc1768a0501fd11c8235b6e4bc481", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 56, "signatureBeforeChange": "     private void evaluatePackages(String source, Vector packages, Vector argList)", "signatureAfterChange": "     private void evaluatePackages(String sourcePath, Vector packages, Vector argList)", "diff": ["-    private void evaluatePackages(String source, Vector packages, Vector argList) {", "+    private void evaluatePackages(String sourcePath, Vector packages, Vector argList) {", "-        project.log(\"Source dir = \" + source, project.MSG_VERBOSE);", "+        project.log(\"Source path = \" + sourcePath, project.MSG_VERBOSE);", "-        Hashtable map = mapClasses(new File(source));", "+        Vector addedPackages = new Vector();", "+        PathTokenizer tokenizer = new PathTokenizer(sourcePath);", "+        while (tokenizer.hasMoreTokens()) {", "+            File source = new File(project.translatePath(tokenizer.nextToken()));", "+            ", "+            Hashtable map = mapClasses(source);", "-        Enumeration e = map.keys();", "-        while (e.hasMoreElements()) {", "-            String pack = (String) e.nextElement();", "-            for (int i = 0; i < packages.size(); i++) {", "-                if (matches(pack, (String) packages.elementAt(i))) {", "-                    argList.addElement(pack);", "-                    break;", "+            Enumeration e = map.keys();", "+            while (e.hasMoreElements()) {", "+                String pack = (String) e.nextElement();", "+                for (int i = 0; i < packages.size(); i++) {", "+                    if (matches(pack, (String) packages.elementAt(i))) {", "+                        if (!addedPackages.contains(pack)) {", "+                            argList.addElement(pack);", "+                            addedPackages.addElement(pack);", "+                        }", "+                        break;", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "049e04346f7d73b3ab0da1829ecdecc9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecTask.java", "commitBeforeChange": "2429a99dd695f4832b9321b72835944922fc176d", "commitAfterChange": "bd8601a5a3ba0794ff75168fd65a488a5a4939f4", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": "     protected String resolveExecutable(String exec)", "signatureAfterChange": "     protected String resolveExecutable(String exec, boolean searchPath)", "diff": ["-    protected String resolveExecutable(String exec) {", "+    protected String resolveExecutable(String exec, boolean searchPath) {", "+        FileUtils fileUtils = FileUtils.newFileUtils();", "-            FileUtils fileUtils = FileUtils.newFileUtils();", "+        if (searchPath) {", "+            Vector env = Execute.getProcEnvironment();", "+            Enumeration e = env.elements();", "+            Path p = null;", "+            while (e.hasMoreElements()) {", "+                String line = (String) e.nextElement();", "+                if (line.startsWith(\"PATH=\") || line.startsWith(\"Path=\")) {", "+                    p = new Path(getProject(), line.substring(5));", "+                    break;", "+                }", "+            }", "+", "+            if (p != null) {", "+                String[] dirs = p.list();", "+                for (int i = 0; i < dirs.length; i++) {", "+                    executableFile = fileUtils.resolveFile(new File(dirs[i]),", "+                                                           exec);", "+                    if (executableFile.exists()) {", "+                        return executableFile.getAbsolutePath();", "+                    }", "+                }", "+            }", "+        }", "+", "+        // searchPath is false, or no PATH or not found - keep our", "+        // fingers crossed."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cc6c19aca5f8dfe262f323114bca4ff", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Ant.java", "commitBeforeChange": "1b25a5ab7943f4210ddf2cbb62317e8ea8aa980d", "commitAfterChange": "12f19c932133ae8e0eaae97b14eb718262cb0843", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        if( dir==null) dir=\".\";", "+        try {", "+            if (p1 == null) {", "+                reinit();", "+            }", "+        ", "+            if( dir==null) dir=\".\";", "-        p1.setBasedir(dir);", "-        p1.setUserProperty(\"basedir\" , dir);", "+            initializeProject();", "-        // Override with local-defined properties", "-        Enumeration e = properties.elements();", "-        while (e.hasMoreElements()) {", "-            Property p=(Property) e.nextElement();", "-            //\t    System.out.println(\"Setting \" + p.getName()+ \" \" + p.getValue());", "-            p.init();", "+            p1.setBasedir(dir);", "+            p1.setUserProperty(\"basedir\" , dir);", "+            ", "+            // Override with local-defined properties", "+            Enumeration e = properties.elements();", "+            while (e.hasMoreElements()) {", "+                Property p=(Property) e.nextElement();", "+                p.init();", "+            }", "+            ", "+            if (antFile == null) antFile = dir + \"/build.xml\";", "+", "+            p1.setUserProperty( \"ant.file\" , antFile );", "+            ProjectHelper.configureProject(p1, new File(antFile));", "+            ", "+            if (target == null) {", "+                target = p1.getDefaultTarget();", "+            }", "+", "+            p1.executeTarget(target);", "+        } finally {", "+            // help the gc", "+            p1 = null;", "-", "-        if (antFile == null) antFile = dir + \"/build.xml\";", "-", "-        p1.setUserProperty( \"ant.file\" , antFile );", "-        ProjectHelper.configureProject(p1, new File(antFile));", "-", "-        if (target == null) {", "-            target = p1.getDefaultTarget();", "-        }", "-", "-        p1.executeTarget(target);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5011d3d9aa349aec7ee8346ca714700", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecTask.java", "commitBeforeChange": "c1cadae30e769e118156566b578ef44ea5cc5ffa", "commitAfterChange": "f0d04b5c681dc135066cb65b1973e03672eb5044", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     protected String resolveExecutable(String exec, boolean searchPath)", "signatureAfterChange": "     protected String resolveExecutable(String exec, boolean mustSearchPath)", "diff": ["-    protected String resolveExecutable(String exec, boolean searchPath) {", "+    protected String resolveExecutable(String exec, boolean mustSearchPath) {", "-", "-", "-", "-        if (searchPath) {", "+        if (mustSearchPath) {", "-                        p = new Path(getProject(),", "-                                     environment[i].substring(5));", "+                        p = new Path(getProject(), environment[i].substring(5));", "-", "-            Vector envVars = Execute.getProcEnvironment();", "-            Enumeration e = envVars.elements();", "-            while (e.hasMoreElements()) {", "-                String line = (String) e.nextElement();", "-                if (isPath(line)) {", "-                    p = new Path(getProject(), line.substring(5));", "-                    break;", "+                Vector envVars = Execute.getProcEnvironment();", "+                Enumeration e = envVars.elements();", "+                while (e.hasMoreElements()) {", "+                    String line = (String) e.nextElement();", "+                    if (isPath(line)) {", "+                        p = new Path(getProject(), line.substring(5));", "+                        break;", "+                    }", "-            }", "-", "-                    executableFile = FILE_UTILS.resolveFile(new File(dirs[i]),", "-                                                           exec);", "+                    executableFile", "+                        = FILE_UTILS.resolveFile(new File(dirs[i]), exec);", "-", "-        // searchPath is false, or no PATH or not found - keep our", "+        // mustSearchPath is false, or no PATH or not found - keep our"]}]}
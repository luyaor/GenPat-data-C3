{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "22bdd3cfaddf2ccd6c8298136374e01e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba481a8deff965af21d3ea0cbeb05783", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "46330b41c1a0cd642c895b8ff39ab295a3519ca4", "commitAfterChange": "f42a96f3046b6a665f9755123c9f7939e53737ba", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private PropertyConfigurer getConfigurerFromName( final ObjectConfigurer configurer,                                                       final String name,                                                       boolean ignoreRoleName )         throws Exception", "signatureAfterChange": "     private PropertyConfigurer getConfigurerFromName( final ObjectConfigurer configurer,                                                       final String name,                                                       boolean ignoreRoleName )         throws Exception", "diff": ["-        final NoSuchPropertyException exc;", "-        try", "+        PropertyConfigurer propertyConfigurer = configurer.getProperty( name );", "+        if( propertyConfigurer != null )", "-            return configurer.getProperty( name );", "-        }", "-        catch( NoSuchPropertyException e )", "-        {", "-            // Keep for later", "-            exc = e;", "+            return propertyConfigurer;", "-        final PropertyConfigurer propertyConfigurer = configurer.getTypedProperty();", "-        if( !ignoreRoleName )", "+        propertyConfigurer = configurer.getTypedProperty();", "+        if( propertyConfigurer != null )", "-            final RoleInfo roleInfo = m_roleManager.getRoleByType( propertyConfigurer.getType() );", "-            if( roleInfo == null || !name.equalsIgnoreCase( roleInfo.getShorthand() ) )", "+            if( ignoreRoleName )", "-                // Rethrow the original exception", "-                throw exc;", "+                return propertyConfigurer;", "+            }", "+            else", "+            {", "+                // Check the role name", "+                final RoleInfo roleInfo = m_roleManager.getRoleByType( propertyConfigurer.getType() );", "+                if( roleInfo != null && name.equalsIgnoreCase( roleInfo.getShorthand() ) )", "+                {", "+                    return propertyConfigurer;", "+                }", "-        return propertyConfigurer;", "+        // Unknown prop", "+        throw new NoSuchPropertyException();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2bacf608564685712a2acc6925bf6ef", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XmlProperty.java", "commitBeforeChange": "74b6597e3a4c61f84321f72eb1f5be186f2a6e51", "commitAfterChange": "524a7831a7c83f78afd325bb3b7917ff73b196cf", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void execute()             throws BuildException", "signatureAfterChange": "     public void execute()             throws BuildException", "diff": ["+        if (getFile() == null) {", "+            String msg = \"XmlProperty task requires a file attribute\";", "+            throw new BuildException(msg);", "+        }", "+", "-            DocumentBuilder builder = factory.newDocumentBuilder();", "-            document = builder.parse(configurationStream);", "+            Element topElement = factory.newDocumentBuilder().parse(configurationStream).getDocumentElement();", "-            Element topElement = document.getDocumentElement();", "-            NodeList topChildren = topElement.getChildNodes();", "-            int numChildren = topChildren.getLength();", "-", "-            log(\"Using prefix: \\\"\" + prefix + \"\\\"\", Project.MSG_DEBUG);", "+            addedAttributes = new Hashtable();", "-                addNodeRecursively(topElement, prefix);", "-            }", "-            else {", "+                addNodeRecursively(topElement, prefix, null);", "+            } else {", "+                NodeList topChildren = topElement.getChildNodes();", "+                int numChildren = topChildren.getLength();", "-                    addNodeRecursively(topChildren.item(i), prefix);", "+                    addNodeRecursively(topChildren.item(i), prefix, null);"]}]}
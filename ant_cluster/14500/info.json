{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c702536fb6d588ea789a78c47eab66bb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37af5111416601f2ce49ba1935086856", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/types/PathTest.java", "commitBeforeChange": "769fac83235a4c2fac00097cd26f201aa7eae534", "commitAfterChange": "a91adaf451abf4857fd8ce133757dfc3b433bf3f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void testConstructor()", "signatureAfterChange": "      public void testConstructorWindowsStyle()", "diff": ["-    public void testConstructor() {", "-        p = new Path(project, \"\\\\a;\\\\b\");", "-        l = p.list();", "+    public void testConstructorWindowsStyle() {", "+        Path p = new Path(project, \"\\\\a;\\\\b\");", "+        String[] l = p.list();", "-        }        ", "-", "-        p = new Path(project, \"\\\\a;\\\\b:/c\");", "-        l = p.list();", "-        assertEquals(\"three items, mixed style\", 3, l.length);", "-        if (isUnixStyle) {", "-            assertEquals(\"/a\", l[0]);", "-            assertEquals(\"/b\", l[1]);", "-            assertEquals(\"/c\", l[2]);", "-        } else if (isNetWare) {", "-            assertEquals(\"\\\\a\", l[0]);", "-            assertEquals(\"\\\\b\", l[1]);", "-            assertEquals(\"\\\\c\", l[2]);", "-        } else {", "-            assertEquals(\":\\\\a\", l[0].substring(1));", "-            assertEquals(\":\\\\b\", l[1].substring(1));", "-            assertEquals(\":\\\\c\", l[2].substring(1));", "+        p = new Path(project, \"c:\\\\test;d:\\\\programs\");", "+        l = p.list();", "+        if (isUnixStyle) {", "+            assertEquals(\"no drives on Unix\", 4, l.length);", "+            assertTrue(\"c resolved relative to project\\'s basedir\", ", "+                   l[0].endsWith(\"/c\"));", "+            assertEquals(\"/test\", l[1]);", "+            assertTrue(\"d resolved relative to project\\'s basedir\", ", "+                   l[2].endsWith(\"/d\"));", "+            assertEquals(\"/programs\", l[3]);", "+        } else if (isNetWare) {", "+            assertEquals(\"volumes on NetWare\", 2, l.length);", "+            assertEquals(\"c:\\\\test\", l[0].toLowerCase(Locale.US));", "+            assertEquals(\"d:\\\\programs\", l[1].toLowerCase(Locale.US));", "+        } else {", "+            assertEquals(\"drives on DOS\", 2, l.length);", "+            assertEquals(\"c:\\\\test\", l[0].toLowerCase(Locale.US));", "+            assertEquals(\"d:\\\\programs\", l[1].toLowerCase(Locale.US));", "+        }", "+", "+", "+        p = new Path(project, \"c:/test;d:/programs\");", "+        l = p.list();", "+        if (isUnixStyle) {", "+            assertEquals(\"no drives on Unix\", 4, l.length);", "+            assertTrue(\"c resolved relative to project\\'s basedir\", ", "+                   l[0].endsWith(\"/c\"));", "+            assertEquals(\"/test\", l[1]);", "+            assertTrue(\"d resolved relative to project\\'s basedir\", ", "+                   l[2].endsWith(\"/d\"));", "+            assertEquals(\"/programs\", l[3]);", "+        } else if (isNetWare) {", "+            assertEquals(\"volumes on NetWare\", 2, l.length);", "+            assertEquals(\"c:\\\\test\", l[0].toLowerCase(Locale.US));", "+            assertEquals(\"d:\\\\programs\", l[1].toLowerCase(Locale.US));", "+        } else {", "+            assertEquals(\"drives on DOS\", 2, l.length);", "+            assertEquals(\"c:\\\\test\", l[0].toLowerCase(Locale.US));", "+            assertEquals(\"d:\\\\programs\", l[1].toLowerCase(Locale.US));", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c80010d22bc5b3e1a4bdf773a7ba3cc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/JonasDeploymentTool.java", "commitBeforeChange": "270394a09fddda0ea9ffa2330956c5f399ab840f", "commitAfterChange": "6bd8d6e938a45868902ecd1092858e8372933c7c", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private boolean addJonasVendorFiles(final Hashtable someEjbFiles,                                               final String aDdPrefix)", "signatureAfterChange": "     private String getJonasDescriptorName()", "diff": ["-    private boolean addJonasVendorFiles(final Hashtable someEjbFiles,", "-                                              final String aDdPrefix) {", "-        // replace \\ by /, remove the last letter ( a dash - )", "-        final String aCanonicalDD", "-             = aDdPrefix.replace('\\\\', '/').substring(0, aDdPrefix.length() - 1);", "-        final int index = aCanonicalDD.lastIndexOf('/') + 1;", "-        String anEjbJarName = aCanonicalDD.substring(index);", "-        if (\"ejb\".equals(anEjbJarName)) {", "-            anEjbJarName = \"ejb-jar\";", "-        }", "-        final String aNewDdPrefix =", "-            aDdPrefix.substring(0, index) + \"jonas-\" + anEjbJarName + \".xml\";", "-        File aConventionNamingJonasDD", "-             = new File(getConfig().descriptorDir, aNewDdPrefix);", "-        log(\"look for jonas specific file using jonas naming convention \"", "-             + aConventionNamingJonasDD,", "-        if (aConventionNamingJonasDD.exists()) {", "-            someEjbFiles.put(META_DIR + JONAS_DD, aConventionNamingJonasDD);", "-            return true;", "-            return false;", "+     */", "+    private String getJonasDescriptorName() {", "+", "+        // descriptorName = <path><basename><basenameterminator><remainder>", "+        // examples = /org/objectweb/fooAppli/foo/Foo-ejb-jar.xml", "+        // examples = /org/objectweb/fooAppli/foo/Foo.xml (JOnAS convention)", "+ ", "+        String jonasDescriptorName; // JOnAS-specific DD", "+        boolean jonasConvention = false; // true if the JOnAS convention is used for the DD", "+        String path;            // Directory path of the EJB descriptor", "+        String fileName;        // EJB descriptor file name", "+        String baseName;        // Filename appearing before name terminator", "+        String remainder;       // Filename appearing after the name terminator", "+ ", "+        int startOfFileName = descriptorName.lastIndexOf(File.separatorChar);", "+        if ( startOfFileName != -1 ) {", "+            // extract path info", "+            path = descriptorName.substring(0, startOfFileName+1);", "+            fileName = descriptorName.substring(startOfFileName+1);", "+        } else {", "+            // descriptorName is just a file without path", "+            path = \"\";", "+            fileName = descriptorName;", "+        }", "+ ", "+        if ( fileName.startsWith(EJB_DD) )", "+            return path + JONAS_DD;", "+", "+        int endOfBaseName = descriptorName.indexOf(getConfig().baseNameTerminator, startOfFileName);", "+ ", "+        /*", "+         * Check for the odd case where the terminator and/or filename", "+         * extension aren't found.  These will ensure \"jonas-\" appears at the", "+         * end of the name and before the '.' (if present).", "+         */", "+        if ( endOfBaseName < 0 ) { ", "+            // baseNameTerminator not found: the descriptor use the", "+            // JOnAS naming convention, ie [Foo.xml,jonas-Foo.xml] and", "+            // not [Foo<baseNameTerminator>-ejb-jar.xml,", "+            // Foo<baseNameTerminator>-jonas-ejb-jar.xml].", "+            endOfBaseName = descriptorName.lastIndexOf('.') - 1;", "+            if (endOfBaseName < 0) {", "+                // no . found", "+                endOfBaseName = descriptorName.length() - 1;", "+            }", "+ ", "+            jonasConvention = true;", "+        }", "+", "+        baseName = descriptorName.substring(startOfFileName + 1, endOfBaseName + 1);", "+        remainder = descriptorName.substring(endOfBaseName + 1);", "+ ", "+        if ( jonasConvention ) {", "+            jonasDescriptorName = path + \"jonas-\" + baseName + \".xml\";", "+        } else {", "+            jonasDescriptorName = path + baseName + \"jonas-\" + remainder;", "+        }", "+ ", "+        log(\"Standard EJB descriptor name: \" + descriptorName, Project.MSG_VERBOSE);", "+        log(\"JOnAS-specific descriptor name: \" + jonasDescriptorName, Project.MSG_VERBOSE);", "+ ", "+        return jonasDescriptorName;", "+    }"]}]}
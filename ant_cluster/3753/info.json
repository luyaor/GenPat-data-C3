{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cf5b955b32ff2fb8ffccae4ab2547ed3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4335ec43367d6e624fbf50bb57bece59", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/metamata/MAuditStreamHandler.java", "commitBeforeChange": "4a63f3b33824d1af6537636e50dc9f0bf73221aa", "commitAfterChange": "0380eac20a5d2f2fef36091bc8a51135eb916c27", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void stop()", "signatureAfterChange": "     public void stop()", "diff": ["-        Iterator keys = auditedFiles.keys();", "-        Hashtable filemapping = task.getFileMapping();", "-        rootElement.setAttribute( \"audited\", String.valueOf( filemapping.size() ) );", "-        rootElement.setAttribute( \"reported\", String.valueOf( auditedFiles.size() ) );", "+        final Iterator keys = m_auditedFiles.keySet().iterator();", "+        rootElement.setAttribute( \"audited\", String.valueOf( m_fileMapping.size() ) );", "+        rootElement.setAttribute( \"reported\", String.valueOf( m_auditedFiles.size() ) );", "-            ArrayList v = (ArrayList)auditedFiles.get( filepath );", "-            String fullclassname = (String)filemapping.get( filepath );", "+            ArrayList v = (ArrayList)m_auditedFiles.get( filepath );", "+            String fullclassname = (String)m_fileMapping.get( filepath );", "-                task.getLogger().warn( \"Could not find class mapping for \" + filepath );", "+                getLogger().warn( \"Could not find class mapping for \" + filepath );", "-                MAudit.Violation violation = (MAudit.Violation)v.get( i );", "+                Violation violation = (Violation)v.get( i );", "-                error.setAttribute( \"line\", String.valueOf( violation.line ) );", "-                error.setAttribute( \"message\", violation.error );", "+                error.setAttribute( \"line\", String.valueOf( violation.getLine() ) );", "+                error.setAttribute( \"message\", violation.getError() );", "-        if( xmlOut != null )", "+        if( m_xmlOut != null )", "-                wri = new OutputStreamWriter( xmlOut, \"UTF-8\" );", "+                wri = new OutputStreamWriter( m_xmlOut, \"UTF-8\" );", "-                task.getLogger().error( \"Unable to write log file\" );", "+                getLogger().error( \"Unable to write log file\" );", "-                if( xmlOut != System.out && xmlOut != System.err )", "+                if( m_xmlOut != System.out && m_xmlOut != System.err )"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64438e2e703bf5a8e517aafa8122d302", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/metamata/MAuditStreamHandler.java", "commitBeforeChange": "4a63f3b33824d1af6537636e50dc9f0bf73221aa", "commitAfterChange": "0380eac20a5d2f2fef36091bc8a51135eb916c27", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void stop()", "signatureAfterChange": "     public void stop()", "diff": ["-        Iterator keys = auditedFiles.keys();", "-        Hashtable filemapping = task.getFileMapping();", "-        rootElement.setAttribute( \"audited\", String.valueOf( filemapping.size() ) );", "-        rootElement.setAttribute( \"reported\", String.valueOf( auditedFiles.size() ) );", "+        final Iterator keys = m_auditedFiles.keySet().iterator();", "+        rootElement.setAttribute( \"audited\", String.valueOf( m_fileMapping.size() ) );", "+        rootElement.setAttribute( \"reported\", String.valueOf( m_auditedFiles.size() ) );", "-            ArrayList v = (ArrayList)auditedFiles.get( filepath );", "-            String fullclassname = (String)filemapping.get( filepath );", "+            ArrayList v = (ArrayList)m_auditedFiles.get( filepath );", "+            String fullclassname = (String)m_fileMapping.get( filepath );", "-                task.getLogger().warn( \"Could not find class mapping for \" + filepath );", "+                getLogger().warn( \"Could not find class mapping for \" + filepath );", "-                MAudit.Violation violation = (MAudit.Violation)v.get( i );", "+                Violation violation = (Violation)v.get( i );", "-                error.setAttribute( \"line\", String.valueOf( violation.line ) );", "-                error.setAttribute( \"message\", violation.error );", "+                error.setAttribute( \"line\", String.valueOf( violation.getLine() ) );", "+                error.setAttribute( \"message\", violation.getError() );", "-        if( xmlOut != null )", "+        if( m_xmlOut != null )", "-                wri = new OutputStreamWriter( xmlOut, \"UTF-8\" );", "+                wri = new OutputStreamWriter( m_xmlOut, \"UTF-8\" );", "-                task.getLogger().error( \"Unable to write log file\" );", "+                getLogger().error( \"Unable to write log file\" );", "-                if( xmlOut != System.out && xmlOut != System.err )", "+                if( m_xmlOut != System.out && m_xmlOut != System.err )"]}]}
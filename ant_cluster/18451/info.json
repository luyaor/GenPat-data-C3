{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "709e4345d85e54a06437af7648c0fad3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72eca6f1f587d1251acd3f17bcf3e450", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antlibs/system/org/apache/ant/antlib/system/Parallel.java", "commitBeforeChange": "65b70febb53b077317c4d678291f9af547c3d116", "commitAfterChange": "f9d1c1691c7e9d80b793f5178f6113c949fc2441", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void execute() throws ExecutionException", "signatureAfterChange": "     public void execute() throws AntException", "diff": ["-    public void execute() throws ExecutionException {", "+    public void execute() throws AntException {", "-                if (t instanceof ExecutionException &&", "+                if (t instanceof AntException &&", "-                    firstLocation = ((ExecutionException) t).getLocation();", "+                    firstLocation = ((AntException) t).getLocation();", "-            if (firstException instanceof ExecutionException) {", "-                throw (ExecutionException) firstException;", "+            if (firstException instanceof AntException) {", "+                throw (AntException) firstException;", "-                throw new ExecutionException(firstException);", "+                throw new SystemException(firstException);", "-            throw new ExecutionException(exceptionMessage.toString(),", "+            throw new SystemException(exceptionMessage.toString(),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7f94561b0e7d51fa1754ff2fc10e923", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/Frame.java", "commitBeforeChange": "69d9b9a49622889f44d6792faf00f886857828d6", "commitAfterChange": "fcc7e2b47f01468c83803caa09ce8266e56f213c", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "     protected void executeTask(Task task) throws ExecutionException", "signatureAfterChange": "     protected void executeTask(Task task, AspectValueCollection aspectValues)           throws ExecutionException", "diff": ["-    protected void executeTask(Task task) throws ExecutionException {", "+    protected void executeTask(Task task, AspectValueCollection aspectValues) ", "+         throws ExecutionException {", "-            Object context = aspect.preExecuteTask(task);", "-            aspectContexts.put(aspect, context);", "+            Object aspectContext = aspect.preExecuteTask(task, aspectValues);", "+            if (aspectContext != null) {", "+                aspectContexts.put(aspect, aspectContext);", "+            }", "-        AntContext context = task.getAntContext();", "-", "-        if (!(context instanceof ExecutionContext)) {", "-            throw new ExecutionException(\"The Task was not configured with an\"", "-                 + \" appropriate context\");", "-        }", "-        ExecutionContext execContext = (ExecutionContext) context;", "-", "+        ExecutionContext execContext = (ExecutionContext) task.getAntContext();"]}]}
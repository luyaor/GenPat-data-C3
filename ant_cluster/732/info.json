{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3a560ff59717a117bacce415ac7597e7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57e8f22d398be2aee41f30a68f813da6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/vfs/provider/AbstractFileObject.java", "commitBeforeChange": "f382fa32eec7260111db0d67ae9c90dee2d6de0b", "commitAfterChange": "dfa0c6e159416ba22df942ba98e496d99d53d07f", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 27, "signatureBeforeChange": "     public void copy( final FileObject file ) throws FileSystemException", "signatureAfterChange": "     public void copyFrom( final FileObject file, final FileSelector selector )         throws FileSystemException", "diff": ["+     */", "+    public void copyFrom( final FileObject file, final FileSelector selector )", "+        throws FileSystemException", "+    {", "+        if( !file.exists() )", "+        {", "+            final String message = REZ.getString( \"copy-missing-file.error\", file.getName() );", "+            throw new FileSystemException( message );", "+        }", "+        if( isReadOnly() )", "+        {", "+            final String message = REZ.getString( \"copy-read-only.error\", file.getType(), file.getName(), m_name );", "+            throw new FileSystemException( message );", "+        }", "+", "+        // Locate the files to copy across", "+        final ArrayList files = new ArrayList();", "+        ( (AbstractFileObject)file ).findFiles( selector, false, files );", "+", "+        // Copy everything across", "+        final int count = files.size();", "+        for( int i = 0; i < count; i++ )", "+        {", "+            final FileObject srcFile = (FileObject)files.get( i );", "+", "+            // Determine the destination file", "+            final String relPath = file.getName().getRelativeName( srcFile.getName() );", "+            final FileObject destFile = resolveFile( relPath, NameScope.DESCENDENT_OR_SELF );", "+", "+            // Clean up the destination file, if necessary", "+            if( destFile.exists() && destFile.getType() != srcFile.getType() )", "+            {", "+                // The destination file exists, and is not of the same type,", "+                // so delete it", "+                // TODO - add a pluggable policy for deleting and overwriting existing files", "+                destFile.delete( FileConstants.SELECT_ALL );", "+            }", "+", "+            // Copy across", "+            if( srcFile.getType() == FileType.FILE )", "+            {", "+                copyContent( srcFile, destFile );", "+            }", "+            else", "+            {", "+                destFile.create( FileType.FOLDER );", "+            }", "+        }", "+    }", "-    public void copy( final FileObject file ) throws FileSystemException", "-            final InputStream instr = file.getContent().getInputStream();", "-                // Create the output strea via getContent(), to pick up the", "-                final OutputStream outstr = getContent().getOutputStream();", "-            final String message = REZ.getString( \"copy-file.error\", file.getName(), m_name );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cadc425db064c50574551c1f5faed215", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Ant.java", "commitBeforeChange": "5e2008922a1fe38ae7867c07cfd049e247e95f1e", "commitAfterChange": "c672e8778ed4d0f929d9bb413532a4b2e421fa16", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        String savedTarget = target;", "+        Vector locals = new Vector(targets);", "-            log(\"calling target \" + (target != null ? target : \"[default]\")", "-                    + \" in build file \" +  antFile, Project.MSG_VERBOSE);", "+            log(\"calling target(s) \"", "+                + ((locals.size() == 0) ? locals.toString() : \"[default]\")", "+                + \" in build file \" + antFile, Project.MSG_VERBOSE);", "-            if (target == null) {", "-                target = newProject.getDefaultTarget();", "+            if (locals.size() == 0) {", "+                String defaultTarget = newProject.getDefaultTarget();", "+                if (defaultTarget != null) {", "+                    locals.add(defaultTarget);", "+                }", "-                if (owningTargetName.equals(target)) {", "+                if (locals.contains(owningTargetName)) {", "-                    Target other =", "-                        (Target) getProject().getTargets().get(target);", "-                    if (other != null && other.dependsOn(owningTargetName)) {", "+                    boolean circular = false;", "+                    for (Iterator it = locals.iterator(); !circular && it.hasNext();) {", "+                        Target other = (Target)(getProject().getTargets().get(", "+                            (String)(it.next())));", "+                        circular |= (other != null", "+                            && other.dependsOn(owningTargetName));", "+                    }", "+                    if (circular) {", "-            if (target != null && !\"\".equals(target)) {", "+            if (locals.size() > 0 && !(locals.size() == 1 && locals.get(0) == \"\")) {", "-                    newProject.executeTarget(target);", "+                    String[] nameArray =", "+                        (String[])(locals.toArray(new String[locals.size()]));", "+", "+                    Hashtable targets = newProject.getTargets();", "+                    Vector sortedTargets = newProject.topoSort(nameArray, targets);", "+", "+                    sortedTargets.setSize(sortedTargets.indexOf(targets.get(", "+                        locals.lastElement())) + 1);", "+                    newProject.executeSortedTargets(sortedTargets);", "-            target = savedTarget;"]}]}
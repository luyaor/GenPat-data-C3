{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "64c0f141fc55147a7688f8d839b8043f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98be6ecfa08ccdb732930b2d09ab1a64", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/anteater/source/main/org/apache/ant/cli/CLIFrontEnd.java", "commitBeforeChange": "f85678f1abd081bfd165ce81b94bad652968e4fd", "commitAfterChange": "d8a7035c55e9315383161c20b42077f65748f081", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void run(String[] args)", "signatureAfterChange": "     public void run(String[] args)", "diff": ["-                // ant.addTaskPathNode(new File(argTaskpath));", "+                taskManager.addTaskPathNode(new File(argTaskpath));", "-            ProjectBuilder projectBuilder = new ProjectBuilder(this);", "-            //Project project = ant.getProject();", "-            ", "-            // XXX", "-            // get taskmanager from project and set taskpath nodes on it!", "-        } catch (AntException ae) {            ", "+        } catch (AntException ae) {  ", "+        ", "+            //XXX this whole write a string at a time message handling", "+            // sucks and needs to be improved...", "+                    ", "+            Throwable t = ae.getCause();", "+            if (t != null) {", "+                writeMessage(\"\");", "+                writeMessage(\"Cause Exception: \" + t.toString());", "+                writeMessage(t.getMessage());", "+                t.printStackTrace(System.out);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae2c6da34fcebb2a2abf5401037a4357", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "b3dffa5f955c1cd32b73ac3b100e648e1106de6c", "commitAfterChange": "b6ec4af9dd33b9a37fe18f1c2a043e67bdf0d67b", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "          public void init(String propType, AttributeList attrs) throws SAXParseException", "signatureAfterChange": "          public void init(String propType, AttributeList attrs) throws SAXParseException", "diff": ["-", "-            String methodName = \"create\" + Character.toUpperCase(propType.charAt(0)) + propType.substring(1);", "+            IntrospectionHelper ih = ", "+                IntrospectionHelper.getHelper(targetClass);", "-                Method addProp = targetClass.getMethod(methodName, new Class[]{});", "-                child = addProp.invoke(target, new Object[] {});", "+                child = ih.createElement(target, propType.toLowerCase());", "-            } catch(NoSuchMethodException exc) {", "-                throw new SAXParseException(targetClass + \" does not support nested \" + propType + \" properties\", locator);", "-            } catch(InvocationTargetException exc) {", "-                throw new SAXParseException(exc.getMessage(), locator);", "-            } catch(IllegalAccessException exc) {", "-                throw new SAXParseException(exc.getMessage(), locator);", "+            } catch (BuildException exc) {", "+                throw new SAXParseException(exc.getMessage(), locator, exc);", "+            }", "+        }"]}]}
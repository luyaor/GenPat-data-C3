{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "54596e8440d7c5591039df41dbd5245f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0afba19811a370c7e28c6abcb464ef8f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/GenericDeploymentTool.java", "commitBeforeChange": "1cd764447cbd26e40fb0b78aaa4b4cf3398d2a9a", "commitAfterChange": "a50b60cdd9337ee2978a7f1522cf4963785f7aa9", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     protected void writeJar(String baseName, File jarfile, Hashtable files,                              String publicId) throws BuildException", "signatureAfterChange": "     protected void writeJar(String baseName, File jarfile, Hashtable files,                              String publicId) throws BuildException", "diff": ["-            String defaultManifest = \"/org/apache/tools/ant/defaultManifest.mf\";", "-            InputStream in = this.getClass().getResourceAsStream(defaultManifest);", "-            if ( in == null ) {", "-                throw new BuildException ( \"Could not find: \" + defaultManifest );", "+            InputStream in = null;", "+            Manifest manifest = null;", "+            try {", "+                if (config.manifest != null) {", "+                    in = new FileInputStream(config.manifest);", "+                    if ( in == null ) {", "+                        throw new BuildException(\"Could not find manifest file: \" + config.manifest, ", "+                                                  getLocation());", "+                    }", "+                }", "+                else {", "+                    String defaultManifest = \"/org/apache/tools/ant/defaultManifest.mf\";", "+                    in = this.getClass().getResourceAsStream(defaultManifest);", "+                    if ( in == null ) {", "+                        throw new BuildException(\"Could not find default manifest: \" + defaultManifest,", "+                                                  getLocation());", "+                    }", "+                }", "+                            ", "+                manifest = new Manifest(in);", "+            }", "+            catch (IOException e) {", "+                throw new BuildException (\"Unable to read manifest\", e, getLocation());", "+            }", "+            finally {", "+                if (in != null) {", "+                    in.close();", "+                }", "-            Manifest manifest = new Manifest(in);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ebed87aff1c1ae878c3092fd5f57e2a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/ReplaceTokens.java", "commitBeforeChange": "ca4d619112299ab28dd289a2e0e407ddebc6340c", "commitAfterChange": "6e88f92ead6a5f67935055661a9e8041f5ed8bae", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private void initialize()", "signatureAfterChange": "     private void initialize()", "diff": ["-            for (int i = 0; i < params.length; i++) {", "-                if (params[i] != null) {", "-                    final String type = params[i].getType();", "+            for (Parameter param : params) {", "+                if (param != null) {", "+                    final String type = param.getType();", "-                        final String name = params[i].getName();", "-                        String value = params[i].getValue();", "+                        final String name = param.getName();", "-                            if (value.length() == 0) {", "-                                throw new BuildException(\"Begin token cannot \"", "-                                    + \"be empty\");", "-                            }", "-                            beginToken = params[i].getValue().charAt(0);", "+                            beginToken = param.getValue();", "-                            if (value.length() == 0) {", "-                                throw new BuildException(\"End token cannot \"", "-                                    + \"be empty\");", "-                            }", "-                            endToken = params[i].getValue().charAt(0);", "+                            endToken = param.getValue();", "-                        final String name = params[i].getName();", "-                        final String value = params[i].getValue();", "+                        final String name = param.getName();", "+                        final String value = param.getValue();", "-                            new FileResource(new File(params[i].getValue())));", "+                                new FileResource(new File(param.getValue())));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0c8acf91b19355ea039742c2e0687ed", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "33b7e4299233528015cc4b40713098fb6342b05e", "commitAfterChange": "787728897a6052af385456788bc4e578ba170ba5", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": "     protected void scandir(File dir, String vpath, boolean fast)", "signatureAfterChange": "     protected void scandir(File dir, String vpath, boolean fast)", "diff": ["-                    if (!isExcluded(name)) {", "-                        if (isSelected(name, file)) {", "-                            dirsIncluded.addElement(name);", "-                            if (fast) {", "-                                scandir(file, name + File.separator, fast);", "-                            }", "-                        } else {", "-                            everythingIncluded = false;", "-                            dirsDeselected.addElement(name);", "-                            if (fast && couldHoldIncluded(name)) {", "-                                scandir(file, name + File.separator, fast);", "-                            }", "-                        }", "-", "-                    } else {", "-                        everythingIncluded = false;", "-                        dirsExcluded.addElement(name);", "-                        if (fast && couldHoldIncluded(name)) {", "-                            scandir(file, name + File.separator, fast);", "-                        }", "-                    }", "+                  accountForIncludedDir(name, file, fast);", "-                    if (!isExcluded(name)) {", "-                        if (isSelected(name, file)) {", "-                            filesIncluded.addElement(name);", "-                        } else {", "-                            everythingIncluded = false;", "-                            filesDeselected.addElement(name);", "-                        }", "-                    } else {", "-                        everythingIncluded = false;", "-                        filesExcluded.addElement(name);", "-                    }", "+                    accountForIncludedFile(name, file);"]}]}
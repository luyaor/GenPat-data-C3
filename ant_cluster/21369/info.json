{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "68d406fe3fb941e97eef89dc8bfd2c96", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "599fbc711fd1467280da4fb1cd983bc4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/JDBCTask.java", "commitBeforeChange": "598e18997aca23e441c8302888e7423fac146da8", "commitAfterChange": "75126703fa23e343eb404024a281ecbadf7aef0b", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "     protected Connection getConnection() throws BuildException", "signatureAfterChange": "     protected Connection getConnection() throws BuildException", "diff": ["+", "+            for (Iterator props = connectionProperties.iterator();", "+                 props.hasNext(); ) {", "+                Property p = (Property) props.next();", "+                String name = p.getName();", "+                String value = p.getValue();", "+                if (name == null || value == null) {", "+                    log(\"Only name/value pairs are supported as connection\"", "+                        + \" properties.\", Project.MSG_WARN);", "+                } else {", "+                    log(\"Setting connection property \" + name + \" to \" + value,", "+                        Project.MSG_VERBOSE);", "+                    info.put(name, value);", "+                }", "+            }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91752ae91526175aac3db8bff5a87a90", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "2ef872804303b611e9a26dbcee320bfbac800c52", "commitAfterChange": "f76dfe4521618521029828e214ababd55124d919", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void run()", "signatureAfterChange": "      public void run()", "diff": ["-            suite.run(res);", "-            junitTest.setCounts(res.runCount(), res.failureCount(), ", "-                                res.errorCount());", "-            junitTest.setRunTime(System.currentTimeMillis() - start);", "+", "+", "+            PrintStream oldErr = System.err;", "+            PrintStream oldOut = System.out;", "+              ", "+            ByteArrayOutputStream errStrm = new ByteArrayOutputStream();", "+            System.setErr(new PrintStream(errStrm));", "+            ", "+            ByteArrayOutputStream outStrm = new ByteArrayOutputStream();", "+            System.setOut(new PrintStream(outStrm));", "+", "+            try {", "+                suite.run(res);", "+            } finally {", "+                System.err.close();", "+                System.out.close();", "+                System.setErr(oldErr);", "+                System.setOut(oldOut);", "+                sendOutAndErr(new String(outStrm.toByteArray()),", "+                              new String(errStrm.toByteArray()));", "+", "+                junitTest.setCounts(res.runCount(), res.failureCount(), ", "+                                    res.errorCount());", "+                junitTest.setRunTime(System.currentTimeMillis() - start);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94bd6e4e5bfeb9ed2423783ef3b17436", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Jar.java", "commitBeforeChange": "1fa5ccf5682707c6b5e33482b641009e48190013", "commitAfterChange": "bec2a0777e910345fa7877d5aaa209ddde0937e3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      protected void initZipOutputStream(ZipOutputStream zOut)         throws IOException, BuildException", "signatureAfterChange": "      protected void initZipOutputStream(ZipOutputStream zOut)         throws IOException, BuildException", "diff": ["-            // If no manifest is specified, add the default one.", "-            if (manifest == null) {", "-                execManifest = null;", "-            }", "-            else {", "-                execManifest = new Manifest();", "+            execManifest = getDefaultManifest();", "+", "+            if (manifest != null) {", "+            for (Enumeration e = execManifest.getWarnings(); e.hasMoreElements(); ) {", "+                log(\"Manifest warning: \" + (String)e.nextElement(), Project.MSG_WARN);", "+            }", "+        ", "+            // time to write the manifest", "+            ByteArrayOutputStream baos = new ByteArrayOutputStream();", "+            PrintWriter writer = new PrintWriter(baos);", "+            execManifest.write(writer);", "+            writer.flush();", "+        ", "+            ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());", "+            super.zipFile(bais, zOut, \"META-INF/MANIFEST.MF\", System.currentTimeMillis());", "-                log(\"Manifest is invalid: \" + e.getMessage(), Project.MSG_ERR);", "-                throw new BuildException(\"Invalid Manifest\", e, getLocation());", "+            log(\"Manifest is invalid: \" + e.getMessage(), Project.MSG_ERR);", "+            throw new BuildException(\"Invalid Manifest\", e, getLocation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cff785b4ba5f86a69ff40484258799b7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/sound/SoundTask.java", "commitBeforeChange": "ba37bf7991e099b567f8cd5a09178893ff55bb9c", "commitAfterChange": "784d54ca4803b0c8fcb6cd4753cc56f0822a1643", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": "         public File getSource()", "signatureAfterChange": "         public File getSource()", "diff": ["-            return this.file;", "+            File nofile = null ;", "+            // Check if source is a directory", "+            if( source.exists() ) {", "+                if( source.isDirectory() ) {", "+                    // get the list of files in the dir", "+                    File[] files = source.listFiles() ; ", "+                    int numfiles = files.length ;", "+                    // get a random number between 0 and the number of files", "+                    Random rn = new Random() ;", "+                    int i = rn.nextInt(numfiles) ;", "+                    // set the source to the file at that location", "+                    this.source = files[i] ;", "+                }", "+            } else {", "+                log(source + \": invalid path.\", Project.MSG_WARN) ;", "+                this.source = nofile ;", "+            }", "+            return this.source ;"]}]}
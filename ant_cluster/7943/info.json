{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5d75aa60df1a279badd3a6b7805dfbd0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "870e930c05cdf4689786351605ca1f3b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "ec980be7345681968c93f0609e9a3fecb39b9753", "commitAfterChange": "fbb9886634198d8377104bef9ec697fadeb134df", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private void checkAndExecute()", "signatureAfterChange": "     private ResourceCollection validate()", "diff": ["-    private void checkAndExecute() {", "+    private ResourceCollection validate() {", "-                    \"DestFile attribute is required for binary concatenation\");", "+                    \"destfile attribute is required for binary concatenation\");", "-", "-", "-", "-        if (sources.size() == 0 && textBuffer == null) {", "+        if (rc == null && textBuffer == null) {", "-                \"At least one file must be provided, or some text.\");", "+                \"At least one resource must be provided, or some text.\");", "-", "-        // If using filesets, disallow inline text. This is similar to", "-        // using GNU 'cat' with file arguments -- stdin is simply", "-        // ignored.", "-        if (sources.size() > 0 && textBuffer != null) {", "-            throw new BuildException(", "-                \"Cannot include inline text when using filesets.\");", "-        }", "-", "-        // Iterate thru the sources - paths, filesets and filelists", "-        for (Enumeration e = sources.elements(); e.hasMoreElements();) {", "-            Object o = e.nextElement();", "-            if (o instanceof Path) {", "-                Path path = (Path) o;", "-                checkAddFiles(null, path.list());", "-", "-            } else if (o instanceof FileSet) {", "-                FileSet fileSet = (FileSet) o;", "-                DirectoryScanner scanner =", "-                    fileSet.getDirectoryScanner(getProject());", "-                checkAddFiles(fileSet.getDir(getProject()),", "-                              scanner.getIncludedFiles());", "-", "-            } else if (o instanceof FileList) {", "-                FileList fileList = (FileList) o;", "-                checkAddFiles(fileList.getDir(getProject()),", "-                              fileList.getFiles(getProject()));", "+        if (rc != null) {", "+            // If using resources, disallow inline text. This is similar to", "+            // using GNU 'cat' with file arguments -- stdin is simply", "+            // ignored.", "+            if (textBuffer != null) {", "+                throw new BuildException(", "+                    \"Cannot include inline text when using resources.\");", "-        }", "-", "-        // check if the files are outofdate", "-        if (destinationFile != null && !forceOverwrite", "-            && (sourceFiles.size() > 0) && destinationFile.exists()) {", "-            boolean outofdate = false;", "-            for (int i = 0; i < sourceFiles.size(); ++i) {", "-                File file = (File) sourceFiles.elementAt(i);", "-                if (file.lastModified() > destinationFile.lastModified()) {", "-                    outofdate = true;", "-                    break;", "+            Restrict noexistRc = new Restrict();", "+            noexistRc.add(NOT_EXISTS);", "+            noexistRc.add(rc);", "+            for (Iterator i = noexistRc.iterator(); i.hasNext();) {", "+                log(i.next() + \" does not exist.\", Project.MSG_ERR);", "+            }", "+            if (destinationFile != null) {", "+                for (Iterator i = rc.iterator(); i.hasNext();) {", "+                    Object o = i.next();", "+                    if (o instanceof FileResource) {", "+                        File f = ((FileResource) o).getFile();", "+                        if (FILE_UTILS.fileNameEquals(f, destinationFile)) {", "+                            throw new BuildException(\"Input file \\\"\"", "+                                + f + \"\\\" is the same as the output file.\");", "+                        }", "+                    }", "+                }", "+            }", "+            Restrict existRc = new Restrict();", "+            existRc.add(EXISTS);", "+            existRc.add(rc);", "+            boolean outofdate = destinationFile == null || forceOverwrite;", "+            if (!outofdate) {", "+                for (Iterator i = existRc.iterator(); !outofdate && i.hasNext();) {", "+                    Resource r = (Resource) i.next();", "-                return; // no need to do anything", "+                return null; // no need to do anything", "+            return existRc;", "+        } else {", "+            StringResource s = new StringResource();", "+            s.setProject(getProject());", "+            s.setValue(textBuffer.toString());", "+            return s;", "+    }", "-        // Do nothing if all the sources are not present", "-        // And textBuffer is null", "-        if (textBuffer == null && sourceFiles.size() == 0", "-            && header == null && footer == null) {", "-            log(\"No existing files and no nested text, doing nothing\",", "-", "-            binaryCat();", "-            cat();", "-        }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caf24dd808d201d010220002b72acdd7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/Main.java", "commitBeforeChange": "58f8db35ee5db94294191fc2599cb02a8086b881", "commitAfterChange": "8c97911720b40557d78672245bc2e7f724917297", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected void execute( final List clOptions )         throws Exception", "signatureAfterChange": "     protected void execute( final List clOptions )         throws Exception", "diff": ["-        String builderName = null;", "-        String binDir = null;", "-        String libDir = null;", "-            case BIN_DIR_OPT: binDir = option.getArgument(); break;", "-            case LIB_DIR_OPT: libDir = option.getArgument(); break;", "-        if( null == logLevel ) logLevel = getDefaultLogLevel();", "-        if( null == listenerName ) listenerName = getDefaultListener();", "-        if( null == filename ) filename = getDefaultFilename();", "-        if( null == libDir ) libDir = getDefaultLibDir();", "-        if( null == taskLibDir ) taskLibDir = getDefaultTaskLibDir();", "-        if( null == builderName ) builderName = getBuilderNameFor( filename );", "+        if( null == logLevel ) logLevel = DEFAULT_LOGLEVEL;", "+        if( null == listenerName ) listenerName = DEFAULT_LISTENER;", "+        if( null == filename ) filename = DEFAULT_FILENAME;", "-        setupLogger( logLevel ); //handle logging...", "-        setupListener( listenerName ); //handle listener..", "-        setupDefaultAntDirs();        ", "+        //handle logging...", "+        setLogger( createLogger( logLevel ) );", "-        //try to auto-discover the location of ant so that ", "-        //can populate classpath with libs/tasks and gain access", "-        //to antRun", "-        if( null == binDir && null == homeDir ) ", "+        //if ant home not set then use system property ant.home ", "+        //that was set up by launcher.", "+        if( null == homeDir ) homeDir = System.getProperty( \"ant.home\" );", "+", "+        final Properties properties = new Properties();", "+        properties.setProperty( \"ant.home\", homeDir );", "+", "+        if( null != taskLibDir ) properties.setProperty( \"ant.path.task-lib\", taskLibDir );", "+", "+        m_homeDir = (new File( homeDir )).getAbsoluteFile();", "+        if( !m_homeDir.isDirectory() )", "-            m_homeDir = getDefaultHomeDir();", "-            m_binDir = m_homeDir.getParentFile();", "-        }", "-        else if( null == binDir ) // && null != homeDir", "-        {", "-            m_homeDir = getHomeDir( homeDir );", "-            m_binDir = new File( m_homeDir, \"bin\" );", "-        }", "-        else", "-        {", "-            m_binDir = getBinDir( binDir );", "-            m_homeDir = m_binDir.getParentFile();", "+            throw new AntException( \"ant-home (\" + m_homeDir + \") is not a directory\" );", "-        m_libDir = getLibDir( m_homeDir, libDir );", "-        m_taskLibDir = getTaskLibDir( m_homeDir, taskLibDir );", "-        m_buildFile = getFile( filename );", "+        final File libDir = new File( m_homeDir, \"lib\" );", "-        m_logger.warn( \"Ant Build File: \" + m_buildFile );", "-        m_logger.info( \"Ant Home Directory: \" + m_homeDir );", "-        m_logger.info( \"Ant Bin Directory: \" + m_binDir );", "-        m_logger.debug( \"Ant Lib Directory: \" + m_libDir );", "-        m_logger.debug( \"Ant Task Lib Directory: \" + m_taskLibDir );", "-", "+        final File buildFile = (new File( filename )).getCanonicalFile();", "+        if( !buildFile.isFile() )", "+        {", "+            throw new AntException( \"File \" + buildFile + \" is not a file or doesn't exist\" );", "+        }", "+        ", "-        setupContextClassLoader( m_libDir );", "+        final ClassLoader classLoader = createClassLoader( libDir );", "+        Thread.currentThread().setContextClassLoader( classLoader );", "-        final Project project = getProject( builderName, m_buildFile );", "+        //handle listener.. ", "+        final ProjectListener listener = createListener( listenerName ); ", "+", "+        getLogger().warn( \"Ant Build File: \" + buildFile );", "+        getLogger().info( \"Ant Home Directory: \" + m_homeDir );", "+        //getLogger().info( \"Ant Bin Directory: \" + m_binDir );", "+        //getLogger().debug( \"Ant Lib Directory: \" + m_libDir );", "+        //getLogger().debug( \"Ant Task Lib Directory: \" + m_taskLibDir );", "+", "+        final AntEngine antEngine = new DefaultAntEngine();", "+        setupLogger( antEngine );", "+        antEngine.setProperties( properties );", "+        antEngine.init();", "+", "+        final ProjectBuilder builder = antEngine.getProjectBuilder();", "+", "+        //create the project", "+        final Project project = builder.build( buildFile );", "-        final ProjectEngine engine = getProjectEngine();", "-", "-        //make sure Engine is sweet...", "-        if( engine instanceof Initializable )", "-        {", "-            ((Initializable)engine).init();", "-        }", "-", "-        engine.addProjectListener( m_listener );", "-", "-        deployDefaultTaskLibs( engine, m_taskLibDir );", "+        final ProjectEngine engine = antEngine.getProjectEngine();", "+        engine.addProjectListener( listener );", "-        //shutdown engine gracefully if needed", "-        if( engine instanceof Disposable )", "-        {", "-            ((Disposable)engine).dispose();", "-        }", "-    }", "+        antEngine.dispose();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea52885823a05dfc31df9833c75c805e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ff40785b577ee8e4138afb112338682", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/taskdefs/rmic/WLRmic.java", "commitBeforeChange": "bd92e4de44f659770bc30e39f352dcc8446a1e9a", "commitAfterChange": "248269dea49bf84d7f1a87d23906854c519b9f70", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public boolean execute()         throws TaskException", "signatureAfterChange": "      public boolean execute()         throws TaskException", "diff": ["-        Commandline cmd = setupRmicCommand( new String[]{\"-noexit\"} );", "-        try", "-        {", "-            // Create an instance of the rmic", "-            Class c = Class.forName( \"weblogic.rmic\" );", "-            Method doRmic = c.getMethod( \"main\",", "-                                         new Class[]{String[].class} );", "-            doRmic.invoke( null, new Object[]{cmd.getArguments()} );", "-            return true;", "-        }", "-        catch( ClassNotFoundException ex )", "-        {", "-            throw new TaskException( \"Cannot use WebLogic rmic, as it is not available\" +", "-                                     \" A common solution is to set the environment variable\" +", "-                                     \" CLASSPATH.\" );", "-        }", "-        catch( Exception ex )", "-        {", "-            if( ex instanceof TaskException )", "-            {", "-                throw (TaskException)ex;", "-            }", "-            else", "-            {", "-                throw new TaskException( \"Error starting WebLogic rmic: \", ex );", "-            }", "-        }", "+        final ExecuteJava exe = new ExecuteJava();", "+        exe.setClassName( \"weblogic.rmic\" );", "+        final Commandline cmd = setupRmicCommand( new String[]{\"-noexit\"} );", "+        exe.getArguments().addArguments( cmd );", "+", "+        exe.execute( getTaskContext() );", "+        return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "748a5562407d881069b8dd9cef411d30", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/compilers/Kjc.java", "commitBeforeChange": "eca527f22bfff2af0e9b57e1c10e6f25424fe653", "commitAfterChange": "6cfcccdb388eea1af2b53c208e382b3c0d5c9be4", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public boolean execute() throws BuildException", "signatureAfterChange": "     public boolean execute() throws BuildException", "diff": ["-", "-        try {", "-            Class c = Class.forName(\"at.dms.kjc.Main\");", "-", "-            // Call the compile() method", "-            Method compile = c.getMethod(\"compile\",", "-                                         new Class [] {String [].class});", "-            Boolean ok =", "-                (Boolean) compile.invoke(null,", "-                                        new Object[] {cmd.getArguments()});", "-            return ok.booleanValue();", "-        } catch (ClassNotFoundException ex) {", "-            throw new BuildException(\"Cannot use kjc compiler, as it is not \"", "-                                     + \"available. A common solution is to \"", "-                                     + \"set the environment variable CLASSPATH \"", "-                                     + \"to your kjc archive (kjc.jar).\",", "-                                     location);", "-        } catch (Exception ex) {", "-            if (ex instanceof BuildException) {", "-                throw (BuildException) ex;", "-            } else {", "-                throw new BuildException(\"Error starting kjc compiler: \",", "-                                         ex, location);", "-            }", "-        }", "+        cmd.setExecutable(\"at.dms.kjc.Main\");", "+        ExecuteJava ej = new ExecuteJava();", "+        ej.setJavaCommand(cmd);", "+        return ej.fork(getJavac()) == 0;"]}]}
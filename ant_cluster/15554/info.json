{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "04257acb8d997b2fa0999195c213894a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0428a88a8f41dfdaf797a566ff2524c0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/filterreaders/src/main/org/apache/tools/ant/filters/TailFilter.java", "commitBeforeChange": "7b8d582ad0c4a47e17fbb73773788608fddef0a0", "commitAfterChange": "87f806d3e4aba137d933f31a902197a19f96b7c4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public final int read() throws IOException", "signatureAfterChange": "     public final int read() throws IOException", "diff": ["-                if (ignoreLineFeed) {", "-                    if (ch == '\\n') {", "-                        ch = in.read();", "-                    }", "-                    ignoreLineFeed = false;", "-                }", "+                if (ch == '\\n') {", "+                    ++linesRead;", "-                switch (ch) {", "-                    case '\\r':", "-                        ch = '\\n';", "-                        ignoreLineFeed = true;", "-                        //fall through", "-                    case '\\n':", "-                        linesRead++;", "-", "-                        if (linesRead == lines + 1) {", "-                            int i = 0;", "-                            for (i = returnedCharPos + 1; buffer[i] != '\\n'; i++) {", "-                            }", "-                            returnedCharPos = i;", "-                            linesRead--;", "+                    if (linesRead == lines) {", "+                        int i = 0;", "+                        for (i = returnedCharPos + 1; buffer[i] != '\\n'; i++) {", "-                        break;", "-                }", "-                if (ch == -1) {", "+                        returnedCharPos = i;", "+                        --linesRead;", "+                    }", "+                } else if (ch == -1) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33a7ba890b053ec5e241c33a51951c9e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "689fca41585cc1768a0501fd11c8235b6e4bc481", "commitAfterChange": "d42633d63a6a9b030046f0307850b72ca9282640", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-                String title = null;", "-                String packages = null;", "-                GroupArgument ga = null;", "-                for (int i = 0; i < groups.size(); i++) {", "-                    ga = (GroupArgument)groups.get(i);", "-                    if (ga != null) {", "-                        title = ga.getTitle();", "-                        packages = ga.getPackages();", "+                for (Enumeration e = groups.elements(); e.hasMoreElements(); ) {", "+                    GroupArgument ga = (GroupArgument)e.nextElement();", "+                    String title = ga.getTitle();", "+                    String packages = ga.getPackages();", "+                    if (title == null || packages == null) {", "+                        throw new BuildException(\"The title and packages must be specified for group elements.\");", "-                    if (title != null) {", "-                        argList.addElement(\"-group\");", "-                        argList.addElement(title);", "-                        if (packages != null) {", "-                            argList.addElement(packages);", "-                        }", "-                    }", "+                    argList.addElement(\"-group\");", "+                    argList.addElement(title);", "+                    argList.addElement(packages);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60fbfd58df1fd1cd83249816be0aa528", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DefaultLogger.java", "commitBeforeChange": "270394a09fddda0ea9ffa2330956c5f399ab840f", "commitAfterChange": "6bd8d6e938a45868902ecd1092858e8372933c7c", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void messageLogged(BuildEvent event)", "signatureAfterChange": "     public void messageLogged(BuildEvent event)", "diff": ["-                StringTokenizer tok = new StringTokenizer(event.getMessage(),", "-                                                          \"\\r\\n\", false);", "-                boolean first = true;", "-                while (tok.hasMoreTokens()) {", "-                    if (!first) {", "-                        message.append(StringUtils.LINE_SEP);", "+                try {", "+                    BufferedReader r = ", "+                        new BufferedReader(", "+                            new StringReader(event.getMessage()));", "+                    String line = r.readLine();", "+                    boolean first = true;", "+                    while (line != null) {", "+                        if (!first) {", "+                            message.append(StringUtils.LINE_SEP);", "+                        }", "+                        first = false;", "+                        message.append(label).append(line);", "+                        line = r.readLine();", "-                    first = false;", "-                    message.append(label);", "-                    message.append(tok.nextToken());", "+                } catch (IOException e) {", "+                    // shouldn't be possible", "+                    message.append(label).append(event.getMessage());", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca4e71f26e520e08d9f81121b5ef8b97", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipFile.java", "commitBeforeChange": "ec980be7345681968c93f0609e9a3fecb39b9753", "commitAfterChange": "fbb9886634198d8377104bef9ec697fadeb134df", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private void positionAtCentralDirectory()         throws IOException", "signatureAfterChange": "     private void positionAtCentralDirectory()         throws IOException", "diff": ["-        long off = archive.length() - MIN_EOCD_SIZE;", "-        archive.seek(off);", "-        byte[] sig = ZipOutputStream.EOCD_SIG;", "-        int curr = archive.read();", "-        while (curr != -1) {", "-            if (curr == sig[0]) {", "-                curr = archive.read();", "-                if (curr == sig[1]) {", "+        long off = archive.length() - MIN_EOCD_SIZE;", "+        if (off >= 0) {", "+            archive.seek(off);", "+            byte[] sig = ZipOutputStream.EOCD_SIG;", "+            int curr = archive.read();", "+            while (curr != -1) {", "+                if (curr == sig[0]) {", "-                    if (curr == sig[2]) {", "+                    if (curr == sig[1]) {", "-                        if (curr == sig[3]) {", "-                            found = true;", "-                            break;", "+                        if (curr == sig[2]) {", "+                            curr = archive.read();", "+                            if (curr == sig[3]) {", "+                                found = true;", "+                                break;", "+                            }", "+                archive.seek(--off);", "+                curr = archive.read();", "-            archive.seek(--off);", "-            curr = archive.read();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fba802665d006c8e7dd77cd0765dbd17", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "ec980be7345681968c93f0609e9a3fecb39b9753", "commitAfterChange": "fbb9886634198d8377104bef9ec697fadeb134df", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": "          private Reader getReader() throws IOException", "signatureAfterChange": "          private Reader getReader() throws IOException", "diff": ["-            if (reader == null) {", "-                log(\"Concating file \" + sourceFiles.elementAt(pos),", "-                    Project.MSG_VERBOSE);", "-                if (encoding == null) {", "-                    reader = new BufferedReader(", "-                        new FileReader((File) sourceFiles.elementAt(pos)));", "-                } else {", "-                    // invoke the zoo of io readers", "-                    reader = new BufferedReader(", "-                        new InputStreamReader(", "-                            new FileInputStream(", "-                                (File) sourceFiles.elementAt(pos)),", "-                            encoding));", "-                }", "-                for (int i = 0; i < lastChars.length; ++i) {", "-                    lastChars[i] = 0;", "-                }", "+            if (reader == null && i.hasNext()) {", "+                Resource r = (Resource) i.next();", "+                log(\"Concating \" + r.toLongString(), Project.MSG_VERBOSE);", "+                InputStream is = r.getInputStream();", "+                reader = new BufferedReader(encoding == null", "+                    ? new InputStreamReader(is)", "+                    : new InputStreamReader(is, encoding));", "+                Arrays.fill(lastChars, (char) 0);", "+        }"]}]}
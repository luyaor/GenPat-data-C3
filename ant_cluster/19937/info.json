{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6dec962b87217dcbcb0ce485b9648f0a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e19a052876005bea60266f457189c86", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "ad4c56763e91150e9a6cadce4e62f50e7276311e", "commitAfterChange": "b31472d21fcd29fc5104562036e9dd98da76f9de", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 12, "signatureBeforeChange": "     protected Class loadClass(String classname, boolean resolve) throws ClassNotFoundException", "signatureAfterChange": "     protected Class loadClass(String classname, boolean resolve) throws ClassNotFoundException", "diff": ["-        // default to the global setting and then see", "-        // if this class belongs to a package which has been", "-        // designated to use a specific loader first (this one or the system one)", "-        boolean useSystemFirst = systemFirst; ", "-", "-        for (Enumeration e = systemPackages.elements(); e.hasMoreElements();) {", "-            String packageName = (String)e.nextElement();", "-            if (classname.startsWith(packageName)) {", "-                useSystemFirst = true;", "-                break;", "-            }", "-        }", "-", "-        for (Enumeration e = loaderPackages.elements(); e.hasMoreElements();) {", "-            String packageName = (String)e.nextElement();", "-            if (classname.startsWith(packageName)) {", "-                useSystemFirst = false;", "-                break;", "-            }", "-        }", "-", "-        if (theClass == null) {", "-            if (useSystemFirst) {", "-                try {", "-                    theClass = findBaseClass(classname);", "-                    project.log(\"Class \" + classname + \" loaded from system loader\", Project.MSG_DEBUG);", "-                }", "-                catch (ClassNotFoundException cnfe) {", "-                    theClass = findClass(classname);", "-                    project.log(\"Class \" + classname + \" loaded from ant loader\", Project.MSG_DEBUG);", "-                }", "+        if (theClass != null) {", "+            return theClass;", "+        }", "+        ", "+        if (isSystemFirst(classname)) {", "+            try {", "+                theClass = findBaseClass(classname);", "+                project.log(\"Class \" + classname + \" loaded from system loader\", Project.MSG_DEBUG);", "-            else {", "-                try {", "-                    theClass = findClass(classname);", "-                    project.log(\"Class \" + classname + \" loaded from ant loader\", Project.MSG_DEBUG);", "+            catch (ClassNotFoundException cnfe) {", "+                theClass = findClass(classname);", "+                project.log(\"Class \" + classname + \" loaded from ant loader\", Project.MSG_DEBUG);", "+            }", "+        }", "+        else {", "+            try {", "+                theClass = findClass(classname);", "+                project.log(\"Class \" + classname + \" loaded from ant loader\", Project.MSG_DEBUG);", "+            }", "+            catch (ClassNotFoundException cnfe) {", "+                if (ignoreBase) {", "+                    throw cnfe;", "-                catch (ClassNotFoundException cnfe) {", "-                    if (ignoreBase) {", "-                        throw cnfe;", "-                    }", "-                    theClass = findBaseClass(classname);", "-                    project.log(\"Class \" + classname + \" loaded from system loader\", Project.MSG_DEBUG);", "-                }", "+                theClass = findBaseClass(classname);", "+                project.log(\"Class \" + classname + \" loaded from system loader\", Project.MSG_DEBUG);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5a131687d06666587431f9dcf152b1d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/PropertySet.java", "commitBeforeChange": "ce89090b466c00d8a218ff572a4cfe92eebc9d96", "commitAfterChange": "996e16066a9450f18df34582a163957d365bcee1", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private void addPropertyNames(Vector names, Hashtable properties)", "signatureAfterChange": "     private void addPropertyNames(Set names, Hashtable properties)", "diff": ["-    private void addPropertyNames(Vector names, Hashtable properties) {", "+    private void addPropertyNames(Set names, Hashtable properties) {", "-                    names.addElement(ref.name);", "+                    names.add(ref.name);", "-                        names.addElement(name);", "+                        names.add(name);", "-                        names.addElement(name);", "+                        names.add(name);", "-                Enumeration e2 = null;", "-                    e2 = properties.keys();", "+                    names.addAll(properties.keySet());", "-                    e2 = System.getProperties().keys();", "+                    names.addAll(System.getProperties().keySet());", "-                    e2 = getProject().getUserProperties().keys();", "+                    names.addAll(getProject().getUserProperties().keySet());", "-", "-                while (e2.hasMoreElements()) {", "-                    names.addElement(e2.nextElement());", "-                }", "-", "-        }", "-", "-        // Add this PropertySet's nested PropertySets' property names.", "-        for (Enumeration e = setRefs.elements(); e.hasMoreElements();) {", "-            PropertySet set = (PropertySet) e.nextElement();", "-            set.addPropertyNames(names, properties);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ff06808c69bc8d7abeeafe000d3d3411", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2431c3a41c3080f28970065cce0410ba", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/archive/Zip.java", "commitBeforeChange": "21851ffa6f8b3564f8bfe08bb0a17863141e79c2", "commitAfterChange": "40d4de5a0768552b7fcf9c54f11235b32ed978da", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "      protected void zipFile( InputStream in, ZipOutputStream zOut, String vPath,                             long lastModified )         throws IOException, TaskException", "signatureAfterChange": "      protected void zipFile( final InputStream input,                             final ZipOutputStream output,                             final String path,                             final long lastModified )         throws IOException, TaskException", "diff": ["-    protected void zipFile( InputStream in, ZipOutputStream zOut, String vPath,", "-                            long lastModified )", "+    protected void zipFile( final InputStream input,", "+                            final ZipOutputStream output,", "+                            final String path,", "+                            final long lastModified )", "-        ZipEntry ze = new ZipEntry( vPath );", "-        ze.setTime( lastModified );", "+        final ZipEntry entry = new ZipEntry( path );", "+        entry.setTime( lastModified );", "+", "+        InputStream inputToStore = input;", "+            final CRC32 crc = new CRC32();", "-            CRC32 cal = new CRC32();", "-            if( !in.markSupported() )", "+            if( !inputToStore.markSupported() )", "-                    cal.update( buffer, 0, count );", "+                    crc.update( buffer, 0, count );", "-                    count = in.read( buffer, 0, buffer.length );", "+                    count = inputToStore.read( buffer, 0, buffer.length );", "-                in = new ByteArrayInputStream( bos.toByteArray() );", "-", "+                inputToStore = new ByteArrayInputStream( bos.toByteArray() );", "-                in.mark( Integer.MAX_VALUE );", "+                inputToStore.mark( Integer.MAX_VALUE );", "-                    cal.update( buffer, 0, count );", "-                    count = in.read( buffer, 0, buffer.length );", "+                    crc.update( buffer, 0, count );", "+                    count = inputToStore.read( buffer, 0, buffer.length );", "-                in.reset();", "+                inputToStore.reset();", "-            ze.setSize( size );", "-            ze.setCrc( cal.getValue() );", "+            entry.setSize( size );", "+            entry.setCrc( crc.getValue() );", "-        zOut.putNextEntry( ze );", "+        output.putNextEntry( entry );", "-        byte[] buffer = new byte[ 8 * 1024 ];", "-        int count = 0;", "-        do", "-        {", "-            if( count != 0 )", "-            {", "-                zOut.write( buffer, 0, count );", "-            }", "-            count = in.read( buffer, 0, buffer.length );", "-        } while( count != -1 );", "-        m_addedFiles.add( vPath );", "+        IOUtil.copy( inputToStore, output );", "+", "+        m_addedFiles.add( path );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36b1f3ad77aad88df603023c00866926", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/archive/Zip.java", "commitBeforeChange": "21851ffa6f8b3564f8bfe08bb0a17863141e79c2", "commitAfterChange": "40d4de5a0768552b7fcf9c54f11235b32ed978da", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "      protected void zipFile( InputStream in, ZipOutputStream zOut, String vPath,                             long lastModified )         throws IOException, TaskException", "signatureAfterChange": "      protected void zipFile( final InputStream input,                             final ZipOutputStream output,                             final String path,                             final long lastModified )         throws IOException, TaskException", "diff": ["-    protected void zipFile( InputStream in, ZipOutputStream zOut, String vPath,", "-                            long lastModified )", "+    protected void zipFile( final InputStream input,", "+                            final ZipOutputStream output,", "+                            final String path,", "+                            final long lastModified )", "-        ZipEntry ze = new ZipEntry( vPath );", "-        ze.setTime( lastModified );", "+        final ZipEntry entry = new ZipEntry( path );", "+        entry.setTime( lastModified );", "+", "+        InputStream inputToStore = input;", "+            final CRC32 crc = new CRC32();", "-            CRC32 cal = new CRC32();", "-            if( !in.markSupported() )", "+            if( !inputToStore.markSupported() )", "-                    cal.update( buffer, 0, count );", "+                    crc.update( buffer, 0, count );", "-                    count = in.read( buffer, 0, buffer.length );", "+                    count = inputToStore.read( buffer, 0, buffer.length );", "-                in = new ByteArrayInputStream( bos.toByteArray() );", "-", "+                inputToStore = new ByteArrayInputStream( bos.toByteArray() );", "-                in.mark( Integer.MAX_VALUE );", "+                inputToStore.mark( Integer.MAX_VALUE );", "-                    cal.update( buffer, 0, count );", "-                    count = in.read( buffer, 0, buffer.length );", "+                    crc.update( buffer, 0, count );", "+                    count = inputToStore.read( buffer, 0, buffer.length );", "-                in.reset();", "+                inputToStore.reset();", "-            ze.setSize( size );", "-            ze.setCrc( cal.getValue() );", "+            entry.setSize( size );", "+            entry.setCrc( crc.getValue() );", "-        zOut.putNextEntry( ze );", "+        output.putNextEntry( entry );", "-        byte[] buffer = new byte[ 8 * 1024 ];", "-        int count = 0;", "-        do", "-        {", "-            if( count != 0 )", "-            {", "-                zOut.write( buffer, 0, count );", "-            }", "-            count = in.read( buffer, 0, buffer.length );", "-        } while( count != -1 );", "-        m_addedFiles.add( vPath );", "+        IOUtil.copy( inputToStore, output );", "+", "+        m_addedFiles.add( path );"]}]}
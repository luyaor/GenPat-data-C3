{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "720cff07b580d10c800205be4ac83fa8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f3b1ad1c5414257b827c4022a286c65", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/modelparser/ProjectHandler.java", "commitBeforeChange": "f1025dd3c6deebb466ac41a06a42d812cdf4e08d", "commitAfterChange": "c2f14ffad1518f0d1c23c084b7c216d06c5da363", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void startElement(String uri, String localName, String qualifiedName,                              Attributes attributes)          throws SAXParseException", "signatureAfterChange": "     public void startElement(String uri, String localName, String qualifiedName,                              Attributes attributes)          throws SAXParseException", "diff": ["-        if (qualifiedName.equals(REF_ELEMENT)) {", "-            RefHandler refHandler = new RefHandler();", "-            refHandler.start(getParseContext(), getXMLReader(), this,", "-                getLocator(), attributes, getElementSource(),", "-                qualifiedName);", "-            try {", "-                project.referenceProject(refHandler.getRefName(),", "-                    refHandler.getReferencedProject());", "-            } catch (ModelException e) {", "-                throw new SAXParseException(e.getMessage(), getLocator(), e);", "-            }", "-        } else if (qualifiedName.equals(INCLUDE_ELEMENT)) {", "+        if (qualifiedName.equals(INCLUDE_ELEMENT)) {", "-          throw new SAXParseException(\"Only the \\\"ant\\\" namespace is \"", "+          throw new SAXParseException(\"namespace support is not \""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2d3f239e7fc12e359d7b4c40b60b349", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/selectors/DateSelector.java", "commitBeforeChange": "8ec6497d89bb1cc76c15e2f911a2ded3f8c5fbbc", "commitAfterChange": "e33f1d105f6988df483bc075a630c6aa7a3b536a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void setDatetime(String dateTime)", "signatureAfterChange": "     public void setDatetime(String dateTime)", "diff": ["-        if (dateTime != null) {", "-            DateFormat df = DateFormat.getDateTimeInstance(", "-                    DateFormat.SHORT,", "-                    DateFormat.SHORT,", "-                    Locale.US);", "-            try {", "-                setMillis(df.parse(dateTime).getTime());", "-                if (millis < 0) {", "-                    setError(\"Date of \" + dateTime", "-                            + \" results in negative milliseconds value relative\"", "-                            + \" to epoch (January 1, 1970, 00:00:00 GMT).\");", "-                }", "-            } catch (ParseException pe) {", "-                setError(\"Date of \" + dateTime", "-                        + \" Cannot be parsed correctly. It should be in\"", "-                        + \" MM/DD/YYYY HH:MM AM_PM format.\");", "-            }", "-        }"]}]}
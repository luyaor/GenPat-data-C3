{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e1d1cdeb7359a4194808bf77b71b9583", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36c77b3c81db2d5d907bf45886fbf0e5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/converter/DefaultMasterConverter.java", "commitBeforeChange": "4b3e0ee2041826e51ec60af99e7bcca7024bf676", "commitAfterChange": "ed3fafb887fef0afbcd90eef7f263fef3bde95d9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public Object convert( final Class destination,                            final Object original,                            final Object context )         throws ConverterException", "signatureAfterChange": "     public Object convert( final Class destination,                            final Object original,                            final Object context )         throws ConverterException", "diff": ["-        if( DEBUG )", "-        {", "-            final String message =", "-                REZ.getString( \"converter-lookup.notice\",", "-                               originalClass.getName(),", "-                               destination.getName() );", "-            getLogger().debug( message );", "-        }", "-", "-        //Searching inheritance hierarchy for converter", "-        final String name = getConverterName( originalClass, destination );", "-", "-            //TODO: Start caching converters instead of repeatedly instantiating em.", "-            final Converter converter = (Converter)m_factory.create( name );", "+            // Search inheritance hierarchy for converter", "+            final String name = getConverterName( originalClass, destination );", "-            if( DEBUG )", "+            // Create the converter", "+            Converter converter = (Converter)m_converters.get( name );", "+            if( converter == null )", "-                final String message = REZ.getString( \"found-converter.notice\", converter );", "-                getLogger().debug( message );", "+                converter = (Converter)m_factory.create( name );", "+                m_converters.put( name, converter );", "+            // Convert", "-            else", "-            {", "-                final String message =", "-                    REZ.getString( \"bad-return-type.error\",", "-                                   name,", "-                                   object,", "-                                   destination.getName() );", "-                throw new ConverterException( message );", "-            }", "+", "+            final String message =", "+                REZ.getString( \"bad-return-type.error\",", "+                               object.getClass().getName(),", "+                               destination.getName() );", "+            throw new ConverterException( message );", "-        catch( final TypeException te )", "+        catch( final Exception e )", "-            final String message = REZ.getString( \"bad-typemanager.error\" );", "-            throw new ConverterException( message, te );", "+            final String message = REZ.getString( \"convert.error\",", "+                                                  originalClass.getName(),", "+                                                  destination.getName() );", "+            throw new ConverterException( message, e );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d37be2795bd5c6fb9c13c122362c9594", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/taskdefs/javacc/JJTree.java", "commitBeforeChange": "7513ab1efa12321b3e2014764bfb23d16b425caf", "commitAfterChange": "299ea801bc1031e308bfe07a22e51edd1b972872", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 14, "signatureBeforeChange": "      public void execute()         throws TaskException", "signatureAfterChange": "      public void execute()         throws TaskException", "diff": ["+        final ExecuteJava exe = new ExecuteJava();", "+        exe.setClassName( \"COM.sun.labs.jjtree.Main\" );", "-            cmdl.addArgument( \"-\" + name + \":\" + value.toString() );", "+            exe.getArguments().addArgument( \"-\" + name + \":\" + value.toString() );", "-            outputDirectory = new File( target.getParent() );", "+            outputDirectory = target.getParentFile();", "+", "-        cmdl.addArgument( \"-OUTPUT_DIRECTORY:\" + outputDirectory.getAbsolutePath().replace( '\\\\', '/' ) );", "+        exe.getArguments().addArgument( \"-OUTPUT_DIRECTORY:\" + outputDirectory.getAbsolutePath().replace( '\\\\', '/' ) );", "-        cmdl.addArgument( target.getAbsolutePath() );", "+        exe.getArguments().addArgument( target );", "-        final Path classpath = cmdl.createClasspath();", "+        final Path classpath = exe.getClassPath();", "-        cmdl.addVmArgument( \"-mx140M\" );", "-        cmdl.addVmArgument( \"-Dinstall.root=\" + javaccHome.getAbsolutePath() );", "+        exe.setMaxMemory( \"140M\" );", "+        exe.getSysProperties().addVariable( \"install.root\", javaccHome.getAbsolutePath() );", "-        final Execute exe = new Execute();", "-        getContext().debug( cmdl.toString() );", "-        exe.setCommandline( new Commandline( cmdl.getCommandline() ) );", "-        exe.execute( getContext() );", "+        exe.executeForked( getContext() );"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ef75fd7a8f56e1041cb43f198127a688", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39d12ec596745b488acb4ee7c1e3f2b2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Chmod.java", "commitBeforeChange": "6035bbf18dc7df5472368d91d69de03b1819c800", "commitAfterChange": "632dad4136fbd0a5eccc98059c56b8c5f2a22030", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 13, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void setExecutable(String e)", "diff": ["-    public void execute() throws BuildException {", "-        try {", "-            // XXX if OS=unix", "-            if (System.getProperty(\"path.separator\").equals(\":\") &&", "-                !System.getProperty(\"os.name\").startsWith(\"Mac\")) {", "-        ", "-                if (srcFile != null && srcDir == null) {", "-                    chmod(srcFile.toString());", "-                } else if(srcFile == null && srcDir == null) {", "-                    log(\"The attribute 'file' or 'dir' needs to be set.\", Project.MSG_WARN);", "-                    throw new BuildException(\"Required attribute not set in Chmod\", location);", "-                } else if(srcFile == null && srcDir != null) {", "-          ", "-                    DirectoryScanner ds = getDirectoryScanner(srcDir);", "-                    String[] files = ds.getIncludedFiles();", "-          ", "-                    for (int i = 0; i < files.length; i++) {", "-                        chmod((new File(srcDir, files[i])).getAbsolutePath());", "-                    }", "-                }", "-            }", "-        } catch (IOException ioe) {", "-            // ignore, but warn", "-            log(\"Error in Chmod \" + ioe.toString() , Project.MSG_WARN);", "+    public void setExecutable(String e) {", "+        throw new BuildException(taskType+\" doesn\\'t support the executable attribute\", location);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1a2949fc5e8c977d1325f4d2fc36503", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/workspace/DefaultWorkspace.java", "commitBeforeChange": "50fb7f5643cba98640e7d4ce2b00736e9d42cbab", "commitAfterChange": "6ff9bf50ad2e4fcda69911d207c8dfe93e7b4e0b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void execute( final Project project,                           final String targetName,                           final ProjectEntry entry )         throws TaskException", "signatureAfterChange": "     private void executeTarget( final ProjectEntry entry,                           final String targetName )         throws TaskException", "diff": ["-    private void execute( final Project project,", "-                          final String targetName,", "-                          final ProjectEntry entry )", "+    private void executeTarget( final ProjectEntry entry,", "+                          final String targetName )", "-        final int index = targetName.indexOf( \"->\" );", "-        if( -1 != index )", "-        {", "-            final String name = targetName.substring( 0, index );", "-            final String otherTargetName = targetName.substring( index + 2 );", "-", "-            final Project otherProject = getProject( name, project );", "-            final ProjectEntry otherEntry = getProjectEntry( otherProject );", "-", "-            //Execute target in referenced project", "-            execute( otherProject, otherTargetName, otherEntry );", "-            return;", "-        }", "-", "-        final Target target = project.getTarget( targetName );", "+        // Locate the target", "+        final Target target = entry.getProject().getTarget( targetName );", "-        //add target to list of targets executed", "-        entry.completeTarget( targetName );", "-", "-        //execute all dependencies", "-        final String[] dependencies = target.getDependencies();", "-        for( int i = 0; i < dependencies.length; i++ )", "-        {", "-            if( !entry.isTargetCompleted( dependencies[ i ] ) )", "-            {", "-                execute( project, dependencies[ i ], entry );", "-            }", "-        }", "-", "-        executeTarget( project, targetName, target, entry.getFrame() );", "+        executeTarget( entry, targetName, target );"]}]}
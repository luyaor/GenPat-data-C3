{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "32d9bcff57aa836586c4c18e58208ad3", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32b14a26c28999e7da7f4f63a37b6d7e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/ZipScanner.java", "commitBeforeChange": "4af209f564ee4c3b8408f089a8f23723a99a6704", "commitAfterChange": "a96627738decba56e1c94e54fa23ecbd7bfdb9a2", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 0, "signatureBeforeChange": "     private void scanme()", "signatureAfterChange": "     protected void fillMapsFromArchive(Resource src, String encoding,                                        Map fileEntries, Map matchFileEntries,                                        Map dirEntries, Map matchDirEntries)", "diff": ["-     */", "-    private void scanme() {", "-        //do not use a FileResource b/c it pulls File info from the filesystem:", "-        Resource thisresource = new Resource(srcFile.getAbsolutePath(),", "-                                             srcFile.exists(),", "-                                             srcFile.lastModified());", "-        // spare scanning again and again", "-        if (lastScannedResource != null", "-            && lastScannedResource.getName().equals(thisresource.getName())", "-            && lastScannedResource.getLastModified()", "-            == thisresource.getLastModified()) {", "-            return;", "-        }", "-        init();", "+    protected void fillMapsFromArchive(Resource src, String encoding,", "+                                       Map fileEntries, Map matchFileEntries,", "+                                       Map dirEntries, Map matchDirEntries) {", "-        fileEntries.clear();", "-        dirEntries.clear();", "-        matchFileEntries.clear();", "-        matchDirEntries.clear();", "+        File srcFile = null;", "+        if (src instanceof FileResource) {", "+            srcFile = ((FileResource) src).getFile();", "+        } else {", "+            throw new BuildException(\"only file resources are supported\");", "+        }", "-        // record data about the last scanned resource", "-        lastScannedResource = thisresource;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b88e27d8184f6b2cb1d1445d0abfd1a0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "a30889de71888bc66c4c484cfbbefa994590c383", "commitAfterChange": "83edbb7a85886207a528219f32cc598e4ea1eeff", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected Main(String[] args) throws BuildException", "signatureAfterChange": "     protected Main(String[] args) throws BuildException", "diff": ["-                    System.out.println(msg);", "-                    return;", "+                    throw new BuildException(msg);", "-                    System.out.println(msg);", "-                    return;", "+                    throw new BuildException(msg);", "-                    System.out.println(msg);", "-                    return;", "+                    throw new BuildException(msg);", "-                    System.out.println(msg);", "-                    return;", "+                    throw new BuildException(msg);", "-                       }", "+                }", "-                    System.out.println(\"Only one logger class may \"", "+                    throw new BuildException(\"Only one logger class may \"", "-                    return;", "-                    System.out.println(\"You must specify a classname when \" +", "-                                       \"using the -logger argument\");", "-                    return;", "+                    throw new BuildException(\"You must specify a classname when\"", "+                                             + \" using the -logger argument\");", "-                    System.out.println(\"Only one input handler class may \" +", "-                                       \"be specified.\");", "-                    return;", "+                    throw new BuildException(\"Only one input handler class may \"", "+                                             + \"be specified.\");", "-                    System.out.println(\"You must specify a classname when \" +", "-                                       \"using the -inputhandler argument\");", "-                    return;", "+                    throw new BuildException(\"You must specify a classname when\"", "+                                             + \" using the -inputhandler\"", "+                                             + \" argument\");", "-                    System.out.println(msg);", "-                    return;", "+                    throw new BuildException(msg);", "-                return;", "+                throw new BuildException(\"\");"]}]}
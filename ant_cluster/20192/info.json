{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "978bfadf5bbd3c76cd584b4368b363ea", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3408395fd2bc1ac76387fe5e641b08a1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "1cddc5e63805e05996e688f206169b36b4e8c9b3", "commitAfterChange": "911c5901fc2f65f707c8dd1866455bec8e19261c", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 40, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        // Apply the basetest attributes", "-        Enumeration e = allTests();", "-        while (e.hasMoreElements()) {", "-            BaseTest test = (BaseTest) e.nextElement();", "-            test.setFiltertrace(filterTrace);", "-            test.setHaltonerror(haltOnError);", "-            if (errorProperty != null) {", "-                test.setErrorProperty(errorProperty);", "-            }", "-            test.setHaltonfailure(haltOnFail);", "-            if (failureProperty != null) {", "-                test.setFailureProperty(failureProperty);", "-            }", "-            test.setFork(fork);", "-        }", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ef686e41dd62afd187eeedc35478e11", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/depend/Depend.java", "commitBeforeChange": "85344c438efab87f56ca5f4b179752852ec0aa86", "commitAfterChange": "f66cab0ea7689df54fe51f64018cd3ef8b05cd3d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private Vector readDependencyList(File depFile) throws IOException", "signatureAfterChange": "     private Hashtable readCachedDependencies() throws IOException", "diff": ["-", "-    private Vector readDependencyList(File depFile) throws IOException {", "-        Vector dependencyList = null;", "-        BufferedReader in = null;", "-        try {", "-            in = new BufferedReader(new FileReader(depFile));", "-            String line = null;", "-            dependencyList = new Vector();", "-            while ((line = in.readLine()) != null) {", "-                dependencyList.addElement(line);", "-            }", "-        }", "-        finally {", "-            if (in != null) { ", "-                in.close();", "+     */", "+    private Hashtable readCachedDependencies() throws IOException{", "+        Hashtable dependencyMap = new Hashtable();", "+        ", "+        if (cache != null) {", "+            File depFile = new File(cache, CACHE_FILE_NAME);", "+            BufferedReader in = null;", "+            if (depFile.exists()) {", "+                try {", "+                    in = new BufferedReader(new FileReader(depFile));", "+                    String line = null;", "+                    Vector dependencyList = null;", "+                    String className = null;", "+                    int prependLength = CLASSNAME_PREPEND.length();", "+                    while ((line = in.readLine()) != null) {", "+                        if (line.startsWith(CLASSNAME_PREPEND)) {", "+                            dependencyList = new Vector();", "+                            className = line.substring(prependLength);", "+                            dependencyMap.put(className, dependencyList);", "+                        }", "+                        else {", "+                            dependencyList.addElement(line);", "+                        }", "+                    }", "+                }", "+                finally {", "+                    if (in != null) { ", "+                        in.close();", "+                    }", "+                }", "-        return dependencyList;", "+        return dependencyMap;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "664930139518fdba1f80530284445f22", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/Commandline.java", "commitBeforeChange": "b469445f8442be585a98b28f3e44c8e2083de93f", "commitAfterChange": "a252eb85435070911a166bc108952067a9a2d061", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "      public static String[] translateCommandline(String to_process)", "signatureAfterChange": "      public static String[] translateCommandline(String to_process)", "diff": ["-        StringTokenizer tok = new StringTokenizer(to_process, \"\\\\\\\"\\' \", true);", "+        StringTokenizer tok = new StringTokenizer(to_process, \"\\\"\\' \", true);", "-                    }", "-                } else if (\"\\\\\".equals(nextTok)) {", "-                    if (tok.hasMoreTokens()) {", "-                        String escapedToken = tok.nextToken();", "-                        char escapedChar = escapedToken.charAt(0);", "-                        if (escapedChar == '\\\\' || escapedChar == '\\'' ||", "-                            escapedChar == '\\\"') {", "-                            current.append(escapedToken);", "-                        }", "-                        else {", "-                            current.append(\"\\\\\" + escapedToken);", "-                        }", "-                    } else {", "-                        // just add the backslash", "-                        current.append(\"\\\\\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "676f58b91e623201523ec20b5f2728cb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/depend/Depend.java", "commitBeforeChange": "85344c438efab87f56ca5f4b179752852ec0aa86", "commitAfterChange": "f66cab0ea7689df54fe51f64018cd3ef8b05cd3d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "          private void writeDependencyList(File depFile, Vector dependencyList) throws IOException", "signatureAfterChange": "     private void writeCachedDependencies(Hashtable dependencyMap) throws IOException", "diff": ["-    ", "-    private void writeDependencyList(File depFile, Vector dependencyList) throws IOException {", "-        // new dependencies so need to write them out to the cache", "-        PrintWriter pw = null;", "-        try {", "-            String parent = depFile.getParent();", "-            if (parent != null) {", "-                new File(parent).mkdirs(); ", "-            }", "-            ", "-            pw = new PrintWriter(new FileWriter(depFile));", "-            for (Enumeration deps = dependencyList.elements(); deps.hasMoreElements();) {", "-                pw.println(deps.nextElement());", "-            }", "-        }", "-        finally {", "-            if (pw != null) { ", "-                pw.close();", "-            }", "-        }", "-    }", "+     */", "+    private void writeCachedDependencies(Hashtable dependencyMap) throws IOException{", "+        if (cache != null) {", "+            PrintWriter pw = null;", "+            try {", "+                cache.mkdirs(); ", "+                File depFile = new File(cache, CACHE_FILE_NAME);", "+                ", "+                pw = new PrintWriter(new FileWriter(depFile));", "+                for (Enumeration deps = dependencyMap.keys(); deps.hasMoreElements();) {", "+                    String className = (String)deps.nextElement();", "+                    ", "+                    pw.println(CLASSNAME_PREPEND + className);", "+                    ", "+                    Vector dependencyList = (Vector)dependencyMap.get(className);", "+                    int size = dependencyList.size();", "+                    for (int x = 0; x < size; x++) {", "+                        pw.println(dependencyList.elementAt(x));", "+                    }", "+                }", "+            }", "+            finally {", "+                if (pw != null) { ", "+                    pw.close();", "+                }", "+            }", "+        }"]}]}
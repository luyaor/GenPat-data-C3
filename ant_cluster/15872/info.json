{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb6328a7c35dc1ecfd836344073a8ffa", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46581c3623cd5766d4035a4e0d0d084b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/filterreaders/src/main/org/apache/tools/ant/filters/ClassConstants.java", "commitBeforeChange": "131519b962655478e6cf36802ace9d0f702aa823", "commitAfterChange": "f9bcdd7713370a79393e749e0e55fada438faa4a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public final int read() throws IOException", "signatureAfterChange": "     public final int read() throws IOException", "diff": ["-                final StringBuffer sb = JavaClassHelper.getConstants(bytes);", "-                if (sb.length() > 0) {", "-                    queuedData = sb.toString();", "-                    return read();", "+                try {", "+                    final Class javaClassHelper =", "+                        Class.forName(JAVA_CLASS_HELPER);", "+                    if (javaClassHelper != null) {", "+                        final Class params[] = {", "+                            byte[].class", "+                        };", "+                        final Method getConstants =", "+                            javaClassHelper.getMethod(\"getConstants\", params);", "+                        final Object[] args = {", "+                            bytes", "+                        };", "+                        // getConstants is a staic method, no need to", "+                        // pass in the object", "+                        final StringBuffer sb = (StringBuffer)", "+                                getConstants.invoke(null, args);", "+                        if (sb.length() > 0) {", "+                            queuedData = sb.toString();", "+                            return read();", "+                        }", "+                    }", "+                } catch (ClassNotFoundException cnfe) {", "+                    throw new IOException(cnfe.getMessage());", "+                } catch (NoSuchMethodException nsme) {", "+                    throw new IOException(nsme.getMessage());", "+                } catch (IllegalAccessException iae) {", "+                    throw new IOException(iae.getMessage());", "+                } catch (IllegalArgumentException iarge) {", "+                    throw new IOException(iarge.getMessage());", "+                } catch (InvocationTargetException ite) {", "+                    throw new IOException(ite.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8b01a6d732f5d64eaf48a8d14a6633b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "536bfb63e3ad71036b032550ca8241e07e1f5d45", "commitAfterChange": "b5397fd0e4b2a0e360dc14a9cb1ebec8f4ce7aa5", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 4, "signatureBeforeChange": "         public void init(String tag, AttributeList attrs) throws SAXParseException", "signatureAfterChange": "     private static ProjectHelper newHelper(String helperClass)         throws BuildException", "diff": ["-         */", "-        public void init(String tag, AttributeList attrs) throws SAXParseException {", "-            try {", "-                task = project.createTask(tag);", "-            } catch (BuildException e) {", "-                // swallow here, will be thrown again in ", "-                // UnknownElement.maybeConfigure if the problem persists.", "-            }", "-", "-            if (task == null) {", "-                task = new UnknownElement(tag);", "-                task.setProject(project);", "-                task.setTaskType(tag);", "-                task.setTaskName(tag);", "-            }", "-", "-            task.setLocation(new Location(buildFile.toString(), locator.getLineNumber(), locator.getColumnNumber()));", "-            configureId(task, attrs);", "-", "-            // Top level tasks don't have associated targets", "-            if (target != null) {", "-                task.setOwningTarget(target);", "-                container.addTask(task);", "-                task.init();", "-                wrapper = task.getRuntimeConfigurableWrapper();", "-                wrapper.setAttributes(attrs);", "-                if (parentWrapper != null) {", "-                    parentWrapper.addChild(wrapper);", "-                }", "-            } else {", "-                task.init();", "-                configure(task, attrs, project);", "-            }", "-        }", "+    private static ProjectHelper newHelper(String helperClass)", "+        throws BuildException", "+    {", "+        ClassLoader classLoader = getContextClassLoader();", "+        try {", "+            Class clazz = null;", "+            if (classLoader != null) {", "+                    clazz = classLoader.loadClass(helperClass);", "+                } catch( ClassNotFoundException ex ) {", "+                    // try next method", "+            if( clazz==null ) {", "+                clazz = Class.forName(helperClass);", "+            return ((ProjectHelper) clazz.newInstance());", "+        } catch (Exception e) {", "+            throw new BuildException(e);"]}]}
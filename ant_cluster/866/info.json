{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8e0f7d6ecc422323074959ff06ac9ab2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0dfe1d4172db6e09c15db6794e994736", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ComponentHelper.java", "commitBeforeChange": "7bf41207e0b3bef0fe3f8d1a88ca7b872e69f0e9", "commitAfterChange": "9ae85e523be191767f8d56d68a8f33651acd4f0b", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "     public String diagnoseCreationFailure(String componentName, String type)", "signatureAfterChange": "     public String diagnoseCreationFailure(String componentName, String type)", "diff": ["+        String antHomeLib;", "+        boolean probablyIDE=false;", "+        String anthome = System.getProperty(MagicNames.ANT_HOME);", "+        if(anthome!=null) {", "+            File antHomeLibDir = new File(anthome,\"lib\");", "+            antHomeLib=antHomeLibDir.getAbsolutePath();", "+        } else {", "+            //running under an IDE that doesn't set ANT_HOME", "+            probablyIDE=true;", "+            antHomeLib = \"ANT_HOME\" +File.separatorChar +\"lib\";", "+        }", "+        StringBuffer dirListingText = new StringBuffer();", "+        final String tab = \"        -\";", "+        dirListingText.append(tab);", "+        dirListingText.append(antHomeLib);", "+        dirListingText.append('\\n');", "+        if(probablyIDE) {", "+            dirListingText.append(tab);", "+            dirListingText.append(\"the IDE Ant configuration dialogs\");", "+        } else {", "+            dirListingText.append(tab);", "+            dirListingText.append(libDir);", "+            dirListingText.append('\\n');", "+            dirListingText.append(tab);", "+            dirListingText.append(", "+                    \"a directory added on the command line with the -lib argument\");", "+        }", "+", "+        String dirListing=dirListingText.toString();", "+        ", "-                out.println(\"Action: Check that the implementing library exists \"", "-                        + \"in ANT_HOME/lib or in \");", "-                out.println(\"        \" + libDir);", "+                out.println(\"Action: Check that the implementing library exists in one of:\");", "+                out.println(dirListing);", "-                    out.println(\"Action: Check that the appropriate optional JAR exists \"", "-                            + \"in ANT_HOME/lib or in \");", "-                    out.println(\"        \" + libDir);", "+                    out.println(\"Action: Check that the appropriate optional JAR exists in\");", "+                    out.println(dirListing);", "-                    out.println(\"        and that the implementing JAR is in ANT_HOME/lib or in\");", "-                    out.println(\"        \" + libDir);", "+                    out.println(\"        and that the implementing JAR is in one of:\");", "+                    out.println(dirListing);", "-                    out.println(\"       It is not enough to have Ant's optional JAR, you need the JAR\");", "-                    out.println(\"       files that it depends upon.\");", "-                    out.println(\"Ant's optional task dependencies are listed in the manual.\");", "+                    out.println(\"       It is not enough to have Ant's optional JARs\");", "+                    out.println(\"       you need the JAR files that the optional tasks depend upon.\");", "+                    out.println(\"       Ant's optional task dependencies are listed in the manual.\");", "-                out.println(\"Action: Determine what extra JAR files are needed, and place them\");", "-                out.println(\"        in ANT_HOME/lib or\");", "-                out.println(\"        in \" + libDir);", "+                out.println(\"Action: Determine what extra JAR files are needed, and place them in one of:\");", "+                out.println(dirListing);", "-                    out.println(\"Action: Determine what extra JAR files are needed, and place them\");", "-                    out.println(\"        in ANT_HOME/lib or\");", "-                    out.println(\"        in \" + libDir);", "+                    out.println(\"Action: Determine what extra JAR files are needed, and place them in:\");", "+                    out.println(dirListing);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cf08d2494295188a8d35b6a59261c8f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "7db5bdf3b44fcfda18bb256e6d627590bab7ccfc", "commitAfterChange": "0c1efed954c2370fb8e6217c0c246e227df6708f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            URL url = null;", "-            try {", "-                url = new URL(source);", "-            } catch (MalformedURLException e) {", "-                throw new BuildException(e.toString());", "-            }", "-\t    File destF=new File(dest);", "-\t    FileOutputStream fos = new FileOutputStream(destF);", "+\t    \t//set the timestamp to the file date.", "+\t    long timestamp=0;", "+", "+            boolean hasTimestamp=false;", "+\t    if(useTimestamp && dest.exists()) {", "+\t        timestamp=dest.lastModified();", "+                if (verbose)  {", "+                    Date t=new Date(timestamp);", "+                    log(\"local file date : \"+t.toString());", "+                }", "+                ", "+                hasTimestamp=true;", "+            }", "+\t", "+            //set up the URL connection", "+            URLConnection connection=source.openConnection();", "+            //modify the headers", "+            //NB: things like user authentication could go in here too.", "+            if(useTimestamp && hasTimestamp) {", "+                connection.setIfModifiedSince(timestamp);", "+            }", "+", "+            //connect to the remote site (may take some time)", "+            connection.connect();", "+            //next test for a 304 result (HTTP only)", "+            if(connection instanceof HttpURLConnection)  {", "+           \tHttpURLConnection httpConnection=(HttpURLConnection)connection;", "+                if(httpConnection.getResponseCode()==HttpURLConnection.HTTP_NOT_MODIFIED)  {", "+                    //not modified so no file download. just return instead", "+                    //and trace out something so the user doesn't think that the ", "+                    //download happened when it didnt", "+                    log(\"Not modified - so not downloaded\");", "+                    return; ", "+                }", "+            }", "+", "+            //REVISIT: at this point even non HTTP connections may support the if-modified-since", "+            //behaviour -we just check the date of the content and skip the write if it is not", "+            //newer. Some protocols (FTP) dont include dates, of course. ", "+           \t", "+\t    FileOutputStream fos = new FileOutputStream(dest);", "-\t\t    is = url.openStream();", "+\t\t    is = connection.getInputStream();", "-\t\tif( ignoreErrors != null ) return;", "-\t\tthrow new BuildException( \"Can't get \" + source + \" to \" + dest);", "+\t\tif(ignoreErrors) ", "+                    return;", "+\t\tthrow new BuildException( \"Can't get \" + source + \" to \" + dest,", "+                                          location);", "-\t\tif (\"true\".equals(verbose)) System.out.print(\".\");", "+\t\tif (verbose) System.out.print(\".\");", "-\t    if( \"true\".equals(verbose)) System.out.println();", "+\t    if(verbose) System.out.println();", "+           ", "+            //if (and only if) the use file time option is set, then the ", "+            //saved file now has its timestamp set to that of the downloaded file", "+            if(useTimestamp)  {", "+           \tlong remoteTimestamp=connection.getLastModified();", "+                if (verbose)  {", "+                    Date t=new Date(remoteTimestamp);", "+                    log(\"last modified = \"+t.toString()", "+                   \t+((remoteTimestamp==0)?\" - using current time instead\":\"\"));", "+                }", "+                if(remoteTimestamp!=0)", "+                    touchFile(dest,remoteTimestamp);", "+            }", "+", "+           ", "+", "-\t    if( ignoreErrors != null ) return;", "-\t    throw new BuildException(ioe.toString());", "+\t    if(ignoreErrors) ", "+                return;", "+\t    throw new BuildException(ioe, location);"]}]}
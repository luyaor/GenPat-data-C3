{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1d74c07cfb7852a5d6313ae3a62e5d09", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a38918def621da9be92b32bbd33cd48", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/StripJavaComments.java", "commitBeforeChange": "bd0662b8fa0d69a8129ea1089518b146e77c6abd", "commitAfterChange": "a1e68fb8c70781a8a2529d2a3cdee319720a93ce", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public final int read() throws IOException", "signatureAfterChange": "     public final int read() throws IOException", "diff": ["-        int ch = in.read();", "-        if (ch == '/') {", "+        int ch = -1;", "+        if (readAheadCh != -1) {", "+            ch = readAheadCh;", "+            readAheadCh = -1;", "+        } else {", "-            if (ch == '/') {", "-                while (ch != '\\n' && ch != -1) {", "-                    ch = in.read();", "-                }", "-            } else if (ch == '*') {", "-                while (ch != -1) {", "-                    ch = in.read();", "-                    if (ch == '*') {", "+            if (ch == '\"') {", "+                inString = !inString;", "+            } else {", "+                if (!inString) {", "+                    if (ch == '/') {", "-                        while (ch == '*' && ch != -1) {", "-                            ch = in.read();", "-                        }", "-", "-                            ch = read();", "-                            break;", "+                            while (ch != '\\n' && ch != -1) {", "+                                ch = in.read();", "+                            }", "+                        } else if (ch == '*') {", "+                            while (ch != -1) {", "+                                ch = in.read();", "+                                if (ch == '*') {", "+                                    ch = in.read();", "+                                    while (ch == '*' && ch != -1) {", "+                                        ch = in.read();", "+                                    }", "+", "+                                    if (ch == '/') {", "+                                        ch = read();", "+                                        break;", "+                                    }", "+                                }", "+                            }", "+                        } else {", "+                            readAheadCh = ch;", "+                            ch = '/';", "-        }", "-", "-        if (ch == '\"') {", "-            while (ch != -1) {", "-                ch = in.read();", "-                if (ch == '\\\\') {", "-                    ch = in.read();", "-                } else if (ch == '\"') {", "-                    ch = read();", "-                    break;", "-                }", "-            }", "-        }", "-", "-        if (ch == '\\'') {", "-            ch = in.read();", "-            if (ch == '\\\\') {", "-                ch = in.read();", "-            }", "-            ch = in.read();", "-            ch = read();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ffdb1413ff8916880e17c56b42107d0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Ant.java", "commitBeforeChange": "bb05312e66a2403d2405988dbaf0830cde65df7c", "commitAfterChange": "da5f3bfd256e383926c6ece58dba15a7d4bd5761", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private void addReferences() throws BuildException", "signatureAfterChange": "     private void addReferences() throws BuildException", "diff": ["-        Hashtable thisReferences", "-            = (Hashtable) getProject().getReferences().clone();", "-        Hashtable newReferences = newProject.getReferences();", "-        Enumeration e;", "-        if (references.size() > 0) {", "-            for (e = references.elements(); e.hasMoreElements();) {", "-                Reference ref = (Reference) e.nextElement();", "-                String refid = ref.getRefId();", "-                if (refid == null) {", "-                    throw new BuildException(\"the refid attribute is required\"", "-                                             + \" for reference elements\");", "-                }", "-                if (!thisReferences.containsKey(refid)) {", "-                    log(\"Parent project doesn't contain any reference '\"", "-                        + refid + \"'\",", "-                        Project.MSG_WARN);", "-                    continue;", "-                }", "-", "-                thisReferences.remove(refid);", "-                String toRefid = ref.getToRefid();", "-                if (toRefid == null) {", "-                    toRefid = refid;", "-                }", "-                copyReference(refid, toRefid);", "+        @SuppressWarnings(\"unchecked\")", "+        Hashtable<String, Object> thisReferences", "+            = (Hashtable<String, Object>) getProject().getReferences().clone();", "+        for (Reference ref : references) {", "+            String refid = ref.getRefId();", "+            if (refid == null) {", "+                throw new BuildException(\"the refid attribute is required\"", "+                                         + \" for reference elements\");", "+            if (!thisReferences.containsKey(refid)) {", "+                log(\"Parent project doesn't contain any reference '\"", "+                    + refid + \"'\",", "+                    Project.MSG_WARN);", "+                continue;", "+            }", "+", "+            thisReferences.remove(refid);", "+            String toRefid = ref.getToRefid();", "+            if (toRefid == null) {", "+                toRefid = refid;", "+            }", "+            copyReference(refid, toRefid);", "-            for (e = thisReferences.keys(); e.hasMoreElements();) {", "-                String key = (String) e.nextElement();", "+            Hashtable<String, Object> newReferences = newProject.getReferences();", "+            for (String key : thisReferences.keySet()) {"]}]}
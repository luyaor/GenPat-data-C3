{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "118e24d99cf09878f9f497e766be44cb", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d69d39d268600e93c5c457b47269c57", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DefaultLogger.java", "commitBeforeChange": "affdc94099335f21a0e62be2256c9eaf16ad1e85", "commitAfterChange": "233ae85c5f835679681ece8d58a279b6bcf50550", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void messageLogged(BuildEvent event)", "signatureAfterChange": "     public void messageLogged(BuildEvent event)", "diff": ["-            // Print out the name of the task if we're in one", "-            if (event.getTask() != null) {", "+            if (event.getTask() != null && !emacsMode) {", "+                // Print out the name of the task if we're in one", "-", "-                if (!emacsMode) {", "-                    String label = \"[\" + name + \"] \";", "-                    int size = LEFT_COLUMN_SIZE - label.length();", "-                    for (int i = 0; i < size; i++) {", "-                        message.append(\" \");", "-                    }", "-                    message.append(label);", "+                String label = \"[\" + name + \"] \";", "+                int size = LEFT_COLUMN_SIZE - label.length();", "+                StringBuffer tmp = new StringBuffer(size);", "+                for (int i = 0; i < size; i++) {", "+                    tmp.append(\" \");", "+                tmp.append(label);", "+                label = tmp.toString();", "+", "+                StringTokenizer tok = new StringTokenizer(event.getMessage(),", "+                                                          \"\\r\\n\", false);", "+                boolean first = true;", "+                while (tok.hasMoreTokens()) {", "+                    if (!first) {", "+                        message.append(StringUtils.LINE_SEP);", "+                    }", "+                    first = false;", "+                    message.append(label);", "+                    message.append(tok.nextToken());", "+                }", "+", "+            } else {", "+                message.append(event.getMessage());", "-            message.append(event.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "463f79a48bc39c78d5e3e4bc925f61cf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Java.java", "commitBeforeChange": "65d02e393d8709dd9fd6f5d48b502b72507bbb86", "commitAfterChange": "4e7ce7833dc9e2a12367a0e69b85507ad114e9fe", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        ", "+", "-        Vector argList = tokenize(args);", "-        ", "-        project.log(\"Java args: \" + argList.toString(), \"java\", project.MSG_VERBOSE);", "-        ", "-        run(classname, argList);", "+        if (fork) {", "+            StringBuffer b = new StringBuffer();", "+            b.append(\"java \");", "+            if (jvmargs != null) {", "+                b.append(jvmargs);", "+                b.append(\" \");", "+            }", "+            b.append(classname);", "+            if (args != null) {", "+                b.append(\" \");", "+                b.append(args);", "+            }", "+            ", "+            run(b.toString());", "+        } else {", "+            Vector argList = tokenize(args);", "+            if (jvmargs != null) project.log(\"JVM args ignored when same JVM is used.\", \"java\", project.MSG_VERBOSE);", "+            project.log(\"Java args: \" + argList.toString(), \"java\", project.MSG_VERBOSE);", "+            run(classname, argList);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae0773f48331d65e7ca79472145e0694", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "51fe5cb2d9c5c0aae9a528b1af992bcf1d407b1a", "commitAfterChange": "3849918afcc50b3f87292c7a9f3ef2bbb73fd4bc", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "     private static void printTargets(Project project, Vector names,                                      Vector descriptions, String heading,                                      int maxlen)", "signatureAfterChange": "     private static void printTargets(Project project, Vector names,                                      Vector descriptions, Vector dependencies,                                      String heading,                                      int maxlen)", "diff": ["-                                     Vector descriptions, String heading,", "+                                     Vector descriptions, Vector dependencies,", "+                                     String heading,", "+            if (!dependencies.isEmpty()) {", "+                Enumeration deps = (Enumeration) dependencies.elementAt(i);", "+                if (deps.hasMoreElements()) {", "+                    msg.append(\"   depends of: \");", "+                    while (deps.hasMoreElements()) {", "+                        msg.append(deps.nextElement());", "+                        if (deps.hasMoreElements()) {", "+                            msg.append(\", \");", "+                        }", "+                    }", "+                    msg.append(lSep);                ", "+                }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d66ce1380fbc082891a57efe825e7308", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/SSHExec.java", "commitBeforeChange": "6307fed882ce726b54ff5d478b972ed794aeb275", "commitAfterChange": "93eb236577fd99125091dea1515a94cb47d2c00a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 19, "signatureBeforeChange": "      private void executeCommand(Session session, String cmd, StringBuffer sb)         throws BuildException", "signatureAfterChange": "      private void executeCommand(Session session, String cmd, StringBuffer sb)         throws BuildException", "diff": ["+        ByteArrayOutputStream errout = new ByteArrayOutputStream();", "+        OutputStream teeErr = suppressSystemErr ? errout : new TeeOutputStream(out, KeepAliveOutputStream.wrapSystemErr());", "+            channel.setErrStream(teeErr);", "-                //success", "+                // stdout to outputFile", "-", "+                // set errorProperty", "+                if (errorProperty != null) {", "+                    getProject().setNewProperty(errorProperty, errout.toString());    ", "+                }", "+                // stderr to errorFile", "+                if (errorFile != null) {", "+                    writeToFile(errout.toString(), appenderr, errorFile);", "+                }", "+                // set resultproperty", "+                if (resultProperty != null) {", "+                    getProject().setNewProperty(resultProperty, Integer.toString(ec));", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f85b70f45e06ef6d8cbd4839cd5929d4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "7b496796a17f0f7260141b2bbeb8681785788664", "commitAfterChange": "c524f9ba2269aab3e0126cedba791854d797c592", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+        // Apply the basetest attributes", "+        Enumeration e = allTests();", "+        while (e.hasMoreElements()) {", "+            BaseTest test = (BaseTest) e.nextElement();", "+            test.setFiltertrace(filterTrace);", "+            test.setHaltonerror(haltOnError);", "+            if (errorProperty != null) {", "+                test.setErrorProperty(errorProperty);", "+            }", "+            test.setHaltonfailure(haltOnFail);", "+            if (failureProperty != null) {", "+                test.setFailureProperty(failureProperty);", "+            }", "+            test.setFork(fork);", "+        }", "+"]}]}
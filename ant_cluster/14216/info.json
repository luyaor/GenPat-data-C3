{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "00a02f028cc8110a55e60c6dec393a6a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "671fba23a958a13c57084c49447c2bd1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/builder/DefaultProjectBuilder.java", "commitBeforeChange": "e2cc34fa963ffa74a7e6dc7fa60d8ba32042b83c", "commitAfterChange": "7b867a10d26f96911855430e79c668df0e053cef", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 6, "signatureBeforeChange": "     protected void buildTarget( final DefaultProject project, final Configuration target )         throws Exception", "signatureAfterChange": "     private void buildTarget( final DefaultProject project, final Configuration target )         throws Exception", "diff": ["-    protected void buildTarget( final DefaultProject project, final Configuration target )", "+    private void buildTarget( final DefaultProject project, final Configuration target )", "-                                    target.getLocation() );", "+                                 target.getLocation() );", "+        }", "+", "+        if( !validName( name ) )", "+        {", "+            throw new Exception( \"Target with an invalid name at \" +", "+                                 target.getLocation() );           ", "-        final DefaultTarget defaultTarget = new DefaultTarget( condition );", "+        String[] dependencies = null;", "+            final ArrayList dependsList = new ArrayList();", "-                defaultTarget.addDependency( dependency );", "+                dependsList.add( dependency );", "+                //defaultTarget.addDependency( dependency );", "+", "+            dependencies = (String[])dependsList.toArray( new String[ 0 ] );", "-        //add all the targets from element", "-        final Configuration[] tasks = target.getChildren();", "-        for( int i = 0; i < tasks.length; i++ )", "-        {", "-            getLogger().debug( \"Parsed task: \" + tasks[ i ].getName() );", "-            defaultTarget.addTask( tasks[ i ] );", "-        }", "+        final Target defaultTarget =", "+            new Target( condition, target.getChildren(), dependencies );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f69421b72ab18f3c4e2ca71b39b107a9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/project/DefaultProjectBuilder.java", "commitBeforeChange": "c31e31c52a1f624e72be505d788db9be42b87e5d", "commitAfterChange": "48c54a521235f746024ae8facc272e049d0e1cf5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     protected void buildTarget( final DefaultProject project, final Configuration target )", "signatureAfterChange": "     protected void buildTarget( final DefaultProject project, final Configuration target )", "diff": ["-            throw new AntException( \"Discovered un-named target at \" + ", "+            throw new AntException( \"Discovered un-named target at \" +", "-        } ", "+        }", "-                                    \"unless condition at \" + target.getLocation() );    ", "+                                    \"unless condition at \" + target.getLocation() );", "-            final String[] elements = StringUtil.splitString( depends, \",\" );", "+            final String[] elements = ExceptionUtil.splitString( depends, \",\" );", "-                    throw new AntException( \"Discovered empty dependency in target \" + ", "-                                            target.getName() + \" at \" + target.getLocation() ); ", "+                    throw new AntException( \"Discovered empty dependency in target \" +", "+                                            target.getName() + \" at \" + target.getLocation() );", "-            }    ", "+            }", "-        final Iterator tasks = target.getChildren();", "-        while( tasks.hasNext() )", "+        final Configuration[] tasks = target.getChildren();", "+        for( int i = 0; i < tasks.length; i++ )", "-            final Configuration task = (Configuration)tasks.next();", "-            getLogger().debug( \"Parsed task: \" + task.getName() );", "-            defaultTarget.addTask( task );", "+            getLogger().debug( \"Parsed task: \" + tasks[ i ].getName() );", "+            defaultTarget.addTask( tasks[ i ] );"]}]}
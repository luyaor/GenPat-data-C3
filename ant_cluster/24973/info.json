{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4aebedfc3a69f79136a4a1a3ef41524e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e396bbaf9e714c2c1ed863f23fd68dc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/EjbJar.java", "commitBeforeChange": "4290fbcebd30e74f23b80bba986857b7b35d6035", "commitAfterChange": "cf07b113a08332dc4a79528f75c570ee96d89bc7", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        boolean          needBuild  = true;", "-        DirectoryScanner ds         = null;", "-        String[]         files      = null;", "-        int              index      = 0;", "-        File             weblogicDD = null;", "-        File             jarfile    = null;", "-        File             wlJarfile  = null;", "-        File             jarToCheck = null;", "-        DescriptorHandler handler   = null;", "-        Hashtable        ejbFiles   = null;", "-        String           baseName   = null;", "+        if (srcdir == null) {", "+            throw new BuildException(\"The srcdir attribute must be specified\");", "+        }", "+        ", "+        if (deploymentTools.size() == 0) {", "+            GenericDeploymentTool genericTool = new GenericDeploymentTool();", "+            genericTool.setDestdir(destdir);", "+            genericTool.setTask(this);", "+            genericTool.setGenericjarsuffix(genericjarsuffix);", "-        // Lets do a little asserting to make sure we have all the", "-        // required attributes from the task processor", "-        StringBuffer sb = new StringBuffer();", "-        boolean die = false;", "-        sb.append(\"Processing ejbjar - the following attributes \");", "-        sb.append(\"must be specified: \");", "-        if (this.srcdir     == null) { sb.append(\"srcdir \");     die = true; }", "-        if (this.destdir    == null) { sb.append(\"destdir\");     die = true; }", "-        if ( die ) throw new BuildException(sb.toString());", "-", "+            deploymentTools.add(genericTool);", "+        }", "+        ", "+        for (Iterator i = deploymentTools.iterator(); i.hasNext(); ) {", "+            EJBDeploymentTool tool = (EJBDeploymentTool)i.next();", "+            tool.configure(basenameTerminator, flatdestdir);", "+            tool.validateConfigured();", "+        }", "+        ", "-            saxParserFactory.setValidating(false);", "+            saxParserFactory.setValidating(true);", "-", "-            ds = this.getDirectoryScanner(this.srcdir);", "+    ", "+            DirectoryScanner ds = getDirectoryScanner(srcdir);", "-            files = ds.getIncludedFiles();", "-", "-            this.log(files.length + \" deployment descriptors located.\",", "-                     Project.MSG_VERBOSE);", "-", "+            String[] files = ds.getIncludedFiles();", "+    ", "+            log(files.length + \" deployment descriptors located.\",", "+                Project.MSG_VERBOSE);", "+            ", "+                            ", "-            for (index=0; index < files.length; ++index) {", "-", "-                // By default we assume we need to build.", "-                needBuild = true;", "-", "-                // Work out what the base name is", "-                int endBaseName = ", "-                    files[index].indexOf(basenameterminator,", "-                                         files[index].lastIndexOf(File.separator));", "-                baseName = files[index].substring(0, endBaseName);", "-", "-                /* Parse the ejb deployment descriptor.  While it may not", "-                 * look like much, we use a SAXParser and an inner class to", "-                 * get hold of all the classfile names for the descriptor.", "-                 */", "-                handler = new DescriptorHandler();", "-                saxParser.parse(new InputSource", "-                                (new FileInputStream", "-                                 (new File(this.srcdir, files[index]))),", "-                                handler);", "-", "-                ejbFiles = handler.getFiles();", "-        ", "-                /* Now try to locate all of the deployment descriptors for the", "-                 * jar, and if they exist, add them to the list of files.", "-                 */", "-", "-                // First the regular deployment descriptor", "-                ejbFiles.put(EjbJar.META_DIR + EjbJar.EJB_DD,", "-                             new File(this.srcdir, files[index]));", "-", "-                // Then the weblogic deployment descriptor", "-                weblogicDD = new File(this.srcdir,", "-                                      baseName ", "-                                      + this.basenameterminator", "-                                      + EjbJar.WL_DD);", "-", "-                if (weblogicDD.exists()) {", "-                    ejbFiles.put(EjbJar.META_DIR + EjbJar.WL_DD,", "-                                 weblogicDD);", "+            for (int index = 0; index < files.length; ++index) {", "+                // process the deployment descriptor in each tool", "+                for (Iterator i = deploymentTools.iterator(); i.hasNext(); ) {", "+                    EJBDeploymentTool tool = (EJBDeploymentTool)i.next();", "+                    processDescriptor(files[index], saxParser, tool);", "-", "-                // The the weblogic cmp deployment descriptor", "-                weblogicDD = new File(this.srcdir,", "-                                      baseName", "-                                      + this.basenameterminator ", "-                                      + EjbJar.WL_CMP_DD);", "-", "-                if (weblogicDD.exists()) {", "-                    ejbFiles.put(EjbJar.META_DIR + EjbJar.WL_CMP_DD,", "-                                 weblogicDD);", "-                }", "-", "-                // Lastly create File object for the Jar files. If we are using", "-                // a flat destination dir, then we need to redefine baseName!", "-                if (this.flatdestdir) {", "-                    int startName = baseName.lastIndexOf(File.separator);", "-                    int endName   = baseName.length();", "-                    baseName = baseName.substring(startName, endName);", "-                }", "-", "-                jarfile = new File(this.destdir,", "-                                   baseName", "-                                   + this.genericjarsuffix);", "-                ", "-                wlJarfile = new File(this.destdir,", "-                                     baseName", "-                                     + this.weblogicjarsuffix);", "-                ", "-                /* Check to see if the jar file is already up to date. ", "-                 * Unfortunately we have to parse the descriptor just to do", "-                 * that, but it's still a saving over re-constructing the jar", "-                 * file each time. Tertiary is used to determine which jarfile", "-                 * we should check times against...think about it.", "-                 */", "-                jarToCheck = this.generateweblogic ? wlJarfile : jarfile;", "-                ", "-                if (jarToCheck.exists()) {", "-                    long    lastBuild = jarToCheck.lastModified();", "-                    Iterator fileIter = ejbFiles.values().iterator();", "-                    File currentFile  = null;", "-                    ", "-                    // Set the need build to false until we find out otherwise.", "-                    needBuild = false;", "-", "-                    // Loop through the files seeing if any has been touched", "-                    // more recently than the destination jar.", "-                    while( (needBuild == false) && (fileIter.hasNext()) ) {", "-                        currentFile = (File) fileIter.next();", "-                        needBuild = ( lastBuild < currentFile.lastModified() );", "-                    }", "-                }", "-                ", "-                // Check to see if we need a build and start", "-                // doing the work!", "-                if (needBuild) {", "-                    // Log that we are going to build...", "-                    this.log( \"building \"", "-                              + jarfile.getName()", "-                              + \" with \"", "-                              + String.valueOf(ejbFiles.size())", "-                              + \" total files\",", "-                              Project.MSG_INFO);", "-", "-                    // Use helper method to write the jarfile", "-                    this.writeJar(jarfile, ejbFiles);", "-", "-                    // Generate weblogic jar if requested", "-                    if (this.generateweblogic) {", "-                        this.buildWeblogicJar(jarfile, wlJarfile);", "-                    }", "-", "-                    // Delete the original jar if we weren't asked to keep it.", "-                    if (!this.keepgeneric) {", "-                        this.log(\"deleting jar \" + jarfile.toString(),", "-                                 Project.MSG_INFO);", "-                        jarfile.delete();", "-                    }", "-                }", "-                else {", "-                    // Log that the file is up to date...", "-                    this.log(jarfile.toString() + \" is up to date.\",", "-                             Project.MSG_INFO);", "-                }", "-            }", "+            }    ", "-            String msg = \"SAXException while parsing '\"", "-                + files[index].toString()", "-                + \"'. This probably indicates badly-formed XML.\"", "+            String msg = \"SAXException while creating parser.\"", "-        catch (IOException ioe) {", "-            String msg = \"IOException while parsing'\"", "-                + files[index].toString()", "-                + \"'.  This probably indicates that the descriptor\"", "-                + \" doesn't exist. Details:\"", "-                + ioe.getMessage();", "-            throw new BuildException(msg, ioe);", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39c0160753781f7ff7bb39ecee7883b2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/unix/SymlinkTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void testSymbolicLinkUtilsMethods() throws Exception", "signatureAfterChange": "      @Test     public void testSymbolicLinkUtilsMethods() throws Exception", "diff": ["+    @Test", "-        if (supportsSymlinks) {", "-            executeTarget(\"test-fileutils\");", "-            SymbolicLinkUtils su = SymbolicLinkUtils.getSymbolicLinkUtils();", "-            java.io.File f = new File(getOutputDir(), \"file1\");", "-            assertTrue(f.exists());", "-            assertFalse(f.isDirectory());", "-            assertTrue(f.isFile());", "-            assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isSymbolicLink(f.getParentFile(),", "-                                          f.getName()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "-                                                  f.getName()));", "+        buildRule.executeTarget(\"test-fileutils\");", "+        SymbolicLinkUtils su = SymbolicLinkUtils.getSymbolicLinkUtils();", "-            f = new File(getOutputDir(), \"dir1\");", "-            assertTrue(f.exists());", "-            assertTrue(f.isDirectory());", "-            assertFalse(f.isFile());", "-            assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isSymbolicLink(f.getParentFile(),", "-                                          f.getName()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "-                                                  f.getName()));", "+        java.io.File f = new File(buildRule.getOutputDir(), \"file1\");", "+        assertTrue(f.exists());", "+        assertFalse(f.isDirectory());", "+        assertTrue(f.isFile());", "+        assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "+        assertFalse(su.isSymbolicLink(f.getParentFile(),", "+                                      f.getName()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "+                                              f.getName()));", "-            f = new File(getOutputDir(), \"file2\");", "-            assertFalse(f.exists());", "-            assertFalse(f.isDirectory());", "-            assertFalse(f.isFile());", "-            assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isSymbolicLink(f.getParentFile(),", "-                                          f.getName()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "-                                                  f.getName()));", "+        f = new File(buildRule.getOutputDir(), \"dir1\");", "+        assertTrue(f.exists());", "+        assertTrue(f.isDirectory());", "+        assertFalse(f.isFile());", "+        assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "+        assertFalse(su.isSymbolicLink(f.getParentFile(),", "+                                      f.getName()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "+                                              f.getName()));", "-            f = new File(getOutputDir(), \"dir2\");", "-            assertFalse(f.exists());", "-            assertFalse(f.isDirectory());", "-            assertFalse(f.isFile());", "-            assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isSymbolicLink(f.getParentFile(),", "-                                          f.getName()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "-                                                  f.getName()));", "+        f = new File(buildRule.getOutputDir(), \"file2\");", "+        assertFalse(f.exists());", "+        assertFalse(f.isDirectory());", "+        assertFalse(f.isFile());", "+        assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "+        assertFalse(su.isSymbolicLink(f.getParentFile(),", "+                                      f.getName()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "+                                              f.getName()));", "+", "+        f = new File(buildRule.getOutputDir(), \"dir2\");", "+        assertFalse(f.exists());", "+        assertFalse(f.isDirectory());", "+        assertFalse(f.isFile());", "+        assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "+        assertFalse(su.isSymbolicLink(f.getParentFile(),", "+                                      f.getName()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "+                                              f.getName()));", "-            f = new File(getOutputDir(), \"file.there\");", "-            assertTrue(f.exists());", "-            assertFalse(f.isDirectory());", "-            assertTrue(f.isFile());", "-            assertTrue(su.isSymbolicLink(f.getAbsolutePath()));", "-            assertTrue(su.isSymbolicLink(f.getParentFile(),", "-                                         f.getName()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "-                                                  f.getName()));", "+        f = new File(buildRule.getOutputDir(), \"file.there\");", "+        assertTrue(f.exists());", "+        assertFalse(f.isDirectory());", "+        assertTrue(f.isFile());", "+        assertTrue(su.isSymbolicLink(f.getAbsolutePath()));", "+        assertTrue(su.isSymbolicLink(f.getParentFile(),", "+                                     f.getName()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "+                                              f.getName()));", "-            f = new File(getOutputDir(), \"dir.there\");", "-            assertTrue(f.exists());", "-            assertTrue(f.isDirectory());", "-            assertFalse(f.isFile());", "-            assertTrue(su.isSymbolicLink(f.getAbsolutePath()));", "-            assertTrue(su.isSymbolicLink(f.getParentFile(),", "-                                         f.getName()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "-                                                  f.getName()));", "+        f = new File(buildRule.getOutputDir(), \"dir.there\");", "+        assertTrue(f.exists());", "+        assertTrue(f.isDirectory());", "+        assertFalse(f.isFile());", "+        assertTrue(su.isSymbolicLink(f.getAbsolutePath()));", "+        assertTrue(su.isSymbolicLink(f.getParentFile(),", "+                                     f.getName()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "+                                              f.getName()));", "-            // it is not possible to find out that symbolic links pointing", "-            // to inexistent files or directories are symbolic links", "-            // it used to be possible to detect this on Mac", "-            // this is not true under Snow Leopard and JDK 1.5", "-            // Removing special handling of MacOS until someone shouts", "-            // Antoine", "-            f = new File(getOutputDir(), \"file.notthere\");", "-            assertFalse(f.exists());", "-            assertFalse(f.isDirectory());", "-            assertFalse(f.isFile());", "-            assertTrue(su.isSymbolicLink(f.getAbsolutePath()) == false);", "-            assertTrue(su.isSymbolicLink(f.getParentFile(), f.getName()) == false);", "-            assertTrue(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "-            assertTrue(su.isDanglingSymbolicLink(f.getParentFile(),", "-                                                 f.getName()));", "+        // it is not possible to find out that symbolic links pointing", "+        // to inexistent files or directories are symbolic links", "+        // it used to be possible to detect this on Mac", "+        // this is not true under Snow Leopard and JDK 1.5", "+        // Removing special handling of MacOS until someone shouts", "+        // Antoine", "+        f = new File(buildRule.getOutputDir(), \"file.notthere\");", "+        assertFalse(f.exists());", "+        assertFalse(f.isDirectory());", "+        assertFalse(f.isFile());", "+        assertTrue(su.isSymbolicLink(f.getAbsolutePath()) == false);", "+        assertTrue(su.isSymbolicLink(f.getParentFile(), f.getName()) == false);", "+        assertTrue(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+        assertTrue(su.isDanglingSymbolicLink(f.getParentFile(),", "+                                             f.getName()));", "-            f = new File(getOutputDir(), \"dir.notthere\");", "-            assertFalse(f.exists());", "-            assertFalse(f.isDirectory());", "-            assertFalse(f.isFile());", "-            assertTrue(su.isSymbolicLink(f.getAbsolutePath()) == false);", "-            assertTrue(su.isSymbolicLink(f.getParentFile(), f.getName()) == false);", "-            assertTrue(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "-            assertTrue(su.isDanglingSymbolicLink(f.getParentFile(),", "-                                                 f.getName()));", "+        f = new File(buildRule.getOutputDir(), \"dir.notthere\");", "+        assertFalse(f.exists());", "+        assertFalse(f.isDirectory());", "+        assertFalse(f.isFile());", "+        assertTrue(su.isSymbolicLink(f.getAbsolutePath()) == false);", "+        assertTrue(su.isSymbolicLink(f.getParentFile(), f.getName()) == false);", "+        assertTrue(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+        assertTrue(su.isDanglingSymbolicLink(f.getParentFile(),", "+                                             f.getName()));", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e7fe4e02552bcf417b4a138fce585dc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "9174fbde3b63fde69fee83a681d22301f7aa7a02", "commitAfterChange": "c2077d52ddbe15f9357e4609f78f6cd8187b0365", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 77, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        boolean javadoc1 = (Project.getJavaVersion() == Project.JAVA_1_1);", "-", "-", "-        Vector argList = new Vector();", "-        if(maxmemory != null){", "-            if(javadoc1){", "-                argList.addElement(\"-J-mx\" + maxmemory);", "-            }", "-            else{", "-                argList.addElement(\"-J-Xmx\" + maxmemory);", "-            }", "-        }", "-", "-            argList.addElement(\"-classpath\");", "-            argList.addElement(classpath.toString());", "+            cmd.createArgument().setValue(\"-classpath\");", "+            cmd.createArgument().setValue(classpath.toString());", "-                argList.addElement(\"-sourcepath\");", "-                argList.addElement(sourcePath.toString());", "+                cmd.createArgument().setValue(\"-sourcepath\");", "+                cmd.createArgument().setValue(sourcePath.toString());", "-            argList.addElement(\"-classpath\");", "-            argList.addElement(sourcePath.toString() +", "+            cmd.createArgument().setValue(\"-classpath\");", "+            cmd.createArgument().setValue(sourcePath.toString() +", "-        if (destDir != null) {", "-            argList.addElement(\"-d\");", "-            argList.addElement(destDir.getAbsolutePath());", "-        }", "-            argList.addElement (\"-version\");", "-        if (nodeprecated)", "-            argList.addElement (\"-nodeprecated\");", "+            cmd.createArgument().setValue(\"-version\");", "-            argList.addElement (\"-author\");", "-        if (noindex)", "-            argList.addElement (\"-noindex\");", "-        if (notree)", "-            argList.addElement (\"-notree\");", "-        if (pub)", "-            argList.addElement (\"-public\");", "-        if (prot)", "-            argList.addElement (\"-protected\");", "-        if (pack)", "-            argList.addElement (\"-package\");", "-        if (priv)", "-            argList.addElement (\"-private\");", "-        if (encoding != null) {", "-            argList.addElement(\"-encoding\");", "-            argList.addElement(encoding);", "-        }", "-        if (docencoding != null) {", "-            argList.addElement(\"-docencoding\");", "-            argList.addElement(docencoding);", "-        }", "+            cmd.createArgument().setValue(\"-author\");", "-            if (overviewFile != null) {", "-                argList.addElement(\"-overview\");", "-                argList.addElement(overviewFile.getAbsolutePath());", "-            }", "-            if (old)", "-                argList.addElement(\"-1.1\");", "-            if (verbose)", "-                argList.addElement(\"-verbose\");", "-            if (use)", "-                argList.addElement(\"-use\");", "-            if (splitindex)", "-                argList.addElement(\"-splitindex\");", "-            if (nodeprecatedlist)", "-                argList.addElement(\"-nodeprecatedlist\");", "-            if (nohelp)", "-                argList.addElement(\"-nohelp\");", "-            if (nonavbar)", "-                argList.addElement(\"-nonavbar\");", "-            if (serialwarn)                     ", "-                argList.addElement(\"-serialwarn\");", "-                    throw new BuildException(\"The doclet name must be specified.\");", "+                    throw new BuildException(\"The doclet name must be specified.\", location);", "-                    argList.addElement(\"-doclet\");", "-                    argList.addElement(doclet.getName());", "+                    cmd.createArgument().setValue(\"-doclet\");", "+                    cmd.createArgument().setValue(doclet.getName());", "-                        argList.addElement(\"-docletpath\");", "-                        argList.addElement(doclet.getPath().toString());", "+                        cmd.createArgument().setValue(\"-docletpath\");", "+                        cmd.createArgument().setValue(doclet.getPath().toString());", "-                        argList.addElement(param.getName());", "+                        cmd.createArgument().setValue(param.getName());", "-                            argList.addElement(param.getValue());", "+                            cmd.createArgument().setValue(param.getValue());", "-                argList.addElement(\"-bootclasspath\");", "-                argList.addElement(bootclasspath.toString());", "-            }", "-            if (extdirs != null) {", "-                argList.addElement(\"-extdirs\");", "-                argList.addElement(extdirs);", "-            }", "-            if (locale != null) {", "-                argList.addElement(\"-locale\");", "-                argList.addElement(locale);", "-            }", "-            if (encoding != null) {", "-                argList.addElement(\"-encoding\");", "-                argList.addElement(encoding);", "-            }", "-            if (windowtitle != null) {", "-                argList.addElement(\"-windowtitle\");", "-                argList.addElement(windowtitle);", "-            }", "-            if (doctitle != null) {", "-                argList.addElement(\"-doctitle\");", "-                argList.addElement(doctitle);", "-            }", "-            if (header != null) {", "-                argList.addElement(\"-header\");", "-                argList.addElement(header);", "-            }", "-            if (footer != null) {", "-                argList.addElement(\"-footer\");", "-                argList.addElement(footer);", "-            }", "-            if (bottom != null) {", "-                argList.addElement(\"-bottom\");", "-                argList.addElement(bottom);", "-            }", "-            ", "-            // add the single link arguments", "-            if (link != null) {", "-                argList.addElement(\"-link\");", "-                argList.addElement(link);", "+                cmd.createArgument().setValue(\"-bootclasspath\");", "+                cmd.createArgument().setValue(bootclasspath.toString());", "-                        argList.addElement(\"-linkoffline\");", "-                        argList.addElement(la.getHref());", "-                        argList.addElement(packageListLocation);", "+                        cmd.createArgument().setValue(\"-linkoffline\");", "+                        cmd.createArgument().setValue(la.getHref());", "+                        cmd.createArgument().setValue(packageListLocation);", "-                        argList.addElement(\"-link\");", "-                        argList.addElement(la.getHref());", "+                        cmd.createArgument().setValue(\"-link\");", "+                        cmd.createArgument().setValue(la.getHref());", "-            // add the single linkoffline arguments", "-            if (linkoffline != null) {", "-                argList.addElement(\"-linkoffline\");", "-                argList.addElement(linkoffline);", "-            }", "-            ", "-                    argList.addElement(\"-group\");", "-                    argList.addElement(name);", "-                    argList.addElement(pkgList);", "+                    cmd.createArgument().setValue(\"-group\");", "+                    cmd.createArgument().setValue(name);", "+                    cmd.createArgument().setValue(pkgList);", "-                    argList.addElement(\"-group\");", "-                    argList.addElement(title);", "-                    argList.addElement(packages);", "+                    cmd.createArgument().setValue(\"-group\");", "+                    cmd.createArgument().setValue(title);", "+                    cmd.createArgument().setValue(packages);", "-            if (stylesheetfile != null) {", "-                argList.addElement(\"-stylesheetfile\");", "-                argList.addElement(stylesheetfile.getAbsolutePath());", "-            }", "-            if (helpfile != null) {", "-                argList.addElement(\"-helpfile\");", "-                argList.addElement(helpfile.getAbsolutePath());", "-            }", "-            if (charset != null) {", "-                argList.addElement(\"-charset\");", "-                argList.addElement(charset);", "-            }", "-            if (additionalParam != null) {", "-                argList.addElement(additionalParam);", "-            }", "-                    argList.addElement(name);", "+                    cmd.createArgument().setValue(name);", "-                evaluatePackages(sourcePath, packages, argList);", "+                evaluatePackages(sourcePath, packages);", "-                argList.addElement(tok.nextToken().trim());", "+                cmd.createArgument().setValue(tok.nextToken().trim());", "-            argList.addElement(\"@\" + packageList);", "+            cmd.createArgument().setValue(\"@\" + packageList);", "-        log(\"Javadoc args: \" + argList.toString(), Project.MSG_VERBOSE);", "+        log(\"Javadoc args: \" + cmd.getArguments(), Project.MSG_VERBOSE);", "-        StringBuffer b = new StringBuffer();", "-        b.append(\"javadoc \");", "-", "-        Enumeration e = argList.elements();", "-        while (e.hasMoreElements()) {", "-            String arg = (String) e.nextElement();", "-            if (!arg.startsWith(\"-\")) {", "-                b.append(\"\\\"\");", "-                b.append(arg);", "-                b.append(\"\\\"\");", "-            } else {", "-                b.append(arg);", "-            }", "-            if (e.hasMoreElements()) b.append(\" \");", "+        JavadocOutputStream out = new JavadocOutputStream(Project.MSG_INFO);", "+        JavadocOutputStream err = new JavadocOutputStream(Project.MSG_WARN);", "+        Execute exe = new Execute(new PumpStreamHandler(out, err));", "+        exe.setAntRun(project);", "+        exe.setWorkingDirectory(project.getBaseDir());", "+        try {", "+            exe.setCommandline(cmd.getCommandline());", "+            exe.execute();", "+        } catch (IOException e) {", "+            throw new BuildException(\"Execute failed: \" + e, e, location);", "+        } finally {", "+            out.logFlush();", "+            err.logFlush();", "+            try {", "+                out.close();", "+                err.close();", "+            } catch (IOException e) {}", "-", "-        run(b.toString());"]}]}
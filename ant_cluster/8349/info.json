{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fdf9bc52e236bb3c679238700b0aff8b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "909d364a0332494d088c0c92bdc2499b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "ed1abbaa01fd034c3d4d9a61f8a2bfc268ea74e6", "commitAfterChange": "f61c1bcd3a4a540bac7ae97559f37c49bfee75d8", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected static boolean matchPath(String pattern, String str,                                         boolean isCaseSensitive)", "signatureAfterChange": "     protected static boolean matchPath(String pattern, String str,                                        boolean isCaseSensitive)", "diff": ["-    protected static boolean matchPath(String pattern, String str, ", "+    protected static boolean matchPath(String pattern, String str,", "-        // When str starts with a File.separator, pattern has to start with a", "-        // File.separator.", "-        // When pattern starts with a File.separator, str has to start with a", "-        // File.separator.", "-        if (str.startsWith(File.separator) !=", "-            pattern.startsWith(File.separator)) {", "-            return false;", "-        }", "-", "-        Vector patDirs = tokenizePath (pattern);", "-        Vector strDirs = tokenizePath (str);", "-", "-        int patIdxStart = 0;", "-        int patIdxEnd   = patDirs.size() - 1;", "-        int strIdxStart = 0;", "-        int strIdxEnd   = strDirs.size() - 1;", "-", "-        // up to first '**'", "-        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {", "-            String patDir = (String) patDirs.elementAt(patIdxStart);", "-            if (patDir.equals(\"**\")) {", "-                break;", "-            }", "-            if (!match(patDir, (String) strDirs.elementAt(strIdxStart), isCaseSensitive)) {", "-                return false;", "-            }", "-            patIdxStart++;", "-            strIdxStart++;", "-        }", "-        if (strIdxStart > strIdxEnd) {", "-            // String is exhausted", "-            for (int i = patIdxStart; i <= patIdxEnd; i++) {", "-                if (!patDirs.elementAt(i).equals(\"**\")) {", "-                    return false;", "-                }", "-            }", "-            return true;", "-        } else {", "-            if (patIdxStart > patIdxEnd) {", "-                // String not exhausted, but pattern is. Failure.", "-                return false;", "-            }", "-        }", "-", "-        // up to last '**'", "-        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {", "-            String patDir = (String) patDirs.elementAt(patIdxEnd);", "-            if (patDir.equals(\"**\")) {", "-                break;", "-            }", "-            if (!match(patDir, (String) strDirs.elementAt(strIdxEnd), isCaseSensitive)) {", "-                return false;", "-            }", "-            patIdxEnd--;", "-            strIdxEnd--;", "-        }", "-        if (strIdxStart > strIdxEnd) {", "-            // String is exhausted", "-            for (int i = patIdxStart; i <= patIdxEnd; i++) {", "-                if (!patDirs.elementAt(i).equals(\"**\")) {", "-                    return false;", "-                }", "-            }", "-            return true;", "-        }", "-", "-        while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {", "-            int patIdxTmp = -1;", "-            for (int i = patIdxStart + 1; i <= patIdxEnd; i++) {", "-                if (patDirs.elementAt(i).equals(\"**\")) {", "-                    patIdxTmp = i;", "-                    break;", "-                }", "-            }", "-            if (patIdxTmp == patIdxStart + 1) {", "-                // '**/**' situation, so skip one", "-                patIdxStart++;", "-                continue;", "-            }", "-            // Find the pattern between padIdxStart & padIdxTmp in str between", "-            // strIdxStart & strIdxEnd", "-            int patLength = (patIdxTmp - patIdxStart - 1);", "-            int strLength = (strIdxEnd - strIdxStart + 1);", "-            int foundIdx  = -1;", "-strLoop:", "-            for (int i = 0; i <= strLength - patLength; i++) {", "-                for (int j = 0; j < patLength; j++) {", "-                    String subPat ", "-                        = (String) patDirs.elementAt(patIdxStart + j + 1);", "-                    String subStr ", "-                        = (String) strDirs.elementAt(strIdxStart + i + j);", "-                    if (!match(subPat, subStr, isCaseSensitive)) {", "-                        continue strLoop;", "-                    }", "-                }", "-", "-                foundIdx = strIdxStart + i;", "-                break;", "-            }", "-", "-            if (foundIdx == -1) {", "-                return false;", "-            }", "-", "-            patIdxStart = patIdxTmp;", "-            strIdxStart = foundIdx + patLength;", "-        }", "-", "-        for (int i = patIdxStart; i <= patIdxEnd; i++) {", "-            if (!patDirs.elementAt(i).equals(\"**\")) {", "-                return false;", "-            }", "-        }", "-", "-        return true;", "+        return SelectorUtils.matchPath(pattern, str, isCaseSensitive);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d549dc14c075d9c1ceacd451bf855b5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/selectors/SelectorUtils.java", "commitBeforeChange": "739c7e224a56b3008c9496d8711fbf8276b46034", "commitAfterChange": "1f06891d003a6f39cd3b456c797bb8ed5a1708ac", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public static boolean matchPath(String pattern, String str,                                     boolean isCaseSensitive)", "signatureAfterChange": "     public static boolean matchPath(String pattern, String str,                                     boolean isCaseSensitive)", "diff": ["+        return matchPath(patDirs, str, isCaseSensitive);", "+    }", "-        int patIdxEnd = patDirs.length - 1;", "-            String patDir = patDirs[patIdxStart];", "-                patDirs = null;", "-                strDirs = null;", "-                if (!patDirs[i].equals(\"**\")) {", "-                    patDirs = null;", "-                    strDirs = null;", "-                patDirs = null;", "-                strDirs = null;", "-            String patDir = patDirs[patIdxEnd];", "-                patDirs = null;", "-                strDirs = null;", "-                if (!patDirs[i].equals(\"**\")) {", "-                    patDirs = null;", "-                    strDirs = null;", "-                if (patDirs[i].equals(\"**\")) {", "-                                String subPat = patDirs[patIdxStart + j + 1];", "-                patDirs = null;", "-                strDirs = null;", "-            if (!patDirs[i].equals(\"**\")) {", "-                patDirs = null;", "-                strDirs = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c00c3673a235f403dea15cef79f2589b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/selectors/SelectorUtils.java", "commitBeforeChange": "2b925503d71972d8b782eedd6cdf75711377d7b0", "commitAfterChange": "2c4faa154f069f3f69d6c3c95629409a7b8b0cc4", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     static boolean matchPath(String[] tokenizedPattern, String str, boolean isCaseSensitive)", "signatureAfterChange": "     static boolean matchPath(String[] tokenizedPattern, String str,                              boolean isCaseSensitive)", "diff": ["-    static boolean matchPath(String[] tokenizedPattern, String str, boolean isCaseSensitive) {", "-        String[] strDirs = tokenizePathAsArray(str);", "+    static boolean matchPath(String[] tokenizedPattern, String str,", "+                             boolean isCaseSensitive) {", "+        return matchPath(tokenizedPattern, tokenizePathAsArray(str),", "+                         isCaseSensitive);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f18aa7552786688df8739a535ba66c76", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "ed1abbaa01fd034c3d4d9a61f8a2bfc268ea74e6", "commitAfterChange": "f61c1bcd3a4a540bac7ae97559f37c49bfee75d8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     protected static boolean match(String pattern, String str,                                     boolean isCaseSensitive)", "signatureAfterChange": "     protected static boolean match(String pattern, String str,                                    boolean isCaseSensitive)", "diff": ["-    protected static boolean match(String pattern, String str, ", "+    protected static boolean match(String pattern, String str,", "-        char[] patArr = pattern.toCharArray();", "-        char[] strArr = str.toCharArray();", "-        int patIdxStart = 0;", "-        int patIdxEnd   = patArr.length - 1;", "-        int strIdxStart = 0;", "-        int strIdxEnd   = strArr.length - 1;", "-        char ch;", "-", "-        boolean containsStar = false;", "-        for (int i = 0; i < patArr.length; i++) {", "-            if (patArr[i] == '*') {", "-                containsStar = true;", "-                break;", "-            }", "-        }", "-", "-        if (!containsStar) {", "-            // No '*'s, so we make a shortcut", "-            if (patIdxEnd != strIdxEnd) {", "-                return false; // Pattern and string do not have the same size", "-            }", "-            for (int i = 0; i <= patIdxEnd; i++) {", "-                ch = patArr[i];", "-                if (ch != '?') {", "-                    if (isCaseSensitive && ch != strArr[i]) {", "-                        return false;// Character mismatch", "-                    }", "-                    if (!isCaseSensitive && Character.toUpperCase(ch) !=", "-                        Character.toUpperCase(strArr[i])) {", "-                        return false; // Character mismatch", "-                    }", "-                }", "-            }", "-            return true; // String matches against pattern", "-        }", "-", "-        if (patIdxEnd == 0) {", "-            return true; // Pattern contains only '*', which matches anything", "-        }", "-", "-        // Process characters before first star", "-        while ((ch = patArr[patIdxStart]) != '*' && strIdxStart <= strIdxEnd) {", "-            if (ch != '?') {", "-                if (isCaseSensitive && ch != strArr[strIdxStart]) {", "-                    return false;// Character mismatch", "-                }", "-                if (!isCaseSensitive && Character.toUpperCase(ch) !=", "-                    Character.toUpperCase(strArr[strIdxStart])) {", "-                    return false;// Character mismatch", "-                }", "-            }", "-            patIdxStart++;", "-            strIdxStart++;", "-        }", "-        if (strIdxStart > strIdxEnd) {", "-            // All characters in the string are used. Check if only '*'s are", "-            // left in the pattern. If so, we succeeded. Otherwise failure.", "-            for (int i = patIdxStart; i <= patIdxEnd; i++) {", "-                if (patArr[i] != '*') {", "-                    return false;", "-                }", "-            }", "-            return true;", "-        }", "-", "-        // Process characters after last star", "-        while ((ch = patArr[patIdxEnd]) != '*' && strIdxStart <= strIdxEnd) {", "-            if (ch != '?') {", "-                if (isCaseSensitive && ch != strArr[strIdxEnd]) {", "-                    return false;// Character mismatch", "-                }", "-                if (!isCaseSensitive && Character.toUpperCase(ch) !=", "-                    Character.toUpperCase(strArr[strIdxEnd])) {", "-                    return false;// Character mismatch", "-                }", "-            }", "-            patIdxEnd--;", "-            strIdxEnd--;", "-        }", "-        if (strIdxStart > strIdxEnd) {", "-            // All characters in the string are used. Check if only '*'s are", "-            // left in the pattern. If so, we succeeded. Otherwise failure.", "-            for (int i = patIdxStart; i <= patIdxEnd; i++) {", "-                if (patArr[i] != '*') {", "-                    return false;", "-                }", "-            }", "-            return true;", "-        }", "-", "-        // process pattern between stars. padIdxStart and patIdxEnd point", "-        // always to a '*'.", "-        while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {", "-            int patIdxTmp = -1;", "-            for (int i = patIdxStart + 1; i <= patIdxEnd; i++) {", "-                if (patArr[i] == '*') {", "-                    patIdxTmp = i;", "-                    break;", "-                }", "-            }", "-            if (patIdxTmp == patIdxStart + 1) {", "-                // Two stars next to each other, skip the first one.", "-                patIdxStart++;", "-                continue;", "-            }", "-            // Find the pattern between padIdxStart & padIdxTmp in str between", "-            // strIdxStart & strIdxEnd", "-            int patLength = (patIdxTmp - patIdxStart - 1);", "-            int strLength = (strIdxEnd - strIdxStart + 1);", "-            int foundIdx  = -1;", "-            strLoop:", "-            for (int i = 0; i <= strLength - patLength; i++) {", "-                for (int j = 0; j < patLength; j++) {", "-                    ch = patArr[patIdxStart + j + 1];", "-                    if (ch != '?') {", "-                        if (isCaseSensitive ", "-                             && ch != strArr[strIdxStart + i + j]) {", "-                            continue strLoop;", "-                        }", "-                        if (!isCaseSensitive && Character.toUpperCase(ch) !=", "-                            Character.toUpperCase(strArr[strIdxStart + i + j])) {", "-                            continue strLoop;", "-                        }", "-                    }", "-                }", "-", "-                foundIdx = strIdxStart + i;", "-                break;", "-            }", "-", "-            if (foundIdx == -1) {", "-                return false;", "-            }", "-", "-            patIdxStart = patIdxTmp;", "-            strIdxStart = foundIdx + patLength;", "-        }", "-", "-        // All characters in the string are used. Check if only '*'s are left", "-        // in the pattern. If so, we succeeded. Otherwise failure.", "-        for (int i = patIdxStart; i <= patIdxEnd; i++) {", "-            if (patArr[i] != '*') {", "-                return false;", "-            }", "-        }", "-        return true;", "+        return SelectorUtils.match(pattern, str, isCaseSensitive);"]}]}
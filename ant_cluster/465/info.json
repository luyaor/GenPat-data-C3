{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "24e9ea15d13aff79f7252596b9b28d46", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e763f7fb7a2955ce28191a8896152f3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/Checksum.java", "commitBeforeChange": "1e745fe39610746a046ce2ea1eef71fa15a6ea8e", "commitAfterChange": "38dce34edfdb4041103530c656e12e6ed61e2bd6", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private boolean generateChecksums()         throws TaskException", "signatureAfterChange": "     private boolean generateChecksums()         throws TaskException", "diff": ["+        final Enumeration includes = m_includeFileMap.keys();", "+        while( includes.hasMoreElements() )", "+        {", "+            final File src = (File)includes.nextElement();", "+            if( !m_isCondition )", "+            {", "+                final String message = \"Calculating \" + m_algorithm + \" checksum for \" + src;", "+                getLogger().info( message );", "+            }", "+", "+            checksumMatches = z( src, checksumMatches );", "+        }", "+", "+        return checksumMatches;", "+    }", "-            for( Enumeration e = includeFileMap.keys(); e.hasMoreElements(); )", "-                messageDigest.reset();", "-                File src = (File)e.nextElement();", "-                if( !isCondition )", "-                    getLogger().info( \"Calculating \" + algorithm + \" checksum for \" + src );", "-                fis = new FileInputStream( src );", "-                DigestInputStream dis = new DigestInputStream( fis,", "-                                                               messageDigest );", "-                while( dis.read() != -1 )", "-                    ;", "-                dis.close();", "-                fis.close();", "-                fis = null;", "-                byte[] fileDigest = messageDigest.digest();", "-                String checksum = \"\";", "-                for( int i = 0; i < fileDigest.length; i++ )", "-                    String hexStr = Integer.toHexString( 0x00ff & fileDigest[ i ] );", "-                    if( hexStr.length() < 2 )", "-                    {", "-                        checksum += \"0\";", "-                    }", "-                    checksum += hexStr;", "-                //can either be a property name string or a file", "-                Object destination = includeFileMap.get( src );", "-                if( destination instanceof java.lang.String )", "-                    String prop = (String)destination;", "-                    if( isCondition )", "-                        checksumMatches = checksum.equals( property );", "-                        setProperty( prop, checksum );", "-                else if( destination instanceof java.io.File )", "-                    if( isCondition )", "-                    {", "-                        File existingFile = (File)destination;", "-                        if( existingFile.exists() &&", "-                            existingFile.length() == checksum.length() )", "-                        {", "-                            fis = new FileInputStream( existingFile );", "-                            InputStreamReader isr = new InputStreamReader( fis );", "-                            BufferedReader br = new BufferedReader( isr );", "-                            String suppliedChecksum = br.readLine();", "-                            fis.close();", "-                            fis = null;", "-                            br.close();", "-                            isr.close();", "-                            checksumMatches =", "-                                checksum.equals( suppliedChecksum );", "-                        }", "-                        else", "-                        {", "-                            checksumMatches = false;", "-                        }", "-                    }", "-                    else", "-                    {", "-                        File dest = (File)destination;", "-                        fos = new FileOutputStream( dest );", "-                        fos.write( checksum.getBytes() );", "-                        fos.close();", "-                        fos = null;", "-                    }", "-        catch( Exception e )", "-            throw new TaskException( \"Error\", e );", "-            if( fis != null )", "-            {", "-                try", "-                {", "-                    fis.close();", "-                }", "-                catch( IOException e )", "-                {", "-                }", "-            }", "-            if( fos != null )", "-            {", "-                try", "-                {", "-                    fos.close();", "-                }", "-                catch( IOException e )", "-                {", "-                }", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d540c50db6209cd84eb5f864f24b3a23", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/Checksum.java", "commitBeforeChange": "1e745fe39610746a046ce2ea1eef71fa15a6ea8e", "commitAfterChange": "38dce34edfdb4041103530c656e12e6ed61e2bd6", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private boolean generateChecksums()         throws TaskException", "signatureAfterChange": "     private boolean generateChecksums()         throws TaskException", "diff": ["+        final Enumeration includes = m_includeFileMap.keys();", "+        while( includes.hasMoreElements() )", "+        {", "+            final File src = (File)includes.nextElement();", "+            if( !m_isCondition )", "+            {", "+                final String message = \"Calculating \" + m_algorithm + \" checksum for \" + src;", "+                getLogger().info( message );", "+            }", "+", "+            checksumMatches = z( src, checksumMatches );", "+        }", "+", "+        return checksumMatches;", "+    }", "-            for( Enumeration e = includeFileMap.keys(); e.hasMoreElements(); )", "-                messageDigest.reset();", "-                File src = (File)e.nextElement();", "-                if( !isCondition )", "-                    getLogger().info( \"Calculating \" + algorithm + \" checksum for \" + src );", "-                fis = new FileInputStream( src );", "-                DigestInputStream dis = new DigestInputStream( fis,", "-                                                               messageDigest );", "-                while( dis.read() != -1 )", "-                    ;", "-                dis.close();", "-                fis.close();", "-                fis = null;", "-                byte[] fileDigest = messageDigest.digest();", "-                String checksum = \"\";", "-                for( int i = 0; i < fileDigest.length; i++ )", "-                    String hexStr = Integer.toHexString( 0x00ff & fileDigest[ i ] );", "-                    if( hexStr.length() < 2 )", "-                    {", "-                        checksum += \"0\";", "-                    }", "-                    checksum += hexStr;", "-                //can either be a property name string or a file", "-                Object destination = includeFileMap.get( src );", "-                if( destination instanceof java.lang.String )", "-                    String prop = (String)destination;", "-                    if( isCondition )", "-                        checksumMatches = checksum.equals( property );", "-                        setProperty( prop, checksum );", "-                else if( destination instanceof java.io.File )", "-                    if( isCondition )", "-                    {", "-                        File existingFile = (File)destination;", "-                        if( existingFile.exists() &&", "-                            existingFile.length() == checksum.length() )", "-                        {", "-                            fis = new FileInputStream( existingFile );", "-                            InputStreamReader isr = new InputStreamReader( fis );", "-                            BufferedReader br = new BufferedReader( isr );", "-                            String suppliedChecksum = br.readLine();", "-                            fis.close();", "-                            fis = null;", "-                            br.close();", "-                            isr.close();", "-                            checksumMatches =", "-                                checksum.equals( suppliedChecksum );", "-                        }", "-                        else", "-                        {", "-                            checksumMatches = false;", "-                        }", "-                    }", "-                    else", "-                    {", "-                        File dest = (File)destination;", "-                        fos = new FileOutputStream( dest );", "-                        fos.write( checksum.getBytes() );", "-                        fos.close();", "-                        fos = null;", "-                    }", "-        catch( Exception e )", "-            throw new TaskException( \"Error\", e );", "-            if( fis != null )", "-            {", "-                try", "-                {", "-                    fis.close();", "-                }", "-                catch( IOException e )", "-                {", "-                }", "-            }", "-            if( fos != null )", "-            {", "-                try", "-                {", "-                    fos.close();", "-                }", "-                catch( IOException e )", "-                {", "-                }", "-            }"]}]}
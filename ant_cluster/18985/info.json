{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7f8393a0e5f1b8fe854c6d767e0a8baa", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06c2ad6255c9f0f640b3332b20f6eda8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ComponentManager.java", "commitBeforeChange": "fcc7e2b47f01468c83803caa09ce8266e56f213c", "commitAfterChange": "d571dff958cd85b5083a2a829f84e35b4abe4434", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     protected Object createComponent(String componentName, BuildElement model)          throws ExecutionException", "signatureAfterChange": "     private Object createComponent(String componentName, BuildElement model)          throws ExecutionException", "diff": ["-    protected Object createComponent(String componentName, BuildElement model)", "+    private Object createComponent(String componentName, BuildElement model)", "-        ImportInfo importInfo = getImport(componentName);", "-        if (importInfo == null) {", "-            throw new ExecutionException(\"There is no definition of the <\"", "-                 + componentName + \"> component\");", "+        Object component = null;", "+        if (model != null) {             ", "+            for (Iterator i = aspects.iterator(); i.hasNext();) {", "+                Aspect aspect = (Aspect) i.next();", "+                component = aspect.preCreateComponent(component, model);", "+            }", "-        String className = importInfo.getClassName();", "-", "-        ComponentLibrary componentLibrary", "-             = importInfo.getComponentLibrary();", "-", "-        return createComponentFromDef(componentName, componentLibrary,", "-            importInfo.getDefinition(), model);", "+        ", "+        if (component == null) {", "+            ImportInfo importInfo = getImport(componentName);", "+            if (importInfo == null) {", "+                throw new ExecutionException(\"There is no definition of the <\"", "+                + componentName + \"> component\");", "+            }", "+            String className = importInfo.getClassName();", "+            ", "+            ComponentLibrary componentLibrary", "+            = importInfo.getComponentLibrary();", "+            ", "+            component = createComponentFromDef(componentName, componentLibrary,", "+                importInfo.getDefinition(), model);", "+        }", "+        ", "+        if (model != null) {", "+            for (Iterator i = aspects.iterator(); i.hasNext();) {", "+                Aspect aspect = (Aspect) i.next();", "+                component = aspect.postCreateComponent(component, model);", "+            }", "+        }", "+        ", "+        return component;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ba36ddede21e3eb77ad1bbc02849994", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ComponentManager.java", "commitBeforeChange": "c0ddb311373dc9fe32a78a15a68c4587bbb7566d", "commitAfterChange": "69d9b9a49622889f44d6792faf00f886857828d6", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     protected Object createComponent(String componentName, BuildElement model)          throws ExecutionException", "signatureAfterChange": "     protected Object createComponent(String componentName, BuildElement model)          throws ExecutionException", "diff": ["+        ImportInfo importInfo = getImport(componentName);", "+        if (importInfo == null) {", "+            throw new ExecutionException(\"There is no definition of the <\"", "+                 + componentName + \"> component\");", "+        }", "+        String className = importInfo.getClassName();", "+", "+        ComponentLibrary componentLibrary", "+             = importInfo.getComponentLibrary();", "+", "+        return createComponentFromDef(componentName, componentLibrary,", "+            importInfo.getDefinition(), model);", "+    }", "-        ImportInfo definition = getDefinition(componentName);", "-        if (definition == null) {", "-            throw new ExecutionException(\"There is no definition of the <\"", "-                 + componentName + \"> component\");", "-        }", "-        String className = definition.getClassName();", "-        ComponentLibrary componentLibrary", "-             = definition.getComponentLibrary();", "-        boolean isTask = definition.getDefinitionType() == AntLibrary.TASKDEF;", "-        String localName = definition.getLocalName();", "-            return createComponent(componentLoader, libFactory, componentClass,", "-                componentName, localName, isTask, model);", "-                 + e.getMessage() + \") for component \" + componentName,", "-                e, location);", "-            e.setLocation(model.getLocation(), false);"]}]}
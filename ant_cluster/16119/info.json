{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "133c151ef515936cf520be2755177cc9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39b60ee0d50bb2838c91d7863897d20d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/tar/TarInputStream.java", "commitBeforeChange": "b43f4224d8fe9d1e7d628e88df394a7dfed46d1b", "commitAfterChange": "2e5b53fa106b848646493cb6f6ea74616973aca0", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public TarEntry getNextEntry() throws IOException", "signatureAfterChange": "     public TarEntry getNextEntry() throws IOException", "diff": ["-        byte[] headerBuf = buffer.readRecord();", "-", "-        if (headerBuf == null) {", "-            if (debug) {", "-                System.err.println(\"READ NULL RECORD\");", "-            }", "-            hasHitEOF = true;", "-        } else if (buffer.isEOFRecord(headerBuf)) {", "-            if (debug) {", "-                System.err.println(\"READ EOF RECORD\");", "-            }", "-            hasHitEOF = true;", "-        }", "+        byte[] headerBuf = getRecord();", "-        } else {", "-            currEntry = new TarEntry(headerBuf);", "-", "-            if (debug) {", "-                System.err.println(\"TarInputStream: SET CURRENTRY '\"", "-                        + currEntry.getName()", "-                        + \"' size = \"", "-                        + currEntry.getSize());", "-            }", "-", "-            entryOffset = 0;", "-", "-            entrySize = currEntry.getSize();", "+            return null;", "-        if (currEntry != null && currEntry.isGNULongNameEntry()) {", "+        try {", "+            currEntry = new TarEntry(headerBuf, encoding);", "+        } catch (IllegalArgumentException e) {", "+            IOException ioe = new IOException(\"Error detected parsing the header\");", "+            ioe.initCause(e);", "+            throw ioe;", "+        }", "+        if (debug) {", "+            System.err.println(\"TarInputStream: SET CURRENTRY '\"", "+                               + currEntry.getName()", "+                               + \"' size = \"", "+                               + currEntry.getSize());", "+        }", "+", "+        entryOffset = 0;", "+        entrySize = currEntry.getSize();", "+", "+        if (currEntry.isGNULongNameEntry()) {", "-                longName.append(new String(buf, 0, length));", "+                longName.append(new String(buf, 0, length)); // TODO default charset?", "+        if (currEntry.isPaxHeader()){ // Process Pax headers", "+            paxHeaders();", "+        }", "+", "+        if (currEntry.isGNUSparse()){ // Process sparse files", "+            readGNUSparse();", "+        }", "+", "+        // If the size of the next element in the archive has changed", "+        // due to a new size being reported in the posix header", "+        // information, we update entrySize here so that it contains", "+        // the correct value.", "+        entrySize = currEntry.getSize();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5544bfdd9c8ab4d741c3222d6f980197", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/xml/XSLTProcess.java", "commitBeforeChange": "030fd751f51bef1c60b27cc4034cf1b013551520", "commitAfterChange": "0deb15031e9e934900b3b41f0d191dabdece8f80", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private void resolveProcessor( String proc )         throws Exception", "signatureAfterChange": "     protected void prepareProcessor()         throws TaskException", "diff": ["+    protected void prepareProcessor()", "+        if( m_processorPrepared )", "+        m_processorPrepared = true;", "+", "+        //Note the next line should use the specified Classpath", "+        //and load the class dynaically", "+        m_transformerFactory = TransformerFactory.newInstance();", "+        m_transformerFactory.setErrorListener( new TraxErrorListener( true ) );", "+        //m_transformer.setOutputProperty( OutputKeys.METHOD, m_type );", "+            getLogger().info( \"Loading stylesheet \" + m_stylesheet );", "+            specifyStylesheet();", "+            specifyParams();", "+            final String message = \"Failed to read stylesheet \" + m_stylesheet;", "+            getLogger().info( message );", "-     */", "-    private void resolveProcessor( String proc )", "-        throws Exception", "-    {", "-        if( proc.equals( \"trax\" ) )", "-        {", "-            final Class clazz =", "-                loadClass( \"org.apache.tools.ant.taskdefs.optional.TraXLiaison\" );", "-            m_liaison = (XSLTLiaison)clazz.newInstance();", "-        }", "-        else", "-        {", "-            m_liaison = (XSLTLiaison)loadClass( proc ).newInstance();", "-        }", "-    }"]}]}
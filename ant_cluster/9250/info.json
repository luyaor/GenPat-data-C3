{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ccbed8ad2c639b7de47ba68959d413c9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07c1fc22c295845ce58c3dfad59c2ade", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteJava.java", "commitBeforeChange": "73db4788f651cb51e829b92b92b462b5bfb1f0ee", "commitAfterChange": "6f18050729f77a61ff648cc7b9c102f61fd6c6b0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void execute(Project project) throws BuildException", "signatureAfterChange": "      public void execute(Project project) throws BuildException", "diff": ["+", "+        PrintStream sOut = System.out;", "+        PrintStream sErr = System.err;", "+", "+            }", "+", "+            if (out != null) {", "+                System.setErr(out);", "+                System.setOut(out);", "+            if (out != null) {", "+                System.setOut(sOut);", "+                System.setErr(sErr);", "+                out.close();", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3d09eae651080e6ea8231d06b7e4608", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "49838c297a517c9532c729e2af1e9e461bdd9af1", "commitAfterChange": "059ad359164e376960bc91ee4bce1e47abb3ef45", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void runBuild(ClassLoader systemLoader) throws BuildException", "signatureAfterChange": "     private void runBuild(ClassLoader systemLoader) throws BuildException", "diff": ["-            project.fireBuildStarted();", "-            project.init();", "-            project.setUserProperty(\"ant.version\", getAntVersion());", "-", "-            // set user-define properties", "-            Enumeration e = definedProps.keys();", "-            while (e.hasMoreElements()) {", "-                String arg = (String)e.nextElement();", "-                String value = (String)definedProps.get(arg);", "-                project.setUserProperty(arg, value);", "-            }", "-", "-            project.setUserProperty(\"ant.file\" , buildFile.getAbsolutePath() );", "-", "-            // first use the ProjectHelper to create the project object", "-            // from the given build file.", "+            PrintStream err = System.err;", "+            PrintStream out = System.out;", "+            ", "-                Class.forName(\"javax.xml.parsers.SAXParserFactory\");", "-                ProjectHelper.configureProject(project, buildFile);", "-            } catch (NoClassDefFoundError ncdfe) {", "-                throw new BuildException(\"No JAXP compliant XML parser found. See http://java.sun.com/xml for the\\nreference implementation.\", ncdfe);", "-            } catch (ClassNotFoundException cnfe) {", "-                throw new BuildException(\"No JAXP compliant XML parser found. See http://java.sun.com/xml for the\\nreference implementation.\", cnfe);", "-            } catch (NullPointerException npe) {", "-                throw new BuildException(\"No JAXP compliant XML parser found. See http://java.sun.com/xml for the\\nreference implementation.\", npe);", "-            }", "+                System.setOut(new PrintStream(new DemuxOutputStream(project, false)));", "+                System.setErr(new PrintStream(new DemuxOutputStream(project, true)));", "+                project.fireBuildStarted();", "+                project.init();", "+                project.setUserProperty(\"ant.version\", getAntVersion());", "-            // make sure that we have a target to execute", "-            if (targets.size() == 0) {", "-                targets.addElement(project.getDefaultTarget());", "+                // set user-define properties", "+                Enumeration e = definedProps.keys();", "+                while (e.hasMoreElements()) {", "+                    String arg = (String)e.nextElement();", "+                    String value = (String)definedProps.get(arg);", "+                    project.setUserProperty(arg, value);", "+                }", "+                ", "+                project.setUserProperty(\"ant.file\" , buildFile.getAbsolutePath() );", "+                ", "+                // first use the ProjectHelper to create the project object", "+                // from the given build file.", "+                try {", "+                    Class.forName(\"javax.xml.parsers.SAXParserFactory\");", "+                    ProjectHelper.configureProject(project, buildFile);", "+                } catch (NoClassDefFoundError ncdfe) {", "+                    throw new BuildException(\"No JAXP compliant XML parser found. See http://java.sun.com/xml for the\\nreference implementation.\", ncdfe);", "+                } catch (ClassNotFoundException cnfe) {", "+                    throw new BuildException(\"No JAXP compliant XML parser found. See http://java.sun.com/xml for the\\nreference implementation.\", cnfe);", "+                } catch (NullPointerException npe) {", "+                    throw new BuildException(\"No JAXP compliant XML parser found. See http://java.sun.com/xml for the\\nreference implementation.\", npe);", "+                }", "+                ", "+                // make sure that we have a target to execute", "+                if (targets.size() == 0) {", "+                    targets.addElement(project.getDefaultTarget());", "+                }", "+                ", "+                if (!projectHelp) {", "+                    project.executeTargets(targets);", "+                }", "-", "+            finally {", "+                System.setOut(out);", "+                System.setErr(err);", "+            }", "-                printTargets(project);", "-            } else {", "-                // actually do some work", "-                project.executeTargets(targets);", "+                    printTargets(project);"]}]}
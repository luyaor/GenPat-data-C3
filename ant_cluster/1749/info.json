{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2cda28956732b0943b92604982def954", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27ce641251bd03904119894c1ff902a8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/dotnet/DotnetResource.java", "commitBeforeChange": "c5d224e2fabd860332b84182429505a5f2a2ee54", "commitAfterChange": "6f8402d926c54252e54ac79efa3f5480ab7323c3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public String getCSharpStyleParameter()", "signatureAfterChange": "     public void getParameters(Project p, NetCommand command, boolean csharpStyle)", "diff": ["-    public String getCSharpStyleParameter() {", "-        StringBuffer buffer = new StringBuffer();", "-        buffer.append(isEmbed() ? \"/resource\" : \"/linkresource\");", "-        buffer.append(':');", "-        buffer.append(getFile().toString());", "-        if (getName() != null) {", "-            buffer.append(',');", "-            buffer.append(getName());", "+    public void getParameters(Project p, NetCommand command, boolean csharpStyle) {", "+        checkParameters();", "+        if (hasFilesets()) {", "+            for (Iterator listIter=fileSets.iterator(); listIter.hasNext();) {", "+                FileSet fs=(FileSet)listIter.next();;", "+                String baseDirectory=fs.getDir(p).toString();", "+                String namespace=getNamespace(); // ends with '.' or null", "+                DirectoryScanner ds = fs.getDirectoryScanner(p);", "+                String[] files = ds.getIncludedFiles();", "+                for (int i=0; i<files.length; i++) {", "+                    String file=files[i];", "+                    command.addArgument(getParameter(baseDirectory+File.separatorChar+file, (namespace==null ? null : namespace+file.replace(File.separatorChar, '.')), csharpStyle));", "+                }", "+            }", "-        if (getPublic() != null) {", "-            throw new BuildException(\"This compiler does not support the \"", "-                    + \"public/private option.\");", "+        else {", "+            command.addArgument(getParameter(getFile().toString(), getName(),", "+                                             csharpStyle));", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8c7e1beaac39c78a8858d44900d4d5a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javac.java", "commitBeforeChange": "1fa24dc235453d37357a5ffb190f5a3c15a49295", "commitAfterChange": "bba4624fac50881dcc5e81de48fffe05f92e2116", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 84, "signatureBeforeChange": "      private boolean needsCompilePackageFile(         File file, File srcDir, File destDir)", "signatureAfterChange": "     private void generateMissingPackageInfoClasses() throws IOException", "diff": ["+     */", "+    private void generateMissingPackageInfoClasses() throws IOException {", "+        for (Iterator i = packageInfos.entrySet().iterator(); i.hasNext(); ) {", "+            Map.Entry entry = (Map.Entry) i.next();", "+            String pkg = (String) entry.getKey();", "+            Long sourceLastMod = (Long) entry.getValue();", "+            File pkgBinDir = new File(destDir, pkg.replace('/', File.separatorChar));", "+            pkgBinDir.mkdirs();", "+            File pkgInfoClass = new File(pkgBinDir, \"package-info.class\");", "+            if (pkgInfoClass.isFile() && pkgInfoClass.lastModified() >= sourceLastMod.longValue()) {", "+                continue;", "+            }", "+            log(\"Creating empty \" + pkgInfoClass);", "+            OutputStream os = new FileOutputStream(pkgInfoClass);", "+            try {", "+                os.write(PACKAGE_INFO_CLASS_HEADER);", "+                byte[] name = pkg.getBytes(\"UTF-8\");", "+                int length = name.length + /* \"/package-info\" */ 13;", "+                os.write((byte) length / 256);", "+                os.write((byte) length % 256);", "+                os.write(name);", "+                os.write(PACKAGE_INFO_CLASS_FOOTER);", "+            } finally {", "+                os.close();", "-", "-    private boolean needsCompilePackageFile(", "-        File file, File srcDir, File destDir) {", "-        if (!file.getName().equals(PACKAGE_INFO_JAVA)) {", "-            return true;", "-        }", "-        // return true if destDir contains the file", "-        String rel = FILE_UTILS.removeLeadingPath(srcDir, file);", "-        File destFile = new File(destDir, rel);", "-        File parent = destFile.getParentFile();", "-        destFile = new File(parent, PACKAGE_INFO_CLASS);", "-        File sourceFile = new File(srcDir, rel);", "-        if (destFile.exists()) {", "-            return true;", "-        }", "-        // Dest file does not exist", "-        // Compile Source file if sourceFile is newer that destDir", "-        // TODO - use fs", "-        if (sourceFile.lastModified()", "-            > destFile.getParentFile().lastModified()) {", "-            updateDirList.add(destFile.getParentFile());", "-            return true;", "-        }", "-        return false;", "-    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a6268c4b735cc5174a988eb6b40bc935", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9ce73f82b2414b2835afc1fb950294d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "32c1f6a73f867f491cfaeac14e2ca2aab167f1ec", "commitAfterChange": "8de81028e45c54b750a0024bf64eaa0ea9e369ea", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "     protected void setupJUnitDelegate()", "signatureAfterChange": "     protected void setupJUnitDelegate()", "diff": ["-        ClassLoader myLoader = JUnitTask.class.getClassLoader();", "+        final ClassLoader myLoader = JUnitTask.class.getClassLoader();", "-            Path path = new Path(getProject());", "+            final Path path = new Path(getProject());", "-            mirrorLoader =", "-                new SplitClassLoader(myLoader, path, getProject(),", "+            mirrorLoader = (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {", "+                public Object run() {", "+                    return new SplitClassLoader(myLoader, path, getProject(),", "+                }", "+            });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa8e3463a3ccda65d678a0996f0bc8b1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "fdade0537c4628290168a365b9a14d28c3e32b72", "commitAfterChange": "9af46a2ca05b7e2da738a1688ff679445f2c1a6e", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 38, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+        ClassLoader myLoader = JUnitTask.class.getClassLoader();", "+        ClassLoader mirrorLoader;", "+        if (splitJunit) {", "+            Path path = new Path(getProject());", "+            path.add(antRuntimeClasses);", "+            path.add(getCommandline().getClasspath());", "+            mirrorLoader = new SplitLoader(myLoader, path);", "+        } else {", "+            mirrorLoader = myLoader;", "+        }", "+        delegate = createMirror(this, mirrorLoader);", "+", "+            if (mirrorLoader instanceof SplitLoader) {", "+                ((SplitLoader) mirrorLoader).cleanup();", "+            }", "+            delegate = null;"]}]}
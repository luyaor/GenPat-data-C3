{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "57c6acf4f8564bb45e545e2f23bdd048", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c5bc1f8df9850f98c3aea5e8a50026a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/modules/edit/DependentTargetChooser.java", "commitBeforeChange": "2ff201801b557593afe6cf9dcd4d4c4f4da65b39", "commitAfterChange": "cfa93603e73e635d31be01cdb31dc9959a5ea35c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private JPanel getSelectionPanel()", "signatureAfterChange": "         public int getColumnCount()", "diff": ["-     */", "-    private JPanel getSelectionPanel() {", "-        if (_selectionPanel == null) {", "-            _selectionPanel = new JPanel();", "-            _selectionPanel.setLayout(new GridBagLayout());", "-            ", "-            // LEFT Table", "-            JScrollPane srcSP = new JScrollPane();", "-            srcSP.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);", "-            srcSP.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);", "-            _srcTable = createTargetsTable();", "-            srcSP.setViewportView(_srcTable);", "-            ", "-            GridBagConstraints srcSPConstr = new GridBagConstraints();", "-            srcSPConstr.fill = GridBagConstraints.BOTH;", "-            srcSPConstr.anchor = GridBagConstraints.CENTER;", "-            srcSPConstr.gridx = 0; srcSPConstr.gridy = 0; ", "-            srcSPConstr.weightx = 1.0; srcSPConstr.weighty = 2.0; ", "-            srcSPConstr.gridwidth = 1; srcSPConstr.gridheight = 2;", "-            srcSPConstr.insets = new Insets(5,5,0,5);", "-            _selectionPanel.add(srcSP, srcSPConstr);", "-            ", "-            // Append Button", "-            _append = new JButton();", "-            _append.setIcon(new ImageIcon(getClass().getResource(\"/org/apache/tools/ant/gui/resources/enter.gif\")));", "-            _append.setPreferredSize(new Dimension(28, 28));", "-            _append.setMaximumSize(new Dimension(28, 28));", "-            _append.setMinimumSize(new Dimension(28, 28));", "-            _append.addActionListener(_handler);", "-            ", "-            GridBagConstraints appendConstr = new GridBagConstraints();", "-            appendConstr.fill = GridBagConstraints.NONE;", "-            appendConstr.anchor = GridBagConstraints.SOUTH;", "-            appendConstr.gridx = 1; appendConstr.gridy = 0; ", "-            appendConstr.weightx = 0.0; appendConstr.weighty = 1.0; ", "-            appendConstr.gridwidth = 1; appendConstr.gridheight = 1;", "-            appendConstr.insets = new Insets(0,0,2,0);", "-            _selectionPanel.add(_append, appendConstr);", "-", "-            // Remove Button", "-            _remove = new JButton();", "-            _remove.setIcon(new ImageIcon(getClass().getResource(\"/org/apache/tools/ant/gui/resources/exit.gif\")));", "-            _remove.setPreferredSize(new Dimension(28, 28));", "-            _remove.setMaximumSize(new Dimension(28, 28));", "-            _remove.setMinimumSize(new Dimension(28, 28));", "-            _remove.addActionListener(_handler);", "-            GridBagConstraints removeConstr = new GridBagConstraints();", "-            removeConstr.fill = GridBagConstraints.NONE;", "-            removeConstr.anchor = GridBagConstraints.NORTH;", "-            removeConstr.gridx = 1; removeConstr.gridy = 1; ", "-            removeConstr.weightx = 0.0; removeConstr.weighty = 1.0; ", "-            removeConstr.gridwidth = 1; removeConstr.gridheight = 1;", "-            removeConstr.insets = new Insets(3,0,0,0);", "-            _selectionPanel.add(_remove, removeConstr);", "-            ", "-            // RIGHT Table", "-            JScrollPane dstSP = new JScrollPane();", "-            dstSP.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);", "-            dstSP.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);", "-            _dstTable = createTargetsTable();", "-            dstSP.setViewportView(_dstTable);", "-", "-            GridBagConstraints dstSPConstr = new GridBagConstraints();", "-            dstSPConstr.fill = GridBagConstraints.BOTH;", "-            dstSPConstr.anchor = GridBagConstraints.CENTER;", "-            dstSPConstr.gridx = 2; dstSPConstr.gridy = 0; ", "-            dstSPConstr.weightx = 1.0; dstSPConstr.weighty = 2.0; ", "-            dstSPConstr.gridwidth = 1; dstSPConstr.gridheight = 2;", "-            dstSPConstr.insets = new Insets(5,5,0,5);", "-            _selectionPanel.add(dstSP, dstSPConstr);", "-", "-            // Move Up Button", "-            _moveUp = new JButton();", "-            _moveUp.setIcon(new ImageIcon(getClass().getResource(\"/org/apache/tools/ant/gui/resources/up.gif\")));", "-            _moveUp.setPreferredSize(new Dimension(28, 28));", "-            _moveUp.setMaximumSize(new Dimension(28, 28));", "-            _moveUp.setMinimumSize(new Dimension(28, 28));", "-            _moveUp.addActionListener(_handler);", "-            GridBagConstraints moveUpConstr = new GridBagConstraints();", "-            moveUpConstr.fill = GridBagConstraints.NONE;", "-            moveUpConstr.anchor = GridBagConstraints.CENTER;", "-            moveUpConstr.gridx = 3; moveUpConstr.gridy = 0; ", "-            moveUpConstr.weightx = 0.0; moveUpConstr.weighty = 1.0; ", "-            moveUpConstr.gridwidth = 1; moveUpConstr.gridheight = 1;", "-            moveUpConstr.insets = new Insets(0,0,0,5);", "-            _selectionPanel.add(_moveUp, moveUpConstr);", "-", "-            // Move Up Button", "-            _moveDown = new JButton();", "-            _moveDown.setIcon(new ImageIcon(getClass().getResource(\"/org/apache/tools/ant/gui/resources/down.gif\")));", "-            _moveDown.setPreferredSize(new Dimension(28, 28));", "-            _moveDown.setMaximumSize(new Dimension(28, 28));", "-            _moveDown.setMinimumSize(new Dimension(28, 28));", "-            _moveDown.addActionListener(_handler);", "-            GridBagConstraints moveDownConstr = new GridBagConstraints();", "-            moveDownConstr.fill = GridBagConstraints.NONE;", "-            moveDownConstr.anchor = GridBagConstraints.CENTER;", "-            moveDownConstr.gridx = 3; moveDownConstr.gridy = 1; ", "-            moveDownConstr.weightx = 0.0; moveDownConstr.weighty = 1.0; ", "-            moveDownConstr.gridwidth = 1; moveDownConstr.gridheight = 1;", "-            moveDownConstr.insets = new Insets(0,0,0,5);", "-            _selectionPanel.add(_moveDown, moveDownConstr);", "-        }", "-        return _selectionPanel;", "-    }", "+         */", "+        public int getColumnCount() {", "+            return 3;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec79c995d16648bcb686c502d0880432", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "3ce64dd501a7e5dfd84967399cc4c68c643de810", "commitAfterChange": "b941f2ef443cbbaec2b995b3c34958067c4979c3", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 45, "signatureBeforeChange": "     private ResourceCollection validate()", "signatureAfterChange": "     private void validate()", "diff": ["-     */", "-    private ResourceCollection validate() {", "-", "-        // treat empty nested text as no text", "-        sanitizeText();", "-", "-        // if binary check if incompatible attributes are used", "-        if (binary) {", "-            if (destinationFile == null) {", "-                throw new BuildException(", "-                    \"destfile attribute is required for binary concatenation\");", "-            }", "-            if (textBuffer != null) {", "-                throw new BuildException(", "-                    \"Nested text is incompatible with binary concatenation\");", "-            }", "-            if (encoding != null || outputEncoding != null) {", "-                throw new BuildException(", "-                    \"Seting input or output encoding is incompatible with binary\"", "-                    + \" concatenation\");", "-            }", "-            if (filterChains != null) {", "-                throw new BuildException(", "-                    \"Setting filters is incompatible with binary concatenation\");", "-            }", "-            if (fixLastLine) {", "-                throw new BuildException(", "-                    \"Setting fixlastline is incompatible with binary concatenation\");", "-            }", "-            if (header != null || footer != null) {", "-                throw new BuildException(", "-                    \"Nested header or footer is incompatible with binary concatenation\");", "-            }", "-        }", "-        if (destinationFile != null && outputWriter != null) {", "-            throw new BuildException(", "-                \"Cannot specify both a destination file and an output writer\");", "-        }", "-        // Sanity check our inputs.", "-        if (rc == null && textBuffer == null) {", "-            // Nothing to concatenate!", "-            throw new BuildException(", "-                \"At least one resource must be provided, or some text.\");", "-        }", "-        if (rc != null) {", "-            // If using resources, disallow inline text. This is similar to", "-            // using GNU 'cat' with file arguments -- stdin is simply", "-            // ignored.", "-            if (textBuffer != null) {", "-                throw new BuildException(", "-                    \"Cannot include inline text when using resources.\");", "-            }", "-            Restrict noexistRc = new Restrict();", "-            noexistRc.add(NOT_EXISTS);", "-            noexistRc.add(rc);", "-            for (Iterator i = noexistRc.iterator(); i.hasNext();) {", "-                log(i.next() + \" does not exist.\", Project.MSG_ERR);", "-            }", "-            if (destinationFile != null) {", "-                for (Iterator i = rc.iterator(); i.hasNext();) {", "-                    Object o = i.next();", "-                    if (o instanceof FileResource) {", "-                        File f = ((FileResource) o).getFile();", "-                        if (FILE_UTILS.fileNameEquals(f, destinationFile)) {", "-                            throw new BuildException(\"Input file \\\"\"", "-                                + f + \"\\\" is the same as the output file.\");", "-                        }", "-                    }", "-                }", "-            }", "-            Restrict existRc = new Restrict();", "-            existRc.add(EXISTS);", "-            existRc.add(rc);", "-            boolean outofdate = destinationFile == null || forceOverwrite;", "-            if (!outofdate) {", "-                for (Iterator i = existRc.iterator(); !outofdate && i.hasNext();) {", "-                    Resource r = (Resource) i.next();", "-                    outofdate =", "-                        (r.getLastModified() == 0L", "-                         || r.getLastModified() > destinationFile.lastModified());", "-                }", "-            }", "-            if (!outofdate) {", "-                log(destinationFile + \" is up-to-date.\", Project.MSG_VERBOSE);", "-                return null; // no need to do anything", "-            }", "-            return existRc;", "-        } else {", "-            StringResource s = new StringResource();", "-            s.setProject(getProject());", "-            s.setValue(textBuffer.toString());", "-            return s;", "-        }", "-    }", "+     */", "+    private void validate() {", "+", "+        // treat empty nested text as no text", "+        sanitizeText();", "+", "+        // if binary check if incompatible attributes are used", "+        if (binary) {", "+            if (textBuffer != null) {", "+                throw new BuildException(", "+                    \"Nested text is incompatible with binary concatenation\");", "+            }", "+            if (encoding != null || outputEncoding != null) {", "+                throw new BuildException(", "+                    \"Setting input or output encoding is incompatible with binary\"", "+                    + \" concatenation\");", "+            }", "+            if (filterChains != null) {", "+                throw new BuildException(", "+                    \"Setting filters is incompatible with binary concatenation\");", "+            }", "+            if (fixLastLine) {", "+                throw new BuildException(", "+                    \"Setting fixlastline is incompatible with binary concatenation\");", "+            }", "+            if (header != null || footer != null) {", "+                throw new BuildException(", "+                    \"Nested header or footer is incompatible with binary concatenation\");", "+            }", "+        }", "+        if (destinationFile != null && outputWriter != null) {", "+            throw new BuildException(", "+                \"Cannot specify both a destination file and an output writer\");", "+        }", "+        // Sanity check our inputs.", "+        if (rc == null && textBuffer == null) {", "+            // Nothing to concatenate!", "+            throw new BuildException(", "+                \"At least one resource must be provided, or some text.\");", "+        }", "+        if (rc != null && textBuffer != null) {", "+            // If using resources, disallow inline text. This is similar to", "+            // using GNU 'cat' with file arguments--stdin is simply ignored.", "+            throw new BuildException(", "+                \"Cannot include inline text when using resources.\");", "+        }", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ae393b44132157e69d4fbbb51c0150f8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "120243f6ee551ec9223b7125cf554097", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/taskdefs/optional/net/FTPTest.java", "commitBeforeChange": "53e10e20aac4b698e94c9b2ab2881c9ece495d13", "commitAfterChange": "24f9da26b52d675f4b7c2ab79167a04647e243ee", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 26, "signatureBeforeChange": "      private void compareFiles(FTP.FTPDirectoryScanner ds, String[] expectedFiles,                               String[] expectedDirectories)", "signatureAfterChange": "      private void compareFiles(DirectoryScanner ds, String[] expectedFiles,                               String[] expectedDirectories)", "diff": ["-    private void compareFiles(FTP.FTPDirectoryScanner ds, String[] expectedFiles,", "+    private void compareFiles(DirectoryScanner ds, String[] expectedFiles,", "-        TreeSet files = new TreeSet();", "-            files.add(includedFiles[counter].replace(File.separatorChar, '/'));", "+            includedFiles[counter] = includedFiles[counter].replace(File.separatorChar, '/');", "-        TreeSet directories = new TreeSet();", "+        Arrays.sort(includedFiles);", "-            directories.add(includedDirectories[counter]", "-                            .replace(File.separatorChar, '/'));", "+            includedDirectories[counter] = includedDirectories[counter]", "+                            .replace(File.separatorChar, '/');", "-", "-        String currentfile;", "-        Iterator i = files.iterator();", "-        int counter = 0;", "-        while (i.hasNext()) {", "-            currentfile = (String) i.next();", "-            assertEquals(expectedFiles[counter], currentfile);", "-            counter++;", "+        Arrays.sort(includedDirectories);", "+        for (int counter=0; counter < includedFiles.length; counter++) {", "+            assertEquals(expectedFiles[counter], includedFiles[counter]);", "-        String currentdirectory;", "-        Iterator dirit = directories.iterator();", "-        counter = 0;", "-        while (dirit.hasNext()) {", "-            currentdirectory = (String) dirit.next();", "-            assertEquals(expectedDirectories[counter], currentdirectory);", "+        for (int counter=0; counter < includedDirectories.length; counter++) {", "+            assertEquals(expectedDirectories[counter], includedDirectories[counter]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3806f5297d384c7e60efad68defc53c7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Replace.java", "commitBeforeChange": "9fdb1c85ba0d2fab36ce8f3b0563f393d955ac9d", "commitAfterChange": "a51c373c0fcf539fc8f71b5c21951fa64439d361", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 28, "signatureBeforeChange": "     private void processFile(File src) throws BuildException", "signatureAfterChange": "     private void processFile(File src) throws BuildException", "diff": ["-        Reader reader = null;", "-        Writer writer = null;", "+        FileInput in = null;", "+        FileOutput out = null;", "-            reader = encoding == null ? new FileReader(src)", "-                : new InputStreamReader(new FileInputStream(src), encoding);", "+            in = new FileInput(src);", "-            BufferedReader br = new BufferedReader(reader);", "-", "-            String buf = FileUtils.readFully(br);", "-            br.close();", "-            reader = null;", "-", "-            if (buf == null) {", "-                buf = \"\";", "-            }", "-", "-            StringBuffer buffer = new StringBuffer(buf);", "-            buf = null;", "+            temp = fileUtils.createTempFile(\"rep\", \".tmp\",", "+                    src.getParentFile());", "+            out = new FileOutput(temp);", "-            processReplacefilters(buffer, src.getPath());", "+            out.setInputBuffer(buildFilterChain(in.getOutputBuffer()));", "+", "+            while (in.readChunck()) {", "+                if (processFilterChain()) {", "+                    out.process();", "+                }", "+            }", "+", "+            flushFilterChain();", "+", "+            out.flush();", "+            in.close();", "+            in = null;", "+            out.close();", "+            out = null;", "-                String out = buffer.toString();", "-                temp = fileUtils.createTempFile(\"rep\", \".tmp\",", "-                        src.getParentFile());", "-                temp.deleteOnExit();", "-                writer = encoding == null ? new FileWriter(temp)", "-                        : new OutputStreamWriter(new FileOutputStream(temp), encoding);", "-                BufferedWriter bw = new BufferedWriter(writer);", "-                bw.write(out, 0, out.length());", "-                bw.flush();", "-                bw.close();", "-                writer = null;", "-                ++fileCount;", "-                                    + ioe.getClass().getName() + \":\"", "-                                    + ioe.getMessage(), ioe, getLocation());", "+                    + ioe.getClass().getName() + \":\"", "+                    + ioe.getMessage(), ioe, getLocation());", "-            if (reader != null) {", "+            if (in != null) {", "-                    reader.close();", "+                    in.close();", "-            if (writer != null) {", "+            if (out != null) {", "-                    writer.close();", "+                    out.close();", "-                temp.delete();", "+                if (!temp.delete()) {", "+                    temp.deleteOnExit();", "+                }", "-"]}]}
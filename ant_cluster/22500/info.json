{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "654604dc025bcf3fe3740ad299b5dc0c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08b2f5d423fbcb61b5de0553a9d65585", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/Rpm.java", "commitBeforeChange": "c7dfaa577bd7940283563befa0aacd048f5de4d7", "commitAfterChange": "89d025a11df25e7edd6820ec47cc4859ea7a7ecc", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            streamhandler = new LogStreamHandler(this, Project.MSG_INFO,", "-                                                 Project.MSG_WARN);", "+            if (showoutput) {", "+                streamhandler = new LogStreamHandler(this, Project.MSG_INFO,", "+                                                     Project.MSG_WARN);", "+            } else {", "+                streamhandler = new LogStreamHandler(this, Project.MSG_DEBUG,", "+                                                     Project.MSG_DEBUG);", "+            }", "-            } else {", "+            } else if (showoutput) {", "+            } else {", "+                outputstream = new LogOutputStream(this, Project.MSG_DEBUG);", "-            } else {", "+            } else if (showoutput) {", "+            } else {", "+                errorstream = new LogOutputStream(this, Project.MSG_DEBUG);", "-            if (returncode != 0) {", "-                throw new BuildException(\"'\" +", "-                        toExecute.getExecutable() +", "-                        \"' failed with exit code \"+returncode);", "+            if (Execute.isFailure(returncode)) {", "+                String msg = \"'\" + toExecute.getExecutable() ", "+                    + \"' failed with exit code \" + returncode;", "+                if (failOnError) {", "+                    throw new BuildException(msg);", "+                } else {", "+                    log(msg, Project.MSG_ERR);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1df5ca20879eebe88c3dd57726a0693f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Antlib.java", "commitBeforeChange": "78f58cb78a19e32ae0e77a76aeb578ff3f79c792", "commitAfterChange": "6a02f448306dee5d4d63dbb092c365469420129d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static Antlib createAntlib(Project project, URL antlibUrl,                                       String uri)", "signatureAfterChange": "     public static Antlib createAntlib(Project project, URL antlibUrl,                                       String uri)", "diff": ["-            ProjectHelper2 parser = new ProjectHelper2();", "+            ProjectHelper parser = null;", "+            Object p =", "+                project.getReference(ProjectHelper.PROJECTHELPER_REFERENCE);", "+            if (p instanceof ProjectHelper) {", "+                parser = (ProjectHelper) p;", "+                if (!parser.canParseAntlibDescriptor(antlibUrl)) {", "+                    project.log(\"ProjectHelper class \" + p.getClass().getName()", "+                                + \" can't parse Antlib descriptors, falling back\"", "+                                + \" to ProjectHelper2.\");", "+                    parser = null;", "+                }", "+            }", "+            if (parser == null) {", "+                parser = new ProjectHelper2();", "+            }", "-                parser.parseUnknownElement(project, antlibUrl);", "+                parser.parseAntlibDescriptor(project, antlibUrl);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ea64f4a54c4d5f2c15dbfabf4ebd095", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "7b1b3d16673949d0a108587b653c1a1855def0cb", "commitAfterChange": "7fc0d42636ae70a69d8dc312090c5fe80ae32f0c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public static ProjectHelper getProjectHelper()          throws BuildException", "signatureAfterChange": "     public static ProjectHelper getProjectHelper()          throws BuildException", "diff": ["+        String helperClass = System.getProperty(HELPER_PROPERTY);", "-            String helperClass = System.getProperty(HELPER_PROPERTY);", "-            // It's ok, we'll try next option", "-            ;", "+            System.out.println(\"Unable to load ProjectHelper class \\\"\" ", "+                + helperClass + \" specified in system property \" ", "+                + HELPER_PROPERTY);", "-                ;", "+                System.out.println(\"Unable to load ProjectHelper \" ", "+                    + \"from service \\\"\" + SERVICE_ID); ", "-            // Default", "-            return new ProjectHelperImpl();", "+            try {", "+                // Default", "+                return new ProjectHelperImpl();", "+            } catch (Throwable e) {", "+                String message = \"Unable to load default ProjectHelper due to \"", "+                    + e.getClass().getName() + \": \" + e.getMessage();", "+                throw new BuildException(message, e);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f251ef234ea0e036ddc3571cea75090", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteOn.java", "commitBeforeChange": "3732eb195b3d24d6480a2d7edb2818b325a3e199", "commitAfterChange": "b0507d4451b72856ddca45183143a96493e8ef3e", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 18, "signatureBeforeChange": "      protected void runExec(Execute exe) throws BuildException", "signatureAfterChange": "      protected void runExec(Execute exe) throws BuildException", "diff": ["+", "-                        if (haveExecuted) {", "+", "+                        if (redirectorElement != null) {", "+                            setupRedirector();", "+                            redirectorElement.configure(redirector, s[j]);", "+                        }", "+", "+                        if (redirectorElement != null || haveExecuted) {", "-                            // reading of pipes", "-                            exe.setStreamHandler(createHandler());", "+                            // reading of pipes;", "+                            // go ahead and do it always w/ nested redirectors", "+                            exe.setStreamHandler(redirector.createHandler());", "-                        if (haveExecuted) {", "+", "+                        if (redirectorElement != null) {", "+                            setupRedirector();", "+                            redirectorElement.configure(redirector, s[j]);", "+                        }", "+", "+                        if (redirectorElement != null || haveExecuted) {", "-                            // reading of pipes", "-                            exe.setStreamHandler(createHandler());", "+                            // reading of pipes;", "+                            // go ahead and do it always w/ nested redirectors", "+                            exe.setStreamHandler(redirector.createHandler());", "+            redirector.setAppendProperties(false);", "+            redirector.setProperties();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9062c5899389a55ff71f97b23be8777f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/configuration/DefaultConfigurer.java", "commitBeforeChange": "c6a798ef68e969311121bbe219367ffcc01bc621", "commitAfterChange": "bba92ec2234c85ea1ff3ec3e4e2bb45adaaf3197", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void configure( final Object object,                             final Configuration configuration,                            final Context context )         throws ConfigurationException", "signatureAfterChange": "     public void configure( final Object object,                             final Configuration configuration,                            final Context context )         throws ConfigurationException", "diff": ["+        if( DEBUG )", "+        {", "+            m_logger.debug( \"Configuring \" + object );", "+        }", "+", "+            if( DEBUG ) ", "+            {", "+                m_logger.debug( \"Configuring object via Configurable interface\" );", "+            }", "+", "-            final Iterator attributes = configuration.getAttributeNames();", "+            if( DEBUG ) ", "+            {", "+                m_logger.debug( \"Configuring object via Configurable reflection\" );", "+            }", "+            final Iterator attributes = configuration.getAttributeNames();", "+             ", "+                if( DEBUG ) ", "+                {", "+                    m_logger.debug( \"Configuring attribute name=\" + name +", "+                                    \" value=\" + value );", "+                }", "+                ", "+                ", "+                if( DEBUG ) ", "+                {", "+                    m_logger.debug( \"Configuring subelement name=\" + element.getName() );", "+                }", "+                ", "+                    if( DEBUG ) ", "+                    {", "+                        m_logger.debug( \"Configuring content \" + content );", "+                    }", "+                    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0720511e01d30a1e3ce3b2400f5d1be", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/AbstractSshMessage.java", "commitBeforeChange": "83b7e75aa816063b22de558a2fb64883d977dd47", "commitAfterChange": "4041791887e6e3ee08c82c6e437495cab8762526", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     protected final int trackProgress(int filesize, int totalLength,                                        int percentTransmitted)", "signatureAfterChange": "     protected final int trackProgress(int filesize, int totalLength,                                        int percentTransmitted)", "diff": ["-        int percent = (int) Math.round(Math.floor((totalLength ", "-                                                   / (double)filesize) ", "-                                                  * 100));", "+        int percent = (int) Math.round(Math.floor((totalLength /", "+                                                   (double)filesize) * 100));", "+", "-            if (filesize < 1048576 && (percent % 10 != 0)) {", "-                // do not track between tenths", "+            if (filesize < 1048576) {", "+                if (percent % 10 == 0) {", "+                    if (percent == 100) {", "+                        System.out.println(\" 100%\");", "+                    } else {", "+                        System.out.print(\"*\");", "+                    }", "+                }", "-                log(\"\" + percent + \"%\");", "+                if (percent == 50) {", "+                    System.out.println(\" 50%\");", "+                } else if (percent == 100) {", "+                    System.out.println(\" 100%\");", "+                } else {", "+                    System.out.print(\".\");", "+                }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6d8b9083e47a1b522022e27ba7166d1c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c827ea50fdfed381fcf38d229c322341", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/ConcatTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 22, "signatureBeforeChange": "      public void testTranscoding() throws IOException", "signatureAfterChange": "       @Test     public void testTranscoding() throws IOException", "diff": ["+", "+    @Test", "+    public void testTranscoding() throws IOException {", "+        buildRule.executeTarget(\"testTranscoding\");", "+        File f1 = buildRule.getProject().resolveFile(\"copy/expected/utf-8\");", "+        File f2 = buildRule.getProject().resolveFile(\"concat.utf8\");", "+        assertEquals(f1.toString() + \" differs from \" + f2.toString(),", "+                FileUtilities.getFileContents(f1), FileUtilities.getFileContents(f2));", "-    public void testTranscoding() throws IOException {", "-        executeTarget(\"testTranscoding\");", "-        File f1 = getProject().resolveFile(\"copy/expected/utf-8\");", "-        File f2 = getProject().resolveFile(\"concat.utf8\");", "-        assertTrue(f1.toString() + \" differs from \" + f2.toString(),", "-                FILE_UTILS.contentEquals(f1, f2));", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3b81a0d810ce33c8eb2be309cbc8676", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/filters/ConcatFilterTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "       public void testFilterReaderNoArgs() throws IOException", "signatureAfterChange": "      @Test     public void testFilterReaderNoArgs() throws IOException", "diff": ["-", "+    @Test", "-        executeTarget(\"testFilterReaderNoArgs\");", "-        File expected = new File(getProject().getProperty(\"output\"), \"concatfilter.test\");", "-        File result = new File(getProject().getProperty(\"output\"),  \"concat.FilterReaderNoArgs.test\");", "-        assertTrue(\"testFilterReaderNoArgs: Result not like expected\", FILE_UTILS.contentEquals(expected, result));", "+        buildRule.executeTarget(\"testFilterReaderNoArgs\");", "+        File expected = new File(buildRule.getProject().getProperty(\"output\"), \"concatfilter.test\");", "+        File result = new File(buildRule.getProject().getProperty(\"output\"),  \"concat.FilterReaderNoArgs.test\");", "+        assertEquals(\"testFilterReaderNoArgs: Result not like expected\", FileUtilities.getFileContents(expected),", "+                FileUtilities.getFileContents(result));"]}]}
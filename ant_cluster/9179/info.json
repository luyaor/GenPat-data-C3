{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b4cf626cc3117c1ce93774230bb5a39e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1495a96efbc8b0917c4c5eb70f81cf32", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/frontend/org/apache/ant/cli/Commandline.java", "commitBeforeChange": "752f49d5b18f9743f8e4a6dbdc8065d240d9c97a", "commitAfterChange": "da4e1a3aa99899d6aecc6d14c2a7498fa51647aa", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void determineBuildFile() throws FrontendException", "signatureAfterChange": "     private URL determineBuildFile() throws FrontendException", "diff": ["-    private void determineBuildFile() throws FrontendException {", "-        if (buildFileURL == null) {", "-            File defaultBuildFile", "-                = new File(FrontendUtils.DEFAULT_BUILD_FILENAME);", "-            if (!defaultBuildFile.exists()) {", "-                File ant1BuildFile", "-                    = new File(FrontendUtils.DEFAULT_ANT1_FILENAME);", "-                if (ant1BuildFile.exists()) {", "-                    defaultBuildFile = ant1BuildFile;", "+    private URL determineBuildFile() throws FrontendException {", "+", "+        URL buildSourceURL = null;", "+        try {", "+            if (buildSource == null) {", "+                buildSource = FrontendUtils.DEFAULT_BUILD_FILENAME;", "+                File defaultBuildFile = new File(buildSource);", "+                if (!defaultBuildFile.exists()) {", "+                    String ant1File = FrontendUtils.DEFAULT_ANT1_FILENAME;", "+                    File ant1BuildFile = new File(ant1File);", "+                    if (ant1BuildFile.exists()) {", "+                        buildSource = ant1File;", "+                        defaultBuildFile = ant1BuildFile;", "+                    } else {", "+                        throw new FrontendException(\"No build file \"", "+                             + FrontendUtils.DEFAULT_BUILD_FILENAME + \" or \"", "+                             + FrontendUtils.DEFAULT_ANT1_FILENAME + \" found.\");", "+                    }", "+                }", "+                buildSourceURL = InitUtils.getFileURL(defaultBuildFile);", "+            } else {", "+                // we have been given a file as a string - try to figure out if", "+                // it is a URL or just a file", "+                try {", "+                    buildSourceURL = new URL(buildSource);", "+                } catch (MalformedURLException e) {", "+                    // must be a file", "+                    File buildFile = new File(buildSource);", "+                    if (!buildFile.exists()) {", "+                        throw new FrontendException(\"Cannot find build: \"", "+                             + buildSource);", "+                    }", "+                    buildSourceURL = InitUtils.getFileURL(buildFile);", "-            try {", "-                buildFileURL = InitUtils.getFileURL(defaultBuildFile);", "-            } catch (MalformedURLException e) {", "-                throw new FrontendException(\"Build file is not valid\", e);", "-            }", "+            return buildSourceURL;", "+        } catch (MalformedURLException e) {", "+            throw new FrontendException(\"Build file \" + buildSource", "+                 + \" is not valid\", e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c8ba10ef1df4790415193c7c06ac51c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/condition/IsPingable.java", "commitBeforeChange": "8bb8dce32cd2a9b6751e23dfb43e5f0b9d60a3e5", "commitAfterChange": "f1414a37f28a85a5b7fab5e4019b723c5a3546d2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public boolean eval() throws BuildException", "signatureAfterChange": "     public boolean eval() throws BuildException", "diff": ["-        if (host == null || host.length() == 0) {", "+        if (empty(host) && empty(url)) {", "+        String target = host;", "+        if (!empty(url)) {", "+            if (!empty(host)) {", "+                throw new BuildException(ERROR_BOTH_TARGETS);", "+            }", "+            try {", "+                //get the host of a url", "+                URL realURL = new URL(url);", "+                target = realURL.getHost();", "+            } catch (MalformedURLException e) {", "+                throw new BuildException(\"Bad URL \" + url, e);", "+            }", "+        }", "-            InetAddress address = InetAddress.getByName(host);", "-            return address.isReachable(timeout * 1000);", "+            log(\"Probing host \" + target, Project.MSG_VERBOSE);", "+            InetAddress address = InetAddress.getByName(target);", "+            log(\"Host address =\" + address.getHostAddress(),", "+                    Project.MSG_VERBOSE);", "+            final boolean reachable = address.isReachable(timeout * 1000);", "+            log(\"host is \" + (reachable ? \"\" : \"not\") + \" reachable\",", "+                    Project.MSG_VERBOSE);", "+            return reachable;", "-            log(ERROR_UNKNOWN_HOST + host, Project.MSG_VERBOSE);", "+            log(ERROR_UNKNOWN_HOST + target);", "-            log(ERROR_ON_NETWORK + host + \": \" + e.toString(),", "-                    Project.MSG_VERBOSE);", "+            log(ERROR_ON_NETWORK + target + \": \" + e.toString());"]}]}
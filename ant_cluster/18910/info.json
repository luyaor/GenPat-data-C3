{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "08550d457923d90d0201df7ea534ab52", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58071b7cf89e843a58373ff5583e86f2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Target.java", "commitBeforeChange": "aa5f97f7072daf1b5e7c28a839ae8c12f96955ff", "commitAfterChange": "18681d7fc981b944ed3768a168ddd44898692175", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        if (testIfCondition() && testUnlessCondition()) {", "-            LocalProperties localProperties", "-                = LocalProperties.get(getProject());", "-            localProperties.enterScope();", "-            try {", "-                for (int taskPosition = 0; taskPosition < children.size();", "-                     ++taskPosition) {", "-                    Object o = children.get(taskPosition);", "-                    if (o instanceof Task) {", "-                        Task task = (Task) o;", "-                        task.perform();", "-                    } else {", "-                        ((RuntimeConfigurable) o).maybeConfigure(project);", "-                    }", "-                }", "-            } finally {", "-                localProperties.exitScope();", "-            }", "-        } else if (!testIfCondition()) {", "+        if (!testIfAllows()) {", "-        } else {", "+            return;", "+        }", "+        if (!testUnlessAllows()) {", "+            return;", "+        }", "+        LocalProperties localProperties = LocalProperties.get(getProject());", "+        localProperties.enterScope();", "+        try {", "+            // use index-based approach to avoid ConcurrentModificationExceptions;", "+            // also account for growing target children", "+            for (int i = 0; i < children.size(); i++) {", "+                Object o = children.get(i);", "+                if (o instanceof Task) {", "+                    Task task = (Task) o;", "+                    task.perform();", "+                } else {", "+                    ((RuntimeConfigurable) o).maybeConfigure(project);", "+                }", "+            }", "+        } finally {", "+            localProperties.exitScope();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cde526956891b5f642210e48f60f3c25", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/selectors/ResourceSelectorContainer.java", "commitBeforeChange": "7829faf36a6f4bc565e0e8b92aa85cc948718176", "commitAfterChange": "9caeed5081071d6a2de28844d0a724918f8c6d86", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     protected void dieOnCircularReference(Stack stk, Project p)         throws BuildException", "signatureAfterChange": "     protected void dieOnCircularReference(Stack<Object> stk, Project p)         throws BuildException", "diff": ["-    protected void dieOnCircularReference(Stack stk, Project p)", "+    protected void dieOnCircularReference(Stack<Object> stk, Project p)", "-            for (Iterator i = v.iterator(); i.hasNext();) {", "-                Object o = i.next();", "-                if (o instanceof DataType) {", "-                    pushAndInvokeCircularReferenceCheck((DataType) o, stk, p);", "+            for (ResourceSelector resourceSelector : resourceSelectors) {", "+                if (resourceSelector instanceof DataType) {", "+                    pushAndInvokeCircularReferenceCheck((DataType) resourceSelector, stk, p);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6f417d16b548273956a38ae1e5f9b69", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/BaseResourceCollectionContainer.java", "commitBeforeChange": "7829faf36a6f4bc565e0e8b92aa85cc948718176", "commitAfterChange": "9caeed5081071d6a2de28844d0a724918f8c6d86", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     protected synchronized void dieOnCircularReference(Stack stk, Project p)         throws BuildException", "signatureAfterChange": "     protected synchronized void dieOnCircularReference(Stack<Object> stk, Project p)         throws BuildException", "diff": ["-    protected synchronized void dieOnCircularReference(Stack stk, Project p)", "+    protected synchronized void dieOnCircularReference(Stack<Object> stk, Project p)", "-            for (Iterator i = rc.iterator(); i.hasNext();) {", "-                Object o = i.next();", "-                if (o instanceof DataType) {", "-                    pushAndInvokeCircularReferenceCheck((DataType) o, stk, p);", "+            for (ResourceCollection resourceCollection : rc) {", "+                if (resourceCollection instanceof DataType) {", "+                    pushAndInvokeCircularReferenceCheck((DataType) resourceCollection, stk, p);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6015d115a99bff07ae44c8fd7418c5e2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0af68a90ba1d31be0cafe1c25857beb6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipFile.java", "commitBeforeChange": "2f0ab79127f87f9b769a60af0e3aad9da0bf4734", "commitAfterChange": "3cb22aa1c607dcc42ccdf3249be2c26e3585c6f5", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void populateFromCentralDirectory()         throws IOException", "signatureAfterChange": "     private void populateFromCentralDirectory()         throws IOException", "diff": ["-            off += WORD; // skip version info and general purpose byte", "+            off += SHORT; // skip version info", "+", "+            final int generalPurposeFlag = ZipShort.getValue(cfh, off);", "+            final String entryEncoding = ", "+                (generalPurposeFlag & ZipOutputStream.EFS_FLAG) != 0", "+                ? ZipOutputStream.UTF8", "+                : encoding;", "+", "+            off += SHORT;", "-            ze.setName(getString(fileName));", "-", "+            ze.setName(getString(fileName, entryEncoding));", "-            ze.setComment(getString(comment));", "+            ze.setComment(getString(comment, entryEncoding));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e51557af9d8b369578132b81c70db72c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/taskdefs/JavacTest.java", "commitBeforeChange": "6a2d05b7a8541f09b4ac41d92d54ce3cc80e2036", "commitAfterChange": "55811ba73b5aed3169e1d003a069a4f83f161d1d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void testCompilerAttribute()", "signatureAfterChange": "     public void testCompilerAttribute()", "diff": ["-                   \"modern\".equals(compiler) || \"classic\".equals(compiler));", "+                   \"javac1.1\".equals(compiler) ", "+                   || \"javac1.2\".equals(compiler) ", "+                   || \"javac1.3\".equals(compiler) ", "+                   || \"javac1.4\".equals(compiler) ", "+                   || \"classic\".equals(compiler));", "-        compiler = javac.getCompiler();", "-        assertNotNull(compiler);", "-        assertEquals(\"extJavac\", compiler);", "+        assertNotNull(javac.getCompiler());", "+        assertEquals(\"extJavac\", javac.getCompiler());", "+        assertEquals(compiler, javac.getCompilerVersion());"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4db53067def6ddccfa947c3c074d24a2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a2fa863984e2414093eeb2b3fb8b21b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/taskdefs/Property.java", "commitBeforeChange": "62562693ac733d0697b5a522972f36ea5570225c", "commitAfterChange": "a816a71d9e2587a83890f499dd2cabb7c6e02889", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      protected void loadResource( String name )         throws TaskException", "signatureAfterChange": "      protected void loadResource( String name )         throws TaskException", "diff": ["-            ClassLoader classLoader = null;", "-", "-            if( m_classpath != null )", "-            {", "-                final URL[] urls = PathUtil.toURLs( m_classpath, getContext() );", "-                classLoader = new URLClassLoader( urls );", "-            }", "-            else", "-            {", "-                classLoader = ClassLoader.getSystemClassLoader();", "-            }", "+            final ClassLoader classLoader = PathUtil.createClassLoader( m_classpath, getContext() );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "699d5f3416190d8f33eb258e92425c77", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/core/AbstractAvailableCondition.java", "commitBeforeChange": "62562693ac733d0697b5a522972f36ea5570225c", "commitAfterChange": "a816a71d9e2587a83890f499dd2cabb7c6e02889", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected ClassLoader buildClassLoader( final TaskContext context ) throws TaskException", "signatureAfterChange": "     protected ClassLoader buildClassLoader( final TaskContext context ) throws TaskException", "diff": ["-        final URL[] urls = PathUtil.toURLs( m_classpath, context );", "-        final ClassLoader classLoader;", "-        if( urls.length > 0 )", "-        {", "-            classLoader = new URLClassLoader( urls );", "-        }", "-        else", "-        {", "-            // TODO - using system classloader is kinda useless now, because", "-            // the system classpath contains almost nothing.  Should be using", "-            // the 'common' classloader instead", "-            classLoader = ClassLoader.getSystemClassLoader();", "-        }", "-        return classLoader;", "+        return PathUtil.createClassLoader( m_classpath, context );"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8fdfa1022cc0e24ccfafd278b6b5f9b6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ef7aa48aeb25e4ea2f584760587305e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/Archives.java", "commitBeforeChange": "bd7585adb01844d04d23a6b1707427f9f4a490ad", "commitAfterChange": "ea33301047ba2de74fa062155df4d6337e5d1392", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     protected Iterator grabArchives()", "signatureAfterChange": "     protected Iterator<ArchiveFileSet> grabArchives()", "diff": ["-    protected Iterator/*<ArchiveFileset>*/ grabArchives() {", "-        List l = new LinkedList();", "-        for (Iterator iter = zips.iterator(); iter.hasNext(); ) {", "-            l.add(configureArchive(new ZipFileSet(),", "-                                   (Resource) iter.next()));", "+    protected Iterator<ArchiveFileSet> grabArchives() {", "+        List<ArchiveFileSet> l = new LinkedList<ArchiveFileSet>();", "+        for (Resource r : zips) {", "+            l.add(configureArchive(new ZipFileSet(), r));", "-        for (Iterator iter = tars.iterator(); iter.hasNext(); ) {", "-            l.add(configureArchive(new TarFileSet(),", "-                                   (Resource) iter.next()));", "+        for (Resource r : tars) {", "+            l.add(configureArchive(new TarFileSet(), r));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "447dab177dd3d643ecc8851cc30c7a78", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/main/org/apache/ant/core/execution/ExecutionFrame.java", "commitBeforeChange": "a48208f6cf8cf80ef1e144305ff8dfe0958599d5", "commitAfterChange": "c2e518039b65dc5b8c9c31f9f78b2d72ea8db2d1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private void setupConverters(Map converterDefs) throws ConfigException", "signatureAfterChange": "     public void addConverterDefinition(ConverterDefinition converterDef) throws ConfigException", "diff": ["+     */", "+    public void addConverterDefinition(ConverterDefinition converterDef) throws ConfigException {", "+        boolean targetLoaded = false;", "+        try {", "+            Class targetClass = converterDef.getTargetClass();", "+            targetLoaded = false;", "+            Class converterClass = converterDef.getConverterClass();", "+            Converter converter = (AntConverter)converterClass.newInstance();", "+            if (converter instanceof AntConverter) {", "+                ((AntConverter)converter).init(this);", "+            }", "+            converters.put(targetClass, converter);", "+        }", "+        catch (ClassNotFoundException e) {", "+            if (targetLoaded) {", "+                throw new ConfigException(\"Unable to load converter class for \" ", "+                                          + converterDef.getConverterClassName()", "+                                          + \" in converter from \" + converterDef.getLibraryURL(),", "+                                          e);", "+            }", "+            else {", "+                throw new ConfigException(\"Unable to load target class \" ", "+                                          + converterDef.getTargetClassName()", "+                                          + \" in converter from \" + converterDef.getLibraryURL(),", "+                                          e);", "+            }", "+        }", "+        catch (InstantiationException e) {", "+            throw new ConfigException(\"Unable to instantiate converter class \" ", "+                                      + converterDef.getTargetClassName()", "+                                      + \" in converter from \" + converterDef.getLibraryURL(),", "+                                      e);", "+        }", "+        catch (IllegalAccessException e) {", "+            throw new ConfigException(\"Unable to access converter class \" ", "+                                      + converterDef.getTargetClassName()", "+                                      + \" in converter from \" + converterDef.getLibraryURL(),", "+                                      e);", "+        }", "+    }", "-    private void setupConverters(Map converterDefs) throws ConfigException {", "-        converters = new HashMap();", "-        for (Iterator i = converterDefs.values().iterator(); i.hasNext(); ) {", "-            ConverterDefinition converterDef = (ConverterDefinition)i.next();", "-            boolean targetLoaded = false;", "-            try {", "-                Class targetClass = converterDef.getTargetClass();", "-                targetLoaded = false;", "-                Class converterClass = converterDef.getConverterClass();", "-                Converter converter = (AntConverter)converterClass.newInstance();", "-                if (converter instanceof AntConverter) {", "-                    ((AntConverter)converter).init(this);", "-                }", "-                converters.put(targetClass, converter);", "-            }", "-            catch (ClassNotFoundException e) {", "-                if (targetLoaded) {", "-                    throw new ConfigException(\"Unable to load converter class for \" ", "-                                              + converterDef.getConverterClassName()", "-                                              + \" in converter from \" + converterDef.getLibraryURL()", "-                                              , e);", "-                }", "-                else {", "-                    throw new ConfigException(\"Unable to load target class \" ", "-                                              + converterDef.getTargetClassName()", "-                                              + \" in converter from \" + converterDef.getLibraryURL()", "-                                              , e);", "-                }", "-            }", "-            catch (InstantiationException e) {", "-                throw new ConfigException(\"Unable to instantiate converter class \" ", "-                                          + converterDef.getTargetClassName()", "-                                          + \" in converter from \" + converterDef.getLibraryURL()", "-                                          , e);", "-            }", "-            catch (IllegalAccessException e) {", "-                throw new ConfigException(\"Unable to access converter class \" ", "-                                          + converterDef.getTargetClassName()", "-                                          + \" in converter from \" + converterDef.getLibraryURL()", "-                                          , e);", "-            }", "-        }", "-    }"]}]}
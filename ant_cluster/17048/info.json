{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "230f11b379d3341d4cb980bcba258525", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50732d8712b4379cb9a3d214ad6d83bb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/selectors/SelectorUtils.java", "commitBeforeChange": "3def9c5ed8dd13b7caf924d25dcd230391b17da6", "commitAfterChange": "2b925503d71972d8b782eedd6cdf75711377d7b0", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     public static String rtrimWildcardTokens(String input)", "signatureAfterChange": "     public static String rtrimWildcardTokens(String input)", "diff": ["-        String[] tokens = tokenizePathAsArray(input);", "-        StringBuffer sb = new StringBuffer();", "-        for (int i = 0; i < tokens.length; i++) {", "-            if (hasWildcards(tokens[i])) {", "-                break;", "-            }", "-            if (i > 0 && sb.charAt(sb.length() - 1) != File.separatorChar) {", "-                sb.append(File.separator);", "-            }", "-            sb.append(tokens[i]);", "-        }", "-        return sb.toString();", "+        return new TokenizedPattern(input).rtrimWildcardTokens().toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a057b46f9eee34a0dcf61d15e8b9b0d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/selectors/SelectorUtils.java", "commitBeforeChange": "6c024b2bd295de1783d9b6c34d3a5d03c2f0cd41", "commitAfterChange": "19397fb959cb8afa2a87b3e68eaf23994384aab4", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public static String rtrimWildcardTokens(String input)", "signatureAfterChange": "     public static String rtrimWildcardTokens(String input)", "diff": ["-        Vector v = tokenizePath(input, File.separator);", "+        String[] tokens = tokenizePathAsArray(input);", "-        for (int counter = 0; counter < v.size(); counter++) {", "-            if (hasWildcards((String) v.elementAt(counter))) {", "+        for (int i = 0; i < tokens.length; i++) {", "+            if (hasWildcards(tokens[i])) {", "-            if (counter > 0 && sb.charAt(sb.length() - 1) != File.separatorChar) {", "+            if (i > 0 && sb.charAt(sb.length() - 1) != File.separatorChar) {", "-            sb.append((String) v.elementAt(counter));", "+            sb.append(tokens[i]);"]}]}
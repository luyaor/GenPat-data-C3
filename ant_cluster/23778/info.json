{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea52d7c42d0786776f5bc321a75503e5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15dd1c8e089812206c4d71ba4cbe0b09", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "32f323668f263fad0bc38a43c6d4e6a1f4579c8a", "commitAfterChange": "a920aa9f305e0f998c908798c99b6d108f5d4a58", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void checkAttributes()", "signatureAfterChange": "     private void checkAttributes()", "diff": ["-        if (source == null) {", "-            throw new BuildException(\"src attribute is required\", getLocation());", "+        if (sources.size() == 0) {", "+            throw new BuildException(\"at least one source is required\",", "+                                     getLocation());", "+        }", "+        for (Iterator iter = sources.iterator(); iter.hasNext(); ) {", "+            Object up = ((Resource) iter.next()).as(URLProvider.class);", "+            if (up == null) {", "+                throw new BuildException(\"Only URLProvider resources are\"", "+                                         + \" supported\", getLocation());", "+            }", "-        if (dest == null) {", "+        if (destination == null) {", "-        if (dest.exists() && dest.isDirectory()) {", "-            throw new BuildException(\"The specified destination is a directory\",", "-                    getLocation());", "+        if (destination.exists() && sources.size() > 1", "+            && !destination.isDirectory()) {", "+            throw new BuildException(\"The specified destination is not a\"", "+                                     + \" directory\",", "+                                     getLocation());", "-        if (dest.exists() && !dest.canWrite()) {", "-            throw new BuildException(\"Can't write to \" + dest.getAbsolutePath(),", "-                    getLocation());", "+        if (destination.exists() && !destination.canWrite()) {", "+            throw new BuildException(\"Can't write to \"", "+                                     + destination.getAbsolutePath(),", "+                                     getLocation());", "+        }", "+", "+        if (sources.size() > 1 && !destination.exists()) {", "+            destination.mkdirs();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38076ecebba08e91f575c4c00ff17a6c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "37ed344b385cde54ee62f2e66d347cb243dd6708", "commitAfterChange": "33107ab10098823c23924741100a6c3faf9fd267", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        if (srcFile == null && sqlCommand.length() == 0) {", "-            throw new BuildException(\"Source file or sql statement must be set!\", location);", "+        if (srcFile == null && sqlCommand.length() == 0) { ", "+            if (transactions.size() == 0) {", "+                throw new BuildException(\"Source file, transactions or sql statement must be set!\", location);", "+            }", "+        } else {", "+            // Make a transaction group for the outer command", "+            Transaction t = createTransaction();", "+            t.setSrc(srcFile);", "+            t.addText(sqlCommand);", "+", "+            if (!isValidRdbms(conn)) return;", "+", "-            if (sqlCommand.length() != 0) {", "-                runStatements(new StringReader(sqlCommand));", "-            }", "-            ", "-            if (srcFile != null) {", "-                runStatements(new FileReader(srcFile));", "-            }", "-", "-            if (!autocommit) {", "-                conn.commit();", "+            // Process all transactions", "+            for (Enumeration e = transactions.elements(); ", "+                 e.hasMoreElements();) {", "+                ((Transaction) e.nextElement()).runTransaction();", "+                if (!autocommit) {", "+                    log(\"Commiting transaction\", Project.MSG_VERBOSE);", "+                    conn.commit();", "+                }", "-            if (!autocommit && conn != null) {", "+            if (!autocommit && conn != null && onError.equals(\"abort\")) {", "-            if (!autocommit && conn != null) {", "+            if (!autocommit && conn != null && onError.equals(\"abort\")) {", "-        log(\"SQL statements executed successfully\", Project.MSG_VERBOSE);", "+        log(goodSql + \" of \" + totalSql + ", "+            \" SQL statements executed successfully\");"]}]}
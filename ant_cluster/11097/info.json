{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9f1457ad64ec00e9e36a0a82522c9352", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "776f8f55a1223d1f06bcfc1abb7c2eed", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/test/org/apache/myrmidon/components/configurer/DefaultConfigurerTest.java", "commitBeforeChange": "d957fa1151163d513197a174a098e2aac8745b1e", "commitAfterChange": "87ceed8170a6359ac2c4714b6ad22c55d2b1f571", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected void setUp() throws Exception", "signatureAfterChange": "     protected void setUp() throws Exception", "diff": ["-        final Priority priority = Priority.DEBUG;", "-        final org.apache.log.Logger targetLogger = Hierarchy.getDefaultHierarchy().getLoggerFor( \"myrmidon\" );", "-", "-        final PatternFormatter formatter = new PatternFormatter( PATTERN );", "-        final StreamTarget target = new StreamTarget( System.out, formatter );", "-        targetLogger.setLogTargets( new LogTarget[]{target} );", "-", "-        targetLogger.setPriority( priority );", "-", "-        // Create the logger", "-        m_logger = new LogKitLogger( targetLogger );", "-", "-        // Create the components", "-        m_componentManager = new DefaultComponentManager();", "-        List components = new ArrayList();", "-", "-        Component component = new DefaultMasterConverter();", "-        m_componentManager.put( MasterConverter.ROLE, component );", "-        components.add( component );", "-", "-        component = new DefaultConverterRegistry();", "-        m_componentManager.put( ConverterRegistry.ROLE, component );", "-        components.add( component );", "-", "-        component = new DefaultTypeManager();", "-        m_componentManager.put( TypeManager.ROLE, component );", "-        components.add( component );", "-", "-        component = new DefaultConfigurer();", "-        m_componentManager.put( Configurer.ROLE, component );", "-        components.add( component );", "-", "-        // Setup a context", "-        m_context = new DefaultTaskContext();", "-        components.add( m_context );", "-", "-        // Log enable the components", "-        for( Iterator iterator = components.iterator(); iterator.hasNext(); )", "-        {", "-            Object obj = iterator.next();", "-            if( obj instanceof LogEnabled )", "-            {", "-                final LogEnabled logEnabled = (LogEnabled)obj;", "-                logEnabled.enableLogging( m_logger );", "-            }", "-        }", "-", "-        // Compose the components", "-        for( Iterator iterator = components.iterator(); iterator.hasNext(); )", "-        {", "-            Object obj = iterator.next();", "-            if( obj instanceof Composable )", "-            {", "-                final Composable composable = (Composable)obj;", "-                composable.compose( m_componentManager );", "-            }", "-        }", "-", "-        // Configure the context", "-        final File baseDir = new File( \".\" ).getAbsoluteFile();", "-        m_context.setProperty( TaskContext.BASE_DIRECTORY, baseDir );", "+        super.setUp();", "-        m_configurer = (Configurer)m_componentManager.lookup( Configurer.ROLE );", "+        m_configurer = (Configurer)getComponentManager().lookup( Configurer.ROLE );", "-        // Find the typeManager", "-        m_typeManager = (TypeManager)m_componentManager.lookup( TypeManager.ROLE );", "+        // Setup a context", "+        m_context = new DefaultTaskContext( getComponentManager() );", "+        final File baseDir = new File( \".\" ).getAbsoluteFile();", "+        m_context.setProperty( TaskContext.BASE_DIRECTORY, baseDir );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb3fbe93c5eb6ba51d7f0c9c9cb9e057", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/testcases/org/apache/myrmidon/components/configurer/DefaultConfigurerTest.java", "commitBeforeChange": "d957fa1151163d513197a174a098e2aac8745b1e", "commitAfterChange": "87ceed8170a6359ac2c4714b6ad22c55d2b1f571", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected void setUp() throws Exception", "signatureAfterChange": "     protected void setUp() throws Exception", "diff": ["-        final Priority priority = Priority.DEBUG;", "-        final org.apache.log.Logger targetLogger = Hierarchy.getDefaultHierarchy().getLoggerFor( \"myrmidon\" );", "-", "-        final PatternFormatter formatter = new PatternFormatter( PATTERN );", "-        final StreamTarget target = new StreamTarget( System.out, formatter );", "-        targetLogger.setLogTargets( new LogTarget[]{target} );", "-", "-        targetLogger.setPriority( priority );", "-", "-        // Create the logger", "-        m_logger = new LogKitLogger( targetLogger );", "-", "-        // Create the components", "-        m_componentManager = new DefaultComponentManager();", "-        List components = new ArrayList();", "-", "-        Component component = new DefaultMasterConverter();", "-        m_componentManager.put( MasterConverter.ROLE, component );", "-        components.add( component );", "-", "-        component = new DefaultConverterRegistry();", "-        m_componentManager.put( ConverterRegistry.ROLE, component );", "-        components.add( component );", "-", "-        component = new DefaultTypeManager();", "-        m_componentManager.put( TypeManager.ROLE, component );", "-        components.add( component );", "-", "-        component = new DefaultConfigurer();", "-        m_componentManager.put( Configurer.ROLE, component );", "-        components.add( component );", "-", "-        // Setup a context", "-        m_context = new DefaultTaskContext();", "-        components.add( m_context );", "-", "-        // Log enable the components", "-        for( Iterator iterator = components.iterator(); iterator.hasNext(); )", "-        {", "-            Object obj = iterator.next();", "-            if( obj instanceof LogEnabled )", "-            {", "-                final LogEnabled logEnabled = (LogEnabled)obj;", "-                logEnabled.enableLogging( m_logger );", "-            }", "-        }", "-", "-        // Compose the components", "-        for( Iterator iterator = components.iterator(); iterator.hasNext(); )", "-        {", "-            Object obj = iterator.next();", "-            if( obj instanceof Composable )", "-            {", "-                final Composable composable = (Composable)obj;", "-                composable.compose( m_componentManager );", "-            }", "-        }", "-", "-        // Configure the context", "-        final File baseDir = new File( \".\" ).getAbsoluteFile();", "-        m_context.setProperty( TaskContext.BASE_DIRECTORY, baseDir );", "+        super.setUp();", "-        m_configurer = (Configurer)m_componentManager.lookup( Configurer.ROLE );", "+        m_configurer = (Configurer)getComponentManager().lookup( Configurer.ROLE );", "-        // Find the typeManager", "-        m_typeManager = (TypeManager)m_componentManager.lookup( TypeManager.ROLE );", "+        // Setup a context", "+        m_context = new DefaultTaskContext( getComponentManager() );", "+        final File baseDir = new File( \".\" ).getAbsoluteFile();", "+        m_context.setProperty( TaskContext.BASE_DIRECTORY, baseDir );"]}]}
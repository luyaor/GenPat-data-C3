{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b28388e72f399c01a45b6b39c95b3662", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f24c0f7a91d2e30bea35b89dd580d38", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Property.java", "commitBeforeChange": "be12707c63314ce0314959ff551e37fe59b83943", "commitAfterChange": "4f3e4e1690289144b15872597586ed34ae92efb5", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "      private void resolveAllProperties(Hashtable props)", "signatureAfterChange": "      private void resolveAllProperties(Properties props) throws BuildException", "diff": ["-    private void resolveAllProperties(Hashtable props) {", "-        Hashtable unresolvableProperties = new Hashtable();", "-        for (Enumeration e = props.keys(); e.hasMoreElements(); ) {", "-            String name = (String) e.nextElement();", "-            String value = (String) props.get(name);", "+    private void resolveAllProperties(Properties props) throws BuildException {", "+        for (Enumeration e = props.keys(); e.hasMoreElements();) {", "+            String name = (String)e.nextElement();", "+            String value = props.getProperty(name);", "-            while (!resolved) { ", "-                Vector propsInValue = new Vector();", "-    ", "-                // assume it will be resolved", "+            while (!resolved) {", "+                Vector fragments = new Vector();", "+                Vector propertyRefs = new Vector();", "+                ProjectHelper.parsePropertyString(value, fragments, propertyRefs);", "+                ", "-                boolean unresolvable = false;", "-                if (extractProperties(value, propsInValue)) {", "-                    for (int i=0; i < propsInValue.size(); i++) {", "-                        String elem = (String) propsInValue.elementAt(i);", "-                        if (elem.equals(name) || unresolvableProperties.containsKey(elem)) {", "-                            // we won't try further resolving elements with circular ", "-                            // property dependencies or dependencies on unresolvable elements", "-                            unresolvable = true;", "-                            break;", "+                if (propertyRefs.size() != 0) {", "+                    StringBuffer sb = new StringBuffer();", "+                    Enumeration i = fragments.elements();", "+                    Enumeration j = propertyRefs.elements();", "+                    while (i.hasMoreElements()) {", "+                        String fragment = (String)i.nextElement();", "+                        if (fragment == null) {", "+                            String propertyName = (String)j.nextElement();", "+                            if (propertyName.equals(name)) {", "+                                throw new BuildException(\"Property \" + name + \" was circularly defined.\");", "+                            }", "+                            if (props.containsKey(propertyName)) {", "+                                fragment = props.getProperty(propertyName);", "+                                resolved = false;", "+                            }", "+                            else {", "+                                fragment = \"${\" + propertyName + \"}\";", "+                            }", "-                        ", "-                        if (project.getProperties().containsKey(elem) ||", "-                            props.containsKey(elem)) {", "-                            resolved = false;", "-                        }", "+                        sb.append(fragment);", "-                }", "-    ", "-                if (unresolvable) {", "-                    unresolvableProperties.put(name, value);", "-                    resolved = true;", "-                }", "-    ", "-                if (!resolved) {", "-                    value = ProjectHelper.replaceProperties(project, value,", "-                                                               project.getProperties());", "-                    value = ProjectHelper.replaceProperties(project, value, props);", "+                    value = sb.toString();", "-                }    ", "+                }", "-    }", "+    }    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6306afd6535582f9c829cc2b10ee94a3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Property.java", "commitBeforeChange": "f8a23baad2241604df68395c356ccca4c6fb8e28", "commitAfterChange": "089d421c3f3b9d5ebaaa4642da9d70958dae1007", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      private void resolveAllProperties(Hashtable props)", "signatureAfterChange": "      private void resolveAllProperties(Hashtable props)", "diff": ["-        Hashtable toResolve = new Hashtable();", "-        Enumeration e = props.keys();", "-        boolean more = true;", "-        ", "-        while (more) {", "-            while (e.hasMoreElements()) {", "-                Vector propsInValue = new Vector();", "-                String name = (String) e.nextElement();", "-                String value = (String) props.get(name);", "+        Hashtable unresolvableProperties = new Hashtable();", "+        for (Enumeration e = props.keys(); e.hasMoreElements(); ) {", "+            String name = (String) e.nextElement();", "+            String value = (String) props.get(name);", "+            boolean resolved = false;", "+            while (!resolved) { ", "+                Vector propsInValue = new Vector();", "+    ", "+                // assume it will be resolved", "+                resolved = true;", "+                boolean unresolvable = false;", "+                        if (elem.equals(name) || unresolvableProperties.containsKey(elem)) {", "+                            // we won't try further resolving elements with circular ", "+                            // property dependencies or dependencies on unresolvable elements", "+                            unresolvable = true;", "+                            break;", "+                        }", "+                        ", "-                            toResolve.put(name, value);", "-                            break;", "+                            resolved = false;", "-", "-                if (toResolve.size() > 0) {", "-                    Enumeration tre = toResolve.keys();", "-                    while (tre.hasMoreElements()) {", "-                        String name2 = (String) tre.nextElement();", "-                        String value2 = (String) toResolve.get(name2);", "-                        String v = ProjectHelper.replaceProperties(value2,", "-                                                                   project.getProperties());", "-                        v = ProjectHelper.replaceProperties(v, props);", "-                        props.put(name, v);", "-                    }", "-", "-                    toResolve.clear();", "-                    e = props.keys();", "-                } else {", "-                    more = false;", "+    ", "+                if (unresolvable) {", "+                    unresolvableProperties.put(name, value);", "+                    resolved = true;", "+    ", "+                if (!resolved) {", "+                    value = ProjectHelper.replaceProperties(value,", "+                                                               project.getProperties());", "+                    value = ProjectHelper.replaceProperties(value, props);", "+                    props.put(name, value);", "+                }    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84ab8ef6ed9ec3bf357c51721d88e443", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/PropertyFile.java", "commitBeforeChange": "62f2142b3431002933bf1281d244c164ed962890", "commitAfterChange": "6cbeee38fa5502baa5d75036ad2c0418cf808d56", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "         private void executeInteger(String oldValue) throws BuildException", "signatureAfterChange": "         private void executeInteger(String oldValue) throws BuildException", "diff": ["-            int value = 0;          // the value given in the 'value' attr", "-            int newValue  = 0;      // the new value, after the operation", "-            int oldIntValue  = 0;   // the old value from the prop file", "+            int currentValue = DEFAULT_INT_VALUE;", "+            int newValue  = DEFAULT_INT_VALUE;", "-            DecimalFormat fmt = (m_pattern != null) ? new DecimalFormat(m_pattern)", "+", "+            DecimalFormat fmt = (pattern != null) ? new DecimalFormat(pattern)", "-", "-            if (oldValue != null) {", "-                try {", "-                    oldIntValue = fmt.parse(oldValue).intValue();", "-                }", "-                catch (NumberFormatException nfe) { /* swollow */ }", "-                catch (ParseException pe)  { /* swollow */ }", "+            try {", "+                currentValue = fmt.parse(getCurrentValue(oldValue)).intValue();", "-            if (m_value != null) {", "-                try {", "-                    value = fmt.parse(m_value).intValue();", "-                }", "-                catch (NumberFormatException nfe) { /* swollow */ }", "-                catch (ParseException pe)  { /* swollow */ }", "+            catch (NumberFormatException nfe) { /* swollow */ }", "+            catch (ParseException pe)  { /* swollow */ }", "+            ", "+            if (operation == Operation.EQUALS_OPER) {", "+                newValue = currentValue;", "-            if (m_default != null && oldValue == null) {", "+            else {", "+                int operationValue = 1;", "-                    oldIntValue = fmt.parse(m_default).intValue();", "+                    operationValue = fmt.parse(value).intValue();", "+                ", "+                if (operation == Operation.INCREMENT_OPER) {", "+                    newValue = currentValue + operationValue;", "+                }", "+                else if (operation == Operation.DECREMENT_OPER) {", "+                    newValue = currentValue - operationValue;", "+                }", "-            if (m_operation == Operation.EQUALS_OPER) {", "-                newValue = oldIntValue;", "-            }", "-            else if (m_operation == Operation.INCREMENT_OPER) {", "-                if (m_value == \"\") {", "-                    // No value attr was given, so just increment the", "-                    // old value from the prop file (0 by assignment above,", "-                    // if none).", "-                    newValue = ++oldIntValue;", "-                } else {", "-                    // A value attr was given, so add the old value from", "-                    // the prop file (0, if none) to the specified value.", "-                    newValue = (oldIntValue + value) ;", "-                }", "-            }", "-            else if (m_operation == Operation.DECREMENT_OPER) {", "-                if (m_value == \"\") {", "-                    // No value attr was given, so just decrement the", "-                    // old value from the prop file (0 by assignment above,", "-                    // if none).", "-                    newValue = --oldIntValue;", "-                } else {", "-                    // A value attr was given, so subtract from the", "-                    // old value from the prop file (0, if none) the", "-                    // specified value.", "-                    newValue = (oldIntValue - value);", "-                }", "-            }", "-            m_value = fmt.format(newValue);", "+            value = fmt.format(newValue);"]}]}
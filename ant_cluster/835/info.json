{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cb8a5ef82e83e6d8c2fee60b9389c71c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cd1f54b27524fd53392e8d5afb08c3e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "12df7ec426adb3e47cfb0d268d9b646769e38ac7", "commitAfterChange": "152be14c152edab99f90e8c71f589a6bf8087bbe", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "     protected void checkConfiguration() throws BuildException", "signatureAfterChange": "     protected void checkConfiguration() throws BuildException", "diff": ["-            throw new BuildException(\"listing attribute must be set for list action!\");", "+            throw new BuildException(\"listing attribute must be set for list \"", "+                                     + \"action!\");", "-            throw new BuildException(\"remotedir attribute must be set for mkdir action!\");", "+            throw new BuildException(\"remotedir attribute must be set for \"", "+                                     + \"mkdir action!\");", "-            throw new BuildException(\"chmod attribute must be set for chmod action!\");", "+            throw new BuildException(\"chmod attribute must be set for chmod \"", "+                                     + \"action!\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b581464fe6afb16d60f232478894b06", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Checksum.java", "commitBeforeChange": "03d0b81deb49fb4b6b87fa7dd648daf8f3bcbf4b", "commitAfterChange": "80080d456c543d039426db35bcf35d90694bbd96", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private boolean validateAndExecute() throws BuildException", "signatureAfterChange": "     private boolean validateAndExecute() throws BuildException", "diff": ["-                    throw new BuildException(", "-                        \"Multiple files cannot be used when Property is specified\");", "+                    throw new BuildException(\"Multiple files cannot be used \" ", "+                        + \"when Property is specified\");", "-                    throw new BuildException(", "-                        \"Multiple files cannot be used when Property is specified\");", "+                    throw new BuildException(\"Multiple files cannot be used \" ", "+                        + \"when Property is specified\");", "-            throw new BuildException(", "-                \"ForceOverwrite cannot be used when conditions are being used.\");", "+            throw new BuildException(\"ForceOverwrite cannot be used when \" ", "+                + \"conditions are being used.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20ad6125644e0f2a679c728b7e2ec0a7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java", "commitBeforeChange": "d91fdceaa60b70502667049c3156197ab14908f0", "commitAfterChange": "d95bfb6e605b1eefc16889b9dfdf081072c82e51", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected Commandline setupJavacCommandlineSwitches(Commandline cmd,                                                         boolean useDebugLevel)", "signatureAfterChange": "     protected Commandline setupJavacCommandlineSwitches(Commandline cmd,                                                         boolean useDebugLevel)", "diff": ["-                attributes.log(\"Since fork is false, ignoring memoryInitialSize setting.\",", "+                attributes.log(\"Since fork is false, ignoring \"", "+                               + \"memoryInitialSize setting.\", ", "-                cmd.createArgument().setValue(memoryParameterPrefix+\"ms\"+memoryInitialSize);", "+                cmd.createArgument().setValue(memoryParameterPrefix", "+                                              + \"ms\" + memoryInitialSize);", "-                attributes.log(\"Since fork is false, ignoring memoryMaximumSize setting.\",", "+                attributes.log(\"Since fork is false, ignoring \"", "+                               + \"memoryMaximumSize setting.\",", "-                cmd.createArgument().setValue(memoryParameterPrefix+\"mx\"+memoryMaximumSize);", "+                cmd.createArgument().setValue(memoryParameterPrefix", "+                                              + \"mx\" + memoryMaximumSize);", "-            // If the buildfile specifies sourcepath=\"\", then don't output any sourcepath.", "+            // If the buildfile specifies sourcepath=\"\", then don't", "+            // output any sourcepath.", "-                attributes.log(\"depend attribute is not supported by the modern compiler\",", "-                    Project.MSG_WARN);", "+                attributes.log(\"depend attribute is not supported by the \"", "+                               + \"modern compiler\", Project.MSG_WARN);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29df29116f7fbdce423b8cb4047aaea1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Property.java", "commitBeforeChange": "25253f3faa839d0341bdfe9eecb06d8791fcf8ea", "commitAfterChange": "925e23a2861ea0dd5605a31b21ce85e72d32238c", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-                throw new BuildException(\"You must specify value, location or refid with the name attribute\",", "+                throw new BuildException(\"You must specify value, location or \"", "+                                         + \"refid with the name attribute\",", "-                throw new BuildException(\"You must specify file, resource or environment when not using the name attribute\",", "-                                         location);", "+                throw new BuildException(\"You must specify file, resource or \"", "+                                         + \"environment when not using the \"", "+                                         + \"name attribute\", location);", "-            throw new BuildException(\"Prefix is only valid when loading from a file or resource\", location);", "+            throw new BuildException(\"Prefix is only valid when loading from \"", "+                                     + \"a file or resource\", location);", "-          loadFile(file);", "+            loadFile(file);", "-          loadResource(resource);", "+            loadResource(resource);", "-          loadEnvironment(env);", "+            loadEnvironment(env);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56bdafd225e66725b38e3c65ce5ea77f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/WebsphereDeploymentTool.java", "commitBeforeChange": "00ec1c435af8d15b42cb779373026ceedea92e59", "commitAfterChange": "3a35c7d914d8b5a1f203561ae6f89afb5d2b80ec", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "     protected void addVendorFiles(Hashtable ejbFiles, String baseName)", "signatureAfterChange": "     protected void addVendorFiles(Hashtable ejbFiles, String baseName)", "diff": ["-            log(\"Unable to locate websphere extensions. It was expected to be in \" +", "-                websphereEXT.getPath(), Project.MSG_VERBOSE);", "+            log(\"Unable to locate websphere extensions. \"", "+                + \"It was expected to be in \"", "+                + websphereEXT.getPath(), Project.MSG_VERBOSE);", "-            log(\"Unable to locate websphere bindings. It was expected to be in \" +", "-                websphereBND.getPath(), Project.MSG_VERBOSE);", "+            log(\"Unable to locate websphere bindings. \"", "+                + \"It was expected to be in \"", "+                + websphereBND.getPath(), Project.MSG_VERBOSE);", "-            log(\"The old method for locating CMP files has been DEPRECATED.\", Project.MSG_VERBOSE);", "-            log(\"Please adjust your websphere descriptor and set newCMP=\\\"true\\\" \" +", "-                \"to use the new CMP descriptor inclusion mechanism. \", Project.MSG_VERBOSE);", "+            log(\"The old method for locating CMP files has been DEPRECATED.\",", "+                Project.MSG_VERBOSE);", "+            log(\"Please adjust your websphere descriptor and set \"", "+                + \"newCMP=\\\"true\\\" to use the new CMP descriptor \"", "+                + \"inclusion mechanism. \", Project.MSG_VERBOSE);", "-                    log(\"Unable to locate the websphere Map: \" +", "-                        websphereMAP.getPath(), Project.MSG_VERBOSE);", "+                    log(\"Unable to locate the websphere Map: \"", "+                        + websphereMAP.getPath(), Project.MSG_VERBOSE);", "-                    log(\"Unable to locate the websphere Schema: \" +", "-                        websphereSchema.getPath(), Project.MSG_VERBOSE);", "+                    log(\"Unable to locate the websphere Schema: \"", "+                        + websphereSchema.getPath(), Project.MSG_VERBOSE);", "-                String msg = \"Exception while adding Vendor specific files: \" +", "-                    e.toString();", "+                String msg = \"Exception while adding Vendor specific files: \"", "+                    + e.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72392d00bf7240c02e3d78465aa5a7ce", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/pvcs/Pvcs.java", "commitBeforeChange": "fd6087beada84581d77aec9a94991cc2dfc4bb13", "commitAfterChange": "6154080061f869b4e425d608da3bd61fad967564", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void execute() throws org.apache.tools.ant.BuildException", "signatureAfterChange": "     public void execute() throws org.apache.tools.ant.BuildException", "diff": ["-        if(repository == null || repository.trim().equals(\"\")) {", "+        if (repository == null || repository.trim().equals(\"\")) {", "-        if(getWorkspace()!=null) {", "-            commandLine.createArgument().setValue(\"-sp\"+getWorkspace());", "+        if (getWorkspace() != null) {", "+            commandLine.createArgument().setValue(\"-sp\" + getWorkspace());", "-        commandLine.createArgument().setValue(\"-pr\"+getRepository());", "+        commandLine.createArgument().setValue(\"-pr\" + getRepository());", "-        if(getPvcsproject() == null && getPvcsprojects().isEmpty()) {", "+        if (getPvcsproject() == null && getPvcsprojects().isEmpty()) {", "-        if(getPvcsproject()!=null) {", "+        if (getPvcsproject() != null) {", "-        if(!getPvcsprojects().isEmpty()) {", "+        if (!getPvcsprojects().isEmpty()) {", "-                String projectName = ((PvcsProject)e.nextElement()).getName();", "+                String projectName = ((PvcsProject) e.nextElement()).getName();", "-                    throw new BuildException(\"name is a required attribute of pvcsproject\");", "+                    throw new BuildException(\"name is a required attribute \" ", "+                        + \"of pvcsproject\");", "-            tmp = new File(\"pvcs_ant_\"+rand.nextLong()+\".log\");", "-            tmp2 = new File(\"pvcs_ant_\"+rand.nextLong()+\".log\");", "+            tmp = new File(\"pvcs_ant_\" + rand.nextLong() + \".log\");", "+            tmp2 = new File(\"pvcs_ant_\" + rand.nextLong() + \".log\");", "-            result = runCmd(commandLine, new PumpStreamHandler(new FileOutputStream(tmp), new LogOutputStream(this,Project.MSG_WARN)));", "-            if ( result != 0 && !ignorerc) {", "+            result = runCmd(commandLine, ", "+                new PumpStreamHandler(new FileOutputStream(tmp), ", "+                new LogOutputStream(this, Project.MSG_WARN)));", "+            if (result != 0 && !ignorerc) {", "-            if(!tmp.exists()) {", "-                throw new BuildException(\"Communication between ant and pvcs failed. No output generated from executing PVCS commandline interface \\\"pcli\\\" and \\\"get\\\"\");", "+            if (!tmp.exists()) {", "+                throw new BuildException(\"Communication between ant and pvcs \" ", "+                    + \"failed. No output generated from executing PVCS \" ", "+                    + \"commandline interface \\\"pcli\\\" and \\\"get\\\"\");", "-            if(getForce()!=null && getForce().equals(\"yes\")) {", "+            if (getForce() != null && getForce().equals(\"yes\")) {", "-            if(getPromotiongroup()!=null) {", "-                commandLine.createArgument().setValue(\"-G\"+getPromotiongroup());", "+            if (getPromotiongroup() != null) {", "+                commandLine.createArgument().setValue(\"-G\" ", "+                    + getPromotiongroup());", "-                if(getLabel()!=null) {", "-                    commandLine.createArgument().setValue(\"-r\"+getLabel());", "+                if (getLabel() != null) {", "+                    commandLine.createArgument().setValue(\"-r\" + getLabel());", "-            commandLine.createArgument().setValue(\"@\"+tmp2.getAbsolutePath());", "+            commandLine.createArgument().setValue(\"@\" + tmp2.getAbsolutePath());", "-            result = runCmd(commandLine, new LogStreamHandler(this,Project.MSG_INFO, Project.MSG_WARN));", "-            if ( result != 0 && !ignorerc) {", "-                String msg = \"Failed executing: \" + commandLine.toString() + \". Return code was \"+result;", "+            result = runCmd(commandLine, ", "+                new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN));", "+            if (result != 0 && !ignorerc) {", "+                String msg = \"Failed executing: \" + commandLine.toString() ", "+                    + \". Return code was \" + result;", "-        } catch(FileNotFoundException e) {", "-            String msg = \"Failed executing: \" + commandLine.toString() + \". Exception: \"+e.getMessage();", "-            throw new BuildException(msg,location);", "-        } catch(IOException e) {", "-            String msg = \"Failed executing: \" + commandLine.toString() + \". Exception: \"+e.getMessage();", "-            throw new BuildException(msg,location);", "-        } catch(ParseException e) {", "-            String msg = \"Failed executing: \" + commandLine.toString() + \". Exception: \"+e.getMessage();", "-            throw new BuildException(msg,location);", "+        } catch (FileNotFoundException e) {", "+            String msg = \"Failed executing: \" + commandLine.toString() ", "+                + \". Exception: \" + e.getMessage();", "+            throw new BuildException(msg, location);", "+        } catch (IOException e) {", "+            String msg = \"Failed executing: \" + commandLine.toString() ", "+                + \". Exception: \" + e.getMessage();", "+            throw new BuildException(msg, location);", "+        } catch (ParseException e) {", "+            String msg = \"Failed executing: \" + commandLine.toString() ", "+                + \". Exception: \" + e.getMessage();", "+            throw new BuildException(msg, location);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "767ab0a27bcbeb06ed237daacf7c670e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/unix/Symlink.java", "commitBeforeChange": "1331049054d53ef94674a4966e7000bbf8baf6be", "commitAfterChange": "472c46251f1e0f3c7e68528f23617f21b80366cb", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public static void deleteSymlink(File linkfil, Task task)         throws IOException", "signatureAfterChange": "     public static void deleteSymlink(File linkfil, Task task)         throws IOException", "diff": ["-        // rename the resource, thus breaking the link:", "-        File temp = FILE_UTILS.createTempFile(\"symlink\", \".tmp\",", "-                                              canfil.getParentFile(), false,", "-                                              false);", "+            // rename the resource, thus breaking the link:", "+            File temp = FILE_UTILS.createTempFile(\"symlink\", \".tmp\",", "+                                                  canfil.getParentFile(), false,", "+                                                  false);", "-        if (FILE_UTILS.isLeadingPath(canfil, linkfil)) {", "-            // link points to a parent directory, renaming the parent", "-            // will rename the file", "-            linkfil = new File(temp,", "-                               FILE_UTILS.removeLeadingPath(canfil, linkfil));", "-        }", "+            if (FILE_UTILS.isLeadingPath(canfil, linkfil)) {", "+                // link points to a parent directory, renaming the parent", "+                // will rename the file", "+                linkfil = new File(temp,", "+                                   FILE_UTILS.removeLeadingPath(canfil,", "+                                                                linkfil));", "+            }", "-        boolean renamedTarget = false;", "-        try {", "+            boolean renamedTarget = false;", "-                FILE_UTILS.rename(canfil, temp);", "-                renamedTarget = true;", "-            } catch (IOException e) {", "-                throw new IOException(", "-                    \"Couldn't rename resource when attempting to delete \"", "-                    + linkfil);", "-            }", "-            // delete the (now) broken link:", "-            if (!linkfil.delete()) {", "-                throw new IOException(\"Couldn't delete symlink: \" + linkfil", "-                    + \" (was it a real file? is this not a UNIX system?)\");", "-            }", "-        } finally {", "-            if (renamedTarget) {", "-                // return the resource to its original name:", "-                    FILE_UTILS.rename(temp, canfil);", "+                    FILE_UTILS.rename(canfil, temp);", "+                    renamedTarget = true;", "-                    throw new IOException(\"Couldn't return resource \" + temp", "-                                          + \" to its original name: \"", "-                                          + canfil.getAbsolutePath()", "-                                          + \"\\n THE RESOURCE'S NAME ON DISK HAS \"", "-                                          + \"BEEN CHANGED BY THIS ERROR!\\n\");", "+                    throw new IOException(\"Couldn't rename resource when \"", "+                                          + \"attempting to delete \" + linkfil);", "+                }", "+                // delete the (now) broken link:", "+                if (!linkfil.delete()) {", "+                    throw new IOException(\"Couldn't delete symlink: \"", "+                                          + linkfil", "+                                          + \" (was it a real file? is this \"", "+                                          + \"not a UNIX system?)\");", "+                }", "+            } finally {", "+                if (renamedTarget) {", "+                    // return the resource to its original name:", "+                    try {", "+                        FILE_UTILS.rename(temp, canfil);", "+                    } catch (IOException e) {", "+                        throw new IOException(\"Couldn't return resource \"", "+                                              + temp", "+                                              + \" to its original name: \"", "+                                              + canfil.getAbsolutePath()", "+                                              + \"\\n THE RESOURCE'S NAME ON DISK\"", "+                                              + \" HAS BEEN CHANGED BY THIS\"", "+                                              + \" ERROR!\\n\");", "+                    }", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8079f5646c43e1df7db9d2a8b5c8f247", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Delete.java", "commitBeforeChange": "b0fcc6e32c4bcff86415474ff407210889213548", "commitAfterChange": "224d0e2d87137aac9aabbb2e3aec4bc6189a7fa7", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            log(\"DEPRECATED - Use of the implicit FileSet is deprecated.  Use a nested fileset element instead.\");", "+            log(\"DEPRECATED - Use of the implicit FileSet is deprecated.  \"", "+                + \"Use a nested fileset element instead.\");", "-            throw new BuildException(\"At least one of the file or dir attributes, or a fileset element, must be set.\");", "+            throw new BuildException(\"At least one of the file or dir \"", "+                                     + \"attributes, or a fileset element, \"", "+                                     + \"must be set.\");", "-            throw new BuildException(\"quiet and failonerror cannot both be set to true\",", "-                                     location);", "+            throw new BuildException(\"quiet and failonerror cannot both be \"", "+                                     + \"set to true\", location);", "-                    log(\"Directory \" + file.getAbsolutePath() + \" cannot be removed using the file attribute.  Use dir instead.\");", "+                    log(\"Directory \" + file.getAbsolutePath() ", "+                        + \" cannot be removed using the file attribute.  \"", "+                        + \"Use dir instead.\");", "-                        String message=\"Unable to delete file \" + file.getAbsolutePath();", "+                        String message=\"Unable to delete file \" ", "+                            + file.getAbsolutePath();", "-                            log(message, ", "-                                quiet ? Project.MSG_VERBOSE : Project.MSG_WARN);", "+                            log(message, quiet ? Project.MSG_VERBOSE ", "+                                               : Project.MSG_WARN);", "-                log(\"Could not find file \" + file.getAbsolutePath() + \" to delete.\", ", "+                log(\"Could not find file \" + file.getAbsolutePath() ", "+                    + \" to delete.\", ", "-        if (dir != null && dir.exists() && dir.isDirectory() && !usedMatchingTask) {", "+        if (dir != null && dir.exists() && dir.isDirectory() && ", "+            !usedMatchingTask) {", "-               If verbosity is MSG_VERBOSE, that mean we are doing regular logging", "-               (backwards as that sounds).  In that case, we want to print one", "-               message about deleting the top of the directory tree.  Otherwise,", "-               the removeDir method will handle messages for _all_ directories.", "+               If verbosity is MSG_VERBOSE, that mean we are doing", "+               regular logging (backwards as that sounds).  In that", "+               case, we want to print one message about deleting the", "+               top of the directory tree.  Otherwise, the removeDir", "+               method will handle messages for _all_ directories."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b05199927402ecfa0c414c78dfa60d9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/condition/FilesMatch.java", "commitBeforeChange": "614eeba75456e54a13c54b131c37baa12d751651", "commitAfterChange": "9fb2961443b0e15a6fd0be0aceed9d78e8c9cad7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public boolean eval()         throws BuildException", "signatureAfterChange": "     public boolean eval()         throws BuildException", "diff": ["-            throw new BuildException(\"both file1 and file2 are required in filesmatch\");", "+            throw new BuildException(\"both file1 and file2 are required in \"", "+                                     + \"filesmatch\");", "-            throw new BuildException(\"when comparing files\", ioe);", "+            throw new BuildException(\"when comparing files: \"+ioe.getMessage(),", "+                                     ioe);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2a86667a2768f46f40023f9975e749d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/j2ee/WebLogicHotDeploymentTool.java", "commitBeforeChange": "d60b6ca1eea0a3372c99965f3c15466328659908", "commitAfterChange": "c6c232893c39257745a8f7a618bcdb5c59791cae", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void validateAttributes() throws BuildException", "signatureAfterChange": "     public void validateAttributes() throws BuildException", "diff": ["-        if((getPassword() == null))", "+        if ((getPassword() == null))", "-        if((action.equals(ACTION_DEPLOY) || action.equals(ACTION_UPDATE)) && application == null)", "-            throw new BuildException(\"The application attribute must be set if action = \" + action);", "+        if ((action.equals(ACTION_DEPLOY) || action.equals(ACTION_UPDATE)) ", "+            && application == null)", "+            throw new BuildException(\"The application attribute must be set \" ", "+                + \"if action = \" + action);", "-        if((action.equals(ACTION_DEPLOY) || action.equals(ACTION_UPDATE)) && getTask().getSource() == null)", "-            throw new BuildException(\"The source attribute must be set if action = \" + action);", "+        if ((action.equals(ACTION_DEPLOY) || action.equals(ACTION_UPDATE)) ", "+            && getTask().getSource() == null)", "+            throw new BuildException(\"The source attribute must be set if \" ", "+                + \"action = \" + action);", "-        if((action.equals(ACTION_DELETE) || action.equals(ACTION_UNDEPLOY)) && application == null)", "-            throw new BuildException(\"The application attribute must be set if action = \" + action);", "+        if ((action.equals(ACTION_DELETE) || action.equals(ACTION_UNDEPLOY)) ", "+            && application == null)", "+            throw new BuildException(\"The application attribute must be set if \" ", "+                + \"action = \" + action);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4ca2bd8f84c23f8fced2a4447e79042", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Available.java", "commitBeforeChange": "727faae6253126291dd52a1103713681e925f96b", "commitAfterChange": "a41c55cd1af2ca412cb61ee6c81a7a93c9ab8a2d", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      public boolean eval() throws BuildException", "signatureAfterChange": "      public boolean eval() throws BuildException", "diff": ["-            throw new BuildException(\"At least one of (classname|file|resource) is required\", location);", "+            throw new BuildException(\"At least one of (classname|file|\"", "+                                     + \"resource) is required\", location);", "-                throw new BuildException(\"The type attribute is only valid when specifying the file attribute.\");", "+                throw new BuildException(\"The type attribute is only valid \"", "+                                         + \"when specifying the file \"", "+                                         + \"attribute.\", location);", "-            log(\"Unable to load class \" + classname + appendix, Project.MSG_VERBOSE);", "+            log(\"Unable to load class \" + classname + appendix, ", "+                Project.MSG_VERBOSE);", "-                log(\"Unable to find \" + type + \" \" + file + appendix, Project.MSG_VERBOSE);", "+                log(\"Unable to find \" + type + \" \" + file + appendix, ", "+                    Project.MSG_VERBOSE);", "-            log(\"Unable to load resource \" + resource + appendix, Project.MSG_VERBOSE);", "+            log(\"Unable to load resource \" + resource + appendix, ", "+                Project.MSG_VERBOSE);", "+            loader = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d63a78a4057d01b16b247d0bcc1a94b2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/input/src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "e7de779f7c1e189f3d1528d0b26b5af5613648c0", "commitAfterChange": "944aa460d4c23ae00ef6ead10666d67b9db82a6c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected Main(String[] args) throws BuildException", "signatureAfterChange": "     protected Main(String[] args) throws BuildException", "diff": ["-                    File logFile = new File(args[i+1]);", "+                    File logFile = new File(args[i + 1]);", "+                    isLogFileUsed = true;", "-                    String msg = \"Cannot write on the specified log file. \" +", "-                        \"Make sure the path exists and you have write permissions.\";", "+                    String msg = \"Cannot write on the specified log file. \"", "+                        + \"Make sure the path exists and you have write \"", "+                        + \"permissions.\";", "-            } else if (arg.equals(\"-buildfile\") || arg.equals(\"-file\") || arg.equals(\"-f\")) {", "+            } else if (arg.equals(\"-buildfile\") || arg.equals(\"-file\")", "+                       || arg.equals(\"-f\")) {", "-                    buildFile = new File(args[i+1]);", "+                    buildFile = new File(args[i + 1]);", "-                    listeners.addElement(args[i+1]);", "+                    listeners.addElement(args[i + 1]);", "-                    value = name.substring(posEq+1);", "+                    value = name.substring(posEq + 1);", "-                } else if (i < args.length-1) {", "+                } else if (i < args.length - 1) {", "-                    System.out.println(\"Only one logger class may be specified.\");", "+                    System.out.println(\"Only one logger class may \"", "+                        + \" be specified.\");", "-                } ", "-                catch (ArrayIndexOutOfBoundsException aioobe) {", "+                } catch (ArrayIndexOutOfBoundsException aioobe) {", "-                    System.out.println(\"Only one input handler class may be specified.\");", "+                    System.out.println(\"Only one input handler class may \" +", "+                                       \"be specified.\");", "-                } ", "-                catch (ArrayIndexOutOfBoundsException aioobe) {", "+                } catch (ArrayIndexOutOfBoundsException aioobe) {", "-                if (i < args.length-1) {", "+                if (i < args.length - 1) {", "-                    propertyFiles.addElement(args[i+1]);", "+                    propertyFiles.addElement(args[i + 1]);", "-        ", "+", "-                buildFile = findBuildFile(System.getProperty(\"user.dir\"), ", "+                buildFile = findBuildFile(System.getProperty(\"user.dir\"),", "-        for (int propertyFileIndex=0;", "+        for (int propertyFileIndex = 0;", "-            String filename = (String) propertyFiles.elementAt(propertyFileIndex);", "+            String filename", "+                = (String) propertyFiles.elementAt(propertyFileIndex);", "-            }", "-            catch (IOException e) {", "+            } catch (IOException e) {", "-            ", "+"]}]}
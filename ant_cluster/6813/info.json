{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "54b8cdd2faed3142ea9abccc09314e6c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06e0c8f0dc02933777bde635d1f559d8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/filterreaders/src/main/org/apache/tools/ant/filters/StripLineBreaks.java", "commitBeforeChange": "8aa365e5d7d7f14ac4e0002be30968df77b08b56", "commitAfterChange": "df18fb1a5cdb355de0cf4af315748eb112fc5ce7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public final int read(final char[] cbuf) throws IOException", "signatureAfterChange": "      public final int read(final char cbuf[], final int off,                           final int len) throws IOException", "diff": ["-     */", "-    public final int read(final char[] cbuf) throws IOException {", "-        int length = -1;", "-        if (cbuf != null) {", "-            length = cbuf.length;", "-            if (in != null) {", "-                length = in.read(cbuf);", "-            }", "-            if (length != -1) {", "-                String str = new String(cbuf, 0, length);", "-                str = stripLineBreaks(str);", "-                final char[] newcbuf = str.toCharArray();", "-                System.arraycopy(newcbuf, 0, cbuf, 0, newcbuf.length);", "-                for (int j = newcbuf.length; j < cbuf.length; j++) {", "-                    cbuf[j] = 0;", "-                length = newcbuf.length;", "-        return length;", "+    public final int read(final char cbuf[], final int off,", "+                          final int len) throws IOException {", "+        for (int i = 0; i < len; i++) {", "+            final int ch = read();", "+            if (ch == -1) {", "+                if (i == 0) {", "+                    return -1;", "+                } else {", "+                    return i;", "+            cbuf[off + i] = (char) ch;", "+        return len;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26d808eba0d0a041d2fc99af9b7abae0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/filterreaders/src/main/org/apache/tools/ant/filters/StripLineBreaks.java", "commitBeforeChange": "8aa365e5d7d7f14ac4e0002be30968df77b08b56", "commitAfterChange": "df18fb1a5cdb355de0cf4af315748eb112fc5ce7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public final int read(final char[] cbuf) throws IOException", "signatureAfterChange": "      public final int read() throws IOException", "diff": ["-     */", "-    public final int read(final char[] cbuf) throws IOException {", "-        int length = -1;", "-        if (cbuf != null) {", "-            length = cbuf.length;", "-            if (in != null) {", "-                length = in.read(cbuf);", "-            }", "-            if (length != -1) {", "-                String str = new String(cbuf, 0, length);", "-                str = stripLineBreaks(str);", "-                final char[] newcbuf = str.toCharArray();", "-                System.arraycopy(newcbuf, 0, cbuf, 0, newcbuf.length);", "-                for (int j = newcbuf.length; j < cbuf.length; j++) {", "-                    cbuf[j] = 0;", "+    public final int read() throws IOException {", "+        if (!initialized) {", "+            String userDefinedLineBreaks = null;", "+            if (parameters != null) {", "+                for (int i = 0; i < parameters.length; i++) {", "+                    if (LINE_BREAKS_KEY.equals(parameters[i].getName())) {", "+                        userDefinedLineBreaks = parameters[i].getValue();", "+                        break;", "+                    }", "-                length = newcbuf.length;", "+            }", "+", "+            if (userDefinedLineBreaks != null) {", "+                lineBreaks = userDefinedLineBreaks;", "+            }", "+", "+            initialized = true;", "+        }", "+", "+        int ch = in.read();", "+        while (ch != -1) {", "+            if (lineBreaks.indexOf(ch) == -1) {", "+                break;", "+            } else {", "+                ch = in.read();", "-        return length;", "+        return ch;"]}]}
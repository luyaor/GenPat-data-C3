{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b9a492bc76362479c0711ec0106d56f7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10e8a90ba81a1432f92f092fdeaf2b15", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "ad91082694f9344ae3020e16cf9351e48b751b0b", "commitAfterChange": "bab9e2d799ee887bc0a404b4acdec0366234eafe", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "      private void sendMTFValues()         throws IOException", "signatureAfterChange": "      private void sendMTFValues()         throws IOException", "diff": ["-        char len[][] = new char[ N_GROUPS ][ MAX_ALPHA_SIZE ];", "+        char[][] len = new char[ N_GROUPS ][ MAX_ALPHA_SIZE ];", "-        for( t = 0; t < N_GROUPS; t++ ) {", "-            for( v = 0; v < alphaSize; v++ ) {", "+        for( t = 0; t < N_GROUPS; t++ )", "+        {", "+            for( v = 0; v < alphaSize; v++ )", "+            {", "-        if( nMTF <= 0 ) {", "+        if( nMTF <= 0 )", "+        {", "-        if( nMTF < 200 ) {", "+        if( nMTF < 200 )", "+        {", "-        } else if( nMTF < 600 ) {", "+        }", "+        else if( nMTF < 600 )", "+        {", "-               } else if( nMTF < 1200 ) {", "+        }", "+        else if( nMTF < 1200 )", "+        {", "-                      } else if( nMTF < 2400 ) {", "+        }", "+        else if( nMTF < 2400 )", "+        {", "-                             } else {", "+        }", "+        else", "+        {", "-                             }", "+        }", "-                for( v = 0; v < alphaSize; v++ ) {", "-                    if( v >= gs && v <= ge ) {", "+                for( v = 0; v < alphaSize; v++ )", "+                {", "+                    if( v >= gs && v <= ge )", "+                    {", "-                    } else {", "+                    }", "+                    else", "+                    {", "-        int rfreq[][] = new int[ N_GROUPS ][ MAX_ALPHA_SIZE ];", "-        int fave[] = new int[ N_GROUPS ];", "-        short cost[] = new short[ N_GROUPS ];", "+        int[][] rfreq = new int[ N_GROUPS ][ MAX_ALPHA_SIZE ];", "+        int[] fave = new int[ N_GROUPS ];", "+        short[] cost = new short[ N_GROUPS ];", "-            for( t = 0; t < nGroups; t++ ) {", "+            for( t = 0; t < nGroups; t++ )", "+            {", "-            for( t = 0; t < nGroups; t++ ) {", "-                for( v = 0; v < alphaSize; v++ ) {", "+            for( t = 0; t < nGroups; t++ )", "+            {", "+                for( v = 0; v < alphaSize; v++ )", "+                {", "-                if( gs >= nMTF ) {", "+                if( gs >= nMTF )", "+                {", "-                if( ge >= nMTF ) {", "+                if( ge >= nMTF )", "+                {", "-                for( t = 0; t < nGroups; t++ ) {", "+                for( t = 0; t < nGroups; t++ )", "+                {", "-                        for( t = 0; t < nGroups; t++ ) {", "+                        for( t = 0; t < nGroups; t++ )", "+                        {", "-                for( t = 0; t < nGroups; t++ ) {", "+                for( t = 0; t < nGroups; t++ )", "+                {", "-                for( i = gs; i <= ge; i++ ) {", "+                for( i = gs; i <= ge; i++ )", "+                {", "-            for( t = 0; t < nGroups; t++ ) {", "+            for( t = 0; t < nGroups; t++ )", "+            {", "-        if( !( nGroups < 8 ) ) {", "+        if( !( nGroups < 8 ) )", "+        {", "-        if( !( nSelectors < 32768 && nSelectors <= ( 2 + ( 900000 / G_SIZE ) ) ) ) {", "+        if( !( nSelectors < 32768 && nSelectors <= ( 2 + ( 900000 / G_SIZE ) ) ) )", "+        {", "-            char pos[] = new char[ N_GROUPS ];", "+            char[] pos = new char[ N_GROUPS ];", "-            for( i = 0; i < nGroups; i++ ) {", "+            for( i = 0; i < nGroups; i++ )", "+            {", "-        int code[][] = new int[ N_GROUPS ][ MAX_ALPHA_SIZE ];", "+        int[][] code = new int[ N_GROUPS ][ MAX_ALPHA_SIZE ];", "-                if( len[ t ][ i ] > maxLen ) {", "+                if( len[ t ][ i ] > maxLen )", "+                {", "-                if( len[ t ][ i ] < minLen ) {", "+                if( len[ t ][ i ] < minLen )", "+                {", "-            if( maxLen > 20 ) {", "+            if( maxLen > 20 )", "+            {", "-            if( minLen < 1 ) {", "+            if( minLen < 1 )", "+            {", "-            boolean inUse16[] = new boolean[ 16 ];", "+            boolean[] inUse16 = new boolean[ 16 ];", "-                for( j = 0; j < 16; j++ ) {", "-                    if( inUse[ i * 16 + j ] ) {", "+                for( j = 0; j < 16; j++ )", "+                {", "+                    if( m_inUse[ i * 16 + j ] )", "+                    {", "-            for( i = 0; i < 16; i++ ) {", "-                if( inUse16[ i ] ) {", "+            for( i = 0; i < 16; i++ )", "+            {", "+                if( inUse16[ i ] )", "+                {", "-                } else {", "+                }", "+                else", "+                {", "-            for( i = 0; i < 16; i++ ) {", "-                if( inUse16[ i ] ) {", "-                    for( j = 0; j < 16; j++ ) {", "-                        if( inUse[ i * 16 + j ] ) {", "+            for( i = 0; i < 16; i++ )", "+            {", "+                if( inUse16[ i ] )", "+                {", "+                    for( j = 0; j < 16; j++ )", "+                    {", "+                        if( m_inUse[ i * 16 + j ] )", "+                        {", "-                        } else {", "+                        }", "+                        else", "+                        {", "-            for( j = 0; j < selectorMtf[ i ]; j++ ) {", "+            for( j = 0; j < selectorMtf[ i ]; j++ )", "+            {", "-            if( gs >= nMTF ) {", "+            if( gs >= nMTF )", "+            {", "-            if( ge >= nMTF ) {", "+            if( ge >= nMTF )", "+            {", "-        if( !( selCtr == nSelectors ) ) {", "+        if( !( selCtr == nSelectors ) )", "+        {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b8f9c1b7aa921905d5b1ca67f108f71", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "5a497d7dc79f7b6eda0770262f8d92d099c502c5", "commitAfterChange": "8ce1de2178a0422105fa437c327b49fb5637ff28", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "      private void sendMTFValues()         throws IOException", "signatureAfterChange": "      private void sendMTFValues()         throws IOException", "diff": ["-        for( t = 0; t < N_GROUPS; t++ )", "-            for( v = 0; v < alphaSize; v++ )", "+        for( t = 0; t < N_GROUPS; t++ ) {", "+            for( v = 0; v < alphaSize; v++ ) {", "+            }", "+        }", "-        if( nMTF <= 0 )", "+        if( nMTF <= 0 ) {", "+        }", "-        if( nMTF < 200 )", "+        if( nMTF < 200 ) {", "-        else if( nMTF < 600 )", "+        } else if( nMTF < 600 ) {", "-        else if( nMTF < 1200 )", "+               } else if( nMTF < 1200 ) {", "-        else if( nMTF < 2400 )", "+                      } else if( nMTF < 2400 ) {", "-        else", "+                             } else {", "+                             }", "-                for( v = 0; v < alphaSize; v++ )", "-                    if( v >= gs && v <= ge )", "+                for( v = 0; v < alphaSize; v++ ) {", "+                    if( v >= gs && v <= ge ) {", "-                    else", "+                    } else {", "+                    }", "+                }", "-            for( t = 0; t < nGroups; t++ )", "+            for( t = 0; t < nGroups; t++ ) {", "+            }", "-            for( t = 0; t < nGroups; t++ )", "-                for( v = 0; v < alphaSize; v++ )", "+            for( t = 0; t < nGroups; t++ ) {", "+                for( v = 0; v < alphaSize; v++ ) {", "+                }", "+            }", "-                if( gs >= nMTF )", "+                if( gs >= nMTF ) {", "+                }", "-                if( ge >= nMTF )", "+                if( ge >= nMTF ) {", "+                }", "-                for( t = 0; t < nGroups; t++ )", "+                for( t = 0; t < nGroups; t++ ) {", "+                }", "-                        for( t = 0; t < nGroups; t++ )", "+                        for( t = 0; t < nGroups; t++ ) {", "+                        }", "-                for( t = 0; t < nGroups; t++ )", "+                for( t = 0; t < nGroups; t++ ) {", "+                }", "-                for( i = gs; i <= ge; i++ )", "+                for( i = gs; i <= ge; i++ ) {", "+                }", "-            for( t = 0; t < nGroups; t++ )", "+            for( t = 0; t < nGroups; t++ ) {", "+            }", "-        if( !( nGroups < 8 ) )", "+        if( !( nGroups < 8 ) ) {", "-        if( !( nSelectors < 32768 && nSelectors <= ( 2 + ( 900000 / G_SIZE ) ) ) )", "+        }", "+        if( !( nSelectors < 32768 && nSelectors <= ( 2 + ( 900000 / G_SIZE ) ) ) ) {", "+        }", "-            for( i = 0; i < nGroups; i++ )", "+            for( i = 0; i < nGroups; i++ ) {", "+            }", "-                if( len[ t ][ i ] > maxLen )", "+                if( len[ t ][ i ] > maxLen ) {", "-                if( len[ t ][ i ] < minLen )", "+                }", "+                if( len[ t ][ i ] < minLen ) {", "+                }", "-            if( maxLen > 20 )", "+            if( maxLen > 20 ) {", "-            if( minLen < 1 )", "+            }", "+            if( minLen < 1 ) {", "+            }", "-                for( j = 0; j < 16; j++ )", "-                    if( inUse[ i * 16 + j ] )", "+                for( j = 0; j < 16; j++ ) {", "+                    if( inUse[ i * 16 + j ] ) {", "+                    }", "+                }", "-            for( i = 0; i < 16; i++ )", "-                if( inUse16[ i ] )", "+            for( i = 0; i < 16; i++ ) {", "+                if( inUse16[ i ] ) {", "-                else", "+                } else {", "+                }", "+            }", "-            for( i = 0; i < 16; i++ )", "-                if( inUse16[ i ] )", "-                    for( j = 0; j < 16; j++ )", "-                        if( inUse[ i * 16 + j ] )", "+            for( i = 0; i < 16; i++ ) {", "+                if( inUse16[ i ] ) {", "+                    for( j = 0; j < 16; j++ ) {", "+                        if( inUse[ i * 16 + j ] ) {", "-                        else", "+                        } else {", "+                        }", "+                    }", "+                }", "+            }", "-            for( j = 0; j < selectorMtf[ i ]; j++ )", "+            for( j = 0; j < selectorMtf[ i ]; j++ ) {", "+            }", "-            if( gs >= nMTF )", "+            if( gs >= nMTF ) {", "+            }", "-            if( ge >= nMTF )", "+            if( ge >= nMTF ) {", "+            }", "-        if( !( selCtr == nSelectors ) )", "+        if( !( selCtr == nSelectors ) ) {", "+        }"]}]}
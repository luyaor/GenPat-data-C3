{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5ef603de03fb17a1ecd7be7c40b38429", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ead28de596a4532007deba51f04cf99", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "35239662037885a84ef34cba2d0b901b6280e48f", "commitAfterChange": "e1f227ae3daabd921f4557a8bdd849ee8c23e221", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": "     protected void runStatements(Reader reader, PrintStream out)         throws SQLException, IOException", "signatureAfterChange": "     protected void runStatements(Reader reader, PrintStream out)         throws SQLException, IOException", "diff": ["-            if ((delimiterType.equals(DelimiterType.NORMAL) && StringUtils.endsWith(sql, delimiter))", "-                    || (delimiterType.equals(DelimiterType.ROW) && line.equals(delimiter))) {", "-                execSQL(sql.substring(0, sql.length() - delimiter.length()), out);", "+            int lastDelimPos = lastDelimiterPosition(sql, line);", "+            if (lastDelimPos > -1) {", "+                execSQL(sql.substring(0, lastDelimPos), out);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a71c483cd778701efac1a796f8b80acb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipFile.java", "commitBeforeChange": "6c0ab4d9acff26999595b59c4e710ed235e8fefd", "commitAfterChange": "6cd0de1022faed419783119405f458e44a1ac663", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private Map populateFromCentralDirectory()         throws IOException", "signatureAfterChange": "     private Map populateFromCentralDirectory()         throws IOException", "diff": ["-            int lenToSkip = extraLen;", "-            while (lenToSkip > 0) {", "-                int skipped = archive.skipBytes(lenToSkip);", "-                if (skipped <= 0) {", "-                    throw new RuntimeException(\"failed to skip extra data in\"", "-                                               + \" central directory\");", "-                }", "-                lenToSkip -= skipped;", "-            }            ", "+            byte[] cdExtraData = new byte[extraLen];", "+            archive.readFully(cdExtraData);", "+            ze.setCentralDirectoryExtra(cdExtraData);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6d8241fd53f6e1c26140d62a2e6599d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "2f0ab79127f87f9b769a60af0e3aad9da0bf4734", "commitAfterChange": "3cb22aa1c607dcc42ccdf3249be2c26e3585c6f5", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "     protected void writeCentralFileHeader(ZipEntry ze) throws IOException", "signatureAfterChange": "     protected void writeCentralFileHeader(ZipEntry ze) throws IOException", "diff": ["-        // version needed to extract", "-        // general purpose bit flag", "-        if (ze.getMethod() == DEFLATED && raf == null) {", "-            // requires version 2 as we are going to store length info", "-            // in the data descriptor", "-            writeOut(ZipShort.getBytes(20));", "-", "-            // bit3 set to signal, we use a data descriptor", "-            writeOut(ZipShort.getBytes(8));", "-        } else {", "-            writeOut(ZipShort.getBytes(10));", "-            writeOut(ZERO);", "-        }", "-        // CheckStyle:MagicNumber ON", "+        final int zipMethod = ze.getMethod();", "+        writeVersionNeededToExtractAndGeneralPurposeBits(zipMethod);", "-        writeOut(ZipShort.getBytes(ze.getMethod()));", "+        writeOut(ZipShort.getBytes(zipMethod));"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "14ba4ecef47659791ea473c45b312199", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "229ac872cd23a9c6f8f4bf0eaab5b82f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "a28f64f5cf1b63d9342683d77d79a5cdf9e67f85", "commitAfterChange": "ff41336fc19f549bc995898f4543da6d7e9d9bf9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public static synchronized Vector getProcEnvironment()", "signatureAfterChange": "     public static synchronized Vector getProcEnvironment()", "diff": ["-    public static synchronized Vector getProcEnvironment() {", "-        procEnvironment = new Vector();", "-        if (JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_1_5)) {", "-                Map/*<String,String>*/ env = (Map) System.class.getMethod(\"getenv\", new Class[0]).invoke(null, new Object[0]);", "-                Iterator it = env.entrySet().iterator();", "-                while (it.hasNext()) {", "-                    Map.Entry entry = (Map.Entry) it.next();", "-                    procEnvironment.add(entry.getKey() + \"=\" + entry.getValue());", "-                }", "-                procEnvironment = addVMSLogicals(procEnvironment, in);", "-                        procEnvironment.addElement(var);", "-                procEnvironment.addElement(var);", "+     */", "+    public static synchronized Vector getProcEnvironment() {", "+        Vector v = new Vector();", "+        Iterator it = getEnvironmentVariables().entrySet().iterator();", "+        while (it.hasNext()) {", "+            Map.Entry entry = (Map.Entry) it.next();", "+            v.add(entry.getKey() + \"=\" + entry.getValue());", "+        }", "+        return v;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bec1cc28dc00aba1e8809e8fe14ec0da", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipEncodingHelper.java", "commitBeforeChange": "cbd20a77eba224b21654251583971e054729f006", "commitAfterChange": "752d64fa43db2172327771ba4d36bee3f2d3b49a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "     static final byte[] encodeName(String name, String encoding)", "signatureAfterChange": "     static void appendSurrogate(ByteBuffer bb, char c)", "diff": ["-    static final byte[] encodeName(String name, String encoding) {", "+    static void appendSurrogate(ByteBuffer bb, char c) {", "+", "+        bb.put((byte) '%');", "+        bb.put((byte) 'U');", "+", "+        bb.put(HEX_DIGITS[(c >> 12)&0x0f]);", "+        bb.put(HEX_DIGITS[(c >> 8)&0x0f]);", "+        bb.put(HEX_DIGITS[(c >> 4)&0x0f]);", "+        bb.put(HEX_DIGITS[c & 0x0f]);", "+    }", "-            return name.getBytes();", "-", "-        Charset cs = Charset.forName(encoding);", "-        CharsetEncoder enc = cs.newEncoder();", "-", "-        enc.onMalformedInput(CodingErrorAction.REPORT);", "-        enc.onUnmappableCharacter(CodingErrorAction.REPORT);", "-", "-        CharBuffer cb = CharBuffer.wrap(name);", "-        ByteBuffer out = ByteBuffer.allocate(name.length()", "-                                             + (name.length() + 1) / 2);", "-", "-        while (cb.remaining() > 0) {", "-            CoderResult res = enc.encode(cb, out,true);", "-", "-            if (res.isUnmappable() || res.isMalformed()) {", "-", "-                // write the unmappable characters in utf-16", "-                // pseudo-URL encoding style to ByteBuffer.", "-                if (res.length() * 6 > out.remaining()) {", "-                    out = growBuffer(out,out.position() + res.length() * 6);", "-                }", "-", "-                for (int i=0; i<res.length(); ++i) {", "-                    out.put((byte) '%');", "-                    out.put((byte) 'U');", "-", "-                    char c = cb.get();", "-", "-                    out.put(HEX_DIGITS[(c >> 12)&0x0f]);", "-                    out.put(HEX_DIGITS[(c >> 8)&0x0f]);", "-                    out.put(HEX_DIGITS[(c >> 4)&0x0f]);", "-                    out.put(HEX_DIGITS[c & 0x0f]);", "-                }", "-", "-            } else if (res.isOverflow()) {", "-", "-                out = growBuffer(out, 0);", "-", "-            } else if (res.isUnderflow()) {", "-", "-                enc.flush(out);", "-                break;", "-", "-            }", "-        }", "-", "-        byte [] ret = new byte[out.position()];", "-        out.rewind();", "-        out.get(ret);", "-", "-        return ret;", "-    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "74a9357000bc59fcfa8a019d28cb952b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bf0de766328fbcd4c6e75a30ab2ff7b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/filterreaders/src/main/org/apache/tools/ant/util/ChainReaderHelper.java", "commitBeforeChange": "c5a6bd97758856408365e17d4625d486c9769486", "commitAfterChange": "7899d6c4a6c335eeffa486f6b09fa3725b0e3a7b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public final String processStream()         throws BuildException, IOException", "signatureAfterChange": "     public final String processStream()         throws BuildException, IOException", "diff": ["-                final AntFilterReader afr =", "-                    (AntFilterReader) filterReaders.elementAt(j);", "-                finalFilters.addElement(afr);", "+                finalFilters.addElement(filterReaders.elementAt(j));", "-                final AntFilterReader filter =", "-                    (AntFilterReader) finalFilters.elementAt(i);", "-                final String className = filter.getClassName();", "-                final Path classpath = filter.getClasspath();", "-                final Project project = filter.getProject();", "-                if (className != null) {", "-                    try {", "-                        Class clazz = null;", "-                        if (classpath == null) {", "-                            clazz = Class.forName(className);", "-                        } else {", "-                            AntClassLoader al = new AntClassLoader(project,", "-                                                                   classpath);", "-                            clazz = al.loadClass(className);", "-                            AntClassLoader.initializeClass(clazz);", "-                        }", "-                        if (clazz != null) {", "-                            if (!FilterReader.class.isAssignableFrom(clazz)) {", "-                                throw new BuildException(className +", "-                                    \" does not extend java.io.FilterReader\");", "+                Object o = finalFilters.elementAt(i);", "+", "+                if (o instanceof AntFilterReader) {", "+                    final AntFilterReader filter = (AntFilterReader) finalFilters.elementAt(i);", "+                    final String className = filter.getClassName();", "+                    final Path classpath = filter.getClasspath();", "+                    final Project project = filter.getProject();", "+                    if (className != null) {", "+                        try {", "+                            Class clazz = null;", "+                            if (classpath == null) {", "+                                clazz = Class.forName(className);", "+                            } else {", "+                                AntClassLoader al = new AntClassLoader(project,", "+                                                                       classpath);", "+                                clazz = al.loadClass(className);", "+                                AntClassLoader.initializeClass(clazz);", "-                            final Constructor[] constructors =", "-                                clazz.getConstructors();", "-                            final Reader[] rdr = {instream};", "-                            instream =", "-                                (Reader) constructors[0].newInstance(rdr);", "-                            if (Parameterizable.class.isAssignableFrom(clazz)) {", "-                                final Parameter[] params = filter.getParams();", "-                                ((Parameterizable)", "-                                    instream).setParameters(params);", "+                            if (clazz != null) {", "+                                if (!FilterReader.class.isAssignableFrom(clazz)) {", "+                                    throw new BuildException(className +", "+                                        \" does not extend java.io.FilterReader\");", "+                                }", "+                                final Constructor[] constructors =", "+                                    clazz.getConstructors();", "+                                int j = 0;", "+                                for (; j < constructors.length; j++) {", "+                                    Class[] types = constructors[j]", "+                                                      .getParameterTypes();", "+                                    if (types.length == 1 &&", "+                                        types[0].isAssignableFrom(Reader.class)) {", "+                                        break;", "+                                    }", "+                                }", "+                                final Reader[] rdr = {instream};", "+                                instream =", "+                                    (Reader) constructors[j].newInstance(rdr);", "+                                if (Parameterizable.class.isAssignableFrom(clazz)) {", "+                                    final Parameter[] params = filter.getParams();", "+                                    ((Parameterizable)", "+                                        instream).setParameters(params);", "+                                }", "+                        } catch (final ClassNotFoundException cnfe) {", "+                            throw new BuildException(cnfe);", "+                        } catch (final InstantiationException ie) {", "+                            throw new BuildException(ie);", "+                        } catch (final IllegalAccessException iae) {", "+                            throw new BuildException(iae);", "+                        } catch (final InvocationTargetException ite) {", "+                            throw new BuildException(ite);", "-                    } catch (final ClassNotFoundException cnfe) {", "-                        throw new BuildException(cnfe);", "-                    } catch (final InstantiationException ie) {", "-                        throw new BuildException(ie);", "-                    } catch (final IllegalAccessException iae) {", "-                        throw new BuildException(iae);", "-                    } catch (final InvocationTargetException ite) {", "-                        throw new BuildException(ite);", "+                } else if (o instanceof CloneableReader &&", "+                           o instanceof Reader) {", "+                    instream = ((CloneableReader) o).clone(instream);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52b0316367afb67c513003b613043236", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "3e919cffbef3ed88a7920a9e79c1b355524b3403", "commitAfterChange": "139cee57f7f134a2ac8b80776790d7129c24685f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     private IntrospectionHelper(final Class bean)", "signatureAfterChange": "     private IntrospectionHelper(final Class bean)", "diff": ["-        attributeTypes = new Hashtable();", "-        attributeSetters = new Hashtable();", "-        nestedTypes = new Hashtable();", "-        nestedCreators = new Hashtable();", "-        addTypeMethods = new ArrayList();", "-", "-            if (args.length == 1", "-                && java.lang.Void.TYPE.equals(returnType)", "+            if (args.length == 1 && java.lang.Void.TYPE.equals(returnType)", "-", "-", "-", "-", "-            if (\"addText\".equals(name)", "-                && java.lang.Void.TYPE.equals(returnType)", "-                && args.length == 1", "-                && java.lang.String.class.equals(args[0])) {", "+            if (\"addText\".equals(name) && java.lang.Void.TYPE.equals(returnType)", "+                && args.length == 1 && java.lang.String.class.equals(args[0])) {", "-", "-                       && args.length == 1", "-                       && !args[0].isArray()) {", "+                       && args.length == 1 && !args[0].isArray()) {", "-                AttributeSetter as", "-                    = createAttributeSetter(m, args[0], propName);", "+                AttributeSetter as = createAttributeSetter(m, args[0], propName);", "-", "-            } else if (name.startsWith(\"create\")", "-                       && !returnType.isArray()", "-                       && !returnType.isPrimitive()", "-                       && args.length == 0) {", "+            } else if (name.startsWith(\"create\") && !returnType.isArray()", "+                       && !returnType.isPrimitive() && args.length == 0) {", "-                    nestedCreators.put(propName, new NestedCreator(m) {", "-                        Object create(", "-                            Project project, Object parent, Object ignore)", "-                            throws InvocationTargetException,", "-                            IllegalAccessException {", "-                            return m.invoke(parent, new Object[] {});", "-                        }", "-                    });", "+                    nestedCreators.put(propName, new CreateNestedCreator(m));", "-                       && java.lang.Void.TYPE.equals(returnType)", "-                       && args.length == 1", "-                       && !java.lang.String.class.equals(args[0])", "-                       && !args[0].isArray()", "-                       && !args[0].isPrimitive()) {", "-", "+                && java.lang.Void.TYPE.equals(returnType) && args.length == 1", "+                && !java.lang.String.class.equals(args[0])", "+                && !args[0].isArray() && !args[0].isPrimitive()) {", "-                        constructor =", "-                            args[0].getConstructor(new Class[] {});", "+                        constructor = args[0].getConstructor(new Class[] {});", "-                            args[0].getConstructor(new Class[] {", "-                                Project.class});", "+                            args[0].getConstructor(new Class[] {Project.class});", "-                    final Constructor c = constructor;", "-                    nestedCreators.put(propName, new NestedCreator(m) {", "-                            boolean isPolyMorphic() {", "-                                return true;", "-                            }", "-", "-                            Class getElementClass() {", "-                                return c.getDeclaringClass();", "-                            }", "-", "-                            Object create(", "-                                Project project, Object parent, Object child)", "-                                throws InvocationTargetException,", "-                                IllegalAccessException, InstantiationException {", "-                                if (child != null) {", "-                                    // Empty", "-                                } else if (c.getParameterTypes().length == 0) {", "-                                    child = c.newInstance(new Object[] {});", "-                                } else {", "-                                    child = c.newInstance(new Object[] {", "-                                        project});", "-                                }", "-                                if (child instanceof  PreSetDef.PreSetDefinition) {", "-                                    child = ((PreSetDef.PreSetDefinition) child)", "-                                        .createObject(project);", "-                                }", "-                                return child;", "-                            }", "-", "-                            void store(Object parent, Object child)", "-                                throws InvocationTargetException,", "-                                IllegalAccessException, InstantiationException {", "-                                m.invoke(parent, new Object[] {child});", "-                            }", "-", "-                        });", "+                    nestedCreators.put(propName, new AddNestedCreator(m,", "+                        constructor, AddNestedCreator.ADD_CONFIGURED));", "-                       && java.lang.Void.TYPE.equals(returnType)", "-                       && args.length == 1", "-                       && !java.lang.String.class.equals(args[0])", "-                       && !args[0].isArray()", "-                       && !args[0].isPrimitive()) {", "-", "+                && java.lang.Void.TYPE.equals(returnType) && args.length == 1", "+                && !java.lang.String.class.equals(args[0])", "+                && !args[0].isArray() && !args[0].isPrimitive()) {", "-                        constructor =", "-                            args[0].getConstructor(new Class[] {});", "+                        constructor = args[0].getConstructor(new Class[] {});", "-                            args[0].getConstructor(new Class[] {", "-                                Project.class});", "+                            args[0].getConstructor(new Class[] {Project.class});", "-                    final Constructor c = constructor;", "-                    nestedCreators.put(propName, new NestedCreator(m) {", "-                            boolean isPolyMorphic() {", "-                                return true;", "-                            }", "-", "-                            Class getElementClass() {", "-                                return c.getDeclaringClass();", "-                            }", "-", "-                            Object create(", "-                                Project project, Object parent, Object child)", "-                                throws InvocationTargetException,", "-                                       IllegalAccessException, InstantiationException {", "-                                if (child != null) {", "-                                    // ignore", "-                                } else if (c.getParameterTypes().length == 0) {", "-                                    child = c.newInstance(new Object[] {});", "-                                } else {", "-                                    child = c.newInstance(new Object[] {", "-                                        project});", "-                                }", "-                                if (child instanceof  PreSetDef.PreSetDefinition) {", "-                                    child = ((PreSetDef.PreSetDefinition) child)", "-                                        .createObject(project);", "-                                }", "-                                m.invoke(parent, new Object[] {child});", "-                                return child;", "-                            }", "-                        });", "+                    nestedCreators.put(propName, new AddNestedCreator(m,", "+                        constructor, AddNestedCreator.ADD));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68a04a0c30ee53d0db0794de4eb11355", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/cvslib/ChangeLogTask.java", "commitBeforeChange": "49ac8075b87fecb96138ec2fd569af101aa80743", "commitAfterChange": "7eb6ca9aa8b38b24196a2b43bb11429e8e651048", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        validate();", "+        File savedDir = m_dir; // may be altered in validate", "+        try {", "-        final Properties userList = new Properties();", "+            validate();", "-        loadUserlist( userList );", "+            final Properties userList = new Properties();", "+            ", "+            loadUserlist( userList );", "+            ", "+            for( Enumeration e = m_cvsUsers.elements(); ", "+                 e.hasMoreElements(); ) {", "+                final CvsUser user = (CvsUser)e.nextElement();", "+                user.validate();", "+                userList.put( user.getUserID(), user.getDisplayname() );", "+            }", "+            ", "+            final Commandline command = new Commandline();", "+            command.setExecutable( \"cvs\" );", "+            command.createArgument().setValue( \"log\" );", "-        for( Enumeration e = m_cvsUsers.elements(); e.hasMoreElements(); )", "-        {", "-            final CvsUser user = (CvsUser)e.nextElement();", "-            user.validate();", "-            userList.put( user.getUserID(), user.getDisplayname() );", "-        }", "-", "-        final Commandline command = new Commandline();", "-        command.setExecutable( \"cvs\" );", "-        command.createArgument().setValue( \"log\" );", "-", "-        if( null != m_start )", "-        {", "-            final SimpleDateFormat outputDate =", "-                new SimpleDateFormat( \"yyyy-MM-dd\" );", "-", "-            // We want something of the form: -d \">=YYYY-MM-dd\"", "-            final String dateRange = \"-d >=\" + outputDate.format( m_start );", "-            command.createArgument().setValue( dateRange );", "-        }", "+            if( null != m_start ) {", "+                final SimpleDateFormat outputDate =", "+                    new SimpleDateFormat( \"yyyy-MM-dd\" );", "+                ", "+                // We want something of the form: -d \">=YYYY-MM-dd\"", "+                final String dateRange = \"-d >=\" ", "+                    + outputDate.format( m_start );", "+                command.createArgument().setValue( dateRange );", "+            }", "-        // Check if list of files to check has been specified", "-        if( !m_filesets.isEmpty() )", "-        {", "-            final Enumeration e = m_filesets.elements();", "-            while( e.hasMoreElements() )", "-            {", "-                final FileSet fileSet = (FileSet)e.nextElement();", "-                final DirectoryScanner scanner = fileSet.getDirectoryScanner( project );", "-                final String[] files = scanner.getIncludedFiles();", "-                for( int i = 0; i < files.length; i++ )", "-                {", "-                    command.createArgument().setValue( files[ i ] );", "+            // Check if list of files to check has been specified", "+            if( !m_filesets.isEmpty() ) {", "+                final Enumeration e = m_filesets.elements();", "+                while( e.hasMoreElements() ) {", "+                    final FileSet fileSet = (FileSet)e.nextElement();", "+                    final DirectoryScanner scanner = ", "+                        fileSet.getDirectoryScanner( project );", "+                    final String[] files = scanner.getIncludedFiles();", "+                    for( int i = 0; i < files.length; i++ ) {", "+                        command.createArgument().setValue( files[ i ] );", "+                    }", "-        }", "-        final ChangeLogParser parser = new ChangeLogParser( userList );", "-        final RedirectingStreamHandler handler =", "-            new RedirectingStreamHandler( parser );", "+            final ChangeLogParser parser = new ChangeLogParser( userList );", "+            final RedirectingStreamHandler handler =", "+                new RedirectingStreamHandler( parser );", "-        log( \"ChangeLog command: [\" + command.toString() + \"]\", Project.MSG_VERBOSE );", "+            log( \"ChangeLog command: [\" + command.toString() + \"]\", ", "+                 Project.MSG_VERBOSE );", "-        final Execute exe = new Execute( handler );", "-        exe.setWorkingDirectory( m_dir );", "-        exe.setCommandline( command.getCommandline() );", "-        exe.setAntRun( getProject() );", "-        try", "-        {", "-            final int resultCode = exe.execute();", "-            if( 0 != resultCode )", "-            {", "-                throw new BuildException( \"Error running cvs log\" );", "+            final Execute exe = new Execute( handler );", "+            exe.setWorkingDirectory( m_dir );", "+            exe.setCommandline( command.getCommandline() );", "+            exe.setAntRun( getProject() );", "+            try {", "+                final int resultCode = exe.execute();", "+                if( 0 != resultCode ) {", "+                    throw new BuildException( \"Error running cvs log\" );", "+                }", "+            } catch( final IOException ioe ) {", "+                throw new BuildException( ioe.toString() );", "-        }", "-        catch( final IOException ioe )", "-        {", "-            throw new BuildException( ioe.toString() );", "-        }", "-        final String errors = handler.getErrors();", "-        if( null != errors )", "-        {", "-            log( errors, Project.MSG_ERR );", "-        }", "+            final String errors = handler.getErrors();", "+            if( null != errors ) {", "+                log( errors, Project.MSG_ERR );", "+            }", "-        final CVSEntry[] entrySet = parser.getEntrySetAsArray();", "-        final CVSEntry[] filteredEntrySet = filterEntrySet( entrySet );", "-        writeChangeLog( filteredEntrySet );", "+            final CVSEntry[] entrySet = parser.getEntrySetAsArray();", "+            final CVSEntry[] filteredEntrySet = filterEntrySet( entrySet );", "+            writeChangeLog( filteredEntrySet );", "+", "+        } finally {", "+            m_dir = savedDir;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6a3a92ec2b765c8b13867ff56f82b48", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "149ce34431423cd116e5d7175ff281c30565aa6a", "commitAfterChange": "5460755b447223e93e926e11a08e4df4f0e0ddb5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     private IntrospectionHelper(final Class bean)", "signatureAfterChange": "     private IntrospectionHelper(final Class bean)", "diff": ["-        nestedStorers = new Hashtable();", "-                && (name.equals(\"add\") /*|| name.equals(\"addConfigured\")*/)) {", "+                && (name.equals(\"add\") || name.equals(\"addConfigured\"))) {", "-                nestedTypes.put(propName, returnType);", "-                nestedCreators.put(propName, new NestedCreator() {", "+                // Check if a create of this property is already present", "+                // add takes preference over create for CB purposes", "+                if (nestedCreators.get(propName) == null) {", "+                    nestedTypes.put(propName, returnType);", "+                    nestedCreators.put(propName, new NestedCreator() {", "-                        public Object create(Object parent)", "+                        public boolean isPolyMorphic() {", "+                            return false;", "+                        }", "+", "+                        public Class getElementClass() {", "+                            return null;", "+                        }", "+", "+                        public Object create(", "+                            Project project, Object parent, Object ignore)", "-", "+                        public void store(Object parent, Object child) {", "+                        }", "-                nestedStorers.remove(propName);", "-", "+                }", "-                    final Constructor c =", "-                        args[0].getConstructor(new Class[] {});", "+                    Constructor constructor = null;", "+                    try {", "+                        constructor =", "+                            args[0].getConstructor(new Class[] {});", "+                    } catch (NoSuchMethodException ex) {", "+                        constructor =", "+                            args[0].getConstructor(new Class[] {", "+                                Project.class});", "+                    }", "+                    final Constructor c = constructor;", "-                            public Object create(Object parent)", "-                                throws InvocationTargetException, IllegalAccessException, InstantiationException {", "-", "-                                Object o = c.newInstance(new Object[] {});", "-                                return o;", "+                            public boolean isPolyMorphic() {", "+                                return true;", "-                        });", "-                    nestedStorers.put(propName, new NestedStorer() {", "+                            public Class getElementClass() {", "+                                return c.getDeclaringClass();", "+                            }", "+", "+                            public Object create(", "+                                Project project, Object parent, Object child)", "+                                throws InvocationTargetException,", "+                                IllegalAccessException, InstantiationException {", "+                                if (child != null) {", "+                                    return child;", "+                                } else if (c.getParameterTypes().length == 0) {", "+                                    return c.newInstance(new Object[] {});", "+                                } else {", "+                                    return c.newInstance(new Object[] {", "+                                        project});", "+                                }", "+                            }", "-                                throws InvocationTargetException, IllegalAccessException, InstantiationException {", "+                                throws InvocationTargetException,", "+                                IllegalAccessException, InstantiationException {", "-                    final Constructor c =", "-                        args[0].getConstructor(new Class[] {});", "+                    Constructor constructor = null;", "+                    try {", "+                        constructor =", "+                            args[0].getConstructor(new Class[] {});", "+                    } catch (NoSuchMethodException ex) {", "+                        constructor =", "+                            args[0].getConstructor(new Class[] {", "+                                Project.class});", "+                    }", "+                    final Constructor c = constructor;", "-                            public Object create(Object parent)", "-                                throws InvocationTargetException, IllegalAccessException, InstantiationException {", "+                            public boolean isPolyMorphic() {", "+                                return true;", "+                            }", "-                                Object o = c.newInstance(new Object[] {});", "-                                m.invoke(parent, new Object[] {o});", "-                                return o;", "+                            public Class getElementClass() {", "+                                return c.getDeclaringClass();", "+                            }", "+", "+                            public Object create(", "+                                Project project, Object parent, Object child)", "+                                throws InvocationTargetException,", "+                                       IllegalAccessException, InstantiationException {", "+                                if (child != null) {", "+                                    // ignore", "+                                } else if (c.getParameterTypes().length == 0) {", "+                                    child = c.newInstance(new Object[] {});", "+                                } else {", "+                                    child = c.newInstance(new Object[] {", "+                                        project});", "+                                }", "+                                m.invoke(parent, new Object[] {child});", "+                                return child;", "+                            }", "+                            public void store(Object parent, Object child)", "+                                throws InvocationTargetException,", "+                                       IllegalAccessException, InstantiationException {", "+", "-                    nestedStorers.remove(name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec79c995d16648bcb686c502d0880432", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "3ce64dd501a7e5dfd84967399cc4c68c643de810", "commitAfterChange": "b941f2ef443cbbaec2b995b3c34958067c4979c3", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 45, "signatureBeforeChange": "     private ResourceCollection validate()", "signatureAfterChange": "     private void validate()", "diff": ["-     */", "-    private ResourceCollection validate() {", "-", "-        // treat empty nested text as no text", "-        sanitizeText();", "-", "-        // if binary check if incompatible attributes are used", "-        if (binary) {", "-            if (destinationFile == null) {", "-                throw new BuildException(", "-                    \"destfile attribute is required for binary concatenation\");", "-            }", "-            if (textBuffer != null) {", "-                throw new BuildException(", "-                    \"Nested text is incompatible with binary concatenation\");", "-            }", "-            if (encoding != null || outputEncoding != null) {", "-                throw new BuildException(", "-                    \"Seting input or output encoding is incompatible with binary\"", "-                    + \" concatenation\");", "-            }", "-            if (filterChains != null) {", "-                throw new BuildException(", "-                    \"Setting filters is incompatible with binary concatenation\");", "-            }", "-            if (fixLastLine) {", "-                throw new BuildException(", "-                    \"Setting fixlastline is incompatible with binary concatenation\");", "-            }", "-            if (header != null || footer != null) {", "-                throw new BuildException(", "-                    \"Nested header or footer is incompatible with binary concatenation\");", "-            }", "-        }", "-        if (destinationFile != null && outputWriter != null) {", "-            throw new BuildException(", "-                \"Cannot specify both a destination file and an output writer\");", "-        }", "-        // Sanity check our inputs.", "-        if (rc == null && textBuffer == null) {", "-            // Nothing to concatenate!", "-            throw new BuildException(", "-                \"At least one resource must be provided, or some text.\");", "-        }", "-        if (rc != null) {", "-            // If using resources, disallow inline text. This is similar to", "-            // using GNU 'cat' with file arguments -- stdin is simply", "-            // ignored.", "-            if (textBuffer != null) {", "-                throw new BuildException(", "-                    \"Cannot include inline text when using resources.\");", "-            }", "-            Restrict noexistRc = new Restrict();", "-            noexistRc.add(NOT_EXISTS);", "-            noexistRc.add(rc);", "-            for (Iterator i = noexistRc.iterator(); i.hasNext();) {", "-                log(i.next() + \" does not exist.\", Project.MSG_ERR);", "-            }", "-            if (destinationFile != null) {", "-                for (Iterator i = rc.iterator(); i.hasNext();) {", "-                    Object o = i.next();", "-                    if (o instanceof FileResource) {", "-                        File f = ((FileResource) o).getFile();", "-                        if (FILE_UTILS.fileNameEquals(f, destinationFile)) {", "-                            throw new BuildException(\"Input file \\\"\"", "-                                + f + \"\\\" is the same as the output file.\");", "-                        }", "-                    }", "-                }", "-            }", "-            Restrict existRc = new Restrict();", "-            existRc.add(EXISTS);", "-            existRc.add(rc);", "-            boolean outofdate = destinationFile == null || forceOverwrite;", "-            if (!outofdate) {", "-                for (Iterator i = existRc.iterator(); !outofdate && i.hasNext();) {", "-                    Resource r = (Resource) i.next();", "-                    outofdate =", "-                        (r.getLastModified() == 0L", "-                         || r.getLastModified() > destinationFile.lastModified());", "-                }", "-            }", "-            if (!outofdate) {", "-                log(destinationFile + \" is up-to-date.\", Project.MSG_VERBOSE);", "-                return null; // no need to do anything", "-            }", "-            return existRc;", "-        } else {", "-            StringResource s = new StringResource();", "-            s.setProject(getProject());", "-            s.setValue(textBuffer.toString());", "-            return s;", "-        }", "-    }", "+     */", "+    private void validate() {", "+", "+        // treat empty nested text as no text", "+        sanitizeText();", "+", "+        // if binary check if incompatible attributes are used", "+        if (binary) {", "+            if (textBuffer != null) {", "+                throw new BuildException(", "+                    \"Nested text is incompatible with binary concatenation\");", "+            }", "+            if (encoding != null || outputEncoding != null) {", "+                throw new BuildException(", "+                    \"Setting input or output encoding is incompatible with binary\"", "+                    + \" concatenation\");", "+            }", "+            if (filterChains != null) {", "+                throw new BuildException(", "+                    \"Setting filters is incompatible with binary concatenation\");", "+            }", "+            if (fixLastLine) {", "+                throw new BuildException(", "+                    \"Setting fixlastline is incompatible with binary concatenation\");", "+            }", "+            if (header != null || footer != null) {", "+                throw new BuildException(", "+                    \"Nested header or footer is incompatible with binary concatenation\");", "+            }", "+        }", "+        if (destinationFile != null && outputWriter != null) {", "+            throw new BuildException(", "+                \"Cannot specify both a destination file and an output writer\");", "+        }", "+        // Sanity check our inputs.", "+        if (rc == null && textBuffer == null) {", "+            // Nothing to concatenate!", "+            throw new BuildException(", "+                \"At least one resource must be provided, or some text.\");", "+        }", "+        if (rc != null && textBuffer != null) {", "+            // If using resources, disallow inline text. This is similar to", "+            // using GNU 'cat' with file arguments--stdin is simply ignored.", "+            throw new BuildException(", "+                \"Cannot include inline text when using resources.\");", "+        }", "+    }"]}]}
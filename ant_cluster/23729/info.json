{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c64587216dd88c39647aa2d0d3c2e73", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ad24ff0c892603ce3c134271dad84a8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "4b3e0ee2041826e51ec60af99e7bcca7024bf676", "commitAfterChange": "ed3fafb887fef0afbcd90eef7f263fef3bde95d9", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private Object createdTypedObject( final String name,                                        final Class type )         throws Exception", "signatureAfterChange": "     private Object createTypedObject( final String name,                                       final Class type )         throws Exception", "diff": ["-    private Object createdTypedObject( final String name,", "-                                       final Class type )", "-        // Attempt to create the object", "-        final Object obj;", "-        try", "-        {", "-            final TypeFactory factory = m_typeManager.getFactory( DataType.class );", "-            obj = factory.create( name );", "-        }", "-        catch( final Exception e )", "-        {", "-            final String message =", "-                REZ.getString( \"create-typed-object.error\",", "-                               name,", "-                               type.getName() );", "-            throw new ConfigurationException( message, e );", "-        // Check the types", "-        if( !type.isInstance( obj ) )", "-            final String message =", "-                REZ.getString( \"mismatched-typed-object.error\", name, type.getName() );", "-        return obj;", "+     */", "+    private Object createTypedObject( final String name,", "+                                      final Class type )", "+        throws Exception", "+    {", "+        // Map the expected type to a role.  If found, attempt to create", "+        // an instance", "+        final RoleInfo roleInfo = m_roleManager.getRoleByType( type );", "+        if( roleInfo != null )", "+        {", "+            final TypeFactory factory = m_typeManager.getFactory( roleInfo.getType() );", "+            if( factory.canCreate( name ) )", "+            {", "+                return factory.create( name );", "+            }", "+        }", "+", "+        // Use the generic 'data-type' role.", "+        final TypeFactory factory = m_typeManager.getFactory( DataType.class );", "+        if( ! factory.canCreate( name ) )", "+        {", "+            throw new NoSuchPropertyException();", "+        }", "+        return factory.create( name );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5761ca63790facff451731f80eacf07", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/core/AntTask.java", "commitBeforeChange": "90933557a169db41cbbc635d29d5d68f4a95d94a", "commitAfterChange": "d2c225e3700130775183d20109426819f2b989ce", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void execute()         throws TaskException", "signatureAfterChange": "     protected Project getProject() throws Exception", "diff": ["-     */", "-    public void execute()", "-        throws TaskException", "+    protected Project getProject() throws Exception", "-        final Embeddor embeddor =", "-            (Embeddor)getContext().getService( Embeddor.class );", "-", "-        try", "-        {", "-            final Project project =", "-                embeddor.createProject( m_file.toString(),", "-                                        m_type,", "-                                        new Parameters() );", "-            final Workspace workspace =", "-                embeddor.createWorkspace( buildParameters() );", "-", "-            if( null == m_target )", "-            {", "-                m_target = project.getDefaultTargetName();", "-            }", "-", "-            workspace.executeProject( project, m_target );", "-        }", "-        catch( final Exception e )", "-        {", "-            throw new TaskException( e.toString(), e );", "-        }", "+        final Project project =", "+            getEmbeddor().createProject( m_file.toString(),", "+                                         m_type,", "+                                         new Parameters() );", "+        return project;"]}]}
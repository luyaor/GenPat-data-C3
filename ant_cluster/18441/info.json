{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b8162ab2f857a7a7b3c52353affdf7f0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ac7ff50465d95af7c44547234531e1f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Tar.java", "commitBeforeChange": "8a7fce7e2e6db1d736542cfb5a117223fc3b8f14", "commitAfterChange": "e503ebd4c7a3603efb6119fec72b3bbe3e9a4f58", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-            throw new BuildException(\"tarfile attribute must be set!\", ", "+            throw new BuildException(\"tarfile attribute must be set!\",", "-            throw new BuildException(\"tarfile is a directory!\", ", "+            throw new BuildException(\"tarfile is a directory!\",", "-            throw new BuildException(\"Can not write to the specified tarfile!\", ", "+            throw new BuildException(\"Can not write to the specified tarfile!\",", "-            ", "+", "-        ", "+", "-            throw new BuildException(\"You must supply either a basdir attribute or some nested filesets.\", ", "+            throw new BuildException(\"You must supply either a basdir attribute or some nested filesets.\",", "-        ", "+", "-            ", "+", "-            ", "+", "-            if (longFileMode.equalsIgnoreCase(TRUNCATE)) {", "+            if (longFileMode.isTruncateMode()) {", "-            else if (longFileMode.equalsIgnoreCase(FAIL) ||", "-                     longFileMode.equalsIgnoreCase(OMIT)) {", "+            else if (longFileMode.isFailMode() ||", "+                     longFileMode.isOmitMode()) {", "-        ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e51b0535590cdc4a59ecaa6abf40edd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Apt.java", "commitBeforeChange": "7924a0f5e56b0195b7a296b19ab42cb19ea409e6", "commitAfterChange": "00a70173b29f3778d39c6fdf664624ad739137d5", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public boolean isNoCompile()", "signatureAfterChange": "      public boolean isCompile()", "diff": ["-    public boolean isNoCompile() {", "-        return noCompile;", "+    public boolean isCompile() {", "+        return compile;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "241a81ba6138d818eef45810c41968a9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/vss/MSVSSHISTORY.java", "commitBeforeChange": "b5de6e5a6a5d41ba7e3d4aae0109c6838a59cbb2", "commitAfterChange": "b50fd138f8b9c08dc04ff70319e953d2450780a6", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void setStyle(BriefCodediffNofile attr)", "signatureAfterChange": "     public void setStyle(BriefCodediffNofile attr)", "diff": ["-        if (option.equals(\"brief\")) {", "-            m_Style = \"-B\";", "-        } else if (option.equals(\"codediff\")) {", "-            m_Style = \"-D\";", "-        } else if (option.equals(\"default\")) {", "+        if (option.equals(STYLE_BRIEF)) {", "+            m_Style = FLAG_BRIEF;", "+        } else if (option.equals(STYLE_CODEDIFF)) {", "+            m_Style = FLAG_CODEDIFF;", "+        } else if (option.equals(STYLE_DEFAULT)) {", "-        } else if (option.equals(\"nofile\")) {", "-            m_Style = \"-F-\";", "+        } else if (option.equals(STYLE_NOFILE)) {", "+            m_Style = FLAG_NO_FILE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5774a43acf4340fe209734057a4fcf29", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/frontend/org/apache/ant/cli/Commandline.java", "commitBeforeChange": "65b70febb53b077317c4d678291f9af547c3d116", "commitAfterChange": "f9d1c1691c7e9d80b793f5178f6113c949fc2441", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected void addBuildListeners(ExecutionManager execManager)          throws ConfigException", "signatureAfterChange": "     protected void addBuildListeners(Frame eventSource)          throws FrontendException", "diff": ["-    protected void addBuildListeners(ExecutionManager execManager)", "-         throws ConfigException {", "+    protected void addBuildListeners(Frame eventSource)", "+         throws FrontendException {", "-        execManager.addBuildListener(logger);", "+        eventSource.addBuildListener(logger);", "-                execManager.addBuildListener(listener);", "+                eventSource.addBuildListener(listener);", "-                throw new ConfigException(\"Unable to instantiate listener \"", "+                throw new FrontendException(\"Unable to instantiate listener \"", "-                throw new ConfigException(\"Unable to instantiate listener \"", "+                throw new FrontendException(\"Unable to instantiate listener \""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61ca8635613c7d87072ba86d3e888681", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/configuration/DefaultConfigurer.java", "commitBeforeChange": "c6a798ef68e969311121bbe219367ffcc01bc621", "commitAfterChange": "bba92ec2234c85ea1ff3ec3e4e2bb45adaaf3197", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "      protected boolean setValue( final Object object,                                  Object value,                                  final Method method,                                 final Class sourceClass,                                 final String source )         throws ConfigurationException", "signatureAfterChange": "      protected boolean setValue( final Object object,                                  Object value,                                  final Method method,                                 final Class sourceClass,                                 final String source )         throws ConfigurationException", "diff": ["-        if( !parameterType.isAssignableFrom( sourceClass ) )", "+        try", "-            try", "+            value = m_converter.convert( parameterType, value );", "+        }", "+        catch( final ConverterException ce )", "+        {", "+            if( DEBUG )", "-                value = m_converter.convert( parameterType, object );", "+                m_logger.debug( \"Failed to find converter \", ce );", "-            catch( final ConverterException ce )", "-            {", "-                return false;", "-            }", "-            catch( final Exception e )", "-            {", "-                throw new ConfigurationException( \"Error converting attribute for \" + ", "-                                                  method.getName(),", "-                                                  e );", "-            }", "+", "+            return false;", "+        }", "+        catch( final Exception e )", "+        {", "+            throw new ConfigurationException( \"Error converting attribute for \" + ", "+                                              method.getName(),", "+                                              e );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72eca6f1f587d1251acd3f17bcf3e450", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antlibs/system/org/apache/ant/antlib/system/Parallel.java", "commitBeforeChange": "65b70febb53b077317c4d678291f9af547c3d116", "commitAfterChange": "f9d1c1691c7e9d80b793f5178f6113c949fc2441", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void execute() throws ExecutionException", "signatureAfterChange": "     public void execute() throws AntException", "diff": ["-    public void execute() throws ExecutionException {", "+    public void execute() throws AntException {", "-                if (t instanceof ExecutionException &&", "+                if (t instanceof AntException &&", "-                    firstLocation = ((ExecutionException) t).getLocation();", "+                    firstLocation = ((AntException) t).getLocation();", "-            if (firstException instanceof ExecutionException) {", "-                throw (ExecutionException) firstException;", "+            if (firstException instanceof AntException) {", "+                throw (AntException) firstException;", "-                throw new ExecutionException(firstException);", "+                throw new SystemException(firstException);", "-            throw new ExecutionException(exceptionMessage.toString(),", "+            throw new SystemException(exceptionMessage.toString(),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b29c1d26bc474647f373cec9b75144f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Tar.java", "commitBeforeChange": "8a7fce7e2e6db1d736542cfb5a117223fc3b8f14", "commitAfterChange": "e503ebd4c7a3603efb6119fec72b3bbe3e9a4f58", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "      protected void tarFile(File file, TarOutputStream tOut, String vPath,                            TarFileSet tarFileSet)         throws IOException", "signatureAfterChange": "      protected void tarFile(File file, TarOutputStream tOut, String vPath,                            TarFileSet tarFileSet)         throws IOException", "diff": ["-        ", "+", "-                if (longFileMode.equalsIgnoreCase(OMIT)) {", "+                if (longFileMode.isOmitMode()) {", "-                } else if (longFileMode.equalsIgnoreCase(WARN)) {", "-                    log(\"Entry: \"+ vPath + \" longer than \" + ", "+                } else if (longFileMode.isWarnMode()) {", "+                    log(\"Entry: \"+ vPath + \" longer than \" +", "-                    if (!longWarningGiven) {                        ", "+                    if (!longWarningGiven) {", "-                } else if (longFileMode.equalsIgnoreCase(FAIL)) {", "+                } else if (longFileMode.isFailMode()) {", "-                        \"Entry: \"+ vPath + \" longer than \" + ", "+                        \"Entry: \"+ vPath + \" longer than \" +", "-            } ", "+            }", "-            ", "+", "-            ", "+", "-            ", "-            tOut.closeEntry();        ", "+", "+            tOut.closeEntry();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ec627f315748eef3c2943e1a56102e7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/Main.java", "commitBeforeChange": "b2f64523014169998fef78fd04ae1a0163350b9e", "commitAfterChange": "faf459ad4374779901d12681be4a77b8c119e04e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String[] args)", "signatureAfterChange": "     public static void main(String[] args)", "diff": ["-            if(!settings.isWizzardMode()) {", "+            if(!settings.isWizardMode()) {", "-                // We are in wizzard mode. Create it.", "+                // We are in wizard mode. Create it.", "-                    \"org.apache.tools.ant.gui.resources.buildFileWizzard\");", "-                Wizzard wiz = new Wizzard(", "+                    \"org.apache.tools.ant.gui.resources.buildFileWizard\");", "+                Wizard wiz = new Wizard(", "-                // results of the wizzard.", "-                wiz.addWizzardListener(new WizzardListener() {", "+                // results of the wizard.", "+                wiz.addWizardListener(new WizardListener() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfab446d619740972715cdc47a71305e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/cvslib/ChangeLogWriter.java", "commitBeforeChange": "1d4c24c80f746b199fb3ee48ff98fbee300b211a", "commitAfterChange": "f7c0a7741dae7278cf3ec00c0440548f188a2f59", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private void printEntry( final PrintWriter output, final CVSEntry entry )", "signatureAfterChange": "     private void printEntry( final PrintWriter output, final CVSEntry entry )", "diff": ["-        final Iterator iterator = entry.getFiles().iterator();", "-        while( iterator.hasNext() )", "+        final Enumeration enumeration = entry.getFiles().elements();", "+        while( enumeration.hasMoreElements() )", "-            final RCSFile file = (RCSFile)iterator.next();", "+            final RCSFile file = (RCSFile)enumeration.nextElement();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2a142edf5cc13ca51e6c9b6b497597d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/PropertyFile.java", "commitBeforeChange": "62f2142b3431002933bf1281d244c164ed962890", "commitAfterChange": "6cbeee38fa5502baa5d75036ad2c0418cf808d56", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private void readFile() throws BuildException", "signatureAfterChange": "      private void readFile() throws BuildException", "diff": ["-        m_properties = new Properties();", "+        properties = new Properties();", "-            if (m_propertyfile.exists())", "+            if (propertyfile.exists())", "-                log(\"Updating property file: \"+m_propertyfile.getAbsolutePath());", "+                log(\"Updating property file: \"+propertyfile.getAbsolutePath());", "-                    fis = new FileInputStream(m_propertyfile);", "+                    fis = new FileInputStream(propertyfile);", "-                    m_properties.load(bis);", "+                    properties.load(bis);", "-                    m_propertyfile.getAbsolutePath());", "+                    propertyfile.getAbsolutePath());", "-                    out = new FileOutputStream(m_propertyfile.getAbsolutePath());", "+                    out = new FileOutputStream(propertyfile.getAbsolutePath());"]}]}
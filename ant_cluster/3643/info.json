{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cb47e48e7ed2b403fb77744c398017fc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97151cac7361fcac27710dde455570ac", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "10c41029aeaba31241f1a85f9b02591b357e20b6", "commitAfterChange": "818cb969adef1df0f5918ba62f80f62502d5e53e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public JUnitTestRunner(JUnitTest test)", "signatureAfterChange": "      public JUnitTestRunner(JUnitTest test, boolean haltOnError,                            boolean haltOnFailure)", "diff": ["-    public JUnitTestRunner(JUnitTest test) {", "-        junitTest = test;", "+", "+    public JUnitTestRunner(JUnitTest test, boolean haltOnError,", "+                           boolean haltOnFailure) {", "+        this.junitTest = test;", "+        this.haltOnError = haltOnError;", "+        this.haltOnFailure = haltOnFailure;", "+", "-            if (junitTest.getPrintxml()) {", "-                if (test.getOutfile() != null", "-                    && test.getOutfile().length() > 0) {", "-", "-                    addFormatter(new XMLJUnitResultFormatter(", "-                                     new PrintWriter(", "-                                         new FileWriter(test.getOutfile(), false)", "-                                             )", "-                                         )", "-                        );", "-                } else {", "-                    addFormatter(new XMLJUnitResultFormatter(", "-                                     new PrintWriter(", "-                                         new OutputStreamWriter(System.out), true)", "-                                         )", "-                        );", "-                }", "-            }", "-", "-            if (junitTest.getPrintsummary()) {", "-                addFormatter(new SummaryJUnitResultFormatter());", "-            }", "-", "-            Class testClass = Class.forName(junitTest.getName());", "-", "+            Class testClass = Class.forName(test.getName());", "+            ", "-", "+            ", "-", "-            res = new TestResult();", "-            res.addListener(this);", "-            for (int i=0; i < formatters.size(); i++) {", "-                res.addListener((TestListener)formatters.elementAt(i));", "-            }", "-", "+            ", "-            retCode = 2;", "-", "-            fireStartTestSuite();", "-            for (int i=0; i < formatters.size(); i++) {", "-                ((TestListener)formatters.elementAt(i)).addError(null, e);", "-            }", "-            junitTest.setCounts(1, 0, 1);", "-            junitTest.setRunTime(0);", "-            fireEndTestSuite();", "+            retCode = ERRORS;", "+            exception = e;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a76b2414b9b9ca7a3045d80afbc32b14", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecTask.java", "commitBeforeChange": "7f98652146940a5c7714f209979d74fe2092af34", "commitAfterChange": "61320f305f5ccb78963b3a9fe607f3505ec635e4", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+     */", "+        checkConfiguration();", "+        if (isValidOs()) {", "+            runExec(prepareExec());", "+        }", "+    }", "-        String[] orig = cmdl.getCommandline();", "-        ", "-        int err = -1; // assume the worst", "-", "-            return;", "-        if (myos.toLowerCase().indexOf(\"windows\") >= 0) {", "-            if (!dir.equals(project.resolveFile(\".\"))) {", "-                if (myos.toLowerCase().indexOf(\"nt\") >= 0) {", "-                    cmdl = new Commandline();", "-                    cmdl.setExecutable(\"cmd\");", "-                    cmdl.addValue(\"/c\");", "-                    cmdl.addValue(\"cd\");", "-                    cmdl.addValue(dir.getAbsolutePath());", "-                    cmdl.addValue(\"&&\");", "-                    cmdl.addLine(orig);", "-                } else {", "-                    String ant = project.getProperty(\"ant.home\");", "-                    if (ant == null) {", "-                        throw new BuildException(\"Property 'ant.home' not found\", location);", "-                    }", "-                ", "-                    String antRun = project.resolveFile(ant + \"/bin/antRun.bat\").toString();", "-                    cmdl = new Commandline();", "-                    cmdl.setExecutable(antRun);", "-                    cmdl.addValue(dir.getAbsolutePath());", "-                    cmdl.addLine(orig);", "-                }", "-            }", "-        } else {", "-            String ant = project.getProperty(\"ant.home\");", "-            if (ant == null) throw new BuildException(\"Property 'ant.home' not found\", location);", "-            String antRun = project.resolveFile(ant + \"/bin/antRun\").toString();", "-", "-            cmdl = new Commandline();", "-            cmdl.setExecutable(antRun);", "-            cmdl.addValue(dir.getAbsolutePath());", "-            cmdl.addLine(orig);", "-        }", "-            // show the command", "-            log(cmdl.toString(), Project.MSG_VERBOSE);", "-", "-            final Execute exe = new Execute(createHandler(), createWatchdog());", "-            exe.setEnvironment(env.getVariables());"]}]}
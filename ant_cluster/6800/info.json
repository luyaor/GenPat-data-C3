{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dcd383dc1d8d0b50b4d4b9e30f211cca", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1aed0a8df40353468adf65077075f0ed", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/PropertyHelper.java", "commitBeforeChange": "f9de93c35b4a4327c0cf29afd25ecf9c486f7647", "commitAfterChange": "902b72ec83e985a35e2e9fc26e41e2319cc7ea1e", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public Object parseProperties(String value) throws BuildException", "signatureAfterChange": "     public Object parseProperties(String value) throws BuildException", "diff": ["-        if (value == null || \"\".equals(value)) {", "-            return value;", "-        }", "-        ParsePosition pos = new ParsePosition(0);", "-        Object o = parseNextProperty(value, pos);", "-        if (o != null && pos.getIndex() == value.length()) {", "-            return o;", "-        }", "-        StringBuffer sb = new StringBuffer(value.length() * 2);", "-        if (o == null) {", "-            sb.append(value.charAt(pos.getIndex()));", "-            pos.setIndex(pos.getIndex() + 1);", "-        } else {", "-            sb.append(o);", "-        }", "-        while (pos.getIndex() < value.length()) {", "-            o = parseNextProperty(value, pos);", "-            if (o == null) {", "-                sb.append(value.charAt(pos.getIndex()));", "-                pos.setIndex(pos.getIndex() + 1);", "-            } else {", "-                sb.append(o);", "-            }", "-        }", "-        return sb.toString();", "+        return new ParseProperties(getProject(), getExpanders(), this)", "+            .parseProperties(value);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e88f1fde7de8dac304cb97d00aaea066", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "c4782a847fbe7aacd68eca6fb71bff313e94e645", "commitAfterChange": "551b204c245d4861589a0be50f453507e3c72e81", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "     public String toURI(String path)", "signatureAfterChange": "     public String toURI(String path)", "diff": ["-", "-        int i = 0;", "-        for (; i < len; i++) {", "-            ch = path.charAt(i);", "-            // if it's not an ASCII character, break here, and use UTF-8 encoding", "-            if (ch >= 128)", "-                break;", "-            if (gNeedEscaping[ch]) {", "-                sb.append('%');", "-                sb.append(gAfterEscaping1[ch]);", "-                sb.append(gAfterEscaping2[ch]);", "-                // record the fact that it's escaped", "-            }", "-            else {", "-                sb.append((char)ch);", "-            }", "+        try {", "+            sb.append(Locator.encodeUri(path));", "+        } catch (UnsupportedEncodingException exc) {", "+            throw new BuildException(exc);", "-", "-        // we saw some non-ascii character", "-        if (i < len) {", "-            // get UTF-8 bytes for the remaining sub-string", "-            byte[] bytes = null;", "-            byte b;", "-            try {", "-                bytes = path.substring(i).getBytes(Locator.URI_ENCODING);", "-            } catch (java.io.UnsupportedEncodingException e) {", "-                // should never happen", "-                throw new BuildException(e);", "-            }", "-            len = bytes.length;", "-", "-            // for each byte", "-            for (i = 0; i < len; i++) {", "-                b = bytes[i];", "-                // for non-ascii character: make it positive, then escape", "-                if (b < 0) {", "-                    ch = b + 256;", "-                    sb.append('%');", "-                    sb.append(gHexChs[ch >> 4]);", "-                    sb.append(gHexChs[ch & 0xf]);", "-                }", "-                else if (gNeedEscaping[b]) {", "-                    sb.append('%');", "-                    sb.append(gAfterEscaping1[b]);", "-                    sb.append(gAfterEscaping2[b]);", "-                }", "-                else {", "-                    sb.append((char)b);", "-                }", "-            }", "-        }", "-"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "51473eadca1d5ec651670cba08ae2fc0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b0166dddc8004c354053cffb6fe2103", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Project.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": "     public final Vector<Target> topoSort(String[] root, Hashtable<String, Target> targetTable,                                  boolean returnAll) throws BuildException", "signatureAfterChange": "     public final Vector<Target> topoSort(final String[] root, final Hashtable<String, Target> targetTable,                                  final boolean returnAll) throws BuildException", "diff": ["-    public final Vector<Target> topoSort(String[] root, Hashtable<String, Target> targetTable,", "-                                 boolean returnAll) throws BuildException {", "-        Vector<Target> ret = new VectorSet<Target>();", "-        Hashtable<String, String> state = new Hashtable<String, String>();", "-        Stack<String> visiting = new Stack<String>();", "+    public final Vector<Target> topoSort(final String[] root, final Hashtable<String, Target> targetTable,", "+                                 final boolean returnAll) throws BuildException {", "+        final Vector<Target> ret = new VectorSet<Target>();", "+        final Hashtable<String, String> state = new Hashtable<String, String>();", "+        final Stack<String> visiting = new Stack<String>();", "-            String st = (String) (state.get(root[i]));", "+            final String st = (state.get(root[i]));", "-        StringBuffer buf = new StringBuffer(\"Build sequence for target(s)\");", "+        final StringBuffer buf = new StringBuffer(\"Build sequence for target(s)\");", "-        Vector<Target> complete = (returnAll) ? ret : new Vector<Target>(ret);", "-        for (Enumeration<String> en = targetTable.keys(); en.hasMoreElements();) {", "-            String curTarget = en.nextElement();", "-            String st = state.get(curTarget);", "+        final Vector<Target> complete = (returnAll) ? ret : new Vector<Target>(ret);", "+        for (final Enumeration<String> en = targetTable.keys(); en.hasMoreElements();) {", "+            final String curTarget = en.nextElement();", "+            final String st = state.get(curTarget);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e0f6c4a0dc91da221c31c8ce9799d79", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/optional/depend/DependScanner.java", "commitBeforeChange": "7829faf36a6f4bc565e0e8b92aa85cc948718176", "commitAfterChange": "9caeed5081071d6a2de28844d0a724918f8c6d86", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public synchronized void scan() throws IllegalStateException", "signatureAfterChange": "     public synchronized void scan() throws IllegalStateException", "diff": ["-        included = new Vector();", "+        included = new Vector<String>();", "-            Class analyzerClass = Class.forName(analyzerClassName);", "-            analyzer = (DependencyAnalyzer) analyzerClass.newInstance();", "+            Class<? extends DependencyAnalyzer> analyzerClass = Class.forName(analyzerClassName)", "+                    .asSubclass(DependencyAnalyzer.class);", "+            analyzer = analyzerClass.newInstance();", "-        for (Enumeration e = additionalBaseDirs.elements(); e.hasMoreElements();) {", "-            File additionalBaseDir = (File) e.nextElement();", "+        for (Enumeration<File> e = additionalBaseDirs.elements(); e.hasMoreElements();) {", "+            File additionalBaseDir = e.nextElement();", "-        for (Enumeration e = rootClasses.elements(); e.hasMoreElements();) {", "-            String rootClass = (String) e.nextElement();", "+        for (Enumeration<String> e = rootClasses.elements(); e.hasMoreElements();) {", "+            String rootClass = e.nextElement();", "-        Enumeration e = analyzer.getClassDependencies();", "+        Enumeration<String> e = analyzer.getClassDependencies();", "-        Hashtable parentSet = new Hashtable();", "+        Hashtable<String, String> parentSet = new Hashtable<String, String>();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b7df16b81e6966b9641e464ae6320ab8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "065f3c2a4d90def702776563f2c76290", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "780ad2d725a7f88a26d8ea33a804fa5c8becfc8f", "commitAfterChange": "31deeb980977afb1cfe3234eb17a1360aab49d5e", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "     private NestedCreator createAddTypeCreator(             Project project, Object parent, String elementName) throws BuildException", "signatureAfterChange": "     private NestedCreator createAddTypeCreator(             Project project, Object parent, String elementName) throws BuildException", "diff": ["-        Object addedObject = null;", "-        Method addMethod = null;", "-        Class clazz = helper.getComponentClass(elementName);", "-        if (clazz == null) {", "-            return null;", "-        }", "-        addMethod = findMatchingMethod(clazz, addTypeMethods);", "-        if (addMethod == null) {", "-            return null;", "-        }", "-        addedObject = helper.createComponent(elementName);", "-        if (addedObject == null) {", "-            return null;", "-        }", "-        Object rObject = addedObject;", "-        if (addedObject instanceof PreSetDef.PreSetDefinition) {", "-            rObject = ((PreSetDef.PreSetDefinition) addedObject).createObject(project);", "-        }", "-        final Object nestedObject = addedObject;", "-        final Object realObject = rObject;", "+        MethodAndObject restricted =  createRestricted(", "+            helper, elementName, addTypeMethods);", "+        MethodAndObject topLevel = createTopLevel(", "+            helper, elementName, addTypeMethods);", "-        return new NestedCreator(addMethod) {", "+        if (restricted == null && topLevel == null) {", "+            return null;", "+        }", "+", "+        if (restricted != null && topLevel != null) {", "+            throw new BuildException(", "+                \"ambiguous: type and component definitions for \"", "+                + elementName);", "+        }", "+", "+        MethodAndObject methodAndObject", "+            = restricted != null ? restricted : topLevel;", "+        ", "+        Object rObject = methodAndObject.object;", "+        if (methodAndObject.object instanceof PreSetDef.PreSetDefinition) {", "+            rObject = ((PreSetDef.PreSetDefinition) methodAndObject.object)", "+                .createObject(project);", "+        }", "+        final Object nestedObject = methodAndObject.object;", "+        final Object realObject = rObject;", "+ ", "+        return new NestedCreator(methodAndObject.method) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cfaa36d9b56eeec087fa9ded36aab46", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/RhinoScriptTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testExample1()", "signatureAfterChange": "      @Test     public void testExample1()", "diff": ["+    @Test", "-        executeTarget(\"example1\");", "-        int index = getLog().indexOf(\"1\");", "+        buildRule.executeTarget(\"example1\");", "+        int index = buildRule.getLog().indexOf(\"1\");", "-        index = getLog().indexOf(\"4\", index);", "+        index = buildRule.getLog().indexOf(\"4\", index);", "-        index = getLog().indexOf(\"9\", index);", "+        index = buildRule.getLog().indexOf(\"9\", index);", "-        index = getLog().indexOf(\"16\", index);", "+        index = buildRule.getLog().indexOf(\"16\", index);", "-        index = getLog().indexOf(\"25\", index);", "+        index = buildRule.getLog().indexOf(\"25\", index);", "-        index = getLog().indexOf(\"36\", index);", "+        index = buildRule.getLog().indexOf(\"36\", index);", "-        index = getLog().indexOf(\"49\", index);", "+        index = buildRule.getLog().indexOf(\"49\", index);", "-        index = getLog().indexOf(\"64\", index);", "+        index = buildRule.getLog().indexOf(\"64\", index);", "-        index = getLog().indexOf(\"81\", index);", "+        index = buildRule.getLog().indexOf(\"81\", index);", "-        index = getLog().indexOf(\"100\", index);", "+        index = buildRule.getLog().indexOf(\"100\", index);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c2dade5a8094443252dc30e6e4e214c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/unix/SymlinkTest.java", "commitBeforeChange": "5f81fd801113c7f3bb4b734d0be4337ef482c0fd", "commitAfterChange": "db105dffc51d91759c8e656226bc6c4a5855d0ef", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void testSymbolicLinkUtilsMethods() throws Exception", "signatureAfterChange": "      public void testSymbolicLinkUtilsMethods() throws Exception", "diff": ["+            //apparently OS X knows a symlink is a symlink even if the target is missing:", "+            boolean mac = Os.isFamily(Os.FAMILY_MAC);", "+", "-            assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isSymbolicLink(f.getParentFile(),", "-                                          f.getName()));", "+            assertTrue(su.isSymbolicLink(f.getAbsolutePath()) == mac);", "+            assertTrue(su.isSymbolicLink(f.getParentFile(), f.getName()) == mac);", "-            assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isSymbolicLink(f.getParentFile(),", "-                                          f.getName()));", "+            assertTrue(su.isSymbolicLink(f.getAbsolutePath()) == mac);", "+            assertTrue(su.isSymbolicLink(f.getParentFile(), f.getName()) == mac);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "99d462e01434d15d2b414a6f9a1b7292", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "267b5c3935c46a83ab990c16a5402bc1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "34f1e4e99194055534eb0cf61bc0b9c74c79e4b0", "commitAfterChange": "58d96d54fb9bfabc28e6daf9a4bc138dfbddd81b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private static void printVersion()", "signatureAfterChange": "      private static void printVersion()", "diff": ["-        System.out.println( BANNER );", "-        System.out.println();", "+        try {", "+            Properties props = new Properties();", "+            InputStream in =", "+                Main.class.getResourceAsStream(\"/org/apache/tools/ant/version.txt\");", "+            props.load(in);", "+            in.close();", "+", "+            String lSep = System.getProperty(\"line.separator\");", "+            StringBuffer msg = new StringBuffer();", "+            msg.append(\"Ant version \");", "+            msg.append(props.getProperty(\"VERSION\"));", "+            msg.append(\" compiled on \");", "+            msg.append(props.getProperty(\"DATE\"));", "+            msg.append(lSep);", "+            System.out.println(msg.toString());", "+        } catch (IOException ioe) {", "+            System.err.println(\"Could not load the version information.\");", "+            System.err.println(ioe.getMessage());", "+        } catch (NullPointerException npe) {", "+            System.err.println(\"Could not load the version information.\");", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "462845c33645c2690c98c3d92acc22db", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/Main.java", "commitBeforeChange": "b641968fade3f4f16c1676f2b5f06c6b4344ab08", "commitAfterChange": "bb67dc44d84a49fc3d8a14b02b014ac5acd41877", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String[] args)", "signatureAfterChange": "     public static void main(String[] args)", "diff": ["+        Args settings = new Args(args);", "+", "+", "-            AppContext context = new AppContext(f);", "-            EventResponder resp = new EventResponder(context);", "-            Antidote gui = new Antidote(context);", "-", "-            JMenuBar menu = context.getActions().createMenuBar();", "-            f.setJMenuBar(menu);", "-            f.getContentPane().add(BorderLayout.CENTER, gui);", "-            f.getContentPane().add(BorderLayout.NORTH, ", "-                                   context.getActions().createToolBar());", "+            AppContext context = new AppContext(f);", "-            // Add the project selection menu.", "-            ProjectSelectionMenu ps = new ProjectSelectionMenu(context);", "-            ps.insertInto(menu);", "+            if(!settings.isWizzardMode()) {", "+                EventResponder resp = new EventResponder(context);", "+                Antidote gui = new Antidote(context);", "-            // Add debugging items.", "-            if(context.isDebugOn()) {", "-                context.getEventBus().addMember(", "-                    EventBus.VETOING, new EventDebugMonitor());", "+                JMenuBar menu = context.getActions().createMenuBar();", "+                f.setJMenuBar(menu);", "+                f.getContentPane().add(BorderLayout.CENTER, gui);", "+                f.getContentPane().add(BorderLayout.NORTH, ", "+                                       context.getActions().createToolBar());", "+                ", "+                // Add the project selection menu.", "+                ProjectSelectionMenu ps = new ProjectSelectionMenu(context);", "+                ps.insertInto(menu);", "+                ", "+                // Add debugging items.", "+                if(settings.isDebugMode()) {", "+                    context.getEventBus().addMember(", "+                        EventBus.VETOING, new EventDebugMonitor());", "+                }", "+", "+                // Load a build file if one is provided.", "+                if(settings.getBuildFile() != null) {", "+                    LoadFileCmd load = new LoadFileCmd(context);", "+                    load.setFile(new File(settings.getBuildFile()));", "+                    load.run();", "+                }", "+            }", "+            else {", "+                // We are in wizzard mode. Create it.", "+                ResourceManager resources = new ResourceManager(", "+                    \"org.apache.tools.ant.gui.resources.buildFileWizzard\");", "+                Wizzard wiz = new Wizzard(", "+                    resources, ACSFactory.getInstance().createProject());", "+                // XXX this is temporary for testing. Eventually", "+                // it will launch the regular antidote screen with the", "+                // results of the wizzard.", "+                wiz.addWizzardListener(new WizzardListener() {", "+                        public void finished(Object model) {", "+                            System.out.println(model);", "+                            System.exit(0);", "+                        }", "+                        public void canceled() {", "+                            System.exit(0);", "+                        }", "+", "+                    });", "+", "+                f.getContentPane().add(BorderLayout.CENTER, wiz);", "-            f.pack();", "+            f.pack();", "-            // XXX this will change once full command line argument parsing", "-            // is supported.", "-            if(args.length > 0) {", "-                LoadFileCmd load = new LoadFileCmd(context);", "-                load.setFile(new File(args[0]));", "-                load.run();", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ead8cd26de8bd26f1220d9b9b2ba3c7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "7f98652146940a5c7714f209979d74fe2092af34", "commitAfterChange": "61320f305f5ccb78963b3a9fe607f3505ec635e4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public String[] getCommandline()", "signatureAfterChange": "     public String[] getCommandline()", "diff": ["-        return cmdl;", "+        String[] commandLine = cmdl;", "+", "+        if (workingDirectory != null && ", "+            !antWorkingDirectory.equals(workingDirectory.getAbsolutePath())) {", "+", "+            if (myos.toLowerCase().indexOf(\"windows\") >= 0 &&", "+                myos.toLowerCase().indexOf(\"nt\") >= 0) {", "+", "+                commandLine = new String[cmdl.length+5];", "+                commandLine[0] = \"cmd\";", "+                commandLine[1] = \"/c\";", "+                commandLine[2] = \"cd\";", "+                commandLine[3] = workingDirectory.getAbsolutePath();", "+                commandLine[4] = \"&&\";", "+                System.arraycopy(cmdl, 0, commandLine, 5, cmdl.length);", "+", "+            } else {", "+                commandLine = new String[cmdl.length+2];", "+                commandLine[0] = antRun;", "+                commandLine[1] = workingDirectory.getAbsolutePath();", "+                System.arraycopy(cmdl, 0, commandLine, 2, cmdl.length);", "+            }", "+        }", "+        ", "+        return commandLine;"]}]}
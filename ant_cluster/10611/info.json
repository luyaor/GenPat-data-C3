{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "065b65d7205127f92de04585dee8e198", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a445e2af540b1379027ea9bc1bef429", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "4cbbf3629a15a78615a3ce63ffe6f3fc028b172d", "commitAfterChange": "2c04d7e833b4e5dab1a3c5ddfe14b572aea8c112", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 53, "signatureBeforeChange": "      private void writeVersionNeededToExtractAndGeneralPurposeBits(final int                                                                   zipMethod,                                                                   final boolean                                                                   utfFallback,                                                                   final boolean                                                                   zip64)         throws IOException", "signatureAfterChange": "      private int versionNeededToExtract(final int zipMethod, final boolean zip64)", "diff": ["-    private void writeVersionNeededToExtractAndGeneralPurposeBits(final int", "-                                                                  zipMethod,", "-                                                                  final boolean", "-                                                                  utfFallback,", "-                                                                  final boolean", "-                                                                  zip64)", "-        throws IOException {", "-", "-        // CheckStyle:MagicNumber OFF", "-        int versionNeededToExtract = INITIAL_VERSION;", "-        if (zipMethod == DEFLATED && raf == null) {", "-            // requires version 2 as we are going to store length info", "-            // in the data descriptor", "-            versionNeededToExtract = DATA_DESCRIPTOR_MIN_VERSION;", "-        if (zip64) {", "-            versionNeededToExtract = ZIP64_MIN_VERSION;", "-        }", "-        // CheckStyle:MagicNumber ON", "-        // version needed to extract", "-        writeOut(ZipShort.getBytes(versionNeededToExtract));", "-        // general purpose bit flag", "-        writeOut(b.encode());", "+    private int versionNeededToExtract(final int zipMethod, final boolean zip64) {", "+        if (zip64) {", "+            return ZIP64_MIN_VERSION;", "+        }", "+        // requires version 2 as we are going to store length info", "+        // in the data descriptor", "+        return (isDeflatedToOutputStream(zipMethod)) ?", "+                DATA_DESCRIPTOR_MIN_VERSION :", "+                INITIAL_VERSION;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d50a6dae58f51611274725055574b151", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "3ce64dd501a7e5dfd84967399cc4c68c643de810", "commitAfterChange": "b941f2ef443cbbaec2b995b3c34958067c4979c3", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 50, "signatureBeforeChange": "     private void concatenate(char[] buffer, Writer writer, Reader in)         throws IOException", "signatureAfterChange": "      private Reader getFilteredReader(Reader r)", "diff": ["-    /** Concatenate a single reader to the writer using buffer */", "-    private void concatenate(char[] buffer, Writer writer, Reader in)", "-        throws IOException {", "-        if (filterChains != null) {", "-            ChainReaderHelper helper = new ChainReaderHelper();", "-            helper.setBufferSize(BUFFER_SIZE);", "-            helper.setPrimaryReader(in);", "-            helper.setFilterChains(filterChains);", "-            helper.setProject(getProject());", "-            in = new BufferedReader(helper.getAssembledReader());", "-        }", "-        while (true) {", "-            int nRead = in.read(buffer, 0, buffer.length);", "-            if (nRead == -1) {", "-                break;", "-            }", "-            writer.write(buffer, 0, nRead);", "-        }", "-        writer.flush();", "-    }", "+", "+    private Reader getFilteredReader(Reader r) {", "+        if (filterChains == null) {", "+            return r;", "+        }", "+        ChainReaderHelper helper = new ChainReaderHelper();", "+        helper.setBufferSize(BUFFER_SIZE);", "+        helper.setPrimaryReader(r);", "+        helper.setFilterChains(filterChains);", "+        helper.setProject(getProject());", "+        //used to be a BufferedReader here, but we should be buffering lower:", "+        return helper.getAssembledReader();", "+    }"]}]}
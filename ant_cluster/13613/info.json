{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea3e572ab1e9dff612540f5592152764", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29430a24b6e87ed7e014f56e4ce9113f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/common/org/apache/ant/common/antlib/AntLibFactory.java", "commitBeforeChange": "83dc385bd01fbc8ee2fb166b9a5605bdc6958d76", "commitAfterChange": "bf844382c856f7b51c56024189c93f11d34cb720", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "     Object createTaskInstance(Class taskClass, String localName)          throws InstantiationException, IllegalAccessException,         ExecutionException;", "signatureAfterChange": "     Object createComponent(Class componentClass, String localName)          throws InstantiationException, IllegalAccessException,         ExecutionException;", "diff": ["-    Object createTaskInstance(Class taskClass, String localName)", "+    Object createComponent(Class componentClass, String localName)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59f4bacdc527c58e9af906c89ef4c439", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/CoreExecService.java", "commitBeforeChange": "b83132393de1bdee68b42caea0604469c85d0306", "commitAfterChange": "af074bc65d9fdde7982618162dfdab2dfae06e5f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void executeTask(Task task) throws AntException", "signatureAfterChange": "     public void executeTask(Task task) throws AntException", "diff": ["-        AspectValueCollection aspectValues = null;", "+        NamespaceValueCollection namespaceValues = null;", "-            aspectValues = model.getAspectAttributes();", "+            namespaceValues = model.getNamespaceAttributes();", "-        frame.executeTask(task, aspectValues);", "+        frame.executeTask(task, namespaceValues);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d378e877f2255fb8a08766a29571d38", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/Frame.java", "commitBeforeChange": "b83132393de1bdee68b42caea0604469c85d0306", "commitAfterChange": "af074bc65d9fdde7982618162dfdab2dfae06e5f", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "     protected void executeTask(Task task, AspectValueCollection aspectValues)          throws AntException", "signatureAfterChange": "     protected void executeTask(Task task,                                NamespaceValueCollection namespaceValues)          throws AntException", "diff": ["-    protected void executeTask(Task task, AspectValueCollection aspectValues)", "+    protected void executeTask(Task task,", "+                               NamespaceValueCollection namespaceValues)", "-            Object aspectContext = aspect.preExecuteTask(task, aspectValues);", "+            Object aspectContext = aspect.preExecuteTask(task, namespaceValues);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b74d7d3f9e04ae7a7ebb9231017cee48", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/embed/src/java/org/apache/tools/ant/taskdefs/optional/JXPath.java", "commitBeforeChange": "fb0294a2006c35861daf19aea79e24a3ca4e1df4", "commitAfterChange": "9f081e617876d628a3523b8c14c72fadfd6f99ac", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 7, "signatureBeforeChange": "          public Object getProperty( Object p, String ns, String name )", "signatureAfterChange": "          public Object getPropertyHook( String ns, String name , boolean user)", "diff": ["-    ", "-    public Object getProperty( Object p, String ns, String name ) {", "-        if( ! name.startsWith(PREFIX) )", "-            return null;", "-        name=name.substring( PREFIX.length() );", "-", "-", "-        //Object o=jxpathCtx.getValue( name );", "-        //System.out.println(\"JXPath: getProperty \" + ns + \" \" + name + \"=\" + o + o.getClass());", "-", "-        String result = \"\";", "-        ", "-        Iterator iter = jxpathCtx.iterate(name);", "-        ", "-        if(iter==null){", "-            return \"null\";", "-        }", "-        ", "-        result += iter.next();", "-        ", "-        while (iter.hasNext()) {", "-            Object o = iter.next();", "-            //System.out.println(\"JXPath: getProperty \" + ns + \" \" + name + \"=\" + o + o.getClass());", "-            result += \", \"+o;", "-        }", "-        ", "-        return result;", "+", "+        public Object getPropertyHook( String ns, String name , boolean user) {", "+            if( ! name.startsWith(PREFIX) )", "+                return null;", "+            name=name.substring( PREFIX.length() );", "+", "+", "+            //Object o=jxpathCtx.getValue( name );", "+            //System.out.println(\"JXPath: getProperty \" + ns + \" \" + name + \"=\" + o + o.getClass());", "+", "+            String result = \"\";", "+", "+            Iterator iter = jxpathCtx.iterate(name);", "+", "+            if(iter==null){", "+                return \"null\";", "+            }", "+", "+            result += iter.next();", "+", "+            while (iter.hasNext()) {", "+                Object o = iter.next();", "+                //System.out.println(\"JXPath: getProperty \" + ns + \" \" + name + \"=\" + o + o.getClass());", "+                result += \", \"+o;", "+            }", "+", "+            return result;", "+        }"]}]}
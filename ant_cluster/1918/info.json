{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "48a1212a10d19fc1430e97e67607cb79", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "709184ea90453187f8dd96388f3450f7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/filterreaders/src/main/org/apache/tools/ant/types/AntFilterReader.java", "commitBeforeChange": "7265fdb8a846802089831647891b0218858fdc7b", "commitAfterChange": "8aa365e5d7d7f14ac4e0002be30968df77b08b56", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public final Hashtable getParams()", "signatureAfterChange": "      public final Parameter[] getParams()", "diff": ["-    public final Hashtable getParams() {", "-        final int size = parameters.size();", "-        final Hashtable params = new Hashtable();", "-        for (int i = 0; i < size; i++) {", "-            final Parameter param = (Parameter) parameters.elementAt(i);", "-            final String name = param.getName();", "-            final String value = param.getValue();", "-            if (name != null && value != null) {", "-                params.put(name, value);", "-            }", "-        }", "+    public final Parameter[] getParams() {", "+        Parameter[] params = new Parameter[parameters.size()];", "+        parameters.copyInto(params);", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c054777b2264f73cc094c250325e6e09", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/Commandline.java", "commitBeforeChange": "29cf33f78f16638f62f3471816c1879e0a8190f2", "commitAfterChange": "6d7c130971fb273119d770033fc4ea42f899349f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public String[] getArguments()", "signatureAfterChange": "     public String[] getArguments()", "diff": ["-        final String [] result;", "-        result = new String[definition.size()];", "-        definition.copyInto(result);", "-        return result;", "+        Vector result = new Vector(definition.size()*2);", "+        for (int i=0; i<definition.size(); i++) {", "+            Argument arg = (Argument) definition.elementAt(i);", "+            String[] s = arg.getParts();", "+            for (int j=0; j<s.length; j++) {", "+                result.addElement(s[j]);", "+            }", "+        }", "+        ", "+        String [] res = new String[result.size()];", "+        result.copyInto(res);", "+        return res;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fe54db2c506f54910f92522ba7e9fe84", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0884d810a02f4516423e1f35d543ccf0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Jar.java", "commitBeforeChange": "bb05312e66a2403d2405988dbaf0830cde65df7c", "commitAfterChange": "da5f3bfd256e383926c6ece58dba15a7d4bd5761", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "     protected static void grabFilesAndDirs(String file, List dirs,                                                  List files)         throws IOException", "signatureAfterChange": "     protected static void grabFilesAndDirs(String file, List<String> dirs,                                                  List<String> files)         throws IOException", "diff": ["-    protected static void grabFilesAndDirs(String file, List dirs,", "-                                                 List files)", "+    protected static void grabFilesAndDirs(String file, List<String> dirs,", "+                                                 List<String> files)", "-            Enumeration entries = zf.getEntries();", "-            HashSet dirSet = new HashSet();", "+            Enumeration<org.apache.tools.zip.ZipEntry> entries = zf.getEntries();", "+            HashSet<String> dirSet = new HashSet<String>();", "-                    (org.apache.tools.zip.ZipEntry) entries.nextElement();", "+                    entries.nextElement();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ce201f6d354e4f6f94a68bd4f7a87e0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javac.java", "commitBeforeChange": "1fa24dc235453d37357a5ffb190f5a3c15a49295", "commitAfterChange": "bba4624fac50881dcc5e81de48fffe05f92e2116", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 83, "signatureBeforeChange": "      private boolean hasPackageInfo(File[] newFiles)", "signatureAfterChange": "      private void lookForPackageInfos(File srcDir, File[] newFiles)", "diff": ["+    private void lookForPackageInfos(File srcDir, File[] newFiles) {", "+        for (int i = 0; i < newFiles.length; i++) {", "+            File f = newFiles[i];", "+            if (!f.getName().equals(\"package-info.java\")) {", "+                continue;", "+            String path = FILE_UTILS.removeLeadingPath(srcDir, f).", "+                    replace(File.separatorChar, '/');", "+            String suffix = \"/package-info.java\";", "+            if (!path.endsWith(suffix)) {", "+                log(\"anomalous package-info.java path: \" + path, Project.MSG_WARN);", "+                continue;", "+            }", "+            String pkg = path.substring(0, path.length() - suffix.length());", "+            packageInfos.put(pkg, Long.valueOf(f.lastModified()));", "-    private boolean hasPackageInfo(File[] newFiles) {", "-        for (int i = 0; i < newFiles.length; ++i) {", "-            if (newFiles[i].getName().equals(PACKAGE_INFO_JAVA)) {", "-                return true;", "-        return false;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a2810f9e1f25c7529b79fc745879ed0b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b176f6fe99e694a1d001c7bce003981", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteOn.java", "commitBeforeChange": "a9659b5c2ea9ebd7990ecef24b478e59243fea8c", "commitAfterChange": "0d7f1ce40f2ca5e16a8c99bf9c185d01cf6fa1cb", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 15, "signatureBeforeChange": "      protected void runExec(Execute exe) throws BuildException", "signatureAfterChange": "      protected void runExec(Execute exe) throws BuildException", "diff": ["+        int totalFiles = 0;", "+        int totalDirs = 0;", "+        boolean haveExecuted = false;", "+                        totalFiles++;", "+                        totalDirs++;", "+                        haveExecuted = true;", "+                    }", "+                    fileNames.removeAllElements();", "+                    baseDirs.removeAllElements();", "+                }", "+            }", "+", "+            for (int i = 0; i < filelists.size(); i++) {", "+                FileList list = (FileList) filelists.elementAt(i);", "+                File base = list.getDir(getProject());", "+                String[] names = list.getFiles(getProject());", "+", "+                for (int j = 0; j < names.length; j++) {", "+                    File f = new File(base, names[j]);", "+                    if ((f.isFile() && !\"dir\".equals(type))", "+                        || (f.isDirectory() && !\"file\".equals(type))) {", "+", "+                        if (f.isFile()) {", "+                            totalFiles++;", "+                        } else {", "+                            totalDirs++;", "+                        }", "+", "+                        fileNames.addElement(names[j]);", "+                        baseDirs.addElement(base);", "+                    }", "+                }", "+", "+                if (fileNames.size() == 0 && skipEmpty) {", "+                    log(\"Skipping filelist for directory \"", "+                        + base + \". It is empty.\", Project.MSG_INFO);", "+                    continue;", "+                }", "+", "+                if (!parallel) {", "+                    String[] s = new String[fileNames.size()];", "+                    fileNames.copyInto(s);", "+                    for (int j = 0; j < s.length; j++) {", "+                        String[] command = getCommandline(s[j], base);", "+                        log(Commandline.describeCommand(command), ", "+                            Project.MSG_VERBOSE);", "+                        exe.setCommandline(command);", "+                        runExecute(exe);", "+                        haveExecuted = true;", "-                String[] s = new String[fileNames.size()];", "-                fileNames.copyInto(s);", "-                File[] b = new File[baseDirs.size()];", "-                baseDirs.copyInto(b);", "-                String[] command = getCommandline(s, b);", "-                log(Commandline.describeCommand(command), Project.MSG_VERBOSE);", "-                exe.setCommandline(command);", "-                runExecute(exe);", "+                runParallel(exe, fileNames, baseDirs);", "+                haveExecuted = true;", "+            }", "+", "+            if (haveExecuted) {", "+                log(\"Applied \" + cmdl.getExecutable() + \" to \"", "+                    + totalFiles + \" file\"", "+                    + (totalFiles != 1 ? \"s\" : \"\") + \" and \"", "+                    + totalDirs + \" director\"", "+                    + (totalDirs != 1 ? \"ies\" : \"y\") + \".\",", "+                    verbose ? Project.MSG_INFO : Project.MSG_VERBOSE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc3e54f504372bc8bec85f94cae4e6f5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteOn.java", "commitBeforeChange": "767f4f57854f2a3285ef43583d0bb97be37f5399", "commitAfterChange": "95b658dec86bbd7866411b1df9b51250d1a8a0a9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      protected void runExec(Execute exe) throws BuildException", "signatureAfterChange": "      protected void runExec(Execute exe) throws BuildException", "diff": ["-            Vector v = new Vector();", "+                Vector v = new Vector();", "+                File base = fs.getDir(project);", "-                    String[] s = ds.getIncludedFiles();", "+                    String[] s = getFiles(base, ds);", "-                        v.addElement(new File(fs.getDir(project), s[j]).getAbsolutePath());", "+                        v.addElement(s[j]);", "-                    String[] s = ds.getIncludedDirectories();", "+                    String[] s = getDirs(base, ds);;", "-                        v.addElement(new File(fs.getDir(project), s[j]).getAbsolutePath());", "-                    }", "-                }", "-            }", "-", "-            String[] s = new String[v.size()];", "-            v.copyInto(s);", "-", "-            int err = -1;", "-", "-            if (parallel) {", "-                String[] command = getCommandline(s);", "-                log(\"Executing \" + Commandline.toString(command), Project.MSG_VERBOSE);", "-                exe.setCommandline(command);", "-                err = exe.execute();", "-                if (err != 0) {", "-                    if (failOnError) {", "-                        throw new BuildException(\"Exec returned: \"+err, ", "-                                                 location);", "-                    } else {", "-                        log(\"Result: \" + err, Project.MSG_ERR);", "+                        v.addElement(s[j]);", "-            } else {", "-                for (int i=0; i<s.length; i++) {", "-                    String[] command = getCommandline(s[i]);", "-                    log(\"Executing \" + Commandline.toString(command), Project.MSG_VERBOSE);", "+                String[] s = new String[v.size()];", "+                v.copyInto(s);", "+", "+                int err = -1;", "+                ", "+                if (parallel) {", "+                    String[] command = getCommandline(s, base);", "+                    log(\"Executing \" + Commandline.toString(command), ", "+                        Project.MSG_VERBOSE);", "+                        }", "+                    }", "+", "+                } else {", "+                    for (int j=0; j<s.length; j++) {", "+                        String[] command = getCommandline(s[j], base);", "+                        log(\"Executing \" + Commandline.toString(command), ", "+                            Project.MSG_VERBOSE);", "+                        exe.setCommandline(command);", "+                        err = exe.execute();", "+                        if (err != 0) {", "+                            if (failOnError) {", "+                                throw new BuildException(\"Exec returned: \"+err, ", "+                                                         location);", "+                            } else {", "+                                log(\"Result: \" + err, Project.MSG_ERR);", "+                            }"]}]}
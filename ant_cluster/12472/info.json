{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c799e2e01f823e5734e5f686f426c35", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9328e053dd5760d384338f7f2e5541ca", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/launch/Locator.java", "commitBeforeChange": "36d84a61dc70dd6bbc8ee25d5261de5f2874e837", "commitAfterChange": "f3939727d9e11188d266beed7e9dfa8e2fd0bc9a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public static URL getClassLocationURL(Class theClass)          throws MalformedURLException", "signatureAfterChange": "     public static String fromURI(String uri)", "diff": ["-    public static URL getClassLocationURL(Class theClass)", "-         throws MalformedURLException {", "-        String className = theClass.getName().replace('.', '/') + \".class\";", "-        URL classRawURL = theClass.getClassLoader().getResource(className);", "-", "-        String fileComponent = classRawURL.getFile();", "-        if (classRawURL.getProtocol().equals(\"file\")) {", "-            // Class comes from a directory of class files rather than", "-            // from a jar.", "-            int classFileIndex = fileComponent.lastIndexOf(className);", "-            if (classFileIndex != -1) {", "-                fileComponent = fileComponent.substring(0, classFileIndex);", "-            }", "-", "-            return new URL(\"file:\" + fileComponent);", "-        } else if (classRawURL.getProtocol().equals(\"jar\")) {", "-            // Class is coming from a jar. The file component of the URL", "-            // is actually the URL of the jar file", "-            int classSeparatorIndex = fileComponent.lastIndexOf(\"!\");", "-            if (classSeparatorIndex != -1) {", "-                fileComponent = fileComponent.substring(0, classSeparatorIndex);", "-            }", "-", "-            return new URL(fileComponent);", "-        } else {", "-            // its running out of something besides a jar.", "-            // We just return the Raw URL as a best guess", "-            return classRawURL;", "-        }", "+     */", "+    public static String fromURI(String uri) {", "+        if (!uri.startsWith(\"file:\")) {", "+            throw new IllegalArgumentException(\"Can only handle file: URIs\");", "+        }", "+        if (uri.startsWith(\"file://\")) {", "+            uri = uri.substring(7);", "+        } else {", "+            uri = uri.substring(5);", "+        }", "+", "+        uri = uri.replace('/', File.separatorChar);", "+        if (File.pathSeparatorChar == ';' && uri.startsWith(\"\\\\\") && uri.length() > 2", "+            && Character.isLetter(uri.charAt(1)) && uri.charAt(2) == ':') {", "+            uri = uri.substring(1);", "+        }", "+", "+        StringBuffer sb = new StringBuffer();", "+        CharacterIterator iter = new StringCharacterIterator(uri);", "+        for (char c = iter.first(); c != CharacterIterator.DONE;", "+             c = iter.next()) {", "+            if (c == '%') {", "+                char c1 = iter.next();", "+                if (c1 != CharacterIterator.DONE) {", "+                    int i1 = Character.digit(c1, 16);", "+                    char c2 = iter.next();", "+                    if (c2 != CharacterIterator.DONE) {", "+                        int i2 = Character.digit(c2, 16);", "+                        sb.append((char) ((i1 << 4) + i2));", "+                    }", "+                }", "+            } else {", "+                sb.append(c);", "+            }", "+        }", "+", "+        String path = sb.toString();", "+        return path;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a89c3969a599fcb99ca812c0c278a5a9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "716e0cac2c969f99ad5c0f394fa176b73faced34", "commitAfterChange": "c4ad42ed39b270e1752007d643aa4499ed437ef2", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "     public String toURI(String path)", "signatureAfterChange": "     public String toURI(String path)", "diff": ["+        int len = path.length(), ch;", "-        CharacterIterator iter = new StringCharacterIterator(path);", "-        for (char c = iter.first(); c != CharacterIterator.DONE;", "-             c = iter.next()) {", "-            if (c < 256 && isSpecial[c]) {", "+        int i = 0;", "+        for (; i < len; i++) {", "+            ch = path.charAt(i);", "+            // if it's not an ASCII character, break here, and use UTF-8 encoding", "+            if (ch >= 128)", "+                break;", "+            if (gNeedEscaping[ch]) {", "-                sb.append(escapedChar1[c]);", "-                sb.append(escapedChar2[c]);", "-            } else {", "-                sb.append(c);", "+                sb.append(gAfterEscaping1[ch]);", "+                sb.append(gAfterEscaping2[ch]);", "+                // record the fact that it's escaped", "+            }", "+            else {", "+                sb.append((char)ch);", "+", "+        // we saw some non-ascii character", "+        if (i < len) {", "+            // get UTF-8 bytes for the remaining sub-string", "+            byte[] bytes = null;", "+            byte b;", "+            try {", "+                bytes = path.substring(i).getBytes(\"UTF-8\");", "+            } catch (java.io.UnsupportedEncodingException e) {", "+                // should never happen", "+                throw new BuildException(e);", "+            }", "+            len = bytes.length;", "+", "+            // for each byte", "+            for (i = 0; i < len; i++) {", "+                b = bytes[i];", "+                // for non-ascii character: make it positive, then escape", "+                if (b < 0) {", "+                    ch = b + 256;", "+                    sb.append('%');", "+                    sb.append(gHexChs[ch >> 4]);", "+                    sb.append(gHexChs[ch & 0xf]);", "+                }", "+                else if (gNeedEscaping[b]) {", "+                    sb.append('%');", "+                    sb.append(gAfterEscaping1[b]);", "+                    sb.append(gAfterEscaping2[b]);", "+                }", "+                else {", "+                    sb.append((char)b);", "+                }", "+            }", "+        }", "+"]}]}
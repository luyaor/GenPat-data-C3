{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ae8ecc0c7e31ae10644e8d8d2b5ee9f1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b26593a0db70bb7d3e6fa9bdb3717d47", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ComponentManager.java", "commitBeforeChange": "65b70febb53b077317c4d678291f9af547c3d116", "commitAfterChange": "f9d1c1691c7e9d80b793f5178f6113c949fc2441", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void loadLib(String libLocation, boolean importAll,                         boolean autoImport)          throws ExecutionException", "signatureAfterChange": "     public void loadLib(URL libLocation, boolean importAll)          throws AntException", "diff": ["-    public void loadLib(String libLocation, boolean importAll,", "-                        boolean autoImport)", "-         throws ExecutionException {", "-        try {", "-            Map librarySpecs = new HashMap();", "-            libManager.loadLibs(librarySpecs, libLocation);", "-            Map newLibraries = libManager.configLibraries(frame.getInitConfig(),", "-                librarySpecs, antLibraries, libPathsMap);", "-", "-            antLibraries.putAll(newLibraries);", "-            Iterator i = antLibraries.keySet().iterator();", "-            while (i.hasNext()) {", "-                String libraryId = (String) i.next();", "-                boolean doAuto = autoImport", "-                     && libraryId.startsWith(Constants.ANT_LIB_PREFIX);", "-                if (importAll || doAuto) {", "-                    importLibrary(libraryId);", "-                }", "+    public void loadLib(URL libLocation, boolean importAll)", "+         throws AntException {", "+        Map newLibraries = libManager.loadLibs(libLocation);", "+        Iterator i = newLibraries.keySet().iterator();", "+        while (i.hasNext()) {", "+            String libraryId = (String) i.next();", "+            if (importAll) {", "+                importLibrary(libraryId);", "-        } catch (MalformedURLException e) {", "-            throw new ExecutionException(\"Unable to load libraries from \"", "-                 + libLocation, e);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6c63696cab7cd031c3bafc626adae33", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "3e2cbab6ba443daf0abf6e02535fb6cc1df72e04", "commitAfterChange": "b33d33d754378862953b0243500d94eaaf983923", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "     private Certificate[] getCertificates(File container, String entry)         throws IOException", "signatureAfterChange": "     private Certificate[] getCertificates(File container, String entry)         throws IOException", "diff": ["-        JarFile jarFile = null;", "-        InputStream is = null;", "-        try {", "-            jarFile = new JarFile(container);", "-            JarEntry ent = jarFile.getJarEntry(entry);", "-            if (ent != null) {", "-                // must read the input in order to obtain certificates", "-                is = new BufferedInputStream(jarFile.getInputStream(ent));", "-                byte[] b = new byte[BUFFER_SIZE];", "-                while (is.read(b, 0, BUFFER_SIZE) >= 0);", "-            }", "-            return ent == null ? null : ent.getCertificates();", "-        } finally {", "-            FileUtils.close(is);", "-            if (jarFile != null) {", "-                jarFile.close();", "-            }", "+        JarFile jarFile = (JarFile) jarFiles.get(container);", "+        if (jarFile == null) {", "+            return null;", "+        JarEntry ent = jarFile.getJarEntry(entry);", "+        return ent == null ? null : ent.getCertificates();"]}]}
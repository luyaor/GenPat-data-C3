{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d1b2811e90760af7d6b0222d0d60e036", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05b5d4032cf7b2b67d3aa149d5def4ab", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/starteam/StarTeamCheckout.java", "commitBeforeChange": "225893c4b96e202aae6654f8ab2354b307ad35ef", "commitAfterChange": "6409f0ec87cfcc04196be80e0c72aec39a76ec04", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private void processFile(com.starbase.starteam.File eachFile,                               java.io.File targetFolder )     throws IOException", "signatureAfterChange": "     private void processFile(com.starbase.starteam.File eachFile,                               java.io.File targetFolder )     throws IOException", "diff": ["+            if (!targetFolder.exists()) {", "+                if (targetFolder.mkdirs()) {", "+                    log(\"Creating folder: \" + targetFolder);", "+                } else {", "+                    throw new BuildException(", "+                        \"Failed to create local folder \" + targetFolder);", "+                }", "+            }", "+                if (!targetFolder.exists()) {", "+                    if (targetFolder.mkdirs()) {", "+                        log(\"Creating folder: \" + targetFolder);", "+                    } else {", "+                        throw new BuildException(", "+                            \"Failed to create local folder \" + targetFolder);", "+                    }", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bf11818ecb7867733f6627bd42ca138", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "125c25095617576e8a09ba7da6b29b8f7ded9492", "commitAfterChange": "be12707c63314ce0314959ff551e37fe59b83943", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void runBuild(ClassLoader systemLoader) throws BuildException", "signatureAfterChange": "     private void runBuild(ClassLoader systemLoader) throws BuildException", "diff": ["-            System.setSecurityManager(new SecurityManager() {", "-                                        public void checkExit(int status) {", "-                                            throw new ExitException(status);", "-                                        }", "-                                        ", "-                                        public void checkPermission(java.security.Permission p) {", "-                                        }", "-                                    });", "-                System.setSecurityManager(oldsm);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48c3d1613b6f655be001ca0441dd699e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/Mapper.java", "commitBeforeChange": "3375d671acfa1fceb3325dc54fda5484b9e19208", "commitAfterChange": "2ead66e52c56fbc1a59789187ddba634ebe4ae2d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void add(FileNameMapper fileNameMapper)", "signatureAfterChange": "     public void add(FileNameMapper fileNameMapper)", "diff": ["+        if (isReference()) {", "+            throw noChildrenAllowed();", "+        }", "-            container = new ContainerMapper();", "+            if (type == null && classname == null) {", "+                container = new CompositeMapper();", "+            } else {", "+                FileNameMapper m = getImplementation();", "+                if (m instanceof ContainerMapper) {", "+                    container = (ContainerMapper)m;", "+                } else {", "+                    throw new BuildException(String.valueOf(m)", "+                        + \" mapper implementation does not support nested mappers!\");", "+                }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "926903d53ed0440cd4380413852462ce", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/PlainJUnitResultFormatter.java", "commitBeforeChange": "76f5174e7c5e445a20eb0c1cbcb22f81e2c72503", "commitAfterChange": "c6d10f6ffcfc9ba5ebf41d7ea079047833f97642", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void endTest(Test test)", "signatureAfterChange": "     public void endTest(Test test)", "diff": ["-        if (failed) return;", "-        wri.println(\" took \" ", "-                    + nf.format((System.currentTimeMillis()-lastTestStart)", "-                                / 1000.0)", "-                    + \" sec\");", "+        synchronized (wri) {", "+            wri.print(\"Testcase: \" ", "+                      + JUnitVersionHelper.getTestCaseName((TestCase) test));", "+            if (Boolean.TRUE.equals(failed.get(test))) {", "+                return;", "+            }", "+            Long l = (Long) testStarts.get(test);", "+            wri.println(\" took \" ", "+                        + nf.format((System.currentTimeMillis()-l.longValue())", "+                                    / 1000.0)", "+                        + \" sec\");", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c0ba9a6216297ca9296f4a29b0d4f89", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/condition/Os.java", "commitBeforeChange": "7d868d2e29dd486468694de73f7293ddddaa030b", "commitAfterChange": "f3ddbffe3cff0b58c31e7e48b45aff172d39982e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public static boolean isOs(String family, String name, String arch,                                String version)", "signatureAfterChange": "     public static boolean isOs(String family, String name, String arch,                                String version)", "diff": ["+                        /*", "+                         * FIXME", "+                         *", "+                         * Need a better way to know which one runs CMD.EXE", "+                         * and wich COMMAND.COM.", "+                         *", "+                         * If we use a fixed list of names, we should rather", "+                         * use one for all win9x flavors as it is supposed to", "+                         * be a final list.", "+                         */", "+                          osName.indexOf(\"2003\") >= 0 ||"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf45ad8a01045c6d8335f0f9a372da84", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "e32249e2cbac5fe12c472ac1025f918914692605", "commitAfterChange": "74eb73ac3955572e481c07110e43949f8245e451", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void runBuild(ClassLoader systemLoader) throws BuildException", "signatureAfterChange": "     private void runBuild(ClassLoader systemLoader) throws BuildException", "diff": ["-        Project project = new Project();", "+        final Project project = new Project();", "-            ", "+            SecurityManager oldsm = System.getSecurityManager();", "+            System.setSecurityManager(new SecurityManager() {", "+                                        public void checkExit(int status) {", "+                                            throw new ExitException(status);", "+                                        }", "+                                        ", "+                                        public void checkPermission(java.security.Permission p) {", "+                                        }", "+                                    });", "+", "+                System.setSecurityManager(oldsm);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf08a96c323d1eb0b6fbba00d2931ff0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfee41f8b6fab10621d12a5186e5b4f0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/antlib/src/main/org/apache/tools/ant/SymbolTable.java", "commitBeforeChange": "2bcc3b328adcc97c10be2efba1077ccf28b92caa", "commitAfterChange": "4ad59f0fc5eb69936f4322c1394993d33299959b", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void verifyAdaptability(String role, Class clz)", "signatureAfterChange": " \tpublic Factory verifyAdaptability(String role, final Factory f)", "diff": ["-\tpublic void verifyAdaptability(String role, Class clz) {", "+\tpublic Factory verifyAdaptability(String role, final Factory f) {", "+\t    final Class clz = f.getOriginalClass();", "-\t\treturn;", "+\t\treturn f;", "-\t\t    adapterVerifier.invoke(null, ", "-\t\t\t\t\t   new Object[]{clz, project});", "+\t\t    adapterVerifier.invoke(null, new Object[]{clz, project});", "+\t\t    return new Factory(){", "+\t\t\t    public Object create(Project p) {", "+\t\t\t\tRoleAdapter ra = createAdapter(p);", "+\t\t\t\tra.setProxy(f.create(p));", "+\t\t\t\treturn ra;", "+\t\t\t    }", "+", "+\t\t\t    public Class getOriginalClass() {", "+\t\t\t\treturn clz;", "+\t\t\t    }", "+\t\t\t};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0057eef2630f72062366af066d149f1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/antlib/src/main/org/apache/tools/ant/SymbolTable.java", "commitBeforeChange": "1d2784e6d5429505b3b420e342992c22cd5373a6", "commitAfterChange": "6252354506953777f5b921b8746a54e7d317475a", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void verifyAdaptability(String role, Class clz)", "signatureAfterChange": "         public Factory verifyAdaptability(String role, final Factory f)", "diff": ["-\t */", "-\tpublic void verifyAdaptability(String role, Class clz) {", "-\t    if (interfaceMethod.getParameterTypes()[0].isAssignableFrom(clz)) {", "-\t\treturn;", "-\t    }", "-\t    if (adapterVerifier == null) {", "-\t\tString msg = \"Class \" + clz.getName() + ", "-\t\t    \" incompatible with role: \" + role;", "-\t\tthrow new BuildException(msg);", "-\t    }", "-\t    try {", "-\t\ttry {", "-\t\t    adapterVerifier.invoke(null, ", "-\t\t\t\t\t   new Object[]{clz, project});", "-\t\t}", "-\t\tcatch (InvocationTargetException ite) {", "-\t\t    throw ite.getTargetException();", "-\t\t}", "-\t    }", "-\t    catch(BuildException be) { throw be; }", "-\t    catch(Error err) {throw err; }", "-\t    catch(Throwable t) {", "-\t\tthrow new BuildException(t);", "-\t    }", "-\t}", "+         */", "+        public Factory verifyAdaptability(String role, final Factory f) {", "+            final Class clz = f.getOriginalClass();", "+            if (interfaceMethod.getParameterTypes()[0].isAssignableFrom(clz)) {", "+                return f;", "+            }", "+            if (adapterVerifier == null) {", "+                String msg = \"Class \" + clz.getName() +", "+                    \" incompatible with role: \" + role;", "+                throw new BuildException(msg);", "+            }", "+            try {", "+                try {", "+                    adapterVerifier.invoke(null, new Object[]{clz, project});", "+                    return new Factory(){", "+                            public Object create(Project p) {", "+                                RoleAdapter ra = createAdapter(p);", "+                                ra.setProxy(f.create(p));", "+                                return ra;", "+                            }", "+", "+                            public Class getOriginalClass() {", "+                                return clz;", "+                            }", "+                        };", "+                }", "+                catch (InvocationTargetException ite) {", "+                    throw ite.getTargetException();", "+                }", "+            }", "+            catch(BuildException be) { throw be; }", "+            catch(Error err) {throw err; }", "+            catch(Throwable t) {", "+                throw new BuildException(t);", "+            }", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "be8577e56a03f95bbe19271c5d7a622e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0941ff6bb59c70d65a52b8ee176c36c7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/DOMElementWriter.java", "commitBeforeChange": "7ad041a63e3584527e97f2d931906e499ef9e348", "commitAfterChange": "b746aeaa3768fb8b9fbe7eddd3bdc4eb59bfc13a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void write(Element element, Writer out, int indent,                       String indentWith)         throws IOException", "signatureAfterChange": "     public void write(Element element, Writer out, int indent,                       String indentWith)         throws IOException", "diff": ["-        openElement(element, out, indent, indentWith);", "-", "-        boolean hasChildren = false;", "-        for (int i = 0; i < children.getLength(); i++) {", "-            Node child = children.item(i);", "+        boolean hasChildren = (children.getLength() > 0);", "+        openElement(element, out, indent, indentWith, hasChildren);", "-            switch (child.getNodeType()) {", "-", "-            case Node.ELEMENT_NODE:", "-                if (!hasChildren) {", "-                    out.write(lSep);", "-                    hasChildren = true;", "+        if (hasChildren) {", "+            for (int i = 0; i < children.getLength(); i++) {", "+                Node child = children.item(i);", "+    ", "+                switch (child.getNodeType()) {", "+    ", "+                case Node.ELEMENT_NODE:", "+                    if (i == 0) {", "+                        out.write(lSep);", "+                    }", "+                    write((Element) child, out, indent + 1, indentWith);", "+                    break;", "+    ", "+                case Node.TEXT_NODE:", "+                    out.write(encode(child.getNodeValue()));", "+                    break;", "+    ", "+                case Node.COMMENT_NODE:", "+                    out.write(\"<!--\");", "+                    out.write(encode(child.getNodeValue()));", "+                    out.write(\"-->\");", "+                    break;", "+    ", "+                case Node.CDATA_SECTION_NODE:", "+                    out.write(\"<![CDATA[\");", "+                    out.write(encodedata(((Text) child).getData()));", "+                    out.write(\"]]>\");", "+                    break;", "+    ", "+                case Node.ENTITY_REFERENCE_NODE:", "+                    out.write('&');", "+                    out.write(child.getNodeName());", "+                    out.write(';');", "+                    break;", "+    ", "+                case Node.PROCESSING_INSTRUCTION_NODE:", "+                    out.write(\"<?\");", "+                    out.write(child.getNodeName());", "+                    String data = child.getNodeValue();", "+                    if (data != null && data.length() > 0) {", "+                        out.write(' ');", "+                        out.write(data);", "+                    }", "+                    out.write(\"?>\");", "+                    break;", "+                default:", "+                    // Do nothing", "-                write((Element) child, out, indent + 1, indentWith);", "-                break;", "-", "-            case Node.TEXT_NODE:", "-                out.write(encode(child.getNodeValue()));", "-                break;", "-", "-            case Node.COMMENT_NODE:", "-                out.write(\"<!--\");", "-                out.write(encode(child.getNodeValue()));", "-                out.write(\"-->\");", "-                break;", "-", "-            case Node.CDATA_SECTION_NODE:", "-                out.write(\"<![CDATA[\");", "-                out.write(encodedata(((Text) child).getData()));", "-                out.write(\"]]>\");", "-                break;", "-", "-            case Node.ENTITY_REFERENCE_NODE:", "-                out.write('&');", "-                out.write(child.getNodeName());", "-                out.write(';');", "-                break;", "-", "-            case Node.PROCESSING_INSTRUCTION_NODE:", "-                out.write(\"<?\");", "-                out.write(child.getNodeName());", "-                String data = child.getNodeValue();", "-                if (data != null && data.length() > 0) {", "-                    out.write(' ');", "-                    out.write(data);", "-                }", "-                out.write(\"?>\");", "-                break;", "-            default:", "-                // Do nothing", "+            closeElement(element, out, indent, indentWith, true);", "-", "-        closeElement(element, out, indent, indentWith, hasChildren);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09545f1ead4064cb43d2604091c481ca", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XmlProperty.java", "commitBeforeChange": "2fe8b860c0001d234880e9b27e8f8c7fef14de5c", "commitAfterChange": "64886360cf0d83287454a0b04a6613c3f47c0e7d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public Object processNode (Node node, String prefix, Object container)", "signatureAfterChange": "     public Object processNode (Node node, String prefix, Object container)", "diff": ["-            id = (semanticAttributes && idNode != null", "-                  ? idNode.getNodeValue() : null);", "+            id = semanticAttributes && idNode != null ? idNode.getNodeValue() : null;", "-", "-                    Path containingPath = (container != null", "-                        && container instanceof Path ? (Path) container : null);", "-", "+                    Path containingPath = container != null && container instanceof Path ? (Path) container", "+                            : null;", "-                    } else if (containingPath != null", "-                               && nodeName.equals(PATH)) {", "+                    }", "+                    if (containingPath != null && nodeName.equals(PATH)) {", "-                    } else if (container instanceof Path", "-                               && nodeName.equals(REF_ID)) {", "+                    } else if (container instanceof Path && nodeName.equals(REF_ID)) {", "-                    } else if (container instanceof Path", "-                               && nodeName.equals(LOCATION)) {", "+                    } else if (container instanceof Path && nodeName.equals(LOCATION)) {", "-                            throw new BuildException(\"XmlProperty does not \"", "-                                                     + \"support nested paths\");", "+                            throw new BuildException(\"XmlProperty does not support nested paths\");", "-", "-", "-            && semanticAttributes", "-            && node.hasAttributes()", "-            && (node.getAttributes().getNamedItem(VALUE) != null", "-                || node.getAttributes().getNamedItem(LOCATION) != null", "-                || node.getAttributes().getNamedItem(REF_ID) != null", "-                || node.getAttributes().getNamedItem(PATH) != null", "-                || node.getAttributes().getNamedItem(PATHID) != null)) {", "+                && semanticAttributes", "+                && node.hasAttributes()", "+                && (node.getAttributes().getNamedItem(VALUE) != null", "+                        || node.getAttributes().getNamedItem(LOCATION) != null", "+                        || node.getAttributes().getNamedItem(REF_ID) != null", "+                        || node.getAttributes().getNamedItem(PATH) != null || node.getAttributes()", "+                        .getNamedItem(PATHID) != null)) {", "-        } else if ((node.getNodeType() == Node.ELEMENT_NODE)", "-            && (node.getChildNodes().getLength() == 1)", "-            && (node.getFirstChild().getNodeType() == Node.CDATA_SECTION_NODE)) {", "+        } else if (node.getNodeType() == Node.ELEMENT_NODE", "+                && node.getChildNodes().getLength() == 1", "+                && node.getFirstChild().getNodeType() == Node.CDATA_SECTION_NODE) {", "-        } else if ((node.getNodeType() == Node.ELEMENT_NODE)", "-                   && (node.getChildNodes().getLength() == 0)", "-                   && !semanticEmptyOverride) {", "+        } else if (node.getNodeType() == Node.ELEMENT_NODE", "+               && node.getChildNodes().getLength() == 0", "+               && !semanticEmptyOverride) {", "-        } else if ((node.getNodeType() == Node.ELEMENT_NODE)", "-                   && (node.getChildNodes().getLength() == 1)", "-                   && (node.getFirstChild().getNodeType() == Node.TEXT_NODE)", "-                   && (\"\".equals(node.getFirstChild().getNodeValue()))", "-                   && !semanticEmptyOverride) {", "+        } else if (node.getNodeType() == Node.ELEMENT_NODE", "+               && node.getChildNodes().getLength() == 1", "+               && node.getFirstChild().getNodeType() == Node.TEXT_NODE", "+               && \"\".equals(node.getFirstChild().getNodeValue())", "+               && !semanticEmptyOverride) {", "-", "-            if (semanticAttributes && id == null", "-                && container instanceof String) {", "+            if (semanticAttributes && id == null && container instanceof String) {", "-"]}]}
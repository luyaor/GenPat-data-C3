{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3922d5dd2f20061d522342f177bcaa04", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79aa4ff12092278c6ef523c7edb8bd54", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/embeddor/DefaultEmbeddor.java", "commitBeforeChange": "e7ab62bc9179b392804835d02155e43d3d2cf5d6", "commitAfterChange": "2e6e170fb375181f4438e1de44808c7adab508a2", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private DefaultComponentManager createComponentManager()", "signatureAfterChange": "     private void createComponent( Class roleType, String defaultImpl )         throws Exception", "diff": ["-     */", "-    private DefaultComponentManager createComponentManager()", "-    {", "-        final DefaultComponentManager componentManager = new DefaultComponentManager();", "-", "-        componentManager.put( MasterConverter.ROLE, m_converter );", "-", "-        //Following components required when Myrmidon is used as build tool", "-        componentManager.put( Embeddor.ROLE, this );", "-", "-        //Following components required when Myrmidon allows user deployment of tasks etal.", "-        componentManager.put( RoleManager.ROLE, m_roleManager );", "-        componentManager.put( Deployer.ROLE, m_deployer );", "-        componentManager.put( ExtensionManager.ROLE, m_extensionManager );", "-", "-        //Following components used when want to types (ie tasks/mappers etc)", "-        componentManager.put( TypeManager.ROLE, m_typeManager );", "-        componentManager.put( ConverterRegistry.ROLE, m_converterRegistry );", "-", "-        componentManager.put( AspectManager.ROLE, m_aspectManager );", "-", "-        //Following components required when allowing Container tasks", "-        componentManager.put( Configurer.ROLE, m_configurer );", "-        componentManager.put( Executor.ROLE, m_executor );", "-", "-        return componentManager;", "-    }", "+     */", "+    private void createComponent( Class roleType, String defaultImpl )", "+        throws Exception", "+    {", "+        final String role = roleType.getName();", "+        final String className = m_parameters.getParameter( role, defaultImpl );", "+        final Component component = createComponent( className, roleType );", "+        m_componentManager.put( role, component );", "+        m_components.add( component );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcb02c7651b8c2cd7e424befaf27846b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/extensions/JarLibManifestTask.java", "commitBeforeChange": "0e481b8463a698cc76b183b097eaa08db32fa6e4", "commitAfterChange": "c66d1357e4ef1e3e9b56512ab6b63784fc47220b", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private void appendExtensionData( final Attributes attributes )", "signatureAfterChange": "     private void appendExtensionList( final Attributes attributes,                                       final Attributes.Name extensionKey,                                       final String listPrefix,                                       final int size )", "diff": ["+    private void appendExtensionList( final Attributes attributes,", "+                                      final Attributes.Name extensionKey,", "+                                      final String listPrefix,", "+                                      final int size )", "+        final StringBuffer sb = new StringBuffer();", "+        for( int i = 0; i < size; i++ )", "+            sb.append( listPrefix + i );", "+            sb.append( ' ' );", "+        //add in something like", "+        //\"Extension-List: javahelp java3d\"", "+        attributes.put( extensionKey, sb.toString() );", "-    private void appendExtensionData( final Attributes attributes )", "-        attributes.put( Extension.EXTENSION_NAME, m_extensionName );", "-        if( null != m_specificationVendor )", "-            attributes.put( Extension.SPECIFICATION_VENDOR,", "-                            m_specificationVendor );", "-        if( null != m_specificationVersion )", "-        {", "-            attributes.put( Extension.SPECIFICATION_VERSION,", "-                            m_specificationVersion.toString() );", "-        }", "-        if( null != m_implementationVendorID )", "-        {", "-            attributes.put( Extension.IMPLEMENTATION_VENDOR_ID,", "-                            m_implementationVendorID );", "-        }", "-        if( null != m_implementationVendor )", "-        {", "-            attributes.put( Extension.IMPLEMENTATION_VENDOR,", "-                            m_implementationVendor );", "-        }", "-        if( null != m_implementationVersion )", "-        {", "-            attributes.put( Extension.IMPLEMENTATION_VERSION,", "-                            m_implementationVersion.toString() );", "-        }", "-        if( null != m_implementationURL )", "-        {", "-            attributes.put( Extension.IMPLEMENTATION_URL,", "-                            m_implementationURL );", "-        }"]}]}
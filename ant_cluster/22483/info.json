{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "65f22dcf6085fc0d5d0941f3f7b58824", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "044641e4ca2a9f6d1ed019ba26b1d903", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Ant.java", "commitBeforeChange": "7d18fc9d2131ec5f1f3c1f59995f70b1a69f71dd", "commitAfterChange": "03d8b12829680840c24e878d3d65fb4e7f808018", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                if (getOwningTarget().getName().equals(\"\")) {", "+", "+                String owningTargetName = getOwningTarget().getName();", "+", "+                if (owningTargetName.equals(\"\")) {", "-                } else if (getOwningTarget().getName().equals(target)) {", "+                } else if (owningTargetName.equals(target)) {", "+                } else {", "+                    Target other = ", "+                        (Target) getProject().getTargets().get(target);", "+                    if (other != null && other.dependsOn(owningTargetName)) {", "+                        throw new BuildException(getTaskName() ", "+                                                 + \" task calling a target\"", "+                                                 + \" that depends on\"", "+                                                 + \" its parent target \\'\"", "+                                                 + owningTargetName", "+                                                 + \"\\'.\");", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f80df4f6e9846e8da87e83a6bfad86a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/tar/TarOutputStream.java", "commitBeforeChange": "51516f38d58c48f261be98eedf80bf52fafd236b", "commitAfterChange": "6ff2c8367d444eefd444295b032a36805baa617d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void putNextEntry(TarEntry entry) throws IOException", "signatureAfterChange": "     public void putNextEntry(TarEntry entry) throws IOException", "diff": ["+        if (entry.getName().length() > TarConstants.NAMELEN) {", "+", "+            if (longFileMode == LONGFILE_GNU) {", "+                // create a TarEntry for the LongLink, the contents", "+                // of which are the entry's name ", "+                TarEntry longLinkEntry = new TarEntry(TarConstants.GNU_LONGLINK,", "+                                                      TarConstants.LF_GNUTYPE_LONGNAME);", "+                 ", "+                longLinkEntry.setSize(entry.getName().length() + 1);", "+                putNextEntry(longLinkEntry);                                                    ", "+                write(entry.getName().getBytes());", "+                write(0);", "+                closeEntry();", "+            }", "+            else if (longFileMode != LONGFILE_TRUNCATE) {", "+                throw new RuntimeException(\"file name '\" + entry.getName() ", "+                                             + \"' is too long ( > \" ", "+                                             + TarConstants.NAMELEN + \" bytes)\");", "+            }", "+        } ", "+"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "62ec13844b04ff70f50d1527f8f877dd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aab58522b75a6826c3590022dea633d5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "f735f5f44df9fa52266e7b8b7f2741c2b7560d22", "commitAfterChange": "400ba5d1981259cc07b41f08cd1b53f048f8ef52", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     protected void getFile( FTPClient ftp, String dir, String filename )         throws IOException, TaskException", "signatureAfterChange": "     protected void getFile( FTPClient ftp, String dir, String filename )         throws IOException, TaskException", "diff": ["-            File file = resolveFile( new File( dir, filename ).getPath() );", "+            final File file = FileUtil.resolveFile( resolveFile( dir ), filename );", "-            if( newerOnly && isUpToDate( ftp, file, resolveFile( filename ) ) )", "+            if( m_newerOnly && isUpToDate( ftp, file, remoteResolveFile( filename ) ) )", "+            {", "+            }", "-            if( verbose )", "+            if( m_verbose )", "-            File pdir = new File( file.getParent() );// stay 1.1 compatible", "-            if( !pdir.exists() )", "+            final File parent = file.getParentFile();", "+            if( !parent.exists() )", "-                pdir.mkdirs();", "+                parent.mkdirs();", "-            ftp.retrieveFile( resolveFile( filename ), outstream );", "+            ftp.retrieveFile( remoteResolveFile( filename ), outstream );", "-                if( skipFailedTransfers == true )", "+                if( m_skipFailedTransfers == true )", "-                    skipped++;", "+                    m_skipped++;", "-                getLogger().debug( \"File \" + file.getAbsolutePath() + \" copied from \" + server );", "-                transferred++;", "+                getLogger().debug( \"File \" + file.getAbsolutePath() + \" copied from \" + m_server );", "+                m_transferred++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab472d8ea969472706ffb6bf12858cc1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "f735f5f44df9fa52266e7b8b7f2741c2b7560d22", "commitAfterChange": "400ba5d1981259cc07b41f08cd1b53f048f8ef52", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     protected void getFile( FTPClient ftp, String dir, String filename )         throws IOException, TaskException", "signatureAfterChange": "     protected void getFile( FTPClient ftp, String dir, String filename )         throws IOException, TaskException", "diff": ["-            File file = resolveFile( new File( dir, filename ).getPath() );", "+            final File file = FileUtil.resolveFile( resolveFile( dir ), filename );", "-            if( newerOnly && isUpToDate( ftp, file, resolveFile( filename ) ) )", "+            if( m_newerOnly && isUpToDate( ftp, file, remoteResolveFile( filename ) ) )", "+            {", "+            }", "-            if( verbose )", "+            if( m_verbose )", "-            File pdir = new File( file.getParent() );// stay 1.1 compatible", "-            if( !pdir.exists() )", "+            final File parent = file.getParentFile();", "+            if( !parent.exists() )", "-                pdir.mkdirs();", "+                parent.mkdirs();", "-            ftp.retrieveFile( resolveFile( filename ), outstream );", "+            ftp.retrieveFile( remoteResolveFile( filename ), outstream );", "-                if( skipFailedTransfers == true )", "+                if( m_skipFailedTransfers == true )", "-                    skipped++;", "+                    m_skipped++;", "-                getLogger().debug( \"File \" + file.getAbsolutePath() + \" copied from \" + server );", "-                transferred++;", "+                getLogger().debug( \"File \" + file.getAbsolutePath() + \" copied from \" + m_server );", "+                m_transferred++;"]}]}
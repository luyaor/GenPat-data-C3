{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b63d230e37cb9e71f3799882be819ff4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d967a8875af52347ece85b81c1f76c3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     private void checkIncludePatterns()", "signatureAfterChange": "     private void checkIncludePatterns()", "diff": ["-        Map<TokenizedPath, String> newroots = new HashMap<TokenizedPath, String>();", "+        final Map<TokenizedPath, String> newroots = new HashMap<TokenizedPath, String>();", "-            String pattern = includePatterns[i].toString();", "+            final String pattern = includePatterns[i].toString();", "-        for (Map.Entry<String, TokenizedPath> entry : includeNonPatterns.entrySet()) {", "-            String pattern = entry.getKey();", "+        for (final Map.Entry<String, TokenizedPath> entry : includeNonPatterns.entrySet()) {", "+            final String pattern = entry.getKey();", "-                } catch (IOException ex) {", "+                } catch (final IOException ex) {", "-            for (Map.Entry<TokenizedPath, String> entry : newroots.entrySet()) {", "+            for (final Map.Entry<TokenizedPath, String> entry : newroots.entrySet()) {", "-                        String path = (basedir == null)", "+                        final String path = (basedir == null)", "-                    } catch (IOException ex) {", "+                    } catch (final IOException ex) {", "-                    File f = currentPath.findFile(basedir, false);", "+                    final File f = currentPath.findFile(basedir, false);", "-                        String originalpattern = entry.getValue();", "-                        boolean included = isCaseSensitive()", "+                        final String originalpattern = entry.getValue();", "+                        final boolean included = isCaseSensitive()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6e346d718064f41cac4e50d87c54d75", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "d25488cbbb28cf25e1f91f714c70999fd105432d", "commitAfterChange": "3d706ab8188a674936880b6f4530b0cf3991758b", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     private void checkIncludePatterns()", "signatureAfterChange": "     private void checkIncludePatterns()", "diff": ["-        Map newroots = new HashMap();", "+        Map<TokenizedPath, String> newroots = new HashMap<TokenizedPath, String>();", "-        for (Iterator iter = includeNonPatterns.entrySet().iterator();", "-             iter.hasNext(); ) {", "-            Map.Entry entry = (Map.Entry) iter.next();", "-            String pattern = (String) entry.getKey();", "+        for (Map.Entry<String, TokenizedPath> entry : includeNonPatterns.entrySet()) {", "+            String pattern = entry.getKey();", "-                newroots.put((TokenizedPath) entry.getValue(), pattern);", "+                newroots.put(entry.getValue(), pattern);", "-            // only scan directories that can include matched files or", "-            // directories", "-            Iterator it = newroots.entrySet().iterator();", "-", "-            while (it.hasNext()) {", "-                Map.Entry entry = (Map.Entry) it.next();", "-                TokenizedPath currentPath = (TokenizedPath) entry.getKey();", "+            // only scan directories that can include matched files or", "+            // directories", "+            for (Map.Entry<TokenizedPath, String> entry : newroots.entrySet()) {", "+                TokenizedPath currentPath = entry.getKey();"]}]}
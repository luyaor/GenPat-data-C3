{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a361436b9c54839bf1d3769322895ce8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "230b63633e6d748163b89d4f7196ac9e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/extension/JarLibAvailableTask.java", "commitBeforeChange": "f83f5c68c975f31a384cc24e94be4e5ebfa2da4d", "commitAfterChange": "f463bd2cab8b132695d8bf60c889212628eba281", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void execute()         throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-    public void execute()", "-        throws BuildException", "-    {", "+     */", "+    public void execute() throws BuildException {", "-        final Extension test = m_extension.toExtension();", "+        final Extension test = requiredExtension.toExtension();", "-        if( !m_extensionSets.isEmpty() )", "-        {", "-            final Iterator iterator = m_extensionSets.iterator();", "-            while( iterator.hasNext() )", "-            {", "-                final ExtensionSet extensionSet = (ExtensionSet)iterator.next();", "+        if (!extensionFileSets.isEmpty()) {", "+            final Iterator iterator = extensionFileSets.iterator();", "+            while (iterator.hasNext()) {", "+                final ExtensionSet extensionSet", "+                    = (ExtensionSet) iterator.next();", "-                    extensionSet.toExtensions( getProject() );", "-                for( int i = 0; i < extensions.length; i++ )", "-                {", "+                    extensionSet.toExtensions(getProject());", "+                for (int i = 0; i < extensions.length; i++) {", "-                    if( extension.isCompatibleWith( test ) )", "-                    {", "-                        getProject().setNewProperty( m_property, \"true\" );", "+                    if (extension.isCompatibleWith(test)) {", "+                        getProject().setNewProperty(propertyName, \"true\");", "-        }", "-        else", "-        {", "-            final Manifest manifest = ExtensionUtil.getManifest( m_file );", "-            final Extension[] extensions = Extension.getAvailable( manifest );", "-            for( int i = 0; i < extensions.length; i++ )", "-            {", "+        } else {", "+            final Manifest manifest = ExtensionUtil.getManifest(libraryFile);", "+            final Extension[] extensions = Extension.getAvailable(manifest);", "+            for (int i = 0; i < extensions.length; i++) {", "-                if( extension.isCompatibleWith( test ) )", "-                {", "-                    getProject().setNewProperty( m_property, \"true\" );", "+                if (extension.isCompatibleWith(test)) {", "+                    getProject().setNewProperty(propertyName, \"true\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bd729a2a290c9ec7647c772b64468ad", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/extension/JarLibManifestTask.java", "commitBeforeChange": "f83f5c68c975f31a384cc24e94be4e5ebfa2da4d", "commitAfterChange": "f463bd2cab8b132695d8bf60c889212628eba281", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void execute()         throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-    public void execute()", "-        throws BuildException", "-    {", "+     */", "+    public void execute() throws BuildException {", "-        attributes.put( Attributes.Name.MANIFEST_VERSION, MANIFEST_VERSION );", "-        final String createdBy = \"Apache Ant \" + getProject().getProperty( \"ant.version\" );", "-        attributes.putValue( CREATED_BY, createdBy );", "+        attributes.put(Attributes.Name.MANIFEST_VERSION, MANIFEST_VERSION);", "+        final String createdBy = \"Apache Ant \" + getProject().getProperty(\"ant.version\");", "+        attributes.putValue(CREATED_BY, createdBy);", "-        appendExtraAttributes( attributes );", "+        appendExtraAttributes(attributes);", "-        if( null != m_extension )", "-        {", "-            Extension.addExtension( m_extension, attributes );", "+        if (null != extension) {", "+            Extension.addExtension(extension, attributes);", "-        final ArrayList depends = toExtensions( m_dependencies );", "-        appendExtensionList( attributes,", "+        final ArrayList depends = toExtensions(dependencies);", "+        appendExtensionList(attributes,", "-                             depends.size() );", "-        appendLibraryList( attributes, \"lib\", depends );", "+                             depends.size());", "+        appendLibraryList(attributes, \"lib\", depends);", "-        final ArrayList option = toExtensions( m_optionals );", "-        appendExtensionList( attributes,", "+        final ArrayList option = toExtensions(optionals);", "+        appendExtensionList(attributes,", "-                             option.size() );", "-        appendLibraryList( attributes, \"opt\", option );", "+                             option.size());", "+        appendLibraryList(attributes, \"opt\", option);", "-        try", "-        {", "-            final String message = \"Generating manifest \" + m_destfile.getAbsoluteFile();", "-            log( message, Project.MSG_INFO );", "-            writeManifest( manifest );", "-        }", "-        catch( final IOException ioe )", "-        {", "-            throw new BuildException( ioe.getMessage(), ioe );", "+        try {", "+            final String message = \"Generating manifest \" + destFile.getAbsoluteFile();", "+            log(message, Project.MSG_INFO);", "+            writeManifest(manifest);", "+        } catch (final IOException ioe) {", "+            throw new BuildException(ioe.getMessage(), ioe);"]}]}
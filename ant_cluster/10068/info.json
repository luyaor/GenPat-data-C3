{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ee0ff2e55dcbc50c8428742bd46b3ad4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bbb51e499b9cdbeac67dc19c2dc612a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/dotnet/WsdlToDotnet.java", "commitBeforeChange": "579a1f76bd6eff87405967c4fe523ffe4d9342bb", "commitAfterChange": "803fb00df9e066be53b6bca73efea6fe0d8a83ba", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void execute()              throws BuildException", "signatureAfterChange": "     public void execute()              throws BuildException", "diff": ["+        if(compiler==null) {", "+            compiler=Compiler.createDefaultCompiler();", "+        }", "-        NetCommand command = new NetCommand(this, \"WSDL\", \"wsdl\");", "+        NetCommand command = new NetCommand(this,", "+                \"WSDL\",", "+                compiler.getCommand());", "+        compiler.applyExtraArgs(command);", "-        if(parseableErrors) {", "+        if(ideErrors) {", "-        if (srcFileName != null) {", "-            File srcFile = getProject().resolveFile(srcFileName);", "-            if (isMono) {", "-                // Mono 1.0's wsdl doesn't deal with absolute paths", "-                command.addArgument(srcFileName);", "-            } else {", "-                command.addArgument(srcFile.toString());", "-            }", "-            //rebuild unless the dest file is newer than the source file", "-            if ( destFile.exists() ) {", "-                destLastModified = destFile.lastModified();", "-            }", "-            if (srcFile.exists()", "-                && srcFile.lastModified() <= destLastModified) {", "-                rebuild = false;", "-            }", "-        } else {", "-            //no source file? must be a url, which has no dependency", "-            //handling", "-            rebuild = true;", "-            command.addArgument(url);", "+", "+        //rebuild unless the dest file is newer than the source file", "+        if ( destFile.exists() ) {", "+            destLastModified = destFile.lastModified();", "+            rebuild = isRebuildNeeded(wsdl, destLastModified);", "+        String path;", "+        //mark for a rebuild if the dest file is newer", "+        path=wsdl.evaluate();", "+        if ( !compiler.supportsAbsoluteFiles() ) {", "+            // Mono 1.0's wsdl doesn't deal with absolute paths", "+            path = srcFileName;", "+        }", "+        command.addArgument(path);", "-            //get date, mark for a rebuild if we are newer", "-            long schemaTimestamp;", "-            schemaTimestamp=schema.getTimestamp();", "-            if(schemaTimestamp>destLastModified) {", "-                rebuild=true;", "-            }", "+            //mark for a rebuild if we are newer", "+            rebuild |= isRebuildNeeded(schema, destLastModified);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "904ad29c0d41477304955a973ff6a54c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/depend/Depend.java", "commitBeforeChange": "85344c438efab87f56ca5f4b179752852ec0aa86", "commitAfterChange": "f66cab0ea7689df54fe51f64018cd3ef8b05cd3d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void determineDependencies() throws IOException", "signatureAfterChange": "     private void determineDependencies() throws IOException", "diff": ["-        Hashtable dependencyMap = new Hashtable();", "+        boolean cacheDirty = false;", "+        ", "+        Hashtable dependencyMap = null;", "+        File depCacheFile = null;", "+        boolean depCacheFileExists = true;", "+        long depCacheFileLastModified = Long.MAX_VALUE;", "+        ", "+        // read the dependency cache from the disk", "+        if (cache != null) {", "+            dependencyMap = readCachedDependencies();", "+            depCacheFile = new File(cache, CACHE_FILE_NAME);", "+            depCacheFileExists = depCacheFile.exists();", "+            depCacheFileLastModified = depCacheFile.lastModified();", "+        }", "-                // try to read the dependency info from the cache if it is not out of date", "-                File depFile = new File(cache, info.relativeName + \".dep\");", "-                if (depFile.exists() && depFile.lastModified() > info.absoluteFile.lastModified()) {", "+                // try to read the dependency info from the map if it is not out of date", "+                if (depCacheFileExists && depCacheFileLastModified > info.absoluteFile.lastModified()) {", "-                    // need to read dependency list from the file.", "-                    dependencyList = readDependencyList(depFile);", "+                    // need to get dependency list from the map.", "+                    dependencyList = (Vector)dependencyMap.get(info.className);", "-                    ", "-                    if (cache != null) {", "-                        // new dependencies so need to write them out to the cache", "-                        File depFile = new File(cache, info.relativeName + \".dep\");", "-                        writeDependencyList(depFile, dependencyList);", "+                    if (dependencyList != null) {", "+                        cacheDirty = true;", "+                        dependencyMap.put(info.className, dependencyList);", "+                    ", "-            ", "-            dependencyMap.put(info.className, dependencyList);", "+                        ", "+        ", "+        // write the dependency cache to the disk", "+        if (cache != null && cacheDirty) {", "+            writeCachedDependencies(dependencyMap);", "+        }"]}]}
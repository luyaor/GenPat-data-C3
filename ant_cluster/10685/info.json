{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e9ffe5f1a39007fca69a4c3ce970e776", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b6016056af3171faa55d5c2268f17bf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "8bf76a6d5476dfc5dcaea89528973e324bbdcf6f", "commitAfterChange": "5f81fd801113c7f3bb4b734d0be4337ef482c0fd", "methodNumberBeforeChange": 146, "methodNumberAfterChange": 146, "signatureBeforeChange": "      private String quoteString(String str, final char delim)", "signatureAfterChange": "      private String quoteString(final String str, final char delim)", "diff": ["-    private String quoteString(String str, final char delim) {", "+    private String quoteString(final String str, final char delim) {", "-        if (str.indexOf('\\\\') != -1) {", "-            str = replace(str, '\\\\', \"\\\\\\\\\");", "-        }", "-        if (str.indexOf(delim) != -1) {", "-            str = replace(str, delim, \"\\\\\" + delim);", "-        }", "-        buf.append(str);", "-        buf.append(delim);", "-        return buf.toString();", "-    }", "+        final int len = str.length();", "+        boolean lastCharWasCR = false;", "+        for (int i = 0; i < len; i++) {", "+            char c = str.charAt(i);", "+            if (c == delim) { // can't put the non-constant delim into a case", "+                buf.append('\\\\').append(c);", "+                lastCharWasCR = false;", "+                switch (c) {", "+                case '\\\\':", "+                    buf.append(\"\\\\\\\\\");", "+                    lastCharWasCR = false;", "+                    break;", "+                case '\\r':", "+                    // insert a line continuation marker", "+                    buf.append(\"\\\\\\r\");", "+                    lastCharWasCR = true;", "+                    break;", "+                case '\\n':", "+                    // insert a line continuation marker unless this", "+                    // is a \\r\\n sequence in which case \\r already has", "+                    // created the marker", "+                    if (!lastCharWasCR) {", "+                        buf.append(\"\\\\\\n\");", "+                    } else {", "+                        buf.append(\"\\n\");", "+                    }", "+                    lastCharWasCR = false;", "+                    break;", "+                default:", "+                    buf.append(c);", "+                    lastCharWasCR = false;", "+                    break;", "+                }", "+        buf.append(delim);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d20ec76e54e75b4cd3202a9dcb9a545", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/cvslib/ChangeLogParser.java", "commitBeforeChange": "ae202f6ff114e143e5d5a520b2e8e10009409958", "commitAfterChange": "80d45d8dbdc9cd56b35dfdd702e779429cead4e4", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void processFile(final String line)", "signatureAfterChange": "     private void processFile(final String line)", "diff": ["-        if (line.startsWith(\"Working file:\")) {", "+        if (!remote && line.startsWith(\"Working file:\")) {", "+        } else if (remote && line.startsWith(\"RCS file:\")) {", "+            // exclude the part of the RCS filename up to and", "+            // including the module name (and the path separator)", "+            int startOfFileName = 0;", "+            for (int i = 0; i < moduleNames.length; i++) {", "+                int index = line.indexOf(moduleNames[i]);", "+                if (index >= 0) {", "+                    startOfFileName = index + moduleNameLengths[i] + 1;", "+                    break;", "+                }", "+            }", "+            int endOfFileName = line.indexOf(\",v\");", "+            if (endOfFileName == -1) {", "+                file = line.substring(startOfFileName);", "+            } else {", "+                file = line.substring(startOfFileName, endOfFileName);", "+            }", "+            status = GET_REVISION;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a34549c4c441db5ed4937856aff67c03", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/regexp/JakartaRegexpRegexp.java", "commitBeforeChange": "dfc1957328247cc79d3df7eb6f6c113e58c1dc31", "commitAfterChange": "be53ecfdc2ff0f8e955eada253ea8d3db38addeb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public String substitute(String input, String argument, int options)         throws BuildException", "signatureAfterChange": "      public String substitute(String input, String argument, int options)         throws BuildException", "diff": ["-        int sOptions = getSubsOptions(options);", "+        Vector v = getGroups(input, options);", "+", "+        // replace \\1 with the corresponding group", "+        StringBuffer result = new StringBuffer();", "+        for (int i=0; i<argument.length(); i++) {", "+            char c = argument.charAt(i);", "+            if (c == '\\\\') {", "+                if (++i < argument.length()) {", "+                    c = argument.charAt(i);", "+                    int value = Character.digit(c, 10);", "+                    if (value > -1) {", "+                        result.append((String) v.elementAt(value));", "+                    } else {", "+                        result.append(c);", "+                    }", "+                } else {", "+                    // XXX - should throw an exception instead?", "+                    result.append('\\\\');", "+                }", "+            } else {", "+                result.append(c);", "+            }", "+        }", "+        argument = result.toString();", "+", "+        int sOptions = getSubsOptions(options);"]}]}
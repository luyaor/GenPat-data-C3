{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b7d368a04f55e35b81cbf9495adde4e4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05ce68121809b0691b9b56d492285480", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/SSHExec.java", "commitBeforeChange": "a5ec1501c919f54d9becf781db44e2e529676fd5", "commitAfterChange": "e19a2de440045f14fa2da7a112b8d237bf2abf0f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                log(\"Timeout period exceeded, connection dropped.\");", "+                log(TIMEOUT_MESSAGE, Project.MSG_ERR);", "-", "+        } catch (JSchException e) {", "+            if (e.getMessage().indexOf(\"session is down\") >= 0) {", "+                log(TIMEOUT_MESSAGE, Project.MSG_ERR);", "+            } else {", "+                if (getFailonerror()) {", "+                    throw new BuildException(e);", "+                } else {", "+                    log(\"Caught exception: \" + e.getMessage(), ", "+                        Project.MSG_ERR);", "+                }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25195d5c89e8e15a858378e14c9248fb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/email/EmailTask.java", "commitBeforeChange": "39b1929142d8d29f58b4654edf13d677e3959dcb", "commitAfterChange": "416d46165ba953cbc74387d62e82515e8180208a", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public void execute()", "signatureAfterChange": "     public void execute()", "diff": ["-                    log(\"Failed to initialise MIME mail\", Project.MSG_WARN);", "+                    log(\"Failed to initialise MIME mail: \"+e.getMessage(),Project.MSG_WARN);", "+            // set the character set if not done already (and required)", "+            if (charset != null) {", "+                if (message.getCharset()!=null) {", "+                    throw new BuildException(\"The charset can only be \"", "+                         + \"specified in one location\");", "+                } else {", "+                    message.setCharset(charset);", "+                }", "+            }", "+        }", "+        catch(Exception e){", "+          log(\"Failed to send email\", Project.MSG_WARN);", "+          if (failOnError) {", "+            throw new BuildException(e);", "+          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47ea6a7ec3544d85907b6b00436fc9e2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Java.java", "commitBeforeChange": "8f4aa8719c4dfd626c0cc8b93fe9c40a8d263bf7", "commitAfterChange": "d1549366e5569d99134b9336b9bf53968ce40aaf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public int executeJava() throws BuildException", "signatureAfterChange": "     public int executeJava() throws BuildException", "diff": ["+", "-            throw new BuildException(\"Cannot execute a jar in non-forked mode. Please set fork='true'. \");", "+            throw new BuildException(\"Cannot execute a jar in non-forked mode.\"", "+                                     + \" Please set fork='true'. \");", "-        ", "-            return run(cmdl.getCommandline());", "-                log(\"JVM args ignored when same JVM is used.\", Project.MSG_WARN);", "+                log(\"JVM args ignored when same JVM is used.\", ", "+                    Project.MSG_WARN);", "-                log(\"Working directory ignored when same JVM is used.\", Project.MSG_WARN);", "+                log(\"Working directory ignored when same JVM is used.\", ", "+                    Project.MSG_WARN);", "-                log(\"Changes to environment variables are ignored when same JVM is used.\", ", "-                    Project.MSG_WARN);", "+                log(\"Changes to environment variables are ignored when same \"", "+                    + \"JVM is used.\", Project.MSG_WARN);", "-            try {", "-                run(cmdl);", "+        }", "+        ", "+        try {", "+            if (fork) {", "+                return run(cmdl.getCommandline());", "+            } else {", "+                try {", "+                    run(cmdl);", "+                    return 0;", "+                } catch (ExitException ex) {", "+                    return ex.getStatus();", "+                }", "+            }", "+        } catch (BuildException e) {", "+            if (failOnError) {", "+                throw e;", "+            } else {", "+                log(e.getMessage(), Project.MSG_ERR);", "-            catch (ExitException ex) {", "-                return ex.getStatus();", "+        } catch (Throwable t) {", "+            if (failOnError) {", "+                throw new BuildException(t);", "+            } else {", "+                log(t.getMessage(), Project.MSG_ERR);", "+                return 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "877fbb102275e2482396dbc33a8ef4e6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/launch/Locator.java", "commitBeforeChange": "b72ef6bd538c7cf16ea1351e165a3baf6e9c099d", "commitAfterChange": "1f4efcbdd41dc5c57dbf9e47bf30b37cb37d746f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public static URL[] getLocationURLs(File location,                                         final String[] extensions)          throws MalformedURLException", "signatureAfterChange": "     public static URL[] getLocationURLs(File location,                                         final String[] extensions)          throws MalformedURLException", "diff": ["-                    urls[0] = location.toURL();", "+                    try {", "+                        /**", "+                         * File.toURL() does not encode characters like #.", "+                         * File.toURI() has been introduced in java 1.4, so", "+                         * ANT cannot use it (except by reflection)", "+                         * FileUtils.toURI() cannot be used by Locator.java", "+                         * Implemented this way.", "+                         * File.toURL() adds file: and changes '\\' to '/' for dos OSes", "+                         * encodeUri converts characters like ' ' and '#' to %DD", "+                         */", "+                        urls[0] = new URL(encodeUri(location.toURL().toString()));", "+                    } catch (UnsupportedEncodingException ex) {", "+                        throw new MalformedURLException(ex.toString());", "+                    }", "-            urls[i] = matches[i].toURL();", "+            try {", "+                // See comments above.", "+                urls[i] = new URL(encodeUri(matches[i].toURL().toString()));", "+            } catch (UnsupportedEncodingException ex) {", "+                throw new MalformedURLException(ex.toString());", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc14dc9ac350040363caf6be39febbf2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Delete.java", "commitBeforeChange": "b0f1f9cab707a5227a69d33ed613c5c988b00d4b", "commitAfterChange": "76c6de74b01f61acca8a153bf4dd38ce1926a248", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            DirectoryScanner ds = fs.getDirectoryScanner(project);", "-            String[] files = ds.getIncludedFiles();", "-            String[] dirs = ds.getIncludedDirectories();", "-            removeFiles(fs.getDir(project), files, dirs);", "+            try {", "+                DirectoryScanner ds = fs.getDirectoryScanner(project);", "+                String[] files = ds.getIncludedFiles();", "+                String[] dirs = ds.getIncludedDirectories();", "+                removeFiles(fs.getDir(project), files, dirs);", "+            } catch (BuildException be) {", "+                // directory doesn't exist or is not readable", "+                if (!quiet) {", "+                    throw be;", "+                } else {", "+                    log(be.getMessage(), Project.MSG_VERBOSE);", "+                }", "+            }", "-            DirectoryScanner ds = super.getDirectoryScanner(dir);", "-            String[] files = ds.getIncludedFiles();", "-            String[] dirs = ds.getIncludedDirectories();", "-            removeFiles(dir, files, dirs);", "+            try {", "+                DirectoryScanner ds = super.getDirectoryScanner(dir);", "+                String[] files = ds.getIncludedFiles();", "+                String[] dirs = ds.getIncludedDirectories();", "+                removeFiles(dir, files, dirs);", "+            } catch (BuildException be) {", "+                // directory doesn't exist or is not readable", "+                if (!quiet) {", "+                    throw be;", "+                } else {", "+                    log(be.getMessage(), Project.MSG_VERBOSE);", "+                }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f323bb55dac0e06b401f7892d40bd095", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/config/AntConfigHandler.java", "commitBeforeChange": "65b70febb53b077317c4d678291f9af547c3d116", "commitAfterChange": "f9d1c1691c7e9d80b793f5178f6113c949fc2441", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void startElement(String uri, String localName, String qualifiedName,                              Attributes attributes)          throws SAXParseException", "signatureAfterChange": "     public void startElement(String uri, String localName, String qualifiedName,                              Attributes attributes)          throws SAXParseException", "diff": ["-        // everything else is a task", "+        // configs support two task collections as elements", "-        config.addTask(buildElementHandler.getBuildElement());", "-//        try {", "-//        } catch (ConfigException e) {", "-//            throw new SAXParseException(\"Unable to process config\",", "-//                getLocator(), e);", "-//        }", "+        BuildElement element = buildElementHandler.getBuildElement();", "+        if (element.getType().equals(GLOBAL_TASKS_ELEMENT)) {", "+            config.addGlobalTasks(element);", "+        } else if (element.getType().equals(PERFRAME_TASKS_ELEMENT)) {", "+            config.addFrameTasks(element);", "+        } else {", "+            throw new SAXParseException(\"<antconfig> does not support the <\"", "+                + element.getType() + \"> element\", getLocator());", "+        }"]}]}
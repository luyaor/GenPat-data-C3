{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1946b31b74a0800c57e1e2f632e34fa8", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0972ce06cde0fa210b1054dddf418dd6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/cli/org/apache/ant/cli/Commandline.java", "commitBeforeChange": "e0fef5cf64773a98734998b9736ded96fc8be2c7", "commitAfterChange": "81c17b6164451315e24ae774f1bed668cbca99ce", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void parseArguments(String[] args)          throws ConfigException", "signatureAfterChange": "     private void parseArguments(String[] args)          throws ConfigException", "diff": ["+            } else if (arg.equals(\"-debug\")) {", "+                // printVersion();", "+                messageOutputLevel = MessageLevel.MSG_DEBUG;", "+            } else if (arg.startsWith(\"-D\")) {", "+                String name = arg.substring(2, arg.length());", "+                String value = null;", "+                int posEq = name.indexOf(\"=\");", "+                if (posEq > 0) {", "+                    value = name.substring(posEq + 1);", "+                    name = name.substring(0, posEq);", "+                } else if (i < args.length - 1) {", "+                    value = args[++i];", "+                }", "+                definedProperties.put(name, value);", "+            if (!defaultBuildFile.exists()) {", "+                File ant1BuildFile =  new File(DEFAULT_ANT1_FILENAME);", "+                if (ant1BuildFile.exists()) {", "+                    defaultBuildFile = ant1BuildFile;", "+                }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "858a901f3dc0b58999eaa2ad5177e5ad", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "1dc3ff85f64b99ede826fbfe4656f1a0b27bcbb5", "commitAfterChange": "3fd5393e99cef2d28ced46f804a3ae53f915bf3c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void processArgs(String[] args)", "signatureAfterChange": "     private void processArgs(String[] args)", "diff": ["+            } else if (arg.equals(\"-nice\")) {", "+                try {", "+                    threadPriority=Integer.decode(args[i + 1]);", "+                } catch (ArrayIndexOutOfBoundsException aioobe) {", "+                    throw new BuildException(", "+                            \"You must supply a niceness value (1-10)\"+", "+                            \" after the -nice option\");", "+                } catch (NumberFormatException e) {", "+                    throw new BuildException(\"Unrecognized niceness value: \" +", "+                            args[i + 1]);", "+                }", "+                i++;", "+                if(threadPriority.intValue()<Thread.MIN_PRIORITY ||", "+                        threadPriority.intValue()>Thread.MAX_PRIORITY) {", "+                    throw new BuildException(", "+                            \"Niceness value is out of the range 1-10\");", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d20ec76e54e75b4cd3202a9dcb9a545", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/cvslib/ChangeLogParser.java", "commitBeforeChange": "ae202f6ff114e143e5d5a520b2e8e10009409958", "commitAfterChange": "80d45d8dbdc9cd56b35dfdd702e779429cead4e4", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void processFile(final String line)", "signatureAfterChange": "     private void processFile(final String line)", "diff": ["-        if (line.startsWith(\"Working file:\")) {", "+        if (!remote && line.startsWith(\"Working file:\")) {", "+        } else if (remote && line.startsWith(\"RCS file:\")) {", "+            // exclude the part of the RCS filename up to and", "+            // including the module name (and the path separator)", "+            int startOfFileName = 0;", "+            for (int i = 0; i < moduleNames.length; i++) {", "+                int index = line.indexOf(moduleNames[i]);", "+                if (index >= 0) {", "+                    startOfFileName = index + moduleNameLengths[i] + 1;", "+                    break;", "+                }", "+            }", "+            int endOfFileName = line.indexOf(\",v\");", "+            if (endOfFileName == -1) {", "+                file = line.substring(startOfFileName);", "+            } else {", "+                file = line.substring(startOfFileName, endOfFileName);", "+            }", "+            status = GET_REVISION;"]}]}
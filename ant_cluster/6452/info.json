{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7f109a59a3d5724ca3f6c2b909e5b8cb", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa045d55613ba0751b2587429b514117", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "ff8b6709bcf07f12efecc3625f5e1665e7ddf34d", "commitAfterChange": "0fdacdfc1a598078da48d77a24f2b7479e9bffb3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void configureInline( final ConfigurationState state,                                   final Configuration element,                                   final Context context )         throws CascadingException, InvocationTargetException", "signatureAfterChange": "     private void configureInline( final ConfigurationState state,                                   final Configuration element,                                   final Context context )         throws CascadingException", "diff": ["-        throws CascadingException, InvocationTargetException", "+        throws CascadingException", "-        final String elementName = element.getName();", "+        final String name = element.getName();", "-        final PropertyConfigurer childConfigurer = state.getConfigurer().getProperty( elementName );", "+        final PropertyConfigurer childConfigurer = state.getConfigurer().getProperty( name );", "-        // Create the child element", "-        Object child = childConfigurer.createValue( state );", "-        if( child == null )", "-        {", "-            // Create an instance using the default constructor", "-            try", "-            {", "-                child = childConfigurer.getType().newInstance();", "-            }", "-            catch( final Exception e )", "-            {", "-                final String message =", "-                    REZ.getString( \"create-object.error\",", "-                                   childConfigurer.getType().getName() );", "-                throw new ConfigurationException( message, e );", "-            }", "-        }", "-", "-        // Configure the child element", "-        try", "-        {", "-            configureObject( child, element, context );", "-        }", "-        catch( final ConfigurationException ce )", "-        {", "-            // Nasty hack-o-rama, used to get this exception up through", "-            // the stack of doConfigure() calls.  This is unpacked by the", "-            // top-most configure() call, and rethrown.", "-            throw new InvocationTargetException( ce );", "-        }", "+        // Create & configure the child element", "+        final Object child =", "+            setupChild( state, element, context, childConfigurer );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f99cfe3076de1681de65e6005b64365d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "71aa092e8cec93a5c43c37a6becce11d3756de5b", "commitAfterChange": "598017b1cdec8da5d9ac7002f6625561aca80ac7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public static ClassLoader getContextClassLoader()         throws BuildException", "signatureAfterChange": "     public static ClassLoader getContextClassLoader()         throws BuildException", "diff": ["-        // Are we running on a JDK 1.2 or later system?", "-        Method method = null;", "-        try {", "-            method = Thread.class.getMethod(\"getContextClassLoader\", null);", "-        } catch (NoSuchMethodException e) {", "-            // we are running on JDK 1.1", "-            return null; ", "+        if (!LoaderUtils.isContextLoaderAvailable()) {", "+            return null;", "-", "-        // Get the thread context class loader (if there is one)", "-        ClassLoader classLoader = null;", "-        try {", "-            classLoader = (ClassLoader)", "-                method.invoke(Thread.currentThread(), null);", "-        } catch (IllegalAccessException e) {", "-            throw new BuildException", "-                (\"Unexpected IllegalAccessException\", e);", "-        } catch (InvocationTargetException e) {", "-            throw new BuildException", "-                (\"Unexpected InvocationTargetException\", e);", "-        }", "-", "-        // Return the selected class loader", "-        return (classLoader);", "+        ", "+        return LoaderUtils.getContextClassLoader();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "66eb5b4b090b46ed070933eeb3b0b85e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74f4fdf6d584a8eed312557212d88526", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "cf16fb5f634301ce5f7818c3b709677da5b3aac7", "commitAfterChange": "2ef29682402005b032a35068643e520194049c69", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": "     private void logVmExit(FormatterElement[] feArray, JUnitTest test,                            String message, String testCase)", "signatureAfterChange": "     private void logVmExit(FormatterElement[] feArray, JUnitTest test,                            String message, String testCase)", "diff": ["-                File outFile = getOutput(fe, test);", "-                JUnitTaskMirror.JUnitResultFormatterMirror formatter =", "-                    fe.createFormatter(classLoader);", "-                if (outFile != null && formatter != null) {", "-                    try {", "-                        OutputStream out = new FileOutputStream(outFile);", "-                        delegate.addVmExit(test, formatter, out, message, testCase);", "-                    } catch (IOException e) {", "-                        // ignore", "+                if (fe.shouldUse(this)) {", "+                    JUnitTaskMirror.JUnitResultFormatterMirror formatter =", "+                        fe.createFormatter(classLoader);", "+                    if (formatter != null) {", "+                        OutputStream out = null;", "+                        File outFile = getOutput(fe, test);", "+                        if (outFile != null) {", "+                            try {", "+                                out = new FileOutputStream(outFile);", "+                            } catch (IOException e) {", "+                                // ignore", "+                            }", "+                        }", "+                        if (out == null) {", "+                            out = getDefaultOutput();", "+                        }", "+                        delegate.addVmExit(test, formatter, out, message,", "+                                           testCase);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee880e8061b6c6634df17dd368e74cd4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/DescriptorHandler.java", "commitBeforeChange": "74e8a57c93dd534ebfbca3b4d92ea34789c7fe0c", "commitAfterChange": "0b31d6f97a5e41f33dabeda8daae2e13194c1bb5", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "               protected void processElement()", "signatureAfterChange": "               protected void processElement()", "diff": ["-        if (inEJBRef) {", "+        if (parseState != STATE_IN_ENTITY && parseState != STATE_IN_SESSION) {", "+", "+\t// Get the value of the <ejb-name> tag.  Only the first occurence.", "+        if (currentElement.equals(EJB_NAME)) {", "+            if ( ejbName == null ) {", "+                ejbName = currentText.trim();", "+            }", "+        }"]}]}
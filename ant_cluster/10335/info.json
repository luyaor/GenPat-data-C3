{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d40bf2dc4768a9d9dadef8074894717", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37a0a1a6f2fd521330e80752cba105ec", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Manifest.java", "commitBeforeChange": "8ceff1b470d117265bbe4dd7d982e448c213bb4f", "commitAfterChange": "c35619ac8a554bebec2008a08b8084993b3837f1", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "         public String addAttributeAndCheck(Attribute attribute) throws ManifestException", "signatureAfterChange": "         public String addAttributeAndCheck(Attribute attribute) throws ManifestException", "diff": ["-            else if (attributes.containsKey(attribute.getName().toLowerCase())) {", "-                throw new ManifestException(\"The attribute \\\"\" + attribute.getName() + \"\\\" may not \" + ", "-                                            \"occur more than once in the same section\");", "-            }", "-                attributes.put(attribute.getName().toLowerCase(), attribute);", "+                // classpath attributes go into a vector", "+                String attributeName = attribute.getName().toLowerCase();", "+                if (attributeName.equals(ATTRIBUTE_CLASSPATH)) {", "+                    Vector classpathAttrs = (Vector)attributes.get(attributeName);", "+                    if (classpathAttrs == null) {", "+                        classpathAttrs = new Vector();", "+                        attributes.put(attributeName, classpathAttrs);", "+                    }", "+                    classpathAttrs.addElement(attribute);", "+                }", "+                else if (attributes.containsKey(attributeName)) {", "+                    throw new ManifestException(\"The attribute \\\"\" + attribute.getName() + \"\\\" may not \" + ", "+                                                \"occur more than once in the same section\");", "+                }", "+                else {", "+                    attributes.put(attributeName, attribute);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f323bb55dac0e06b401f7892d40bd095", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/config/AntConfigHandler.java", "commitBeforeChange": "65b70febb53b077317c4d678291f9af547c3d116", "commitAfterChange": "f9d1c1691c7e9d80b793f5178f6113c949fc2441", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void startElement(String uri, String localName, String qualifiedName,                              Attributes attributes)          throws SAXParseException", "signatureAfterChange": "     public void startElement(String uri, String localName, String qualifiedName,                              Attributes attributes)          throws SAXParseException", "diff": ["-        // everything else is a task", "+        // configs support two task collections as elements", "-        config.addTask(buildElementHandler.getBuildElement());", "-//        try {", "-//        } catch (ConfigException e) {", "-//            throw new SAXParseException(\"Unable to process config\",", "-//                getLocator(), e);", "-//        }", "+        BuildElement element = buildElementHandler.getBuildElement();", "+        if (element.getType().equals(GLOBAL_TASKS_ELEMENT)) {", "+            config.addGlobalTasks(element);", "+        } else if (element.getType().equals(PERFRAME_TASKS_ELEMENT)) {", "+            config.addFrameTasks(element);", "+        } else {", "+            throw new SAXParseException(\"<antconfig> does not support the <\"", "+                + element.getType() + \"> element\", getLocator());", "+        }"]}]}
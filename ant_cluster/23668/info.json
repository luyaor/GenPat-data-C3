{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1aac8835380752405b308111b8a5c286", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d8bdcd03e68fece54382251e965f678", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/listener/CommonsLoggingListener.java", "commitBeforeChange": "8372d91e2632e11426949885f056804ae7717537", "commitAfterChange": "988ec061641b11cce372f8d85e12aa9f0134a8ae", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void messageLogged(BuildEvent event)", "signatureAfterChange": "     public void messageLogged(BuildEvent event)", "diff": ["+            String categoryString=null;", "+            String categoryDetail=null;", "+", "+                    categoryString=\"org.apache.tools.ant.Project\";", "+                    categoryDetail=event.getProject().getName();", "+                } else {", "+                    categoryString= \"org.apache.tools.ant.Target\";", "+                    categoryDetail=event.getTarget().getName();", "+            } else {", "+                // It's a task - append the target", "+                if( event.getTarget() != null ) {", "+                    categoryString=categoryObject.getClass().getName();", "+                    categoryDetail=event.getTarget().getName();", "+                } else {", "+                    categoryString=categoryObject.getClass().getName();", "+                }", "+", "-            Log log = logFactory.getInstance(categoryObject.getClass().getName());", "-            switch (event.getPriority()) {", "-                case Project.MSG_ERR:", "-                    log.error(event.getMessage());", "-                    break;", "-                case Project.MSG_WARN:", "-                    log.warn(event.getMessage());", "-                    break;", "-                case Project.MSG_INFO:", "-                    log.info(event.getMessage());", "-                    break;", "-                case Project.MSG_VERBOSE:", "-                    log.debug(event.getMessage());", "-                    break;", "-                case Project.MSG_DEBUG:", "-                    log.debug(event.getMessage());", "-                    break;", "-                default:", "-                    log.error(event.getMessage());", "-                    break;", "-            }", "+            Log log = getLog(categoryString, categoryDetail);", "+            int priority=event.getPriority();", "+            String message=event.getMessage();", "+            realLog( log, message, priority , null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5157193fc88b3daace5a3b4de5ee3c8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/junit/src/main/org/apache/tools/ant/taskdefs/optional/rjunit/remote/EventDispatcher.java", "commitBeforeChange": "5c43f6c93edfa3d34075b59a4ae199eb7257dab9", "commitAfterChange": "778a6800cfdfe174d4e21108400d4827124dadac", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void dispatchEvent(TestRunEvent evt)", "signatureAfterChange": "     public void dispatchEvent(TestRunEvent evt)", "diff": ["-       // I hate switch/case but no need to design a complex", "-       // system for limited events.", "-        switch (evt.getType()){", "-            case TestRunEvent.RUN_STARTED:", "-                fireRunStarted(evt);", "-                break;", "-            case TestRunEvent.RUN_ENDED:", "-                fireRunEnded(evt);", "-                break;", "-            case TestRunEvent.RUN_STOPPED:", "-                fireRunStopped(evt);", "-                break;", "-            case TestRunEvent.TEST_STARTED:", "-                fireTestStarted(evt);", "-                break;", "-            case TestRunEvent.TEST_ERROR:", "-                fireTestError(evt);", "-                break;", "-            case TestRunEvent.TEST_FAILURE:", "-                fireTestFailure(evt);", "-                break;", "-            case TestRunEvent.TEST_ENDED:", "-                fireTestEnded(evt);", "-                break;", "-            case TestRunEvent.SUITE_ENDED:", "-                fireSuiteEnded(evt);", "-                break;", "-            case TestRunEvent.SUITE_STARTED:", "-                fireSuiteStarted(evt);", "-                break;", "-            default:", "-                // should not happen", "+        final Integer type = new Integer(evt.getType());", "+        final EventAction action = (EventAction) eventMap.get(type);", "+        if (action == null) {", "+            return;", "-    }", "+            final int count = listeners.size();", "+            for (int i = 0; i < count; i++) {", "+                TestRunListener listener = (TestRunListener) listeners.get(i);", "+                action.dispatch(listener, evt);"]}]}
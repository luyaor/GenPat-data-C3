{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "701193bcdc3e7ef3f59a0f7d2df7bd89", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d6648077d8f963d1715147cc7110944", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ResourceUtils.java", "commitBeforeChange": "f079bd6d5cb0392dc5ff70eed3620e795ef21153", "commitAfterChange": "0e01584f3e42f2e116d8601b3d5198d5ac80c35b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public static void copyResource(Resource source, Resource dest,                             FilterSetCollection filters, Vector filterChains,                             boolean overwrite, boolean preserveLastModified,                                     boolean append,                                     String inputEncoding, String outputEncoding,                                     Project project, boolean force)         throws IOException", "signatureAfterChange": "     public static void copyResource(Resource source, Resource dest,                             FilterSetCollection filters, Vector filterChains,                             boolean overwrite, boolean preserveLastModified,                                     boolean append,                                     String inputEncoding, String outputEncoding,                                     Project project, boolean force)         throws IOException", "diff": ["-             effectiveInputEncoding = ((StringResource) source).getEncoding();", "+            effectiveInputEncoding = ((StringResource) source).getEncoding();", "-            BufferedReader in = null;", "-            BufferedWriter out = null;", "-            try {", "-                InputStreamReader isr = null;", "-                if (effectiveInputEncoding == null) {", "-                    isr = new InputStreamReader(source.getInputStream());", "-                } else {", "-                    isr = new InputStreamReader(source.getInputStream(),", "-                                                effectiveInputEncoding);", "-                }", "-                in = new BufferedReader(isr);", "-                OutputStream os = getOutputStream(dest, append, project);", "-                OutputStreamWriter osw;", "-                if (outputEncoding == null) {", "-                    osw = new OutputStreamWriter(os);", "-                } else {", "-                    osw = new OutputStreamWriter(os, outputEncoding);", "-                }", "-                out = new BufferedWriter(osw);", "-                if (filterChainsAvailable) {", "-                    ChainReaderHelper crh = new ChainReaderHelper();", "-                    crh.setBufferSize(FileUtils.BUF_SIZE);", "-                    crh.setPrimaryReader(in);", "-                    crh.setFilterChains(filterChains);", "-                    crh.setProject(project);", "-                    Reader rdr = crh.getAssembledReader();", "-                    in = new BufferedReader(rdr);", "-                }", "-                LineTokenizer lineTokenizer = new LineTokenizer();", "-                lineTokenizer.setIncludeDelims(true);", "-                String newline = null;", "-                String line = lineTokenizer.getToken(in);", "-                while (line != null) {", "-                    if (line.length() == 0) {", "-                        // this should not happen, because the lines are", "-                        // returned with the end of line delimiter", "-                        out.newLine();", "-                    } else {", "-                        newline = filters.replaceTokens(line);", "-                        out.write(newline);", "-                    }", "-                    line = lineTokenizer.getToken(in);", "-                }", "-            } finally {", "-                FileUtils.close(out);", "-                FileUtils.close(in);", "-            }", "+            copyWithFilterSets(source, dest, filters, filterChains,", "+                               filterChainsAvailable, append,", "+                               effectiveInputEncoding, outputEncoding,", "+                               project);", "-            BufferedReader in = null;", "-            BufferedWriter out = null;", "-            try {", "-                InputStreamReader isr = null;", "-                if (effectiveInputEncoding == null) {", "-                    isr = new InputStreamReader(source.getInputStream());", "-                } else {", "-                    isr = new InputStreamReader(source.getInputStream(),", "-                                                effectiveInputEncoding);", "-                }", "-                in = new BufferedReader(isr);", "-                OutputStream os = getOutputStream(dest, append, project);", "-                OutputStreamWriter osw;", "-                if (outputEncoding == null) {", "-                    osw = new OutputStreamWriter(os);", "-                } else {", "-                    osw = new OutputStreamWriter(os, outputEncoding);", "-                }", "-                out = new BufferedWriter(osw);", "-                if (filterChainsAvailable) {", "-                    ChainReaderHelper crh = new ChainReaderHelper();", "-                    crh.setBufferSize(FileUtils.BUF_SIZE);", "-                    crh.setPrimaryReader(in);", "-                    crh.setFilterChains(filterChains);", "-                    crh.setProject(project);", "-                    Reader rdr = crh.getAssembledReader();", "-                    in = new BufferedReader(rdr);", "-                }", "-                char[] buffer = new char[FileUtils.BUF_SIZE];", "-                while (true) {", "-                    int nRead = in.read(buffer, 0, buffer.length);", "-                    if (nRead == -1) {", "-                        break;", "-                    }", "-                    out.write(buffer, 0, nRead);", "-                }", "-            } finally {", "-                FileUtils.close(out);", "-                FileUtils.close(in);", "-            }", "+            copyWithFilterChainsOrTranscoding(source, dest, filterChains,", "+                                              filterChainsAvailable, append,", "+                                              effectiveInputEncoding,", "+                                              outputEncoding, project);", "-", "-            File parent = destFile.getParentFile();", "-            if (parent != null && !parent.isDirectory()", "-                && !(parent.mkdirs() || parent.isDirectory())) {", "-                throw new IOException(\"failed to create the parent directory\"", "-                                      + \" for \" + destFile);", "-            }", "-", "-            FileInputStream in = null;", "-            FileOutputStream out = null;", "-            FileChannel srcChannel = null;", "-            FileChannel destChannel = null;", "-", "-            try {", "-                in = new FileInputStream(sourceFile);", "-                out = new FileOutputStream(destFile);", "-                    ", "-                srcChannel = in.getChannel();", "-                destChannel = out.getChannel();", "-                ", "-                long position = 0;", "-                long count = srcChannel.size();", "-                while (position < count) {", "-                    long chunk = Math.min(MAX_IO_CHUNK_SIZE, count - position);", "-                    position +=", "-                        destChannel.transferFrom(srcChannel, position, chunk);", "-                }", "-            } finally {", "-                FileUtils.close(srcChannel);", "-                FileUtils.close(destChannel);", "-                FileUtils.close(out);", "-                FileUtils.close(in);", "-            }", "+            copyUsingFileChannels(sourceFile, destFile);", "-            InputStream in = null;", "-            OutputStream out = null;", "-            try {", "-                in = source.getInputStream();", "-                out = getOutputStream(dest, append, project);", "-", "-                byte[] buffer = new byte[FileUtils.BUF_SIZE];", "-                int count = 0;", "-                do {", "-                    out.write(buffer, 0, count);", "-                    count = in.read(buffer, 0, buffer.length);", "-                } while (count != -1);", "-            } finally {", "-                FileUtils.close(out);", "-                FileUtils.close(in);", "-            }", "+            copyUsingStreams(source, dest, append, project);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae0f32e22a0e3ad63bb88bee5493fb25", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ResourceUtils.java", "commitBeforeChange": "c9c4a2ce8d7cd469b1bd82242a2f4443c86745a7", "commitAfterChange": "35e9c976aca460e541e62bd67f88fa8482014f1e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public static void copyResource(Resource source, Resource dest,                             FilterSetCollection filters, Vector filterChains,                             boolean overwrite, boolean preserveLastModified, boolean append,                             String inputEncoding, String outputEncoding,                             Project project)         throws IOException", "signatureAfterChange": "     public static void copyResource(Resource source, Resource dest,                             FilterSetCollection filters, Vector filterChains,                             boolean overwrite, boolean preserveLastModified,                                     boolean append,                             String inputEncoding, String outputEncoding,                             Project project)         throws IOException", "diff": ["-                            boolean overwrite, boolean preserveLastModified, boolean append,", "+                            boolean overwrite, boolean preserveLastModified,", "+                                    boolean append,", "+        throws IOException {", "+        copyResource(source, dest, filters, filterChains, overwrite,", "+                     preserveLastModified, append, inputEncoding,", "+                     outputEncoding, project, /* force: */ false);", "+    }", "-                   && dest.as(FileProvider.class) != null) {", "-            File destFile =", "-                ((FileProvider) dest.as(FileProvider.class)).getFile();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "84b0221e5dbfcc7cc09b4123b78e0b0e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d4e0c8a85f49a6b74dbc548e681e560", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/command/NewElementDlg.java", "commitBeforeChange": "53ddc59eccb9ca398bcc74db1fc1577bde5b7d45", "commitAfterChange": "4c0c12c0f70aab990d7aefae3ab82d92d24c7cef", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void setList(String[] list)", "signatureAfterChange": "     public void setLists(String[] coreElements, String[] optionalElements)", "diff": ["-    public void setList(String[] list) {", "-        if (list == null || list.length == 0) {", "+    public void setLists(String[] coreElements, String[] optionalElements) {", "+", "+        // Are there any items to display?", "+        if ( (coreElements == null || coreElements.length == 0) &&", "+             (optionalElements == null || optionalElements.length == 0 ) ) {", "+", "+            // Hide the list", "+            _optionalButton.setVisible(false);", "-            _elementList.setListData(list);", "+            ", "+            // Are there any core elements?", "+            if (coreElements == null) {", "+                _coreElements = new ArrayList();", "+                ", "+                // Display the optional elements", "+                _optionalButton.setSelected(true);", "+                _optionalButton.setVisible(false);", "+            } else {", "+                // Create a sorted list of the core elements", "+                List temp = Collections.fill(null, coreElements);", "+                java.util.Collections.sort(temp);", "+                _coreElements = temp;", "+            }", "+            ", "+            // Are there any optional elements?", "+            if (optionalElements == null) {", "+                _optionalElements = new ArrayList();", "+                ", "+                // Display the core elements", "+                _optionalButton.setSelected(false);", "+                _optionalButton.setVisible(false);", "+            } else {", "+                // Create a sorted list of the optional elements", "+                List temp = Collections.fill(null, optionalElements);", "+                java.util.Collections.sort(temp);", "+                _optionalElements = temp;", "+            }", "+            ", "+            // Are the lists the same?", "+            if (_optionalElements.containsAll(_coreElements) &&", "+                _coreElements.containsAll(_optionalElements) ) {", "+                    ", "+                // Hide the button", "+                _optionalButton.setVisible(false);", "+            }", "+        enableButtons();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba8c8ee0096b759d1b9cd144b118ec23", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XSLTProcess.java", "commitBeforeChange": "ff38a6188bef2e1d3b6cace965f0075ea2c34bc5", "commitAfterChange": "82377345488d92a4bd5f65ae312611b4c7ae5cf0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        //-- make sure Source directory exists...", "-        if (destDir == null ) {", "-            String msg = \"destdir attributes must be set!\";", "-            throw new BuildException(msg);", "-        }", "-        scanner = getDirectoryScanner(baseDir);", "-        log(\"Transforming into \"+destDir, Project.MSG_INFO);", "-", "-        // if processor wasn't specified, see if TraX is available.  If not,", "-        // default it to xslp or xalan, depending on which is in the classpath", "-        if (liaison == null) {", "-            try {", "-                setProcessor(\"trax\");", "-            } catch (Throwable e1) {", "-                try {", "-                    setProcessor(\"xslp\");", "-                } catch (Throwable e2) {", "-                    try {", "-                        setProcessor(\"xalan\");", "-                    } catch (Throwable e3) {", "-                        throw new BuildException(e1);", "-                    }", "-                }", "-            }", "-        }", "-", "+        liaison = getLiaison();", "-                    log(\"DEPRECATED - the style attribute should be relative to the project\\'s\");", "-                    log(\"             basedir, not the tasks\\'s basedir.\");", "+                    /*", "+                     * shouldn't throw out deprectaion warnings before we know,", "+                     * the wrong version has been used.", "+                     */", "+                    if (file.exists()) {", "+                        log(\"DEPRECATED - the style attribute should be relative to the project\\'s\");", "+                        log(\"             basedir, not the tasks\\'s basedir.\");", "+                    }", "+", "+        /*", "+         * if we get here, in and out have not been specified, we are", "+         * in batch processing mode.", "+         */", "+", "+        //-- make sure Source directory exists...", "+        if (destDir == null ) {", "+            String msg = \"destdir attributes must be set!\";", "+            throw new BuildException(msg);", "+        }", "+        scanner = getDirectoryScanner(baseDir);", "+        log(\"Transforming into \"+destDir, Project.MSG_INFO);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5224b197ae81c91135463b5de3fe42f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ComponentManager.java", "commitBeforeChange": "fcc7e2b47f01468c83803caa09ce8266e56f213c", "commitAfterChange": "d571dff958cd85b5083a2a829f84e35b4abe4434", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private void addNestedElement(AntLibFactory factory, Setter setter,                                   Object element, BuildElement model)          throws ExecutionException", "signatureAfterChange": "     private void addNestedElement(AntLibFactory factory, Setter setter,                                   Object element, BuildElement model)          throws ExecutionException", "diff": ["-        String refId ", "-            = model.getAspectAttributeValue(Constants.ANT_ASPECT, \"refid\");", "-        if (refId != null && typeName != null) {", "-            throw new ExecutionException(\"Only one of \" + Constants.ANT_ASPECT", "-                 + \":type and \" + Constants.ANT_ASPECT", "-                 + \":refid may be specified at a time\", model.getLocation());", "-        }", "-        } else if (refId != null) {", "-            // We have a reference to an existing instance. Need to check if", "-            // it is compatible with the type expected by the nested element's", "-            // adder method", "-            typeInstance = frame.getDataValue(refId);", "-            if (model.getAttributeNames().hasNext() ||", "-                model.getNestedElements().hasNext() ||", "-                model.getText().length() != 0) {", "-                throw new ExecutionException(\"Element <\" + nestedElementName", "-                     + \"> is defined by reference and hence may not specify \"", "-                     + \"any attributes, nested elements or content\",", "-                    model.getLocation());", "-            }", "-            if (typeInstance == null) {", "-                throw new ExecutionException(\"The given ant:refid value '\"", "-                     + refId + \"' is not defined\", model.getLocation());", "-            }", "-            if (refId != null) {", "-                throw new ExecutionException(\"The value specified by refId \"", "-                     + refId + \" is not compatible with the <\"", "-                     + nestedElementName + \"> nested element\",", "-                    model.getLocation());", "-            } else if (typeName != null) {", "-                throw new ExecutionException(\"The type \"", "-                     + typeName + \" is not compatible with the <\"", "-                     + nestedElementName + \"> nested element\",", "-                    model.getLocation());", "-            }", "+            throw new ExecutionException(\"The type \"", "+                + typeName + \" is not compatible with the <\"", "+                + nestedElementName + \"> nested element\", model.getLocation());"]}]}
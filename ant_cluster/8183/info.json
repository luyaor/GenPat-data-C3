{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3fad2a160f1e90fa0af1ba61737f88d9", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ccadebccabcf2adf5e1e14c6226127b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "af007ba13234afc51a113ee612e6abad4642cad1", "commitAfterChange": "81b65c0eaa7fff0b658e28269907a36c3a83fc6b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private BuildLogger createLogger()", "signatureAfterChange": "     private BuildLogger createLogger()", "diff": ["-                Class loggerClass = Class.forName(loggerClassname);", "-                logger = (BuildLogger) (loggerClass.newInstance());", "-            } catch (ClassCastException e) {", "+                logger = (BuildLogger) ClasspathUtils.newInstance(", "+                        loggerClassname, Main.class.getClassLoader(),", "+                        BuildLogger.class);", "+            } catch (BuildException e) {", "-                    + \" does not implement the BuildLogger interface\");", "-                throw new RuntimeException();", "-            } catch (Exception e) {", "-                System.err.println(\"Unable to instantiate specified logger \"", "-                    + \"class \" + loggerClassname + \" : \"", "-                    + e.getClass().getName());", "+                    + \" could not be used because \" + e.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e57d07f31b96753c1233b9d32b9961fc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "af007ba13234afc51a113ee612e6abad4642cad1", "commitAfterChange": "81b65c0eaa7fff0b658e28269907a36c3a83fc6b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void addInputHandler(Project project) throws BuildException", "signatureAfterChange": "     private void addInputHandler(Project project) throws BuildException", "diff": ["-            try {", "-                handler = (InputHandler)", "-                    (Class.forName(inputHandlerClassname).newInstance());", "-                if (project != null) {", "-                    project.setProjectReference(handler);", "-                }", "-            } catch (ClassCastException e) {", "-                String msg = \"The specified input handler class \"", "-                    + inputHandlerClassname", "-                    + \" does not implement the InputHandler interface\";", "-                throw new BuildException(msg);", "-            } catch (Exception e) {", "-                String msg = \"Unable to instantiate specified input handler \"", "-                    + \"class \" + inputHandlerClassname + \" : \"", "-                    + e.getClass().getName();", "-                throw new BuildException(msg);", "+            handler = (InputHandler) ClasspathUtils.newInstance(", "+                    inputHandlerClassname, Main.class.getClassLoader(),", "+                    InputHandler.class);", "+            if (project != null) {", "+                project.setProjectReference(handler);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d9aafa7f4b68ea5d7069c0bd0e10e2d3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "062b9b2783327264468ca0f367ae86ec", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "b04ea4a4a37fda61874f9da193ccef4095afa2e8", "commitAfterChange": "672481d0aed938db880c9691736877e74cde875c", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 23, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        // Load the driver using the ", "-                log( \"Loading \" + driver + \" using AntClassLoader with classpath \" + classpath, ", "-                     Project.MSG_VERBOSE );", "-", "-                loader = new AntClassLoader(project, classpath);", "+                // check first that it is not already loaded otherwise", "+                // consecutive runs seems to end into an OutOfMemoryError", "+                // or it fails when there is a native library to load", "+                // several times.", "+                // this is far from being perfect but should work in most cases.", "+                synchronized (loaderMap){", "+                    if (caching){", "+                        loader = (AntClassLoader)loaderMap.get(driver);", "+                    }", "+                    if (loader == null){", "+                        log( \"Loading \" + driver + \" using AntClassLoader with classpath \" + classpath,", "+                             Project.MSG_VERBOSE );", "+                        loader = new AntClassLoader(project, classpath);", "+                        if (caching){", "+                            loaderMap.put(driver, loader);", "+                        }", "+                    } else {", "+                        log(\"Loading \" + driver + \" using a cached AntClassLoader.\",", "+                                Project.MSG_VERBOSE);", "+                    }", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2833f4b11ac8fc97e872da2b2b93ebf4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/VerifyJar.java", "commitBeforeChange": "02c264aee45f29a2936f681099661a31ad206500", "commitAfterChange": "a63a14400d4462d174133f8691a1219c06ad9bba", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void verifyOneJar(File jar)", "signatureAfterChange": "     private void verifyOneJar(File jar)", "diff": ["-        cmd.execute();", "-        String results=outputCache.toString();", "-        if(results.indexOf(VERIFIED_TEXT)<0) {", "-            throw new BuildException(ERROR_NO_VERIFY+jar);", "+        BuildException ex = null;", "+        try {", "+            cmd.execute();", "+        } catch (BuildException e) {", "+            ex = e;", "+        }", "+        String results = outputCache.toString();", "+        //deal with jdk1.4.2 bug:", "+        if (ex != null) {", "+            if (results.indexOf(\"zip file closed\") >= 0) {", "+                log(\"You are running \" + JARSIGNER_COMMAND + \" against a JVM with\"", "+                    + \" a known bug that manifests as an IllegalStateException.\",", "+                    Project.MSG_WARN);", "+            } else {", "+                throw ex;", "+            }", "+        }", "+        if (results.indexOf(VERIFIED_TEXT) < 0) {", "+            throw new BuildException(ERROR_NO_VERIFY + jar);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "684ae7bdc979352093238bc71831ec18", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteOn.java", "commitBeforeChange": "a39aaa86b6d9e6312ebb683ee3b92610908f044a", "commitAfterChange": "e4f004d939e26bd63906121996b3dd5d50d76734", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "      protected void runExec(Execute exe) throws BuildException", "signatureAfterChange": "      protected void runExec(Execute exe) throws BuildException", "diff": ["-                FileSet fs = (FileSet) filesets.elementAt(i);", "+                String currentType = type;", "+                AbstractFileSet fs = (AbstractFileSet) filesets.elementAt(i);", "+                if (fs instanceof DirSet) {", "+                    if (!\"dir\".equals(type)) {", "+                        log(\"Found a nested dirset but type is \" + type + \". \" ", "+                            + \"Temporarily switching to type=\\\"dir\\\" on the\" +", "+                            \" assumption that you really did mean\" +", "+                            \" <dirset> not <fileset>.\", Project.MSG_DEBUG);", "+                        currentType = \"dir\";", "+                    }", "+                }", "-                if (!\"dir\".equals(type)) {", "+                if (!\"dir\".equals(currentType)) {", "-                if (!\"file\".equals(type)) {", "+                if (!\"file\".equals(currentType)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1243edcffe064b2e869a8499692764a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "4248bab8eaef8265c62fc3a612bfee1943086133", "commitAfterChange": "4464369821e5824727322622259f6ffd3ab8880b", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "     public void scan() throws IllegalStateException", "signatureAfterChange": "     public void scan() throws IllegalStateException", "diff": ["+        File savedBase = basedir;", "+", "+                if (basedir != null && !followSymlinks", "+                    && FILE_UTILS.isSymbolicLink(basedir.getParentFile(),", "+                                                 basedir.getName())) {", "+                    basedir = null;", "+                }", "+        } catch (IOException ex) {", "+            throw new BuildException(ex);", "+            basedir = savedBase;"]}]}
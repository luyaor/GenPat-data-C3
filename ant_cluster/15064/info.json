{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea400a2b87f4e1586a41ae8bc8967700", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3128069be65bb7fe01b28551e7a123a8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "cbef49e344857a1cf7c35737b67d3c732f901710", "commitAfterChange": "b839a3ed0f3a0ad050579c33f2ede3e8b8542fea", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private InputStream getResourceStream(File file, String resourceName)", "signatureAfterChange": "     private InputStream getResourceStream(File file, String resourceName)", "diff": ["-                ZipFile zipFile = null;", "-                try {", "+                // is the zip file in the cache", "+                ZipFile zipFile = (ZipFile)zipFiles.get(file);", "+                if (zipFile == null) {", "-        ", "-                    ZipEntry entry = zipFile.getEntry(resourceName);", "-                    if (entry != null) {", "-                        // we need to read the entry out of the zip file into", "-                        // a baos and then ", "-                        ByteArrayOutputStream baos = new ByteArrayOutputStream();", "-                        byte[] buffer = new byte[BUFFER_SIZE];", "-                        int bytesRead;", "-                        InputStream stream = zipFile.getInputStream(entry);", "-                        while ((bytesRead = stream.read(buffer, 0, BUFFER_SIZE)) != -1) {", "-                            baos.write(buffer, 0, bytesRead);", "-                        }", "-                        return new ByteArrayInputStream(baos.toByteArray());   ", "-                    }", "+                    zipFiles.put(file, zipFile);                    ", "-                finally {", "-                    if (zipFile != null) {", "-                        zipFile.close();", "-                    }", "+                ZipEntry entry = zipFile.getEntry(resourceName);", "+                if (entry != null) {", "+                    return zipFile.getInputStream(entry);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7dadcbb866f3ef5e8837f214a3c14c1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/selectors/modifiedselector/HashvalueAlgorithm.java", "commitBeforeChange": "d1e9fb46083b84b3277bdf8d4e23e05ffc19fbd7", "commitAfterChange": "87142931bdb6a80473706eb4adaf3c9234be57fb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public String getValue(File file)", "signatureAfterChange": "     public String getValue(File file)", "diff": ["+        Reader r = null;", "-            java.io.FileInputStream fis = new java.io.FileInputStream(file);", "-            StringBuffer content = new StringBuffer();", "-            byte[] buffer = new byte[256];            ", "-            int len = 0;", "-            while ((len = fis.read(buffer, 0, len)) != -1) {", "-                content.append(new String(buffer, 0, len));", "-            }", "-            fis.close();", "-            int hash = content.toString().hashCode();", "+            r = new FileReader(file);", "+            int hash = FileUtils.readFully(r).hashCode();", "+        } finally {", "+            FileUtils.close(r);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b24a156a6951e1e541b33658177b8eb9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "118e6159eaba72af68f7c06773e0fbbb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/Frame.java", "commitBeforeChange": "b83132393de1bdee68b42caea0604469c85d0306", "commitAfterChange": "af074bc65d9fdde7982618162dfdab2dfae06e5f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public Frame(InitConfig initConfig, AntConfig config)", "signatureAfterChange": "     public Frame(AntEnvironment antEnv, AntConfig config)", "diff": ["-    public Frame(InitConfig initConfig, AntConfig config) {", "+    public Frame(AntEnvironment antEnv, AntConfig config) {", "-        this.initConfig = initConfig;", "+        this.antEnv = antEnv;", "-            = new AntLibManager(initConfig, config.isRemoteLibAllowed());", "+            = new AntLibManager(antEnv, config.isRemoteLibAllowed());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1842aad3a46b4b481ea33d4947404b96", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/main/org/apache/ant/frontend/Commandline.java", "commitBeforeChange": "a48208f6cf8cf80ef1e144305ff8dfe0958599d5", "commitAfterChange": "c2e518039b65dc5b8c9c31f9f78b2d72ea8db2d1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "          protected void addBuildListeners(ExecutionManager executionManager)              throws ConfigException", "signatureAfterChange": "          protected void addBuildListeners(ExecutionFrame frame)              throws ConfigException", "diff": ["-    protected void addBuildListeners(ExecutionManager executionManager) ", "+    protected void addBuildListeners(ExecutionFrame frame) ", "-        executionManager.addBuildListener(createLogger());", "+        frame.addBuildListener(createLogger());", "-                executionManager.addBuildListener(listener);", "+                frame.addBuildListener(listener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "256dc06c79b9e09f88bb98c38fa33b88", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/frontends/CLIMain.java", "commitBeforeChange": "4b271a99de084498864bf54271e7836bf47d828f", "commitAfterChange": "45fd8b03391ec3cccd1da7e67782e6c0f9317491", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private void execute( final String[] args )         throws Exception", "signatureAfterChange": "      private void execute( final String[] args )         throws Exception", "diff": ["-            final ProjectManager manager = ", "-                embeddor.createProjectManager( project, m_defines );", "-            manager.addProjectListener( listener );", "+            final Workspace workspace = embeddor.createWorkspace( project, m_defines );", "+            workspace.addProjectListener( listener );", "-            doBuild( manager, project, m_targets );", "+            doBuild( workspace, project, m_targets );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "392757f6ae128738ed56f60c2f1f98bd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/frontend/org/apache/ant/cli/Commandline.java", "commitBeforeChange": "b83132393de1bdee68b42caea0604469c85d0306", "commitAfterChange": "af074bc65d9fdde7982618162dfdab2dfae06e5f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void process(String[] args, InitConfig initConfig)", "signatureAfterChange": "     private void process(String[] args, AntEnvironment antEnv)", "diff": ["-    private void process(String[] args, InitConfig initConfig) {", "-        this.initConfig = initConfig;", "+    private void process(String[] args, AntEnvironment antEnv) {", "+        this.antEnv = antEnv;", "-                FrontendUtils.getAntConfig(initConfig.getUserConfigArea());", "+                FrontendUtils.getAntConfig(antEnv.getUserConfigArea());", "-                 = FrontendUtils.getAntConfig(initConfig.getSystemConfigArea());", "+                 = FrontendUtils.getAntConfig(antEnv.getSystemConfigArea());", "-            mainFrame = new Frame(initConfig, config);", "+            mainFrame = new Frame(antEnv, config);"]}]}
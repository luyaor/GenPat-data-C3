{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bbb9b70b36cbcc500bf417d85e91dbaf", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fa72505177634e3f6052d4c0a699ccf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/email/PlainMailer.java", "commitBeforeChange": "b1b76c9c72c63ad046f952916e61b6aa8c1fea94", "commitAfterChange": "1be216b5d5ba9365d09b12c64ad31cd3cc7d5cdd", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void send()", "signatureAfterChange": "     public void send()", "diff": ["+            boolean atLeastOneRcptReached = false;", "-                mailMessage.to(e.nextElement().toString());", "+                String to = e.nextElement().toString();", "+                try {", "+                    mailMessage.to(to);", "+                    atLeastOneRcptReached = true;", "+                } catch (IOException ex) {", "+                    badRecipient(to, ex);", "+                }", "-                mailMessage.cc(e.nextElement().toString());", "+                String to = e.nextElement().toString();", "+                try {", "+                    mailMessage.cc(to);", "+                    atLeastOneRcptReached = true;", "+                } catch (IOException ex) {", "+                    badRecipient(to, ex);", "+                }", "-                mailMessage.bcc(e.nextElement().toString());", "+                String to = e.nextElement().toString();", "+                try {", "+                    mailMessage.bcc(to);", "+                    atLeastOneRcptReached = true;", "+                } catch (IOException ex) {", "+                    badRecipient(to, ex);", "+                }", "+            }", "+            if (!atLeastOneRcptReached) {", "+                throw new BuildException(\"Couldn't reach any recipient\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "698e907867faca68c279856f5270bd67", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2InputStream.java", "commitBeforeChange": "2e5b53fa106b848646493cb6f6ea74616973aca0", "commitAfterChange": "a67cf020bd250a1fb2acecf7cfd0159f25200dc2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private void init() throws IOException", "signatureAfterChange": "      private boolean init(boolean isFirstStream) throws IOException", "diff": ["-    private void init() throws IOException {", "+    private boolean init(boolean isFirstStream) throws IOException {", "-        if (in.available() == 0) {", "-            throw new IOException(\"Empty InputStream\");", "+        ", "+        if (isFirstStream) {", "+            if (in.available() == 0) {", "+                throw new IOException(\"Empty InputStream\");", "+            }", "+        } else {", "+            int magic0 = this.in.read();", "+            if (magic0 == -1) {", "+                return false;", "+            }", "+            int magic1 = this.in.read();", "+            if (magic0 != 'B' || magic1 != 'Z') {", "+                throw new IOException(\"Garbage after a valid BZip2 stream\");", "+            }", "+", "-            throw new IOException(\"Stream is not BZip2 formatted: expected 'h'\"", "-                                  + \" as first byte but got '\" + (char) magic2", "-                                  + \"'\");", "+            throw new IOException(isFirstStream", "+                    ? \"Stream is not in the BZip2 format\"", "+                    : \"Garbage after a valid BZip2 stream\");", "-        initBlock();", "-        setupBlock();", "+        this.bsLive = 0;", "+        this.computedCombinedCRC = 0;", "+", "+        return true;"]}]}
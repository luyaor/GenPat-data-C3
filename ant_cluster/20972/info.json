{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e109344b7fbe848ee4130f03b98f02a1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d3b50396fb892b1ef1acbf3fad1b90a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Definer.java", "commitBeforeChange": "edc2de39292cfb5b94b3dc7563df9f71ad4f1006", "commitAfterChange": "fa7d0ce02c707462773336c0743dca2dbff04db1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+                if (url == null) {", "+                    return;", "+                }", "-                    loadAntlib(al, url);", "+                    if (resourceStack.getStack().contains(url)) {", "+                        log(\"Warning: Attempting to recursively load \" + url", "+                            + \" at \" + getLocation(),", "+                            Project.MSG_WARN);", "+                    } else {", "+                        try {", "+                            resourceStack.getStack().add(url);", "+                            loadAntlib(al, url);", "+                        } finally {", "+                            resourceStack.getStack().remove(url);", "+                        }", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ce872dcb338903595d4c06b4305409f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/XMLJUnitResultFormatter.java", "commitBeforeChange": "d90686a9a82bf54d19f1cad9e7cca0aeae46c4aa", "commitAfterChange": "96e6561e659a24f1e2122d884e83561327cb0f48", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void endTest(Test test)", "signatureAfterChange": "     public void endTest(Test test)", "diff": ["-        Element currentTest = (Element) testElements.get(test);", "-        ", "-        if (currentTest == null) {", "+        if (!testStarts.containsKey(test)) {", "+        }", "+", "+        Element currentTest = null;", "+        if (!failedTests.containsKey(test)) {", "+            currentTest = doc.createElement(TESTCASE);", "+            currentTest.setAttribute(ATTR_NAME, ", "+                                     JUnitVersionHelper.getTestCaseName(test));", "+            rootElement.appendChild(currentTest);", "+            testElements.put(test, currentTest);", "+        } else {", "-        ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43c50f8c3ff73698239b9531af9a30f0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/AbstractCvsTask.java", "commitBeforeChange": "db6f41966b34711218dcd8aa386a8fe530cf7a26", "commitAfterChange": "11d374efe3957ff5648c5d5e3103b855df442a0d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     protected void runCommand(Commandline toExecute) throws BuildException", "signatureAfterChange": "     protected void runCommand(Commandline toExecute) throws BuildException", "diff": ["-        if(passFile == null) {", "+        if (passFile == null) {", "-            if(defaultPassFile.exists())", "+            if(defaultPassFile.exists()) {", "+            }", "-            Environment.Variable var = new Environment.Variable();", "-            var.setKey(\"CVS_PASSFILE\");", "-            var.setValue(String.valueOf(passFile));", "-            env.addVariable(var);", "-            log(\"Using cvs passfile: \" + String.valueOf(passFile), ", "-                Project.MSG_INFO);", "+            if (passFile.isFile() && passFile.canRead()) {", "+                Environment.Variable var = new Environment.Variable();", "+                var.setKey(\"CVS_PASSFILE\");", "+                var.setValue(String.valueOf(passFile));", "+                env.addVariable(var);", "+                log(\"Using cvs passfile: \" + String.valueOf(passFile), ", "+                    Project.MSG_INFO);", "+            } else if (!passFile.canRead()) {", "+                log(\"cvs passfile: \" + String.valueOf(passFile)", "+                    + \" ignored as it is not readable\",", "+                    Project.MSG_WARN);", "+            } else {", "+                log(\"cvs passfile: \" + String.valueOf(passFile)", "+                    + \" ignored as it is not a file\",", "+                    Project.MSG_WARN);", "+            }"]}]}
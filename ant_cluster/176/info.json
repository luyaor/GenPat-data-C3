{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "82d35aec9cfec192d7bb5950658d9860", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0276377687c3f54a5cb8bcdedede2b20", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Jar.java", "commitBeforeChange": "819d9a02f1085497e96e67950aa889b05bcdfe68", "commitAfterChange": "c00d5a6977e62911b613f7b4464e9d953057e4cd", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private void createIndexList(ZipOutputStream zOut) throws IOException", "signatureAfterChange": "     private void createIndexList(ZipOutputStream zOut) throws IOException", "diff": ["-        // JarIndex is sorting the directories by ascending order.", "-        // it's painful to do in JDK 1.1 and it has no value but cosmetic", "-        // since it will be read into a hashtable by the classloader.", "-        Enumeration e = addedDirs.keys();", "-        while (e.hasMoreElements()) {", "-            String dir = (String) e.nextElement();", "+        writeIndexLikeList(new ArrayList(addedDirs.keySet()), ", "+                           rootEntries, writer);", "+        writer.println();", "-            // try to be smart, not to be fooled by a weird directory name", "-            // @fixme do we need to check for directories starting by ./ ?", "-            dir = dir.replace('\\\\', '/');", "-            int pos = dir.lastIndexOf('/');", "-            if (pos != -1) {", "-                dir = dir.substring(0, pos);", "+        if (indexJars != null) {", "+            Manifest mf = createManifest();", "+            Manifest.Attribute classpath =", "+                mf.getMainSection().getAttribute(Manifest.ATTRIBUTE_CLASSPATH);", "+            String[] cpEntries = null;", "+            if (classpath != null) {", "+                StringTokenizer tok = new StringTokenizer(classpath.getValue(),", "+                                                          \" \");", "+                cpEntries = new String[tok.countTokens()];", "+                int c = 0;", "+                while (tok.hasMoreTokens()) {", "+                    cpEntries[c++] = tok.nextToken();", "+                }", "-", "-            // looks like nothing from META-INF should be added", "-            // and the check is not case insensitive.", "-            // see sun.misc.JarIndex", "-            if (dir.startsWith(\"META-INF\")) {", "-                continue;", "+            String[] indexJarEntries = indexJars.list();", "+            for (int i = 0; i < indexJarEntries.length; i++) {", "+                String name = findJarName(indexJarEntries[i], cpEntries);", "+                if (name != null) {", "+                    ArrayList dirs = new ArrayList();", "+                    ArrayList files = new ArrayList();", "+                    grabFilesAndDirs(indexJarEntries[i], dirs, files);", "+                    if (dirs.size() + files.size() > 0) {", "+                        writer.println(name);", "+                        writeIndexLikeList(dirs, files, writer);", "+                        writer.println();", "+                    }", "+                }", "-            // name newline", "-            writer.println(dir);", "-        }", "-", "-        e = rootEntries.elements();", "-        while (e.hasMoreElements()) {", "-            writer.println(e.nextElement());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66feed67d44263ec70bc194b5e84ecb9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "7b6a46d13193059c7ea056ad646fe5620e2bb79d", "commitAfterChange": "740ed5fbfbb7f59db596062f9e853fba40a65722", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     protected void printResults(PrintStream out) throws java.sql.SQLException", "signatureAfterChange": "     protected void printResults(PrintStream out) throws java.sql.SQLException", "diff": ["-        do {", "-            rs = statement.getResultSet();", "-            if (rs != null) {", "-                log(\"Processing new result set.\", Project.MSG_VERBOSE);", "-                ResultSetMetaData md = rs.getMetaData();", "-                int columnCount = md.getColumnCount();", "-                StringBuffer line = new StringBuffer();", "-                if (showheaders) {", "-                    for (int col = 1; col < columnCount; col++) {", "-                         line.append(md.getColumnName(col));", "-                         line.append(\",\");", "-                    }", "-                    line.append(md.getColumnName(columnCount));", "-                    out.println(line);", "-                    line = new StringBuffer();", "+        rs = statement.getResultSet();", "+        if (rs != null) {", "+            log(\"Processing new result set.\", Project.MSG_VERBOSE);", "+            ResultSetMetaData md = rs.getMetaData();", "+            int columnCount = md.getColumnCount();", "+            StringBuffer line = new StringBuffer();", "+            if (showheaders) {", "+                for (int col = 1; col < columnCount; col++) {", "+                     line.append(md.getColumnName(col));", "+                     line.append(\",\");", "-                while (rs.next()) {", "-                    boolean first = true;", "-                    for (int col = 1; col <= columnCount; col++) {", "-                        String columnValue = rs.getString(col);", "-                        if (columnValue != null) {", "-                            columnValue = columnValue.trim();", "-                        }", "+                line.append(md.getColumnName(columnCount));", "+                out.println(line);", "+                line = new StringBuffer();", "+            }", "+            while (rs.next()) {", "+                boolean first = true;", "+                for (int col = 1; col <= columnCount; col++) {", "+                    String columnValue = rs.getString(col);", "+                    if (columnValue != null) {", "+                        columnValue = columnValue.trim();", "+                    }", "-                        if (first) {", "-                            first = false;", "-                        } else {", "-                            line.append(\",\");", "-                        }", "-                        line.append(columnValue);", "+                    if (first) {", "+                        first = false;", "+                    } else {", "+                        line.append(\",\");", "-                    out.println(line);", "-                    line = new StringBuffer();", "+                    line.append(columnValue);", "+                out.println(line);", "+                line = new StringBuffer();", "-        while (statement.getMoreResults());"]}]}
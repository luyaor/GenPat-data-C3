{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d2a5de0d6d1bda4c706ad217e36c2509", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11046367f93bac6404cc437834c7f3b1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/javacc/JavaCC.java", "commitBeforeChange": "a177bc702d6f9cdcd37e0fff65f577e66b297735", "commitAfterChange": "22b84e3a90aa69d0b0de53d108af5b9caf75a59a", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": "     protected static String getMainClass(File home, int type)         throws BuildException", "signatureAfterChange": "     protected static String getMainClass(Path path, int type)         throws BuildException", "diff": ["-        int majorVersion = getMajorVersionNumber(home);", "+     */", "+    protected static String getMainClass(Path path, int type)", "+        throws BuildException {", "-        switch (majorVersion) {", "-        case 1:", "-        case 2:", "+        AntClassLoader l = new AntClassLoader();", "+        l.setClassPath(path.concatSystemClasspath(\"ignore\"));", "+        String javaccClass = COM_PACKAGE + COM_JAVACC_CLASS;", "+        InputStream is = l.getResourceAsStream(javaccClass.replace('.', '/')", "+                                               + \".class\");", "+        if (is != null) {", "-", "-", "-            break;", "-", "-        case 3:", "-            /*", "-             * This is where the fun starts, JavaCC 3.0 uses", "-             * org.netbeans.javacc, 3.1 uses org.javacc - I wonder", "-             * which version is going to use net.java.javacc.", "-             *", "-             * Look into to the archive to pick up the best", "-             * package.", "-             */", "-            ZipFile zf = null;", "-            try {", "-                zf = new ZipFile(getArchiveFile(home));", "-                if (zf.getEntry(ORG_PACKAGE_3_0.replace('.', '/')) != null) {", "+        } else {", "+            javaccClass = ORG_PACKAGE_3_1 + ORG_JAVACC_CLASS;", "+            is = l.getResourceAsStream(javaccClass.replace('.', '/')", "+                                       + \".class\");", "+            if (is != null) {", "+                packagePrefix = ORG_PACKAGE_3_1;", "+            } else {", "+                javaccClass = ORG_PACKAGE_3_0 + ORG_JAVACC_CLASS;", "+                is = l.getResourceAsStream(javaccClass.replace('.', '/')", "+                                           + \".class\");", "+                if (is != null) {", "-                } else {", "-                    packagePrefix = ORG_PACKAGE_3_1;", "-                }", "-            } catch (IOException e) {", "-                throw new BuildException(\"Error reading javacc.jar\", e);", "-            } finally {", "-                if (zf != null) {", "-                    try {", "-                        zf.close();", "-                    } catch (IOException e) {", "-                        throw new BuildException(e);", "-                    }", "-            switch (type) {", "-            case TASKDEF_TYPE_JAVACC:", "-                mainClass = ORG_JAVACC_CLASS;", "-", "+            if (is != null) {", "+                switch (type) {", "+                case TASKDEF_TYPE_JAVACC:", "+                    mainClass = ORG_JAVACC_CLASS;", "+                    ", "+                ", "+                case TASKDEF_TYPE_JJTREE:", "+                    mainClass = ORG_JJTREE_CLASS;", "+                    ", "+                    break;", "-            case TASKDEF_TYPE_JJTREE:", "-                mainClass = ORG_JJTREE_CLASS;", "-", "-                break;", "-", "-            case TASKDEF_TYPE_JJDOC:", "-                mainClass = ORG_JJDOC_CLASS;", "-", "-                break;", "+                case TASKDEF_TYPE_JJDOC:", "+                    mainClass = ORG_JJDOC_CLASS;", "+                    ", "+                    break;", "+                }", "-", "-            break;", "+        if (packagePrefix == null) {", "+            throw new BuildException(\"failed to load JavaCC\");", "+        }", "+        if (mainClass == null) {", "+            throw new BuildException(\"unknown task type \" + type);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f798458e2b341ac878667e0d4b0178d9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/Ejbc.java", "commitBeforeChange": "403c32e5c5322f65e184f6d21496d0295d74f6e1", "commitAfterChange": "655df7f9e198a141defc9dcfb45f7f14cd7749f8", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        String execClassPath = project.translatePath(systemClassPath + \":\" + classpath +", "-                                                         \":\" + generatedFilesDirectory);", "+        Path execClassPath = new Path(project, classpath + \":\" + generatedFilesDirectory + \":\" + systemClassPath);", "+        ", "-        String[] files = ds.getIncludedFiles();", "+        String[] descriptorNames = ds.getIncludedFiles();", "+        ", "-        Java helperTask = (Java)project.createTask(\"java\");", "-        helperTask.setFork(true);", "-        helperTask.setClassname(\"org.apache.tools.ant.taskdefs.optional.ejb.EjbcHelper\");", "-        String args = \"\";", "-        args += \" \" + descriptorDirectory;", "-        args += \" \" + generatedFilesDirectory;", "-        args += \" \" + sourceDirectory;", "-        args += \" \" + generatedManifestFile;", "-        for (int i = 0; i < files.length; ++i) {", "-            args += \" \" + files[i];", "+        // create an class loader", "+        AntClassLoader loader = new AntClassLoader(project, execClassPath, false);", "+        loader.addSystemPackageRoot(\"org.apache.tools.ant\");", "+        loader.addSystemPackageRoot(\"javax\");", "+        try {", "+            Helper helper = (Helper)(loader.forceLoadClass(\"org.apache.tools.ant.taskdefs.optional.ejb.EjbcHelper\").newInstance());", "+            helper.initialize(this);", "+            helper.setDescriptorDir(descriptorDirectory);", "+            helper.setDest(generatedFilesDirectory);", "+            helper.setManifest(generatedManifestFile);", "+            helper.setSrc(sourceDirectory);", "+            helper.setDescriptors(descriptorNames);", "+            helper.setClasspath(execClassPath);", "+            helper.execute();", "+            helper = null;", "-                                    ", "-        helperTask.setArgs(args);", "-        helperTask.setClasspath(new Path(project, execClassPath));", "-        if (helperTask.executeJava() != 0) {                         ", "-            throw new BuildException(\"Execution of ejbc helper failed\");", "+        catch (Exception e) {", "+            throw new BuildException(e);", "+        loader = null;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9b8c4f84602a98b0048434a1fa5df625", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "063f1c81864af62253f39a92b8a551c2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "c0644567309a28976e5f5bbb55f5197aae27cdd7", "commitAfterChange": "bbcbfb186ae539b9e9927daf1f0ab87ad43de049", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+        Path classpath = commandline.createClasspath(project);", "+        for (int i=0; i<classpathReferences.size(); i++) {", "+            Reference r = (Reference) classpathReferences.elementAt(i);", "+            Object o = r.getReferencedObject(project);", "+            if (o instanceof Path) {", "+                classpath.append((Path) o);", "+            } else {", "+                String msg = r.getRefId()+\" doesn\\'t denote a classpath\";", "+                throw new BuildException(msg, location);", "+            }", "+        }", "+        ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14104e9094fc81550a697da622677381", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Rmic.java", "commitBeforeChange": "3c6661202656fab045e5becd7f0b2e3f4cba293d", "commitAfterChange": "c32873b51961cb99f47b4ae6da2922b7b46a6f89", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        String classpath = getCompileClasspath(baseDir);", "+        Path classpath = getCompileClasspath(baseDir);", "+", "+        for (int i=0; i<classpathReferences.size(); i++) {", "+            Reference r = (Reference) classpathReferences.elementAt(i);", "+            Object o = r.getReferencedObject(project);", "+            if (o instanceof Path) {", "+                classpath.append((Path) o);", "+            } else {", "+                String msg = r.getRefId()+\" doesn\\'t denote a classpath\";", "+                throw new BuildException(msg, location);", "+            }", "+        }", "+        ", "-        args[i++] = classpath;", "+        args[i++] = classpath.toString();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4fd5f9a8237748b500dd2bc9d502c5ba", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0140130d54715a0054e0278a8e333521", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/xml/XSLTProcess.java", "commitBeforeChange": "030fd751f51bef1c60b27cc4034cf1b013551520", "commitAfterChange": "0deb15031e9e934900b3b41f0d191dabdece8f80", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "      private void process( File inFile, File outFile, File stylesheet )         throws TaskException", "signatureAfterChange": "      private void processFile( final File in, final File out )         throws TaskException", "diff": ["+", "+    private void processFile( final File in, final File out )", "+        throws TaskException", "+    {", "+        final long styleSheetLastModified = m_stylesheet.lastModified();", "+        try", "+        {", "+            if( m_force ||", "+                in.lastModified() > out.lastModified() ||", "+                styleSheetLastModified > out.lastModified() )", "+            {", "+                ensureDirectoryFor( out );", "+", "+                final String notice = \"Processing \" + in + \" to \" + out;", "+                getLogger().info( notice );", "+                transform( in, out );", "+            }", "+        }", "+        catch( final Exception e )", "+        {", "+            // If failed to process document, must delete target document,", "+            // or it will not attempt to process it the second time", "+            final String message = \"Failed to process \" + in;", "+            getLogger().info( message );", "+            if( out != null )", "+            {", "+                out.delete();", "+            }", "+", "+            throw new TaskException( e.getMessage(), e );", "+        }", "+    }", "-", "-    private void process( File inFile, File outFile, File stylesheet )", "-        throws TaskException", "-    {", "-        try", "-        {", "-            final long styleSheetLastModified = stylesheet.lastModified();", "-            getLogger().debug( \"In file \" + inFile + \" time: \" + inFile.lastModified() );", "-            getLogger().debug( \"Out file \" + outFile + \" time: \" + outFile.lastModified() );", "-            getLogger().debug( \"Style file \" + m_xslFile + \" time: \" + styleSheetLastModified );", "-", "-            if( m_force ||", "-                inFile.lastModified() > outFile.lastModified() ||", "-                styleSheetLastModified > outFile.lastModified() )", "-            {", "-                ensureDirectoryFor( outFile );", "-                getLogger().info( \"Processing \" + inFile + \" to \" + outFile );", "-                configureLiaison( stylesheet );", "-                m_liaison.transform( inFile, outFile );", "-            }", "-        }", "-        catch( Exception ex )", "-        {", "-            getLogger().info( \"Failed to process \" + inFile );", "-            if( outFile != null )", "-            {", "-                outFile.delete();", "-            }", "-            throw new TaskException( \"Error\", ex );", "-        }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2125e6762e339496996fa6d9703a87b7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/tar/TarEntry.java", "commitBeforeChange": "b43f4224d8fe9d1e7d628e88df394a7dfed46d1b", "commitAfterChange": "2e5b53fa106b848646493cb6f6ea74616973aca0", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 53, "signatureBeforeChange": "     public void writeEntryHeader(byte[] outbuf)", "signatureAfterChange": "     public void writeEntryHeader(byte[] outbuf, ZipEncoding encoding,                                  boolean starMode) throws IOException", "diff": ["+     */", "+    public void writeEntryHeader(byte[] outbuf, ZipEncoding encoding,", "+                                 boolean starMode) throws IOException {", "-        offset = TarUtils.getNameBytes(name, outbuf, offset, NAMELEN);", "-        offset = TarUtils.getOctalBytes(mode, outbuf, offset, MODELEN);", "-        offset = TarUtils.getOctalBytes(userId, outbuf, offset, UIDLEN);", "-        offset = TarUtils.getOctalBytes(groupId, outbuf, offset, GIDLEN);", "-        offset = TarUtils.getLongOctalBytes(size, outbuf, offset, SIZELEN);", "-        offset = TarUtils.getLongOctalBytes(modTime, outbuf, offset, MODTIMELEN);", "+        offset = TarUtils.formatNameBytes(name, outbuf, offset, NAMELEN,", "+                                          encoding);", "+        offset = writeEntryHeaderField(mode, outbuf, offset, MODELEN, starMode);", "+        offset = writeEntryHeaderField(userId, outbuf, offset, UIDLEN,", "+                                       starMode);", "+        offset = writeEntryHeaderField(groupId, outbuf, offset, GIDLEN,", "+                                       starMode);", "+        offset = writeEntryHeaderField(size, outbuf, offset, SIZELEN, starMode);", "+        offset = writeEntryHeaderField(modTime, outbuf, offset, MODTIMELEN,", "+                                       starMode);", "-        offset = TarUtils.getNameBytes(linkName, outbuf, offset, NAMELEN);", "-        offset = TarUtils.getNameBytes(magic, outbuf, offset, MAGICLEN);", "-        offset = TarUtils.getNameBytes(userName, outbuf, offset, UNAMELEN);", "-        offset = TarUtils.getNameBytes(groupName, outbuf, offset, GNAMELEN);", "-        offset = TarUtils.getOctalBytes(devMajor, outbuf, offset, DEVLEN);", "-        offset = TarUtils.getOctalBytes(devMinor, outbuf, offset, DEVLEN);", "+        offset = TarUtils.formatNameBytes(linkName, outbuf, offset, NAMELEN,", "+                                          encoding);", "+        offset = TarUtils.formatNameBytes(magic, outbuf, offset, PURE_MAGICLEN);", "+        offset = TarUtils.formatNameBytes(version, outbuf, offset, VERSIONLEN);", "+        offset = TarUtils.formatNameBytes(userName, outbuf, offset, UNAMELEN,", "+                                          encoding);", "+        offset = TarUtils.formatNameBytes(groupName, outbuf, offset, GNAMELEN,", "+                                          encoding);", "+        offset = writeEntryHeaderField(devMajor, outbuf, offset, DEVLEN,", "+                                       starMode);", "+        offset = writeEntryHeaderField(devMinor, outbuf, offset, DEVLEN,", "+                                       starMode);", "-        TarUtils.getCheckSumOctalBytes(chk, outbuf, csOffset, CHKSUMLEN);", "+        TarUtils.formatCheckSumOctalBytes(chk, outbuf, csOffset, CHKSUMLEN);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5005e73cf09b2c2793da328c28ca56bc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ResourceUtils.java", "commitBeforeChange": "f7cec58a607900954a1686009fb5ebe4ea6ddea6", "commitAfterChange": "3ae69e82c33e0e03941387a3506561accc2697d3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public static void copyResource(Resource source, Resource dest,                              FilterSetCollection filters, Vector filterChains,                              boolean overwrite, boolean preserveLastModified,                              String inputEncoding, String outputEncoding,                              Project project)         throws IOException", "signatureAfterChange": "     public static void copyResource(Resource source, Resource dest,                             FilterSetCollection filters, Vector filterChains,                             boolean overwrite, boolean preserveLastModified, boolean append,                             String inputEncoding, String outputEncoding,                             Project project)         throws IOException", "diff": ["-        if (!overwrite) {", "-            long slm = source.getLastModified();", "-            if (dest.isExists() && slm != 0", "-                && dest.getLastModified() > slm) {", "-                return;", "-            }", "+     */", "+    public static void copyResource(Resource source, Resource dest,", "+                            FilterSetCollection filters, Vector filterChains,", "+                            boolean overwrite, boolean preserveLastModified, boolean append,", "+                            String inputEncoding, String outputEncoding,", "+                            Project project)", "+        throws IOException {", "+        if (!(overwrite || SelectorUtils.isOutOfDate(source, dest, FileUtils.getFileUtils()", "+                .getFileTimestampGranularity()))) {", "+            return;", "-                OutputStreamWriter osw = null;", "+                OutputStream os = getOutputStream(dest, append, project);", "+                OutputStreamWriter osw;", "-                    osw = new OutputStreamWriter(dest.getOutputStream());", "+                    osw = new OutputStreamWriter(os);", "-                    osw = new OutputStreamWriter(dest.getOutputStream(),", "-                                                 outputEncoding);", "+                    osw = new OutputStreamWriter(os, outputEncoding);", "-                OutputStreamWriter osw = null;", "+                OutputStream os = getOutputStream(dest, append, project);", "+                OutputStreamWriter osw;", "-                    osw = new OutputStreamWriter(dest.getOutputStream());", "+                    osw = new OutputStreamWriter(os);", "-                    osw = new OutputStreamWriter(dest.getOutputStream(),", "-                                                 outputEncoding);", "+                    osw = new OutputStreamWriter(os, outputEncoding);", "-                out = dest.getOutputStream();", "+                out = getOutputStream(dest, append, project);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5243650dd2963501ae7dd8385391ff4b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/tar/TarBuffer.java", "commitBeforeChange": "3494ca7bb3adf2962b4d05abfc666b65adf18e09", "commitAfterChange": "0b93bdd7cdfe6a7a48f02cf125014e5d538d5381", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void writeRecord( byte[] buf, int offset )         throws IOException", "signatureAfterChange": "     public void writeRecord( final byte[] buffer, final int offset )         throws IOException", "diff": ["-    public void writeRecord( byte[] buf, int offset )", "+    public void writeRecord( final byte[] buffer, final int offset )", "-        if( this.debug )", "+        if( m_debug )", "-            System.err.println( \"WriteRecord: recIdx = \" + this.currRecIdx", "-                                + \" blkIdx = \" + this.currBlkIdx );", "+            final String message = \"WriteRecord: recIdx = \" + m_currRecIdx +", "+                \" blkIdx = \" + m_currBlkIdx;", "+            debug( message );", "-        if( this.outStream == null )", "+        if( null == m_output )", "-            throw new IOException( \"writing to an input buffer\" );", "+            final String message = \"writing to an input buffer\";", "+            throw new IOException( message );", "-        if( ( offset + this.recordSize ) > buf.length )", "+        if( ( offset + m_recordSize ) > buffer.length )", "-            throw new IOException( \"record has length '\" + buf.length", "-                                   + \"' with offset '\" + offset", "-                                   + \"' which is less than the record size of '\"", "-                                   + this.recordSize + \"'\" );", "+            final String message = \"record has length '\" + buffer.length +", "+                \"' with offset '\" + offset + \"' which is less than the record size of '\" +", "+                m_recordSize + \"'\";", "+            throw new IOException( message );", "-        if( this.currRecIdx >= this.recsPerBlock )", "+        if( m_currRecIdx >= m_recsPerBlock )", "-            this.writeBlock();", "+            writeBlock();", "-        System.arraycopy( buf, offset, this.blockBuffer,", "-                          ( this.currRecIdx * this.recordSize ),", "-                          this.recordSize );", "+        System.arraycopy( buffer,", "+                          offset,", "+                          m_blockBuffer,", "+                          ( m_currRecIdx * m_recordSize ),", "+                          m_recordSize );", "-        this.currRecIdx++;", "+        m_currRecIdx++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b494cd3ae281dd0bd66f5416fe18748c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/tar/TarBuffer.java", "commitBeforeChange": "3494ca7bb3adf2962b4d05abfc666b65adf18e09", "commitAfterChange": "0b93bdd7cdfe6a7a48f02cf125014e5d538d5381", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     public void writeRecord( byte[] record )         throws IOException", "signatureAfterChange": "     public void writeRecord( final byte[] record )         throws IOException", "diff": ["-    public void writeRecord( byte[] record )", "+    public void writeRecord( final byte[] record )", "-        if( this.debug )", "+        if( m_debug )", "-            System.err.println( \"WriteRecord: recIdx = \" + this.currRecIdx", "-                                + \" blkIdx = \" + this.currBlkIdx );", "+            final String message = \"WriteRecord: recIdx = \" + m_currRecIdx +", "+                \" blkIdx = \" + m_currBlkIdx;", "+            debug( message );", "-        if( this.outStream == null )", "+        if( null == m_output )", "-            throw new IOException( \"writing to an input buffer\" );", "+            final String message = \"writing to an input buffer\";", "+            throw new IOException( message );", "-        if( record.length != this.recordSize )", "+        if( record.length != m_recordSize )", "-            throw new IOException( \"record to write has length '\"", "-                                   + record.length", "-                                   + \"' which is not the record size of '\"", "-                                   + this.recordSize + \"'\" );", "+            final String message = \"record to write has length '\" +", "+                record.length + \"' which is not the record size of '\" +", "+                m_recordSize + \"'\";", "+            throw new IOException( message );", "-        if( this.currRecIdx >= this.recsPerBlock )", "+        if( m_currRecIdx >= m_recsPerBlock )", "-            this.writeBlock();", "+            writeBlock();", "-        System.arraycopy( record, 0, this.blockBuffer,", "-                          ( this.currRecIdx * this.recordSize ),", "-                          this.recordSize );", "+        System.arraycopy( record,", "+                          0,", "+                          m_blockBuffer,", "+                          ( m_currRecIdx * m_recordSize ),", "+                          m_recordSize );", "-        this.currRecIdx++;", "+        m_currRecIdx++;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7978fe6870fad3a651c542adcdd2e0dc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e0be9d95952dfdfc27b837e9fdb1444", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ExecutionManager.java", "commitBeforeChange": "7499c443d67445ea8fd0b8f4bd56c72251b18bf4", "commitAfterChange": "b7e43ad8c5906ae2b6d6b42f8b2715dc7d2e7a16", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void configLibrary(InitConfig initConfig, Map librarySpecs,                                String libraryId, Set configured,                                CircularDependencyChecker configuring)          throws ConfigException", "signatureAfterChange": "     private void addConfigLibPaths()          throws ConfigException", "diff": ["+    private void addConfigLibPaths()", "+         throws ConfigException {", "+        if (config == null) {", "+        // now add any additional library Paths specified by the config", "+        for (Iterator i = config.getLibraryIds(); i.hasNext(); ) {", "-     */", "-    private void configLibrary(InitConfig initConfig, Map librarySpecs,", "-                               String libraryId, Set configured,", "-                               CircularDependencyChecker configuring)", "-         throws ConfigException {", "-", "-        try {", "-", "-            configuring.visitNode(libraryId);", "-", "-            AntLibrarySpec librarySpec", "-                 = (AntLibrarySpec)librarySpecs.get(libraryId);", "-            String extendsId = librarySpec.getExtendsLibraryId();", "-            if (extendsId != null) {", "-                if (!configured.contains(extendsId)) {", "-                    if (!librarySpecs.containsKey(extendsId)) {", "-                        throw new ConfigException(\"Could not find library, \"", "-                             + extendsId + \", upon which library \"", "-                             + libraryId + \" depends\");", "+            if (antLibraries.containsKey(libraryId)) {", "+                AntLibrary antLib", "+                     = (AntLibrary)antLibraries.get(libraryId);", "+                List pathList = config.getLibraryPathList(libraryId);", "+                for (Iterator j = pathList.iterator(); j.hasNext(); ) {", "+                    URL pathElementURL = (URL)j.next();", "+                    if (!pathElementURL.getProtocol().equals(\"file\")", "+                         && !config.isRemoteLibAllowed()) {", "+                        throw new ConfigException(\"Remote libpaths are not\"", "+                             + \" allowed: \" + pathElementURL);", "-                    configLibrary(initConfig, librarySpecs, extendsId,", "-                        configured, configuring);", "+                    antLib.addLibraryURL(pathElementURL);", "-", "-            // now create the library for the specification", "-            AntLibrary antLibrary = new AntLibrary(librarySpec);", "-", "-            // determine the URLs required for this task. These are the", "-            // task URL itself, the XML parser URLs if required, the", "-            // tools jar URL if required", "-            List urlsList = new ArrayList();", "-", "-            if (librarySpec.getLibraryURL() != null) {", "-                urlsList.add(librarySpec.getLibraryURL());", "-            }", "-            if (librarySpec.isToolsJarRequired()", "-                 && initConfig.getToolsJarURL() != null) {", "-                urlsList.add(initConfig.getToolsJarURL());", "-            }", "-", "-            URL[] parserURLs = initConfig.getParserURLs();", "-            if (librarySpec.usesAntXML()) {", "-                for (int i = 0; i < parserURLs.length; ++i) {", "-                    urlsList.add(parserURLs[i]);", "-                }", "-            }", "-", "-            for (Iterator i = urlsList.iterator(); i.hasNext(); ) {", "-                antLibrary.addLibraryURL((URL)i.next());", "-            }", "-            if (extendsId != null) {", "-                AntLibrary extendsLibrary", "-                     = (AntLibrary)antLibraries.get(extendsId);", "-                antLibrary.setExtendsLibrary(extendsLibrary);", "-            }", "-            antLibrary.setParentLoader(initConfig.getCommonLoader());", "-            antLibraries.put(libraryId, antLibrary);", "-            configuring.leaveNode(libraryId);", "-        } catch (CircularDependencyException e) {", "-            throw new ConfigException(e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe3073ac267aa6c0eff2a53888fdcb42", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ExecutionManager.java", "commitBeforeChange": "7499c443d67445ea8fd0b8f4bd56c72251b18bf4", "commitAfterChange": "b7e43ad8c5906ae2b6d6b42f8b2715dc7d2e7a16", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public ExecutionManager(InitConfig initConfig)          throws ConfigException", "signatureAfterChange": "     public ExecutionManager(InitConfig initConfig, AntConfig config)          throws ConfigException", "diff": ["-    public ExecutionManager(InitConfig initConfig)", "+    public ExecutionManager(InitConfig initConfig, AntConfig config)", "-        Map librarySpecs = new HashMap();", "+        this.config = config;", "+        this.initConfig = initConfig;", "-        AntConfig userConfig = getAntConfig(initConfig.getUserConfigArea());", "-        AntConfig systemConfig = getAntConfig(initConfig.getSystemConfigArea());", "-", "-        AntConfig config = systemConfig;", "-        if (config == null) {", "-            config = userConfig;", "-        } else if (userConfig != null) {", "-            config.merge(userConfig);", "-        }", "-", "+        Map librarySpecs = new HashMap(10);", "-            URL taskBaseURL = new URL(initConfig.getLibraryURL(), \"antlibs\");", "-            addAntLibraries(librarySpecs, taskBaseURL);", "+            URL standardLibsURL", "+                 = new URL(initConfig.getLibraryURL(), \"antlibs/\");", "+            AntLibManager libManager", "+                 = new AntLibManager(config.isRemoteLibAllowed());", "+", "+            libManager.addAntLibraries(librarySpecs, standardLibsURL);", "+            libManager.configLibraries(initConfig, librarySpecs, antLibraries);", "+", "+            librarySpecs.clear();", "+            // add any additional libraries.", "-                // Now add in any found in the dirs specified in", "-                // the config files", "-                for (Iterator i = config.getTaskDirLocations(); i.hasNext(); ) {", "+                for (Iterator i = config.getLibraryLocations(); i.hasNext(); ) {", "-                    String taskDirString = (String)i.next();", "-                    File taskDir = new File(taskDirString);", "-                    if (!taskDir.exists()) {", "-                        URL taskDirURL = new URL(taskDirString);", "-                        addAntLibraries(librarySpecs, taskDirURL);", "-                    } else {", "-                        addAntLibraries(librarySpecs,", "-                            InitUtils.getFileURL(taskDir));", "-                    }", "+                    String libLocation = (String)i.next();", "+                    libManager.loadLib(librarySpecs, libLocation);", "+            libManager.configLibraries(initConfig, librarySpecs, antLibraries);", "-            configLibraries(initConfig, librarySpecs);", "+            addConfigLibPaths();", "-            if (config != null) {", "-                // now add any additional library Paths specified by the config", "-                for (Iterator i = config.getLibraryIds(); i.hasNext(); ) {", "-                    String libraryId = (String)i.next();", "-                    if (antLibraries.containsKey(libraryId)) {", "-                        AntLibrary antLib ", "-                            = (AntLibrary)antLibraries.get(libraryId);", "-                        List pathList = config.getLibraryPathList(libraryId);", "-                        for (Iterator j = pathList.iterator(); j.hasNext(); ) {", "-                            URL pathElementURL = (URL)j.next();", "-                            antLib.addLibraryURL(pathElementURL);", "-                        }", "-                    }", "-                }", "-            }", "-", "-            mainFrame = new ExecutionFrame(antLibraries);", "+            mainFrame = new ExecutionFrame(antLibraries, initConfig, config);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0bbdbf47e848927df8d32c40cfba34d2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8fa9ecc503c42eed01233ce54cb477f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void run()", "signatureAfterChange": "     @Override \tpublic void run()", "diff": ["-    public void run() {", "+    @Override", "+\tpublic void run() {", "-        ByteArrayOutputStream errStrm = new ByteArrayOutputStream();", "-        ByteArrayOutputStream outStrm = new ByteArrayOutputStream();", "+        final ByteArrayOutputStream errStrm = new ByteArrayOutputStream();", "+        final ByteArrayOutputStream outStrm = new ByteArrayOutputStream();", "-                } catch (NoSuchMethodException e) {", "+                } catch (final NoSuchMethodException e) {", "-                    } catch (ClassNotFoundException e) {", "+                    } catch (final ClassNotFoundException e) {", "-                       if (!containsTests( testClass, junit4)) {", "+                       if (!containsTests(testClass, junit4)) {", "-                            TestSuite testSuite = new TestSuite(testClass.getName());", "+                            final TestSuite testSuite = new TestSuite(testClass.getName());", "-            } catch (Throwable e) {", "+            } catch (final Throwable e) {", "-            long start = System.currentTimeMillis();", "+            final long start = System.currentTimeMillis();", "-                        int[] cnts = findJUnit4FailureErrorCount(res);", "+                        final int[] cnts = findJUnit4FailureErrorCount(res);", "-                } catch (OutOfMemoryError ex) {", "+                } catch (final OutOfMemoryError ex) {", "-                } catch (OutOfMemoryError ex) {", "+                } catch (final OutOfMemoryError ex) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab454c05c393962e78cdf3371c1000ee", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/DirectoryScannerTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void testSetFollowLinks() throws IOException", "signatureAfterChange": "     @Test     public void testSetFollowLinks() throws IOException, InterruptedException", "diff": ["-    public void testSetFollowLinks() throws IOException {", "+    @Test", "+    public void testSetFollowLinks() throws IOException, InterruptedException {", "-                try {", "-                    Runtime.getRuntime().exec(command);", "-                    // give ourselves some time for the system call", "-                    // to execute... tweak if you have a really over", "-                    // loaded system.", "-                    Thread.sleep(1000);", "-                } catch (IOException ioe) {", "-                    fail(\"IOException making link \"+ioe);", "-                } catch (InterruptedException ie) {", "-                }", "+                Process process = Runtime.getRuntime().exec(command);", "+                assertEquals(\"0 return code expected for external process\", 0, process.waitFor());", "+", "-                System.err.println(\"link exists after exec? \" + linkFile.exists());", "-                System.err.println(\"Ant knows it is a link? \" + SymbolicLinkUtils.getSymbolicLinkUtils().isSymbolicLink(dir, \"ThisIsALink\"));", "-                System.err.println(\"link exists pre-delete? \" + linkFile.exists());", "-                    throw new RuntimeException(\"Failed to delete \" + linkFile);", "+                    //TODO log this?", "+                    //throw new RuntimeException(\"Failed to delete \" + linkFile);", "-                System.err.println(\"link exists post-delete? \" + linkFile.exists());", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6ea44ca06ab43f03190f72fd430a5db", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/ClassConstants.java", "commitBeforeChange": "01416df30317628b3eda7a26958cce0c2f987b26", "commitAfterChange": "d9d9e2f86fb156cc6e69af999f3ece4c10cbd2e0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public int read() throws IOException", "signatureAfterChange": "     public int read() throws IOException", "diff": ["-                final byte[] bytes = clazz.getBytes();", "+                final byte[] bytes = clazz.getBytes(\"ISO-8859-1\");", "-                } catch (ClassNotFoundException cnfe) {", "-                    throw new IOException(cnfe.getMessage());", "-                } catch (NoSuchMethodException nsme) {", "-                    throw new IOException(nsme.getMessage());", "-                } catch (IllegalAccessException iae) {", "-                    throw new IOException(iae.getMessage());", "-                } catch (IllegalArgumentException iarge) {", "-                    throw new IOException(iarge.getMessage());", "-                } catch (InvocationTargetException ite) {", "-                    throw new IOException(ite.getMessage());", "+                } catch (NoClassDefFoundError ex) {", "+                    throw ex;", "+                } catch (RuntimeException ex) {", "+                    throw ex;", "+                } catch (InvocationTargetException ex) {", "+                    Throwable t = ex.getTargetException();", "+                    if (t instanceof NoClassDefFoundError) {", "+                        throw (NoClassDefFoundError) t;", "+                    }", "+                    if (t instanceof RuntimeException) {", "+                        throw (RuntimeException) t;", "+                    }", "+                    throw new BuildException(t);", "+                } catch (Exception ex) {", "+                    throw new BuildException(ex);"]}]}
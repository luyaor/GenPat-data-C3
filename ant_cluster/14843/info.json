{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7a3520d5793208fe1901ed027daab681", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d8e3788d9e8bf64eec9ad4b9f24f16d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/starteam/TreeBasedTask.java", "commitBeforeChange": "837f7ef785e24137608ba41f850d605b23bccff4", "commitAfterChange": "23e61358c8ed2aa3fe63c1f67082150047f1df9e", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 32, "signatureBeforeChange": "     protected static Hashtable listLocalFiles(java.io.File localFolder)", "signatureAfterChange": "         UnmatchedFileMap init(java.io.File localFolder, Folder remoteFolder)", "diff": ["-    protected static Hashtable listLocalFiles(java.io.File localFolder) {", "-        Hashtable localFileList = new Hashtable();", "-        // we can't use java 2 collections so we will use an identity", "-        // Hashtable to  hold the file names.  We only care about the keys,", "-        // not the values (which will all be \"\").", "+         */", "+        UnmatchedFileMap init(java.io.File localFolder, Folder remoteFolder) {", "+            if (!localFolder.exists()) {", "+                return this;", "+            }", "-        if (localFolder.exists()) {", "-            for (int i = 0; i < localFiles.length; i++) {", "-                localFileList.put(localFolder.toString() +", "-                        java.io.File.separatorChar + localFiles[i], \"\");", "+    ", "+            for (int i=0; i < localFiles.length; i++) {", "+                String fn = localFiles[i];", "+                java.io.File localFile = ", "+                    new java.io.File(localFolder, localFiles[i]).getAbsoluteFile();", "+                ", "+                log(\"adding \" + localFile + \" to UnmatchedFileMap\",", "+                    Project.MSG_DEBUG);", "+    ", "+                if (localFile.isDirectory()) {", "+                    this.put(localFile, new Folder( remoteFolder, fn, fn));", "+                } ", "+                else {", "+                    com.starbase.starteam.File remoteFile = ", "+                        new com.starbase.starteam.File(remoteFolder);", "+                    remoteFile.setName(fn);", "+                    this.put(localFile, remoteFile);", "+                }", "+            }", "+            return this;", "+        }", "-        return localFileList;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd99e7018d305ff969928c7b9f14f8e3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/junit/src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "9ff0d86547933b2d071b31d0afb51780597a051a", "commitAfterChange": "59c0b1595d0d41e479765772788b976d9429c24d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        File tmp = configureTestRunner();", "-        Execute execute = new Execute(new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN));", "-        execute.setCommandline(cmd.getCommandline());", "-        execute.setAntRun(project);", "-", "-        log(RES.getString(\"task.process-cmdline.log\", cmd.toString()), Project.MSG_VERBOSE);", "-        int retVal;", "-        try {", "-            retVal = execute.execute();", "-        } catch (IOException e) {", "-            String msg = RES.getString(\"task.process-failed.error\");", "-            throw new BuildException(msg, e, location);", "-        } finally {", "-            tmp.delete();", "+        if (client == null && server == null) {", "+            throw new BuildException(\"Invalid state: need to be server, client or both\");", "-    }", "+        // 1) server and client", "+        if (server != null && client != null) {", "+            ServerWorker worker = new ServerWorker();", "+            worker.start();", "+            client.execute();", "+            Exception caught = null;", "+            try {", "+                worker.join();", "+                caught = worker.getException();", "+            } catch (InterruptedException e){", "+                caught = e;", "+            if (caught != null){", "+                throw new BuildException(caught);", "+            }", "+            return;", "+        // 2) server only (waiting for client)", "+        if (server != null && client == null) {", "+            server.execute();", "+            return;", "+", "+        // 3) client only (connecting to server)", "+        if (server == null && client != null) {", "+            client.execute();", "+            return;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9bb3191b391363a3f4b5c83c8fa6cca", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ResourceUtils.java", "commitBeforeChange": "8741512d8c2e4cad30f0c6e6134d9a793f00d4b7", "commitAfterChange": "9ae5d99ebe852fbb42a386b4c4969bb974e4d107", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public static void copyResource(Resource source, Resource dest,                             FilterSetCollection filters, Vector filterChains,                             boolean overwrite, boolean preserveLastModified, boolean append,                             String inputEncoding, String outputEncoding,                             Project project)         throws IOException", "signatureAfterChange": "     public static void copyResource(Resource source, Resource dest,                             FilterSetCollection filters, Vector filterChains,                             boolean overwrite, boolean preserveLastModified, boolean append,                             String inputEncoding, String outputEncoding,                             Project project)         throws IOException", "diff": ["+        } else if (source.as(FileProvider.class) != null", "+                   && dest.as(FileProvider.class) != null) {", "+            File sourceFile =", "+                ((FileProvider) source.as(FileProvider.class)).getFile();", "+            File destFile =", "+                ((FileProvider) dest.as(FileProvider.class)).getFile();", "+", "+            File parent = destFile.getParentFile();", "+            if (parent != null && !parent.isDirectory()", "+                && !destFile.getParentFile().mkdirs()) {", "+                throw new IOException(\"failed to create the parent directory\"", "+                                      + \" for \" + destFile);", "+            }", "+", "+            FileInputStream in = null;", "+            FileOutputStream out = null;", "+            FileChannel srcChannel = null;", "+            FileChannel destChannel = null;", "+", "+            try {", "+                in = new FileInputStream(sourceFile);", "+                out = new FileOutputStream(destFile);", "+                    ", "+                srcChannel = in.getChannel();", "+                destChannel = out.getChannel();", "+                ", "+                long position = 0;", "+                long count = srcChannel.size();", "+                while (position < count) {", "+                    position +=", "+                        srcChannel.transferTo(position, FileUtils.BUF_SIZE,", "+                                              destChannel);", "+                }", "+            } finally {", "+                FileUtils.close(srcChannel);", "+                FileUtils.close(destChannel);", "+                FileUtils.close(out);", "+                FileUtils.close(in);", "+            }"]}]}
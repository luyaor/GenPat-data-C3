{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8ff91237cecad6365a35c5a8ff68180d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3806f5297d384c7e60efad68defc53c7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Replace.java", "commitBeforeChange": "9fdb1c85ba0d2fab36ce8f3b0563f393d955ac9d", "commitAfterChange": "a51c373c0fcf539fc8f71b5c21951fa64439d361", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 28, "signatureBeforeChange": "     private void processFile(File src) throws BuildException", "signatureAfterChange": "     private void processFile(File src) throws BuildException", "diff": ["-        Reader reader = null;", "-        Writer writer = null;", "+        FileInput in = null;", "+        FileOutput out = null;", "-            reader = encoding == null ? new FileReader(src)", "-                : new InputStreamReader(new FileInputStream(src), encoding);", "+            in = new FileInput(src);", "-            BufferedReader br = new BufferedReader(reader);", "-", "-            String buf = FileUtils.readFully(br);", "-            br.close();", "-            reader = null;", "-", "-            if (buf == null) {", "-                buf = \"\";", "-            }", "-", "-            StringBuffer buffer = new StringBuffer(buf);", "-            buf = null;", "+            temp = fileUtils.createTempFile(\"rep\", \".tmp\",", "+                    src.getParentFile());", "+            out = new FileOutput(temp);", "-            processReplacefilters(buffer, src.getPath());", "+            out.setInputBuffer(buildFilterChain(in.getOutputBuffer()));", "+", "+            while (in.readChunck()) {", "+                if (processFilterChain()) {", "+                    out.process();", "+                }", "+            }", "+", "+            flushFilterChain();", "+", "+            out.flush();", "+            in.close();", "+            in = null;", "+            out.close();", "+            out = null;", "-                String out = buffer.toString();", "-                temp = fileUtils.createTempFile(\"rep\", \".tmp\",", "-                        src.getParentFile());", "-                temp.deleteOnExit();", "-                writer = encoding == null ? new FileWriter(temp)", "-                        : new OutputStreamWriter(new FileOutputStream(temp), encoding);", "-                BufferedWriter bw = new BufferedWriter(writer);", "-                bw.write(out, 0, out.length());", "-                bw.flush();", "-                bw.close();", "-                writer = null;", "-                ++fileCount;", "-                                    + ioe.getClass().getName() + \":\"", "-                                    + ioe.getMessage(), ioe, getLocation());", "+                    + ioe.getClass().getName() + \":\"", "+                    + ioe.getMessage(), ioe, getLocation());", "-            if (reader != null) {", "+            if (in != null) {", "-                    reader.close();", "+                    in.close();", "-            if (writer != null) {", "+            if (out != null) {", "-                    writer.close();", "+                    out.close();", "-                temp.delete();", "+                if (!temp.delete()) {", "+                    temp.deleteOnExit();", "+                }", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b8023ab757a3c6134dc1c45d049103d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/listener/MailLogger.java", "commitBeforeChange": "8f4a67608a919e16059f3a74cf08a940d4a2f085", "commitAfterChange": "04340a9cb3fc58edcb167ec7fc3a7c8da2a8bb8c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void buildFinished(BuildEvent event)", "signatureAfterChange": "     public void buildFinished(BuildEvent event)", "diff": ["-", "-            String mailhost = getValue(properties, \"mailhost\", \"localhost\");", "-            int port = Integer.parseInt(getValue(properties, \"port\",", "-                                        String.valueOf(MailMessage.DEFAULT_PORT)));", "-            String user = getValue(properties, \"user\", \"\");", "-            String password = getValue(properties, \"password\", \"\");", "-            boolean ssl = Project.toBoolean(getValue(properties,", "-                     \"ssl\", \"off\"));", "-            String from = getValue(properties, \"from\", null);", "-            String replytoList = getValue(properties, \"replyto\", \"\");", "-            String toList = getValue(properties, prefix + \".to\", null);", "-            String subject = getValue(properties, prefix + \".subject\",", "-                    (success) ? \"Build Success\" : \"Build Failure\");", "-            if (user.equals(\"\") && password.equals(\"\") && !ssl) {", "-                sendMail(mailhost, port,  from, replytoList, toList,", "-                         subject, buffer.substring(0));", "+            Values values = new Values()", "+                .mailhost(getValue(properties, \"mailhost\", \"localhost\"))", "+                .port(Integer.parseInt(", "+                          getValue(", "+                              properties, \"port\",", "+                              String.valueOf(MailMessage.DEFAULT_PORT))))", "+                .user(getValue(properties, \"user\", \"\"))", "+                .password(getValue(properties, \"password\", \"\"))", "+                .ssl(Project.toBoolean(getValue(properties,", "+                                                \"ssl\", \"off\")))", "+                .from(getValue(properties, \"from\", null))", "+                .replytoList(getValue(properties, \"replyto\", \"\"))", "+                .toList(getValue(properties, prefix + \".to\", null))", "+                .subject(getValue(", "+                             properties, prefix + \".subject\",", "+                             (success) ? \"Build Success\" : \"Build Failure\"));", "+            if (values.user().equals(\"\")", "+                && values.password().equals(\"\")", "+                && !values.ssl()) {", "+                sendMail(values, buffer.substring(0));", "-                sendMimeMail(event.getProject(), mailhost, port, user,", "-                             password, ssl, from, replytoList, toList,", "-                             subject, buffer.substring(0));", "+                sendMimeMail(", "+                    event.getProject(), values, buffer.substring(0));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a0958b0483ae6872b64f3b827af0289", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "8793957204b1e3607d35150f6631ccadc786c52c", "commitAfterChange": "7030e8de61dc33cedbcff46a1438b62fc1da5f9d", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "     private void logVmExit(FormatterElement[] feArray, JUnitTest test,                            String message)", "signatureAfterChange": "     private void logVmExit(FormatterElement[] feArray, JUnitTest test,                            String message)", "diff": ["-        createClassLoader();", "-        test.setCounts(1, 0, 1);", "-        test.setProperties(getProject().getProperties());", "-        for (int i = 0; i < feArray.length; i++) {", "-            FormatterElement fe = feArray[i];", "-            File outFile = getOutput(fe, test);", "-            JUnitTaskMirror.JUnitResultFormatterMirror formatter = fe.createFormatter(classLoader);", "-            if (outFile != null && formatter != null) {", "-                try {", "-                    OutputStream out = new FileOutputStream(outFile);", "-                    addVmExit(test, formatter, out, message);", "-                } catch (IOException e) {", "-                    // ignore", "+        try {", "+            log(\"Using System properties \" + System.getProperties(),", "+                Project.MSG_VERBOSE);", "+            if (splitJunit) {", "+                classLoader = (AntClassLoader) delegate.getClass().getClassLoader();", "+            } else {", "+                createClassLoader();", "+            }", "+            if (classLoader != null) {", "+                classLoader.setThreadContextLoader();", "+            }", "+", "+            test.setCounts(1, 0, 1);", "+            test.setProperties(getProject().getProperties());", "+            for (int i = 0; i < feArray.length; i++) {", "+                FormatterElement fe = feArray[i];", "+                File outFile = getOutput(fe, test);", "+                JUnitTaskMirror.JUnitResultFormatterMirror formatter = ", "+                    fe.createFormatter(classLoader);", "+                if (outFile != null && formatter != null) {", "+                    try {", "+                        OutputStream out = new FileOutputStream(outFile);", "+                        addVmExit(test, formatter, out, message);", "+                    } catch (IOException e) {", "+                        // ignore", "+                    }", "-        }", "-        if (summary) {", "-            JUnitTaskMirror.SummaryJUnitResultFormatterMirror f = delegate.newSummaryJUnitResultFormatter();", "-            f.setWithOutAndErr(\"withoutanderr\".equalsIgnoreCase(summaryValue));", "-            addVmExit(test, f, getDefaultOutput(), message);", "+            if (summary) {", "+                JUnitTaskMirror.SummaryJUnitResultFormatterMirror f = ", "+                    delegate.newSummaryJUnitResultFormatter();", "+                f.setWithOutAndErr(\"withoutanderr\".equalsIgnoreCase(summaryValue));", "+                addVmExit(test, f, getDefaultOutput(), message);", "+            }", "+        } finally {", "+            if (classLoader != null) {", "+                classLoader.resetThreadContextLoader();", "+            }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c344047586c16a8c1c56c5bf933afd9b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "387f76a6bb9fd2910c679a19e38388bd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/types/CommandlineTest.java", "commitBeforeChange": "b469445f8442be585a98b28f3e44c8e2083de93f", "commitAfterChange": "a252eb85435070911a166bc108952067a9a2d061", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testTokenizer()", "signatureAfterChange": "      public void testTokenizer()", "diff": ["-        s = Commandline.translateCommandline(\"1 2\\\\\\'3 4\");", "-        assertEquals(\"Case with quoted single quote\", 3, s.length);", "-        assertEquals(\"single quote included\", \"2\\'3\", s[1]);", "+        // \\ doesn't have a special meaning anymore - this is different from", "+        // what the Unix sh does but causes a lot of problems on DOS", "+        // based platforms otherwise", "+        s = Commandline.translateCommandline(\"1 2\\\\ 3 4\");", "+        assertEquals(\"case with quotes whitespace\", 4, s.length);", "+        assertEquals(\"Single quotes stripped, double quote included\", \"2\\\\\",", "+                     s[1]);", "-        s = Commandline.translateCommandline(\"1 2\\\\\\\"3 4\");", "-        assertEquals(\"Case with quoted double quote\", 3, s.length);", "-        assertEquals(\"double quote included\", \"2\\\"3\", s[1]);", "-", "-        s = Commandline.translateCommandline(\"1 2\\\\\\\\3 4\");", "-        assertEquals(\"Case with quoted backslash\", 3, s.length);", "-        assertEquals(\"backslash included\", \"2\\\\3\", s[1]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0cf1e659a4a7e1bef027c7af2f8aebb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/types/CommandlineTest.java", "commitBeforeChange": "03bcc3e5cb52998f7621ca380c39853ad53624fc", "commitAfterChange": "130a54050b7affe36ed9c41c4e8f77f83e4d6ed5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testTokenizer()", "signatureAfterChange": "      public void testTokenizer()", "diff": ["+        // \"\" should become a single empty argument, same for ''", "+        // PR 5906", "+        s = Commandline.translateCommandline(\"\\\"\\\" a\");", "+        assertEquals(\"Doublequoted null arg prepend\", 2, s.length);", "+        assertEquals(\"Doublequoted null arg prepend\", \"\", s[0]);", "+        assertEquals(\"Doublequoted null arg prepend\", \"a\", s[1]);", "+        s = Commandline.translateCommandline(\"a \\\"\\\"\");", "+        assertEquals(\"Doublequoted null arg append\", 2, s.length);", "+        assertEquals(\"Doublequoted null arg append\", \"a\", s[0]);", "+        assertEquals(\"Doublequoted null arg append\", \"\", s[1]);", "+        s = Commandline.translateCommandline(\"\\\"\\\"\");", "+        assertEquals(\"Doublequoted null arg\", 1, s.length);", "+        assertEquals(\"Doublequoted null arg\", \"\", s[0]);", "+", "+        s = Commandline.translateCommandline(\"\\'\\' a\");", "+        assertEquals(\"Singlequoted null arg prepend\", 2, s.length);", "+        assertEquals(\"Singlequoted null arg prepend\", \"\", s[0]);", "+        assertEquals(\"Singlequoted null arg prepend\", \"a\", s[1]);", "+        s = Commandline.translateCommandline(\"a \\'\\'\");", "+        assertEquals(\"Singlequoted null arg append\", 2, s.length);", "+        assertEquals(\"Singlequoted null arg append\", \"a\", s[0]);", "+        assertEquals(\"Singlequoted null arg append\", \"\", s[1]);", "+        s = Commandline.translateCommandline(\"\\'\\'\");", "+        assertEquals(\"Singlequoted null arg\", 1, s.length);", "+        assertEquals(\"Singlequoted null arg\", \"\", s[0]);"]}]}
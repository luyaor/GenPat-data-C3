{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7579bb0d464c6846bef34d5310b5368c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f12778c2b99e105d2438d7fd53ef6d1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/antlib/AntLibManager.java", "commitBeforeChange": "ec9816997d704ba18f8209a3b8330275e5a61325", "commitAfterChange": "30b81779b563d12a1e28bebf934d5a5626da57ce", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void configLibrary(InitConfig initConfig, Map librarySpecs,                                String libraryId,                                CircularDependencyChecker configuring,                                Map libraries)          throws ExecutionException", "signatureAfterChange": "     private void configLibrary(InitConfig initConfig, Map librarySpecs,                                String libraryId,                                CircularDependencyChecker configuring,                                Map libraries, Map libPathsMap)          throws ExecutionException", "diff": ["-                               Map libraries)", "+                               Map libraries, Map libPathsMap)", "-                        configuring, libraries);", "+                        configuring, libraries, libPathsMap);", "-            URL[] parserURLs = initConfig.getParserURLs();", "+                URL[] parserURLs = initConfig.getParserURLs();", "+", "+            List libPaths = (List)libPathsMap.get(libraryId);", "+            if (libPaths != null) {", "+                for (Iterator j = libPaths.iterator(); j.hasNext(); ) {", "+                    URL pathURL = (URL)j.next();", "+                    addLibPath(antLibrary, pathURL);", "+                }", "+            }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a02ecda713f759df70fee40ce1a5fbab", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/antlib/AntLibManager.java", "commitBeforeChange": "58257e4ff6cc42fbd00bdf71cb1ecce4b1e117cc", "commitAfterChange": "cba254e641320b3864c7d81345b5c1d1f8fe79dc", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void configLibrary(InitConfig initConfig, Map librarySpecs,                                String libraryId,                                CircularDependencyChecker configuring,                                Map libraries, Map libPathsMap)          throws ExecutionException", "signatureAfterChange": "     private void configLibrary(InitConfig initConfig, Map librarySpecs,                                String libraryId,                                CircularDependencyChecker configuring,                                Map libraries, Map libPathsMap)          throws ExecutionException", "diff": ["-            List libPaths = (List) libPathsMap.get(libraryId);", "-            if (libPaths != null) {", "-                for (Iterator j = libPaths.iterator(); j.hasNext();) {", "-                    URL pathURL = (URL) j.next();", "-                    addLibPath(antLibrary, pathURL);", "+            if (libPathsMap != null) {", "+                List libPaths = (List) libPathsMap.get(libraryId);", "+                if (libPaths != null) {", "+                    for (Iterator j = libPaths.iterator(); j.hasNext();) {", "+                        URL pathURL = (URL) j.next();", "+                        addLibPath(antLibrary, pathURL);", "+                    }"]}]}
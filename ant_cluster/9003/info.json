{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c5a46c3fb20e16b878922c1676c6df5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6eee75f379883032c0b9f3c55018e649", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/i18n/Translate.java", "commitBeforeChange": "a984179d1f7d092e4e0c671a0b4e714cf7a88142", "commitAfterChange": "1dd390137b8f8e921f129269855d1fe5621473a6", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private void translate() throws BuildException", "signatureAfterChange": "     private void translate() throws BuildException", "diff": ["+                        int stLength = startToken.length();", "+                        int etLength = endToken.length();", "-                                startIndex = line.indexOf(startToken, endIndex + 1);", "+                                startIndex = line.indexOf(startToken, endIndex + etLength);", "-                                    startIndex + 1 >= line.length()) {", "+                                    startIndex + stLength >= line.length()) {", "-                                endIndex = line.indexOf(endToken, startIndex + 1);", "+                                endIndex = line.indexOf(endToken, startIndex + stLength);", "-                                String matches = line.substring(startIndex + 1,", "+                                String matches = line.substring(startIndex + stLength,", "-                                    //If there is a white space or = or :, then", "-                                    //it isn't to be treated as a valid key.", "+                                //If there is a white space or = or :, then", "+                                //it isn't to be treated as a valid key.", "-                                    + line.substring(endIndex + 1);", "-                                endIndex = startIndex + replace.length() + 1;", "-                                if (endIndex + 1 >= line.length()) {", "+                                    + line.substring(endIndex + etLength);", "+                                endIndex = startIndex + replace.length() + etLength;", "+                                if (endIndex + etLength >= line.length()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "799cfb43ff633c3b19bc3f127f4cb6ae", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "b20531c93c277088ee73f7410025051b383d302e", "commitAfterChange": "7edeb4e678f61ddb643d348cfd8fede79b1cfbe5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void compose( final ComponentManager componentManager )         throws ComponentException", "signatureAfterChange": "      public void service( final ServiceManager serviceManager )         throws ServiceException", "diff": ["-    public void compose( final ComponentManager componentManager )", "-        throws ComponentException", "+    public void service( final ServiceManager serviceManager )", "+        throws ServiceException", "-        m_converter = (MasterConverter)componentManager.lookup( MasterConverter.ROLE );", "-        m_typeManager = (TypeManager)componentManager.lookup( TypeManager.ROLE );", "-        m_roleManager = (RoleManager)componentManager.lookup( RoleManager.ROLE );", "+        m_converter = (MasterConverter)serviceManager.lookup( MasterConverter.ROLE );", "+        m_typeManager = (TypeManager)serviceManager.lookup( TypeManager.ROLE );", "+        m_roleManager = (RoleManager)serviceManager.lookup( RoleManager.ROLE );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "deaba4c6faf7797ace13944ab3cdd482", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/workspace/DefaultWorkspace.java", "commitBeforeChange": "b20531c93c277088ee73f7410025051b383d302e", "commitAfterChange": "7edeb4e678f61ddb643d348cfd8fede79b1cfbe5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void compose( final ComponentManager componentManager )         throws ComponentException", "signatureAfterChange": "     public void service( final ServiceManager serviceManager )         throws ServiceException", "diff": ["-    public void compose( final ComponentManager componentManager )", "-        throws ComponentException", "+    public void service( final ServiceManager serviceManager )", "+        throws ServiceException", "-        m_componentManager = componentManager;", "-        m_typeManager = (TypeManager)componentManager.lookup( TypeManager.ROLE );", "-        m_executor = (Executor)componentManager.lookup( Executor.ROLE );", "-        m_deployer = (Deployer)componentManager.lookup( Deployer.ROLE );", "+        m_serviceManager = serviceManager;", "+        m_typeManager = (TypeManager)serviceManager.lookup( TypeManager.ROLE );", "+        m_executor = (Executor)serviceManager.lookup( Executor.ROLE );", "+        m_deployer = (Deployer)serviceManager.lookup( Deployer.ROLE );"]}]}
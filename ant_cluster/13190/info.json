{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "20a63ce14dc727cb1f1ab65fe6bc840f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26c58be57224a6fb3790199c71314916", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/ManifestTest.java", "commitBeforeChange": "af875267edf7dbe63c07caa71132aa9f07c66a8f", "commitAfterChange": "4965535328781e63aacbf211d2e96a8462ea133a", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     @Test     public void testLongLine() throws IOException, ManifestException", "signatureAfterChange": "     @Test     public void testLongLine() throws IOException, ManifestException", "diff": ["-        BufferedReader in = new BufferedReader(new FileReader(expandedManifest));", "-        ", "+        FileReader fin = new FileReader(expandedManifest);", "+        try {", "+        BufferedReader in = new BufferedReader(fin);", "+        ", "-        ", "+            in.close();", "+        } finally {", "+            fin.close();", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "278a5348d9180e6cc4904c80154f2bc8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Property.java", "commitBeforeChange": "96932a3c788bf970f72fe5927d4a44e1527447d3", "commitAfterChange": "e931e7bad1b82f459c34b7de1ba191d269322d3b", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "     protected void loadResource(String name)", "signatureAfterChange": "     protected void loadResource(String name)", "diff": ["+        ClassLoader cL = null;", "+        boolean cleanup = false;", "-            ClassLoader cL = null;", "-", "+                cleanup = true;", "+            if (cleanup && cL != null) {", "+                ((AntClassLoader) cL).cleanup();", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b04d3fa3eeba7bf73a515a43e67207e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XSLTProcess.java", "commitBeforeChange": "aba1be216b8e8f554e7eeab98c77fdb5d61d2a47", "commitAfterChange": "ca5695fa0b2244e641914350434aa0dc8071d12c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+        File savedBaseDir = baseDir;", "+", "-        if (baseDir == null) {", "-            baseDir = project.resolveFile(\".\");", "-        }", "-        ", "-        liaison = getLiaison();", "-        ", "-        // check if liaison wants to log errors using us as logger", "-        if (liaison instanceof XSLTLoggerAware) {", "-            ((XSLTLoggerAware)liaison).setLogger(this);", "-        }", "-        ", "-        log(\"Using \" + liaison.getClass().toString(), Project.MSG_VERBOSE);", "-        ", "-        File stylesheet = project.resolveFile(xslFile);", "-        if (!stylesheet.exists()) {", "-            stylesheet = fileUtils.resolveFile(baseDir, xslFile);", "-            /*", "-             * shouldn't throw out deprecation warnings before we know,", "-             * the wrong version has been used.", "-             */", "-            if (stylesheet.exists()) {", "-                log(\"DEPRECATED - the style attribute should be relative \" ", "-                    + \"to the project\\'s\");", "-                log(\"             basedir, not the tasks\\'s basedir.\");", "+        try {", "+            if (baseDir == null) {", "+                baseDir = project.resolveFile(\".\");", "-        }", "-        // if we have an in file and out then process them", "-        if (inFile != null && outFile != null) {", "-            process(inFile, outFile, stylesheet);", "-            return;", "-        }", "-        ", "-        /*", "-         * if we get here, in and out have not been specified, we are", "-         * in batch processing mode.", "-         */", "-        ", "-        //-- make sure Source directory exists...", "-        if (destDir == null ) {", "-            String msg = \"destdir attributes must be set!\";", "-            throw new BuildException(msg);", "-        }", "-        scanner = getDirectoryScanner(baseDir);", "-        log(\"Transforming into \" + destDir, Project.MSG_INFO);", "-        ", "-        // Process all the files marked for styling", "-        list = scanner.getIncludedFiles();", "-        for (int i = 0; i < list.length; ++i) {", "-            process( baseDir, list[i], destDir, stylesheet );", "-        }", "-        if (performDirectoryScan) {", "-            // Process all the directories marked for styling", "-            dirs = scanner.getIncludedDirectories();", "-            for (int j = 0; j < dirs.length; ++j){", "-                list = new File(baseDir, dirs[j]).list();", "-                for (int i = 0; i < list.length; ++i) {", "-                    process( baseDir, list[i], destDir, stylesheet );", "+            liaison = getLiaison();", "+            ", "+            // check if liaison wants to log errors using us as logger", "+            if (liaison instanceof XSLTLoggerAware) {", "+                ((XSLTLoggerAware)liaison).setLogger(this);", "+            }", "+            ", "+            log(\"Using \" + liaison.getClass().toString(), Project.MSG_VERBOSE);", "+            ", "+            File stylesheet = project.resolveFile(xslFile);", "+            if (!stylesheet.exists()) {", "+                stylesheet = fileUtils.resolveFile(baseDir, xslFile);", "+                /*", "+                 * shouldn't throw out deprecation warnings before we know,", "+                 * the wrong version has been used.", "+                 */", "+                if (stylesheet.exists()) {", "+                    log(\"DEPRECATED - the style attribute should be relative \" ", "+                        + \"to the project\\'s\");", "+                    log(\"             basedir, not the tasks\\'s basedir.\");", "+        ", "+            // if we have an in file and out then process them", "+            if (inFile != null && outFile != null) {", "+                process(inFile, outFile, stylesheet);", "+                return;", "+            }", "+        ", "+            /*", "+             * if we get here, in and out have not been specified, we are", "+             * in batch processing mode.", "+             */", "+        ", "+            //-- make sure Source directory exists...", "+            if (destDir == null ) {", "+                String msg = \"destdir attributes must be set!\";", "+                throw new BuildException(msg);", "+            }", "+            scanner = getDirectoryScanner(baseDir);", "+            log(\"Transforming into \" + destDir, Project.MSG_INFO);", "+        ", "+            // Process all the files marked for styling", "+            list = scanner.getIncludedFiles();", "+            for (int i = 0; i < list.length; ++i) {", "+                process( baseDir, list[i], destDir, stylesheet );", "+            }", "+            if (performDirectoryScan) {", "+                // Process all the directories marked for styling", "+                dirs = scanner.getIncludedDirectories();", "+                for (int j = 0; j < dirs.length; ++j){", "+                    list = new File(baseDir, dirs[j]).list();", "+                    for (int i = 0; i < list.length; ++i) {", "+                        process( baseDir, list[i], destDir, stylesheet );", "+                    }", "+                }", "+            }", "+        } finally {", "+            liaison = null;", "+            stylesheetLoaded = false;", "+            baseDir = savedBaseDir;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68a1d4f33aa380c1838cdaa01fed20d8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/PropertyFile.java", "commitBeforeChange": "321c9dc68e77d4ef04ec35f3dbd7374d2f224ab5", "commitAfterChange": "8d66f263f5f40ed0a8fce0af2583ebe0b01354ab", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private void readFile() throws BuildException", "signatureAfterChange": "      private void readFile() throws BuildException", "diff": ["-                m_properties.load(new BufferedInputStream(", "-                                    new FileInputStream(m_propertyfile)));", "+                FileInputStream fis = new FileInputStream(m_propertyfile);", "+                BufferedInputStream bis = new BufferedInputStream(fis);", "+                m_properties.load(bis);", "+                if (fis != null) {", "+                    fis.close();", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6aee55ff7cf2566b644f4af641543ee9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "9517bc1a98631093adc5af3f62a818b8b0f96f7e", "commitAfterChange": "44f87d3ac9d7bb677b6f550dc980238eba38fe97", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+            boolean finished = false;", "+                finished = true;", "+                // we have started to (over)write dest, but failed.", "+                // Try to delete the garbage we'd otherwise leave", "+                // behind.", "+                if (!finished) {", "+                    dest.delete();", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79588f6c8026bdd7f81afe57a9c66da3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Property.java", "commitBeforeChange": "33107ab10098823c23924741100a6c3faf9fd267", "commitAfterChange": "ccea996681f5f6e770cd8a4a204c383ece7e14f2", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "      private void loadFile (File file) throws BuildException", "signatureAfterChange": "      protected void loadFile (File file) throws BuildException", "diff": ["-    private void loadFile (File file) throws BuildException {", "+    protected void loadFile (File file) throws BuildException {", "-            if (file.exists()) {", "-                props.load(new FileInputStream(file));", "+            if (file.exists()) { ", "+                FileInputStream fis = new FileInputStream(file);", "+                try { ", "+                    props.load(fis);", "+                } finally {", "+                    if (fis != null) { ", "+                        fis.close();", "+                    }", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a92868a3be3e5f94545b9f4c877a1bde", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Untar.java", "commitBeforeChange": "2b97df9b2751637401576a8a239028dd6c183e91", "commitAfterChange": "b977b55da647e2c09596065ab1e2b6c7dd2820ef", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected void expandFile(FileUtils fileUtils, File srcF, File dir)", "signatureAfterChange": "     protected void expandFile(FileUtils fileUtils, File srcF, File dir)", "diff": ["+        FileInputStream fis = null;", "+            fis = new FileInputStream(srcF);", "-                compression.decompress(srcF,", "-                    new BufferedInputStream(", "-                        new FileInputStream(srcF))));", "+                compression.decompress(srcF, new BufferedInputStream(fis)));", "+            if (tis == null) {", "+                FileUtils.close(fis);", "+            }", "+            "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca333bdcc74aa8a65b03f9a384288706", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/GenericDeploymentTool.java", "commitBeforeChange": "f19f07d6e4c72f241057ecfc32d80be21201bbf7", "commitAfterChange": "ca91f8cb7e4f2bfe1a191dea6126a32649af9565", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "      public void processDescriptor(String descriptorFileName, SAXParser saxParser)", "signatureAfterChange": "      public void processDescriptor(String descriptorFileName, SAXParser saxParser)", "diff": ["+", "+            File manifestFile = getManifestFile(ddPrefix);", "+            if (manifestFile != null) {", "+                ejbFiles.put(MANIFEST, manifestFile);", "+            }", "+", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd1902331e199f0c1b129f53c629f193", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/jsp/JspC.java", "commitBeforeChange": "96932a3c788bf970f72fe5927d4a44e1527447d3", "commitAfterChange": "e931e7bad1b82f459c34b7de1ba191d269322d3b", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "     public void execute()         throws BuildException", "signatureAfterChange": "     public void execute()         throws BuildException", "diff": ["+        AntClassLoader al = null;", "+        try {", "-                getProject().createClassLoader(compilerClasspath));", "+                al = getProject().createClassLoader(compilerClasspath));", "+        } finally {", "+            if (al != null) {", "+                al.cleanup();", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e331b19f2f098e829f243aa023f412cf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/BorlandDeploymentTool.java", "commitBeforeChange": "de5c81da9e9750acda2fa942394aef201e6b4b7c", "commitAfterChange": "fc42e57c2cf638019efdfadb5592b3ba4c4c21da", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private void generateClient(File sourceJar)", "signatureAfterChange": "     private void generateClient(File sourceJar)", "diff": ["+            Path classpath = getCombinedClasspath();             ", "+            if (classpath != null) {", "+                gentask.setClasspath(classpath);", "+            }"]}]}
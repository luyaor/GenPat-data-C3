{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "54992a2527e4f9dd4847b3c3b4610b0e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0a91e98a41bd4eb5118b40e64a8452e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/classloader/DefaultClassLoaderManager.java", "commitBeforeChange": "274da3301287be067b66a5778b27bfa98ef0a662", "commitAfterChange": "b91e4a3c1d8310dea42c2c353ab016d9c5425109", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private ClassLoader buildClassLoader( final ArrayList files )         throws Exception", "signatureAfterChange": "     private ClassLoader buildClassLoader( final OptionalPackage pkg,                                           final Set pending )         throws Exception", "diff": ["-    private ClassLoader buildClassLoader( final ArrayList files )", "+    private ClassLoader buildClassLoader( final OptionalPackage pkg,", "+                                          final Set pending )", "-        final ArrayList allFiles = new ArrayList( files );", "-        final int count = files.size();", "-        for( int i = 0; i < count; i++ )", "+        final File jarFile = pkg.getFile();", "+", "+        // Check for cached classloader", "+        ClassLoader classLoader = (ClassLoader)m_classLoaders.get( jarFile );", "+        if( classLoader != null )", "-            final File file = (File)files.get(i );", "-            checkFile( file );", "-            getOptionalPackagesFor( file, allFiles );", "+            return classLoader;", "-        final URL[] urls = buildClasspath( allFiles );", "-        return new URLClassLoader( urls, m_commonClassLoader );", "+        // Check for cyclic dependency", "+        if( pending.contains( jarFile ) )", "+        {", "+            final String message = REZ.getString( \"dependency-cycle.error\", jarFile );", "+            throw new Exception( message );", "+        }", "+        pending.add( jarFile );", "+", "+        // Build the classloaders for the extensions required by this optional", "+        // package", "+        final ClassLoader[] parentClassLoaders =", "+            buildParentClassLoaders( new OptionalPackage[] { pkg }, pending );", "+", "+        // Create and cache the classloader", "+        final URL[] urls = { jarFile.toURL() };", "+        classLoader = new MultiParentURLClassLoader( urls, parentClassLoaders );", "+        m_classLoaders.put( jarFile, classLoader );", "+        pending.remove( jarFile );", "+        return classLoader;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5c7f15a33af48796328c898268731f0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Checksum.java", "commitBeforeChange": "16a5d1b56ceb8dca9875b074ebb36c626ce06763", "commitAfterChange": "931a037496b3bc1c55734fd221a3ef773dc8cabb", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private boolean generateChecksums() throws BuildException", "signatureAfterChange": "     private boolean generateChecksums() throws BuildException", "diff": ["-                StringBuffer checksumSb = new StringBuffer();", "-                for (int i = 0; i < fileDigest.length; i++) {", "-                    String hexStr = Integer.toHexString(0x00ff & fileDigest[i]);", "-                    if (hexStr.length() < 2) {", "-                        checksumSb.append(\"0\");", "-                    }", "-                    checksumSb.append(hexStr);", "+                if (totalproperty != null) {", "+                    allDigests.put(src,fileDigest);", "-                String checksum = checksumSb.toString();", "+                String checksum = createDigestString(fileDigest);", "+            if (totalproperty != null) {", "+                // Calculate the total checksum", "+                // Convert the keys (source files) into a sorted array.", "+                Set keys = allDigests.keySet();", "+                Object[] keyArray = keys.toArray();", "+                // File is Comparable, so sorting is trivial", "+                Arrays.sort(keyArray);", "+                // Loop over the checksums and generate a total hash.", "+                messageDigest.reset();", "+                for (int i = 0; i < keyArray.length; i++) {", "+                    File src = (File) keyArray[i];", "+", "+                    // Add the digest for the file content", "+                    byte[] digest = (byte[]) allDigests.get(src);", "+                    messageDigest.update(digest);", "+", "+                    // Add the file path", "+                    String fileName = (String) relativeFilePaths.get(src);", "+                    messageDigest.update(fileName.getBytes());", "+                }", "+                String totalChecksum = createDigestString(messageDigest.digest());", "+                getProject().setNewProperty(totalproperty, totalChecksum);", "+            }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "321f7bde6ef1bcf8846a1256e7b48904", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54091968e33e45393f3fe22a224d453c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/types/PathTest.java", "commitBeforeChange": "f19f07d6e4c72f241057ecfc32d80be21201bbf7", "commitAfterChange": "ca91f8cb7e4f2bfe1a191dea6126a32649af9565", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void testConstructorNetWareStyle()", "signatureAfterChange": "      public void testConstructorNetWareStyle()", "diff": ["+", "+        // try a multi-part netware-volume length path with UNIX", "+        // separator (this testcase if from an actual bug that was", "+        // found, in AvailableTest, which uses PathTokenizer)", "+        p = new Path(project, ", "+                     \"SYS:\\\\JAVA/lib/rt.jar:SYS:\\\\JAVA/lib/classes.zip\");", "+        l = p.list();", "+        if (isUnixStyle) {", "+            assertEquals(\"no drives on Unix\", 3, l.length);", "+            assertTrue(\"sys resolved relative to project\\'s basedir\", ", "+                   l[0].endsWith(\"/SYS\"));", "+            assertEquals(\"/JAVA/lib/rt.jar\", l[1]);", "+            assertEquals(\"/JAVA/lib/classes.zip\", l[2]);", "+        } else if (isNetWare) {", "+            assertEquals(\"volumes on NetWare\", 2, l.length);", "+            assertEquals(\"sys:\\\\java\\\\lib\\\\rt.jar\", l[0].toLowerCase(Locale.US));", "+            assertEquals(\"sys:\\\\java\\\\lib\\\\classes.zip\", l[1].toLowerCase(Locale.US));", "+        } else {", "+            assertEquals(\"no multiple character-length volumes on Windows\", 3, l.length);", "+            assertTrue(\"sys resolved relative to project\\'s basedir\", ", "+                   l[0].endsWith(\"\\\\SYS\"));", "+            assertTrue(\"java/lib/rt.jar resolved relative to project\\'s basedir\", ", "+                   l[1].endsWith(\"\\\\JAVA\\\\lib\\\\rt.jar\"));", "+            assertTrue(\"java/lib/classes.zip resolved relative to project\\'s basedir\", ", "+                   l[2].endsWith(\"\\\\JAVA\\\\lib\\\\classes.zip\"));", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7d7b2666b5001de09993c5f46c77918", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/util/FileUtilsTest.java", "commitBeforeChange": "ad6b39a6207abd8443094050224f58dc1afda3b9", "commitAfterChange": "94dd480d07ac2028fc94d46a253abcd2ddb189a8", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void testCreateTempFile()", "signatureAfterChange": "     public void testCreateTempFile()", "diff": ["-    // null parent dir", "-    File tmp1 = FILE_UTILS.createTempFile(\"pre\", \".suf\", null, false);", "-    String  tmploc = System.getProperty(\"java.io.tmpdir\");", "-    String name = tmp1.getName();", "-    assertTrue(\"starts with pre\", name.startsWith(\"pre\"));", "-    assertTrue(\"ends with .suf\", name.endsWith(\".suf\"));", "-    assertTrue(\"File was created\", tmp1.exists());", "-    assertEquals((new File(tmploc, tmp1.getName())).getAbsolutePath(),", "-                 tmp1.getAbsolutePath());", "-    tmp1.delete();", "-    ", "-    File dir2 = new File(tmploc+\"/ant-test\");", "-    dir2.mkdir();", "-    removeThis = dir2;", "-    ", "-    File tmp2 = FILE_UTILS.createTempFile(\"pre\", \".suf\", dir2, true);", "-    String name2 = tmp2.getName();", "-    assertTrue(\"starts with pre\", name2.startsWith(\"pre\"));", "-    assertTrue(\"ends with .suf\", name2.endsWith(\".suf\"));", "-    assertTrue(\"File was created\", tmp2.exists());", "-    assertEquals((new File(dir2, tmp2.getName())).getAbsolutePath(),", "-                 tmp2.getAbsolutePath());", "-    tmp2.delete();", "-    dir2.delete();", "-    }", "+        // null parent dir", "+        File tmp1 = FILE_UTILS.createTempFile(\"pre\", \".suf\", null, false, true);", "+        String tmploc = System.getProperty(\"java.io.tmpdir\");", "+        assertTrue(\"File was created\", tmp1.exists());", "+        assertEquals((new File(tmploc, tmp1.getName())).getAbsolutePath(), tmp1", "+                .getAbsolutePath());", "+        tmp1.delete();", "+        File dir2 = new File(tmploc + \"/ant-test\");", "+        dir2.mkdir();", "+        removeThis = dir2;", "+", "+        File tmp2 = FILE_UTILS.createTempFile(\"pre\", \".suf\", dir2, true, true);", "+        String name2 = tmp2.getName();", "+        assertTrue(\"starts with pre\", name2.startsWith(\"pre\"));", "+        assertTrue(\"ends with .suf\", name2.endsWith(\".suf\"));", "+        assertTrue(\"File was created\", tmp2.exists());", "+        assertEquals((new File(dir2, tmp2.getName())).getAbsolutePath(), tmp2", "+                .getAbsolutePath());", "+        tmp2.delete();", "+        dir2.delete();", "+", "+        File parent = new File((new File(\"/tmp\")).getAbsolutePath());", "+        tmp1 = FILE_UTILS.createTempFile(\"pre\", \".suf\", parent, false);", "+        assertTrue(\"new file\", !tmp1.exists());", "+", "+        name = tmp1.getName();", "+        assertTrue(\"starts with pre\", name.startsWith(\"pre\"));", "+        assertTrue(\"ends with .suf\", name.endsWith(\".suf\"));", "+        assertEquals(\"is inside parent dir\", parent.getAbsolutePath(), tmp1", "+                .getParent());", "+", "+        tmp2 = FILE_UTILS.createTempFile(\"pre\", \".suf\", parent, false);", "+        assertTrue(\"files are different\", !tmp1.getAbsolutePath().equals(", "+                tmp2.getAbsolutePath()));", "+        File tmp3 = FILE_UTILS.createTempFile(\"pre\", \".suf\", null, false);", "+        tmploc = System.getProperty(\"java.io.tmpdir\");", "+        assertEquals((new File(tmploc, tmp3.getName())).getAbsolutePath(), tmp3", "+                .getAbsolutePath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0cf1e659a4a7e1bef027c7af2f8aebb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/types/CommandlineTest.java", "commitBeforeChange": "03bcc3e5cb52998f7621ca380c39853ad53624fc", "commitAfterChange": "130a54050b7affe36ed9c41c4e8f77f83e4d6ed5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testTokenizer()", "signatureAfterChange": "      public void testTokenizer()", "diff": ["+        // \"\" should become a single empty argument, same for ''", "+        // PR 5906", "+        s = Commandline.translateCommandline(\"\\\"\\\" a\");", "+        assertEquals(\"Doublequoted null arg prepend\", 2, s.length);", "+        assertEquals(\"Doublequoted null arg prepend\", \"\", s[0]);", "+        assertEquals(\"Doublequoted null arg prepend\", \"a\", s[1]);", "+        s = Commandline.translateCommandline(\"a \\\"\\\"\");", "+        assertEquals(\"Doublequoted null arg append\", 2, s.length);", "+        assertEquals(\"Doublequoted null arg append\", \"a\", s[0]);", "+        assertEquals(\"Doublequoted null arg append\", \"\", s[1]);", "+        s = Commandline.translateCommandline(\"\\\"\\\"\");", "+        assertEquals(\"Doublequoted null arg\", 1, s.length);", "+        assertEquals(\"Doublequoted null arg\", \"\", s[0]);", "+", "+        s = Commandline.translateCommandline(\"\\'\\' a\");", "+        assertEquals(\"Singlequoted null arg prepend\", 2, s.length);", "+        assertEquals(\"Singlequoted null arg prepend\", \"\", s[0]);", "+        assertEquals(\"Singlequoted null arg prepend\", \"a\", s[1]);", "+        s = Commandline.translateCommandline(\"a \\'\\'\");", "+        assertEquals(\"Singlequoted null arg append\", 2, s.length);", "+        assertEquals(\"Singlequoted null arg append\", \"a\", s[0]);", "+        assertEquals(\"Singlequoted null arg append\", \"\", s[1]);", "+        s = Commandline.translateCommandline(\"\\'\\'\");", "+        assertEquals(\"Singlequoted null arg\", 1, s.length);", "+        assertEquals(\"Singlequoted null arg\", \"\", s[0]);"]}]}
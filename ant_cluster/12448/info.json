{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b7bbaa95c010b818378af1f317eabae", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c3ac1fd484384fefb0850bb90245bef", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "3477bbf6474cdd2b70b12eb638e64415a4f1c2ec", "commitAfterChange": "134d95afef9b42cf08f2eccb077b97525ac38034", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 36, "signatureBeforeChange": "      private void qSort3(int loSt, int hiSt, int dSt)", "signatureAfterChange": "     private void mainQSort3(final Data data, final int loSt, final int hiSt,                             final int dSt)", "diff": ["+     */", "+    private void mainQSort3(final Data data, final int loSt, final int hiSt,", "+                            final int dSt) {", "+        final int[] stack_ll = data.stack_ll;", "+        final int[] stack_hh = data.stack_hh;", "+        final int[] stack_dd = data.stack_dd;", "+        final int[] fmap     = data.fmap;", "+        final byte[] block   = data.block;", "+", "+        stack_ll[0] = loSt;", "+        stack_hh[0] = hiSt;", "+        stack_dd[0] = dSt;", "+", "+        for (int sp = 1; --sp >= 0;) {", "+            final int lo = stack_ll[sp];", "+            final int hi = stack_hh[sp];", "+            final int d = stack_dd[sp];", "+", "+            if ((hi - lo < SMALL_THRESH) || (d > DEPTH_THRESH)) {", "+                if (mainSimpleSort(data, lo, hi, d)) {", "+            } else {", "+                final int d1 = d + 1;", "+                final int med = med3(block[fmap[lo]              + d1],", "+                                     block[fmap[hi            ]  + d1],", "+                                     block[fmap[(lo + hi) >> 1]  + d1])", "+                    & 0xff;", "+                int unLo = lo;", "+                int unHi = hi;", "+                int ltLo = lo;", "+                int gtHi = hi;", "-", "-    private void qSort3(int loSt, int hiSt, int dSt) {", "-        int unLo, unHi, ltLo, gtHi, med, n, m;", "-        int sp, lo, hi, d;", "-        StackElem[] stack = new StackElem[QSORT_STACK_SIZE];", "-        for (int count = 0; count < QSORT_STACK_SIZE; count++) {", "-            stack[count] = new StackElem();", "-        }", "-", "-        sp = 0;", "-", "-        stack[sp].ll = loSt;", "-        stack[sp].hh = hiSt;", "-        stack[sp].dd = dSt;", "-        sp++;", "-", "-        while (sp > 0) {", "-            if (sp >= QSORT_STACK_SIZE) {", "-                panic();", "-            }", "-", "-            sp--;", "-            lo = stack[sp].ll;", "-            hi = stack[sp].hh;", "-            d = stack[sp].dd;", "-", "-            if (hi - lo < SMALL_THRESH || d > DEPTH_THRESH) {", "-                simpleSort(lo, hi, d);", "-                if (workDone > workLimit && firstAttempt) {", "-                    return;", "-                }", "-                continue;", "-            }", "-", "-            med = med3(block[zptr[lo] + d + 1],", "-                       block[zptr[hi            ] + d  + 1],", "-                       block[zptr[(lo + hi) >> 1] + d + 1]);", "-", "-            unLo = ltLo = lo;", "-            unHi = gtHi = hi;", "-", "-            while (true) {", "-                    if (unLo > unHi) {", "+                    while (unLo <= unHi) {", "+                        final int n =", "+                            ((int) block[fmap[unLo] + d1] & 0xff) - med;", "+                        if (n == 0) {", "+                            final int temp = fmap[unLo];", "+                            fmap[unLo++] = fmap[ltLo];", "+                            fmap[ltLo++] = temp;", "+                        } else if (n < 0) {", "+                            unLo++;", "+                        } else {", "+                            break;", "+                        }", "+                    }", "+", "+                    while (unLo <= unHi) {", "+                        final int n =", "+                            ((int) block[fmap[unHi] + d1] & 0xff) - med;", "+                        if (n == 0) {", "+                            final int temp = fmap[unHi];", "+                            fmap[unHi--] = fmap[gtHi];", "+                            fmap[gtHi--] = temp;", "+                        } else if (n > 0) {", "+                            unHi--;", "+                        } else {", "+                            break;", "+                        }", "+                    }", "+", "+                    if (unLo <= unHi) {", "+                        final int temp = fmap[unLo];", "+                        fmap[unLo++] = fmap[unHi];", "+                        fmap[unHi--] = temp;", "+                    } else {", "-                    n = ((int) block[zptr[unLo] + d + 1]) - med;", "-                    if (n == 0) {", "-                        int temp = 0;", "-                        temp = zptr[unLo];", "-                        zptr[unLo] = zptr[ltLo];", "-                        zptr[ltLo] = temp;", "-                        ltLo++;", "-                        unLo++;", "-                        continue;", "-                    };", "-                    if (n >  0) {", "-                        break;", "-                    }", "-                    unLo++;", "-                while (true) {", "-                    if (unLo > unHi) {", "-                        break;", "-                    }", "-                    n = ((int) block[zptr[unHi] + d + 1]) - med;", "-                    if (n == 0) {", "-                        int temp = 0;", "-                        temp = zptr[unHi];", "-                        zptr[unHi] = zptr[gtHi];", "-                        zptr[gtHi] = temp;", "-                        gtHi--;", "-                        unHi--;", "-                        continue;", "-                    };", "-                    if (n <  0) {", "-                        break;", "-                    }", "-                    unHi--;", "+", "+                if (gtHi < ltLo) {", "+                    stack_ll[sp] = lo;", "+                    stack_hh[sp] = hi;", "+                    stack_dd[sp] = d1;", "+                    sp++;", "+                } else {", "+                    int n = ((ltLo - lo) < (unLo - ltLo))", "+                        ? (ltLo - lo) : (unLo - ltLo);", "+                    vswap(fmap, lo, unLo - n, n);", "+                    int m = ((hi - gtHi) < (gtHi - unHi))", "+                        ? (hi - gtHi) : (gtHi - unHi);", "+                    vswap(fmap, unLo, hi - m + 1, m);", "+", "+                    n = lo + unLo - ltLo - 1;", "+                    m = hi - (gtHi - unHi) + 1;", "+", "+                    stack_ll[sp] = lo;", "+                    stack_hh[sp] = n;", "+                    stack_dd[sp] = d;", "+                    sp++;", "+", "+                    stack_ll[sp] = n + 1;", "+                    stack_hh[sp] = m - 1;", "+                    stack_dd[sp] = d1;", "+                    sp++;", "+", "+                    stack_ll[sp] = m;", "+                    stack_hh[sp] = hi;", "+                    stack_dd[sp] = d;", "+                    sp++;", "-                if (unLo > unHi) {", "-                    break;", "-                }", "-                int temp = 0;", "-                temp = zptr[unLo];", "-                zptr[unLo] = zptr[unHi];", "-                zptr[unHi] = temp;", "-                unLo++;", "-                unHi--;", "-", "-            if (gtHi < ltLo) {", "-                stack[sp].ll = lo;", "-                stack[sp].hh = hi;", "-                stack[sp].dd = d + 1;", "-                sp++;", "-                continue;", "-            }", "-", "-            n = ((ltLo - lo) < (unLo - ltLo)) ? (ltLo - lo) : (unLo - ltLo);", "-            vswap(lo, unLo - n, n);", "-            m = ((hi - gtHi) < (gtHi - unHi)) ? (hi - gtHi) : (gtHi - unHi);", "-            vswap(unLo, hi - m + 1, m);", "-", "-            n = lo + unLo - ltLo - 1;", "-            m = hi - (gtHi - unHi) + 1;", "-", "-            stack[sp].ll = lo;", "-            stack[sp].hh = n;", "-            stack[sp].dd = d;", "-            sp++;", "-", "-            stack[sp].ll = n + 1;", "-            stack[sp].hh = m - 1;", "-            stack[sp].dd = d + 1;", "-            sp++;", "-", "-            stack[sp].ll = m;", "-            stack[sp].hh = hi;", "-            stack[sp].dd = d;", "-            sp++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43e8b4b3e927ae6b1afb64cca770ef24", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "228fb9839c21a0a853598e114faca72c8e9340e7", "commitAfterChange": "9922008d657c72235c402343fd88847b044014ad", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 37, "signatureBeforeChange": "      private void qSort3(int loSt, int hiSt, int dSt, StackElem[] stack)", "signatureAfterChange": "     private void mainQSort3(final Data dataShadow, final int loSt,                             final int hiSt, final int dSt)", "diff": ["-", "-    private void qSort3(int loSt, int hiSt, int dSt, StackElem[] stack) {", "-        int unLo, unHi, ltLo, gtHi, med, n, m;", "-        int sp, lo, hi, d;", "-", "-        sp = 0;", "-", "-        stack[sp].ll = loSt;", "-        stack[sp].hh = hiSt;", "-        stack[sp].dd = dSt;", "-        sp++;", "-", "-        while (sp > 0) {", "-            if (sp >= QSORT_STACK_SIZE) {", "-                panic();", "-            }", "-", "-            sp--;", "-            lo = stack[sp].ll;", "-            hi = stack[sp].hh;", "-            d = stack[sp].dd;", "-", "-            if (hi - lo < SMALL_THRESH || d > DEPTH_THRESH) {", "-                simpleSort(lo, hi, d);", "-                if (workDone > workLimit && firstAttempt) {", "-                    return;", "-                }", "-                continue;", "-            }", "-", "-            med = med3(block[zptr[lo] + d + 1],", "-                       block[zptr[hi            ] + d  + 1],", "-                       block[zptr[(lo + hi) >>> 1] + d + 1]);", "-", "-            unLo = ltLo = lo;", "-            unHi = gtHi = hi;", "-", "-            while (true) {", "-                while (true) {", "-                    if (unLo > unHi) {", "-                        break;", "-                    }", "-                    n = ((int) block[zptr[unLo] + d + 1]) - med;", "-                    if (n == 0) {", "-                        int temp = 0;", "-                        temp = zptr[unLo];", "-                        zptr[unLo] = zptr[ltLo];", "-                        zptr[ltLo] = temp;", "-                        ltLo++;", "-                        unLo++;", "-                        continue;", "-                    }", "-                    if (n >  0) {", "-                        break;", "-                    }", "-                    unLo++;", "-                }", "-                while (true) {", "-                    if (unLo > unHi) {", "-                        break;", "-                    }", "-                    n = ((int) block[zptr[unHi] + d + 1]) - med;", "-                    if (n == 0) {", "-                        int temp = 0;", "-                        temp = zptr[unHi];", "-                        zptr[unHi] = zptr[gtHi];", "-                        zptr[gtHi] = temp;", "-                        gtHi--;", "-                        unHi--;", "-                        continue;", "-                    }", "-                    if (n <  0) {", "-                        break;", "-                    }", "-                    unHi--;", "-                }", "-                if (unLo > unHi) {", "-                    break;", "-                }", "-                int temp = 0;", "-                temp = zptr[unLo];", "-                zptr[unLo] = zptr[unHi];", "-                zptr[unHi] = temp;", "-                unLo++;", "-                unHi--;", "-            }", "-", "-            if (gtHi < ltLo) {", "-                stack[sp].ll = lo;", "-                stack[sp].hh = hi;", "-                stack[sp].dd = d + 1;", "-                sp++;", "-                continue;", "-            }", "-", "-            n = ((ltLo - lo) < (unLo - ltLo)) ? (ltLo - lo) : (unLo - ltLo);", "-            vswap(lo, unLo - n, n);", "-            m = ((hi - gtHi) < (gtHi - unHi)) ? (hi - gtHi) : (gtHi - unHi);", "-            vswap(unLo, hi - m + 1, m);", "-", "-            n = lo + unLo - ltLo - 1;", "-            m = hi - (gtHi - unHi) + 1;", "-", "-            stack[sp].ll = lo;", "-            stack[sp].hh = n;", "-            stack[sp].dd = d;", "-            sp++;", "-", "-            stack[sp].ll = n + 1;", "-            stack[sp].hh = m - 1;", "-            stack[sp].dd = d + 1;", "-            sp++;", "-", "-            stack[sp].ll = m;", "-            stack[sp].hh = hi;", "-            stack[sp].dd = d;", "-            sp++;", "-        }", "-    }", "+     */", "+    private void mainQSort3(final Data dataShadow, final int loSt,", "+                            final int hiSt, final int dSt) {", "+        final int[] stack_ll = dataShadow.stack_ll;", "+        final int[] stack_hh = dataShadow.stack_hh;", "+        final int[] stack_dd = dataShadow.stack_dd;", "+        final int[] fmap = dataShadow.fmap;", "+        final byte[] block = dataShadow.block;", "+", "+        stack_ll[0] = loSt;", "+        stack_hh[0] = hiSt;", "+        stack_dd[0] = dSt;", "+", "+        for (int sp = 1; --sp >= 0;) {", "+            final int lo = stack_ll[sp];", "+            final int hi = stack_hh[sp];", "+            final int d = stack_dd[sp];", "+", "+            if ((hi - lo < SMALL_THRESH) || (d > DEPTH_THRESH)) {", "+                if (mainSimpleSort(dataShadow, lo, hi, d)) {", "+                    return;", "+                }", "+            } else {", "+                final int d1 = d + 1;", "+                final int med = med3(block[fmap[lo] + d1],", "+                                     block[fmap[hi] + d1], block[fmap[(lo + hi) >>> 1] + d1]) & 0xff;", "+", "+                int unLo = lo;", "+                int unHi = hi;", "+                int ltLo = lo;", "+                int gtHi = hi;", "+", "+                while (true) {", "+                    while (unLo <= unHi) {", "+                        final int n = ((int) block[fmap[unLo] + d1] & 0xff)", "+                            - med;", "+                        if (n == 0) {", "+                            final int temp = fmap[unLo];", "+                            fmap[unLo++] = fmap[ltLo];", "+                            fmap[ltLo++] = temp;", "+                        } else if (n < 0) {", "+                            unLo++;", "+                        } else {", "+                            break;", "+                        }", "+                    }", "+", "+                    while (unLo <= unHi) {", "+                        final int n = ((int) block[fmap[unHi] + d1] & 0xff)", "+                            - med;", "+                        if (n == 0) {", "+                            final int temp = fmap[unHi];", "+                            fmap[unHi--] = fmap[gtHi];", "+                            fmap[gtHi--] = temp;", "+                        } else if (n > 0) {", "+                            unHi--;", "+                        } else {", "+                            break;", "+                        }", "+                    }", "+", "+                    if (unLo <= unHi) {", "+                        final int temp = fmap[unLo];", "+                        fmap[unLo++] = fmap[unHi];", "+                        fmap[unHi--] = temp;", "+                    } else {", "+                        break;", "+                    }", "+                }", "+", "+                if (gtHi < ltLo) {", "+                    stack_ll[sp] = lo;", "+                    stack_hh[sp] = hi;", "+                    stack_dd[sp] = d1;", "+                    sp++;", "+                } else {", "+                    int n = ((ltLo - lo) < (unLo - ltLo)) ? (ltLo - lo)", "+                        : (unLo - ltLo);", "+                    vswap(fmap, lo, unLo - n, n);", "+                    int m = ((hi - gtHi) < (gtHi - unHi)) ? (hi - gtHi)", "+                        : (gtHi - unHi);", "+                    vswap(fmap, unLo, hi - m + 1, m);", "+", "+                    n = lo + unLo - ltLo - 1;", "+                    m = hi - (gtHi - unHi) + 1;", "+", "+                    stack_ll[sp] = lo;", "+                    stack_hh[sp] = n;", "+                    stack_dd[sp] = d;", "+                    sp++;", "+", "+                    stack_ll[sp] = n + 1;", "+                    stack_hh[sp] = m - 1;", "+                    stack_dd[sp] = d1;", "+                    sp++;", "+", "+                    stack_ll[sp] = m;", "+                    stack_hh[sp] = hi;", "+                    stack_dd[sp] = d;", "+                    sp++;", "+                }", "+            }"]}]}
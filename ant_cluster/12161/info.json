{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "44858906e651bf9f52412e8246eba934", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88250c268467988a667b810fc207f927", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "1764b5fda8fe5b4166269d73a00f975b4c7fb75d", "commitAfterChange": "1e599c6651b3baafbf807462fe32a975b416f1d1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void setAttribute(Project p, Object element, String attributeName,                              String value) throws BuildException", "signatureAfterChange": "     public void setAttribute(Project p, Object element, String attributeName,             Object value) throws BuildException", "diff": ["+     */", "+    public void setAttribute(Project p, Object element, String attributeName,", "+            Object value) throws BuildException {", "+        AttributeSetter as = (AttributeSetter) attributeSetters.get(", "+                attributeName.toLowerCase(Locale.US));", "+        if (as == null && value != null) {", "+            if (element instanceof DynamicAttributeNS) {", "+                DynamicAttributeNS dc = (DynamicAttributeNS) element;", "+                String uriPlusPrefix = ProjectHelper.extractUriFromComponentName(attributeName);", "+                String uri = ProjectHelper.extractUriFromComponentName(uriPlusPrefix);", "+                String localName = ProjectHelper.extractNameFromComponentName(attributeName);", "+                String qName = \"\".equals(uri) ? localName : uri + \":\" + localName;", "+                dc.setDynamicAttribute(uri, localName, qName, value.toString());", "+                return;", "+            }", "+            if (element instanceof DynamicAttribute) {", "+                DynamicAttribute dc = (DynamicAttribute) element;", "+                dc.setDynamicAttribute(attributeName.toLowerCase(Locale.US), value.toString());", "+                return;", "+            }", "+            if (attributeName.indexOf(':') >= 0) {", "+                return; // Ignore attribute from unknown uri's", "+            }", "+            String msg = getElementName(p, element)", "+                    + \" doesn't support the \\\"\" + attributeName + \"\\\" attribute.\";", "+            throw new UnsupportedAttributeException(msg, attributeName);", "+        }", "+        try {", "+            as.setObject(p, element, value);", "+        } catch (IllegalAccessException ie) {", "+            // impossible as getMethods should only return public methods", "+            throw new BuildException(ie);", "+        } catch (InvocationTargetException ite) {", "+            throw extractBuildException(ite);", "+        }", "+    }", "-        AttributeSetter as = (AttributeSetter) attributeSetters.get(", "-                attributeName.toLowerCase(Locale.US));", "-        if (as == null) {", "-            if (element instanceof DynamicAttributeNS) {", "-                DynamicAttributeNS dc = (DynamicAttributeNS) element;", "-                String uriPlusPrefix = ProjectHelper.extractUriFromComponentName(attributeName);", "-                String uri = ProjectHelper.extractUriFromComponentName(uriPlusPrefix);", "-                String localName = ProjectHelper.extractNameFromComponentName(attributeName);", "-                String qName = \"\".equals(uri) ? localName : uri + \":\" + localName;", "-                dc.setDynamicAttribute(uri, localName, qName, value);", "-                return;", "-            }", "-            if (element instanceof DynamicAttribute) {", "-                DynamicAttribute dc = (DynamicAttribute) element;", "-                dc.setDynamicAttribute(attributeName.toLowerCase(Locale.US), value);", "-                return;", "-            }", "-            if (attributeName.indexOf(':') != -1) {", "-                return; // Ignore attribute from unknown uri's", "-            }", "-            String msg = getElementName(p, element)", "-                    + \" doesn't support the \\\"\" + attributeName + \"\\\" attribute.\";", "-            throw new UnsupportedAttributeException(msg, attributeName);", "-        }", "-        try {", "-            as.set(p, element, value);", "-        } catch (IllegalAccessException ie) {", "-            // impossible as getMethods should only return public methods", "-            throw new BuildException(ie);", "-        } catch (InvocationTargetException ite) {", "-            throw extractBuildException(ite);", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caa51e43293a4e4edf719944fa7c5a07", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Tar.java", "commitBeforeChange": "1400dc3c1b536c70697f83be990b0725121cba90", "commitAfterChange": "b5fcf10604f56a8061d10f332570342b34cc7a9d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            if (filesets.size() == 0) {", "+            if (filesets.size() == 0 && resourceCollections.size() == 0) {", "-                                         + \"attribute or some nested filesets.\",", "+                                         + \"attribute or some nested resource\"", "+                                         + \" collections.\",", "-                TarFileSet fs = (TarFileSet) e.nextElement();", "-                String[] files = fs.getFiles(getProject());", "-", "-                if (!archiveIsUpToDate(files, fs.getDir(getProject()))) {", "-                    upToDate = false;", "-                }", "-", "-                for (int i = 0; i < files.length; ++i) {", "-                    if (tarFile.equals(new File(fs.getDir(getProject()),", "-                                                files[i]))) {", "-                        throw new BuildException(\"A tar file cannot include \"", "-                                                 + \"itself\", getLocation());", "-                    }", "-                }", "+                upToDate &= check((TarFileSet) e.nextElement());", "+            }", "+            for (Enumeration e = resourceCollections.elements();", "+                 e.hasMoreElements();) {", "+                upToDate &= check((ResourceCollection) e.nextElement());", "-                    TarFileSet fs = (TarFileSet) e.nextElement();", "-                    String[] files = fs.getFiles(getProject());", "-                    if (files.length > 1 && fs.getFullpath().length() > 0) {", "-                        throw new BuildException(\"fullpath attribute may only \"", "-                                                 + \"be specified for \"", "-                                                 + \"filesets that specify a \"", "-                                                 + \"single file.\");", "-                    }", "-                    for (int i = 0; i < files.length; i++) {", "-                        File f = new File(fs.getDir(getProject()), files[i]);", "-                        String name = files[i].replace(File.separatorChar, '/');", "-                        tarFile(f, tOut, name, fs);", "-                    }", "+                    tar((TarFileSet) e.nextElement(), tOut);", "+                }", "+                for (Enumeration e = resourceCollections.elements();", "+                     e.hasMoreElements();) {", "+                    tar((ResourceCollection) e.nextElement(), tOut);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8f638f1151b5d545cbacd026918060b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Manifest.java", "commitBeforeChange": "299ea801bc1031e308bfe07a22e51edd1b972872", "commitAfterChange": "eca5133693881d72fbd157619b03647e7e255789", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 26, "signatureBeforeChange": "         public String addAttributeAndCheck(Attribute attribute) throws ManifestException", "signatureAfterChange": "         public String addAttributeAndCheck(Attribute attribute)               throws ManifestException", "diff": ["-        public String addAttributeAndCheck(Attribute attribute) throws ManifestException {", "+        public String addAttributeAndCheck(Attribute attribute) ", "+             throws ManifestException {", "-            if (attribute.getName().equalsIgnoreCase(ATTRIBUTE_NAME)) {", "-                warnings.addElement(\"\\\"\" + ATTRIBUTE_NAME + \"\\\" attributes should not occur in the \" +", "-                                    \"main section and must be the first element in all \" +", "-                                    \"other sections: \\\"\" +attribute.getName() + \": \" + attribute.getValue() + \"\\\"\");", "+            if (attribute.getKey().equalsIgnoreCase(ATTRIBUTE_NAME)) {", "+                warnings.addElement(\"\\\"\" + ATTRIBUTE_NAME + \"\\\" attributes \" ", "+                    + \"should not occur in the main section and must be the \"", "+                    + \"first element in all other sections: \\\"\" ", "+                    + attribute.getName() + \": \" + attribute.getValue() + \"\\\"\");", "-            if (attribute.getName().toLowerCase().startsWith(ATTRIBUTE_FROM.toLowerCase())) {", "-                warnings.addElement(\"Manifest attributes should not start with \\\"\" +", "-                                    ATTRIBUTE_FROM + \"\\\" in \\\"\" +attribute.getName() + \": \" + attribute.getValue() + \"\\\"\");", "-            }", "-            else {", "+            if (attribute.getKey().startsWith(ATTRIBUTE_FROM.toLowerCase())) {", "+                warnings.addElement(\"Manifest attributes should not start \" ", "+                    + \"with \\\"\" + ATTRIBUTE_FROM + \"\\\" in \\\"\" ", "+                    + attribute.getName() + \": \" + attribute.getValue() + \"\\\"\");", "+            } else {", "-                String attributeName = attribute.getName().toLowerCase();", "-                if (attributeName.equals(ATTRIBUTE_CLASSPATH)) {", "-                    Vector classpathAttrs = (Vector)attributes.get(attributeName);", "-                    if (classpathAttrs == null) {", "-                        classpathAttrs = new Vector();", "-                        attributes.put(attributeName, classpathAttrs);", "+                String attributeKey = attribute.getKey();", "+                if (attributeKey.equals(ATTRIBUTE_CLASSPATH)) {", "+                    Attribute classpathAttribute = ", "+                        (Attribute)attributes.get(attributeKey);", "+                    ", "+                    if (classpathAttribute == null) {", "+                        storeAttribute(attribute);", "+                    } else {", "+                        Enumeration e = attribute.getValues();", "+                        while (e.hasMoreElements()) {", "+                            String value = (String)e.nextElement();", "+                            classpathAttribute.addValue(value);", "+                        }", "-                    classpathAttrs.addElement(attribute);", "-                }", "-                else if (attributes.containsKey(attributeName)) {", "-                    throw new ManifestException(\"The attribute \\\"\" + attribute.getName() + \"\\\" may not \" +", "-                                                \"occur more than once in the same section\");", "-                }", "-                else {", "-                    attributes.put(attributeName, attribute);", "+                } else if (attributes.containsKey(attributeKey)) {", "+                    throw new ManifestException(\"The attribute \\\"\" ", "+                        + attribute.getName() + \"\\\" may not occur more \" ", "+                        + \"than once in the same section\");", "+                } else {", "+                    storeAttribute(attribute);"]}]}
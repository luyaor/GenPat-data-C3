{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9da6d74004638d6db4f4dfc583597b2b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2efa5e42d8428e33852b495f985952cd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/property/ResolvePropertyMap.java", "commitBeforeChange": "9b19344ae6777673cc093b5882e02fd43fba99f0", "commitAfterChange": "f67b8649e8b40f489ea4091276cfffb010beae99", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public Object getProperty(String name)", "signatureAfterChange": "     public Object getProperty(String name)", "diff": ["-        // if the property has already been set to the name it will", "-        // have in the end, then return the existing value to ensure", "-        // properties remain immutable", "-        String masterPropertyName = name;", "-        if (prefix != null) {", "-            masterPropertyName = prefix + name;", "-        }", "-        Object masterProperty = master.getProperty(masterPropertyName);", "-        if (masterProperty != null) {", "-            return masterProperty;", "-        }", "-", "+            String fullKey = name;", "+            if (prefix != null && prefixValues) {", "+                fullKey = prefix + name;", "+            }", "+            Object masterValue = expandingLHS", "+                ? null : master.getProperty(fullKey);", "+            // if the property is defined outside of this map don't", "+            // consult the map at all.", "+            if (masterValue != null) {", "+                return masterValue;", "+            }", "+", "+            expandingLHS = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf703bea73174d64ec1f237d34920221", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/property/ResolvePropertyMap.java", "commitBeforeChange": "fe0fba57df21d7b3cbbb22210cf153c1ee494417", "commitAfterChange": "ce8969a8d1fe84bde27660ff7bdbfee8cb33c85c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public Object getProperty(String name)", "signatureAfterChange": "     public Object getProperty(String name)", "diff": ["+", "+            // If the property we are looking up is a key in the map", "+            // (first call into this method from resolveAllProperties)", "+            // or we've been asked to prefix the value side (later", "+            // recursive calls via the GetProperty interface) the", "+            // prefix must be prepended when looking up the property", "+            // outside of the map.", "-            if (prefix != null && prefixValues) {", "+            if (prefix != null && (expandingLHS || prefixValues)) {", "-            Object masterValue = expandingLHS", "-                ? null : master.getProperty(fullKey);", "-            // if the property is defined outside of this map don't", "-            // consult the map at all.", "+", "+            Object masterValue = master.getProperty(fullKey);", "+                // If the property already has a value outside of the", "+                // map, use that value to enforce property", "+                // immutability.", "+", "-            expandingLHS = false;", "+            expandingLHS = false;", "+            // will recurse into this method for each property", "+            // reference found in the map's value"]}]}
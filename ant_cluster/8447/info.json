{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "336888a19f0b697fbb22f91973c67f9d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af8627f06fd082a302846f82faeb6ef8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "9c29344dc2caf821f91931b65ee581b0ef5bb8f5", "commitAfterChange": "6ecb04cbad127c05855b26cb12ef35d86a5ebe39", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public static IntrospectionHelper getHelper(Project p, Class c)", "signatureAfterChange": "     public static IntrospectionHelper getHelper(Project p, Class c)", "diff": ["-        IntrospectionHelper ih = getHelper(c);", "-        // Cleanup at end of project", "-        p.addBuildListener(ih);", "+        IntrospectionHelper ih = (IntrospectionHelper) helpers.get(c);", "+        if (ih == null) {", "+            ih = new IntrospectionHelper(c);", "+            if (p != null) {", "+                // #30162: do *not* cache this if there is no project, as we", "+                // cannot guarantee that the cache will be cleared.", "+                helpers.put(c, ih);", "+            }", "+        }", "+        if (p != null) {", "+            // Cleanup at end of project", "+            p.addBuildListener(ih);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f89d7dc1f9621f91d97a9d92c0214df0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/LoadProperties.java", "commitBeforeChange": "03b6e25418f4b94cbb94e191d23d8ab0ba7b8f6e", "commitAfterChange": "fc6a4383fa7cee5fe2534dc9edc9d8a4eb5c254f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public final void execute() throws BuildException", "signatureAfterChange": "     public final void execute() throws BuildException", "diff": ["-            instream = new InputStreamReader(bis);", "+            if (encoding == null) {", "+                instream = new InputStreamReader(bis);", "+            } else {", "+                instream = new InputStreamReader(bis, encoding);", "+            }", "-                final StringInputStream sis = new StringInputStream(text);", "+                ByteArrayInputStream tis = null;", "+                if ( encoding == null ) {", "+                    tis = new ByteArrayInputStream(text.getBytes());", "+                } else {", "+                    tis = new ByteArrayInputStream(text.getBytes(encoding));", "+                }", "-                props.load(sis);", "+                props.load(tis);", "-                sis.close();", "+                tis.close();"]}]}
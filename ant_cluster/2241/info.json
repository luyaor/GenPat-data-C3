{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "12a358e72dcd31191cb06dc886d1d99c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "033098e3c60d9618409e3953741bcde7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/j2ee/WebLogicHotDeploymentTool.java", "commitBeforeChange": "c7a1a59bcf2c7c4f70070200b1c4267269174a80", "commitAfterChange": "db48fbb829447064857a6b918e78cdab0b0c89b1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void validateAttributes() throws BuildException", "signatureAfterChange": "     public void validateAttributes() throws BuildException", "diff": ["-        if ((getPassword() == null))", "+        if ((getPassword() == null)) {", "+        }", "-            && application == null)", "+            && application == null) {", "+        }", "-            && getTask().getSource() == null)", "+            && getTask().getSource() == null) {", "+        }", "-            && application == null)", "+            && application == null) {", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2485137d5fb911b27152dd14bd9586b4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/i18n/Translate.java", "commitBeforeChange": "f3939727d9e11188d266beed7e9dfa8e2fd0bc9a", "commitAfterChange": "fb9fb495e7a5565edff6d7074b3e85189fdcdf66", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private void translate() throws BuildException", "signatureAfterChange": "     private void translate() throws BuildException", "diff": ["-\t\t\t\t\t\t// 2003-02-21 new replace algorithm by tbee (tbee@tbee.org)", "-\t\t\t\t\t\t// because it wasn't able to replace something like \"@aaa;@bbb;\"", "+                        // 2003-02-21 new replace algorithm by tbee (tbee@tbee.org)", "+                        // because it wasn't able to replace something like \"@aaa;@bbb;\"", "-\t\t\t\t\t\t// is there a startToken", "-\t\t\t\t\t\t// and there is still stuff following the startToken", "-\t\t\t\t\t\tint startIndex = line.indexOf(startToken);", "-\t\t\t\t\t\twhile ( startIndex >= 0 && (startIndex+startToken.length()) <= line.length() )", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\t// the new value, this needs to be here", "-\t\t\t\t\t\t\t// because it is required to calculate the next position to search from", "-\t\t\t\t\t\t\t// at the end of the loop", "-\t\t\t\t            String replace = null;", "+                        // is there a startToken", "+                        // and there is still stuff following the startToken", "+                        int startIndex = line.indexOf(startToken);", "+                        while (startIndex >= 0 && (startIndex + startToken.length()) <= line.length()) {", "+                            // the new value, this needs to be here", "+                            // because it is required to calculate the next position to search from", "+                            // at the end of the loop", "+                            String replace = null;", "-\t\t\t\t\t\t\t// we found a starttoken, is there an endtoken following?", "-\t\t\t\t\t\t\t// start at token+tokenlength because start and end token may be indentical", "-\t\t\t\t\t\t\tint endIndex = line.indexOf(endToken, startIndex + startToken.length());", "-\t\t\t\t\t\t\tif (endIndex < 0) startIndex += 1;", "-\t\t\t\t\t\t\telse", "-\t\t\t\t\t\t\t{", "-\t\t\t\t\t\t\t\t// grab the token", "-\t\t\t\t\t\t\t\tString token = line.substring(startIndex + startToken.length(), endIndex);", "+                            // we found a starttoken, is there an endtoken following?", "+                            // start at token+tokenlength because start and end token may be indentical", "+                            int endIndex = line.indexOf(endToken, startIndex + startToken.length());", "+                            if (endIndex < 0) {", "+                                startIndex += 1;", "+                            } else {", "+                                // grab the token", "+                                String token = line.substring(startIndex + startToken.length(), endIndex);", "-\t\t\t\t                // If there is a white space or = or :, then", "-\t\t\t\t                // it isn't to be treated as a valid key.", "-\t\t\t\t                boolean validToken = true;", "-\t\t\t\t                for (int k = 0; k < token.length() && validToken; k++)", "-\t\t\t\t                {", "-\t\t\t\t                    char c = token.charAt(k);", "-\t\t\t\t                    if ( c == ':'", "-\t\t\t\t                      || c == '='", "-\t\t\t\t                      || Character.isSpaceChar(c)", "-\t\t\t\t                       )", "-\t\t\t\t                    {", "-\t\t\t\t                    \tvalidToken = false;", "-\t\t\t\t                    }", "-\t\t\t\t                }", "-\t\t\t\t                if (!validToken) startIndex += 1;", "-\t\t\t\t                else", "-\t\t\t\t                {", "-\t\t\t\t                \t// find the replace string", "-\t\t\t\t                \tif (resourceMap.containsKey(token)) replace = (String)resourceMap.get(token);", "-\t\t\t\t                \telse                                replace = token;", "+                                // If there is a white space or = or :, then", "+                                // it isn't to be treated as a valid key.", "+                                boolean validToken = true;", "+                                for (int k = 0; k < token.length() && validToken; k++)", "+                                {", "+                                    char c = token.charAt(k);", "+                                    if (c == ':' || c == '='", "+                                        || Character.isSpaceChar(c)) {", "+                                        validToken = false;", "+                                    }", "+                                }", "+                                if (!validToken) {", "+                                    startIndex += 1;", "+                                } else {", "+                                    // find the replace string", "+                                    if (resourceMap.containsKey(token)) {", "+                                        replace = (String) resourceMap.get(token);", "+                                    } else {", "+                                        replace = token;", "+                                    }", "-\t\t\t\t                    // generate the new line", "-\t\t\t\t                    line = line.substring(0, startIndex)", "-\t\t\t\t                         + replace", "-\t\t\t\t                         + line.substring(endIndex + endToken.length());", "+                                    // generate the new line", "+                                    line = line.substring(0, startIndex)", "+                                         + replace", "+                                         + line.substring(endIndex + endToken.length());", "-\t\t\t\t\t\t\t\t\t// set start position for next search", "-\t\t\t\t\t\t\t\t\tstartIndex += replace.length();", "-\t\t\t\t                }", "-\t\t\t\t\t\t\t}", "+                                    // set start position for next search", "+                                    startIndex += replace.length();", "+                                }", "+                            }", "-\t\t\t\t\t\t\t// find next starttoken", "-\t\t\t\t\t\t\tstartIndex = line.indexOf(startToken, startIndex);", "-\t\t\t\t\t\t}", "+                            // find next starttoken", "+                            startIndex = line.indexOf(startToken, startIndex);", "+                        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "767763f361449bf7448efb9572d86d33", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "5a497d7dc79f7b6eda0770262f8d92d099c502c5", "commitAfterChange": "8ce1de2178a0422105fa437c327b49fb5637ff28", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void execute()         throws TaskException", "signatureAfterChange": "     public void execute()         throws TaskException", "diff": ["-                if( ignoreErrors )", "+                if( ignoreErrors ) {", "+                }", "-                if( verbose )", "+                if( verbose ) {", "+                }", "-            if( verbose )", "+            if( verbose ) {", "+            }", "-            if( ignoreErrors )", "+            if( ignoreErrors ) {", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7da3761a2f18c3d338913f884f1feffb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/dotnet/Ilasm.java", "commitBeforeChange": "5a497d7dc79f7b6eda0770262f8d92d099c502c5", "commitAfterChange": "8ce1de2178a0422105fa437c327b49fb5637ff28", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "      protected String getTargetTypeParameter()", "signatureAfterChange": "      protected String getTargetTypeParameter()", "diff": ["-        if( !notEmpty( _targetType ) )", "+        if( !notEmpty( _targetType ) ) {", "-        if( _targetType.equals( \"exe\" ) )", "+        }", "+        if( _targetType.equals( \"exe\" ) ) {", "-        else if( _targetType.equals( \"library\" ) )", "+        } else if( _targetType.equals( \"library\" ) ) {", "-        else", "+               } else {", "+               }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9467e4b9667874006585fee375b222f5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "5a497d7dc79f7b6eda0770262f8d92d099c502c5", "commitAfterChange": "8ce1de2178a0422105fa437c327b49fb5637ff28", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void execute()         throws TaskException", "signatureAfterChange": "     public void execute()         throws TaskException", "diff": ["-                if( ignoreErrors )", "+                if( ignoreErrors ) {", "+                }", "-                if( verbose )", "+                if( verbose ) {", "+                }", "-            if( verbose )", "+            if( verbose ) {", "+            }", "-            if( ignoreErrors )", "+            if( ignoreErrors ) {", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a44f1983cc0d15e935c048b8c1508a63", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/dotnet/Ilasm.java", "commitBeforeChange": "7a4e9ca2278d5e22a3492abb964312150d0286b9", "commitAfterChange": "130315b576401682fedfa9655c790b8380955177", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      protected String getTargetTypeParameter()", "signatureAfterChange": "      protected String getTargetTypeParameter()", "diff": ["-        if(!notEmpty(_targetType))", "+        if(!notEmpty(_targetType)) {", "-        if (_targetType.equals(\"exe\"))", "+        }", "+        if (_targetType.equals(\"exe\")) {", "-        else ", "-        if (_targetType.equals(\"library\"))", "+        } else ", "+        if (_targetType.equals(\"library\")) {", "-        else", "+        } else {", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aded6eda183f7e4aa41d6f45a52deedc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/JikesOutputParser.java", "commitBeforeChange": "32b8cce516421a912ced3f568167107df3332710", "commitAfterChange": "e3b6d1fe768d87352d3d0348638911045fc4668e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      private void parseStandardOutput(BufferedReader reader) throws IOException", "signatureAfterChange": "      private void parseStandardOutput(BufferedReader reader) throws IOException", "diff": ["-            if (line.trim().equals(\"\"))", "+            if (line.trim().equals(\"\")) {", "-            if (lower.indexOf(\"error\") != -1)", "+            }", "+            if (lower.indexOf(\"error\") != -1) {", "-            else if (lower.indexOf(\"warning\") != -1)", "+            } else if (lower.indexOf(\"warning\") != -1) {", "-            else {", "+                   } else {", "-                if (emacsMode)", "+                if (emacsMode) {", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b85acde377b865cb30c316444c789f35", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SignJar.java", "commitBeforeChange": "2ddcd97730df56c68687bbb5372f39fe6ae1420f", "commitAfterChange": "9f2aca50e33a1be8154bd90b93a1f658e4b6d910", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "      protected boolean isUpToDate(File jarFile, File signedjarFile)", "signatureAfterChange": "      protected boolean isUpToDate(File jarFile, File signedjarFile)", "diff": ["-            if(!jarFile.exists()) return false;", "-            if(!signedjarFile.exists()) return false;", "-            if(jarFile.equals(signedjarFile)) return false;", "-            if(signedjarFile.lastModified() > jarFile.lastModified())", "+            if(!jarFile.exists()) {", "+              return false;", "+            }", "+            if(!signedjarFile.exists()) {", "+              return false;", "+            }", "+            if(jarFile.equals(signedjarFile)) {", "+              return false;", "+            }", "+            if(signedjarFile.lastModified() > jarFile.lastModified()) {", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2021a7a3c3411d1624ae05bd13bd908", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/dotnet/Ilasm.java", "commitBeforeChange": "5a497d7dc79f7b6eda0770262f8d92d099c502c5", "commitAfterChange": "8ce1de2178a0422105fa437c327b49fb5637ff28", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "      protected String getTargetTypeParameter()", "signatureAfterChange": "      protected String getTargetTypeParameter()", "diff": ["-        if( !notEmpty( _targetType ) )", "+        if( !notEmpty( _targetType ) ) {", "-        if( _targetType.equals( \"exe\" ) )", "+        }", "+        if( _targetType.equals( \"exe\" ) ) {", "-        else if( _targetType.equals( \"library\" ) )", "+        } else if( _targetType.equals( \"library\" ) ) {", "-        else", "+               } else {", "+               }"]}]}
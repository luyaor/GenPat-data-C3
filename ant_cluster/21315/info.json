{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0e14deae85eb9c27ace4426c7cd69c7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0629e69a15e1c92843c1cec66828198e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/frontends/CLIMain.java", "commitBeforeChange": "321497ad25f76931e5b18e384fbd73ca8d198d92", "commitAfterChange": "ec74722dcd89659e5f1b1241acd59dc3f5978be7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private void execute( final String[] args )         throws Exception", "signatureAfterChange": "      private void execute( final Map properties, final String[] args )         throws Exception", "diff": ["-", "-    private void execute( final String[] args )", "+    private void execute( final Map properties, final String[] args )", "-        setupDefaultParameters();", "-", "-        if( !parseCommandLineOptions( args ) )", "-        {", "-            return;", "-        }", "-", "-        prepareLogging();", "-", "-        checkHomeDir();", "-        final File buildFile = getBuildFile();", "-", "-        //getLogger().debug( \"Ant Bin Directory: \" + m_binDir );", "-        //getLogger().debug( \"Ant Lib Directory: \" + m_libDir );", "-        //getLogger().debug( \"Ant Task Lib Directory: \" + m_taskLibDir );", "-", "-        if( m_dryRun )", "-        {", "-            m_parameters.setParameter( Executor.ROLE,", "-                                       \"org.apache.myrmidon.components.executor.PrintingExecutor\" );", "-        }", "-", "-        final Embeddor embeddor = prepareEmbeddor();", "-", "-            final ProjectListener listener = prepareListener( embeddor );", "+            // Set system properties set up by launcher", "+            m_embedded.setEmbeddorProperty( \"myrmidon.home\", properties.get( \"myrmidon.home\" ) );", "-            //create the project", "-            final Project project =", "-                embeddor.createProject( buildFile.toString(), null, m_builderParameters );", "+            // Command line", "+            if( !parseCommandLineOptions( args ) )", "+            {", "+                return;", "+            }", "+", "+            // Setup logging", "+            final BasicLogger logger = new BasicLogger( \"[myrmidon] \", m_priority );", "+            m_embedded.setLogger( logger );", "+", "+            if( m_dryRun )", "+            {", "+                m_embedded.setEmbeddorProperty( Executor.ROLE,", "+                                                \"org.apache.myrmidon.components.executor.PrintingExecutor\" );", "+            }", "+", "+            // Set the common classloader", "+            final ClassLoader sharedClassLoader = (ClassLoader)properties.get( \"myrmidon.shared.classloader\" );", "+            m_embedded.setSharedClassLoader( sharedClassLoader );", "-            final boolean incremental = m_parameters.getParameterAsBoolean( \"incremental\", false );", "-            if( !incremental )", "+            if( !m_incremental )", "-                executeBuild( embeddor, project, listener );", "+                executeBuild();", "-                executeIncrementalBuild( embeddor, project, listener );", "+                executeIncrementalBuild();", "-            shutdownEmbeddor( embeddor );", "+            m_embedded.stop();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87ca82d4b820304a44ba4d2849248fa5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/PlainJUnitResultFormatter.java", "commitBeforeChange": "c098b9c80d5ef451dfd683510c9f6c28489a8685", "commitAfterChange": "313479bb3569061c2598d90274930c4957d36364", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void endTestSuite(JUnitTest suite) throws BuildException", "signatureAfterChange": "     public void endTestSuite(JUnitTest suite) throws BuildException", "diff": ["+        try {", "+            write(sb.toString());", "-        // append the err and output streams to the log", "+        // write the err and output streams to the log", "-            sb.append(\"------------- Standard Output ---------------\")", "-                .append(StringUtils.LINE_SEP)", "-                .append(systemOutput)", "-                .append(\"------------- ---------------- ---------------\")", "-                .append(StringUtils.LINE_SEP);", "+                write(\"------------- Standard Output ---------------\");", "+                write(StringUtils.LINE_SEP);", "+                write(systemOutput);", "+                write(\"------------- ---------------- ---------------\");", "+                write(StringUtils.LINE_SEP);", "-            sb.append(\"------------- Standard Error -----------------\")", "-                .append(StringUtils.LINE_SEP)", "-                .append(systemError)", "-                .append(\"------------- ---------------- ---------------\")", "-                .append(StringUtils.LINE_SEP);", "+                write(\"------------- Standard Error -----------------\");", "+                write(StringUtils.LINE_SEP);", "+                write(systemError);", "+                write(\"------------- ---------------- ---------------\");", "+                write(StringUtils.LINE_SEP);", "-        sb.append(StringUtils.LINE_SEP);", "-", "+            write(StringUtils.LINE_SEP);", "+            if (out != null) {", "+                try {", "+                    wri.flush();", "+                    write(inner.toString());", "+                } catch (IOException ioex) {", "+                    throw new BuildException(\"Unable to write output\", ioex);", "+                }", "+            }", "+        } finally {", "-                out.write(sb.toString().getBytes());", "-                out.write(inner.toString().getBytes());", "-                out.flush();", "-                throw new BuildException(\"Unable to write output\", ioex);", "+                    throw new BuildException(\"Unable to flush output\", ioex);", "+                    wri = null;", "+                    out = null;", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7c99700193dae9a349f41f13f8440e6e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0187af14d323b0bf910498261b4ec7b3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ide/VAJLocalUtil.java", "commitBeforeChange": "adb10aa72e51f837386530781d2845cdcba3f799", "commitAfterChange": "7cd7c4e5f82cbe8a3fe5d03b7c8ea871a523fdd1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void loadProjects(Vector projectDescriptions)", "signatureAfterChange": "     public void loadProjects(Vector projectDescriptions)", "diff": ["-            ProjectEdition pe = findProjectEdition(d.getName(), d.getVersion());", "+            ProjectEdition pe;", "+            if (d.getVersion().equals(\"*\"))", "+                pe = findLatestProjectEdition(d.getName(), false);", "+            else if (d.getVersion().equals(\"**\"))", "+                pe = findLatestProjectEdition(d.getName(), true);", "+            else", "+                pe = findProjectEdition(d.getName(), d.getVersion());", "-                log(\"Loading '\" + d.getName() + \"', Version '\" + d.getVersion()", "-                    + \"', into Workspace\", MSG_VERBOSE);", "+                log(\"Loading '\" + pe.getName() + \"', Version '\" +", "+                    ((pe.getVersionName() != null)?pe.getVersionName():\"(\"+pe.getVersionStamp()+ \")\")+", "+                    \"' into Workspace\", MSG_VERBOSE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01dfd9664d23735fa5dc9fadf1c377ea", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "b1278e4e62260543c5086fb7b584a4d27c63d987", "commitAfterChange": "11f0a8954237d3208179ca4404f47ad882591f56", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": "     protected boolean isUpToDate(FTPClient ftp, File localFile,                                  String remoteFile)          throws IOException, BuildException", "signatureAfterChange": "     protected boolean isUpToDate(FTPClient ftp, File localFile,                                  String remoteFile)          throws IOException, BuildException", "diff": ["+        long adjustedRemoteTimestamp = ", "+            remoteTimestamp + this.timeDiffMillis + this.granularityMillis; ", "+        ", "+        StringBuffer msg = new StringBuffer(\"   [\")", "+        \t.append(TIMESTAMP_LOGGING_SDF.format(new Date(localTimestamp)))", "+        \t.append(\"] local\");", "+        log(msg.toString(), Project.MSG_VERBOSE);", "+        ", "+        msg = new StringBuffer(\"   [\")", "+          \t.append(TIMESTAMP_LOGGING_SDF.format(new Date(adjustedRemoteTimestamp)))", "+        \t.append(\"] remote\");", "+        if (remoteTimestamp != adjustedRemoteTimestamp) {", "+            msg.append(\" - (raw: \")", "+        \t.append(TIMESTAMP_LOGGING_SDF.format(new Date(remoteTimestamp)))", "+            .append(\")\");", "+        }", "+        log(msg.toString(), Project.MSG_VERBOSE);", "+        ", "+", "+        ", "-            return remoteTimestamp ", "-            \t\t+ this.timeDiffMillis ", "-            \t\t+ this.granularityMillis ", "-            \t>= localTimestamp;", "+            return adjustedRemoteTimestamp >= localTimestamp;", "-            return localTimestamp ", "-            \t>= remoteTimestamp ", "-                \t+ this.timeDiffMillis", "-                \t+ this.granularityMillis;", "+            return localTimestamp >= adjustedRemoteTimestamp;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "020b4e6608864bd96969a78b1190b232", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/Cab.java", "commitBeforeChange": "f1fd5e5e8a65a3463feb6226f4b827fc55417e51", "commitAfterChange": "1e760c7354cf76a820bf05aa29881ca9154757fc", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-                Process p = Execute.launch(getProject(), ", "+                Process p = Execute.launch(getProject(),", "-                ", "+", "-                throw new BuildException(msg);", "+                throw new BuildException(msg, getLocation());", "-                exec.setCommand(createCommand(listFile));", "+                exec.setExecutable(\"cabarc\");", "+                exec.createArg().setValue(\"-r\");", "+                exec.createArg().setValue(\"-p\");", "+", "+                if (!doCompress) {", "+                    exec.createArg().setValue(\"-m\");", "+                    exec.createArg().setValue(\"none\");", "+                }", "+", "+                if (cmdOptions != null) {", "+                    exec.createArg().setLine(cmdOptions);", "+                }", "+", "+                exec.createArg().setValue(\"n\");", "+                exec.createArg().setFile(cabFile);", "+                exec.createArg().setValue(\"@\" + listFile.getAbsolutePath());", "+", "-                throw new BuildException(msg);", "+                throw new BuildException(msg, getLocation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1280151da33c79767830e9c9672953f9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/util/FileUtilsTest.java", "commitBeforeChange": "5a45e0117fd3b5b69d7f50678ea82c547d24f8e6", "commitAfterChange": "71333195c9d57d80d1a44cd8362a641c62d5e214", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void testContentEquals() throws IOException", "signatureAfterChange": "     public void testContentEquals() throws IOException", "diff": ["-        assertTrue(\"Non existing files\", fu.contentEquals(new File(\"foo\"),", "-                                                          new File(\"bar\")));", "+        assertTrue(\"Non existing files\", fu.contentEquals(new File(System.getProperty(\"root\"), \"foo\"),", "+                                                          new File(System.getProperty(\"root\"), \"bar\")));", "-                   !fu.contentEquals(new File(\"foo\"), new File(\"build.xml\")));", "+                   !fu.contentEquals(new File(System.getProperty(\"root\"), \"foo\"), new File(System.getProperty(\"root\"), \"build.xml\")));", "-                   !fu.contentEquals(new File(\"src\"), new File(\"src\")));", "+                   !fu.contentEquals(new File(System.getProperty(\"root\"), \"src\"), new File(System.getProperty(\"root\"), \"src\")));", "-                   fu.contentEquals(new File(\"build.xml\"),", "-                                    new File(\"build.xml\")));", "+                   fu.contentEquals(new File(System.getProperty(\"root\"), \"build.xml\"),", "+                                    new File(System.getProperty(\"root\"), \"build.xml\")));", "-                   !fu.contentEquals(new File(\"build.xml\"),", "-                                     new File(\"docs.xml\")));", "+                   !fu.contentEquals(new File(System.getProperty(\"root\"), \"build.xml\"),", "+                                     new File(System.getProperty(\"root\"), \"docs.xml\")));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19de915e27c59a6b3b402fb3fa150e4b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/SignJarTest.java", "commitBeforeChange": "e438a9bf89f863be3d231d0a1a275ca0b8550ed0", "commitAfterChange": "dda05149e50bb4550899dce414bfa1013669b947", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void testSigFile()", "signatureAfterChange": "      public void testSigFile()", "diff": ["+        SignJarChild sj = new SignJarChild();", "+        sj.setAlias(\"testonly\");", "+        sj.setKeystore(\"testkeystore\");", "+        sj.setStorepass(\"apacheant\");", "+        File jar = new File(getProject().getProperty(\"test.jar\"));", "+        sj.setJar(jar);", "+        assertFalse(\"mustn't find signature without sigfile attribute\",", "+                    sj.isSigned());", "+        sj.setSigfile(\"TEST\");", "+        assertTrue(\"must find signature with sigfile attribute\",", "+                   sj.isSigned());", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a5994c73830bcac13ce9a0bc7cbb666", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "6f4f0c60756a92b3a5dbc1c123904be0db030ad3", "commitAfterChange": "8c9b19d0a2849ba712c6859ed7b7d3537cef33fb", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "     private int executeAsForked(JUnitTest test, ExecuteWatchdog watchdog,                                  File casesFile)         throws BuildException", "signatureAfterChange": "     private TestResultHolder executeAsForked(JUnitTest test,                                               ExecuteWatchdog watchdog,                                               File casesFile)         throws BuildException", "diff": ["-    private int executeAsForked(JUnitTest test, ExecuteWatchdog watchdog, ", "-                                File casesFile)", "+    private TestResultHolder executeAsForked(JUnitTest test, ", "+                                             ExecuteWatchdog watchdog, ", "+                                             File casesFile)", "+        File vmWatcher = createTempPropertiesFile(\"junitvmwatcher\");", "+        formatterArg.append(\"formatter=\");", "+        formatterArg.append(ForkedVMWatcher.class.getName());", "+        formatterArg.append(\",\");", "+        formatterArg.append(vmWatcher);", "+        cmd.createArgument().setValue(formatterArg.toString());", "-        int retVal;", "+        TestResultHolder result = new TestResultHolder();", "-            retVal = execute.execute();", "+            result.exitCode = execute.execute();", "+                result.timedOut = true;", "+            } else if (vmWatcher.length() == 0) {", "+                result.crashed = true;", "+                logVmCrash(feArray, test);", "+            vmWatcher.delete();", "-        return retVal;", "+        return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c0203e299826bdfa38d62f56055c1b5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ImportTask.java", "commitBeforeChange": "8dd8b1bb02f9992909c7bd08f8922eb9f35a5052", "commitAfterChange": "fdc711e2e2805a41b766e9d1e07d83512d97f658", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      private void importResource(ProjectHelper helper,                                 Resource importedResource)", "signatureAfterChange": "      private void importResource(ProjectHelper helper,                                 Resource importedResource)", "diff": ["-            helper.parse(getProject(), importedResource);", "+            ProjectHelper subHelper = ProjectHelperRepository.getInstance().getProjectHelperForBuildFile(", "+                    importedResource);", "+", "+            // push current stacks into the sub helper", "+            subHelper.getImportStack().addAll(helper.getImportStack());", "+            subHelper.getExtensionStack().addAll(helper.getExtensionStack());", "+            getProject().addReference(ProjectHelper.PROJECTHELPER_REFERENCE, subHelper);", "+", "+            subHelper.parse(getProject(), importedResource);", "+", "+            // push back the stack from the sub helper to the main one", "+            getProject().addReference(ProjectHelper.PROJECTHELPER_REFERENCE, helper);", "+            helper.getImportStack().clear();", "+            helper.getImportStack().addAll(subHelper.getImportStack());", "+            helper.getExtensionStack().clear();", "+            helper.getExtensionStack().addAll(subHelper.getExtensionStack());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2111baa5a92673e17d26e96c5bf25275", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/launcher/Main.java", "commitBeforeChange": "321497ad25f76931e5b18e384fbd73ca8d198d92", "commitAfterChange": "ec74722dcd89659e5f1b1241acd59dc3f5978be7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static final void main( final String[] args )         throws Exception", "signatureAfterChange": "     public static final void main( final String[] args )         throws Exception", "diff": ["-            //actually try to discover the install directory based on where", "-            // the myrmidon.jar is", "+            final Map properties = new HashMap();", "+", "+            // Try to discover the install directory based on where the", "+            // launcher Jar is", "-            System.setProperty( \"myrmidon.home\", installDirectory.toString() );", "+            properties.put( \"myrmidon.home\", installDirectory );", "-            final URLClassLoader sharedClassLoader = createSharedClassLoader( installDirectory );", "-            final URLClassLoader classLoader =", "-                createContainerClassLoader( installDirectory, sharedClassLoader );", "+            // Build the shared classloader", "+            final URL[] sharedClassPath = getSharedClassPath( installDirectory );", "+            properties.put( \"myrmidon.shared.classpath\", sharedClassPath );", "+            final URLClassLoader sharedClassLoader = new URLClassLoader( sharedClassPath );", "+            properties.put( \"myrmidon.shared.classloader\", sharedClassLoader );", "-            execMainClass( classLoader, args );", "+            // Build the container classloader", "+            final URL[] containerClassPath = getContainerClassPath( installDirectory );", "+            properties.put( \"myrmidon.container.classpath\", containerClassPath );", "+            final URLClassLoader containerClassLoader = new URLClassLoader( containerClassPath, sharedClassLoader );", "+            properties.put( \"myrmidon.container.classloader\", containerClassLoader );", "+", "+            execMainClass( containerClassLoader, properties, args );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25faa70aa283df6de2c4131bfa496b05", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/bootstrap/org/apache/ant/builder/MutantBuilder.java", "commitBeforeChange": "752f49d5b18f9743f8e4a6dbdc8065d240d9c97a", "commitAfterChange": "da4e1a3aa99899d6aecc6d14c2a7498fa51647aa", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 7, "signatureBeforeChange": "     protected void antlibs(BuildHelper helper)", "signatureAfterChange": "     protected void antlibs(BuildHelper helper)", "diff": ["+    protected void antlibs(BuildHelper helper) {", "+        helper.runDepends(this, \"antlibs\", \"common\");", "+        System.out.println(\"antlibs: \");", "+        {", "+            BuildHelper subHelper = new BuildHelper();", "+            subHelper.setProperty(\"libname\", helper.resolve(\"system\"));", "+            subHelper.setProperty(\"antlibdir\", helper.resolve(\"${dist.syslibs.dir}\"));", "+            subHelper.setParent(helper);", "+            _init(subHelper);", "+            buildlib(subHelper);", "+        }", "+        {", "+            BuildHelper subHelper = new BuildHelper();", "+            subHelper.setProperty(\"libname\", helper.resolve(\"monitor\"));", "+            subHelper.setProperty(\"antlibdir\", helper.resolve(\"${dist.syslibs.dir}\"));", "+            subHelper.setParent(helper);", "+            _init(subHelper);", "+            buildlib(subHelper);", "+        }", "-    }", "-    protected void antlibs(BuildHelper helper) {", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f3d545d7c1089c3706ccdc4092990ea", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/SetProxy.java", "commitBeforeChange": "d1aa81e442aebdc396f67d3e8f3d20032956ddf1", "commitAfterChange": "cb5b4ae2bbb04d49f763e8348c89e16345046179", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public void applyWebProxySettings()", "signatureAfterChange": "      public void applyWebProxySettings()", "diff": ["+                    sysprops.put(\"https.nonProxyHosts\", nonProxyHosts);", "-                }                    ", "+                }", "+                if(proxyUser!=null) {", "+                    sysprops.put(\"http.proxyUser\", proxyUser);", "+                    sysprops.put(\"http.proxyPassword\", proxyPassword);", "+                }", "+                sysprops.remove(\"http.proxyHost\");", "+                sysprops.remove(\"http.proxyUser\");", "+                sysprops.remove(\"http.proxyPassword\");", "+                if (proxyUser != null) {", "+                    //this may be a java1.4 thingy only", "+                    sysprops.put(\"java.net.socks.username\", proxyUser);", "+                    sysprops.put(\"java.net.socks.password\", proxyPassword);", "+                }", "+", "+                sysprops.remove(\"java.net.socks.username\");", "+                sysprops.remove(\"java.net.socks.password\");", "-        ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "369a5f9d0876e2afe25f09391d268929", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ExtraFieldUtils.java", "commitBeforeChange": "1c5c68f3ed2854776e2377bf5486caadc8ecc5b8", "commitAfterChange": "f665a4d33564ecc12851996978a9847024643829", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public static ZipExtraField[] parse(byte[] data, boolean local)         throws ZipException", "signatureAfterChange": "     public static ZipExtraField[] parse(byte[] data, boolean local,                                         UnparseableExtraField onUnparseableData)         throws ZipException", "diff": ["+     */", "+    public static ZipExtraField[] parse(byte[] data, boolean local,", "+                                        UnparseableExtraField onUnparseableData)", "+        throws ZipException {", "+        LOOP:", "-                throw new ZipException(\"data starting at \" + start", "-                    + \" is in unknown format\");", "+                switch(onUnparseableData.getKey()) {", "+                case UnparseableExtraField.THROW_KEY:", "+                    throw new ZipException(\"bad extra field starting at \"", "+                                           + start + \".  Block length of \"", "+                                           + length + \" bytes exceeds remaining\"", "+                                           + \" data of \"", "+                                           + (data.length - start - WORD)", "+                                           + \" bytes.\");", "+                case UnparseableExtraField.READ_KEY:", "+                    UnparseableExtraFieldData field =", "+                        new UnparseableExtraFieldData();", "+                    if (local) {", "+                        field.parseFromLocalFileData(data, start,", "+                                                     data.length - start);", "+                    } else {", "+                        field.parseFromCentralDirectoryData(data, start,", "+                                                            data.length - start);", "+                    }", "+                    v.add(field);", "+                    /*FALLTHROUGH*/", "+                case UnparseableExtraField.SKIP_KEY:", "+                    // since we cannot parse the data we must assume", "+                    // the extra field consumes the whole rest of the", "+                    // available data", "+                    break LOOP;", "+                default:", "+                    throw new ZipException(\"unknown UnparseableExtraField key: \"", "+                                           + onUnparseableData.getKey());", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ea46730877a396543ba8e7196de4f75", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/modules/console/BuildConsole.java", "commitBeforeChange": "37b3d25cc8c65444ab2cbb5c0ff153dccf56c789", "commitAfterChange": "2d4bfedfb63f054542debd85410e53916fa502f3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void contextualize(AppContext context)", "signatureAfterChange": "     public void contextualize(AppContext context)", "diff": ["-        ", "+", "+        /** Anonymous class to respond to resize envents and", "+         * post <code>ConsoleNotVisibleEvent</code> or", "+         * <code>ConsoleVisibleEvent</code> events.", "+         */", "+        addComponentListener(new ComponentAdapter() {", "+            public void componentResized(ComponentEvent e) {", "+                AppContext c = BuildConsole.this.getContext();", "+                if (BuildConsole.this.getHeight() == 0) {", "+                    c.getEventBus().postEvent(new ConsoleNotVisibleEvent(c));", "+                } else {", "+                    c.getEventBus().postEvent(new ConsoleVisibleEvent(c));", "+                }", "+            }", "+            public void componentHidden(ComponentEvent e) {}", "+            public void componentMoved(ComponentEvent e) {}", "+            public void componentShown(ComponentEvent e) {}", "+        });", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45c695ef7f6480fe0e3ab66880629fca", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/LoadProperties.java", "commitBeforeChange": "531e66cb1e7a5c8c495d724a0dc52ab65a77faf7", "commitAfterChange": "b6298168c94332a367ae3b8be896d4b30583ec2c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public final void execute() throws BuildException", "signatureAfterChange": "     public final void execute() throws BuildException", "diff": ["-        if (srcFile == null) {", "-            throw new BuildException(\"Source file not defined.\");", "+        if (srcFile == null && resource == null) {", "+            throw new BuildException(", "+                \"One of \\\"srcfile\\\" or \\\"resource\\\" is required.\");", "-        if (!srcFile.exists()) {", "-            throw new BuildException(\"Source file does not exist.\");", "-        }", "-", "-        if (!srcFile.isFile()) {", "-            throw new BuildException(\"Source file is not a file.\");", "-        }", "-", "-        FileInputStream fis = null;", "+", "+        if (srcFile != null ) {", "+            if (!srcFile.exists()) {", "+                throw new BuildException(\"Source file does not exist.\");", "+            }", "+", "+            if (!srcFile.isFile()) {", "+                throw new BuildException(\"Source file is not a file.\");", "+            }", "+", "+            try {", "+                bis = new BufferedInputStream(new FileInputStream(srcFile));", "+            } catch (IOException eyeOhEx) {", "+                throw new BuildException(eyeOhEx);", "+            }", "+        } else {", "+            ClassLoader cL = (classpath != null)", "+                ? getProject().createClassLoader(classpath)", "+                : LoadProperties.class.getClassLoader();", "+", "+            InputStream is = (cL == null)", "+                ? ClassLoader.getSystemResourceAsStream(resource)", "+                : cL.getResourceAsStream(resource);", "+", "+            if (is != null) {", "+                bis = new BufferedInputStream(is);", "+            } else { // do it like Property", "+                log(\"Unable to find resource \" + resource, Project.MSG_WARN);", "+                return;", "+            }", "+        }", "+", "-            final long len = srcFile.length();", "-", "-            //open up the file", "-            fis = new FileInputStream(srcFile);", "-            bis = new BufferedInputStream(fis);", "-                if (fis != null) {", "-                    fis.close();", "+                if (bis != null) {", "+                    bis.close();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46f4c722c5a625319afd36e34be63f0d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/perforce/SimpleP4OutputHandler.java", "commitBeforeChange": "d74422c5bdb8c7a701452a41335f152e7dbff784", "commitAfterChange": "dace404953ec887dfb7a294442018535b8c6fb1d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void process(String line) throws BuildException", "signatureAfterChange": "     public void process(String line) throws BuildException", "diff": ["-        //p4 -s is unpredicatable. For example a server down", "-        //does not return error: markup", "+        //When a server is down, the code expects :", "+        //Perforce client error:", "+        //Connect to server failed; check $P4PORT.", "+        //TCP connect to localhost:1666 failed.", "+        //connect: localhost:1666: Connection refused", "-        //when running labelsync, if view elements are in sync, Perforce produces a line of output", "-        //looking like this one :", "-        //error: //depot/file2 - label in sync.", "-        if (parent.util.match(\"/error:/\", line) && !parent.util.match(\"/up-to-date/\", line)", "-            && !parent.util.match(\"/label in sync/\", line)) {", "-            throw new BuildException(line);", "-", "+        if (parent.util.match(\"/^error:/\", line)", "+            || parent.util.match(\"/^Perforce client error:/\", line)) {", "+            //when running labelsync, if view elements are in sync,", "+            //Perforce produces a line of output", "+            //looking like this one :", "+            //error: //depot/file2 - label in sync.", "+            if (!parent.util.match(\"/label in sync/\", line)", "+                && !parent.util.match(\"/up-to-date/\", line)) {", "+                parent.setInError(true);", "+            } else {", "+                //sync says \"error:\" when a file is up-to-date", "+                line = parent.util.substitute(\"s/^[^:]*: //\", line);", "+            }", "+        } else if (parent.util.match(\"/^info.*?:/\", line)) {", "+            //sometimes there's \"info1:", "+            line = parent.util.substitute(\"s/^[^:]*: //\", line);", "+        parent.log(line, parent.getInError() ? Project.MSG_ERR : Project.MSG_INFO);", "-        parent.log(parent.util.substitute(\"s/^[^:]*: //\", line), Project.MSG_INFO);", "-", "+        if (parent.getInError()) {", "+            parent.setErrorMessage(parent.getErrorMessage() + line + StringUtils.LINE_SEP);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ce201f6d354e4f6f94a68bd4f7a87e0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javac.java", "commitBeforeChange": "1fa24dc235453d37357a5ffb190f5a3c15a49295", "commitAfterChange": "bba4624fac50881dcc5e81de48fffe05f92e2116", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 83, "signatureBeforeChange": "      private boolean hasPackageInfo(File[] newFiles)", "signatureAfterChange": "      private void lookForPackageInfos(File srcDir, File[] newFiles)", "diff": ["+    private void lookForPackageInfos(File srcDir, File[] newFiles) {", "+        for (int i = 0; i < newFiles.length; i++) {", "+            File f = newFiles[i];", "+            if (!f.getName().equals(\"package-info.java\")) {", "+                continue;", "+            String path = FILE_UTILS.removeLeadingPath(srcDir, f).", "+                    replace(File.separatorChar, '/');", "+            String suffix = \"/package-info.java\";", "+            if (!path.endsWith(suffix)) {", "+                log(\"anomalous package-info.java path: \" + path, Project.MSG_WARN);", "+                continue;", "+            }", "+            String pkg = path.substring(0, path.length() - suffix.length());", "+            packageInfos.put(pkg, Long.valueOf(f.lastModified()));", "-    private boolean hasPackageInfo(File[] newFiles) {", "-        for (int i = 0; i < newFiles.length; ++i) {", "-            if (newFiles[i].getName().equals(PACKAGE_INFO_JAVA)) {", "-                return true;", "-        return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "538e7bed023fe376efe76d3043ca7735", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "5ecbfc2436bdcb618dba0414ccead746e699c05a", "commitAfterChange": "14211b597afbfd0bee39c381afe3d681704f7eeb", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     public void spawn() throws IOException", "signatureAfterChange": "     public void spawn() throws IOException", "diff": ["+", "+        OutputStream dummyOut = new OutputStream() {", "+            public void write(int b) throws IOException {", "+            }", "+        };", "+", "+        ExecuteStreamHandler streamHandler = new PumpStreamHandler(dummyOut);", "+        streamHandler.setProcessErrorStream(process.getErrorStream());", "+        streamHandler.setProcessOutputStream(process.getInputStream());", "+        streamHandler.start();", "+        process.getOutputStream().close();", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "551a7995f7d67c7d4667ed9b2cbc6985", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "34e72a6607d510aed224c0db5b5b7a492e7e06d5", "commitAfterChange": "75414134803bc6fd9e433288f138a269044bdaec", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 74, "signatureBeforeChange": "     protected int transferFiles(FTPClient ftp, FileSet fs)          throws IOException, BuildException", "signatureAfterChange": "     protected int transferFiles(FTPClient ftp, FileSet fs)          throws IOException, BuildException", "diff": ["-            }   else {", "+            } else {", "+                if (this.newerOnly) {", "+\t                if (action == SEND_FILES) {", "+\t                    if (\"NONE\".equalsIgnoreCase(this.timestampGranularity)) ", "+\t                    {", "+\t                        this.serverTimestampGranularity = 0L;", "+\t                    }", "+\t                    else if (\"MINUTE\".equalsIgnoreCase(this.timestampGranularity)) ", "+\t                    {", "+\t                        this.serverTimestampGranularity = GRANULARITY_MINUTE;", "+\t                    } ", "+\t                    else ", "+\t                    {", "+\t                        this.serverTimestampGranularity = GRANULARITY_MINUTE;", "+\t                    }", "+\t                } else if (action == GET_FILES) {", "+\t                    if (\"MINUTE\".equalsIgnoreCase(this.timestampGranularity)) ", "+\t                    {", "+\t                        this.serverTimestampGranularity = GRANULARITY_MINUTE;", "+ \t                    }", "+\t                    else ", "+\t                    {", "+\t                        this.serverTimestampGranularity = 0L;", "+\t                    }", "+\t                }", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59ec31f15c2efe5c569301b688386607", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ExecutionFrame.java", "commitBeforeChange": "7499c443d67445ea8fd0b8f4bd56c72251b18bf4", "commitAfterChange": "b7e43ad8c5906ae2b6d6b42f8b2715dc7d2e7a16", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 33, "signatureBeforeChange": "     private void configureElement(Object element, BuildElement model)          throws ExecutionException, TaskException", "signatureAfterChange": "     private void configureElement(Object element, BuildElement model)          throws ExecutionException", "diff": ["-         throws ExecutionException, TaskException {", "+         throws ExecutionException {", "+            if (!reflector.supportsAttribute(attributeName)) {", "+                throw new ExecutionException(model.getType()", "+                     + \" does not support the \\\"\" + attributeName", "+                     + \"\\\" attribute\", model.getLocation());", "+            }", "-                replacePropertyRefs(attributeValue));", "+                dataService.replacePropertyRefs(attributeValue));", "-            reflector.addText(element, replacePropertyRefs(modelText));", "+            if (!reflector.supportsText()) {", "+                throw new ExecutionException(model.getType()", "+                     + \" does not support content\", model.getLocation());", "+            }", "+            reflector.addText(element,", "+                dataService.replacePropertyRefs(modelText));", "-                Object nestedElement = createNestedElement(reflector, element,", "-                    nestedElementModel);", "-                reflector.addElement(element, nestedElementName, nestedElement);", "+                if (reflector.supportsNestedAdder(nestedElementName)) {", "+                    addNestedElement(reflector, element, nestedElementModel);", "+                } else if (reflector.supportsNestedCreator(nestedElementName)) {", "+                    createNestedElement(reflector, element, nestedElementModel);", "+                } else {", "+                    throw new ExecutionException(model.getType()", "+                         + \" does not support the \\\"\" + nestedElementName", "+                         + \"\\\" nested element\",", "+                        nestedElementModel.getLocation());", "+                }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "607597c3c2b62783abd4520aec00fcb4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "8477db586049ffe4763ea2aeb8c8b2dd786f82a1", "commitAfterChange": "da882e14dce576c4be8d779bcefa2d43236844d2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+\t    // prepare Java 1.1 style credentials", "+\t    if (uname != null || pword != null) {", "+\t      String up = uname + \":\" + pword;", "+\t      String encoding;", "+\t      // check to see if sun's Base64 encoder is available.", "+\t      try {", "+\t\tsun.misc.BASE64Encoder encoder = ", "+\t\t  (sun.misc.BASE64Encoder) Class.forName(\"sun.misc.BASE64Encoder\").newInstance();", "+\t\tencoding = encoder.encode (up.getBytes());", "+", "+\t      }", "+\t      catch (Exception ex) { // sun's base64 encoder isn't available ", "+\t\tBase64Converter encoder = new Base64Converter();", "+\t\tencoding = encoder.encode(up.getBytes());", "+\t      }", "+\t      connection.setRequestProperty (\"Authorization\", \"Basic \" + encoding);", "+", "+\t    }", "+\t\t// test for 401 result (HTTP only)", "+                if(httpConnection.getResponseCode()==HttpURLConnection.HTTP_UNAUTHORIZED)  {", "+                    log(\"Not authorized - check \" + dest + \" for details\");", "+                    return; ", "+                }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "622d40d4c0bbaa3808eeb64e5e84748f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/TraXLiaison.java", "commitBeforeChange": "cd69b894b2a5a02c6cc32c8caa4d7e949074eb9e", "commitAfterChange": "735f3fca3e3ce3a6b44109a44836d8ab64215e75", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private TransformerFactory getFactory() throws BuildException", "signatureAfterChange": "     private TransformerFactory getFactory() throws BuildException", "diff": ["+", "+        if (Boolean.TRUE.equals(DISABLE_SECURE_PROCESSING.get())) {", "+            try {", "+                Field _isNotSecureProcessing = tfactory.getClass().getDeclaredField(\"_isNotSecureProcessing\");", "+                _isNotSecureProcessing.setAccessible(true);", "+                _isNotSecureProcessing.set(tfactory, Boolean.TRUE);", "+            } catch (Exception x) {", "+                project.log(x.toString(), Project.MSG_DEBUG);", "+            }", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6232a5911255919d5fb8833df89b24c9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/ScpToMessageBySftp.java", "commitBeforeChange": "9ffa99a029f6a0d02374c8705d2db32b23731779", "commitAfterChange": "fd126ea83074cffca634b5e6ef2ae80844ff7695", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      private void doMultipleTransfer() throws IOException, JSchException", "signatureAfterChange": "      private void doMultipleTransfer() throws IOException, JSchException", "diff": ["+                try {", "+                    channel.stat(remotePath);", "+                } catch (SftpException e) {", "+                    if (e.id == ChannelSftp.SSH_FX_NO_SUCH_FILE) {", "+                        // dir does not exist.", "+                        channel.mkdir(remotePath);", "+                    } else {", "+                        throw new JSchException(\"failed to access remote dir '\"", "+                                                + remotePath + \"'\", e);", "+                    }", "+                }", "-                JSchException schException = new JSchException(\"Could not CD to '\" + remotePath + \"' - \" + e.toString());", "-                schException.initCause(e);", "-                throw schException;", "+                throw new JSchException(\"Could not CD to '\" + remotePath", "+                                        + \"' - \" + e.toString(), e);", "+            Directory current = null;", "-                    Directory current = (Directory) i.next();", "-                    if(getVerbose()) {", "+                    current = (Directory) i.next();", "+                    if (getVerbose()) {", "-                JSchException schException = new JSchException(e.toString());", "-                schException.initCause(e);", "-                throw schException;", "+                String msg = \"Error sending directory\";", "+                if (current != null && current.getDirectory() != null) {", "+                    msg += \" '\" + current.getDirectory().getName() + \"'\";", "+                }", "+                throw new JSchException(msg, e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6661434d2f67832203337596b3ecf0ac", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/modules/edit/DependentTargetChooser.java", "commitBeforeChange": "2ff201801b557593afe6cf9dcd4d4c4f4da65b39", "commitAfterChange": "cfa93603e73e635d31be01cdb31dc9959a5ea35c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private JTable createTargetsTable()", "signatureAfterChange": "     private JTable getTargetsTable()", "diff": ["+    private JTable getTargetsTable() {", "+        if (_targetsTable == null) {", "+            _targetsTable = new JTable();", "+            _targetsTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);", "+            _targetsTable.setAutoCreateColumnsFromModel(false);", "+            _targetsTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);", "+            // Coulumn showing the selection of the Target", "+            TableColumn selectCol = new TableColumn();", "+            selectCol.setHeaderValue(_resources.getString(getClass(), \"selection\"));", "+            selectCol.setModelIndex(0);", "+            selectCol.setPreferredWidth(70);", "+            selectCol.setMaxWidth(70);", "+            selectCol.setResizable(false);", "+            // Coulumn showing the Target", "+            TableColumn targetCol = new TableColumn();", "+            targetCol.setHeaderValue(_resources.getString(getClass(), \"target\"));", "+            targetCol.setModelIndex(1);", "+            targetCol.setPreferredWidth(150);", "+            targetCol.setMaxWidth(150);", "+            targetCol.setResizable(true);", "+            // Coulumn showing the description of targets", "+            TableColumn descrCol = new TableColumn();", "+            descrCol.setHeaderValue(_resources.getString(getClass(), \"description\"));", "+            descrCol.setModelIndex(2);", "+            descrCol.setPreferredWidth(250);", "+            descrCol.setResizable(false);", "+            _targetsTable.addColumn(selectCol);", "+            _targetsTable.addColumn(targetCol);", "+            _targetsTable.addColumn(descrCol);", "+            _targetsTable.setModel(new SelectableTargetsTableModel());", "+        return _targetsTable;", "-    private JTable createTargetsTable() {", "-        JTable table = new JTable();", "-        table.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);", "-        table.setAutoCreateColumnsFromModel(false);", "-        table.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);", "-        // Coulumn showing the Target", "-        TableColumn targetCol = new TableColumn();", "-        targetCol.setHeaderValue(\"Target\");", "-        targetCol.setModelIndex(0);", "-        targetCol.setPreferredWidth(150);", "-        targetCol.setMaxWidth(150);", "-        targetCol.setResizable(true);", "-        // Coulumn showing the description of targets", "-        TableColumn descrCol = new TableColumn();", "-        descrCol.setHeaderValue(\"Description\");", "-        descrCol.setModelIndex(1);", "-        descrCol.setPreferredWidth(250);", "-        descrCol.setResizable(false);", "-        table.addColumn(targetCol);", "-        table.addColumn(descrCol);", "-        table.setModel(new TargetsTableModel());", "-        return table;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70a3a745f7e0b49778b00bb97a586c5c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/Antidote.java", "commitBeforeChange": "a18fbb4649bfe9577aa4648d3ab2cfb7712453e8", "commitAfterChange": "c70641243c667093d23f689c7c28866fa661b1af", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public Antidote(AppContext context)", "signatureAfterChange": "     public Antidote(AppContext context)", "diff": ["-        _console = new Console(_context);", "-", "-", "+        // This is necessary because, frankly, the JSplitPane widget", "+        // sucks, and doesn't provide enought (working) control over the", "+        // initial size of it's subcomponents. setDividerLocation(double)", "+        // doesn't seem to work until after the widget is visible.", "+        splitter.setPreferredSize(new Dimension(500, 300));", "-        add(BorderLayout.CENTER, splitter);", "+        // Top bottom splitter. ", "+        JSplitPane splitter2 = new JSplitPane(JSplitPane.VERTICAL_SPLIT);", "+        splitter2.setOneTouchExpandable(true);", "-        add(BorderLayout.SOUTH, _console);", "+        splitter2.add(JSplitPane.TOP, splitter);", "+        splitter2.add(JSplitPane.BOTTOM, populateEditors(\"bottom\"));", "+        add(BorderLayout.CENTER, splitter2);", "+        splitter2.resetToPreferredSizes();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73023cb81ff19873c2c2e057c9ca29ae", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/DOMElementWriter.java", "commitBeforeChange": "bd79701cef51ac778891ad7112ee49ecb2415caa", "commitAfterChange": "d1895cd5aac83ffcc3961f51359c6fe473384429", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void write(Element element, Writer out, int indent,                        String indentWith)         throws IOException", "signatureAfterChange": "     public void write(Element element, Writer out, int indent,                        String indentWith)         throws IOException", "diff": ["-            if (child.getNodeType() == Node.ELEMENT_NODE) {", "+            switch (child.getNodeType()) {", "+                ", "+            case Node.ELEMENT_NODE:", "-            }", "-", "-            if (child.getNodeType() == Node.TEXT_NODE) {", "+                break;", "+                ", "+            case Node.TEXT_NODE:", "+            case Node.CDATA_SECTION_NODE:", "+                break;", "+", "+            case Node.ENTITY_REFERENCE_NODE:", "+                out.write('&');", "+                out.write(child.getNodeName());", "+                out.write(';');", "+                break;", "+", "+            case Node.PROCESSING_INSTRUCTION_NODE:", "+                out.write(\"<?\");", "+                out.write(child.getNodeName());", "+                String data = child.getNodeValue();", "+                if ( data != null && data.length() > 0 ) {", "+                    out.write(' ');", "+                    out.write(data);", "+                }", "+                out.write(\"?>\");", "+                break;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7421a6fd7b2d34650882f74e29efed72", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/svn/src/main/org/apache/tools/ant/taskdefs/svn/AbstractSvnTask.java", "commitBeforeChange": "53cde27dd34a3c692aea2ca0649324937a6202ca", "commitAfterChange": "daf1c91d108e2a14bed6c6a845e19a9e2b4b0969", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 35, "signatureBeforeChange": "     protected void configureCommandline(Commandline c)", "signatureAfterChange": "     protected void configureCommandline(Commandline c)", "diff": ["+        if (file != null) {", "+            c.createArgument(true).setValue(\"--file\");", "+            c.createArgument(true).setFile(file);", "+        }", "+        if (force) {", "+            c.createArgument(true).setValue(\"--force\");", "+        }", "+        if (recursive != null) {", "+            if (recursive.booleanValue()) {", "+                c.createArgument(true).setValue(\"--recursive\");", "+            } else {", "+                c.createArgument(true).setValue(\"--non-recursive\");", "+            }", "+        }", "+        if (targets != null) {", "+            c.createArgument(true).setValue(\"--targets\");", "+            c.createArgument(true).setFile(targets);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ae4fff7466953054593bb7be7a86dac", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/types/CommandlineJavaTest.java", "commitBeforeChange": "56d0ca9a293eeb55c459118ccfd60e3fbca258a3", "commitAfterChange": "08c47d7e6286329be7f1ffabcbc3ddf460602c70", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void testSysproperties()", "signatureAfterChange": "      public void testSysproperties()", "diff": ["+", "+        project.setProperty(\"key2\", \"value2\");", "+        PropertySet ps = new PropertySet();", "+        ps.setProject(project);", "+        ps.appendName(\"key2\");", "+        c.addSyspropertyset(ps);", "+", "+            assertNotNull(System.getProperty(\"key2\"));", "+            assertEquals(\"value2\", System.getProperty(\"key2\"));", "+        assertNull(System.getProperty(\"key2\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "817f02670dc9bbb09682a5a75a573da0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Retry.java", "commitBeforeChange": "403e3ac9bf82acd669290c014e6c6d89d763520a", "commitAfterChange": "656c4b15dca26d52034f075bf077fd8c72896a1f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r     public void execute() throws BuildException", "signatureAfterChange": "\r     public void execute() throws BuildException", "diff": ["+        StringBuffer errorMessages = new StringBuffer();\r", "+                    errorMessages.append(e.getMessage());\r", "+                    errorMessages.append(getProject().getProperty(\"line.separator\"));\r", "-                    throw new BuildException(\"Task [\"+nestedTask.getTaskName()+\"] failed after [\"+retryCount+\"] attempts, giving up\");\r", "+                    errorMessages.append(e.getMessage());\r", "+                    StringBuffer exceptionMessage = new StringBuffer();\r", "+                    exceptionMessage.append(\"Task [\").append(nestedTask.getTaskName());\r", "+                    exceptionMessage.append(\"] failed after [\").append(retryCount);\r", "+                    exceptionMessage.append(\"] attempts, giving up.\");\r", "+                    exceptionMessage.append(getProject().getProperty(\"line.separator\"));\r", "+                    exceptionMessage.append(\"Error messages:\").append(getProject().getProperty(\"line.separator\"));\r", "+                    exceptionMessage.append(errorMessages);\r", "+                    throw new BuildException(exceptionMessage.toString(), getLocation());\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82dcffa6f04f4e1bc5bb626dfe11967a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/launcher/AntLoader.java", "commitBeforeChange": "58f8db35ee5db94294191fc2599cb02a8086b881", "commitAfterChange": "8c97911720b40557d78672245bc2e7f724917297", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public final static void main( final String[] args )          throws Exception", "signatureAfterChange": "     public final static void main( final String[] args )          throws Exception", "diff": ["-    { ", "-        final URL archive = new URL( \"file:lib/myrmidon.jar\" );", "-        c_classLoader = new AntLoader( new URL[] { archive } );", "-        ", "+    {        ", "+            //actually try to discover the install directory based on where", "+            // the ant.jar is", "+            final File installDirectory = findInstallDir();", "+            System.setProperty( \"ant.home\", installDirectory.toString() );", "+", "+            //setup classloader appropriately for myrmidon jar", "+            final File archive = ", "+                new File( installDirectory, \"lib\" + File.separator + \"myrmidon.jar\" );", "+            final AntClassLoader classLoader = ", "+                new AntClassLoader( new URL[] { archive.toURL() } );", "+", "-            final Class clazz = c_classLoader.loadClass( \"org.apache.ant.Main\" );", "+            final Class clazz = classLoader.loadClass( \"org.apache.ant.Main\" );", "+        catch( final InvocationTargetException ite ) ", "+        {", "+            System.err.println( \"Error: \" + ite.getTargetException().getMessage() );", "+            ite.getTargetException().printStackTrace();", "+        }", "+            System.err.println( \"Error: \" + throwable.getMessage() );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "849b5dcaba0e92a93d8fa7e3f98500d9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/bootstrap/org/apache/ant/builder/MutantBuilder.java", "commitBeforeChange": "752f49d5b18f9743f8e4a6dbdc8065d240d9c97a", "commitAfterChange": "da4e1a3aa99899d6aecc6d14c2a7498fa51647aa", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     protected void _init(BuildHelper helper)", "signatureAfterChange": "     protected void _init(BuildHelper helper)", "diff": ["+        helper.setProperty(\"script.dir\", \"${src.dir}/script\");", "+        helper.setProperty(\"conf.dir\", \"${src.dir}/conf\");", "-        helper.setProperty(\"javadocs.dir\", \"${dist.dir}/javadocs\");", "-        helper.setProperty(\"distlib.dir\", \"${dist.dir}/lib\");", "+        helper.setProperty(\"dist.bin\", \"${dist.dir}/bin\");", "+        helper.setProperty(\"dist.conf\", \"${dist.dir}/conf\");", "+        helper.setProperty(\"javadocs.dir\", \"${dist.dir}/docs/manual/api\");", "+        helper.setProperty(\"dist.lib.dir\", \"${dist.dir}/lib\");", "+        helper.setProperty(\"dist.core.dir\", \"${dist.lib.dir}/core\");", "+        helper.setProperty(\"dist.frontend.dir\", \"${dist.lib.dir}/frontend\");", "+        helper.setProperty(\"dist.antlibs.dir\", \"${dist.lib.dir}/antlibs\");", "+        helper.setProperty(\"dist.syslibs.dir\", \"${dist.core.dir}/syslibs\");", "+        helper.setProperty(\"chmod.fail\", \"true\");", "-        helper.addPathElementToPath(\"classpath.common\", \"${distlib.dir}/init.jar\");", "+        helper.addPathElementToPath(\"classpath.common\", \"${dist.core.dir}/start/init.jar\");", "-        helper.addPathElementToPath(\"classpath.antcore\", \"${distlib.dir}/common/common.jar\");", "+        helper.addPathElementToPath(\"classpath.antcore\", \"${dist.core.dir}/common/common.jar\");", "-        helper.addPathElementToPath(\"classpath.frontend\", \"${distlib.dir}/antcore/antcore.jar\");", "+        helper.addPathElementToPath(\"classpath.frontend\", \"${dist.core.dir}/antcore/antcore.jar\");", "-        helper.addPathElementToPath(\"classpath.start\", \"${distlib.dir}/init.jar\");", "+        helper.addPathElementToPath(\"classpath.start\", \"${dist.core.dir}/start/init.jar\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c59f16514473b80c8969b118721e792", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/FixCRLF.java", "commitBeforeChange": "0bf139178affc6edbd26010b96cd727bd1396c84", "commitAfterChange": "722f6306c7ce1bcfed6c1baacb939978cd48fc6b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "      private void processFile(String file) throws BuildException", "signatureAfterChange": "       private void processFile(String file) throws BuildException", "diff": ["-                                     ", "+", "-                if (!destFile.delete()) {", "-                    throw new BuildException(\"Unable to delete \" + destFile);", "+                // Compare the destination with the temp file", "+                System.out.println(\"destFile exists\");", "+                if ( ! filesEqual(destFile, tmpFile)) {", "+                    System.out.println(\"destFile exists: files not equal\");", "+                    log(destFile + \" is being written\", Project.MSG_VERBOSE);", "+                    if (!destFile.delete()) {", "+                        throw new BuildException(\"Unable to delete \"", "+                                                 + destFile);", "+                    }", "+                    if (!tmpFile.renameTo(destFile)) {", "+                        throw new BuildException(", "+                                \"Failed to transform \" + srcFile", "+                                + \" to \" + destFile", "+                                + \". Couldn't rename temporary file: \"", "+                                + tmpFile);", "+                    }", "+", "+                } else { // destination is equal to temp file", "+                    System.out.println(\"destFile exists: files equal\");", "+                    log(destFile +", "+                        \" is not written, as the contents are identical\",", "+                        Project.MSG_VERBOSE);", "+                    if (!tmpFile.delete()) {", "+                        throw new BuildException(\"Unable to delete \"", "+                                                 + destFile);", "+                    }", "+                }", "+            } else { // destFile does not exist - write the temp file", "+                System.out.println(\"destFile does not exist\");", "+                if (!tmpFile.renameTo(destFile)) {", "+                    throw new BuildException(", "+                            \"Failed to transform \" + srcFile", "+                            + \" to \" + destFile", "+                            + \". Couldn't rename temporary file: \"", "+                            + tmpFile);", "-                                     ", "-            if (!tmpFile.renameTo(destFile)) {", "-                throw new BuildException(\"Failed to transform \" + srcFile", "-                                         + \" to \" + destFile", "-                                         + \". Couldn't rename temporary file: \" + tmpFile);", "-            } else {", "-                tmpFile = null;", "-            }", "+", "+            tmpFile = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "910709f837ede0eae866f078493e966d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/ZipScanner.java", "commitBeforeChange": "ec980be7345681968c93f0609e9a3fecb39b9753", "commitAfterChange": "fbb9886634198d8377104bef9ec697fadeb134df", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void scanme()", "signatureAfterChange": "     private void scanme()", "diff": ["+        //do not use a FileResource b/c it pulls File info from the filesystem:", "-", "-", "+        init();", "-        myentries = new Hashtable();", "+", "+        fileEntries.clear();", "+        dirEntries.clear();", "+        matchFileEntries.clear();", "+        matchDirEntries.clear();", "+", "-", "-                myentries.put(new String(entry.getName()),", "-                              new Resource(entry.getName(), true,", "-                                           entry.getTime(),", "-                                           entry.isDirectory(),", "-                                           entry.getSize()));", "+                Resource r = new ZipResource(srcFile, encoding, entry);", "+                String name = entry.getName();", "+                if (entry.isDirectory()) {", "+                    name = trimSeparator(name);", "+                    dirEntries.put(name, r);", "+                    if (match(name)) {", "+                        matchDirEntries.put(name, r);", "+                    }", "+                } else {", "+                    fileEntries.put(name, r);", "+                    if (match(name)) {", "+                        matchFileEntries.put(name, r);", "+                    }", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "970a18ecdaffd4d931a14987fefe4792", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/MacroInstance.java", "commitBeforeChange": "99ac2c7d14d5e7f2e90af77af786b348c10d1822", "commitAfterChange": "9931a12c723b640bcc8f96c889bc5f59cd72a3b6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private String macroSubs(String s, Map macroMapping)", "signatureAfterChange": "          private String macroSubs(String s, Map macroMapping)", "diff": ["+    ", "-        StringBuffer macroName = new StringBuffer();", "+        StringBuffer macroName = null;", "+        int state = STATE_NORMAL;", "-            if (s.charAt(i) == '$') {", "-                inMacro = true;", "-            } else {", "-                if (inMacro) {", "-                    if (s.charAt(i) == '{') {", "-                        continue;", "-                    } else if (s.charAt(i) == '}') {", "+            char ch = s.charAt(i);", "+            switch (state) {", "+                case STATE_NORMAL:", "+                    if (ch == '$') {", "+                        state = 1;", "+                    } else {", "+                        ret.append(ch);", "+                    }                    ", "+                    break;", "+                case STATE_EXPECT_BRACKET:", "+                    if (ch == '{') {", "+                        state = 2;", "+                        macroName = new StringBuffer();", "+                    } else {", "+                        state = 0;", "+                        ret.append('$');", "+                        ret.append(ch);", "+                    }", "+                    break;", "+                case STATE_EXPECT_NAME:", "+                    if (ch == '}') {", "+                        state = 0;", "-                        macroName = new StringBuffer();", "-                        inMacro = false;", "+                        macroName = null;", "-                } else {", "-                    ret.append(s.charAt(i));", "-                }", "+        }", "+        switch (state) {", "+            case STATE_NORMAL:", "+                break;", "+            case STATE_EXPECT_BRACKET:", "+                ret.append('$');", "+                break;", "+            case STATE_EXPECT_NAME:", "+                ret.append(\"${\");", "+                ret.append(macroName.toString());", "+                break;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e8f6079fa3ea09bdafd875333a35f52", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/MacroInstance.java", "commitBeforeChange": "2a426f599fb6e67d13f24abff7457fd9f9b87fd9", "commitAfterChange": "8dd4e0ba76f304d2a1bfde2ddd614d750d83560f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "          private String macroSubs(String s, Map macroMapping)", "signatureAfterChange": "      private String macroSubs(String s, Map macroMapping)", "diff": ["-    ", "+", "+        if (s == null) {", "+            return null;", "+        }", "-                    if (ch == '$') {", "-                        state = 1;", "+                    if (ch == '@') {", "+                        state = STATE_EXPECT_BRACKET;", "-                    }                    ", "+                    }", "-                        state = 2;", "+                        state = STATE_EXPECT_NAME;", "+                    } else if (ch == '@') {", "+                        state = STATE_EXPECT_EXCAPE;", "-                        state = 0;", "-                        ret.append('$');", "+                        state = STATE_NORMAL;", "+                        ret.append('@');", "-                        state = 0;", "+                        state = STATE_NORMAL;", "-                            ret.append(\"${\" + name + \"}\");", "+                            ret.append(\"@{\" + name + \"}\");", "-                        macroName.append(s.charAt(i));", "+                        macroName.append(ch);", "+                    break;", "+                case STATE_EXPECT_EXCAPE:", "+                    state = STATE_NORMAL;", "+                    if (ch == '{') {", "+                        ret.append(\"@\");", "+                    } else {", "+                        ret.append(\"@@\");", "+                    }", "+                    ret.append(ch);", "+                    break;", "+                default:", "+                    break;", "-                ret.append('$');", "+                ret.append('@');", "-                ret.append(\"${\");", "+                ret.append(\"@{\");", "+                break;", "+            case STATE_EXPECT_EXCAPE:", "+                ret.append(\"@@\");", "+                break;", "+            default:"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4f5a39fac06cd0d35a314abb5daac93", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/selectors/TokenizedPath.java", "commitBeforeChange": "2b925503d71972d8b782eedd6cdf75711377d7b0", "commitAfterChange": "2c4faa154f069f3f69d6c3c95629409a7b8b0cc4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " TokenizedPath(String path, String[] tokens)", "signatureAfterChange": "     public TokenizedPath(TokenizedPath parent, String child)", "diff": ["+     */", "+    public TokenizedPath(TokenizedPath parent, String child) {", "+        if (parent.path.length() > 0", "+            && parent.path.charAt(parent.path.length() - 1)", "+               != File.separatorChar) {", "+            path = parent.path + File.separatorChar + child;", "+        } else {", "+            path = parent.path + child;", "+        }", "+        tokenizedPath = new String[parent.tokenizedPath.length + 1];", "+        System.arraycopy(parent.tokenizedPath, 0, tokenizedPath, 0,", "+                         parent.tokenizedPath.length);", "+        tokenizedPath[parent.tokenizedPath.length] = child;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6744bfbd21cdf43f28281a8055572d8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/vss/MSVSS.java", "commitBeforeChange": "5722812dbe0cfda11a528c3e6c32b2b2b67b7960", "commitAfterChange": "d76fda652ab6bb3f3840e8606f73d23307a33ca4", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 44, "signatureBeforeChange": "     protected String getVersionLabel()", "signatureAfterChange": "     protected String getVersionLabel()", "diff": ["+            if (m_FromLabel.length() > 31) {", "+                m_FromLabel = m_FromLabel.substring(0, 30);", "+                log(\"FromLabel is longer than 31 characters, truncated to: \"", "+                    + m_FromLabel, Project.MSG_WARN);", "+            }", "+            if (m_ToLabel.length() > 31) {", "+                m_ToLabel = m_ToLabel.substring(0, 30);", "+                log(\"ToLabel is longer than 31 characters, truncated to: \"", "+                    + m_ToLabel, Project.MSG_WARN);", "+            }", "+            if (m_FromLabel.length() > 31) {", "+                m_FromLabel = m_FromLabel.substring(0, 30);", "+                log(\"FromLabel is longer than 31 characters, truncated to: \"", "+                    + m_FromLabel, Project.MSG_WARN);", "+            }", "+            if (m_ToLabel.length() > 31) {", "+                m_ToLabel = m_ToLabel.substring(0, 30);", "+                log(\"ToLabel is longer than 31 characters, truncated to: \"", "+                    + m_ToLabel, Project.MSG_WARN);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac0240bd5b5afc6feeee6c8bfb33122c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/helper/ProjectHelper2.java", "commitBeforeChange": "a5ae6a2bfec933af410de9ad415789bfde653666", "commitAfterChange": "f3e3462d86183541ed6f0c9b8a1c3c963d0d6ce1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void parse(Project project, Object source, RootHandler handler)             throws BuildException", "signatureAfterChange": "     public void parse(Project project, Object source, RootHandler handler)             throws BuildException", "diff": ["+        URL  url = null;", "+        String buildFileName = null;", "-//         } else if (source instanceof InputStream) {", "-//         } else if (source instanceof URL) {", "-//         } else if (source instanceof InputSource) {", "+            buildFile = new File(buildFile.getAbsolutePath());", "+            context.setBuildFile(buildFile);", "+            buildFileName = buildFile.toString();", "+//         } else if (source instanceof InputStream ) {", "+        } else if (source instanceof URL) {", "+            if (handler.getCurrentAntHandler() != elementHandler) {", "+                throw new BuildException(", "+                    \"Source \" + source.getClass().getName()", "+                    + \" not supported by this plugin for \"", "+                    + \" non task xml\");", "+            }", "+            url = (URL) source;", "+            buildFileName = url.toString();", "+//         } else if (source instanceof InputSource ) {", "-                + \" not supported by this plugin\");", "+                                     + \" not supported by this plugin\");", "-        FileInputStream inputStream = null;", "+        InputStream inputStream = null;", "-        buildFile = new File(buildFile.getAbsolutePath());", "-        context.setBuildFile(buildFile);", "-            String uri = fu.toURI(buildFile.getAbsolutePath());", "+            String uri = null;", "+            if (buildFile != null) {", "+                uri = fu.toURI(buildFile.getAbsolutePath());", "+                inputStream = new FileInputStream(buildFile);", "+            } else {", "+                inputStream = url.openStream();", "+                uri = url.toString(); // ?? OK ??", "+            }", "-            inputStream = new FileInputStream(buildFile);", "-            inputSource.setSystemId(uri);", "-            project.log(\"parsing buildfile \" + buildFile", "-                + \" with URI = \" + uri, Project.MSG_VERBOSE);", "+            if (uri != null) {", "+                inputSource.setSystemId(uri);", "+            }", "+            project.log(\"parsing buildfile \" + buildFileName", "+                        + \"with URI = \" + uri, Project.MSG_VERBOSE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aceb64efda22dbced6006f6f7d625b5e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "b5ad58c4d736b7f0a97aaa78b258dcceb9c21c89", "commitAfterChange": "7435b27b914764c3845b4821363ffeb4ddfe89cd", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "         public InputSource resolveEntity(String publicId,                                          String systemId)", "signatureAfterChange": "         public InputSource resolveEntity(String publicId,                                          String systemId)", "diff": ["-", "+        ", "+                int index = path.indexOf(\"file:\");", "+                ", "+                // we only have to handle these for backward compatibility", "+                // since they are in the FAQ.", "+                while (index != -1) {", "+                    path = path.substring(0, index) + path.substring(index + 5);", "+                    index = path.indexOf(\"file:\");", "+                }", "+                ", "+                String entitySystemId = path;", "+                index = path.indexOf(\"%23\");", "+                // convert these to #", "+                while (index != -1) {", "+                    path = path.substring(0, index) + \"#\" + path.substring(index + 3);", "+                    index = path.indexOf(\"%23\");", "+                }", "+", "-                    return new InputSource(new FileInputStream(file));", "+                    InputSource inputSource = new InputSource(new FileInputStream(file));", "+                    inputSource.setSystemId(\"file:\" + entitySystemId);", "+                    return inputSource;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b081bea3dc33325399fcf9d65b715d29", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/JavaEnvUtils.java", "commitBeforeChange": "e5235423ccd494cb7516a1df6e3e13a74a22b767", "commitAfterChange": "da5a13f8e4e0e4475f942b5ae5670271b711d423", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "           private static void buildJrePackages()", "signatureAfterChange": "      private static void buildJrePackages()", "diff": ["-     ", "+", "+                jrePackages.addElement(\"org.ietf.jgss\");", "-            case 13:    ", "+            case 13:", "+                jrePackages.addElement(\"com.sun.corba\");", "+                jrePackages.addElement(\"com.sun.jndi\");", "+                jrePackages.addElement(\"com.sun.media\");", "+                jrePackages.addElement(\"com.sun.naming\");", "+                jrePackages.addElement(\"com.sun.org.omg\");", "+                jrePackages.addElement(\"com.sun.rmi\");", "+                jrePackages.addElement(\"sunw.io\");", "+                jrePackages.addElement(\"sunw.util\");", "-            case 12:    ", "-                jrePackages.addElement(\"sun.misc\");", "+            case 12:", "+                jrePackages.addElement(\"com.sun.java\");", "+                jrePackages.addElement(\"com.sun.image\");", "-            case 11:    ", "+            case 11:", "+                //things like sun.reflection, sun.misc, sun.net", "+                jrePackages.addElement(\"sun.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5da00d9b7fe83ecc0990e0ba92c0351", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "37e97ef42d47f59a277025d51b1d13719a9e616a", "commitAfterChange": "b92e6b644f97b87083602a8ce4029cce01725674", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "     private void checkIncludePatterns()", "signatureAfterChange": "     private void checkIncludePatterns()", "diff": ["+            if (FileUtils.isAbsolutePath(includes[icounter])) {", "+                //skip abs. paths not under basedir, if set:", "+                if (basedir != null", "+                    && !SelectorUtils.matchPatternStart(includes[icounter],", "+                    basedir.getAbsolutePath(), isCaseSensitive())) {", "+                    continue;", "+                }", "+            } else if (basedir == null) {", "+                //skip non-abs. paths if basedir == null:", "+                continue;", "+            }", "-        if (newroots.containsKey(\"\")) {", "+        if (newroots.containsKey(\"\") && basedir != null) {", "-            try {", "-                canonBase = basedir.getCanonicalFile();", "-            } catch (IOException ex) {", "-                throw new BuildException(ex);", "+            if (basedir != null) {", "+                try {", "+                    canonBase = basedir.getCanonicalFile();", "+                } catch (IOException ex) {", "+                    throw new BuildException(ex);", "+                }", "+                if (basedir == null && !FileUtils.isAbsolutePath(currentelement)) {", "+                    continue;", "+                }", "-                        File canonFile = myfile.getCanonicalFile();", "-                        String path = FILE_UTILS.removeLeadingPath(canonBase,", "-                                                                  canonFile);", "+                        String path = (basedir == null)", "+                            ? myfile.getCanonicalPath()", "+                            : FILE_UTILS.removeLeadingPath(canonBase,", "+                            myfile.getCanonicalFile());", "-                            if (myfile != null) {", "-                                currentelement =", "-                                    FILE_UTILS.removeLeadingPath(basedir,", "-                                                                 myfile);", "+                            if (myfile != null && basedir != null) {", "+                                currentelement = FILE_UTILS.removeLeadingPath(", "+                                    basedir, myfile);", "-                        currentelement = FILE_UTILS.removeLeadingPath(basedir,", "-                                                                     f);", "+                        currentelement = (basedir == null)", "+                            ? f.getAbsolutePath()", "+                            : FILE_UTILS.removeLeadingPath(basedir, f);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6b4d774a334855d84517f23299fa57b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/TraXLiaisonTest.java", "commitBeforeChange": "4dab12fb9ccbaa24cc22c9804302bc7a4373b78e", "commitAfterChange": "fe829a9d0fa679df3ae2cc4803e5236ed2ed5c7b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testXalan2Redirect() throws Exception", "signatureAfterChange": "      public void testXalan2Redirect() throws Exception", "diff": ["+        ClassLoader orig = Thread.currentThread().getContextClassLoader();", "+            // Use the JRE's Xerces, not lib/optional/xerces.jar:", "+            Thread.currentThread().setContextClassLoader(new ClassLoader(ClassLoader.getSystemClassLoader().getParent()) {", "+                public InputStream getResourceAsStream(String name) {", "+                    if (name.startsWith(\"META-INF/services/\")) {", "+                        // work around JAXP #6723276 in JDK 6", "+                        return new ByteArrayInputStream(new byte[0]);", "+                    }", "+                    return super.getResourceAsStream(name);", "+                }", "+            });", "+            // Tickle #52382:", "+            System.setSecurityManager(new SecurityManager() {public void checkPermission(Permission perm) {}});", "+            Thread.currentThread().setContextClassLoader(orig);", "+            System.setSecurityManager(null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b79063a45647ab3183fb0305647e8fd1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "c35a248ef870c9f98b7eda39ba9e3653775aea82", "commitAfterChange": "4653e638dd921ac96a2e8583851b121e46477ae9", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void closeEntry() throws IOException", "signatureAfterChange": "     public void closeEntry() throws IOException", "diff": ["-        } else {", "+        } else if (raf == null) {", "+        } else { /* method is STORED and we used RandomAccessFile */", "+            long size = written - dataStart;", "+            entry.setSize(size);", "+            entry.setComprSize(size);", "+            entry.setCrc(realCrc);", "+        }", "+", "+        // If random access output, write the local file header containing", "+        // the correct CRC and compressed/uncompressed sizes", "+        if (raf != null) {", "+            long save = raf.getFilePointer();", "+", "+            raf.seek(localDataStart);", "+            writeOut((new ZipLong(entry.getCrc())).getBytes());", "+            writeOut((new ZipLong(entry.getCompressedSize())).getBytes());", "+            writeOut((new ZipLong(entry.getSize())).getBytes());", "+            raf.seek(save);", "-   }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b80843946a200fd3d3c6b8db638f0a52", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Manifest.java", "commitBeforeChange": "7e7fa2f905e691ba00568bc670cc80060c224fd4", "commitAfterChange": "590936af269c77bda5fb410fd81e19958062efe6", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "                  public void addAttribute(Attribute attribute) throws IOException", "signatureAfterChange": "         public String addAttribute(Attribute attribute) throws ManifestException", "diff": ["-        public void addAttribute(Attribute attribute) throws IOException {", "-            if (attributes.containsKey(attribute.getName().toLowerCase())) {", "-                throw new IOException(\"The attribute \\\"\" + attribute.getName() + \"\\\" may not occur more than\" +", "-                                      \" once in the same section\");", "+         */", "+        public String addAttribute(Attribute attribute) throws ManifestException {", "+            if (attribute.getName().equalsIgnoreCase(ATTRIBUTE_NAME)) {", "+                warnings.addElement(\"\\\"\" + ATTRIBUTE_NAME + \"\\\" attributes should not occur in the \" +", "+                                    \"main section and must be the first element in all \" + ", "+                                    \"other sections: \\\"\" +attribute.getName() + \": \" + attribute.getValue() + \"\\\"\");  ", "+                return attribute.getValue();", "-            attributes.put(attribute.getName().toLowerCase(), attribute);", "+            ", "+            if (attribute.getName().toLowerCase().startsWith(ATTRIBUTE_FROM.toLowerCase())) {", "+                warnings.addElement(\"Manifest attributes should not start with \\\"\" +", "+                                    ATTRIBUTE_FROM + \"\\\" in \\\"\" +attribute.getName() + \": \" + attribute.getValue() + \"\\\"\");  ", "+            }", "+            else if (attributes.containsKey(attribute.getName().toLowerCase())) {", "+                throw new ManifestException(\"The attribute \\\"\" + attribute.getName() + \"\\\" may not \" + ", "+                                            \"occur more than once in the same section\");", "+            }", "+            else {", "+                attributes.put(attribute.getName().toLowerCase(), attribute);", "+            }", "+            return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c18fa037460088454900f0fa5d3c314d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/Frame.java", "commitBeforeChange": "58257e4ff6cc42fbd00bdf71cb1ecce4b1e117cc", "commitAfterChange": "cba254e641320b3864c7d81345b5c1d1f8fe79dc", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 37, "signatureBeforeChange": "     protected void initialize() throws ExecutionException", "signatureAfterChange": "     protected void initialize() throws ExecutionException", "diff": ["+        configureServices();", "+        setMagicProperties();", "-        Iterator taskIterator = project.getTasks();", "-", "-        executeTasks(taskIterator);", "+        try {        ", "+            // load system ant lib", "+            URL systemLibs ", "+                = new URL(initConfig.getLibraryURL(), \"syslibs/\");", "+            componentManager.loadLib(systemLibs.toString(), true);", "+            ", "+            // execute any config tasks", "+            executeTasks(config.getTasks());", "+    ", "+            // now load other system libraries", "+            URL antLibs = new URL(initConfig.getLibraryURL(), \"antlibs/\");", "+            componentManager.loadLib(antLibs.toString(), false);                           ", "+            ", "+            executeTasks(project.getTasks());", "+        } catch (MalformedURLException e) {", "+            throw new ExecutionException(\"Unable to initialize antlibs\", e);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c244f0a84ceeb03bd1b06d0a3cfd1cfe", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "7b6a46d13193059c7ea056ad646fe5620e2bb79d", "commitAfterChange": "740ed5fbfbb7f59db596062f9e853fba40a65722", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     protected void execSQL(String sql, PrintStream out) throws SQLException", "signatureAfterChange": "     protected void execSQL(String sql, PrintStream out) throws SQLException", "diff": ["-            if (!statement.execute(sql)) {", "-                log(statement.getUpdateCount() + \" rows affected\",", "-                    Project.MSG_VERBOSE);", "-            } else {", "-                if (print) {", "-                    printResults(out);", "+", "+            boolean ret;", "+            int updateCount = 0, updateCountTotal = 0;", "+            ResultSet resultSet = null;", "+", "+            ret = statement.execute(sql);", "+            updateCount = statement.getUpdateCount();", "+            resultSet = statement.getResultSet();", "+            do", "+            {", "+                if (!ret)", "+                {", "+                    if (updateCount != -1)", "+                    {", "+                        updateCountTotal += updateCount;", "+                    }", "+                else", "+                {", "+                    if (print)", "+                    {", "+                        printResults(out);", "+                    }", "+                }", "+                ret = statement.getMoreResults();", "+                updateCount = statement.getUpdateCount();", "+                resultSet = statement.getResultSet();", "+            } while ((resultSet != null) || (updateCount != -1));", "+", "+            log(updateCountTotal + \" rows affected\",", "+                Project.MSG_VERBOSE);", "+", "+            if (print)", "+            {", "+                StringBuffer line = new StringBuffer();", "+                line.append(updateCountTotal + \" rows affected\");", "+                out.println(line);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2fcd63d5ce15f76532a1259681639a2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/IPlanetEjbc.java", "commitBeforeChange": "aa2742957752bcb4e6511924b16f1704446178b4", "commitAfterChange": "41bb266266921a6fbc381b7b22b788f54797afb3", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 56, "signatureBeforeChange": "         private long sourceClassesModified(File buildDir)", "signatureAfterChange": "         private long sourceClassesModified(File buildDir)", "diff": ["+            File pkFile;         // File for the EJB primary key class", "+", "+            /* Check the timestamp of the primary key class */", "+            if (primaryKey != null) {", "+                pkFile = primaryKey.getClassFile(buildDir);", "+                modified = pkFile.lastModified();", "+                if (modified == -1) {", "+                    System.out.println(\"The class \"", "+                                    + primaryKey.getQualifiedClassName() + \"couldn't be \"", "+                                    + \"found on the classpath\");", "+                    return -1;", "+                }", "+                latestModified = Math.max(latestModified, modified);", "+            }", "+            else {", "+                pkFile = null;", "+            }", "+", "+            if (pkFile != null) {", "+                pathToFile = primaryKey.getQualifiedClassName();", "+                pathToFile = pathToFile.replace('.', File.separatorChar) + \".class\";", "+                ejbFiles.put(pathToFile, pkFile);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7d5941aaf2f89b9cef16eb6d33e307b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javac.java", "commitBeforeChange": "8c33cae42398fa2e29c5ccb69db9b9ccddc3770e", "commitAfterChange": "30b11d18c9dead72905ffbee8887055106f61a1f", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "     public void setFork(boolean fork)", "signatureAfterChange": "     public void setFork(String f)", "diff": ["-    public void setFork(boolean fork)", "-    {", "-        this.fork = fork;", "+    public void setFork(String f) {", "+        if (f.equalsIgnoreCase(\"on\")", "+            || f.equalsIgnoreCase(\"true\")", "+            || f.equalsIgnoreCase(\"yes\")) {", "+            fork = \"true\";", "+            forkedExecutable = getSystemJavac();", "+        } else if (f.equalsIgnoreCase(\"off\")", "+                   || f.equalsIgnoreCase(\"false\")", "+                   || f.equalsIgnoreCase(\"no\")) {", "+            fork = \"false\";", "+        } else {", "+            fork = \"true\";", "+            forkedExecutable = f;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfbceeefc38f2ac2bab0ba946b9aee50", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/starteam/StarTeamLabel.java", "commitBeforeChange": "837f7ef785e24137608ba41f850d605b23bccff4", "commitAfterChange": "23e61358c8ed2aa3fe63c1f67082150047f1df9e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+        if (this.revisionlabel && this.buildlabel) {", "+            throw new BuildException(", "+                \"'revisionlabel' and 'buildlabel' both specified.  \" +", "+                \"A revision label cannot be a build label.\");", "+        }", "+", "-        new Label(snapshot, labelName, description, this.lastBuild, true).update();", "-        log(\"Created Label \" + labelName);", "+", "+        if (this.revisionlabel) {", "+            new Label(snapshot, this.labelName, this.description).update();", "+            log(\"Created Revision Label \" + this.labelName);", "+        } ", "+        else if (null != lastBuild){", "+            new Label(snapshot, this.labelName, this.description,this.lastBuild,", "+                      this.buildlabel).update();", "+            log(\"Created View Label (\" ", "+                +(this.buildlabel ? \"\" : \"non-\") + \"build) \" + this.labelName", "+                +\" as of \" + this.lastBuild.toString());", "+        }", "+        else {", "+            new Label(snapshot, this.labelName, this.description,", "+                      this.buildlabel).update();", "+            log(\"Created View Label (\" ", "+                +(this.buildlabel ? \"\" : \"non-\") + \"build) \" + this.labelName);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4a9631641c5a7cfd25f312ff5ec8bd6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/AntClassLoaderDelegationTest.java", "commitBeforeChange": "3b6aedbd218dfdc3284e0ba331a686b2a8448722", "commitAfterChange": "3dcb9a556eeed579f2517b4835315e4da8bcad59", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "          public void testFindResources() throws Exception", "signatureAfterChange": "          public void testFindResources() throws Exception", "diff": ["+        // --- SOME PRINTF's to figure out gump failure", "+        System.out.println(\"ParentLoader(): \" + enum2List(parent.getResources(TEST_RESOURCE)));", "+        ClassLoader loader = AntClassLoaderDelegationTest.class.getClassLoader();", "+        System.out.println(\"AntClassLoaderDelegationTest\");", "+        while (loader != null) {", "+            System.out.println(\" \" + loader.getClass() + \">>> \" + enum2List(loader.getResources(TEST_RESOURCE)));", "+            loader = loader.getParent();", "+        }", "+", "+        System.out.println(\"Project\");", "+        loader = Project.class.getClassLoader();", "+        while (loader != null) {", "+            System.out.println(\" \" + loader.getClass() + \">>> \" + enum2List(loader.getResources(TEST_RESOURCE)));", "+            loader = loader.getParent();", "+        }", "+            ", "+                               "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8151cd2dab514f3efeed60b00381d11", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/dotnet/CSharp.java", "commitBeforeChange": "e5a85d7265ed5c9a0e391d5d00596368229e8014", "commitAfterChange": "620b8828e3694634896ff05057883da63211fc2f", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 19, "signatureBeforeChange": "     protected boolean notEmpty(String s)", "signatureAfterChange": "     public void addCompilerSpecificOptions(NetCommand command)", "diff": ["-     */", "-    protected boolean notEmpty(String s) {", "-        return s != null && s.length() != 0;", "-    }", "+     */", "+    public void addCompilerSpecificOptions(NetCommand command) {", "+        command.addArgument(getIncludeDefaultReferencesParameter());", "+        command.addArgument(getWarnLevelParameter());", "+        command.addArgument(getDocFileParameter());", "+        command.addArgument(getFullPathsParameter());", "+        command.addArgument(getFileAlignParameter());", "+        command.addArgument(getIncrementalParameter());", "+        command.addArgument(getNoConfigParameter());", "+        command.addArgument(getUnsafeParameter());", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2636b5915b0891817e32f3ffb0b3cf2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "1534f4e063841a3db919dde44530d75b7d734c57", "commitAfterChange": "d2e6dcf66da83b17eb4a13f4ff7f374521fe29ec", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "     private TestResultHolder executeAsForked(JUnitTest test,                                              ExecuteWatchdog watchdog,                                              File casesFile)         throws BuildException", "signatureAfterChange": "     private TestResultHolder executeAsForked(JUnitTest test,                                              ExecuteWatchdog watchdog,                                              File casesFile)         throws BuildException", "diff": ["-            cmd.createArgument().setValue(\"testsfile=\" + casesFile);", "+            cmd.createArgument().setValue(Constants.TESTSFILE + casesFile);", "-        cmd.createArgument().setValue(\"filtertrace=\" + test.getFiltertrace());", "-        cmd.createArgument().setValue(\"haltOnError=\" + test.getHaltonerror());", "-        cmd.createArgument().setValue(\"haltOnFailure=\"", "+        cmd.createArgument().setValue(Constants.FILTERTRACE + test.getFiltertrace());", "+        cmd.createArgument().setValue(Constants.HALT_ON_ERROR + test.getHaltonerror());", "+        cmd.createArgument().setValue(Constants.HALT_ON_FAILURE", "-                if (s.startsWith(\"CLASSPATH=\")) {", "+                if (s.startsWith(CLASSPATH)) {", "-                                         s.substring(10 // \"CLASSPATH=\".length()", "+                                         s.substring(CLASSPATH.length()", "-                .setValue(\"formatter\"", "-                          + \"=org.apache.tools.ant.taskdefs.optional.junit.\"", "+                .setValue(Constants.FORMATTER", "+                          + \"org.apache.tools.ant.taskdefs.optional.junit.\"", "-        cmd.createArgument().setValue(\"showoutput=\"", "+        cmd.createArgument().setValue(Constants.SHOWOUTPUT", "-        cmd.createArgument().setValue(\"logtestlistenerevents=true\"); // #31885", "+        cmd.createArgument().setValue(Constants.LOGTESTLISTENEREVENTS+\"true\"); // #31885", "-                formatterArg.append(\"formatter=\");", "+                formatterArg.append(Constants.FORMATTER);", "-        cmd.createArgument().setValue(\"crashfile=\"", "+        cmd.createArgument().setValue(Constants.CRASHFILE", "-        cmd.createArgument().setValue(\"propsfile=\"", "+        cmd.createArgument().setValue(Constants.PROPSFILE", "-            } else if (!\"terminated successfully\".equals(vmCrashString)) {", "+            } else if (!Constants.TERMINATED_SUCCESSFULLY.equals(vmCrashString)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3b3cf0d45b460e625832c7c351ac40a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/DirectoryScannerTest.java", "commitBeforeChange": "cf850ea7b4cb5efb50408e3b005c5b4acc731467", "commitAfterChange": "56e9d4dcd5f5a5a8f21725c2106a91217e7e4d37", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "      public void testSetFollowLinks()", "signatureAfterChange": "      public void testSetFollowLinks() throws IOException", "diff": ["-    public void testSetFollowLinks() {", "+    public void testSetFollowLinks() throws IOException {", "+            if (JavaEnvUtils.isKaffe()) {", "+                System.err.println(\"link exists pre-test? \" + linkFile.exists());", "+            }", "+            ", "+            if (JavaEnvUtils.isKaffe()) {", "+                System.err.println(\"link exists after exec? \" + linkFile.exists());", "+                System.err.println(\"Ant knows it is a link? \" + FileUtils.getFileUtils().isSymbolicLink(dir, \"ThisIsALink\"));", "+            }", "+", "+            if (JavaEnvUtils.isKaffe()) {", "+                System.err.println(\"link exists pre-delete? \" + linkFile.exists());", "+            }", "+            if (JavaEnvUtils.isKaffe()) {", "+                System.err.println(\"link exists post-delete? \" + linkFile.exists());", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e942739a63d0f56b759116a47d83a41b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Length.java", "commitBeforeChange": "60a709d594d002a017dddb2d2cd9c141f250de94", "commitAfterChange": "4122b8a95fe61f58e29b2ddcf1c8ee39ccd0a4f6", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private void handleFilesets(Handler h)", "signatureAfterChange": "      private void handleFilesets(Handler h)", "diff": ["-        HashSet included = new HashSet(filesets.size() * 10);", "+        HashSet included = new HashSet(filesets.size());", "-            File basedir = fs.getDir(getProject());", "-                File file = FileUtils.getFileUtils().resolveFile(basedir, f[j]);", "-                if (included.add(file)) {", "-                    h.handle(file);", "+                Resource r = ds.getResource(f[j]);", "+                if (!r.isExists()) {", "+                    log(r.getName() + \" does not exist\", Project.MSG_ERR);", "+                } else if (r.isDirectory()) {", "+                    log(r.getName() + \" is a directory; length unspecified\",", "+                        Project.MSG_ERR);", "+                } else {", "+                    //clone the Resource and alter path", "+                    File basedir = ds.getBasedir();", "+                    if (basedir != null) {", "+                        r = (Resource) (r.clone());", "+                        r.setName(FileUtils.getFileUtils().resolveFile(", "+                            basedir, r.getName()).getAbsolutePath());", "+                    }", "+                    if (included.add(r.getName())) {", "+                        h.handle(r);", "+                    }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea96c5119a977dcf834750795cbb423d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java", "commitBeforeChange": "0cb9c2b221a6e5e3f9b0f78bb4d9938413fa5a9b", "commitAfterChange": "753b60552e421fb66edf28e0cc458666cbe63181", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected Commandline setupJavacCommand()", "signatureAfterChange": "     protected Commandline setupJavacCommand()", "diff": ["+", "+        // as well as \"bootclasspath\" and \"extdirs\"", "-            cmd.createArgument().setValue(classpath.toString() ", "-                                          + File.pathSeparator ", "-                                          + src.toString());", "+            Path cp = new Path(project);", "+            /*", "+             * XXX - This doesn't mix very well with build.systemclasspath,", "+             */", "+            if (bootclasspath != null) {", "+                cp.append(bootclasspath);", "+            }", "+            if (extdirs != null) {", "+                addExtdirsToClasspath(cp);", "+            }", "+            cp.append(classpath);", "+            cp.append(src);", "+            cmd.createArgument().setPath(cp);", "+            if (bootclasspath != null", "+                && !Project.getJavaVersion().startsWith(\"1.1\")) {", "+                cmd.createArgument().setValue(\"-bootclasspath\");", "+                cmd.createArgument().setPath(bootclasspath);", "+            }", "+            if (extdirs != null) {", "+                cmd.createArgument().setValue(\"-extdirs\");", "+                cmd.createArgument().setPath(extdirs);", "+            }", "+", "-        }", "-        if (bootclasspath != null) {", "-            cmd.createArgument().setValue(\"-bootclasspath\");", "-            cmd.createArgument().setPath(bootclasspath);", "-        }", "-        if (extdirs != null) {", "-            cmd.createArgument().setValue(\"-extdirs\");", "-            cmd.createArgument().setPath(extdirs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f08ed15fd8130f1653663982b84ba002", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/launch/Launcher.java", "commitBeforeChange": "4848c4503153606ff29c6a0548ec094eec904091", "commitAfterChange": "6e72d89be84e4a3b021e1d59f14a97d2f4959adc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private int run(String[] args)             throws LaunchException, MalformedURLException", "signatureAfterChange": "     private int run(String[] args)             throws LaunchException, MalformedURLException", "diff": ["-            System.setProperty(ANTHOME_PROPERTY, antHome.getAbsolutePath());", "+            setProperty(ANTHOME_PROPERTY, antHome.getAbsolutePath());", "-                + \"ant could not be located\");", "+                + \"ant could not be located (estimated value=\"+antHome.getAbsolutePath()+\")\");", "+            } else if (args[i].equals(\"--launchdiag\")) {", "+                launchDiag = true;", "+", "+        logPath(\"Launcher JAR\",sourceJar);", "+        logPath(\"Launcher JAR directory\", sourceJar.getParentFile());", "+        logPath(\"java.home\", new File(System.getProperty(\"java.home\")));", "+        File toolsJAR = Locator.getToolsJar();", "+        logPath(\"tools.jar\",toolsJAR);", "-            libURLs, userURLs, systemURLs, Locator.getToolsJar());", "+            libURLs, userURLs, systemURLs, toolsJAR);", "-        System.setProperty(JAVA_CLASS_PATH, baseClassPath.toString());", "+        setProperty(JAVA_CLASS_PATH, baseClassPath.toString());", "+        Throwable thrown=null;", "-            exitCode = EXIT_CODE_ERROR;", "+            thrown = ex;", "+        } catch (ClassNotFoundException cnfe) {", "+            System.err.println(", "+                    \"Failed to locate\" + mainClassname);", "+            thrown = cnfe;", "+            thrown=t;", "+        }", "+        if(thrown!=null) {", "+            System.err.println(ANTHOME_PROPERTY+\": \"+antHome.getAbsolutePath());", "+            System.err.println(\"Classpath: \" + baseClassPath.toString());", "+            System.err.println(\"Launcher JAR: \" + sourceJar.getAbsolutePath());", "+            System.err.println(\"Launcher Directory: \" + jarDir.getAbsolutePath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1cbe50fd8963aeb61ba7dc7d51a5b65", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/taskdefs/javacc/JavaCC.java", "commitBeforeChange": "7513ab1efa12321b3e2014764bfb23d16b425caf", "commitAfterChange": "299ea801bc1031e308bfe07a22e51edd1b972872", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 23, "signatureBeforeChange": "      public void execute()         throws TaskException", "signatureAfterChange": "      public void execute()         throws TaskException", "diff": ["-", "-        // load command line with optional attributes", "-        Enumeration iter = optionalAttrs.keys();", "-        while( iter.hasMoreElements() )", "-        {", "-            String name = (String)iter.nextElement();", "-            Object value = optionalAttrs.get( name );", "-            cmdl.addArgument( \"-\" + name + \":\" + value.toString() );", "-        }", "-", "-            outputDirectory = new File( target.getParent() );", "+            outputDirectory = target.getParentFile();", "-        else if( !outputDirectory.isDirectory() )", "+        if( !outputDirectory.isDirectory() )", "-        cmdl.addArgument( \"-OUTPUT_DIRECTORY:\" + outputDirectory.getAbsolutePath() );", "+", "+        if( javaccHome == null || !javaccHome.isDirectory() )", "+        {", "+            throw new TaskException( \"Javacchome not set.\" );", "+        }", "-        cmdl.addArgument( target.getAbsolutePath() );", "-        if( javaccHome == null || !javaccHome.isDirectory() )", "+        ExecuteJava exe = new ExecuteJava();", "+        exe.setClassName( \"COM.sun.labs.javacc.Main\" );", "+", "+        // load command line with optional attributes", "+        Enumeration iter = optionalAttrs.keys();", "+        while( iter.hasMoreElements() )", "-            throw new TaskException( \"Javacchome not set.\" );", "+            String name = (String)iter.nextElement();", "+            Object value = optionalAttrs.get( name );", "+            exe.getArguments().addArgument( \"-\" + name + \":\" + value.toString() );", "-        final Path classpath = cmdl.createClasspath();", "+", "+        exe.getArguments().addArgument( \"-OUTPUT_DIRECTORY:\" + outputDirectory.getAbsolutePath() );", "+", "+        exe.getArguments().addArgument( target );", "+", "+        final Path classpath = exe.getClassPath();", "-        cmdl.addVmArgument( \"-mx140M\" );", "-        cmdl.addVmArgument( \"-Dinstall.root=\" + javaccHome.getAbsolutePath() );", "+        exe.setMaxMemory( \"140M\" );", "+        exe.getSysProperties().addVariable( \"install.root\", javaccHome.getAbsolutePath() );", "-        runCommand( cmdl );", "-    }", "+        exe.executeForked( getContext() );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3b0d87daf8ae141799ddbe6225d1eb6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "dad211c19fbf676be2462650e380439c0cae4982", "commitAfterChange": "91ee1ced95e8b60187ccaaa4f032015605c26e07", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void processArgs(String[] args)", "signatureAfterChange": "     private void processArgs(String[] args)", "diff": ["+        //this is hte list of lu", "+        HashMap launchCommands =new HashMap();", "+        launchCommands.put(\"-lib\",\"\");", "+        launchCommands.put(\"-cp\", \"\");", "+        launchCommands.put(\"-noclasspath\", \"\");", "+        launchCommands.put(\"--noclasspath\", \"\");", "+        launchCommands.put(\"-nouserlib\", \"\");", "+        launchCommands.put(\"--nouserlib\", \"\");", "+        launchCommands.put(\"-main\", \"\");", "-            } else if (arg.equals(\"-cp\") || arg.equals(\"-lib\")) {", "+            } else if (launchCommands.get(arg)!=null) {", "-                System.out.println(msg);", "+                System.err.println(msg);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f52c97475ae411b1d2c95b67588cc143", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/taskdefs/JavacTest.java", "commitBeforeChange": "8585c04348f7bcd37e4352c604723d74c3a43c95", "commitAfterChange": "44f90427922f1fb3ca8677e8b290268e7eb1df9d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void testCompilerAdapter()", "signatureAfterChange": "      public void testCompilerAdapter()", "diff": ["-        javac.setCompiler(\"javac1.1\");", "+        if (JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1) ", "+            || JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_2) ", "+            || JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_3)) {", "+            javac.setCompiler(\"javac1.1\");", "+        } else {", "+            javac.setCompiler(\"javac1.4\");", "+        }", "+", "-        assertTrue(adapter instanceof Javac12);", "+", "+        if (JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1) ", "+            || JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_2) ", "+            || JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_3)) {", "+            assertTrue(adapter instanceof Javac12);", "+        } else {", "+            assertTrue(adapter instanceof Javac13);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f66339c1451bd870243ec10570b5b115", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "0c2d03d031ecacd79ea8d77cd88b8428e84a3c7c", "commitAfterChange": "44ecc125fa2df70025e742ba113dd793c0e27580", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "      private static void transferFormatters(JUnitTestRunner runner,                                            JUnitTest test)", "signatureAfterChange": "      private static void transferFormatters(JUnitTestRunner runner,                                            JUnitTest test)", "diff": ["+        runner.addFormatter(new JUnitResultFormatter() {", "+", "+            public void startTestSuite(JUnitTest suite) throws BuildException {", "+            }", "+", "+            public void endTestSuite(JUnitTest suite) throws BuildException {", "+            }", "+", "+            public void setOutput(OutputStream out) {", "+            }", "+", "+            public void setSystemOutput(String out) {", "+            }", "+", "+            public void setSystemError(String err) {", "+            }", "+", "+            public void addError(Test arg0, Throwable arg1) {", "+            }", "+", "+            public void addFailure(Test arg0, AssertionFailedError arg1) {", "+            }", "+", "+            public void endTest(Test arg0) {", "+            }", "+", "+            public void startTest(Test arg0) {", "+                System.out.println(this.getClass().getName() + \":\" + arg0);", "+                registerTestCase(JUnitVersionHelper.getTestCaseName(arg0));", "+            }", "+        });"]}]}
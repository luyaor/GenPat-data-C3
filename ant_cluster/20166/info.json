{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "80cef363a3da05494180002d87d35826", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d956c9375e583857833caddfd92334a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/taskdefs/ExecuteOnTest.java", "commitBeforeChange": "3732eb195b3d24d6480a2d7edb2818b325a3e199", "commitAfterChange": "b0507d4451b72856ddca45183143a96493e8ef3e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public void testRedirect4()", "signatureAfterChange": "      public void testRedirect4() throws IOException", "diff": ["-    public void testRedirect4() {", "+    public void testRedirect4() throws IOException {", "-        String actualOut = null;", "-        String actualErr = null;", "-        try {", "-            actualOut = FileUtils.newFileUtils().readFully(new FileReader(", "-                getProject().resolveFile(\"redirect.out\")));", "-            actualErr = FileUtils.newFileUtils().readFully(new FileReader(", "-                getProject().resolveFile(\"redirect.err\")));", "-        } catch (IOException eyeOhEx) {", "-        }", "+        String actualOut = getFileString(\"redirect.out\");", "+        String actualErr = getFileString(\"redirect.err\");", "+", "-        assertFalse(\"xout < 0\", xout < 0);", "-        assertFalse(\"yout < 0\", yout < 0);", "-        assertFalse(\"zout < 0\", zout < 0);", "-        assertFalse(\"xerr < 0\", xerr < 0);", "-        assertFalse(\"yerr < 0\", yerr < 0);", "-        assertFalse(\"zerr < 0\", zerr < 0);", "+        assertFalse(\"xout=\" + xout, xout < 0);", "+        assertFalse(\"yout=\" + yout, yout < 0);", "+        assertFalse(\"zout=\" + zout, zout < 0);", "+        assertFalse(\"xerr=\" + xerr, xerr < 0);", "+        assertFalse(\"yerr=\" + yerr, yerr < 0);", "+        assertFalse(\"zerr=\" + zerr, zerr < 0);", "-        assertPropertyEquals(\"redirect.out\", x + \" out\");", "-        assertPropertyEquals(\"redirect.err\", x + \" err\");", "+", "+        String outProperty = getProject().getProperty(\"redirect.out\");", "+        int pxout = outProperty.indexOf(x + \" out\");", "+        int pyout = outProperty.indexOf(y + \" out\");", "+        int pzout = outProperty.indexOf(z + \" out\");", "+        assertFalse(\"pxout=\" + pxout, pxout < 0);", "+        assertFalse(\"pyout=\" + pyout, pyout < 0);", "+        assertFalse(\"pzout=\" + pzout, pzout < 0);", "+        assertFalse(\"pyout < pxout\", pyout < pxout);", "+        assertFalse(\"pzout < pyout\", pzout < pyout);", "+", "+        String errorProperty = getProject().getProperty(\"redirect.err\");", "+        int pxerr = errorProperty.indexOf(x + \" err\");", "+        int pyerr = errorProperty.indexOf(y + \" err\");", "+        int pzerr = errorProperty.indexOf(z + \" err\");", "+        assertFalse(\"pxerr=\" + pxerr, pxerr < 0);", "+        assertFalse(\"pyerr=\" + pyerr, pyerr < 0);", "+        assertFalse(\"pzerr=\" + pzerr, pzerr < 0);", "+        assertFalse(\"pyerr < pxerr\", pyerr < pxerr);", "+        assertFalse(\"pzerr < pyerr\", pzerr < pyerr);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8641423aa5d94201b776e4df7e3616d5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/taskdefs/ExecuteOnTest.java", "commitBeforeChange": "3732eb195b3d24d6480a2d7edb2818b325a3e199", "commitAfterChange": "b0507d4451b72856ddca45183143a96493e8ef3e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void testRedirect3()", "signatureAfterChange": "      public void testRedirect3() throws IOException", "diff": ["-    public void testRedirect3() {", "+    public void testRedirect3() throws IOException {", "-        String actualOut = null;", "-        try {", "-            actualOut = FileUtils.newFileUtils().readFully(new FileReader(", "-                getProject().resolveFile(\"redirect.out\")));", "-        } catch (IOException eyeOhEx) {", "-        }", "+        String actualOut = getFileString(\"redirect.out\");", "+", "-        assertFalse(\"xout < 0\", xout < 0);", "-        assertFalse(\"yout < 0\", yout < 0);", "-        assertFalse(\"zout < 0\", zout < 0);", "-        assertFalse(\"xerr < 0\", xerr < 0);", "-        assertFalse(\"yerr < 0\", yerr < 0);", "-        assertFalse(\"zerr < 0\", zerr < 0);", "+        assertFalse(\"xout=\" + xout, xout < 0);", "+        assertFalse(\"yout=\" + yout, yout < 0);", "+        assertFalse(\"zout=\" + zout, zout < 0);", "+        assertFalse(\"xerr=\" + xerr, xerr < 0);", "+        assertFalse(\"yerr=\" + yerr, yerr < 0);", "+        assertFalse(\"zerr=\" + zerr, zerr < 0);", "-        assertPropertyEquals(\"redirect.out\", x + \" out\");", "+", "+        String outProperty = getProject().getProperty(\"redirect.out\");", "+        int pxout = outProperty.indexOf(x + \" out\");", "+        int pyout = outProperty.indexOf(y + \" out\");", "+        int pzout = outProperty.indexOf(z + \" out\");", "+        assertFalse(\"pxout=\" + pxout, pxout < 0);", "+        assertFalse(\"pyout=\" + pyout, pyout < 0);", "+        assertFalse(\"pzout=\" + pzout, pzout < 0);", "+        assertFalse(\"pyout < pxout\", pyout < pxout);", "+        assertFalse(\"pzout < pyout\", pzout < pyout);"]}]}
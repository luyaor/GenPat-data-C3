{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "836226d81f8fb94fee5a7de740446696", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fcd49bce0527e34bbad926e6e62498a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/FixCRLF.java", "commitBeforeChange": "af7fb0127af235ba48a1e9ada6f7fc45847e53fa", "commitAfterChange": "a794b2b204995a03c2e3c117ff2c4749710e6840", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            \" cr=\" + (addcr==1 ? \"add\" : addcr==0 ? \"asis\" : \"remove\") +", "-            \" tab=\" + (addtab==1 ? \"add\" : addtab==0 ? \"asis\" : \"remove\") +", "-            \" eof=\" + (ctrlz==1 ? \"add\" : ctrlz==0 ? \"asis\" : \"remove\") +", "+            \" eol=\" +", "+\t    (eol==ASIS ? \"asis\" : eol==CR ? \"cr\" : eol==LF ? \"lf\" : \"crlf\") +", "+            \" tab=\" + (tabs==TABS ? \"add\" : tabs==ASIS ? \"asis\" : \"remove\") +", "+            \" eof=\" + (ctrlz==ADD ? \"add\" : ctrlz==ASIS ? \"asis\" : \"remove\") +", "-            File srcFile = new File(srcDir, files[i]);", "+\t    processFile(files[i]);", "+        }", "+    }", "-            // read the contents of the file", "-            int count = (int)srcFile.length();", "-            byte indata[] = new byte[count];", "-                FileInputStream inStream = new FileInputStream(srcFile);", "-                inStream.read(indata);", "-                inStream.close();", "-            // count the number of cr, lf,  and tab characters", "-            int cr = 0;", "-            int lf = 0;", "-            int tab = 0;", "-", "-            for (int k=0; k<count; k++) {", "-                byte c = indata[k];", "-                if (c == '\\r') cr++;", "-                if (c == '\\n') lf++;", "-                if (c == '\\t') tab++;", "-            }", "-", "-            // check for trailing eof", "-            boolean eof = ((count>0) && (indata[count-1] == 0x1A));", "-", "-            // log stats (before fixes)", "-            log(srcFile + \": size=\" + count + \" cr=\" + cr +", "-                        \" lf=\" + lf + \" tab=\" + tab + \" eof=\" + eof,", "-                        Project.MSG_VERBOSE);", "-", "-            // determine the output buffer size (slightly pessimisticly)", "-            int outsize = count;", "-            if (addcr  !=  0) outsize-=cr;", "-            if (addcr  == +1) outsize+=lf;", "-            if (addtab == -1) outsize+=tab*(tablength-1);", "-            if (ctrlz  == +1) outsize+=1;", "-", "-            // copy the data", "-            byte outdata[] = new byte[outsize];", "-            int o = 0;    // output offset", "-            int line = o; // beginning of line", "-            int col = 0;  // desired column", "-", "-            for (int k=0; k<count; k++) {", "-                switch (indata[k]) {", "-                    case (byte)' ':", "-                        // advance column", "-                        if (addtab == 0) outdata[o++]=(byte)' ';", "-                        col++;", "-                        break;", "-", "-                    case (byte)'\\t':", "-                        if (addtab == 0) {", "-                            // treat like any other character", "-                            outdata[o++]=(byte)'\\t';", "-                            col++;", "-                        } else {", "-                            // advance column to next tab stop", "-                            col = (col|(tablength-1))+1;", "-                        }", "-                        break;", "-", "-                    case (byte)'\\r':", "-                        if (addcr == 0) {", "-                            // treat like any other character", "-                            outdata[o++]=(byte)'\\r';", "-                            col++;", "-                        }", "-                        break;", "-", "-                    case (byte)'\\n':", "-                        // start a new line (optional CR followed by LF)", "-                        if (addcr == +1) outdata[o++]=(byte)'\\r';", "-                        outdata[o++]=(byte)'\\n';", "-                        line=o;", "-                        col=0;", "-                        break;", "-", "-                    default:", "-                        // add tabs if two or more spaces are required", "-                        if (addtab>0 && o+1<line+col) {", "-                            // determine logical column", "-                            int diff=o-line;", "-", "-                            // add tabs until this column would be passed", "-                            // note: the start of line is adjusted to match", "-                            while ((diff|(tablength-1))<col) {", "-                                outdata[o++]=(byte)'\\t';", "-                                line-=(tablength-1)-(diff&(tablength-1));", "-                                diff=o-line;", "-                            };", "-                        };", "-", "-                        // space out to desired column", "-                        while (o<line+col) outdata[o++]=(byte)' ';", "-", "-                        // append desired character", "-                        outdata[o++]=indata[k];", "-                        col++;", "-            }", "-            // add or remove an eof character as required", "-            if (ctrlz == +1) {", "-                if (outdata[o-1]!=0x1A) outdata[o++]=0x1A;", "-            } else if (ctrlz == -1) {", "-                if (o>2 && outdata[o-1]==0x0A && outdata[o-2]==0x1A) o--;", "-                if (o>1 && outdata[o-1]==0x1A) o--;", "-            }", "-            // output the data", "-            try {", "-                // Determine whether it should be written,", "-                // that is if it is different than the potentially already existing file", "-                boolean write = false;", "-                byte[] existingdata = indata;", "-                File destFile = srcFile;", "-                if (destDir != null) {", "-                    destFile = new File(destDir, files[i]);", "-                    if(destFile.isFile()) {", "-                        int len = (int)destFile.length();", "-                        if(len != o) {", "-                            write = true;", "-                        } else {", "-                            existingdata = new byte[len];", "-                                FileInputStream in = new FileInputStream(destFile);", "-                                in.read(existingdata);", "-                                in.close();", "-                        }", "-                    } else {", "-                        write = true;", "-                    }", "-                }", "-                if(!write) {", "-                    if(existingdata.length != o) {", "-                        write = true;", "-                    } else {", "-                        for(int j = 0; j < o; ++j) {", "-                            if(existingdata[j] != outdata[j]) {", "-                                write = true;", "-                                break;", "-                            }", "-                        }", "-                    }", "-", "-                if(write) {", "-                    log(destFile + \" is being written\", Project.MSG_VERBOSE);", "-                    FileOutputStream outStream = new FileOutputStream(destFile);", "-                    outStream.write(outdata,0,o);", "-                    outStream.close();", "-                } else {", "-                    log(destFile + \" is not written, as the contents are identical\",", "-                        Project.MSG_VERBOSE);", "-                }", "-        } /* end for */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "835f785c3a3e9b366646e9296fec0f43", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/DependSet.java", "commitBeforeChange": "3fd5d9ba323b0d4cf83368085be5c9103d97f7f5", "commitAfterChange": "d8a41c88bee05a818356bf6f4f16f31ccc43940e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-", "-        if ((sourceFileSets.size() == 0) && (sourceFileLists.size() == 0)) {", "-          throw new BuildException(\"At least one <srcfileset> or <srcfilelist>\"", "-                                   + \" element must be set\");", "+        if (sources == null) {", "+          throw new BuildException(", "+              \"At least one set of source resources must be specified\");", "-        if ((targetFileSets.size() == 0) && (targetFileLists.size() == 0)) {", "-          throw new BuildException(\"At least one <targetfileset> or\"", "-                                   + \" <targetfilelist> element must be set\");", "+        if (targets == null) {", "+          throw new BuildException(", "+              \"At least one set of target files must be specified\");", "-        long now = (new Date()).getTime();", "-        /*", "-          We have to munge the time to allow for the filesystem time", "-          granularity.", "-        */", "-        now += FILE_UTILS.getFileTimestampGranularity();", "-", "-        // Grab all the target files specified via filesets:", "-        Vector allTargets = new Vector();", "-        long oldestTargetTime = 0;", "-        File oldestTarget = null;", "-        Enumeration enumTargetSets = targetFileSets.elements();", "-        while (enumTargetSets.hasMoreElements()) {", "-", "-           FileSet targetFS          = (FileSet) enumTargetSets.nextElement();", "-           if (!targetFS.getDir(getProject()).exists()) {", "-               // this is the same as if it was empty, no target files found", "-               continue;", "-           }", "-           DirectoryScanner targetDS = targetFS.getDirectoryScanner(getProject());", "-           String[] targetFiles      = targetDS.getIncludedFiles();", "-", "-           for (int i = 0; i < targetFiles.length; i++) {", "-", "-              File dest = new File(targetFS.getDir(getProject()), targetFiles[i]);", "-              allTargets.addElement(dest);", "-", "-              if (dest.lastModified() > now) {", "-                 log(\"Warning: \" + targetFiles[i] + \" modified in the future.\",", "-                     Project.MSG_WARN);", "-              }", "-              if (oldestTarget == null", "-                || dest.lastModified() < oldestTargetTime) {", "-                  oldestTargetTime = dest.lastModified();", "-                  oldestTarget = dest;", "-              }", "-           }", "+        //no sources = nothing to compare; no targets = nothing to delete:", "+        if (sources.size() > 0 && targets.size() > 0 && !uptodate(sources, targets)) {", "+           log(\"Deleting all target files.\", Project.MSG_VERBOSE);", "+           Delete delete = new Delete();", "+           delete.bindToOwner(this);", "+           delete.add(targets);", "+           delete.perform();", "-        // Grab all the target files specified via filelists:", "-        boolean upToDate = true;", "-        Enumeration enumTargetLists = targetFileLists.elements();", "-        while (enumTargetLists.hasMoreElements()) {", "+    }", "-           FileList targetFL    = (FileList) enumTargetLists.nextElement();", "-           String[] targetFiles = targetFL.getFiles(getProject());", "-           for (int i = 0; i < targetFiles.length; i++) {", "-", "-              File dest = new File(targetFL.getDir(getProject()), targetFiles[i]);", "-              if (!dest.exists()) {", "-                 log(targetFiles[i] + \" does not exist.\", Project.MSG_VERBOSE);", "-                 upToDate = false;", "-                 continue;", "-              } else {", "-                 allTargets.addElement(dest);", "-              }", "-              if (dest.lastModified() > now) {", "-                 log(\"Warning: \" + targetFiles[i] + \" modified in the future.\",", "-                     Project.MSG_WARN);", "-              }", "-              if (oldestTarget == null", "-                  || dest.lastModified() < oldestTargetTime) {", "-                  oldestTargetTime = dest.lastModified();", "-                  oldestTarget = dest;", "-              }", "-           }", "-        if (oldestTarget != null) {", "-            log(oldestTarget + \" is oldest target file\", Project.MSG_VERBOSE);", "-        } else {", "-            // no target files, then we cannot remove any target files and", "-            // skip the following tests right away", "-            upToDate = false;", "-        // Check targets vs source files specified via filelists:", "-        if (upToDate) {", "-           Enumeration enumSourceLists = sourceFileLists.elements();", "-           while (upToDate && enumSourceLists.hasMoreElements()) {", "-              FileList sourceFL    = (FileList) enumSourceLists.nextElement();", "-              String[] sourceFiles = sourceFL.getFiles(getProject());", "-", "-              for (int i = 0; upToDate && i < sourceFiles.length; i++) {", "-                 File src = new File(sourceFL.getDir(getProject()), sourceFiles[i]);", "-", "-                 if (src.lastModified() > now) {", "-                    log(\"Warning: \" + sourceFiles[i]", "-                        + \" modified in the future.\", Project.MSG_WARN);", "-                 }", "-                 if (!src.exists()) {", "-                    log(sourceFiles[i] + \" does not exist.\",", "-                        Project.MSG_VERBOSE);", "-                    upToDate = false;", "-                    break;", "-                 }", "-                 if (src.lastModified() > oldestTargetTime) {", "-                    upToDate = false;", "-                    log(oldestTarget + \" is out of date with respect to \"", "-                        + sourceFiles[i], Project.MSG_VERBOSE);", "-                 }", "-              }", "-           }", "-        }", "-        // Check targets vs source files specified via filesets:", "-        if (upToDate) {", "-           Enumeration enumSourceSets = sourceFileSets.elements();", "-           while (upToDate && enumSourceSets.hasMoreElements()) {", "-", "-              FileSet sourceFS          = (FileSet) enumSourceSets.nextElement();", "-              DirectoryScanner sourceDS = sourceFS.getDirectoryScanner(getProject());", "-              String[] sourceFiles      = sourceDS.getIncludedFiles();", "-", "-              for (int i = 0; upToDate && i < sourceFiles.length; i++) {", "-                 File src = new File(sourceFS.getDir(getProject()), sourceFiles[i]);", "-", "-                 if (src.lastModified() > now) {", "-                    log(\"Warning: \" + sourceFiles[i]", "-                        + \" modified in the future.\", Project.MSG_WARN);", "-                 }", "-                 if (src.lastModified() > oldestTargetTime) {", "-                    upToDate = false;", "-                    log(oldestTarget + \" is out of date with respect to \"", "-                        + sourceFiles[i], Project.MSG_VERBOSE);", "-                 }", "-              }", "-           }", "-        }", "-        if (!upToDate) {", "-           log(\"Deleting all target files. \", Project.MSG_VERBOSE);", "-           for (Enumeration e = allTargets.elements(); e.hasMoreElements();) {", "-              File fileToRemove = (File) e.nextElement();", "-              log(\"Deleting file \" + fileToRemove.getAbsolutePath(),", "-                  Project.MSG_VERBOSE);", "-              fileToRemove.delete();", "-           }"]}]}
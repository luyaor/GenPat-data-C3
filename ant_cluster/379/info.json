{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "121b2e99a90a681ff1f048f54c7b23d9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cc2f81eb3164fed175d674feec6dfc0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/metamata/MAuditStreamHandler.java", "commitBeforeChange": "4a63f3b33824d1af6537636e50dc9f0bf73221aa", "commitAfterChange": "0380eac20a5d2f2fef36091bc8a51135eb916c27", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "     protected void processLine( String line )", "signatureAfterChange": "      private ArrayList getGroups( final String line )", "diff": ["-    // There will obviouslly be a problem if the message is on several lines...", "-    protected void processLine( String line )", "-        ArrayList matches = matcher.getGroups( line );", "-            String file = (String)matches.get( 1 );", "-            int lineNum = Integer.parseInt( (String)matches.get( 2 ) );", "-            String msg = (String)matches.get( 3 );", "-            addViolationEntry( file, MAudit.createViolation( lineNum, msg ) );", "-            task.getLogger().info( line );", "+    private ArrayList getGroups( final String line )", "+    {", "+        try", "+        {", "+            return m_matcher.getGroups( line );", "+        }", "+        catch( final TaskException te )", "+        {", "+            getLogger().error( \"Failed to process matcher\", te );", "+            return new ArrayList();", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37bdf26f7b0ae023532cd28984cad762", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/metamata/MAuditStreamHandler.java", "commitBeforeChange": "4a63f3b33824d1af6537636e50dc9f0bf73221aa", "commitAfterChange": "0380eac20a5d2f2fef36091bc8a51135eb916c27", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "     protected void processLine( String line )", "signatureAfterChange": "      private ArrayList getGroups( final String line )", "diff": ["-    // There will obviouslly be a problem if the message is on several lines...", "-    protected void processLine( String line )", "-        ArrayList matches = matcher.getGroups( line );", "-            String file = (String)matches.get( 1 );", "-            int lineNum = Integer.parseInt( (String)matches.get( 2 ) );", "-            String msg = (String)matches.get( 3 );", "-            addViolationEntry( file, MAudit.createViolation( lineNum, msg ) );", "-            task.getLogger().info( line );", "+    private ArrayList getGroups( final String line )", "+    {", "+        try", "+        {", "+            return m_matcher.getGroups( line );", "+        }", "+        catch( final TaskException te )", "+        {", "+            getLogger().error( \"Failed to process matcher\", te );", "+            return new ArrayList();", "+        }", "+    }"]}]}
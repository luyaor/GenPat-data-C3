{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d7af14100ee2c51840aeaba2bc75c281", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f170e22c0d9fef9040984e125aba5076", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "4bdc90bd5ea371107ce5f4fbe0939557e1f5aaa9", "commitAfterChange": "2270580b7724fb28e357cd2ea4da561778bc8fa8", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "     protected void runStatements(Reader reader, PrintStream out)         throws SQLException, IOException", "signatureAfterChange": "     protected void runStatements(Reader reader, PrintStream out)          throws SQLException, IOException", "diff": ["-    protected void runStatements(Reader reader, PrintStream out)", "+    protected void runStatements(Reader reader, PrintStream out) ", "-        String sql = \"\";", "+        StringBuffer sql = new StringBuffer();", "-", "+ ", "-", "+ ", "-            line = line.trim();", "-            line = getProject().replaceProperties(line);", "-            if (line.startsWith(\"//\")) {", "-                continue;", "+            if (!keepformat) {", "+                line = line.trim();", "-            if (line.startsWith(\"--\")) {", "-                continue;", "-            }", "-            StringTokenizer st = new StringTokenizer(line);", "-            if (st.hasMoreTokens()) {", "-                String token = st.nextToken();", "-                if (\"REM\".equalsIgnoreCase(token)) {", "+            line = project.replaceProperties(line);", "+            if (!keepformat) {", "+                if (line.startsWith(\"//\")) {", "+                if (line.startsWith(\"--\")) {", "+                    continue;", "+                }", "+                StringTokenizer st = new StringTokenizer(line);", "+                if (st.hasMoreTokens()) {", "+                    String token = st.nextToken();", "+                    if (\"REM\".equalsIgnoreCase(token)) {", "+                        continue;", "+                    }", "+                }", "-", "-            sql += \" \" + line;", "-            sql = sql.trim();", "-", "+            ", "+            if (!keepformat) {", "+                sql.append(\" \" + line);", "+            } else {", "+                sql.append(\"\\n\" + line);", "+            }", "+            ", "-            if (line.indexOf(\"--\") >= 0) {", "-                sql += \"\\n\";", "+            if (!keepformat) {", "+                if (line.indexOf(\"--\") >= 0) {", "+                    sql.append(\"\\n\");", "+                }", "-", "-            if ((delimiterType.equals(DelimiterType.NORMAL)", "-                 && sql.endsWith(delimiter))", "+            if ((delimiterType.equals(DelimiterType.NORMAL) ", "+                 && sql.toString().endsWith(delimiter)) ", "-                (delimiterType.equals(DelimiterType.ROW)", "+                (delimiterType.equals(DelimiterType.ROW) ", "-                execSQL(sql.substring(0, sql.length() - delimiter.length()),", "+                execSQL(sql.substring(0, sql.length() - delimiter.length()), ", "-                sql = \"\";", "+                sql.replace(0, sql.length(), \"\");", "-", "-            execSQL(sql, out);", "+            execSQL(sql.toString(), out);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb7aef379b8cd5567eb66a1a47fa6ec8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "2d446f3df2b49ea07727bbd5b330f45a95024d42", "commitAfterChange": "f152ff3665854eda95df9916a022351da219efac", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "      protected void runStatements(Reader reader, PrintStream out) throws SQLException, IOException", "signatureAfterChange": "      protected void runStatements(Reader reader, PrintStream out)          throws SQLException, IOException", "diff": ["-    protected void runStatements(Reader reader, PrintStream out) throws SQLException, IOException {", "+    protected void runStatements(Reader reader, PrintStream out) ", "+        throws SQLException, IOException {", "-        try{", "-            while ((line=in.readLine()) != null){", "-                line = line.trim();", "-                line = project.replaceProperties(line);", "-                if (line.startsWith(\"//\")) {", "-                  continue;", "-                }", "-                if (line.startsWith(\"--\")) {", "-                  continue;", "-                }", "-                StringTokenizer st = new StringTokenizer(line);", "-                if (st.hasMoreTokens()) {", "-                    String token = st.nextToken();", "-                    if (\"REM\".equalsIgnoreCase(token)) {", "-                        continue;", "-                    }", "-                }", "-", "-                sql += \" \" + line;", "-                sql = sql.trim();", "-", "-                // SQL defines \"--\" as a comment to EOL", "-                // and in Oracle it may contain a hint", "-                // so we cannot just remove it, instead we must end it", "-                if (line.indexOf(\"--\") >= 0) {", "-                  sql += \"\\n\";", "-                }", "-", "-                if (delimiterType.equals(DelimiterType.NORMAL) && sql.endsWith(delimiter) ||", "-                    delimiterType.equals(DelimiterType.ROW) && line.equals(delimiter)) {", "-                    log(\"SQL: \" + sql, Project.MSG_VERBOSE);", "-                    execSQL(sql.substring(0, sql.length() - delimiter.length()), out);", "-                    sql = \"\";", "+        while ((line=in.readLine()) != null){", "+            line = line.trim();", "+            line = project.replaceProperties(line);", "+            if (line.startsWith(\"//\")) {", "+                continue;", "+            }", "+            if (line.startsWith(\"--\")) {", "+                continue;", "+            }", "+            StringTokenizer st = new StringTokenizer(line);", "+            if (st.hasMoreTokens()) {", "+                String token = st.nextToken();", "+                if (\"REM\".equalsIgnoreCase(token)) {", "+                    continue;", "- ", "-            // Catch any statements not followed by ;", "-            if(!sql.equals(\"\")){", "-                execSQL(sql, out);", "+            ", "+            sql += \" \" + line;", "+            sql = sql.trim();", "+            ", "+            // SQL defines \"--\" as a comment to EOL", "+            // and in Oracle it may contain a hint", "+            // so we cannot just remove it, instead we must end it", "+            if (line.indexOf(\"--\") >= 0) {", "+                sql += \"\\n\";", "-        }catch(SQLException e){", "-            throw e;", "+            ", "+            if ((delimiterType.equals(DelimiterType.NORMAL) ", "+                 && sql.endsWith(delimiter)) ", "+                ||", "+                (delimiterType.equals(DelimiterType.ROW) ", "+                 && line.equals(delimiter))) {", "+                log(\"SQL: \" + sql, Project.MSG_VERBOSE);", "+                execSQL(sql.substring(0, sql.length() - delimiter.length()), ", "+                        out);", "+                sql = \"\";", "+            }", "-", "+        ", "+        // Catch any statements not followed by ;", "+        if(!sql.equals(\"\")){", "+            execSQL(sql, out);", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5693e788515bd0f83e33e95f6995a360", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "721aba4eeb3262515f5833edd3924165", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/TaskAdapter.java", "commitBeforeChange": "acde46cee68c4626b161eba35ce5d3ef11778722", "commitAfterChange": "5bdfaab5a1062aebf2a0db2559f4870359d0aac0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void execute()         throws TaskException", "signatureAfterChange": "      public void execute()         throws TaskException", "diff": ["-     */", "-        Method setProjectM = null;", "-            Class c = proxy.getClass();", "-            setProjectM =", "-                c.getMethod( \"setProject\", new Class[]{Project.class} );", "-            if( setProjectM != null )", "+            final Class clazz = m_proxy.getClass();", "+            final Method method = clazz.getMethod( \"execute\", new Class[ 0 ] );", "+            method.invoke( m_proxy, null );", "+        }", "+        catch( final NoSuchMethodException nsme )", "+        {", "+            final String message = \"No public execute() in \" + m_proxy.getClass();", "+            getLogger().error( message );", "+            throw new TaskException( message );", "+        }", "+        catch( final Exception e )", "+        {", "+            Throwable target = e;", "+            if( e instanceof InvocationTargetException )", "-                setProjectM.invoke( proxy, new Object[]{getProject()} );", "+                target = ((InvocationTargetException)e).getTargetException();", "-        }", "-        catch( NoSuchMethodException e )", "-        {", "-            // ignore this if the class being used as a task does not have", "-            // a set project method.", "-        }", "-        catch( Exception ex )", "-        {", "-            final String message = \"Error setting project in \" + proxy.getClass();", "-            getLogger().error( message, ex );", "-            throw new TaskException( \"Error\", ex );", "-        }", "-        Method executeM = null;", "-        try", "-        {", "-            Class c = proxy.getClass();", "-            executeM = c.getMethod( \"execute\", new Class[ 0 ] );", "-            if( executeM == null )", "-            {", "-                getLogger().error( \"No public execute() in \" + proxy.getClass() );", "-                throw new TaskException( \"No public execute() in \" + proxy.getClass() );", "-            }", "-            executeM.invoke( proxy, null );", "-            return;", "+            final String message = \"Error invoking \" + m_proxy.getClass();", "+            getLogger().error( message, target );", "+            throw new TaskException( message, target );", "-        catch( Exception ex )", "-        {", "-            getLogger().error( \"Error in \" + proxy.getClass() );", "-            throw new TaskException( \"Error\", ex );", "-        }", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7aa9ef3137bdce0883d347a97dd535d6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/TaskAdapter.java", "commitBeforeChange": "acde46cee68c4626b161eba35ce5d3ef11778722", "commitAfterChange": "5bdfaab5a1062aebf2a0db2559f4870359d0aac0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void execute()         throws TaskException", "signatureAfterChange": "      public void execute()         throws TaskException", "diff": ["-     */", "-        Method setProjectM = null;", "-            Class c = proxy.getClass();", "-            setProjectM =", "-                c.getMethod( \"setProject\", new Class[]{Project.class} );", "-            if( setProjectM != null )", "+            final Class clazz = m_proxy.getClass();", "+            final Method method = clazz.getMethod( \"execute\", new Class[ 0 ] );", "+            method.invoke( m_proxy, null );", "+        }", "+        catch( final NoSuchMethodException nsme )", "+        {", "+            final String message = \"No public execute() in \" + m_proxy.getClass();", "+            getLogger().error( message );", "+            throw new TaskException( message );", "+        }", "+        catch( final Exception e )", "+        {", "+            Throwable target = e;", "+            if( e instanceof InvocationTargetException )", "-                setProjectM.invoke( proxy, new Object[]{getProject()} );", "+                target = ((InvocationTargetException)e).getTargetException();", "-        }", "-        catch( NoSuchMethodException e )", "-        {", "-            // ignore this if the class being used as a task does not have", "-            // a set project method.", "-        }", "-        catch( Exception ex )", "-        {", "-            final String message = \"Error setting project in \" + proxy.getClass();", "-            getLogger().error( message, ex );", "-            throw new TaskException( \"Error\", ex );", "-        }", "-        Method executeM = null;", "-        try", "-        {", "-            Class c = proxy.getClass();", "-            executeM = c.getMethod( \"execute\", new Class[ 0 ] );", "-            if( executeM == null )", "-            {", "-                getLogger().error( \"No public execute() in \" + proxy.getClass() );", "-                throw new TaskException( \"No public execute() in \" + proxy.getClass() );", "-            }", "-            executeM.invoke( proxy, null );", "-            return;", "+            final String message = \"Error invoking \" + m_proxy.getClass();", "+            getLogger().error( message, target );", "+            throw new TaskException( message, target );", "-        catch( Exception ex )", "-        {", "-            getLogger().error( \"Error in \" + proxy.getClass() );", "-            throw new TaskException( \"Error\", ex );", "-        }", "-"]}]}
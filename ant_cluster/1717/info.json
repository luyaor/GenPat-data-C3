{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0b3dffa67ebb37343176747de7243ef6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d0abd5c4151e115b6a2d4394963d969", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/antlib/src/main/org/apache/tools/ant/taskdefs/Antlib.java", "commitBeforeChange": "1d2784e6d5429505b3b420e342992c22cd5373a6", "commitAfterChange": "6252354506953777f5b921b8746a54e7d317475a", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 31, "signatureBeforeChange": "         public void startElement(String tag, AttributeList attrs)             throws SAXParseException", "signatureAfterChange": "         public void startElement(String tag, AttributeList attrs)             throws SAXParseException", "diff": ["-\t    level ++;", "+            level ++;", "-\t\tif (level > 1) {", "-\t\t    throw new SAXParseException(\"Unexpected element: \" + tag,", "-\t\t\t\t\t\tlocator);", "-\t\t}", "+                if (level > 1) {", "+                    throw new SAXParseException(\"Unexpected element: \" + tag,", "+                                                locator);", "+                }", "-\t    if (level == 1) {", "-\t\tthrow new SAXParseException(\"Missing antlib root element\",", "-\t\t\t\t\t    locator);", "-\t    }", "+            if (level == 1) {", "+                throw new SAXParseException(\"Missing antlib root element\",", "+                                            locator);", "+            }", "-\t    // Must have the two attributes declared", "-\t    parseAttributes(tag, attrs);", "+            // Must have the two attributes declared", "+            parseAttributes(tag, attrs);", "-\t    try {", "-\t\tif (\"role\".equals(tag)) {", "-\t\t    if (isRoleInUse(name)) {", "-\t\t\tString msg = \"Cannot override role: \" + name;", "-\t\t\tlog(msg, Project.MSG_WARN);", "-\t\t\treturn;\t\t\t", "-\t\t    }", "-\t\t    // Defining a new role", "-\t\t    symbols.addRole(name, loadClass(className),", "-\t\t\t\t    (adapter == null? ", "-\t\t\t\t     null : loadClass(adapter))); ", "-\t\t    return;", "-\t\t}", "+            try {", "+                if (\"role\".equals(tag)) {", "+                    if (project.isRoleDefined(name)) {", "+                        String msg = \"Cannot override role: \" + name;", "+                        log(msg, Project.MSG_WARN);", "+                        return;", "+                    }", "+                    // Defining a new role", "+                    Class clz = loadClass(className);", "+                    if (clz != null) {", "+                        project.addRoleDefinition(name, clz,", "+                                                  (adapter == null? null :", "+                                                   loadClass(adapter)));", "+                    }", "+                    return;", "+                }", "-\t\t// Defining a new element kind", "-\t\t//check for name alias", "-\t\tString alias = aliasMap.getProperty(name);", "-\t\tif (alias != null) {", "-\t\t    name = alias;", "-\t\t}", "-\t\t//catch an attempted override of an existing name", "-\t\tif (!override && isInUse(tag, name)) {", "-\t\t    String msg = \"Cannot override \" + tag + \": \" + name;", "-\t\t    log(msg, Project.MSG_WARN);", "-\t\t    return;", "-\t\t}", "-\t\tsymbols.add(tag, name, loadClass(className));", "-\t    }", "-\t    catch(BuildException be) {", "-\t\tthrow new SAXParseException(be.getMessage(), locator, be);", "-\t    }", "+                // Defining a new element kind", "+                //check for name alias", "+                String alias = aliasMap.getProperty(name);", "+                if (alias != null) {", "+                    name = alias;", "+                }", "+                //catch an attempted override of an existing name", "+                if (!override && project.isDefinedOnRole(tag, name)) {", "+                    String msg = \"Cannot override \" + tag + \": \" + name;", "+                    log(msg, Project.MSG_WARN);", "+                    return;", "+                }", "+                Class clz = loadClass(className);", "+                if (clz != null)", "+                    project.addDefinitionOnRole(tag, name, clz);", "+            }", "+            catch(BuildException be) {", "+                switch (onerror.getIndex()) {", "+                case FAIL:", "+                    throw new SAXParseException(be.getMessage(), locator, be);", "+                case REPORT:", "+                    project.log(be.getMessage(), project.MSG_WARN);", "+                    break;", "+                default:", "+                    project.log(be.getMessage(), project.MSG_DEBUG);", "+                }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5141413b82ff5f9d031b42f3c2c0fe26", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/MacroDef.java", "commitBeforeChange": "f492cc5278c29092c6d1b90491f66839509329d1", "commitAfterChange": "ab0aa53ee1b8cf5058dc8b9ceff1af934f5a7aa7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public UnknownElement getNestedTask()", "signatureAfterChange": "     public UnknownElement getNestedTask()", "diff": ["-        return nestedTask;", "+        UnknownElement ret = new UnknownElement(\"sequential\");", "+        ret.setTaskName(\"sequential\");", "+        ret.setNamespace(\"\");", "+        ret.setQName(\"sequential\");", "+        new RuntimeConfigurable(ret, \"sequential\");", "+        for (int i = 0; i < nestedSequential.getNested().size(); ++i) {", "+            UnknownElement e =", "+                (UnknownElement) nestedSequential.getNested().get(i);", "+            ret.addChild(e);", "+            ret.getWrapper().addChild(e.getWrapper());", "+        }", "+        return ret;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a2990c939abb04d2c035802759c5ad9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Replace.java", "commitBeforeChange": "79ab8ae1d59ed007337a3657ac5c6c78107cc0d8", "commitAfterChange": "c8c751af8ea4cb0607690327d79a0b56d6054925", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+", "+        if (token != null) {", "+            // line separators in values and tokens are \"\\n\"", "+            // in order to compare with the file contents, replace them", "+            // as needed", "+            StringBuffer val = new StringBuffer(value.getText());", "+            stringReplace(val, \"\\r\\n\", \"\\n\", false);", "+            stringReplace(val, \"\\n\", StringUtils.LINE_SEP, false);", "+            StringBuffer tok = new StringBuffer(token.getText());", "+            stringReplace(tok, \"\\r\\n\", \"\\n\", false);", "+            stringReplace(tok, \"\\n\", StringUtils.LINE_SEP, false);", "+            Replacefilter firstFilter = createPrimaryfilter();", "+            firstFilter.setToken(tok.toString());", "+            firstFilter.setValue(val.toString());", "+        }"]}]}
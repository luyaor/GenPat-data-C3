{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b724e297a805e3a2736212441e8dbaae", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dacd6595da9b682698787282b26f6c6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteOn.java", "commitBeforeChange": "7f98652146940a5c7714f209979d74fe2092af34", "commitAfterChange": "61320f305f5ccb78963b3a9fe607f3505ec635e4", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      protected void runExec(Execute exe) throws BuildException", "diff": ["-", "-    public void execute() throws BuildException {", "-        if (command.getExecutable() == null) {", "-            throw new BuildException(\"no executable specified\", location);", "-        }", "-", "-        String[] orig = command.getCommandline();", "-        String[] cmd = new String[orig.length+1];", "-        System.arraycopy(orig, 0, cmd, 0, orig.length);", "+    protected void runExec(Execute exe) throws BuildException {", "+        try {", "-        Vector v = new Vector();", "-        for (int i=0; i<filesets.size(); i++) {", "-            FileSet fs = (FileSet) filesets.elementAt(i);", "-            DirectoryScanner ds = fs.getDirectoryScanner(project);", "-            String[] s = ds.getIncludedFiles();", "-            for (int j=0; j<s.length; j++) {", "-                v.addElement(new File(fs.getDir(), s[j]).getAbsolutePath());", "+            Vector v = new Vector();", "+            for (int i=0; i<filesets.size(); i++) {", "+                FileSet fs = (FileSet) filesets.elementAt(i);", "+                DirectoryScanner ds = fs.getDirectoryScanner(project);", "+                String[] s = ds.getIncludedFiles();", "+                for (int j=0; j<s.length; j++) {", "+                    v.addElement(new File(fs.getDir(), s[j]).getAbsolutePath());", "+                }", "-        }", "-        ", "-        String label = command.toString()+\" \";", "-        String[] environment = env.getVariables();", "-        for (int i=0; i<v.size(); i++) {", "-            try {", "-                // show the command", "-                String file = (String) v.elementAt(i);", "-                log(label+file, Project.MSG_VERBOSE);", "-                Execute exe = new Execute(createHandler(), createWatchdog());", "-                cmd[orig.length] = file;", "-                exe.setCommandline(cmd);", "-                exe.setEnvironment(environment);", "-                int err = exe.execute();", "+            String[] s = new String[v.size()];", "+            v.copyInto(s);", "+", "+            int err = -1;", "+            String myos = System.getProperty(\"os.name\");", "+", "+            // antRun.bat currently limits us to directory + executable ", "+            //                                             + 7 args", "+            if (parallel && ", "+                (myos.toLowerCase().indexOf(\"windows\") < 0 || s.length+cmdl.size() <= 8)", "+                ) {", "+                cmdl.addLine(s);", "+                exe.setCommandline(cmdl.getCommandline());", "+                err = exe.execute();", "-                        throw new BuildException(\"Exec returned: \"+err, location);", "+                        throw new BuildException(\"Exec returned: \"+err, ", "+                                                 location);", "-            } catch (IOException e) {", "-                throw new BuildException(\"Execute failed: \" + e, e, location);", "+", "+            } else {", "+                String[] cmd = new String[cmdl.size()+1];", "+                System.arraycopy(cmdl.getCommandline(), 0, cmd, 0, cmdl.size());", "+                for (int i=0; i<s.length; i++) {", "+                    cmd[cmdl.size()] = s[i];", "+                    exe.setCommandline(cmd);", "+                    err = exe.execute();", "+                    if (err != 0) {", "+                        if (failOnError) {", "+                            throw new BuildException(\"Exec returned: \"+err, ", "+                                                     location);", "+                        } else {", "+                            log(\"Result: \" + err, Project.MSG_ERR);", "+                        }", "+                    }", "+                }", "+", "+        } catch (IOException e) {", "+            throw new BuildException(\"Execute failed: \" + e, e, location);", "+        } finally {", "+            // close the output file if required", "+            logFlush();", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e90b96f0af3e69f8552bf4172cbbb43e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/anteater/bootstrap/Bootstrap.java", "commitBeforeChange": "d741f56d0b67fa0feb5af74c8e8f5419f980f5d3", "commitAfterChange": "4cd7d60e99d2dbbea019824a0ac731c2ae341d1f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 1, "signatureBeforeChange": "      private static void copyfile(String from, String dest)", "signatureAfterChange": "     static void runCommand(String[] command) throws IOException", "diff": ["+     */", "+    static void runCommand(String[] command) throws IOException {", "+        Runtime runtime = Runtime.getRuntime();", "+        Process process = runtime.exec(command);", "+        // echo output from process", "+        InputStream in = process.getInputStream();", "+        byte[] buf = new byte[80];", "+        int count = 0;", "+        count = in.read(buf, 0, buf.length);", "+        while (count != -1) {", "+            System.out.write(buf, 0, count);", "+        }", "+            ", "+        in = process.getErrorStream();", "+        count = in.read(buf, 0, buf.length);          ", "+        if (count > 0) {", "+            System.out.println();", "+            System.out.println(\"Error Stream Output:\");", "+             ", "-", "-    private static void copyfile(String from, String dest) {", "-        File fromF = new File(from);", "-        File destF = new File(dest);", "-        if (fromF.exists()) {", "-            System.out.println(\"   Copying \" + from);", "-            try {", "-                FileInputStream in = new FileInputStream(fromF);", "-                FileOutputStream out = new FileOutputStream(destF);", "-                byte[] buf = new byte[1024 * 16];", "-                int count = 0;", "-                count = in.read(buf, 0, buf.length);", "-                if (count != -1) {", "-                    out.write(buf, 0, count);", "-                    count = in.read(buf, 0, buf.length);", "-                }", "-                ", "-                in.close();", "-                out.close();", "-            } catch (IOException ioe) {", "-                System.out.println(\"OUCH: \" + from);", "-                System.out.println(ioe);", "-            }", "-        }", "-    }"]}]}
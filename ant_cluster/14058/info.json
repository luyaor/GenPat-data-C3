{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "68fa7168420e89b068edef457c5a780e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "514cf8eea359f212d09024b3f8e2b701", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/jdepend/JDependTask.java", "commitBeforeChange": "8d3002cf8ab1b9f87d38b0b4e5682d15ffb7002a", "commitAfterChange": "9c51b355f7e7c16c5466e43b59019cad49a1fe56", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 24, "signatureBeforeChange": "     public int executeInVM(CommandlineJava commandline) throws BuildException", "signatureAfterChange": "     public int executeInVM(CommandlineJava commandline) throws BuildException", "diff": ["-        PathTokenizer sourcesPath ", "-            = new PathTokenizer(getSourcespath().toString());", "-        while (sourcesPath.hasMoreTokens()) {", "-            File f = new File(sourcesPath.nextToken());", "-", "-            // not necessary as JDepend would fail, but why loose some time?", "-            if (!f.exists() || !f.isDirectory()) {", "-                String msg = \"\\\"\" + f.getPath() + \"\\\" does not represent a valid\" ", "-                    + \" directory. JDepend would fail.\";", "-                log(msg);", "-                throw new BuildException(msg);", "+        if (getClassespath() != null) {", "+            // This is the new, better way - use classespath instead", "+            // of sourcespath.  The code is currently the same - you", "+            // need class files in a directory to use this - jar files", "+            // coming soon....", "+            String[] classesPath = getClassespath().list();", "+            for (int i = 0; i < classesPath.length; i++) {", "+                File f = new File(classesPath[i]);", "+                // not necessary as JDepend would fail, but why loose", "+                // some time?", "+                if (!f.exists() || !f.isDirectory()) {", "+                    String msg = \"\\\"\"", "+                        + f.getPath()", "+                        + \"\\\" does not represent a valid\"", "+                        + \" directory. JDepend would fail.\";", "+                    log(msg);", "+                    throw new BuildException(msg);", "+                }", "+                try {", "+                    jdepend.addDirectory(f.getPath());", "+                } catch (IOException e) {", "+                    String msg =", "+                        \"JDepend Failed when adding a class directory: \"", "+                        + e.getMessage();", "+                    log(msg);", "+                    throw new BuildException(msg);", "+                }", "-            try {", "-                jdepend.addDirectory(f.getPath());", "-            } catch (IOException e) {", "-                String msg = \"JDepend Failed when adding a source directory: \" ", "-                    + e.getMessage();", "-                log(msg);", "-                throw new BuildException(msg);", "+", "+        } else if (getSourcespath() != null) {", "+", "+            // This is the old way and is deprecated - classespath is", "+            // the right way to do this and is above", "+            String[] sourcesPath = getSourcespath().list();", "+            for (int i = 0; i < sourcesPath.length; i++) {", "+                File f = new File(sourcesPath[i]);", "+", "+                // not necessary as JDepend would fail, but why loose", "+                // some time?", "+                if (!f.exists() || !f.isDirectory()) {", "+                    String msg = \"\\\"\"", "+                        + f.getPath()", "+                        + \"\\\" does not represent a valid\"", "+                        + \" directory. JDepend would fail.\";", "+                    log(msg);", "+                    throw new BuildException(msg);", "+                }", "+                try {", "+                    jdepend.addDirectory(f.getPath());", "+                } catch (IOException e) {", "+                    String msg =", "+                        \"JDepend Failed when adding a source directory: \"", "+                        + e.getMessage();", "+                    log(msg);", "+                    throw new BuildException(msg);", "+                }", "+", "+        // This bit turns <exclude> child tags into patters to ignore", "+        String[] patterns = defaultPatterns.getExcludePatterns(getProject());", "+        if (patterns != null && patterns.length > 0) {", "+            Vector v = new Vector();", "+            for (int i = 0; i < patterns.length; i++) {", "+                v.addElement(patterns[i]);", "+            }", "+            jdepend.setFilter(new jdepend.framework.PackageFilter(v));", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96745893c4fb186b6ddb51ac0d9098b4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Checksum.java", "commitBeforeChange": "e562f879e82fea2c7960533aaa097c769429968c", "commitAfterChange": "4db83aaa5baa9b47810796035a0e9cafeab911d7", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private boolean validateAndExecute() throws BuildException", "signatureAfterChange": "     private boolean validateAndExecute() throws BuildException", "diff": ["-        if (file == null && filesets.size() == 0) {", "+        if (file == null && (resources == null || resources.size() == 0)) {", "-                                     \"Specify at least one source - a file or a fileset.\");", "+                \"Specify at least one source - a file or a resource collection.\");", "-", "+        if (!(resources == null || resources.isFilesystemOnly())) {", "+            throw new BuildException(\"Can only calculate checksums for file-based resources.\");", "+        }", "-            throw new BuildException(", "-                                     \"Checksum cannot be generated for directories\");", "+            throw new BuildException(\"Checksum cannot be generated for directories\");", "-", "-            throw new BuildException(", "-                                     \"File and Totalproperty cannot co-exist.\");", "+            throw new BuildException(\"File and Totalproperty cannot co-exist.\");", "-", "-            throw new BuildException(", "-                                     \"Property and FileExt cannot co-exist.\");", "+            throw new BuildException(\"Property and FileExt cannot co-exist.\");", "-", "-", "+            int ct = 0;", "+            if (resources != null) {", "+                ct += resources.size();", "+            }", "-                if (filesets.size() > 0) {", "-                    throw new BuildException(\"Multiple files cannot be used \"", "-                                             + \"when Property is specified\");", "-                }", "-            } else {", "-                if (filesets.size() > 1", "-                    || ((FileSet) filesets.get(0)).size() > 1) {", "-                    throw new BuildException(\"Multiple files cannot be used \"", "-                                             + \"when Property is specified\");", "-                }", "+                ct++;", "+            }", "+            if (ct > 1) {", "+                throw new BuildException(", "+                    \"Multiple files cannot be used when Property is specified\");", "-", "-", "-            throw new BuildException(", "-                                     \"VerifyProperty and ForceOverwrite cannot co-exist.\");", "+            throw new BuildException(\"VerifyProperty and ForceOverwrite cannot co-exist.\");", "-", "-            throw new BuildException(\"ForceOverwrite cannot be used when \"", "-                                     + \"conditions are being used.\");", "+            throw new BuildException(", "+                \"ForceOverwrite cannot be used when conditions are being used.\");", "-", "-", "-            throw new BuildException(\"Unable to create Message Digest\",", "-                                     getLocation());", "+            throw new BuildException(\"Unable to create Message Digest\", getLocation());", "-", "-            throw new BuildException(", "-                                     \"File extension when specified must not be an empty string\");", "+            throw new BuildException(\"File extension when specified must not be an empty string\");", "-", "-            int sizeofFileSet = filesets.size();", "-            for (int i = 0; i < sizeofFileSet; i++) {", "-                FileSet fs = (FileSet) filesets.elementAt(i);", "-                DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "-                String[] srcFiles = ds.getIncludedFiles();", "-                for (int j = 0; j < srcFiles.length; j++) {", "-                    File src = new File(fs.getDir(getProject()), srcFiles[j]);", "+            if (resources != null) {", "+                for (Iterator i = resources.iterator(); i.hasNext();) {", "+                    FileResource fr = (FileResource) i.next();", "+                    File src = fr.getFile();", "-                        String relativePath = srcFiles[j].replace(File.separatorChar, '/');", "-                        relativeFilePaths.put(src, relativePath);", "+                        relativeFilePaths.put(src, fr.getName().replace(File.separatorChar, '/'));", "-", "-            addToIncludeFileMap(file);", "-", "+            if (file != null) {", "+                addToIncludeFileMap(file);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bccf5744baf446e034ff23bd6e465082", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "3ef74849efee36e856e6a1a37199a13ee15499a6", "commitAfterChange": "8b0f5b8c9ba88b3b80dba55661f1417ab6cacf04", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     public void executeMain() throws BuildException", "signatureAfterChange": "     public void executeMain() throws BuildException", "diff": ["-        if (baseDir == null && resources.size() == 0", "-            && groupfilesets.size() == 0 && \"zip\".equals(archiveType)) {", "-            throw new BuildException(\"basedir attribute must be set, \"", "-                                     + \"or at least one \"", "-                                     + \"resource collection must be given!\");", "-        }", "-", "-        if (zipFile == null) {", "-            throw new BuildException(\"You must specify the \"", "-                                     + archiveType + \" file to create!\");", "-        }", "-", "-        if (zipFile.exists() && !zipFile.isFile()) {", "-            throw new BuildException(zipFile + \" is not a file.\");", "-        }", "-", "-        if (zipFile.exists() && !zipFile.canWrite()) {", "-            throw new BuildException(zipFile + \" is read-only.\");", "-        }", "+        checkAttributesAndElements();", "-        // Whether or not an actual update is required -", "-        // we don't need to update if the original file doesn't exist", "-        if (doUpdate && !zipFile.exists()) {", "-            doUpdate = false;", "-            log(\"ignoring update attribute as \" + archiveType", "-                + \" doesn't exist.\", Project.MSG_DEBUG);", "-        }", "-", "-        // Add the files found in groupfileset to fileset", "-        for (int i = 0; i < groupfilesets.size(); i++) {", "-", "-            log(\"Processing groupfileset \", Project.MSG_VERBOSE);", "-            FileSet fs = (FileSet) groupfilesets.elementAt(i);", "-            FileScanner scanner = fs.getDirectoryScanner(getProject());", "-            String[] files = scanner.getIncludedFiles();", "-            File basedir = scanner.getBasedir();", "-            for (int j = 0; j < files.length; j++) {", "-", "-                log(\"Adding file \" + files[j] + \" to fileset\",", "-                    Project.MSG_VERBOSE);", "-                ZipFileSet zf = new ZipFileSet();", "-                zf.setProject(getProject());", "-                zf.setSrc(new File(basedir, files[j]));", "-                add(zf);", "-                filesetsFromGroupfilesets.addElement(zf);", "-            }", "-        }", "+        processDoUpdate();", "+        processGroupFilesets();", "-", "-                renamedFile =", "-                    FILE_UTILS.createTempFile(\"zip\", \".tmp\",", "-                                              zipFile.getParentFile());", "-                renamedFile.deleteOnExit();", "-", "-                try {", "-                    FILE_UTILS.rename(zipFile, renamedFile);", "-                } catch (SecurityException e) {", "-                    throw new BuildException(", "-                        \"Not allowed to rename old file (\"", "-                        + zipFile.getAbsolutePath()", "-                        + \") to temporary file\");", "-                } catch (IOException e) {", "-                    throw new BuildException(", "-                        \"Unable to rename old file (\"", "-                        + zipFile.getAbsolutePath()", "-                        + \") to temporary file\");", "-                }", "+                renamedFile = renameFile();", "-                try {", "-                    if (zOut != null) {", "-                        zOut.close();", "-                    }", "-                } catch (IOException ex) {", "-                    // If we're in this finally clause because of an", "-                    // exception, we don't really care if there's an", "-                    // exception when closing the stream. E.g. if it", "-                    // throws \"ZIP file must have at least one entry\",", "-                    // because an exception happened before we added", "-                    // any files, then we must swallow this", "-                    // exception. Otherwise, the error that's reported", "-                    // will be the close() error, which is not the", "-                    // real cause of the problem.", "-                    if (success) {", "-                        throw ex;", "-                    }", "-                }", "+                closeZout(zOut, success);"]}]}
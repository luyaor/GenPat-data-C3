{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e6ea7b2229aa301fb64846564c9a188", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "182177143cc438cfa68c576b6e219ec7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "     protected Resource[][] grabNonFileSetResources(ResourceCollection[] rcs)", "signatureAfterChange": "     protected Resource[][] grabNonFileSetResources(final ResourceCollection[] rcs)", "diff": ["-    protected Resource[][] grabNonFileSetResources(ResourceCollection[] rcs) {", "-        Resource[][] result = new Resource[rcs.length][];", "+    protected Resource[][] grabNonFileSetResources(final ResourceCollection[] rcs) {", "+        final Resource[][] result = new Resource[rcs.length][];", "-            ArrayList<Resource> dirs = new ArrayList<Resource>();", "-            ArrayList<Resource> files = new ArrayList<Resource>();", "-            for (Resource r : rcs[i]) {", "+            final ArrayList<Resource> dirs = new ArrayList<Resource>();", "+            final ArrayList<Resource> files = new ArrayList<Resource>();", "+            for (final Resource r : rcs[i]) {", "-                    @Override", "-\t\t\t\t\tpublic int compare(Resource r1, Resource r2) {", "+\t\t\t\t\tpublic int compare(final Resource r1, final Resource r2) {", "-            ArrayList<Resource> rs = new ArrayList<Resource>(dirs);", "+            final ArrayList<Resource> rs = new ArrayList<Resource>(dirs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8dc48151277287b779acd8df9fef6099", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/condition/IsReachable.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     @Override \tpublic boolean eval() throws BuildException", "signatureAfterChange": " \tpublic boolean eval() throws BuildException", "diff": ["-    @Override", "-                URL realURL = new URL(url);", "+                final URL realURL = new URL(url);", "-            } catch (MalformedURLException e) {", "+            } catch (final MalformedURLException e) {", "-        } catch (UnknownHostException e1) {", "+        } catch (final UnknownHostException e1) {", "-            Object[] params = new Object[1];", "+            final Object[] params = new Object[1];", "-            } catch (IllegalAccessException e) {", "+            } catch (final IllegalAccessException e) {", "-            } catch (InvocationTargetException e) {", "+            } catch (final InvocationTargetException e) {", "-                Throwable nested = e.getTargetException();", "+                final Throwable nested = e.getTargetException();", "-        } catch (NoSuchMethodException e) {", "+        } catch (final NoSuchMethodException e) {"]}]}
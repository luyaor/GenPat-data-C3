{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "54626edd6ac04b371c079a647b2b47e0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13fe46b2d1e16c0b164ed0dc3d8b00c1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/tasks/core/RegisterTasklet.java", "commitBeforeChange": "66c74a2fceee359d38138fb601c1b639e99fb17d", "commitAfterChange": "19600e6d005c8bebbf6697bd00516e843f0a34f4", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void compose( final ComponentManager componentManager )         throws ComponentNotFoundException, ComponentNotAccessibleException", "signatureAfterChange": "     protected void registerResource( final String name,                                       final String classname,                                       final URL url )         throws AntException, RegistryException", "diff": ["-", "-    public void compose( final ComponentManager componentManager )", "-        throws ComponentNotFoundException, ComponentNotAccessibleException", "+    protected void registerResource( final String name, ", "+                                     final String classname, ", "+                                     final URL url )", "+        throws AntException, RegistryException ", "-        final TaskletEngine engine = (TaskletEngine)componentManager.", "-            lookup( \"org.apache.ant.tasklet.engine.TaskletEngine\" );", "-        m_taskletRegistry = engine.getTaskletRegistry();", "-    }", "+        if( null == classname )", "+            try { m_engine.getTskDeployer().deployTasklet( name, url.toString(), url ); }", "+            catch( final DeploymentException de )", "+                throw new AntException( \"Failed deploying \" + name + \" from \" + url, de );", "+        else", "+            final DefaultTaskletInfo info = new DefaultTaskletInfo( classname, url );", "+            m_engine.getTaskletRegistry().register( name, info ); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "354e340717fe75f8335f1c8b6b18438c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/deployer/DefaultTskDeployer.java", "commitBeforeChange": "7b722732fbbdb511be32f94588d43f55b0b51f65", "commitAfterChange": "8d9a74fe25ffb24cb1b8a2c6a191ea3ac7c02b38", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      private void handleConverter( final Configuration converter, final URL url )         throws DeploymentException, ConfigurationException", "signatureAfterChange": "      private void handleConverter( final Configuration converter,                                   final URL url,                                   final DefaultComponentFactory factory )         throws Exception", "diff": ["-    private void handleConverter( final Configuration converter, final URL url )", "-        throws DeploymentException, ConfigurationException", "+    private void handleConverter( final Configuration converter,", "+                                  final URL url,", "+                                  final DefaultComponentFactory factory )", "+        throws Exception", "-        final DefaultConverterInfo info = new DefaultConverterInfo( source, destination );", "+        final ConverterInfo info = new ConverterInfo( source, destination );", "+        m_converterInfoRegistry.registerConverterInfo( name, info );", "-        try { m_converterInfoRegistry.register( name, info ); }", "-        catch( final RegistryException re )", "-        {", "-            throw new DeploymentException( \"Error registering converter info \" +", "-                                           name + \" due to \" + re,", "-                                           re );", "-        }", "-", "-        final DefaultLocator locator = new DefaultLocator( name, url );", "-", "-        try { m_converterRegistry.register( name, locator ); }", "-        catch( final RegistryException re )", "-        {", "-            throw new DeploymentException( \"Error registering converter locator \" +", "-                                           name + \" due to \" + re,", "-                                           re );", "-        }", "+        factory.addNameClassMapping( name, name );", "+        m_typeManager.registerType( Converter.ROLE, name, factory );"]}]}
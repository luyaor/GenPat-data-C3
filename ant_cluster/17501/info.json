{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e654e479df2f003def4f6ee6a9b2a90", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae7a5ae00fb7ba9f0b3cc82071db8c55", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/tar/TarEntry.java", "commitBeforeChange": "b43f4224d8fe9d1e7d628e88df394a7dfed46d1b", "commitAfterChange": "2e5b53fa106b848646493cb6f6ea74616973aca0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public TarEntry(File file)", "signatureAfterChange": "     public TarEntry(File file, String fileName)", "diff": ["-    public TarEntry(File file) {", "+    public TarEntry(File file, String fileName) {", "-        String fileName = normalizeFileName(file.getPath(), false);", "-        this.linkName = new StringBuffer(\"\");", "-        this.name = new StringBuffer(fileName);", "+        this.linkName = \"\";", "-            int nameLength = name.length();", "-            if (nameLength == 0 || name.charAt(nameLength - 1) != '/') {", "-                this.name.append(\"/\");", "+            int nameLength = fileName.length();", "+            if (nameLength == 0 || fileName.charAt(nameLength - 1) != '/') {", "+                this.name = fileName + \"/\";", "+            } else {", "+                this.name = fileName;", "+            this.name = fileName;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcae1d167f748ed1825724027f446214", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/BuildEvent.java", "commitBeforeChange": "8947bdbc21d3439529ce0f424f5224c500bc7958", "commitAfterChange": "9bd75d2c4e8bb5387ec65dd76ccf483f2bec59e7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 0, "signatureBeforeChange": "     private static Object getSource(Project project, Target target, Task task)", "signatureAfterChange": "     public BuildEvent(Project project)", "diff": ["+    public BuildEvent(Project project) {", "+        super(project);", "+        this.target = null;", "+        this.task = null;", "+    }", "-     */", "-    private static Object getSource(Project project, Target target, Task task) {", "-        if (task != null) return task;", "-        if (target != null) return target;", "-        if (project != null) return project;", "-", "-        throw new IllegalArgumentException(\"Project field cannot be null\");"]}]}
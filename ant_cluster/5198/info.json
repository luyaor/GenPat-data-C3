{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2750e12620ed90baa02e29deac6dca4e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f0b609d79fa465396696d638134807b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Manifest.java", "commitBeforeChange": "299ea801bc1031e308bfe07a22e51edd1b972872", "commitAfterChange": "eca5133693881d72fbd157619b03647e7e255789", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 36, "signatureBeforeChange": "     public void merge(Manifest other, boolean overwriteMain) throws ManifestException", "signatureAfterChange": "     public void merge(Manifest other, boolean overwriteMain)           throws ManifestException", "diff": ["-    public void merge(Manifest other, boolean overwriteMain) throws ManifestException {", "+    public void merge(Manifest other, boolean overwriteMain) ", "+         throws ManifestException {", "-             }", "-             else {", "+             } else {", "-             for (Enumeration e = other.sections.keys(); e.hasMoreElements();) {", "+             Enumeration e = other.getSectionNames();", "+             while (e.hasMoreElements()) {", "-                 Section otherSection = (Section)other.sections.get(sectionName);", "+                 Section otherSection ", "+                    = (Section)other.sections.get(sectionName);", "-                         sections.put(sectionName.toLowerCase(), otherSection);", "+                         addConfiguredSection(otherSection);", "-                 }", "-                 else {", "+                 } else {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e5d58968abab26102a44cc9f62c78f4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "f8e71b50339d8fc15bdf6813eaa91d24096817a7", "commitAfterChange": "63fb4d459b454236caef0e037333b8ee4cabb91c", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": "     protected void printResults(ResultSet rs, PrintStream out) throws SQLException", "signatureAfterChange": "     protected void printResults(ResultSet rs, PrintStream out) throws SQLException", "diff": ["-                    out.print(rs.getString(1));", "+                    printValue(rs, 1, out);", "-                        out.print(rs.getString(col));", "+                        printValue(rs, col, out);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23d08626da613a1c50f75cbd38c8f120", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/embed/ProjectHelperImpl.java", "commitBeforeChange": "4fc2dab7e2b955f5ada45d3b97647084a15e951f", "commitAfterChange": "df867b66e89d6dcfa962efed57cbbdf543d8d7bd", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 6, "signatureBeforeChange": "         public InputSource resolveEntity(String publicId,                                          String systemId)", "signatureAfterChange": "         public InputSource resolveEntity(String publicId,                                          String systemId)", "diff": ["-            helper.project.log(\"resolving systemId: \" + systemId, Project.MSG_VERBOSE);", "+            project.log(\"resolving systemId: \" + systemId, Project.MSG_VERBOSE);", "-                    file = new File(helper.buildFileParent, path);", "+                    file = new File(buildFileParent, path);", "-                    helper.project.log(file.getAbsolutePath()+\" could not be found\", ", "+                    project.log(file.getAbsolutePath()+\" could not be found\", "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27f5d88bf3c0fe3472ba7de739439d81", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "a14b034437745cfc4066f88bfcaa7923c574ae1d", "commitAfterChange": "bf5d72445b3750fb9e34c150abb7b6372324b85d", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private PropertyConfigurer getConfigurerFromName( final ObjectConfigurer configurer,                                                       final String name,                                                       boolean ignoreRoleName )         throws NoSuchPropertyException", "signatureAfterChange": "     private PropertyConfigurer getConfigurerFromName( final ObjectConfigurer configurer,                                                       final String name,                                                       boolean ignoreRoleName )         throws Exception", "diff": ["-        throws NoSuchPropertyException", "+        throws Exception", "-            final String roleShorthand = m_roleManager.getNameForRole( propertyConfigurer.getType().getName() );", "-            if( !name.equalsIgnoreCase( roleShorthand ) )", "+            final RoleInfo roleInfo = m_roleManager.getRoleByType( propertyConfigurer.getType() );", "+            if( roleInfo == null || !name.equalsIgnoreCase( roleInfo.getShorthand() ) )"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29165c9dda8bb214054710c977dd1efc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "380870c2b26a9f3289569dc2451178df3f05613e", "commitAfterChange": "ad9edf5f5ea4a8f2a974726eeb8e656c177357df", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      private void init() throws IOException", "signatureAfterChange": "      private void initialize() throws IOException", "diff": ["-    private void init() throws IOException {", "-        // write magic: done by caller who created this stream", "-        //this.out.write('B');", "-        //this.out.write('Z');", "-        this.data = new Data(this.blockSize100k);", "+    private void initialize() throws IOException {", "+        bytesOut = 0;", "+        nBlocksRandomised = 0;", "-        bsPutUByte('h');", "-        bsPutUByte('0' + this.blockSize100k);", "+        bsPutUChar('h');", "+        bsPutUChar('0' + blockSize100k);", "-        this.combinedCRC = 0;", "-        initBlock();", "+        combinedCRC = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49512569408e4f34e0c9276172637b4d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/tar/TarOutputStream.java", "commitBeforeChange": "0b93bdd7cdfe6a7a48f02cf125014e5d538d5381", "commitAfterChange": "1447e596aa13ca3441f24a8e163f4a255c5a7e23", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public TarOutputStream( OutputStream os, int blockSize, int recordSize )", "signatureAfterChange": "      public TarOutputStream( final OutputStream output,                             final int blockSize,                             final int recordSize )", "diff": ["-    public TarOutputStream( OutputStream os, int blockSize, int recordSize )", "+    public TarOutputStream( final OutputStream output,", "+                            final int blockSize,", "+                            final int recordSize )", "-        super( os );", "+        super( output );", "-        this.buffer = new TarBuffer( os, blockSize, recordSize );", "-        this.debug = false;", "-        this.assemLen = 0;", "-        this.assemBuf = new byte[ recordSize ];", "-        this.recordBuf = new byte[ recordSize ];", "-        this.oneBuf = new byte[ 1 ];", "+        m_buffer = new TarBuffer( output, blockSize, recordSize );", "+        m_debug = false;", "+        m_assemLen = 0;", "+        m_assemBuf = new byte[ recordSize ];", "+        m_recordBuf = new byte[ recordSize ];", "+        m_oneBuf = new byte[ 1 ];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4af29398aab35da013a73a55957aa95a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/tar/TarInputStream.java", "commitBeforeChange": "0b93bdd7cdfe6a7a48f02cf125014e5d538d5381", "commitAfterChange": "1447e596aa13ca3441f24a8e163f4a255c5a7e23", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public TarInputStream( InputStream is, int blockSize, int recordSize )", "signatureAfterChange": "      public TarInputStream( final InputStream input,                            final int blockSize,                            final int recordSize )", "diff": ["-    public TarInputStream( InputStream is, int blockSize, int recordSize )", "+    public TarInputStream( final InputStream input,", "+                           final int blockSize,", "+                           final int recordSize )", "-        super( is );", "+        super( input );", "-        this.buffer = new TarBuffer( is, blockSize, recordSize );", "-        this.readBuf = null;", "-        this.oneBuf = new byte[ 1 ];", "-        this.debug = false;", "-        this.hasHitEOF = false;", "+        m_buffer = new TarBuffer( input, blockSize, recordSize );", "+        m_oneBuf = new byte[ 1 ];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "710ec323d197ddb6c0f46f030286720c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/zip/UTF8ZipFilesTest.java", "commitBeforeChange": "6000b81daa0a959947f4bb67e1feddaabf2a19c8", "commitAfterChange": "0e150acfd40a3e5bec429895d62aa6cb70035670", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public void testZipFileReadsUnicodeFields() throws IOException", "signatureAfterChange": "      public void testZipFileReadsUnicodeFields() throws IOException", "diff": ["-            assertNotNull(zf.getEntry(ASCII_TXT));", "-            assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT));", "-            assertNotNull(zf.getEntry(OIL_BARREL_TXT));", "+            assertCanRead(zf, ASCII_TXT);", "+            assertCanRead(zf, EURO_FOR_DOLLAR_TXT);", "+            assertCanRead(zf, OIL_BARREL_TXT);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84e52120f44d9cc59ac078b96197fd57", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/framework/exec/launchers/MacCommandLauncher.java", "commitBeforeChange": "4ad84fc4cc09400e9245a47f2509859b274b1007", "commitAfterChange": "146898d1694bd27f8eebf95b029c3525a9f66990", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public Process exec( final ExecMetaData metaData )         throws IOException, ExecException", "signatureAfterChange": "     public Process exec( final ExecMetaData metaData )         throws IOException, ExecException", "diff": ["-            final String[] env = ExecUtil.toNativeEnvironment( metaData.getEnvironment() );", "+            final String[] env = ExecUtil.getEnvironmentSpec( metaData );", "-            final String[] env = ExecUtil.toNativeEnvironment( metaData.getEnvironment() );", "+            final String[] env = ExecUtil.getEnvironmentSpec( metaData );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87ee8bd647c1c5883ac42892880b45fc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Ant.java", "commitBeforeChange": "6ef4875d061c42465f53150b1397b4d7d3b65905", "commitAfterChange": "3745d5dc705f587314a801d7a7ffe9dd2a0e60b3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void addReferences() throws BuildException", "signatureAfterChange": "     private void addReferences() throws BuildException", "diff": ["-                newProject.addReference(toRefid, o);", "+                copyReference(refid, toRefid);", "-        // subproject, if inheritAll is true", "-        if (inheritAll) {", "+        // subproject, if inheritRefs is true", "+        if (inheritRefs) {", "-                newProject.addReference(key, thisReferences.get(key));", "+                copyReference(key, key);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96907e6f4838b89a8706b9386b9cbf62", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2InputStream.java", "commitBeforeChange": "3477bbf6474cdd2b70b12eb638e64415a4f1c2ec", "commitAfterChange": "134d95afef9b42cf08f2eccb077b97525ac38034", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public CBZip2InputStream(InputStream zStream)", "signatureAfterChange": "     public CBZip2InputStream(final InputStream in) throws IOException", "diff": ["-    public CBZip2InputStream(InputStream zStream) {", "-        ll8 = null;", "-        tt = null;", "-        bsSetStream(zStream);", "-        initialize();", "+     */", "+    public CBZip2InputStream(final InputStream in) throws IOException {", "+        super();", "+", "+        this.in = in;", "+        init();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9da60f8a919de5ca54064d58c4e7918a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "c35a248ef870c9f98b7eda39ba9e3653775aea82", "commitAfterChange": "4653e638dd921ac96a2e8583851b121e46477ae9", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 16, "signatureBeforeChange": "     protected void writeDataDescriptor(ZipEntry ze) throws IOException", "signatureAfterChange": "     protected void writeDataDescriptor(ZipEntry ze) throws IOException", "diff": ["-        if (ze.getMethod() != DEFLATED) {", "+        if (ze.getMethod() != DEFLATED || raf != null) {", "-        out.write(DD_SIG.getBytes());", "-        out.write((new ZipLong(entry.getCrc())).getBytes());", "-        out.write((new ZipLong(entry.getCompressedSize())).getBytes());", "-        out.write((new ZipLong(entry.getSize())).getBytes());", "+        writeOut(DD_SIG.getBytes());", "+        writeOut((new ZipLong(entry.getCrc())).getBytes());", "+        writeOut((new ZipLong(entry.getCompressedSize())).getBytes());", "+        writeOut((new ZipLong(entry.getSize())).getBytes());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4f1d88f55cee45ec2083727a13e8dcb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/tar/TarOutputStream.java", "commitBeforeChange": "23bbf085727756cfbad92aaa345e10c7370d3486", "commitAfterChange": "75110026aa35fe98da6c696598361977c3c46c48", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void putNextEntry(TarEntry entry) throws IOException", "signatureAfterChange": "     public void putNextEntry(TarEntry entry) throws IOException", "diff": ["-        entry.writeEntryHeader(this.recordBuf);", "-        this.buffer.writeRecord(this.recordBuf);", "+        entry.writeEntryHeader(recordBuf);", "+        buffer.writeRecord(recordBuf);", "-        this.currBytes = 0;", "+        currBytes = 0;", "-            this.currSize = 0;", "+            currSize = 0;", "-            this.currSize = entry.getSize();", "+            currSize = entry.getSize();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b76e78610424ca04a8bbcac1af1f00eb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "3ae69e82c33e0e03941387a3506561accc2697d3", "commitAfterChange": "1e962d0d6d74a53709e9cff40a0c6422d27ec3bf", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 50, "signatureBeforeChange": "      private boolean isUpToDate(ResourceCollection c)", "signatureAfterChange": "      private boolean isUpToDate(ResourceCollection c)", "diff": ["-        if (destinationFile == null || forceOverwrite) {", "+        if (dest == null || forceOverwrite) {", "-            if (r.getLastModified() == 0L", "-                 || r.getLastModified() > destinationFile.lastModified()) {", "+            if (SelectorUtils.isOutOfDate(r, dest, FILE_UTILS.getFileTimestampGranularity())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cba0196272cfe0880e894a8b585d9413", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Property.java", "commitBeforeChange": "1822d828589dc4d1c243d94520785f77e01ed5f9", "commitAfterChange": "6c014111ca3af7a3ddad82c0b754883db98f0e6b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void setValue(Object value)", "signatureAfterChange": "     public void setValue(Object value)", "diff": ["+        valueAttributeUsed = true;", "+        internalSetValue(value);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e384ce4b6be98976433631fc9bf8bbdd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/tar/TarEntry.java", "commitBeforeChange": "0bde74aa3647adabb6ab7ffdf25dcf5ac438b971", "commitAfterChange": "23bbf085727756cfbad92aaa345e10c7370d3486", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "     public TarEntry[] getDirectoryEntries()", "signatureAfterChange": "     public TarEntry[] getDirectoryEntries()", "diff": ["-        if (this.file == null || !this.file.isDirectory()) {", "+        if (file == null || !file.isDirectory()) {", "-        String[]   list = this.file.list();", "+        String[]   list = file.list();", "-            result[i] = new TarEntry(new File(this.file, list[i]));", "+            result[i] = new TarEntry(new File(file, list[i]));"]}]}
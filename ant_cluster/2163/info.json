{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c9584222a56115ff3cc48970e1fe31ac", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14e275690b26b1c9a0088e3353bb071a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/JavaTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 17, "signatureBeforeChange": "      public void testRunFailWithFailOnError()", "signatureAfterChange": "      @Test     public void testRunFailWithFailOnError()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testRunFailWithFailOnError\",", "-            \"non zero return code\",", "-            \"Java returned:\");", "+        try {", "+            buildRule.executeTarget(\"testRunFailWithFailOnError\");", "+            fail(\"Build exception should have been thrown - \" + \"non zero return code\");", "+        } catch (BuildException ex) {", "+            assertContains(\"Java returned:\", ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a05e3bd786bd01072415fdf158a8bcb0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/JavaTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": "      public void testExceptingFoeFork()", "signatureAfterChange": "      @Test     public void testExceptingFoeFork()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testExceptingFoeFork\",", "-            \"exceptions turned into error codes\",", "-            \"Java returned:\");", "+        try {", "+            buildRule.executeTarget(\"testExceptingFoeFork\");", "+            fail(\"Build exception should have been thrown - \" + \"exceptions turned into error codes\");", "+        } catch (BuildException ex) {", "+            assertContains(\"Java returned:\", ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4084ca379a318238f310346d08f2631", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/JavaTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public void testRunFailFoeFork()", "signatureAfterChange": "      @Test     public void testRunFailFoeFork()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testRunFailFoeFork\",", "-            \"java failures being propagated\",", "-            \"Java returned:\");", "+        try {", "+            buildRule.executeTarget(\"testRunFailFoeFork\");", "+            fail(\"Build exception should have been thrown - \" + \"java failures being propagated\");", "+        } catch (BuildException ex) {", "+            assertContains(\"Java returned:\", ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2b4f4f10b9439adcb09919a35f6cacc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/JavaTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 11, "signatureBeforeChange": "      public void testExceptingFoe()", "signatureAfterChange": "      @Test     public void testExceptingFoe()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testExceptingFoe\",", "-            \"passes exception through\",", "-            \"Exception raised inside called program\");", "+        try {", "+            buildRule.executeTarget(\"testExceptingFoe\");", "+            fail(\"Build exception should have been thrown - \" + \"passes exception through\");", "+        } catch (BuildException ex) {", "+            assertContains(\"Exception raised inside called program\", ex.getMessage());", "+        }"]}]}
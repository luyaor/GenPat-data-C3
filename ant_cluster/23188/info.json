{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8e1860fa93a09a837f4fd0f291380c93", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d38733adeef5aca3ca14045a5b57ab12", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "87118181a63b355cfc23c9333b3b9281b40a2aa2", "commitAfterChange": "8d139ecb2196ec4be450d8c824fccc3b8c15b9ce", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public static void configure( Object target, Attributes attrs, Project project )         throws BuildException", "signatureAfterChange": "     public Vector getImportStack()", "diff": ["+     */", "+    public Vector getImportStack() {", "+        return importStack;", "+    }", "-     */", "-    public static void configure( Object target, Attributes attrs, Project project )", "-        throws BuildException", "-    {", "-        if (target instanceof TaskAdapter) {", "-            target = ((TaskAdapter) target).getProxy();", "-        }", "-", "-        IntrospectionHelper ih =", "-            IntrospectionHelper.getHelper(target.getClass());", "-", "-        // Why ???", "-        project.addBuildListener(ih);", "-", "-        for (int i = 0; i < attrs.getLength(); i++) {", "-            // reflect these into the target", "-            String attValue=attrs.getValue(i);", "-", "-            // XXX ADD SPECIAL CASE FOR ${property} - don't convert to string", "-            // and support ARRAYS.", "-            // reflect these into the target", "-            //String value = replaceProperties(attValue);", "-            String value = replaceProperties(project, attValue,", "-                                           project.getProperties());", "-            try {", "-                ih.setAttribute(project, target,", "-                                attrs.getQName(i).toLowerCase(Locale.US), value);", "-", "-            } catch (BuildException be) {", "-                // id attribute must be set externally", "-                if (!attrs.getQName(i).equals(\"id\")) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d431cde4ea9bd7b6acfc7882117f03b9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ide/VAJExport.java", "commitBeforeChange": "6cf09d26ffb60c6d9c780b92203ceb6b98b4182c", "commitAfterChange": "fcd6548344aa3f590435beff55530cfdb6983588", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void export(Package[] packages)", "signatureAfterChange": " \tpublic void setOverwrite(boolean doOverwrite)", "diff": ["-     */", "-    public void export(Package[] packages) {", "-        try {", "-            String dest = destDir.getAbsolutePath();", "-            log(\"Exporting \" + packages.length + \" package(s) to \" + dest);", "-            for (int i = 0; i < packages.length; i++) {", "-                log(\"    \" + packages[i].getName(), Project.MSG_VERBOSE);", "-            }", "-            ExportCodeSpec exportSpec = new ExportCodeSpec();", "-            exportSpec.setPackages(packages);", "-            exportSpec.includeJava(exportSources);", "-            exportSpec.includeClass(exportClasses);", "-            exportSpec.includeResources(exportResources);", "-            exportSpec.includeClassDebugInfo(exportDebugInfo);", "-            exportSpec.useSubdirectories(true);", "-            exportSpec.overwriteFiles(true);", "-            exportSpec.setExportDirectory(dest);", "-            VAJUtil.getWorkspace().exportData(exportSpec);", "-        } catch (IvjException ex) {", "-            throw VAJUtil.createBuildException(\"Exporting failed!\", ex);", "-        }", "-    }", "+\t */", "+\tpublic void setOverwrite(boolean doOverwrite) {", "+\t\toverwrite = doOverwrite;", "+\t}"]}]}
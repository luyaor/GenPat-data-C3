{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "db06339117acc34578d7fb22e01cd3d0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd1aa59298080473895becf4108cd834", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "f87b5ed7757c30daca5cf875c95520a00dce2269", "commitAfterChange": "010a31e84477b60ff536725b388b38323540dcca", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private void configureAttribute( final Object object,                                      final String name,                                      final String value,                                      final Context context )         throws ConfigurationException", "signatureAfterChange": "     private void setAttribute( final ObjectConfigurer configurer,                                final Object object,                                final String name,                                final String value,                                final Context context )         throws ConfigurationException", "diff": ["+    private void setAttribute( final ObjectConfigurer configurer,", "+                               final Object object,", "+                               final String name,", "+                               final String value,", "+                               final Context context )", "-", "-    private void configureAttribute( final Object object,", "-                                     final String name,", "-                                     final String value,", "-                                     final Context context )", "-        throws ConfigurationException", "-    {", "-        final String methodName = getMethodNameFor( name );", "-        setValue( object, methodName, value, context );", "-    }", "+        if( DEBUG )", "+            final String message = REZ.getString( \"configure-attribute.notice\",", "+                                                  name,", "+                                                  value );", "+            getLogger().debug( message );", "+        }", "+", "+        // Locate the setter for this attribute", "+        final AttributeSetter setter = configurer.getAttributeSetter( name );", "+        if( null == setter )", "+        {", "+            final String message = REZ.getString( \"unknown-attribute.error\", name );", "+        // Set the value", "+            setValue( setter, object, value, context );", "+            final String message = REZ.getString( \"bad-set-attribute.error\", name );", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5154e8ce76521cc777fd7a0f3ec18ee", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "f87b5ed7757c30daca5cf875c95520a00dce2269", "commitAfterChange": "010a31e84477b60ff536725b388b38323540dcca", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private void setValue( final Object object,                            final String value,                            final Context context,                            final Method methods[] )         throws ConfigurationException", "signatureAfterChange": "     private void setValue( final AttributeSetter setter,                            final Object object,                            final String value,                            final Context context )         throws Exception", "diff": ["-", "-    private void setValue( final Object object,", "-                           final String value,", "-                           final Context context,", "-                           final Method methods[] )", "-        throws ConfigurationException", "-    {", "-            final Object objectValue =", "-                PropertyUtil.resolveProperty( value, context, false );", "-", "-            setValue( object, objectValue, methods, context );", "-        }", "-        catch( final PropertyException pe )", "-        {", "-            final String message =", "-                REZ.getString( \"bad-property-resolve.error\", value );", "-            throw new ConfigurationException( message, pe );", "-        }", "-    }", "+     */", "+    private void setValue( final AttributeSetter setter,", "+                           final Object object,", "+                           final String value,", "+                           final Context context )", "+        throws Exception", "+    {", "+        // Resolve property references in the attribute value", "+        Object objValue = PropertyUtil.resolveProperty( value, context, false );", "+", "+        // Convert the value to the appropriate type", "+        Class clazz = setter.getType();", "+        if( clazz.isPrimitive() )", "+            clazz = getComplexTypeFor( clazz );", "+        objValue = m_converter.convert( clazz, objValue, context );", "+        // Set the value", "+        setter.setAttribute( object, objValue );", "+    }"]}]}
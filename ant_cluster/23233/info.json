{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "36679bf27cede9a2d04cc273219b11af", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0276377687c3f54a5cb8bcdedede2b20", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Jar.java", "commitBeforeChange": "819d9a02f1085497e96e67950aa889b05bcdfe68", "commitAfterChange": "c00d5a6977e62911b613f7b4464e9d953057e4cd", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private void createIndexList(ZipOutputStream zOut) throws IOException", "signatureAfterChange": "     private void createIndexList(ZipOutputStream zOut) throws IOException", "diff": ["-        // JarIndex is sorting the directories by ascending order.", "-        // it's painful to do in JDK 1.1 and it has no value but cosmetic", "-        // since it will be read into a hashtable by the classloader.", "-        Enumeration e = addedDirs.keys();", "-        while (e.hasMoreElements()) {", "-            String dir = (String) e.nextElement();", "+        writeIndexLikeList(new ArrayList(addedDirs.keySet()), ", "+                           rootEntries, writer);", "+        writer.println();", "-            // try to be smart, not to be fooled by a weird directory name", "-            // @fixme do we need to check for directories starting by ./ ?", "-            dir = dir.replace('\\\\', '/');", "-            int pos = dir.lastIndexOf('/');", "-            if (pos != -1) {", "-                dir = dir.substring(0, pos);", "+        if (indexJars != null) {", "+            Manifest mf = createManifest();", "+            Manifest.Attribute classpath =", "+                mf.getMainSection().getAttribute(Manifest.ATTRIBUTE_CLASSPATH);", "+            String[] cpEntries = null;", "+            if (classpath != null) {", "+                StringTokenizer tok = new StringTokenizer(classpath.getValue(),", "+                                                          \" \");", "+                cpEntries = new String[tok.countTokens()];", "+                int c = 0;", "+                while (tok.hasMoreTokens()) {", "+                    cpEntries[c++] = tok.nextToken();", "+                }", "-", "-            // looks like nothing from META-INF should be added", "-            // and the check is not case insensitive.", "-            // see sun.misc.JarIndex", "-            if (dir.startsWith(\"META-INF\")) {", "-                continue;", "+            String[] indexJarEntries = indexJars.list();", "+            for (int i = 0; i < indexJarEntries.length; i++) {", "+                String name = findJarName(indexJarEntries[i], cpEntries);", "+                if (name != null) {", "+                    ArrayList dirs = new ArrayList();", "+                    ArrayList files = new ArrayList();", "+                    grabFilesAndDirs(indexJarEntries[i], dirs, files);", "+                    if (dirs.size() + files.size() > 0) {", "+                        writer.println(name);", "+                        writeIndexLikeList(dirs, files, writer);", "+                        writer.println();", "+                    }", "+                }", "-            // name newline", "-            writer.println(dir);", "-        }", "-", "-        e = rootEntries.elements();", "-        while (e.hasMoreElements()) {", "-            writer.println(e.nextElement());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27ce641251bd03904119894c1ff902a8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/dotnet/DotnetResource.java", "commitBeforeChange": "c5d224e2fabd860332b84182429505a5f2a2ee54", "commitAfterChange": "6f8402d926c54252e54ac79efa3f5480ab7323c3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public String getCSharpStyleParameter()", "signatureAfterChange": "     public void getParameters(Project p, NetCommand command, boolean csharpStyle)", "diff": ["-    public String getCSharpStyleParameter() {", "-        StringBuffer buffer = new StringBuffer();", "-        buffer.append(isEmbed() ? \"/resource\" : \"/linkresource\");", "-        buffer.append(':');", "-        buffer.append(getFile().toString());", "-        if (getName() != null) {", "-            buffer.append(',');", "-            buffer.append(getName());", "+    public void getParameters(Project p, NetCommand command, boolean csharpStyle) {", "+        checkParameters();", "+        if (hasFilesets()) {", "+            for (Iterator listIter=fileSets.iterator(); listIter.hasNext();) {", "+                FileSet fs=(FileSet)listIter.next();;", "+                String baseDirectory=fs.getDir(p).toString();", "+                String namespace=getNamespace(); // ends with '.' or null", "+                DirectoryScanner ds = fs.getDirectoryScanner(p);", "+                String[] files = ds.getIncludedFiles();", "+                for (int i=0; i<files.length; i++) {", "+                    String file=files[i];", "+                    command.addArgument(getParameter(baseDirectory+File.separatorChar+file, (namespace==null ? null : namespace+file.replace(File.separatorChar, '.')), csharpStyle));", "+                }", "+            }", "-        if (getPublic() != null) {", "-            throw new BuildException(\"This compiler does not support the \"", "-                    + \"public/private option.\");", "+        else {", "+            command.addArgument(getParameter(getFile().toString(), getName(),", "+                                             csharpStyle));", "+        }", "+    }"]}]}
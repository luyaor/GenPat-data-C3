{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "654d94df83f9197dd6e6b6596a5be982", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "652ecec64274134b38ced5fa55a6a2d3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/depend/Depend.java", "commitBeforeChange": "2bb82ea3965603288bc8defcacdf2dcb1e549fe2", "commitAfterChange": "798eedafd9e38fb45daae1aa139ca40b7b23f493", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        ", "+            ", "-        ", "+            ", "-        ", "+            ", "- ", "-/*            ", "-            for (Enumeration e = affectedClassMap.keys(); e.hasMoreElements(); ) {", "-                String className = (String)e.nextElement();", "-                log(\"Class \" + className + \" affects:\", Project.MSG_DEBUG);", "-                Hashtable affectedClasses = (Hashtable)affectedClassMap.get(className);", "-                for (Enumeration e2 = affectedClasses.keys(); e2.hasMoreElements(); ) {", "-                    String affectedClass = (String)e2.nextElement();", "-                    ClassFileInfo info = (ClassFileInfo)affectedClasses.get(affectedClass);", "-                    log(\"   \" + affectedClass + \" in \" + info.absoluteFile.getPath(), Project.MSG_DEBUG);", "+            ", "+            if (dump) {            ", "+                log(\"Reverse Dependency Dump for \" + affectedClassMap.size() + ", "+                    \" classes:\", Project.MSG_DEBUG);", "+                for (Enumeration e = affectedClassMap.keys(); e.hasMoreElements(); ) {", "+                    String className = (String)e.nextElement();", "+                    log(\" Class \" + className + \" affects:\", Project.MSG_DEBUG);", "+                    Hashtable affectedClasses = (Hashtable)affectedClassMap.get(className);", "+                    for (Enumeration e2 = affectedClasses.keys(); e2.hasMoreElements(); ) {", "+                        String affectedClass = (String)e2.nextElement();", "+                        ClassFileInfo info = (ClassFileInfo)affectedClasses.get(affectedClass);", "+                        log(\"    \" + affectedClass + \" in \" + info.absoluteFile.getPath(), Project.MSG_DEBUG);", "+                    }", "+                ", "+                if (classJarDependencies != null) {", "+                    log(\"Jar dependencies (Forward):\", Project.MSG_DEBUG);", "+                    for (Enumeration e = classJarDependencies.keys(); e.hasMoreElements();) { ", "+                        String className = (String)e.nextElement();", "+                        log(\" Class \" + className + \" depends on:\", Project.MSG_DEBUG);", "+                        Hashtable jarDependencies = (Hashtable)classJarDependencies.get(className);", "+                        for (Enumeration e2 = jarDependencies.elements(); e2.hasMoreElements();) {", "+                            File jarFile = (File)e2.nextElement();", "+                            log(\"    \" + jarFile.getPath(), Project.MSG_DEBUG);", "+                        }", "+                    }", "+                }", "+                            ", "-*/            ", "+            ", "-            outOfDateClasses = new Vector();", "-            for (int i=0; i<srcPathList.length; i++) {", "+            outOfDateClasses = new Hashtable();", "+            for (int i=0; i < srcPathList.length; i++) {", "-        ", "-        ", "-        ", "+                }", "+            }", "+", "+            // now check jar dependencies", "+            if (classJarDependencies != null) {", "+                for (Enumeration e = classJarDependencies.keys(); e.hasMoreElements();) { ", "+                    String className = (String)e.nextElement();", "+                    if (!outOfDateClasses.containsKey(className)) {", "+                        ClassFileInfo info = (ClassFileInfo)classFileInfoMap.get(className);", "+                        Hashtable jarDependencies = (Hashtable)classJarDependencies.get(className);", "+                        for (Enumeration e2 = jarDependencies.elements(); e2.hasMoreElements();) {", "+                            File jarFile = (File)e2.nextElement();", "+                            if (jarFile.lastModified() > info.absoluteFile.lastModified()) {", "+                                log(\"Class \" + className + ", "+                                    \" is out of date with respect to \" + jarFile, Project.MSG_DEBUG);", "+                                outOfDateClasses.put(className, className);", "+                                break;", "+                            }", "+                        }", "+                    }", "-            deleteAllAffectedFiles();", "+            int count = deleteAllAffectedFiles();", "-            log(\"Duration = \" + (System.currentTimeMillis() - start));", "+            long duration = (System.currentTimeMillis() - start) / 1000;", "+            log(\"Deleted \" + count + \" out of date files in \" + duration + \" seconds\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80031b72d92c2a60ecccd0cd006f5b9c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/frontend/org/apache/ant/cli/Commandline.java", "commitBeforeChange": "752f49d5b18f9743f8e4a6dbdc8065d240d9c97a", "commitAfterChange": "da4e1a3aa99899d6aecc6d14c2a7498fa51647aa", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public static void start(String[] args, AntEnvironment config)", "signatureAfterChange": "     public void start(final String[] args, final AntEnvironment antEnv)", "diff": ["-     */", "-    public static void start(String[] args, AntEnvironment config) {", "-        // create a command line and use it to run ant", "-        Commandline commandline = new Commandline();", "-        commandline.process(args, config);", "-    }", "+    public void start(final String[] args, final AntEnvironment antEnv) {", "+", "+            URL buildSourceURL = determineBuildFile();", "+                     = FrontendUtils.getAntConfigFile(configFile);", "+            if (buildSourceURL.getProtocol().equals(\"file\")) {", "+                System.out.println(\"Buildfile: \" + buildSource);", "+            } else if (!config.isRemoteProjectAllowed()) {", "+                     + buildSourceURL);", "+            } else {", "+                System.out.println(\"Build: \" + buildSourceURL);", "+            project = parseProject(buildSourceURL);", "+                 = new DemuxOutputStream(mainFrame, false);", "+                 = new DemuxOutputStream(mainFrame, true);", "+            mainFrame.setProject(project);", "+            mainFrame.initialize(definedValues);"]}]}
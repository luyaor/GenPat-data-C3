{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "84464374b72540f4a7de8a95369a2f78", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e43d5cc84f864b0978256b5ff17a432", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "6b3d8a02956aad55938df6c7a1b2994a4acc5f6a", "commitAfterChange": "fe4a5cb02940376fddc661302141394be20d1f02", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 25, "signatureBeforeChange": "      private static void configure(Project project,                                   Object target,                                   Element element)         throws BuildException", "signatureAfterChange": "      private void configure(Object target, AttributeList attrs) throws BuildException", "diff": ["-    private static void configure(Project project,", "-                                  Object target,", "-                                  Element element)", "-        throws BuildException", "-    {", "-        NamedNodeMap nodeMap = element.getAttributes();", "-", "+    private void configure(Object target, AttributeList attrs) throws BuildException {", "-        for (int i = 0; i < nodeMap.getLength(); i++) {", "-            Node node = nodeMap.item(i);", "+        for (int i = 0; i < attrs.getLength(); i++) {", "+            // reflect these into the target", "-            // these should only be attribs, we won't see anything", "-            // else here.", "-", "-            if (node.getNodeType() == Node.ATTRIBUTE_NODE) {", "-                Attr attr = (Attr)node;", "-", "-                // reflect these into the target", "-", "-                Method setMethod = (Method)propertySetters.get(attr.getName());", "-                if (setMethod == null) {", "-                    if (attr.getName().equals(\"id\")) {", "-                        project.addReference(attr.getValue(), target);", "-                        continue;", "-                    }", "-", "-                    String msg = \"Configuration property \\\"\" + attr.getName() +", "-                        \"\\\" does not have a setMethod in \" + target.getClass();", "-                    throw new BuildException(msg);", "+            Method setMethod = (Method)propertySetters.get(attrs.getName(i));", "+            if (setMethod == null) {", "+                if (attrs.getName(i).equals(\"id\")) {", "+                    project.addReference(attrs.getValue(i), target);", "+                    continue;", "-                String value=replaceProperties(  attr.getValue(), project.getProperties() );", "-                try {", "-                    setMethod.invoke(target, new String[] {value});", "-                } catch (IllegalAccessException iae) {", "-                    String msg = \"Error setting value for attrib: \" +", "-                        attr.getName();", "-                    iae.printStackTrace();", "-                    throw new BuildException(msg);", "-                } catch (InvocationTargetException ie) {", "-                    String msg = \"Error setting value for attrib: \" +", "-                        attr.getName() + \" in \" + target.getClass().getName();", "-                    ie.printStackTrace();", "-                    ie.getTargetException().printStackTrace();", "-                    throw new BuildException(msg);", "-                }", "+                String msg = \"Class \" + target.getClass() +", "+                    \" doesn't support the \\\"\" + attrs.getName(i) + \"\\\" property\";", "+                throw new BuildException(msg);", "+            }", "+", "+            String value=replaceProperties(attrs.getValue(i), project.getProperties() );", "+            try {", "+                setMethod.invoke(target, new String[] {value});", "+            } catch (IllegalAccessException iae) {", "+                String msg = \"Error setting value for attrib: \" +", "+                    attrs.getName(i);", "+                iae.printStackTrace();", "+                throw new BuildException(msg);", "+            } catch (InvocationTargetException ie) {", "+                String msg = \"Error setting value for attrib: \" +", "+                    attrs.getName(i) + \" in \" + target.getClass().getName();", "+                ie.printStackTrace();", "+                ie.getTargetException().printStackTrace();", "+                throw new BuildException(msg);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e18e76125d176bd78f64d1cdd8de0dea", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "b3dffa5f955c1cd32b73ac3b100e648e1106de6c", "commitAfterChange": "b6ec4af9dd33b9a37fe18f1c2a043e67bdf0d67b", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 26, "signatureBeforeChange": "      private void configure(Object target, AttributeList attrs) throws BuildException", "signatureAfterChange": "      private void configure(Object target, AttributeList attrs) throws BuildException", "diff": ["-        // XXX", "-        // instead of doing this introspection each time around, I", "-        // should have a helper class to keep this info around for", "-        // each kind of class", "-", "-        Hashtable propertySetters = new Hashtable();", "-        BeanInfo beanInfo;", "-        try {", "-            beanInfo = Introspector.getBeanInfo(target.getClass());", "-        } catch (IntrospectionException ie) {", "-            String msg = \"Can't introspect class: \" + target.getClass();", "-            throw new BuildException(msg);", "-        }", "-", "-        PropertyDescriptor[] pda = beanInfo.getPropertyDescriptors();", "-        for (int i = 0; i < pda.length; i++) {", "-            PropertyDescriptor pd = pda[i];", "-            String property = pd.getName();", "-            Method setMethod = pd.getWriteMethod();", "-            if (setMethod != null) {", "-", "-                // make sure that there's only 1 param and that it", "-                // takes a String object, all other setMethods need", "-                // to get screened out", "-", "-                Class[] ma =setMethod.getParameterTypes();", "-                if (ma.length == 1) {", "-                    Class c = ma[0];", "-                    if (c.getName().equals(\"java.lang.String\")) {", "-                        propertySetters.put(property, setMethod);", "-                    }", "-                }", "-            }", "-        }", "+        IntrospectionHelper ih = ", "+            IntrospectionHelper.getHelper(target.getClass());", "+            String value=replaceProperties(attrs.getValue(i), ", "+                                           project.getProperties() );", "+            try {", "+                ih.setAttribute(project, target, ", "+                                attrs.getName(i).toLowerCase(), value);", "-            Method setMethod = (Method)propertySetters.get(attrs.getName(i));", "-            if (setMethod == null) {", "+            } catch (BuildException be) {", "-                    continue;", "+                } else {", "+                    be.setLocation(new Location(buildFile.toString(), ", "+                                                locator.getLineNumber(), ", "+                                                locator.getColumnNumber()));", "+                    throw be;", "-", "-                String msg = \"Class \" + target.getClass() +", "-                    \" doesn't support the \\\"\" + attrs.getName(i) + \"\\\" property\";", "-                throw new BuildException(msg);", "-            }", "-", "-            String value=replaceProperties(attrs.getValue(i), project.getProperties() );", "-            try {", "-                setMethod.invoke(target, new String[] {value});", "-            } catch (IllegalAccessException iae) {", "-                String msg = \"Error setting value for attrib: \" +", "-                    attrs.getName(i);", "-                iae.printStackTrace();", "-                throw new BuildException(msg);", "-            } catch (InvocationTargetException ie) {", "-                String msg = \"Error setting value for attrib: \" +", "-                    attrs.getName(i) + \" in \" + target.getClass().getName();", "-                ie.printStackTrace();", "-                ie.getTargetException().printStackTrace();", "-                throw new BuildException(msg);"]}]}
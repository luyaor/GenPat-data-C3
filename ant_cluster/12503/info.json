{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fe6dfa71e81261611a8ebdd71f20de8c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "097ffbb120f9c837f5ebaddc3b27e675", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/antlib/src/main/org/apache/tools/ant/SymbolTable.java", "commitBeforeChange": "1d2784e6d5429505b3b420e342992c22cd5373a6", "commitAfterChange": "6252354506953777f5b921b8746a54e7d317475a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 10, "signatureBeforeChange": "     void checkClass(final Class clz)  \tthrows BuildException", "signatureAfterChange": "     Factory checkClass(final Class clz)         throws BuildException", "diff": ["-    void checkClass(final Class clz) ", "-\tthrows BuildException {", "+    Factory checkClass(final Class clz) // Package on purpose", "+        throws BuildException {", "+        if (clz == null) return null;", "+", "-            // Class can have a \"no arg\" constructor or take a single ", "+            // Class can have a \"no arg\" constructor or take a single", "+                return new Factory(){", "+                        public Object create(Project p) {", "+                            try {", "+                                return clz.newInstance();", "+                            }", "+                            catch(Exception e) {", "+                                throw new BuildException(e);", "+                            }", "+                        }", "+", "+                        public Class getOriginalClass() {", "+                            return clz;", "+                        }", "+                    };", "-                clz.getConstructor(new Class[] {Project.class});", "+                final Constructor c =", "+                    clz.getConstructor(new Class[] {Project.class});", "+                return new Factory(){", "+                        public Object create(Project p) {", "+                            try {", "+                                return c.newInstance(new Object[]{p});", "+                            }", "+                            catch(Exception e) {", "+                                throw new BuildException(e);", "+                            }", "+                        }", "+", "+                        public Class getOriginalClass() {", "+                            return clz;", "+                        }", "+                    };", "-            final String message = ", "-\t\t\"No valid public constructor in \" + clz;", "+            final String message = \"No valid public constructor in \" + clz;", "+        }", "+        catch (NoClassDefFoundError ncdfe) {", "+            final String msg = \"Class cannot be loaded: \" + ncdfe.getMessage();", "+            throw new BuildException(msg, ncdfe);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69540978831264c5c30a9f19fb3be8fa", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/start/org/apache/ant/start/Main.java", "commitBeforeChange": "242af536519aef1a43fdce2fdb383762fb5b6ccc", "commitAfterChange": "e16a4c7b1db880e29d37406177e983142302af57", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void start(String frontend, String[] args)", "signatureAfterChange": "     public void start(String frontend, String defaultClass, String[] args)          throws InitException", "diff": ["-     */", "-    public void start(String frontend, String[] args) {", "-        try {", "-            InitConfig config = new InitConfig();", "-            URL frontendJar = new URL(config.getLibraryURL(), ", "+     */", "+    public void start(String frontend, String defaultClass, String[] args)", "+         throws InitException {", "+        try {             ", "+            InitConfig config = new InitConfig();", "+    ", "+            URL frontendJar = new URL(config.getLibraryURL(),", "-            ClassLoader frontEndLoader ", "-                = new URLClassLoader(frontendJars, config.getCoreLoader());", "-", "+            ClassLoader frontEndLoader", "+                 = new URLClassLoader(frontendJars, config.getCoreLoader());", "+    ", "-            String mainClass = getMainClass(frontendJar);", "-            System.out.println(\"Front end main class = \" + mainClass);", "-            if (mainClass == null) {", "-                mainClass = DEFAULT_COMMANDLINE_CLASS;", "+            if (frontendJar.getProtocol().equals(\"file\")) {", "+                File jarFile = new File(frontendJar.getFile());", "+                if (!jarFile.exists()) {", "+                    throw new InitException(\"Could not jar for frontend \\\"\" ", "+                        + frontend + \"\\\"\");", "+                }", "-            ", "+            String mainClass = getMainClass(frontendJar);", "+    ", "+            if (mainClass == null) {", "+                mainClass = defaultClass;", "+            }", "+    ", "+            if (mainClass == null) {", "+                throw new InitException(\"Unable to determine main class \"", "+                     + \" for \\\"\" + frontend + \"\\\" frontend\");", "+            }", "+    ", "-            Class commandLineClass = Class.forName(mainClass, true,", "+            Class frontendClass = Class.forName(mainClass, true,", "-", "+    ", "-                 = commandLineClass.getMethod(\"start\", param);", "+                 = frontendClass.getMethod(\"start\", param);", "+    ", "-            e.printStackTrace();", "+            throw new InitException(e);"]}]}
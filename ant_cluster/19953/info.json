{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "23ecabe371f5ebeba0fc3f8e5336fdfe", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d13a7ecb8900e906a6dc2df39c09062", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/depend/Depend.java", "commitBeforeChange": "e4a95755b95687bac2de13e36c61926ae4ccd33e", "commitAfterChange": "11f6c1a20bbb4a5c8b1b961f7c9870e11781c178", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                        Hashtable dependencies = (Hashtable)classpathDependencies.get(className);", "-                        for (Enumeration e2 = dependencies.elements(); e2.hasMoreElements();) {", "-                            File classpathFile = (File)e2.nextElement();", "-                            if (classpathFile.lastModified() > info.absoluteFile.lastModified()) {", "-                                log(\"Class \" + className + ", "+                        ", "+                        // if we have no info about the class - it may have been deleted already and we ", "+                        // are using cached info.", "+                        if (info != null) {", "+                            Hashtable dependencies = (Hashtable)classpathDependencies.get(className);", "+                            for (Enumeration e2 = dependencies.elements(); e2.hasMoreElements();) {", "+                                File classpathFile = (File)e2.nextElement();", "+                                if (classpathFile.lastModified() > info.absoluteFile.lastModified()) {", "+                                    log(\"Class \" + className + ", "-                                outOfDateClasses.put(className, className);", "-                                break;", "+                                    outOfDateClasses.put(className, className);", "+                                    break;", "+                                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a02ecda713f759df70fee40ce1a5fbab", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/antlib/AntLibManager.java", "commitBeforeChange": "58257e4ff6cc42fbd00bdf71cb1ecce4b1e117cc", "commitAfterChange": "cba254e641320b3864c7d81345b5c1d1f8fe79dc", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void configLibrary(InitConfig initConfig, Map librarySpecs,                                String libraryId,                                CircularDependencyChecker configuring,                                Map libraries, Map libPathsMap)          throws ExecutionException", "signatureAfterChange": "     private void configLibrary(InitConfig initConfig, Map librarySpecs,                                String libraryId,                                CircularDependencyChecker configuring,                                Map libraries, Map libPathsMap)          throws ExecutionException", "diff": ["-            List libPaths = (List) libPathsMap.get(libraryId);", "-            if (libPaths != null) {", "-                for (Iterator j = libPaths.iterator(); j.hasNext();) {", "-                    URL pathURL = (URL) j.next();", "-                    addLibPath(antLibrary, pathURL);", "+            if (libPathsMap != null) {", "+                List libPaths = (List) libPathsMap.get(libraryId);", "+                if (libPaths != null) {", "+                    for (Iterator j = libPaths.iterator(); j.hasNext();) {", "+                        URL pathURL = (URL) j.next();", "+                        addLibPath(antLibrary, pathURL);", "+                    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d2894effa1241c2ad820ca185c02e106", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e485354ccd9068e255994debd7b1c8cd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/manager/DefaultProjectManager.java", "commitBeforeChange": "087abe77e3929bc11311ae6f61999ce2bb798a24", "commitAfterChange": "73fde2c99d5e2a2a15ebe36d5a0b1f1eb439b427", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void executeTarget( final Project project, final String target, final TaskContext context )         throws TaskException", "signatureAfterChange": "       private TaskContext createBaseContext()         throws TaskException", "diff": ["-    public void executeTarget( final Project project, final String target, final TaskContext context )", "-        //HACK: should do this a better way !!!!!!", "-        m_componentManager.put( Project.ROLE, project );", "-        executeTargetWork( \"<init>\", project.getImplicitTarget(), context );", "-        execute( project, target, context );", "+", "+    private TaskContext createBaseContext()", "+        final TaskContext context = new DefaultTaskContext();", "+", "+        final String[] names = m_parameters.getNames();", "+        for( int i = 0; i < names.length; i++ )", "+        {", "+            final String value = m_parameters.getParameter( names[ i ], null );", "+            context.setProperty( names[ i ], value );", "+        }", "+", "+        //Add system properties so that they overide user-defined properties", "+        addToContext( context, System.getProperties() );", "+", "+        return context;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3eeb47e4600a53485269201a879769f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/optional/ScriptRunner.java", "commitBeforeChange": "ebefa298a138aaf7088ad1af981a392b895eff85", "commitAfterChange": "c0b535098106a3b4549151960da251a6e78e627e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void bindToComponent(ProjectComponent component)", "signatureAfterChange": "      private BSFManager createManager() throws BSFException", "diff": ["-     */", "-    public void bindToComponent(ProjectComponent component) {", "-        project = component.getProject();", "-        addBeans(project.getProperties());", "-        addBeans(project.getUserProperties());", "-        addBeans(project.getTargets());", "-        addBeans(project.getReferences());", "-        addBean(\"project\", project);", "-        addBean(\"self\", component);", "+    private BSFManager createManager() throws BSFException {", "+        if (manager != null) {", "+            return manager;", "+        }", "+        BSFManager m = new BSFManager();", "+        m.setClassLoader(getScriptClassLoader());", "+        if (getKeepEngine()) {", "+            BSFEngine e = manager.loadScriptingEngine(getLanguage());", "+            this.manager = m;", "+            this.engine  = e;", "+        }", "+        return m;"]}]}
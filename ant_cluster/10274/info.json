{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "02801f04e679f238875130dbc8b41cf9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a2856542a6f80ca61edb177fe40332d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "3f78457877d6713f35dc7b5d2838f4818f4f16dc", "commitAfterChange": "9a7f8d24f541c554cedaf2d7c947cdb2828b6609", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "         protected void scandir(String dir, String vpath, boolean fast)", "signatureAfterChange": "         protected void scandir(String dir, String vpath, boolean fast)", "diff": ["+            // avoid double scanning of directories, can only happen in fast mode", "+            if (fast && hasBeenScanned(vpath)) {", "+                return;", "+            }", "-", "-                FTPFile[] newfiles = ftp.listFiles();", "+                String completePath = null;", "+                if (!vpath.equals(\"\")) {", "+                    completePath = rootPath + remoteFileSep", "+                        + vpath.replace(File.separatorChar, remoteFileSep.charAt(0));", "+                } else {", "+                    completePath = rootPath;", "+                }", "+                FTPFile[] newfiles = listFiles(completePath, false);", "-                                if (!isExcluded(name)) {", "-                                    if (fast) {", "-                                        if (file.isSymbolicLink()) {", "-                                            scandir(file.getLink(),", "-                                                name + File.separator, fast);", "-                                        } else {", "-                                            scandir(file.getName(),", "-                                                name + File.separator, fast);", "-                                        }", "-                                    }", "-                                    dirsIncluded.addElement(name);", "-                                } else {", "-                                    dirsExcluded.addElement(name);", "-                                    if (fast && couldHoldIncluded(name)) {", "-                                        scandir(file.getName(),", "-                                                name + File.separator, fast);", "-                                    }", "-                                }", "+                                accountForIncludedDir(name,", "+                                    new AntFTPFile(ftp, file, completePath) , fast);", "-                                if (isIncluded(name)) {", "-                                    if (!isExcluded(name)) {", "-                                        filesIncluded.addElement(name);", "-                                    } else {", "-                                        filesExcluded.addElement(name);", "-                                    }", "-                                } else {", "-                                    filesNotIncluded.addElement(name);", "-                                }", "+                                accountForIncludedFile(name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8ffbaf6ee2be03ce8ea795e1a74d026", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "b04c338caa73cc14ad6e8b258280426c3522de38", "commitAfterChange": "4c83562c6c9f681cdcd17c86f5e3c68c910dd5f8", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     public File resolveFile(File file, String filename)", "signatureAfterChange": "     public File resolveFile(File file, String filename)", "diff": ["-        filename = filename.replace('/', File.separatorChar)", "-            .replace('\\\\', File.separatorChar);", "-", "-        // deal with absolute files", "-        if (isAbsolutePath(filename)) {", "-            return normalize(filename);", "-        }", "-        if (file == null) {", "-            return new File(filename);", "-        }", "-        File helpFile = new File(file.getAbsolutePath());", "-        StringTokenizer tok = new StringTokenizer(filename, File.separator);", "-        while (tok.hasMoreTokens()) {", "-            String part = tok.nextToken();", "-            if (part.equals(\"..\")) {", "-                helpFile = helpFile.getParentFile();", "-                if (helpFile == null) {", "-                    String msg = \"The file or path you specified (\"", "-                        + filename + \") is invalid relative to \"", "-                        + file.getPath();", "-                    throw new BuildException(msg);", "+        if (!isAbsolutePath(filename)) {", "+            char sep = File.separatorChar;", "+            filename = filename.replace('/', sep).replace('\\\\', sep);", "+            if (isContextRelativePath(filename)) {", "+                file = null;", "+                // on cygwin, our current directory can be a UNC;", "+                // assume user.dir is absolute or all hell breaks loose...", "+                String udir = System.getProperty(\"user.dir\");", "+                if (filename.charAt(0) == sep && udir.charAt(0) == sep) {", "+                    filename = dissect(udir)[0] + filename.substring(1);", "-            } else if (part.equals(\".\")) {", "-                // Do nothing here", "-            } else {", "-                helpFile = new File(helpFile, part);", "+            filename = new File(file, filename).getAbsolutePath();", "-        return new File(helpFile.getAbsolutePath());", "+        return normalize(filename);", "+    }"]}]}
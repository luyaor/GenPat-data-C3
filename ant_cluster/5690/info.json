{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f3191b37f5347a9296ba154123e26d8f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1609a40a57cc3ab7c376c6fe37cbf4b1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java", "commitBeforeChange": "821004a5407db28a7482cff8f928d92b7615ea36", "commitAfterChange": "d97f4f390c59827af8a3bfe380c1bf7d4a4a84a9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 13, "signatureBeforeChange": "     protected void addVendorFiles(Hashtable ejbFiles, String baseName)", "signatureAfterChange": "     protected void addVendorFiles(Hashtable ejbFiles, String baseName)", "diff": ["+        else {", "+            return;", "+        }", "-        // The the weblogic cmp deployment descriptor", "-        File weblogicCMPDD = new File(getDescriptorDir(), ddPrefix + WL_CMP_DD);", "-", "-        if (weblogicCMPDD.exists()) {", "-            ejbFiles.put(META_DIR + WL_CMP_DD,", "-                         weblogicCMPDD);", "+        if (oldCMP) {", "+            log(\"The old method for locating CMP files has been DEPRECATED.\", Project.MSG_INFO);", "+            log(\"Please adjust your weblogic descriptor and set oldCMP=\\\"false\\\" \" +", "+                \"to use the new CMP descriptor inclusion mechanism. \", Project.MSG_INFO);", "+            // The the weblogic cmp deployment descriptor", "+            File weblogicCMPDD = new File(getDescriptorDir(), ddPrefix + WL_CMP_DD);", "+                ", "+            if (weblogicCMPDD.exists()) {", "+                ejbFiles.put(META_DIR + WL_CMP_DD,", "+                             weblogicCMPDD);", "+            }", "+        }", "+        else {", "+            // now that we have the weblogic descriptor, we parse the file", "+            // to find other descriptors needed to deploy the bean.", "+            // this could be the weblogic-cmp-rdbms.xml or any other O/R", "+            // mapping tool descriptors.", "+            try", "+            {", "+                File ejbDescriptor = (File)ejbFiles.get(META_DIR + EJB_DD);", "+                SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();", "+                saxParserFactory.setValidating(true);", "+                SAXParser saxParser = saxParserFactory.newSAXParser();", "+                DescriptorHandler handler = getWebglogicDescriptorHandler(ejbDescriptor.getParentFile());", "+                saxParser.parse(new InputSource", "+                                (new FileInputStream", "+                                (weblogicDD)),", "+                                handler);", "+                                ", "+                Hashtable ht = handler.getFiles();", "+                Enumeration e = ht.keys();", "+                while(e.hasMoreElements()){", "+                    String key = (String)e.nextElement();", "+                    ejbFiles.put(key, ht.get(key));", "+                }", "+            }", "+            catch(Exception e)", "+            { ", "+                String msg = \"Exception while adding Vendor specific files: \" + e.toString();", "+                throw new BuildException(msg, e);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94da575dab708fce0350fb393ca430ce", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "62ff30c775164f20e004fc217cccbc9a0f4453ec", "commitAfterChange": "b57651f539a20ca5b1e4bb50eb2737eac648d622", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      protected Main(String[] args) throws BuildException", "signatureAfterChange": "      protected Main(String[] args) throws BuildException", "diff": ["+            } else if (arg.startsWith(\"-propertyfile\")) {", "+                try {", "+                    propertyFiles.addElement(args[i+1]);", "+                    i++;", "+                } catch (ArrayIndexOutOfBoundsException aioobe) {", "+                    String msg = \"You must specify a property filename when \" +", "+                        \"using the -propertyfile argument\";", "+                    System.out.println(msg);", "+                    return;", "+                }", "-", "-", "+        ", "+        }", "+", "+        // Load the property files specified by -propertyfile", "+        for (int propertyFileIndex=0;", "+             propertyFileIndex < propertyFiles.size();", "+             propertyFileIndex++) {", "+            String filename = (String) propertyFiles.elementAt(propertyFileIndex);", "+            Properties props = new Properties();", "+            try {", "+                FileInputStream fis = new FileInputStream(filename);", "+                props.load(fis);", "+            }", "+            catch (IOException e) {", "+                System.out.println(\"Could not load property file \"", "+                   + filename + \": \" + e.getMessage());", "+            }", "+            ", "+            // ensure that -D properties take precedence", "+            Enumeration propertyNames = props.propertyNames();", "+            while (propertyNames.hasMoreElements()) {", "+                String name = (String) propertyNames.nextElement();", "+                if (definedProps.getProperty(name) == null) {", "+                    definedProps.put(name, props.getProperty(name));", "+                }", "+            }"]}]}
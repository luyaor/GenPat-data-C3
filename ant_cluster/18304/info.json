{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0ad1c817bda9a07963478e499997f5cd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c0a8e4b89122bfe90820fb3286ca80a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "aa43e37a025cdf54b8914b8283e57419a253ed59", "commitAfterChange": "dee95e3acc5154aee03ff5f91f9a56426ae79f3f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void putNextEntry(ZipEntry ze) throws IOException", "signatureAfterChange": "     public void putNextEntry(ZipEntry archiveEntry) throws IOException", "diff": ["-    public void putNextEntry(ZipEntry ze) throws IOException {", "-        closeEntry();", "-        entry = ze;", "-        entries.add(entry);", "+     */", "+    public void putNextEntry(ZipEntry archiveEntry) throws IOException {", "+        if (finished) {", "+            throw new IOException(\"Stream has already been finished\");", "+        }", "+", "+        if (entry != null) {", "+            closeEntry();", "+        }", "+", "+        entry = new CurrentEntry(archiveEntry);", "+        entries.add(entry.entry);", "+", "+        setDefaults(entry.entry);", "+", "+        final Zip64Mode effectiveMode = getEffectiveZip64Mode(entry.entry);", "+        validateSizeInformation(effectiveMode);", "+", "+        if (shouldAddZip64Extra(entry.entry, effectiveMode)) {", "+", "+            Zip64ExtendedInformationExtraField z64 = getZip64Extra(entry.entry);", "+", "+            // just a placeholder, real data will be in data", "+            // descriptor or inserted later via RandomAccessFile", "+            ZipEightByteInteger size = ZipEightByteInteger.ZERO;", "+            if (entry.entry.getMethod() == STORED", "+                && entry.entry.getSize() != -1) {", "+                // actually, we already know the sizes", "+                size = new ZipEightByteInteger(entry.entry.getSize());", "+            }", "+            z64.setSize(size);", "+            z64.setCompressedSize(size);", "+            entry.entry.setExtra();", "+        }", "+", "+        if (entry.entry.getMethod() == DEFLATED && hasCompressionLevelChanged) {", "+            def.setLevel(level);", "+            hasCompressionLevelChanged = false;", "+        }", "+        writeLocalFileHeader(entry.entry);", "+    }", "-        if (entry.getMethod() == STORED && raf == null) {", "-            if (entry.getSize() == -1) {", "-            if (entry.getCrc() == -1) {", "-            entry.setCompressedSize(entry.getSize());", "-        if (entry.getMethod() == DEFLATED && hasCompressionLevelChanged) {", "-            def.setLevel(level);", "-            hasCompressionLevelChanged = false;", "-        writeLocalFileHeader(entry);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cccbe71fc773727032f9badc53c682a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/start/org/apache/ant/start/Main.java", "commitBeforeChange": "752f49d5b18f9743f8e4a6dbdc8065d240d9c97a", "commitAfterChange": "da4e1a3aa99899d6aecc6d14c2a7498fa51647aa", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void start(String frontend, String defaultClass, String[] args)          throws InitException", "signatureAfterChange": "     public void start(String frontendName, String[] args)          throws InitException", "diff": ["-    public void start(String frontend, String defaultClass, String[] args)", "+    public void start(String frontendName, String[] args)", "-            AntEnvironment config = new AntEnvironment(getClass());", "+            AntEnvironment antEnv = new AntEnvironment(getClass());", "-            URL frontendJar = new URL(config.getLibraryURL(),", "-                \"frontend/\" + frontend + \".jar\");", "+            URL frontendJar = new URL(antEnv.getLibraryURL(),", "+                \"frontend/\" + frontendName + \".jar\");", "-                 = new URLClassLoader(frontendJars, config.getCoreLoader());", "+                 = new URLClassLoader(frontendJars, antEnv.getCoreLoader());", "-                        + frontend + \"\\\" - expected at \" + frontendJar);", "+                        + frontendName + \"\\\" - expected at \" + frontendJar);", "-                mainClass = defaultClass;", "-            }", "-", "-            if (mainClass == null) {", "-                     + \" for \\\"\" + frontend + \"\\\" frontend\");", "+                     + \" for \\\"\" + frontendName + \"\\\" frontend\");", "-            final Class[] param = {Class.forName(\"[Ljava.lang.String;\"),", "-                AntEnvironment.class};", "-            final Method startMethod", "-                 = frontendClass.getMethod(\"start\", param);", "-            final Object[] argument = {args, config};", "-", "-            startMethod.invoke(null, argument);", "+            Frontend frontend = (Frontend) frontendClass.newInstance();", "+            frontend.start(args, antEnv);"]}]}
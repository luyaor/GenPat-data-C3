{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "31931bcc6cb477ef4c04f7e81b67b13d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7080d6f00caae51e75af70b89aa65e40", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/util/FileUtilsTest.java", "commitBeforeChange": "2e4d3619aa4a570f21af7f3649823636493b0f62", "commitAfterChange": "88c40c7306a8920dc569e3e3111ad42737cb0ecd", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void testToURI()", "signatureAfterChange": "     public void testToURI()", "diff": ["-            dosRoot = \"C:/\";", "+            dosRoot = System.getProperty(\"user.dir\").charAt(0) + \":/\";", "-            assertEquals(\"file:///\"+ dosRoot + \"foo\", fu.toURI(\"c:\\\\foo\"));", "-        }", "-        if (Os.isFamily(\"dos\")) {", "-            // this amounts to : are we under cygwin ?", "-            if (Character.isLowerCase(System.getProperty(\"user.dir\").charAt(0))) {", "-                dosRoot = \"c:/\";", "-            }", "+            assertEquals(\"file:///C:/foo\", fu.toURI(\"c:\\\\foo\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b60c298e66e5e5252ac7f47e99c25be8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/metamata/MMetrics.java", "commitBeforeChange": "271e0fe6fc223253e2c24c0f0f0c4fc4d9b58410", "commitAfterChange": "8af1905a98b1e04a63ab7473d64a41bfda91f15e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "     protected void checkOptions() throws BuildException", "signatureAfterChange": "     protected void checkOptions() throws BuildException", "diff": ["-        if ( !\"files\".equals(granularity) && !\"methods\".equals(granularity)", "-           && !\"types\".equals(granularity) ){", "-            throw new BuildException(\"Metrics reporting granularity is invalid. Must be one of 'files', 'methods', 'types'\");", "-        }", "-        if (outFile == null){", "+        if (outFile == null) {", "-        if (path == null && fileSets.size() == 0){", "+        if (path == null && fileSets.size() == 0) {", "-        if (path != null && fileSets.size() > 0){", "+        if (path != null && fileSets.size() > 0) {", "+        tmpFile = createTmpFile();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e127a8f7991b8b48f22ca7a4bd2e9fe1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "bb97500b49aa094fae4ad7770f31f1cd84148b6e", "commitAfterChange": "3f45fc1d3e95a270f2296d1f156a3bb21a73288a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void setWhenempty(String we) throws BuildException", "signatureAfterChange": "     public void setWhenempty(WhenEmpty we)", "diff": ["-    public void setWhenempty(String we) throws BuildException {", "-        we = we.toLowerCase();", "-        // XXX could instead be using EnumeratedAttribute, but this works", "-        if (!\"fail\".equals(we) && !\"skip\".equals(we) && !\"create\".equals(we))", "-            throw new BuildException(\"Unrecognized whenempty attribute: \" + we);", "-        emptyBehavior = we;", "+    public void setWhenempty(WhenEmpty we) {", "+        emptyBehavior = we.getValue();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed51e714b72fcc1bc78226f66c6aab8c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipFile.java", "commitBeforeChange": "d25f4c40213afd5342ccfb444b37b22523a46be2", "commitAfterChange": "7d02a9f6cf8ffa3710f69d9a9041a3bc78aa21b2", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private void positionAtCentralDirectory()         throws IOException", "signatureAfterChange": "     private void positionAtCentralDirectory()         throws IOException", "diff": ["-        long stopSearching = Math.max(0L, archive.length() - MAX_EOCD_SIZE);", "+        final long stopSearching =", "+            Math.max(0L, archive.length() - MAX_EOCD_SIZE);", "-            archive.seek(off);", "-            byte[] sig = ZipOutputStream.EOCD_SIG;", "-            int curr = archive.read();", "-            while (off >= stopSearching && curr != -1) {", "+            final byte[] sig = ZipOutputStream.EOCD_SIG;", "+            for (; off >= stopSearching; off--) {", "+                archive.seek(off);", "+                int curr = archive.read();", "+                if (curr == -1) {", "+                    break;", "+                }", "-                archive.seek(--off);", "-                curr = archive.read();"]}]}
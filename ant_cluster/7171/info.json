{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e80c3b398401b01cd99d214ad7bfb7d2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a8f0f2f905dc3adceb0cc4b6a0eaedd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/types/selectors/DependSelectorTest.java", "commitBeforeChange": "33832587a4070693dd77d6e08fcf4e7d0d9a2b99", "commitAfterChange": "126daf8b31f6c01d1c6891581195db9956142970", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void testSelectionBehaviour()", "signatureAfterChange": "     public void testSelectionBehaviour()", "diff": ["-            if (!JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)) {", "-                s = (DependSelector)getInstance();", "-                s.setTargetdir(beddir);", "-                m = s.createMapper();", "-                m.setType(merge);", "-                m.setTo(\"asf-logo.gif.gz\");", "-                results = selectionString(s);", "-                assertEquals(\"TFFFFTTTFFF\", results.substring(0,11));", "+            s = (DependSelector)getInstance();", "+            s.setTargetdir(beddir);", "+            m = s.createMapper();", "+            m.setType(merge);", "+            m.setTo(\"asf-logo.gif.gz\");", "+            results = selectionString(s);", "+            assertEquals(\"TFFFFTTTFFF\", results.substring(0,11));", "-                s = (DependSelector)getInstance();", "-                s.setTargetdir(beddir);", "-                m = s.createMapper();", "-                m.setType(merge);", "-                m.setTo(\"asf-logo.gif.bz2\");", "-                results = selectionString(s);", "-                assertEquals(\"TTFTTTTTTTTT\", results);", "+            s = (DependSelector)getInstance();", "+            s.setTargetdir(beddir);", "+            m = s.createMapper();", "+            m.setType(merge);", "+            m.setTo(\"asf-logo.gif.bz2\");", "+            results = selectionString(s);", "+            assertEquals(\"TTFTTTTTTTTT\", results);", "-                // Test for path relative to project base directory", "-                s = (DependSelector)getInstance();", "-                subdir = new File(\"selectortest/tar/bz2\");", "-                s.setTargetdir(subdir);", "-                m = s.createMapper();", "-                m.setType(glob);", "-                m.setFrom(\"*.bz2\");", "-                m.setTo(\"*.tar.bz2\");", "-                results = selectionString(s);", "-                assertEquals(\"FFTFFFFFFTTF\", results);", "-            }", "+            // Test for path relative to project base directory", "+            s = (DependSelector)getInstance();", "+            subdir = new File(\"selectortest/tar/bz2\");", "+            s.setTargetdir(subdir);", "+            m = s.createMapper();", "+            m.setType(glob);", "+            m.setFrom(\"*.bz2\");", "+            m.setTo(\"*.tar.bz2\");", "+            results = selectionString(s);", "+            assertEquals(\"FFTFFFFFFTTF\", results);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "959459f2703b87f2904885e17479546e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/types/selectors/DateSelectorTest.java", "commitBeforeChange": "33832587a4070693dd77d6e08fcf4e7d0d9a2b99", "commitAfterChange": "126daf8b31f6c01d1c6891581195db9956142970", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void testSelectionBehaviour()", "signatureAfterChange": "     public void testSelectionBehaviour()", "diff": ["-            if (!JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)) {", "-                s = (DateSelector)getInstance();", "-                s.setDatetime(\"11/21/2001 4:54 AM\");", "-                s.setWhen(before);", "-                results = selectionString(s);", "-                assertEquals(\"TFTFFFFFFFFT\", results);", "+            s = (DateSelector)getInstance();", "+            s.setDatetime(\"11/21/2001 4:54 AM\");", "+            s.setWhen(before);", "+            results = selectionString(s);", "+            assertEquals(\"TFTFFFFFFFFT\", results);", "-                s = (DateSelector)getInstance();", "-                s.setDatetime(\"11/21/2001 4:55 AM\");", "-                SimpleDateFormat formatter = new SimpleDateFormat();", "-                Date d = formatter.parse(\"11/21/2001 4:55 AM\",new ParsePosition(0));", "+            s = (DateSelector)getInstance();", "+            s.setDatetime(\"11/21/2001 4:55 AM\");", "+            SimpleDateFormat formatter = new SimpleDateFormat();", "+            Date d = formatter.parse(\"11/21/2001 4:55 AM\",new ParsePosition(0));", "-                long milliseconds = s.getMillis();", "-                s.setWhen(equal);", "-                results = selectionString(s);", "-                assertEquals(\"TTFFTFFFTTTT\", results);", "+            long milliseconds = s.getMillis();", "+            s.setWhen(equal);", "+            results = selectionString(s);", "+            assertEquals(\"TTFFTFFFTTTT\", results);", "-                s = (DateSelector)getInstance();", "-                s.setMillis(milliseconds);", "-                s.setWhen(equal);", "-                results = selectionString(s);", "-                assertEquals(\"TTFFTFFFTTTT\", results);", "+            s = (DateSelector)getInstance();", "+            s.setMillis(milliseconds);", "+            s.setWhen(equal);", "+            results = selectionString(s);", "+            assertEquals(\"TTFFTFFFTTTT\", results);", "-                s = (DateSelector)getInstance();", "-                s.setDatetime(\"11/21/2001 4:56 AM\");", "-                s.setWhen(after);", "-                results = selectionString(s);", "-                assertEquals(\"TFFTFTTTFFFT\", results);", "+            s = (DateSelector)getInstance();", "+            s.setDatetime(\"11/21/2001 4:56 AM\");", "+            s.setWhen(after);", "+            results = selectionString(s);", "+            assertEquals(\"TFFTFTTTFFFT\", results);", "-                s = (DateSelector)getInstance();", "-                Parameter param1 = new Parameter();", "-                Parameter param2 = new Parameter();", "-                param1.setName(\"datetime\");", "-                param1.setValue(\"11/21/2001 4:56 AM\");", "-                param2.setName(\"when\");", "-                param2.setValue(\"after\");", "-                Parameter[] params = {param1,param2};", "-                s.setParameters(params);", "-                results = selectionString(s);", "-                assertEquals(\"TFFTFTTTFFFT\", results);", "-            }", "+            s = (DateSelector)getInstance();", "+            Parameter param1 = new Parameter();", "+            Parameter param2 = new Parameter();", "+            param1.setName(\"datetime\");", "+            param1.setValue(\"11/21/2001 4:56 AM\");", "+            param2.setName(\"when\");", "+            param2.setValue(\"after\");", "+            Parameter[] params = {param1,param2};", "+            s.setParameters(params);", "+            results = selectionString(s);", "+            assertEquals(\"TFFTFTTTFFFT\", results);"]}]}
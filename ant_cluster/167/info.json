{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c4ad432e3cba14b7e408a3f9f1fed4c2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3408395fd2bc1ac76387fe5e641b08a1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "1cddc5e63805e05996e688f206169b36b4e8c9b3", "commitAfterChange": "911c5901fc2f65f707c8dd1866455bec8e19261c", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 40, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        // Apply the basetest attributes", "-        Enumeration e = allTests();", "-        while (e.hasMoreElements()) {", "-            BaseTest test = (BaseTest) e.nextElement();", "-            test.setFiltertrace(filterTrace);", "-            test.setHaltonerror(haltOnError);", "-            if (errorProperty != null) {", "-                test.setErrorProperty(errorProperty);", "-            }", "-            test.setHaltonfailure(haltOnFail);", "-            if (failureProperty != null) {", "-                test.setFailureProperty(failureProperty);", "-            }", "-            test.setFork(fork);", "-        }", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "664930139518fdba1f80530284445f22", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/Commandline.java", "commitBeforeChange": "b469445f8442be585a98b28f3e44c8e2083de93f", "commitAfterChange": "a252eb85435070911a166bc108952067a9a2d061", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "      public static String[] translateCommandline(String to_process)", "signatureAfterChange": "      public static String[] translateCommandline(String to_process)", "diff": ["-        StringTokenizer tok = new StringTokenizer(to_process, \"\\\\\\\"\\' \", true);", "+        StringTokenizer tok = new StringTokenizer(to_process, \"\\\"\\' \", true);", "-                    }", "-                } else if (\"\\\\\".equals(nextTok)) {", "-                    if (tok.hasMoreTokens()) {", "-                        String escapedToken = tok.nextToken();", "-                        char escapedChar = escapedToken.charAt(0);", "-                        if (escapedChar == '\\\\' || escapedChar == '\\'' ||", "-                            escapedChar == '\\\"') {", "-                            current.append(escapedToken);", "-                        }", "-                        else {", "-                            current.append(\"\\\\\" + escapedToken);", "-                        }", "-                    } else {", "-                        // just add the backslash", "-                        current.append(\"\\\\\");"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "963b83b3e9767d40d6f1d21df33c9ef2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06ce1299eab13a9ac83b44c999768b12", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/scm/AntStarTeamCheckOut.java", "commitBeforeChange": "f7def885dd7bc3f17bb095754a21805701d7ada7", "commitAfterChange": "7fbbcdf665363d7efd4fe092bc7b24bd8eb6d542", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "     protected void runItem( Server s,                              com.starbase.starteam.Project p,                              View v,                              Type t,                              Folder f,                              Item item )", "signatureAfterChange": "     protected void runItem( Server s,                              com.starbase.starteam.Project p,                              View v,                              Type t,                              Folder f,                              Item item,                             String tgt )", "diff": ["-                            Item item )", "+                            Item item,", "+                            String tgt )", "-        // Time to filter...", "-        boolean includeIt = false;", "-        boolean excludeIt = false;", "-", "-        // See if it fits any includes.", "-        if (getIncludes()!=null)", "-        {", "-            StringTokenizer inStr = new StringTokenizer(getIncludes(), \" \");", "-            while (inStr.hasMoreTokens())", "-            {", "-                if (match(inStr.nextToken(), pName))", "-                {", "-                    includeIt = true;", "-                }", "-            }", "-        }", "-", "-        // See if it fits any excludes.", "-        if (getExcludes()!=null)", "-        {", "-            StringTokenizer exStr = new StringTokenizer(getExcludes(), \" \");", "-            while (exStr.hasMoreTokens())", "-            {", "-                if (match(exStr.nextToken(), pName))", "-                {", "-                    excludeIt = true;", "-                }", "-            }", "-        }", "-", "-        // Don't check it out if", "-        // (a) It fits no include filters", "-        // (b) It fits an exclude filter", "-        if (!includeIt | excludeIt)", "-        {", "+        if ( !shouldCheckout(pName) ) {", "-        if (getVerboseAsBoolean())", "+        if (getVerbose())", "-            boolean bShowHeader = true;", "-            if (f != prevFolder)", "+            boolean bShowHeader = (f != prevFolder);", "+            if (bShowHeader)", "-                System.out.println(\"            Folder: \\\"\" + strFolder + \"\\\"\");", "+                log(\"            Folder: \\\"\" + strFolder + \"\\\"\");", "-            }", "-            else", "-                bShowHeader        = false;", "-            // If we displayed the project, view, item type, or folder,", "-            // then show the list of relevant item properties.", "-            if (bShowHeader)", "-            {", "-                System.out.print(\"                Item\");", "-                System.out.print(\",\\t\" + p1.getDisplayName());", "+                // If we displayed the project, view, item type, or folder,", "+                // then show the list of relevant item properties.", "+                StringBuffer header = new StringBuffer(\"                Item\");", "+                header.append(\",\\t\").append(p1.getDisplayName());", "-                    System.out.print(\",\\t\" + p2.getDisplayName());", "+                    header.append(\",\\t\").append(p2.getDisplayName());", "-                System.out.println(\"\");", "+                log(header.toString());", "-", "-            System.out.print(\"                \" + item.getItemID());", "+            StringBuffer itemLine = new StringBuffer(\"                \");", "+            itemLine.append(item.getItemID());", "-            System.out.print(\",\\t\" + formatForDisplay(p1, item.get(p1.getName())));", "+            itemLine.append(\",\\t\").append(formatForDisplay(p1, item.get(p1.getName())));", "-                System.out.print(\",\\t\" + formatForDisplay(p2, item.get(p2.getName())));", "+                itemLine.append(\",\\t\").append(formatForDisplay(p2, item.get(p2.getName())));", "-                System.out.println(\",\\tLocked by \" + locker);", "+                itemLine.append(\",\\tLocked by \").append(locker);", "-                System.out.println(\",\\tNot locked\");", "+                itemLine.append(\",\\tNot locked\");", "+            log(itemLine.toString());", "+        // Create a reference to the local target file using either the \"default path\" calculation or the calculation based", "+        // solely on targetFolder.", "+        java.io.File local = (getUsesDefaultFolder()", "+                              ? getLocalFileUsingDefault(v,item.getParentFolder().getFolderHierarchy(),(String)item.get(p1.getName()))", "+                              : getLocalFile(tgt,(String)item.get(p1.getName())));", "+        try", "+        {", "+            remote.checkoutTo(local, Item.LockType.UNCHANGED, false, true, true);", "+            checkedOut++;", "+        }", "+        catch (Exception e)", "+        {", "+            log(\"Failed to checkout '\" + local + \"': \" + e.getMessage(), Project.MSG_WARN);", "+            // probably not a good idea to swallow the stacktrace", "+        }", "+    }", "-                ", "-        StringTokenizer pathTokenizer = ", "-            new StringTokenizer(item.getParentFolder().getFolderHierarchy(), delim);", "-        // Create a reference to the local target file using the format listed above.", "-        java.io.File local = new java.io.File( getTargetFolder() + localName + ", "-                                               item.get(p1.getName()) );", "-        try", "-        {", "-            remote.checkoutTo(local, Item.LockType.UNCHANGED, false, true, true);", "-        }", "-        catch (Throwable e)", "-        {", "-            project.log(\"    \" + e.getMessage());", "-        }", "-        checkedOut++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "175d8a195217dac9ecc904d2c2d4fc8d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/BorlandDeploymentTool.java", "commitBeforeChange": "e72340e0a1f68e91bb515aeb4dcad300a14c6434", "commitAfterChange": "9361281f36fe9a45067848d2ae8465befb2f3dd1", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void buildBorlandStubs(Iterator ithomes,Hashtable files )", "signatureAfterChange": "     private void buildBorlandStubs(Iterator ithomes,Hashtable files )", "diff": ["-        org.apache.tools.ant.taskdefs.ExecTask execTask = null;", "-        File java2iiopOut = null;", "-        try {", "-            java2iiopOut = File.createTempFile(\"java2iiop\",\"log\");", "-            log(\" iiop log file : \"+ java2iiopOut ,Project.MSG_DEBUG);", "+        Execute execTask = null;", "-            execTask = (ExecTask) getTask().getProject().createTask(\"exec\");", "-            execTask.setOutput(java2iiopOut);", "-            if ( java2iiopdebug ) {", "-                execTask.createArg().setValue(\"-VBJdebug\");                ", "-            } // end of if ()", "-                       ", "-            execTask.setDir(getConfig().srcDir);", "-            execTask.setExecutable(JAVA2IIOP);", "-            //set the classpath ", "-            execTask.createArg().setValue(\"-VBJclasspath\");", "-            execTask.createArg().setPath(getCombinedClasspath());", "-            //list file", "-            execTask.createArg().setValue(\"-list_files\");", "-            //no TIE classes", "-            execTask.createArg().setValue(\"-no_tie\");", "-            //root dir", "-            execTask.createArg().setValue(\"-root_dir\");", "-            execTask.createArg().setValue(getConfig().srcDir.getAbsolutePath());", "-            //compiling order", "-            execTask.createArg().setValue(\"-compile\");", "-            //add the home class", "-            while ( ithomes.hasNext()) {", "-                execTask.createArg().setValue(ithomes.next().toString());                ", "-            } // end of while ()", "+        execTask = new Execute(this);", "+        Project project = getTask().getProject();", "+        execTask.setAntRun(project);", "+        execTask.setWorkingDirectory(project.getBaseDir());", "+        ", "+        Commandline commandline = new Commandline();", "+        commandline.setExecutable(JAVA2IIOP);", "+        //debug ?", "+        if ( java2iiopdebug ) {", "+            commandline.createArgument().setValue(\"-VBJdebug\");                ", "+        } // end of if ()", "+        //set the classpath ", "+        commandline.createArgument().setValue(\"-VBJclasspath\");", "+        commandline.createArgument().setPath(getCombinedClasspath());", "+        //list file", "+        commandline.createArgument().setValue(\"-list_files\");", "+        //no TIE classes", "+        commandline.createArgument().setValue(\"-no_tie\");", "+        //root dir", "+        commandline.createArgument().setValue(\"-root_dir\");", "+        commandline.createArgument().setValue(getConfig().srcDir.getAbsolutePath());", "+        //compiling order", "+        commandline.createArgument().setValue(\"-compile\");", "+        //add the home class", "+        while ( ithomes.hasNext()) {", "+            commandline.createArgument().setValue(ithomes.next().toString());                ", "+        } // end of while ()", "+", "+        try {", "-            execTask.execute();", "+            log(commandline.toString(),Project.MSG_DEBUG);", "+            execTask.setCommandline(commandline.getCommandline());", "+            int result = execTask.execute();", "+            if ( result != 0 ) {", "+                String msg = \"Failed executing java2iiop (ret code is \"+result+\")\";", "+                throw new BuildException(msg, getTask().getLocation());", "+            }                       ", "-        catch (Exception e) {", "-            // Have to catch this because of the semantics of calling main()", "-            String msg = \"Exception while calling java2iiop. Details: \" + e.toString();", "-            throw new BuildException(msg, e);", "-        }", "-", "-        try {", "-            FileReader fr = new FileReader(java2iiopOut);", "-            LineNumberReader lnr = new LineNumberReader(fr);", "-            String javafile;", "-            while ( ( javafile = lnr.readLine()) != null) {", "-                if ( javafile.endsWith(\".java\") ) {", "-                    String classfile = toClassFile(javafile);", "-                    ", "-                    String key = classfile.substring(getConfig().srcDir.getAbsolutePath().length()+1);", "-                    log(\" generated : \"+ classfile ,Project.MSG_DEBUG);", "-                    log(\" key       : \"+ key       ,Project.MSG_DEBUG);", "-                    files.put(key, new File(classfile));                                           ", "-                } // end of if ()                ", "-            } // end of while ()", "-            lnr.close();            ", "-        }", "-        catch(Exception e) {", "-            String msg = \"Exception while parsing  java2iiop output. Details: \" + e.toString();", "-            throw new BuildException(msg, e);", "-        }", "-", "-        //delete the output , only if all is succesfull", "-        java2iiopOut.delete();", "+        catch (java.io.IOException e) {", "+            log(\"java2iiop exception :\"+e.getMessage(),Project.MSG_ERR);", "+            throw new BuildException(e,getTask().getLocation());", "+        }            "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8edab8f1096db35ec57ae4373586ff60", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteOn.java", "commitBeforeChange": "575148a6633379d3f2c61d0cc838050b68929852", "commitAfterChange": "a7d38cf2639a85056062bdc2c3da1067cb84644a", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": "     protected void runExec(Execute exe) throws BuildException", "signatureAfterChange": "     protected void runExec(Execute exe) throws BuildException", "diff": ["-                    if (!\"dir\".equals(type)) {", "+                    if (!FileDirBoth.DIR.equals(type)) {", "-                        currentType = \"dir\";", "+                        currentType = FileDirBoth.DIR;", "-                if (!\"dir\".equals(currentType)) {", "+                if (!FileDirBoth.DIR.equals(currentType)) {", "-                if (!\"file\".equals(currentType)) {", "+                if (!FileDirBoth.FILE.equals(currentType)) {", "-                        = ((!\"dir\".equals(currentType))", "+                        = ((!FileDirBoth.DIR.equals(currentType))", "-                        + ((!\"file\".equals(currentType))", "+                        + ((!FileDirBoth.FILE.equals(currentType))", "-            for (int i = 0; i < filelists.size(); i++) {", "-                FileList list = (FileList) filelists.elementAt(i);", "-                File base = list.getDir(getProject());", "-                String[] names = getFilesAndDirs(list);", "+\t", "+\t    Iterator iter = resources.iterator();", "+\t    while (iter.hasNext()) {", "+\t\tResource res = (Resource) iter.next();", "-                for (int j = 0; j < names.length; j++) {", "-                    File f = new File(base, names[j]);", "-                    if ((!ignoreMissing) || (f.isFile() && !\"dir\".equals(type))", "-                        || (f.isDirectory() && !\"file\".equals(type))) {", "+\t\tif (!res.isExists() && ignoreMissing) {", "+\t\t    continue;", "+\t\t}", "-                        if (ignoreMissing || f.isFile()) {", "-                            totalFiles++;", "-                        } else {", "-                            totalDirs++;", "-                        }", "-                        fileNames.addElement(names[j]);", "-                        baseDirs.addElement(base);", "-                    }", "-                }", "-                if (fileNames.size() == 0 && skipEmpty) {", "-                    DirectoryScanner ds = new DirectoryScanner();", "-                    ds.setBasedir(base);", "-                    ds.setIncludes(list.getFiles(getProject()));", "-                    ds.scan();", "-                    int includedCount", "-                        = ds.getIncludedFilesCount() + ds.getIncludedDirsCount();", "+\t\tFile base = null;", "+\t\tString name = res.getName();", "+\t\tif (res instanceof FileResource) {", "+\t\t    FileResource fr = (FileResource) res;", "+\t\t    base = fr.getBaseDir();", "+\t\t    if (base == null) {", "+\t\t\tname = fr.getFile().getAbsolutePath();", "+\t\t    }", "+\t\t}", "-                    log(\"Skipping filelist for directory \" + base + \". It is \"", "-                        + ((includedCount > 0) ? \"up to date.\" : \"empty.\"),", "-                        Project.MSG_INFO);", "-                    continue;", "-                }", "+\t\tif (restrict(new String[] {name}, base).length == 0) {", "+\t\t    continue;", "+\t\t}", "+", "+\t\tif ((!res.isDirectory() || !res.isExists())", "+\t\t    && !FileDirBoth.DIR.equals(type)) {", "+\t\t    totalFiles++;", "+\t\t} else if (res.isDirectory() && !FileDirBoth.FILE.equals(type)) {", "+\t\t    totalDirs++;", "+\t\t} else {", "+\t\t    continue;", "+\t\t}", "+", "+\t\tbaseDirs.add(base);", "+\t\tfileNames.add(name);", "+", "-                    String[] s = new String[fileNames.size()];", "-                    fileNames.copyInto(s);", "-                    for (int j = 0; j < s.length; j++) {", "-                        String[] command = getCommandline(s[j], base);", "-                        log(Commandline.describeCommand(command),", "-                            Project.MSG_VERBOSE);", "-                        exe.setCommandline(command);", "+\t\t    String[] command = getCommandline(name, base);", "+\t\t    log(Commandline.describeCommand(command),", "+\t\t\tProject.MSG_VERBOSE);", "+\t\t    exe.setCommandline(command);", "-                        if (redirectorElement != null) {", "-                            setupRedirector();", "-                            redirectorElement.configure(redirector, s[j]);", "-                        }", "-                        if (redirectorElement != null || haveExecuted) {", "-                            // need to reset the stream handler to restart", "-                            // reading of pipes;", "-                            // go ahead and do it always w/ nested redirectors", "-                            exe.setStreamHandler(redirector.createHandler());", "-                        }", "-                        runExecute(exe);", "-                        haveExecuted = true;", "-                    }", "-                    fileNames.removeAllElements();", "-                    baseDirs.removeAllElements();", "-                }", "+\t\t    if (redirectorElement != null) {", "+\t\t\tsetupRedirector();", "+\t\t\tredirectorElement.configure(redirector, name);", "+\t\t    }", "+\t\t    if (redirectorElement != null || haveExecuted) {", "+\t\t\t// need to reset the stream handler to restart", "+\t\t\t// reading of pipes;", "+\t\t\t// go ahead and do it always w/ nested redirectors", "+\t\t\texe.setStreamHandler(redirector.createHandler());", "+\t\t    }", "+\t\t    runExecute(exe);", "+\t\t    haveExecuted = true;", "+\t\t    fileNames.removeAllElements();", "+\t\t    baseDirs.removeAllElements();", "+\t\t}", "-            }", "+\t    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e18c20d41f478be890b71e8e8cdd497b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Available.java", "commitBeforeChange": "b6e535486e4b58d1ae642fa6e7ea1e3e45bc24e2", "commitAfterChange": "8a676908c40081a254a7af5955d7e2065ecffbd1", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      private boolean checkFile()", "signatureAfterChange": "      private boolean checkFile()", "diff": ["-            return checkFile(file);", "+            return checkFile(project.resolveFile(file), file);", "-                String dirname = path.getParent();", "-                if (type != null) {", "-                    if (type.equalsIgnoreCase(\"dir\")) {", "-                        if (path.isFile()) {", "-                            // full-pathname specified", "-                            if (dirname.equals(path.toString())) {", "-                                log(\"Found directory: \" + path, Project.MSG_VERBOSE);", "-                                return true;", "-                            // simple name specified", "-                            } else if(new File(dirname, file).isDirectory()) {", "-                                log(\"Found directory: \" + dirname + File.separator + file, Project.MSG_VERBOSE);", "-                                return true;", "-                            }", "-                        // full-pathname specified", "-                        } else if (path.toString().equals(new File(file).toString()) && path.isDirectory()) {", "-                                log(\"Found directory: \" + path, Project.MSG_VERBOSE);", "-                                return true;", "-                        // simple name specified", "-                        } else if (new File(path, file).isDirectory()) {", "-                                log(\"Found directory: \" + path + File.separator + file, Project.MSG_VERBOSE);", "-                                return true;", "-                        }", "-                    /* end check for type dir */", "-                    } else {", "-                        if (path.toString().equals(new File(file).toString()) && path.isFile()) {", "-                                log(\"Found file: \" + path, Project.MSG_VERBOSE);", "-                                return true;", "-                        } else if (new File(path, file).isFile()) {", "-                            log(\"Found file: \" + path + File.separator + file, Project.MSG_VERBOSE);", "-                            return true;", "-                        } else if (new File(dirname, file).isFile()) {", "-                            log(\"Found file: \" + dirname + File.separator + file, Project.MSG_VERBOSE);", "-                            return true;", "-                        }", "-                    }", "-                /* end check for specified type */", "-                } else {", "-                    if (path.toString().equals(new File(file).toString())) {", "+", "+                // **   full-pathname specified == path in list", "+                // **   simple name specified   == path in list", "+                if (path.exists() && file.equals(paths[i])) {", "+                    if (type == null) {", "-                    } else if (new File(path, file).exists()) {", "-                        log(\"Found: \" + path + File.separator + file, Project.MSG_VERBOSE);", "+                    } else if (type.equalsIgnoreCase(\"dir\") ", "+                               && path.isDirectory()) {", "+                        log(\"Found directory: \" + path, Project.MSG_VERBOSE);", "-                    } else if (new File(dirname, file).exists()) {", "-                        log(\"Found: \" + dirname + File.separator + file, Project.MSG_VERBOSE);", "+                    } else if (type.equalsIgnoreCase(\"file\") ", "+                               && path.isFile()) {", "+                        log(\"Found file: \" + path, Project.MSG_VERBOSE);", "-                    } else {", "-                        File dir = new File(dirname);", "-                        dirname = dir.getParent();", "-                        if (new File(dirname, file).exists()) {", "-                            log(\"Found: \" + dirname + File.separator + file, Project.MSG_VERBOSE);", "+                    }", "+                    // not the requested type", "+                    return false;", "+                }", "+                ", "+                FileUtils fileUtils = FileUtils.newFileUtils();", "+                File parent = fileUtils.getParentFile(path);", "+                // **   full-pathname specified == parent dir of path in list", "+                if (parent != null && parent.exists() ", "+                    && file.equals(parent.getAbsolutePath())) {", "+                    if (type == null) {", "+                        log(\"Found: \" + parent, Project.MSG_VERBOSE);", "+                        return true;", "+                    } else if (type.equalsIgnoreCase(\"dir\")) {", "+                        log(\"Found directory: \" + parent, Project.MSG_VERBOSE);", "+                        return true;", "+                    }", "+                    // not the requested type", "+                    return false;", "+                }", "+", "+                // **   simple name specified   == path in list + name", "+                if (path.exists() && path.isDirectory()) {", "+                    if (checkFile(new File(path, file), ", "+                                  file + \" in \" + path)) {", "+                        return true;", "+                    }", "+                }", "+                ", "+                // **   simple name specified   == parent dir + name", "+                if (parent != null && parent.exists()) {", "+                    if (checkFile(new File(parent, file), ", "+                                  file + \" in \" + parent)) {", "+                        return true;", "+                    }", "+                }", "+                ", "+                // **   simple name specified   == parent of parent dir + name", "+                if (parent != null) {", "+                    File grandParent = fileUtils.getParentFile(parent);", "+                    if (grandParent != null && grandParent.exists()) {", "+                        if (checkFile(new File(grandParent, file), ", "+                                      file + \" in \" + grandParent)) {"]}]}
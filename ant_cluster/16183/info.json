{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9666a8bd3c133c6938c35f1e73582a31", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0afba19811a370c7e28c6abcb464ef8f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/GenericDeploymentTool.java", "commitBeforeChange": "1cd764447cbd26e40fb0b78aaa4b4cf3398d2a9a", "commitAfterChange": "a50b60cdd9337ee2978a7f1522cf4963785f7aa9", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     protected void writeJar(String baseName, File jarfile, Hashtable files,                              String publicId) throws BuildException", "signatureAfterChange": "     protected void writeJar(String baseName, File jarfile, Hashtable files,                              String publicId) throws BuildException", "diff": ["-            String defaultManifest = \"/org/apache/tools/ant/defaultManifest.mf\";", "-            InputStream in = this.getClass().getResourceAsStream(defaultManifest);", "-            if ( in == null ) {", "-                throw new BuildException ( \"Could not find: \" + defaultManifest );", "+            InputStream in = null;", "+            Manifest manifest = null;", "+            try {", "+                if (config.manifest != null) {", "+                    in = new FileInputStream(config.manifest);", "+                    if ( in == null ) {", "+                        throw new BuildException(\"Could not find manifest file: \" + config.manifest, ", "+                                                  getLocation());", "+                    }", "+                }", "+                else {", "+                    String defaultManifest = \"/org/apache/tools/ant/defaultManifest.mf\";", "+                    in = this.getClass().getResourceAsStream(defaultManifest);", "+                    if ( in == null ) {", "+                        throw new BuildException(\"Could not find default manifest: \" + defaultManifest,", "+                                                  getLocation());", "+                    }", "+                }", "+                            ", "+                manifest = new Manifest(in);", "+            }", "+            catch (IOException e) {", "+                throw new BuildException (\"Unable to read manifest\", e, getLocation());", "+            }", "+            finally {", "+                if (in != null) {", "+                    in.close();", "+                }", "-            Manifest manifest = new Manifest(in);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d0f80bab2d092b48abf6659083e57b8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/javacc/JavaCC.java", "commitBeforeChange": "46c40044e121ccf6096148a2def4159a4887e405", "commitAfterChange": "5c5152c705ed97f52e319498b7fcb7e639f75cc8", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     protected static String getMainClass(File home, int type)          throws BuildException", "signatureAfterChange": "     protected static String getMainClass(File home, int type)          throws BuildException", "diff": ["-            case 1:", "-            case 2:", "-                packagePrefix = COM_PACKAGE;", "+        case 1:", "+        case 2:", "+            packagePrefix = COM_PACKAGE;", "-                switch (type) {", "-                    case TASKDEF_TYPE_JAVACC:", "-                        mainClass = COM_JAVACC_CLASS;", "-", "-                        break;", "-", "-                    case TASKDEF_TYPE_JJTREE:", "-                        mainClass = COM_JJTREE_CLASS;", "-", "-                        break;", "-", "-                    case TASKDEF_TYPE_JJDOC:", "-                        mainClass = COM_JJDOC_CLASS;", "-", "-                        break;", "-                }", "+            switch (type) {", "+            case TASKDEF_TYPE_JAVACC:", "+                mainClass = COM_JAVACC_CLASS;", "-            case 3:", "-                packagePrefix = ORG_PACKAGE;", "-", "-                switch (type) {", "-                    case TASKDEF_TYPE_JAVACC:", "-                        mainClass = ORG_JAVACC_CLASS;", "-", "-                        break;", "-", "-                    case TASKDEF_TYPE_JJTREE:", "-                        mainClass = ORG_JJTREE_CLASS;", "-", "-                        break;", "-", "-                    case TASKDEF_TYPE_JJDOC:", "-                        mainClass = ORG_JJDOC_CLASS;", "-", "-                        break;", "-                }", "+            case TASKDEF_TYPE_JJTREE:", "+                mainClass = COM_JJTREE_CLASS;", "+", "+            case TASKDEF_TYPE_JJDOC:", "+                mainClass = COM_JJDOC_CLASS;", "+", "+                break;", "+            }", "+", "+            break;", "+", "+        case 3:", "+            /* ", "+             * This is where the fun starts, JavaCC 3.0 uses", "+             * org.netbeans.javacc, 3.1 uses org.javacc - I wonder", "+             * which version is going to use net.java.javacc.", "+             *", "+             * Look into to the archive to pick up the best", "+             * package.", "+             */", "+            ZipFile zf = null;", "+            try {", "+                zf = new ZipFile(getArchiveFile(home));", "+                if (zf.getEntry(ORG_PACKAGE.replace('.', '/')) != null) {", "+                    packagePrefix = ORG_PACKAGE;", "+                } else {", "+                    packagePrefix = ORG_JAVACC_PACKAGE;", "+                }", "+            } catch (IOException e) {", "+                throw new BuildException(\"Error reading javacc.jar\", e);", "+            } finally {", "+                if (zf != null) {", "+                    try {", "+                        zf.close();", "+                    } catch (IOException e) {", "+                        throw new BuildException(e);", "+                    }", "+                }", "+            }", "+", "+            switch (type) {", "+            case TASKDEF_TYPE_JAVACC:", "+                mainClass = ORG_JAVACC_CLASS;", "+", "+                break;", "+", "+            case TASKDEF_TYPE_JJTREE:", "+                mainClass = ORG_JJTREE_CLASS;", "+", "+                break;", "+", "+            case TASKDEF_TYPE_JJDOC:", "+                mainClass = ORG_JJDOC_CLASS;", "+", "+                break;", "+            }", "+", "+            break;"]}]}
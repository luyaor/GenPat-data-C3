{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "08ced56ac4a5171ecc559450a4085fe3", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6937cdffbca2997f79f80ae116813244", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/MacroDefTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public void testIgnoreCase()", "signatureAfterChange": "      @Test     public void testIgnoreCase()", "diff": ["+    @Test", "-        expectLog(", "-            \"ignorecase\",", "-            \"a is ab is b\");", "+        buildRule.executeTarget(\"ignorecase\");", "+\t\tassertEquals(\"a is ab is b\", buildRule.getLog());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b58b5c264080c33f521a9b90284b19c6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/MacroDefTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void testEscape()", "signatureAfterChange": "     @Test     public void testEscape()", "diff": ["+    @Test", "-        expectLog(", "-            \"escape\",", "-            \"a@b or a@b is avalue@bvalue\");", "+        buildRule.executeTarget(\"escape\");", "+\t\tassertEquals(\"a@b or a@b is avalue@bvalue\", buildRule.getLog());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b722cd5ecf010883047babd0199bb033", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/MacroDefTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": "      public void testIgnoreElementCase()", "signatureAfterChange": "      @Test     public void testIgnoreElementCase()", "diff": ["+    @Test", "-        expectLog(", "-            \"ignore-element-case\",", "-            \"nested elementnested element\");", "+        buildRule.executeTarget(\"ignore-element-case\");", "+\t\tassertEquals(\"nested elementnested element\", buildRule.getLog());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc085a6737f6d487bfdfabf9a8a9284c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/MacroDefTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 15, "signatureBeforeChange": "     public void testAttributeDescription()", "signatureAfterChange": "     @Test     public void testAttributeDescription()", "diff": ["+    @Test", "-        expectLog(", "-            \"attribute.description\",", "-            \"description is hello world\");", "+        buildRule.executeTarget(\"attribute.description\");", "+\t\tassertEquals(\"description is hello world\", buildRule.getLog());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df4930683d4c253947168eb2f0d98ba6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/MacroDefTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void testOverrideDefault()", "signatureAfterChange": "     @Test     public void testOverrideDefault()", "diff": ["+    @Test", "-        expectLog(", "-            \"override.default\",", "-            \"value is new\");", "+        buildRule.executeTarget(\"override.default\");", "+\t\tassertEquals(\"value is new\", buildRule.getLog());"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "88f27e7ea201fba072c32cbca82faa5f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43110368f8a7ffba986c5f03a8693ae6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Java.java", "commitBeforeChange": "5e898465ac1ab3d90fdc26dc34a2b87a2ea9be35", "commitAfterChange": "c5faebbd854cf6f4363402c2cd2a54749b4eeb61", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 14, "signatureBeforeChange": "     protected void run(String classname, Vector args) throws BuildException", "signatureAfterChange": "     protected void run(String classname, Vector args) throws BuildException", "diff": ["-        try {", "-            Class c = null;", "-            if (classpath == null) {", "-                c = Class.forName(classname);", "-            } ", "-            else {", "-                AntClassLoader loader = new AntClassLoader(project, classpath);", "-                c = loader.forceLoadClass(classname);", "-            }", "-        ", "-            Class[] param = { Class.forName(\"[Ljava.lang.String;\") };", "-            Method main = c.getMethod(\"main\", param);", "-            Object[] a = { array(args) };", "-            main.invoke(null, a);", "-        } catch (NullPointerException e) {", "-            throw new BuildException(\"Could not find main() method in \" + classname);", "-        } catch (ClassNotFoundException e) {", "-            throw new BuildException(\"Could not find \" + classname + \". Make sure you have it in your classpath\");", "-        } catch (InvocationTargetException e) {", "-            Throwable t = e.getTargetException();", "-            if (!(t instanceof SecurityException)) {", "-                throw new BuildException(t.toString());", "-            }", "-            // else ignore because the security exception is thrown", "-            // if the invoked application tried to call System.exit()", "-        } catch (Exception e) {", "-            throw new BuildException(e.toString());", "+        CommandlineJava cmdj = new CommandlineJava();", "+        cmdj.setClassname(classname);", "+        for (int i=0; i<args.size(); i++) {", "+            cmdj.createArgument().setValue((String) args.elementAt(i));", "+        if (cmdl.getClasspath() != null) {", "+            cmdj.createClasspath(project).append(cmdl.getClasspath());", "+        }", "+        run(cmdj);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54ed4e61bd0810e784ce8a617c4e5122", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/Javah.java", "commitBeforeChange": "5ffacddada00339f7c26549ff306e1d4fa04fc41", "commitAfterChange": "13b07b313fdc7ab2620f71517ab16698be496f24", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private void doClassicCompile() throws BuildException", "signatureAfterChange": "     public String[] getClasses()", "diff": ["+     */", "+    public String[] getClasses() {", "+        ArrayList al = new ArrayList();", "+        if (cls != null) {", "+            StringTokenizer tok = new StringTokenizer(cls, \",\", false);", "+            while (tok.hasMoreTokens()) {", "+                al.add(tok.nextToken().trim());", "+            }", "+        }", "+", "+        Enumeration e = classes.elements();", "+        while (e.hasMoreElements()) {", "+            ClassArgument arg = (ClassArgument) e.nextElement();", "+            al.add(arg.getName());", "+        }", "+        return (String[]) al.toArray(new String[0]);", "+    }", "-", "-    private void doClassicCompile() throws BuildException {", "-        Commandline cmd = setupJavahCommand();", "-", "-        // Use reflection to be able to build on all JDKs", "-        /*", "-        // provide the compiler a different message sink - namely our own", "-        sun.tools.javac.Main compiler =", "-                new sun.tools.javac.Main(new LogOutputStream(this, Project.MSG_WARN), \"javac\");", "-", "-        if (!compiler.compile(cmd.getArguments())) {", "-            throw new BuildException(\"Compile failed\");", "-        }", "-        */", "-", "-", "-        try {", "-            Class javahMainClass = null;", "-            try {", "-                // first search for the \"old\" javah class in 1.4.2 tools.jar", "-                javahMainClass = Class.forName(\"com.sun.tools.javah.oldjavah.Main\");", "-            } catch (ClassNotFoundException cnfe) {", "-                // assume older than 1.4.2 tools.jar", "-                javahMainClass = Class.forName(\"com.sun.tools.javah.Main\");", "-            }", "-", "-            // now search for the constructor that takes in String[] arguments.", "-            Class[] strings = new Class[] {String[].class};", "-            Constructor constructor = javahMainClass.getConstructor(strings);", "-", "-            // construct the javah Main instance", "-            Object javahMain = constructor.newInstance(new Object[] {cmd.getArguments()});", "-", "-            // find the run method", "-            Method runMethod = javahMainClass.getMethod(\"run\", new Class[0]);", "-", "-            runMethod.invoke(javahMain, new Object[0]);", "-        } catch (Exception ex) {", "-            if (ex instanceof BuildException) {", "-                throw (BuildException) ex;", "-            } else {", "-                throw new BuildException(\"Error starting javah: \" + ex, ex, getLocation());", "-            }"]}]}
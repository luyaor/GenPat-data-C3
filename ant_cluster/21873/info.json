{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b3754d9610601e7b451f89a448e39307", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d7e6a317f61f5535678cdf92defe4fb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Rmic.java", "commitBeforeChange": "926fcdcbeb003e509c0a1d03208f0eab2bab6813", "commitAfterChange": "5cc29f61e6a8fbcf8cb8f0fe2f848955c41f486a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 35, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        if (iiop) {", "-            log(\"IIOP has been turned on.\", Project.MSG_INFO);", "-            if( iiopopts != null ) {", "-                log(\"IIOP Options: \" + iiopopts, Project.MSG_INFO );", "-            }", "-        }", "-        if (idl) {", "-            log(\"IDL has been turned on.\", Project.MSG_INFO);", "-            if( idlopts != null ) {", "-                log(\"IDL Options: \" + idlopts, Project.MSG_INFO );", "-            }", "-        }", "-        Path classpath = getCompileClasspath(baseDir);", "+        String compiler = project.getProperty(\"build.rmic\");", "+        RmicAdapter adapter = RmicAdapterFactory.getRmic(compiler, this );", "+", "+        Path classpath = adapter.getClasspath();", "-            scanDir(baseDir, files);", "+            scanDir(baseDir, files, adapter.getMapper());", "-                    new String[] {classname.replace('.', File.separatorChar) + \".class\"});", "+                    new String[] {classname.replace('.', File.separatorChar) + \".class\"},", "+                    adapter.getMapper());", "-        // XXX", "-        // need to provide an input stream that we read in from!", "-", "-        OutputStream logstr = new LogOutputStream(this, Project.MSG_WARN);", "-        sun.rmi.rmic.Main compiler = new sun.rmi.rmic.Main(logstr, \"rmic\");", "-        Commandline cmd = new Commandline();", "-        ", "-        cmd.createArgument().setValue(\"-d\");", "-        cmd.createArgument().setFile(baseDir);", "-        cmd.createArgument().setValue(\"-classpath\");", "-        cmd.createArgument().setPath(classpath);", "-        if (null != stubVersion) {", "-            if (\"1.1\".equals(stubVersion))", "-                cmd.createArgument().setValue(\"-v1.1\");", "-            else if (\"1.2\".equals(stubVersion))", "-                cmd.createArgument().setValue(\"-v1.2\");", "-            else", "-                cmd.createArgument().setValue(\"-vcompat\");", "-        }", "-        if (null != sourceBase)", "-            cmd.createArgument().setValue(\"-keepgenerated\");", "-", "-        if( iiop ) {", "-            cmd.createArgument().setValue(\"-iiop\");", "-            if( iiopopts != null ) ", "-                cmd.createArgument().setValue(iiopopts);", "-        }", "-", "-        if( idl )  {", "-            cmd.createArgument().setValue(\"-idl\");", "-            if( idlopts != null ) ", "-                cmd.createArgument().setValue(idlopts);", "-        }", "-        if( debug )  {", "-            cmd.createArgument().setValue(\"-g\");", "-        }", "-", "-            for (int j = 0; j < fileCount; j++) {", "-                cmd.createArgument().setValue((String) compileList.elementAt(j));", "+            // now we need to populate the compiler adapter", "+            adapter.setRmic( this );", "+", "+            // finally, lets execute the compiler!!", "+            if (!adapter.execute()) {", "+                throw new BuildException(FAIL_MSG, location);", "-            log(\"Compilation args: \" + cmd.toString(), Project.MSG_VERBOSE);", "-            compiler.compile(cmd.getArguments());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "427aeb872b725f5cc9442b8dc7f628a9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javac.java", "commitBeforeChange": "c1a5419faf39033ffc2db1dcf8000f6a796f2dad", "commitAfterChange": "4ca5683c2a54ff4a141ed562a0f3b431b153b2c2", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private boolean doJikesCompile() throws BuildException", "signatureAfterChange": "     public boolean getDeprecation()", "diff": ["+    /** Gets the deprecation flag. */", "+    public boolean getDeprecation() {", "+        return deprecation;", "-     */", "-    private boolean doJikesCompile() throws BuildException {", "-        log(\"Using jikes compiler\", Project.MSG_VERBOSE);", "-", "-        Path classpath = new Path(project);", "-", "-        // Jikes doesn't support bootclasspath dir (-bootclasspath)", "-        // so we'll emulate it for compatibility and convenience.", "-        if (bootclasspath != null) {", "-            classpath.append(bootclasspath);", "-        }", "-", "-        // Jikes doesn't support an extension dir (-extdir)", "-        // so we'll emulate it for compatibility and convenience.", "-        addExtdirsToClasspath(classpath);", "-", "-        classpath.append(getCompileClasspath(true));", "-", "-        // Jikes has no option for source-path so we", "-        // will add it to classpath.", "-        classpath.append(src);", "-", "-        // if the user has set JIKESPATH we should add the contents as well", "-        String jikesPath = System.getProperty(\"jikes.class.path\");", "-        if (jikesPath != null) {", "-            classpath.append(new Path(project, jikesPath));", "-        }", "-        ", "-        Commandline cmd = new Commandline();", "-        cmd.setExecutable(\"jikes\");", "-", "-        if (deprecation == true)", "-            cmd.createArgument().setValue(\"-deprecation\");", "-", "-        if (destDir != null) {", "-            cmd.createArgument().setValue(\"-d\");", "-            cmd.createArgument().setFile(destDir);", "-        }", "-        ", "-        cmd.createArgument().setValue(\"-classpath\");", "-        cmd.createArgument().setPath(classpath);", "-", "-        if (encoding != null) {", "-            cmd.createArgument().setValue(\"-encoding\");", "-            cmd.createArgument().setValue(encoding);", "-        }", "-        if (debug) {", "-            cmd.createArgument().setValue(\"-g\");", "-        }", "-        if (optimize) {", "-            cmd.createArgument().setValue(\"-O\");", "-        }", "-        if (verbose) {", "-            cmd.createArgument().setValue(\"-verbose\");", "-        }", "-        if (depend) {", "-            cmd.createArgument().setValue(\"-depend\");", "-        } ", "-        /**", "-         * XXX", "-         * Perhaps we shouldn't use properties for these", "-         * three options (emacs mode, warnings and pedantic),", "-         * but include it in the javac directive?", "-         */", "-", "-        /**", "-         * Jikes has the nice feature to print error", "-         * messages in a form readable by emacs, so", "-         * that emacs can directly set the cursor", "-         * to the place, where the error occured.", "-         */", "-        String emacsProperty = project.getProperty(\"build.compiler.emacs\");", "-        if (emacsProperty != null && Project.toBoolean(emacsProperty)) {", "-            cmd.createArgument().setValue(\"+E\");", "-        }", "-", "-        /**", "-         * Jikes issues more warnings that javac, for", "-         * example, when you have files in your classpath", "-         * that don't exist. As this is often the case, these", "-         * warning can be pretty annoying.", "-         */", "-        String warningsProperty = project.getProperty(\"build.compiler.warnings\");", "-        if (warningsProperty != null && !Project.toBoolean(warningsProperty)) {", "-            cmd.createArgument().setValue(\"-nowarn\");", "-        }", "-", "-        /**", "-         * Jikes can issue pedantic warnings. ", "-         */", "-        String pedanticProperty = project.getProperty(\"build.compiler.pedantic\");", "-        if (pedanticProperty != null && Project.toBoolean(pedanticProperty)) {", "-            cmd.createArgument().setValue(\"+P\");", "-        }", "- ", "-        /**", "-         * Jikes supports something it calls \"full dependency", "-         * checking\", see the jikes documentation for differences", "-         * between -depend and +F.", "-         */", "-        String fullDependProperty = project.getProperty(\"build.compiler.fulldepend\");", "-        if (fullDependProperty != null && Project.toBoolean(fullDependProperty)) {", "-            cmd.createArgument().setValue(\"+F\");", "-        }", "-", "-        int firstFileName = cmd.size();", "-        logAndAddFilesToCompile(cmd);", "-", "-        return executeExternalCompile(cmd.getCommandline(), firstFileName) == 0;", "-    }"]}]}
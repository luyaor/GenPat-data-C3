{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7ccd0918519c260e4360ee05afc680a4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b512d436f998031090988dc96af964b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/SourceFileScanner.java", "commitBeforeChange": "54fec62b385b75dc3eb2919685dbddc032e316a1", "commitAfterChange": "a9353331a922b229316fa3da01f1b2df9fd75059", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public String[] restrict(String[] files, File srcDir, File destDir,                              FileNameMapper mapper)", "signatureAfterChange": "     public String[] restrict(String[] files, File srcDir, File destDir,                              FileNameMapper mapper)", "diff": ["-", "-        long now = (new java.util.Date()).getTime();", "-        StringBuffer targetList = new StringBuffer();", "-", "-        /*", "-          If we're on Windows, we have to munge the time up to 2 secs to", "-          be able to check file modification times.", "-          (Windows has a max resolution of two secs for modification times)", "-          Actually this is a feature of the FAT file system, NTFS does", "-          not have it, so if we could reliably passively test for an NTFS", "-          file systems we could turn this off...", "-        */", "-        if (Os.isFamily(\"windows\")) {", "-            now += 2000;", "-        }", "-", "+        // record destdir for later use in getResource", "+        this.destDir = destDir;", "-", "-            String[] targets = mapper.mapFileName(files[i]);", "-            if (targets == null || targets.length == 0) {", "-                task.log(files[i] + \" skipped - don\\'t know how to handle it\",", "-                         Project.MSG_VERBOSE);", "-                continue;", "-            }", "-", "-", "-            if (src.lastModified() > now) {", "-                task.log(\"Warning: \" + files[i] + \" modified in the future.\", ", "-                         Project.MSG_WARN);", "-            }", "-", "-            boolean added = false;", "-            targetList.setLength(0);", "-            for (int j = 0; !added && j < targets.length; j++) {", "-                File dest = fileUtils.resolveFile(destDir, targets[j]);", "-                ", "-                if (!dest.exists()) {", "-                    task.log(files[i] + \" added as \" + dest.getAbsolutePath()", "-                        + \" doesn\\'t exist.\", Project.MSG_VERBOSE);", "-                    v.addElement(files[i]);", "-                    added = true;", "-                } else if (src.lastModified() > dest.lastModified()) {", "-                    task.log(files[i] + \" added as \" + dest.getAbsolutePath()", "-                        + \" is outdated.\", Project.MSG_VERBOSE);", "-                    v.addElement(files[i]);", "-                    added = true;", "-                } else {", "-                    if (targetList.length() > 0) {", "-                        targetList.append(\", \");", "-                    }", "-                    targetList.append(dest.getAbsolutePath());", "-                }", "-            }", "-", "-            if (!added) {", "-                task.log(files[i] + \" omitted as \" + targetList.toString()", "-                         + (targets.length == 1 ? \" is\" : \" are \")", "-                         + \" up to date.\", Project.MSG_VERBOSE);", "-            }", "-            ", "+            v.addElement(new Resource(files[i], src.exists(),", "+                                      src.lastModified(), src.isDirectory()));", "-        String[] result = new String[v.size()];", "-        v.copyInto(result);", "+        Resource[] sourceresources= new Resource[v.size()];", "+        v.copyInto(sourceresources);", "+", "+        // build the list of sources which are out of date with", "+        // respect to the target", "+        Resource[] outofdate = ", "+            SourceSelector.selectOutOfDateSources(task, sourceresources,", "+                                                  mapper, this);", "+        String[] result = new String[outofdate.length];", "+        for (int counter=0; counter < outofdate.length; counter++) {", "+            result[counter] = outofdate[counter].getName();", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "345cf743609ef6197e51b76856233386", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/cli/org/apache/ant/cli/DefaultLogger.java", "commitBeforeChange": "e0fef5cf64773a98734998b9736ded96fc8be2c7", "commitAfterChange": "81c17b6164451315e24ae774f1bed668cbca99ce", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void processBuildEvent(BuildEvent event)", "signatureAfterChange": "     public void messageLogged(BuildEvent event)", "diff": ["-    public void processBuildEvent(BuildEvent event) {", "-        switch (event.getEventType()) {", "-            case BuildEvent.BUILD_STARTED:", "-                startTime = System.currentTimeMillis();", "-                break;", "-            case BuildEvent.BUILD_FINISHED:", "-                Throwable cause = event.getCause();", "-                if (cause == null) {", "-                    out.println(lSep + \"BUILD SUCCESSFUL\");", "-                } else {", "-                    err.println(lSep + \"BUILD FAILED\" + lSep);", "-                    reportException(cause);", "-                }", "-                out.println(lSep + \"Total time: \"", "-                     + formatTime(System.currentTimeMillis() - startTime));", "-                break;", "-            case BuildEvent.TARGET_STARTED:", "-                if (MessageLevel.MSG_INFO <= messageOutputLevel) {", "-                    Target target = (Target)event.getSource();", "-                    out.println(lSep + target.getName() + \":\");", "-                }", "-                break;", "-            case BuildEvent.TARGET_FINISHED:", "-                break;", "-            case BuildEvent.TASK_STARTED:", "-                break;", "-            case BuildEvent.TASK_FINISHED:", "-                break;", "-            case BuildEvent.MESSAGE:", "-                PrintStream logTo", "-                     = event.getPriority() == MessageLevel.MSG_ERR ? err : out;", "-                // Filter out messages based on priority", "-                if (event.getPriority() <= messageOutputLevel", "-                     && event.getSource() instanceof BuildElement) {", "-                    // Print out the name of the task if we're in one", "-                    BuildElement buildElement", "-                         = (BuildElement)event.getSource();", "-                    String name = buildElement.getType();", "-                    if (!emacsMode) {", "-                        String msg = \"[\" + name + \"] \";", "-                        int indentSize = LEFT_COLUMN_SIZE - msg.length();", "-                        for (int i = 0; i < indentSize; i++) {", "-                            logTo.print(\" \");", "-                        }", "-                        logTo.print(msg);", "-                    }", "-", "-                    // Print the message", "-                    logTo.println(event.getMessage());", "-                }", "-                break;", "-            default:", "-                err.println(\"Unrecognized event type = \" +", "-                    event.getEventType());", "-                break;", "+     */", "+    public void messageLogged(BuildEvent event) {", "+        PrintStream logTo", "+             = event.getPriority() == MessageLevel.MSG_ERR ? err : out;", "+", "+        // Filter out messages based on priority", "+        if (event.getPriority() <= messageOutputLevel ", "+            && event.getModelElement() instanceof BuildElement) {", "+            // Print out the name of the task if we're in one", "+            BuildElement buildElement", "+                 = (BuildElement)event.getModelElement();", "+            String name = buildElement.getType();", "+", "+            if (!emacsMode) {", "+                String msg = \"[\" + name + \"] \";", "+                int indentSize = LEFT_COLUMN_SIZE - msg.length();", "+                for (int i = 0; i < indentSize; i++) {", "+                    logTo.print(\" \");", "+                }", "+                logTo.print(msg);", "+            }", "+", "+            // Print the message", "+            logTo.println(event.getMessage());", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4de2f2dc8185534e42769af6d02c486", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Redirector.java", "commitBeforeChange": "e1dba00d6fba1e923723c523e5aed501dc5ab84b", "commitAfterChange": "3ade0b6e769ba60594a31515f5ba7e3e0054810a", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "     public synchronized void complete() throws IOException", "signatureAfterChange": "     public void complete() throws IOException", "diff": ["-    public synchronized void complete() throws IOException {", "+    public void complete() throws IOException {", "-        if (inputStream != null) {", "-            inputStream.close();", "+        synchronized (inMutex) {", "+            if (inputStream != null) {", "+                inputStream.close();", "+            }", "-        outputStream.flush();", "-        outputStream.close();", "+        synchronized (outMutex) {", "+            outputStream.flush();", "+            outputStream.close();", "+        }", "-        errorStream.flush();", "-        errorStream.close();", "+        synchronized (errMutex) {", "+            errorStream.flush();", "+            errorStream.close();", "+        }", "-        //wait for the StreamPumpers to finish", "-        while (threadGroup.activeCount() > 0) {", "-            try {", "-                managingTask.log(\"waiting for \" + threadGroup.activeCount()", "-                    + \" Threads:\", Project.MSG_DEBUG);", "-                Thread[] thread = new Thread[threadGroup.activeCount()];", "-                threadGroup.enumerate(thread);", "-                for (int i = 0; i < thread.length && thread[i] != null; i++) {", "-                    try {", "-                        managingTask.log(thread[i].toString(), Project.MSG_DEBUG);", "-                    } catch (NullPointerException enPeaEx) {", "-                        // Ignore exception", "+        // wait for the StreamPumpers to finish", "+        synchronized (this) {", "+            while (threadGroup.activeCount() > 0) {", "+                try {", "+                    managingTask.log(\"waiting for \" + threadGroup.activeCount()", "+                            + \" Threads:\", Project.MSG_DEBUG);", "+                    Thread[] thread = new Thread[threadGroup.activeCount()];", "+                    threadGroup.enumerate(thread);", "+                    for (int i = 0; i < thread.length && thread[i] != null; i++) {", "+                        try {", "+                            managingTask.log(thread[i].toString(),", "+                                    Project.MSG_DEBUG);", "+                        } catch (NullPointerException enPeaEx) {", "+                            // Ignore exception", "+                        }", "-                }", "-                wait(STREAMPUMPER_WAIT_INTERVAL);", "-            } catch (InterruptedException eyeEx) {", "-                Thread[] thread = new Thread[threadGroup.activeCount()];", "-                threadGroup.enumerate(thread);", "-                for (int i = 0; i < thread.length && thread[i] != null; i++) {", "-                    thread[i].interrupt();", "+                    wait(STREAMPUMPER_WAIT_INTERVAL);", "+                } catch (InterruptedException eyeEx) {", "+                    Thread[] thread = new Thread[threadGroup.activeCount()];", "+                    threadGroup.enumerate(thread);", "+                    for (int i = 0; i < thread.length && thread[i] != null; i++) {", "+                        thread[i].interrupt();", "+                    }", "-        inputStream = null;", "-        outputStream = null;", "-        errorStream = null;", "-        outPrintStream = null;", "-        errorPrintStream = null;", "-   }", "+        synchronized (inMutex) {", "+            inputStream = null;", "+        }", "+        synchronized (outMutex) {", "+            outputStream = null;", "+            outPrintStream = null;", "+        }", "+        synchronized (errMutex) {", "+            errorStream = null;", "+            errorPrintStream = null;", "+        }", "+    }"]}]}
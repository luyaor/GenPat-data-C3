{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3caee177157cb0774381306314e5beef", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "239968c24a7150544ebef9531b835e27", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "be12707c63314ce0314959ff551e37fe59b83943", "commitAfterChange": "4f3e4e1690289144b15872597586ed34ae92efb5", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "     public static String replaceProperties(Project project, String value, Hashtable keys )         throws BuildException", "signatureAfterChange": "     public static String replaceProperties(Project project, String value, Hashtable keys )             throws BuildException", "diff": ["-        throws BuildException", "-    {", "-        // XXX use Map instead of proj, it's too heavy", "+            throws BuildException {", "+        if (value == null) {", "+            return null;", "+        }", "-        // XXX need to replace this code with something better.", "-        StringBuffer sb=new StringBuffer();", "-        int i=0;", "-        int prev=0;", "-        // assert value!=nil", "-        int pos;", "-        while( (pos=value.indexOf( \"$\", prev )) >= 0 ) {", "-            if(pos>0) {", "-                sb.append( value.substring( prev, pos ) );", "+        Vector fragments = new Vector();", "+        Vector propertyRefs = new Vector();", "+        parsePropertyString(value, fragments, propertyRefs);", "+", "+        StringBuffer sb = new StringBuffer();", "+        Enumeration i = fragments.elements();", "+        Enumeration j = propertyRefs.elements();", "+        while (i.hasMoreElements()) {", "+            String fragment = (String)i.nextElement();", "+            if (fragment == null) {", "+                String propertyName = (String)j.nextElement();", "+                if (!keys.containsKey(propertyName)) {", "+                    project.log(\"Property ${\" + propertyName + \"} has not been set\", Project.MSG_VERBOSE);", "+                }", "+                fragment = (keys.containsKey(propertyName)) ? (String) keys.get(propertyName) ", "+                                                            : \"${\" + propertyName + \"}\"; ", "+            sb.append(fragment);", "+        }                        ", "+        ", "+        return sb.toString();", "+    }", "-                sb.append('$');", "-            else if (value.charAt( pos + 1 ) != '{' ) {", "-                sb.append( value.charAt( pos + 1 ) );", "-                prev=pos+2; // XXX", "-                int endName=value.indexOf( '}', pos );", "-                if( endName < 0 ) {", "-                    throw new BuildException(\"Syntax error in prop: \" +", "-                                             value );", "-                String n=value.substring( pos+2, endName );", "-                if (!keys.containsKey(n)) {", "-                    project.log(\"Property ${\" + n + \"} has not been set\", Project.MSG_VERBOSE);", "-                }", "-                ", "-                String v = (keys.containsKey(n)) ? (String) keys.get(n) : \"${\"+n+\"}\"; ", "-                ", "-                //System.out.println(\"N: \" + n + \" \" + \" V:\" + v);", "-                sb.append( v );", "-                prev=endName+1;", "-        if( prev < value.length() ) sb.append( value.substring( prev ) );", "-        //      System.out.println(\"After replace: \" + sb.toString());", "-        // System.out.println(\"Before replace: \" + value);", "-        return sb.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28ad551c33b2820293437443ffb5a1c6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/PropertyFile.java", "commitBeforeChange": "59fcd9ab821784fbf7d5ccee60b4f63c0f9b7735", "commitAfterChange": "09a7def3cd210a903db5fa8969a5292b93cb8192", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "         private void executeDate(String oldValue) throws BuildException", "signatureAfterChange": "         private void executeDate(String oldValue) throws BuildException", "diff": ["+            // special case", "+            if (m_default != null &&", "+                NOW_VALUE_.equals(m_default.toLowerCase()) &&", "+                (m_operation == Operation.INCREMENT_OPER ||", "+                 m_operation == Operation.DECREMENT_OPER) ) {", "+                oldValue = null;", "+            }", "+", "+            if (oldValue != null) {", "+                try {", "+                    value.setTime(fmt.parse(oldValue));", "+                }", "+                catch (ParseException pe)  { /* swollow */ }", "+            }", "+", "-            // special case", "-            if (m_default != null &&", "-                NOW_VALUE_.equals(m_default.toLowerCase()) &&", "-                (m_operation == Operation.INCREMENT_OPER ||", "-                 m_operation == Operation.DECREMENT_OPER) ) {", "-                oldValue = null;", "+            if (m_default != null && oldValue == null) {", "+                if (NOW_VALUE_.equals(m_default.toLowerCase())) {", "+                    value.setTime(new Date());", "+                }", "+                else if (NULL_VALUE_.equals(m_default.toLowerCase())) {", "+                    value = null;", "+                }", "+                else {", "+                    try {", "+                        value.setTime(fmt.parse(m_default));", "+                    }", "+                    catch (ParseException pe)  { /* swollow */ }", "+                }", "-            if (oldValue != null) {", "-                try {", "-                    newValue.setTime(fmt.parse(oldValue));", "-                }", "-                catch (ParseException pe)  { /* swollow */ }", "-            }", "-            else {", "-                if (m_default != null) {", "-                    if (NOW_VALUE_.equals(m_default.toLowerCase())) {", "-                        newValue.setTime(new Date());", "-                    }", "-                    else if (NULL_VALUE_.equals(m_default.toLowerCase())) {", "-                        newValue = null;", "-                    }", "-                    else {", "-                        try {", "-                            newValue.setTime(fmt.parse(m_default));", "-                        }", "-                        catch (ParseException pe)  { /* swollow */ }", "-                    }", "-                }", "-            }"]}]}
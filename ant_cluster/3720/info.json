{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "075f575d47f201b24b1cf277680e7015", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10744966102132e9fdf22b5cbf0f2249", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/FixCRLF.java", "commitBeforeChange": "ac1664c3fdae2848480acfb061ab8413daa00923", "commitAfterChange": "70b420621ba892d07049960e4cc4ac34c58549f6", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      private void processFile(String file) throws BuildException", "signatureAfterChange": "      private void processFile(String file) throws BuildException", "diff": ["-\tFile srcFile = new File(srcDir, file);", "-\tFile tmpFile = null;", "+        File srcFile = new File(srcDir, file);", "+        File tmpFile = null;", "-\t// read the contents of the file", "+        // read the contents of the file", "+", "+            try {                                            ", "+                lines.close();", "+                lines = null;", "+            }", "+            catch (IOException e) {", "+                throw new BuildException(\"Unable to close source file \" + srcFile);", "+            }", "+                                     ", "+            if (destFile.exists()) {", "+                if (!destFile.delete()) {", "+                    throw new BuildException(\"Unable to delete \" + destFile);", "+                }", "+            }", "+                                     ", "-                                         + \". Couldn't rename temporary file.\");", "+                                         + \". Couldn't rename temporary file: \" + tmpFile);", "-                lines.close();", "+                if (lines != null) {", "+                    lines.close();", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32cd6d7c5a1e1c330dd3bf76dae45bfc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/compilers/CompilerAdapterFactory.java", "commitBeforeChange": "de3676088087b4d6fd08c1ce084c6c005eaa0821", "commitAfterChange": "1f611ac0142b8cb9f317198682fc6015c7a9c78f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static CompilerAdapter getCompiler(String compilerType, Task task)          throws BuildException", "signatureAfterChange": "     public static CompilerAdapter getCompiler(String compilerType, Task task)          throws BuildException", "diff": ["-            /* If I've done things right, this should be the extent of the", "-             * conditional statements required.", "-             */", "+            boolean isClassicCompilerSupported=true;", "+            //as new versions of java come out, add them to this test", "+            if(Project.getJavaVersion()==Project.JAVA_1_4) {", "+                 isClassicCompilerSupported=false;", "+             }", "+", "-                return new Javac12();", "+                if(isClassicCompilerSupported) {", "+                    return new Javac12();", "+                }", "+                else {", "+                    throw new BuildException(\"This version of java does \"", "+                                             +\"not support the classic compiler\");", "+                }", "+", "+            //on java<=1.3 the modern falls back to classic if it is not found", "+            //but on java>=1.4 we just bail out early", "-                try {", "-                    Class.forName(\"com.sun.tools.javac.Main\");", "-                } catch (ClassNotFoundException cnfe) {", "-                    task.log(\"Modern compiler is not available - using \"", "-                            + \"classic compiler\", Project.MSG_WARN);", "-                    return new Javac12();", "+                if(doesModernCompilerExist()) {", "+                    return new Javac13();", "+                } else {", "+                    if(isClassicCompilerSupported) {", "+                        task.log(\"Modern compiler not found - looking for \"", "+                                + \"classic compiler\", Project.MSG_WARN);", "+                        return new Javac12();", "+                    }", "+                    else {", "+                        throw new BuildException(\"Unable to find a javac compiler;\\n\"", "+                                                 +\"com.sun.tools.javac.Main is not on the classpath.\\n\"", "+                                                 +\"Perhaps JAVA_HOME does not point to the JDK\");", "+                    }", "-                return new Javac13();", "+                "]}]}
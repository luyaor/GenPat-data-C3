{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6a4ae3ef18e88685f09e55a00c4def8f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69fde1089446125048fa4a08a1a21d1b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/api/DefaultTaskContext.java", "commitBeforeChange": "6f3f9cca3e46d9b295f612635ddc47d887d760ce", "commitAfterChange": "d32c26fc168f32a03444486b5b2b23b19564bb9b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     protected void checkPropertyValid( final String name, final Object value )         throws AntException", "signatureAfterChange": "     protected void checkPropertyValid( final String name, final Object value )         throws TaskException", "diff": ["-        throws AntException", "+        throws TaskException", "-            throw new AntException( \"Property \" + BASE_DIRECTORY +", "-                                    \" must have a value of type \" +", "-                                    File.class.getName() );", "+            throw new TaskException( \"Property \" + BASE_DIRECTORY +", "+                                     \" must have a value of type \" +", "+                                     File.class.getName() );", "-            throw new AntException( \"Property \" + NAME +", "-                                    \" must have a value of type \" +", "-                                    String.class.getName() );", "+            throw new TaskException( \"Property \" + NAME +", "+                                     \" must have a value of type \" +", "+                                     String.class.getName() );", "-            throw new AntException( \"property \" + JAVA_VERSION +", "-                                    \" must have a value of type \" +", "-                                    JavaVersion.class.getName() );", "+            throw new TaskException( \"property \" + JAVA_VERSION +", "+                                     \" must have a value of type \" +", "+                                     JavaVersion.class.getName() );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87440963818d2e1d23613558e154854b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/converter/DefaultMasterConverter.java", "commitBeforeChange": "523f5d39aad823b0144d6daa7ff43f6fa1fb5e55", "commitAfterChange": "a71d6f91adaf42aed1f7ba2e894cbb6a2ec1929a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public Object convert( Class destination, final Object original, final Context context )         throws ConverterException", "signatureAfterChange": "     public Object convert( Class destination, final Object original, final Context context )         throws ConverterException", "diff": ["-            getLogger().debug( \"Looking for converter from \" + originalClass.getName() +", "-                               \" to \" + destination.getName() );", "+            final String message = ", "+                REZ.getString( \"converter-lookup.notice\", ", "+                               originalClass.getName(), ", "+                               destination.getName() );", "+            getLogger().debug( message );", "-            throw new ConverterException( \"Unable to find converter for \" +", "-                                          originalClass.getName() + \" to \" +", "-                                          destination.getName() + \" conversion\" );", "+            final String message = ", "+                REZ.getString( \"no-converter.notice\", ", "+                               originalClass.getName(), ", "+                               destination.getName() );", "+            throw new ConverterException( message );", "-", "-                getLogger().debug( \"Found Converter: \" + converter );", "+                final String message = REZ.getString( \"found-converter.notice\", converter );", "+                getLogger().debug( message );", "-            throw new ConverterException( \"Badly configured TypeManager missing \" +", "-                                          \"converter definition\", te );", "+            final String message = REZ.getString( \"bad-typemanager.error\" );", "+            throw new ConverterException( message, te );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf43b3345bcc4d13287740b41076b94c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "fd0da1440ca6e87774f1aa42277c55f5d708ecea", "commitAfterChange": "523f5d39aad823b0144d6daa7ff43f6fa1fb5e55", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private boolean setValue( final Object object,                               Object value,                               final Method method,                               final Class sourceClass,                               final String source,                               final Context context )         throws ConfigurationException", "signatureAfterChange": "      private boolean setValue( final Object object,                               Object value,                               final Method method,                               final Class sourceClass,                               final String source,                               final Context context )         throws ConfigurationException", "diff": ["-                getLogger().debug( \"Failed to find converter \", ce );", "+                final String message = REZ.getString( \"no-converter.error\" );", "+                getLogger().debug( message, ce );", "-            throw new ConfigurationException( \"Error converting attribute for \" +", "-                                              method.getName(),", "-                                              e );", "+            final String message =", "+                REZ.getString( \"bad-convert-for-attribute.error\", method.getName() );", "+            throw new ConfigurationException( message, e );", "-            throw new ConfigurationException( \"Error retrieving methods with \" +", "-                                              \"correct access specifiers\",", "-                                              iae );", "+            final String message = REZ.getString( \"illegal-access.error\" );", "+            throw new ConfigurationException( message, iae );", "-            throw new ConfigurationException( \"Error calling method attribute \" +", "-                                              method.getName(),", "-                                              ite );", "+            final String message = REZ.getString( \"invoke-target.error\", method.getName() );", "+            throw new ConfigurationException( message, ite );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f150316da33fc7520fd47fa5e2f7ec96", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/workspace/DefaultTaskContext.java", "commitBeforeChange": "5f35e5e952c7732af5b98e484a87b8a90d8f2fa4", "commitAfterChange": "f09afe103c9bd8540483fbdafab92df1cdf049e2", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     protected void checkPropertyValid( final String name, final Object value )         throws TaskException", "signatureAfterChange": "     protected void checkPropertyValid( final String name, final Object value )         throws TaskException", "diff": ["-            throw new TaskException( \"Property \" + BASE_DIRECTORY +", "-                                     \" must have a value of type \" +", "-                                     File.class.getName() );", "+            final String message = ", "+                REZ.getString( \"bad-property.error\", BASE_DIRECTORY, File.class.getName() );", "+            throw new TaskException( message );", "-            throw new TaskException( \"Property \" + NAME +", "-                                     \" must have a value of type \" +", "-                                     String.class.getName() );", "+            final String message = ", "+                REZ.getString( \"bad-property.error\", NAME, String.class.getName() );", "+            throw new TaskException( message );", "-            throw new TaskException( \"Property \" + JAVA_VERSION +", "-                                     \" must have a value of type \" +", "-                                     JavaVersion.class.getName() );", "+            final String message = ", "+                REZ.getString( \"bad-property.error\", JAVA_VERSION, JavaVersion.class.getName() );", "+            throw new TaskException( message );"]}]}
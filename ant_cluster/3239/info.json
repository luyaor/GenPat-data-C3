{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b03b6ffa630d33feee05644e26f31f5a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e7c92774ff62debc509a42db9139ca5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/Frame.java", "commitBeforeChange": "83dc385bd01fbc8ee2fb166b9a5605bdc6958d76", "commitAfterChange": "bf844382c856f7b51c56024189c93f11d34cb720", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void configureElement(AntLibFactory factory, Object element,                                   BuildElement model)          throws ExecutionException", "signatureAfterChange": "     public String replacePropertyRefs(String value) throws ExecutionException", "diff": ["+     */", "+    public String replacePropertyRefs(String value) throws ExecutionException {", "+        return dataService.replacePropertyRefs(value);", "+    }", "-     */", "-    private void configureElement(AntLibFactory factory, Object element,", "-                                  BuildElement model)", "-         throws ExecutionException {", "-", "-        Setter setter = getSetter(element.getClass());", "-", "-        // start by setting the attributes of this element", "-        for (Iterator i = model.getAttributeNames(); i.hasNext(); ) {", "-            String attributeName = (String)i.next();", "-            String attributeValue = model.getAttributeValue(attributeName);", "-            if (!setter.supportsAttribute(attributeName)) {", "-                throw new ExecutionException(model.getType()", "-                     + \" does not support the \\\"\" + attributeName", "-                     + \"\\\" attribute\", model.getLocation());", "-            }", "-            setter.setAttribute(element, attributeName,", "-                dataService.replacePropertyRefs(attributeValue));", "-        }", "-        String modelText = model.getText().trim();", "-        if (modelText.length() != 0) {", "-            if (!setter.supportsText()) {", "-                throw new ExecutionException(model.getType()", "-                     + \" does not support content\", model.getLocation());", "-            }", "-            setter.addText(element,", "-                dataService.replacePropertyRefs(modelText));", "-        }", "-", "-        // now do the nested elements", "-        for (Iterator i = model.getNestedElements(); i.hasNext(); ) {", "-            BuildElement nestedElementModel = (BuildElement)i.next();", "-            String nestedElementName = nestedElementModel.getType();", "-", "-            ImportInfo info = componentManager.getDefinition(nestedElementName);", "-            if (element instanceof TaskContainer", "-                 && info != null", "-                 && info.getDefinitionType() == AntLibrary.TASKDEF", "-                 && !setter.supportsNestedElement(nestedElementName)) {", "-                // it is a nested task", "-                TaskContext nestedContext", "-                     = configureTask(nestedElementModel);", "-                TaskContainer container = (TaskContainer)element;", "-                // XXX what should we be adding - need to understand container", "-                // method of executing tasks", "-                container.addTask(nestedContext.getTask());", "-            } else {", "-                if (setter.supportsNestedAdder(nestedElementName)) {", "-                    addNestedElement(factory, setter, element,", "-                        nestedElementModel);", "-                } else if (setter.supportsNestedCreator(nestedElementName)) {", "-                    createNestedElement(factory, setter, element,", "-                        nestedElementModel);", "-                } else {", "-                    throw new ExecutionException(model.getType()", "-                         + \" does not support the \\\"\" + nestedElementName", "-                         + \"\\\" nested element\",", "-                        nestedElementModel.getLocation());", "-                }", "-            }", "-        }", "-", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b46437410a4719b0cf1770954cdd9ad", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "6b3d8a02956aad55938df6c7a1b2994a4acc5f6a", "commitAfterChange": "fe4a5cb02940376fddc661302141394be20d1f02", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 22, "signatureBeforeChange": "      private static void processNestedProperties(Project project,                                                 Object target,                                                 Element targetElement)         throws BuildException", "signatureAfterChange": "          public NestedPropertyHandler(DocumentHandler parentHandler, Object target)", "diff": ["-    private static void processNestedProperties(Project project,", "-                                                Object target,", "-                                                Element targetElement)", "-        throws BuildException", "-    {", "-        Class targetClass = target.getClass();", "-        NodeList list = targetElement.getChildNodes();", "-        for (int i = 0; i < list.getLength(); i++) {", "-            Node node = list.item(i);", "-            // right now, all we are interested in is element nodes", "-            // not quite sure what to do with others except drop 'em", "+        public NestedPropertyHandler(DocumentHandler parentHandler, Object target) {", "+            super(parentHandler);", "-            if (node.getNodeType() == Node.TEXT_NODE) {", "-                String text = ((Text)node).getData();", "-                try {", "-                    Method addProp = targetClass.getMethod(", "-                        \"addText\", new Class[]{\"\".getClass()});", "-                    Object child = addProp.invoke(target, new Object[] {text});", "-                } catch (NoSuchMethodException nsme) {", "-                    if (text.trim().length() > 0)", "-                        throw new BuildException(targetClass + ", "-                            \" does not support nested text elements\");", "-                } catch (InvocationTargetException ite) {", "-                    throw new BuildException(ite.getMessage());", "-                } catch (IllegalAccessException iae) {", "-                    throw new BuildException(iae.getMessage());", "-                }", "+            this.target = target;", "+        }", "-            if (node.getNodeType() == Node.ELEMENT_NODE) {", "-                Element element = (Element)node;", "-                String propType = element.getTagName();", "-                String methodName = \"create\" +", "-\t\t    Character.toUpperCase(propType.charAt(0)) +", "-                    propType.substring(1);", "-", "-                try {", "-                    Method addProp =", "-                        targetClass.getMethod(methodName, new Class[]{});", "-                    Object child = addProp.invoke(target, new Object[] {});", "-", "-                    configure(project, child, element);", "-", "-                    processNestedProperties(project, child, element);", "-                } catch (NoSuchMethodException nsme) {", "-                    throw new BuildException(targetClass + ", "-                        \" does not support nested \" + propType + \" properties\");", "-                } catch (InvocationTargetException ite) {", "-                    throw new BuildException(ite.getMessage());", "-                } catch (IllegalAccessException iae) {", "-                    throw new BuildException(iae.getMessage());", "-                }", "-", "-            }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a88d73dee4f5b7e581755d3820084c82", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4fe0652a823478c49b69e8e008c9008", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/antlib/src/main/org/apache/tools/ant/taskdefs/Antlib.java", "commitBeforeChange": "f1548aec2b4a57bfdca206f32178a9e03c39d3a1", "commitAfterChange": "7ed240811799349f5a0932e7a464086e5ce31527", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "         public void startElement(String tag, AttributeList attrs)             throws SAXParseException", "signatureAfterChange": "         public void startElement(String tag, AttributeList attrs)             throws SAXParseException", "diff": ["+\t    level ++;", "+\t\tif (level > 1) {", "+\t\t    throw new SAXParseException(\"Unexpected element: \" + tag,", "+\t\t\t\t\t\tlocator);", "+\t\t}", "-            if (\"task\".equals(tag) || \"type\".equals(tag)) {", "-                String name = null;", "-                String className = null;", "+\t    if (level == 1) {", "+\t\tthrow new SAXParseException(\"Missing antlib root element\",", "+\t\t\t\t\t    locator);", "+\t    }", "-                for (int i = 0, last = attrs.getLength(); i < last; i++) {", "-                    String key = attrs.getName(i);", "-                    String value = attrs.getValue(i);", "+\t    // Must have the two attributes declared", "+\t    parseAttributes(tag, attrs);", "-                    if (key.equals(\"name\")) {", "-                        name = value;", "-                    }", "-                    else if (key.equals(\"class\")) {", "-                        className = value;", "-                    }", "-                    else {", "-                        throw new SAXParseException(\"Unexpected attribute \\\"\"", "-                                 + key + \"\\\"\", locator);", "-                    }", "-                }", "-                if (name == null || className == null) {", "-                    String msg = \"Underspecified \" + tag + \" declaration.\";", "-                    throw new SAXParseException(msg, locator);", "-                }", "+\t    try {", "+\t\tif (\"role\".equals(tag)) {", "+\t\t    if (isRoleInUse(name)) {", "+\t\t\tString msg = \"Cannot override role: \" + name;", "+\t\t\tlog(msg, Project.MSG_WARN);", "+\t\t\treturn;\t\t\t", "+\t\t    }", "+\t\t    // Defining a new role", "+\t\t    symbols.addRole(name, loadClass(className),", "+\t\t\t\t    (adapter == null? ", "+\t\t\t\t     null : loadClass(adapter))); ", "+\t\t    return;", "+\t\t}", "-                try {", "-                    //check for name alias", "-                    String alias = aliasMap.getProperty(name);", "-                    if (alias != null) {", "-                        name = alias;", "-                    }", "-                    //catch an attempted override of an existing name", "-                    if (!override && inUse(name)) {", "-                        String msg = \"Cannot override \" + tag + \": \" + name;", "-                        log(msg, Project.MSG_WARN);", "-                        return;", "-                    }", "-", "-                    //load the named class", "-                    Class cls;", "-                    if(classloader==null) {", "-                        cls=Class.forName(className);", "-                    }", "-                    else {", "-                        cls=classloader.loadClass(className);", "-                    }", "-", "-                    //register it as a task or a datatype", "-                    if (tag.equals(\"task\")) {", "-                        project.addTaskDefinition(name, cls);", "-                    }", "-                    else {", "-                        project.addDataTypeDefinition(name, cls);", "-                    }", "-                }", "-                catch (ClassNotFoundException cnfe) {", "-                    String msg = \"Class \" + className +", "-                            \" cannot be found\";", "-                    throw new SAXParseException(msg, locator, cnfe);", "-                }", "-                catch (NoClassDefFoundError ncdfe) {", "-                    String msg = \"Class \" + className +", "-                            \" cannot be found\";", "-                    throw new SAXParseException(msg, locator);", "-                }", "-            }", "-            else {", "-                throw new SAXParseException(\"Unexpected element \\\"\" +", "-                        tag + \"\\\"\",", "-                        locator);", "-            }", "+\t\t// Defining a new element kind", "+\t\t//check for name alias", "+\t\tString alias = aliasMap.getProperty(name);", "+\t\tif (alias != null) {", "+\t\t    name = alias;", "+\t\t}", "+\t\t//catch an attempted override of an existing name", "+\t\tif (!override && isInUse(tag, name)) {", "+\t\t    String msg = \"Cannot override \" + tag + \": \" + name;", "+\t\t    log(msg, Project.MSG_WARN);", "+\t\t    return;", "+\t\t}", "+\t\tsymbols.add(tag, name, loadClass(className));", "+\t    }", "+\t    catch(BuildException be) {", "+\t\tthrow new SAXParseException(be.getMessage(), locator, be);", "+\t    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7f746f88c22a84781f9275d9e598806", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/taskdefs/ExecuteJava.java", "commitBeforeChange": "a989b254f04d33e5bc2370b62121bd56830ac2f1", "commitAfterChange": "3fee832d2527f3b952683181980a446b44f5e5bf", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public void execute()         throws TaskException", "signatureAfterChange": "      public void execute( final TaskContext context )         throws TaskException", "diff": ["-    public void execute()", "+", "+    public void execute( final TaskContext context )", "-        final String classname = m_javaCommand.getExecutable();", "-        final Object[] argument = new Object[]{m_javaCommand.getArguments()};", "+        // Validate", "+        if( m_className != null && m_jar != null )", "+        {", "+            throw new TaskException( \"Only one of Classname and Jar can be set.\" );", "+        }", "+        else if( m_className == null && m_jar == null )", "+        {", "+            throw new TaskException( \"Classname must not be null.\" );", "+        }", "+        if( ! m_fork )", "+        {", "+            if( m_jar != null )", "+            {", "+                throw new TaskException( \"Cannot execute a jar in non-forked mode.\" );", "+            }", "+            if( m_vmArgs.size() > 0 )", "+            {", "+                context.warn( \"JVM args ignored when same JVM is used.\" );", "+            }", "+            if( m_workingDirectory != null )", "+            {", "+                context.warn( \"Working directory ignored when same JVM is used.\" );", "+            }", "+            if( m_sysProperties.size() > 0 )", "+            {", "+                context.warn( \"System properties ignored when same JVM is used.\" );", "+            }", "+        }", "+        if( m_fork )", "+        {", "+            execForked( context );", "+        }", "+        else", "+        {", "+            execNonForked( context );", "+        }", "+    }", "-            if( m_sysProperties != null )", "-                m_sysProperties.setSystem();", "-            }", "-", "-            final Class[] param = {Class.forName( \"[Ljava.lang.String;\" )};", "-            Class target = null;", "-            if( m_classpath == null )", "-            {", "-                target = Class.forName( classname );", "-                final URL[] urls = PathUtil.toURLs( m_classpath );", "-                target = classLoader.loadClass( classname );", "-            }", "-            final Method main = target.getMethod( \"main\", param );", "-            main.invoke( null, argument );", "-        }", "-        catch( NullPointerException e )", "-        {", "-            throw new TaskException( \"Could not find main() method in \" + classname );", "-        }", "-        catch( ClassNotFoundException e )", "-        {", "-            throw new TaskException( \"Could not find \" + classname + \". Make sure you have it in your classpath\" );", "-        }", "-        catch( InvocationTargetException e )", "-        {", "-            Throwable t = e.getTargetException();", "-            if( !( t instanceof SecurityException ) )", "-            {", "-                throw new TaskException( \"Error\", t );", "-            }", "-            else", "-            {", "-                throw (SecurityException)t;", "-        catch( Exception e )", "-            throw new TaskException( \"Error\", e );", "-        finally", "-            if( m_sysProperties != null )", "-            {", "-                m_sysProperties.restoreSystem();", "-            }"]}]}
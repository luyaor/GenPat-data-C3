{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cc92bd23d9882e164b02095bd175eaad", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6306afd6535582f9c829cc2b10ee94a3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Property.java", "commitBeforeChange": "f8a23baad2241604df68395c356ccca4c6fb8e28", "commitAfterChange": "089d421c3f3b9d5ebaaa4642da9d70958dae1007", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      private void resolveAllProperties(Hashtable props)", "signatureAfterChange": "      private void resolveAllProperties(Hashtable props)", "diff": ["-        Hashtable toResolve = new Hashtable();", "-        Enumeration e = props.keys();", "-        boolean more = true;", "-        ", "-        while (more) {", "-            while (e.hasMoreElements()) {", "-                Vector propsInValue = new Vector();", "-                String name = (String) e.nextElement();", "-                String value = (String) props.get(name);", "+        Hashtable unresolvableProperties = new Hashtable();", "+        for (Enumeration e = props.keys(); e.hasMoreElements(); ) {", "+            String name = (String) e.nextElement();", "+            String value = (String) props.get(name);", "+            boolean resolved = false;", "+            while (!resolved) { ", "+                Vector propsInValue = new Vector();", "+    ", "+                // assume it will be resolved", "+                resolved = true;", "+                boolean unresolvable = false;", "+                        if (elem.equals(name) || unresolvableProperties.containsKey(elem)) {", "+                            // we won't try further resolving elements with circular ", "+                            // property dependencies or dependencies on unresolvable elements", "+                            unresolvable = true;", "+                            break;", "+                        }", "+                        ", "-                            toResolve.put(name, value);", "-                            break;", "+                            resolved = false;", "-", "-                if (toResolve.size() > 0) {", "-                    Enumeration tre = toResolve.keys();", "-                    while (tre.hasMoreElements()) {", "-                        String name2 = (String) tre.nextElement();", "-                        String value2 = (String) toResolve.get(name2);", "-                        String v = ProjectHelper.replaceProperties(value2,", "-                                                                   project.getProperties());", "-                        v = ProjectHelper.replaceProperties(v, props);", "-                        props.put(name, v);", "-                    }", "-", "-                    toResolve.clear();", "-                    e = props.keys();", "-                } else {", "-                    more = false;", "+    ", "+                if (unresolvable) {", "+                    unresolvableProperties.put(name, value);", "+                    resolved = true;", "+    ", "+                if (!resolved) {", "+                    value = ProjectHelper.replaceProperties(value,", "+                                                               project.getProperties());", "+                    value = ProjectHelper.replaceProperties(value, props);", "+                    props.put(name, value);", "+                }    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcb9628c09a94183d346948515117654", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/DependSet.java", "commitBeforeChange": "a45ed20242bd108126f9f35b642ceee711b4d2e5", "commitAfterChange": "63eed537b696553cbbb7a98f85ab9f8d2e8e8dfa", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["+        long oldestTargetTime = 0;", "+        File oldestTarget = null;", "+              }", "+", "+              if (oldestTarget == null ||", "+                  dest.lastModified() < oldestTargetTime) {", "+                  oldestTargetTime = dest.lastModified();", "+                  oldestTarget = dest;", "-           }", "-        }", "-", "-        //", "-        // Check targets vs source files specified via filesets", "-        //", "-        if (upToDate) {", "-           Enumeration enumSourceSets = sourceFileSets.elements();", "-           while (upToDate && enumSourceSets.hasMoreElements()) {", "-          ", "-              FileSet sourceFS          = (FileSet) enumSourceSets.nextElement();", "-              DirectoryScanner sourceDS = sourceFS.getDirectoryScanner(project);", "-              String[] sourceFiles      = sourceDS.getIncludedFiles();", "-", "-              for (int i=0; upToDate && i < sourceFiles.length; i++) {", "-                 File src = new File(sourceFS.getDir(project), sourceFiles[i]);", "-", "-                 if (src.lastModified() > now) {", "-                    log(\"Warning: \"+sourceFiles[i]+\" modified in the future.\", ", "-                        Project.MSG_WARN);", "-                 }", "-", "-                 Enumeration enumTargets = allTargets.elements();", "-                 while (upToDate && enumTargets.hasMoreElements()) {", "-                 ", "-                    File dest = (File)enumTargets.nextElement();", "-                    if (src.lastModified() > dest.lastModified()) {", "-                       log(dest.getPath() + \" is out of date with respect to \" +", "-                                sourceFiles[i], Project.MSG_VERBOSE);", "-                       upToDate = false;", "-", "-                    }", "-                 }", "+              if (oldestTarget == null ||", "+                  dest.lastModified() < oldestTargetTime) {", "+                  oldestTargetTime = dest.lastModified();", "+                  oldestTarget = dest;", "+        }", "+        if (oldestTarget != null) {", "+            log(oldestTarget + \" is oldest target file\", Project.MSG_VERBOSE);", "+        } else { ", "+            // no target files, then we cannot remove any target files and", "+            // skip the following tests right away", "+            upToDate = false;", "-                 Enumeration enumTargets = allTargets.elements();", "-                 while (upToDate && enumTargets.hasMoreElements()) {", "-                 ", "-                    File dest = (File)enumTargets.nextElement();", "-                    ", "-                    if (src.lastModified() > dest.lastModified()) {", "-                       log(dest.getPath() + \" is out of date with respect to \" +", "-                                sourceFiles[i], Project.MSG_VERBOSE);", "-                       upToDate = false;", "-", "-                    }", "+                 if (src.lastModified() > oldestTargetTime) {", "+                    upToDate = false;", "+                    log(oldestTarget + \" is out of date with respect to \" +", "+                        sourceFiles[i], Project.MSG_VERBOSE);", "+        //", "+        // Check targets vs source files specified via filesets", "+        //", "+        if (upToDate) {", "+           Enumeration enumSourceSets = sourceFileSets.elements();", "+           while (upToDate && enumSourceSets.hasMoreElements()) {", "+          ", "+              FileSet sourceFS          = (FileSet) enumSourceSets.nextElement();", "+              DirectoryScanner sourceDS = sourceFS.getDirectoryScanner(project);", "+              String[] sourceFiles      = sourceDS.getIncludedFiles();", "+", "+              for (int i=0; upToDate && i < sourceFiles.length; i++) {", "+                 File src = new File(sourceFS.getDir(project), sourceFiles[i]);", "+", "+                 if (src.lastModified() > now) {", "+                    log(\"Warning: \"+sourceFiles[i]+\" modified in the future.\", ", "+                        Project.MSG_WARN);", "+                 }", "+", "+                 if (src.lastModified() > oldestTargetTime) {", "+                    upToDate = false;", "+                    log(oldestTarget + \" is out of date with respect to \" +", "+                        sourceFiles[i], Project.MSG_VERBOSE);", "+                 }", "+              }", "+           }", "+        }", "+"]}]}
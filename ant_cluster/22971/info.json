{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b44b5ed4d85a529c7a5ccf7ab632557a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b196f1a709ea3154be521ba787d3ef1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/types/selectors/DependSelectorTest.java", "commitBeforeChange": "e5235423ccd494cb7516a1df6e3e13a74a22b767", "commitAfterChange": "da5a13f8e4e0e4475f942b5ae5670271b711d423", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void testSelectionBehaviour()", "signatureAfterChange": "     public void testSelectionBehaviour()", "diff": ["+        File subdir;", "-            s.setTargetdir(basedirname);", "+            s.setTargetdir(beddir);", "-            s.setTargetdir(basedirname);", "+            s.setTargetdir(beddir);", "-            s = (DependSelector)getInstance();", "-            s.setTargetdir(basedirname);", "-            m = s.createMapper();", "-            m.setType(merge);", "-            m.setTo(\"asf-logo.gif.gz\");", "-            results = selectionString(s);", "-            assertEquals(\"TFFFFTTTFFFF\", results);", "+            if (!JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)) {", "+                s = (DependSelector)getInstance();", "+                s.setTargetdir(beddir);", "+                m = s.createMapper();", "+                m.setType(merge);", "+                m.setTo(\"asf-logo.gif.gz\");", "+                results = selectionString(s);", "+                assertEquals(\"TFFFFTTTFFF\", results.substring(0,11));", "+", "+                s = (DependSelector)getInstance();", "+                s.setTargetdir(beddir);", "+                m = s.createMapper();", "+                m.setType(merge);", "+                m.setTo(\"asf-logo.gif.bz2\");", "+                results = selectionString(s);", "+                assertEquals(\"TTFTTTTTTTTT\", results);", "+", "+                // Test for path relative to project base directory", "+                s = (DependSelector)getInstance();", "+                subdir = new File(\"selectortest/tar/bz2\");", "+                s.setTargetdir(subdir);", "+                m = s.createMapper();", "+                m.setType(glob);", "+                m.setFrom(\"*.bz2\");", "+                m.setTo(\"*.tar.bz2\");", "+                results = selectionString(s);", "+                assertEquals(\"FFTFFFFFFTTF\", results);", "+            }", "-            s.setTargetdir(basedirname);", "-            m = s.createMapper();", "-            m.setType(merge);", "-            m.setTo(\"asf-logo.gif.bz2\");", "-            results = selectionString(s);", "-            assertEquals(\"TTFTTTTTTTTT\", results);", "-", "-            s = (DependSelector)getInstance();", "-            s.setTargetdir(basedirname + \"/tar/bz2\");", "+            subdir = new File(beddir,\"tar/bz2\");", "+            s.setTargetdir(subdir);", "+            try {", "+                makeMirror();", "+", "+                s = (DependSelector)getInstance();", "+                File testdir = getProject().resolveFile(\"selectortest2\");", "+                s.setTargetdir(testdir);", "+                results = selectionString(s);", "+                assertEquals(\"FFFTTFFFFFFF\", results);", "+", "+                s = (DependSelector)getInstance();", "+                testdir = getProject().resolveFile(\"selectortest2/tar/bz2\");", "+                s.setTargetdir(testdir);", "+                m = s.createMapper();", "+                m.setType(glob);", "+                m.setFrom(\"*.bz2\");", "+                m.setTo(\"*.tar.bz2\");", "+                results = mirrorSelectionString(s);", "+                assertEquals(\"FFFFFFFFFTTF\", results);", "+                results = selectionString(s);", "+                assertEquals(\"FFFFFFFFFTTF\", results);", "+            }", "+            finally {", "+                cleanupMirror();", "+            }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1fc9b6add464b9680d67098d1215300", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/types/selectors/DateSelectorTest.java", "commitBeforeChange": "e5235423ccd494cb7516a1df6e3e13a74a22b767", "commitAfterChange": "da5a13f8e4e0e4475f942b5ae5670271b711d423", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void testSelectionBehaviour()", "signatureAfterChange": "     public void testSelectionBehaviour()", "diff": ["-            s = (DateSelector)getInstance();", "-            s.setDatetime(\"11/21/2001 4:54 AM\");", "-            s.setWhen(before);", "-            results = selectionString(s);", "-            assertEquals(\"TFTFFFFFFFFT\", results);", "-/*", "-            s = (DateSelector)getInstance();", "-            s.setDatetime(\"11/21/2001 4:55 AM\");", "-            java.util.Date d = new java.util.Date(\"11/21/2001 4:55 AM\");", "-            long milliseconds = s.getMillis();", "-            s.setWhen(equal);", "-            results = selectionString(s);", "-            assertEquals(\"TTFFTFFFTTTT\", results);", "+            if (!JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)) {", "+                s = (DateSelector)getInstance();", "+                s.setDatetime(\"11/21/2001 4:54 AM\");", "+                s.setWhen(before);", "+                results = selectionString(s);", "+                assertEquals(\"TFTFFFFFFFFT\", results);", "-            s = (DateSelector)getInstance();", "-            s.setMillis(1006347300000L);", "-            s.setWhen(equal);", "-            results = selectionString(s);", "-            assertEquals(\"TTFFTFFFTTTT\", results);", "+                s = (DateSelector)getInstance();", "+                s.setDatetime(\"11/21/2001 4:55 AM\");", "+                SimpleDateFormat formatter = new SimpleDateFormat();", "+                Date d = formatter.parse(\"11/21/2001 4:55 AM\",new ParsePosition(0));", "-            s = (DateSelector)getInstance();", "-            s.setMillis(milliseconds);", "-            s.setWhen(equal);", "-            results = selectionString(s);", "-            assertEquals(\"TTFFTFFFTTTT\", results);", "+                long milliseconds = s.getMillis();", "+                s.setWhen(equal);", "+                results = selectionString(s);", "+                assertEquals(\"TTFFTFFFTTTT\", results);", "-            s = (DateSelector)getInstance();", "-            s.setMillis(1006347305000L);", "-            s.setWhen(equal);", "-            s.setGranularity(15000);", "-            results = selectionString(s);", "-            assertEquals(\"TTFFTFFFTTTT\", results);", "-*/", "-            s = (DateSelector)getInstance();", "-            s.setDatetime(\"11/21/2001 4:56 AM\");", "-            s.setWhen(after);", "-            results = selectionString(s);", "-            assertEquals(\"TFFTFTTTFFFT\", results);", "+                s = (DateSelector)getInstance();", "+                s.setMillis(milliseconds);", "+                s.setWhen(equal);", "+                results = selectionString(s);", "+                assertEquals(\"TTFFTFFFTTTT\", results);", "-            s = (DateSelector)getInstance();", "-            Parameter param1 = new Parameter();", "-            Parameter param2 = new Parameter();", "-            param1.setName(\"datetime\");", "-            param1.setValue(\"11/21/2001 4:56 AM\");", "-            param2.setName(\"when\");", "-            param2.setValue(\"after\");", "-            Parameter[] params = {param1,param2};", "-            s.setParameters(params);", "-            results = selectionString(s);", "-            assertEquals(\"TFFTFTTTFFFT\", results);", "+                s = (DateSelector)getInstance();", "+                s.setDatetime(\"11/21/2001 4:56 AM\");", "+                s.setWhen(after);", "+                results = selectionString(s);", "+                assertEquals(\"TFFTFTTTFFFT\", results);", "+", "+                s = (DateSelector)getInstance();", "+                Parameter param1 = new Parameter();", "+                Parameter param2 = new Parameter();", "+                param1.setName(\"datetime\");", "+                param1.setValue(\"11/21/2001 4:56 AM\");", "+                param2.setName(\"when\");", "+                param2.setValue(\"after\");", "+                Parameter[] params = {param1,param2};", "+                s.setParameters(params);", "+                results = selectionString(s);", "+                assertEquals(\"TFFTFTTTFFFT\", results);", "+            }", "+            try {", "+                makeMirror();", "+", "+                s = (DateSelector)getInstance();", "+                long testtime = mirrorfiles[5].lastModified();", "+                s.setMillis(testtime);", "+                s.setWhen(after);", "+                s.setGranularity(2);", "+                results = mirrorSelectionString(s);", "+                assertEquals(\"TFFFFTTTTTTT\", results);", "+", "+                s = (DateSelector)getInstance();", "+                testtime = mirrorfiles[6].lastModified();", "+                s.setMillis(testtime);", "+                s.setWhen(before);", "+                s.setGranularity(2);", "+                results = mirrorSelectionString(s);", "+                assertEquals(\"TTTTTTTFFFFT\", results);", "+            }", "+            finally {", "+                cleanupMirror();", "+            }"]}]}
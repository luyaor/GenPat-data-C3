{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a8aa6d3081892d95ab29aec407362c06", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "088d8436f852dad78e72319b6b1ef075", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Tar.java", "commitBeforeChange": "5c1e42a954c9a3212c5263e1fdb012ab48515807", "commitAfterChange": "3c6126f29bd3b99708ba5fc606c9afca2c3384a9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        if (baseDir == null) {", "-            throw new BuildException(\"basedir attribute must be set!\", ", "-                                     location);", "-        }", "-        if (!baseDir.exists()) {", "-            throw new BuildException(\"basedir does not exist!\", location);", "+        if (baseDir != null) {", "+            if (!baseDir.exists()) {", "+                throw new BuildException(\"basedir does not exist!\", location);", "+            }", "+            ", "+            // add the main fileset to the list of filesets to process.", "+            TarFileSet mainFileSet = new TarFileSet(fileset);", "+            mainFileSet.setDir(baseDir);", "+            mainFileSet.setDefaultexcludes(useDefaultExcludes);", "+            filesets.addElement(mainFileSet);", "-        DirectoryScanner ds = super.getDirectoryScanner(baseDir);", "+        // check if tr is out of date with respect to each", "+        // fileset", "+        boolean upToDate = true;", "+        for (Enumeration e = filesets.elements(); e.hasMoreElements();) {", "+            TarFileSet fs = (TarFileSet)e.nextElement();", "+            String[] files = fs.getFiles(project);", "+            ", "+            if (!archiveIsUpToDate(files)) {", "+                upToDate = false;", "+                break;", "+            }", "+        }", "-        String[] files = ds.getIncludedFiles();", "-", "-        if (archiveIsUpToDate(files)) {", "+        if (upToDate) {", "-", "-            for (int i = 0; i < files.length; i++) {", "-                File f = new File(baseDir,files[i]);", "-                String name = files[i].replace(File.separatorChar,'/');", "-                tarFile(f, tOut, name);", "+        ", "+            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {", "+                TarFileSet fs = (TarFileSet)e.nextElement();", "+                String[] files = fs.getFiles(project);", "+                for (int i = 0; i < files.length; i++) {", "+                    File f = new File(baseDir,files[i]);", "+                    String name = files[i].replace(File.separatorChar,'/');", "+                    tarFile(f, tOut, name, fs);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4781748facbd38b828bddff1d5abf328", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/MappedResourceCollection.java", "commitBeforeChange": "bc221496581a8391d9210666b828a7c63cddd89e", "commitAfterChange": "45485bd5486044bc45821941cc6d33d83c22f939", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "          public Object next()", "signatureAfterChange": "      private Collection getCollection()", "diff": ["+    private Collection getCollection() {", "+        Collection collected = new ArrayList();", "+        FileNameMapper m =", "+            mapper != null ? mapper.getImplementation() : new IdentityMapper();", "+        for (Iterator iter = nested.iterator(); iter.hasNext(); ) {", "+            Resource r = (Resource) iter.next();", "+            if (enableMultipleMappings) {", "+                String[] n = m.mapFileName(r.getName());", "+                if (n != null) {", "+                    for (int i = 0; i < n.length; i++) {", "+                        collected.add(new MappedResource(r,", "+                                                         new MergingMapper(n[i]))", "+                                      );", "+                    }", "+                }", "+                collected.add(new MappedResource(r, m));", "-", "-        public Object next() {", "-            return new MappedResource((Resource) sourceIterator.next(),", "-                                      mapper);", "-        }", "+        return collected;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e214fb32e831ca3486099741c7565990", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7620d2b8e8cd72eda303579800b39525", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2InputStream.java", "commitBeforeChange": "3477bbf6474cdd2b70b12eb638e64415a4f1c2ec", "commitAfterChange": "134d95afef9b42cf08f2eccb077b97525ac38034", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 18, "signatureBeforeChange": "      private void getAndMoveToFrontDecode()", "signatureAfterChange": "      private void getAndMoveToFrontDecode() throws IOException", "diff": ["-    private void getAndMoveToFrontDecode() {", "-        char[] yy = new char[256];", "-        int i, j, nextSym, limitLast;", "-        int EOB, groupNo, groupPos;", "-", "-        limitLast = baseBlockSize * blockSize100k;", "-        origPtr = bsGetIntVS(24);", "-", "+    private void getAndMoveToFrontDecode() throws IOException {", "+        this.origPtr = bsR(24);", "-        EOB = nInUse + 1;", "-        groupNo = -1;", "-        groupPos = 0;", "+", "+        final InputStream in    = this.in;", "+        final Data data         = this.data;", "+        final byte[] ll8        = data.ll8;", "+        final int[] unzftab     = data.unzftab;", "+        final byte[] selector   = data.selector;", "+        final byte[] seqToUnseq = data.seqToUnseq;", "+        final char[] yy         = data.getAndMoveToFrontDecode_yy;", "+        final int[] minLens     = data.minLens;", "+        final int[][] limit     = data.limit;", "+        final int[][] base      = data.base;", "+        final int[][] perm      = data.perm;", "+        final int limitLast     = this.blockSize100k * 100000;", "-        for (i = 0; i <= 255; i++) {", "+        for (int i = 256; --i >= 0;) {", "+            yy[i] = (char) i;", "-        for (i = 0; i <= 255; i++) {", "-            yy[i] = (char) i;", "-        }", "+        int groupNo     = 0;", "+        int groupPos    = G_SIZE - 1;", "+        final int eob   = this.nInUse + 1;", "+        int nextSym     = getAndMoveToFrontDecode0(0);", "+        int bsBuff      = this.bsBuff;", "+        int bsLive      = this.bsLive;", "+        int last        = -1;", "+        int zt          = selector[groupNo] & 0xff;", "+        int[] base_zt   = base[zt];", "+        int[] limit_zt  = limit[zt];", "+        int[] perm_zt   = perm[zt];", "+        int minLens_zt  = minLens[zt];", "-        last = -1;", "-", "-        {", "-            int zt, zn, zvec, zj;", "-            if (groupPos == 0) {", "-                groupNo++;", "-                groupPos = G_SIZE;", "-            }", "-            groupPos--;", "-            zt = selector[groupNo];", "-            zn = minLens[zt];", "-            zvec = bsR(zn);", "-            while (zvec > limit[zt][zn]) {", "-                zn++;", "-                {", "-                    {", "-                        while (bsLive < 1) {", "-                            int zzi;", "-                            char thech = 0;", "-                            try {", "-                                thech = (char) bsStream.read();", "-                            } catch (IOException e) {", "-                                compressedStreamEOF();", "-                            }", "-                            if (thech == -1) {", "-                                compressedStreamEOF();", "-                            }", "-                            zzi = thech;", "-                            bsBuff = (bsBuff << 8) | (zzi & 0xff);", "-                            bsLive += 8;", "-                        }", "-                    }", "-                    zj = (bsBuff >> (bsLive - 1)) & 1;", "-                    bsLive--;", "-                }", "-                zvec = (zvec << 1) | zj;", "-            }", "-            nextSym = perm[zt][zvec - base[zt][zn]];", "-        }", "-", "-        while (true) {", "-", "-            if (nextSym == EOB) {", "-                break;", "-            }", "-", "-            if (nextSym == RUNA || nextSym == RUNB) {", "-                char ch;", "+        while (nextSym != eob) {", "+            if ((nextSym == RUNA) || (nextSym == RUNB)) {", "-                int N = 1;", "-                do {", "+", "+                for (int n = 1; true; n <<= 1) {", "-                        s = s + (0 + 1) * N;", "+                        s += n;", "-                        s = s + (1 + 1) * N;", "-                           }", "-                    N = N * 2;", "-                    {", "-                        int zt, zn, zvec, zj;", "-                        if (groupPos == 0) {", "-                            groupNo++;", "-                            groupPos = G_SIZE;", "-                        }", "-                        groupPos--;", "-                        zt = selector[groupNo];", "-                        zn = minLens[zt];", "-                        zvec = bsR(zn);", "-                        while (zvec > limit[zt][zn]) {", "-                            zn++;", "-                            {", "-                                {", "-                                    while (bsLive < 1) {", "-                                        int zzi;", "-                                        char thech = 0;", "-                                        try {", "-                                            thech = (char) bsStream.read();", "-                                        } catch (IOException e) {", "-                                            compressedStreamEOF();", "-                                        }", "-                                        if (thech == -1) {", "-                                            compressedStreamEOF();", "-                                        }", "-                                        zzi = thech;", "-                                        bsBuff = (bsBuff << 8) | (zzi & 0xff);", "-                                        bsLive += 8;", "-                                    }", "-                                }", "-                                zj = (bsBuff >> (bsLive - 1)) & 1;", "-                                bsLive--;", "-                            }", "-                            zvec = (zvec << 1) | zj;", "-                        }", "-                        nextSym = perm[zt][zvec - base[zt][zn]];", "+                        s += n << 1;", "+                    } else {", "+                        break;", "-                } while (nextSym == RUNA || nextSym == RUNB);", "-                s++;", "-                ch = seqToUnseq[yy[0]];", "-                unzftab[ch] += s;", "+                    if (groupPos == 0) {", "+                        groupPos    = G_SIZE - 1;", "+                        zt          = selector[++groupNo] & 0xff;", "+                        base_zt     = base[zt];", "+                        limit_zt    = limit[zt];", "+                        perm_zt     = perm[zt];", "+                        minLens_zt  = minLens[zt];", "+                    } else {", "+                        groupPos--;", "+                    }", "-                while (s > 0) {", "-                    last++;", "-                    ll8[last] = ch;", "-                    s--;", "+                    int zn = minLens_zt;", "+", "+                    // Inlined:", "+                    // int zvec = bsR(zn);", "+                    while (bsLive < zn) {", "+                        final int thech = in.read();", "+                        if (thech >= 0) {", "+                            bsBuff = (bsBuff << 8) | thech;", "+                            bsLive += 8;", "+                            continue;", "+                        } else {", "+                            throw new IOException(\"unexpected end of stream\");", "+                        }", "+                    }", "+                    int zvec = (bsBuff >> (bsLive - zn)) & ((1 << zn) - 1);", "+                    bsLive -= zn;", "+", "+                    while (zvec > limit_zt[zn]) {", "+                        zn++;", "+                        while (bsLive < 1) {", "+                            final int thech = in.read();", "+                            if (thech >= 0) {", "+                                bsBuff = (bsBuff << 8) | thech;", "+                                bsLive += 8;", "+                                continue;", "+                            } else {", "+                                throw new IOException(\"unexpected end of stream\");", "+                            }", "+                        }", "+                        bsLive--;", "+                        zvec = (zvec << 1) | ((bsBuff >> bsLive) & 1);", "+                    }", "+                    nextSym = perm_zt[zvec - base_zt[zn]];", "+                }", "+", "+                final byte ch = seqToUnseq[yy[0]];", "+                unzftab[ch & 0xff] += s + 1;", "+", "+                while (s-- >= 0) {", "+                    ll8[++last] = ch;", "-                    blockOverrun();", "+                    throw new IOException(\"block overrun\");", "-                continue;", "-                char tmp;", "-                last++;", "-                if (last >= limitLast) {", "-                    blockOverrun();", "+                if (++last >= limitLast) {", "+                    throw new IOException(\"block overrun\");", "-                tmp = yy[nextSym - 1];", "-                unzftab[seqToUnseq[tmp]]++;", "+                final char tmp = yy[nextSym - 1];", "+                unzftab[seqToUnseq[tmp] & 0xff]++;", "-                  hence the unrolling.", "-", "-                  for (j = nextSym-1; j > 0; j--) yy[j] = yy[j-1];", "+                  hence avoid native method call overhead of", "+                  System.arraycopy for very small ranges to copy.", "-", "-                j = nextSym - 1;", "-                for (; j > 3; j -= 4) {", "-                    yy[j]     = yy[j - 1];", "-                    yy[j - 1] = yy[j - 2];", "-                    yy[j - 2] = yy[j - 3];", "-                    yy[j - 3] = yy[j - 4];", "-                }", "-                for (; j > 0; j--) {", "-                    yy[j] = yy[j - 1];", "+                if (nextSym <= 16) {", "+                    for (int j = nextSym - 1; j > 0;) {", "+                        yy[j] = yy[--j];", "+                    }", "+                } else {", "+                    System.arraycopy(yy, 0, yy, 1, nextSym - 1);", "-                {", "-                    int zt, zn, zvec, zj;", "-                    if (groupPos == 0) {", "-                        groupNo++;", "-                        groupPos = G_SIZE;", "-                    }", "+", "+                if (groupPos == 0) {", "+                    groupPos    = G_SIZE - 1;", "+                    zt          = selector[++groupNo] & 0xff;", "+                    base_zt     = base[zt];", "+                    limit_zt    = limit[zt];", "+                    perm_zt     = perm[zt];", "+                    minLens_zt  = minLens[zt];", "+                } else {", "-                    zt = selector[groupNo];", "-                    zn = minLens[zt];", "-                    zvec = bsR(zn);", "-                    while (zvec > limit[zt][zn]) {", "-                        zn++;", "-                        {", "-                            {", "-                                while (bsLive < 1) {", "-                                    int zzi;", "-                                    char thech = 0;", "-                                    try {", "-                                        thech = (char) bsStream.read();", "-                                    } catch (IOException e) {", "-                                        compressedStreamEOF();", "-                                    }", "-                                    zzi = thech;", "-                                    bsBuff = (bsBuff << 8) | (zzi & 0xff);", "-                                    bsLive += 8;", "-                                }", "-                            }", "-                            zj = (bsBuff >> (bsLive - 1)) & 1;", "-                            bsLive--;", "+                }", "+", "+                int zn = minLens_zt;", "+", "+                // Inlined:", "+                // int zvec = bsR(zn);", "+                while (bsLive < zn) {", "+                    final int thech = in.read();", "+                    if (thech >= 0) {", "+                        bsBuff = (bsBuff << 8) | thech;", "+                        bsLive += 8;", "+                        continue;", "+                    } else {", "+                        throw new IOException(\"unexpected end of stream\");", "+                    }", "+                }", "+                int zvec = (bsBuff >> (bsLive - zn)) & ((1 << zn) - 1);", "+                bsLive -= zn;", "+", "+                while (zvec > limit_zt[zn]) {", "+                    zn++;", "+                    while (bsLive < 1) {", "+                        final int thech = in.read();", "+                        if (thech >= 0) {", "+                            bsBuff = (bsBuff << 8) | thech;", "+                            bsLive += 8;", "+                            continue;", "+                        } else {", "+                            throw new IOException(\"unexpected end of stream\");", "-                        zvec = (zvec << 1) | zj;", "-                    nextSym = perm[zt][zvec - base[zt][zn]];", "+                    bsLive--;", "+                    zvec = (zvec << 1) | ((bsBuff >> bsLive) & 1);", "-                continue;", "+                nextSym = perm_zt[zvec - base_zt[zn]];", "+", "+        this.last = last;", "+        this.bsLive = bsLive;", "+        this.bsBuff = bsBuff;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7d8e6e4298530cd2714e107ef2366ac", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2InputStream.java", "commitBeforeChange": "3477bbf6474cdd2b70b12eb638e64415a4f1c2ec", "commitAfterChange": "134d95afef9b42cf08f2eccb077b97525ac38034", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 16, "signatureBeforeChange": "      private void recvDecodingTables()", "signatureAfterChange": "      private void recvDecodingTables() throws IOException", "diff": ["-    private void recvDecodingTables() {", "-        char len[][] = new char[N_GROUPS][MAX_ALPHA_SIZE];", "-        int i, j, t, nGroups, nSelectors, alphaSize;", "-        int minLen, maxLen;", "-        boolean[] inUse16 = new boolean[16];", "+    private void recvDecodingTables() throws IOException {", "+        final Data data           = this.data;", "+        final boolean[] inUse     = data.inUse;", "+        final byte[] pos          = data.recvDecodingTables_pos;", "+        final byte[] selector     = data.selector;", "+        final byte[] selectorMtf  = data.selectorMtf;", "+", "+        int inUse16 = 0;", "-        for (i = 0; i < 16; i++) {", "-            if (bsR(1) == 1) {", "-                inUse16[i] = true;", "-            } else {", "-                inUse16[i] = false;", "+        for (int i = 0; i < 16; i++) {", "+            if (bsGetBit()) {", "+                inUse16 |= 1 << i;", "-        for (i = 0; i < 256; i++) {", "+        for (int i = 256; --i >= 0;) {", "-        for (i = 0; i < 16; i++) {", "-            if (inUse16[i]) {", "-                for (j = 0; j < 16; j++) {", "-                    if (bsR(1) == 1) {", "-                        inUse[i * 16 + j] = true;", "+        for (int i = 0; i < 16; i++) {", "+            if ((inUse16 & (1 << i)) != 0) {", "+                final int i16 = i << 4;", "+                for (int j = 0; j < 16; j++) {", "+                    if (bsGetBit()) {", "+                        inUse[i16 + j] = true;", "-        alphaSize = nInUse + 2;", "+        final int alphaSize = this.nInUse + 2;", "-        nGroups = bsR(3);", "-        nSelectors = bsR(15);", "-        for (i = 0; i < nSelectors; i++) {", "-            j = 0;", "-            while (bsR(1) == 1) {", "+        final int nGroups = bsR(3);", "+        final int nSelectors = bsR(15);", "+", "+        for (int i = 0; i < nSelectors; i++) {", "+            int j = 0;", "+            while (bsGetBit()) {", "-            selectorMtf[i] = (char) j;", "+            selectorMtf[i] = (byte) j;", "-        {", "-            char[] pos = new char[N_GROUPS];", "-            char tmp, v;", "-            for (v = 0; v < nGroups; v++) {", "-                pos[v] = v;", "-            }", "-", "-            for (i = 0; i < nSelectors; i++) {", "-                v = selectorMtf[i];", "-                tmp = pos[v];", "-                while (v > 0) {", "-                    pos[v] = pos[v - 1];", "-                    v--;", "-                }", "-                pos[0] = tmp;", "-                selector[i] = tmp;", "-            }", "+        for (int v = nGroups; --v >= 0;) {", "+            pos[v] = (byte) v;", "+", "+        for (int i = 0; i < nSelectors; i++) {", "+            int v = selectorMtf[i] & 0xff;", "+            final byte tmp = pos[v];", "+            while (v > 0) {", "+                // nearly all times v is zero, 4 in most other cases", "+                pos[v] = pos[v - 1];", "+                v--;", "+            }", "+            pos[0] = tmp;", "+            selector[i] = tmp;", "+        }", "+", "+        final char[][] len  = data.temp_charArray2d;", "-        for (t = 0; t < nGroups; t++) {", "+        for (int t = 0; t < nGroups; t++) {", "-            for (i = 0; i < alphaSize; i++) {", "-                while (bsR(1) == 1) {", "-                    if (bsR(1) == 0) {", "-                        curr++;", "-                    } else {", "-                        curr--;", "-                    }", "+            final char[] len_t = len[t];", "+            for (int i = 0; i < alphaSize; i++) {", "+                while (bsGetBit()) {", "+                    curr += bsGetBit() ? -1 : 1;", "-                len[t][i] = (char) curr;", "+                len_t[i] = (char) curr;", "-        /* Create the Huffman decoding tables */", "-        for (t = 0; t < nGroups; t++) {", "-            minLen = 32;", "-            maxLen = 0;", "-            for (i = 0; i < alphaSize; i++) {", "-                if (len[t][i] > maxLen) {", "-                    maxLen = len[t][i];", "+        // finally create the Huffman tables", "+        createHuffmanDecodingTables(alphaSize, nGroups);", "+    }", "-                if (len[t][i] < minLen) {", "-                    minLen = len[t][i];"]}]}
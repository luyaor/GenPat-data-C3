{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d1f975fd81962d35560395cd8ebeea90", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e17b7f309edfbd1d53da3172b8e2552", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "a28f64f5cf1b63d9342683d77d79a5cdf9e67f85", "commitAfterChange": "ff41336fc19f549bc995898f4543da6d7e9d9bf9", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": "     private String[] patchEnvironment()", "signatureAfterChange": "     private String[] patchEnvironment()", "diff": ["-        Vector osEnv = (Vector) getProcEnvironment().clone();", "+        Map/*<String, String>*/ osEnv =", "+            new LinkedHashMap(getEnvironmentVariables());", "-            // Get key including \"=\"", "-            String key = keyValue.substring(0, keyValue.indexOf('=') + 1);", "-            if (environmentCaseInSensitive) {", "-                // Nb: using default locale as key is a env name", "-                key = key.toLowerCase();", "-            }", "-            int size = osEnv.size();", "+            String key = keyValue.substring(0, keyValue.indexOf('='));", "-            for (int j = 0; j < size; j++) {", "-                String osEnvItem = (String) osEnv.elementAt(j);", "-                String convertedItem = environmentCaseInSensitive", "-                    ? osEnvItem.toLowerCase() : osEnvItem;", "-                if (convertedItem.startsWith(key)) {", "-                    osEnv.removeElementAt(j);", "-                    if (environmentCaseInSensitive) {", "+", "+            // Try without changing case first", "+            if (osEnv.remove(key) == null && environmentCaseInSensitive) {", "+                // not found, maybe perform a case insensitive search", "+", "+                // Nb: using default locale as key is a env name", "+                key = key.toLowerCase();", "+", "+                for (Iterator it = osEnv.keySet().iterator(); it.hasNext(); ) {", "+                    String osEnvItem = (String) it.next();", "+                    if (osEnvItem.toLowerCase().equals(key)) {", "-                        keyValue = osEnvItem.substring(0, key.length())", "-                            + keyValue.substring(key.length());", "+                        key = osEnvItem;", "+                        break;", "-                    break;", "+", "-            osEnv.addElement(keyValue);", "+            osEnv.put(key, keyValue.substring(key.length() + 1));", "-        return (String[]) (osEnv.toArray(new String[osEnv.size()]));", "+", "+        ArrayList l = new ArrayList();", "+        for (Iterator it = osEnv.entrySet().iterator(); it.hasNext(); ) {", "+            Map.Entry entry = (Map.Entry) it.next();", "+            l.add(entry.getKey() + \"=\" + entry.getValue());", "+        }", "+        return (String[]) (l.toArray(new String[osEnv.size()]));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6440f238cad4ef01e4cfcb5a7be6189", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "4783bc46159826bc33858cfc9145c4be93dfe755", "commitAfterChange": "2a291dca9249d6a4958d9898282fa67343bf59b7", "methodNumberBeforeChange": 120, "methodNumberAfterChange": 120, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-                            throw new BuildException(\"The package list \"", "-                                                     + \" location for link \" + la.getHref()", "-                                                     + \" must be provided because the link is \"", "+                            throw new BuildException(\"The package list\"", "+                                                     + \" location for link \" ", "+                                                     + la.getHref()", "+                                                     + \" must be provided \"", "+                                                     + \"because the link is \"", "-                            toExecute.createArgument().setValue (ta.getParameter());", "+                            toExecute.createArgument()", "+                                .setValue (ta.getParameter());", "-                            // The tag element is used as a fileset. Parse all the files and", "-                            // create -tag arguments.", "-                            DirectoryScanner tagDefScanner = ta.getDirectoryScanner(getProject());", "+                            // The tag element is used as a", "+                            // fileset. Parse all the files and create", "+                            // -tag arguments.", "+                            DirectoryScanner tagDefScanner = ", "+                                ta.getDirectoryScanner(getProject());", "-                                        = new BufferedReader(new FileReader(tagDefFile));", "+                                        = new BufferedReader(", "+                                              new FileReader(tagDefFile)", "+                                              );", "-                                        toExecute.createArgument().setValue (\"-tag\");", "-                                        toExecute.createArgument().setValue (line);", "+                                        toExecute.createArgument()", "+                                            .setValue(\"-tag\");", "+                                        toExecute.createArgument()", "+                                            .setValue(line);", "-                                                new FileWriter(tmpList.getAbsolutePath(),", "-                                                               true));", "+                                    new FileWriter(tmpList.getAbsolutePath(),", "+                                                   true));", "-                throw new BuildException(\"Javadoc returned \" + ret, getLocation());", "+                throw new BuildException(\"Javadoc returned \" + ret,", "+                                         getLocation());"]}]}
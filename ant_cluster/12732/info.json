{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "07cbfedaf4752d9414fcd736b25ce504", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be4fb7cae3b0b0d5000b6d10420a06d9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/FixCRLF.java", "commitBeforeChange": "f73917168fc78f993f09f5f3eccbc4d663018c40", "commitAfterChange": "b8c50342cacdaa5bc7e3e4e72eb8351da5824716", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "          protected void nextLine()             throws BuildException", "signatureAfterChange": "          protected void nextLine()             throws TaskException", "diff": ["-            throws BuildException", "+            throws TaskException", "-                    line.append( ( char )ch );", "+                    line.append( (char)ch );", "-                switch ( ( char )ch )", "+                switch( (char)ch )", "-                case '\\r':", "-                    // Check for \\r, \\r\\n and \\r\\r\\n", "-                    // Regard \\r\\r not followed by \\n as two lines", "-                    ++eolcount;", "-                    eolStr.append( '\\r' );", "-                    switch ( ( char )( ch = reader.read() ) )", "-                    {", "-                        if( ( char )( ch = reader.read() ) == '\\n' )", "+                        // Check for \\r, \\r\\n and \\r\\r\\n", "+                        // Regard \\r\\r not followed by \\n as two lines", "+                        ++eolcount;", "+                        eolStr.append( '\\r' );", "+                        switch( (char)( ch = reader.read() ) )", "-                            eolcount += 2;", "-                            eolStr.append( \"\\r\\n\" );", "-                        }", "+                            case '\\r':", "+                                if( (char)( ch = reader.read() ) == '\\n' )", "+                                {", "+                                    eolcount += 2;", "+                                    eolStr.append( \"\\r\\n\" );", "+                                }", "+                                break;", "+                            case '\\n':", "+                                ++eolcount;", "+                                eolStr.append( '\\n' );", "+                                break;", "+                        }// end of switch ((char)(ch = reader.read()))", "-                    }// end of switch ((char)(ch = reader.read()))", "-                    break;", "-                case '\\n':", "-                    ++eolcount;", "-                    eolStr.append( '\\n' );", "-                    break;", "-                throw new BuildException( \"Error\", e );", "+                throw new TaskException( \"Error\", e );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffc84641116d8b07df05c1492d7a2372", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/FixCRLF.java", "commitBeforeChange": "f73917168fc78f993f09f5f3eccbc4d663018c40", "commitAfterChange": "b8c50342cacdaa5bc7e3e4e72eb8351da5824716", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "          protected void nextLine()             throws BuildException", "signatureAfterChange": "          protected void nextLine()             throws TaskException", "diff": ["-            throws BuildException", "+            throws TaskException", "-                    line.append( ( char )ch );", "+                    line.append( (char)ch );", "-                switch ( ( char )ch )", "+                switch( (char)ch )", "-                case '\\r':", "-                    // Check for \\r, \\r\\n and \\r\\r\\n", "-                    // Regard \\r\\r not followed by \\n as two lines", "-                    ++eolcount;", "-                    eolStr.append( '\\r' );", "-                    switch ( ( char )( ch = reader.read() ) )", "-                    {", "-                        if( ( char )( ch = reader.read() ) == '\\n' )", "+                        // Check for \\r, \\r\\n and \\r\\r\\n", "+                        // Regard \\r\\r not followed by \\n as two lines", "+                        ++eolcount;", "+                        eolStr.append( '\\r' );", "+                        switch( (char)( ch = reader.read() ) )", "-                            eolcount += 2;", "-                            eolStr.append( \"\\r\\n\" );", "-                        }", "+                            case '\\r':", "+                                if( (char)( ch = reader.read() ) == '\\n' )", "+                                {", "+                                    eolcount += 2;", "+                                    eolStr.append( \"\\r\\n\" );", "+                                }", "+                                break;", "+                            case '\\n':", "+                                ++eolcount;", "+                                eolStr.append( '\\n' );", "+                                break;", "+                        }// end of switch ((char)(ch = reader.read()))", "-                    }// end of switch ((char)(ch = reader.read()))", "-                    break;", "-                case '\\n':", "-                    ++eolcount;", "-                    eolStr.append( '\\n' );", "-                    break;", "-                throw new BuildException( \"Error\", e );", "+                throw new TaskException( \"Error\", e );"]}]}
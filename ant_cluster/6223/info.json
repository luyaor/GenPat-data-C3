{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cbd611290ce57f21dbdc56437de1f11b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92d8f3914a14b2a625e8dae8f98c5ee5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "85875db138d8efbc050b5d34dbba19cc9c707db6", "commitAfterChange": "d53f5e961288efbb6a95db34d841b31d9571ea1b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void execute()          throws BuildException", "signatureAfterChange": "     public void execute()          throws BuildException", "diff": ["-        // Iterate the FileSet collection, concatenating each file as", "-        // it is encountered.", "-        for (Enumeration e = fileSets.elements(); e.hasMoreElements(); ) {", "-", "-            // Root directory for files.", "-            File fileSetBase = null;", "-", "-            // List of files.", "-            String[] srcFiles = null;", "-", "-            // Get the next file set, which could be a FileSet or a", "-            // FileList instance.", "-            Object next = e.nextElement();", "-", "-            if (next instanceof FileSet) {", "-", "-                FileSet fileSet = (FileSet) next;", "-", "-                // Get a directory scanner from the file set, which will", "-                // determine the files from the set which need to be", "-                // concatenated.", "-                DirectoryScanner scanner = ", "-                    fileSet.getDirectoryScanner(project);", "-", "-                // Determine the root path.", "-                fileSetBase = fileSet.getDir(project);", "-", "-                // Get the list of files.", "-                srcFiles = scanner.getIncludedFiles();", "-", "-            } else if (next instanceof FileList) {", "-", "-                FileList fileList = (FileList) next;", "-", "-                // Determine the root path.", "-                fileSetBase = fileList.getDir(project);", "-", "-                // Get the list of files.", "-                srcFiles = fileList.getFiles(project);", "-", "-            }", "-", "-            // Concatenate the files.", "-            catFiles(fileSetBase, srcFiles);", "+        // If using filesets, disallow inline text. This is similar to", "+        // using GNU 'cat' with file arguments -- stdin is simply", "+        // ignored.", "+        if (fileSets.size() > 0 && textBuffer != null) {", "+            throw new BuildException(\"Cannot include inline text \" + ", "+                                     \"when using filesets.\");", "+        boolean savedAppend = append;", "+        try {", "+            // Iterate the FileSet collection, concatenating each file as", "+            // it is encountered.", "+            for (Enumeration e = fileSets.elements(); e.hasMoreElements(); ) {", "+                ", "+                // Root directory for files.", "+                File fileSetBase = null;", "+                ", "+                // List of files.", "+                String[] srcFiles = null;", "+                ", "+                // Get the next file set, which could be a FileSet or a", "+                // FileList instance.", "+                Object next = e.nextElement();", "+                ", "+                if (next instanceof FileSet) {", "+                    ", "+                    FileSet fileSet = (FileSet) next;", "+                    ", "+                    // Get a directory scanner from the file set, which will", "+                    // determine the files from the set which need to be", "+                    // concatenated.", "+                    DirectoryScanner scanner = ", "+                        fileSet.getDirectoryScanner(project);", "+                    ", "+                    // Determine the root path.", "+                    fileSetBase = fileSet.getDir(project);", "+                    ", "+                    // Get the list of files.", "+                    srcFiles = scanner.getIncludedFiles();", "+                    ", "+                } else if (next instanceof FileList) {", "+                    ", "+                    FileList fileList = (FileList) next;", "+                    ", "+                    // Determine the root path.", "+                    fileSetBase = fileList.getDir(project);", "+                    ", "+                    // Get the list of files.", "+                    srcFiles = fileList.getFiles(project);", "+                    ", "+                }", "+", "+                // Concatenate the files.", "+                if (srcFiles != null) {", "+                    catFiles(fileSetBase, srcFiles);", "+                }", "+            }", "+        } finally {", "+            append = savedAppend;", "+        }", "+        ", "+    }", "-        // Reset state to default."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c159470149c881081b9fbdb100630838", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "7fb467a74ddff0c39412e3dd1e789edd15341e99", "commitAfterChange": "bca3e675c3bb2dedb5b3f0bae20a816f12187e32", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        if (baseDir == null && filesets.size() == 0 && \"zip\".equals(archiveType))", "+        if (baseDir == null && filesets.size() == 0 && ", "+            locFileSets.size() == 0 && \"zip\".equals(archiveType)) {", "-                                      \"one fileset must be given!\" );", "+                                      \"one fileset or prefixedfileset must be given!\" );", "+        }", "+            boolean success = false;", "+ ", "+                success = true;", "-                zOut.close ();", "+                // Close the output stream.", "+                try {", "+                    if (zOut != null)", "+                        zOut.close ();", "+                } catch(IOException ex) {", "+                    // If we're in this finally clause because of an exception, we don't ", "+                    // really care if there's an exception when closing the stream. E.g. if it", "+                    // throws \"ZIP file must have at least one entry\", because an exception happened", "+                    // before we added any files, then we must swallow this exception. Otherwise,", "+                    // the error that's reported will be the close() error, which is not the real ", "+                    // cause of the problem.", "+                    if (success)", "+                        throw ex;", "+                }"]}]}
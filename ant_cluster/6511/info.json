{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fac253790eb01e086c663fc3d301bfa8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9d3b6d5d2bf12ef410253fbc4b8c150", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelperRepository.java", "commitBeforeChange": "8dd8b1bb02f9992909c7bd08f8922eb9f35a5052", "commitAfterChange": "fdc711e2e2805a41b766e9d1e07d83512d97f658", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private ProjectHelper newHelper(String helperClass) throws BuildException", "signatureAfterChange": "     private Constructor getHelperConstructor(String helperClass) throws BuildException", "diff": ["-    private ProjectHelper newHelper(String helperClass) throws BuildException {", "+    private Constructor getHelperConstructor(String helperClass) throws BuildException {", "-            return ((ProjectHelper) clazz.newInstance());", "+            return clazz.getConstructor(NO_CLASS);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c265eb2cba6ae5e374a9d3541066707d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/common/org/apache/ant/common/antlib/StandardLibFactory.java", "commitBeforeChange": "c0ddb311373dc9fe32a78a15a68c4587bbb7566d", "commitAfterChange": "69d9b9a49622889f44d6792faf00f886857828d6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public Converter createConverter(Class converterClass)          throws InstantiationException, IllegalAccessException,         ExecutionException", "signatureAfterChange": "     public Object createInstance(Class requiredClass)          throws InstantiationException, IllegalAccessException,         ExecutionException", "diff": ["-    public Converter createConverter(Class converterClass)", "+    public Object createInstance(Class requiredClass)", "-        return (Converter) converterClass.newInstance();", "+        return requiredClass.newInstance();"]}]}
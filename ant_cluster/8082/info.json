{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "51a6bdc6f0bf5688b3c3a9dd00ac6702", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00d607e2008ece016c60d327630cf51c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/junit/src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "33db84490cd8526fec0508e9b8c53a2f4ae8a666", "commitAfterChange": "a25bca9c14a1c802c1dec57771f11a77143e726c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public File configureTestRunner()", "signatureAfterChange": "     public File configureTestRunner()", "diff": ["-        StringBuffer classnames = new StringBuffer();", "-        //@fixme get all test classes to run...", "-        final int testcount = 0;", "-        for (int i = 0; i < testcount; i++) {", "-            classnames.append(\"<classname>\").append(\"\\n\");", "+        // get all test classes to run...", "+        StringBuffer buf = new StringBuffer(10240);", "+        Enumeration classnames = collectTests();", "+        while ( classnames.hasMoreElements() ){", "+            String classname = (String)classnames.nextElement();", "+            buf.append(classname).append(\" \");", "-        props.setProperty(\"classnames\", classnames.toString());", "+        props.setProperty(\"classnames\", buf.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb0be8f6968bcb0ea197543bb215bb06", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "3354222b50e1a78721b163a398c46575b15ad2f7", "commitAfterChange": "ed45d2f66a2b566ce5be500c39eb8bdbe171ea1c", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "     private void checkIncludePatterns()", "signatureAfterChange": "     private void checkIncludePatterns()", "diff": ["-        Hashtable newroots = new Hashtable();", "-        // put in the newroots vector the include patterns without", "+        Map newroots = new HashMap();", "+        // put in the newroots map the include patterns without", "-            Enumeration enum2 = newroots.keys();", "+            Iterator it = newroots.entrySet().iterator();", "-            while (enum2.hasMoreElements()) {", "-                String currentelement = (String) enum2.nextElement();", "+            while (it.hasNext()) {", "+            \tMap.Entry entry = (Map.Entry)it.next();", "+                String currentelement = (String) entry.getKey();", "-                String originalpattern = (String) newroots.get(currentelement);", "+                String originalpattern = (String) entry.getValue();"]}]}
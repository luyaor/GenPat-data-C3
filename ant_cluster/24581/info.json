{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ba9fab3369059851ea764357fd8d2591", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "515a2740e0d32df13f6032e6043ba66a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "536bfb63e3ad71036b032550ca8241e07e1f5d45", "commitAfterChange": "b5397fd0e4b2a0e360dc14a9cb1ebec8f4ce7aa5", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 3, "signatureBeforeChange": "         public void init(String tag, AttributeList attrs) throws SAXParseException", "signatureAfterChange": "     public static ProjectHelper getProjectHelper()         throws BuildException", "diff": ["+     */", "+    public static ProjectHelper getProjectHelper()", "+        throws BuildException", "+    {", "+        // Identify the class loader we will be using. Ant may be", "+        // in a webapp or embeded in a different app", "+        ProjectHelper helper=null;", "+        // First, try the system property", "+            String helperClass = System.getProperty(HELPER_PROPERTY);", "+            if (helperClass != null) {", "+                helper = newHelper(helperClass);", "+            }", "+        } catch (SecurityException e) {", "+            // It's ok, we'll try next option", "+            ;", "+        }", "+", "+        // A JDK1.3 'service' ( like in JAXP ). That will plug a helper", "+        // automatically if in CLASSPATH, with the right META-INF/services.", "+        if( helper==null ) {", "+                ClassLoader classLoader=getContextClassLoader();", "+                InputStream is=null;", "+                if (classLoader != null) {", "+                    is=classLoader.getResourceAsStream( SERVICE_ID );", "+                if( is==null ) {", "+                    is=ClassLoader.getSystemResourceAsStream( SERVICE_ID );", "+                if( is != null ) {", "+                    // This code is needed by EBCDIC and other strange systems.", "+                    // It's a fix for bugs reported in xerces", "+                    BufferedReader rd;", "+                    try {", "+                        rd = new BufferedReader(new InputStreamReader(is, \"UTF-8\"));", "+                    } catch (java.io.UnsupportedEncodingException e) {", "+                        rd = new BufferedReader(new InputStreamReader(is));", "+                    }", "+                    ", "+                    String helperClassName = rd.readLine();", "+                    rd.close();", "+                    ", "+                    if (helperClassName != null &&", "+                        ! \"\".equals(helperClassName)) {", "+                        ", "+                        helper= newHelper( helperClassName );", "-         */", "-        public void init(String tag, AttributeList attrs) throws SAXParseException {", "-            String name = null;", "-            String depends = \"\";", "-            String ifCond = null;", "-            String unlessCond = null;", "-            String id = null;", "-            String description = null;", "-", "-            for (int i = 0; i < attrs.getLength(); i++) {", "-                String key = attrs.getName(i);", "-                String value = attrs.getValue(i);", "-", "-                if (key.equals(\"name\")) {", "-                    name = value;", "-                } else if (key.equals(\"depends\")) {", "-                    depends = value;", "-                } else if (key.equals(\"if\")) {", "-                    ifCond = value;", "-                } else if (key.equals(\"unless\")) {", "-                    unlessCond = value;", "-                } else if (key.equals(\"id\")) {", "-                    id = value;", "-                } else if (key.equals(\"description\")) {", "-                    description = value;", "-                } else {", "-                    throw new SAXParseException(\"Unexpected attribute \\\"\" + key + \"\\\"\", locator);", "-                }", "-            }", "-", "-            if (name == null) {", "-                throw new SAXParseException(\"target element appears without a name attribute\", locator);", "-            }", "-", "-            target = new Target();", "-            target.setName(name);", "-            target.setIf(ifCond);", "-            target.setUnless(unlessCond);", "-            target.setDescription(description);", "-            project.addTarget(name, target);", "-", "-            if (id != null && !id.equals(\"\")) {", "-                project.addReference(id, target);", "-            }", "-", "-            // take care of dependencies", "-", "-            if (depends.length() > 0) {", "-                target.setDepends(depends);", "+            } catch( Exception ex ) {", "+                ;", "+        if( helper!=null ) {", "+            return helper;", "+        } else {", "+            // Default", "+            return new ProjectHelperImpl();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e156dcaf366b107c2f81a9895df4f4d6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Definer.java", "commitBeforeChange": "8d496e5daaebec48cea6b123ca56351d9fd95245", "commitAfterChange": "2ecc6fa52abb223a67f8b81db23427f103c49b8b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        if (name==null || value==null ) {", "-            String msg = \"name or classname attributes of \"", "-                + getTaskName() + \" element \"", "-                + \"are undefined\";", "-            throw new BuildException(msg);", "-        }", "-        try {", "-            AntClassLoader al = null;", "-            if (classpath != null) {", "-                al = new AntClassLoader(project, classpath);", "-            } else {", "-                al = new AntClassLoader(project, Path.systemClasspath);", "-            }", "-            // need to load Task via system classloader or the new", "-            // task we want to define will never be a Task but always", "-            // be wrapped into a TaskAdapter.", "-            al.addSystemPackageRoot(\"org.apache.tools.ant\");", "+        AntClassLoader al=createLoader();", "+        if (file==null && resource==null ) {", "+", "+            // simple case - one definition", "+            if ( name==null || value==null  ) {", "+                String msg = \"name or classname attributes of \"", "+                    + getTaskName() + \" element \"", "+                    + \"are undefined\";", "+                throw new BuildException(msg);", "+            }", "+            addDefinition( al, name, value );", "+", "+        } else {", "+", "+            try {", "+                if (name != null || value != null) {", "+                    String msg = \"You must not specify name or value \"", "+                        + \"together with file or resource.\";", "+                    throw new BuildException(msg, location);", "+                }", "+            ", "+                if (file != null && resource != null) {", "+                    String msg = \"You must not specify both, file and resource.\";", "+                    throw new BuildException(msg, location);", "+                }", "+            ", "+", "+                Properties props=new Properties();", "+                InputStream is=null;", "+                if( file != null ) {", "+                    log(\"Loading definitions from file \" + file, ", "+                        Project.MSG_VERBOSE);", "+                    is=new FileInputStream( file );", "+                    if (is == null) {", "+                        log(\"Could not load definitions from file \" + file", "+                            + \". It doesn\\'t exist.\", Project.MSG_WARN);", "+                    }", "+                }    ", "+                if( resource!=null ) {", "+                    log(\"Loading definitions from resource \" + resource, ", "+                        Project.MSG_VERBOSE);", "+                    is=al.getResourceAsStream( resource );", "+                    if (is == null) {", "+                        log(\"Could not load definitions from resource \" ", "+                            + resource + \". It could not be found.\", ", "+                            Project.MSG_WARN);", "+                    }", "+                }", "+", "+                if( is!=null ) {", "+                    props.load( is );", "+                    Enumeration keys=props.keys();", "+                    while( keys.hasMoreElements() ) {", "+                        String n=(String)keys.nextElement();", "+                        String v=props.getProperty( n );", "+                        addDefinition( al, n, v );", "+                    }", "+                }", "+            } catch( IOException ex ) {", "+                throw new BuildException(ex, location);", "+            }", "+        }", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1d21f6be0df41a2d74d0f8a1a8fc8eeb", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e17b7f309edfbd1d53da3172b8e2552", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "a28f64f5cf1b63d9342683d77d79a5cdf9e67f85", "commitAfterChange": "ff41336fc19f549bc995898f4543da6d7e9d9bf9", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": "     private String[] patchEnvironment()", "signatureAfterChange": "     private String[] patchEnvironment()", "diff": ["-        Vector osEnv = (Vector) getProcEnvironment().clone();", "+        Map/*<String, String>*/ osEnv =", "+            new LinkedHashMap(getEnvironmentVariables());", "-            // Get key including \"=\"", "-            String key = keyValue.substring(0, keyValue.indexOf('=') + 1);", "-            if (environmentCaseInSensitive) {", "-                // Nb: using default locale as key is a env name", "-                key = key.toLowerCase();", "-            }", "-            int size = osEnv.size();", "+            String key = keyValue.substring(0, keyValue.indexOf('='));", "-            for (int j = 0; j < size; j++) {", "-                String osEnvItem = (String) osEnv.elementAt(j);", "-                String convertedItem = environmentCaseInSensitive", "-                    ? osEnvItem.toLowerCase() : osEnvItem;", "-                if (convertedItem.startsWith(key)) {", "-                    osEnv.removeElementAt(j);", "-                    if (environmentCaseInSensitive) {", "+", "+            // Try without changing case first", "+            if (osEnv.remove(key) == null && environmentCaseInSensitive) {", "+                // not found, maybe perform a case insensitive search", "+", "+                // Nb: using default locale as key is a env name", "+                key = key.toLowerCase();", "+", "+                for (Iterator it = osEnv.keySet().iterator(); it.hasNext(); ) {", "+                    String osEnvItem = (String) it.next();", "+                    if (osEnvItem.toLowerCase().equals(key)) {", "-                        keyValue = osEnvItem.substring(0, key.length())", "-                            + keyValue.substring(key.length());", "+                        key = osEnvItem;", "+                        break;", "-                    break;", "+", "-            osEnv.addElement(keyValue);", "+            osEnv.put(key, keyValue.substring(key.length() + 1));", "-        return (String[]) (osEnv.toArray(new String[osEnv.size()]));", "+", "+        ArrayList l = new ArrayList();", "+        for (Iterator it = osEnv.entrySet().iterator(); it.hasNext(); ) {", "+            Map.Entry entry = (Map.Entry) it.next();", "+            l.add(entry.getKey() + \"=\" + entry.getValue());", "+        }", "+        return (String[]) (l.toArray(new String[osEnv.size()]));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42ec4225e8ae52ba935483022db7cdfe", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2InputStream.java", "commitBeforeChange": "3477bbf6474cdd2b70b12eb638e64415a4f1c2ec", "commitAfterChange": "134d95afef9b42cf08f2eccb077b97525ac38034", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "      private void initBlock()", "signatureAfterChange": "      private void initBlock() throws IOException", "diff": ["+    private void initBlock() throws IOException {", "+        char magic0 = bsGetUByte();", "+        char magic1 = bsGetUByte();", "+        char magic2 = bsGetUByte();", "+        char magic3 = bsGetUByte();", "+        char magic4 = bsGetUByte();", "+        char magic5 = bsGetUByte();", "+", "+        if (magic0 == 0x17 &&", "+            magic1 == 0x72 &&", "+            magic2 == 0x45 &&", "+            magic3 == 0x38 &&", "+            magic4 == 0x50 &&", "+            magic5 == 0x90) {", "+            complete(); // end of file", "+        } else if (magic0 != 0x31 || // '1'", "+                   magic1 != 0x41 || // ')'", "+                   magic2 != 0x59 || // 'Y'", "+                   magic3 != 0x26 || // '&'", "+                   magic4 != 0x53 || // 'S'", "+                   magic5 != 0x59   // 'Y'", "+                   ) {", "+            this.currentState = EOF;", "+            throw new IOException(\"bad block header\");", "+            this.storedBlockCRC = bsGetInt();", "+            this.blockRandomised = bsR(1) == 1;", "+", "+            /**", "+             * Allocate data here instead in constructor, so we do not", "+             * allocate it if the input file is empty.", "+             */", "+            if (this.data == null) {", "+                this.data = new Data(this.blockSize100k);", "+", "+            // currBlockNo++;", "+            getAndMoveToFrontDecode();", "+", "+            this.crc.initialiseCRC();", "+            this.currentState = START_BLOCK_STATE;", "-    private void initBlock() {", "-        char magic1, magic2, magic3, magic4;", "-        char magic5, magic6;", "-        magic1 = bsGetUChar();", "-        magic2 = bsGetUChar();", "-        magic3 = bsGetUChar();", "-        magic4 = bsGetUChar();", "-        magic5 = bsGetUChar();", "-        magic6 = bsGetUChar();", "-        if (magic1 == 0x17 && magic2 == 0x72 && magic3 == 0x45", "-            && magic4 == 0x38 && magic5 == 0x50 && magic6 == 0x90) {", "-            complete();", "-            return;", "-        }", "-        if (magic1 != 0x31 || magic2 != 0x41 || magic3 != 0x59", "-            || magic4 != 0x26 || magic5 != 0x53 || magic6 != 0x59) {", "-            badBlockHeader();", "-            streamEnd = true;", "-            return;", "-        }", "-", "-        storedBlockCRC = bsGetInt32();", "-", "-        if (bsR(1) == 1) {", "-            blockRandomised = true;", "-        } else {", "-            blockRandomised = false;", "-        }", "-", "-        //        currBlockNo++;", "-        getAndMoveToFrontDecode();", "-", "-        mCrc.initialiseCRC();", "-        currentState = START_BLOCK_STATE;", "-    }"]}]}
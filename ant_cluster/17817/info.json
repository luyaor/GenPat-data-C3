{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1e15b0a1784600f730a24cd2df32743d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "022da47f2ab7c495ba87a91f76e265aa", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/LayoutPreservingProperties.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private String escape(String s, boolean escapeAllSpaces)", "signatureAfterChange": "     private String escape(final String s, final boolean escapeAllSpaces)", "diff": ["-    private String escape(String s, boolean escapeAllSpaces) {", "+    private String escape(final String s, final boolean escapeAllSpaces) {", "-        char[] ch = new char[s.length()];", "+        final char[] ch = new char[s.length()];", "-        String forEscaping = \"\\t\\f\\r\\n\\\\:=#!\";", "-        String escaped = \"tfrn\\\\:=#!\";", "-        StringBuffer buffy = new StringBuffer(s.length());", "+        final String forEscaping = \"\\t\\f\\r\\n\\\\:=#!\";", "+        final String escaped = \"tfrn\\\\:=#!\";", "+        final StringBuffer buffy = new StringBuffer(s.length());", "-            char c = ch[i];", "+            final char c = ch[i];", "-            int p = forEscaping.indexOf(c);", "+            final int p = forEscaping.indexOf(c);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "293e9536b1ff3211bb6bb6968da559a5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Redirector.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "      private OutputStream foldFiles(File[] file, String logHead, int loglevel,             boolean append, boolean createEmptyFiles)", "signatureAfterChange": "      private OutputStream foldFiles(final File[] file, final String logHead, final int loglevel,             final boolean append, final boolean createEmptyFiles)", "diff": ["-    private OutputStream foldFiles(File[] file, String logHead, int loglevel,", "-            boolean append, boolean createEmptyFiles) {", "-        OutputStream result = new LazyFileOutputStream(file[0], append,", "+    private OutputStream foldFiles(final File[] file, final String logHead, final int loglevel,", "+            final boolean append, final boolean createEmptyFiles) {", "+        final OutputStream result = new LazyFileOutputStream(file[0], append,", "-        char[] c = new char[logHead.length()];", "+        final char[] c = new char[logHead.length()];", "-        String indent = new String(c);", "+        final String indent = new String(c);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e6aac66ebf440435e644d70168a6947", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": "     protected final void addParentDirs(File baseDir, String entry,                                        ZipOutputStream zOut, String prefix,                                        int dirMode)         throws IOException", "signatureAfterChange": "     protected final void addParentDirs(final File baseDir, final String entry,                                        final ZipOutputStream zOut, final String prefix,                                        final int dirMode)         throws IOException", "diff": ["-    protected final void addParentDirs(File baseDir, String entry,", "-                                       ZipOutputStream zOut, String prefix,", "-                                       int dirMode)", "+    protected final void addParentDirs(final File baseDir, final String entry,", "+                                       final ZipOutputStream zOut, final String prefix,", "+                                       final int dirMode)", "-            Stack<String> directories = new Stack<String>();", "+            final Stack<String> directories = new Stack<String>();", "-                String dir = entry.substring(0, slashPos + 1);", "+                final String dir = entry.substring(0, slashPos + 1);", "-                String dir = directories.pop();", "+                final String dir = directories.pop();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "972012608ae55fda9dfda525bd96578e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/launch/Launcher.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void addPath(String path, boolean getJars, List<URL> libPathURLs)             throws MalformedURLException", "signatureAfterChange": "     private void addPath(final String path, final boolean getJars, final List<URL> libPathURLs)             throws MalformedURLException", "diff": ["-    private void addPath(String path, boolean getJars, List<URL> libPathURLs)", "+    private void addPath(final String path, final boolean getJars, final List<URL> libPathURLs)", "-        StringTokenizer tokenizer = new StringTokenizer(path, File.pathSeparator);", "+        final StringTokenizer tokenizer = new StringTokenizer(path, File.pathSeparator);", "-            String elementName = tokenizer.nextToken();", "-            File element = new File(elementName);", "+            final String elementName = tokenizer.nextToken();", "+            final File element = new File(elementName);", "-                URL[] dirURLs = Locator.getLocationURLs(element);", "+                final URL[] dirURLs = Locator.getLocationURLs(element);", "-            URL url = Locator.fileToURL(element);", "-            if (launchDiag) { System.out.println(\"adding library URL: \" + url) ;}", "+            final URL url = Locator.fileToURL(element);", "+            if (launchDiag) {", "+            \tSystem.out.println(\"adding library URL: \" + url);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a43f9d8de44af02cecbf73f33f35e311", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Override \tpublic void execute() throws BuildException", "signatureAfterChange": "     @Override \tpublic void execute() throws BuildException", "diff": ["-        for (Resource r : sources) {", "-            URLProvider up = r.as(URLProvider.class);", "-            URL source = up.getURL();", "+        for (final Resource r : sources) {", "+            final URLProvider up = r.as(URLProvider.class);", "+            final URL source = up.getURL();", "-                    int slash = path.lastIndexOf(\"/\");", "+                    final int slash = path.lastIndexOf(\"/\");", "-                    FileNameMapper mapper = mapperElement.getImplementation();", "-                    String[] d = mapper.mapFileName(source.toString());", "+                    final FileNameMapper mapper = mapperElement.getImplementation();", "+                    final String[] d = mapper.mapFileName(source.toString());", "-        int logLevel = Project.MSG_INFO;", "+        final int logLevel = Project.MSG_INFO;", "-        } catch (IOException ioe) {", "+        } catch (final IOException ioe) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acf0e01ce461b0080b46c51546123d77", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "     protected void doResourceOperations(Map<Resource, String[]> map)", "signatureAfterChange": "     protected void doResourceOperations(final Map<Resource, String[]> map)", "diff": ["-    protected void doResourceOperations(Map<Resource, String[]> map) {", "+    protected void doResourceOperations(final Map<Resource, String[]> map) {", "-            for (Map.Entry<Resource, String[]> e : map.entrySet()) {", "-                Resource fromResource = e.getKey();", "-                for (String toFile : e.getValue()) {", "+            for (final Map.Entry<Resource, String[]> e : map.entrySet()) {", "+                final Resource fromResource = e.getKey();", "+                for (final String toFile : e.getValue()) {", "-                        FilterSetCollection executionFilters = new FilterSetCollection();", "+                        final FilterSetCollection executionFilters = new FilterSetCollection();", "-                        for (FilterSet filterSet : filterSets) {", "+                        for (final FilterSet filterSet : filterSets) {", "-                    } catch (IOException ioe) {", "+                    } catch (final IOException ioe) {", "-                        File targetFile = new File(toFile);", "+                        final File targetFile = new File(toFile);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c678a34143165bb3be66da3e45c61ef9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     protected Commandline setupJavacCommandlineSwitches(Commandline cmd,                                                         boolean useDebugLevel)", "signatureAfterChange": "     protected Commandline setupJavacCommandlineSwitches(final Commandline cmd,                                                         final boolean useDebugLevel)", "diff": ["-    protected Commandline setupJavacCommandlineSwitches(Commandline cmd,", "-                                                        boolean useDebugLevel) {", "-        Path classpath = getCompileClasspath();", "+    protected Commandline setupJavacCommandlineSwitches(final Commandline cmd,", "+                                                        final boolean useDebugLevel) {", "+        final Path classpath = getCompileClasspath();", "-        String memoryParameterPrefix = assumeJava11() ? \"-J-\" : \"-J-X\";", "+        final String memoryParameterPrefix = assumeJava11() ? \"-J-\" : \"-J-X\";", "-            Path cp = new Path(project);", "+            final Path cp = new Path(project);", "-            Path bp = getBootClassPath();", "+            final Path bp = getBootClassPath();", "-            Path bp = getBootClassPath();", "+            final Path bp = getBootClassPath();", "-                String debugLevel = attributes.getDebugLevel();", "+                final String debugLevel = attributes.getDebugLevel();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c957f6dcd5a7e6f861fcbbed766b55e4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/builder/ConvertingProjectBuilder.java", "commitBeforeChange": "f3bc7772a61e0b51112c1b8840d9485d5442d6ad", "commitAfterChange": "bf9414c704e78eced3232d32434a69ed6f77209c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private Configuration convertTarget( Configuration originalTarget )", "signatureAfterChange": "     private Configuration convertTarget( final Configuration originalTarget )", "diff": ["-    private Configuration convertTarget( Configuration originalTarget )", "+    private Configuration convertTarget( final Configuration originalTarget )", "-        DefaultConfiguration newTarget = copyConfiguration( originalTarget );", "+        final DefaultConfiguration newTarget = copyConfiguration( originalTarget );", "-        Set omitAttributes = new HashSet();", "+        final Set omitAttributes = new HashSet();", "-        String ifAttrib = originalTarget.getAttribute( \"if\", null );", "+        final String ifAttrib = originalTarget.getAttribute( \"if\", null );", "-            DefaultConfiguration ifElement =", "+            final DefaultConfiguration ifElement =", "-        String unlessAttrib = originalTarget.getAttribute( \"unless\", null );", "+        final String unlessAttrib = originalTarget.getAttribute( \"unless\", null );", "-            DefaultConfiguration unlessElement =", "+            final DefaultConfiguration unlessElement =", "-        Configuration[] tasks = originalTarget.getChildren();", "+        final Configuration[] tasks = originalTarget.getChildren();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d181079ad1c015c0dac82f7bdd4c8c65", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "     private static Map<String, Target> removeDuplicateTargets(Map<String, Target> targets)", "signatureAfterChange": "     private static Map<String, Target> removeDuplicateTargets(final Map<String, Target> targets)", "diff": ["-    private static Map<String, Target> removeDuplicateTargets(Map<String, Target> targets) {", "-        Map<Location, Target> locationMap = new HashMap<Location, Target>();", "-        for (Entry<String, Target> entry : targets.entrySet()) {", "-            String name = entry.getKey();", "-            Target target = entry.getValue();", "-            Target otherTarget = locationMap.get(target.getLocation());", "+    private static Map<String, Target> removeDuplicateTargets(final Map<String, Target> targets) {", "+        final Map<Location, Target> locationMap = new HashMap<Location, Target>();", "+        for (final Entry<String, Target> entry : targets.entrySet()) {", "+            final String name = entry.getKey();", "+            final Target target = entry.getValue();", "+            final Target otherTarget = locationMap.get(target.getLocation());", "-        Map<String, Target> ret = new HashMap<String, Target>();", "-        for (Target target : locationMap.values()) {", "+        final Map<String, Target> ret = new HashMap<String, Target>();", "+        for (final Target target : locationMap.values()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d242876612f98d2968daf3225d9bab66", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public JUnitTestRunner(JUnitTest test, String[] methods, boolean haltOnError,                            boolean filtertrace, boolean haltOnFailure,                            boolean showOutput, boolean logTestListenerEvents,                            ClassLoader loader)", "signatureAfterChange": "     public JUnitTestRunner(final JUnitTest test, final String[] methods, final boolean haltOnError,                            final boolean filtertrace, final boolean haltOnFailure,                            final boolean showOutput, final boolean logTestListenerEvents,                            final ClassLoader loader)", "diff": ["-    public JUnitTestRunner(JUnitTest test, String[] methods, boolean haltOnError,", "-                           boolean filtertrace, boolean haltOnFailure,", "-                           boolean showOutput, boolean logTestListenerEvents,", "-                           ClassLoader loader) {", "+    public JUnitTestRunner(final JUnitTest test, final String[] methods, final boolean haltOnError,", "+                           final boolean filtertrace, final boolean haltOnFailure,", "+                           final boolean showOutput, final boolean logTestListenerEvents,", "+                           final ClassLoader loader) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e686f248f28018ec8b50fc91b6f739ac", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javac.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "     protected void scanDir(File srcDir, File destDir, String[] files)", "signatureAfterChange": "     protected void scanDir(final File srcDir, final File destDir, final String[] files)", "diff": ["-    protected void scanDir(File srcDir, File destDir, String[] files) {", "-        GlobPatternMapper m = new GlobPatternMapper();", "-        String[] extensions = findSupportedFileExtensions();", "+    protected void scanDir(final File srcDir, final File destDir, final String[] files) {", "+        final GlobPatternMapper m = new GlobPatternMapper();", "+        final String[] extensions = findSupportedFileExtensions();", "-            SourceFileScanner sfs = new SourceFileScanner(this);", "-            File[] newFiles = sfs.restrictAsFiles(files, srcDir, destDir, m);", "+            final SourceFileScanner sfs = new SourceFileScanner(this);", "+            final File[] newFiles = sfs.restrictAsFiles(files, srcDir, destDir, m);", "-                File[] newCompileList", "+                final File[] newCompileList"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8ecbb4334b8e1867c9446c918e7aa49", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "       private void runTestsInThreads(List<List> testList, int numThreads)", "signatureAfterChange": "       private void runTestsInThreads(final List<List> testList, final int numThreads)", "diff": ["-    private void runTestsInThreads(List<List> testList, int numThreads) {", "+    private void runTestsInThreads(final List<List> testList, final int numThreads) {", "-            Thread[] threads = new Thread[numThreads];", "+            final Thread[] threads = new Thread[numThreads];", "-                Iterator<List> i1 = testList.iterator();", "+                final Iterator<List> i1 = testList.iterator();", "-                    List l = i1.next();", "+                    final List l = i1.next();", "-                         Iterator i2 = l.iterator();", "+                         final Iterator i2 = l.iterator();", "-                             List tmpSingleton = new ArrayList();", "+                             final List tmpSingleton = new ArrayList();", "-                } catch (InterruptedException e) {", "+                } catch (final InterruptedException e) {"]}]}
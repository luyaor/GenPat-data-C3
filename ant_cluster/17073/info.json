{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c8a6be2113b53695411fe4cc96084466", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d8793735f9b18bc8bc984185b62f4cd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Move.java", "commitBeforeChange": "809dcaf2876c3362c38151af140a9d6225baaeb8", "commitAfterChange": "44bbe5b1395e8cb74fc90cfb4f688c890c941024", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      protected void doFileOperations()", "signatureAfterChange": "      protected void doFileOperations()", "diff": ["+        //Attempt complete directory renames, if any, first.", "+        if (completeDirMap.size() > 0) {", "+            Enumeration e = completeDirMap.keys();", "+            while (e.hasMoreElements()) {", "+                File fromDir = (File) e.nextElement();", "+                File toDir = (File) completeDirMap.get(fromDir);", "+                try {", "+                    log(\"Attempting to rename dir: \" + fromDir +", "+                        \" to \" + toDir, verbosity);", "+                    renameFile(fromDir, toDir, filtering, forceOverwrite);", "+                } catch (IOException ioe) {", "+                    String msg = \"Failed to rename dir \" + fromDir", "+                        + \" to \" + toDir", "+                        + \" due to \" + ioe.getMessage();", "+                    throw new BuildException(msg, ioe, location);", "+                }", "+            }", "+        }", "-                File d = new File(toFile);", "-                try {", "-                    log(\"Attempting to rename: \" + fromFile +", "-                        \" to \" + toFile, verbosity);", "-                    moved = renameFile(f, d, filtering, forceOverwrite);", "-                } catch (IOException ioe) {", "-                    String msg = \"Failed to rename \" + fromFile ", "-                        + \" to \" + toFile", "-                        + \" due to \" + ioe.getMessage();", "-                    throw new BuildException(msg, ioe, location);", "-                }", "+                if (f.exists()) { //Is this file still available to be moved?", "+                    File d = new File(toFile);", "-                if (!moved) {", "-                        log(\"Moving \" + fromFile + \" to \" + toFile, verbosity);", "-                    ", "-                        FilterSetCollection executionFilters = new FilterSetCollection();", "-                        if (filtering) {", "-                            executionFilters.addFilterSet(project.getGlobalFilterSet());", "-                        }", "-                        for (Enumeration filterEnum = getFilterSets().elements(); filterEnum.hasMoreElements();) {", "-                            executionFilters.addFilterSet((FilterSet)filterEnum.nextElement());", "-                        }", "-                        getFileUtils().copyFile(f, d, executionFilters,", "-                                                forceOverwrite);", "-                        ", "-                        f = new File(fromFile);", "-                        if (!f.delete()) {", "-                            throw new BuildException(\"Unable to delete file \" ", "-                                                     + f.getAbsolutePath());", "-                        }", "+                        log(\"Attempting to rename: \" + fromFile +", "+                            \" to \" + toFile, verbosity);", "+                        moved = renameFile(f, d, filtering, forceOverwrite);", "-                        String msg = \"Failed to copy \" + fromFile + \" to \" ", "-                            + toFile", "+                        String msg = \"Failed to rename \" + fromFile", "+                            + \" to \" + toFile", "+                    }", "+", "+                    if (!moved) {", "+                        try {", "+                            log(\"Moving \" + fromFile + \" to \" + toFile, verbosity);", "+", "+                            FilterSetCollection executionFilters = new FilterSetCollection();", "+                            if (filtering) {", "+                                executionFilters.addFilterSet(project.getGlobalFilterSet());", "+                            }", "+                            for (Enumeration filterEnum = getFilterSets().elements(); filterEnum.hasMoreElements();) {", "+                                executionFilters.addFilterSet((FilterSet)filterEnum.nextElement());", "+                            }", "+                            getFileUtils().copyFile(f, d, executionFilters,", "+                                                    forceOverwrite);", "+", "+                            f = new File(fromFile);", "+                            if (!f.delete()) {", "+                                throw new BuildException(\"Unable to delete file \"", "+                                                         + f.getAbsolutePath());", "+                            }", "+                        } catch (IOException ioe) {", "+                            String msg = \"Failed to copy \" + fromFile + \" to \"", "+                                + toFile", "+                                + \" due to \" + ioe.getMessage();", "+                            throw new BuildException(msg, ioe, location);", "+                        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12978080edfeee700c1d2528f71c8dc8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Move.java", "commitBeforeChange": "aa8f01df3ca1287a3cab4e27edb8093384748c92", "commitAfterChange": "ffc9cedabb995d6a96b5c26031e8790f2815445a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      protected void doFileOperations()", "signatureAfterChange": "      protected void doFileOperations()", "diff": ["-            log(\"Moving \" + fileCopyMap.size() + \" files to \" + ", "+            log(\"Moving \" + fileCopyMap.size() + \" files to \" +", "-                try {", "-                    log(\"Moving \" + fromFile + \" to \" + toFile, verbosity);", "-                    ", "-                    FilterSet executionFilterSet = new FilterSet();", "-                    if (filtering) {", "-                        executionFilterSet.addFilterSet(project.getGlobalFilterSet());", "-                    }", "-                    for (Enumeration filterEnum = getFilterSets().elements(); filterEnum.hasMoreElements();) {", "-                        executionFilterSet.addFilterSet((FilterSet)filterEnum.nextElement());", "-                    }", "-                    getFileUtils().copyFile(fromFile, toFile, executionFilterSet,", "-                                            forceOverwrite);", "+                if( fromFile.equals( toFile ) ) {", "+                    log(\"Skipping self-move of \" + fromFile, verbosity);", "+                    continue;", "+                }", "-                    File f = new File(fromFile);", "-                    if (!f.delete()) {", "-                        throw new BuildException(\"Unable to delete file \" + f.getAbsolutePath());", "-                    }", "+                boolean moved = false;", "+                File f = new File(fromFile);", "+                File d = new File(toFile);", "+", "+                try {", "+                    log(\"Attempting to rename: \" + fromFile +", "+                        \" to \" + toFile, verbosity);", "+                    moved = renameFile(f, d, filtering, forceOverwrite);", "-                    String msg = \"Failed to copy \" + fromFile + \" to \" + toFile", "+                    String msg = \"Failed to rename \" + fromFile ", "+                        + \" to \" + toFile", "+                }", "+", "+                if (!moved) {", "+                    try {", "+                        log(\"Moving \" + fromFile + \" to \" + toFile, verbosity);", "+                    ", "+                        FilterSet executionFilterSet = new FilterSet();", "+                        if (filtering) {", "+                            executionFilterSet.addFilterSet(project.getGlobalFilterSet());", "+                        }", "+                        for (Enumeration filterEnum = getFilterSets().elements(); filterEnum.hasMoreElements();) {", "+                            executionFilterSet.addFilterSet((FilterSet)filterEnum.nextElement());", "+                        }", "+                        getFileUtils().copyFile(f, d, executionFilterSet,", "+                                                forceOverwrite);", "+                        ", "+                        f = new File(fromFile);", "+                        if (!f.delete()) {", "+                            throw new BuildException(\"Unable to delete file \" ", "+                                                     + f.getAbsolutePath());", "+                        }", "+                    } catch (IOException ioe) {", "+                        String msg = \"Failed to copy \" + fromFile + \" to \" ", "+                            + toFile", "+                            + \" due to \" + ioe.getMessage();", "+                        throw new BuildException(msg, ioe, location);", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34b4dc7b7f477fbcc628b881d69f65fe", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Available.java", "commitBeforeChange": "816d018e67a8703d14b55316e338ea7a6ded4e17", "commitAfterChange": "5728d77e073954bae5660e35dd9486e448cf0e0d", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      private boolean checkFile()", "signatureAfterChange": "      private boolean checkFile()", "diff": ["-                File filename = new File(paths[i]);", "+                /* ", "+                ** filepath can be a list of directory and/or", "+                ** file names (gen'd via <fileset>)", "+                **", "+                ** look for:", "+                **   full-pathname specified == path in list", "+                **   full-pathname specified == parent dir of path in list", "+                **   simple name specified   == path in list", "+                **   simple name specified   == path in list + name", "+                **   simple name specified   == parent dir + name", "+                **   simple name specified   == parent of parent dir + name", "+                **", "+                */", "+                File path = new File(paths[i]);", "+                String dirname = path.getParent();", "-                        String dir = filename.getParent();", "-                        if(dir != null) {", "-                            int index = dir.lastIndexOf(File.separator);", "-                            String dirname = dir.substring(index + 1);", "-                            if(dirname.equals(file.getName())) {", "-                                log(\"Found directory: \" + dir, Project.MSG_VERBOSE);", "+                        if (path.isFile()) {", "+                            // full-pathname specified", "+                            if (dirname.equals(path.toString())) {", "+                                log(\"Found directory: \" + path, Project.MSG_VERBOSE);", "+                                return true;", "+                            // simple name specified", "+                            } else if(new File(dirname, file).isDirectory()) {", "+                                log(\"Found directory: \" + dirname + File.separator + file, Project.MSG_VERBOSE);", "+                        // full-pathname specified", "+                        } else if (path.toString().equals(new File(file).toString()) && path.isDirectory()) {", "+                                log(\"Found directory: \" + path, Project.MSG_VERBOSE);", "+                                return true;", "+                        // simple name specified", "+                        } else if (new File(path, file).isDirectory()) {", "+                                log(\"Found directory: \" + path + File.separator + file, Project.MSG_VERBOSE);", "+                                return true;", "-                    } else if (type.equalsIgnoreCase(\"file\")) {", "-                        if(filename.isFile()) {", "-                            if(filename.getName().equals(file.getName())) {", "-                                log(\"Found file: \" + filename, Project.MSG_VERBOSE);", "+                    /* end check for type dir */", "+                    } else {", "+                        if (path.toString().equals(new File(file).toString()) && path.isFile()) {", "+                                log(\"Found file: \" + path, Project.MSG_VERBOSE);", "-                            }", "+                        } else if (new File(path, file).isFile()) {", "+                            log(\"Found file: \" + path + File.separator + file, Project.MSG_VERBOSE);", "+                            return true;", "+                        } else if (new File(dirname, file).isFile()) {", "+                            log(\"Found file: \" + dirname + File.separator + file, Project.MSG_VERBOSE);", "+                            return true;", "-                } else if(filename.isFile()) {", "-                    if(filename.getName().equals(file.getName())) {", "-                        log(\"Found file: \" + filename, Project.MSG_VERBOSE);", "+                /* end check for specified type */", "+                } else {", "+                    if (path.toString().equals(new File(file).toString())) {", "+                        log(\"Found: \" + path, Project.MSG_VERBOSE);", "+                    } else if (new File(path, file).exists()) {", "+                        log(\"Found: \" + path + File.separator + file, Project.MSG_VERBOSE);", "+                        return true;", "+                    } else if (new File(dirname, file).exists()) {", "+                        log(\"Found: \" + dirname + File.separator + file, Project.MSG_VERBOSE);", "+                        return true;", "+                    } else {", "+                        File dir = new File(dirname);", "+                        dirname = dir.getParent();", "+                        if (new File(dirname, file).exists()) {", "+                            log(\"Found: \" + dirname + File.separator + file, Project.MSG_VERBOSE);", "+                            return true;", "+                        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "447dab177dd3d643ecc8851cc30c7a78", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/main/org/apache/ant/core/execution/ExecutionFrame.java", "commitBeforeChange": "a48208f6cf8cf80ef1e144305ff8dfe0958599d5", "commitAfterChange": "c2e518039b65dc5b8c9c31f9f78b2d72ea8db2d1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private void setupConverters(Map converterDefs) throws ConfigException", "signatureAfterChange": "     public void addConverterDefinition(ConverterDefinition converterDef) throws ConfigException", "diff": ["+     */", "+    public void addConverterDefinition(ConverterDefinition converterDef) throws ConfigException {", "+        boolean targetLoaded = false;", "+        try {", "+            Class targetClass = converterDef.getTargetClass();", "+            targetLoaded = false;", "+            Class converterClass = converterDef.getConverterClass();", "+            Converter converter = (AntConverter)converterClass.newInstance();", "+            if (converter instanceof AntConverter) {", "+                ((AntConverter)converter).init(this);", "+            }", "+            converters.put(targetClass, converter);", "+        }", "+        catch (ClassNotFoundException e) {", "+            if (targetLoaded) {", "+                throw new ConfigException(\"Unable to load converter class for \" ", "+                                          + converterDef.getConverterClassName()", "+                                          + \" in converter from \" + converterDef.getLibraryURL(),", "+                                          e);", "+            }", "+            else {", "+                throw new ConfigException(\"Unable to load target class \" ", "+                                          + converterDef.getTargetClassName()", "+                                          + \" in converter from \" + converterDef.getLibraryURL(),", "+                                          e);", "+            }", "+        }", "+        catch (InstantiationException e) {", "+            throw new ConfigException(\"Unable to instantiate converter class \" ", "+                                      + converterDef.getTargetClassName()", "+                                      + \" in converter from \" + converterDef.getLibraryURL(),", "+                                      e);", "+        }", "+        catch (IllegalAccessException e) {", "+            throw new ConfigException(\"Unable to access converter class \" ", "+                                      + converterDef.getTargetClassName()", "+                                      + \" in converter from \" + converterDef.getLibraryURL(),", "+                                      e);", "+        }", "+    }", "-    private void setupConverters(Map converterDefs) throws ConfigException {", "-        converters = new HashMap();", "-        for (Iterator i = converterDefs.values().iterator(); i.hasNext(); ) {", "-            ConverterDefinition converterDef = (ConverterDefinition)i.next();", "-            boolean targetLoaded = false;", "-            try {", "-                Class targetClass = converterDef.getTargetClass();", "-                targetLoaded = false;", "-                Class converterClass = converterDef.getConverterClass();", "-                Converter converter = (AntConverter)converterClass.newInstance();", "-                if (converter instanceof AntConverter) {", "-                    ((AntConverter)converter).init(this);", "-                }", "-                converters.put(targetClass, converter);", "-            }", "-            catch (ClassNotFoundException e) {", "-                if (targetLoaded) {", "-                    throw new ConfigException(\"Unable to load converter class for \" ", "-                                              + converterDef.getConverterClassName()", "-                                              + \" in converter from \" + converterDef.getLibraryURL()", "-                                              , e);", "-                }", "-                else {", "-                    throw new ConfigException(\"Unable to load target class \" ", "-                                              + converterDef.getTargetClassName()", "-                                              + \" in converter from \" + converterDef.getLibraryURL()", "-                                              , e);", "-                }", "-            }", "-            catch (InstantiationException e) {", "-                throw new ConfigException(\"Unable to instantiate converter class \" ", "-                                          + converterDef.getTargetClassName()", "-                                          + \" in converter from \" + converterDef.getLibraryURL()", "-                                          , e);", "-            }", "-            catch (IllegalAccessException e) {", "-                throw new ConfigException(\"Unable to access converter class \" ", "-                                          + converterDef.getTargetClassName()", "-                                          + \" in converter from \" + converterDef.getLibraryURL()", "-                                          , e);", "-            }", "-        }", "-    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3a15015de312f88173de4cf6982d670e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea0857e91d33eb8cd16386dd50a2edc5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/svn/src/main/org/apache/tools/ant/taskdefs/svn/SvnChangeLogWriter.java", "commitBeforeChange": "a7900921c30f730f0fda304913f867dee4dcebc5", "commitAfterChange": "8e1526690c36888c17997c5730c897819117fe70", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private void printEntry(final PrintWriter output, final SvnEntry entry)", "signatureAfterChange": "     private void printEntry(final PrintWriter output, final SvnEntry entry,                             final Element element) throws IOException", "diff": ["-    private void printEntry(final PrintWriter output, final SvnEntry entry) {", "-        output.println(\"\\t<entry>\");", "-        output.println(\"\\t\\t<date>\" + OUTPUT_DATE.format(entry.getDate())", "-            + \"</date>\");", "-        output.println(\"\\t\\t<time>\" + OUTPUT_TIME.format(entry.getDate())", "-            + \"</time>\");", "-        output.println(\"\\t\\t<author><![CDATA[\" + entry.getAuthor()", "-            + \"]]></author>\");", "-        output.println(\"\\t\\t<revision>\" + entry.getRevision()", "-            + \"</revision>\");", "+    private void printEntry(final PrintWriter output, final SvnEntry entry,", "+                            final Element element) throws IOException {", "+        Document doc = element.getOwnerDocument();", "+", "+        Element ent = doc.createElement(\"entry\");", "+        appendTextElement(ent, \"date\", OUTPUT_DATE.format(entry.getDate()));", "+        appendTextElement(ent, \"time\", OUTPUT_TIME.format(entry.getDate()));", "+        appendCDATAElement(ent, \"author\", entry.getAuthor());", "+        appendTextElement(ent, \"revision\", entry.getRevision());", "-            output.println(\"\\t\\t<path>\");", "-            output.println(\"\\t\\t\\t<name><![CDATA[\" + paths[i].getName() ", "-                           + \"]]></name>\");", "-            output.println(\"\\t\\t\\t<action>\" + paths[i].getActionDescription() ", "-                           + \"</action>\");", "-            output.println(\"\\t\\t</path>\");", "+            Element path = doc.createElement(\"path\");", "+            ent.appendChild(path);", "+            appendCDATAElement(path, \"name\", paths[i].getName());", "+            appendTextElement(path, \"action\", paths[i].getActionDescription());", "-        output.println(\"\\t\\t<message><![CDATA[\" + entry.getMessage() + \"]]></message>\");", "-        output.println(\"\\t</entry>\");", "+        appendCDATAElement(ent, \"message\", entry.getMessage());", "+        DOM_WRITER.write(ent, output, 1, \"\\t\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc45c1fc731beb29df232c78e9a1133d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "f87b5ed7757c30daca5cf875c95520a00dce2269", "commitAfterChange": "010a31e84477b60ff536725b388b38323540dcca", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private void configureElement( final Object object,                                    final Configuration configuration,                                    final Context context )         throws ConfigurationException", "signatureAfterChange": "     private void configureElement( final ObjectConfigurer configurer,                                    final Object object,                                    final Configuration childConfig,                                    final Context context )         throws ConfigurationException", "diff": ["+     */", "+    private void configureElement( final ObjectConfigurer configurer,", "+                                   final Object object,", "+                                   final Configuration childConfig,", "+                                   final Context context )", "+        throws ConfigurationException", "+    {", "+        final String childName = childConfig.getName();", "+", "+        if( DEBUG )", "+        {", "+            final String message =", "+                REZ.getString( \"configure-subelement.notice\", childName );", "+            getLogger().debug( message );", "+        }", "+", "+        // Locate the configurer for the child element", "+        final ElementConfigurer childConfigurer = configurer.getElement( childName );", "+        if( null == childConfigurer )", "+        {", "+            final String message = REZ.getString( \"unknown-subelement.error\", childName );", "+            throw new ConfigurationException( message );", "+        }", "+", "+        try", "+        {", "+            // Create the child element", "+            final Object child = childConfigurer.createElement( object );", "+", "+            // Configure the child element", "+            configure( child, childConfig, context );", "+", "+            // Set the child element", "+            childConfigurer.addElement( object, child );", "+        }", "+        catch( final ConfigurationException ce )", "+        {", "+            final String message =", "+                REZ.getString( \"bad-configure-subelement.error\", childName );", "+            throw new ConfigurationException( message, ce );", "-", "-    private void configureElement( final Object object,", "-                                   final Configuration configuration,", "-                                   final Context context )", "-        throws ConfigurationException", "-    {", "-        final String name = configuration.getName();", "-        final String javaName = getJavaNameFor( name );", "-", "-        // OMFG the rest of this is soooooooooooooooooooooooooooooooo", "-        // slow. Need to cache results per class etc.", "-        final Class clazz = object.getClass();", "-        Method methods[] = getMethodsFor( clazz, \"add\" + javaName );", "-", "-        if( 0 != methods.length )", "-        {", "-            //guess it is first method ????", "-            addElement( object, methods[ 0 ], configuration, context );", "-        }", "-        else", "-        {", "-            methods = getCreateMethodsFor( clazz, \"create\" + javaName );", "-", "-            if( 0 == methods.length )", "-            {", "-                final String message =", "-                    REZ.getString( \"no-element-method.error\", javaName );", "-                throw new ConfigurationException( message );", "-            }", "-", "-            //guess it is first method ????", "-            createElement( object, methods[ 0 ], configuration, context );", "-        }", "-    }"]}]}
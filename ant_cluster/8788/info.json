{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "21e364c0bcc174636ca6f10745654991", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "099626b6b94bd4ce50671df24e483d14", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/util/JavaEnvUtilsTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void testGetExecutableMostPlatforms()", "signatureAfterChange": "      @Test     public void testGetExecutableMostPlatforms()", "diff": ["-", "-    public void testGetExecutableMostPlatforms() {", "-        if (!Os.isName(\"netware\") && !Os.isFamily(\"windows\")) {", "-            String javaHome =", "-                FILE_UTILS.normalize(System.getProperty(\"java.home\"))", "-                .getAbsolutePath();", "-", "-            // could still be OS/2", "-            String extension = Os.isFamily(\"dos\") ? \".exe\" : \"\";", "-", "-            String j = JavaEnvUtils.getJreExecutable(\"java\");", "-            if (!extension.equals(\"\")) {", "-                assertTrue(j.endsWith(extension));", "-            }", "-            assertTrue(j+\" is absolute\", (new File(j)).isAbsolute());", "-            j = JavaEnvUtils.getJdkExecutable(\"javac\");", "-            if (!extension.equals(\"\")) {", "-                assertTrue(j.endsWith(extension));", "-            }", "-", "-            if (Os.isFamily(\"mac\") && JavaEnvUtils.getJavaVersionNumber() <= JavaEnvUtils.VERSION_1_6) {", "-                assertTrue(j+\" is normalized and in the JRE dir\",", "-                           j.startsWith(javaHome));", "-            } else {", "-                assertTrue(j+\" is normalized and not in the JRE dir\",", "-                           !j.startsWith(javaHome));", "-            }", "-", "-            assertEquals(\"foo\"+extension,", "-                         JavaEnvUtils.getJreExecutable(\"foo\"));", "-            assertEquals(\"foo\"+extension,", "-                         JavaEnvUtils.getJdkExecutable(\"foo\"));", "+    @Test", "+    public void testGetExecutableMostPlatforms() {", "+        Assume.assumeTrue(\"Test only runs on non Netware and non Windows systems\",", "+                !Os.isName(\"netware\") && !Os.isFamily(\"windows\"));", "+        String javaHome =", "+            FILE_UTILS.normalize(System.getProperty(\"java.home\"))", "+            .getAbsolutePath();", "+", "+        // could still be OS/2", "+        String extension = Os.isFamily(\"dos\") ? \".exe\" : \"\";", "+", "+        String j = JavaEnvUtils.getJreExecutable(\"java\");", "+        if (!extension.equals(\"\")) {", "+            assertTrue(j.endsWith(extension));", "+        }", "+        assertTrue(j+\" is absolute\", (new File(j)).isAbsolute());", "+        assertTrue(j+\" is normalized and in the JRE dir\",", "+                   j.startsWith(javaHome));", "+", "+        j = JavaEnvUtils.getJdkExecutable(\"javac\");", "+        if (!extension.equals(\"\")) {", "+            assertTrue(j.endsWith(extension));", "+        }", "+        assertTrue(j+\" is absolute\", (new File(j)).isAbsolute());", "+", "+        String javaHomeParent =", "+            FILE_UTILS.normalize(javaHome+\"/..\").getAbsolutePath();", "+        assertTrue(j+\" is normalized and in the JDK dir\",", "+                   j.startsWith(javaHomeParent));", "+", "+        if (Os.isFamily(\"mac\") && JavaEnvUtils.getJavaVersionNumber() <= JavaEnvUtils.VERSION_1_6) {", "+            assertTrue(j+\" is normalized and in the JRE dir\",", "+                       j.startsWith(javaHome));", "+        } else {", "+            assertTrue(j+\" is normalized and not in the JRE dir\",", "+                       !j.startsWith(javaHome));", "+        }", "+", "+        assertEquals(\"foo\"+extension,", "+                     JavaEnvUtils.getJreExecutable(\"foo\"));", "+        assertEquals(\"foo\"+extension,", "+                     JavaEnvUtils.getJdkExecutable(\"foo\"));", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "943f65d6b84624ddc1fe82184dcfc887", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/util/SymlinkUtilsTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testRootIsNoSymlink() throws IOException", "signatureAfterChange": "      @Test     public void testRootIsNoSymlink() throws IOException", "diff": ["+    @Test", "-        if (Os.isFamily(\"windows\")) {", "-            return; // test is meaningless on Windows", "-        }", "+        Assume.assumeFalse(\"Symlink doesn't work on Windows\", Os.isFamily(\"windows\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b608b7396154bc54791c597a72482147", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/util/JavaEnvUtilsTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testGetExecutableNetware()", "signatureAfterChange": "       @Test     public void testGetExecutableNetware()", "diff": ["+    @Test", "-        if (Os.isName(\"netware\")) {", "-            assertEquals(\"java\", JavaEnvUtils.getJreExecutable(\"java\"));", "-            assertEquals(\"javac\", JavaEnvUtils.getJdkExecutable(\"javac\"));", "-            assertEquals(\"foo\", JavaEnvUtils.getJreExecutable(\"foo\"));", "-            assertEquals(\"foo\", JavaEnvUtils.getJdkExecutable(\"foo\"));", "-        }", "+        Assume.assumeTrue(\"Test only runs on netware\", Os.isName(\"netware\"));", "+        assertEquals(\"java\", JavaEnvUtils.getJreExecutable(\"java\"));", "+        assertEquals(\"javac\", JavaEnvUtils.getJdkExecutable(\"javac\"));", "+        assertEquals(\"foo\", JavaEnvUtils.getJreExecutable(\"foo\"));", "+        assertEquals(\"foo\", JavaEnvUtils.getJdkExecutable(\"foo\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d399f9ee55c857c3d92e4969b1218326", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/util/JavaEnvUtilsTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testGetExecutableWindows()", "signatureAfterChange": "      @Test     public void testGetExecutableWindows()", "diff": ["+    @Test", "-        if (Os.isFamily(\"windows\")) {", "-            String javaHome =", "-                FILE_UTILS.normalize(System.getProperty(\"java.home\"))", "-                .getAbsolutePath();", "+        Assume.assumeTrue(\"Test only runs on windows\", Os.isFamily(\"windows\"));", "+        String javaHome =", "+            FILE_UTILS.normalize(System.getProperty(\"java.home\"))", "+            .getAbsolutePath();", "-            String j = JavaEnvUtils.getJreExecutable(\"java\");", "-            assertTrue(j.endsWith(\".exe\"));", "-            assertTrue(j+\" is absolute\", (new File(j)).isAbsolute());", "-            try {", "-                assertTrue(j+\" is normalized and in the JRE dir\",", "-                           j.startsWith(javaHome));", "-            } catch (AssertionFailedError e) {", "-                // java.home is bogus", "-                assertEquals(\"java.exe\", j);", "-            }", "-", "-            j = JavaEnvUtils.getJdkExecutable(\"javac\");", "-            assertTrue(j.endsWith(\".exe\"));", "-            try {", "-                assertTrue(j+\" is absolute\", (new File(j)).isAbsolute());", "-                String javaHomeParent =", "-                    FILE_UTILS.normalize(javaHome+\"/..\").getAbsolutePath();", "-                assertTrue(j+\" is normalized and in the JDK dir\",", "-                           j.startsWith(javaHomeParent));", "-                assertTrue(j+\" is normalized and not in the JRE dir\",", "-                           !j.startsWith(javaHome));", "-", "-            } catch (AssertionFailedError e) {", "-                // java.home is bogus", "-                assertEquals(\"javac.exe\", j);", "-            }", "-", "-            assertEquals(\"foo.exe\", JavaEnvUtils.getJreExecutable(\"foo\"));", "-            assertEquals(\"foo.exe\", JavaEnvUtils.getJdkExecutable(\"foo\"));", "-        }", "-    }", "+        String j = JavaEnvUtils.getJreExecutable(\"java\");", "+        assertTrue(j.endsWith(\".exe\"));", "+        assertTrue(j+\" is absolute\", (new File(j)).isAbsolute());", "+        try {", "+        } catch (AssertionFailedError e) {", "+            // java.home is bogus", "+            assertEquals(\"java.exe\", j);", "+        }", "+        j = JavaEnvUtils.getJdkExecutable(\"javac\");", "+        assertTrue(j.endsWith(\".exe\"));", "+        try {", "+            assertTrue(j+\" is normalized and not in the JRE dir\",", "+                       !j.startsWith(javaHome));", "+        } catch (AssertionFailedError e) {", "+            // java.home is bogus", "+            assertEquals(\"javac.exe\", j);", "+        assertEquals(\"foo.exe\", JavaEnvUtils.getJreExecutable(\"foo\"));", "+        assertEquals(\"foo.exe\", JavaEnvUtils.getJdkExecutable(\"foo\"));"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a2b80196ab32904b5a946aa943b5c83d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01a3723b352c67bd4e61d097ef41b48b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/repository/GetLibraries.java", "commitBeforeChange": "4d831bb7cbb2bb2839303380a28f888c587802a0", "commitAfterChange": "f630ef56ed68316b07aaa27e05cf871de1070498", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 25, "signatureBeforeChange": "         public boolean hasNext()", "signatureAfterChange": "     private void doExecute() throws BuildException", "diff": ["+     */", "+    private void doExecute() throws BuildException {", "+        //map libraries to files", "+", "+", "+        //flag to indicate whether the download should go ahead", "+        boolean retrieve = true;", "+        List processedPolicies = new ArrayList(policies.size());", "+        //iterate through all policies and execute their preload task", "+        Iterator policyIterator = policies.enabledIterator();", "+        while (retrieve && policyIterator.hasNext()) {", "+            LibraryPolicy libraryPolicy = (LibraryPolicy) policyIterator.next();", "+            retrieve=libraryPolicy.beforeConnect(this, libraryIterator());", "+            if(retrieve) {", "+                //add all processed properties to the list, 'cept for anything that", "+                //broke the chain", "+                processedPolicies.add(libraryPolicy);", "+            } else {", "+                log(\"Policy \"+libraryPolicy.getClass().getName()", "+                        + \" disabled retrieval\",", "+                        Project.MSG_VERBOSE);", "+            }", "+        //see if we need to do a download", "+        if(!retrieve) {", "+            //if not, log it", "+            log(MSG_NO_RETRIEVE);", "+        } else {", "+            int downloads = calculateFetchCount();", "+            if(downloads>0) {", "+                //get the files", "+                connectAndRetrieve(repo, useTimestamp);", "+            } else {", "+                //nothing to fetch", "+                log(MSG_NO_LIBRARIES_TO_FETCH,Project.MSG_VERBOSE);", "+            }", "+        }", "+", "+        //now reverse iterate through all processed properties.", "+        for(int i=processedPolicies.size()-1;i>=0;i--) {", "+            LibraryPolicy libraryPolicy = (LibraryPolicy)processedPolicies.get(i);", "+            //and call their post-processor", "+            libraryPolicy.afterFetched(this,libraryIterator() );", "+        }", "+    }", "-         */", "-        public boolean hasNext() {", "-            while (_next == null && _underlyingIterator.hasNext()) {", "-                Library candidate = (Library) _underlyingIterator.next();", "-                if (candidate.isEnabled(_project)) {", "-                    _next = candidate;", "-                }", "-            }", "-            return (_next != null);", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15cdd007b0e7d4b5132382cd58a72690", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/SSHExec.java", "commitBeforeChange": "99905c75ac5271a7eb5c1cabd0493b25e11cdc2d", "commitAfterChange": "e601be9dd7423c9000e6913ce2f5a785c7881b89", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            throw new BuildException(\"Host is null.\");", "+            throw new BuildException(\"Host is required.\");", "-            throw new BuildException(\"Username is null.\");", "+            throw new BuildException(\"Username is required.\");", "-            throw new BuildException(\"Password and Keyfile are null.\");", "+            throw new BuildException(\"Password or Keyfile is required.\");", "-            throw new BuildException(\"Command is null.\");", "+            throw new BuildException(\"Command is required.\");", "+        ByteArrayOutputStream out = new ByteArrayOutputStream();", "+        Tee tee = new Tee(out, System.out);", "+", "+            // execute the command", "-            ChannelExec channel=(ChannelExec) session.openChannel(\"exec\");", "+            session.setTimeout(maxwait);", "+            final ChannelExec channel=(ChannelExec) session.openChannel(\"exec\");", "-            channel.setInputStream(System.in);", "-            channel.setOutputStream(System.out);", "+            channel.setOutputStream(tee);", "+", "+            // wait for it to finish", "+            thread =", "+                new Thread() {", "+                    public void run() {", "+                        while (!channel.isEOF()) {", "+                            if (thread == null) {", "+                                return;", "+                            }", "+                            try {", "+                                sleep(500);", "+                            } catch (Exception e) {", "+                                // ignored", "+                            }", "+                        }", "+                    }", "+                };", "+                    ", "+            thread.start();", "+            thread.join(maxwait);", "+            ", "+            if (thread.isAlive()) {", "+                // ran out of time", "+                thread = null;", "+                log(\"Timeout period exceeded, connection dropped.\");", "+            } else {", "+                // completed successfully", "+                if (output_property != null) {", "+                    getProject().setProperty(output_property, out.toString());", "+                }", "+                if (output_file != null) {", "+                    writeToFile(out.toString(), append, output_file);", "+                }", "+            }", "+"]}]}
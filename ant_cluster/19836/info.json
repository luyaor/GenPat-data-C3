{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4d3a918b938bbbeb33d91e7795ec44f7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2db84211f53c5df1b0133f909824407f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Manifest.java", "commitBeforeChange": "c2cfb84865b9315ee41695c59dd02dfe5f94ba0c", "commitAfterChange": "d1d47e9813e74c308be031e92d2b0b4f479e9c28", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "         public String read(BufferedReader reader) throws ManifestException, IOException", "signatureAfterChange": "         public String read(BufferedReader reader) throws ManifestException, IOException", "diff": ["-                        throw new ManifestException(\"Can't start an attribute with a continuation line \" + line);", "+                        if (name != null) {", "+                            // a continuation on the first line is a continuation of the name - concatenate", "+                            // this line and the name", "+                            name += line.substring(1);", "+                        }", "+                        else {", "+                            throw new ManifestException(\"Can't start an attribute with a continuation line \" + line);", "+                        }", "-                    attribute.addContinuation(line);", "+                    else {", "+                        attribute.addContinuation(line);", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41008d0092a1193333122b5cd7874eba", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Property.java", "commitBeforeChange": "8d4736cfcb8201a54c8cb7cb6d4c81e4c87c9f82", "commitAfterChange": "36787ae6b81da254883de6b417da1317f87cf4f0", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "     private void loadProperties(                                 Properties props, InputStream is, boolean isXml) throws IOException", "signatureAfterChange": "     private void loadProperties(                                 Properties props, InputStream is, boolean isXml) throws IOException", "diff": ["-            // use reflection because of bwc to Java 1.4", "-            try {", "-                Method loadXmlMethod = props.getClass().getMethod(\"loadFromXML\",", "-                                                                  new Class[] {InputStream.class});", "-                loadXmlMethod.invoke(props, new Object[] {is});", "-            } catch (NoSuchMethodException e) {", "-                e.printStackTrace();", "-                log(\"Can not load xml based property definition on Java < 5\");", "-            } catch (Exception e) {", "-                // no-op", "-                e.printStackTrace();", "-            }", "+            props.loadFromXML(is);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41fec074281a10e91b4a61cad7d807a8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "3267eeb3160fa391d6f568303aaab98a8d99002f", "commitAfterChange": "5184f14831e2987c93d2cbbf5da2318ca5c00241", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public static ProjectHelper getProjectHelper()         throws BuildException", "signatureAfterChange": "     public static ProjectHelper getProjectHelper() throws BuildException", "diff": ["-    public static ProjectHelper getProjectHelper()", "-        throws BuildException {", "+    public static ProjectHelper getProjectHelper() throws BuildException {", "-", "-                    if (helperClassName != null", "-                        && !\"\".equals(helperClassName)) {", "-", "+                    if (helperClassName != null && !\"\".equals(helperClassName)) {", "-                System.out.println(\"Unable to load ProjectHelper \"", "-                    + \"from service \\\"\" + SERVICE_ID);", "+                System.out.println(\"Unable to load ProjectHelper from service \" + SERVICE_ID);", "-", "-        if (helper != null) {", "-            return helper;", "-        } else {", "-            return new ProjectHelper2();", "-        }", "+        return helper == null ? new ProjectHelper2() : helper;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49da6c98e6819646f2a27e04a0f88314", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/XMLValidateTask.java", "commitBeforeChange": "957f9e512572a78a3e82ca1d0938f486394950dd", "commitAfterChange": "d8361ec47ac005b959a6a22b17fecf77d540e890", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private void doValidate(File afile)", "signatureAfterChange": "     private void doValidate(File afile)", "diff": ["-                throw new BuildException(\"Could not validate document \"", "-                    + afile);", "+                throw new BuildException(", "+                    \"Could not validate document \" + afile);", "+            } else {", "+                log(\"Could not validate document \" + afile + \": \" + ex.toString());", "-            throw new BuildException(\"Could not validate document \" + afile,", "+            throw new BuildException(", "+                \"Could not validate document \" + afile,", "-                throw new BuildException(afile", "-                    + \" is not a valid XML document.\");", "+                throw new BuildException(", "+                    afile + \" is not a valid XML document.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "651628e3cd818594751c2bce479e16c3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Unpack.java", "commitBeforeChange": "a069b78495ed198cd341a106731778edc930f5f6", "commitAfterChange": "f1e9c972fbead168a235951d50d3727bcc8fdf8c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void setSrcResource(Resource src)", "signatureAfterChange": "     public void setSrcResource(Resource src)", "diff": ["-            throw new BuildException(\"the archive doesn't exist\");", "+            throw new BuildException(", "+                \"the archive \" + src.getName() + \" doesn't exist\");", "-            throw new BuildException(\"the archive can't be a directory\");", "+            throw new BuildException(", "+                \"the archive \" + src.getName() + \" can't be a directory\");", "-            throw new BuildException(\"Only FileSystem resources are\"", "-                                     + \" supported.\");", "+            throw new BuildException(", "+                \"The source \" + src.getName()", "+                + \" is not a FileSystem \"", "+                + \"Only FileSystem resources are\"", "+                + \" supported.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5a1a56c8b8f4c5443e849086439e6eb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "5b1dbf444c9b88e7803585fd069feaa072b30bfc", "commitAfterChange": "6ecbe242189a8d7feba3d56c8ec89582e77b1b29", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "      private void configure(Object target, AttributeList attrs) throws BuildException", "signatureAfterChange": "      public static void configure(Object target, AttributeList attrs,                                   Project project) throws BuildException", "diff": ["-    private void configure(Object target, AttributeList attrs) throws BuildException {", "+    public static void configure(Object target, AttributeList attrs, ", "+                                 Project project) throws BuildException {", "-                if (attrs.getName(i).equals(\"id\")) {", "-                    project.addReference(attrs.getValue(i), target);", "-                } else {", "-                    be.setLocation(new Location(buildFile.toString(), ", "-                                                locator.getLineNumber(), ", "-                                                locator.getColumnNumber()));", "+                // id attribute must be set externally", "+                if (!attrs.getName(i).equals(\"id\")) {", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adbc073fe82282c843277f4a08b5f83e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/starteam/StarTeamCheckout.java", "commitBeforeChange": "a511fb22e7f6ac3b905cd1d4aa17a6445e715e42", "commitAfterChange": "d3f2f2b687e3152ac513450330439f97ed8a2570", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "      protected void logOperationDescription(         Folder starteamrootFolder, java.io.File targetrootFolder)", "signatureAfterChange": "      protected void logOperationDescription(         Folder starteamrootFolder, java.io.File targetrootFolder)", "diff": ["-            log(\"  Items will be checked out unlocked (even if presently locked).\");", "+            log(\"  Items will be checked out unlocked \"", "+                 +\"(even if presently locked).\");", "+        log(\"  Items will be checked out \" +", "+            (this.convertEOL ", "+             ? \"using the local machine's EOL convention\"", "+             : \"without changing the EOL convention used on the server\"));", "-            (this.createDirs ? \" wherever they exist in the repository, even if empty.\" ", "-                             : \" only where needed to check out files.\"));", "+            (this.createDirs ", "+             ? \" wherever they exist in the repository, even if empty.\" ", "+             : \" only where needed to check out files.\"));"]}]}
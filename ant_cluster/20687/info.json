{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "69e9cddd172014efe37b21c51a59274c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "343b7e16c7dc2a3fa7cfb78c969c3818", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/TraXLiaison.java", "commitBeforeChange": "6d5ce5b54d4424f74298d7aac6778539e286b8f4", "commitAfterChange": "44735223d94bae810d33e7f820d587bfb49728fd", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void transform(File infile, File outfile) throws Exception", "signatureAfterChange": "      public void transform(File infile, File outfile) throws Exception", "diff": ["-            StreamSource src = new StreamSource(fis);", "+            // FIXME: need to use a SAXSource as the source for the transform", "+            // so we can plug in our own entity resolver", "+            Source src = null;", "+            if (resolver != null) {", "+                if (tfactory.getFeature(SAXSource.FEATURE)) {", "+                    SAXParserFactory spFactory = SAXParserFactory.newInstance();", "+                    spFactory.setNamespaceAware( true ); ", "+                    XMLReader reader = spFactory.newSAXParser().getXMLReader();", "+                    reader.setEntityResolver(resolver);", "+                    src = new SAXSource(reader, new InputSource(fis));", "+                } else {", "+                    throw new IllegalStateException(\"xcatalog specified, but \"+", "+                        \"parser doesn't support SAX\");", "+                }", "+            } else {", "+                src = new StreamSource(fis);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "607597c3c2b62783abd4520aec00fcb4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "8477db586049ffe4763ea2aeb8c8b2dd786f82a1", "commitAfterChange": "da882e14dce576c4be8d779bcefa2d43236844d2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+\t    // prepare Java 1.1 style credentials", "+\t    if (uname != null || pword != null) {", "+\t      String up = uname + \":\" + pword;", "+\t      String encoding;", "+\t      // check to see if sun's Base64 encoder is available.", "+\t      try {", "+\t\tsun.misc.BASE64Encoder encoder = ", "+\t\t  (sun.misc.BASE64Encoder) Class.forName(\"sun.misc.BASE64Encoder\").newInstance();", "+\t\tencoding = encoder.encode (up.getBytes());", "+", "+\t      }", "+\t      catch (Exception ex) { // sun's base64 encoder isn't available ", "+\t\tBase64Converter encoder = new Base64Converter();", "+\t\tencoding = encoder.encode(up.getBytes());", "+\t      }", "+\t      connection.setRequestProperty (\"Authorization\", \"Basic \" + encoding);", "+", "+\t    }", "+\t\t// test for 401 result (HTTP only)", "+                if(httpConnection.getResponseCode()==HttpURLConnection.HTTP_UNAUTHORIZED)  {", "+                    log(\"Not authorized - check \" + dest + \" for details\");", "+                    return; ", "+                }", "+"]}]}
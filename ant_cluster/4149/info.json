{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5d2160fcbee9e6d35633497d6bac0dbd", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b403d37352f70b4568eb833e573e729", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "1534f4e063841a3db919dde44530d75b7d734c57", "commitAfterChange": "d2e6dcf66da83b17eb4a13f4ff7f374521fe29ec", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "     public static void main(String[] args) throws IOException", "signatureAfterChange": "     public static void main(String[] args) throws IOException", "diff": ["-        if (args[0].startsWith(\"testsfile=\")) {", "+        if (args[0].startsWith(Constants.TESTSFILE)) {", "-            args[0] = args[0].substring(10 /* \"testsfile=\".length() */);", "+            args[0] = args[0].substring(Constants.TESTSFILE.length());", "-            if (args[i].startsWith(\"haltOnError=\")) {", "-                haltError = Project.toBoolean(args[i].substring(12));", "-            } else if (args[i].startsWith(\"haltOnFailure=\")) {", "-                haltFail = Project.toBoolean(args[i].substring(14));", "-            } else if (args[i].startsWith(\"filtertrace=\")) {", "-                stackfilter = Project.toBoolean(args[i].substring(12));", "-            } else if (args[i].startsWith(\"crashfile=\")) {", "-                crashFile = args[i].substring(12);", "-                registerTestCase(\"BeforeFirstTest\");", "-            } else if (args[i].startsWith(\"formatter=\")) {", "+            if (args[i].startsWith(Constants.HALT_ON_ERROR)) {", "+                haltError = Project.toBoolean(args[i].substring(Constants.HALT_ON_ERROR.length()));", "+            } else if (args[i].startsWith(Constants.HALT_ON_FAILURE)) {", "+                haltFail = Project.toBoolean(args[i].substring(Constants.HALT_ON_FAILURE.length()));", "+            } else if (args[i].startsWith(Constants.FILTERTRACE)) {", "+                stackfilter = Project.toBoolean(args[i].substring(Constants.FILTERTRACE.length()));", "+            } else if (args[i].startsWith(Constants.CRASHFILE)) {", "+                crashFile = args[i].substring(Constants.CRASHFILE.length());", "+                registerTestCase(Constants.BEFORE_FIRST_TEST);", "+            } else if (args[i].startsWith(Constants.FORMATTER)) {", "-                    createAndStoreFormatter(args[i].substring(10));", "+                    createAndStoreFormatter(args[i].substring(Constants.FORMATTER.length()));", "-            } else if (args[i].startsWith(\"propsfile=\")) {", "+            } else if (args[i].startsWith(Constants.PROPSFILE)) {", "-                                                         .substring(10));", "+                                                         .substring(Constants.PROPSFILE.length()));", "-            } else if (args[i].startsWith(\"showoutput=\")) {", "-                showOut = Project.toBoolean(args[i].substring(11));", "-            } else if (args[i].startsWith(\"logtestlistenerevents=\")) {", "-                logTestListenerEvents = Project.toBoolean(args[i].substring(22));", "+            } else if (args[i].startsWith(Constants.SHOWOUTPUT)) {", "+                showOut = Project.toBoolean(args[i].substring(Constants.SHOWOUTPUT.length()));", "+            } else if (args[i].startsWith(Constants.LOGTESTLISTENEREVENTS)) {", "+                logTestListenerEvents = Project.toBoolean(args[i].substring(Constants.LOGTESTLISTENEREVENTS.length()));", "-                                stackfilter, haltFail, showOut, ", "+                                stackfilter, haltFail, showOut,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfc94d63956ce33612e374e76ee27780", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/SetProxy.java", "commitBeforeChange": "065d685c52fee07a0baf4b5ce482eed39afff31e", "commitAfterChange": "3043b4818699a717c8d1d521d2da765882171c5c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public void applyWebProxySettings()", "signatureAfterChange": "      public void applyWebProxySettings()", "diff": ["-                sysprops.put(\"http.proxyHost\", proxyHost);", "+                sysprops.put(ProxySetup.HTTP_PROXY_HOST, proxyHost);", "-                sysprops.put(\"http.proxyPort\", portString);", "-                sysprops.put(\"https.proxyHost\", proxyHost);", "-                sysprops.put(\"https.proxyPort\", portString);", "-                sysprops.put(\"ftp.proxyHost\", proxyHost);", "-                sysprops.put(\"ftp.proxyPort\", portString);", "+                sysprops.put(ProxySetup.HTTP_PROXY_PORT, portString);", "+                sysprops.put(ProxySetup.HTTPS_PROXY_HOST, proxyHost);", "+                sysprops.put(ProxySetup.HTTPS_PROXY_PORT, portString);", "+                sysprops.put(ProxySetup.FTP_PROXY_HOST, proxyHost);", "+                sysprops.put(ProxySetup.FTP_PROXY_PORT, portString);", "-                    sysprops.put(\"http.nonProxyHosts\", nonProxyHosts);", "-                    sysprops.put(\"https.nonProxyHosts\", nonProxyHosts);", "-                    sysprops.put(\"ftp.nonProxyHosts\", nonProxyHosts);", "+                    sysprops.put(ProxySetup.HTTP_NON_PROXY_HOSTS, nonProxyHosts);", "+                    sysprops.put(ProxySetup.HTTPS_NON_PROXY_HOSTS, nonProxyHosts);", "+                    sysprops.put(ProxySetup.FTP_NON_PROXY_HOSTS, nonProxyHosts);", "-                    sysprops.put(\"http.proxyUser\", proxyUser);", "-                    sysprops.put(\"http.proxyPassword\", proxyPassword);", "+                    sysprops.put(ProxySetup.HTTP_PROXY_USERNAME, proxyUser);", "+                    sysprops.put(ProxySetup.HTTP_PROXY_PASSWORD, proxyPassword);", "-                sysprops.remove(\"http.proxyHost\");", "-                sysprops.remove(\"http.proxyPort\");", "-                sysprops.remove(\"http.proxyUser\");", "-                sysprops.remove(\"http.proxyPassword\");", "-                sysprops.remove(\"https.proxyHost\");", "-                sysprops.remove(\"https.proxyPort\");", "-                sysprops.remove(\"ftp.proxyHost\");", "-                sysprops.remove(\"ftp.proxyPort\");", "+                sysprops.remove(ProxySetup.HTTP_PROXY_HOST);", "+                sysprops.remove(ProxySetup.HTTP_PROXY_PORT);", "+                sysprops.remove(ProxySetup.HTTP_PROXY_USERNAME);", "+                sysprops.remove(ProxySetup.HTTP_PROXY_PASSWORD);", "+                sysprops.remove(ProxySetup.HTTPS_PROXY_HOST);", "+                sysprops.remove(ProxySetup.HTTPS_PROXY_PORT);", "+                sysprops.remove(ProxySetup.FTP_PROXY_HOST);", "+                sysprops.remove(ProxySetup.FTP_PROXY_PORT);", "-                sysprops.put(\"socksProxyHost\", socksProxyHost);", "-                sysprops.put(\"socksProxyPort\", Integer.toString(socksProxyPort));", "+                sysprops.put(ProxySetup.SOCKS_PROXY_HOST, socksProxyHost);", "+                sysprops.put(ProxySetup.SOCKS_PROXY_PORT, Integer.toString(socksProxyPort));", "-                    sysprops.put(\"java.net.socks.username\", proxyUser);", "-                    sysprops.put(\"java.net.socks.password\", proxyPassword);", "+                    sysprops.put(ProxySetup.SOCKS_PROXY_USERNAME, proxyUser);", "+                    sysprops.put(ProxySetup.SOCKS_PROXY_PASSWORD, proxyPassword);", "-                sysprops.remove(\"socksProxyHost\");", "-                sysprops.remove(\"socksProxyPort\");", "-                sysprops.remove(\"java.net.socks.username\");", "-                sysprops.remove(\"java.net.socks.password\");", "+                sysprops.remove(ProxySetup.SOCKS_PROXY_HOST);", "+                sysprops.remove(ProxySetup.SOCKS_PROXY_PORT);", "+                sysprops.remove(ProxySetup.SOCKS_PROXY_USERNAME);", "+                sysprops.remove(ProxySetup.SOCKS_PROXY_PASSWORD);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ddb3e06dbfd2f10718c3f5e9a537d514", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "334b32eec83c819c00850b9582906c54", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/xml/XSLTProcess.java", "commitBeforeChange": "030fd751f51bef1c60b27cc4034cf1b013551520", "commitAfterChange": "0deb15031e9e934900b3b41f0d191dabdece8f80", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 20, "signatureBeforeChange": "      protected XSLTLiaison getLiaison()         throws TaskException", "signatureAfterChange": "      private void transform( final File in, final File out )         throws Exception", "diff": ["-    protected XSLTLiaison getLiaison()", "-        // if processor wasn't specified, see if TraX is available.  If not,", "-        // default it to xslp or xalan, depending on which is in the classpath", "-        if( m_liaison == null )", "-            if( m_processor != null )", "-            {", "-                try", "-                {", "-                    resolveProcessor( m_processor );", "-                }", "-                catch( Exception e )", "-                {", "-                    throw new TaskException( \"Error\", e );", "-                }", "-            }", "-            else", "-            {", "-                try", "-                {", "-                    resolveProcessor( \"trax\" );", "-                }", "-                catch( Throwable e1 )", "-                {", "-                    try", "-                    {", "-                        resolveProcessor( \"xalan\" );", "-                    }", "-                    catch( Throwable e2 )", "-                    {", "-                        try", "-                        {", "-                            resolveProcessor( \"adaptx\" );", "-                        }", "-                        catch( Throwable e3 )", "-                        {", "-                            try", "-                            {", "-                                resolveProcessor( \"xslp\" );", "-                            }", "-                            catch( Throwable e4 )", "-                            {", "-                                e4.printStackTrace();", "-                                e3.printStackTrace();", "-                                e2.printStackTrace();", "-                                throw new TaskException( \"Error\", e1 );", "-                            }", "-                        }", "-                    }", "-                }", "-            }", "-        return m_liaison;", "+", "+    private void transform( final File in, final File out )", "+        throws Exception", "+    {", "+        FileInputStream fis = null;", "+        FileOutputStream fos = null;", "+        try", "+        {", "+            fis = new FileInputStream( in );", "+            fos = new FileOutputStream( out );", "+            final StreamSource source = new StreamSource( fis, getSystemId( in ) );", "+            final StreamResult result = new StreamResult( fos );", "+", "+            m_transformer.transform( source, result );", "+        }", "+        finally", "+        {", "+            IOUtil.shutdownStream( fis );", "+            IOUtil.shutdownStream( fos );", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8ffbaf6ee2be03ce8ea795e1a74d026", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "b04c338caa73cc14ad6e8b258280426c3522de38", "commitAfterChange": "4c83562c6c9f681cdcd17c86f5e3c68c910dd5f8", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     public File resolveFile(File file, String filename)", "signatureAfterChange": "     public File resolveFile(File file, String filename)", "diff": ["-        filename = filename.replace('/', File.separatorChar)", "-            .replace('\\\\', File.separatorChar);", "-", "-        // deal with absolute files", "-        if (isAbsolutePath(filename)) {", "-            return normalize(filename);", "-        }", "-        if (file == null) {", "-            return new File(filename);", "-        }", "-        File helpFile = new File(file.getAbsolutePath());", "-        StringTokenizer tok = new StringTokenizer(filename, File.separator);", "-        while (tok.hasMoreTokens()) {", "-            String part = tok.nextToken();", "-            if (part.equals(\"..\")) {", "-                helpFile = helpFile.getParentFile();", "-                if (helpFile == null) {", "-                    String msg = \"The file or path you specified (\"", "-                        + filename + \") is invalid relative to \"", "-                        + file.getPath();", "-                    throw new BuildException(msg);", "+        if (!isAbsolutePath(filename)) {", "+            char sep = File.separatorChar;", "+            filename = filename.replace('/', sep).replace('\\\\', sep);", "+            if (isContextRelativePath(filename)) {", "+                file = null;", "+                // on cygwin, our current directory can be a UNC;", "+                // assume user.dir is absolute or all hell breaks loose...", "+                String udir = System.getProperty(\"user.dir\");", "+                if (filename.charAt(0) == sep && udir.charAt(0) == sep) {", "+                    filename = dissect(udir)[0] + filename.substring(1);", "-            } else if (part.equals(\".\")) {", "-                // Do nothing here", "-            } else {", "-                helpFile = new File(helpFile, part);", "+            filename = new File(file, filename).getAbsolutePath();", "-        return new File(helpFile.getAbsolutePath());", "+        return normalize(filename);", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cfe432425aad72fb0126d9d75251b552", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6956c8b8a9d7fe52be90dc0759183739", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/anteater/source/main/org/apache/ant/ProjectBuilder.java", "commitBeforeChange": "421736ed4a52a3f068a31f53678b97915ebb0cc9", "commitAfterChange": "f85678f1abd081bfd165ce81b94bad652968e4fd", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "                  public void startElement(String name, AttributeList atts) throws SAXException", "signatureAfterChange": "                  public void startElement(String name, AttributeList atts) throws SAXException", "diff": ["+        ", "-            //System.out.println(\"element: \" + name);", "+", "+            StringBuffer tagCharData = new StringBuffer();", "+            tagCharDataStack.insertElementAt(tagCharData, 0);", "+            ", "-                    if (projectName == null) {", "-                        System.out.println(\"Projects *must* have names\");", "-                        // XXX exception out", "+                    if (projectName != null) {", "+                        project.setName(projectName);", "+                    } else {", "+                        String msg = \"Project element doesn't contain a name attribute\";", "+                        AntException ae = new AntException(msg);", "+                        throw new SAXException(ae);", "-                    project.setName(projectName);", "+                    String defaultTarget = atts.getValue(\"default\");", "+                    if (defaultTarget != null) {", "+                        project.setDefaultTargetName(defaultTarget);", "+                    }", "+                    String baseDirName = atts.getValue(\"basedir\");", "+                    if (baseDirName != null) {", "+                        // XXX need to check to see if base dir exists", "+                        project.setBaseDir(new File(baseDirName));", "+                    }", "-                    System.out.println(\"Expecting project, got: \" + name);", "-                    // XXX exception out", "+                    String msg = \"Project file doesn't contain a project element as \" +", "+                                 \"its root node\";", "+                    AntException ae = new AntException(msg);", "+                    throw new SAXException(ae);", "+                ", "-                if (name.equals(\"target\")) {", "+              ", "+                // valid tags in a project object are: description, property, and target", "+              ", "+                if (name.equals(\"description\")) {", "+                    state = STATE_DESCRIPTION;", "+                } else if (name.equals(\"property\")) {", "+                    state = STATE_PROPERTY;", "+                    String propertyName = atts.getValue(\"name\");", "+                    String propertyValue = atts.getValue(\"value\");", "+                    if (propertyName == null) {", "+                        String msg = \"Name attribute must be present on property\";", "+                        AntException ae = new AntException(msg);", "+                        throw new SAXException(ae);", "+                    } else if (propertyValue == null) {", "+                        String msg = \"Value attribute must be present on property\";", "+                        AntException ae = new AntException(msg);", "+                        throw new SAXException(ae);", "+                    } else {", "+                        project.setProperty(propertyName, propertyValue);", "+                    }", "+                } else if (name.equals(\"target\")) {", "-                    if (targetName == null) {", "-                        System.out.println(\"Targets *must* have names\");", "-                        // XXX exception out", "+                    if (targetName != null) {", "+                        currentTarget = new Target(targetName);", "+                        project.addTarget(currentTarget);", "+                    } else {", "+                        // XXX figure out which target we're talking about! ", "+                        // Like a location", "+                        String msg = \"Target element doesn't contain a name attribute\";", "+                        AntException ae = new AntException(msg);", "+                        throw new SAXException(ae);", "-                    currentTarget = new Target(targetName);", "-                    project.addTarget(currentTarget);", "-                    ", "+                    String depends = atts.getValue(\"depends\");", "+                    if (depends != null) {", "+                        StringTokenizer tok = new StringTokenizer(depends, \",\", false);", "+                        while(tok.hasMoreTokens()) {", "+                            currentTarget.addDependancy(tok.nextToken().trim());", "+                        }", "+                    }", "+                                            ", "+                ", "+              ", "+                // Valid tags inside target: task", "+              ", "+                ", "+              case STATE_TASK:", "+              ", "+                // data in here needs to be reflected into tasks", "+                ", "+                System.out.println(\"Not yet supporting tags inside of tasks!\");", "+                System.out.println(\"The project build will probably bust right here\");", "+                ", "+                break;", "+                "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c17569d138cf84233d2041e3090b5fc5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Rmic.java", "commitBeforeChange": "b139901cab374b10e2f73a58769fb4ef1c2837bd", "commitAfterChange": "0218e3ecae8397a700aae864601f963e5771a9a5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-    public void execute() throws BuildException {", "-\tString pathsep = System.getProperty(\"path.separator\");", "-\tStringBuffer classpath = new StringBuffer();", "-\tFile baseFile = project.resolveFile(base);", "-\tclasspath.append(baseFile.getAbsolutePath());", "-\tclasspath.append(pathsep);", "-        classpath.append(System.getProperty(\"java.class.path\"));", "-        ", "-        // in jdk 1.2, the system classes are not on the visible classpath.", "-        ", "-        if (Project.getJavaVersion().startsWith(\"1.2\")) {", "-            String bootcp = System.getProperty(\"sun.boot.class.path\");", "-            if (bootcp != null) {", "-                classpath.append(pathsep);", "-                classpath.append(bootcp);", "-            }", "-        }", "-\t", "+", "+    public void execute() throws BuildException {", "+\tFile baseFile = project.resolveFile(base);", "+        File sourceBaseFile = null;", "+        if (null != sourceBase)", "+            sourceBaseFile = project.resolveFile(sourceBase);", "+        String classpath = getCompileClasspath(baseFile);", "-        String[] args = new String[5];", "-        args[0] = \"-d\";", "-        args[1] = baseFile.getAbsolutePath();", "-        args[2] = \"-classpath\";", "-        args[3] = classpath.toString();", "-        args[4] = classname;", "+  \t    int argCount = 5;", "+        int i = 0;", "+        if (null != stubVersion) argCount++;", "+        if (null != sourceBase) argCount++;", "+        String[] args = new String[argCount];", "+        args[i++] = \"-d\";", "+        args[i++] = baseFile.getAbsolutePath();", "+        args[i++] = \"-classpath\";", "+        args[i++] = classpath;", "+        args[i++] = classname;", "+        if (null != stubVersion) {", "+            if (\"1.1\".equals(stubVersion))", "+                args[i++] = \"-v1.1\";", "+            else if (\"1.2\".equals(stubVersion))", "+                args[i++] = \"-v1.2\";", "+            else", "+                args[i++] = \"-vcompat\";", "+        }", "+        if (null != sourceBase) args[i++] = \"-keepgenerated\";", "+", "+", "+        // Move the generated source file to the base directory", "+        if (null != sourceBase) {", "+        \tString stubFileName = classname.replace('.', '/') + \"_Stub.java\";", "+            File oldStubFile = new File(baseFile, stubFileName);", "+            File newStubFile = new File(sourceBaseFile, stubFileName);", "+            try {", "+                copyFile(oldStubFile, newStubFile);", "+                oldStubFile.delete();", "+            } catch (IOException ioe) {", "+                String msg = \"Failed to copy \" + oldStubFile + \" to \" + ", "+                             newStubFile + \" due to \" + ioe.getMessage();", "+                throw new BuildException(msg);", "+            }", "+            if (!\"1.2\".equals(stubVersion)) {", "+                String skelFileName = classname.replace('.', '/') + \"_Skel.java\";", "+                File oldSkelFile = new File(baseFile, skelFileName);", "+                File newSkelFile = new File(sourceBaseFile, skelFileName);", "+                try {", "+            \t    copyFile(oldSkelFile, newSkelFile);", "+            \t    oldSkelFile.delete();", "+                } catch (IOException ioe) {", "+                    String msg = \"Failed to copy \" + oldSkelFile + \" to \" + ", "+                                  newSkelFile + \" due to \" + ioe.getMessage();", "+                    throw new BuildException(msg);", "+                }", "+            }", "+        }"]}]}
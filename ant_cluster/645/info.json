{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "89802173885f22dc4464ee3d93da579a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b7735f8b512ce0933e48758c867cb40", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/AbstractCvsTask.java", "commitBeforeChange": "8755079deed1216c03280efa6e3d4a52f7fdf368", "commitAfterChange": "49ac8075b87fecb96138ec2fd569af101aa80743", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["+        String savedCommand = getCommand();", "+        Commandline cloned = null;", "-            this.cmd.createArgument(true).setLine(c);", "-            this.addConfiguredCommandline( this.cmd, true );", "+            cloned = (Commandline) cmd.clone();", "+            cloned.createArgument(true).setLine(c);", "+            this.addConfiguredCommandline(cloned, true);", "-        for( int i = 0; i < vecCommandlines.size(); i++ ) {", "-            this.runCommand( (Commandline)vecCommandlines.elementAt( i ) );", "+        try {", "+            for( int i = 0; i < vecCommandlines.size(); i++ ) {", "+                this.runCommand( (Commandline)vecCommandlines.elementAt( i ) );", "+            }", "+        } finally {", "+            if (cloned != null) {", "+                removeCommandline(cloned);", "+            }", "+            setCommand(savedCommand);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f127583a0848bfef5f835e86c83039b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "6103df477a1462aaa01639cec094e2b53172d711", "commitAfterChange": "2e15020c1e0390dcba2144bf2a66e387edd9f2c8", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     protected void printResults() throws java.sql.SQLException", "signatureAfterChange": "     protected void printResults() throws java.sql.SQLException", "diff": ["-            while ((rs = statement.getResultSet()) != null) {", "-\t\tlog(\"Processing new result set.\", Project.MSG_VERBOSE);", "-                ResultSetMetaData md = rs.getMetaData();", "-                int columnCount = md.getColumnCount();", "-                StringBuffer line = new StringBuffer();", "-                if (showheaders) {", "-                    for (int col = 1; col < columnCount; col++) {", "-                        line.append(md.getColumnName(col));", "-                        line.append(\",\");", "+            do {", "+                rs = statement.getResultSet();", "+                if (rs != null) {", "+        \t    log(\"Processing new result set.\", Project.MSG_VERBOSE);", "+                    ResultSetMetaData md = rs.getMetaData();", "+                    int columnCount = md.getColumnCount();", "+                    StringBuffer line = new StringBuffer();", "+                    if (showheaders) {", "+                        for (int col = 1; col < columnCount; col++) {", "+                            line.append(md.getColumnName(col));", "+                            line.append(\",\");", "+                        }", "+                        line.append(md.getColumnName(columnCount));", "+                        out.println(line);", "+                        line.setLength(0);", "-                    line.append(md.getColumnName(columnCount));", "-                    out.println(line);", "-                    line.setLength(0);", "-                }", "-                while (rs.next()) {", "-                    for (int col = 1; col < columnCount; col++) {", "-                        line.append(rs.getString(col).trim());", "-                        line.append(\",\");", "+                    while (rs.next()) {", "+                        boolean first = true;", "+                        for (int col = 1; col <= columnCount; col++) {", "+                            String columnValue = rs.getString(col);", "+                            if (columnValue != null) {", "+                                columnValue = columnValue.trim();", "+                            }", "+                             ", "+                            if (first) {", "+                                first = false;", "+                            }", "+                            else {", "+                                line.append(\",\");", "+                            }", "+                            line.append(columnValue);", "+                        }", "+                        out.println(line);", "+                        line.setLength(0);", "-                    line.append(rs.getString(columnCount).trim());", "-                    out.println(line);", "-                    line.setLength(0);", "-                statement.getMoreResults();", "+            while (statement.getMoreResults());"]}]}
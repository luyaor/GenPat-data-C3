{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5d3844da943e909e5bd1a647cd1f49a3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4da7d23f323373800f84fac5933afed3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Length.java", "commitBeforeChange": "ec980be7345681968c93f0609e9a3fecb39b9753", "commitAfterChange": "fbb9886634198d8377104bef9ec697fadeb134df", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": "      private void handleResources(Handler h)", "signatureAfterChange": "      private void handleResources(Handler h)", "diff": ["-        for (Iterator i = filesets.iterator(); i.hasNext();) {", "-            FileSet fs = (FileSet) i.next();", "-            DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "-            String[] f = ds.getIncludedFiles();", "-            for (int j = 0; j < f.length; j++) {", "-                Resource r = ds.getResource(f[j]);", "-                if (!r.isExists()) {", "-                    log(r.getName() + \" does not exist\", Project.MSG_ERR);", "-                } else if (r.isDirectory()) {", "-                    log(r.getName() + \" is a directory; length unspecified\",", "-                        Project.MSG_ERR);", "-                } else {", "-                    //force a full path:", "-                    File basedir = ds.getBasedir();", "-                    String s = FileUtils.getFileUtils().resolveFile(", "-                        basedir, r.getName()).getAbsolutePath();", "-                    h.handle(new Resource(s, true,", "-                        r.getLastModified(), false, r.getSize()));", "-                }", "+        for (Iterator i = resources.iterator(); i.hasNext();) {", "+            Resource r = (Resource) i.next();", "+            if (!r.isExists()) {", "+                log(r + \" does not exist\", Project.MSG_ERR);", "+            } else if (r.isDirectory()) {", "+                log(r + \" is a directory; length unspecified\",", "+                    Project.MSG_ERR);", "+            } else {", "+                h.handle(r);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcab4bc9efcf043e4b208d2aeae3f93f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ExecutionFrame.java", "commitBeforeChange": "e0fef5cf64773a98734998b9736ded96fc8be2c7", "commitAfterChange": "81c17b6164451315e24ae774f1bed668cbca99ce", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected void setProject(Project project) throws ConfigException", "signatureAfterChange": "     protected void setProject(Project project) throws ExecutionException", "diff": ["-    protected void setProject(Project project) throws ConfigException {", "+    protected void setProject(Project project) throws ExecutionException {", "-        URL projectURL = project.getSourceURL();", "-        if (projectURL.getProtocol().equals(\"file\")) {", "-            File projectFile = new File(projectURL.getFile());", "-            String base = project.getBase();", "-            if (base == null) {", "-                base = \".\";", "-            }", "-            baseDir = new File(projectFile.getParentFile(), base);", "-        } else {", "-            baseDir = new File(\".\");", "-        }", "-", "-            ExecutionFrame referencedFrame", "-                 = new ExecutionFrame(standardLibs, initConfig, config);", "-            referencedFrame.setProject(referencedProject);", "+            ExecutionFrame referencedFrame = createFrame(referencedProject);", "-            for (Iterator j = eventSupport.getListeners(); j.hasNext(); ) {", "-                BuildListener listener = (BuildListener)j.next();", "-                referencedFrame.addBuildListener(listener);", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1be79ef53ed2cc80e2e7169a629430d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/LoaderUtils.java", "commitBeforeChange": "36d84a61dc70dd6bbc8ee25d5261de5f2874e837", "commitAfterChange": "f3939727d9e11188d266beed7e9dfa8e2fd0bc9a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public static File getResourceSource(ClassLoader c, String resource)", "signatureAfterChange": "     public static File getResourceSource(ClassLoader c, String resource)", "diff": ["-        FileUtils fileUtils = FileUtils.newFileUtils();", "-        ", "-        URL url = c.getResource(resource);", "-        if (url != null) {", "-            String u = url.toString();", "-            if (u.startsWith(\"jar:file:\")) {", "-                int pling = u.indexOf(\"!\");", "-                String jarName = u.substring(4, pling);", "-                return new File(fileUtils.fromURI(jarName));", "-            } else if (u.startsWith(\"file:\")) {", "-                int tail = u.indexOf(resource);", "-                String dirName = u.substring(0, tail);", "-                return new File(fileUtils.fromURI(dirName));", "-            }", "-        }", "-        return null;", "+        return normalizeSource(Locator.getResourceSource(c, resource));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da147cac5a0fa202e73b24934cead7d5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/launcher/Main.java", "commitBeforeChange": "3946d3183e482916114f5b5126d23cd6bf1c9da3", "commitAfterChange": "25c4d95cd51429feee002187eba3dc0acfbb4d3e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static final void main( final String[] args )         throws Exception", "signatureAfterChange": "     public static final void main( final String[] args )         throws Exception", "diff": ["-            //setup classloader appropriately for myrmidon jar", "-            final File libDir = new File( installDirectory, \"lib\" );", "-            final URL[] libUrls = buildURLList( libDir );", "-            final URLClassLoader libClassLoader = new URLClassLoader( libUrls );", "-", "-            final File containerLibDir = new File( installDirectory, \"bin\" + File.separator + \"lib\" );", "-            final URL[] containerLibUrls = buildURLList( containerLibDir );", "+            final URLClassLoader sharedClassLoader = createSharedClassLoader( installDirectory );", "-                new URLClassLoader( containerLibUrls, libClassLoader );", "+                createContainerClassLoader( installDirectory, sharedClassLoader );", "-            //load class and retrieve appropriate main method.", "-            final Class clazz = classLoader.loadClass( \"org.apache.myrmidon.frontends.CLIMain\" );", "-            final Method method = clazz.getMethod( \"main\", new Class[]{args.getClass()} );", "-", "-            Thread.currentThread().setContextClassLoader( classLoader );", "-", "-            //kick the tires and light the fires....", "-            method.invoke( null, new Object[]{args} );", "+            execMainClass( classLoader, args );"]}]}
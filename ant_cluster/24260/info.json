{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "69ec846543ef71ddd6e7c3a3775e17b3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "369a5f9d0876e2afe25f09391d268929", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ExtraFieldUtils.java", "commitBeforeChange": "1c5c68f3ed2854776e2377bf5486caadc8ecc5b8", "commitAfterChange": "f665a4d33564ecc12851996978a9847024643829", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public static ZipExtraField[] parse(byte[] data, boolean local)         throws ZipException", "signatureAfterChange": "     public static ZipExtraField[] parse(byte[] data, boolean local,                                         UnparseableExtraField onUnparseableData)         throws ZipException", "diff": ["+     */", "+    public static ZipExtraField[] parse(byte[] data, boolean local,", "+                                        UnparseableExtraField onUnparseableData)", "+        throws ZipException {", "+        LOOP:", "-                throw new ZipException(\"data starting at \" + start", "-                    + \" is in unknown format\");", "+                switch(onUnparseableData.getKey()) {", "+                case UnparseableExtraField.THROW_KEY:", "+                    throw new ZipException(\"bad extra field starting at \"", "+                                           + start + \".  Block length of \"", "+                                           + length + \" bytes exceeds remaining\"", "+                                           + \" data of \"", "+                                           + (data.length - start - WORD)", "+                                           + \" bytes.\");", "+                case UnparseableExtraField.READ_KEY:", "+                    UnparseableExtraFieldData field =", "+                        new UnparseableExtraFieldData();", "+                    if (local) {", "+                        field.parseFromLocalFileData(data, start,", "+                                                     data.length - start);", "+                    } else {", "+                        field.parseFromCentralDirectoryData(data, start,", "+                                                            data.length - start);", "+                    }", "+                    v.add(field);", "+                    /*FALLTHROUGH*/", "+                case UnparseableExtraField.SKIP_KEY:", "+                    // since we cannot parse the data we must assume", "+                    // the extra field consumes the whole rest of the", "+                    // available data", "+                    break LOOP;", "+                default:", "+                    throw new ZipException(\"unknown UnparseableExtraField key: \"", "+                                           + onUnparseableData.getKey());", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b32c32acec1dd771b6f6cbf6f2a2f771", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/FTP.java", "commitBeforeChange": "26067ee1d30e96a7345a20a29bb538ed314d4c70", "commitAfterChange": "54057d742bcffec3013ff101b9f0e8db5ce65009", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 18, "signatureBeforeChange": "     protected int sendFiles(FTPClient ftp, DirectoryScanner ds)         throws IOException, BuildException", "signatureAfterChange": "     protected int transferFiles(FTPClient ftp, FileSet fs)         throws IOException, BuildException", "diff": ["-    protected int sendFiles(FTPClient ftp, DirectoryScanner ds)", "+    protected int transferFiles(FTPClient ftp, FileSet fs)", "+        FileScanner ds;", "+", "+        if (action == SEND_FILES) {", "+            ds = fs.getDirectoryScanner(project);", "+        } else {", "+            ds = new FTPDirectoryScanner(ftp);", "+            fs.setupDirectoryScanner(ds, project);", "+            ds.scan();", "+        }\t\t\t", "+\t\t\t\t", "-        String dir = ds.getBasedir().getAbsolutePath();", "+        String dir = null;", "+        if ((ds.getBasedir() == null) && ((action == SEND_FILES) || (action == GET_FILES))) {", "+            throw new BuildException( \"the dir attribute must be set for send and get actions\" );", "+        } else {", "+            if ((action == SEND_FILES) || (action == GET_FILES)) {", "+                dir = ds.getBasedir().getAbsolutePath();", "+            }", "+        }", "+", "+        // If we are doing a listing, we need the output stream created now.", "+        BufferedWriter bw = null;", "+        if (action == LIST_FILES) {", "+            File pd = new File(listing.getParent());", "+            if (!pd.exists()) {", "+                pd.mkdirs();", "+            }", "+            bw = new BufferedWriter(new FileWriter(listing));", "+        }", "-            sendFile(ftp, dir, dsfiles[i]);", "+            switch (action) {", "+                case SEND_FILES: {", "+                    sendFile(ftp, dir, dsfiles[i]);", "+                    break;", "+                }", "+", "+                case GET_FILES: {", "+                    getFile(ftp, dir, dsfiles[i]);", "+                    break;", "+                }", "+", "+                case DEL_FILES: {", "+                    delFile(ftp, dsfiles[i]);", "+                    break;", "+                }", "+", "+                case LIST_FILES: {", "+                    listFile(ftp, bw, dsfiles[i]);", "+                    break;", "+                }", "+", "+                default: {", "+                    throw new BuildException(\"unknown ftp action \" + action );", "+                }", "+            }", "+        }", "+", "+        if (action == LIST_FILES) {", "+            bw.close();"]}]}
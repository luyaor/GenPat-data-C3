{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "901336022dda4f6dc7eeb4aa0040fe10", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6232a5911255919d5fb8833df89b24c9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/ScpToMessageBySftp.java", "commitBeforeChange": "9ffa99a029f6a0d02374c8705d2db32b23731779", "commitAfterChange": "fd126ea83074cffca634b5e6ef2ae80844ff7695", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      private void doMultipleTransfer() throws IOException, JSchException", "signatureAfterChange": "      private void doMultipleTransfer() throws IOException, JSchException", "diff": ["+                try {", "+                    channel.stat(remotePath);", "+                } catch (SftpException e) {", "+                    if (e.id == ChannelSftp.SSH_FX_NO_SUCH_FILE) {", "+                        // dir does not exist.", "+                        channel.mkdir(remotePath);", "+                    } else {", "+                        throw new JSchException(\"failed to access remote dir '\"", "+                                                + remotePath + \"'\", e);", "+                    }", "+                }", "-                JSchException schException = new JSchException(\"Could not CD to '\" + remotePath + \"' - \" + e.toString());", "-                schException.initCause(e);", "-                throw schException;", "+                throw new JSchException(\"Could not CD to '\" + remotePath", "+                                        + \"' - \" + e.toString(), e);", "+            Directory current = null;", "-                    Directory current = (Directory) i.next();", "-                    if(getVerbose()) {", "+                    current = (Directory) i.next();", "+                    if (getVerbose()) {", "-                JSchException schException = new JSchException(e.toString());", "-                schException.initCause(e);", "-                throw schException;", "+                String msg = \"Error sending directory\";", "+                if (current != null && current.getDirectory() != null) {", "+                    msg += \" '\" + current.getDirectory().getName() + \"'\";", "+                }", "+                throw new JSchException(msg, e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "904ad29c0d41477304955a973ff6a54c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/depend/Depend.java", "commitBeforeChange": "85344c438efab87f56ca5f4b179752852ec0aa86", "commitAfterChange": "f66cab0ea7689df54fe51f64018cd3ef8b05cd3d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void determineDependencies() throws IOException", "signatureAfterChange": "     private void determineDependencies() throws IOException", "diff": ["-        Hashtable dependencyMap = new Hashtable();", "+        boolean cacheDirty = false;", "+        ", "+        Hashtable dependencyMap = null;", "+        File depCacheFile = null;", "+        boolean depCacheFileExists = true;", "+        long depCacheFileLastModified = Long.MAX_VALUE;", "+        ", "+        // read the dependency cache from the disk", "+        if (cache != null) {", "+            dependencyMap = readCachedDependencies();", "+            depCacheFile = new File(cache, CACHE_FILE_NAME);", "+            depCacheFileExists = depCacheFile.exists();", "+            depCacheFileLastModified = depCacheFile.lastModified();", "+        }", "-                // try to read the dependency info from the cache if it is not out of date", "-                File depFile = new File(cache, info.relativeName + \".dep\");", "-                if (depFile.exists() && depFile.lastModified() > info.absoluteFile.lastModified()) {", "+                // try to read the dependency info from the map if it is not out of date", "+                if (depCacheFileExists && depCacheFileLastModified > info.absoluteFile.lastModified()) {", "-                    // need to read dependency list from the file.", "-                    dependencyList = readDependencyList(depFile);", "+                    // need to get dependency list from the map.", "+                    dependencyList = (Vector)dependencyMap.get(info.className);", "-                    ", "-                    if (cache != null) {", "-                        // new dependencies so need to write them out to the cache", "-                        File depFile = new File(cache, info.relativeName + \".dep\");", "-                        writeDependencyList(depFile, dependencyList);", "+                    if (dependencyList != null) {", "+                        cacheDirty = true;", "+                        dependencyMap.put(info.className, dependencyList);", "+                    ", "-            ", "-            dependencyMap.put(info.className, dependencyList);", "+                        ", "+        ", "+        // write the dependency cache to the disk", "+        if (cache != null && cacheDirty) {", "+            writeCachedDependencies(dependencyMap);", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d8f19236459a207a366096582317e183", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d3b3b4aab6e869bd8d43a3f46ebac92", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ComponentManager.java", "commitBeforeChange": "c0ddb311373dc9fe32a78a15a68c4587bbb7566d", "commitAfterChange": "69d9b9a49622889f44d6792faf00f886857828d6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void loadLib(String libLocation, boolean importAll,                         boolean autoImport)          throws ExecutionException", "signatureAfterChange": "     public void loadLib(String libLocation, boolean importAll,                         boolean autoImport)          throws ExecutionException", "diff": ["-            libManager.configLibraries(frame.getInitConfig(), librarySpecs,", "-                antLibraries, libPathsMap);", "+            Map newLibraries = libManager.configLibraries(frame.getInitConfig(),", "+                librarySpecs, antLibraries, libPathsMap);", "-            Iterator i = librarySpecs.keySet().iterator();", "+            antLibraries.putAll(newLibraries);", "+            Iterator i = antLibraries.keySet().iterator();", "-                boolean doAuto = autoImport ", "-                    && libraryId.startsWith(Constants.ANT_LIB_PREFIX);", "+                boolean doAuto = autoImport", "+                     && libraryId.startsWith(Constants.ANT_LIB_PREFIX);", "+                addAspects((AntLibrary) antLibraries.get(libraryId));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f877d2410f275a214479fbf0486824cf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/antlib/AntLibManager.java", "commitBeforeChange": "c0ddb311373dc9fe32a78a15a68c4587bbb7566d", "commitAfterChange": "69d9b9a49622889f44d6792faf00f886857828d6", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void configLibrary(InitConfig initConfig, Map librarySpecs,                                String libraryId,                                CircularDependencyChecker configuring,                                Map libraries, Map libPathsMap)          throws ExecutionException", "signatureAfterChange": "     private void configLibrary(InitConfig initConfig, Map librarySpecs,                                String libraryId,                                CircularDependencyChecker configuring,                                Map libraries, Map newLibraries, Map libPathsMap)          throws ExecutionException", "diff": ["-                               Map libraries, Map libPathsMap)", "+                               Map libraries, Map newLibraries, Map libPathsMap)", "-                if (!libraries.containsKey(extendsId)) {", "+                if (!libraries.containsKey(extendsId) &&", "+                    !newLibraries.containsKey(extendsId)) {", "-                        configuring, libraries, libPathsMap);", "+                        configuring, libraries, newLibraries, libPathsMap);", "+                if (extendsLibrary == null) {", "+                    extendsLibrary = (AntLibrary) newLibraries.get(extendsId);", "+                }", "+                ", "-            libraries.put(libraryId, antLibrary);", "+            newLibraries.put(libraryId, antLibrary);"]}]}
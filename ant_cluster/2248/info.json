{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "08137723a389167a130fbcecd0980e7a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0eec616aff5c24591aa7bca98f06a025", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XmlProperty.java", "commitBeforeChange": "74b6597e3a4c61f84321f72eb1f5be186f2a6e51", "commitAfterChange": "524a7831a7c83f78afd325bb3b7917ff73b196cf", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "      void addNodeRecursively(org.w3c.dom.Node node, String prefix)", "signatureAfterChange": "      void addNodeRecursively(org.w3c.dom.Node node, String prefix)", "diff": ["+        addNodeRecursively(node, prefix, null);", "+    }", "-            org.w3c.dom.NamedNodeMap nodeAttributes = node.getAttributes();", "-                String attributeName;", "-                if(collapseAttributes){", "-                  attributeName = prefix + (prefix.trim().equals(\"\")?\"\":\".\") + node.getNodeName() + \".\" + attributeNode.getNodeName();", "-                }", "-                else{", "-                  attributeName = prefix + (prefix.trim().equals(\"\")?\"\":\".\") + node.getNodeName() + \"(\" + attributeNode.getNodeName() + \")\";", "-                }", "-                String attributeValue = attributeNode.getNodeValue();", "-                log(attributeName + \":\" + attributeValue, Project.MSG_DEBUG);", "-                getProject().setNewProperty(attributeName, attributeValue);", "-            String nodeText = node.getNodeValue();", "-                log(prefix + \":\" + nodeText, Project.MSG_DEBUG);", "-                 getProject().setNewProperty(prefix, nodeText);", "-        if (node.hasChildNodes()) {", "-            prefix += ((prefix.trim().equals(\"\")?\"\":\".\") + node.getNodeName());", "-            org.w3c.dom.NodeList nodeChildren = node.getChildNodes();", "-            int numChildren = nodeChildren.getLength();", "-            for (int i = 0; i < numChildren; i++) {", "-                addNodeRecursively(nodeChildren.item(i), prefix);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c22462c603f23b1de63b71dc3dbeefb2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XmlProperty.java", "commitBeforeChange": "74b6597e3a4c61f84321f72eb1f5be186f2a6e51", "commitAfterChange": "524a7831a7c83f78afd325bb3b7917ff73b196cf", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      void addNodeRecursively(org.w3c.dom.Node node, String prefix)", "signatureAfterChange": "     private void addNodeRecursively(Node node, String prefix,                                      Object container)", "diff": ["+    /** Iterate through all nodes in the tree. */", "+    private void addNodeRecursively(Node node, String prefix, ", "+                                    Object container) {", "+", "+        // Set the prefix for this node to include its tag name.", "+        String nodePrefix = prefix;", "+        if (node.getNodeType() != Node.TEXT_NODE) {", "+            if (prefix.trim().length() > 0) {", "+                nodePrefix += \".\";", "+            }", "+            nodePrefix += node.getNodeName();", "+        }", "+", "+        // Pass the container to the processing of this node,", "+        Object nodeObject = processNode(node, nodePrefix, container);", "+", "+        // now, iterate through children.", "+        if (node.hasChildNodes()) {", "+", "+            NodeList nodeChildren = node.getChildNodes();", "+            int numChildren = nodeChildren.getLength();", "+", "+            for (int i = 0; i < numChildren; i++) {", "+                // For each child, pass the object added by", "+                // processNode to its children -- in other word, each", "+                // object can pass information along to its children.", "+                addNodeRecursively(nodeChildren.item(i), nodePrefix, ", "+                                   nodeObject);", "+            }", "+        }", "+    }", "-            org.w3c.dom.NamedNodeMap nodeAttributes = node.getAttributes();", "-                String attributeName;", "-                if(collapseAttributes){", "-                  attributeName = prefix + (prefix.trim().equals(\"\")?\"\":\".\") + node.getNodeName() + \".\" + attributeNode.getNodeName();", "-                }", "-                else{", "-                  attributeName = prefix + (prefix.trim().equals(\"\")?\"\":\".\") + node.getNodeName() + \"(\" + attributeNode.getNodeName() + \")\";", "-                }", "-                String attributeValue = attributeNode.getNodeValue();", "-                log(attributeName + \":\" + attributeValue, Project.MSG_DEBUG);", "-                getProject().setNewProperty(attributeName, attributeValue);", "-            String nodeText = node.getNodeValue();", "-                log(prefix + \":\" + nodeText, Project.MSG_DEBUG);", "-                 getProject().setNewProperty(prefix, nodeText);", "-        if (node.hasChildNodes()) {", "-            prefix += ((prefix.trim().equals(\"\")?\"\":\".\") + node.getNodeName());", "-            org.w3c.dom.NodeList nodeChildren = node.getChildNodes();", "-            int numChildren = nodeChildren.getLength();", "-            for (int i = 0; i < numChildren; i++) {", "-                addNodeRecursively(nodeChildren.item(i), prefix);"]}]}
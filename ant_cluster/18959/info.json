{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e012da7bfff99535c4c9319ee5ee5107", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ce10ad81a60d66bdf098ca7ac41c8ed", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "10c41029aeaba31241f1a85f9b02591b357e20b6", "commitAfterChange": "818cb969adef1df0f5918ba62f80f62502d5e53e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        final String oldclasspath = System.getProperty(\"java.class.path\");", "-", "-        commandline.createClasspath(project).createPathElement().setPath(oldclasspath);", "-        /*", "-         * This doesn't work on JDK 1.1, should use a Classloader of our own ", "-         * anyway --SB", "-         *", "-         * System.setProperty(\"java.class.path\", commandline.createClasspath().toString());", "-         */", "-", "-        Enumeration list = tests.elements();", "+        Enumeration list = batchTests.elements();", "-            final JUnitTest test = (JUnitTest)list.nextElement();", "+            BatchTest test = (BatchTest)list.nextElement();", "+            Enumeration list2 = test.elements();", "+            while (list2.hasMoreElements()) {", "+                tests.addElement(list2.nextElement());", "+            }", "+        }", "-            final String filename = \"TEST-\" + test.getName() + \".xml\";", "-// removed --SB", "-//            if (new File(filename).exists()) {", "-//                project.log(\"Skipping \" + test.getName());", "-//                continue;", "-//            }", "-            project.log(\"Running \" + test.getName());", "+        list = tests.elements();", "+        while (list.hasMoreElements()) {", "+            JUnitTest test = (JUnitTest)list.nextElement();", "-            if (defaultOutfile && (test.getOutfile() == null ||", "-                test.getOutfile().length() == 0)) {", "-", "-// removed --SB", "-//                test.setOutfile(\"RUNNING-\" + filename);", "-                test.setOutfile(filename);", "+            if (!test.shouldRun(project)) {", "+                continue;", "-            int exitValue = 2;", "+            if (test.getOutfile() == null) {", "+                test.setOutfile(project.resolveFile(\"TEST-\" + test.getName()));", "+            }", "-            if (test.getFork()) {", "-                try {", "-\t\t    // Create a watchdog based on the timeout attribute", "-                    final Execute execute = new Execute(new PumpStreamHandler(), createWatchdog());", "-                    final Commandline cmdl = new Commandline();", "-                    cmdl.addArguments(commandline.getCommandline());", "-                    cmdl.addArguments(test.getCommandline());", "-                    execute.setCommandline(cmdl.getCommandline());", "-                    log(\"Execute JUnit: \" + cmdl, Project.MSG_VERBOSE);", "-                    exitValue = execute.execute();", "+            int exitValue = JUnitTestRunner.ERRORS;", "+            if (!test.getFork()) {", "+                JUnitTestRunner runner = ", "+                    new JUnitTestRunner(test, test.getHaltonerror(),", "+                                        test.getHaltonfailure());", "+                if (summary) {", "+                    log(\"Running \" + test.getName(), Project.MSG_INFO);", "+                    ", "+                    SummaryJUnitResultFormatter f = ", "+                        new SummaryJUnitResultFormatter();", "+                    f.setOutput(new LogOutputStream(this, Project.MSG_INFO));", "+                    runner.addFormatter(f);", "-                catch (IOException e) {", "+", "+                for (int i=0; i<formatters.size(); i++) {", "+                    FormatterElement fe = (FormatterElement) formatters.elementAt(i);", "+                    fe.setOutfile(project.resolveFile(test.getOutfile()", "+                                                      +fe.getExtension()));", "+                    runner.addFormatter(fe.createFormatter());", "+                }", "+                FormatterElement[] add = test.getFormatters();", "+                for (int i=0; i<add.length; i++) {", "+                    add[i].setOutfile(project.resolveFile(test.getOutfile()", "+                                                          +add[i].getExtension()));", "+                    runner.addFormatter(add[i].createFormatter());", "+                }", "+", "+                runner.run();", "+                exitValue = runner.getRetCode();", "+", "+            } else {", "+                CommandlineJava cmd = (CommandlineJava) commandline.clone();", "+                ", "+                cmd.setClassname(\"org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner\");", "+                cmd.createArgument().setValue(test.getName());", "+                cmd.createArgument().setValue(\"haltOnError=\" ", "+                                              + test.getHaltonerror());", "+                cmd.createArgument().setValue(\"haltOnFailure=\"", "+                                              + test.getHaltonfailure());", "+                if (summary) {", "+                    log(\"Running \" + test.getName(), Project.MSG_INFO);", "+                    ", "+                    cmd.createArgument().setValue(\"formatter=org.apache.tools.ant.taskdefs.optional.junit.SummaryJUnitResultFormatter\");", "+                }", "+", "+                for (int i=0; i<formatters.size(); i++) {", "+                    FormatterElement fe = (FormatterElement) formatters.elementAt(i);", "+                    cmd.createArgument().setValue(\"formatter=\" +", "+                                                  fe.getClassname() + \",\"", "+                                                  + project.resolveFile(test.getOutfile()", "+                                                                               +fe.getExtension()).getAbsolutePath());", "+                }", "+                ", "+                FormatterElement[] add = test.getFormatters();", "+                for (int i=0; i<add.length; i++) {", "+                    cmd.createArgument().setValue(\"formatter=\" +", "+                                                  add[i].getClassname() + \",\"", "+                                                  + project.resolveFile(test.getOutfile()", "+                                                                               +add[i].getExtension()).getAbsolutePath());", "+                }", "+", "+                Execute execute = new Execute(new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN), createWatchdog());", "+                execute.setCommandline(cmd.getCommandline());", "+                try {", "+                    exitValue = execute.execute();", "+                } catch (IOException e) {", "-            } else {", "-                final Object[] arg = { test };", "-                final Class[] argType = { arg[0].getClass() };", "-                try {", "-                    final Class target = Class.forName(\"org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner\");", "-                    final Method main = target.getMethod(\"runTest\", argType);", "-                    project.log(\"Load JUnit: \" + test, Project.MSG_VERBOSE);", "-                    exitValue = ((Integer)main.invoke(null, arg)).intValue();", "-                } catch (InvocationTargetException e) {", "-                    Throwable t = e.getTargetException();", "-                    String msg = \"Running test failed: \" + t.getMessage();", "-                    throw new BuildException(msg, t, location);", "-                } catch (Exception e) {", "-                    String msg = \"Running test failed: \" + e.getMessage();", "-                    throw new BuildException(msg, e, location);", "-                }", "-            boolean errorOccurredHere = exitValue == 2;", "-            boolean failureOccurredHere = exitValue == 1;", "-// removed --SB", "-//            if (exitValue != 0) {", "-//                rename(\"RUNNING-\" + filename, \"ERROR-\" + filename);", "-//            } else {", "-//                rename(\"RUNNING-\" + filename, filename);", "-//            }", "-\t    // <XXX> later distinguish HALT_AT_END case", "+            boolean errorOccurredHere = exitValue == JUnitTestRunner.ERRORS;", "+            boolean failureOccurredHere = exitValue != JUnitTestRunner.SUCCESS;", "-                throw new BuildException(\"JUNIT FAILED\", location);", "-\t    } else if (errorOccurredHere || failureOccurredHere) {", "-                log(\"JUNIT FAILED\", Project.MSG_ERR);", "+                throw new BuildException(\"Test \"+test.getName()+\" failed\", ", "+                                         location);", "+            } else if (errorOccurredHere || failureOccurredHere) {", "+                log(\"TEST \"+test.getName()+\" FAILED\", Project.MSG_ERR);", "-", "-\t    // Update overall test status", "-            errorOccurred = errorOccurred || errorOccurredHere ;", "-            failureOccurred = failureOccurred || failureOccurredHere ;", "-", "-\t// <XXX> later add HALT_AT_END option", "-        // Then test errorOccurred and failureOccurred here."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbd7080aeb48a0b41ebe40083009a5fe", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java", "commitBeforeChange": "d60b6ca1eea0a3372c99965f3c15466328659908", "commitAfterChange": "c6c232893c39257745a8f7a618bcdb5c59791cae", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile)", "signatureAfterChange": "     protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile)", "diff": ["-    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile)", "-    {", "+    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {", "-        try", "-        {", "+        try {", "-                && weblogicJarFile.exists() && weblogicJarFile.isFile())", "-            {", "+                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {", "-                for (Enumeration e = genericJar.entries(); e.hasMoreElements();)", "-                {", "-                    JarEntry je = (JarEntry)e.nextElement();", "+                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {", "+                    JarEntry je = (JarEntry) e.nextElement();", "+", "-                for (Enumeration e = wlJar.entries() ; e.hasMoreElements();)", "-                {", "-                    JarEntry je = (JarEntry)e.nextElement();", "+                for (Enumeration e = wlJar.entries(); e.hasMoreElements();) {", "+                    JarEntry je = (JarEntry) e.nextElement();", "+", "-                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();)", "-                {", "-                    String filepath = (String)e.nextElement();", "-                    if (wlEntries.containsKey(filepath))    // File name/path match", "-                    {", "+", "+                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {", "+                    String filepath = (String) e.nextElement();", "+", "+                    if (wlEntries.containsKey(filepath)) {// File name/path match", "+", "-                        JarEntry genericEntry = (JarEntry)genericEntries.get(filepath);", "-                        JarEntry wlEntry = (JarEntry)wlEntries.get(filepath);", "-                        if ((genericEntry.getCrc() !=  wlEntry.getCrc())  || // Crc's Match", "-                            (genericEntry.getSize() != wlEntry.getSize()) ) // Size Match", "-                        {", "-                            if (genericEntry.getName().endsWith(\".class\"))", "-                            {", "+                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);", "+                        JarEntry wlEntry = (JarEntry) wlEntries.get(filepath);", "+", "+                        if ((genericEntry.getCrc() != wlEntry.getCrc()) || // Crc's Match", "+                        (genericEntry.getSize() != wlEntry.getSize())) {// Size Match", "+", "+                            if (genericEntry.getName().endsWith(\".class\")) {", "-                                String classname = genericEntry.getName().replace(File.separatorChar,'.');", "-                                classname = classname.substring(0,classname.lastIndexOf(\".class\"));", "+                                String classname = genericEntry.getName().replace(File.separatorChar, '.');", "+", "+                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));", "+", "-                                if (genclass.isInterface())", "-                                {", "+", "+                                if (genclass.isInterface()) {", "-                                    log(\"Interface \" + genclass.getName() + \" has changed\",Project.MSG_VERBOSE);", "+                                    log(\"Interface \" + genclass.getName() + \" has changed\", Project.MSG_VERBOSE);", "-                                }", "-                                else", "-                                {", "+                                } else {", "-                            }", "-                            else", "-                            {", "+                            } else {", "-                                    log(\"Non class file \" + genericEntry.getName() + \" has changed\",Project.MSG_VERBOSE);", "+                                    log(\"Non class file \" + genericEntry.getName() + \" has changed\", Project.MSG_VERBOSE);", "-                    }", "-                    else // a file doesnt exist rebuild", "-                    {", "-                        log(\"File \" + filepath + \" not present in weblogic jar\",Project.MSG_VERBOSE);", "-                        rebuild =  true;", "+                    } else {// a file doesnt exist rebuild", "+", "+                        log(\"File \" + filepath + \" not present in weblogic jar\", Project.MSG_VERBOSE);", "+                        rebuild = true;", "-                if (!rebuild)", "-                {", "-                    log(\"No rebuild needed - updating jar\",Project.MSG_VERBOSE);", "+                if (!rebuild) {", "+                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);", "-                    for (Enumeration e = wlEntries.elements() ; e.hasMoreElements();)", "-                    {", "+                    for (Enumeration e = wlEntries.elements(); e.hasMoreElements();) {", "-                        JarEntry je = (JarEntry)e.nextElement();", "+                        JarEntry je = (JarEntry) e.nextElement();", "+", "-                                je.getCompressedSize() == je.getSize()) {", "+                            je.getCompressedSize() == je.getSize()) {", "-                        }", "-                        else {", "+                        } else {", "-                        if (replaceEntries.containsKey(je.getName()))", "-                        {", "-                            log(\"Updating Bean class from generic Jar \" + je.getName(),Project.MSG_VERBOSE);", "+                        if (replaceEntries.containsKey(je.getName())) {", "+                            log(\"Updating Bean class from generic Jar \" + je.getName(), Project.MSG_VERBOSE);", "-                            je = (JarEntry)replaceEntries.get(je.getName());", "+                            je = (JarEntry) replaceEntries.get(je.getName());", "-                        }", "-                        else  //use fle from original weblogic jar", "-                        {", "+                        } else {//use fle from original weblogic jar", "+", "-                        while ((bytesRead = is.read(buffer)) != -1)", "-                        {", "-                            newJarStream.write(buffer,0,bytesRead);", "+                        while ((bytesRead = is.read(buffer)) != -1) {", "+                            newJarStream.write(buffer, 0, bytesRead);", "+                } else {", "+                    log(\"Weblogic Jar rebuild needed due to changed \"", "+                         + \"interface or XML\", Project.MSG_VERBOSE);", "-                else", "-                {", "-                    log(\"Weblogic Jar rebuild needed due to changed interface or XML\",Project.MSG_VERBOSE);", "-                }", "-            }", "-            else", "-            {", "+            } else {", "-        }", "-        catch(ClassNotFoundException cnfe)", "-        {", "+        } catch (ClassNotFoundException cnfe) {", "-                + \". Details: \"", "-                + cnfe.getMessage();", "+                 + \". Details: \"", "+                 + cnfe.getMessage();", "+", "-        }", "-        catch(IOException ioe) {", "+        } catch (IOException ioe) {", "-                + \". Details: \"", "-                + ioe.getMessage();", "+                 + \". Details: \"", "+                 + ioe.getMessage();", "+", "-        }", "-        finally {", "+        } finally {", "+                } catch (IOException closeException) {", "-                catch (IOException closeException) {}", "+                } catch (IOException closeException) {", "-                catch (IOException closeException) {}", "+                } catch (IOException closeException) {", "-                catch (IOException closeException) {}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c352bed73a7e5ea10cb068dfb2d7f6ab", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/FixCRLF.java", "commitBeforeChange": "0777fa853af3a619d777adaead96e9c0d1aff291", "commitAfterChange": "5061e731c3919a7236bdcdd2ad9965d384313e26", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "       private void processFile(String file) throws BuildException", "signatureAfterChange": "      private void processFile(String file) throws BuildException", "diff": ["-", "-        File tmpFile = null;", "-        BufferedWriter outWriter;", "-        OneLiner.BufferLine line;", "-        // read the contents of the file", "-        OneLiner lines = new OneLiner(srcFile);", "+        FilterChain fc = new FilterChain();", "+        fc.add(filter);", "+        Vector fcv = new Vector(1);", "+        fcv.add(fc);", "+        File tmpFile = FILE_UTILS.createTempFile(\"fixcrlf\", \"\", null);", "+        tmpFile.deleteOnExit();", "-            // Set up the output Writer", "-            try {", "-                tmpFile = FILE_UTILS.createTempFile(\"fixcrlf\", \"\", null);", "-                tmpFile.deleteOnExit();", "-                Writer writer = (encoding == null) ? new FileWriter(tmpFile)", "-                    : new OutputStreamWriter(new FileOutputStream(tmpFile),", "-                                             encoding);", "-                outWriter = new BufferedWriter(writer);", "-            } catch (IOException e) {", "-                throw new BuildException(e);", "-            }", "-", "-            while (lines.hasMoreElements()) {", "-                // In-line states", "-                int endComment;", "-", "-                try {", "-                    line = (OneLiner.BufferLine) lines.nextElement();", "-                } catch (NoSuchElementException e) {", "-                    throw new BuildException(e);", "-                }", "-", "-                String lineString = line.getLineString();", "-                int linelen = line.length();", "-", "-                // Note - all of the following processing NOT done for", "-                // tabs ASIS", "-", "-                if (tabs == ASIS) {", "-                    // Just copy the body of the line across", "-                    try {", "-                        outWriter.write(lineString);", "-                    } catch (IOException e) {", "-                        throw new BuildException(e);", "-                    } // end of try-catch", "-", "-                } else { // (tabs != ASIS)", "-", "-                    while (line.getNext() < linelen) {", "-", "-                        switch (lines.getState()) {", "-", "-                        case NOTJAVA:", "-                            notInConstant(line, line.length(), outWriter);", "-                            break;", "-", "-                        case IN_MULTI_COMMENT:", "-                            endComment", "-                                = lineString.indexOf(\"*/\", line.getNext());", "-                            if (endComment >= 0) {", "-                                // End of multiLineComment on this line", "-                                endComment += 2;  // Include the end token", "-                                lines.setState(LOOKING);", "-                            } else {", "-                                endComment = linelen;", "-                            }", "-", "-                            notInConstant(line, endComment, outWriter);", "-                            break;", "-", "-                        case IN_SINGLE_COMMENT:", "-                            notInConstant(line, line.length(), outWriter);", "-                            lines.setState(LOOKING);", "-                            break;", "-", "-                        case IN_CHAR_CONST:", "-                        case IN_STR_CONST:", "-                            // Got here from LOOKING by finding an", "-                            // opening \"\\'\" next points to that quote", "-                            // character.", "-                            // Find the end of the constant.  Watch", "-                            // out for backslashes.  Literal tabs are", "-                            // left unchanged, and the column is", "-                            // adjusted accordingly.", "-", "-                            int begin = line.getNext();", "-                            char terminator = (lines.getState() == IN_STR_CONST", "-                                               ? '\\\"'", "-                                               : '\\'');", "-                            endOfCharConst(line, terminator);", "-                            while (line.getNext() < line.getLookahead()) {", "-                                if (line.getNextCharInc() == '\\t') {", "-                                    line.setColumn(line.getColumn()", "-                                        + tablength", "-                                        - (line.getColumn() % tablength));", "-                                } else {", "-                                    line.incColumn();", "-                                }", "-                            }", "-", "-                            // Now output the substring", "-                            try {", "-                                outWriter.write(line.substring(begin,", "-                                                               line.getNext()));", "-                            } catch (IOException e) {", "-                                throw new BuildException(e);", "-                            }", "-", "-                            lines.setState(LOOKING);", "-", "-                            break;", "-", "-", "-                        case LOOKING:", "-                            nextStateChange(line);", "-                            notInConstant(line, line.getLookahead(), outWriter);", "-                            break;", "-", "-                        } // end of switch (state)", "-", "-                    } // end of while (line.getNext() < linelen)", "-", "-                } // end of else (tabs != ASIS)", "-", "-                if (!(\"\".equals(line.getEol())) || fixlast) {", "-                    try {", "-                        outWriter.write(eolstr);", "-                    } catch (IOException e) {", "-                        throw new BuildException(e);", "-                    } // end of try-catch", "-                } //end if non-blank original eol or fixlast", "-", "-            } // end of while (lines.hasNext())", "-", "-            try {", "-                // Handle CTRLZ", "-                if (ctrlz == ASIS) {", "-                    outWriter.write(lines.getEofStr());", "-                } else if (ctrlz == ADD) {", "-                    outWriter.write(CTRLZ);", "-                }", "-            } catch (IOException e) {", "-                throw new BuildException(e);", "-            } finally {", "-                try {", "-                    outWriter.close();", "-                } catch (IOException e) {", "-                    throw new BuildException(e);", "-                }", "-            }", "-", "-", "-            try {", "-                lines.close();", "-                lines = null;", "-            } catch (IOException e) {", "-                throw new BuildException(\"Unable to close source file \"", "-                                         + srcFile);", "-            }", "+            FILE_UTILS.copyFile(srcFile, tmpFile, null, fcv, false, ", "+                                false, encoding, getProject());", "-                if (!FILE_UTILS.contentEquals(destFile, tmpFile)) {", "-                    log(destFile + \" is being written\", Project.MSG_DEBUG);", "-                } else {", "-                    log(destFile + \" is not written, as the contents \"", "-                        + \"are identical\", Project.MSG_DEBUG);", "-                    destIsWrong = false;", "-                }", "+                destIsWrong = !FILE_UTILS.contentEquals(destFile, tmpFile);", "+                log(destFile + (destIsWrong ? \" is being written\"", "+                    : \" is not written, as the contents are identical\"),", "+                    Project.MSG_DEBUG);", "-", "-", "-        } finally {", "-            try {", "-                if (lines != null) {", "-                    lines.close();", "-                }", "-            } catch (IOException io) {", "-                log(\"Error closing \" + srcFile, Project.MSG_ERR);", "-            } // end of catch", "-", "-            if (tmpFile != null) {", "-                tmpFile.delete();", "-            }", "-        } // end of finally", "+        }"]}]}
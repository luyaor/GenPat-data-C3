{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e3822240e68b700edb97748f8fbe7f2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d7c0aa726e9e7d938789f026e9ee3e3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "b2f7c19e92b3f0c308d4bc75c67ac3fc518c6cb0", "commitAfterChange": "ce53f734e02f75c0815efc60306bb262a2ce8365", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 82, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+            configure(ftp);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe0fb386e6e9994657b59527b7039d73", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/antlib/src/main/org/apache/tools/ant/SymbolTable.java", "commitBeforeChange": "6885f5ccadd471cc33c19bdcca4271aa3086d3ca", "commitAfterChange": "8dfa7abd4d64b0cbef6166a28440f39f46d6efd1", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprivate Method validAdapter(Class clz, Method mtd)", "signatureAfterChange": "     private Method validAdapter(Class clz, Method mtd)", "diff": ["+     */", "+    private Method validAdapter(Class clz, Method mtd) {", "+\tif (clz == null) return null;", "+\t", "+\tcheckClass(clz);", "+\tif (!mtd.getParameterTypes()[0].isAssignableFrom(clz)) {", "+\t    String msg = \"Adapter \" + clz.getName() + ", "+\t\t\" is incompatible with role interface \" + ", "+\t\tmtd.getDeclaringClass().getName();", "+\t    throw new BuildException(msg);", "+\t}", "+\tString msg = \"Class \" + clz.getName() + \" is not an adapter: \";", "+\tif (!RoleAdapter.class.isAssignableFrom(clz)) {", "+\t    throw new BuildException(msg + \"does not implement RoleAdapter\");", "+\t}", "+\ttry {", "+\t    Method chk = clz.getMethod(\"checkClass\", CHECK_ADAPTER_PARAMS);", "+\t    if (!Modifier.isStatic(chk.getModifiers())) {", "+\t\tthrow new BuildException(msg + \"checkClass() is not static\");", "+\t    }", "+\t    return chk;", "+\t}", "+\tcatch(NoSuchMethodException nme){", "+\t    throw new BuildException(msg + \"checkClass() not found\", nme);", "+\t}", "-\t */", "-\tprivate Method validAdapter(Class clz, Method mtd) {", "-\t    if (clz == null) return null;", "-\t    ", "-\t    if (!mtd.getParameterTypes()[0].isAssignableFrom(clz)) {", "-\t\tString msg = \"Adapter \" + clz.getName() + ", "-\t\t    \" is incompatible with role interface \" + ", "-\t\t    mtd.getDeclaringClass().getName();", "-\t\tthrow new BuildException(msg);", "-\t    }", "-\t    String msg = \"Class \" + clz.getName() + \" is not an adapter: \";", "-\t    if (!RoleAdapter.class.isAssignableFrom(clz)) {", "-\t\tthrow new BuildException(msg + \"does not implement RoleAdapter\");", "-\t    }", "-\t    try {", "-\t\tMethod chk = clz.getMethod(\"checkClass\", CHECK_ADAPTER_PARAMS);", "-\t\tif (!Modifier.isStatic(chk.getModifiers())) {", "-\t\t    throw new BuildException(msg + \"checkClass() is not static\");", "-\t\t}", "-\t\treturn chk;", "-\t    }", "-\t    catch(NoSuchMethodException nme){", "-\t\tthrow new BuildException(msg + \"checkClass() not found\", nme);", "-\t    }", "-\t}"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f52d27d8e238ce7228a907e908aa34fa", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5643697e52df5eecff5b3c3de4fa4ea9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Rmic.java", "commitBeforeChange": "739311eb354d0463260406ec3642395e5483d3da", "commitAfterChange": "68fb37b1a2632d9da411ffa8d6b942fb8536fc82", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "     private void moveGeneratedFile (File baseDir, File sourceBaseFile,                                     String classname,                                     RmicAdapter adapter)         throws BuildException", "signatureAfterChange": "     private void moveGeneratedFile (File baseDir, File sourceBaseFile,                                     String classname,                                     RmicAdapter adapter)         throws BuildException", "diff": ["-        String stubFileName = classname.replace('.', File.separatorChar)", "-            + adapter.getStubClassSuffix()+\".java\";", "-        File oldStubFile = new File(baseDir, stubFileName);", "-        File newStubFile = new File(sourceBaseFile, stubFileName);", "-        try {", "-            project.copyFile(oldStubFile, newStubFile, filtering);", "-            oldStubFile.delete();", "-        } catch (IOException ioe) {", "-            String msg = \"Failed to copy \" + oldStubFile + \" to \" +", "-                newStubFile + \" due to \" + ioe.getMessage();", "-            throw new BuildException(msg, ioe, location);", "-        }", "-        if (!\"1.2\".equals(stubVersion)) {", "-            String skelFileName = classname.replace('.', File.separatorChar)", "-                + adapter.getSkelClassSuffix()+\".java\";", "-            File oldSkelFile = new File(baseDir, skelFileName);", "-            File newSkelFile = new File(sourceBaseFile, skelFileName);", "+", "+        String classFileName = ", "+            classname.replace('.', File.separatorChar) + \".class\";", "+        String[] generatedFiles = ", "+            adapter.getMapper().mapFileName(classFileName);", "+", "+        for (int i=0; i<generatedFiles.length; i++) {", "+            String sourceFileName = ", "+                classFileName.substring(0, classFileName.length()-6) + \".java\";", "+            File oldFile = new File(baseDir, sourceFileName);", "+            File newFile = new File(sourceBaseFile, sourceFileName);", "-                project.copyFile(oldSkelFile, newSkelFile, filtering);", "-                oldSkelFile.delete();", "+                project.copyFile(oldFile, newFile, filtering);", "+                oldFile.delete();", "-                String msg = \"Failed to copy \" + oldSkelFile + \" to \" +", "-                    newSkelFile + \" due to \" + ioe.getMessage();", "+                String msg = \"Failed to copy \" + oldFile + \" to \" +", "+                    newFile + \" due to \" + ioe.getMessage();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87ca82d4b820304a44ba4d2849248fa5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/PlainJUnitResultFormatter.java", "commitBeforeChange": "c098b9c80d5ef451dfd683510c9f6c28489a8685", "commitAfterChange": "313479bb3569061c2598d90274930c4957d36364", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void endTestSuite(JUnitTest suite) throws BuildException", "signatureAfterChange": "     public void endTestSuite(JUnitTest suite) throws BuildException", "diff": ["+        try {", "+            write(sb.toString());", "-        // append the err and output streams to the log", "+        // write the err and output streams to the log", "-            sb.append(\"------------- Standard Output ---------------\")", "-                .append(StringUtils.LINE_SEP)", "-                .append(systemOutput)", "-                .append(\"------------- ---------------- ---------------\")", "-                .append(StringUtils.LINE_SEP);", "+                write(\"------------- Standard Output ---------------\");", "+                write(StringUtils.LINE_SEP);", "+                write(systemOutput);", "+                write(\"------------- ---------------- ---------------\");", "+                write(StringUtils.LINE_SEP);", "-            sb.append(\"------------- Standard Error -----------------\")", "-                .append(StringUtils.LINE_SEP)", "-                .append(systemError)", "-                .append(\"------------- ---------------- ---------------\")", "-                .append(StringUtils.LINE_SEP);", "+                write(\"------------- Standard Error -----------------\");", "+                write(StringUtils.LINE_SEP);", "+                write(systemError);", "+                write(\"------------- ---------------- ---------------\");", "+                write(StringUtils.LINE_SEP);", "-        sb.append(StringUtils.LINE_SEP);", "-", "+            write(StringUtils.LINE_SEP);", "+            if (out != null) {", "+                try {", "+                    wri.flush();", "+                    write(inner.toString());", "+                } catch (IOException ioex) {", "+                    throw new BuildException(\"Unable to write output\", ioex);", "+                }", "+            }", "+        } finally {", "-                out.write(sb.toString().getBytes());", "-                out.write(inner.toString().getBytes());", "-                out.flush();", "-                throw new BuildException(\"Unable to write output\", ioex);", "+                    throw new BuildException(\"Unable to flush output\", ioex);", "+                    wri = null;", "+                    out = null;", "+        }"]}]}
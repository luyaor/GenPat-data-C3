{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9a4f99e596da9378adb9bdec0b6a6826", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0697b0fa686407c2c2feb40bfb367103", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "2b925503d71972d8b782eedd6cdf75711377d7b0", "commitAfterChange": "2c4faa154f069f3f69d6c3c95629409a7b8b0cc4", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 40, "signatureBeforeChange": "     protected boolean couldHoldIncluded(String name)", "signatureAfterChange": "     protected boolean couldHoldIncluded(String name)", "diff": ["-        final TokenizedPath tokenizedName = new TokenizedPath(name);", "+        return couldHoldIncluded(new TokenizedPath(name));", "+    }", "-            TokenizedPattern tokenizedInclude =", "-                new TokenizedPattern(includes[i]);", "-                && isMorePowerfulThanExcludes(name, includes[i])"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "302bf660cf255f79ebc1969f6ee3364b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java", "commitBeforeChange": "3c5d592a3520905cf9b1ae78efa6a447dc361fec", "commitAfterChange": "4850b4c7451c52657f030d7ae18b94fdf00f5590", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     protected void addExtdirs( Path path )         throws TaskException", "signatureAfterChange": "     protected void addExtdirs( Path path )         throws TaskException", "diff": ["-        final String[] dirs = m_extdirs.list();", "-        for( int i = 0; i < dirs.length; i++ )", "-        {", "-            final File dir = new File( dirs[ i ] );", "-            if( dir.exists() && dir.isDirectory() )", "-            {", "-                final FileSet fileSet = new FileSet();", "-                fileSet.setDir( dir );", "-                fileSet.setIncludes( \"*\" );", "-                path.addFileset( fileSet );", "-            }", "-        }", "+        PathUtil.addExtdirs( path, m_extdirs );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "358d1331f66856f5405676ef46ac7108", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java", "commitBeforeChange": "3c5d592a3520905cf9b1ae78efa6a447dc361fec", "commitAfterChange": "4850b4c7451c52657f030d7ae18b94fdf00f5590", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     protected void addExtdirs( Path path )         throws TaskException", "signatureAfterChange": "     protected void addExtdirs( Path path )         throws TaskException", "diff": ["-        final String[] dirs = m_extdirs.list();", "-        for( int i = 0; i < dirs.length; i++ )", "-        {", "-            final File dir = new File( dirs[ i ] );", "-            if( dir.exists() && dir.isDirectory() )", "-            {", "-                final FileSet fileSet = new FileSet();", "-                fileSet.setDir( dir );", "-                fileSet.setIncludes( \"*\" );", "-                path.addFileset( fileSet );", "-            }", "-        }", "+        PathUtil.addExtdirs( path, m_extdirs );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50732d8712b4379cb9a3d214ad6d83bb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/selectors/SelectorUtils.java", "commitBeforeChange": "3def9c5ed8dd13b7caf924d25dcd230391b17da6", "commitAfterChange": "2b925503d71972d8b782eedd6cdf75711377d7b0", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     public static String rtrimWildcardTokens(String input)", "signatureAfterChange": "     public static String rtrimWildcardTokens(String input)", "diff": ["-        String[] tokens = tokenizePathAsArray(input);", "-        StringBuffer sb = new StringBuffer();", "-        for (int i = 0; i < tokens.length; i++) {", "-            if (hasWildcards(tokens[i])) {", "-                break;", "-            }", "-            if (i > 0 && sb.charAt(sb.length() - 1) != File.separatorChar) {", "-                sb.append(File.separator);", "-            }", "-            sb.append(tokens[i]);", "-        }", "-        return sb.toString();", "+        return new TokenizedPattern(input).rtrimWildcardTokens().toString();"]}]}
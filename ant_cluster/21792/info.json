{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "52e48bae1f41b68416b29ceca41476c4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49206fa004a4459ecb859ef06f2b6e31", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/workspace/DefaultTaskContext.java", "commitBeforeChange": "e2ec6a3988643fe6f3c8fabd5b8656e4209eaa1d", "commitAfterChange": "42c6021a9e42f49f50a3f4a170590d15a9b8c3db", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     public TaskContext createSubContext( final String name )         throws TaskException", "signatureAfterChange": "     public TaskContext createSubContext( final String name )         throws TaskException", "diff": ["-        final DefaultTaskContext context =", "-            new DefaultTaskContext( this, m_serviceManager, m_logger );", "-", "-        context.setProperty( TaskContext.NAME, getName() + \".\" + name );", "-        context.setProperty( TaskContext.BASE_DIRECTORY, getBaseDirectory() );", "-", "-        return context;", "-    }", "+            final PropertyStore store = m_store.createChildStore( name );", "+            final DefaultServiceManager serviceManager =", "+                new DefaultServiceManager( m_serviceManager );", "+            final Logger logger = m_logger.getChildLogger( name );", "+            return new DefaultTaskContext( serviceManager, logger, store );", "+        catch( final Exception e )", "+            throw new TaskException( e.getMessage(), e );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "721cb47223800ada2ff086adcc75431e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Jar.java", "commitBeforeChange": "fffe72edb5a6a6deb6222d79841a42c1663ccd36", "commitAfterChange": "b74b9067510ce1fd1ce68b465f74c38c81fb7d01", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 8, "signatureBeforeChange": "      protected void zipFile(File file, ZipOutputStream zOut, String vPath)         throws IOException", "signatureAfterChange": "          protected void zipFile(File file, ZipOutputStream zOut, String vPath)         throws IOException", "diff": ["+    ", "-        // If the file being added is META-INF/MANIFEST.MF, we warn if it's not the", "-        // one specified in the \"manifest\" attribute - or if it's being added twice, ", "-        // meaning the same file is specified by the \"manifeset\" attribute and in", "-        // a <fileset> element.", "+        // If the file being added is META-INF/MANIFEST.MF, we merge it with the", "+        // current manifest ", "-            if (manifest == null || !manifest.equals(file) || manifestAdded) {", "-                log(\"Warning: selected \"+archiveType+\" files include a META-INF/MANIFEST.MF which will be ignored \" +", "-                    \"(please use manifest attribute to \"+archiveType+\" task)\", Project.MSG_WARN);", "-            } else {", "-                super.zipFile(file, zOut, vPath);", "-                manifestAdded = true;", "+            InputStream is = null;", "+            try {", "+                is = new FileInputStream(file);", "+                zipManifestEntry(is);", "+            }", "+            catch (IOException e) {", "+                throw new BuildException(\"Unable to read manifest file: \" + file, e);", "+            }", "+            finally {", "+                if (is != null) {", "+                    try {", "+                        is.close();", "+                    }", "+                    catch (IOException e) {", "+                        // do nothing", "+                    }", "+                }", "+        }", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c354db5d79197125a30ca05df0f4b37c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40d4332fc3f1da3e63be48471ec3f99d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/launch/Launcher.java", "commitBeforeChange": "1ca4fd877177c9619e7c8d9c6e5bb3c606ac4546", "commitAfterChange": "24a5f03a90e6931dd280031f226b76bfe971193e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private void run(String[] args) throws MalformedURLException", "signatureAfterChange": "     private void run(String[] args) throws MalformedURLException", "diff": ["+        String libPath = \"\";", "+        String[] newargs = null;", "+        int argcount = -1;", "+        for (argcount = 0; argcount < args.length -1; argcount++) {", "+            if (args[argcount].equals(\"-lib\")) {", "+                libPath = args[argcount + 1];", "+                break;", "+            }", "+        }", "+        if (libPath.equals(\"\")) {", "+           newargs = new String[args.length];", "+           System.arraycopy(args, 0, newargs, 0, args.length);", "+        } else {", "+            newargs = new String[args.length - 2];", "+            // copy the beginning of the args array", "+            if (argcount > 0 ) {", "+                System.arraycopy(args, 0, newargs, 0 ,argcount);", "+            }", "+            // copy the end of the args array", "+            if ((argcount + 2 < args.length) && argcount > 0) {", "+                System.arraycopy(args, argcount + 2, newargs, argcount, args.length - (argcount + 2));", "+            }", "+        }", "+        StringTokenizer myTokenizer = new StringTokenizer(libPath, System.getProperty(\"path.separator\"));", "+        URL[] classPathJars = new URL[myTokenizer.countTokens()];", "+        int classPathJarCount = 0;", "+        while (myTokenizer.hasMoreElements()) {", "+            String token = myTokenizer.nextToken();", "+            classPathJars[classPathJarCount++] = new File(token).toURL();", "+        }", "-        int numJars = userJars.length + systemJars.length;", "+        int numJars = classPathJars.length + userJars.length + systemJars.length;", "-        System.arraycopy(userJars, 0, jars, 0, userJars.length);", "-        System.arraycopy(systemJars, 0, jars, userJars.length,", "+        System.arraycopy(classPathJars, 0, jars, 0, classPathJars.length);", "+        System.arraycopy(userJars, 0, jars, classPathJars.length, userJars.length);", "+        System.arraycopy(systemJars, 0, jars, userJars.length + classPathJars.length,", "-            main.startAnt(args, null, null);", "+            main.startAnt(newargs, null, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69a6995c7bfea8641695800fc6051d62", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/launch/Launcher.java", "commitBeforeChange": "3fe578a16dfaae9a9bb1f24561e3bba6b9c88830", "commitAfterChange": "a8b485c525cebdfc2338660fb321ff3a833d93af", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private int run(String[] args)             throws LaunchException, MalformedURLException", "signatureAfterChange": "     private int run(String[] args)             throws LaunchException, MalformedURLException", "diff": ["-        List libPathURLs = new ArrayList();", "+        URL[] libURLs    = getLibPathURLs(", "+            noClassPath ? null : cpString, libPaths);", "+        URL[] systemURLs = getSystemURLs(jarDir);", "+        URL[] userURLs   = noUserLib ? new URL[0] : getUserURLs();", "-        if (cpString != null && !noClassPath) {", "-            addPath(cpString, false, libPathURLs);", "-        }", "-", "-        for (Iterator i = libPaths.iterator(); i.hasNext();) {", "-            String libPath = (String) i.next();", "-            addPath(libPath, true, libPathURLs);", "-        }", "-", "-        URL[] libJars = (URL[]) libPathURLs.toArray(new URL[libPathURLs.size()]);", "-", "-        // Now try and find JAVA_HOME", "-        File toolsJar = Locator.getToolsJar();", "-", "-        // determine ant library directory for system jars: use property", "-        // or default using location of ant-launcher.jar", "-        File antLibDir = null;", "-        String antLibDirProperty = System.getProperty(ANTLIBDIR_PROPERTY);", "-        if (antLibDirProperty != null) {", "-            antLibDir = new File(antLibDirProperty);", "-        }", "-        if ((antLibDir == null) || !antLibDir.exists()) {", "-            antLibDir = jarDir;", "-            System.setProperty(ANTLIBDIR_PROPERTY, antLibDir.getAbsolutePath());", "-        }", "-        URL[] systemJars = Locator.getLocationURLs(antLibDir);", "-", "-        File userLibDir", "-            = new File(System.getProperty(USER_HOMEDIR), USER_LIBDIR);", "-", "-        URL[] userJars = noUserLib ? new URL[0] : Locator.getLocationURLs(userLibDir);", "-", "-        int numJars = libJars.length + userJars.length + systemJars.length;", "-        if (toolsJar != null) {", "-            numJars++;", "-        }", "-        URL[] jars = new URL[numJars];", "-        System.arraycopy(libJars, 0, jars, 0, libJars.length);", "-        System.arraycopy(userJars, 0, jars, libJars.length, userJars.length);", "-        System.arraycopy(systemJars, 0, jars, userJars.length + libJars.length,", "-            systemJars.length);", "-", "-        if (toolsJar != null) {", "-            jars[jars.length - 1] = Locator.fileToURL(toolsJar);", "-        }", "-", "+        URL[] jars = getJarArray(", "+            libURLs, userURLs, systemURLs, Locator.getToolsJar());"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b37539819af5d5543fa2a306c6ee404a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4c7fc161faffeb7be06bcc5e44b6d8e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/selectors/ModifiedSelectorTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 27, "signatureBeforeChange": "     protected void doTest(Algorithm algo)", "signatureAfterChange": "     protected void doTest(Algorithm algo)", "diff": ["-        assertTrue(\"Algorithm not proper configured.\", algo.isValid());", "-        try {", "-            makeBed();", "+         assertTrue(\"Algorithm not proper configured.\", algo.isValid());", "+         for (int i=0; i<selectorRule.getFiles().length; i++) {", "+            File file = selectorRule.getFiles()[i];  // must not be a directory", "+            if (file.isFile()) {", "+                // get the Hashvalues", "+                String hash1 = algo.getValue(file);", "+                String hash2 = algo.getValue(file);", "+                String hash3 = algo.getValue(file);", "+                String hash4 = algo.getValue(file);", "+                String hash5 = algo.getValue(new File(file.getAbsolutePath()));", "-            for (int i=0; i<files.length; i++) {", "-                File file = files[i];  // must not be a directory", "-                if (file.isFile()) {", "-                    // get the Hashvalues", "-                    String hash1 = algo.getValue(file);", "-                    String hash2 = algo.getValue(file);", "-                    String hash3 = algo.getValue(file);", "-                    String hash4 = algo.getValue(file);", "-                    String hash5 = algo.getValue(new File(file.getAbsolutePath()));", "+                // Assert !=null and equality", "+                assertNotNull(\"Hashvalue was null for \"+file.getAbsolutePath(), hash1);", "+                assertNotNull(\"Hashvalue was null for \"+file.getAbsolutePath(), hash2);", "+                assertNotNull(\"Hashvalue was null for \"+file.getAbsolutePath(), hash3);", "+                assertNotNull(\"Hashvalue was null for \"+file.getAbsolutePath(), hash4);", "+                assertNotNull(\"Hashvalue was null for \"+file.getAbsolutePath(), hash5);", "+                assertEquals(\"getHashvalue() returned different value for \"+file.getAbsolutePath(), hash1, hash2);", "+                assertEquals(\"getHashvalue() returned different value for \"+file.getAbsolutePath(), hash1, hash3);", "+                assertEquals(\"getHashvalue() returned different value for \"+file.getAbsolutePath(), hash1, hash4);", "+                assertEquals(\"getHashvalue() returned different value for \"+file.getAbsolutePath(), hash1, hash5);", "+            }//if-isFile", "+        }//for", "-                    // Assert !=null and equality", "-                    assertNotNull(\"Hashvalue was null for \"+file.getAbsolutePath(), hash1);", "-                    assertNotNull(\"Hashvalue was null for \"+file.getAbsolutePath(), hash2);", "-                    assertNotNull(\"Hashvalue was null for \"+file.getAbsolutePath(), hash3);", "-                    assertNotNull(\"Hashvalue was null for \"+file.getAbsolutePath(), hash4);", "-                    assertNotNull(\"Hashvalue was null for \"+file.getAbsolutePath(), hash5);", "-                    assertEquals(\"getHashvalue() returned different value for \"+file.getAbsolutePath(), hash1, hash2);", "-                    assertEquals(\"getHashvalue() returned different value for \"+file.getAbsolutePath(), hash1, hash3);", "-                    assertEquals(\"getHashvalue() returned different value for \"+file.getAbsolutePath(), hash1, hash4);", "-                    assertEquals(\"getHashvalue() returned different value for \"+file.getAbsolutePath(), hash1, hash5);", "-                }//if-isFile", "-            }//for", "-        } finally {", "-            cleanupBed();", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da53b6f4838cf7762bff4f69353dd556", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/FailTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void testIfAndUnless2()", "signatureAfterChange": "     @Test     public void testIfAndUnless2()", "diff": ["+    @Test", "-        project.setProperty(\"unless\", \"\");", "-        try {", "-            executeTarget(\"testIfAndUnless\");", "-        } catch (BuildException be) {", "-            fail(\"defined(if) && !defined(unless); testIfAndUnless must not fail\");", "-        }", "+        buildRule.getProject().setProperty(\"unless\", \"\");", "+        buildRule.executeTarget(\"testIfAndUnless\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f99796b6deef3590828fb5e82db20ee5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/util/FileUtilsTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void testSetLastModified() throws IOException", "signatureAfterChange": "     @Test     public void testSetLastModified() throws IOException", "diff": ["+    @Test", "+        assumeTrue(\"Could not change file modified time\", removeThis.setLastModified(removeThis.lastModified() - 2000));", "-        /*", "-         * Sleep for some time to make sure a touched file would get a", "-         * more recent timestamp according to the file system's", "-         * granularity (should be > 2s to account for Windows FAT).", "-         */", "-        try {", "-            Thread.sleep(5000);", "-        } catch (InterruptedException ie) {", "-            fail(ie.getMessage());", "-        }"]}]}
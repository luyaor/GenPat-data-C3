{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "98a82655696dd3aea9e6b69cd1916dbe", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f17f8260d301d73abb8cda5b2eb14fd0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/compilers/Javac12.java", "commitBeforeChange": "d91fdceaa60b70502667049c3156197ab14908f0", "commitAfterChange": "d95bfb6e605b1eefc16889b9dfdf081072c82e51", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public boolean execute() throws BuildException", "signatureAfterChange": "      public boolean execute() throws BuildException", "diff": ["-            Constructor cons = c.getConstructor(new Class[] { OutputStream.class, String.class });", "-            Object compiler = cons.newInstance(new Object[] { logstr, \"javac\" });", "+            Constructor cons = ", "+                c.getConstructor(new Class[] { OutputStream.class, ", "+                                               String.class });", "+            Object compiler = cons.newInstance(new Object[] { logstr, ", "+                                                              \"javac\" });", "-            Method compile = c.getMethod(\"compile\", new Class [] { String[].class });", "-            Boolean ok = (Boolean)compile.invoke(compiler, new Object[] {cmd.getArguments()});", "+            Method compile = c.getMethod(\"compile\", ", "+                                         new Class [] { String[].class });", "+            Boolean ok = ", "+                (Boolean)compile.invoke(compiler, ", "+                                        new Object[] {cmd.getArguments()});", "-            throw new BuildException(\"Cannot use classic compiler, as it is not available\"+", "-                                                         \" A common solution is to set the environment variable\"+", "-                                     \" JAVA_HOME to your jdk directory.\", location);", "+            throw new BuildException(\"Cannot use classic compiler, as it is \"", "+                                     + \"not available.  A common solution is \"", "+                                     + \"to set the environment variable\"", "+                                     + \" JAVA_HOME to your jdk directory.\", ", "+                                     location);", "-                throw new BuildException(\"Error starting classic compiler: \", ex, location);", "+                throw new BuildException(\"Error starting classic compiler: \", ", "+                                         ex, location);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6440f238cad4ef01e4cfcb5a7be6189", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "4783bc46159826bc33858cfc9145c4be93dfe755", "commitAfterChange": "2a291dca9249d6a4958d9898282fa67343bf59b7", "methodNumberBeforeChange": 120, "methodNumberAfterChange": 120, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-                            throw new BuildException(\"The package list \"", "-                                                     + \" location for link \" + la.getHref()", "-                                                     + \" must be provided because the link is \"", "+                            throw new BuildException(\"The package list\"", "+                                                     + \" location for link \" ", "+                                                     + la.getHref()", "+                                                     + \" must be provided \"", "+                                                     + \"because the link is \"", "-                            toExecute.createArgument().setValue (ta.getParameter());", "+                            toExecute.createArgument()", "+                                .setValue (ta.getParameter());", "-                            // The tag element is used as a fileset. Parse all the files and", "-                            // create -tag arguments.", "-                            DirectoryScanner tagDefScanner = ta.getDirectoryScanner(getProject());", "+                            // The tag element is used as a", "+                            // fileset. Parse all the files and create", "+                            // -tag arguments.", "+                            DirectoryScanner tagDefScanner = ", "+                                ta.getDirectoryScanner(getProject());", "-                                        = new BufferedReader(new FileReader(tagDefFile));", "+                                        = new BufferedReader(", "+                                              new FileReader(tagDefFile)", "+                                              );", "-                                        toExecute.createArgument().setValue (\"-tag\");", "-                                        toExecute.createArgument().setValue (line);", "+                                        toExecute.createArgument()", "+                                            .setValue(\"-tag\");", "+                                        toExecute.createArgument()", "+                                            .setValue(line);", "-                                                new FileWriter(tmpList.getAbsolutePath(),", "-                                                               true));", "+                                    new FileWriter(tmpList.getAbsolutePath(),", "+                                                   true));", "-                throw new BuildException(\"Javadoc returned \" + ret, getLocation());", "+                throw new BuildException(\"Javadoc returned \" + ret,", "+                                         getLocation());"]}]}
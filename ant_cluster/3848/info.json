{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6f6ca478641af4585edc8614c4ed3538", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f0e7f717e4512490b998c6151757cb2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ResourceUtils.java", "commitBeforeChange": "33e3b2533d5782e539cba766f178da3ce2c27d24", "commitAfterChange": "a10f2fd77780d96b37b5eb667c9ec6eab7d332aa", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public static Resource[] selectOutOfDateSources(ProjectComponent logTo,                                                     Resource[] source,                                                     FileNameMapper mapper,                                                     ResourceFactory targets,                                                     long granularity)", "signatureAfterChange": "     public static ResourceCollection selectOutOfDateSources(ProjectComponent logTo,                                                             ResourceCollection source,                                                             FileNameMapper mapper,                                                             ResourceFactory targets,                                                             long granularity)", "diff": ["-        long now = System.currentTimeMillis() + granularity;", "-        Vector vresult = new Vector();", "-        for (int counter = 0; counter < source.length; counter++) {", "-            if (source[counter].getLastModified() > now) {", "-                logTo.log(\"Warning: \" + source[counter].getName()", "-                         + \" modified in the future.\", Project.MSG_WARN);", "-            }", "-            String[] targetnames =", "-                mapper.mapFileName(source[counter].getName()", "-                                   .replace('/', File.separatorChar));", "-            if (targetnames != null) {", "-                boolean added = false;", "-                StringBuffer targetList = new StringBuffer();", "-                for (int ctarget = 0; !added && ctarget < targetnames.length;", "-                     ctarget++) {", "-                    Resource atarget =", "-                        targets.getResource(targetnames[ctarget]", "-                                            .replace(File.separatorChar, '/'));", "-                    // if the target does not exist, or exists and", "-                    // is older than the source, then we want to", "-                    // add the resource to what needs to be copied", "-                    if (!atarget.isExists()) {", "-                        logTo.log(source[counter].getName() + \" added as \"", "-                                  + atarget.getName()", "-                                  + \" doesn\\'t exist.\", Project.MSG_VERBOSE);", "-                        vresult.addElement(source[counter]);", "-                        added = true;", "-                    } else if (!atarget.isDirectory()", "-                               && SelectorUtils.isOutOfDate(source[counter],", "-                                                         atarget,", "-                                                         (int) granularity)) {", "-                        logTo.log(source[counter].getName() + \" added as \"", "-                                  + atarget.getName()", "-                                  + \" is outdated.\", Project.MSG_VERBOSE);", "-                        vresult.addElement(source[counter]);", "-                        added = true;", "-                    } else {", "-                        if (targetList.length() > 0) {", "-                            targetList.append(\", \");", "-                        }", "-                        targetList.append(atarget.getName());", "-                    }", "-                }", "-                if (!added) {", "-                    logTo.log(source[counter].getName()", "-                              + \" omitted as \" + targetList.toString()", "-                              + (targetnames.length == 1 ? \" is\" : \" are \")", "-                              + \" up to date.\", Project.MSG_VERBOSE);", "-                }", "-            } else {", "-                logTo.log(source[counter].getName()", "-                          + \" skipped - don\\'t know how to handle it\",", "-                          Project.MSG_VERBOSE);", "-            }", "+     */", "+    public static ResourceCollection selectOutOfDateSources(ProjectComponent logTo,", "+                                                            ResourceCollection source,", "+                                                            FileNameMapper mapper,", "+                                                            ResourceFactory targets,", "+                                                            long granularity) {", "+        if (source.size() == 0) {", "+            logTo.log(\"No sources found.\", Project.MSG_VERBOSE);", "+            return Resources.NONE;", "-        Resource[] result = new Resource[vresult.size()];", "-        vresult.copyInto(result);", "+        source = Union.getInstance(source);", "+        logFuture(logTo, source, granularity);", "+", "+        Union result = new Union();", "+        for (Iterator iter = source.iterator(); iter.hasNext();) {", "+            Resource sr = (Resource) iter.next();", "+            String[] targetnames = mapper.mapFileName(", "+                sr.getName().replace('/', File.separatorChar));", "+", "+            if (targetnames == null || targetnames.length == 0) {", "+                logTo.log(sr.getName()", "+                      + \" skipped - don\\'t know how to handle it\",", "+                      Project.MSG_VERBOSE);", "+                continue;", "+            }", "+            Union targetColl = new Union();", "+            for (int i = 0; i < targetnames.length; i++) {", "+                targetColl.add(targets.getResource(", "+                    targetnames[i].replace(File.separatorChar, '/')));", "+            }", "+            //find the out-of-date targets:", "+            Restrict r = new Restrict();", "+            r.add(new And(new ResourceSelector[] {Type.FILE, new Or(", "+                new ResourceSelector[] {NOT_EXISTS, new Outdated(sr, granularity)})}));", "+            r.add(targetColl);", "+            if (r.size() > 0) {", "+                result.add(sr);", "+                Resource t = (Resource) (r.iterator().next());", "+                logTo.log(sr.getName() + \" added as \" + t.getName()", "+                    + (t.isExists() ? \" is outdated.\" : \" doesn\\'t exist.\"),", "+                    Project.MSG_VERBOSE);", "+                continue;", "+            }", "+            //log uptodateness of all targets:", "+            logTo.log(sr.getName()", "+                  + \" omitted as \" + targetColl.toString()", "+                  + (targetColl.size() == 1 ? \" is\" : \" are \")", "+                  + \" up to date.\", Project.MSG_VERBOSE);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48331983ada5e7f6e9c161c2c5ae84ef", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/unix/Symlink.java", "commitBeforeChange": "1225a5a849faa66e73a1262180dd002332b162b0", "commitAfterChange": "90a6d8155086ee0d0a1911584a56eb7b33fb3d0f", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 19, "signatureBeforeChange": "      private Vector findLinks(Vector fileSets)", "signatureAfterChange": "     private HashSet findLinks(Vector v)", "diff": ["-", "-    private Vector findLinks(Vector fileSets) {", "-        Vector result = new Vector();", "-", "-        // loop through the supplied file sets:", "-        FSLoop: for (int i = 0; i < fileSets.size(); i++) {", "-            FileSet fsTemp = (FileSet) fileSets.elementAt(i);", "-            String workingDir = null;", "-            Vector links = new Vector();", "-            Vector linksFiles = new Vector();", "-            Enumeration enumLinks;", "-", "-            DirectoryScanner ds;", "-", "-            File tmpfil = null;", "-            try {", "-                tmpfil = fsTemp.getDir(this.getProject());", "-                workingDir = tmpfil.getCanonicalPath();", "-            } catch (IOException ioe) {", "-                handleError(\"Exception caught getting \"", "-                            + \"canonical path of working dir \" + tmpfil", "-                            + \" in a FileSet passed to the symlink \"", "-                            + \"task. Further processing of this \"", "-                            + \"fileset skipped\");", "-                continue FSLoop;", "-            }", "-            // Get a vector of String with file names that match the pattern:", "-            ds = fsTemp.getDirectoryScanner(this.getProject());", "-            links = scanDirsAndFiles(ds);", "-", "-            // Now convert the strings to File Objects", "-            // using the canonical version of the working dir:", "-            enumLinks = links.elements();", "-", "-            while (enumLinks.hasMoreElements()) {", "-                linksFiles.addElement(new File(workingDir", "-                                               + File.separator", "-                                               + (String) enumLinks", "-                                               .nextElement()));", "-            }", "-            // Now loop through and remove the non-links:", "-", "-            enumLinks = linksFiles.elements();", "-", "-            File parentNext, next;", "-            String nameParentNext;", "-            Vector removals = new Vector();", "-            while (enumLinks.hasMoreElements()) {", "-                next = (File) enumLinks.nextElement();", "-                nameParentNext = next.getParent();", "-", "-                parentNext = new File(nameParentNext);", "-                try {", "-                    if (!FILE_UTILS.isSymbolicLink(parentNext, next.getName())) {", "-                        removals.addElement(next);", "+    private HashSet findLinks(Vector v) {", "+        HashSet result = new HashSet();", "+        for (int i = 0; i < v.size(); i++) {", "+            FileSet fs = (FileSet) v.get(i);", "+            DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "+            String[][] fnd = new String[][]", "+                {ds.getIncludedFiles(), ds.getIncludedDirectories()};", "+            File dir = fs.getDir(getProject());", "+            for (int j = 0; j < fnd.length; j++) {", "+                for (int k = 0; k < fnd[j].length; k++) {", "+                    try {", "+                        File f = new File(dir, fnd[j][k]);", "+                        File pf = f.getParentFile();", "+                        String name = f.getName();", "+                        if (FILE_UTILS.isSymbolicLink(pf, name)) {", "+                            result.add(new File(pf.getCanonicalFile(), name));", "+                        }", "+                    } catch (IOException e) {", "+                        handleError(\"IOException: \" + fnd[j][k] + \" omitted\");", "-                } catch (IOException ioe) {", "-                    handleError(\"Failed checking \" + next", "-                                + \" for symbolic link. FileSet skipped.\");", "-                    continue FSLoop;", "-                    // Otherwise this file will be falsely recorded as a link,", "-                    // if failonerror = false, hence the warn and skip.", "-            enumLinks = removals.elements();", "-", "-            while (enumLinks.hasMoreElements()) {", "-                linksFiles.removeElement(enumLinks.nextElement());", "-            }", "-            // Now we have what we want so add it to results, ensuring that", "-            // no link is returned twice and we have a canonical reference", "-            // to the link. (no symlinks in the parent dir)", "-", "-            enumLinks = linksFiles.elements();", "-            while (enumLinks.hasMoreElements()) {", "-                File temp, parent;", "-                next = (File) enumLinks.nextElement();", "-                try {", "-                    parent = new File(next.getParent());", "-                    parent = new File(parent.getCanonicalPath());", "-                    temp = new File(parent, next.getName());", "-                    if (!result.contains(temp)) {", "-                        result.addElement(temp);", "-                    }", "-                } catch (IOException ioe) {", "-                    handleError(\"IOException: \" + next + \" omitted\");", "-                }", "-            }", "-            // Note that these links are now specified with a full", "-            // canonical path irrespective of the working dir of the", "-            // file set so it is ok to mix them in the same vector."]}]}
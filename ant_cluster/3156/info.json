{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "be202a1713578f8f464cbcf7880e41d0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17cbfa0f7ad1f79d16fdf8f7ac8eb6fe", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultObjectConfigurer.java", "commitBeforeChange": "ba1f6f147af327833c018a27a46347cbd46625f3", "commitAfterChange": "a989b254f04d33e5bc2370b62121bd56830ac2f1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void enableContent()         throws ConfigurationException", "signatureAfterChange": "     private void enableContent()         throws ConfigurationException", "diff": ["+     */", "+    private void enableContent()", "+        throws ConfigurationException", "+    {", "+        // Locate the 'addContent' methods, which return void, and take", "+        // a single parameter.", "+        final Collection methods = findMethods( \"addContent\", true );", "+        if( methods.size() == 0 )", "+        {", "+            return;", "+        }", "+", "+        final Method method = (Method)methods.iterator().next();", "+        final Class type = method.getParameterTypes()[ 0 ];", "+        m_contentConfigurer = new DefaultPropertyConfigurer( getPropertyCount(),", "+                                                             type,", "+                                                             method,", "+                                                             1 );", "+    }", "-     */", "-    private void enableContent()", "-        throws ConfigurationException", "-    {", "-        // TODO - should be using 'setContent', rather than 'addContent',", "-        // to better match the call-at-most-once semantics of the other", "-        // setter methods", "-", "-        // Locate any 'addContent' methods, which return void, and take", "-        // a single parameter.", "-        final Method[] methods = m_class.getMethods();", "-        for( int i = 0; i < methods.length; i++ )", "-        {", "-            final Method method = methods[ i ];", "-            final String methodName = method.getName();", "-            if( Modifier.isStatic( method.getModifiers() ) ||", "-                !methodName.equals( \"addContent\" ) ||", "-                method.getReturnType() != Void.TYPE ||", "-                method.getParameterTypes().length != 1 )", "-            {", "-                continue;", "-            }", "-", "-            // Check for multiple content setters", "-            if( null != m_contentConfigurer )", "-            {", "-                final String message =", "-                    REZ.getString( \"multiple-content-setter-methods.error\", m_class.getName() );", "-                throw new ConfigurationException( message );", "-            }", "-", "-            final Class type = method.getParameterTypes()[ 0 ];", "-            m_contentConfigurer =", "-                new DefaultPropertyConfigurer( getPropertyCount(),", "-                                               type,", "-                                               method,", "-                                               1 );", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e43d5cc84f864b0978256b5ff17a432", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "6b3d8a02956aad55938df6c7a1b2994a4acc5f6a", "commitAfterChange": "fe4a5cb02940376fddc661302141394be20d1f02", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 25, "signatureBeforeChange": "      private static void configure(Project project,                                   Object target,                                   Element element)         throws BuildException", "signatureAfterChange": "      private void configure(Object target, AttributeList attrs) throws BuildException", "diff": ["-    private static void configure(Project project,", "-                                  Object target,", "-                                  Element element)", "-        throws BuildException", "-    {", "-        NamedNodeMap nodeMap = element.getAttributes();", "-", "+    private void configure(Object target, AttributeList attrs) throws BuildException {", "-        for (int i = 0; i < nodeMap.getLength(); i++) {", "-            Node node = nodeMap.item(i);", "+        for (int i = 0; i < attrs.getLength(); i++) {", "+            // reflect these into the target", "-            // these should only be attribs, we won't see anything", "-            // else here.", "-", "-            if (node.getNodeType() == Node.ATTRIBUTE_NODE) {", "-                Attr attr = (Attr)node;", "-", "-                // reflect these into the target", "-", "-                Method setMethod = (Method)propertySetters.get(attr.getName());", "-                if (setMethod == null) {", "-                    if (attr.getName().equals(\"id\")) {", "-                        project.addReference(attr.getValue(), target);", "-                        continue;", "-                    }", "-", "-                    String msg = \"Configuration property \\\"\" + attr.getName() +", "-                        \"\\\" does not have a setMethod in \" + target.getClass();", "-                    throw new BuildException(msg);", "+            Method setMethod = (Method)propertySetters.get(attrs.getName(i));", "+            if (setMethod == null) {", "+                if (attrs.getName(i).equals(\"id\")) {", "+                    project.addReference(attrs.getValue(i), target);", "+                    continue;", "-                String value=replaceProperties(  attr.getValue(), project.getProperties() );", "-                try {", "-                    setMethod.invoke(target, new String[] {value});", "-                } catch (IllegalAccessException iae) {", "-                    String msg = \"Error setting value for attrib: \" +", "-                        attr.getName();", "-                    iae.printStackTrace();", "-                    throw new BuildException(msg);", "-                } catch (InvocationTargetException ie) {", "-                    String msg = \"Error setting value for attrib: \" +", "-                        attr.getName() + \" in \" + target.getClass().getName();", "-                    ie.printStackTrace();", "-                    ie.getTargetException().printStackTrace();", "-                    throw new BuildException(msg);", "-                }", "+                String msg = \"Class \" + target.getClass() +", "+                    \" doesn't support the \\\"\" + attrs.getName(i) + \"\\\" property\";", "+                throw new BuildException(msg);", "+            }", "+", "+            String value=replaceProperties(attrs.getValue(i), project.getProperties() );", "+            try {", "+                setMethod.invoke(target, new String[] {value});", "+            } catch (IllegalAccessException iae) {", "+                String msg = \"Error setting value for attrib: \" +", "+                    attrs.getName(i);", "+                iae.printStackTrace();", "+                throw new BuildException(msg);", "+            } catch (InvocationTargetException ie) {", "+                String msg = \"Error setting value for attrib: \" +", "+                    attrs.getName(i) + \" in \" + target.getClass().getName();", "+                ie.printStackTrace();", "+                ie.getTargetException().printStackTrace();", "+                throw new BuildException(msg);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f85cc6f59e7ac87e4fe5e4c4f0c2569", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/PropertyEditor.java", "commitBeforeChange": "a9cc5fd794d793374e83ef922a0d32b3a9d5afdb", "commitAfterChange": "d830141f773d284b894679215e4d17a379422033", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private void displayTargetInfo(ACSTargetElement[] targets)", "signatureAfterChange": "     private void updateDisplay(ACSElement item)", "diff": ["-    private void displayTargetInfo(ACSTargetElement[] targets) {", "-", "-        // The text to display.", "-        String text = null;", "-", "-        int num = targets == null ? 0 : targets.length;", "-        Object[] args = null;", "-        switch(num) {", "-          case 0:", "-              text = getAppContext().getResources().", "-                  getString(getClass(), \"noTargets\");", "-              break;", "-          case 1:", "-              args = getTargetParams(targets[0]);", "-              text = getAppContext().getResources().", "-                  getMessage(getClass(), \"oneTarget\", args);", "-              break;", "-          default:", "-              args = getTargetParams(targets);", "-              text = getAppContext().getResources().", "-                  getMessage(getClass(), \"manyTargets\", args);", "-              break;", "+    private void updateDisplay(ACSElement item) {", "+        if(_customizer != null) {", "+            remove(_customizer);", "+            _customizer = null;", "-        if(text != null) {", "-            _text.setText(text);", "+        if(item != null) {", "+            _customizer = new DynamicCustomizer(item.getClass(), true);", "+            _customizer.setObject(item);", "+            add(BorderLayout.CENTER, _customizer);", "+        validate();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcba5d75ed4fadb3a6a2a9f0779a0a73", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ANTLR.java", "commitBeforeChange": "c99b33079f5cd10abf44645de85729fe35b82cda", "commitAfterChange": "161579a6d082eac88d197ee70491745c54d48b92", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     protected void addClasspathEntry(String resource)", "signatureAfterChange": "     protected void addClasspathEntry(String resource)", "diff": ["-        URL url = getClass().getResource(resource);", "-        if (url != null) {", "-            String u = url.toString();", "-            if (u.startsWith(\"jar:file:\")) {", "-                int pling = u.indexOf(\"!\");", "-                String jarName = u.substring(9, pling);", "-                log(\"Implicitly adding \" + jarName + \" to classpath\",", "-                        Project.MSG_DEBUG);", "-                createClasspath().setLocation(new File((new File(jarName)).getAbsolutePath()));", "-            } else if (u.startsWith(\"file:\")) {", "-                int tail = u.indexOf(resource);", "-                String dirName = u.substring(5, tail);", "-                log(\"Implicitly adding \" + dirName + \" to classpath\",", "-                        Project.MSG_DEBUG);", "-                createClasspath().setLocation(new File((new File(dirName)).getAbsolutePath()));", "-            } else {", "-                log(\"Don\\'t know how to handle resource URL \" + u,", "-                        Project.MSG_DEBUG);", "-            }", "+        /* ", "+         * pre Ant 1.6 this method used to call getClass().getResource", "+         * while Ant 1.6 will call ClassLoader.getResource().", "+         *", "+         * The difference is that Class.getResource expects a leading", "+         * slash for \"absolute\" resources and will strip it before", "+         * delegating to ClassLoader.getResource - so we now have to", "+         * emulate Class's behavior.", "+         */", "+        if (resource.startsWith(\"/\")) {", "+            resource = resource.substring(1);", "+        } else {", "+            resource = \"org/apache/tools/ant/taskdefs/optional/\"", "+                + resource;", "+        }", "+        ", "+        File f = LoaderUtils.getResourceSource(getClass().getClassLoader(),", "+                                               resource);", "+        if (f != null) {", "+            log(\"Found \" + f.getAbsolutePath(), Project.MSG_DEBUG);", "+            createClasspath().setLocation(f);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e86e5ea4e92e49e9ce8c5d798f7a7b7e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/Sort.java", "commitBeforeChange": "19d970dbd33bac4654e4d8319afe11dcb15dd708", "commitAfterChange": "c1a8cd521f77cc542c206e7ab3f4aeb6aae53e87", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 9, "signatureBeforeChange": "     protected Collection getCollection()", "signatureAfterChange": "     protected synchronized Collection getCollection()", "diff": ["-    protected Collection getCollection() {", "-        List rcs = getResourceCollections();", "-        if (rcs.size() != 1) {", "-            throw new BuildException(ONE_NESTED_MESSAGE);", "-        }", "-        Iterator nested = ((ResourceCollection) (rcs.get(0))).iterator();", "-        if (!(nested.hasNext())) {", "+    protected synchronized Collection getCollection() {", "+        ResourceCollection rc = getResourceCollection();", "+        Iterator iter = rc.iterator();", "+        if (!(iter.hasNext())) {", "-        ArrayList al = new ArrayList();", "-        while (nested.hasNext()) {", "-            al.add(nested.next());", "+        SortedBag b = new SortedBag(comp);", "+        while (iter.hasNext()) {", "+            b.add(iter.next());", "-        if (compStack.empty()) {", "-            Collections.sort(al);", "-        } else {", "-            for (Stack s = (Stack) compStack.clone(); !s.empty();) {", "-                Collections.sort(al, (ResourceComparator) s.pop());", "-            }", "-        }", "-        return al;", "+        return b;"]}]}
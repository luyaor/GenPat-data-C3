{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ee62362aa732492231f2a0f22209a295", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04c5e5762c6c5b3ecc4965018232ab1b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Recorder.java", "commitBeforeChange": "4ac80ba4231ae3d99445fa0b1790ae9393d23cb5", "commitAfterChange": "f12aca5b440d96fc6b79546be69c47cb22f962a7", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private void cleanup()", "signatureAfterChange": "     private void cleanup()", "diff": ["-        Hashtable entries = (Hashtable) recorderEntries.get(getProject());", "-        if (null != entries) {", "-            entries.clear();", "-            recorderEntries.remove(entries);", "+        Hashtable entries = (Hashtable) recorderEntries.clone();", "+        Iterator itEntries = entries.entrySet().iterator();", "+        while (itEntries.hasNext()) {", "+            Map.Entry entry = (Map.Entry) itEntries.next();", "+            RecorderEntry re = (RecorderEntry) entry.getValue();", "+            if (re.getProject() == getProject()) {", "+                recorderEntries.remove(entry.getKey());", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f221a902de31e313627d4ea7ca0a6a4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "af5b94e9d969c42765bd41f15181a6653535a76a", "commitAfterChange": "35bcdc15f7d829f94651c334c9ebfb09c0e7cd37", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static synchronized Vector getProcEnvironment()", "signatureAfterChange": "     public static synchronized Vector getProcEnvironment()", "diff": ["+        if (JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_1_5)) {", "+            try {", "+                Map/*<String,String>*/ env = (Map) System.class.getMethod(\"getenv\", new Class[0]).invoke(null, new Object[0]);", "+                Iterator it = env.entrySet().iterator();", "+                while (it.hasNext()) {", "+                    Map.Entry entry = (Map.Entry) it.next();", "+                    procEnvironment.add(entry.getKey() + \"=\" + entry.getValue());", "+                }", "+                return procEnvironment;", "+            } catch (Exception x) {", "+                x.printStackTrace();", "+            }", "+        }"]}]}
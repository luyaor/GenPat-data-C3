{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2e9063833a824f48b72cf384cfc16bce", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c2a618853d8d9cb3125084287dbc65c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/JonasDeploymentTool.java", "commitBeforeChange": "270394a09fddda0ea9ffa2330956c5f399ab840f", "commitAfterChange": "6bd8d6e938a45868902ecd1092858e8372933c7c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public void setGenicClass(final String inGenicClass)", "signatureAfterChange": "     String getGenicClassName(Path classpath)", "diff": ["-    /** set the name of the GenIC compiler class.  */", "-    public void setGenicClass(final String inGenicClass) {", "-        genicClass = inGenicClass;", "-    }", "+    String getGenicClassName(Path classpath) {", "+\tlog(\"Looking for GenIC class in classpath: \" + classpath.toString(), Project.MSG_VERBOSE);", "+", "+\tAntClassLoader cl = new AntClassLoader(classpath.getProject(), classpath);", "+", "+\ttry {", "+\t    cl.loadClass(JonasDeploymentTool.GENIC_CLASS);", "+\t    log(\"Found GenIC class '\" + JonasDeploymentTool.GENIC_CLASS + \"' in classpath.\", Project.MSG_VERBOSE);", "+\t    return JonasDeploymentTool.GENIC_CLASS;", "+", "+\t} catch (ClassNotFoundException cnf1) {", "+ \t    log(\"GenIC class '\" + JonasDeploymentTool.GENIC_CLASS + \"' not found in classpath.\", ", "+\t\tProject.MSG_VERBOSE);", "+\t} ", "+", "+\ttry {", "+\t    cl.loadClass(JonasDeploymentTool.OLD_GENIC_CLASS_1);", "+\t    log(\"Found GenIC class '\" + JonasDeploymentTool.OLD_GENIC_CLASS_1 + ", "+\t\t\"' in classpath.\", Project.MSG_VERBOSE);", "+\t    return JonasDeploymentTool.OLD_GENIC_CLASS_1;", "+", "+\t} catch (ClassNotFoundException cnf2) {", "+ \t    log(\"GenIC class '\" + JonasDeploymentTool.OLD_GENIC_CLASS_1 + ", "+\t\t\"' not found in classpath.\",", "+\t\tProject.MSG_VERBOSE);", "+\t} ", "+", "+\ttry {", "+\t    cl.loadClass(JonasDeploymentTool.OLD_GENIC_CLASS_2);", "+\t    log(\"Found GenIC class '\" + JonasDeploymentTool.OLD_GENIC_CLASS_2 + ", "+\t\t\"' in classpath.\", Project.MSG_VERBOSE);", "+\t    return JonasDeploymentTool.OLD_GENIC_CLASS_2;", "+", "+\t} catch (ClassNotFoundException cnf3) {", "+ \t    log(\"GenIC class '\" + JonasDeploymentTool.OLD_GENIC_CLASS_2 + ", "+\t\t\"' not found in classpath.\",", "+\t\tProject.MSG_VERBOSE);", "+\t} ", "+\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c02332b401b8e63ab34834faffa652b7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/SourceFileScanner.java", "commitBeforeChange": "6a47866639db820ecfad912519d57c76ab8c994b", "commitAfterChange": "3b1f2fca74ade338347b53d7f450d5dc1bdea0c9", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public String[] restrict(String[] files, File srcDir, File destDir,                              FileNameMapper mapper)", "signatureAfterChange": "     public String[] restrict(String[] files, File srcDir, File destDir,                              FileNameMapper mapper)", "diff": ["+", "+        long now = (new java.util.Date()).getTime();", "+        StringBuffer targetList = new StringBuffer();", "+", "+                task.log(files[i]+\" skipped - don\\'t know how to handle it\",", "+                         Project.MSG_VERBOSE);", "-            for (int j=0; j<targets.length; j++) {", "-                File dest = new File(destDir, targets[j]);", "-                if (!dest.exists() ||", "-                    src.lastModified() > dest.lastModified()) {", "+            if (src.lastModified() > now) {", "+                task.log(\"Warning: \"+files[i]+\" modified in the future.\", ", "+                         Project.MSG_WARN);", "+            }", "+            boolean added = false;", "+            targetList.setLength(0);", "+            for (int j=0; !added && j<targets.length; j++) {", "+                File dest = new File(destDir, targets[j]);", "+                if (!dest.exists()) {", "+                    task.log(files[i]+\" added as \"+dest.getAbsolutePath()+\" doesn\\'t exist.\",", "+                             Project.MSG_VERBOSE);", "-                    break;", "+                    added = true;", "+                } else if (src.lastModified() > dest.lastModified()) {", "+                    task.log(files[i]+\" added as \"+dest.getAbsolutePath()+\" is outdated.\",", "+                             Project.MSG_VERBOSE);", "+                    v.addElement(files[i]);", "+                    added = true;", "+                } else {", "+                    if (targetList.length() > 0) {", "+                        targetList.append(\", \");", "+                    }", "+                    targetList.append(dest.getAbsolutePath());", "+", "+            if (!added) {", "+                task.log(files[i]+\" omitted as \"+targetList.toString()", "+                         + (targets.length == 1 ? \" is\" : \" are \")", "+                         + \" up to date.\", Project.MSG_VERBOSE);", "+            }", "+            "]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bbe262ebefce75144b5113e3563de0ea", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9719e970597ac9adbb505046ae9e65d5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Checksum.java", "commitBeforeChange": "7c24f9164c6c8c840010e49f7780f9158b2e2e46", "commitAfterChange": "222693b10f20a17af93ca107ba09dc2a679ab5cd", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private boolean validateAndExecute() throws BuildException", "signatureAfterChange": "     private boolean validateAndExecute() throws BuildException", "diff": ["+        String savedFileExt = fileext;", "-        if (fileext == null) {", "-            fileext = \".\" + algorithm;", "-        } else if (fileext.trim().length() == 0) {", "-            throw new BuildException(", "-                \"File extension when specified must not be an empty string\");", "-        }", "-", "-        addToIncludeFileMap(file);", "-", "-        int sizeofFileSet = filesets.size();", "-        for (int i = 0; i < sizeofFileSet; i++) {", "-            FileSet fs = (FileSet) filesets.elementAt(i);", "-            DirectoryScanner ds = fs.getDirectoryScanner(project);", "-            String[] srcFiles = ds.getIncludedFiles();", "-            for (int j = 0; j < srcFiles.length; j++) {", "-                File src = new File(fs.getDir(project), srcFiles[j]);", "-                addToIncludeFileMap(src);", "-            }", "+        if (fileext == null) {", "+            fileext = \".\" + algorithm;", "+        } else if (fileext.trim().length() == 0) {", "+            throw new BuildException(", "+                \"File extension when specified must not be an empty string\");", "-        return generateChecksums();", "+        try {", "+            addToIncludeFileMap(file);", "+            ", "+            int sizeofFileSet = filesets.size();", "+            for (int i = 0; i < sizeofFileSet; i++) {", "+                FileSet fs = (FileSet) filesets.elementAt(i);", "+                DirectoryScanner ds = fs.getDirectoryScanner(project);", "+                String[] srcFiles = ds.getIncludedFiles();", "+                for (int j = 0; j < srcFiles.length; j++) {", "+                    File src = new File(fs.getDir(project), srcFiles[j]);", "+                    addToIncludeFileMap(src);", "+                }", "+            }", "+", "+            return generateChecksums();", "+        } finally {", "+            fileext = savedFileExt;", "+            includeFileMap.clear();", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaaef7f9fa55116620a223fa4229354a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Jar.java", "commitBeforeChange": "6a67c09afc7a13e47b43334358e7287abe2af2b3", "commitAfterChange": "8aaa005834f2ab61dd187115ca3c922517f2b850", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private void writeServices(ZipOutputStream zOut) throws IOException", "signatureAfterChange": "     private void writeServices(ZipOutputStream zOut) throws IOException", "diff": ["-           //stolen from writeManifest", "-           super.zipFile(service.getAsStream(), zOut,", "-                         \"META-INF/services/\" + service.getType(),", "-                         System.currentTimeMillis(), null,", "-                         ZipFileSet.DEFAULT_FILE_MODE);", "+", "+           InputStream is = null;", "+           try {", "+               is = service.getAsStream();", "+               //stolen from writeManifest", "+               super.zipFile(is, zOut,", "+                             \"META-INF/services/\" + service.getType(),", "+                             System.currentTimeMillis(), null,", "+                             ZipFileSet.DEFAULT_FILE_MODE);", "+           } finally {", "+               // technically this is unnecessary since", "+               // Service.getAsStream returns a ByteArrayInputStream", "+               // and not closing it wouldn't do any harm.", "+               FileUtils.close(is);", "+           }"]}]}
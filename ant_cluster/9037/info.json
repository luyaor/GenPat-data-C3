{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "568d798b500544678376c5a0a03f3ec3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52f54fe2d289b7e4ad605f42ec50e69e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/pvcs/Pvcs.java", "commitBeforeChange": "32b8cce516421a912ced3f568167107df3332710", "commitAfterChange": "e3b6d1fe768d87352d3d0348638911045fc4668e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void execute() throws org.apache.tools.ant.BuildException", "signatureAfterChange": "     public void execute() throws org.apache.tools.ant.BuildException", "diff": ["-        if(repository == null || repository.trim().equals(\"\")) ", "+        if(repository == null || repository.trim().equals(\"\")) { ", "+        }", "-        if(getWorkspace()!=null)", "+        if(getWorkspace()!=null) {", "+        }", "-        if(getPvcsproject() == null && getPvcsprojects().isEmpty())", "+        if(getPvcsproject() == null && getPvcsprojects().isEmpty()) {", "+        }", "-        if(getPvcsproject()!=null)", "+        if(getPvcsproject()!=null) {", "+        }", "-                if (projectName == null || (projectName.trim()).equals(\"\"))", "+                if (projectName == null || (projectName.trim()).equals(\"\")) {", "+                }", "-            if(!tmp.exists())", "+            if(!tmp.exists()) {", "+            }", "-            if(getForce()!=null && getForce().equals(\"yes\"))", "+            if(getForce()!=null && getForce().equals(\"yes\")) {", "-            else", "+            } else {", "+            }", "-            if(getPromotiongroup()!=null)", "+            if(getPromotiongroup()!=null) {", "-            else {", "-                if(getLabel()!=null)", "+            } else {", "+                if(getLabel()!=null) {", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad21a8b369307aafb5580b937d02a1d1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "5a497d7dc79f7b6eda0770262f8d92d099c502c5", "commitAfterChange": "8ce1de2178a0422105fa437c327b49fb5637ff28", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "      private void qSort3( int loSt, int hiSt, int dSt )", "signatureAfterChange": "      private void qSort3( int loSt, int hiSt, int dSt )", "diff": ["-        for( int count = 0; count < QSORT_STACK_SIZE; count++ )", "+        for( int count = 0; count < QSORT_STACK_SIZE; count++ ) {", "+        }", "-            if( sp >= QSORT_STACK_SIZE )", "+            if( sp >= QSORT_STACK_SIZE ) {", "+            }", "-                if( workDone > workLimit && firstAttempt )", "+                if( workDone > workLimit && firstAttempt ) {", "+                }", "-                    if( unLo > unHi )", "+                    if( unLo > unHi ) {", "+                    }", "-                    if( n > 0 )", "+                    if( n > 0 ) {", "+                    }", "-                    if( unLo > unHi )", "+                    if( unLo > unHi ) {", "+                    }", "-                    if( n < 0 )", "+                    if( n < 0 ) {", "+                    }", "-                if( unLo > unHi )", "+                if( unLo > unHi ) {", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8bb9c5785a9616eeb045a324b09f3ee", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "5a497d7dc79f7b6eda0770262f8d92d099c502c5", "commitAfterChange": "8ce1de2178a0422105fa437c327b49fb5637ff28", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "      private void simpleSort( int lo, int hi, int d )", "signatureAfterChange": "      private void simpleSort( int lo, int hi, int d )", "diff": ["-        if( bigN < 2 )", "+        if( bigN < 2 ) {", "+        }", "-        while( incs[ hp ] < bigN )", "+        while( incs[ hp ] < bigN ) {", "+        }", "-                if( i > hi )", "+                if( i > hi ) {", "+                }", "-                    if( j <= ( lo + h - 1 ) )", "+                    if( j <= ( lo + h - 1 ) ) {", "+                    }", "-                if( i > hi )", "+                if( i > hi ) {", "+                }", "-                    if( j <= ( lo + h - 1 ) )", "+                    if( j <= ( lo + h - 1 ) ) {", "+                    }", "-                if( i > hi )", "+                if( i > hi ) {", "+                }", "-                    if( j <= ( lo + h - 1 ) )", "+                    if( j <= ( lo + h - 1 ) ) {", "+                    }", "-                if( workDone > workLimit && firstAttempt )", "+                if( workDone > workLimit && firstAttempt ) {", "+                }"]}]}
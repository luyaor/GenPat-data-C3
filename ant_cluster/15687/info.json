{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "67c22c2b29ad70d0988f57c3c674cb65", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97d9575a5851f945233fc375796495a3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/Native2Ascii.java", "commitBeforeChange": "9e2453aa537b27b5cf753e91c823aa0819a80040", "commitAfterChange": "bd2954ad1e31358aaa730893036dafab1effd875", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void convert(String srcName, String destName) throws BuildException", "signatureAfterChange": "     private void convert(String srcName, String destName)          throws BuildException", "diff": ["-    private void convert(String srcName, String destName) throws BuildException {", "-", "-        Commandline cmd = new Commandline();  // Command line to run", "+    private void convert(String srcName, String destName) ", "+        throws BuildException {", "-", "-        // Set up the basic args (this could be done once, but", "-        // it's cleaner here)", "-        if (reverse) {", "-            cmd.createArgument().setValue(\"-reverse\");", "-        }", "-", "-        if (encoding != null) {", "-            cmd.createArgument().setValue(\"-encoding\");", "-            cmd.createArgument().setValue(encoding);", "-        }", "-        cmd.createArgument().setFile(srcFile);", "-        cmd.createArgument().setFile(destFile);", "-        sun.tools.native2ascii.Main n2a", "-            = new sun.tools.native2ascii.Main();", "-        if (!n2a.convert(cmd.getArguments())) {", "+        Native2AsciiAdapter ad = ", "+            Native2AsciiAdapterFactory.getAdapter(null, this);", "+        if (!ad.convert(this, srcFile, destFile)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99ca787d624133c8981b39ae61d32375", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/IntrospectionHelperTest.java", "commitBeforeChange": "6fd0ddc8b843c2f0348fc51f680d465b89046fe7", "commitAfterChange": "d0fe01180db02cdd89d8e1baac7fac3f54041348", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public void testGetNestedElements()", "signatureAfterChange": "      public void testGetNestedElements()", "diff": ["+", "-        Hashtable h = new Hashtable();", "-        h.put(\"six\", java.lang.String.class);", "-        h.put(\"thirteen\", java.lang.StringBuffer.class);", "-        h.put(\"fourteen\", java.lang.StringBuffer.class);", "-        h.put(\"fifteen\", java.lang.StringBuffer.class);", "-        IntrospectionHelper ih = IntrospectionHelper.getHelper(getClass());", "+        Map elemMap = getExpectedNestedElements();", "-            Class expect = (Class) h.get(name);", "+            Class expect = (Class) elemMap.get(name);", "-            h.remove(name);", "+            elemMap.remove(name);", "-        assertTrue(\"Found all\", h.isEmpty());", "+        assertTrue(\"Found all\", elemMap.isEmpty());", "+    }"]}]}
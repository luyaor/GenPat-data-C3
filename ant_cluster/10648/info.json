{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e0697fb0b9fabc224d2be23cdf026a5f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a95d84e449c2052ac96ad6338092b56c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/compilers/CompilerAdapterFactory.java", "commitBeforeChange": "4f1e68bd2b9b912702ce0d1588688b5491be0ad5", "commitAfterChange": "c767541c7d35c9eef55bf65e686373b02b71af2a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public static CompilerAdapter getCompiler(String compilerType, Task task,                                               Path classpath)         throws BuildException", "signatureAfterChange": "     public static CompilerAdapter getCompiler(String compilerType, Task task,                                               Path classpath)         throws BuildException", "diff": ["-        String compilerTypeLC = compilerType.toLowerCase(Locale.ENGLISH);", "-            if (compilerTypeLC.equals(\"jikes\")) {", "+            if (compilerType.equalsIgnoreCase(\"jikes\")) {", "-            if (compilerTypeLC.equals(\"extjavac\")) {", "+            if (compilerType.equalsIgnoreCase(\"extjavac\")) {", "-            if (compilerTypeLC.equals(\"classic\")", "-                || compilerTypeLC.equals(\"javac1.1\")", "-                || compilerTypeLC.equals(\"javac1.2\")) {", "+            if (compilerType.equalsIgnoreCase(\"classic\")", "+                || compilerType.equalsIgnoreCase(\"javac1.1\")", "+                || compilerType.equalsIgnoreCase(\"javac1.2\")) {", "-                compilerTypeLC = \"modern\";", "+                compilerType = \"modern\";", "-            if (compilerTypeLC.equals(\"modern\")", "-                || compilerTypeLC.equals(\"javac1.3\")", "-                || compilerTypeLC.equals(\"javac1.4\")", "-                || compilerTypeLC.equals(\"javac1.5\")", "-                || compilerTypeLC.equals(\"javac1.6\")) {", "+            if (compilerType.equalsIgnoreCase(\"modern\")", "+                || compilerType.equalsIgnoreCase(\"javac1.3\")", "+                || compilerType.equalsIgnoreCase(\"javac1.4\")", "+                || compilerType.equalsIgnoreCase(\"javac1.5\")", "+                || compilerType.equalsIgnoreCase(\"javac1.6\")) {", "-            if (compilerTypeLC.equals(\"jvc\")", "-                || compilerTypeLC.equals(\"microsoft\")) {", "+            if (compilerType.equalsIgnoreCase(\"jvc\")", "+                || compilerType.equalsIgnoreCase(\"microsoft\")) {", "-            if (compilerTypeLC.equals(\"kjc\")) {", "+            if (compilerType.equalsIgnoreCase(\"kjc\")) {", "-            if (compilerTypeLC.equals(\"gcj\")) {", "+            if (compilerType.equalsIgnoreCase(\"gcj\")) {", "-            if (compilerTypeLC.equals(\"sj\")", "-                || compilerTypeLC.equals(\"symantec\")) {", "+            if (compilerType.equalsIgnoreCase(\"sj\")", "+                || compilerType.equalsIgnoreCase(\"symantec\")) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0d414af0c7c92c7ddfb3fe625e9789e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/compilers/CompilerAdapterFactory.java", "commitBeforeChange": "d58f4d380b325e8802b1fdf22bd87ead365d1397", "commitAfterChange": "58f0bb04db9c5c8a858d7a3be7719608f25f2f49", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public static CompilerAdapter getCompiler(String compilerType, Task task,                                               Path classpath)         throws BuildException", "signatureAfterChange": "     public static CompilerAdapter getCompiler(String compilerType, Task task,                                               Path classpath)         throws BuildException", "diff": ["-            if (compilerType.equalsIgnoreCase(\"jikes\")) {", "+        String compilerTypeLC = compilerType.toLowerCase(Locale.ENGLISH);", "+            if (compilerTypeLC.equals(\"jikes\")) {", "-            if (compilerType.equalsIgnoreCase(\"extJavac\")) {", "+            if (compilerTypeLC.equals(\"extjavac\")) {", "-            if (compilerType.equalsIgnoreCase(\"classic\")", "-                || compilerType.equalsIgnoreCase(\"javac1.1\")", "-                || compilerType.equalsIgnoreCase(\"javac1.2\")) {", "+            if (compilerTypeLC.equals(\"classic\")", "+                || compilerTypeLC.equals(\"javac1.1\")", "+                || compilerTypeLC.equals(\"javac1.2\")) {", "-                compilerType = \"modern\";", "+                compilerTypeLC = \"modern\";", "-            if (compilerType.equalsIgnoreCase(\"modern\")", "-                || compilerType.equalsIgnoreCase(\"javac1.3\")", "-                || compilerType.equalsIgnoreCase(\"javac1.4\")", "-                || compilerType.equalsIgnoreCase(\"javac1.5\")", "-                || compilerType.equalsIgnoreCase(\"javac1.6\")) {", "+            if (compilerTypeLC.equals(\"modern\")", "+                || compilerTypeLC.equals(\"javac1.3\")", "+                || compilerTypeLC.equals(\"javac1.4\")", "+                || compilerTypeLC.equals(\"javac1.5\")", "+                || compilerTypeLC.equals(\"javac1.6\")) {", "-            if (compilerType.equalsIgnoreCase(\"jvc\")", "-                || compilerType.equalsIgnoreCase(\"microsoft\")) {", "+            if (compilerTypeLC.equals(\"jvc\")", "+                || compilerTypeLC.equals(\"microsoft\")) {", "-            if (compilerType.equalsIgnoreCase(\"kjc\")) {", "+            if (compilerTypeLC.equals(\"kjc\")) {", "-            if (compilerType.equalsIgnoreCase(\"gcj\")) {", "+            if (compilerTypeLC.equals(\"gcj\")) {", "-            if (compilerType.equalsIgnoreCase(\"sj\")", "-                || compilerType.equalsIgnoreCase(\"symantec\")) {", "+            if (compilerTypeLC.equals(\"sj\")", "+                || compilerTypeLC.equals(\"symantec\")) {"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "695d6df1b7e391ecb2705f7881770c67", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bf839ab7f86d98f23f5bcc32a49fb2d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "2295e485c44b8e984eb77f353a888ccffa1ed1df", "commitAfterChange": "3eebdfd1c883c345077e0bfbc8142d0065170af7", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      protected void buildMap(File fromDir, File toDir, String[] names,                             FileNameMapper mapper, Hashtable map)", "signatureAfterChange": "      protected void buildMap(File fromDir, File toDir, String[] names,                             FileNameMapper mapper, Hashtable map)", "diff": ["-            toCopy = names;", "+            Vector v = new Vector();", "+            for (int i=0; i<names.length; i++) {", "+                if (mapper.mapFileName(names[i]) != null) {", "+                    v.addElement(names[i]);", "+                }", "+            }", "+            toCopy = new String[v.size()];", "+            v.copyInto(toCopy);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17e7b0b0df1be96b94342fe72fa122ad", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/FilterSet.java", "commitBeforeChange": "4c16ed4bd158a0f4b656a0088ecbb416f89c3db2", "commitAfterChange": "3fb7be5f43e19fb66624871fb4ad757583498585", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 13, "signatureBeforeChange": "     protected synchronized Vector getFilters()", "signatureAfterChange": "     protected synchronized Vector getFilters()", "diff": ["+        }", "+        //silly hack to avoid stack overflow...", "+        if (!readingFiles) {", "+            readingFiles = true;", "+            for (int i = 0, sz = filtersFiles.size(); i < sz; i++) {", "+                readFiltersFromFile((File) filtersFiles.get(i));", "+            }", "+            filtersFiles.clear();", "+            readingFiles = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "219a1ef08ca0874f20378c69a887277d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "33d19ef67e2eb18cdf696c337f158ae725f92f21", "commitAfterChange": "b14e61f604f088f5522e8caa9c396da71e7b775e", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "     protected int transferFiles(FTPClient ftp, FileSet fs)          throws IOException, BuildException", "signatureAfterChange": "     protected int transferFiles(FTPClient ftp, FileSet fs)          throws IOException, BuildException", "diff": ["-", "-            for (int i = 0; i < dsfiles.length; i++) {", "-                switch (action) {", "-                    case SEND_FILES:", "-                        sendFile(ftp, dir, dsfiles[i]);", "-                        break;", "-                    case GET_FILES:", "-                        getFile(ftp, dir, dsfiles[i]);", "-                        break;", "-                    case DEL_FILES:", "-                        delFile(ftp, dsfiles[i]);", "-                        break;", "-                    case LIST_FILES:", "-                        listFile(ftp, bw, dsfiles[i]);", "-                        break;", "-                    case CHMOD:", "-                        doSiteCommand(ftp, \"chmod \" + chmod + \" \" + resolveFile(dsfiles[i]));", "-                        transferred++;", "-                        break;", "-                    case RM_DIR:", "-                        rmDir(ftp, dsfiles[i]);", "-                        break;", "-                    default:", "-                        throw new BuildException(\"unknown ftp action \" + action);", "+            if (action == RM_DIR) {", "+                // to remove directories, start by the end of the list", "+                // the trunk does not let itself be removed before the leaves", "+                for (int i = dsfiles.length - 1; i >= 0; i--) {", "+                    rmDir(ftp, dsfiles[i]);", "+                }", "+            }   else {", "+                for (int i = 0; i < dsfiles.length; i++) {", "+                    switch (action) {", "+                        case SEND_FILES:", "+                            sendFile(ftp, dir, dsfiles[i]);", "+                            break;", "+                        case GET_FILES:", "+                            getFile(ftp, dir, dsfiles[i]);", "+                            break;", "+                        case DEL_FILES:", "+                            delFile(ftp, dsfiles[i]);", "+                            break;", "+                        case LIST_FILES:", "+                            listFile(ftp, bw, dsfiles[i]);", "+                            break;", "+                        case CHMOD:", "+                            doSiteCommand(ftp, \"chmod \" + chmod + \" \" + resolveFile(dsfiles[i]));", "+                            transferred++;", "+                            break;", "+                        default:", "+                            throw new BuildException(\"unknown ftp action \" + action);", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "629fe9231d70130d126c531752e03d53", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/frontends/EmbeddedAnt.java", "commitBeforeChange": "274da3301287be067b66a5778b27bfa98ef0a662", "commitAfterChange": "b91e4a3c1d8310dea42c2c353ab016d9c5425109", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private ProjectListener prepareListener( final Embeddor embeddor )         throws Exception", "signatureAfterChange": "     private void prepareListeners( final Embeddor embeddor,                                    final Workspace workspace )         throws Exception", "diff": ["-    private ProjectListener prepareListener( final Embeddor embeddor )", "+    private void prepareListeners( final Embeddor embeddor,", "+                                   final Workspace workspace )", "-        if( m_listener == null )", "+        if( m_listenerName != null )", "-            m_listener = embeddor.createListener( m_listenerName );", "+            final ProjectListener listener = embeddor.createListener( m_listenerName );", "+            workspace.addProjectListener( listener );", "-        return m_listener;", "+        final int count = m_listeners.size();", "+        for( int i = 0; i < count; i++ )", "+        {", "+            final ProjectListener listener = (ProjectListener)m_listeners.get(i );", "+            workspace.addProjectListener( listener );", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6596500dd990d72c0ddf66d1f5a39820", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Rmic.java", "commitBeforeChange": "818ddcf1837e09566976e01e2b718b1995f6e5f2", "commitAfterChange": "f31845f71d137a7891e010f0c8d2b8db6e81a8c6", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 47, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                log(\"RMI Compiling \" + fileCount + \" class\" + (fileCount > 1 ? \"es\" : \"\") + \" to \"", "-                        + outputDir, Project.MSG_INFO);", "+                log(\"RMI Compiling \" + fileCount + \" class\"", "+                    + (fileCount > 1 ? \"es\" : \"\") + \" to \"", "+                    + outputDir, Project.MSG_INFO);", "+", "+                if (listFiles) {", "+                    for (int i = 0; i < fileCount; i++) {", "+                        log(compileList.get(i).toString());", "+                    }", "+                }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d75a8f2e985e1ef73c54050ed0a2225", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/vfile/ListFileSetTask.java", "commitBeforeChange": "5b87919be6a8db15efe30f2de6e617aba31ef619", "commitAfterChange": "52926715b4f4f53da4b63cf660a14f357d7a9b6e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void execute()         throws TaskException", "signatureAfterChange": "     public void execute()         throws TaskException", "diff": ["-        FileSetResult result = m_fileSet.getResult( getContext() );", "-        final FileObject[] files = result.getFiles();", "-        final String[] paths = result.getPaths();", "-        for( int i = 0; i < files.length; i++ )", "+        final int count = m_fileSets.size();", "+        for( int i = 0; i < count; i++ )", "-            final FileObject file = files[ i ];", "-            final String path = paths[ i ];", "-            getLogger().info( path + \" = \" + file );", "+            final FileSet fileSet = (FileSet)m_fileSets.get(i );", "+            FileSetResult result = fileSet.getResult( getContext() );", "+            final FileObject[] files = result.getFiles();", "+            final String[] paths = result.getPaths();", "+            for( int j = 0; j < files.length; j++ )", "+            {", "+                final FileObject file = files[ j ];", "+                final String path = paths[ j ];", "+                getLogger().info( path + \" = \" + file );", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "786f23f2dd1b28bd9863dc20c55a16cf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/filterreaders/src/main/org/apache/tools/ant/filters/StripLineBreaks.java", "commitBeforeChange": "7265fdb8a846802089831647891b0218858fdc7b", "commitAfterChange": "8aa365e5d7d7f14ac4e0002be30968df77b08b56", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private final String stripLineBreaks(final String source)", "signatureAfterChange": "     private final String stripLineBreaks(final String source)", "diff": ["-        final int len=source.length();", "-        final String userDefinedLineBreaks =", "-            (String) parameters.get(LINE_BREAKS_KEY);", "+        final int len = source.length();", "+        String userDefinedLineBreaks = null;", "+        if (parameters != null) {", "+            for (int i = 0; i < parameters.length; i++) {", "+                if (LINE_BREAKS_KEY.equals(parameters[i].getName())) {", "+                    userDefinedLineBreaks = parameters[i].getValue();", "+                    break;", "+                }", "+            }", "+        }", "-        final StringBuffer dest=new StringBuffer(len);", "+        final StringBuffer dest = new StringBuffer(len);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f324d51b9e4f1651903b9cde8268db0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/classloader/DefaultClassLoaderManager.java", "commitBeforeChange": "62562693ac733d0697b5a522972f36ea5570225c", "commitAfterChange": "a816a71d9e2587a83890f499dd2cabb7c6e02889", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private File[] getOptionalPackagesFor( final File typeLibrary )         throws Exception", "signatureAfterChange": "     private void getOptionalPackagesFor( final File jarFile, final List packages )         throws Exception", "diff": ["-    private File[] getOptionalPackagesFor( final File typeLibrary )", "+    private void getOptionalPackagesFor( final File jarFile, final List packages )", "-        final URL url = new URL( \"jar:\" + typeLibrary.getCanonicalFile().toURL() + \"!/\" );", "+        final URL url = new URL( \"jar:\" + jarFile.getCanonicalFile().toURL() + \"!/\" );", "-        final OptionalPackage[] packages =", "-            (OptionalPackage[])dependencies.toArray( new OptionalPackage[ 0 ] );", "-        return OptionalPackage.toFiles( packages );", "+        final int count = dependencies.size();", "+        for( int i = 0; i < count; i++ )", "+        {", "+            final OptionalPackage optionalPackage = (OptionalPackage)dependencies.get(i );", "+            packages.add( optionalPackage.getFile() );", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "930fa258d626528225428bd7ebc6cc1b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Ant.java", "commitBeforeChange": "7b90e493e8f5388bf88f0d951880d6667f9a8016", "commitAfterChange": "2ae23a6a4b6246a53bb97a6df1a089b549b84391", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private void overrideProperties() throws BuildException", "signatureAfterChange": "     private void overrideProperties() throws BuildException", "diff": ["+        // remove duplicate properties - last property wins", "+        // Needed for backward compatibility", "+        Set set = new HashSet();", "+        for (int i = properties.size() - 1; i >= 0; --i) {", "+            Property p = (Property) properties.get(i);", "+            if (set.contains(p.getName())) {", "+                properties.remove(i);", "+            } else {", "+                set.add(p.getName());", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a48d0828bf6d4523198f992a36589b1c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/CompositeMapper.java", "commitBeforeChange": "d8922d6d2dc045114787e20cb1c61772cdfb66bb", "commitAfterChange": "36786a3b76700f546fe04e69598329fcb19fffc7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public String[] mapFileName(String sourceFileName)", "signatureAfterChange": "     public String[] mapFileName(String sourceFileName)", "diff": ["+        LinkedList sortedResults = new LinkedList();", "-                    results.addAll(Arrays.asList(mapped));", "+                    for (int i = 0; i < mapped.length; i++) {", "+                        if (!results.contains(mapped[i])) {", "+                            results.add(mapped[i]);", "+                            sortedResults.addLast(mapped[i]);", "+                        }", "+                    }", "-            : (String[]) results.toArray(new String[results.size()]);", "+            : (String[]) sortedResults.toArray(new String[results.size()]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abedd72dd30231a5fbe9c073604bf33a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SubAnt.java", "commitBeforeChange": "546743d0fb608d09e358e839494cc06defb13cb3", "commitAfterChange": "370ae530e49a911086d174df6cdf284ebe52433c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void execute(File file, File directory)                 throws BuildException", "signatureAfterChange": "     private void execute(File file, File directory)                 throws BuildException", "diff": ["+        for (int i=0; i<targets.size(); i++) {", "+            TargetElement targetElement = (TargetElement)targets.get(i);", "+            ant.addConfiguredTarget(targetElement);", "+        }", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8f331a452fcd3b00ef023bec8ba7b45", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/junit/src/main/org/apache/tools/ant/taskdefs/optional/junit/FormatterElement.java", "commitBeforeChange": "c041534439d37164110ac8ae93279f44d1a21a97", "commitAfterChange": "602fbeb19d1897a7873aa131bb3218381d6a2407", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     protected Formatter createFormatter() throws BuildException", "signatureAfterChange": "     protected Formatter createFormatter() throws BuildException", "diff": ["+", "+        // create properties from parameters", "+        Properties props = new Properties();", "+        for (int i = 0; i < params.size(); i++){", "+            Parameter param = (Parameter)params.elementAt(i);", "+            props.put(param.getName(), param.getValue());", "+        }", "-        f.init(params);", "+        f.init(props);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd79cb999beb2b6413d12eb10b207366", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/image/Image.java", "commitBeforeChange": "bc718c9348493ae16f1e6f6299a9625b6ca0ccbd", "commitAfterChange": "9dd88b23e50a8bae889903f737ce2deccb06c73d", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void execute()", "signatureAfterChange": "     public void execute()", "diff": ["+", "+            if (!overwrite){", "+             // remove any files that shouldn't be overwritten.", "+             ArrayList filesToRemove = new ArrayList();", "+             for(Iterator i = filesList.iterator();i.hasNext();){", "+               File f = (File)i.next();", "+               File new_file = new File(destDir.getAbsolutePath() + File.separator + f.getName());", "+               if (new_file.exists()){", "+                 filesToRemove.add(f);", "+               }", "+             }", "+             filesList.removeAll(filesToRemove);", "+            }", "+", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d487632749ebd70e5d134a0dd775f859", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/XMLValidateTask.java", "commitBeforeChange": "957f9e512572a78a3e82ca1d0938f486394950dd", "commitAfterChange": "d8361ec47ac005b959a6a22b17fecf77d540e890", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private void initValidator()", "signatureAfterChange": "     private void initValidator()", "diff": ["-                    AntClassLoader loader", "-                        = getProject().createClassLoader(classpath);", "+                    AntClassLoader loader =", "+                        getProject().createClassLoader(classpath);", "-            log(\"Using SAX2 reader \" + reader.getClass().getName(),", "+            log(", "+                \"Using SAX2 reader \" + reader.getClass().getName(),", "-                log(\"Using SAX1 parser \" + reader.getClass().getName(),", "+                log(", "+                    \"Using SAX1 parser \" + reader.getClass().getName(),", "-            }  else {", "-                throw new BuildException(INIT_FAILED_MSG", "-                    + reader.getClass().getName()", "-                    + \" implements nor SAX1 Parser nor SAX2 XMLReader.\");", "+            } else {", "+                throw new BuildException(", "+                    INIT_FAILED_MSG", "+                        + reader.getClass().getName()", "+                        + \" implements nor SAX1 Parser nor SAX2 XMLReader.\");", "+", "+            // Sets properties", "+            for (int i = 0; i < propertyList.size(); i++) {", "+                final Property prop = (Property) propertyList.elementAt(i);", "+                setProperty(prop.getName(), prop.getValue());", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f218fe7953539538bce75db2dae8adca", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/helper/ProjectHelper2.java", "commitBeforeChange": "eed11060d56db6336cccec940722e8e972e110ed", "commitAfterChange": "f15fb7639cb643c876f15a87659cf4a068689a33", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "         public void onStartElement(String uri, String tag, String qname,                                    Attributes attrs,                                    AntXmlContext context)             throws SAXParseException", "signatureAfterChange": "         public void onStartElement(String uri, String tag, String qname,                                    Attributes attrs,                                    AntXmlContext context)             throws SAXParseException", "diff": ["-            wrapper.setAttributes2(attrs);", "+", "+            for (int i = 0; i < attrs.getLength(); i++) {", "+                wrapper.setAttribute( attrs.getQName(i),", "+                        attrs.getValue(i));", "+            }"]}]}
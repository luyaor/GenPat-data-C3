{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0eb66f897831d4be1353a439e12615c4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47918a64f07d117ad0d0372edca76078", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "587a3c4f5ef9a0effe4e1065ac7500e1e6987018", "commitAfterChange": "f504cf793e6d72308577e1dc86c7bed47d65de12", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 92, "signatureBeforeChange": "     private Hashtable mapClasses(File path)", "signatureAfterChange": "      protected Vector findPackages(File srcDir)", "diff": ["-     */", "-    private Hashtable mapClasses(File path) {", "-        Hashtable map = new Hashtable();", "-", "-        Vector files = new Vector();", "-        getFiles(path, files);", "-", "-        Enumeration e = files.elements();", "-        while (e.hasMoreElements()) {", "-            File file = (File) e.nextElement();", "-            String packageName = getPackageName(file);", "-            if (packageName != null) map.put(packageName, file);", "-        }", "-", "-        return map;", "-    }", "+    protected Vector findPackages(File srcDir) {", "+    \tVector foundPkgs = new Vector();", "+    \t", "+    \tif ((srcDir != null) && (srcDir.isDirectory())) {", "+    \t\tscan(srcDir, \"\", foundPkgs);", "+    \t}", "+    \t", "+    \treturn foundPkgs;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cccbe71fc773727032f9badc53c682a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/start/org/apache/ant/start/Main.java", "commitBeforeChange": "752f49d5b18f9743f8e4a6dbdc8065d240d9c97a", "commitAfterChange": "da4e1a3aa99899d6aecc6d14c2a7498fa51647aa", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void start(String frontend, String defaultClass, String[] args)          throws InitException", "signatureAfterChange": "     public void start(String frontendName, String[] args)          throws InitException", "diff": ["-    public void start(String frontend, String defaultClass, String[] args)", "+    public void start(String frontendName, String[] args)", "-            AntEnvironment config = new AntEnvironment(getClass());", "+            AntEnvironment antEnv = new AntEnvironment(getClass());", "-            URL frontendJar = new URL(config.getLibraryURL(),", "-                \"frontend/\" + frontend + \".jar\");", "+            URL frontendJar = new URL(antEnv.getLibraryURL(),", "+                \"frontend/\" + frontendName + \".jar\");", "-                 = new URLClassLoader(frontendJars, config.getCoreLoader());", "+                 = new URLClassLoader(frontendJars, antEnv.getCoreLoader());", "-                        + frontend + \"\\\" - expected at \" + frontendJar);", "+                        + frontendName + \"\\\" - expected at \" + frontendJar);", "-                mainClass = defaultClass;", "-            }", "-", "-            if (mainClass == null) {", "-                     + \" for \\\"\" + frontend + \"\\\" frontend\");", "+                     + \" for \\\"\" + frontendName + \"\\\" frontend\");", "-            final Class[] param = {Class.forName(\"[Ljava.lang.String;\"),", "-                AntEnvironment.class};", "-            final Method startMethod", "-                 = frontendClass.getMethod(\"start\", param);", "-            final Object[] argument = {args, config};", "-", "-            startMethod.invoke(null, argument);", "+            Frontend frontend = (Frontend) frontendClass.newInstance();", "+            frontend.start(args, antEnv);"]}]}
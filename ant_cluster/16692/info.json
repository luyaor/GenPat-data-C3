{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "281698d76e7dd2d50dd91614ad5f0620", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "063f1c81864af62253f39a92b8a551c2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "c0644567309a28976e5f5bbb55f5197aae27cdd7", "commitAfterChange": "bbcbfb186ae539b9e9927daf1f0ab87ad43de049", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+        Path classpath = commandline.createClasspath(project);", "+        for (int i=0; i<classpathReferences.size(); i++) {", "+            Reference r = (Reference) classpathReferences.elementAt(i);", "+            Object o = r.getReferencedObject(project);", "+            if (o instanceof Path) {", "+                classpath.append((Path) o);", "+            } else {", "+                String msg = r.getRefId()+\" doesn\\'t denote a classpath\";", "+                throw new BuildException(msg, location);", "+            }", "+        }", "+        ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "757ef83b648d949d862877c929a12c85", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ide/VAJRemoteUtil.java", "commitBeforeChange": "00eb48bddc7183e3d960299901b931aefd1bf61a", "commitAfterChange": "4ac9a8932c13b7d5c9e8f15c7856a71d7044f236", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void sendRequest(String request)", "signatureAfterChange": "     private void sendRequest(String request, Vector parameters)", "diff": ["-    private void sendRequest(String request) {", "+    private void sendRequest(String request, Vector parameters) {", "+        ", "+        // Build request & URL encode parameters", "+        String url = request + \"?\";", "+        for (int i=0; i<parameters.size(); i++) {", "+            URLParam p = (URLParam)parameters.elementAt(i);", "+            url += p.getName() + \"=\" + URLEncoder.encode(p.getValue());", "+            url += (i==parameters.size()-1)?\"\":\"&\";", "+        }", "+", "+", "-            log(\"Request: \" + request, MSG_DEBUG);", "+            log(\"Request: \" + url, MSG_DEBUG);", "-            URL requestUrl = new URL(request);", "+            URL requestUrl = new URL(url);", "-                log(\"Can't get \" + request, MSG_ERR);", "-                throw new BuildException(\"Couldn't execute \" + request);", "+                log(\"Can't get \" + url, MSG_ERR);", "+                throw new BuildException(\"Couldn't execute \" + url);", "-            throw new BuildException(\"Couldn't execute \" + request);", "+            throw new BuildException(\"Couldn't execute \" + url);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85e0bbd0a3ff62ebeb8b0f72cba61aa6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Ant.java", "commitBeforeChange": "d5bfb5609dde48b93877185c1f61067e009e8499", "commitAfterChange": "1ba5087df429abe38dd22fe5c9ddbc343280f0ae", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "          public void init()", "signatureAfterChange": "      public void init()", "diff": ["-    ", "+", "-        p1 = new Project(project.getOutput(), project.getOutputLevel());", "+        p1 = new Project();", "+        Vector listeners = project.getBuildListeners();", "+        for (int i = 0; i < listeners.size(); i++) {", "+            p1.addBuildListener((BuildListener)listeners.elementAt(i));", "+        }", "+", "+        if (output != null) {", "+            try {", "+                PrintStream out = new PrintStream(new FileOutputStream(output));", "+                p1.addBuildListener(new DefaultLogger(out, Project.MSG_INFO));", "+            }", "+            catch( IOException ex ) {", "+                project.log( \"Ant: Can't set output to \" + output );", "+            }", "+        }", "+", "+        p1.init();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffd0aa183ca65499c172e1a93ad87d5f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/FileSet.java", "commitBeforeChange": "c4b5bdd374681d596ca0793c46701736892a258b", "commitAfterChange": "2054505cbb3cd60eda671e0070f085215d038f21", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public DirectoryScanner getDirectoryScanner(Project p)", "signatureAfterChange": "     public DirectoryScanner getDirectoryScanner(Project p)", "diff": ["-        ds.setIncludes(patterns.getIncludePatterns(p));", "-        ds.setExcludes(patterns.getExcludePatterns(p));", "+", "+        for (int i=0; i<additionalPatterns.size(); i++) {", "+            Object o = additionalPatterns.elementAt(i);", "+            if (o instanceof PatternSet) {", "+                defaultPatterns.append((PatternSet) o);", "+            } else {", "+                Reference r = (Reference) o;", "+                o = r.getReferencedObject(p);", "+                if (o instanceof PatternSet) {", "+                    defaultPatterns.append((PatternSet) o);", "+                } else {", "+                    String msg = r.getRefId()+\" doesn\\'t denote a patternset\";", "+                    throw new BuildException(msg);", "+                }", "+            }", "+        }", "+        ", "+        ds.setIncludes(defaultPatterns.getIncludePatterns(p));", "+        ds.setExcludes(defaultPatterns.getExcludePatterns(p));"]}]}
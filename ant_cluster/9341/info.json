{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6fb247ee501f7b42a0d14bd182fba4ab", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "863911150e86a6bbefb19840eda9c7e0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/manager/DefaultProjectManager.java", "commitBeforeChange": "8036bb0ebf115113a2a8f21a32071e74a61cc2c6", "commitAfterChange": "1c204914d03e9bc53afb4ebf3c56a0181c10ab51", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private ExecutionFrame createExecutionFrame( final Project project )         throws TaskException", "signatureAfterChange": "      private ExecutionFrame createExecutionFrame( final Project project )         throws TaskException", "diff": ["+", "-        componentManager.put( TypeManager.ROLE, m_typeManager.createChildTypeManager() );", "+        final TypeManager typeManager = m_typeManager.createChildTypeManager();", "+        componentManager.put( TypeManager.ROLE, typeManager );", "+", "+        //We need to create a new deployer so that it deploys", "+        //to project specific TypeManager", "+        final DefaultDeployer deployer = new DefaultDeployer();", "+        deployer.setLogger( getLogger() );", "+", "+        try { deployer.compose( componentManager ); }", "+        catch( final ComponentException ce )", "+        {", "+            throw new TaskException( \"Error configuring deployer\", ce );", "+        }", "+", "+        //HACK: Didn't call initialize because Deployer contained in Embeddor", "+        // Already initialized and this would be reduendent", "+        //deployer.initialize();", "+", "+        componentManager.put( Deployer.ROLE, deployer );", "+", "+        deployTypeLib( deployer, project );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7bd08f7b196c238478ee467612c07d3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/workspace/DefaultWorkspace.java", "commitBeforeChange": "8d226e312c364e3465737658341d24cf795c3393", "commitAfterChange": "bc34bb06ca8b29568e31990be726d04559ca2972", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private ExecutionFrame createExecutionFrame( final Project project )         throws TaskException", "signatureAfterChange": "      private ExecutionFrame createExecutionFrame( final Project project )         throws TaskException", "diff": ["+        //try", "+        //{", "+        //    //Add VFS manager", "+        //    // TODO - need to drive this from a typelib descriptor, plus", "+        //    // should be adding services to the root frame, rather than here", "+        //    final DefaultFileSystemManager vfsManager = new DefaultFileSystemManager();", "+        //    vfsManager.setBaseFile( project.getBaseDirectory() );", "+        //    componentManager.put( FileSystemManager.ROLE, vfsManager );", "+        //}", "+        //catch( Exception e )", "+        //{", "+        //    throw new TaskException( e.getMessage(), e );", "+        //}", "+", "-        final DefaultDeployer deployer = new DefaultDeployer();", "-        deployer.enableLogging( getLogger() );", "-", "+        final Deployer deployer;", "-            deployer.compose( componentManager );", "+            deployer = m_deployer.createChildDeployer( componentManager );", "+            componentManager.put( Deployer.ROLE, deployer );", "-        catch( final ComponentException ce )", "+        catch( ComponentException e )", "-            final String message = REZ.getString( \"bad-deployer-config.error\" );", "-            throw new TaskException( message, ce );", "+            throw new TaskException( e.getMessage(), e );", "-        //HACK: Didn't call initialize because Deployer contained in Embeddor", "-        // Already initialized and this would be reduendent", "-        //deployer.initialize();", "-", "-        componentManager.put( Deployer.ROLE, deployer );", "-", "+        // Deploy the imported typelibs"]}]}
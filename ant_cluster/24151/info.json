{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "137d3726f3735095edc4e887a306ec3a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19c8d414b0814baf08b31c1d0fa5fcae", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/ManifestClassPathTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "      public void testDifferentWindowsDrive()", "signatureAfterChange": "      @Test     public void testDifferentWindowsDrive()", "diff": ["+    @Test", "-        if (!Os.isFamily(\"windows\")) {", "-            System.out.println(\"Test with drive letters only run on windows\");", "-        } else {", "-            // the lines below try to find a drive name different than the one containing the temp dir", "-            // if the temp dir is C will try to use D", "-            // if the temp dir is on D or other will try to use C", "-            File tmpdir = new File(System.getProperty(\"java.io.tmpdir\"));", "-            String driveLetter = \"C\";", "-            try {", "-                String tmpCanonicalPath = tmpdir.getCanonicalPath();", "-                driveLetter = tmpCanonicalPath.substring(1).toUpperCase();", "-            } catch (IOException ioe) {", "-                System.out.println(\"exception happened getting canonical path of java.io.tmpdir : \" + ioe.getMessage());", "-            }", "-            String altDriveLetter = null;", "-            try {", "-                if (\"C\".equals(driveLetter)) {", "-                    altDriveLetter = \"D\";", "-                } else {", "-                    altDriveLetter = \"C\";", "-                }", "-                new java.io.File(altDriveLetter + \":/foo.txt\").getCanonicalPath();", "-            } catch (java.io.IOException e) {", "-                System.out.println(\"drive \" + altDriveLetter + \": doesn't exist or is not ready,\"", "-                                   + \" skipping test\");", "-                return;", "-            }", "-            project.setProperty(\"altDriveLetter\", altDriveLetter);", "-            expectBuildExceptionContaining(\"testDifferentDrive\",", "-                                           \"different drive\",", "-                                           \"No suitable relative path from \");", "-            assertPropertyUnset(\"cp\");", "+    \tAssume.assumeTrue(\"Test with drive letters only run on windows\", Os.isFamily(\"windows\"));", "+        // the lines below try to find a drive name different than the one containing the temp dir", "+        // if the temp dir is C will try to use D", "+        // if the temp dir is on D or other will try to use C", "+        File tmpdir = new File(System.getProperty(\"java.io.tmpdir\"));", "+        String driveLetter = \"C\";", "+        try {", "+            String tmpCanonicalPath = tmpdir.getCanonicalPath();", "+            driveLetter = tmpCanonicalPath.substring(0, 1).toUpperCase();", "+        } catch (IOException ioe) {", "+            System.out.println(\"exception happened getting canonical path of java.io.tmpdir : \" + ioe.getMessage());", "+        String altDriveLetter = null;", "+        try {", "+            if (\"C\".equals(driveLetter)) {", "+                altDriveLetter = \"D\";", "+            } else {", "+                altDriveLetter = \"C\";", "+            }", "+            new java.io.File(altDriveLetter + \":/foo.txt\").getCanonicalPath();", "+        } catch (java.io.IOException e) {", "+        \tAssume.assumeNoException(\"Drive \" + altDriveLetter + \": doesn't exist or is not ready\", e);", "+        }", "+        buildRule.getProject().setProperty(\"altDriveLetter\", altDriveLetter);", "+        ", "+        try {", "+\t\t\tbuildRule.executeTarget(\"testDifferentDrive\");", "+\t\t\tfail(\"Build exception should have been thrown on no alternative drive\");", "+\t\t} catch (BuildException ex) {", "+\t\t\tassertContains(\"No suitable relative path from \", ex.getMessage());", "+\t\t}", "+        ", "+        assertNull(buildRule.getProject().getProperty(\"cp\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "753b53edb9f7280a7b0d9b30a9333a50", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/filters/TokenFilterTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 18, "signatureBeforeChange": "      public void testFilterContainsRegex() throws IOException", "signatureAfterChange": "      @Test     public void testFilterContainsRegex() throws IOException", "diff": ["+    @Test", "-        if (! hasRegex(\"testFilterContainsRegex\"))", "-            return;", "-        String contents = getFileString(", "-            \"filtercontainsregex\", getProject().getProperty(\"output\") + \"/filtercontainsregex\");", "-        assertStringContains(contents, \"hello world\");", "-        assertStringNotContains(contents, \"this is the moon\");", "-        assertStringContains(contents, \"World here\");", "+    \tbuildRule.executeTarget(\"hasregex\");", "+        Assume.assumeTrue(\"Regex not present\", getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\").contains(\"bye world\"));", "+", "+        buildRule.executeTarget(\"filtercontainsregex\");", "+        String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/filtercontainsregex\");", "+        assertContains(\"hello world\", contents);", "+        assertNotContains(\"this is the moon\", contents);", "+        assertContains(\"World here\", contents);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bb9f685650442a2f308237797c7e4ca", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/filters/TokenFilterTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 17, "signatureBeforeChange": "      public void testContainsRegex() throws IOException", "signatureAfterChange": "      @Test     public void testContainsRegex() throws IOException", "diff": ["+    @Test", "-        if (! hasRegex(\"testContainsRegex\"))", "-            return;", "-        String contents = getFileString(", "-            \"containsregex\", getProject().getProperty(\"output\") + \"/containsregex\");", "-        assertStringContains(contents, \"hello world\");", "-        assertStringNotContains(contents, \"this is the moon\");", "-        assertStringContains(contents, \"World here\");", "+    \tbuildRule.executeTarget(\"hasregex\");", "+        Assume.assumeTrue(\"Regex not present\", getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\").contains(\"bye world\"));", "+", "+        //expectFileContains(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\", \"bye world\");", "+", "+        buildRule.executeTarget(\"containsregex\");", "+        String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/containsregex\");", "+        assertContains(\"hello world\", contents);", "+        assertNotContains(\"this is the moon\", contents);", "+        assertContains(\"World here\", contents);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ef3cffc1331387e62af0f7bbcc90777", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/filters/TokenFilterTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public void testReplaceRegex() throws IOException", "signatureAfterChange": "      @Test     public void testReplaceRegex() throws IOException", "diff": ["+    @Test", "-        if (! hasRegex(\"testReplaceRegex\"))", "-            return;", "-        String contents = getFileString(", "-            \"replaceregex\", getProject().getProperty(\"output\") + \"/replaceregex\");", "-        assertStringContains(contents, \"world world world world\");", "-        assertStringContains(contents, \"dog Cat dog\");", "-        assertStringContains(contents, \"moon Sun Sun\");", "-        assertStringContains(contents, \"found WhiteSpace\");", "-        assertStringContains(contents, \"Found digits [1234]\");", "-        assertStringNotContains(contents, \"This is a line with digits\");", "+", "+    \tbuildRule.executeTarget(\"hasregex\");", "+        Assume.assumeTrue(\"Regex not present\",", "+                getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\").contains(\"bye world\"));", "+", "+        buildRule.executeTarget(\"replaceregex\");", "+        String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregex\");", "+        assertContains(\"world world world world\", contents);", "+        assertContains(\"dog Cat dog\", contents);", "+        assertContains(\"moon Sun Sun\", contents);", "+        assertContains(\"found WhiteSpace\", contents);", "+        assertContains(\"Found digits [1234]\", contents);", "+        assertNotContains(\"This is a line with digits\", contents);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92e8d7ef660c9c7cdb2f4a85f0b72bd7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/CopyTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void test3()", "signatureAfterChange": "      @Test     public void test3()", "diff": ["+    @Test", "-        executeTarget(\"test3\");", "-        File file3  = new File(getOutputDir(), \"copytest3.tmp\");", "+        buildRule.executeTarget(\"test3\");", "+        File file3  = new File(buildRule.getProject().getProperty(\"output\"), \"copytest3.tmp\");", "+        //rollback file timestamp instead of delaying test", "+        FileUtilities.rollbackTimetamps(file3, 3);", "+        buildRule.executeTarget(\"test3Part2\");", "-        File file3a = new File(getOutputDir(), \"copytest3a.tmp\");", "+", "+        File file3a = new File(buildRule.getProject().getProperty(\"output\"), \"copytest3a.tmp\");", "-        File file3b = new File(getOutputDir(), \"copytest3b.tmp\");", "+        File file3b = new File(buildRule.getProject().getProperty(\"output\"), \"copytest3b.tmp\");", "-        File file3c = new File(getOutputDir(), \"copytest3c.tmp\");", "+        File file3c = new File(buildRule.getProject().getProperty(\"output\"), \"copytest3c.tmp\");"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6f0c75beca53355201a62bd477c439f2", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "394110626c6eed6fbebcc43790b1b2a3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "32f323668f263fad0bc38a43c6d4e6a1f4579c8a", "commitAfterChange": "a920aa9f305e0f998c908798c99b6d108f5d4a58", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+        checkAttributes();", "+", "+        for (Iterator iter = sources.iterator(); iter.hasNext(); ) {", "+            Resource r = (Resource) iter.next();", "+            URLProvider up = (URLProvider) r.as(URLProvider.class);", "+            URL source = up.getURL();", "+", "+            File dest = destination;", "+            if (destination.isDirectory()) {", "+                if (mapperElement != null) {", "+                    String path = source.getPath();", "+                    if (path.endsWith(\"/\")) {", "+                        path = path.substring(0, path.length() - 1);", "+                    }", "+                    int slash = path.lastIndexOf(\"/\");", "+                    if (slash > -1) {", "+                        path = path.substring(slash + 1);", "+                    }", "+                    dest = new File(destination, path);", "+                } else {", "+                    FileNameMapper mapper = mapperElement.getImplementation();", "+                    String[] d = mapper.mapFileName(r.getName());", "+                    if (d == null || d.length != 1) {", "+                        log(\"skipping \" + r + \" - mapper can't handle it\",", "+                            Project.MSG_WARN);", "+                        continue;", "+                    }", "+                    dest = new File(destination, d[0]);", "+                }", "+            }", "-            doGet(logLevel, progress);", "+            doGet(source, dest, logLevel, progress);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f251ef234ea0e036ddc3571cea75090", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteOn.java", "commitBeforeChange": "3732eb195b3d24d6480a2d7edb2818b325a3e199", "commitAfterChange": "b0507d4451b72856ddca45183143a96493e8ef3e", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 18, "signatureBeforeChange": "      protected void runExec(Execute exe) throws BuildException", "signatureAfterChange": "      protected void runExec(Execute exe) throws BuildException", "diff": ["+", "-                        if (haveExecuted) {", "+", "+                        if (redirectorElement != null) {", "+                            setupRedirector();", "+                            redirectorElement.configure(redirector, s[j]);", "+                        }", "+", "+                        if (redirectorElement != null || haveExecuted) {", "-                            // reading of pipes", "-                            exe.setStreamHandler(createHandler());", "+                            // reading of pipes;", "+                            // go ahead and do it always w/ nested redirectors", "+                            exe.setStreamHandler(redirector.createHandler());", "-                        if (haveExecuted) {", "+", "+                        if (redirectorElement != null) {", "+                            setupRedirector();", "+                            redirectorElement.configure(redirector, s[j]);", "+                        }", "+", "+                        if (redirectorElement != null || haveExecuted) {", "-                            // reading of pipes", "-                            exe.setStreamHandler(createHandler());", "+                            // reading of pipes;", "+                            // go ahead and do it always w/ nested redirectors", "+                            exe.setStreamHandler(redirector.createHandler());", "+            redirector.setAppendProperties(false);", "+            redirector.setProperties();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8d0b20b2d45843da2ebc68c15d492e9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "30b8b73ffa9bac34e10528dc5bd7376887617435", "commitAfterChange": "e5fcb123200cbdf1faccaf2a57fdf8c1e272d8bb", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "     protected void addParentDirs(File baseDir, String entry,                                  ZipOutputStream zOut, String prefix)         throws IOException", "signatureAfterChange": "     protected void addParentDirs(File baseDir, String entry,                                  ZipOutputStream zOut, String prefix)         throws IOException", "diff": ["-", "-        Stack directories = new Stack();", "-        int slashPos = entry.length();", "-", "-        while ((slashPos = entry.lastIndexOf((int)'/', slashPos-1)) != -1) {", "-            String dir = entry.substring(0, slashPos+1);", "-            if (addedDirs.get(prefix+dir) != null) {", "-                break;", "+        if( !doFilesonly ) {", "+            Stack directories = new Stack();", "+            int slashPos = entry.length();", "+            ", "+            while ((slashPos = entry.lastIndexOf((int)'/', slashPos-1)) != -1) {", "+                String dir = entry.substring(0, slashPos+1);", "+                if (addedDirs.get(prefix+dir) != null) {", "+                    break;", "+                }", "+                directories.push(dir);", "-            directories.push(dir);", "-        }", "-", "-        while (!directories.isEmpty()) {", "-            String dir = (String) directories.pop();", "-            File f = null;", "-            if (baseDir != null) {", "-                f = new File(baseDir, dir);", "-            } else {", "-                f = new File(dir);", "+            ", "+            while (!directories.isEmpty()) {", "+                String dir = (String) directories.pop();", "+                File f = null;", "+                if (baseDir != null) {", "+                    f = new File(baseDir, dir);", "+                } else {", "+                    f = new File(dir);", "+                }", "+                zipDir(f, zOut, prefix+dir);", "-            zipDir(f, zOut, prefix+dir);"]}]}
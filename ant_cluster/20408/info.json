{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cf198306b33e79b38e4c1c1bbde1a95b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3300be37c8f1aa5559ce59c102f100c6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/depend/Depend.java", "commitBeforeChange": "a1714edc18cb21c63c5285407456d4c409331908", "commitAfterChange": "37fe632d837d518878c90f674153a6b7cd5adcfd", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                log(\"Reverse Dependency Dump for \" + affectedClassMap.size() +", "-                    \" classes:\", Project.MSG_DEBUG);", "-                for (Enumeration e = affectedClassMap.keys(); e.hasMoreElements();) {", "-                    String className = (String)e.nextElement();", "-                    log(\" Class \" + className + \" affects:\", Project.MSG_DEBUG);", "-                    Hashtable affectedClasses = (Hashtable)affectedClassMap.get(className);", "-                    for (Enumeration e2 = affectedClasses.keys(); e2.hasMoreElements();) {", "-                        String affectedClass = (String)e2.nextElement();", "-                        ClassFileInfo info = (ClassFileInfo)affectedClasses.get(affectedClass);", "-                        log(\"    \" + affectedClass + \" in \" + info.absoluteFile.getPath(), Project.MSG_DEBUG);", "-                    }", "-                }", "-", "-                if (classpathDependencies != null) {", "-                    log(\"Classpath file dependencies (Forward):\", Project.MSG_DEBUG);", "-                    for (Enumeration e = classpathDependencies.keys(); e.hasMoreElements(); ) {", "-                        String className = (String)e.nextElement();", "-                        log(\" Class \" + className + \" depends on:\", Project.MSG_DEBUG);", "-                        Hashtable dependencies = (Hashtable)classpathDependencies.get(className);", "-                        for (Enumeration e2 = dependencies.elements(); e2.hasMoreElements(); ) {", "-                            File classpathFile = (File)e2.nextElement();", "-                            log(\"    \" + classpathFile.getPath(), Project.MSG_DEBUG);", "-                        }", "-                    }", "-                }", "+                dumpDependencies();", "-            // we now need to scan for out of date files. When we have the list", "-            // we go through and delete all class files which are affected by ", "-            // these files.", "-            outOfDateClasses = new Hashtable();", "-            for (int i = 0; i < srcPathList.length; i++) {", "-                File srcDir = (File)project.resolveFile(srcPathList[i]);", "-                if (srcDir.exists()) {", "-                    DirectoryScanner ds = this.getDirectoryScanner(srcDir);", "-                    String[] files = ds.getIncludedFiles();", "-                    scanDir(srcDir, files);", "-                }", "-            }", "-", "-            // now check classpath file dependencies", "-            if (classpathDependencies != null) {", "-                for (Enumeration e = classpathDependencies.keys(); e.hasMoreElements();) {", "-                    String className = (String)e.nextElement();", "-                    if (!outOfDateClasses.containsKey(className)) {", "-                        ClassFileInfo info = (ClassFileInfo)classFileInfoMap.get(className);", "-", "-                        // if we have no info about the class - it may have been deleted already and we", "-                        // are using cached info.", "-                        if (info != null) {", "-                            Hashtable dependencies = (Hashtable)classpathDependencies.get(className);", "-                            for (Enumeration e2 = dependencies.elements(); e2.hasMoreElements(); ) {", "-                                File classpathFile = (File)e2.nextElement();", "-                                if (classpathFile.lastModified() ", "-                                    > (info.absoluteFile.lastModified() + TIME_TOLERANCE)) {", "-                                    log(\"Class \" + className +", "-                                        \" is out of date with respect to \" + classpathFile, Project.MSG_DEBUG);", "-                                    outOfDateClasses.put(className, className);", "-                                    break;", "-                                }", "-                            }", "-                        }", "-                    }", "-                }", "-            }", "-", "-            // we now have a complete list of classes which are out of date", "-            // We scan through the affected classes, deleting any affected classes.", "+            determineOutOfDateClasses(srcPathList);", "-            log(\"Deleted \" + count + \" out of date files in \" + duration + \" seconds\");", "+            log(\"Deleted \" + count + \" out of date files in \" ", "+                + duration + \" seconds\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "652ecec64274134b38ced5fa55a6a2d3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/depend/Depend.java", "commitBeforeChange": "2bb82ea3965603288bc8defcacdf2dcb1e549fe2", "commitAfterChange": "798eedafd9e38fb45daae1aa139ca40b7b23f493", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        ", "+            ", "-        ", "+            ", "-        ", "+            ", "- ", "-/*            ", "-            for (Enumeration e = affectedClassMap.keys(); e.hasMoreElements(); ) {", "-                String className = (String)e.nextElement();", "-                log(\"Class \" + className + \" affects:\", Project.MSG_DEBUG);", "-                Hashtable affectedClasses = (Hashtable)affectedClassMap.get(className);", "-                for (Enumeration e2 = affectedClasses.keys(); e2.hasMoreElements(); ) {", "-                    String affectedClass = (String)e2.nextElement();", "-                    ClassFileInfo info = (ClassFileInfo)affectedClasses.get(affectedClass);", "-                    log(\"   \" + affectedClass + \" in \" + info.absoluteFile.getPath(), Project.MSG_DEBUG);", "+            ", "+            if (dump) {            ", "+                log(\"Reverse Dependency Dump for \" + affectedClassMap.size() + ", "+                    \" classes:\", Project.MSG_DEBUG);", "+                for (Enumeration e = affectedClassMap.keys(); e.hasMoreElements(); ) {", "+                    String className = (String)e.nextElement();", "+                    log(\" Class \" + className + \" affects:\", Project.MSG_DEBUG);", "+                    Hashtable affectedClasses = (Hashtable)affectedClassMap.get(className);", "+                    for (Enumeration e2 = affectedClasses.keys(); e2.hasMoreElements(); ) {", "+                        String affectedClass = (String)e2.nextElement();", "+                        ClassFileInfo info = (ClassFileInfo)affectedClasses.get(affectedClass);", "+                        log(\"    \" + affectedClass + \" in \" + info.absoluteFile.getPath(), Project.MSG_DEBUG);", "+                    }", "+                ", "+                if (classJarDependencies != null) {", "+                    log(\"Jar dependencies (Forward):\", Project.MSG_DEBUG);", "+                    for (Enumeration e = classJarDependencies.keys(); e.hasMoreElements();) { ", "+                        String className = (String)e.nextElement();", "+                        log(\" Class \" + className + \" depends on:\", Project.MSG_DEBUG);", "+                        Hashtable jarDependencies = (Hashtable)classJarDependencies.get(className);", "+                        for (Enumeration e2 = jarDependencies.elements(); e2.hasMoreElements();) {", "+                            File jarFile = (File)e2.nextElement();", "+                            log(\"    \" + jarFile.getPath(), Project.MSG_DEBUG);", "+                        }", "+                    }", "+                }", "+                            ", "-*/            ", "+            ", "-            outOfDateClasses = new Vector();", "-            for (int i=0; i<srcPathList.length; i++) {", "+            outOfDateClasses = new Hashtable();", "+            for (int i=0; i < srcPathList.length; i++) {", "-        ", "-        ", "-        ", "+                }", "+            }", "+", "+            // now check jar dependencies", "+            if (classJarDependencies != null) {", "+                for (Enumeration e = classJarDependencies.keys(); e.hasMoreElements();) { ", "+                    String className = (String)e.nextElement();", "+                    if (!outOfDateClasses.containsKey(className)) {", "+                        ClassFileInfo info = (ClassFileInfo)classFileInfoMap.get(className);", "+                        Hashtable jarDependencies = (Hashtable)classJarDependencies.get(className);", "+                        for (Enumeration e2 = jarDependencies.elements(); e2.hasMoreElements();) {", "+                            File jarFile = (File)e2.nextElement();", "+                            if (jarFile.lastModified() > info.absoluteFile.lastModified()) {", "+                                log(\"Class \" + className + ", "+                                    \" is out of date with respect to \" + jarFile, Project.MSG_DEBUG);", "+                                outOfDateClasses.put(className, className);", "+                                break;", "+                            }", "+                        }", "+                    }", "-            deleteAllAffectedFiles();", "+            int count = deleteAllAffectedFiles();", "-            log(\"Duration = \" + (System.currentTimeMillis() - start));", "+            long duration = (System.currentTimeMillis() - start) / 1000;", "+            log(\"Deleted \" + count + \" out of date files in \" + duration + \" seconds\");"]}]}
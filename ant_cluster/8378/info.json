{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7878c2144d4de17715f8f14d6f0f55ae", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0711980a0debd00cf1e2d488612b8c6d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/modules/basic/Property.java", "commitBeforeChange": "2f4b71ebb9a0b10e189a803e3ad565302736d060", "commitAfterChange": "6f3f9cca3e46d9b295f612635ddc47d887d760ce", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void configure( final Configuration configuration )         throws ConfigurationException", "signatureAfterChange": "      public void configure( final Configuration configuration )         throws ConfigurationException", "diff": ["-            final Object object = getContext().resolveValue( value );", "+            ", "+            Object object = null;", "+", "+            try { object = getContext().resolveValue( value ); }", "+            catch( final AntException ae )", "+            {", "+                throw new ConfigurationException( \"Error resolving value: \" + value, ae );", "+            }", "-                throw new AntException( \"Value for attribute \" + name + \"resolved to null\" );", "+                throw new ConfigurationException( \"Value for attribute \" + name + \"resolved to null\" );", "-                setValue( object );", "+                try { setValue( object ); }", "+                catch( final AntException ae )", "+                {", "+                    throw new ConfigurationException( \"Error setting value: \" + value, ae );", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87cb1fd60fe5d9aa866f97899e397c67", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/configuration/DefaultConfigurer.java", "commitBeforeChange": "c31e31c52a1f624e72be505d788db9be42b87e5d", "commitAfterChange": "48c54a521235f746024ae8facc272e049d0e1cf5", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      protected boolean setValue( final Object object,                                  Object value,                                  final Method method,                                 final Class sourceClass,                                 final String source,                                 final Context context )         throws ConfigurationException", "signatureAfterChange": "      protected boolean setValue( final Object object,                                 Object value,                                 final Method method,                                 final Class sourceClass,                                 final String source,                                 final Context context )         throws ConfigurationException", "diff": ["-    protected boolean setValue( final Object object, ", "-                                Object value, ", "+    protected boolean setValue( final Object object,", "+                                Object value,", "-        ", "+", "-                m_logger.debug( \"Failed to find converter \", ce );", "+                getLogger().debug( \"Failed to find converter \", ce );", "-            throw new ConfigurationException( \"Error converting attribute for \" + ", "+            throw new ConfigurationException( \"Error converting attribute for \" +", "-        ", "+", "-            throw new ConfigurationException( \"Error retrieving methods with \" + ", "+            throw new ConfigurationException( \"Error retrieving methods with \" +", "-            throw new ConfigurationException( \"Error calling method attribute \" + ", "+            throw new ConfigurationException( \"Error calling method attribute \" +"]}]}
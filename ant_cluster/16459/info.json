{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5c60aa94cb49547435df8fe3f1b22beb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3b724ffa0a77609f50f40bb5e553130", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/LayoutPreservingProperties.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      public void store(OutputStream out, String header) throws IOException", "signatureAfterChange": "      @Override \tpublic void store(final OutputStream out, final String header) throws IOException", "diff": ["-    public void store(OutputStream out, String header) throws IOException {", "-        OutputStreamWriter osw = new OutputStreamWriter(out, ResourceUtils.ISO_8859_1);", "+    @Override", "+\tpublic void store(final OutputStream out, final String header) throws IOException {", "+        final OutputStreamWriter osw = new OutputStreamWriter(out, ResourceUtils.ISO_8859_1);", "-        int totalLines = logicalLines.size();", "+        final int totalLines = logicalLines.size();", "-            } catch (java.text.ParseException pe) {", "+            } catch (final java.text.ParseException pe) {", "-        for (Iterator i = logicalLines.subList(skipLines, totalLines).iterator();", "-             i.hasNext(); ) {", "-            LogicalLine line = (LogicalLine) i.next();", "+        for (final Iterator i = logicalLines.subList(skipLines, totalLines).iterator();", "+             i.hasNext();) {", "+            final LogicalLine line = (LogicalLine) i.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8bd1eaaddadfc84987bac5480e6f1e5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public Object createElement(Project project, Object parent, String elementName)             throws BuildException", "signatureAfterChange": "     @Deprecated \tpublic Object createElement(final Project project, final Object parent, final String elementName)             throws BuildException", "diff": ["-    public Object createElement(Project project, Object parent, String elementName)", "+    @Deprecated", "+\tpublic Object createElement(final Project project, final Object parent, final String elementName)", "-        NestedCreator nc = getNestedCreator(project, \"\", parent, elementName, null);", "+        final NestedCreator nc = getNestedCreator(project, \"\", parent, elementName, null);", "-            Object nestedElement = nc.create(project, parent, null);", "+            final Object nestedElement = nc.create(project, parent, null);", "-        } catch (IllegalAccessException ie) {", "+        } catch (final IllegalAccessException ie) {", "-        } catch (InstantiationException ine) {", "+        } catch (final InstantiationException ine) {", "-        } catch (InvocationTargetException ite) {", "+        } catch (final InvocationTargetException ite) {"]}]}
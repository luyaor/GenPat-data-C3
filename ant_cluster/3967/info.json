{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c7ac747d23280ae35565b1cfb7f48576", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49cb71131a71115031ed7e24c813fb81", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Antlib.java", "commitBeforeChange": "1d86fa90cf45aacdf5fc9d61e081895f1c099836", "commitAfterChange": "99b22a7da3308ae6800e2b6d95ec3827b54c852f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void execute()", "signatureAfterChange": "     public void execute()", "diff": ["-        ComponentHelper helper =", "-            ComponentHelper.getComponentHelper(getProject());", "-        helper.enterAntLib();", "-        try {", "-            for (Iterator i = tasks.iterator(); i.hasNext();) {", "-                UnknownElement ue = (UnknownElement) i.next();", "-                ue.maybeConfigure();", "-                setLocation(ue.getLocation());", "-                Task t = ue.getTask();", "-                if (t == null) {", "-                    continue;", "-                }", "-                if (t instanceof AntlibInterface) {", "-                    AntlibInterface d = (AntlibInterface) t;", "-                    d.setURI(uri);", "-                    d.setAntlibClassLoader(getClassLoader());", "-                }", "-                t.init();", "-                t.execute();", "+        for (Iterator i = tasks.iterator(); i.hasNext();) {", "+            UnknownElement ue = (UnknownElement) i.next();", "+            ue.maybeConfigure();", "+            setLocation(ue.getLocation());", "+            Task t = ue.getTask();", "+            if (t == null) {", "+                continue;", "-        } finally {", "-            helper.exitAntLib();", "+            if (t instanceof AntlibInterface) {", "+                AntlibInterface d = (AntlibInterface) t;", "+                d.setURI(uri);", "+                d.setAntlibClassLoader(getClassLoader());", "+            }", "+            t.init();", "+            t.execute();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6af8422fb531eef4f61f3d6f67615a0e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/BatchTest.java", "commitBeforeChange": "e9117208e20934276266169c6b434a102371883e", "commitAfterChange": "c30a74289ebfd6c0f714cb63bc952a6340b5fca6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": "          public final Object nextElement() throws NoSuchElementException", "signatureAfterChange": "     private JUnitTest createJUnitTest(String classname)", "diff": ["-", "-        public final Object nextElement() throws NoSuchElementException{", "-            if(hasMoreElements()){", "-                JUnitTest test = new JUnitTest(javaToClass(files[i]));", "-                test.setHaltonerror(haltOnError);", "-                test.setHaltonfailure(haltOnFail);", "-                test.setFork(fork);", "-                test.setIf(ifProperty);", "-                test.setUnless(unlessProperty);", "-                test.setTodir(destDir);", "-                Enumeration list = formatters.elements();", "-                while (list.hasMoreElements()) {", "-                    test.addFormatter((FormatterElement)list.nextElement());", "-                }", "-                i++;", "-                return test;", "-            }", "-            throw new NoSuchElementException();", "-        }", "+     */", "+    private JUnitTest createJUnitTest(String classname){", "+        JUnitTest test = new JUnitTest();", "+        test.setName(classname);", "+        test.setHaltonerror(this.haltOnError);", "+        test.setHaltonfailure(this.haltOnFail);", "+        test.setFork(this.fork);", "+        test.setIf(this.ifProperty);", "+        test.setUnless(this.unlessProperty);", "+        test.setTodir(this.destDir);", "+        Enumeration list = this.formatters.elements();", "+        while (list.hasMoreElements()) {", "+            test.addFormatter((FormatterElement)list.nextElement());", "+        }", "+        return test;", "+    }"]}]}
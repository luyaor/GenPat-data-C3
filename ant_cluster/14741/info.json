{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b553d6fedf332baebec7153dbbad533", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ea682e0d88b74c92cf4e46fe9c6c77e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "b0b920b08fae74de3fd7a7dd5efbca9e8cf379e6", "commitAfterChange": "114d55869f46b382375b6b32ddc17bb2e5fc598c", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 31, "signatureBeforeChange": "     public static void main(String[] args) throws IOException", "signatureAfterChange": "     public static void main(String[] args) throws IOException", "diff": ["+        String[] methods = null;", "-            if (args[i].startsWith(Constants.HALT_ON_ERROR)) {", "+            if (args[i].startsWith(Constants.METHOD_NAMES)) {", "+                try {", "+                    String methodsList = args[i].substring(Constants.METHOD_NAMES.length());", "+                    methods = JUnitTest.parseTestMethodNamesList(methodsList);", "+                } catch (IllegalArgumentException ex) {", "+                    System.err.println(\"Invalid specification of test method names: \" + args[i]);", "+                    System.exit(ERRORS);", "+                }", "+            } else if (args[i].startsWith(Constants.HALT_ON_ERROR)) {", "+                String[] testMethodNames;", "-                    testCaseName = st.nextToken();", "+                    String testListSpec = st.nextToken();", "+                    int colonIndex = testListSpec.indexOf(':');", "+                    if (colonIndex == -1) {", "+                        testCaseName = testListSpec;", "+                        testMethodNames = null;", "+                    } else {", "+                        testCaseName = testListSpec.substring(0, colonIndex);", "+                        testMethodNames = JUnitTest.parseTestMethodNamesList(", "+                                                    testListSpec", "+                                                    .substring(colonIndex + 1)", "+                                                    .replace('+', ','));", "+                    }", "-                    code = launch(t, haltError, stackfilter, haltFail,", "+                    code = launch(t, testMethodNames, haltError, stackfilter, haltFail,", "-                t, haltError, stackfilter, haltFail,", "+                t, methods, haltError, stackfilter, haltFail,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef74a1d2f56480def076bd7efa577f0d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/build/Checksum.java", "commitBeforeChange": "040407cd4d056c98bbe00e6b99dcd5f02d22d268", "commitAfterChange": "89770b70fe1cc567b9a938123a4e803aa6d57072", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 11, "signatureBeforeChange": "      private boolean z( final File src, boolean checksumMatches )         throws TaskException", "signatureAfterChange": "      private boolean z( final File src, boolean checksumMatches )         throws TaskException", "diff": ["-                if( m_isCondition )", "-                {", "-                    checksumMatches = checksum.equals( m_property );", "-                }", "-                else", "-                {", "-                    final Object value = checksum;", "-                    getContext().setProperty( prop, value );", "-                }", "+                checksumMatches = checksum.equals( m_property );", "+                getContext().setProperty( prop, checksum );", "-                if( m_isCondition )", "-                {", "-                    if( file.exists() &&", "-                        file.length() == checksum.length() )", "-                    {", "-                        fis = new FileInputStream( file );", "-                        InputStreamReader isr = new InputStreamReader( fis );", "-                        BufferedReader br = new BufferedReader( isr );", "-                        String suppliedChecksum = br.readLine();", "-                        fis.close();", "-                        fis = null;", "-                        br.close();", "-                        isr.close();", "-                        checksumMatches =", "-                            checksum.equals( suppliedChecksum );", "-                    }", "-                    else", "-                    {", "-                        checksumMatches = false;", "-                    }", "-                }", "-                else", "-                {", "-                    fos = new FileOutputStream( file );", "-                    fos.write( checksum.getBytes() );", "-                    fos.close();", "-                    fos = null;", "-                }", "+                fos = new FileOutputStream( file );", "+                fos.write( checksum.getBytes() );", "+                fos.close();", "+                fos = null;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7da4a8f1738cab96b3e4ac1c384f0832", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cb869a3d249cf8f4949a767091c4c85", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/api/DefaultTaskContext.java", "commitBeforeChange": "21a88b996ae1899e19a7062eeb3fe214cb2cbe4f", "commitAfterChange": "80712682289dee8200289b46365bdb5066d1d2f7", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public Object resolveValue( final String property )         throws TaskException", "signatureAfterChange": "     public DefaultTaskContext( final Map contextData )", "diff": ["+     */", "+    public DefaultTaskContext( final Map contextData )", "+    {", "+        this( contextData );", "+    }", "-     */", "-    public Object resolveValue( final String property )", "-        throws TaskException", "-    {", "-        try { return PropertyUtil.resolveProperty( property, this, false ); }", "-        catch( final PropertyException pe )", "-        {", "-            throw new TaskException( \"Error resolving \" + property + \" due to \" + pe.getMessage(),", "-                                     pe );", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdf16951624dc758ccd75e002122de3c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/types/Path.java", "commitBeforeChange": "6a20789293e6588a94560a11697fb59dd0d9338c", "commitAfterChange": "d319ab594b9d0b5a3a2ee264845172ca590496f3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void addExisting( final Path source )         throws TaskException", "signatureAfterChange": "     public void setLocation( final File location )", "diff": ["+     */", "+    public void setLocation( final File location )", "+    {", "+        addLocation( location );", "+    }", "-     */", "-    public void addExisting( final Path source )", "-        throws TaskException", "-    {", "-        final String[] list = source.list();", "-        for( int i = 0; i < list.length; i++ )", "-        {", "-            final File file = new File( list[ i ] );", "-            if( file.exists() )", "-            {", "-                addLocation( file );", "-            }", "-        }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6a38c0c970f140e553709ff8b9b29b0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/Path.java", "commitBeforeChange": "20dede5ad87cf903e9be1a39d67312d7f39dfcd0", "commitAfterChange": "a8d4fe6d9b8c7a4adb1704b12de610dc6e18fe94", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void setPath(String path)", "signatureAfterChange": "          public void setPath(String path)", "diff": ["+", "+        public void setPath(String path) {", "+            parts = Path.translatePath(project, path);", "+        }", "-     */", "-    public void setPath(String path) {", "-        final Vector elements = translatePath(project, path);", "-        for (int i=0; i < elements.size(); i++) {", "-            String element = (String) elements.elementAt(i);", "-            if (definition.indexOf(element) == -1) {", "-                definition.addElement(element);", "-            }", "-        }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1d0d2c63ee5ef367abb03e3aaae2046", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "51e2cc543512d445e415bc5b7c2a42f98ddf8446", "commitAfterChange": "8e955e3a2e84e093d19f8053f610c479a3f27478", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 6, "signatureBeforeChange": "     protected void addScanners(FileScanner[] scanners, int startIndex,                                 Vector fileSets)", "signatureAfterChange": "          public void setFullpath(String loc)", "diff": ["+        public void setFullpath(String loc) {", "+            fullpath = loc;", "+        }", "-     */", "-    protected void addScanners(FileScanner[] scanners, int startIndex, ", "-                               Vector fileSets) {", "-        for (int i=0; i<fileSets.size(); i++) {", "-            FileSet fs = (FileSet) fileSets.elementAt(i);", "-            scanners[startIndex+i] = fs.getDirectoryScanner(project);", "-        }", "-    }"]}]}
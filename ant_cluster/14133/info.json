{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ecacb88cbe8bd61752b75cabc19ea253", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01751c95858f8a3e3fbbbc9df44e6efc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/PropertySet.java", "commitBeforeChange": "7829faf36a6f4bc565e0e8b92aa85cc948718176", "commitAfterChange": "9caeed5081071d6a2de28844d0a724918f8c6d86", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 29, "signatureBeforeChange": "     public String toString()", "signatureAfterChange": "     public String toString()", "diff": ["-        StringBuffer b = new StringBuffer();", "-        TreeMap sorted = new TreeMap(getProperties());", "-        for (Iterator i = sorted.entrySet().iterator(); i.hasNext();) {", "-            Map.Entry e = (Map.Entry) i.next();", "+        StringBuilder b = new StringBuilder();", "+        TreeMap<String, Object> sorted = new TreeMap<String, Object>(getPropertyMap());", "+        for (Entry<String, Object> e : sorted.entrySet()) {", "-            b.append(e.getKey().toString());", "+            b.append(e.getKey());", "-            b.append(e.getValue().toString());", "+            b.append(e.getValue());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44a9428788aa82bf952173dc45f074bf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/Intersect.java", "commitBeforeChange": "bd7585adb01844d04d23a6b1707427f9f4a490ad", "commitAfterChange": "ea33301047ba2de74fa062155df4d6337e5d1392", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      private ArrayList collect(Object o)", "signatureAfterChange": "      private List<Resource> collect(ResourceCollection rc)", "diff": ["-    private ArrayList collect(Object o) {", "-        ArrayList result = new ArrayList();", "-        for (Iterator i = ((ResourceCollection) o).iterator(); i.hasNext();) {", "-            result.add(i.next());", "+    private List<Resource> collect(ResourceCollection rc) {", "+        List<Resource> result = new ArrayList<Resource>();", "+        for (Resource r : rc) {", "+            result.add(r);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e833edd4ce9bb895bcd805e3c511a50", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/selectors/modifiedselector/ModifiedSelector.java", "commitBeforeChange": "7829faf36a6f4bc565e0e8b92aa85cc948718176", "commitAfterChange": "9caeed5081071d6a2de28844d0a724918f8c6d86", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void configure()", "signatureAfterChange": "     public void configure()", "diff": ["-        Comparator defaultComparator = new EqualComparator();", "+        Comparator<? super String> defaultComparator = new EqualComparator();", "-        for (Iterator itConfig = configParameter.iterator(); itConfig.hasNext();) {", "-            Parameter par = (Parameter) itConfig.next();", "-            if (par.getName().indexOf(\".\") > 0) {", "+        for (Parameter parameter : configParameter) {", "+            if (parameter.getName().indexOf(\".\") > 0) {", "-                specialParameter.add(par);", "+                specialParameter.add(parameter);", "-                useParameter(par);", "+                useParameter(parameter);", "-        configParameter = new Vector();", "+        configParameter = new Vector<Parameter>();", "-                comparator = (Comparator) loadClass(", "-                    comparatorClass,", "-                    \"is not a Comparator.\",", "-                    Comparator.class);", "+                @SuppressWarnings(\"unchecked\")", "+                Comparator<? super String> localComparator = loadClass(comparatorClass, \"is not a Comparator.\", Comparator.class);", "+                comparator = localComparator;", "-        for (Iterator itSpecial = specialParameter.iterator(); itSpecial.hasNext();) {", "-            Parameter par = (Parameter) itSpecial.next();", "+        for (Iterator<Parameter> itSpecial = specialParameter.iterator(); itSpecial.hasNext();) {", "+            Parameter par = itSpecial.next();", "-        specialParameter = new Vector();", "+        specialParameter = new Vector<Parameter>();"]}]}
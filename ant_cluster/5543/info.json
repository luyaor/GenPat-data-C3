{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0104c1d8cb98140dcc97e4cd60ebb900", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f84cb412a70ae90bd841c62db392f81", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/launch/Launcher.java", "commitBeforeChange": "6867c1dd7e1ff94b1ab8f87a314a528eb847c69a", "commitAfterChange": "c12912c52bda86fe28ed7476165b6cc49ce8c0ee", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private void run(String[] args) throws MalformedURLException", "signatureAfterChange": "     private void run(String[] args) throws MalformedURLException", "diff": ["-        String libPath = \"\";", "-        String[] newargs = null;", "-        int argcount = -1;", "-        for (argcount = 0; argcount < args.length -1; argcount++) {", "-            if (args[argcount].equals(\"-lib\")) {", "-                libPath = args[argcount + 1];", "-                break;", "+", "+        List libPaths = new ArrayList();", "+        List argList = new ArrayList();", "+        String[] newArgs;", "+", "+        for (int i = 0; i < args.length; ++i) {", "+            if (args[i].equals(\"-lib\")) {", "+                if (i == args.length - 1) {", "+                    throw new IllegalStateException(\"The -lib argument must \"", "+                        + \"be followed by a library location\");", "+                }", "+                libPaths.add(args[++i]);", "+            } else {", "+                argList.add(args[i]);", "-        }", "-        if (args.length > 0 && args[args.length -1].equals(\"-lib\")) {", "-            // if the last argument is -lib", "-            // remove it from the arguments passed to Launcher", "-            //", "-            newargs = new String[args.length - 1];", "-            System.arraycopy(args, 0, newargs, 0, args.length -1);", "-        } else if (libPath.equals(\"\")) {", "-           newargs = new String[args.length];", "-           System.arraycopy(args, 0, newargs, 0, args.length);", "-        }  else {", "-            newargs = new String[args.length - 2];", "-            // copy the beginning of the args array", "-            if (argcount > 0 ) {", "-                System.arraycopy(args, 0, newargs, 0 ,argcount);", "-            }", "-            // copy the end of the args array", "-            if ((argcount + 2 < args.length) && argcount > 0) {", "-                System.arraycopy(args, argcount + 2, newargs, argcount, args.length - (argcount + 2));", "-            }", "-        }", "-        StringTokenizer myTokenizer = new StringTokenizer(libPath, System.getProperty(\"path.separator\"));", "-        URL[] classPathJars = new URL[myTokenizer.countTokens()];", "-        int classPathJarCount = 0;", "-        while (myTokenizer.hasMoreElements()) {", "-            String token = myTokenizer.nextToken();", "-            classPathJars[classPathJarCount++] = new File(token).toURL();", "+        if (libPaths.size() == 0) {", "+            newArgs = args;", "+        } else {", "+            newArgs = (String[]) argList.toArray(new String[0]);", "+        }", "+", "+        List libPathURLs = new ArrayList();", "+        for (Iterator i = libPaths.iterator(); i.hasNext();) {", "+            String libPath = (String) i.next();", "+            StringTokenizer myTokenizer", "+                = new StringTokenizer(libPath, System.getProperty(\"path.separator\"));", "+            while (myTokenizer.hasMoreElements()) {", "+                File element = new File(myTokenizer.nextToken());", "+                if (element.isDirectory()) {", "+                    // add any jars in the directory", "+                    URL[] dirURLs = Locator.getLocationURLs(element);", "+                    for (int j = 0; j < dirURLs.length; ++j) {", "+                        libPathURLs.add(dirURLs[j]);", "+                    }", "+                }", "+                libPathURLs.add(element.toURL());", "+            }", "+        }", "+", "+        URL[] libJars = (URL[])libPathURLs.toArray(new URL[0]);", "-        int numJars = classPathJars.length + userJars.length + systemJars.length;", "+        int numJars = libJars.length + userJars.length + systemJars.length;", "-        System.arraycopy(classPathJars, 0, jars, 0, classPathJars.length);", "-        System.arraycopy(userJars, 0, jars, classPathJars.length, userJars.length);", "-        System.arraycopy(systemJars, 0, jars, userJars.length + classPathJars.length,", "+        System.arraycopy(libJars, 0, jars, 0, libJars.length);", "+        System.arraycopy(userJars, 0, jars, libJars.length, userJars.length);", "+        System.arraycopy(systemJars, 0, jars, userJars.length + libJars.length,", "+        if (baseClassPath.charAt(baseClassPath.length() - 1)", "+                == File.pathSeparatorChar) {", "+            baseClassPath.setLength(baseClassPath.length() - 1);", "+        }", "-            main.startAnt(newargs, null, null);", "+            main.startAnt(newArgs, null, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff2f72c0c84ca83c9897adb4643298b5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteOn.java", "commitBeforeChange": "9ff2d6a1ab17e51f25cadf8de2a1b7ada8c15490", "commitAfterChange": "eefa2aba55ad71e6c5ee6e54748b1dc76025c7ac", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 10, "signatureBeforeChange": "     protected String[] getCommandline(String[] srcFiles, File baseDir)", "signatureAfterChange": "     protected String[] getCommandline(String[] srcFiles, File[] baseDirs)", "diff": ["-    protected String[] getCommandline(String[] srcFiles, File baseDir) {", "-        String[] orig = cmdl.getCommandline();", "-        String[] result = new String[orig.length+srcFiles.length];", "-", "-        int index = orig.length;", "-        if (srcFilePos != null) {", "-            index = srcFilePos.getPosition();", "+    protected String[] getCommandline(String[] srcFiles, File[] baseDirs) {", "+        Vector targets = new Vector();", "+        if (targetFilePos != null) {", "+            Hashtable addedFiles = new Hashtable();", "+            for (int i=0; i<srcFiles.length; i++) {", "+                String[] subTargets = mapper.mapFileName(srcFiles[i]);", "+                if (subTargets != null) {", "+                    for (int j=0; j<subTargets.length; j++) {", "+                        String name = (new File(destDir, subTargets[j])).getAbsolutePath();", "+                        if (!addedFiles.contains(name)) {", "+                            targets.addElement(name);", "+                            addedFiles.put(name, name);", "+                        }", "+                    }", "+                }", "+            }", "-        System.arraycopy(orig, 0, result, 0, index);", "-", "-        for (int i=0; i < srcFiles.length; i++) {", "-            result[index+i] = (new File(baseDir, srcFiles[i])).getAbsolutePath();", "-        }", "+        String[] targetFiles = new String[targets.size()];", "+        targets.copyInto(targetFiles);", "-        System.arraycopy(orig, index, result, index+srcFiles.length, ", "-                         orig.length-index);", "+        String[] orig = cmdl.getCommandline();", "+        String[] result = new String[orig.length+srcFiles.length+targetFiles.length];", "+", "+        int srcIndex = orig.length;", "+        if (srcFilePos != null) {", "+            srcIndex = srcFilePos.getPosition();", "+        }", "+", "+        if (targetFilePos != null) {", "+            int targetIndex = targetFilePos.getPosition();", "+", "+            if (srcIndex < targetIndex ", "+                || (srcIndex == targetIndex && srcIsFirst)) {", "+", "+                // 0 --> srcIndex", "+                System.arraycopy(orig, 0, result, 0, srcIndex);", "+                ", "+                // srcIndex --> targetIndex", "+                System.arraycopy(orig, srcIndex, result, ", "+                                 srcIndex + srcFiles.length,", "+                                 targetIndex - srcIndex);", "+                ", "+                // targets are already absolute file names", "+                System.arraycopy(targetFiles, 0, result, ", "+                                 targetIndex + srcFiles.length, ", "+                                 targetFiles.length);", "+                ", "+                // targetIndex --> end", "+                System.arraycopy(orig, targetIndex, result, ", "+                                 targetIndex + srcFiles.length + targetFiles.length,", "+                                 orig.length - targetIndex);", "+            } else {", "+                // 0 --> targetIndex", "+                System.arraycopy(orig, 0, result, 0, targetIndex);", "+                ", "+                // targets are already absolute file names", "+                System.arraycopy(targetFiles, 0, result, ", "+                                 targetIndex,", "+                                 targetFiles.length);", "+                ", "+                // targetIndex --> srcIndex", "+                System.arraycopy(orig, targetIndex, result, ", "+                                 targetIndex + targetFiles.length,", "+                                 srcIndex - targetIndex);", "+                ", "+                // srcIndex --> end", "+                System.arraycopy(orig, srcIndex, result, ", "+                                 srcIndex + srcFiles.length + targetFiles.length,", "+                                 orig.length - srcIndex);", "+                srcIndex += targetFiles.length;", "+            }", "+", "+        } else { // no targetFilePos", "+            System.arraycopy(orig, 0, result, 0, srcIndex);", "+        }", "+", "+        // fill in source file names", "+        for (int i=0; i < srcFiles.length; i++) {", "+            result[srcIndex+i] = ", "+                (new File(baseDirs[i], srcFiles[i])).getAbsolutePath();", "+        }"]}]}
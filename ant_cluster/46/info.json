{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "db7366518ae6637900386c82f4939620", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "092bfe03c9b1863e13c4ad61d5532964", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/config/AntConfigHandler.java", "commitBeforeChange": "58257e4ff6cc42fbd00bdf71cb1ecce4b1e117cc", "commitAfterChange": "cba254e641320b3864c7d81345b5c1d1f8fe79dc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void startElement(String uri, String localName, String qualifiedName,                              Attributes attributes)          throws SAXParseException", "signatureAfterChange": "     public void startElement(String uri, String localName, String qualifiedName,                              Attributes attributes)          throws SAXParseException", "diff": ["-        try {", "-            if (qualifiedName.equals(\"loadlib\")) {", "-                LoadLibHandler loadlibHandler", "-                     = new LoadLibHandler();", "-                loadlibHandler.start(getParseContext(), getXMLReader(),", "-                    this, getLocator(), attributes, getElementSource(),", "-                    qualifiedName);", "-                config.addAntLibraryLocation(loadlibHandler.getLibLocation());", "-            } else if (qualifiedName.equals(\"libpath\")) {", "-                LibPathHandler libPathHandler", "-                     = new LibPathHandler();", "-                libPathHandler.start(getParseContext(), getXMLReader(),", "-                    this, getLocator(), attributes, getElementSource(),", "-                    qualifiedName);", "-", "-                if (libPathHandler.getLibraryPath() != null) {", "-                    config.addLibPath(libPathHandler.getLibraryId(),", "-                        libPathHandler.getLibraryPath());", "-                } else {", "-                    config.addLibURL(libPathHandler.getLibraryId(),", "-                        libPathHandler.getLibraryURL());", "-                }", "-", "-            } else {", "-                super.startElement(uri, localName, qualifiedName, attributes);", "-            }", "-        } catch (ConfigException e) {", "-            throw new SAXParseException(\"Unable to process config\",", "-                getLocator(), e);", "-        }", "+        // everything else is a task", "+        BuildElementHandler buildElementHandler = new BuildElementHandler();", "+        buildElementHandler.start(getParseContext(), getXMLReader(),", "+            this, getLocator(), attributes, getElementSource(),", "+            qualifiedName);", "+        config.addTask(buildElementHandler.getBuildElement());", "+//        try {", "+//        } catch (ConfigException e) {", "+//            throw new SAXParseException(\"Unable to process config\",", "+//                getLocator(), e);", "+//        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "362caf6b268896f98d9cf100f2f8eb99", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/dotnet/DotnetResource.java", "commitBeforeChange": "c5d224e2fabd860332b84182429505a5f2a2ee54", "commitAfterChange": "6f8402d926c54252e54ac79efa3f5480ab7323c3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public String getVbStyleParameter()", "signatureAfterChange": "      private String getParameter(String fileName, String name, boolean csharpStyle)", "diff": ["+", "+    private String getParameter(String fileName, String name, boolean csharpStyle) {", "+        StringBuffer buffer=new StringBuffer();", "+        buffer.append(isEmbed()?\"/resource\":\"/linkresource\");", "+        buffer.append(':');", "+        buffer.append(fileName);", "+        if (name!=null) {", "+            buffer.append(',');", "+            buffer.append(name);", "+            if (csharpStyle) {", "+                if (getPublic()!=null) {", "+                    throw new BuildException(", "+                        \"This compiler does not support the \"", "+                        +\"public/private option.\");", "+                }", "+                else {", "+                    if (getPublic()!=null) {", "+                        buffer.append(',');", "+                        buffer.append(getPublic().booleanValue()", "+                                      ?\"public\":\"private\");", "+", "+                    }", "+                }", "+            }", "+            else if (getPublic()!=null) {", "+                throw new BuildException(\"You cannot have a public or private \"", "+                                         +\"option without naming the resource\");", "+            }", "-    public String getVbStyleParameter() {", "-        StringBuffer buffer = new StringBuffer();", "-        buffer.append(isEmbed() ? \"/resource\" : \"/linkresource\");", "-        buffer.append(':');", "-        buffer.append(getFile().toString());", "-        if (getName() != null) {", "-            buffer.append(',');", "-            buffer.append(getName());", "-            if (getPublic() != null) {", "-                buffer.append(',');", "-                buffer.append(getPublic().booleanValue()", "-                        ? \"public\" : \"private\");", "-            }", "-        } else if (getPublic() != null) {", "-            throw new BuildException(\"You cannot have a public or private \"", "-                    + \"option without naming the resource\");", "-        }", "-        return buffer.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d8bdcd03e68fece54382251e965f678", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/listener/CommonsLoggingListener.java", "commitBeforeChange": "8372d91e2632e11426949885f056804ae7717537", "commitAfterChange": "988ec061641b11cce372f8d85e12aa9f0134a8ae", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void messageLogged(BuildEvent event)", "signatureAfterChange": "     public void messageLogged(BuildEvent event)", "diff": ["+            String categoryString=null;", "+            String categoryDetail=null;", "+", "+                    categoryString=\"org.apache.tools.ant.Project\";", "+                    categoryDetail=event.getProject().getName();", "+                } else {", "+                    categoryString= \"org.apache.tools.ant.Target\";", "+                    categoryDetail=event.getTarget().getName();", "+            } else {", "+                // It's a task - append the target", "+                if( event.getTarget() != null ) {", "+                    categoryString=categoryObject.getClass().getName();", "+                    categoryDetail=event.getTarget().getName();", "+                } else {", "+                    categoryString=categoryObject.getClass().getName();", "+                }", "+", "-            Log log = logFactory.getInstance(categoryObject.getClass().getName());", "-            switch (event.getPriority()) {", "-                case Project.MSG_ERR:", "-                    log.error(event.getMessage());", "-                    break;", "-                case Project.MSG_WARN:", "-                    log.warn(event.getMessage());", "-                    break;", "-                case Project.MSG_INFO:", "-                    log.info(event.getMessage());", "-                    break;", "-                case Project.MSG_VERBOSE:", "-                    log.debug(event.getMessage());", "-                    break;", "-                case Project.MSG_DEBUG:", "-                    log.debug(event.getMessage());", "-                    break;", "-                default:", "-                    log.error(event.getMessage());", "-                    break;", "-            }", "+            Log log = getLog(categoryString, categoryDetail);", "+            int priority=event.getPriority();", "+            String message=event.getMessage();", "+            realLog( log, message, priority , null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6933afe9780de14aee95be0fa1c4ddc6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/depend/bcel/DependencyVisitor.java", "commitBeforeChange": "ffd2a2d7c25b78eb5f50c182312acb9dcf01ccda", "commitAfterChange": "5722812dbe0cfda11a528c3e6c32b2b2b67b7960", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void visitConstantNameAndType(ConstantNameAndType obj)", "signatureAfterChange": "     public void visitConstantNameAndType(ConstantNameAndType obj)", "diff": ["-            addClass(classname);", "-            int index = classname.lastIndexOf(\".\");", "-            if (index != -1) {", "-                classname = classname.substring(0, index) + \"$\" +", "-                            classname.substring(index + 1);", "+            // does the class have a package structure", "+            int index = classname.lastIndexOf(\".\");            ", "+            if (index > 0) {", "+                char start;", "+                // check if the package structure is more than 1 level deep", "+                int index2 = classname.lastIndexOf(\".\", index -1);", "+                if (index2 != -1) {", "+                    // class name has more than 1 package level 'com.company.Class'", "+                    start = classname.charAt(index2 + 1);", "+                }", "+                else {", "+                    // class name has only 1 package level 'package.Class'", "+                    start = classname.charAt(0);", "+                }", "+                // Check to see if it's an inner class 'com.company.Class$Inner'", "+                if ((start > 0x40) && (start < 0x5B)) {", "+                    // first letter of the previous segment of the class name 'Class'", "+                    // is upper case ascii. so according to the spec it's an inner class", "+                    classname = classname.substring(0, index) + \"$\" +", "+                            classname.substring(index + 1);                            ", "+                    addClass(classname);", "+                }", "+                else {", "+                    // Add the class in dotted notation 'com.company.Class'                       ", "+                    addClass(classname);", "+                }                    ", "+            }", "+            else {               ", "+                // Add a class with no package 'Class'"]}]}
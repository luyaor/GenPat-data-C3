{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eff1f11c4b33fcdb7b64c91a98c940bf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0032258757fbfc3d1d9c0339330d3cc9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "10c41029aeaba31241f1a85f9b02591b357e20b6", "commitAfterChange": "818cb969adef1df0f5918ba62f80f62502d5e53e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "       public static int runTest(JUnitTest test)", "signatureAfterChange": "      private static void createAndStoreFormatter(String line)          throws BuildException", "diff": ["+    private static void createAndStoreFormatter(String line) ", "+        throws BuildException {", "-    public static int runTest(JUnitTest test) {", "-        final JUnitTestRunner runner = new JUnitTestRunner(test);", "-        runner.run();", "-        return runner.getRetCode();", "+        FormatterElement fe = new FormatterElement();", "+        StringTokenizer tok = new StringTokenizer(line, \",\");", "+        fe.setClassname(tok.nextToken());", "+        if (tok.hasMoreTokens()) {", "+            fe.setOutfile(new java.io.File(tok.nextToken()));", "+        }", "+        fromCmdLine.addElement(fe.createFormatter());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04ce3c4f6f3a1d171a1751e20b5e7f5d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/selectors/ContainsRegexpTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testContainsRegexp()", "signatureAfterChange": "      @Test     public void testContainsRegexp()", "diff": ["+    @Test", "-        TaskdefForRegexpTest MyTask =", "-            new TaskdefForRegexpTest(\"containsregexp\");", "-        try {", "-            MyTask.setUp();", "-            MyTask.test();", "-        } finally {", "-            MyTask.tearDown();", "+        buildRule.executeTarget(\"containsregexp\");", "+        File dir = new File(buildRule.getOutputDir(), \"regexpseltestdest\");", "+        File[] files = dir.listFiles();", "+        int filecount = files.length;", "+", "+        if (filecount != 1)  {", "+            assertEquals(\"ContainsRegexp test should have copied 1 file\",", "+                         1, files.length);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11a1e4ee8356689af4e508cb95d6ff54", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Tar.java", "commitBeforeChange": "1400dc3c1b536c70697f83be990b0725121cba90", "commitAfterChange": "b5fcf10604f56a8061d10f332570342b34cc7a9d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": "         public String getUserName()", "signatureAfterChange": "     protected boolean check(File basedir, String[] files)", "diff": ["+     */", "+    protected boolean check(File basedir, String[] files) {", "+        boolean upToDate = true;", "+        if (!archiveIsUpToDate(files, basedir)) {", "+            upToDate = false;", "+        }", "+", "+        for (int i = 0; i < files.length; ++i) {", "+            if (tarFile.equals(new File(basedir, files[i]))) {", "+                throw new BuildException(\"A tar file cannot include \"", "+                                         + \"itself\", getLocation());", "+            }", "+        }", "+        return upToDate;", "+    }", "-         */", "-        public String getUserName() {", "-            return userName;", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "343b7e16c7dc2a3fa7cfb78c969c3818", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/TraXLiaison.java", "commitBeforeChange": "6d5ce5b54d4424f74298d7aac6778539e286b8f4", "commitAfterChange": "44735223d94bae810d33e7f820d587bfb49728fd", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void transform(File infile, File outfile) throws Exception", "signatureAfterChange": "      public void transform(File infile, File outfile) throws Exception", "diff": ["-            StreamSource src = new StreamSource(fis);", "+            // FIXME: need to use a SAXSource as the source for the transform", "+            // so we can plug in our own entity resolver", "+            Source src = null;", "+            if (resolver != null) {", "+                if (tfactory.getFeature(SAXSource.FEATURE)) {", "+                    SAXParserFactory spFactory = SAXParserFactory.newInstance();", "+                    spFactory.setNamespaceAware( true ); ", "+                    XMLReader reader = spFactory.newSAXParser().getXMLReader();", "+                    reader.setEntityResolver(resolver);", "+                    src = new SAXSource(reader, new InputSource(fis));", "+                } else {", "+                    throw new IllegalStateException(\"xcatalog specified, but \"+", "+                        \"parser doesn't support SAX\");", "+                }", "+            } else {", "+                src = new StreamSource(fis);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52567a7c75c2eb36315210ebcfacac5c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/UnknownElement.java", "commitBeforeChange": "149ce34431423cd116e5d7175ff281c30565aa6a", "commitAfterChange": "5460755b447223e93e926e11a08e4df4f0e0ddb5", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private boolean handleChild(IntrospectionHelper ih,                                 Object parent, UnknownElement child,                                 String childTag,                                 RuntimeConfigurable childWrapper)", "signatureAfterChange": "     private boolean handleChild(IntrospectionHelper ih,                                 Object parent, UnknownElement child,                                 RuntimeConfigurable childWrapper)", "diff": ["-                                String childTag,", "-        if (ih.supportsNestedElement(childTag)) {", "-            Object realChild", "-                = ih.createElement(getProject(), parent, childTag);", "+        // backwards compatibility - element names of nested", "+        // elements have been all lower-case in Ant, except for", "+        // TaskContainers", "+        String childName = child.getTag().toLowerCase(Locale.US);", "+        if (ih.supportsNestedElement(childName)) {", "+            IntrospectionHelper.Creator creator =", "+                ih.getElementCreator(getProject(), parent, childName);", "+            creator.setPolyType(childWrapper.getPolyType());", "+            Object realChild=creator.create();", "+            childWrapper.setCreator(creator);", "-                childTask.setTaskName(childTag);", "-                childTask.setTaskType(childTag);", "+                childTask.setTaskName(childName);", "+                childTask.setTaskType(childName);", "+                childTask.setLocation(child.getLocation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6146d2203a7767d250e4ae9d4917e5ac", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ScriptRunner.java", "commitBeforeChange": "c902c100cddd399b3573cbf35487bb8db22fbea9", "commitAfterChange": "9936be269812cd80ee92432d1ccf3bfb69537e5a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void executeScript(String execName) throws BuildException", "signatureAfterChange": "     public void executeScript(String execName) throws BuildException", "diff": ["+        ClassLoader origContextClassLoader =", "+            Thread.currentThread().getContextClassLoader();", "+        ClassLoader scriptLoader = getClass().getClassLoader();", "+        if (classpath != null && project != null) {", "+            AntClassLoader loader = project.createClassLoader(classpath);", "+            loader.setParent(scriptLoader);", "+            scriptLoader = loader;", "+        }", "+            Thread.currentThread().setContextClassLoader(scriptLoader);", "+            manager.setClassLoader(scriptLoader);", "+        } finally {", "+             Thread.currentThread().setContextClassLoader(", "+                 origContextClassLoader);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6430f83a06f0780896b653536ad8d7e0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "3b1f2fca74ade338347b53d7f450d5dc1bdea0c9", "commitAfterChange": "585ca2b4d92ac5cc3bacfc5aa5ebeeee3fe8659a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     protected boolean isUpToDate(FileScanner[] scanners, File zipFile) throws BuildException", "signatureAfterChange": "     protected boolean isUpToDate(FileScanner[] scanners, File zipFile) throws BuildException", "diff": ["-        File[] files = grabFiles(scanners);", "+        String[][] fileNames = grabFileNames(scanners);", "+        File[] files = grabFiles(scanners, fileNames);", "-            // Probably unnecessary but just for clarity:", "-            for (int i=0; i<files.length; i++) {", "-                if (files[i].lastModified() > zipFile.lastModified()) {", "+", "+            SourceFileScanner sfs = new SourceFileScanner(this);", "+            MergingMapper mm = new MergingMapper();", "+            mm.setTo(zipFile.getAbsolutePath());", "+            for (int i=0; i<scanners.length; i++) {", "+                if (sfs.restrict(fileNames[i], scanners[i].getBasedir(), null,", "+                                 mm).length > 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b1dcd2e784dbfb5a4f66ac1f631895a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/SummaryJUnitResultFormatter.java", "commitBeforeChange": "e2a27ac310d437c34023e90de8a24c3f45b4af5b", "commitAfterChange": "724483eec5845878bec83940c3044dafdfadc7f1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void startTestSuite(JUnitTest suite)", "signatureAfterChange": "     public void startTestSuite(JUnitTest suite)", "diff": ["+        String newLine = System.getProperty(\"line.separator\");", "+        StringBuffer sb = new StringBuffer(\"Running \");", "+        sb.append(suite.getName());", "+        sb.append(newLine);", "+", "+        try {", "+            out.write(sb.toString().getBytes());", "+            out.flush();", "+        } catch (IOException ioex) {", "+            throw new BuildException(\"Unable to write summary output\", ioex);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af2a6da680e83530553e9ea6bf791c76", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/PropertyFile.java", "commitBeforeChange": "1c75ce2bee96873b6fbe22a9eada83d3f23c3e3d", "commitAfterChange": "37cf105bb344793a164900b1a09d678679e13946", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private void writeFile() throws BuildException", "signatureAfterChange": "      private void writeFile() throws BuildException", "diff": ["-        BufferedOutputStream bos = null;", "+        // Write to RAM first, as an OOME could otherwise produce a truncated file:", "+        ByteArrayOutputStream baos = new ByteArrayOutputStream();", "-            bos = new BufferedOutputStream(new FileOutputStream(propertyfile));", "-            properties.store(bos, comment);", "-        } catch (IOException ioe) {", "-            throw new BuildException(ioe, getLocation());", "-        } finally {", "-            FileUtils.close(bos);", "+            properties.store(baos, comment);", "+        } catch (IOException x) { // should not happen", "+            throw new BuildException(x, getLocation());", "+        }", "+        try {", "+            OutputStream os = new FileOutputStream(propertyfile);", "+            try {", "+                os.write(baos.toByteArray());", "+            } catch (IOException x) {", "+                propertyfile.delete(); // possibly corrupt", "+                throw new BuildException(x, getLocation());", "+            } finally {", "+                os.close();", "+            }", "+        } catch (IOException x) {", "+            throw new BuildException(x, getLocation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afb7a9cc53506455f8af040956cf86f9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/project/DefaultProjectEngine.java", "commitBeforeChange": "f6a78a634593cd4660e2efa17a80f71a927df3d5", "commitAfterChange": "1d3dc3765d4efd6ae54488feab07f6a17315ebe6", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": "              public void execute( final Project project, final String target )         throws AntException", "signatureAfterChange": "              public void execute( final Project project, final String target )         throws AntException", "diff": ["-        m_taskletEngine.contextualize( project.getContext() );", "-        executeTarget( \"<init>\", project.getImplicitTarget() );", "+        m_componentManager.put( \"org.apache.ant.project.Project\", project );", "-        final ArrayList done = new ArrayList();", "-        execute( project, target, done );", "+        final TaskletContext context = project.getContext();", "+", "+        final String projectName = (String)context.getProperty( Project.PROJECT );", "+", "+        m_listenerSupport.projectStarted( projectName );", "+", "+        executeTargetWork( \"<init>\", project.getImplicitTarget(), context );", "+", "+        //context = new DefaultTaskletContext( context );", "+        ", "+        //placing logger lower (at targetlevel or at task level)", "+        //is possible if you want more fine grained control", "+        context.setProperty( TaskletContext.LOGGER, m_logger );", "+", "+        execute( project, target, context );", "+", "+        m_listenerSupport.projectFinished();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be1a35093b915c62f50905475fe4d516", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ExecutionFrame.java", "commitBeforeChange": "7499c443d67445ea8fd0b8f4bd56c72251b18bf4", "commitAfterChange": "b7e43ad8c5906ae2b6d6b42f8b2715dc7d2e7a16", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void setProject(Project project) throws ConfigException", "signatureAfterChange": "     protected void setProject(Project project) throws ConfigException", "diff": ["-    public void setProject(Project project) throws ConfigException {", "-        try {", "-            this.project = project;", "-            baseURL = new URL(project.getSourceURL(), project.getBase());", "-        } catch (MalformedURLException e) {", "-            throw new ConfigException(\"Unable to determine project base dir\",", "-                e, project.getLocation());", "+    protected void setProject(Project project) throws ConfigException {", "+        this.project = project;", "+        URL projectURL = project.getSourceURL();", "+        if (projectURL.getProtocol().equals(\"file\")) {", "+            File projectFile = new File(projectURL.getFile());", "+            String base = project.getBase();", "+            if (base == null) {", "+                base = \".\";", "+            }", "+            baseDir = new File(projectFile.getParentFile(), base);", "+        } else {", "+            baseDir = new File(\".\");", "-                 = new ExecutionFrame(antLibraries);", "+                 = new ExecutionFrame(standardLibs, initConfig, config);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c020b156c8257186c882fd3c3162e48f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultObjectConfigurer.java", "commitBeforeChange": "c4dee0afafcc57ede3e3d1e81d2d4a1455c484a4", "commitAfterChange": "f52a170159f6dc5beebe07bfb945cb5b3fa5290b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public Class getType()", "signatureAfterChange": "     public Object finishConfiguration( final ConfigurationState state )         throws ConfigurationException", "diff": ["-    public Class getType()", "-        return m_class;", "+     */", "+    public Object finishConfiguration( final ConfigurationState state )", "+        throws ConfigurationException", "+    {", "+        // Make sure there are no pending created objects", "+        final DefaultConfigurationState defState = (DefaultConfigurationState)state;", "+        for( int i = 0; i < m_allProps.size(); i++ )", "+        {", "+            if( defState.getCreatedObject( i ) != null )", "+            {", "+                final String message = REZ.getString( \"pending-property-value.error\" );", "+                throw new ConfigurationException( message );", "+            }", "+        }", "+", "+        return defState.getObject();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c477a6a8b2833deaf38429c08c0a9bc2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/zip/UTF8ZipFilesTest.java", "commitBeforeChange": "cbd20a77eba224b21654251583971e054729f006", "commitAfterChange": "752d64fa43db2172327771ba4d36bee3f2d3b49a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 13, "signatureBeforeChange": "      private static void assertUnicodeName(ZipEntry ze,                                           String expectedName,                                           String encoding)         throws IOException", "signatureAfterChange": "      private static void assertUnicodeName(ZipEntry ze,                                           String expectedName,                                           String encoding)         throws IOException", "diff": ["-            UnicodePathExtraField ucpe = new UnicodePathExtraField(expectedName,", "-                                                                   encoding);", "-            assertEquals(ucpe.getNameCRC32(), ucpf.getNameCRC32());", "+            ZipEncoding enc = ZipEncodingHelper.getZipEncoding(encoding);", "+            ByteBuffer ne = enc.encode(ze.getName());", "+", "+            CRC32 crc = new CRC32();", "+            crc.update(ne.array(),ne.arrayOffset(),ne.limit());", "+", "+            assertEquals(crc.getValue(), ucpf.getNameCRC32());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3c061cb165126085b147baa372ae9d1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/PlainJUnitResultFormatter.java", "commitBeforeChange": "776c80d8ec4791029cc3601b7a6d0a1b0a45bc24", "commitAfterChange": "866b754aadc0d8f482a569e0fd9e136dd7df824c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void startTestSuite(JUnitTest suite)", "signatureAfterChange": "     public void startTestSuite(JUnitTest suite) throws BuildException", "diff": ["-    public void startTestSuite(JUnitTest suite) {", "-    }", "+    public void startTestSuite(JUnitTest suite) throws BuildException {", "+        if (out == null) {", "+            return; // Quick return - no output do nothing.", "+        }", "+        try {", "+            out.write(sb.toString().getBytes());", "+            out.flush();", "+        } catch (IOException ex) {", "+            throw new BuildException(\"Unable to write output\", ex);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e71848c181724fb1d64ce42f0fbfa467", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/splash/SplashScreen.java", "commitBeforeChange": "c8232ed82c53175729e226f4bc2dd464136a1e1b", "commitAfterChange": "a1003b0b8e5e18840b648d7da746efe92b093f74", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 14, "signatureBeforeChange": "      public void messageLogged(BuildEvent event)", "signatureAfterChange": "      public void messageLogged(BuildEvent event)", "diff": ["+        if (hasProgressPattern()) {", "+            String message = event.getMessage();", "+            Matcher matcher = progressRegExpPattern.matcher(message);", "+            if (matcher != null && matcher.matches()) {", "+                String gr = matcher.group(1);", "+                try {", "+                    int i = Math.min(new Integer(gr).intValue() * 2, MAX);", "+                    pb.setValue(i);", "+                } catch (NumberFormatException e) {", "+                    //TODO: how to reach logger?!?", "+                    //log(\"Number parsing error in progressRegExp\", Project.MSG_VERBOSE);", "+", "+                }", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f51ee5867175a86eb61c371bfa6748d8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "37e97ef42d47f59a277025d51b1d13719a9e616a", "commitAfterChange": "b92e6b644f97b87083602a8ce4029cce01725674", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": "     private File findFile(File base, String path, boolean cs)", "signatureAfterChange": "     private File findFile(File base, String path, boolean cs)", "diff": ["+        if (FileUtils.isAbsolutePath(path)) {", "+            if (base == null) {", "+                String[] s = FILE_UTILS.dissect(path);", "+                base = new File(s[0]);", "+                path = s[1];", "+            } else {", "+                File f = FILE_UTILS.normalize(path);", "+                String s = FILE_UTILS.removeLeadingPath(base, f);", "+                if (s.equals(f.getAbsolutePath())) {", "+                    //removing base from path yields no change; path not child of base", "+                    return null;", "+                }", "+                path = s;", "+            }", "+        }"]}]}
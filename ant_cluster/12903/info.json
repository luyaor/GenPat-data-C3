{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d8a5c35492503bb1bd6d587e43920a20", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c352bed73a7e5ea10cb068dfb2d7f6ab", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/FixCRLF.java", "commitBeforeChange": "0777fa853af3a619d777adaead96e9c0d1aff291", "commitAfterChange": "5061e731c3919a7236bdcdd2ad9965d384313e26", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "       private void processFile(String file) throws BuildException", "signatureAfterChange": "      private void processFile(String file) throws BuildException", "diff": ["-", "-        File tmpFile = null;", "-        BufferedWriter outWriter;", "-        OneLiner.BufferLine line;", "-        // read the contents of the file", "-        OneLiner lines = new OneLiner(srcFile);", "+        FilterChain fc = new FilterChain();", "+        fc.add(filter);", "+        Vector fcv = new Vector(1);", "+        fcv.add(fc);", "+        File tmpFile = FILE_UTILS.createTempFile(\"fixcrlf\", \"\", null);", "+        tmpFile.deleteOnExit();", "-            // Set up the output Writer", "-            try {", "-                tmpFile = FILE_UTILS.createTempFile(\"fixcrlf\", \"\", null);", "-                tmpFile.deleteOnExit();", "-                Writer writer = (encoding == null) ? new FileWriter(tmpFile)", "-                    : new OutputStreamWriter(new FileOutputStream(tmpFile),", "-                                             encoding);", "-                outWriter = new BufferedWriter(writer);", "-            } catch (IOException e) {", "-                throw new BuildException(e);", "-            }", "-", "-            while (lines.hasMoreElements()) {", "-                // In-line states", "-                int endComment;", "-", "-                try {", "-                    line = (OneLiner.BufferLine) lines.nextElement();", "-                } catch (NoSuchElementException e) {", "-                    throw new BuildException(e);", "-                }", "-", "-                String lineString = line.getLineString();", "-                int linelen = line.length();", "-", "-                // Note - all of the following processing NOT done for", "-                // tabs ASIS", "-", "-                if (tabs == ASIS) {", "-                    // Just copy the body of the line across", "-                    try {", "-                        outWriter.write(lineString);", "-                    } catch (IOException e) {", "-                        throw new BuildException(e);", "-                    } // end of try-catch", "-", "-                } else { // (tabs != ASIS)", "-", "-                    while (line.getNext() < linelen) {", "-", "-                        switch (lines.getState()) {", "-", "-                        case NOTJAVA:", "-                            notInConstant(line, line.length(), outWriter);", "-                            break;", "-", "-                        case IN_MULTI_COMMENT:", "-                            endComment", "-                                = lineString.indexOf(\"*/\", line.getNext());", "-                            if (endComment >= 0) {", "-                                // End of multiLineComment on this line", "-                                endComment += 2;  // Include the end token", "-                                lines.setState(LOOKING);", "-                            } else {", "-                                endComment = linelen;", "-                            }", "-", "-                            notInConstant(line, endComment, outWriter);", "-                            break;", "-", "-                        case IN_SINGLE_COMMENT:", "-                            notInConstant(line, line.length(), outWriter);", "-                            lines.setState(LOOKING);", "-                            break;", "-", "-                        case IN_CHAR_CONST:", "-                        case IN_STR_CONST:", "-                            // Got here from LOOKING by finding an", "-                            // opening \"\\'\" next points to that quote", "-                            // character.", "-                            // Find the end of the constant.  Watch", "-                            // out for backslashes.  Literal tabs are", "-                            // left unchanged, and the column is", "-                            // adjusted accordingly.", "-", "-                            int begin = line.getNext();", "-                            char terminator = (lines.getState() == IN_STR_CONST", "-                                               ? '\\\"'", "-                                               : '\\'');", "-                            endOfCharConst(line, terminator);", "-                            while (line.getNext() < line.getLookahead()) {", "-                                if (line.getNextCharInc() == '\\t') {", "-                                    line.setColumn(line.getColumn()", "-                                        + tablength", "-                                        - (line.getColumn() % tablength));", "-                                } else {", "-                                    line.incColumn();", "-                                }", "-                            }", "-", "-                            // Now output the substring", "-                            try {", "-                                outWriter.write(line.substring(begin,", "-                                                               line.getNext()));", "-                            } catch (IOException e) {", "-                                throw new BuildException(e);", "-                            }", "-", "-                            lines.setState(LOOKING);", "-", "-                            break;", "-", "-", "-                        case LOOKING:", "-                            nextStateChange(line);", "-                            notInConstant(line, line.getLookahead(), outWriter);", "-                            break;", "-", "-                        } // end of switch (state)", "-", "-                    } // end of while (line.getNext() < linelen)", "-", "-                } // end of else (tabs != ASIS)", "-", "-                if (!(\"\".equals(line.getEol())) || fixlast) {", "-                    try {", "-                        outWriter.write(eolstr);", "-                    } catch (IOException e) {", "-                        throw new BuildException(e);", "-                    } // end of try-catch", "-                } //end if non-blank original eol or fixlast", "-", "-            } // end of while (lines.hasNext())", "-", "-            try {", "-                // Handle CTRLZ", "-                if (ctrlz == ASIS) {", "-                    outWriter.write(lines.getEofStr());", "-                } else if (ctrlz == ADD) {", "-                    outWriter.write(CTRLZ);", "-                }", "-            } catch (IOException e) {", "-                throw new BuildException(e);", "-            } finally {", "-                try {", "-                    outWriter.close();", "-                } catch (IOException e) {", "-                    throw new BuildException(e);", "-                }", "-            }", "-", "-", "-            try {", "-                lines.close();", "-                lines = null;", "-            } catch (IOException e) {", "-                throw new BuildException(\"Unable to close source file \"", "-                                         + srcFile);", "-            }", "+            FILE_UTILS.copyFile(srcFile, tmpFile, null, fcv, false, ", "+                                false, encoding, getProject());", "-                if (!FILE_UTILS.contentEquals(destFile, tmpFile)) {", "-                    log(destFile + \" is being written\", Project.MSG_DEBUG);", "-                } else {", "-                    log(destFile + \" is not written, as the contents \"", "-                        + \"are identical\", Project.MSG_DEBUG);", "-                    destIsWrong = false;", "-                }", "+                destIsWrong = !FILE_UTILS.contentEquals(destFile, tmpFile);", "+                log(destFile + (destIsWrong ? \" is being written\"", "+                    : \" is not written, as the contents are identical\"),", "+                    Project.MSG_DEBUG);", "-", "-", "-        } finally {", "-            try {", "-                if (lines != null) {", "-                    lines.close();", "-                }", "-            } catch (IOException io) {", "-                log(\"Error closing \" + srcFile, Project.MSG_ERR);", "-            } // end of catch", "-", "-            if (tmpFile != null) {", "-                tmpFile.delete();", "-            }", "-        } // end of finally", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee8aa699aaab3ce2353d912a9890b2bc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "c8203de650acea3fa8e0e1a6acce7425f5bbe322", "commitAfterChange": "7651d02856325bec057619d215ee30c4c605ee80", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+", "+        //set up logging", "+        int logLevel = Project.MSG_INFO;", "+        DownloadProgress progress=null;", "+        if (verbose) {", "+            progress = new VerboseProgress(System.out);", "+        }", "+", "+        //execute the get", "+        try {", "+            doGet(logLevel, progress);", "+        } catch (IOException ioe) {", "+            log(\"Error getting \" + source + \" to \" + dest);", "+            if (!ignoreErrors) {", "+                throw new BuildException(ioe, getLocation());", "+            }", "+        }", "+    }", "-                                     getLocation());", "-                                     getLocation());", "-        try {", "-            log(\"Getting: \" + source);", "-", "-            //set the timestamp to the file date.", "-            long timestamp = 0;", "-", "-            boolean hasTimestamp = false;", "-            if (useTimestamp && dest.exists()) {", "-                timestamp = dest.lastModified();", "-                if (verbose) {", "-                    Date t = new Date(timestamp);", "-                    log(\"local file date : \" + t.toString());", "-                }", "-", "-                hasTimestamp = true;", "-            }", "-", "-            //set up the URL connection", "-            URLConnection connection = source.openConnection();", "-            //modify the headers", "-            //NB: things like user authentication could go in here too.", "-            if (useTimestamp && hasTimestamp) {", "-                connection.setIfModifiedSince(timestamp);", "-            }", "-            // prepare Java 1.1 style credentials", "-            if (uname != null || pword != null) {", "-                String up = uname + \":\" + pword;", "-                String encoding;", "-                // check to see if sun's Base64 encoder is available.", "-                try {", "-                    Object encoder =", "-                            Class.forName(\"sun.misc.BASE64Encoder\").newInstance();", "-                    encoding = (String)", "-                            encoder.getClass().getMethod(\"encode\", new Class[] {byte[].class})", "-                            .invoke(encoder, new Object[] {up.getBytes()});", "-", "-                } catch (Exception ex) { // sun's base64 encoder isn't available", "-                    Base64Converter encoder = new Base64Converter();", "-                    encoding = encoder.encode(up.getBytes());", "-                }", "-                connection.setRequestProperty (\"Authorization\",", "-                                               \"Basic \" + encoding);", "-            }", "-", "-            //connect to the remote site (may take some time)", "-            connection.connect();", "-            //next test for a 304 result (HTTP only)", "-            if (connection instanceof HttpURLConnection) {", "-                HttpURLConnection httpConnection", "-                if (httpConnection.getResponseCode()", "-                    //not modified so no file download. just return", "-                    //instead and trace out something so the user", "-                    //doesn't think that the download happened when it", "-                    //didn't", "-                    log(\"Not modified - so not downloaded\");", "-                    return;", "-                }", "-                // test for 401 result (HTTP only)", "-                if (httpConnection.getResponseCode()", "-                    String message = \"HTTP Authorization failure\";", "-                    if (ignoreErrors) {", "-                        log(message, Project.MSG_WARN);", "-                        return;", "-                    } else {", "-                        throw new BuildException(message);", "-                    }", "-                }", "-", "-            }", "-", "-            //REVISIT: at this point even non HTTP connections may", "-            //support the if-modified-since behaviour -we just check", "-            //the date of the content and skip the write if it is not", "-            //newer. Some protocols (FTP) don't include dates, of", "-            //course.", "-", "-            InputStream is = null;", "-            for (int i = 0; i < 3; i++) {", "-                try {", "-                    is = connection.getInputStream();", "-                    break;", "-                } catch (IOException ex) {", "-                    log(\"Error opening connection \" + ex);", "-                }", "-            }", "-            if (is == null) {", "-                log(\"Can't get \" + source + \" to \" + dest);", "-                    return;", "-                }", "-                throw new BuildException(\"Can't get \" + source + \" to \" + dest,", "-                                         getLocation());", "-            }", "-", "-            FileOutputStream fos = new FileOutputStream(dest);", "-            boolean finished = false;", "-            try {", "-                byte[] buffer = new byte[100 * 1024];", "-                int length;", "-                int dots = 0;", "-", "-                while ((length = is.read(buffer)) >= 0) {", "-                    fos.write(buffer, 0, length);", "-                    if (verbose) {", "-                        System.out.print(\".\");", "-                        if (dots++ > 50) {", "-                            System.out.flush();", "-                            dots = 0;", "-                        }", "-                    }", "-                }", "-                if (verbose) {", "-                    System.out.println();", "-                }", "-                finished = true;", "-            } finally {", "-                if (fos != null) {", "-                    fos.close();", "-                }", "-                is.close();", "-                // we have started to (over)write dest, but failed.", "-                // Try to delete the garbage we'd otherwise leave", "-                // behind.", "-                if (!finished) {", "-                    dest.delete();", "-            //if (and only if) the use file time option is set, then", "-            //the saved file now has its timestamp set to that of the", "-            //downloaded file", "-            if (useTimestamp)  {", "-                long remoteTimestamp = connection.getLastModified();", "-                if (verbose)  {", "-                    Date t = new Date(remoteTimestamp);", "-                    log(\"last modified = \" + t.toString()", "-                        + ((remoteTimestamp == 0)", "-                          ? \" - using current time instead\"", "-                          : \"\"));", "-                }", "-                if (remoteTimestamp != 0) {", "-                    FileUtils.newFileUtils()", "-                        .setFileLastModified(dest, remoteTimestamp);", "-                }", "-            }", "-        } catch (IOException ioe) {", "-            log(\"Error getting \" + source + \" to \" + dest);", "-            if (ignoreErrors) {", "-                return;", "-            }", "-            throw new BuildException(ioe, getLocation());"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "60bf1284f15bd5dabe2d9f5721f48d68", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19363f7badee33de98ca80c482d2531b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Cvs.java", "commitBeforeChange": "0218e3ecae8397a700aae864601f963e5771a9a5", "commitAfterChange": "a037ae329b9fa9d94dde3fc7c4346ab77dddfdb9", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "          public void execute() throws BuildException", "signatureAfterChange": "          public void execute() throws BuildException", "diff": ["-\ttry {", "-\t    String ant=project.getProperty(\"ant.home\");", "-\t    if(ant==null) throw new BuildException(\"Needs ant.home\");", "+\tString ant=project.getProperty(\"ant.home\");", "+\tif(ant==null) throw new BuildException(\"Needs ant.home\");", "-\t    StringBuffer sb=new StringBuffer();", "-\t    sb.append(ant).append(\"/bin/antRun \").append(dest);", "-\t    sb.append(\" cvs -d \").append( cvsRoot ).append(\" checkout \");", "-\t    if(tag!=null)", "-\t\tsb.append(\"-r \").append(tag).append(\" \");", "+\tStringBuffer sb=new StringBuffer();", "+\tsb.append(ant).append(\"/bin/antRun \").append(dest);", "+\tsb.append(\" cvs -d \").append( cvsRoot ).append(\" checkout \");", "+\tif (tag!=null)", "+            sb.append(\"-r \").append(tag).append(\" \");", "-\t    sb.append( pack );", "-\t    String command=sb.toString();", "+\tsb.append( pack );", "-            project.log(command, \"cvs\", Project.MSG_WARN);", "-", "-", "-\t    // exec command on system runtime", "-\t    Process proc = Runtime.getRuntime().exec( command);", "-\t    ", "-\t    // ignore response", "-\t    InputStreamReader isr=new InputStreamReader(proc.getInputStream());", "-\t    BufferedReader din = new BufferedReader(isr);", "-", "-\t    // pipe CVS output to STDOUT", "-\t    String line;", "-\t    while((line = din.readLine()) != null) {", "-\t\tproject.log(line, \"cvs\", Project.MSG_WARN);", "-\t\t//System.out.println(line);", "-\t    }", "-\t    ", "-\t    proc.waitFor();", "-\t    int err = proc.exitValue();", "-\t    if (err != 0) {", "-\t       throw new BuildException( \"Error \" + err + \"in \" + command);", "-\t    }", "-\t    ", "-\t} catch (IOException ioe) {", "-\t    ioe.printStackTrace();", "-\t    throw new BuildException(\"Error checking out: \" + pack );", "-\t} catch (InterruptedException ex) {", "-\t}", "+        run(sb.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e78a11b06e132633b72b9f40d7dbae62", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Exec.java", "commitBeforeChange": "edb71783adeffc29a56df203f97b5ac0e4566a5d", "commitAfterChange": "fd287b3a808daed93021646efdcf52a31957e35a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "          public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-    ", "+", "-\ttry {", "-\t    // test if os match", "-\t    String myos=System.getProperty(\"os.name\");", "-\t    project.log(\"Myos= \" + myos, Project.MSG_VERBOSE);", "-\t    if( ( os != null ) && ( os.indexOf(myos) < 0 ) ){", "-\t\t// this command will be executed only on the specified OS", "-\t\tproject.log(\"Not found in \" + os, Project.MSG_VERBOSE);", "-\t\treturn;", "-\t    }", "-\t\t", "-\t    // XXX: we should use JCVS (www.ice.com/JCVS) instead of command line", "-\t    // execution so that we don't rely on having native CVS stuff around (SM)", "-\t    ", "-\t    String ant=project.getProperty(\"ant.home\");", "-\t    if(ant==null) throw new BuildException(\"Needs ant.home\");", "-\t\t", "-\t    String antRun = project.resolveFile(ant + \"/bin/antRun\").toString();", "-\t    if (myos.toLowerCase().indexOf(\"windows\")>=0)", "-\t\tantRun=antRun+\".bat\";", "-\t    command=antRun + \" \" + project.resolveFile(dir) + \" \" + command;", "-            project.log(command, Project.MSG_VERBOSE);", "-\t\t", "-\t    // exec command on system runtime", "-\t    Process proc = Runtime.getRuntime().exec( command);", "-\t    // ignore response", "-\t    InputStreamReader isr=new InputStreamReader(proc.getInputStream());", "-\t    BufferedReader din = new BufferedReader(isr);", "-\t    ", "-\t    PrintWriter fos=null;", "-\t    if( out!=null )  {", "-\t\tfos=new PrintWriter( new FileWriter( out ) );", "-        \tproject.log(\"Output redirected to \" + out, Project.MSG_VERBOSE);", "-\t    }", "+        // test if os match", "+        String myos = System.getProperty(\"os.name\");", "+        project.log(\"Myos = \" + myos, Project.MSG_VERBOSE);", "+        if ((os != null) && (os.indexOf(myos) < 0)){", "+            // this command will be executed only on the specified OS", "+            project.log(\"Not found in \" + os, Project.MSG_VERBOSE);", "+            return;", "+        }", "+        ", "+        String ant = project.getProperty(\"ant.home\");", "+        if (ant == null) throw new BuildException(\"Property 'ant.home' not found\");", "-\t    // pipe CVS output to STDOUT", "-\t    String line;", "-\t    while((line = din.readLine()) != null) {", "-\t\tif( fos==null)", "-\t\t    project.log(line, \"exec\", Project.MSG_INFO);", "-\t\telse", "-\t\t    fos.println(line);", "-\t    }", "-\t    if(fos!=null)", "-\t\tfos.close();", "-\t    ", "-\t    proc.waitFor();", "-\t    int err = proc.exitValue();", "-\t    if (err != 0) {", "-\t\tproject.log(\"Result: \" + err, \"exec\", Project.MSG_ERR);", "-\t    }", "-\t    ", "-\t} catch (IOException ioe) {", "-\t    throw new BuildException(\"Error exec: \" + command );", "-\t} catch (InterruptedException ex) {", "-\t}", "+        String antRun = project.resolveFile(ant + \"/bin/antRun\").toString();", "+        if (myos.toLowerCase().indexOf(\"windows\") >= 0) antRun = antRun + \".bat\";", "+        command = antRun + \" \" + project.resolveFile(dir) + \" \" + command;", "+        ", "+        run(command);", "+    }"]}]}
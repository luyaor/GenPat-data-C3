{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7c847f1079688aa10656d8e7fdf204ef", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b18dbb1ed20b8ef67b3d0f5bba6e8c6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "93db46be115205107729104e728d45687d885295", "commitAfterChange": "20ab59bff57796a67e1cdfefbc29826c7d55edba", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": "      private void qSort3( int loSt, int hiSt, int dSt )", "signatureAfterChange": "      private void qSort3( int loSt, int hiSt, int dSt )", "diff": ["-                if( workDone > workLimit && firstAttempt )", "+                if( m_workDone > m_workLimit && m_firstAttempt )", "-            med = med3( block[ zptr[ lo ] + d + 1 ],", "-                        block[ zptr[ hi ] + d + 1 ],", "-                        block[ zptr[ ( lo + hi ) >> 1 ] + d + 1 ] );", "+            med = med3( m_block[ m_zptr[ lo ] + d + 1 ],", "+                        m_block[ m_zptr[ hi ] + d + 1 ],", "+                        m_block[ m_zptr[ ( lo + hi ) >> 1 ] + d + 1 ] );", "-                    n = ( (int)block[ zptr[ unLo ] + d + 1 ] ) - med;", "+                    n = ( (int)m_block[ m_zptr[ unLo ] + d + 1 ] ) - med;", "-                        temp = zptr[ unLo ];", "-                        zptr[ unLo ] = zptr[ ltLo ];", "-                        zptr[ ltLo ] = temp;", "+                        temp = m_zptr[ unLo ];", "+                        m_zptr[ unLo ] = m_zptr[ ltLo ];", "+                        m_zptr[ ltLo ] = temp;", "-                    n = ( (int)block[ zptr[ unHi ] + d + 1 ] ) - med;", "+                    n = ( (int)m_block[ m_zptr[ unHi ] + d + 1 ] ) - med;", "-                        temp = zptr[ unHi ];", "-                        zptr[ unHi ] = zptr[ gtHi ];", "-                        zptr[ gtHi ] = temp;", "+                        temp = m_zptr[ unHi ];", "+                        m_zptr[ unHi ] = m_zptr[ gtHi ];", "+                        m_zptr[ gtHi ] = temp;", "-                temp = zptr[ unLo ];", "-                zptr[ unLo ] = zptr[ unHi ];", "-                zptr[ unHi ] = temp;", "+                temp = m_zptr[ unLo ];", "+                m_zptr[ unLo ] = m_zptr[ unHi ];", "+                m_zptr[ unHi ] = temp;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d22c1f12e8cf8f8d3d8b4e9081812e03", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "93db46be115205107729104e728d45687d885295", "commitAfterChange": "20ab59bff57796a67e1cdfefbc29826c7d55edba", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 31, "signatureBeforeChange": "      private void simpleSort( int lo, int hi, int d )", "signatureAfterChange": "      private void simpleSort( int lo, int hi, int d )", "diff": ["-        while( incs[ hp ] < bigN )", "+        while( m_incs[ hp ] < bigN )", "-            h = incs[ hp ];", "+            h = m_incs[ hp ];", "-                v = zptr[ i ];", "+                v = m_zptr[ i ];", "-                while( fullGtU( zptr[ j - h ] + d, v + d ) )", "+                while( fullGtU( m_zptr[ j - h ] + d, v + d ) )", "-                    zptr[ j ] = zptr[ j - h ];", "+                    m_zptr[ j ] = m_zptr[ j - h ];", "-                zptr[ j ] = v;", "+                m_zptr[ j ] = v;", "-                v = zptr[ i ];", "+                v = m_zptr[ i ];", "-                while( fullGtU( zptr[ j - h ] + d, v + d ) )", "+                while( fullGtU( m_zptr[ j - h ] + d, v + d ) )", "-                    zptr[ j ] = zptr[ j - h ];", "+                    m_zptr[ j ] = m_zptr[ j - h ];", "-                zptr[ j ] = v;", "+                m_zptr[ j ] = v;", "-                v = zptr[ i ];", "+                v = m_zptr[ i ];", "-                while( fullGtU( zptr[ j - h ] + d, v + d ) )", "+                while( fullGtU( m_zptr[ j - h ] + d, v + d ) )", "-                    zptr[ j ] = zptr[ j - h ];", "+                    m_zptr[ j ] = m_zptr[ j - h ];", "-                zptr[ j ] = v;", "+                m_zptr[ j ] = v;", "-                if( workDone > workLimit && firstAttempt )", "+                if( m_workDone > m_workLimit && m_firstAttempt )"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e5bd22ece15b5335c157cc5f8821ba6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "049e04346f7d73b3ab0da1829ecdecc9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecTask.java", "commitBeforeChange": "2429a99dd695f4832b9321b72835944922fc176d", "commitAfterChange": "bd8601a5a3ba0794ff75168fd65a488a5a4939f4", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": "     protected String resolveExecutable(String exec)", "signatureAfterChange": "     protected String resolveExecutable(String exec, boolean searchPath)", "diff": ["-    protected String resolveExecutable(String exec) {", "+    protected String resolveExecutable(String exec, boolean searchPath) {", "+        FileUtils fileUtils = FileUtils.newFileUtils();", "-            FileUtils fileUtils = FileUtils.newFileUtils();", "+        if (searchPath) {", "+            Vector env = Execute.getProcEnvironment();", "+            Enumeration e = env.elements();", "+            Path p = null;", "+            while (e.hasMoreElements()) {", "+                String line = (String) e.nextElement();", "+                if (line.startsWith(\"PATH=\") || line.startsWith(\"Path=\")) {", "+                    p = new Path(getProject(), line.substring(5));", "+                    break;", "+                }", "+            }", "+", "+            if (p != null) {", "+                String[] dirs = p.list();", "+                for (int i = 0; i < dirs.length; i++) {", "+                    executableFile = fileUtils.resolveFile(new File(dirs[i]),", "+                                                           exec);", "+                    if (executableFile.exists()) {", "+                        return executableFile.getAbsolutePath();", "+                    }", "+                }", "+            }", "+        }", "+", "+        // searchPath is false, or no PATH or not found - keep our", "+        // fingers crossed."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5011d3d9aa349aec7ee8346ca714700", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecTask.java", "commitBeforeChange": "c1cadae30e769e118156566b578ef44ea5cc5ffa", "commitAfterChange": "f0d04b5c681dc135066cb65b1973e03672eb5044", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     protected String resolveExecutable(String exec, boolean searchPath)", "signatureAfterChange": "     protected String resolveExecutable(String exec, boolean mustSearchPath)", "diff": ["-    protected String resolveExecutable(String exec, boolean searchPath) {", "+    protected String resolveExecutable(String exec, boolean mustSearchPath) {", "-", "-", "-", "-        if (searchPath) {", "+        if (mustSearchPath) {", "-                        p = new Path(getProject(),", "-                                     environment[i].substring(5));", "+                        p = new Path(getProject(), environment[i].substring(5));", "-", "-            Vector envVars = Execute.getProcEnvironment();", "-            Enumeration e = envVars.elements();", "-            while (e.hasMoreElements()) {", "-                String line = (String) e.nextElement();", "-                if (isPath(line)) {", "-                    p = new Path(getProject(), line.substring(5));", "-                    break;", "+                Vector envVars = Execute.getProcEnvironment();", "+                Enumeration e = envVars.elements();", "+                while (e.hasMoreElements()) {", "+                    String line = (String) e.nextElement();", "+                    if (isPath(line)) {", "+                        p = new Path(getProject(), line.substring(5));", "+                        break;", "+                    }", "-            }", "-", "-                    executableFile = FILE_UTILS.resolveFile(new File(dirs[i]),", "-                                                           exec);", "+                    executableFile", "+                        = FILE_UTILS.resolveFile(new File(dirs[i]), exec);", "-", "-        // searchPath is false, or no PATH or not found - keep our", "+        // mustSearchPath is false, or no PATH or not found - keep our"]}]}
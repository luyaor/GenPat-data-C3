{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c1c5930feba46c9749962da7867407cb", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "464f57d0cc9cfdce6c7b36c95570b661", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/image/Image.java", "commitBeforeChange": "26839fdb3234b8344a313d1bee71aff8494b3842", "commitAfterChange": "541157c5de95bf1cb2ff9f47b8aadac0b3ee98e1", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void processFile(File file)", "signatureAfterChange": "     public void processFile(File file, File newFile)", "diff": ["+     */", "+    public void processFile(File file, File newFile) {", "-            FileSeekableStream input = new FileSeekableStream(file);", "-            PlanarImage image = JAI.create(\"stream\", input);", "-            for (int i = 0; i < instructions.size(); i++) {", "-                Object instr = instructions.elementAt(i);", "-                if (instr instanceof TransformOperation) {", "-                    image = ((TransformOperation) instr)", "-                        .executeTransformOperation(image);", "-                } else {", "-                    log(\"Not a TransformOperation: \" + instr);", "-                }", "-            }", "-            input.close();", "-            if (str_encoding.toLowerCase().equals(\"jpg\")) {", "-                str_encoding = \"JPEG\";", "-            } else if (str_encoding.toLowerCase().equals(\"tif\")) {", "-                str_encoding = \"TIFF\";", "+            FileSeekableStream input = null;", "+            PlanarImage image = null;", "+            try {", "+                input = new FileSeekableStream(file);", "+                image = JAI.create(\"stream\", input);", "+                for (int i = 0; i < instructions.size(); i++) {", "+                    Object instr = instructions.elementAt(i);", "+                    if (instr instanceof TransformOperation) {", "+                        image = ((TransformOperation) instr)", "+                            .executeTransformOperation(image);", "+                    } else {", "+                        log(\"Not a TransformOperation: \" + instr);", "+                    }", "+                }", "+            } finally {", "+                FileUtils.close(input);", "-            if (destDir == null) {", "-                destDir = srcDir;", "+", "+            File dstParent = newFile.getParentFile();", "+            if (!dstParent.isDirectory() && !dstParent.mkdirs()){", "+                throw new BuildException(\"Failed to create parent directory \"", "+                                         + dstParent);", "-            File newFile = new File(destDir, file.getName());", "-            FileOutputStream stream = new FileOutputStream(newFile);", "-            JAI.create(\"encode\", image, stream, str_encoding.toUpperCase(),", "-                       null);", "-            stream.flush();", "-            stream.close();", "+            FileOutputStream stream = null;", "+            try {", "+                stream = new FileOutputStream(newFile);", "+", "+                JAI.create(\"encode\", image, stream, str_encoding.toUpperCase(),", "+                           null);", "+                stream.flush();", "+            } finally {", "+                FileUtils.close(stream);", "+            }", "+            if (!file.equals(newFile)){", "+                newFile.delete();", "+            }", "+            if (!file.equals(newFile)){", "+                newFile.delete();", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d22b89425d224bae2de316a73f53c0cd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/embed/ProjectHelperImpl2.java", "commitBeforeChange": "f2d8ae34069b455a64a46431bd44a3b2a208e9d7", "commitAfterChange": "86334974455a492f4b76331b6002a45289874ddf", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void parse(Project project, Object source) throws BuildException", "signatureAfterChange": "     public void parse(Project project, Object source) throws BuildException", "diff": ["-        if( ! (source instanceof File) )", "-            throw new BuildException( \"Only File source supported by default plugin\" );", "-        File buildFile=(File)source;", "+        AntXmlContext context=new AntXmlContext();", "+        if(source instanceof File) {", "+            context.buildFile=(File)source;", "+//         } else if( source instanceof InputStream ) {", "+//         } else if( source instanceof URL ) {", "+//         } else if( source instanceof InputSource ) {", "+        } else {", "+            throw new BuildException( \"Source \" + source.getClass().getName() +", "+                                      \" not supported by this plugin\" );", "+        }", "+", "-        this.project = project;", "-        this.buildFile = new File(buildFile.getAbsolutePath());", "-        buildFileParent = new File(this.buildFile.getParent());", "+        context.project = project;", "+        context.buildFile = new File(context.buildFile.getAbsolutePath());", "+        context.buildFileParent = new File(context.buildFile.getParent());", "-            SAXParser saxParser = getParserFactory().newSAXParser();", "+            /**", "+             * SAX 2 style parser used to parse the given file. ", "+             */", "+            org.xml.sax.XMLReader parser;", "+    ", "+            if (parserFactory == null) {", "+                parserFactory = SAXParserFactory.newInstance();", "+            }", "+", "+            SAXParser saxParser = parserFactory.newSAXParser();", "-            String uri = \"file:\" + buildFile.getAbsolutePath().replace('\\\\', '/');", "+            String uri = \"file:\" + context.buildFile.getAbsolutePath().replace('\\\\', '/');", "-            inputStream = new FileInputStream(buildFile);", "+            inputStream = new FileInputStream(context.buildFile);", "-            project.log(\"parsing buildfile \" + buildFile + \" with URI = \" + uri, Project.MSG_VERBOSE);", "-            DefaultHandler hb = new RootHandler();", "+            project.log(\"parsing buildfile \" + context.buildFile + \" with URI = \" + uri, Project.MSG_VERBOSE);", "+", "+            DefaultHandler hb = new RootHandler(context);", "+", "-                new Location(buildFile.toString(), exc.getLineNumber(), exc.getColumnNumber());", "+                new Location(context.buildFile.toString(), exc.getLineNumber(), exc.getColumnNumber());"]}]}
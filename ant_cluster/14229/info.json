{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a265c703368e91cd10dfdc87b261baad", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0dbf21fdbe1005ca9ec506358e441e4f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/testing/Funtest.java", "commitBeforeChange": "6b472602fcf0b403556f89ce4c3a0a144dfc97e0", "commitAfterChange": "8d0bd81aaef83b8e46eb962d9e8ef0b5953fad4b", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 23, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        //before anything else, check the condition", "+        //validation", "+        validateTask(setup, \"setup\");", "+        validateTask(application, \"application\");", "+        validateTask(tests, \"tests\");", "+        validateTask(reporting, \"reporting\");", "+        validateTask(teardown, \"teardown\");", "+", "+        //check the condition", "-            testRun.addTask(new TaskAdapter(block));", "+            TaskAdapter ta = new TaskAdapter(block);", "+            ta.bindToOwner(this);", "+            validateTask(ta, \"block\");", "+            testRun.addTask(ta);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98edc94dc91312af39ec556026b26990", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/main/org/apache/ant/core/execution/ExecutionFrame.java", "commitBeforeChange": "a48208f6cf8cf80ef1e144305ff8dfe0958599d5", "commitAfterChange": "c2e518039b65dc5b8c9c31f9f78b2d72ea8db2d1", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 23, "signatureBeforeChange": "              private void configureElement(Object element, TaskElement model)          throws ExecutionException, ConfigException", "signatureAfterChange": "        private void configureElement(Object element, TaskElement model)          throws ExecutionException, ConfigException", "diff": ["+     */   ", "-                    ExecutionTask nestedExecutionTask ", "-                        = getConfiguredExecutionTask(nestedElementModel);", "-                        ", "+                    Task nestedTask = configureTask(nestedElementModel);", "-                    container.addExecutionTask(nestedExecutionTask);", "+                    container.addTask(nestedTask);", "+            }", "+            List aspects = getActiveAspects(model);", "+            for (Iterator i = aspects.iterator(); i.hasNext(); ) {", "+                AspectHandler aspectHandler = (AspectHandler)i.next();", "+                aspectHandler.afterConfigElement(element);"]}]}
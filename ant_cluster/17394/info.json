{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df3bce92461b54594bc78d2498103288", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1dfbc6b19474cf2f0fb47428db90d4f4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteJava.java", "commitBeforeChange": "1308dd4c013bc3df42d1a0f72d85ab0b7a20327d", "commitAfterChange": "45fd3ec75d69aa0ad90db60192d16272f61b8ef4", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void execute(Project project) throws BuildException", "signatureAfterChange": "      public void execute(Project project) throws BuildException", "diff": ["-                project.registerThreadLikeCurrent(thread);", "+                Task currentThreadTask ", "+                    = project.getThreadTask(Thread.currentThread());", "+                project.registerThreadTask(thread, currentThreadTask);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5514781d9dd172908a3fbe44afa50c8e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "3c26912e56e06ac64c392444cb19e3587f1bbb11", "commitAfterChange": "ba22b3de5a2c195cc893e6455dbd88940f7547ac", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private static void configureTargets(Project project, Element root) \tthrows BuildException", "signatureAfterChange": "      private static void configureTargets(Project project, Element root)         throws BuildException", "diff": ["-\tthrows BuildException", "+        throws BuildException", "-\t// configure targets", "-\tNodeList list = root.getElementsByTagName(\"target\");", "-\tfor (int i = 0; i < list.getLength(); i++) {", "-\t    Element element = (Element)list.item(i);", "-\t    String targetName = element.getAttribute(\"name\");", "-\t    String targetDep = element.getAttribute(\"depends\");", "+        // configure targets", "+        NodeList list = root.getElementsByTagName(\"target\");", "+        for (int i = 0; i < list.getLength(); i++) {", "+            Element element = (Element)list.item(i);", "+            String targetName = element.getAttribute(\"name\");", "+            String targetDep = element.getAttribute(\"depends\");", "+            String targetCond = element.getAttribute(\"if\");", "-\t    // all targets must have a name", "-\t    if (targetName.equals(\"\")) {", "-\t\tString msg = \"target element appears without a name attribute\";", "-\t\tthrow new BuildException(msg);", "-\t    }", "+            // all targets must have a name", "+            if (targetName.equals(\"\")) {", "+                String msg = \"target element appears without a name attribute\";", "+                throw new BuildException(msg);", "+            }", "-\t    // init is done already", "-\t    if( targetName.equals(\"init\") ) ", "-\t\tcontinue;", "-\t    ", "-\t    Target target = new Target();", "-\t    target.setName(targetName);", "-\t    project.addTarget(targetName, target);", "-\t    ", "-\t    // take care of dependencies", "-\t    ", "-\t    if (targetDep.length() > 0) {", "-\t\tStringTokenizer tok =", "-\t\t    new StringTokenizer(targetDep, \",\", false);", "-\t\twhile (tok.hasMoreTokens()) {", "-\t\t    target.addDependency(tok.nextToken().trim());", "-\t\t}", "-\t    }", "+            // init is done already", "+            if( targetName.equals(\"init\") )", "+                continue;", "-\t    // populate target with tasks", "+            Target target = new Target();", "+            target.setName(targetName);", "+            target.setCondition(targetCond);", "+            project.addTarget(targetName, target);", "-\t    configureTasks(project, target, element);", "-\t}", "+            // take care of dependencies", "+", "+            if (targetDep.length() > 0) {", "+                StringTokenizer tok =", "+                    new StringTokenizer(targetDep, \",\", false);", "+                while (tok.hasMoreTokens()) {", "+                    target.addDependency(tok.nextToken().trim());", "+                }", "+            }", "+", "+            // populate target with tasks", "+", "+            configureTasks(project, target, element);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6701e7a3b78ea091344bf1b3d4ca6da6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/listener/MailLogger.java", "commitBeforeChange": "f43a1d0628c81df67d38a14c8c74162b187eccea", "commitAfterChange": "0b3cd9d4fe4d689c6d71ab504414d6ac12b1cbca", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void buildFinished(BuildEvent event)", "signatureAfterChange": "     public void buildFinished(BuildEvent event)", "diff": ["-            properties.put(key, fileProperties.getProperty(key));", "+            String value = fileProperties.getProperty(key);", "+            properties.put(key, project.replaceProperties(value));", "-            e.printStackTrace();", "+            e.printStackTrace(System.err);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83168fe0652b34cff26cd6b0f48a4a90", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "91daac5ad7cb1b28ec72ca13d11253648f2e4ddd", "commitAfterChange": "abec7e48efa22a34d81b78adbfbf44627de85ccd", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     public static Process launch(Project project, String[] command,                                  String[] env, File dir, boolean useVM)         throws IOException", "signatureAfterChange": "     public static Process launch(Project project, String[] command,                                  String[] env, File dir, boolean useVM)         throws IOException", "diff": ["-        CommandLauncher launcher", "-            = ((useVM && vmLauncher != null) ? vmLauncher : shellLauncher);", "+", "+        CommandLauncher vmLauncher = CommandLauncher.getVMLauncher(project);", "+        CommandLauncher launcher = (useVM && vmLauncher != null)", "+            ? vmLauncher : CommandLauncher.getShellLauncher(project);"]}]}
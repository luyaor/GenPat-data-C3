{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f4333c4816832db3a0e11b355ba0bd23", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1db50652affa56c1b455b02c7b0fec0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "3477bbf6474cdd2b70b12eb638e64415a4f1c2ec", "commitAfterChange": "134d95afef9b42cf08f2eccb077b97525ac38034", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 35, "signatureBeforeChange": "      private void doReversibleTransformation()", "signatureAfterChange": "      private void blockSort()", "diff": ["+", "+    private void blockSort() {", "+        this.workLimit = WORK_FACTOR * this.last;", "+        this.workDone = 0;", "+        this.blockRandomised = false;", "+        this.firstAttempt = true;", "+        mainSort();", "+", "+        if (this.firstAttempt && (this.workDone > this.workLimit)) {", "+            randomiseBlock();", "+            this.workLimit = this.workDone = 0;", "+            this.firstAttempt = false;", "+            mainSort();", "+        }", "+", "+        int[] fmap = this.data.fmap;", "+        this.origPtr = -1;", "+        for (int i = 0, last = this.last; i <= last; i++) {", "+            if (fmap[i] == 0) {", "+                this.origPtr = i;", "+                break;", "+            }", "+        }", "+", "+        // assert (this.origPtr != -1) : this.origPtr;", "+    }", "-", "-    private void doReversibleTransformation() {", "-        int i;", "-", "-        workLimit = workFactor * last;", "-        workDone = 0;", "-        blockRandomised = false;", "-        firstAttempt = true;", "-", "-        mainSort();", "-", "-        if (workDone > workLimit && firstAttempt) {", "-            randomiseBlock();", "-            workLimit = workDone = 0;", "-            blockRandomised = true;", "-            firstAttempt = false;", "-            mainSort();", "-        origPtr = -1;", "-        for (i = 0; i <= last; i++) {", "-            if (zptr[i] == 0) {", "-                origPtr = i;", "-                break;", "-            }", "-        };", "-", "-        if (origPtr == -1) {", "-            panic();", "-        }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d451ecdc7d19fe5894f6afd62330a22b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "380870c2b26a9f3289569dc2451178df3f05613e", "commitAfterChange": "ad9edf5f5ea4a8f2a974726eeb8e656c177357df", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 29, "signatureBeforeChange": "      private void blockSort()", "signatureAfterChange": "      private void doReversibleTransformation()", "diff": ["-", "-    private void blockSort() {", "-        this.workLimit = WORK_FACTOR * this.last;", "-        this.workDone = 0;", "-        this.blockRandomised = false;", "-        this.firstAttempt = true;", "-        mainSort();", "-", "-        if (this.firstAttempt && (this.workDone > this.workLimit)) {", "-            randomiseBlock();", "-            this.workLimit = this.workDone = 0;", "-            this.firstAttempt = false;", "-            mainSort();", "-        }", "-", "-        int[] fmap = this.data.fmap;", "-        this.origPtr = -1;", "-        for (int i = 0, lastShadow = this.last; i <= lastShadow; i++) {", "-            if (fmap[i] == 0) {", "-                this.origPtr = i;", "-                break;", "-            }", "-        }", "-", "-        // assert (this.origPtr != -1) : this.origPtr;", "-    }", "+", "+    private void doReversibleTransformation() {", "+        int i;", "+", "+        workLimit = workFactor * last;", "+        workDone = 0;", "+        blockRandomised = false;", "+        firstAttempt = true;", "+", "+        mainSort();", "+", "+        if (workDone > workLimit && firstAttempt) {", "+            randomiseBlock();", "+            workLimit = workDone = 0;", "+            blockRandomised = true;", "+            firstAttempt = false;", "+            mainSort();", "+        origPtr = -1;", "+        for (i = 0; i <= last; i++) {", "+            if (zptr[i] == 0) {", "+                origPtr = i;", "+                break;", "+            }", "+        };", "+", "+        if (origPtr == -1) {", "+            panic();", "+        }", "+    }"]}]}
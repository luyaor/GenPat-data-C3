{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "00b71cdebe989dbfcda9d099d9b87260", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "035364cd4b856b526cb54ea0b97cfd01", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/unix/SymlinkTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void testDelete()", "signatureAfterChange": "      @Test     public void testDelete()", "diff": ["+    @Test", "-        if (supportsSymlinks) {", "-            executeTarget(\"test-delete\");", "-            p = getProject();", "-            String linkDeleted = p.getProperty(\"test.delete.link.still.there\");", "-            assertNotNull(\"Actual file deleted by symlink\",", "-                          p.getProperty(\"test.delete.file.still.there\"));", "-            if (linkDeleted != null) {", "-                fail(linkDeleted);", "-            }", "+        buildRule.executeTarget(\"test-delete\");", "+        Project p = buildRule.getProject();", "+        String linkDeleted = p.getProperty(\"test.delete.link.still.there\");", "+        assertNotNull(\"Actual file deleted by symlink\",", "+                      p.getProperty(\"test.delete.file.still.there\"));", "+        if (linkDeleted != null) {", "+            fail(linkDeleted);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6466ab1df8fb0f8030760e23f7f68c6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/FailTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void testIfAndUnless()", "signatureAfterChange": "     @Test     public void testIfAndUnless()", "diff": ["+    @Test", "-        executeTarget(\"testIfAndUnless\");", "-        project.setProperty(\"if\", \"\");", "-        expectBuildExceptionContaining(\"testIfAndUnless\",", "-                \"expect fail on defined(if)\",", "-                \"if=if and unless=unless\");", "-        project.setProperty(\"unless\", \"\");", "+        buildRule.executeTarget(\"testIfAndUnless\");", "+        buildRule.getProject().setProperty(\"if\", \"\");", "+        try {", "+            buildRule.executeTarget(\"testIfAndUnless\");", "+            fail(\"expect fail on defined(if)\") ;", "+        } catch (BuildException ex) {", "+            assertEquals(\"if=if and unless=unless\", ex.getMessage());", "+        }", "+        buildRule.getProject().setProperty(\"unless\", \"\");", "-        executeTarget(\"testIfAndUnless\");", "+        buildRule.executeTarget(\"testIfAndUnless\");"]}]}
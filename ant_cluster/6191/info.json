{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7261759e036d1d4854efae365c608f3c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "284ff039ce9bc45d39baed739f3db54a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XSLTProcess.java", "commitBeforeChange": "6a56c5219285376f49d302d1a1c6765db3d2ef69", "commitAfterChange": "503663ee2b54c9880e018eb0d68a5683ae615bdf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        if (baseDir == null)", "+        if (baseDir == null) {", "+        }", "+        ", "+                for(Enumeration e = params.elements();e.hasMoreElements();) {", "+                    Param p = (Param)e.nextElement();", "+                    liaison.addParam( p.getName(), p.getExpression() );", "+                }", "+        }", "+", "+        // if we have an in file and out then process them", "+        if (inFile != null && outFile != null) {", "+            process(inFile, outFile, styleSheetLastModified);", "+            return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4131747a39b78bfc82b0877ccee593b5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Manifest.java", "commitBeforeChange": "8ceff1b470d117265bbe4dd7d982e448c213bb4f", "commitAfterChange": "c35619ac8a554bebec2008a08b8084993b3837f1", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "                  public String getAttributeValue(String attributeName)", "signatureAfterChange": "                  public String getAttributeValue(String attributeName)", "diff": ["-            Attribute attribute = (Attribute)attributes.get(attributeName.toLowerCase());", "+            Object attribute = attributes.get(attributeName.toLowerCase());", "-            return attribute.getValue();", "+            if (attribute instanceof Attribute) {", "+                return ((Attribute)attribute).getValue();", "+            }", "+            else {", "+                String value = \"\";", "+                for (Enumeration e = ((Vector)attribute).elements(); e.hasMoreElements();) {", "+                    Attribute classpathAttribute = (Attribute)e.nextElement();", "+                    value += classpathAttribute.getValue() + \" \";", "+                }", "+                return value.trim();", "+            }"]}]}
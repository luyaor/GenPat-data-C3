{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f1c5ab3d9477228ea88fe11d9bd47d1e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af9af027cba4d5732726509d4b3dc421", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "8a86b8228ff5523912422a5792c5788bc95ff228", "commitAfterChange": "3d67036913aeb416479a16d21f2792575f7b7202", "methodNumberBeforeChange": 123, "methodNumberAfterChange": 123, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+", "+        // Whether *this VM* is 1.4+ (but also check executable != null).", "+        boolean javadoc4 =", "+            !JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_2) &&", "+            !JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_3);", "-        toExecute.setExecutable(JavaEnvUtils.getJdkExecutable(\"javadoc\"));", "+        if (executable != null) {", "+            toExecute.setExecutable(executable);", "+        } else {", "+            toExecute.setExecutable(JavaEnvUtils.getJdkExecutable(\"javadoc\"));", "+        }", "-        if (!javadoc1) {", "-            if (classpath.size() > 0) {", "-                toExecute.createArgument().setValue(\"-classpath\");", "-                toExecute.createArgument().setPath(classpath);", "-            }", "-            if (sourceDirs.size() > 0) {", "-                toExecute.createArgument().setValue(\"-sourcepath\");", "-                toExecute.createArgument().setPath(sourceDirs);", "-            }", "-        } else {", "-            sourceDirs.append(classpath);", "-            if (sourceDirs.size() > 0) {", "-                toExecute.createArgument().setValue(\"-classpath\");", "-                toExecute.createArgument().setPath(sourceDirs);", "-            }", "+        if (classpath.size() > 0) {", "+            toExecute.createArgument().setValue(\"-classpath\");", "+            toExecute.createArgument().setPath(classpath);", "+        }", "+        if (sourceDirs.size() > 0) {", "+            toExecute.createArgument().setValue(\"-sourcepath\");", "+            toExecute.createArgument().setPath(sourceDirs);", "-        if (javadoc1 || doclet == null) {", "-            if (destDir == null) {", "-                String msg = \"destDir attribute must be set!\";", "-                throw new BuildException(msg);", "-            }", "+        if (doclet == null && destDir == null) {", "+            throw new BuildException(\"destdir attribute must be set!\");", "-        if (!javadoc1) {", "-            if (doclet != null) {", "-                if (doclet.getName() == null) {", "-                    throw new BuildException(\"The doclet name must be \"", "-                                             + \"specified.\", getLocation());", "-                } else {", "-                    toExecute.createArgument().setValue(\"-doclet\");", "-                    toExecute.createArgument().setValue(doclet.getName());", "-                    if (doclet.getPath() != null) {", "-                        Path docletPath", "-                            = doclet.getPath().concatSystemClasspath(\"ignore\");", "-                        if (docletPath.size() != 0) {", "-                            toExecute.createArgument().setValue(\"-docletpath\");", "-                            toExecute.createArgument().setPath(docletPath);", "-                        }", "+        if (doclet != null) {", "+            if (doclet.getName() == null) {", "+                throw new BuildException(\"The doclet name must be \"", "+                                         + \"specified.\", getLocation());", "+            } else {", "+                toExecute.createArgument().setValue(\"-doclet\");", "+                toExecute.createArgument().setValue(doclet.getName());", "+                if (doclet.getPath() != null) {", "+                    Path docletPath", "+                        = doclet.getPath().concatSystemClasspath(\"ignore\");", "+                    if (docletPath.size() != 0) {", "+                        toExecute.createArgument().setValue(\"-docletpath\");", "+                        toExecute.createArgument().setPath(docletPath);", "-                    for (Enumeration e = doclet.getParams();", "-                         e.hasMoreElements();) {", "-                        DocletParam param = (DocletParam) e.nextElement();", "-                        if (param.getName() == null) {", "-                            throw new BuildException(\"Doclet parameters must \"", "-                                                     + \"have a name\");", "-                        }", "+                }", "+                for (Enumeration e = doclet.getParams();", "+                     e.hasMoreElements();) {", "+                    DocletParam param = (DocletParam) e.nextElement();", "+                    if (param.getName() == null) {", "+                        throw new BuildException(\"Doclet parameters must \"", "+                                                 + \"have a name\");", "+                    }", "-                        toExecute.createArgument().setValue(param.getName());", "-                        if (param.getValue() != null) {", "-                            toExecute.createArgument()", "-                                .setValue(param.getValue());", "-                        }", "+                    toExecute.createArgument().setValue(param.getName());", "+                    if (param.getValue() != null) {", "+                        toExecute.createArgument()", "+                            .setValue(param.getValue());", "-            Path bcp = new Path(getProject());", "-            if (bootclasspath != null) {", "-                bcp.append(bootclasspath);", "-            }", "-            bcp = bcp.concatSystemBootClasspath(\"ignore\");", "-            if (bcp.size() > 0) {", "-                toExecute.createArgument().setValue(\"-bootclasspath\");", "-                toExecute.createArgument().setPath(bcp);", "-            }", "+        }", "+        Path bcp = new Path(getProject());", "+        if (bootclasspath != null) {", "+            bcp.append(bootclasspath);", "+        }", "+        bcp = bcp.concatSystemBootClasspath(\"ignore\");", "+        if (bcp.size() > 0) {", "+            toExecute.createArgument().setValue(\"-bootclasspath\");", "+            toExecute.createArgument().setPath(bcp);", "+        }", "-            // add the links arguments", "-            if (links.size() != 0) {", "-                for (Enumeration e = links.elements(); e.hasMoreElements();) {", "-                    LinkArgument la = (LinkArgument) e.nextElement();", "+        // add the links arguments", "+        if (links.size() != 0) {", "+            for (Enumeration e = links.elements(); e.hasMoreElements();) {", "+                LinkArgument la = (LinkArgument) e.nextElement();", "-                    if (la.getHref() == null || la.getHref().length() == 0) {", "-                        log(\"No href was given for the link - skipping\",", "-                            Project.MSG_VERBOSE);", "+                if (la.getHref() == null || la.getHref().length() == 0) {", "+                    log(\"No href was given for the link - skipping\",", "+                        Project.MSG_VERBOSE);", "+                    continue;", "+                }", "+                String link = null;", "+                if (la.shouldResolveLink()) {", "+                    File hrefAsFile = ", "+                        getProject().resolveFile(la.getHref());", "+                    if (hrefAsFile.exists()) {", "+                        try {", "+                            link = FILE_UTILS.getFileURL(hrefAsFile)", "+                                .toExternalForm();", "+                        } catch (MalformedURLException ex) {", "+                            // should be impossible", "+                            log(\"Warning: link location was invalid \" ", "+                                + hrefAsFile, Project.MSG_WARN);", "+                        }", "+                    }", "+                }", "+                if (link == null) {", "+                    // is the href a valid URL", "+                    try {", "+                        URL base = new URL(\"file://.\");", "+                        new URL(base, la.getHref());", "+                        link = la.getHref();", "+                    } catch (MalformedURLException mue) {", "+                        // ok - just skip", "+                        log(\"Link href \\\"\" + la.getHref()", "+                            + \"\\\" is not a valid url - skipping link\",", "+                            Project.MSG_WARN);", "-                    String link = null;", "-                    if (la.shouldResolveLink()) {", "-                        File hrefAsFile = ", "-                            getProject().resolveFile(la.getHref());", "-                        if (hrefAsFile.exists()) {", "-                            try {", "-                                link = FILE_UTILS.getFileURL(hrefAsFile)", "-                                    .toExternalForm();", "-                            } catch (MalformedURLException ex) {", "-                                // should be impossible", "-                                log(\"Warning: link location was invalid \" ", "-                                    + hrefAsFile, Project.MSG_WARN);", "-                            }", "-                        }", "+                }", "+", "+                if (la.isLinkOffline()) {", "+                    File packageListLocation = la.getPackagelistLoc();", "+                    if (packageListLocation == null) {", "+                        throw new BuildException(\"The package list\"", "+                                                 + \" location for link \" ", "+                                                 + la.getHref()", "+                                                 + \" must be provided \"", "+                                                 + \"because the link is \"", "+                                                 + \"offline\");", "-                    if (link == null) {", "-                        // is the href a valid URL", "+                    File packageListFile =", "+                        new File(packageListLocation, \"package-list\");", "+                    if (packageListFile.exists()) {", "-                            URL base = new URL(\"file://.\");", "-                            new URL(base, la.getHref());", "-                            link = la.getHref();", "-                        } catch (MalformedURLException mue) {", "-                            // ok - just skip", "-                            log(\"Link href \\\"\" + la.getHref()", "-                                + \"\\\" is not a valid url - skipping link\",", "-                                Project.MSG_WARN);", "-                            continue;", "-                        }", "-                    }", "-", "-                    if (la.isLinkOffline()) {", "-                        File packageListLocation = la.getPackagelistLoc();", "-                        if (packageListLocation == null) {", "-                            throw new BuildException(\"The package list\"", "-                                                     + \" location for link \" ", "-                                                     + la.getHref()", "-                                                     + \" must be provided \"", "-                                                     + \"because the link is \"", "-                                                     + \"offline\");", "-                        }", "-                        File packageListFile =", "-                            new File(packageListLocation, \"package-list\");", "-                        if (packageListFile.exists()) {", "-                            try {", "-                                String packageListURL =", "-                                    FILE_UTILS.getFileURL(packageListLocation)", "-                                    .toExternalForm();", "-                                toExecute.createArgument()", "-                                    .setValue(\"-linkoffline\");", "-                                toExecute.createArgument()", "-                                    .setValue(link);", "-                                toExecute.createArgument()", "-                                    .setValue(packageListURL);", "-                            } catch (MalformedURLException ex) {", "-                                log(\"Warning: Package list location was \"", "-                                    + \"invalid \" + packageListLocation,", "-                                    Project.MSG_WARN);", "-                            }", "-                        } else {", "-                            log(\"Warning: No package list was found at \"", "-                                + packageListLocation, Project.MSG_VERBOSE);", "-                        }", "-                    } else {", "-                        toExecute.createArgument().setValue(\"-link\");", "-                        toExecute.createArgument().setValue(link);", "-                    }", "-                }", "-            }", "-", "-            // add the single group arguments", "-            // Javadoc 1.2 rules:", "-            //   Multiple -group args allowed.", "-            //   Each arg includes 3 strings: -group [name] [packagelist].", "-            //   Elements in [packagelist] are colon-delimited.", "-            //   An element in [packagelist] may end with the * wildcard.", "-", "-            // Ant javadoc task rules for group attribute:", "-            //   Args are comma-delimited.", "-            //   Each arg is 2 space-delimited strings.", "-            //   E.g., group=\"XSLT_Packages org.apache.xalan.xslt*,", "-            //                XPath_Packages org.apache.xalan.xpath*\"", "-            if (group != null) {", "-                StringTokenizer tok = new StringTokenizer(group, \",\", false);", "-                while (tok.hasMoreTokens()) {", "-                    String grp = tok.nextToken().trim();", "-                    int space = grp.indexOf(\" \");", "-                    if (space > 0) {", "-                        String name = grp.substring(0, space);", "-                        String pkgList = grp.substring(space + 1);", "-                        toExecute.createArgument().setValue(\"-group\");", "-                        toExecute.createArgument().setValue(name);", "-                        toExecute.createArgument().setValue(pkgList);", "-                    }", "-                }", "-            }", "-", "-            // add the group arguments", "-            if (groups.size() != 0) {", "-                for (Enumeration e = groups.elements(); e.hasMoreElements();) {", "-                    GroupArgument ga = (GroupArgument) e.nextElement();", "-                    String title = ga.getTitle();", "-                    String packages = ga.getPackages();", "-                    if (title == null || packages == null) {", "-                        throw new BuildException(\"The title and packages must \"", "-                                                 + \"be specified for group \"", "-                                                 + \"elements.\");", "-                    }", "-                    toExecute.createArgument().setValue(\"-group\");", "-                    toExecute.createArgument().setValue(expand(title));", "-                    toExecute.createArgument().setValue(packages);", "-                }", "-            }", "-", "-            // JavaDoc 1.4 parameters", "-            if (javadoc4) {", "-                for (Enumeration e = tags.elements(); e.hasMoreElements();) {", "-                    Object element = e.nextElement();", "-                    if (element instanceof TagArgument) {", "-                        TagArgument ta = (TagArgument) element;", "-                        File tagDir = ta.getDir(getProject());", "-                        if (tagDir == null) {", "-                            // The tag element is not used as a fileset,", "-                            // but specifies the tag directly.", "-                            toExecute.createArgument().setValue (\"-tag\");", "+                            String packageListURL =", "+                                FILE_UTILS.getFileURL(packageListLocation)", "+                                .toExternalForm();", "-                                .setValue (ta.getParameter());", "-                        } else {", "-                            // The tag element is used as a", "-                            // fileset. Parse all the files and create", "-                            // -tag arguments.", "-                            DirectoryScanner tagDefScanner = ", "-                                ta.getDirectoryScanner(getProject());", "-                            String[] files = tagDefScanner.getIncludedFiles();", "-                            for (int i = 0; i < files.length; i++) {", "-                                File tagDefFile = new File(tagDir, files[i]);", "-                                try {", "-                                    BufferedReader in", "-                                        = new BufferedReader(", "-                                              new FileReader(tagDefFile)", "-                                              );", "-                                    String line = null;", "-                                    while ((line = in.readLine()) != null) {", "-                                        toExecute.createArgument()", "-                                            .setValue(\"-tag\");", "-                                        toExecute.createArgument()", "-                                            .setValue(line);", "-                                    }", "-                                    in.close();", "-                                } catch (IOException ioe) {", "-                                    throw new BuildException(\"Couldn't read \"", "-                                        + \" tag file from \"", "-                                        + tagDefFile.getAbsolutePath(), ioe);", "-                                }", "-                            }", "+                                .setValue(\"-linkoffline\");", "+                            toExecute.createArgument()", "+                                .setValue(link);", "+                            toExecute.createArgument()", "+                                .setValue(packageListURL);", "+                        } catch (MalformedURLException ex) {", "+                            log(\"Warning: Package list location was \"", "+                                + \"invalid \" + packageListLocation,", "+                                Project.MSG_WARN);", "-                        ExtensionInfo tagletInfo = (ExtensionInfo) element;", "-                        toExecute.createArgument().setValue(\"-taglet\");", "-                        toExecute.createArgument().setValue(tagletInfo", "-                                                            .getName());", "-                        if (tagletInfo.getPath() != null) {", "-                            Path tagletPath = tagletInfo.getPath()", "-                                .concatSystemClasspath(\"ignore\");", "-                            if (tagletPath.size() != 0) {", "-                                toExecute.createArgument()", "-                                    .setValue(\"-tagletpath\");", "-                                toExecute.createArgument().setPath(tagletPath);", "+                        log(\"Warning: No package list was found at \"", "+                            + packageListLocation, Project.MSG_VERBOSE);", "+                    }", "+                } else {", "+                    toExecute.createArgument().setValue(\"-link\");", "+                    toExecute.createArgument().setValue(link);", "+                }", "+            }", "+        }", "+", "+        // add the single group arguments", "+        // Javadoc 1.2 rules:", "+        //   Multiple -group args allowed.", "+        //   Each arg includes 3 strings: -group [name] [packagelist].", "+        //   Elements in [packagelist] are colon-delimited.", "+        //   An element in [packagelist] may end with the * wildcard.", "+", "+        // Ant javadoc task rules for group attribute:", "+        //   Args are comma-delimited.", "+        //   Each arg is 2 space-delimited strings.", "+        //   E.g., group=\"XSLT_Packages org.apache.xalan.xslt*,", "+        //                XPath_Packages org.apache.xalan.xpath*\"", "+        if (group != null) {", "+            StringTokenizer tok = new StringTokenizer(group, \",\", false);", "+            while (tok.hasMoreTokens()) {", "+                String grp = tok.nextToken().trim();", "+                int space = grp.indexOf(\" \");", "+                if (space > 0) {", "+                    String name = grp.substring(0, space);", "+                    String pkgList = grp.substring(space + 1);", "+                    toExecute.createArgument().setValue(\"-group\");", "+                    toExecute.createArgument().setValue(name);", "+                    toExecute.createArgument().setValue(pkgList);", "+                }", "+            }", "+        }", "+", "+        // add the group arguments", "+        if (groups.size() != 0) {", "+            for (Enumeration e = groups.elements(); e.hasMoreElements();) {", "+                GroupArgument ga = (GroupArgument) e.nextElement();", "+                String title = ga.getTitle();", "+                String packages = ga.getPackages();", "+                if (title == null || packages == null) {", "+                    throw new BuildException(\"The title and packages must \"", "+                                             + \"be specified for group \"", "+                                             + \"elements.\");", "+                }", "+                toExecute.createArgument().setValue(\"-group\");", "+                toExecute.createArgument().setValue(expand(title));", "+                toExecute.createArgument().setValue(packages);", "+            }", "+        }", "+", "+        // JavaDoc 1.4 parameters", "+        if (javadoc4 || executable != null) {", "+            for (Enumeration e = tags.elements(); e.hasMoreElements();) {", "+                Object element = e.nextElement();", "+                if (element instanceof TagArgument) {", "+                    TagArgument ta = (TagArgument) element;", "+                    File tagDir = ta.getDir(getProject());", "+                    if (tagDir == null) {", "+                        // The tag element is not used as a fileset,", "+                        // but specifies the tag directly.", "+                        toExecute.createArgument().setValue (\"-tag\");", "+                        toExecute.createArgument()", "+                            .setValue (ta.getParameter());", "+                    } else {", "+                        // The tag element is used as a", "+                        // fileset. Parse all the files and create", "+                        // -tag arguments.", "+                        DirectoryScanner tagDefScanner = ", "+                            ta.getDirectoryScanner(getProject());", "+                        String[] files = tagDefScanner.getIncludedFiles();", "+                        for (int i = 0; i < files.length; i++) {", "+                            File tagDefFile = new File(tagDir, files[i]);", "+                            try {", "+                                BufferedReader in", "+                                    = new BufferedReader(", "+                                          new FileReader(tagDefFile)", "+                                          );", "+                                String line = null;", "+                                while ((line = in.readLine()) != null) {", "+                                    toExecute.createArgument()", "+                                        .setValue(\"-tag\");", "+                                    toExecute.createArgument()", "+                                        .setValue(line);", "+                                }", "+                                in.close();", "+                            } catch (IOException ioe) {", "+                                throw new BuildException(\"Couldn't read \"", "+                                    + \" tag file from \"", "+                                    + tagDefFile.getAbsolutePath(), ioe);", "-                }", "-", "-                if (source != null) {", "-                    toExecute.createArgument().setValue(\"-source\");", "-                    toExecute.createArgument().setValue(source);", "-                }", "-", "-                if (linksource && doclet == null) {", "-                    toExecute.createArgument().setValue(\"-linksource\");", "-                }", "-                if (breakiterator && doclet == null) {", "-                    toExecute.createArgument().setValue(\"-breakiterator\");", "-                }", "-                if (noqualifier != null && doclet == null) {", "-                    toExecute.createArgument().setValue(\"-noqualifier\");", "-                    toExecute.createArgument().setValue(noqualifier);", "+                } else {", "+                    ExtensionInfo tagletInfo = (ExtensionInfo) element;", "+                    toExecute.createArgument().setValue(\"-taglet\");", "+                    toExecute.createArgument().setValue(tagletInfo", "+                                                        .getName());", "+                    if (tagletInfo.getPath() != null) {", "+                        Path tagletPath = tagletInfo.getPath()", "+                            .concatSystemClasspath(\"ignore\");", "+                        if (tagletPath.size() != 0) {", "+                            toExecute.createArgument()", "+                                .setValue(\"-tagletpath\");", "+                            toExecute.createArgument().setPath(tagletPath);", "+                        }", "+                    }", "+            if (source != null) {", "+                toExecute.createArgument().setValue(\"-source\");", "+                toExecute.createArgument().setValue(source);", "+            }", "+", "+            if (linksource && doclet == null) {", "+                toExecute.createArgument().setValue(\"-linksource\");", "+            }", "+            if (breakiterator && doclet == null) {", "+                toExecute.createArgument().setValue(\"-breakiterator\");", "+            }", "+            if (noqualifier != null && doclet == null) {", "+                toExecute.createArgument().setValue(\"-noqualifier\");", "+                toExecute.createArgument().setValue(noqualifier);", "+            }", "+        } else {", "+            // Not 1.4+.", "+            if (!tags.isEmpty()) {", "+                log(\"-tag and -taglet options not supported on Javadoc < 1.4\",", "+                     Project.MSG_VERBOSE);", "+            }", "+            if (source != null) {", "+                log(\"-source option not supported on JavaDoc < 1.4\",", "+                     Project.MSG_VERBOSE);", "+            }", "+            if (linksource) {", "+                log(\"-linksource option not supported on JavaDoc < 1.4\",", "+                     Project.MSG_VERBOSE);", "+            }", "+            if (breakiterator) {", "+                log(\"-breakiterator option not supported on JavaDoc < 1.4\",", "+                     Project.MSG_VERBOSE);", "+            }", "+            if (noqualifier != null) {", "+                log(\"-noqualifier option not supported on JavaDoc < 1.4\",", "+                     Project.MSG_VERBOSE);", "+            }", "+        }", "+        // Javadoc 1.2/1.3 parameters:", "+        if (!javadoc4 || executable != null) {", "+            if (old) {", "+                toExecute.createArgument().setValue(\"-1.1\");", "+            }", "+        } else {", "+            if (old) {", "+                log(\"Javadoc 1.4 doesn't support the -1.1 switch anymore\",", "+                    Project.MSG_WARN);", "+            }", "+                    // XXX what is the following doing? should it run if !javadoc4 && executable != null?"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebc881bfcd76dbd88984bc99ece6788a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/pvcs/Pvcs.java", "commitBeforeChange": "537a07b019e2de8769ae71acad23e90e725050f8", "commitAfterChange": "0e650797a55ba63d32831b2b77e809554e31bcd2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void execute() throws org.apache.tools.ant.BuildException", "signatureAfterChange": "     public void execute() throws org.apache.tools.ant.BuildException", "diff": ["+        File tmp2 = null;", "-            tmp = new File(\"pvcs_ant_\"+(new Random(System.currentTimeMillis())).nextLong()+\".log\");", "+            Random rand = new Random(System.currentTimeMillis());", "+            tmp = new File(\"pvcs_ant_\"+rand.nextLong()+\".log\");", "+            tmp2 = new File(\"pvcs_ant_\"+rand.nextLong()+\".log\");", "+            log(\"Executing \" + commandLine.toString(), Project.MSG_VERBOSE);", "-                throw new BuildException(\"Communication between ant and pvcs failed\");", "-                                ", "-            // Create foldes in workspace", "+                throw new BuildException(\"Communication between ant and pvcs failed. No output generated from executing PVCS commandline interface \\\"pcli\\\" and \\\"get\\\"\");", "+", "+            // Create folders in workspace", "+            log(\"Creating folders\", Project.MSG_INFO);", "+", "+            // Massage PCLI lvf output transforming '\\' to '/' so get command works appropriately", "+            massagePCLI(tmp, tmp2);", "-            commandLine.createArgument().setValue(\"@\"+tmp.getAbsolutePath());", "+", "+            if (updateOnly) {", "+                commandLine.createArgument().setValue(\"-U\");", "+            }", "+", "+            commandLine.createArgument().setValue(\"@\"+tmp2.getAbsolutePath());", "+            log(\"Getting files\", Project.MSG_INFO);", "+            log(\"Executing \" + commandLine.toString(), Project.MSG_VERBOSE);", "-                String msg = \"Failed executing: \" + commandLine.toString();", "+                String msg = \"Failed executing: \" + commandLine.toString() + \". Return code was \"+result;", "-            String msg = \"Failed executing: \" + commandLine.toString();", "-            throw new BuildException(e.getMessage(),location);", "+            String msg = \"Failed executing: \" + commandLine.toString() + \". Exception: \"+e.getMessage();", "+            throw new BuildException(msg,location);", "-            String msg = \"Failed executing: \" + commandLine.toString();", "-            throw new BuildException(e.getMessage(),location);", "+            String msg = \"Failed executing: \" + commandLine.toString() + \". Exception: \"+e.getMessage();", "+            throw new BuildException(msg,location);", "-            String msg = \"Failed executing: \" + commandLine.toString();", "-            throw new BuildException(e.getMessage(),location);", "+            String msg = \"Failed executing: \" + commandLine.toString() + \". Exception: \"+e.getMessage();", "+            throw new BuildException(msg,location);", "+            }", "+            if (tmp2 != null) {", "+                tmp2.delete();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0580d974b48c151d828ed01d7a7e1fbe", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06d121e2edf40cac447f074fc1cf247a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ClassIntrospector.java", "commitBeforeChange": "e0fef5cf64773a98734998b9736ded96fc8be2c7", "commitAfterChange": "81c17b6164451315e24ae774f1bed668cbca99ce", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public ClassIntrospector(final Class bean, Map converters)", "signatureAfterChange": "     public ClassIntrospector(final Class bean, Map converters)", "diff": ["-            } else if (name.startsWith(\"add\")", "+            } else if (name.startsWith(\"addConfigured\")", "+                 && name.length() > 13", "+                 && returnType.equals(Void.TYPE)", "+                 && args.length == 1", "+                 && !args[0].equals(String.class)", "+                 && !args[0].isArray()", "+                 && !args[0].isPrimitive()) {", "+                reflector.addElementMethod(m, ", "+                    getPropertyName(name, \"addConfigured\"));", "+             } else if (name.startsWith(\"add\")", "-            } else if (name.startsWith(\"create\")", "+           } else if (name.startsWith(\"create\")"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e63868744964b65ec8c12f5fadaa162", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "69d85ab035ac0f844d21d1b33e7f508820942277", "commitAfterChange": "59c41d005e84e1f673b5b74d6d84aeb82219ed23", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     private IntrospectionHelper(final Class bean)", "signatureAfterChange": "     private IntrospectionHelper(final Class bean)", "diff": ["-                if (attributeSetters.get(propName) != null) {", "+                AttributeSetter as = (AttributeSetter) attributeSetters.get(propName);", "+                if (as != null) {", "+                    if (java.io.File.class.equals(args[0])) {", "+                        // Ant Resources/FileProviders override java.io.File", "+                        if (Resource.class.equals(as.type) || FileProvider.class.equals(as.type)) {", "+                            continue;", "+                        }", "+                    }", "-                        If the argument is not a String and if there", "-                        is an overloaded form of this method already defined,", "+                        In cases other than those just explicitly covered,", "-                AttributeSetter as = createAttributeSetter(m, args[0], propName);", "+                as = createAttributeSetter(m, args[0], propName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1194d7f6dd109fe1bb17f310c3ed84f3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/pvcs/Pvcs.java", "commitBeforeChange": "448f5ee22c42b02fb503c012fa81ece4949fba61", "commitAfterChange": "7d38166d02b60e2b2c8c5d422cf3f6d522d74d9f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void createFolders(File file) throws IOException, ParseException", "signatureAfterChange": "     private void createFolders(File file) throws IOException, ParseException", "diff": ["-                    line.startsWith(getLineStart())) {", "+                    (line.length() >3 &&", "+                     line.startsWith(\"\\\"\") &&", "+                     Character.isLetter(line.charAt(1)) &&", "+                     String.valueOf(line.charAt(2)).equals(\":\") &&", "+                     String.valueOf(line.charAt(3)).equals(\"\\\\\"))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13de54b7523901d93c086843bfce2a86", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "16a6a13fffa43043cd0654c43e962ed207d9ee23", "commitAfterChange": "fb2b9616dc8be39d80b58a0fbdfff5ceecd18d1f", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "     public String fromURI(String uri)", "signatureAfterChange": "     public String fromURI(String uri)", "diff": ["+        if (Os.isFamily(\"dos\") && uri.startsWith(\"\\\\\") && uri.length() > 2", "+            && Character.isLetter(uri.charAt(1)) && uri.charAt(2) == ':') {", "+            uri = uri.substring(1);", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "159da8c6267f6651bf4599eefa8331e0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "3742a036cb052bd971bd117738230ecfbdcbf7bb", "commitAfterChange": "41893fdb3052f79a2d09d7f8a86711912fc429e6", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void runBuild(ClassLoader coreLoader) throws BuildException", "signatureAfterChange": "     private void runBuild(ClassLoader coreLoader) throws BuildException", "diff": ["-            SecurityManager oldsm = System.getSecurityManager();", "+            // use a system manager that prevents from System.exit()", "+            // only in JDK > 1.1", "+            SecurityManager oldsm = null;", "+            if ( !Project.JAVA_1_0.equals(Project.getJavaVersion()) &&", "+                !Project.JAVA_1_1.equals(Project.getJavaVersion()) ){", "+                oldsm = System.getSecurityManager();", "+                System.setSecurityManager(new NoExitSecurityManager());", "+            }", "+                // put back the original security manager", "+                if (oldsm != null){", "+                    System.setSecurityManager(oldsm);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20bc273e0a71bad776e7ccbb2054d3eb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Expand.java", "commitBeforeChange": "0bb2e45e7115f9738a9cc5fc39179cb0e95b04f2", "commitAfterChange": "5019b99eb659b8f84a3b02c47f040c813ce62a54", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     protected void extractFile(FileUtils fileUtils, File srcF, File dir,                                InputStream compressedInputStream,                                String entryName, Date entryDate,                                boolean isDirectory, FileNameMapper mapper)                                throws IOException", "signatureAfterChange": "     protected void extractFile(FileUtils fileUtils, File srcF, File dir,                                InputStream compressedInputStream,                                String entryName, Date entryDate,                                boolean isDirectory, FileNameMapper mapper)                                throws IOException", "diff": ["+        if (stripAbsolutePathSpec && entryName.length() > 0", "+            && (entryName.charAt(0) == File.separatorChar", "+                || entryName.charAt(0) == '/'", "+                || entryName.charAt(0) == '\\\\')) {", "+            log(\"stripped absolute path spec from \" + entryName,", "+                Project.MSG_VERBOSE);", "+            entryName = entryName.substring(1);", "+        }", "+", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2456967445de68965a3b19c476b22f3f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "effcb7ade9843fece34e9c5546f913fc3f13ac1a", "commitAfterChange": "7a132746ebc4838b84a555d60d7945228d83cc8d", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      protected void addZipEntries(ZipFileSet fs, DirectoryScanner ds,       ZipOutputStream zOut, String prefix)         throws IOException", "signatureAfterChange": "      protected void addZipEntries(ZipFileSet fs, DirectoryScanner ds,                                  ZipOutputStream zOut, String prefix, String fullpath)         throws IOException", "diff": ["-      ZipOutputStream zOut, String prefix)", "+                                 ZipOutputStream zOut, String prefix, String fullpath)", "+        if (prefix.length() > 0 && fullpath.length() > 0)", "+            throw new BuildException(\"Both prefix and fullpath attributes may not be set on the same fileset.\");", "+", "-                    addParentDirs(null, vPath, zOut, prefix);", "-                    if (! entry.isDirectory()) {", "-                        zipFile(in, zOut, prefix+vPath, entry.getTime());", "+                    if (prefix.length() > 0) {", "+                        addParentDirs(null, vPath, zOut, prefix);", "+                        if (! entry.isDirectory()) {", "+                            zipFile(in, zOut, prefix+vPath, entry.getTime());", "+                        }", "+                    }", "+                    else if (fullpath.length() > 0) {", "+                        zipFile(in, zOut, fullpath, entry.getTime());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "493fd2c7b32cf8b805a7e4f77a023ced", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Ant.java", "commitBeforeChange": "a341406b2811a02d05b05d734ef402d6735fe919", "commitAfterChange": "7ee8e30cd0293a64436b6b639606ff3ba8ab25ca", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+            // Are we trying to call the target in which we are defined?", "+            if (p1.getBaseDir().equals(project.getBaseDir()) &&", "+                p1.getProperty(\"ant.file\").equals(project.getProperty(\"ant.file\")) &&", "+                target.equals(this.getOwningTarget().getName())) { ", "+", "+                throw new BuildException(\"ant task calling it's own parent target\");", "+            }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "837a9ceddc4d00f4ab3ab291caf97265", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "51e2cc543512d445e415bc5b7c2a42f98ddf8446", "commitAfterChange": "8e955e3a2e84e093d19f8053f610c479a3f27478", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     protected void addFiles(FileScanner scanner, ZipOutputStream zOut,                              String prefix) throws IOException", "signatureAfterChange": "     protected void addFiles(FileScanner scanner, ZipOutputStream zOut,                              String prefix, String fullpath) throws IOException", "diff": ["-                            String prefix) throws IOException {", "+                            String prefix, String fullpath) throws IOException {", "+        if (prefix.length() > 0 && fullpath.length() > 0)", "+             throw new BuildException(\"Both prefix and fullpath attributes may not be set on the same fileset.\");", "+", "+        if (dirs.length > 0 && fullpath.length() > 0)", "+            throw new BuildException(\"fullpath attribute may only be specified for filesets that specify a single file.\");", "+         if (files.length > 1 && fullpath.length() > 0)", "+            throw new BuildException(\"fullpath attribute may only be specified for filesets that specify a single file.\");", "-            String name = files[i].replace(File.separatorChar,'/');", "-            addParentDirs(thisBaseDir, name, zOut, prefix);", "-            zipFile(f, zOut, prefix+name);", "+            if (fullpath.length() > 0)", "+            {", "+                // Add this file at the specified location.", "+                addParentDirs(null, fullpath, zOut, \"\");", "+                zipFile(f, zOut, fullpath);", "+            }", "+            else", "+            {", "+                // Add this file with the specified prefix.", "+                String name = files[i].replace(File.separatorChar,'/');", "+                addParentDirs(thisBaseDir, name, zOut, prefix);", "+                zipFile(f, zOut, prefix+name);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b542ec9b1928d8c594564ec7395ae76", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "4213be7405b3972ce4b346144f04a1878f29561d", "commitAfterChange": "3930d3e938dfbe45835ef7b28d00d5714bc304d0", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void run()", "signatureAfterChange": "     public void run()", "diff": ["-        res = new TestResult();", "+        res = new IgnoredTestResult();", "-                            formalParams = new Class[] {Class.class};", "-                            actualParams = new Object[] {testClass};", "+                            formalParams = new Class[] {Class.class, JUnit4TestAdapterCache.class};", "+                            actualParams = new Object[] {testClass, CustomJUnit4TestAdapterCache.getInstance()};", "-                junitTest.setCounts(1, 0, 1);", "+                junitTest.setCounts(1, 0, 1, 0);", "-                        junitTest.setCounts(res.runCount(), cnts[0], cnts[1]);", "+                        junitTest.setCounts(res.runCount() + res.ignoredCount(), cnts[0], cnts[1], res.ignoredCount() + res.skippedCount());", "-                        junitTest.setCounts(res.runCount(), res.failureCount(),", "-                                res.errorCount());", "+                        junitTest.setCounts(res.runCount() + res.ignoredCount(), res.failureCount(),", "+                                res.errorCount(), res.ignoredCount() + res.skippedCount());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa984600b7838e3411cbda647819e6b7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Tar.java", "commitBeforeChange": "82377345488d92a4bd5f65ae312611b4c7ae5cf0", "commitAfterChange": "d6e5c9e8163a8375db602c97c73e83d01ab85146", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      protected void tarFile(File file, TarOutputStream tOut, String vPath,                            TarFileSet tarFileSet)         throws IOException", "signatureAfterChange": "      protected void tarFile(File file, TarOutputStream tOut, String vPath,                            TarFileSet tarFileSet)         throws IOException", "diff": ["-        FileInputStream fIn = new FileInputStream(file);", "-", "+        FileInputStream fIn = null;", "+        if (file.isDirectory() && vPath.length() != 0 ", "+                && vPath.charAt(vPath.length() - 1) != '/')", "+            vPath = vPath + \"/\";", "-            te.setSize(file.length());", "+                te.setSize(file.length());", "-            }", "+            } ", "-            byte[] buffer = new byte[8 * 1024];", "-            int count = 0;", "-            do {", "-                tOut.write(buffer, 0, count);", "-                count = fIn.read(buffer, 0, buffer.length);", "-            } while (count != -1);", "+            if (!file.isDirectory()) {", "+                fIn = new FileInputStream(file);", "+", "+                byte[] buffer = new byte[8 * 1024];", "+                int count = 0;", "+                do {", "+                    tOut.write(buffer, 0, count);", "+                    count = fIn.read(buffer, 0, buffer.length);", "+                } while (count != -1);", "+            }", "-            fIn.close();", "+            if (fIn != null)", "+                fIn.close();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6576e47d9f6583328d6332300c98c3c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "68573483755127bbfadcc3296e3ab13c6a5f8967", "commitAfterChange": "aa7f2d4046722f4ed1ea63464f0573e4accb418d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      private IntrospectionHelper(final Class bean)", "signatureAfterChange": "      private IntrospectionHelper(final Class bean)", "diff": ["-            // not really user settable properties", "-            if (\"setLocation\".equals(name) || ", "-                \"setDescription\".equals(name) ||", "-                \"setTaskType\".equals(name)) {", "+            // not really user settable properties on tasks", "+            if (org.apache.tools.ant.Task.class.isAssignableFrom(bean) ", "+                && args.length == 1 &&", "+                (", "+                 (", "+                  \"setLocation\".equals(name) && org.apache.tools.ant.Location.class.equals(args[0])", "+                  ) || ( ", "+                   \"setDescription\".equals(name) && java.lang.String.class.equals(args[0])", "+                  ) || (", "+                   \"setTaskType\".equals(name) && java.lang.String.class.equals(args[0])", "+                  )", "+                 )) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b768904f07da1da6437bfedb26bff3d9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "dbecca155c71b3db823e8b6b9998503a4c42077d", "commitAfterChange": "9bc78e6c258fbc9ff142f959d67730b990f4834f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      private IntrospectionHelper(final Class bean)", "signatureAfterChange": "      private IntrospectionHelper(final Class bean)", "diff": ["+                ", "+            } else if (\"createElement\".equals(name)", "+                       && !returnType.isArray()", "+                       && !returnType.isPrimitive()", "+                       && args.length == 1", "+                       && java.lang.String.class.equals(args[0])) {", "+", "+                elementFactoryMethod = methods[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c30005d59de8918153598e689f710530", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/XalanExecutor.java", "commitBeforeChange": "dd5dfe2ceb9655165a1553926dadb23d50c2a8cf", "commitAfterChange": "957f9e512572a78a3e82ca1d0938f486394950dd", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     static XalanExecutor newInstance(AggregateTransformer caller) throws BuildException", "signatureAfterChange": "     static XalanExecutor newInstance(AggregateTransformer caller) throws BuildException", "diff": ["-                throw new BuildException(\"Could not find xalan2 nor xalan1 \"", "-                    + \"in the classpath. Check http://xml.apache.org/xalan-j\");", "+                String msg = \"Could not find xalan2 nor xalan1 \"", "+                    + \"in the classpath. Check http://xml.apache.org/xalan-j/\";", "+                if (!JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)", "+                    && !JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_2)", "+                    && !JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_3)", "+                    && !JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_4)) {", "+                    msg += \"\\r\\nStarting with JDK 1.5, the built-in processor \"", "+                        + \"of the JDK is no longer Xalan\\r\\nbut XSLTC which is \"", "+                        + \"not (yet) supported by the junitreport task.\";", "+                }", "+                throw new BuildException(msg);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf8a9cee30d5cf1bd57a1d15269b1631", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Project.java", "commitBeforeChange": "4cc50d387f2042c897b22a4ae6bff2f556071ffe", "commitAfterChange": "7e01ed9d2d7fa189892aa9d1a3ff24ad75dbf1d7", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": "     public Object getReference(String key)", "signatureAfterChange": "     public Object getReference(String key)", "diff": ["-        return resolveIdReference(key, this);", "+        ret = resolveIdReference(key, this);", "+        if (ret == null && !key.equals(MagicNames.REFID_PROPERTY_HELPER)) {", "+            Vector p = new Vector();", "+            PropertyHelper.getPropertyHelper(this).parsePropertyString(", "+                key, new Vector(), p);", "+            if (p.size() == 1) {", "+                log(\"Unresolvable reference \" + key", "+                    + \" might be a misuse of property expansion syntax.\",", "+                    MSG_WARN);", "+            }", "+        }", "+        return ret;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edca4da6e71682a312b9a5544c946479", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "51e2cc543512d445e415bc5b7c2a42f98ddf8446", "commitAfterChange": "8e955e3a2e84e093d19f8053f610c479a3f27478", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     protected void addFiles(Vector v, ZipOutputStream zOut, String prefix)         throws IOException", "signatureAfterChange": "     protected void addFiles(Vector filesets, ZipOutputStream zOut)         throws IOException", "diff": ["-     */", "-    protected void addFiles(Vector v, ZipOutputStream zOut, String prefix)", "-        throws IOException {", "-        for (int i=0; i<v.size(); i++) {", "-            FileSet fs = (FileSet) v.elementAt(i);", "-            DirectoryScanner ds = fs.getDirectoryScanner(project);", "-            addFiles(ds, zOut, prefix);", "-        }", "-    }", "+    protected void addFiles(Vector filesets, ZipOutputStream zOut)", "+        // Add each fileset in the Vector.", "+        for (int i = 0; i<filesets.size(); i++) {", "+            PrefixedFileSet fs = (PrefixedFileSet) filesets.elementAt(i);", "+            String fullpath = fs.getFullpath();", "+            // Need to manually add either fullpath's parent directory, or ", "+            // the prefix directory, to the archive. ", "+            } else if (fullpath.length() > 0) {", "+                addParentDirs(null, fullpath, zOut, \"\");", "+\t\t\t}", "+            // Add the fileset.", "+            addFiles(ds, zOut, prefix, fullpath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8a6f358f713f9fbbced0ca59fec6091", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ClassIntrospector.java", "commitBeforeChange": "7499c443d67445ea8fd0b8f4bd56c72251b18bf4", "commitAfterChange": "b7e43ad8c5906ae2b6d6b42f8b2715dc7d2e7a16", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public ClassIntrospector(final Class bean, Map converters)", "signatureAfterChange": "     public ClassIntrospector(final Class bean, Map converters)", "diff": ["+            } else if (name.startsWith(\"create\")", "+                 && name.length() > 6", "+                 && !returnType.isArray()", "+                 && !returnType.isPrimitive()", "+                 && args.length == 0) {", "+                reflector.addCreateMethod(m, getPropertyName(name, \"create\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f938ae206ff80bb1c1de65024f6ddafb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "6e2f15d42aa6566bbe2c5a43d64f4194498e1160", "commitAfterChange": "6c36c507ed3bb2876259527fa511daa186581568", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      private IntrospectionHelper(final Class bean)", "signatureAfterChange": "      private IntrospectionHelper(final Class bean)", "diff": ["+            // hide addTask for TaskContainers", "+            if (org.apache.tools.ant.TaskContainer.class.isAssignableFrom(bean) ", "+                && args.length == 1 && \"addTask\".equals(name) ", "+                && org.apache.tools.ant.Task.class.equals(args[0])) {", "+                continue;", "+            }", "+            ", "+"]}]}
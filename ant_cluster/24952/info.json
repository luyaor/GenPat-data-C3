{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "01be9fefb6be8b724bdb76ab8c5c29aa", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43110368f8a7ffba986c5f03a8693ae6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Java.java", "commitBeforeChange": "5e898465ac1ab3d90fdc26dc34a2b87a2ea9be35", "commitAfterChange": "c5faebbd854cf6f4363402c2cd2a54749b4eeb61", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 14, "signatureBeforeChange": "     protected void run(String classname, Vector args) throws BuildException", "signatureAfterChange": "     protected void run(String classname, Vector args) throws BuildException", "diff": ["-        try {", "-            Class c = null;", "-            if (classpath == null) {", "-                c = Class.forName(classname);", "-            } ", "-            else {", "-                AntClassLoader loader = new AntClassLoader(project, classpath);", "-                c = loader.forceLoadClass(classname);", "-            }", "-        ", "-            Class[] param = { Class.forName(\"[Ljava.lang.String;\") };", "-            Method main = c.getMethod(\"main\", param);", "-            Object[] a = { array(args) };", "-            main.invoke(null, a);", "-        } catch (NullPointerException e) {", "-            throw new BuildException(\"Could not find main() method in \" + classname);", "-        } catch (ClassNotFoundException e) {", "-            throw new BuildException(\"Could not find \" + classname + \". Make sure you have it in your classpath\");", "-        } catch (InvocationTargetException e) {", "-            Throwable t = e.getTargetException();", "-            if (!(t instanceof SecurityException)) {", "-                throw new BuildException(t.toString());", "-            }", "-            // else ignore because the security exception is thrown", "-            // if the invoked application tried to call System.exit()", "-        } catch (Exception e) {", "-            throw new BuildException(e.toString());", "+        CommandlineJava cmdj = new CommandlineJava();", "+        cmdj.setClassname(classname);", "+        for (int i=0; i<args.size(); i++) {", "+            cmdj.createArgument().setValue((String) args.elementAt(i));", "+        if (cmdl.getClasspath() != null) {", "+            cmdj.createClasspath(project).append(cmdl.getClasspath());", "+        }", "+        run(cmdj);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7f746f88c22a84781f9275d9e598806", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/taskdefs/ExecuteJava.java", "commitBeforeChange": "a989b254f04d33e5bc2370b62121bd56830ac2f1", "commitAfterChange": "3fee832d2527f3b952683181980a446b44f5e5bf", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public void execute()         throws TaskException", "signatureAfterChange": "      public void execute( final TaskContext context )         throws TaskException", "diff": ["-    public void execute()", "+", "+    public void execute( final TaskContext context )", "-        final String classname = m_javaCommand.getExecutable();", "-        final Object[] argument = new Object[]{m_javaCommand.getArguments()};", "+        // Validate", "+        if( m_className != null && m_jar != null )", "+        {", "+            throw new TaskException( \"Only one of Classname and Jar can be set.\" );", "+        }", "+        else if( m_className == null && m_jar == null )", "+        {", "+            throw new TaskException( \"Classname must not be null.\" );", "+        }", "+        if( ! m_fork )", "+        {", "+            if( m_jar != null )", "+            {", "+                throw new TaskException( \"Cannot execute a jar in non-forked mode.\" );", "+            }", "+            if( m_vmArgs.size() > 0 )", "+            {", "+                context.warn( \"JVM args ignored when same JVM is used.\" );", "+            }", "+            if( m_workingDirectory != null )", "+            {", "+                context.warn( \"Working directory ignored when same JVM is used.\" );", "+            }", "+            if( m_sysProperties.size() > 0 )", "+            {", "+                context.warn( \"System properties ignored when same JVM is used.\" );", "+            }", "+        }", "+        if( m_fork )", "+        {", "+            execForked( context );", "+        }", "+        else", "+        {", "+            execNonForked( context );", "+        }", "+    }", "-            if( m_sysProperties != null )", "-                m_sysProperties.setSystem();", "-            }", "-", "-            final Class[] param = {Class.forName( \"[Ljava.lang.String;\" )};", "-            Class target = null;", "-            if( m_classpath == null )", "-            {", "-                target = Class.forName( classname );", "-                final URL[] urls = PathUtil.toURLs( m_classpath );", "-                target = classLoader.loadClass( classname );", "-            }", "-            final Method main = target.getMethod( \"main\", param );", "-            main.invoke( null, argument );", "-        }", "-        catch( NullPointerException e )", "-        {", "-            throw new TaskException( \"Could not find main() method in \" + classname );", "-        }", "-        catch( ClassNotFoundException e )", "-        {", "-            throw new TaskException( \"Could not find \" + classname + \". Make sure you have it in your classpath\" );", "-        }", "-        catch( InvocationTargetException e )", "-        {", "-            Throwable t = e.getTargetException();", "-            if( !( t instanceof SecurityException ) )", "-            {", "-                throw new TaskException( \"Error\", t );", "-            }", "-            else", "-            {", "-                throw (SecurityException)t;", "-        catch( Exception e )", "-            throw new TaskException( \"Error\", e );", "-        finally", "-            if( m_sysProperties != null )", "-            {", "-                m_sysProperties.restoreSystem();", "-            }"]}]}
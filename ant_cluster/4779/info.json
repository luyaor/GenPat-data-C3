{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "38113d21bcc98e10b8aa2e0e82bb0be6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3300be37c8f1aa5559ce59c102f100c6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/depend/Depend.java", "commitBeforeChange": "a1714edc18cb21c63c5285407456d4c409331908", "commitAfterChange": "37fe632d837d518878c90f674153a6b7cd5adcfd", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                log(\"Reverse Dependency Dump for \" + affectedClassMap.size() +", "-                    \" classes:\", Project.MSG_DEBUG);", "-                for (Enumeration e = affectedClassMap.keys(); e.hasMoreElements();) {", "-                    String className = (String)e.nextElement();", "-                    log(\" Class \" + className + \" affects:\", Project.MSG_DEBUG);", "-                    Hashtable affectedClasses = (Hashtable)affectedClassMap.get(className);", "-                    for (Enumeration e2 = affectedClasses.keys(); e2.hasMoreElements();) {", "-                        String affectedClass = (String)e2.nextElement();", "-                        ClassFileInfo info = (ClassFileInfo)affectedClasses.get(affectedClass);", "-                        log(\"    \" + affectedClass + \" in \" + info.absoluteFile.getPath(), Project.MSG_DEBUG);", "-                    }", "-                }", "-", "-                if (classpathDependencies != null) {", "-                    log(\"Classpath file dependencies (Forward):\", Project.MSG_DEBUG);", "-                    for (Enumeration e = classpathDependencies.keys(); e.hasMoreElements(); ) {", "-                        String className = (String)e.nextElement();", "-                        log(\" Class \" + className + \" depends on:\", Project.MSG_DEBUG);", "-                        Hashtable dependencies = (Hashtable)classpathDependencies.get(className);", "-                        for (Enumeration e2 = dependencies.elements(); e2.hasMoreElements(); ) {", "-                            File classpathFile = (File)e2.nextElement();", "-                            log(\"    \" + classpathFile.getPath(), Project.MSG_DEBUG);", "-                        }", "-                    }", "-                }", "+                dumpDependencies();", "-            // we now need to scan for out of date files. When we have the list", "-            // we go through and delete all class files which are affected by ", "-            // these files.", "-            outOfDateClasses = new Hashtable();", "-            for (int i = 0; i < srcPathList.length; i++) {", "-                File srcDir = (File)project.resolveFile(srcPathList[i]);", "-                if (srcDir.exists()) {", "-                    DirectoryScanner ds = this.getDirectoryScanner(srcDir);", "-                    String[] files = ds.getIncludedFiles();", "-                    scanDir(srcDir, files);", "-                }", "-            }", "-", "-            // now check classpath file dependencies", "-            if (classpathDependencies != null) {", "-                for (Enumeration e = classpathDependencies.keys(); e.hasMoreElements();) {", "-                    String className = (String)e.nextElement();", "-                    if (!outOfDateClasses.containsKey(className)) {", "-                        ClassFileInfo info = (ClassFileInfo)classFileInfoMap.get(className);", "-", "-                        // if we have no info about the class - it may have been deleted already and we", "-                        // are using cached info.", "-                        if (info != null) {", "-                            Hashtable dependencies = (Hashtable)classpathDependencies.get(className);", "-                            for (Enumeration e2 = dependencies.elements(); e2.hasMoreElements(); ) {", "-                                File classpathFile = (File)e2.nextElement();", "-                                if (classpathFile.lastModified() ", "-                                    > (info.absoluteFile.lastModified() + TIME_TOLERANCE)) {", "-                                    log(\"Class \" + className +", "-                                        \" is out of date with respect to \" + classpathFile, Project.MSG_DEBUG);", "-                                    outOfDateClasses.put(className, className);", "-                                    break;", "-                                }", "-                            }", "-                        }", "-                    }", "-                }", "-            }", "-", "-            // we now have a complete list of classes which are out of date", "-            // We scan through the affected classes, deleting any affected classes.", "+            determineOutOfDateClasses(srcPathList);", "-            log(\"Deleted \" + count + \" out of date files in \" + duration + \" seconds\");", "+            log(\"Deleted \" + count + \" out of date files in \" ", "+                + duration + \" seconds\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41baa6b91391828c43eb43212a482887", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Tar.java", "commitBeforeChange": "1400dc3c1b536c70697f83be990b0725121cba90", "commitAfterChange": "b5fcf10604f56a8061d10f332570342b34cc7a9d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "     protected void tarFile(File file, TarOutputStream tOut, String vPath,                            TarFileSet tarFileSet)         throws IOException", "signatureAfterChange": "     protected void tarFile(File file, TarOutputStream tOut, String vPath,                            TarFileSet tarFileSet)         throws IOException", "diff": ["-        FileInputStream fIn = null;", "+        tarResource(new FileResource(file), tOut, vPath, tarFileSet);", "+    }", "-        String fullpath = tarFileSet.getFullpath();", "-        if (fullpath.length() > 0) {", "-            vPath = fullpath;", "-        } else {", "-            // don't add \"\" to the archive", "-            if (vPath.length() <= 0) {", "-                return;", "-            }", "-            if (file.isDirectory() && !vPath.endsWith(\"/\")) {", "-                vPath += \"/\";", "-            }", "-", "-            String prefix = tarFileSet.getPrefix();", "-            // '/' is appended for compatibility with the zip task.", "-            if (prefix.length() > 0 && !prefix.endsWith(\"/\")) {", "-                prefix = prefix + \"/\";", "-            }", "-            vPath = prefix + vPath;", "-        if (vPath.startsWith(\"/\") && !tarFileSet.getPreserveLeadingSlashes()) {", "-            int l = vPath.length();", "-            if (l <= 1) {", "-                // we would end up adding \"\" to the archive", "-                return;", "-            }", "-            vPath = vPath.substring(1, l);", "-        }", "-", "-        try {", "-            if (vPath.length() >= TarConstants.NAMELEN) {", "-                if (longFileMode.isOmitMode()) {", "-                    log(\"Omitting: \" + vPath, Project.MSG_INFO);", "-                } else if (longFileMode.isWarnMode()) {", "-                    log(\"Entry: \" + vPath + \" longer than \"", "-                        + TarConstants.NAMELEN + \" characters.\",", "-                    if (!longWarningGiven) {", "-                        log(\"Resulting tar file can only be processed \"", "-                            + \"successfully by GNU compatible tar commands\",", "-                            Project.MSG_WARN);", "-                        longWarningGiven = true;", "-                    }", "-                } else if (longFileMode.isFailMode()) {", "-                    throw new BuildException(\"Entry: \" + vPath", "-                }", "-            TarEntry te = new TarEntry(vPath);", "-            te.setModTime(file.lastModified());", "-            if (!file.isDirectory()) {", "-                if (file.length() > TarConstants.MAXSIZE) {", "-                    throw new BuildException(\"File: \" + file + \" larger than \" +", "-                            TarConstants.MAXSIZE + \" bytes.\");", "-                }", "-                te.setSize(file.length());", "-            } else {", "-                te.setMode(tarFileSet.getDirMode());", "-            te.setUserName(tarFileSet.getUserName());", "-            te.setGroupName(tarFileSet.getGroup());", "-            te.setUserId(tarFileSet.getUid());", "-            te.setGroupId(tarFileSet.getGid());", "-            if (!file.isDirectory()) {", "-                fIn = new FileInputStream(file);", "-                    count = fIn.read(buffer, 0, buffer.length);", "-            if (fIn != null) {", "-                fIn.close();", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5711b1ede069b039b8b5393ddebb0f24", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "a6e42833f664835fa3f5352d379e3ec520d54eab", "commitAfterChange": "5c440d24815308e7d65366c36742f71c026cd812", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "     protected void zipFile(InputStream in, ZipOutputStream zOut, String vPath,                            long lastModified, File fromArchive, int mode)         throws IOException", "signatureAfterChange": "     protected void zipFile(InputStream in, ZipOutputStream zOut, String vPath,                            long lastModified, File fromArchive,                            int mode)         throws IOException", "diff": ["-                           long lastModified, File fromArchive, int mode)", "+                           long lastModified,", "+                           /* unused, BWC */ File fromArchive,", "+                           int mode)", "+        throws IOException {", "+        zipFile(in, zOut, vPath, lastModified, mode, null);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9546909820c1c4e3e8baa409ea1daca2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/metamata/MParse.java", "commitBeforeChange": "b5ad58c4d736b7f0a97aaa78b258dcceb9c21c89", "commitAfterChange": "7435b27b914764c3845b4821363ffeb4ddfe89cd", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 11, "signatureBeforeChange": "       public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-", "+    /** execute the command line */", "-", "-        if (target == null || !target.isFile()) {", "-            throw new BuildException(\"Invalid target: \" + target);", "+        try {", "+            setUp();", "+            ExecuteStreamHandler handler = createStreamHandler();", "+            _execute(handler);", "+        } finally {", "+            cleanUp();", "-        final File javaFile = new File(target.toString().substring(0,", "-                                                                   target.toString().indexOf(\".jj\")) + \".java\");", "+    }", "-        cmdl.createArgument().setValue(target.getAbsolutePath());", "-", "-        if (metahome == null || !metahome.isDirectory()) {", "-            throw new BuildException(\"Metamatahome not valid.\");", "-        }", "-        if (metaworkingdir == null || !metaworkingdir.isDirectory()) {", "-            throw new BuildException(\"Workingdir not set.\");", "-        }", "-        if (userclasspath == null) {", "-            throw new BuildException(\"Userclasspath not set.\");", "-        }", "-", "-        final Path classpath = cmdl.createClasspath(project);", "-        classpath.createPathElement().setLocation(new File(metahome.getAbsolutePath() + \"/lib/metamatadebug.jar\"));", "-        classpath.createPathElement().setLocation(new File(metahome.getAbsolutePath() + \"/lib/metamata.jar\"));", "-        classpath.createPathElement().setLocation(new File(metahome.getAbsolutePath() + \"/lib/JavaCC.zip\"));", "-", "-        final Commandline.Argument arg = cmdl.createVmArgument();", "-        arg.setValue(\"-mx140M\");", "-        arg.setValue(\"-Dmwp=\" + metaworkingdir.getAbsolutePath());", "-        arg.setValue(\"-Dmetamata.home=\" + metahome.getAbsolutePath());", "-        arg.setValue(\"-Dmetamata.java=java\");", "-        arg.setValue(\"-Dmetamata.java.options=-mx140M\");", "-        arg.setValue(\"-Dmetamata.java.options.classpath=-classpath\");", "-        arg.setValue(\"-Dmetamata.java.compiler=javac\");", "-        arg.setValue(\"-Dmetamata.java.compiler.options.0=-J-mx64M\");", "-        arg.setValue(\"-Dmetamata.java.compiler.options.classpath=-classpath\");", "-        arg.setValue(\"-Dmetamata.language=en\");", "-        arg.setValue(\"-Dmetamata.country=US\");", "-        arg.setValue(\"-Dmetamata.classpath=\" + userclasspath);", "-", "-        final Execute process = new Execute(new LogStreamHandler(this,", "-                                                                 Project.MSG_INFO,", "-                                                                 Project.MSG_INFO), null);", "-", "-            try {", "-                if (process.execute() != 0) {", "-                    throw new BuildException(\"MParse failed.\");", "-                }", "-            } finally {", "-                if (cleanupHack) {", "-                    final File oo393 = new File(javaFile.getParent(),", "-                                                \"OO393.class\");", "-                    if (oo393.exists()) {", "-                        project.log(\"Removing stale file: \" + oo393.getName());", "-                        oo393.delete();", "-                    }", "-                    final File sunjj = new File(javaFile.getParent(),", "-                                                \"__jj\" + javaFile.getName().substring(0,", "-                                                                                      javaFile.getName().indexOf(\".java\")) + \".sunjj\");", "-                    if (sunjj.exists()) {", "-                        project.log(\"Removing stale file: \" + sunjj.getName());", "-                        sunjj.delete();", "-                    }", "-                }", "-        catch (IOException e) {", "-            throw new BuildException(\"Failed to launch MParse: \" + e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f9e676217009dc7bb029eddc879544b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/dotnet/CSharp.java", "commitBeforeChange": "e5a85d7265ed5c9a0e391d5d00596368229e8014", "commitAfterChange": "620b8828e3694634896ff05057883da63211fc2f", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public void execute()              throws BuildException", "signatureAfterChange": "     public String getFileExtension()", "diff": ["-     */", "-    public void execute()", "-             throws BuildException {", "-        if (srcDir == null) {", "-            srcDir = getProject().resolveFile(\".\");", "-        }", "-        log(\"CSC working from source directory \" + srcDir, Project.MSG_VERBOSE);", "-        validate();", "-", "-        NetCommand command = new NetCommand(this, \"CSC\", csc_exe_name);", "-        command.setFailOnError(getFailOnError());", "-        //DEBUG helper", "-        command.setTraceCommandLine(true);", "-        //fill in args", "-        command.addArgument(\"/nologo\");", "-        command.addArgument(getAdditionalModulesParameter());", "-        command.addArgument(getDefinitionsParameter());", "-        command.addArgument(getDebugParameter());", "-        command.addArgument(getDocFileParameter());", "-        command.addArgument(getIncrementalParameter());", "-        command.addArgument(getMainClassParameter());", "-        command.addArgument(getOptimizeParameter());", "-        command.addArgument(getReferencesParameter());", "-        command.addArgument(getTargetTypeParameter());", "-        command.addArgument(getUnsafeParameter());", "-        command.addArgument(getWarnLevelParameter());", "-        command.addArgument(getWin32IconParameter());", "-        command.addArgument(getOutputFileParameter());", "-        command.addArgument(getIncludeDefaultReferencesParameter());", "-        command.addArgument(getDefaultReferenceParameter());", "-        command.addArgument(getWin32ResParameter());", "-        command.addArgument(getUtf8OutputParameter());", "-        command.addArgument(getNoConfigParameter());", "-        command.addArgument(getFullPathsParameter());", "-        command.addArgument(getExtraOptionsParameter());", "-        command.addArgument(getFileAlignParameter());", "-", "-        long outputTimestamp;", "-        if (outputFile != null && outputFile.exists()) {", "-            outputTimestamp = outputFile.lastModified();", "-        } else {", "-            outputTimestamp = 0;", "-        }", "-        int filesOutOfDate = 0;", "-        //get dependencies list.", "-        DirectoryScanner scanner = super.getDirectoryScanner(srcDir);", "-        String[] dependencies = scanner.getIncludedFiles();", "-        log(\"compiling \" + dependencies.length + \" file\" + ((dependencies.length == 1) ? \"\" : \"s\"));", "-        File base = scanner.getBasedir();", "-        //add to the command", "-        for (int i = 0; i < dependencies.length; i++) {", "-            File targetFile = new File(base, dependencies[i]);", "-            log(targetFile.toString(), Project.MSG_VERBOSE);", "-            command.addArgument(targetFile.toString());", "-            if (targetFile.lastModified() > outputTimestamp) {", "-                filesOutOfDate++;", "-                log(\"Source file \" + targetFile.toString() + \" is out of date\",", "-                        Project.MSG_VERBOSE);", "-            } else {", "-                log(\"Source file \" + targetFile.toString() + \" is up to date\",", "-                        Project.MSG_VERBOSE);", "-            ", "-        }", "-", "-        //now run the command of exe + settings + files", "-        if (filesOutOfDate > 0) {", "-            command.runCommand();", "+     */", "+    public String getFileExtension() {", "+        return \"cs\";", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0233a5c003c08f1d4aceab256e85928", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Java.java", "commitBeforeChange": "31b5a1c762df9ad5cf58134ce1a09a6c97440759", "commitAfterChange": "6872650389c074d2a941d8192dfa348a216b4848", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public int executeJava() throws BuildException", "signatureAfterChange": "     public int executeJava() throws BuildException", "diff": ["+        return executeJava(getCommandLine());", "+    }", "-                    return fork(getCommandLine().getCommandline());", "-                    spawn(getCommandLine().getCommandline());", "-                    run(getCommandLine());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a76b2414b9b9ca7a3045d80afbc32b14", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecTask.java", "commitBeforeChange": "7f98652146940a5c7714f209979d74fe2092af34", "commitAfterChange": "61320f305f5ccb78963b3a9fe607f3505ec635e4", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+     */", "+        checkConfiguration();", "+        if (isValidOs()) {", "+            runExec(prepareExec());", "+        }", "+    }", "-        String[] orig = cmdl.getCommandline();", "-        ", "-        int err = -1; // assume the worst", "-", "-            return;", "-        if (myos.toLowerCase().indexOf(\"windows\") >= 0) {", "-            if (!dir.equals(project.resolveFile(\".\"))) {", "-                if (myos.toLowerCase().indexOf(\"nt\") >= 0) {", "-                    cmdl = new Commandline();", "-                    cmdl.setExecutable(\"cmd\");", "-                    cmdl.addValue(\"/c\");", "-                    cmdl.addValue(\"cd\");", "-                    cmdl.addValue(dir.getAbsolutePath());", "-                    cmdl.addValue(\"&&\");", "-                    cmdl.addLine(orig);", "-                } else {", "-                    String ant = project.getProperty(\"ant.home\");", "-                    if (ant == null) {", "-                        throw new BuildException(\"Property 'ant.home' not found\", location);", "-                    }", "-                ", "-                    String antRun = project.resolveFile(ant + \"/bin/antRun.bat\").toString();", "-                    cmdl = new Commandline();", "-                    cmdl.setExecutable(antRun);", "-                    cmdl.addValue(dir.getAbsolutePath());", "-                    cmdl.addLine(orig);", "-                }", "-            }", "-        } else {", "-            String ant = project.getProperty(\"ant.home\");", "-            if (ant == null) throw new BuildException(\"Property 'ant.home' not found\", location);", "-            String antRun = project.resolveFile(ant + \"/bin/antRun\").toString();", "-", "-            cmdl = new Commandline();", "-            cmdl.setExecutable(antRun);", "-            cmdl.addValue(dir.getAbsolutePath());", "-            cmdl.addLine(orig);", "-        }", "-            // show the command", "-            log(cmdl.toString(), Project.MSG_VERBOSE);", "-", "-            final Execute exe = new Execute(createHandler(), createWatchdog());", "-            exe.setEnvironment(env.getVariables());"]}]}
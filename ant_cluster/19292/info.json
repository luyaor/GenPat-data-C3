{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8946606e42c86a7df53f2db985e98de7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ba67364f128f13294388457589f9a02", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/i18n/Translate.java", "commitBeforeChange": "4f13f33c394e7865e3120b86066e3317bdb2605e", "commitAfterChange": "c1288a2b32be38143c6a6d3d512aaaaf3fdbefa6", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private void translate() throws BuildException", "signatureAfterChange": "     private void translate() throws BuildException", "diff": ["-                        int stLength = startToken.length();", "-                        int etLength = endToken.length();", "-                            int startIndex = -1;", "-                            int endIndex = -1;", "-outer:                      while (true) {", "-                                startIndex = line.indexOf(startToken, endIndex + etLength);", "-                                if (startIndex < 0 ||", "-                                    startIndex + stLength >= line.length()) {", "-                                    break;", "-                                }", "-                                endIndex = line.indexOf(endToken, startIndex + stLength);", "-                                if (endIndex < 0) {", "-                                    break;", "-                                }", "-                                String matches = line.substring(startIndex + stLength,", "-                                                                endIndex);", "-                                //If there is a white space or = or :, then", "-                                //it isn't to be treated as a valid key.", "-                                for (int k = 0; k < matches.length(); k++) {", "-                                    char c = matches.charAt(k);", "-                                    if (c == ':' ||", "-                                        c == '=' ||", "-                                        Character.isSpaceChar(c)) {", "-                                        endIndex = endIndex - 1;", "-                                        continue outer;", "-                                    }", "-                                }", "-                                String replace = null;", "-                                replace = (String) resourceMap.get(matches);", "-                                    //If the key hasn't been loaded into resourceMap,", "-                                    //use the key itself as the value also.", "-                                if (replace == null) {", "-                                    log(\"Warning: The key: \" + matches", "-                                        + \" hasn't been defined.\",", "-                                        Project.MSG_DEBUG);", "-                                    replace = matches;", "-                                }", "-                                line = line.substring(0, startIndex)", "-                                    + replace", "-                                    + line.substring(endIndex + etLength);", "-                                endIndex = startIndex + replace.length() + etLength;", "-                                if (endIndex + etLength >= line.length()) {", "-                                    break;", "-                                }", "-                            }", "+\t\t\t\t\t\t// 2003-02-21 new replace algorithm by tbee (tbee@tbee.org)", "+\t\t\t\t\t\t// because it wasn't able to replace something like \"@aaa;@bbb;\"", "+", "+\t\t\t\t\t\t// is there a startToken", "+\t\t\t\t\t\t// and there is still stuff following the startToken", "+\t\t\t\t\t\tint startIndex = line.indexOf(startToken);", "+\t\t\t\t\t\twhile ( startIndex >= 0 && (startIndex+startToken.length()) <= line.length() )", "+\t\t\t\t\t\t{", "+\t\t\t\t\t\t\t// the new value, this needs to be here", "+\t\t\t\t\t\t\t// because it is required to calculate the next position to search from", "+\t\t\t\t\t\t\t// at the end of the loop", "+\t\t\t\t            String replace = null;", "+", "+\t\t\t\t\t\t\t// we found a starttoken, is there an endtoken following?", "+\t\t\t\t\t\t\t// start at token+tokenlength because start and end token may be indentical", "+\t\t\t\t\t\t\tint endIndex = line.indexOf(endToken, startIndex + startToken.length());", "+\t\t\t\t\t\t\tif (endIndex < 0) startIndex += 1;", "+\t\t\t\t\t\t\telse", "+\t\t\t\t\t\t\t{", "+\t\t\t\t\t\t\t\t// grab the token", "+\t\t\t\t\t\t\t\tString token = line.substring(startIndex + startToken.length(), endIndex);", "+", "+\t\t\t\t                // If there is a white space or = or :, then", "+\t\t\t\t                // it isn't to be treated as a valid key.", "+\t\t\t\t                boolean validToken = true;", "+\t\t\t\t                for (int k = 0; k < token.length() && validToken; k++)", "+\t\t\t\t                {", "+\t\t\t\t                    char c = token.charAt(k);", "+\t\t\t\t                    if ( c == ':'", "+\t\t\t\t                      || c == '='", "+\t\t\t\t                      || Character.isSpaceChar(c)", "+\t\t\t\t                       )", "+\t\t\t\t                    {", "+\t\t\t\t                    \tvalidToken = false;", "+\t\t\t\t                    }", "+\t\t\t\t                }", "+\t\t\t\t                if (!validToken) startIndex += 1;", "+\t\t\t\t                else", "+\t\t\t\t                {", "+\t\t\t\t                \t// find the replace string", "+\t\t\t\t                \tif (resourceMap.containsKey(token)) replace = (String)resourceMap.get(token);", "+\t\t\t\t                \telse                                replace = token;", "+", "+", "+\t\t\t\t                    // generate the new line", "+\t\t\t\t                    line = line.substring(0, startIndex)", "+\t\t\t\t                         + replace", "+\t\t\t\t                         + line.substring(endIndex + endToken.length());", "+", "+\t\t\t\t\t\t\t\t\t// set start position for next search", "+\t\t\t\t\t\t\t\t\tstartIndex += replace.length();", "+\t\t\t\t                }", "+\t\t\t\t\t\t\t}", "+", "+\t\t\t\t\t\t\t// find next starttoken", "+\t\t\t\t\t\t\tstartIndex = line.indexOf(startToken, startIndex);", "+\t\t\t\t\t\t}", "+", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d84ce0a686d136b760c45ea18e2c1ee5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/i18n/Translate.java", "commitBeforeChange": "78c2215a4eb3d786fbe46f5d532a845822bad676", "commitAfterChange": "293d45a72a842e0381ad0d21a1efbb304e5fc10d", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private void translate() throws BuildException", "signatureAfterChange": "     private void translate() throws BuildException", "diff": ["+                            StringBuffer newline = new StringBuffer(line);", "-outer:                      while (true) {", "-                                startIndex = line.indexOf(startToken, endIndex + 1);", "-                                if (startIndex < 0 ||", "-                                    startIndex + 1 >= line.length()) {", "-                                    break;", "-                                }", "-                                endIndex = line.indexOf(endToken, startIndex + 1);", "-                                if (endIndex < 0) {", "-                                    break;", "-                                }", "-                                String matches = line.substring(startIndex + 1,", "-                                                                endIndex);", "-                                    //If there is a white space or = or :, then", "-                                    //it isn't to be treated as a valid key.", "-                                for (int k = 0; k < matches.length(); k++) {", "-                                    char c = matches.charAt(k);", "-                                    if (c == ':' ||", "-                                        c == '=' ||", "-                                        Character.isSpaceChar(c)) {", "-                                        endIndex = endIndex - 1;", "-                                        continue outer;", "-                                    }", "-                                }", "-                                String replace = null;", "-                                replace = (String) resourceMap.get(matches);", "-                                    //If the key hasn't been loaded into resourceMap,", "-                                    //use the key itself as the value also.", "-                                if (replace == null) {", "-                                    log(\"Warning: The key: \" + matches", "-                                        + \" hasn't been defined.\",", "-                                        Project.MSG_DEBUG);", "-                                    replace = matches;", "-                                }", "-                                line = line.substring(0, startIndex)", "-                                    + replace", "-                                    + line.substring(endIndex + 1);", "-                                endIndex = startIndex + replace.length() + 1;", "-                                if (endIndex + 1 >= line.length()) {", "-                                    break;", "+                        outer:                      while (true) {", "+                            startIndex = line.indexOf(startToken, endIndex + 1);", "+                            if (startIndex < 0 ||", "+                                startIndex + 1 >= line.length()) {", "+                                break;", "+                            }", "+                            endIndex = line.indexOf(endToken, startIndex + 1);", "+                            if (endIndex < 0) {", "+                                break;", "+                            }", "+                            String matches = line.substring(startIndex + 1,", "+                                                            endIndex);", "+                                //If there is a white space or = or :, then", "+                                //it isn't to be treated as a valid key.", "+                            for (int k = 0; k < matches.length(); k++) {", "+                                char c = matches.charAt(k);", "+                                if (c == ':' ||", "+                                    c == '=' ||", "+                                    Character.isSpaceChar(c)) {", "+                                    endIndex = endIndex - 1;", "+                                    continue outer;", "+                            String replace = null;", "+                            replace = (String) resourceMap.get(matches);", "+                                //If the key hasn't been loaded into resourceMap,", "+                                //use the key itself as the value also.", "+                            if (replace == null) {", "+                                log(\"Warning: The key: \" + matches", "+                                    + \" hasn't been defined.\",", "+                                    Project.MSG_DEBUG);", "+                                replace = matches;", "+                            }", "+                            line = line.substring(0, startIndex)", "+                                + replace", "+                                + line.substring(endIndex + 1);", "+                            endIndex = startIndex + replace.length() + 1;", "+                            if (endIndex + 1 >= line.length()) {", "+                                break;", "+                            }", "+                        }"]}]}
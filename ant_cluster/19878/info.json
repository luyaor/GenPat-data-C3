{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f660dd6424549714520dd7297c5056cb", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "003d10628348d97a0c439cec8051a4d6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DefaultLogger.java", "commitBeforeChange": "d7c1a1daa55904f11eb356fe77c85edb07a7c0b0", "commitAfterChange": "d472edbcb0e3613a2574a5715dde99c7c6588f9b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public void messageLogged(BuildEvent event)", "signatureAfterChange": "      public void messageLogged(BuildEvent event)", "diff": ["-", "-        PrintStream logTo = event.getPriority() == Project.MSG_ERR ? err : out;", "-", "+            StringBuffer message = new StringBuffer();", "-                    String msg = \"[\" + name + \"] \";", "-                    for (int i = 0; i < (LEFT_COLUMN_SIZE - msg.length()); i++) {", "-                        logTo.print(\" \");", "+                    String label = \"[\" + name + \"] \";", "+                    for (int i = 0; i < (LEFT_COLUMN_SIZE - label.length()); i++) {", "+                        message.append(\" \");", "-                    logTo.print(msg);", "+                    message.append(label);", "-            // Print the message", "-            printlnAndFlush(logTo, event.getMessage());", "+            message.append(event.getMessage());", "+            String msg = message.toString();", "+            printlnAndFlush(event.getPriority() != Project.MSG_ERR ? out : err,", "+                            msg);", "+            log(msg);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80c62b62f701a061cd32ef0b333d5610", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/XMLCatalog.java", "commitBeforeChange": "d9c45b7a34a73bf4f4fcb6af80821eb8f8175765", "commitAfterChange": "299a7d5929bc956bf865bb1c86e5bfce49ca7df1", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private InputSource filesystemLookup(ResourceLocation matchingEntry)", "signatureAfterChange": "     private InputSource filesystemLookup(ResourceLocation matchingEntry)", "diff": ["+        // the following line seems to be necessary on Windows under JDK 1.2", "+        uri = uri.replace(File.separatorChar, '/');", "-", "-            // ignore", "+            // this processing is useful under Windows when the location of the DTD has been given as an absolute path", "+            // see Bugzilla Report 23913", "+            File testFile = new File(uri);", "+            if (testFile.exists() && testFile.canRead()) {", "+                log(\"uri : '\"", "+                    + uri + \"' matches a readable file\", Project.MSG_DEBUG);", "+                try {", "+                    url = fileUtils.getFileURL(testFile);", "+                } catch (MalformedURLException ex1) {", "+                    throw new BuildException(\"could not find an URL for :\" + testFile.getAbsolutePath());", "+                }", "+            } else {", "+                log(\"uri : '\"", "+                    + uri + \"' does not match a readable file\", Project.MSG_DEBUG);", "+", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9eb050afa3cde0027efb0362696cac7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/jdepend/JDependTask.java", "commitBeforeChange": "a88ec34a6e9d217e6848041f6b02c236dd0fad70", "commitAfterChange": "0396f77f9942b5be913d74a5c9dec3250f3f7572", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     public int executeInVM(CommandlineJava commandline) throws BuildException", "signatureAfterChange": "     public int executeInVM(CommandlineJava commandline) throws BuildException", "diff": ["-            Vector v = new Vector();", "-            for (int i = 0; i < patterns.length; i++) {", "-                v.addElement(patterns[i]);", "+            if (setFilter != null) {", "+                Vector v = new Vector();", "+                for (int i = 0; i < patterns.length; i++) {", "+                    v.addElement(patterns[i]);", "+                }", "+                try {", "+                    Object o = packageFilterC.newInstance(new Object[] {v});", "+                    setFilter.invoke(jdepend, new Object[] {o});", "+                } catch (Throwable e) {", "+                    log(\"excludes will be ignored as JDepend doesn't like me: \"", "+                        + e.getMessage(), Project.MSG_WARN);", "+                }", "+            } else {", "+                log(\"Sorry, your version of JDepend doesn't support excludes\",", "+                    Project.MSG_WARN);", "-            jdepend.setFilter(new jdepend.framework.PackageFilter(v));"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3dacb09145b1127454492a9904085882", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00c0611e154914c8e92019208a1135de", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "149ce34431423cd116e5d7175ff281c30565aa6a", "commitAfterChange": "5460755b447223e93e926e11a08e4df4f0e0ddb5", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 60, "signatureBeforeChange": "      private Object createAddTypeElement(         Project project, Object parent, String elementName)", "signatureAfterChange": "     private NestedCreator createAddTypeCreator(         Project project, Object parent, String elementName)         throws BuildException", "diff": ["-    private Object createAddTypeElement(", "-        Project project, Object parent, String elementName) {", "+     */", "+    private NestedCreator createAddTypeCreator(", "+        Project project, Object parent, String elementName)", "+        throws BuildException {", "+        if (addTypeMethods.size() == 0) {", "+            return null;", "+        }", "+", "-", "+        final Method method = addMethod;", "+        final Object nestedObject = addedObject;", "-        try {", "-            addMethod.invoke(parent, new Object[] {addedObject});", "-        } catch (IllegalAccessException ex) {", "-            throw new BuildException(ex);", "-        } catch (InvocationTargetException ex) {", "-            Throwable t = ex.getTargetException();", "-            if (t instanceof BuildException) {", "-                throw (BuildException) t;", "+        return new NestedCreator() {", "+            public boolean isPolyMorphic() {", "+                return false;", "-            throw new BuildException(t);", "-        } catch (Throwable t) {", "-            throw new BuildException(t);", "-        }", "-        return addedObject;", "+", "+            public Class getElementClass() {", "+                return null;", "+            }", "+            public Object create(Project project, Object parent, Object ignore)", "+                throws InvocationTargetException, IllegalAccessException {", "+                if (!method.getName().endsWith(\"Configured\")) {", "+                    method.invoke(parent, new Object[]{nestedObject});", "+                }", "+                return nestedObject;", "+            }", "+            public void store(Object parent, Object child)", "+                throws InvocationTargetException, IllegalAccessException,", "+                InstantiationException {", "+                if (method.getName().endsWith(\"Configured\")) {", "+                    method.invoke(parent, new Object[]{nestedObject});", "+                }", "+            }", "+        };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df316ebcecbeb7bdca05cf6b81eff810", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "476678d4a660bd6077ae4a8389cc29f42fbde0c9", "commitAfterChange": "69cd05e0f91f554bc045a9f9d6549c70dd5f27c1", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "      private NestedCreator getNestedCreator(         Project project, String parentUri, Object parent,         String elementName, UnknownElement child) throws BuildException", "signatureAfterChange": "      private NestedCreator getNestedCreator(         Project project, String parentUri, Object parent,         String elementName, UnknownElement child) throws BuildException", "diff": ["-        if (nc == null && parent instanceof DynamicConfiguratorNS) {", "-            DynamicConfiguratorNS dc = (DynamicConfiguratorNS) parent;", "-            String qName = (child == null ? name : child.getQName());", "-            final Object nestedElement =", "-                dc.createDynamicElement(", "-                    (child == null ? \"\" : child.getNamespace()),", "-                    name, qName);", "-            if (nestedElement != null) {", "-                nc = new NestedCreator() {", "-                    public boolean isPolyMorphic() {", "-                        return false;", "-                    }", "-                    public Class getElementClass() {", "-                        return null;", "-                    }", "-", "-                    public Object getRealObject() {", "-                        return null;", "-                    }", "-", "-                    public Object create(", "-                        Project project, Object parent, Object ignore) {", "-                        return nestedElement;", "-                    }", "-                    public void store(Object parent, Object child) {", "-                    }", "-                };", "-            }", "-        }", "+//        if (nc == null && parent instanceof DynamicConfiguratorNS) {", "+//            DynamicConfiguratorNS dc = (DynamicConfiguratorNS) parent;", "+//            String qName = (child == null ? name : child.getQName());", "+//            final Object nestedElement =", "+//                dc.createDynamicElement(", "+//                    (child == null ? \"\" : child.getNamespace()),", "+//                    name, qName);", "+//            if (nestedElement != null) {", "+//                nc = new NestedCreator() {", "+//                    public boolean isPolyMorphic() {", "+//                        return false;", "+//                    }", "+//                    public Class getElementClass() {", "+//                        return null;", "+//                    }", "+//", "+//                    public Object getRealObject() {", "+//                        return null;", "+//                    }", "+//", "+//                    public Object create(", "+//                        Project project, Object parent, Object ignore) {", "+//                        return nestedElement;", "+//                    }", "+//                    public void store(Object parent, Object child) {", "+//                    }", "+//                };", "+//            }", "+//        }"]}]}
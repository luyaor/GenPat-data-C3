{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "576ea4d688a91bd7b08c4b03f4619d54", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98c206894d4773c36ee19a2114f7a7fa", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ide/VAJImport.java", "commitBeforeChange": "6cf09d26ffb60c6d9c780b92203ceb6b98b4182c", "commitAfterChange": "fcd6548344aa3f590435beff55530cfdb6983588", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     protected void importFileset(FileSet fileset)", "signatureAfterChange": " \tprotected void importFileset(FileSet fileset)", "diff": ["+\t */", "+\tprotected void importFileset(FileSet fileset) {", "+\t\tDirectoryScanner ds = fileset.getDirectoryScanner(this.project);", "+\t\tif (ds.getIncludedFiles().length == 0) {", "+\t\t\treturn;", "+\t\t}", "+\t\tString[] includes = null;", "+\t\tString[] excludes = null;", "-     */", "-    protected void importFileset(FileSet fileset) {", "-        DirectoryScanner ds = fileset.getDirectoryScanner(this.project);", "-        if (ds.getIncludedFiles().length == 0) {", "-            return;", "-        }", "+\t\t// Hack to get includes and excludes. We could also use getIncludedFiles,", "+\t\t// but that would result in very long HTTP-requests.", "+\t\t// Therefore we want to send the patterns only to the remote tool server", "+\t\t// and let him figure out the files.", "+\t\ttry {", "+\t\t\tClass directoryScanner = ds.getClass();", "+\t\t", "+\t\t\tField includesField = directoryScanner.getDeclaredField(\"includes\");", "+\t\t\tincludesField.setAccessible(true);", "+\t\t\tincludes = (String[]) includesField.get(ds);", "+\t", "+\t\t\tField excludesField = directoryScanner.getDeclaredField(\"excludes\");", "+\t\t\texcludesField.setAccessible(true);", "+\t\t\texcludes = (String[]) excludesField.get(ds);", "+\t\t} catch (NoSuchFieldException nsfe) {", "+\t\t\tthrow new BuildException(", "+\t\t\t\t\"DirectoryScanner.includes or .excludes missing\" + nsfe.getMessage());", "+\t\t} catch (IllegalAccessException iae) {", "+\t\t\tthrow new BuildException(", "+\t\t\t\t\"Access to DirectoryScanner.includes or .excludes not allowed\");", "+\t\t}", "-        Vector classes = new Vector();", "-        Vector sources = new Vector();", "-        Vector resources = new Vector();", "-", "-        String[] classesArr = null;", "-        String[] sourcesArr = null;", "-        String[] resourcesArr = null;", "-", "-        StringBuffer msg = new StringBuffer();", "-        msg.append(\"Importing \");", "-        String connector = \"\";", "-", "-        ImportCodeSpec importSpec = new ImportCodeSpec();", "-        importSpec.setDefaultProject(vajproject);", "-", "-        scan(", "-             fileset.getDir(this.project), ", "-             ds.getIncludedFiles(), ", "-             classes, ", "-             sources, ", "-             resources); ", "-", "-        if (importClasses) {", "-            classesArr = new String[classes.size()];", "-            classes.copyInto(classesArr);", "-            importSpec.setClassFiles(classesArr);", "-            if (classesArr.length > 0) {", "-                logFiles(classes, \"class\");", "-                msg.append( classesArr.length );", "-                msg.append( \" class \" );", "-                msg.append( classesArr.length > 1 ? \"files\" : \"file\" );", "-                connector = \", \";", "-            }", "-        }", "-", "-        if (importSources) {", "-            sourcesArr = new String[sources.size()];", "-            sources.copyInto(sourcesArr);", "-            importSpec.setJavaFiles(sourcesArr);", "-            if (sourcesArr.length > 0) {", "-                logFiles(sources, \"source\");", "-                msg.append( connector );", "-                msg.append( sourcesArr.length );", "-                msg.append( \" source \" );", "-                msg.append( sourcesArr.length > 1 ? \"files\" : \"file\" );", "-                connector = \", \";", "-            }", "-        }", "-", "-        if (importResources) {", "-            String resourcePath = fileset.getDir(this.project).getAbsolutePath();", "-            resourcesArr = new String[resources.size()];", "-            resources.copyInto(resourcesArr);", "-            importSpec.setResourcePath(resourcePath);", "-            importSpec.setResourceFiles(resourcesArr);", "-            if (resourcesArr.length > 0) {", "-                logFiles(resources, \"resource\");", "-                log( \"  (relative to resource path '\" + resourcePath + \"')\", ", "-                     org.apache.tools.ant.Project.MSG_VERBOSE );", "-", "-                msg.append( connector );", "-                msg.append( resourcesArr.length );", "-                msg.append( \" resource \" );", "-                msg.append( resourcesArr.length > 1 ? \"files\" : \"file\" );", "-            }", "-        }", "-", "-        msg.append( \" into the \" );", "-        msg.append( importProject );", "-        msg.append( \" project.\" );", "-", "-        log(msg.toString());", "-                ", "-        try {", "-            Type[] importedTypes = VAJUtil.getWorkspace().importData(importSpec);", "-            if (importedTypes == null) {", "-                throw new BuildException(\"Unable to import into Workspace!\");", "-            }", "-        } catch (IvjException ivje) {", "-            throw VAJUtil.createBuildException(\"Error while importing into Workspace: \", ivje);", "-        }", "-    }", "+\t\tgetUtil().importFiles( importProject, ds.getBasedir(), ", "+\t\t\t\tincludes, excludes, ", "+\t\t\t\timportClasses, importResources, importSources, ", "+\t\t\t\tuseDefaultExcludes);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebec8c8fc21fddde95a4e64426d9aa15", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/PropertyFile.java", "commitBeforeChange": "62f2142b3431002933bf1281d244c164ed962890", "commitAfterChange": "6cbeee38fa5502baa5d75036ad2c0418cf808d56", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "         private void executeDate(String oldValue) throws BuildException", "signatureAfterChange": "         private void executeDate(String oldValue) throws BuildException", "diff": ["-            GregorianCalendar value = new GregorianCalendar();", "-            GregorianCalendar newValue = new GregorianCalendar();", "+            Calendar currentValue = Calendar.getInstance();", "-            if (m_pattern == null) {", "-              m_pattern = \"yyyy/MM/dd HH:mm\";", "+            if (pattern == null) {", "+              pattern = \"yyyy/MM/dd HH:mm\";", "-            DateFormat fmt = new SimpleDateFormat(m_pattern);", "+            DateFormat fmt = new SimpleDateFormat(pattern);", "-            // special case", "-            if (m_default != null &&", "-                NOW_VALUE_.equals(m_default.toLowerCase()) &&", "-                (m_operation == Operation.INCREMENT_OPER ||", "-                 m_operation == Operation.DECREMENT_OPER) ) {", "-                 oldValue = null;", "+            String currentStringValue = getCurrentValue(oldValue);", "+            if (currentStringValue == null) {", "+                currentStringValue = DEFAULT_DATE_VALUE;", "-", "-            if (oldValue != null) {", "+            ", "+            if (\"now\".equals(currentStringValue)) {", "+                currentValue.setTime(new Date());", "+            }", "+            else {", "-                    value.setTime(fmt.parse(oldValue));", "+                    currentValue.setTime(fmt.parse(currentStringValue));", "-", "-            if (m_value != null) {", "-                if (NOW_VALUE_.equals(m_value.toLowerCase())) {", "-                    value.setTime(new Date());", "-                }", "-                else if (NULL_VALUE_.equals(m_value.toLowerCase())) {", "-                    value = null;", "-                }", "-                else {", "-                    try {", "-                        value.setTime(fmt.parse(m_value));", "+            ", "+            if (operation != Operation.EQUALS_OPER) {", "+                int offset = 0;", "+                try {", "+                    offset = Integer.parseInt(value);", "+                    if (operation == Operation.DECREMENT_OPER) {", "+                        offset = -1 * offset;", "-                    catch (Exception ex) {", "-                        // obviously not a date, try a simple int", "-                        try {", "-                            int offset = Integer.parseInt(m_value);", "-                            value.clear();", "-                            value.set(Calendar.DAY_OF_YEAR, offset);", "-                        }", "-                        catch (Exception ex_) {", "-                            value.clear();", "-                            value.set(Calendar.DAY_OF_YEAR, 1);", "-                        }", "-                    }", "-", "+                catch (NumberFormatException e) {", "+                    throw new BuildException(\"Value not an integer on \" + key);", "+                }", "+                currentValue.add(field, offset);", "-            if (m_default != null && oldValue == null) {", "-                if (NOW_VALUE_.equals(m_default.toLowerCase())) {", "-                    value.setTime(new Date());", "-                }", "-                else if (NULL_VALUE_.equals(m_default.toLowerCase())) {", "-                    value = null;", "-                }", "-                else {", "-                    try {", "-                        value.setTime(fmt.parse(m_default));", "-                    }", "-                    catch (ParseException pe)  { /* swollow */ }", "-                }", "-            }", "-", "-", "-            if (m_operation == Operation.EQUALS_OPER) {", "-                newValue = value;", "-            }", "-            else if (m_operation == Operation.INCREMENT_OPER) {", "-                newValue.add(Calendar.SECOND, value.get(Calendar.SECOND));", "-                newValue.add(Calendar.MINUTE, value.get(Calendar.MINUTE));", "-                newValue.add(Calendar.HOUR_OF_DAY, value.get(Calendar.HOUR_OF_DAY));", "-                newValue.add(Calendar.DAY_OF_YEAR, value.get(Calendar.DAY_OF_YEAR));", "-            }", "-            else if (m_operation == Operation.DECREMENT_OPER) {", "-                newValue.add(Calendar.SECOND, -1 * value.get(Calendar.SECOND));", "-                newValue.add(Calendar.MINUTE, -1 * value.get(Calendar.MINUTE));", "-                newValue.add(Calendar.HOUR_OF_DAY, -1 * value.get(Calendar.HOUR_OF_DAY));", "-                newValue.add(Calendar.DAY_OF_YEAR, -1 * value.get(Calendar.DAY_OF_YEAR));", "-            }", "-            if (newValue != null) {", "-                m_value = fmt.format(newValue.getTime());", "-            }", "-            else {", "-                m_value = \"\";", "-            }", "+            value = fmt.format(currentValue.getTime());"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "73985beabd3b7021c534237d855cb4f2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e8e8b4fc9e850cb4bc179c29052663a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "ff8b6709bcf07f12efecc3625f5e1665e7ddf34d", "commitAfterChange": "0fdacdfc1a598078da48d77a24f2b7479e9bffb3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void configure( final Object object,                            final Configuration configuration,                            final Context context )         throws ConfigurationException", "signatureAfterChange": "     public void configure( final Object object,                            final Configuration configuration,                            final Context context )         throws ConfigurationException", "diff": ["-        try", "-        {", "-            configureObject( object, configuration, context );", "-        }", "-        catch( InvocationTargetException ite )", "-        {", "-            // A configuration exception thrown from a nested object.  Unpack", "-            // and re-throw", "-            throw (ConfigurationException)ite.getTargetException();", "-        }", "+        configureObject( object, configuration, context );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7823b326b23bd61071c42969b81caef", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "1620dd543b86a7edd25522b6ff8601f8e294fcbb", "commitAfterChange": "9a7f0056b4528f47a119c02b36242f21e96e9346", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      private IntrospectionHelper(final Class bean)", "signatureAfterChange": "      private IntrospectionHelper(final Class bean)", "diff": ["-                    if (java.lang.String.class.equals(args[0])", "+                    if (java.lang.String.class.equals(args[0])) {", "-                         */", "-                        || PreferredAttribute.class.", "-                            isAssignableFrom((Class)attributeTypes.get(propName))", "-                        /*", "-                            Ignore method m because there is an overloaded form of", "-                            this method that takes in a PreferredAttribute argument,", "-                            which gains higher priority.", "-                         */", "-                       ) {", "+                        */", "-                        If the above conditions are not true, and if there", "+                        If the argument is not a String, and if there", "-                     */", "+                    */"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f14fdb82d76b7f252facb7ca171d9597", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01d2241c844c5f02bb6b80130e72bd4d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/LoadFile.java", "commitBeforeChange": "a89ffe281a56c3c51e376d8927fe300423b43bc7", "commitAfterChange": "f9c551b16e64afb9541e8e5507b9ac1a8c2eb436", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 5, "signatureBeforeChange": "     protected String stripLineBreaks(String source)", "signatureAfterChange": "     public final void addFilterChain(FilterChain filter)", "diff": ["-    protected String stripLineBreaks(String source) {", "-        //Linebreaks. What do to on funny IBM mainframes with odd line endings?", "-        String linebreaks=\"\\r\\n\";", "-        int len=source.length();", "-", "-        StringBuffer dest=new StringBuffer(len);", "-        for(int i=0;i<len;++i) {", "-            char ch=source.charAt(i);", "-            if(linebreaks.indexOf(ch)==-1) {", "-                dest.append(ch);", "-            }", "-        }", "-        return new String(dest);", "-", "+    public final void addFilterChain(FilterChain filter) {", "+        filterChains.addElement(filter);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4a5500cd9ffb4a51e52409f843c42ec", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/DOMElementWriter.java", "commitBeforeChange": "c098b9c80d5ef451dfd683510c9f6c28489a8685", "commitAfterChange": "313479bb3569061c2598d90274930c4957d36364", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public String encodedata(final String value)", "signatureAfterChange": "     public String encodedata(final String value)", "diff": ["+        final StringWriter out = new StringWriter();", "+        try {", "+            encodedata(out, value);", "+        } catch (IOException ex) {", "+            throw new RuntimeException(ex);", "+        }", "+        return out.toString();", "+    }", "-        StringBuffer sb = new StringBuffer(len);", "-        for (int i = 0; i < len; ++i) {", "-            final char c = value.charAt(i);", "-            if (isLegalCharacter(c)) {", "-                sb.append(c);", "-", "-        return sb.substring(0).replace(\"]]>\", \"]]]]><![CDATA[>\");"]}]}
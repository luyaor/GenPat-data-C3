{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b24109b4d1f09a600d3f4e9cfe056371", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3aa15e480836e98c7448b8aca7f7c824", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/VectorSet.java", "commitBeforeChange": "1ffcacd800cb4b90403862ba63323377855822c7", "commitAfterChange": "0b7abed55e34bc0a174b64193603c2db15d9d23a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private synchronized void doAdd(int index, Object o)", "signatureAfterChange": "      private synchronized void doAdd(int index, Object o)", "diff": ["-            ensureCapacity(size() + 1);", "-            Object[] elems = new Object[elementData.length];", "-            System.arraycopy(elementData, 0, elems, 0, index);", "-            elems[index] = o;", "-            System.arraycopy(elementData, index, elems, index + 1,", "-                             size() - index);", "-            elementData = elems;", "+            int count = size();", "+            ensureCapacity(count + 1);", "+            if (index != count) {", "+                System.arraycopy(elementData, index, elementData, index + 1,", "+                                 count - index);", "+            }", "+            elementData[index] = o;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f745f40346552b01611ed090de66e8a3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/tar/TarUtils.java", "commitBeforeChange": "b43f4224d8fe9d1e7d628e88df394a7dfed46d1b", "commitAfterChange": "2e5b53fa106b848646493cb6f6ea74616973aca0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public static int getLongOctalBytes(long value, byte[] buf, int offset, int length)", "signatureAfterChange": "     public static int formatLongOctalBytes(final long value, byte[] buf, final int offset, final int length)", "diff": ["+     */", "+    public static int formatLongOctalBytes(final long value, byte[] buf, final int offset, final int length) {", "+", "+        int idx=length-1; // For space", "+", "+        formatUnsignedOctalString(value, buf, offset, idx);", "+        buf[offset + idx] = (byte) ' '; // Trailing space", "+", "+        return offset + length;", "+    }", "-     */", "-    public static int getLongOctalBytes(long value, byte[] buf, int offset, int length) {", "-        byte[] temp = new byte[length + 1];", "-        getOctalBytes(value, temp, 0, length + 1);", "-        System.arraycopy(temp, 0, buf, offset, length);", "-", "-        return offset + length;"]}]}
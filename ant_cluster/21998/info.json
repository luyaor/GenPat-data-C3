{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b702bb3ab99d6e955124010da8a3477d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fed3e56bce9d9c54fdf135d1074afce", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Tar.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     @Override \tpublic void execute() throws BuildException", "diff": ["-    public void execute() throws BuildException {", "+    @Override", "+\tpublic void execute() throws BuildException {", "-        Vector savedFileSets = (Vector) filesets.clone();", "+        @SuppressWarnings(\"unchecked\")", "+\t\tfinal Vector<TarFileSet> savedFileSets = (Vector<TarFileSet>) filesets.clone();", "-                TarFileSet mainFileSet = new TarFileSet(fileset);", "+                final TarFileSet mainFileSet = new TarFileSet(fileset);", "-            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {", "-                upToDate &= check((TarFileSet) e.nextElement());", "+            for(final TarFileSet tfs : filesets) {", "+            \tupToDate &= check(tfs);", "-            for (Enumeration e = resourceCollections.elements();", "-                 e.hasMoreElements();) {", "-                upToDate &= check((ResourceCollection) e.nextElement());", "+            for(final ResourceCollection rcol : resourceCollections) {", "+            \tupToDate &= check(rcol);", "-            File parent = tarFile.getParentFile();", "+            final File parent = tarFile.getParentFile();", "-                for (Enumeration e = filesets.elements();", "-                     e.hasMoreElements();) {", "-                    tar((TarFileSet) e.nextElement(), tOut);", "+                for(final TarFileSet tfs : filesets) {", "+                \ttar(tfs, tOut);", "-                for (Enumeration e = resourceCollections.elements();", "-                     e.hasMoreElements();) {", "-                    tar((ResourceCollection) e.nextElement(), tOut);", "+                for(final ResourceCollection rcol : resourceCollections) {", "+                \ttar(rcol, tOut);", "-            } catch (IOException ioe) {", "-                String msg = \"Problem creating TAR: \" + ioe.getMessage();", "+            } catch (final IOException ioe) {", "+                final String msg = \"Problem creating TAR: \" + ioe.getMessage();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "676f58b91e623201523ec20b5f2728cb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/depend/Depend.java", "commitBeforeChange": "85344c438efab87f56ca5f4b179752852ec0aa86", "commitAfterChange": "f66cab0ea7689df54fe51f64018cd3ef8b05cd3d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "          private void writeDependencyList(File depFile, Vector dependencyList) throws IOException", "signatureAfterChange": "     private void writeCachedDependencies(Hashtable dependencyMap) throws IOException", "diff": ["-    ", "-    private void writeDependencyList(File depFile, Vector dependencyList) throws IOException {", "-        // new dependencies so need to write them out to the cache", "-        PrintWriter pw = null;", "-        try {", "-            String parent = depFile.getParent();", "-            if (parent != null) {", "-                new File(parent).mkdirs(); ", "-            }", "-            ", "-            pw = new PrintWriter(new FileWriter(depFile));", "-            for (Enumeration deps = dependencyList.elements(); deps.hasMoreElements();) {", "-                pw.println(deps.nextElement());", "-            }", "-        }", "-        finally {", "-            if (pw != null) { ", "-                pw.close();", "-            }", "-        }", "-    }", "+     */", "+    private void writeCachedDependencies(Hashtable dependencyMap) throws IOException{", "+        if (cache != null) {", "+            PrintWriter pw = null;", "+            try {", "+                cache.mkdirs(); ", "+                File depFile = new File(cache, CACHE_FILE_NAME);", "+                ", "+                pw = new PrintWriter(new FileWriter(depFile));", "+                for (Enumeration deps = dependencyMap.keys(); deps.hasMoreElements();) {", "+                    String className = (String)deps.nextElement();", "+                    ", "+                    pw.println(CLASSNAME_PREPEND + className);", "+                    ", "+                    Vector dependencyList = (Vector)dependencyMap.get(className);", "+                    int size = dependencyList.size();", "+                    for (int x = 0; x < size; x++) {", "+                        pw.println(dependencyList.elementAt(x));", "+                    }", "+                }", "+            }", "+            finally {", "+                if (pw != null) { ", "+                    pw.close();", "+                }", "+            }", "+        }"]}]}
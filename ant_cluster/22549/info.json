{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a10c3c100f1eb8597fe6aab48d3c3511", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fae2d37445357cdc74331dbbff555cd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/FileListTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void testCircularReferenceCheck()", "signatureAfterChange": "      @Test     public void testCircularReferenceCheck()", "diff": ["+    @Test", "-        project.addReference(\"dummy\", f);", "-        f.setRefid(new Reference(getProject(), \"dummy\"));", "+        buildRule.getProject().addReference(\"dummy\", f);", "+        f.setRefid(new Reference(buildRule.getProject(), \"dummy\"));", "-            f.getDir(project);", "+            f.getDir(buildRule.getProject());", "-            f.getFiles(project);", "+            f.getFiles(buildRule.getProject());", "-        project.addReference(\"dummy1\", f1);", "-        f1.setRefid(new Reference(getProject(), \"dummy2\"));", "+        buildRule.getProject().addReference(\"dummy1\", f1);", "+        f1.setRefid(new Reference(buildRule.getProject(), \"dummy2\"));", "-        project.addReference(\"dummy2\", f2);", "-        f2.setRefid(new Reference(getProject(), \"dummy3\"));", "+        buildRule.getProject().addReference(\"dummy2\", f2);", "+        f2.setRefid(new Reference(buildRule.getProject(), \"dummy3\"));", "-        project.addReference(\"dummy3\", f3);", "-        f3.setRefid(new Reference(getProject(), \"dummy1\"));", "+        buildRule.getProject().addReference(\"dummy3\", f3);", "+        f3.setRefid(new Reference(buildRule.getProject(), \"dummy1\"));", "-            f1.getDir(project);", "+            f1.getDir(buildRule.getProject());", "-            f1.getFiles(project);", "+            f1.getFiles(buildRule.getProject());", "-        project.addReference(\"dummy1\", f1);", "-        f1.setRefid(new Reference(getProject(), \"dummy2\"));", "+        buildRule.getProject().addReference(\"dummy1\", f1);", "+        f1.setRefid(new Reference(buildRule.getProject(), \"dummy2\"));", "-        project.addReference(\"dummy2\", f2);", "-        f2.setRefid(new Reference(getProject(), \"dummy3\"));", "+        buildRule.getProject().addReference(\"dummy2\", f2);", "+        f2.setRefid(new Reference(buildRule.getProject(), \"dummy3\"));", "-        project.addReference(\"dummy3\", f3);", "-        f3.setDir(project.resolveFile(\".\"));", "-        File dir = f1.getDir(project);", "-        assertEquals(\"Dir is basedir\", dir, project.getBaseDir());", "+        buildRule.getProject().addReference(\"dummy3\", f3);", "+        f3.setDir(buildRule.getProject().resolveFile(\".\"));", "+        File dir = f1.getDir(buildRule.getProject());", "+        assertEquals(\"Dir is basedir\", dir, buildRule.getProject().getBaseDir());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b1bce5f740dbc8711116eec32214732", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/types/DirSetTest.java", "commitBeforeChange": "af0dbb6ef20efb56df867fa8025d13b0319383e6", "commitAfterChange": "98d509c6f8d7774190e9c8579510f34df1c4ac2a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testCircularReferenceCheck()", "signatureAfterChange": "      protected FileSet getInstance()", "diff": ["-", "-    public void testCircularReferenceCheck() {", "-        DirSet f = new DirSet();", "-        project.addReference(\"dummy\", f);", "-        f.setRefid(new Reference(\"dummy\"));", "-        try {", "-            f.getDir(project);", "-            fail(\"Can make DirSet a Reference to itself.\");", "-        } catch (BuildException be) {", "-            assertEquals(\"This data type contains a circular reference.\",", "-                         be.getMessage());", "-        }", "-        try {", "-            f.getDirectoryScanner(project);", "-            fail(\"Can make DirSet a Reference to itself.\");", "-        } catch (BuildException be) {", "-            assertEquals(\"This data type contains a circular reference.\",", "-                         be.getMessage());", "-        }", "-", "-        // dummy1 --> dummy2 --> dummy3 --> dummy1", "-        DirSet f1 = new DirSet();", "-        project.addReference(\"dummy1\", f1);", "-        f1.setRefid(new Reference(\"dummy2\"));", "-        DirSet f2 = new DirSet();", "-        project.addReference(\"dummy2\", f2);", "-        f2.setRefid(new Reference(\"dummy3\"));", "-        DirSet f3 = new DirSet();", "-        project.addReference(\"dummy3\", f3);", "-        f3.setRefid(new Reference(\"dummy1\"));", "-        try {", "-            f1.getDir(project);", "-            fail(\"Can make circular reference.\");", "-        } catch (BuildException be) {", "-            assertEquals(\"This data type contains a circular reference.\",", "-                         be.getMessage());", "-        }", "-        try {", "-            f1.getDirectoryScanner(project);", "-            fail(\"Can make circular reference.\");", "-        } catch (BuildException be) {", "-            assertEquals(\"This data type contains a circular reference.\",", "-                         be.getMessage());", "-        }", "-", "-        // dummy1 --> dummy2 --> dummy3 ", "-        // (which has the Project's basedir as root).", "-        f1 = new DirSet();", "-        project.addReference(\"dummy1\", f1);", "-        f1.setRefid(new Reference(\"dummy2\"));", "-        f2 = new DirSet();", "-        project.addReference(\"dummy2\", f2);", "-        f2.setRefid(new Reference(\"dummy3\"));", "-        f3 = new DirSet();", "-        project.addReference(\"dummy3\", f3);", "-        f3.setDir(project.resolveFile(\".\"));", "-        File dir = f1.getDir(project);", "-        assertEquals(\"Dir is basedir\", dir, project.getBaseDir());", "+    protected FileSet getInstance() {", "+        return new DirSet();"]}]}
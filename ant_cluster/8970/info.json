{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "95a93779821aed5114790a2af9ab1097", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "379ed0f2643cb25fd5d6f0b8cbe39a87", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/optional/depend/ClassfileSet.java", "commitBeforeChange": "f5b6799863729d80d59a655f6931afc1746d5946", "commitAfterChange": "2c3767a537410d491b803796180e94b91cf52fd7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public DirectoryScanner getDirectoryScanner(Project p)", "signatureAfterChange": "     public DirectoryScanner getDirectoryScanner(Project p)", "diff": ["+        Vector allRootClasses = (Vector)rootClasses.clone();", "+        for (Enumeration e = rootFileSets.elements(); e.hasMoreElements();) {", "+            FileSet additionalRootSet = (FileSet)e.nextElement();", "+            DirectoryScanner additionalScanner", "+                = additionalRootSet.getDirectoryScanner(p);", "+            String[] files = additionalScanner.getIncludedFiles();", "+            for (int i = 0; i < files.length; ++i) {", "+                if (files[i].endsWith(\".class\")) {", "+                    String classFilePath ", "+                        = files[i].substring(0, files[i].length() - 6);", "+                    String className ", "+                        = classFilePath.replace('/', '.').replace('\\\\', '.');", "+                    allRootClasses.addElement(className);", "+                }", "+            }", "+        }    ", "+                ", "+        ", "-        scanner.setRootClasses(rootClasses);", "+        scanner.setRootClasses(allRootClasses);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c580b4dc83eed57941ec77a55361286b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/optional/depend/DependScanner.java", "commitBeforeChange": "c0a3bacdf9d9bcade0cccf86124c1d33360e00ea", "commitAfterChange": "bb34e52397404ec167b21c72a47e4238d19893c2", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void scan() throws IllegalStateException", "signatureAfterChange": "     public void scan() throws IllegalStateException", "diff": ["+        included = new Vector();", "-            analyzer.addRootClass((String)e.nextElement());", "+            String rootClass = (String)e.nextElement();", "+            analyzer.addRootClass(rootClass);", "-        included.removeAllElements();", "+        String[] parentFiles = parentScanner.getIncludedFiles();", "+        Hashtable parentSet = new Hashtable();", "+        for (int i = 0; i < parentFiles.length; ++i) {", "+            parentSet.put(parentFiles[i], parentFiles[i]);", "+        }", "+", "-            included.addElement(e.nextElement());", "+            String classname = (String)e.nextElement();", "+            String filename = classname.replace('.', File.separatorChar);", "+            filename = filename + \".class\";", "+            File depFile = new File(basedir, filename);", "+            if (depFile.exists() && parentSet.containsKey(filename)) {", "+                // This is included", "+                included.addElement(filename);", "+            }"]}]}
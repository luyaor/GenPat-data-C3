{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c2dbf1829fd20a2d52111963b232a6cb", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b8c8728fd297ae180fc24a93ef5e02f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/main/org/apache/ant/core/execution/ExecutionFrame.java", "commitBeforeChange": "8d130028151fa7cc9d93e3cdf9ea1637cb16fcde", "commitAfterChange": "362903a2bd195f64f594d4b3f333900d67a3c7bc", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "        private void configureElement(Object element, TaskElement model)          throws ExecutionException, ConfigException", "signatureAfterChange": "        private void configureElement(Object element, TaskElement model)          throws ExecutionException, ConfigException", "diff": ["-", "+        ", "+        if (element instanceof Task) {", "+            Task task = (Task)element;", "+            ExecutionContext context = new ExecutionContext(this, eventSupport, model);", "+            task.setTaskContext(context);", "+        }", "+            List aspects = getActiveAspects(model);", "+            for (Iterator i = aspects.iterator(); i.hasNext(); ) {", "+                AspectHandler aspectHandler = (AspectHandler)i.next();", "+                aspectHandler.beforeConfigElement(element);", "+            }", "+            ", "-            List aspects = getActiveAspects(model);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98edc94dc91312af39ec556026b26990", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/main/org/apache/ant/core/execution/ExecutionFrame.java", "commitBeforeChange": "a48208f6cf8cf80ef1e144305ff8dfe0958599d5", "commitAfterChange": "c2e518039b65dc5b8c9c31f9f78b2d72ea8db2d1", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 23, "signatureBeforeChange": "              private void configureElement(Object element, TaskElement model)          throws ExecutionException, ConfigException", "signatureAfterChange": "        private void configureElement(Object element, TaskElement model)          throws ExecutionException, ConfigException", "diff": ["+     */   ", "-                    ExecutionTask nestedExecutionTask ", "-                        = getConfiguredExecutionTask(nestedElementModel);", "-                        ", "+                    Task nestedTask = configureTask(nestedElementModel);", "-                    container.addExecutionTask(nestedExecutionTask);", "+                    container.addTask(nestedTask);", "+            }", "+            List aspects = getActiveAspects(model);", "+            for (Iterator i = aspects.iterator(); i.hasNext(); ) {", "+                AspectHandler aspectHandler = (AspectHandler)i.next();", "+                aspectHandler.afterConfigElement(element);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbae3de02a1f5c7d7d0973cf671d41a5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Sequential.java", "commitBeforeChange": "df2f921cdce7f4dde834b9315278dce5f000bb03", "commitAfterChange": "93af3c50df860c6b3c71283d5813811e653cc0a4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        for (Iterator i = nestedTasks.iterator(); i.hasNext();) {", "-            Task nestedTask = (Task) i.next();", "-            nestedTask.perform();", "+        LocalProperties localProperties", "+            = LocalProperties.get(getProject());", "+        localProperties.enterScope();", "+        try {", "+            for (Iterator i = nestedTasks.iterator(); i.hasNext();) {", "+                Task nestedTask = (Task) i.next();", "+                nestedTask.perform();", "+            }", "+        } finally {", "+            localProperties.exitScope();"]}]}
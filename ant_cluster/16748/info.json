{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b759b588a271af9297c92bdec7ce1879", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5643697e52df5eecff5b3c3de4fa4ea9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Rmic.java", "commitBeforeChange": "739311eb354d0463260406ec3642395e5483d3da", "commitAfterChange": "68fb37b1a2632d9da411ffa8d6b942fb8536fc82", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "     private void moveGeneratedFile (File baseDir, File sourceBaseFile,                                     String classname,                                     RmicAdapter adapter)         throws BuildException", "signatureAfterChange": "     private void moveGeneratedFile (File baseDir, File sourceBaseFile,                                     String classname,                                     RmicAdapter adapter)         throws BuildException", "diff": ["-        String stubFileName = classname.replace('.', File.separatorChar)", "-            + adapter.getStubClassSuffix()+\".java\";", "-        File oldStubFile = new File(baseDir, stubFileName);", "-        File newStubFile = new File(sourceBaseFile, stubFileName);", "-        try {", "-            project.copyFile(oldStubFile, newStubFile, filtering);", "-            oldStubFile.delete();", "-        } catch (IOException ioe) {", "-            String msg = \"Failed to copy \" + oldStubFile + \" to \" +", "-                newStubFile + \" due to \" + ioe.getMessage();", "-            throw new BuildException(msg, ioe, location);", "-        }", "-        if (!\"1.2\".equals(stubVersion)) {", "-            String skelFileName = classname.replace('.', File.separatorChar)", "-                + adapter.getSkelClassSuffix()+\".java\";", "-            File oldSkelFile = new File(baseDir, skelFileName);", "-            File newSkelFile = new File(sourceBaseFile, skelFileName);", "+", "+        String classFileName = ", "+            classname.replace('.', File.separatorChar) + \".class\";", "+        String[] generatedFiles = ", "+            adapter.getMapper().mapFileName(classFileName);", "+", "+        for (int i=0; i<generatedFiles.length; i++) {", "+            String sourceFileName = ", "+                classFileName.substring(0, classFileName.length()-6) + \".java\";", "+            File oldFile = new File(baseDir, sourceFileName);", "+            File newFile = new File(sourceBaseFile, sourceFileName);", "-                project.copyFile(oldSkelFile, newSkelFile, filtering);", "-                oldSkelFile.delete();", "+                project.copyFile(oldFile, newFile, filtering);", "+                oldFile.delete();", "-                String msg = \"Failed to copy \" + oldSkelFile + \" to \" +", "-                    newSkelFile + \" due to \" + ioe.getMessage();", "+                String msg = \"Failed to copy \" + oldFile + \" to \" +", "+                    newFile + \" due to \" + ioe.getMessage();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a4880bc1d7ed88d923f1314bbfd4996", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Diagnostics.java", "commitBeforeChange": "e84f6000f4fe0a42dae2cd2f8baaca89a5b2195f", "commitAfterChange": "954f6058d772148440655e920c59b4cdfc651924", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private static void doReportTempDir(PrintStream out)", "signatureAfterChange": "     private static void doReportTempDir(PrintStream out)", "diff": ["-        String tempdir=System.getProperty(\"java.io.tmpdir\");", "-        if( tempdir == null ) {", "+        String tempdir = System.getProperty(\"java.io.tmpdir\");", "+        if (tempdir == null) {", "-        out.println(\"Temp dir is \"+ tempdir);", "-        File tempDirectory=new File(tempdir);", "-        if(!tempDirectory.exists()) {", "-            out.println(\"Warning, java.io.tmpdir directory does not exist: \"+", "-                    tempdir);", "+        out.println(\"Temp dir is \" + tempdir);", "+        File tempDirectory = new File(tempdir);", "+        if (!tempDirectory.exists()) {", "+            out.println(\"Warning, java.io.tmpdir directory does not exist: \"", "+                    + tempdir);", "-        long now=System.currentTimeMillis();", "-        File tempFile=null;", "+        long now = System.currentTimeMillis();", "+        File tempFile = null;", "-            tempFile = File.createTempFile(\"diag\",\"txt\",tempDirectory);", "+            tempFile = File.createTempFile(\"diag\", \"txt\", tempDirectory);", "-            byte buffer[]=new byte[1024];", "-            for(int i=0;i<32;i++) {", "+            byte[] buffer = new byte[KILOBYTE];", "+            for (int i = 0; i < TEST_FILE_SIZE; i++) {", "-            fileout=null;", "-            long filetime=tempFile.lastModified();", "+            fileout = null;", "+            long filetime = tempFile.lastModified();", "-            long drift=filetime-now;", "-            out.println(\"temp dir alignment with system clock is \"+drift+\" ms\");", "-            if(Math.abs(drift)>10000) {", "+            long drift = filetime - now;", "+            out.println(\"temp dir alignment with system clock is \" + drift + \" ms\");", "+            if (Math.abs(drift) > BIG_DRIFT_LIMIT) {", "-            out.println(\"File  \"+ tempFile + \" could not be created/written to\");", "+            out.println(\"File  \" + tempFile + \" could not be created/written to\");", "-            if(tempFile!=null && tempFile.exists()) {", "+            if (tempFile != null && tempFile.exists()) {"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "34edecb35d8c4352008e858f9b93b4cc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "599fbc711fd1467280da4fb1cd983bc4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/JDBCTask.java", "commitBeforeChange": "598e18997aca23e441c8302888e7423fac146da8", "commitAfterChange": "75126703fa23e343eb404024a281ecbadf7aef0b", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "     protected Connection getConnection() throws BuildException", "signatureAfterChange": "     protected Connection getConnection() throws BuildException", "diff": ["+", "+            for (Iterator props = connectionProperties.iterator();", "+                 props.hasNext(); ) {", "+                Property p = (Property) props.next();", "+                String name = p.getName();", "+                String value = p.getValue();", "+                if (name == null || value == null) {", "+                    log(\"Only name/value pairs are supported as connection\"", "+                        + \" properties.\", Project.MSG_WARN);", "+                } else {", "+                    log(\"Setting connection property \" + name + \" to \" + value,", "+                        Project.MSG_VERBOSE);", "+                    info.put(name, value);", "+                }", "+            }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cff785b4ba5f86a69ff40484258799b7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/sound/SoundTask.java", "commitBeforeChange": "ba37bf7991e099b567f8cd5a09178893ff55bb9c", "commitAfterChange": "784d54ca4803b0c8fcb6cd4753cc56f0822a1643", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": "         public File getSource()", "signatureAfterChange": "         public File getSource()", "diff": ["-            return this.file;", "+            File nofile = null ;", "+            // Check if source is a directory", "+            if( source.exists() ) {", "+                if( source.isDirectory() ) {", "+                    // get the list of files in the dir", "+                    File[] files = source.listFiles() ; ", "+                    int numfiles = files.length ;", "+                    // get a random number between 0 and the number of files", "+                    Random rn = new Random() ;", "+                    int i = rn.nextInt(numfiles) ;", "+                    // set the source to the file at that location", "+                    this.source = files[i] ;", "+                }", "+            } else {", "+                log(source + \": invalid path.\", Project.MSG_WARN) ;", "+                this.source = nofile ;", "+            }", "+            return this.source ;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aad3ea075eb1f72cca73c9131963f54a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23ba1af3cf6b59be57227e894b91b839", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/classloader/DefaultClassLoaderManager.java", "commitBeforeChange": "62562693ac733d0697b5a522972f36ea5570225c", "commitAfterChange": "a816a71d9e2587a83890f499dd2cabb7c6e02889", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private URL[] buildClasspath( final File file, final File[] dependencies )         throws MalformedURLException", "signatureAfterChange": "     private URL[] buildClasspath( final ArrayList files )         throws MalformedURLException", "diff": ["-    private URL[] buildClasspath( final File file, final File[] dependencies )", "+    private URL[] buildClasspath( final ArrayList files )", "-        final URL[] urls = new URL[ dependencies.length + 1 ];", "-", "-        for( int i = 0; i < dependencies.length; i++ )", "+        final URL[] urls = new URL[ files.size() + 1 ];", "+        final int count = files.size();", "+        for( int i = 0; i < count; i++ )", "-            urls[ i ] = dependencies[ i ].toURL();", "+            final File file = (File)files.get( i );", "+            urls[ i ] = file.toURL();", "-", "-        urls[ dependencies.length ] = file.toURL();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fa8333be4c2f21a68099d5403b4283a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/starteam/StarTeamCheckout.java", "commitBeforeChange": "837f7ef785e24137608ba41f850d605b23bccff4", "commitAfterChange": "23e61358c8ed2aa3fe63c1f67082150047f1df9e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private boolean delete(java.io.File file)", "signatureAfterChange": "         void delete(java.io.File local)", "diff": ["-    private boolean delete(java.io.File file) {", "-        // If the current file is a Directory, we need to delete all", "-        // of its children as well.", "-        if (file.isDirectory()) {", "-            java.io.File[] children = file.listFiles();", "-            for (int i = 0; i < children.length; i++) {", "-                delete(children[i]);", "-            }", "-        log(\"Deleting: \" + file.getAbsolutePath(), Project.MSG_INFO);", "-        return file.delete();", "+         */", "+        void delete(java.io.File local) {", "+            // once we find a folder that isn't in the repository, ", "+            // anything below it can be deleted.", "+            if (local.isDirectory() && isRecursive()) {", "+                String[] contents = local.list();", "+                for (int i=0; i< contents.length; i++) {", "+                    java.io.File file = new java.io.File(local, contents[i]);", "+                    delete(file);", "+                }", "+            } ", "+            local.delete();", "+            log(\"Deleted uncontrolled item \" + local.getAbsolutePath());", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ed19684f1b02bd608c0ebe3dc632cab0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54dd8807b29cb652ca837bc061858007", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "7477ba8b2884e074c22d869489f38a6a859729c1", "commitAfterChange": "71be9bc2d672d09173a5d47a4acd18c18186ac37", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "     private int executeAsForked(JUnitTest test, ExecuteWatchdog watchdog)         throws BuildException", "signatureAfterChange": "     private int executeAsForked(JUnitTest test, ExecuteWatchdog watchdog)         throws BuildException", "diff": ["+            Vector v = Execute.getProcEnvironment();", "+            Enumeration e = v.elements();", "+            while (e.hasMoreElements()) {", "+                String s = (String) e.nextElement();", "+                if (s.startsWith(\"CLASSPATH=\")) {", "+                    cmd.createClasspath(getProject()).createPath()", "+                        .append(new Path(getProject(), ", "+                                         s.substring(10 // \"CLASSPATH=\".length()", "+                                                     )));", "+                }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da9791d910b54b09d494ac3fa5365756", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "867ec77b0d9efa8819be2ebf82cace4600b929ee", "commitAfterChange": "5337488612953eb072e38cb99e6b5d60999297da", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 85, "signatureBeforeChange": "     private void evaluatePackages(Commandline toExecute, Path sourcePath,                                    Vector packages)", "signatureAfterChange": "     private void evaluatePackages(Commandline toExecute, Path sourcePath,                                    Vector packages, Vector excludePackages)", "diff": ["-                                  Vector packages) {", "+                                  Vector packages, Vector excludePackages) {", "+\t\tlog(\"Exclude Packages = \" + excludePackages, Project.MSG_VERBOSE);", "+\t\te = excludePackages.elements();", "+\t\twhile (e.hasMoreElements()) {", "+\t\t\tString pkg = (String)e.nextElement();", "+\t\t\tpkg = pkg.replace('.','/');", "+\t\t\tif (pkg.endsWith(\"*\")) {", "+\t\t\t\tpkg += \"*\";", "+\t\t\t}", "+", "+\t\t\tfs.createExclude().setName(pkg);", "+\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed897432288f413c697c229abe2bee7a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/helper/ProjectHelper2.java", "commitBeforeChange": "047941f0312007c9145af76a61f428ad68da7583", "commitAfterChange": "bd52e7b9b16b87287bed0c011c4fc1794543e9fb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void parse(Project project, Object source) throws BuildException", "signatureAfterChange": "     public void parse(Project project, Object source) throws BuildException", "diff": ["+                String missingBehaviour = extensionInfo[2];", "-                    throw new BuildException(\"can't add target \"", "-                                             + name + \" to extension-point \"", "-                                             + tgName", "-                                             + \" because the extension-point\"", "-                                             + \" is unknown.\");", "+                    String message = \"can't add target \" + name", "+                        + \" to extension-point \" + tgName", "+                        + \" because the extension-point is unknown.\";", "+                    if (missingBehaviour.equals(MISSING_EP_FAIL)) {", "+                        throw new BuildException(message);", "+                    } else if (missingBehaviour.equals(MISSING_EP_WARN)) {", "+                        Target target = (Target) projectTargets.get(name);", "+                        context.getProject().log(target,", "+                                                 \"Warning: \" + message,", "+                                                 Project.MSG_WARN);", "+                    }", "+                } else {", "+                    Target t = (Target) projectTargets.get(tgName);", "+                    if (!(t instanceof ExtensionPoint)) {", "+                        throw new BuildException(\"referenced target \"", "+                                                 + tgName", "+                                                 + \" is not an extension-point\");", "+                    }", "+                    t.addDependency(name);", "-                Target t = (Target) projectTargets.get(tgName);", "-                if (!(t instanceof ExtensionPoint)) {", "-                    throw new BuildException(\"referenced target \"", "-                                             + tgName", "-                                             + \" is not an extension-point\");", "-                }", "-                t.addDependency(name);"]}]}
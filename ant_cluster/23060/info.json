{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e66919be2ea0deb02264894460af80b8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b512d436f998031090988dc96af964b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/SourceFileScanner.java", "commitBeforeChange": "54fec62b385b75dc3eb2919685dbddc032e316a1", "commitAfterChange": "a9353331a922b229316fa3da01f1b2df9fd75059", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public String[] restrict(String[] files, File srcDir, File destDir,                              FileNameMapper mapper)", "signatureAfterChange": "     public String[] restrict(String[] files, File srcDir, File destDir,                              FileNameMapper mapper)", "diff": ["-", "-        long now = (new java.util.Date()).getTime();", "-        StringBuffer targetList = new StringBuffer();", "-", "-        /*", "-          If we're on Windows, we have to munge the time up to 2 secs to", "-          be able to check file modification times.", "-          (Windows has a max resolution of two secs for modification times)", "-          Actually this is a feature of the FAT file system, NTFS does", "-          not have it, so if we could reliably passively test for an NTFS", "-          file systems we could turn this off...", "-        */", "-        if (Os.isFamily(\"windows\")) {", "-            now += 2000;", "-        }", "-", "+        // record destdir for later use in getResource", "+        this.destDir = destDir;", "-", "-            String[] targets = mapper.mapFileName(files[i]);", "-            if (targets == null || targets.length == 0) {", "-                task.log(files[i] + \" skipped - don\\'t know how to handle it\",", "-                         Project.MSG_VERBOSE);", "-                continue;", "-            }", "-", "-", "-            if (src.lastModified() > now) {", "-                task.log(\"Warning: \" + files[i] + \" modified in the future.\", ", "-                         Project.MSG_WARN);", "-            }", "-", "-            boolean added = false;", "-            targetList.setLength(0);", "-            for (int j = 0; !added && j < targets.length; j++) {", "-                File dest = fileUtils.resolveFile(destDir, targets[j]);", "-                ", "-                if (!dest.exists()) {", "-                    task.log(files[i] + \" added as \" + dest.getAbsolutePath()", "-                        + \" doesn\\'t exist.\", Project.MSG_VERBOSE);", "-                    v.addElement(files[i]);", "-                    added = true;", "-                } else if (src.lastModified() > dest.lastModified()) {", "-                    task.log(files[i] + \" added as \" + dest.getAbsolutePath()", "-                        + \" is outdated.\", Project.MSG_VERBOSE);", "-                    v.addElement(files[i]);", "-                    added = true;", "-                } else {", "-                    if (targetList.length() > 0) {", "-                        targetList.append(\", \");", "-                    }", "-                    targetList.append(dest.getAbsolutePath());", "-                }", "-            }", "-", "-            if (!added) {", "-                task.log(files[i] + \" omitted as \" + targetList.toString()", "-                         + (targets.length == 1 ? \" is\" : \" are \")", "-                         + \" up to date.\", Project.MSG_VERBOSE);", "-            }", "-            ", "+            v.addElement(new Resource(files[i], src.exists(),", "+                                      src.lastModified(), src.isDirectory()));", "-        String[] result = new String[v.size()];", "-        v.copyInto(result);", "+        Resource[] sourceresources= new Resource[v.size()];", "+        v.copyInto(sourceresources);", "+", "+        // build the list of sources which are out of date with", "+        // respect to the target", "+        Resource[] outofdate = ", "+            SourceSelector.selectOutOfDateSources(task, sourceresources,", "+                                                  mapper, this);", "+        String[] result = new String[outofdate.length];", "+        for (int counter=0; counter < outofdate.length; counter++) {", "+            result[counter] = outofdate[counter].getName();", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a61c3fd4684ef019e8afba29ad71ffaa", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ExecutionFrame.java", "commitBeforeChange": "7499c443d67445ea8fd0b8f4bd56c72251b18bf4", "commitAfterChange": "b7e43ad8c5906ae2b6d6b42f8b2715dc7d2e7a16", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 34, "signatureBeforeChange": "     private Object createNestedElement(Reflector reflector, Object element,                                        BuildElement model)          throws ExecutionException, TaskException", "signatureAfterChange": "     private void createNestedElement(Reflector reflector, Object element,                                      BuildElement model)          throws ExecutionException", "diff": ["+     */", "+    private void createNestedElement(Reflector reflector, Object element,", "+                                     BuildElement model)", "+         throws ExecutionException {", "+        log(\"The use of create methods is deprecated - class: \"", "+             + element.getClass().getName(), MessageLevel.MSG_INFO);", "+", "+        String nestedElementName = model.getType();", "+        Object nestedElement", "+             = reflector.createElement(element, nestedElementName);", "+        if (nestedElement instanceof ExecutionComponent) {", "+            ExecutionComponent component = (ExecutionComponent)nestedElement;", "+            ExecutionContext context", "+                 = new ExecutionContext(this, eventSupport);", "+            context.setModelElement(model);", "+            component.init(context);", "+        }", "+", "+        try {", "+            configureElement(nestedElement, model);", "+        } catch (ExecutionException e) {", "+            e.setLocation(model.getLocation());", "+            throw e;", "+        }", "+    }", "-    private Object createNestedElement(Reflector reflector, Object element,", "-                                       BuildElement model)", "-         throws ExecutionException, TaskException {", "-        if (!reflector.supportsNestedElement(nestedElementName)) {", "-            throw new ExecutionException(\"The element name \" + nestedElementName", "-                 + \" is not a supported nested element of \"", "-                 + element.getClass().getName());", "-        }", "-                throw new ExecutionException(\"The given ant:refid value '\" ", "-                    + refId + \"' is not defined\", model.getLocation());", "-            typeInstance = createTypeInstance(nestedType, model);", "-        return typeInstance;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c382d5e322b61793658a2f5b8ebcbd8f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/TailFilter.java", "commitBeforeChange": "51fa6c6e412765a4540fd0d597b4b1805d189376", "commitAfterChange": "e596d350ae9efa7d0aaf51d8f988be6ea3909078", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public final int read() throws IOException", "signatureAfterChange": "     public final int read() throws IOException", "diff": ["-        if (!completedReadAhead) {", "-            int ch = -1;", "-            while ((ch = in.read()) != -1) {", "-                if (buffer.length == bufferPos) {", "-                    if (returnedCharPos != -1) {", "-                        final char[] tmpBuffer = new char[buffer.length];", "-                        System.arraycopy(buffer, returnedCharPos + 1, tmpBuffer,", "-                                         0, buffer.length - (returnedCharPos + 1));", "-                        buffer = tmpBuffer;", "-                        bufferPos = bufferPos - (returnedCharPos + 1);", "-                        returnedCharPos = -1;", "-                    } else {", "-                        final char[] tmpBuffer = new char[buffer.length * 2];", "-                        System.arraycopy(buffer, 0, tmpBuffer, 0, bufferPos);", "-                        buffer = tmpBuffer;", "-                    }", "-                }", "-", "-                if (lines > 0) {", "-                    if (ch == '\\n' || ch == -1) {", "-                        ++linesRead;", "-", "-                        if ((linesRead == lines + skip)) {", "-                            int i = 0;", "-                            for (i = returnedCharPos + 1;", "-                                buffer[i] != 0 && buffer[i] != '\\n'; i++) {", "-                            }", "-                            returnedCharPos = i;", "-                            --linesRead;", "-                        }", "-                    }", "-                }", "-                if (ch == -1) {", "-                    break;", "-                }", "-", "-                buffer[bufferPos] = (char) ch;", "-                bufferPos++;", "-            }", "-            completedReadAhead = true;", "+        while (line == null || line.length() == 0) {", "+            line = lineTokenizer.getToken(in);", "+            line = tailFilter(line);", "+            if (line == null)", "+                return -1;", "+            linePos = 0;", "-        // Because the complete stream is read into the buffer I can delete", "-        // the \"skip lines\" from back to the beginning.", "-        if (skip > 0) {", "-            // searching...", "-            int i;", "-            for (i = buffer.length - 1; skip > 0; i--) {", "-                if (buffer[i]=='\\n') {", "-                    skip--;", "-                }", "-            }", "-", "-           // cut the buffer to the new length", "-           char[] newBuffer = new char[i];", "-           System.arraycopy(buffer, 0, newBuffer, 0, i);", "-           buffer = newBuffer;", "-", "-           // don\ufffdt forget to set the \"lastposition\" new", "-           bufferPos = i;", "-        }", "-", "-        ++returnedCharPos;", "-        if (returnedCharPos >= bufferPos) {", "-            return -1;", "-        } else {", "-            return buffer[returnedCharPos];", "-        }", "+        int ch = line.charAt(linePos);", "+        linePos++;", "+        if (linePos == line.length())", "+            line = null;", "+        return ch;"]}]}
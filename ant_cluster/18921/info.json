{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b66965784073e9ff12324ce213b4f834", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13abba9193864388e2cca9dba803b593", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/GenericDeploymentTool.java", "commitBeforeChange": "74e8a57c93dd534ebfbca3b4d92ea34789c7fe0c", "commitAfterChange": "0b31d6f97a5e41f33dabeda8daae2e13194c1bb5", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     protected String getJarBaseName(String descriptorFileName)", "signatureAfterChange": "     protected String getJarBaseName(String descriptorFileName)", "diff": ["-        if (config.baseJarName != null) {", "+        if (config.namingScheme.getValue().equals(EjbJar.NamingScheme.BASEJARNAME)) {", "-        } else {", "+        } else if (config.namingScheme.getValue().equals(EjbJar.NamingScheme.DESCRIPTOR)) {", "+        } else if (config.namingScheme.getValue().equals(EjbJar.NamingScheme.DIRECTORY)) {", "+            int lastSeparatorIndex = descriptorFileName.lastIndexOf(File.separator);", "+            String dirName = descriptorFileName.substring(0, lastSeparatorIndex);", "+            int dirSeparatorIndex = dirName.lastIndexOf(File.separator);", "+            if (dirSeparatorIndex != -1) {", "+                dirName = dirName.substring(dirSeparatorIndex + 1);", "+            }", "+            ", "+            baseName = dirName;", "+        } else if (config.namingScheme.getValue().equals(EjbJar.NamingScheme.EJB_NAME)) {", "+            baseName = handler.getEjbName();", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ea682e0d88b74c92cf4e46fe9c6c77e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "b0b920b08fae74de3fd7a7dd5efbca9e8cf379e6", "commitAfterChange": "114d55869f46b382375b6b32ddc17bb2e5fc598c", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 31, "signatureBeforeChange": "     public static void main(String[] args) throws IOException", "signatureAfterChange": "     public static void main(String[] args) throws IOException", "diff": ["+        String[] methods = null;", "-            if (args[i].startsWith(Constants.HALT_ON_ERROR)) {", "+            if (args[i].startsWith(Constants.METHOD_NAMES)) {", "+                try {", "+                    String methodsList = args[i].substring(Constants.METHOD_NAMES.length());", "+                    methods = JUnitTest.parseTestMethodNamesList(methodsList);", "+                } catch (IllegalArgumentException ex) {", "+                    System.err.println(\"Invalid specification of test method names: \" + args[i]);", "+                    System.exit(ERRORS);", "+                }", "+            } else if (args[i].startsWith(Constants.HALT_ON_ERROR)) {", "+                String[] testMethodNames;", "-                    testCaseName = st.nextToken();", "+                    String testListSpec = st.nextToken();", "+                    int colonIndex = testListSpec.indexOf(':');", "+                    if (colonIndex == -1) {", "+                        testCaseName = testListSpec;", "+                        testMethodNames = null;", "+                    } else {", "+                        testCaseName = testListSpec.substring(0, colonIndex);", "+                        testMethodNames = JUnitTest.parseTestMethodNamesList(", "+                                                    testListSpec", "+                                                    .substring(colonIndex + 1)", "+                                                    .replace('+', ','));", "+                    }", "-                    code = launch(t, haltError, stackfilter, haltFail,", "+                    code = launch(t, testMethodNames, haltError, stackfilter, haltFail,", "-                t, haltError, stackfilter, haltFail,", "+                t, methods, haltError, stackfilter, haltFail,"]}]}
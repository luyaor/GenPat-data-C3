{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c30eb09f75647f8dd1506d69dfb3101", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10744966102132e9fdf22b5cbf0f2249", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/FixCRLF.java", "commitBeforeChange": "ac1664c3fdae2848480acfb061ab8413daa00923", "commitAfterChange": "70b420621ba892d07049960e4cc4ac34c58549f6", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      private void processFile(String file) throws BuildException", "signatureAfterChange": "      private void processFile(String file) throws BuildException", "diff": ["-\tFile srcFile = new File(srcDir, file);", "-\tFile tmpFile = null;", "+        File srcFile = new File(srcDir, file);", "+        File tmpFile = null;", "-\t// read the contents of the file", "+        // read the contents of the file", "+", "+            try {                                            ", "+                lines.close();", "+                lines = null;", "+            }", "+            catch (IOException e) {", "+                throw new BuildException(\"Unable to close source file \" + srcFile);", "+            }", "+                                     ", "+            if (destFile.exists()) {", "+                if (!destFile.delete()) {", "+                    throw new BuildException(\"Unable to delete \" + destFile);", "+                }", "+            }", "+                                     ", "-                                         + \". Couldn't rename temporary file.\");", "+                                         + \". Couldn't rename temporary file: \" + tmpFile);", "-                lines.close();", "+                if (lines != null) {", "+                    lines.close();", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ffa3d06825f9a84a5d6c105c1098ae5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "5971a069cf9cb4f14d0dac60d150eb952065f38a", "commitAfterChange": "1e65e7f37f2cfae8632629e2b52440a827bb1c76", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        boolean reallyDoUpdate = false;", "-        if (doUpdate && zipFile.exists())", "+        doUpdate = doUpdate && zipFile.exists();", "+        if (doUpdate)", "-            reallyDoUpdate = true;", "-", "-            int i;", "-            for (i=0; i < 1000; i++)", "-            {", "-                renamedFile = new File(zipFile.getParent(), \"tmp.\"+i);", "-", "-                if (!renamedFile.exists()) {", "-                    break;", "-                }", "-            }", "-            if (i == 1000) {", "-                throw new BuildException(\"Can't find available temporary filename to which to rename old file.\");", "-            }", "+            FileUtils fileUtils = FileUtils.newFileUtils();", "+            renamedFile = fileUtils.createTempFile(\"zip\", \".tmp\",", "+                                                   fileUtils.getParentFile(zipFile));", "-        String action = reallyDoUpdate ? \"Updating \" : \"Building \";", "+        String action = doUpdate ? \"Updating \" : \"Building \";", "-                if (reallyDoUpdate) {", "+                if (doUpdate) {", "-            if (reallyDoUpdate) {", "+            if (doUpdate) {", "-        if (success && reallyDoUpdate) {", "+        if (success && doUpdate) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "718c03c4b1668960543656c5876b367c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/BorlandDeploymentTool.java", "commitBeforeChange": "16218478e15fb5e9c80609e50190afcc0bbc83ed", "commitAfterChange": "edd396be180db9bf362a71771449b6daff0cf53c", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private void buildBorlandStubs(Iterator ithomes,Hashtable files )", "signatureAfterChange": "     private void buildBorlandStubs(Iterator ithomes,Hashtable files )", "diff": ["-    private void buildBorlandStubs(Iterator ithomes,Hashtable files )", "-    {", "+    private void buildBorlandStubs(Iterator ithomes,Hashtable files ) {", "-        File java2iiopOut = new File(\"java2iiop.log\");", "-        try ", "-        {", "+        //File java2iiopOut = new File(\"java2iiop.log\");", "+        File java2iiopOut = null;", "+        try {", "+            java2iiopOut = File.createTempFile(\"java2iiop\",\"log\");", "+            log(\" iiop log file : \"+ java2iiopOut ,Project.MSG_DEBUG);", "+", "-            if ( java2iiopdebug ) ", "-            {", "+            if ( java2iiopdebug ) {", "+            //no TIE classes", "+            execTask.createArg().setValue(\"-no_tie\");", "-            while ( ithomes.hasNext()) ", "-            {", "+            while ( ithomes.hasNext()) {", "-        try", "-        {", "+        try {", "-            while ( ( javafile = lnr.readLine()) != null) ", "-            {", "-                if ( javafile.endsWith(\".java\") )", "-                {", "+            while ( ( javafile = lnr.readLine()) != null) {", "+                if ( javafile.endsWith(\".java\") ) {", "-        catch(Exception e)", "-        {", "+        catch(Exception e) {", "+", "+        //delete the output , only if all is succesfull", "+        java2iiopOut.delete();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bd543ccc9fb68237143038de357129d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/Reflector.java", "commitBeforeChange": "2cf032e2ec39726aed4c77622b59eadd3828072e", "commitAfterChange": "2e31f97888f11646bebb8939fed00c37c4c863e2", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 12, "signatureBeforeChange": "                     public void set(Object parent, String value)                          throws InvocationTargetException,                         IllegalAccessException", "signatureAfterChange": "     private void addAttributeSetter(String attributeName,                                      AttributeSetter setter)", "diff": ["+     */", "+    private void addAttributeSetter(String attributeName, ", "+                                    AttributeSetter setter) {", "+        String name = attributeName.toLowerCase();", "+        AttributeSetter currentSetter ", "+            = (AttributeSetter)attributeSetters.get(name);", "+        if (currentSetter != null) {", "+            // there is a setter, is it lower down in the class hierarchy", "+            int currentDepth = currentSetter.getDepth();", "+            if (currentDepth < setter.getDepth()) {", "+                return;", "+            } else if (currentDepth == setter.getDepth()) {", "+                // now check the types", "+                Class currentType = currentSetter.getType();", "+                if (currentType != String.class) {", "+                    return;", "+                }", "+            }", "+        }                                         ", "+        attributeSetters.put(name, setter);", "+    }", "-                new AttributeSetter() {", "-                    public void set(Object parent, String value)", "-                         throws InvocationTargetException,", "-                        IllegalAccessException {", "-                        m.invoke(parent, new String[]{value});", "-                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "908debe1051586e151b4d2d3fc0fb73b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "aae6a87238f255f5599bd1a559c1da34767e8716", "commitAfterChange": "296f7cecd0347b79f837be45c671e0fa9054f402", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 50, "signatureBeforeChange": "         public Process exec(Project project, String[] cmd, String[] env)              throws IOException", "signatureAfterChange": "          private void deleteAfter(final File f, final Process p)", "diff": ["-         */", "-        public Process exec(Project project, String[] cmd, String[] env)", "-             throws IOException {", "-            // Need to quote arguments with spaces, and to escape", "-            // quote characters", "-            String[] newcmd = new String[cmd.length];", "-            for (int i = 0; i < cmd.length; i++) {", "-                newcmd[i] = Commandline.quoteArgument(cmd[i]);", "-            }", "-            if (project != null) {", "-                project.log(\"Execute:Java11CommandLauncher: \"", "-                    + Commandline.describeCommand(newcmd), Project.MSG_DEBUG);", "-            }", "-            return Runtime.getRuntime().exec(newcmd, env);", "-        }", "+        private void deleteAfter(final File f, final Process p) {", "+            new Thread() {", "+                public void run() {", "+                    try {", "+                        p.waitFor();", "+                    }", "+                    catch (InterruptedException e) {", "+                        //ignore", "+                    }", "+                    FILE_UTILS.delete(f);", "+                }", "+            }.start();", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "910709f837ede0eae866f078493e966d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/ZipScanner.java", "commitBeforeChange": "ec980be7345681968c93f0609e9a3fecb39b9753", "commitAfterChange": "fbb9886634198d8377104bef9ec697fadeb134df", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void scanme()", "signatureAfterChange": "     private void scanme()", "diff": ["+        //do not use a FileResource b/c it pulls File info from the filesystem:", "-", "-", "+        init();", "-        myentries = new Hashtable();", "+", "+        fileEntries.clear();", "+        dirEntries.clear();", "+        matchFileEntries.clear();", "+        matchDirEntries.clear();", "+", "-", "-                myentries.put(new String(entry.getName()),", "-                              new Resource(entry.getName(), true,", "-                                           entry.getTime(),", "-                                           entry.isDirectory(),", "-                                           entry.getSize()));", "+                Resource r = new ZipResource(srcFile, encoding, entry);", "+                String name = entry.getName();", "+                if (entry.isDirectory()) {", "+                    name = trimSeparator(name);", "+                    dirEntries.put(name, r);", "+                    if (match(name)) {", "+                        matchDirEntries.put(name, r);", "+                    }", "+                } else {", "+                    fileEntries.put(name, r);", "+                    if (match(name)) {", "+                        matchFileEntries.put(name, r);", "+                    }", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b674365c688f1eaa1b7942643aaf6bd5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/TelnetTask.java", "commitBeforeChange": "e64c186c50b3ef61f4fce8cbc9a9e9c169c84e19", "commitAfterChange": "d4be9171f872a91dda1f3fd2dcf9249f6ee2fa88", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 19, "signatureBeforeChange": "       public void waitForString(String s)", "signatureAfterChange": "       public void waitForString(String s, Integer timeout)", "diff": ["+       */", "+      public void waitForString(String s, Integer timeout)", "-          while (sb.toString().indexOf(s) == -1)", "+          if (timeout == null || timeout.intValue() == 0)", "-              while (is.available() == 0);", "-              int iC = is.read();", "-              Character c = new Character((char)iC);", "-              sb.append(c);", "+              while (sb.toString().indexOf(s) == -1)", "+                  {", "+                      sb.append((char) is.read());", "+                  }", "+          }", "+          else", "+          {", "+              Calendar endTime = Calendar.getInstance(); ", "+              endTime.add(Calendar.SECOND,timeout.intValue());", "+              while ( sb.toString().indexOf(s) == -1)", "+              {", "+                  while (Calendar.getInstance().before(endTime) &&", "+                         is.available() == 0) {", "+                      Thread.sleep(250);", "+                  }", "+                  if (is.available() == 0)", "+                      throw new BuildException(\"Response Timed-Out\", getLocation());", "+                  sb.append((char) is.read());", "+              }", "+        } catch (BuildException be)", "+        { ", "+            throw be;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e66ff6cb43bf161c4e63f813de2f3b17", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/BUnzip2.java", "commitBeforeChange": "b977b55da647e2c09596065ab1e2b6c7dd2820ef", "commitAfterChange": "30c0d31cc4e6eba6ffc9ead619b6f9f1d5181af3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected void extract()", "signatureAfterChange": "     protected void extract()", "diff": ["-                if (bis != null) {", "-                    try {", "-                        bis.close();", "-                    } catch (IOException ioex) {", "-                        // ignore", "-                    }", "-                }", "-                if (fis != null) {", "-                    try {", "-                        fis.close();", "-                    } catch (IOException ioex) {", "-                        // ignore", "-                    }", "-                }", "-                if (out != null) {", "-                    try {", "-                        out.close();", "-                    } catch (IOException ioex) {", "-                        // ignore", "-                    }", "-                }", "-                if (zIn != null) {", "-                    try {", "-                        zIn.close();", "-                    } catch (IOException ioex) {", "-                        // ignore", "-                    }", "-                }", "+                FileUtils.close(bis);", "+                FileUtils.close(fis);", "+                FileUtils.close(out);", "+                FileUtils.close(zIn);"]}]}
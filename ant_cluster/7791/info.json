{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e264798c5d44341e68e4a034db039e1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dd8385c014022d2c7f3cfd1cfb1d91c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private void runBuild(ClassLoader coreLoader) throws BuildException", "signatureAfterChange": "     private void runBuild(final ClassLoader coreLoader) throws BuildException", "diff": ["-    private void runBuild(ClassLoader coreLoader) throws BuildException {", "+    private void runBuild(final ClassLoader coreLoader) throws BuildException {", "-        ArgumentProcessorRegistry processorRegistry = ArgumentProcessorRegistry.getInstance();", "+        final ArgumentProcessorRegistry processorRegistry = ArgumentProcessorRegistry.getInstance();", "-        for (ArgumentProcessor processor : processorRegistry.getProcessors()) {", "-            List<String> extraArgs = extraArguments.get(processor.getClass());", "+        for (final ArgumentProcessor processor : processorRegistry.getProcessors()) {", "+            final List<String> extraArgs = extraArguments.get(processor.getClass());", "-            PrintStream savedErr = System.err;", "-            PrintStream savedOut = System.out;", "-            InputStream savedIn = System.in;", "+            final PrintStream savedErr = System.err;", "+            final PrintStream savedOut = System.out;", "+            final InputStream savedIn = System.in;", "-                    } catch (SecurityException swallowed) {", "+                    } catch (final SecurityException swallowed) {", "-                    ProxySetup proxySetup = new ProxySetup(project);", "+                    final ProxySetup proxySetup = new ProxySetup(project);", "-                for (ArgumentProcessor processor : processorRegistry.getProcessors()) {", "-                    List<String> extraArgs = extraArguments.get(processor.getClass());", "+                for (final ArgumentProcessor processor : processorRegistry.getProcessors()) {", "+                    final List<String> extraArgs = extraArguments.get(processor.getClass());", "-                for (ArgumentProcessor processor : processorRegistry.getProcessors()) {", "-                    List<String> extraArgs = extraArguments.get(processor.getClass());", "+                for (final ArgumentProcessor processor : processorRegistry.getProcessors()) {", "+                    final List<String> extraArgs = extraArguments.get(processor.getClass());", "-        } catch (RuntimeException exc) {", "+        } catch (final RuntimeException exc) {", "-        } catch (Error e) {", "+        } catch (final Error e) {", "-                } catch (Throwable t) {", "+                } catch (final Throwable t) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57336d5e4cafc4fddc763fd0042b8f21", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "     public void executeMain() throws BuildException", "signatureAfterChange": "     public void executeMain() throws BuildException", "diff": ["-        Vector<ResourceCollection> vfss = new Vector<ResourceCollection>();", "+        final Vector<ResourceCollection> vfss = new Vector<ResourceCollection>();", "-            FileSet fs = (FileSet) getImplicitFileSet().clone();", "+            final FileSet fs = (FileSet) getImplicitFileSet().clone();", "-            ResourceCollection rc = resources.elementAt(i);", "+            final ResourceCollection rc = resources.elementAt(i);", "-        ResourceCollection[] fss = new ResourceCollection[vfss.size()];", "+        final ResourceCollection[] fss = new ResourceCollection[vfss.size()];", "-            ArchiveState state = getResourcesToAdd(fss, zipFile, false);", "+            final ArchiveState state = getResourcesToAdd(fss, zipFile, false);", "-            File parent = zipFile.getParentFile();", "+            final File parent = zipFile.getParentFile();", "-            Resource[][] addThem = state.getResourcesToAdd();", "+            final Resource[][] addThem = state.getResourcesToAdd();", "-            String action = doUpdate ? \"Updating \" : \"Building \";", "+            final String action = doUpdate ? \"Updating \" : \"Building \";", "-                    ZipFileSet oldFiles = new ZipFileSet();", "+                    final ZipFileSet oldFiles = new ZipFileSet();", "-                        PatternSet.NameEntry ne = oldFiles.createExclude();", "+                        final PatternSet.NameEntry ne = oldFiles.createExclude();", "-                    DirectoryScanner ds =", "+                    final DirectoryScanner ds =", "-                    String[] f = ds.getIncludedFiles();", "+                    final String[] f = ds.getIncludedFiles();", "-                        String[] d = ds.getIncludedDirectories();", "-                        Resource[] dr = new Resource[d.length];", "+                        final String[] d = ds.getIncludedDirectories();", "+                        final Resource[] dr = new Resource[d.length];", "-                        Resource[] tmp = r;", "+                        final Resource[] tmp = r;", "-        } catch (IOException ioe) {", "+        } catch (final IOException ioe) {", "-                } catch (IOException e) {", "+                } catch (final IOException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68e98b431252935f576eee9fbd747a44", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "     public static void main(String[] args) throws IOException", "signatureAfterChange": "     public static void main(final String[] args) throws IOException", "diff": ["-    public static void main(String[] args) throws IOException {", "+    public static void main(final String[] args) throws IOException {", "-        Properties props = new Properties();", "+        final Properties props = new Properties();", "-                    String methodsList = args[i].substring(Constants.METHOD_NAMES.length());", "+                    final String methodsList = args[i].substring(Constants.METHOD_NAMES.length());", "-                } catch (IllegalArgumentException ex) {", "+                } catch (final IllegalArgumentException ex) {", "-                } catch (BuildException be) {", "+                } catch (final BuildException be) {", "-                FileInputStream in = new FileInputStream(args[i]", "+                final FileInputStream in = new FileInputStream(args[i]", "-                antThreadID = Integer.parseInt( args[i].substring(Constants.THREADID.length()) );", "+                antThreadID = Integer.parseInt(args[i].substring(Constants.THREADID.length()));", "-        Hashtable p = System.getProperties();", "-        for (Enumeration e = p.keys(); e.hasMoreElements();) {", "-            Object key = e.nextElement();", "+        final Hashtable p = System.getProperties();", "+        for (final Enumeration e = p.keys(); e.hasMoreElements();) {", "+            final Object key = e.nextElement();", "-                java.io.BufferedReader reader =", "+                final java.io.BufferedReader reader =", "-                    StringTokenizer st = new StringTokenizer(line, \",\");", "-                    String testListSpec = st.nextToken();", "-                    int colonIndex = testListSpec.indexOf(':');", "+                    final StringTokenizer st = new StringTokenizer(line, \",\");", "+                    final String testListSpec = st.nextToken();", "+                    final int colonIndex = testListSpec.indexOf(':');", "-                    JUnitTest t = new JUnitTest(testCaseName);", "+                    final JUnitTest t = new JUnitTest(testCaseName);", "-            } catch (IOException e) {", "+            } catch (final IOException e) {", "-            JUnitTest t = new JUnitTest(args[0]);", "+            final JUnitTest t = new JUnitTest(args[0]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afcd2df5b81eaca9160bbebad0a5d648", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void processArgs(String[] args)", "signatureAfterChange": "     private void processArgs(final String[] args)", "diff": ["-    private void processArgs(String[] args) {", "+    private void processArgs(final String[] args) {", "-        ArgumentProcessorRegistry processorRegistry = ArgumentProcessorRegistry.getInstance();", "-        ", "+        final ArgumentProcessorRegistry processorRegistry = ArgumentProcessorRegistry.getInstance();", "+", "-            String arg = args[i];", "+            final String arg = args[i];", "-                    File logFile = new File(args[i + 1]);", "+                    final File logFile = new File(args[i + 1]);", "-                } catch (IOException ioe) {", "-                    String msg = \"Cannot write on the specified log file. \"", "+                } catch (final IOException ioe) {", "+                    final String msg = \"Cannot write on the specified log file. \"", "-                } catch (ArrayIndexOutOfBoundsException aioobe) {", "-                    String msg = \"You must specify a log file when \"", "+                } catch (final ArrayIndexOutOfBoundsException aioobe) {", "+                    final String msg = \"You must specify a log file when \"", "-                String msg = \"Ant's Main method is being handed \"", "+                final String msg = \"Ant's Main method is being handed \"", "-                for (ArgumentProcessor processor : processorRegistry.getProcessors()) {", "-                    int newI = processor.readArguments(args, i);", "+                for (final ArgumentProcessor processor : processorRegistry.getProcessors()) {", "+                    final int newI = processor.readArguments(args, i);", "-                    String msg = \"Unknown argument: \" + arg;", "+                    final String msg = \"Unknown argument: \" + arg;", "-                    Iterator<ProjectHelper> it = ProjectHelperRepository.getInstance().getHelpers();", "+                    final Iterator<ProjectHelper> it = ProjectHelperRepository.getInstance().getHelpers();", "-                        ProjectHelper helper = it.next();", "+                        final ProjectHelper helper = it.next();", "-                Iterator<ProjectHelper> it = ProjectHelperRepository.getInstance().getHelpers();", "+                final Iterator<ProjectHelper> it = ProjectHelperRepository.getInstance().getHelpers();", "-                    ProjectHelper helper = it.next();", "+                    final ProjectHelper helper = it.next();", "-            File whatYouMeant = new File(buildFile, \"build.xml\");", "+            final File whatYouMeant = new File(buildFile, \"build.xml\");"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3c58e0c3ec6e5e5ff59d2957f32e9883", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d15b153cb3c3a0bbcc6089e5c01661ae", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "4b3e0ee2041826e51ec60af99e7bcca7024bf676", "commitAfterChange": "ed3fafb887fef0afbcd90eef7f263fef3bde95d9", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private Object setupChild( final ConfigurationState state,                                final Configuration element,                                final Context context,                                final PropertyConfigurer childConfigurer )         throws Exception", "signatureAfterChange": "     private Object setupChild( final ConfigurationState state,                                final Configuration element,                                final Context context,                                final PropertyConfigurer childConfigurer )         throws Exception", "diff": ["-        Object child = childConfigurer.createValue( state );", "-        if( null == child && Configuration.class == type )", "+        if( Configuration.class == type )", "-        else if( null == child )", "+", "+        // Create an instance", "+        Object child = childConfigurer.createValue( state );", "+        if( null == child )", "-            // Create an instance", "-            if( type.isInterface() )", "+            if( childConfigurer == state.getConfigurer().getTypedProperty() )", "-                child = createdTypedObject( name, type );", "+                // Typed property", "+                child = createTypedObject( name, type );", "-                child = createObject( type );", "+                // Named property", "+                child = createNamedObject( type );", "+        // Configure the object", "+", "+        // Convert the object, if necessary", "+        if( ! type.isInstance( child ) )", "+        {", "+            child = m_converter.convert( type, child, context );", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d251fab3ed7c5350418632fc6364b787", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/compilers/Jikes.java", "commitBeforeChange": "85344c438efab87f56ca5f4b179752852ec0aa86", "commitAfterChange": "f66cab0ea7689df54fe51f64018cd3ef8b05cd3d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public boolean execute() throws BuildException", "signatureAfterChange": "     public boolean execute() throws BuildException", "diff": ["-        if (warningsProperty != null && !Project.toBoolean(warningsProperty)) {", "+        if (warningsProperty != null) {", "+            attributes.log(\"!! the build.compiler.warnings property is deprecated. !!\",", "+                           Project.MSG_WARN);", "+            attributes.log(\"!! Use the nowarn attribute instead. !!\",", "+                           Project.MSG_WARN);", "+            if (!Project.toBoolean(warningsProperty)) {", "+                cmd.createArgument().setValue(\"-nowarn\");", "+            }", "+        } if (attributes.getNowarn()) {", "+            /* ", "+             * FIXME later", "+             *", "+             * let the magic property win over the attribute for backwards ", "+             * compatibility", "+             */"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d24ec03c3f56e1ae91c1facfd960f0ad", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6467907723d27b2023c3346d4593abb4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/util/FileUtilsTest.java", "commitBeforeChange": "1efb922bf591d5a8b083c5984b51fd46b0ebb9af", "commitAfterChange": "e12c63a6ee1b0bb45e9821ff84392c9391d76bd9", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void testToURI()", "signatureAfterChange": "     public void testToURI()", "diff": ["-            assertEquals(\"file:///C:/foo\", FILE_UTILS.toURI(\"c:\\\\foo\"));", "+            assertEquals(\"file:/c:/foo\", removeExtraneousAuthority(FILE_UTILS.toURI(\"c:\\\\foo\")));", "-            assertEquals(\"file:///SYS:/foo\", FILE_UTILS.toURI(\"sys:\\\\foo\"));", "+            assertEquals(\"file:/SYS:/foo\", removeExtraneousAuthority(FILE_UTILS.toURI(\"sys:\\\\foo\")));", "-        assertEquals(\"file:///\" + dosRoot + \"foo\", FILE_UTILS.toURI(\"/foo\"));", "-        /* May fail if the directory ${user.dir}/foo/ exists", "-         * (and anyway is the tested behavior actually desirable?):", "-        assertEquals(\"file:./foo\",  fu.toURI(\"./foo\"));", "-         */", "-        assertEquals(\"file:///\" + dosRoot + \"foo\", FILE_UTILS.toURI(\"\\\\foo\"));", "-        /* See above:", "-        assertEquals(\"file:./foo\",  fu.toURI(\".\\\\foo\"));", "-         */", "-        assertEquals(\"file:///\" + dosRoot + \"foo%20bar\", FILE_UTILS.toURI(\"/foo bar\"));", "-        assertEquals(\"file:///\" + dosRoot + \"foo%20bar\", FILE_UTILS.toURI(\"\\\\foo bar\"));", "-        assertEquals(\"file:///\" + dosRoot + \"foo%23bar\", FILE_UTILS.toURI(\"/foo#bar\"));", "-        assertEquals(\"file:///\" + dosRoot + \"foo%23bar\", FILE_UTILS.toURI(\"\\\\foo#bar\"));", "+        if (File.pathSeparatorChar == '/') {", "+            assertEquals(\"file:/foo\", removeExtraneousAuthority(FILE_UTILS.toURI(\"/foo\")));", "+            assertTrue(\"file: URIs must name absolute paths\", FILE_UTILS.toURI(\"./foo\").startsWith(\"file:/\"));", "+            assertTrue(FILE_UTILS.toURI(\"./foo\").endsWith(\"/foo\"));", "+            assertEquals(\"file:/\" + dosRoot + \"foo%20bar\", removeExtraneousAuthority(FILE_UTILS.toURI(\"/foo bar\")));", "+            assertEquals(\"file:/\" + dosRoot + \"foo%23bar\", removeExtraneousAuthority(FILE_UTILS.toURI(\"/foo#bar\")));", "+        } else if (File.pathSeparatorChar == '\\\\') {", "+            assertEquals(\"file:/\" + dosRoot + \"foo\", removeExtraneousAuthority(FILE_UTILS.toURI(\"\\\\foo\")));", "+            assertTrue(\"file: URIs must name absolute paths\", FILE_UTILS.toURI(\".\\\\foo\").startsWith(\"file:/\"));", "+            assertTrue(FILE_UTILS.toURI(\".\\\\foo\").endsWith(\"/foo\"));", "+            assertEquals(\"file:/\" + dosRoot + \"foo%20bar\", removeExtraneousAuthority(FILE_UTILS.toURI(\"\\\\foo bar\")));", "+            assertEquals(\"file:/\" + dosRoot + \"foo%23bar\", removeExtraneousAuthority(FILE_UTILS.toURI(\"\\\\foo#bar\")));", "+        }", "-        // i would expect here %E4NT ???", "-        // anyway, this is the fix for the bug 37348wh", "-        assertEquals(\"file:///\" + dosRoot + \"%C3%A4nt\", FILE_UTILS.toURI(\"/\\u00E4nt\"));", "+        // the escaped character used for the test is the \"a umlaut\"", "+        // this is the fix for the bug 37348", "+        assertEquals(\"file:/\" + dosRoot + \"%C3%A4nt\", removeExtraneousAuthority(FILE_UTILS.toURI(\"/\\u00E4nt\")));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ab0bdb57b332211bf56f3ec53cf5a87", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/util/FileUtilsTest.java", "commitBeforeChange": "2d15e8d8b3af5f74bf06989fe1c5cce6e07e3471", "commitAfterChange": "257dadeaf0fb8588b80fa71b24ee3aca38ea19b7", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void testRemoveLeadingPath()", "signatureAfterChange": "     public void testRemoveLeadingPath()", "diff": ["-        assertEquals(\"bar\", fu.removeLeadingPath(new File(\"/foo\"),", "+        assertEquals(\"bar\", FILE_UTILS.removeLeadingPath(new File(\"/foo\"),", "-        assertEquals(\"bar\", fu.removeLeadingPath(new File(\"/foo/\"),", "+        assertEquals(\"bar\", FILE_UTILS.removeLeadingPath(new File(\"/foo/\"),", "-        assertEquals(\"bar\", fu.removeLeadingPath(new File(\"\\\\foo\"),", "+        assertEquals(\"bar\", FILE_UTILS.removeLeadingPath(new File(\"\\\\foo\"),", "-        assertEquals(\"bar\", fu.removeLeadingPath(new File(\"\\\\foo\\\\\"),", "+        assertEquals(\"bar\", FILE_UTILS.removeLeadingPath(new File(\"\\\\foo\\\\\"),", "-        assertEquals(\"bar\", fu.removeLeadingPath(new File(\"c:/foo\"),", "+        assertEquals(\"bar\", FILE_UTILS.removeLeadingPath(new File(\"c:/foo\"),", "-        assertEquals(\"bar\", fu.removeLeadingPath(new File(\"c:/foo/\"),", "+        assertEquals(\"bar\", FILE_UTILS.removeLeadingPath(new File(\"c:/foo/\"),", "-        assertEquals(\"bar\", fu.removeLeadingPath(new File(\"c:\\\\foo\"),", "+        assertEquals(\"bar\", FILE_UTILS.removeLeadingPath(new File(\"c:\\\\foo\"),", "-        assertEquals(\"bar\", fu.removeLeadingPath(new File(\"c:\\\\foo\\\\\"),", "+        assertEquals(\"bar\", FILE_UTILS.removeLeadingPath(new File(\"c:\\\\foo\\\\\"),", "-        assertEqualsIgnoreDriveCase(fu.normalize(\"/bar\").getAbsolutePath(),", "-                     fu.removeLeadingPath(new File(\"/foo\"), new File(\"/bar\")));", "-        assertEqualsIgnoreDriveCase(fu.normalize(\"/foobar\").getAbsolutePath(),", "-                     fu.removeLeadingPath(new File(\"/foo\"), new File(\"/foobar\")));", "+        assertEqualsIgnoreDriveCase(FILE_UTILS.normalize(\"/bar\").getAbsolutePath(),", "+                     FILE_UTILS.removeLeadingPath(new File(\"/foo\"), new File(\"/bar\")));", "+        assertEqualsIgnoreDriveCase(FILE_UTILS.normalize(\"/foobar\").getAbsolutePath(),", "+                     FILE_UTILS.removeLeadingPath(new File(\"/foo\"), new File(\"/foobar\")));", "-        assertEquals(\"\", fu.removeLeadingPath(new File(\"/foo/bar\"),", "+        assertEquals(\"\", FILE_UTILS.removeLeadingPath(new File(\"/foo/bar\"),", "-        assertEquals(\"\", fu.removeLeadingPath(new File(\"/foo/bar\"),", "+        assertEquals(\"\", FILE_UTILS.removeLeadingPath(new File(\"/foo/bar\"),", "-        assertEquals(\"\", fu.removeLeadingPath(new File(\"/foo/bar/\"),", "+        assertEquals(\"\", FILE_UTILS.removeLeadingPath(new File(\"/foo/bar/\"),", "-        assertEquals(\"\", fu.removeLeadingPath(new File(\"/foo/bar/\"),", "+        assertEquals(\"\", FILE_UTILS.removeLeadingPath(new File(\"/foo/bar/\"),", "-        assertEquals(expected, fu.removeLeadingPath(new File(\"/\"),", "+        assertEquals(expected, FILE_UTILS.removeLeadingPath(new File(\"/\"),", "-        assertEquals(expected, fu.removeLeadingPath(new File(\"c:/\"),", "+        assertEquals(expected, FILE_UTILS.removeLeadingPath(new File(\"c:/\"),", "-        assertEquals(expected, fu.removeLeadingPath(new File(\"c:\\\\\"),", "+        assertEquals(expected, FILE_UTILS.removeLeadingPath(new File(\"c:\\\\\"),"]}]}
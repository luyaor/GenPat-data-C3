{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a49fa798bb1d7a77cef23aa0f2670906", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc2d17408d44fdcfaf874c47ff66edaf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "7055d10d8daca725b1a26456868263ed4b1e9f9c", "commitAfterChange": "89b81e63432125075513ce6e4b85c399089d2454", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-\tResourceCollection savedRc = null;", "+        ResourceCollection savedRc = null;", "-\t    savedRc = (ResourceCollection) rcs.elementAt(0);", "+            savedRc = (ResourceCollection) rcs.elementAt(0);", "-\t    /* for historical and performance reasons we have to do", "-\t       things in a rather complex way.", "-\t    ", "-\t       (1) Move is optimized to move directories if a fileset", "-\t       has been included completely, therefore FileSets need a", "-\t       special treatment.  This is also required to support", "-\t       the failOnError semantice (skip filesets with broken", "-\t       basedir but handle the remaining collections).", "+        /* for historical and performance reasons we have to do", "+           things in a rather complex way.", "-\t       (2) We carry around a few protected methods that work", "-\t       on basedirs and arrays of names.  To optimize stuff, all", "-\t       resources with the same basedir get collected in", "-\t       separate lists and then each list is handled in one go.", "-\t    */", "+           (1) Move is optimized to move directories if a fileset", "+           has been included completely, therefore FileSets need a", "+           special treatment.  This is also required to support", "+           the failOnError semantice (skip filesets with broken", "+           basedir but handle the remaining collections).", "-\t    HashMap filesByBasedir = new HashMap();", "-\t    HashMap dirsByBasedir = new HashMap();", "-\t    HashSet baseDirs = new HashSet();", "+           (2) We carry around a few protected methods that work", "+           on basedirs and arrays of names.  To optimize stuff, all", "+           resources with the same basedir get collected in", "+           separate lists and then each list is handled in one go.", "+        */", "+", "+            HashMap filesByBasedir = new HashMap();", "+            HashMap dirsByBasedir = new HashMap();", "+            HashSet baseDirs = new HashSet();", "-\t\tResourceCollection rc = (ResourceCollection) rcs.elementAt(i);", "+                ResourceCollection rc = (ResourceCollection) rcs.elementAt(i);", "-\t\tif (rc.isFilesystemOnly()) {", "+                if (rc.isFilesystemOnly()) {", "-\t\t    // Step (1)", "-\t\t    if (rc instanceof FileSet) {", "-\t\t\tFileSet fs = (FileSet) rc;", "-\t\t\tDirectoryScanner ds = null;", "-\t\t\ttry {", "-\t\t\t    ds = fs.getDirectoryScanner(getProject());", "-\t\t\t} catch (BuildException e) {", "-\t\t\t    if (failonerror", "-\t\t\t\t|| !e.getMessage().endsWith(\" not found.\")) {", "-\t\t\t\tthrow e;", "-\t\t\t    } else {", "-\t\t\t\tlog(\"Warning: \" + e.getMessage());", "-\t\t\t\tcontinue;", "-\t\t\t    }", "-\t\t\t}", "-\t\t\tFile fromDir = fs.getDir(getProject());", "+                    // Step (1)", "+                    if (rc instanceof FileSet) {", "+                        FileSet fs = (FileSet) rc;", "+                        DirectoryScanner ds = null;", "+                        try {", "+                            ds = fs.getDirectoryScanner(getProject());", "+                        } catch (BuildException e) {", "+                            if (failonerror", "+                                || !e.getMessage().endsWith(\" not found.\")) {", "+                                throw e;", "+                            } else {", "+                                log(\"Warning: \" + e.getMessage());", "+                                continue;", "+                            }", "+                        }", "+                        File fromDir = fs.getDir(getProject());", "-\t\t\tString[] srcFiles = ds.getIncludedFiles();", "-\t\t\tString[] srcDirs = ds.getIncludedDirectories();", "-\t\t\tif (!flatten && mapperElement == null", "-\t\t\t    && ds.isEverythingIncluded() && !fs.hasPatterns()) {", "-\t\t\t    completeDirMap.put(fromDir, destDir);", "-\t\t\t}", "-\t\t\tadd(fromDir, srcFiles, filesByBasedir);", "-\t\t\tadd(fromDir, srcDirs, dirsByBasedir);", "-\t\t\tbaseDirs.add(fromDir);", "-\t\t    } else { // not a fileset", "+                        String[] srcFiles = ds.getIncludedFiles();", "+                        String[] srcDirs = ds.getIncludedDirectories();", "+                        if (!flatten && mapperElement == null", "+                            && ds.isEverythingIncluded() && !fs.hasPatterns()) {", "+                            completeDirMap.put(fromDir, destDir);", "+                        }", "+                        add(fromDir, srcFiles, filesByBasedir);", "+                        add(fromDir, srcDirs, dirsByBasedir);", "+                        baseDirs.add(fromDir);", "+                    } else { // not a fileset", "-\t\t\tIterator resources = rc.iterator();", "-\t\t\twhile (resources.hasNext()) {", "-\t\t\t    FileResource fr = (FileResource) resources.next();", "-\t\t\t    if (!fr.isExists()) {", "-\t\t\t\tcontinue;", "-\t\t\t    }", "-\t\t\t    File baseDir = getKeyFile(fr.getBaseDir());", "-\t\t\t    add(baseDir, ", "-\t\t\t\tbaseDir == NULL_FILE_PLACEHOLDER", "-\t\t\t\t? fr.getFile().getAbsolutePath() : fr.getName(),", "-\t\t\t\tfr.isDirectory() ? dirsByBasedir ", "-\t\t\t\t                 : filesByBasedir);", "-\t\t\t    baseDirs.add(baseDir);", "-\t\t\t}", "-\t\t    }", "+                        Iterator resources = rc.iterator();", "+                        while (resources.hasNext()) {", "+                            FileResource fr = (FileResource) resources.next();", "+                            if (!fr.isExists()) {", "+                                continue;", "+                            }", "+                            File baseDir = getKeyFile(fr.getBaseDir());", "+                            add(baseDir, baseDir == NULL_FILE_PLACEHOLDER", "+                                ? fr.getFile().getAbsolutePath() : fr.getName(),", "+                                fr.isDirectory() ? dirsByBasedir", "+                                                 : filesByBasedir);", "+                            baseDirs.add(baseDir);", "+                        }", "+                    }", "-\t\t    Iterator iter = baseDirs.iterator();", "-\t\t    while (iter.hasNext()) {", "-\t\t\tFile f = (File) iter.next();", "-\t\t\tList files = (List) filesByBasedir.get(f);", "-\t\t\tList dirs = (List) dirsByBasedir.get(f);", "-", "-\t\t\tString[] srcFiles = new String[0];", "-\t\t\tif (files != null) {", "-\t\t\t    srcFiles = (String[]) files.toArray(srcFiles);", "-\t\t\t}", "-\t\t\tString[] srcDirs = new String[0];", "-\t\t\tif (dirs != null) {", "-\t\t\t    srcDirs = (String[]) dirs.toArray(srcDirs);", "-\t\t\t}", "-\t\t\tscan(f == NULL_FILE_PLACEHOLDER ? null : f, destDir,", "-\t\t\t     srcFiles, srcDirs);", "-\t\t    }", "-\t\t} else { // not a File resource collection", "-\t\t    throw new BuildException(\"Only FileSystem resources are\"", "-\t\t\t\t\t     + \" supported.\");", "-\t\t}", "+                    Iterator iter = baseDirs.iterator();", "+                    while (iter.hasNext()) {", "+                        File f = (File) iter.next();", "+                        List files = (List) filesByBasedir.get(f);", "+                        List dirs = (List) dirsByBasedir.get(f);", "+    ", "+                        String[] srcFiles = new String[0];", "+                        if (files != null) {", "+                            srcFiles = (String[]) files.toArray(srcFiles);", "+                        }", "+                        String[] srcDirs = new String[0];", "+                        if (dirs != null) {", "+                            srcDirs = (String[]) dirs.toArray(srcDirs);", "+                        }", "+                        scan(f == NULL_FILE_PLACEHOLDER ? null : f, destDir,", "+                            srcFiles, srcDirs);", "+                    }", "+                } else { // not a File resource collection", "+                    throw new BuildException(", "+                        \"Only FileSystem resources are supported.\");", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e254a380adec164abfd2e7f36b0c530a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "c6a2ce5a054f4985d68689f9dff61e43a65a1c23", "commitAfterChange": "5a381558aef54280f925781bed3d4c9ba7ced360", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+            ArrayList nonFileResources = new ArrayList();", "-                if (rc.isFilesystemOnly()) {", "+                // Step (1) - beware of the ZipFileSet", "+                if (rc instanceof FileSet && rc.isFilesystemOnly()) {", "+                    FileSet fs = (FileSet) rc;", "+                    DirectoryScanner ds = null;", "+                    try {", "+                        ds = fs.getDirectoryScanner(getProject());", "+                    } catch (BuildException e) {", "+                        if (failonerror", "+                            || !e.getMessage().endsWith(\" not found.\")) {", "+                            throw e;", "+                        } else {", "+                            log(\"Warning: \" + e.getMessage());", "+                            continue;", "+                        }", "+                    }", "+                    File fromDir = fs.getDir(getProject());", "-                    // Step (1)", "-                    if (rc instanceof FileSet) {", "-                        FileSet fs = (FileSet) rc;", "-                        DirectoryScanner ds = null;", "-                        try {", "-                            ds = fs.getDirectoryScanner(getProject());", "-                        } catch (BuildException e) {", "-                            if (failonerror", "-                                || !e.getMessage().endsWith(\" not found.\")) {", "-                                throw e;", "-                            } else {", "-                                log(\"Warning: \" + e.getMessage());", "-                                continue;", "+                    String[] srcFiles = ds.getIncludedFiles();", "+                    String[] srcDirs = ds.getIncludedDirectories();", "+                    if (!flatten && mapperElement == null", "+                        && ds.isEverythingIncluded() && !fs.hasPatterns()) {", "+                        completeDirMap.put(fromDir, destDir);", "+                    }", "+                    add(fromDir, srcFiles, filesByBasedir);", "+                    add(fromDir, srcDirs, dirsByBasedir);", "+                    baseDirs.add(fromDir);", "+                } else { // not a fileset or contains non-file resources", "+", "+                    if (!rc.isFilesystemOnly() && !supportsNonFileResources()) {", "+                        throw new BuildException(", "+                                   \"Only FileSystem resources are supported.\");", "+                    }", "+", "+                    Iterator resources = rc.iterator();", "+                    while (resources.hasNext()) {", "+                        Resource r = (Resource) resources.next();", "+                        if (!r.isExists()) {", "+                            continue;", "+                        }", "+", "+                        File baseDir = NULL_FILE_PLACEHOLDER;", "+                        String name = r.getName();", "+                        if (r instanceof FileResource) {", "+                            FileResource fr = (FileResource) r;", "+                            baseDir = getKeyFile(fr.getBaseDir());", "+                            if (fr.getBaseDir() == null) {", "+                                name = fr.getFile().getAbsolutePath();", "-                        File fromDir = fs.getDir(getProject());", "-                        String[] srcFiles = ds.getIncludedFiles();", "-                        String[] srcDirs = ds.getIncludedDirectories();", "-                        if (!flatten && mapperElement == null", "-                            && ds.isEverythingIncluded() && !fs.hasPatterns()) {", "-                            completeDirMap.put(fromDir, destDir);", "-                        }", "-                        add(fromDir, srcFiles, filesByBasedir);", "-                        add(fromDir, srcDirs, dirsByBasedir);", "-                        baseDirs.add(fromDir);", "-                    } else { // not a fileset", "-", "-                        Iterator resources = rc.iterator();", "-                        while (resources.hasNext()) {", "-                            FileResource fr = (FileResource) resources.next();", "-                            if (!fr.isExists()) {", "-                                continue;", "-                            }", "-                            File baseDir = getKeyFile(fr.getBaseDir());", "-                            add(baseDir, baseDir == NULL_FILE_PLACEHOLDER", "-                                ? fr.getFile().getAbsolutePath() : fr.getName(),", "-                                fr.isDirectory() ? dirsByBasedir", "-                                                 : filesByBasedir);", "+                        // copying of dirs is trivial and can be done", "+                        // for non-file resources as well as for real", "+                        // files.", "+                        if (r.isDirectory() || r instanceof FileResource) {", "+                            add(baseDir, name,", "+                                r.isDirectory() ? dirsByBasedir ", "+                                                : filesByBasedir);", "+                        } else { // a not-directory file resource", "+                            // needs special treatment", "+                            nonFileResources.add(r);", "-", "-                    Iterator iter = baseDirs.iterator();", "-                    while (iter.hasNext()) {", "-                        File f = (File) iter.next();", "-                        List files = (List) filesByBasedir.get(f);", "-                        List dirs = (List) dirsByBasedir.get(f);", "-", "-                        String[] srcFiles = new String[0];", "-                        if (files != null) {", "-                            srcFiles = (String[]) files.toArray(srcFiles);", "-                        }", "-                        String[] srcDirs = new String[0];", "-                        if (dirs != null) {", "-                            srcDirs = (String[]) dirs.toArray(srcDirs);", "-                        }", "-                        scan(f == NULL_FILE_PLACEHOLDER ? null : f, destDir,", "-                             srcFiles, srcDirs);", "-                    }", "-                } else { // not a File resource collection", "-                    throw new BuildException(", "-                        \"Only FileSystem resources are supported.\");", "+", "+            Iterator iter = baseDirs.iterator();", "+            while (iter.hasNext()) {", "+                File f = (File) iter.next();", "+                List files = (List) filesByBasedir.get(f);", "+                List dirs = (List) dirsByBasedir.get(f);", "+", "+                String[] srcFiles = new String[0];", "+                if (files != null) {", "+                    srcFiles = (String[]) files.toArray(srcFiles);", "+                }", "+                String[] srcDirs = new String[0];", "+                if (dirs != null) {", "+                    srcDirs = (String[]) dirs.toArray(srcDirs);", "+                }", "+                scan(f == NULL_FILE_PLACEHOLDER ? null : f, destDir, srcFiles,", "+                     srcDirs);", "+            }", "+", "+                }", "+            }", "+", "+            if (nonFileResources.size() > 0) {", "+                Resource[] nonFiles =", "+                    (Resource[]) nonFileResources.toArray(new Resource[0]);", "+                // restrict to out-of-date resources", "+                Map map = scan(nonFiles, destDir);", "+                try {", "+                    doResourceOperations(map);", "+                } catch (BuildException e) {", "+                    if (!failonerror) {", "+                        log(\"Warning: \" + e.getMessage(), Project.MSG_ERR);", "+                    } else {", "+                        throw e;", "+                    }"]}]}
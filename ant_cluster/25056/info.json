{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4cb9d843ce0c50691f51bf237ebad911", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ee110203e18df3899a86be8f7954d15", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "e65fb2c1cce7bf58dc8bffbf79b3681dc806b64a", "commitAfterChange": "1eafac93d30650b0fccee220aa4ec6e73af1355c", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private void checkIncludePatterns()", "signatureAfterChange": "     private void checkIncludePatterns()", "diff": ["+", "+        File canonBase = null;", "+        try {", "+            canonBase = basedir.getCanonicalFile();", "+        } catch (IOException ex) {", "+            throw new BuildException(ex);", "+        }", "+", "-            // we need to call getCanonicalFile here for DOS systems", "-            // the reason being that otherwise File will be influenced", "-            // by the case of currentelement, which we want to avoid", "-            if (Os.isFamily(\"dos\") && myfile.exists()) {", "+", "+            if (myfile.exists()) {", "+                // may be on a case insensitive file system.  We want", "+                // the results to show what's really on the disk, so", "+                // we need to double check.", "-                    // getAbsoluteFile() is not enough here unfortunately", "-                    myfile = myfile.getCanonicalFile();", "-                }", "-                catch (Exception ex) {", "+                    File canonFile = myfile.getCanonicalFile();", "+                    String path = fileUtils.removeLeadingPath(canonBase,", "+                                                              canonFile);", "+                    if (!path.equals(currentelement)) {", "+                        myfile = findFile(basedir, currentelement);", "+                        if (myfile != null) {", "+                            currentelement = ", "+                                fileUtils.removeLeadingPath(basedir, myfile);", "+                        }", "+                    }", "+                } catch (IOException ex) {", "-                // the variable currentelement is actually telling what", "-                // the scan results will contain", "-                currentelement = fileUtils.removeLeadingPath(basedir,", "-                                                             myfile);", "-            if (!myfile.exists() && !isCaseSensitive) {", "+            ", "+            if ((myfile == null || !myfile.exists()) && !isCaseSensitive) {", "-            if (myfile.exists()) {", "+            if (myfile != null && myfile.exists()) {", "+        fileListMap.clear();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2423b40c4a51fc9846f9289418459b7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Jar.java", "commitBeforeChange": "f2bc3fe7c89755a2e53e79aaf636b4177fe8928d", "commitAfterChange": "cc911f59921cda9a230eebd58c4ab6d9e292d5e9", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "     protected boolean isUpToDate(FileScanner[] scanners, File zipFile) throws BuildException", "signatureAfterChange": "     protected boolean isUpToDate(FileScanner[] scanners, File zipFile) throws BuildException", "diff": ["-        if (manifestFile != null && manifestFile.lastModified() > zipFile.lastModified()) {", "+        if (buildFileManifest || manifestFile == null) {", "+            java.util.zip.ZipFile theZipFile = null;", "+            try {", "+                theZipFile = new java.util.zip.ZipFile(zipFile);", "+                java.util.zip.ZipEntry entry = theZipFile.getEntry(\"META-INF/MANIFEST.MF\");", "+                if (entry == null) {", "+                    return false;", "+                }", "+                Manifest currentManifest = new Manifest(theZipFile.getInputStream(entry));", "+                if (!currentManifest.equals(manifest)) {", "+                    return false;", "+                }", "+            }", "+            catch (Exception e) {", "+                // any problems and we will rebuild", "+                return false;", "+            }", "+            finally {", "+                if (theZipFile != null) {", "+                    try {", "+                        theZipFile.close();", "+                    }", "+                    catch (IOException e) {", "+                        //ignore", "+                    }", "+                }", "+            }", "+        }", "+        else if (manifestFile.lastModified() > zipFile.lastModified()) {"]}]}
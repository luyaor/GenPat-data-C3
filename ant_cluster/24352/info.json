{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "18e51c0e3fdb14c0fd777654da6223e4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59ec31f15c2efe5c569301b688386607", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ExecutionFrame.java", "commitBeforeChange": "7499c443d67445ea8fd0b8f4bd56c72251b18bf4", "commitAfterChange": "b7e43ad8c5906ae2b6d6b42f8b2715dc7d2e7a16", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 33, "signatureBeforeChange": "     private void configureElement(Object element, BuildElement model)          throws ExecutionException, TaskException", "signatureAfterChange": "     private void configureElement(Object element, BuildElement model)          throws ExecutionException", "diff": ["-         throws ExecutionException, TaskException {", "+         throws ExecutionException {", "+            if (!reflector.supportsAttribute(attributeName)) {", "+                throw new ExecutionException(model.getType()", "+                     + \" does not support the \\\"\" + attributeName", "+                     + \"\\\" attribute\", model.getLocation());", "+            }", "-                replacePropertyRefs(attributeValue));", "+                dataService.replacePropertyRefs(attributeValue));", "-            reflector.addText(element, replacePropertyRefs(modelText));", "+            if (!reflector.supportsText()) {", "+                throw new ExecutionException(model.getType()", "+                     + \" does not support content\", model.getLocation());", "+            }", "+            reflector.addText(element,", "+                dataService.replacePropertyRefs(modelText));", "-                Object nestedElement = createNestedElement(reflector, element,", "-                    nestedElementModel);", "-                reflector.addElement(element, nestedElementName, nestedElement);", "+                if (reflector.supportsNestedAdder(nestedElementName)) {", "+                    addNestedElement(reflector, element, nestedElementModel);", "+                } else if (reflector.supportsNestedCreator(nestedElementName)) {", "+                    createNestedElement(reflector, element, nestedElementModel);", "+                } else {", "+                    throw new ExecutionException(model.getType()", "+                         + \" does not support the \\\"\" + nestedElementName", "+                         + \"\\\" nested element\",", "+                        nestedElementModel.getLocation());", "+                }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89dd52acc7cf4a2eb8fe675de2fd2ab7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/Frame.java", "commitBeforeChange": "ec9816997d704ba18f8209a3b8330275e5a61325", "commitAfterChange": "30b81779b563d12a1e28bebf934d5a5626da57ce", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "     private void configureElement(AntLibFactory factory, Object element,                                   BuildElement model)          throws ExecutionException", "signatureAfterChange": "     private void configureElement(AntLibFactory factory, Object element,                                   BuildElement model)          throws ExecutionException", "diff": ["-        Reflector reflector = getReflector(element.getClass());", "+        Setter setter = getSetter(element.getClass());", "-            if (!reflector.supportsAttribute(attributeName)) {", "+            if (!setter.supportsAttribute(attributeName)) {", "-            reflector.setAttribute(element, attributeName,", "+            setter.setAttribute(element, attributeName,", "-            if (!reflector.supportsText()) {", "+            if (!setter.supportsText()) {", "-            reflector.addText(element,", "+            setter.addText(element,", "-                 && !reflector.supportsNestedElement(nestedElementName)) {", "+                 && !setter.supportsNestedElement(nestedElementName)) {", "-                if (reflector.supportsNestedAdder(nestedElementName)) {", "-                    addNestedElement(factory, reflector, element,", "+                if (setter.supportsNestedAdder(nestedElementName)) {", "+                    addNestedElement(factory, setter, element,", "-                } else if (reflector.supportsNestedCreator(nestedElementName)) {", "-                    createNestedElement(factory, reflector, element,", "+                } else if (setter.supportsNestedCreator(nestedElementName)) {", "+                    createNestedElement(factory, setter, element,"]}]}
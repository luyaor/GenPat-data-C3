{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c72e29abc2e0be9b652c6359cb4160e9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a6afbf487fd41ebf994a6c83d338444", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Chmod.java", "commitBeforeChange": "ece10d579b717271df6d23074bfd0345e58ceb95", "commitAfterChange": "d55b86ab4fbcc8807e105e8c99c56488dadc6aeb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-\ttry {", "-\t    // XXX if OS=unix", "-\t    if (System.getProperty(\"path.separator\").equals(\":\") &&", "-                    !System.getProperty(\"os.name\").startsWith(\"Mac\"))", "-\t\tRuntime.getRuntime().exec(\"chmod \" + mod + \" \" + srcFile );", "-\t} catch (IOException ioe) {", "-\t    // ignore, but warn", "-\t    System.out.println(\"Error chmod\" + ioe.toString() );", "-\t}", "+        try {", "+            // XXX if OS=unix", "+            if (System.getProperty(\"path.separator\").equals(\":\") &&", "+                !System.getProperty(\"os.name\").startsWith(\"Mac\")) {", "+        ", "+                if (srcFile != null && srcDir == null) {", "+                    chmod(srcFile.toString());", "+                } else if(srcFile == null && srcDir == null) {", "+                    project.log(\"The attribute 'file' or 'dir' needs to be set.\", Project.MSG_WARN);", "+                    throw new BuildException(\"Required attribute not set in Chmod\", location);", "+                } else if(srcFile == null && srcDir != null) {", "+          ", "+                    DirectoryScanner ds = getDirectoryScanner(srcDir);", "+                    String[] files = ds.getIncludedFiles();", "+          ", "+                    for (int i = 0; i < files.length; i++) {", "+                        chmod(files[i]);", "+                    }", "+                }", "+            }", "+        } catch (IOException ioe) {", "+            // ignore, but warn", "+            project.log(\"Error in Chmod \" + ioe.toString() , Project.MSG_WARN);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f9296b12e37eb466349a9a420b0b5d7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Delete.java", "commitBeforeChange": "40bf7243ac6b80a6aca5f4a56b6634b7018db629", "commitAfterChange": "2c8c53f98ad69042c3ecb1dbbb6844c8a7cc4020", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "   public void execute() throws BuildException", "diff": ["+   */", "+  public void execute() throws BuildException {", "+", "+    if (f == null && delDir == null) {", "+      throw new BuildException(\"<file> or <dir> attribute must be set!\");", "-    public void execute() throws BuildException {", "-        if (f.exists()) {", "-            if (f.isDirectory()) { ", "-                project.log(\"Directory: \" + f.getAbsolutePath() + ", "-                    \" cannot be removed with delete.  Use Deltree instead.\");", "-            } else {", "-                project.log(\"Deleting: \" + f.getAbsolutePath());", "-                f.delete();", "-            }", "+    // old <delete> functionality must still work", "+    if (f != null) {", "+      if (f.exists()) {", "+        if (f.isDirectory()) {", "+          project", "+            .log(\"Directory: \" + f.getAbsolutePath()", "+                 + \" cannot be removed with delete.  Use Deltree instead.\");", "+        else {", "+          project.log(\"Deleting: \" + f.getAbsolutePath());", "+          f.delete();", "+        }", "+      }", "+", "+    // now we'll do the fancy pattern-driven deletes", "+    if (delDir == null) {", "+      return;", "+    }", "+    if (!delDir.exists()) {", "+      throw new BuildException(\"dir does not exist!\");", "+    }", "+    DirectoryScanner ds    = super.getDirectoryScanner(delDir);", "+    String[]         files = ds.getIncludedFiles();", "+", "+    if (files.length > 0) {", "+      project.log(\"Deleting \" + files.length + \" files from \" + delDir.getAbsolutePath());", "+      for (int i = 0; i < files.length; i++) {", "+        File f = new File(delDir, files[i]);", "+", "+        if (f.exists()) {", "+          project.log(\"Deleting: \" + f.getAbsolutePath(), verbosity);", "+          f.delete();", "+        }", "+      }", "+    }", "+  }"]}]}
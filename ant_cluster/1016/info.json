{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ebf52c07232b3973e9f241e2974c2a63", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf68e9e5fd08ecfcce62f7882cd96482", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/AbstractFileSet.java", "commitBeforeChange": "f701a45a76f305a53e96ffebf49b7000005303c8", "commitAfterChange": "4732c52135bf174383b10ed11b0ba86a33e12044", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     public DirectoryScanner getDirectoryScanner(Project p)", "signatureAfterChange": "     public DirectoryScanner getDirectoryScanner(Project p)", "diff": ["-        if (dir == null) {", "-            throw new BuildException(\"No directory specified for \"", "-                                     + getDataTypeName() + \".\");", "+        DirectoryScanner ds = null;", "+        synchronized (this) {", "+            if (directoryScanner != null && p == getProject()) {", "+                ds = directoryScanner;", "+            } else {", "+                if (dir == null) {", "+                    throw new BuildException(\"No directory specified for \"", "+                                             + getDataTypeName() + \".\");", "+                }", "+                if (!dir.exists()) {", "+                    throw new BuildException(dir.getAbsolutePath()", "+                                             + \" not found.\");", "+                }", "+                if (!dir.isDirectory()) {", "+                    throw new BuildException(dir.getAbsolutePath()", "+                                             + \" is not a directory.\");", "+                }", "+                ds = new DirectoryScanner();", "+                setupDirectoryScanner(ds, p);", "+                ds.setFollowSymlinks(followSymlinks);", "+                directoryScanner = (p == getProject()) ? ds : directoryScanner;", "+            }", "-        if (!dir.exists()) {", "-            throw new BuildException(dir.getAbsolutePath() + \" not found.\");", "-        }", "-        if (!dir.isDirectory()) {", "-            throw new BuildException(dir.getAbsolutePath()", "-                                     + \" is not a directory.\");", "-        }", "-        DirectoryScanner ds = new DirectoryScanner();", "-        setupDirectoryScanner(ds, p);", "-        ds.setFollowSymlinks(followSymlinks);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbfb4801cd56022a02e610a202f91eb0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "cdb548b3b4d78f378f11293a270aa5a8bb4a913a", "commitAfterChange": "5e01ac3c135e9e7f675ca6dcc66abe9e0d0d6005", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String encoding, Project project)         throws IOException", "signatureAfterChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String encoding, Project project)         throws IOException", "diff": ["-                if (encoding == null) {", "-                    in = new BufferedReader(new FileReader(sourceFile));", "-                    out = new BufferedWriter(new FileWriter(destFile));", "-                } else {", "-                    in = new BufferedReader(new InputStreamReader(", "-                            new FileInputStream(sourceFile), encoding));", "-                    out = new BufferedWriter(new OutputStreamWriter(", "-                            new FileOutputStream(destFile), encoding));", "-                }", "-", "-                if (filterChainsAvailable) {", "-                    ChainReaderHelper crh = new ChainReaderHelper();", "-                    crh.setBufferSize(8192);", "-                    crh.setPrimaryReader(in);", "-                    crh.setFilterChains(filterChains);", "-                    crh.setProject(project);", "-                    Reader rdr = crh.getAssembledReader();", "-                    in = new BufferedReader(rdr);", "-                }", "-", "-                int length;", "-                String newline = null;", "-                String line = in.readLine();", "-                while (line != null) {", "-                    if (line.length() == 0) {", "-                        out.newLine();", "+                try {", "+                    if (encoding == null) {", "+                        in = new BufferedReader(new FileReader(sourceFile));", "+                        out = new BufferedWriter(new FileWriter(destFile));", "-                        if (filterSetsAvailable) {", "-                            newline = filters.replaceTokens(line);", "-                        } else {", "-                            newline = line;", "-                        }", "-                        out.write(newline);", "-                        out.newLine();", "+                        in = ", "+                            new BufferedReader(new InputStreamReader(", "+                                                 new FileInputStream(sourceFile), ", "+                                                 encoding));", "+                        out = ", "+                            new BufferedWriter(new OutputStreamWriter(", "+                                                 new FileOutputStream(destFile), ", "+                                                 encoding));", "-                    line = in.readLine();", "+", "+                    if (filterChainsAvailable) {", "+                        ChainReaderHelper crh = new ChainReaderHelper();", "+                        crh.setBufferSize(8192);", "+                        crh.setPrimaryReader(in);", "+                        crh.setFilterChains(filterChains);", "+                        crh.setProject(project);", "+                        Reader rdr = crh.getAssembledReader();", "+                        in = new BufferedReader(rdr);", "+                    }", "+                    ", "+                    int length;", "+                    String newline = null;", "+                    String line = in.readLine();", "+                    while (line != null) {", "+                        if (line.length() == 0) {", "+                            out.newLine();", "+                        } else {", "+                            if (filterSetsAvailable) {", "+                                newline = filters.replaceTokens(line);", "+                            } else {", "+                                newline = line;", "+                            }", "+                            out.write(newline);", "+                            out.newLine();", "+                        }", "+                        line = in.readLine();", "+                    }", "+                } finally {", "+                    if (out != null) {", "+                        out.close();", "+                    }", "+                    if (in != null) {", "+                        in.close();", "+                    }", "-", "-                out.close();", "-                in.close();", "-                FileInputStream in = new FileInputStream(sourceFile);", "-                FileOutputStream out = new FileOutputStream(destFile);", "+                FileInputStream in = null;", "+                FileOutputStream out = null;", "+                try {", "+                    in = new FileInputStream(sourceFile);", "+                    out = new FileOutputStream(destFile);", "-                byte[] buffer = new byte[8 * 1024];", "-                int count = 0;", "-                do {", "-                    out.write(buffer, 0, count);", "-                    count = in.read(buffer, 0, buffer.length);", "-                } while (count != -1);", "-", "-                in.close();", "-                out.close();", "+                    byte[] buffer = new byte[8 * 1024];", "+                    int count = 0;", "+                    do {", "+                        out.write(buffer, 0, count);", "+                        count = in.read(buffer, 0, buffer.length);", "+                    } while (count != -1);", "+                } finally {", "+                    if (out != null) {", "+                        out.close();", "+                    }", "+                    if (in != null) {", "+                        in.close();", "+                    }", "+                }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8cd77908a47766ee0cbff51fe0124f71", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76bc1c2d83f0728b93be925dbb03a255", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/javacc/JJTree.java", "commitBeforeChange": "c16e1955f177db572f1fb7bc04582462b4ea6870", "commitAfterChange": "58968aaa63891f65d5a9a7197310471fbc21f4e1", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "      private String createOutputFileName(File target, String optionalOutputFile,                                         String outputDirectory)", "signatureAfterChange": "      private String createOutputFileName(File target, String optionalOutputFile,                                         String outputDirectory)", "diff": ["+        optionalOutputFile = validateOutputFile(optionalOutputFile,", "+                                                outputDirectory);", "-            if (isAbsolute(optionalOutputFile)) {", "-                return optionalOutputFile.replace('\\\\','/');", "-            } else {", "-                outputDirectory = getProject().getBaseDir().getAbsolutePath();", "-            }", "+            outputDirectory = getDefaultOutputDirectory();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80c78e1e03ceb6396c468c7dc1ba41f1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/MappedResourceCollection.java", "commitBeforeChange": "bd7585adb01844d04d23a6b1707427f9f4a490ad", "commitAfterChange": "ea33301047ba2de74fa062155df4d6337e5d1392", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      private Collection getCollection()", "signatureAfterChange": "      private Collection<Resource> getCollection()", "diff": ["-    private Collection getCollection() {", "-        Collection collected = new ArrayList();", "+    private Collection<Resource> getCollection() {", "+        Collection<Resource> collected = new ArrayList<Resource>();", "-        for (Iterator iter = nested.iterator(); iter.hasNext(); ) {", "-            Resource r = (Resource) iter.next();", "+        for (Resource r : nested) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca6c1d4cdd22db6b0351e7829f56cbba", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/Files.java", "commitBeforeChange": "7829faf36a6f4bc565e0e8b92aa85cc948718176", "commitAfterChange": "9caeed5081071d6a2de28844d0a724918f8c6d86", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "     public synchronized Object clone()", "signatureAfterChange": "     public synchronized Object clone()", "diff": ["-        f.additionalPatterns = new Vector(additionalPatterns.size());", "-        for (Iterator iter = additionalPatterns.iterator(); iter.hasNext();) {", "-            PatternSet ps = (PatternSet) iter.next();", "-            f.additionalPatterns.add(ps.clone());", "+        f.additionalPatterns = new Vector<PatternSet>(additionalPatterns.size());", "+        for (PatternSet ps : additionalPatterns) {", "+            f.additionalPatterns.add((PatternSet) ps.clone());"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2f03141fa0919e532644149248b670eb", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "236e541574ce80e9ed7bb31409ac594a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/workspace/DefaultTaskContext.java", "commitBeforeChange": "c1d66dbc0cb573a6afe5fcaea76e661622337a00", "commitAfterChange": "43cbdfc52cca75f3089c7494d99b91cb9d562fc0", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public Object getService( final Class serviceClass )         throws TaskException", "signatureAfterChange": "     public Object getService( final Class serviceClass )         throws TaskException", "diff": ["-        throw new TaskException( \"No services available atm\" );", "+        // Try this context first", "+        final String name = serviceClass.getName();", "+        if( m_componentManager.hasComponent( name ) )", "+        {", "+            try", "+            {", "+                final Component service = m_componentManager.lookup( name );", "+                if( !serviceClass.isInstance( service ) )", "+                {", "+                    final String message =", "+                        REZ.getString( \"bad-service-class.error\",", "+                                       name,", "+                                       service.getClass().getName(),", "+                                       serviceClass.getName() );", "+                    throw new TaskException( message );", "+                }", "+", "+                return service;", "+            }", "+            catch( final ComponentException ce )", "+            {", "+                final String message = REZ.getString( \"bad-find-service.error\", name );", "+                throw new TaskException( message, ce );", "+            }", "+        }", "+", "+        // Try parent", "+        final TaskContext parent = (TaskContext)getParent();", "+        if( null != parent )", "+        {", "+            return parent.getService( serviceClass );", "+        }", "+", "+        // Not found", "+        final String message = REZ.getString( \"bad-find-service.error\", name );", "+        throw new TaskException( message );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5094c2c978e4dadb7daadf77e76cd8cd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/builder/DefaultProjectBuilder.java", "commitBeforeChange": "b3c44651dba0b0dd33a68baab7afdb4175d6fe93", "commitAfterChange": "f522a0a7baf7e79ed933ed7714e6c6c15c51ac0a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void buildTarget( final DefaultProject project, final Configuration target )         throws Exception", "signatureAfterChange": "     private void buildTarget( final DefaultProject project, final Configuration target )         throws Exception", "diff": ["-            throw new Exception( \"Discovered un-named target at \" +", "-                                 target.getLocation() );", "+            final String message = ", "+                REZ.getString( \"ant.target-noname.error\", target.getLocation() );", "+            throw new Exception( message );", "-            throw new Exception( \"Target with an invalid name at \" +", "-                                 target.getLocation() );", "+            final String message = ", "+                REZ.getString( \"ant.target-bad-name.error\", target.getLocation() );", "+            throw new Exception( message );", "-        getLogger().debug( \"Parsing target: \" + name );", "+        if( getLogger().isDebugEnabled() )", "+        {", "+            final String message = REZ.getString( \"ant.target-parse.notice\", name );", "+            getLogger().debug( message );", "+        }", "-            throw new Exception( \"Discovered invalid target that has both a if and \" +", "-                                    \"unless condition at \" + target.getLocation() );", "+            final String message = ", "+                REZ.getString( \"ant.target-bad-logic.error\", target.getLocation() );", "+            throw new Exception( message );", "-            getLogger().debug( \"Target if condition: \" + ifCondition );", "+            if( getLogger().isDebugEnabled() )", "+            {", "+                final String message = REZ.getString( \"ant.target-if.notice\", ifCondition );", "+                getLogger().debug( message );", "+            }", "-            getLogger().debug( \"Target unless condition: \" + unlessCondition );", "+            if( getLogger().isDebugEnabled() )", "+            {", "+                final String message = REZ.getString( \"ant.target-unless.notice\", unlessCondition );", "+                getLogger().debug( message );", "+            }", "-                    throw new Exception( \"Discovered empty dependency in target \" +", "-                                         target.getName() + \" at \" + target.getLocation() );", "+                    final String message = REZ.getString( \"ant.target-bad-dependency.error\", ", "+                                                          target.getName(), ", "+                                                          target.getLocation() );", "+                    throw new Exception( message );", "-                getLogger().debug( \"Target dependency: \" + dependency );", "+                if( getLogger().isDebugEnabled() )", "+                {", "+                    final String message = REZ.getString( \"ant.target-dependency.notice\", dependency );", "+                    getLogger().debug( message );", "+                }   ", "+"]}]}
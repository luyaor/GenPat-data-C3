{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "36f2b332e0b59c1b5f085ecf4d03e184", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21bd5722aaba10a97e1386796149263c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/tasklet/engine/DefaultTaskletEngine.java", "commitBeforeChange": "66c74a2fceee359d38138fb601c1b639e99fb17d", "commitAfterChange": "19600e6d005c8bebbf6697bd00516e843f0a34f4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void compose( final ComponentManager componentManager )         throws ComponentNotFoundException, ComponentNotAccessibleException", "signatureAfterChange": "          protected void setupSubComponent( final Component component )         throws Exception", "diff": ["-    public void compose( final ComponentManager componentManager )", "-        throws ComponentNotFoundException, ComponentNotAccessibleException", "-        m_taskletRegistry = (TaskletRegistry)componentManager.", "-            lookup( \"org.apache.ant.tasklet.engine.TaskletRegistry\" );", "-        m_converterRegistry = (ConverterRegistry)componentManager.", "-            lookup( \"org.apache.ant.convert.ConverterRegistry\" );", "+    ", "+    protected void setupSubComponent( final Component component )", "+        throws Exception", "+    {", "+        if( component instanceof Composer )", "+            componentManager.put( \"org.apache.ant.convert.Converter\", ", "+                                  getConverterEngine() );", "+            componentManager.put( \"org.apache.ant.convert.ConverterEngine\",", "+                                  getConverterEngine() );", "+            componentManager.put( \"org.apache.ant.tasklet.engine.TaskletEngine\", ", "+                                  this );", "+            ((Composer)component).compose( componentManager );", "+        ", "+        if( component instanceof Initializable )", "+            ((Initializable)component).init();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f75ced452110aa4a863cda76b1ee304", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/MappedResource.java", "commitBeforeChange": "f179a428596b5cdcd1185a3fcf92ec7475cd3cc3", "commitAfterChange": "a22e945b3cd393fb0b49c73ecb37518d69cef7de", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 16, "signatureBeforeChange": "          protected AppendableTouchableFileProviderMR(Resource r)", "signatureAfterChange": "      public Object as(Class clazz)", "diff": ["+    public Object as(Class clazz) {", "+        if (clazz == Appendable.class && isAppendable) {", "+            return new Appendable() {", "+                public OutputStream getAppendOutputStream() throws IOException {", "+                    return ((Appendable) wrapped.as(Appendable.class))", "+                        .getAppendOutputStream();", "+                }", "+            };", "+        }", "+        return super.as(clazz);", "+    }", "-", "-        protected AppendableTouchableFileProviderMR(Resource r) {", "-            super(r);", "-            if (!(r instanceof Appendable)) {", "-                throw new IllegalArgumentException(\"trying to wrap something \"", "-                                                   + \"that is not a \"", "-                                                   + \" Appendable\");", "-            }", "-            a = (Appendable) r;", "-        }"]}]}
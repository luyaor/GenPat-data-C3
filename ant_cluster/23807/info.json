{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "643794c2bf92bcb3f2fb405128471a87", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "244729996ef05c6c9fdaa6bd5c01047c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/builder/DefaultProjectBuilder.java", "commitBeforeChange": "e2cc34fa963ffa74a7e6dc7fa60d8ba32042b83c", "commitAfterChange": "7b867a10d26f96911855430e79c668df0e053cef", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected void buildTopLevelProject( final DefaultProject project,                                          final Configuration configuration )         throws Exception", "signatureAfterChange": "     private void buildTopLevelProject( final DefaultProject project,                                        final Configuration configuration,                                        final HashMap projects )         throws Exception", "diff": ["-    protected void buildTopLevelProject( final DefaultProject project,", "-                                         final Configuration configuration )", "+    private void buildTopLevelProject( final DefaultProject project,", "+                                       final Configuration configuration,", "+                                       final HashMap projects )", "+        final ArrayList implicitTaskList = new ArrayList();", "+", "+        int state = PROJECT_REFERENCES;", "-            //handle individual elements", "+            if( PROJECT_REFERENCES == state )", "+            {", "+                if( name.equals( \"projectref\" ) )", "+                {", "+                    buildProjectRef( project, element, projects );", "+                    continue;", "+                }", "+                else", "+                {", "+                    state = LIBRARY_IMPORTS;", "+                }", "+            }", "+", "+            if( LIBRARY_IMPORTS == state )", "+            {", "+                if( name.equals( \"import\" ) )", "+                {", "+                    buildImport( project, element );", "+                    continue;", "+                }", "+                else", "+                {", "+                    state = IMPLICIT_TASKS;", "+                }", "+            }", "+", "+            if( IMPLICIT_TASKS == state )", "+            {", "+                //Check for any implicit tasks here", "+                if( !name.equals( \"target\" ) )", "+                {", "+                    implicitTaskList.add( element );", "+                    continue;", "+                }", "+                else", "+                {", "+                    state = TARGETS;", "+                }", "+            }", "+", "-            else if( name.equals( \"property\" ) ) buildImplicitTask( project, element );", "-                                        \" at \" + element.getLocation() );", "+                                     \" at \" + element.getLocation() +", "+                                     \". Expecting target\" );", "+", "+        final Configuration[] implicitTasks =", "+            (Configuration[])implicitTaskList.toArray( new Configuration[ 0 ] );", "+", "+        final Target implicitTarget = new Target( null, implicitTasks, null );", "+        project.setImplicitTarget( implicitTarget );", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62e7b22c3c77389e00461857af1900e4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/regexp/Jdk14RegexpRegexp.java", "commitBeforeChange": "dfc1957328247cc79d3df7eb6f6c113e58c1dc31", "commitAfterChange": "be53ecfdc2ff0f8e955eada253ea8d3db38addeb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public String substitute(String input, String argument, int options)         throws BuildException", "signatureAfterChange": "      public String substitute(String input, String argument, int options)         throws BuildException", "diff": ["+        // translate \\1 to $(1) so that the Matcher will work", "+        StringBuffer subst = new StringBuffer();", "+        for (int i=0; i<argument.length(); i++) {", "+            char c = argument.charAt(i);", "+            if (c == '\\\\') {", "+                if (++i < argument.length()) {", "+                    c = argument.charAt(i);", "+                    int value = Character.digit(c, 10);", "+                    if (value > -1) {", "+                        subst.append(\"$(\").append(value).append(\")\");", "+                    } else {", "+                        subst.append(c);", "+                    }", "+                } else {", "+                    // XXX - should throw an exception instead?", "+                    subst.append('\\\\');", "+                }", "+            } else {", "+                subst.append(c);", "+            }", "+        }", "+        argument = subst.toString();", "+        ", "-            if (res)", "+            if (res) {", "-            else", "+                m.appendTail(sb);", "+            } else {", "+            }"]}]}
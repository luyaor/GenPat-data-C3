{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b1af0f98cd30b269f124e804aad84bf1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "640edb36b0e5f88d4d9c9892d96a5340", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/manifest/Section.java", "commitBeforeChange": "0595affdf0cc45086d9055cf1e3cfb4e50bc2d76", "commitAfterChange": "78a7fbf3d909ad842f9e6f3e193a1017eb2f9cbb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public String addAttributeAndCheck( Attribute attribute )         throws ManifestException, TaskException", "signatureAfterChange": "     public String addAttributeAndCheck( Attribute attribute )         throws ManifestException", "diff": ["-        throws ManifestException, TaskException", "+        throws ManifestException", "-            throw new TaskException( \"Attributes must have name and value\" );", "+            throw new ManifestException( \"Attributes must have name and value\" );", "-        if( attribute.getName().equalsIgnoreCase( Manifest.ATTRIBUTE_NAME ) )", "+        if( attribute.getName().equalsIgnoreCase( ManifestUtil.ATTRIBUTE_NAME ) )", "-            warnings.add( \"\\\"\" + Manifest.ATTRIBUTE_NAME + \"\\\" attributes should not occur in the \" +", "+            m_warnings.add( \"\\\"\" + ManifestUtil.ATTRIBUTE_NAME + \"\\\" attributes should not occur in the \" +", "-        if( attribute.getName().toLowerCase().startsWith( Manifest.ATTRIBUTE_FROM.toLowerCase() ) )", "+        if( attribute.getName().toLowerCase().startsWith( ManifestUtil.ATTRIBUTE_FROM.toLowerCase() ) )", "-            warnings.add( \"Manifest attributes should not start with \\\"\" +", "-                          Manifest.ATTRIBUTE_FROM + \"\\\" in \\\"\" + attribute.getName() + \": \" + attribute.getValue() + \"\\\"\" );", "+            m_warnings.add( \"Manifest attributes should not start with \\\"\" +", "+                          ManifestUtil.ATTRIBUTE_FROM + \"\\\" in \\\"\" + attribute.getName() + \": \" + attribute.getValue() + \"\\\"\" );", "-            if( attributeName.equals( Manifest.ATTRIBUTE_CLASSPATH ) )", "+            if( attributeName.equals( ManifestUtil.ATTRIBUTE_CLASSPATH ) )", "-                ArrayList classpathAttrs = (ArrayList)attributes.get( attributeName );", "+                ArrayList classpathAttrs = (ArrayList)m_attributes.get( attributeName );", "-                    attributes.put( attributeName, classpathAttrs );", "+                    m_attributes.put( attributeName, classpathAttrs );", "-            else if( attributes.containsKey( attributeName ) )", "+            else if( m_attributes.containsKey( attributeName ) )", "-                attributes.put( attributeName, attribute );", "+                m_attributes.put( attributeName, attribute );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "daa6e26df8e38173de1be5e1b3c6bdb3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/manifest/Section.java", "commitBeforeChange": "0595affdf0cc45086d9055cf1e3cfb4e50bc2d76", "commitAfterChange": "78a7fbf3d909ad842f9e6f3e193a1017eb2f9cbb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public String addAttributeAndCheck( Attribute attribute )         throws ManifestException, TaskException", "signatureAfterChange": "     public String addAttributeAndCheck( Attribute attribute )         throws ManifestException", "diff": ["-        throws ManifestException, TaskException", "+        throws ManifestException", "-            throw new TaskException( \"Attributes must have name and value\" );", "+            throw new ManifestException( \"Attributes must have name and value\" );", "-        if( attribute.getName().equalsIgnoreCase( Manifest.ATTRIBUTE_NAME ) )", "+        if( attribute.getName().equalsIgnoreCase( ManifestUtil.ATTRIBUTE_NAME ) )", "-            warnings.add( \"\\\"\" + Manifest.ATTRIBUTE_NAME + \"\\\" attributes should not occur in the \" +", "+            m_warnings.add( \"\\\"\" + ManifestUtil.ATTRIBUTE_NAME + \"\\\" attributes should not occur in the \" +", "-        if( attribute.getName().toLowerCase().startsWith( Manifest.ATTRIBUTE_FROM.toLowerCase() ) )", "+        if( attribute.getName().toLowerCase().startsWith( ManifestUtil.ATTRIBUTE_FROM.toLowerCase() ) )", "-            warnings.add( \"Manifest attributes should not start with \\\"\" +", "-                          Manifest.ATTRIBUTE_FROM + \"\\\" in \\\"\" + attribute.getName() + \": \" + attribute.getValue() + \"\\\"\" );", "+            m_warnings.add( \"Manifest attributes should not start with \\\"\" +", "+                          ManifestUtil.ATTRIBUTE_FROM + \"\\\" in \\\"\" + attribute.getName() + \": \" + attribute.getValue() + \"\\\"\" );", "-            if( attributeName.equals( Manifest.ATTRIBUTE_CLASSPATH ) )", "+            if( attributeName.equals( ManifestUtil.ATTRIBUTE_CLASSPATH ) )", "-                ArrayList classpathAttrs = (ArrayList)attributes.get( attributeName );", "+                ArrayList classpathAttrs = (ArrayList)m_attributes.get( attributeName );", "-                    attributes.put( attributeName, classpathAttrs );", "+                    m_attributes.put( attributeName, classpathAttrs );", "-            else if( attributes.containsKey( attributeName ) )", "+            else if( m_attributes.containsKey( attributeName ) )", "-                attributes.put( attributeName, attribute );", "+                m_attributes.put( attributeName, attribute );"]}]}
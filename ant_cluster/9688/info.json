{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "085c280c3040efb83c98a8a5e6f6e96f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38f035dbb40930ca4d260f15bee8b084", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/Path.java", "commitBeforeChange": "ec980be7345681968c93f0609e9a3fecb39b9753", "commitAfterChange": "fbb9886634198d8377104bef9ec697fadeb134df", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 20, "signatureBeforeChange": "     public String[] list()", "signatureAfterChange": "     protected Collection getCollection()", "diff": ["-    public String[] list() {", "-        if (!isChecked()) {", "-            // make sure we don't have a circular reference here", "-            Stack stk = new Stack();", "-            stk.push(this);", "-            dieOnCircularReference(stk, getProject());", "-        }", "-", "-        Vector result = new Vector(2 * elements.size());", "-        for (int i = 0; i < elements.size(); i++) {", "-            Object o = elements.elementAt(i);", "-            if (o instanceof Reference) {", "-                Reference r = (Reference) o;", "-                o = r.getReferencedObject(getProject());", "-                // we only support references to paths right now", "-                if (!(o instanceof Path)) {", "-                    String msg = r.getRefId() + \" doesn\\'t denote a path \" + o;", "-                    throw new BuildException(msg);", "-                }", "+    protected Collection getCollection() {", "+        for (Iterator i = getResourceCollections().iterator(); i.hasNext();) {", "+            ResourceCollection rc = (ResourceCollection) i.next();", "+            if (!(rc.isFilesystemOnly())) {", "+                throw new BuildException(getDataTypeName()", "+                    + \" allows only filesystem resources.\");", "-", "-            if (o instanceof String) {", "-                // obtained via append", "-                addUnlessPresent(result, (String) o);", "-            } else if (o instanceof PathElement) {", "-                String[] parts = ((PathElement) o).getParts();", "-                if (parts == null) {", "-                    throw new BuildException(\"You must either set location or\"", "-                        + \" path on <pathelement>\");", "-                }", "-                for (int j = 0; j < parts.length; j++) {", "-                    addUnlessPresent(result, parts[j]);", "-                }", "-            } else if (o instanceof Path) {", "-                Path p = (Path) o;", "+            if (rc instanceof PathElement", "+                && ((PathElement) rc).getParts() == null) {", "+                throw new BuildException(", "+                    \"Either location or path must be set on a pathelement.\");", "+            } else if (rc instanceof Path) {", "+                Path p = (Path) rc;", "-                String[] parts = p.list();", "-                for (int j = 0; j < parts.length; j++) {", "-                    addUnlessPresent(result, parts[j]);", "-                }", "-            } else if (o instanceof DirSet) {", "-                DirSet dset = (DirSet) o;", "-                addUnlessPresent(result, dset.getDir(getProject()),", "-                    dset.getDirectoryScanner(getProject()).getIncludedDirectories());", "-            } else if (o instanceof FileSet) {", "-                FileSet fs = (FileSet) o;", "-                addUnlessPresent(result, fs.getDir(getProject()),", "-                    fs.getDirectoryScanner(getProject()).getIncludedFiles());", "-            } else if (o instanceof FileList) {", "-                FileList fl = (FileList) o;", "-                addUnlessPresent(result,", "-                    fl.getDir(getProject()), fl.getFiles(getProject()));", "-        String[] res = new String[result.size()];", "-        result.copyInto(res);", "-        return res;", "-    }", "+        return super.getCollection();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c72ecb1db59b1358d52aaebe10687fbf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/Path.java", "commitBeforeChange": "20dede5ad87cf903e9be1a39d67312d7f39dfcd0", "commitAfterChange": "a8d4fe6d9b8c7a4adb1704b12de610dc6e18fe94", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public String[] list()", "signatureAfterChange": "     public String[] list()", "diff": ["-        final String[] result = new String[definition.size()];", "-        definition.copyInto(result);", "-        return result;", "+        Vector result = new Vector(2*elements.size());", "+        for (int i=0; i<elements.size(); i++) {", "+            Object o = elements.elementAt(i);", "+            if (o instanceof Reference) {", "+                Reference r = (Reference) o;", "+                o = r.getReferencedObject(project);", "+                // we only support references to filesets right now", "+                if (o == null || !(o instanceof FileSet)) {", "+                    String msg = r.getRefId()+\" doesn\\'t denote a fileset\";", "+                    throw new BuildException(msg);", "+                }", "+            }", "+            ", "+            if (o instanceof String) {", "+                // obtained via append", "+                addUnlessPresent(result, (String) o);", "+            } else if (o instanceof PathElement) {", "+                String[] parts = ((PathElement) o).getParts();", "+                if (parts == null) {", "+                    throw new BuildException(\"You must either set location or path on <pathelement>\");", "+                }", "+                for (int j=0; j<parts.length; j++) {", "+                    addUnlessPresent(result, parts[j]);", "+                }", "+            } else if (o instanceof FileSet) {", "+                FileSet fs = (FileSet) o;", "+                DirectoryScanner ds = fs.getDirectoryScanner(project);", "+                String[] s = ds.getIncludedFiles();", "+                File dir = fs.getDir();", "+                for (int j=0; j<s.length; j++) {", "+                    addUnlessPresent(result, ", "+                                     translateFile((new File(dir, s[j])).getAbsolutePath()));", "+                }", "+            }", "+        }", "+        String[] res = new String[result.size()];", "+        result.copyInto(res);", "+        return res;"]}]}
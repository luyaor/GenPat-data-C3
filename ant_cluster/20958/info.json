{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b3d389d0c87280d7da3729c9cd0fd72d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e7a4351435c5ae3bfd3471920b59687", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/deployer/DefaultDeployer.java", "commitBeforeChange": "e7ab62bc9179b392804835d02155e43d3d2cf5d6", "commitAfterChange": "2e6e170fb375181f4438e1de44808c7adab508a2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private URLClassLoader getClassLoaderForFile( final File file )         throws Exception", "signatureAfterChange": "     public TypeDefinition createTypeDefinition( final Configuration configuration )         throws ConfigurationException", "diff": ["-     */", "-    private URLClassLoader getClassLoaderForFile( final File file )", "-        throws Exception", "-    {", "-        final File canonFile = file.getCanonicalFile();", "-", "-        // Locate cached classloader, creating it if necessary", "-        URLClassLoader classLoader = (URLClassLoader)m_fileDeployers.get( canonFile );", "-        if( classLoader == null )", "-        {", "-            checkFile( canonFile );", "-            final File[] extensions = getOptionalPackagesFor( canonFile );", "-            final URL[] urls = buildClasspath( canonFile, extensions );", "-            classLoader = new URLClassLoader( urls, Thread.currentThread().getContextClassLoader() );", "-            m_fileDeployers.put( canonFile, classLoader );", "-        }", "-        return classLoader;", "+     */", "+    public TypeDefinition createTypeDefinition( final Configuration configuration )", "+        throws ConfigurationException", "+        final String converterShorthand = m_roleManager.getNameForRole( Converter.ROLE );", "+        final String roleShorthand = configuration.getName();", "+        if( roleShorthand.equals( converterShorthand ) )", "+            // A converter definition", "+            final String className = configuration.getAttribute( \"classname\" );", "+            final String source = configuration.getAttribute( \"source\" );", "+            final String destination = configuration.getAttribute( \"destination\" );", "+            return new ConverterDefinition( className, source, destination );", "+        else", "+        {", "+            // A type definition", "+            final String typeName = configuration.getAttribute( \"name\" );", "+            final String className = configuration.getAttribute( \"classname\" );", "+            return new TypeDefinition( typeName, roleShorthand, className );", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f8857900ba719dd1d813e89e6e1cd11", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/scm/AntStarTeamCheckOut.java", "commitBeforeChange": "e8f24b5abbcc24006eac5cea23cff74791fbea07", "commitAfterChange": "968b951f03e69fe19ec5685fe6f8629d10ef21dc", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private java.io.File getLocalFile(String tgt, String itemname)", "signatureAfterChange": "     private java.io.File calcTargetFolder(View v, Folder rootSourceFolder)", "diff": ["+     */", "+    private java.io.File calcTargetFolder(View v, Folder rootSourceFolder)", "+    {", "+\tjava.io.File root = new java.io.File(getTargetFolder());", "+        if (!getTargetFolderAbsolute())", "+\t{", "+\t    // Create a variable dir that contains the name of", "+\t    // the StarTeam folder that is the root folder in this view.", "+\t    // Get the default path to the current view.", "+            String defaultPath = v.getDefaultPath();", "+", "+\t    // convert whatever separator char is in starteam to that of the target system.", "+\t    defaultPath=defaultPath.replace('/', java.io.File.separatorChar);", "+\t    defaultPath=defaultPath.replace('\\\\', java.io.File.separatorChar);", "+", "+\t    java.io.File dir = new java.io.File(defaultPath);", "+\t    String dirName = dir.getName();", "+", "+            // If it ends with separator then strip it off", "+\t    if (dirName.endsWith(delim))", "+\t    {", "+\t\tdirName = dirName.substring(0, dirName.length()-1);", "+\t    }", "+", "+\t    // Replace the projectName in the file's absolute path to the viewName.", "+\t    // This makes the root target of a checkout operation equal to:", "+\t    // targetFolder + dirName", "+\t    StringTokenizer pathTokenizer = new StringTokenizer(rootSourceFolder.getFolderHierarchy(), delim);", "+\t    String currentToken = null;", "+\t    boolean foundRoot = false;", "+\t    while (pathTokenizer.hasMoreTokens())", "+\t    {", "+\t\tcurrentToken = pathTokenizer.nextToken();", "+\t\tif (currentToken.equals(getProjectName()) && !foundRoot)", "+\t\t{", "+\t\t    currentToken = dirName;", "+\t\t    foundRoot = true;    // only want to do this the first time", "+\t\t}", "+\t\troot = new java.io.File(root, currentToken);", "+\t    }", "+\t}", "+", "+        return root;", "+    }", "-     */", "-    private java.io.File getLocalFile(String tgt, String itemname) {", "-        java.io.File tgtFolder = new java.io.File(tgt);", "-        return new java.io.File(tgtFolder,itemname);", "-    }"]}]}
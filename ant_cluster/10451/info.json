{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3e6871090220c70a411d21450b9ea6f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53dc63f764d443fcb1ac9387f8c398e2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/AntStructure.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "         public void printElementDecl(PrintWriter out, Project p,                                      String name, Class<?> element)", "signatureAfterChange": "         @Override \t\tpublic void printElementDecl(final PrintWriter out, final Project p,                                      final String name, final Class<?> element)", "diff": ["-        public void printElementDecl(PrintWriter out, Project p,", "-                                     String name, Class<?> element) {", "+        @Override", "+\t\tpublic void printElementDecl(final PrintWriter out, final Project p,", "+                                     final String name, final Class<?> element) {", "-            } catch (Throwable t) {", "+            } catch (final Throwable t) {", "-            Vector<String> v = new Vector<String>();", "+            final Vector<String> v = new Vector<String>();", "-                String attrName = (String) e.nextElement();", "+                final String attrName = e.nextElement();", "-                Class<?> type = ih.getAttributeType(attrName);", "+                final Class<?> type = ih.getAttributeType(attrName);", "-                        EnumeratedAttribute ea =", "+                        final EnumeratedAttribute ea =", "-                        String[] values = ea.getValues();", "+                        final String[] values = ea.getValues();", "-                    } catch (InstantiationException ie) {", "+                    } catch (final InstantiationException ie) {", "-                    } catch (IllegalAccessException ie) {", "+                    } catch (final IllegalAccessException ie) {", "-                        Object[] values = (Object[]) type.getMethod(\"values\", (Class[])  null)", "+                        final Object[] values = (Object[]) type.getMethod(\"values\", (Class[])  null)", "-                    } catch (Exception x) {", "+                    } catch (final Exception x) {", "-                String nestedName = (String) v.elementAt(i);", "+                final String nestedName = v.elementAt(i);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b59620a2c3055d5fb75cb5c25ea19c9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     @Override \tpublic void execute() throws BuildException", "diff": ["-    public void execute() throws BuildException {", "-        File savedFile = file; // may be altered in validateAttributes", "-        File savedDestFile = destFile;", "-        File savedDestDir = destDir;", "+    @Override", "+\tpublic void execute() throws BuildException {", "+        final File savedFile = file; // may be altered in validateAttributes", "+        final File savedDestFile = destFile;", "+        final File savedDestDir = destDir;", "-            savedRc = (ResourceCollection) rcs.elementAt(0);", "+            savedRc = rcs.elementAt(0);", "-            } catch (BuildException e) {", "+            } catch (final BuildException e) {", "-            HashMap<File, List<String>> filesByBasedir = new HashMap<File, List<String>>();", "-            HashMap<File, List<String>> dirsByBasedir = new HashMap<File, List<String>>();", "-            HashSet<File> baseDirs = new HashSet<File>();", "-            ArrayList<Resource> nonFileResources = new ArrayList<Resource>();", "+            final HashMap<File, List<String>> filesByBasedir = new HashMap<File, List<String>>();", "+            final HashMap<File, List<String>> dirsByBasedir = new HashMap<File, List<String>>();", "+            final HashSet<File> baseDirs = new HashSet<File>();", "+            final ArrayList<Resource> nonFileResources = new ArrayList<Resource>();", "-                ResourceCollection rc = rcs.elementAt(i);", "+                final ResourceCollection rc = rcs.elementAt(i);", "-                    FileSet fs = (FileSet) rc;", "+                    final FileSet fs = (FileSet) rc;", "-                    } catch (BuildException e) {", "+                    } catch (final BuildException e) {", "-                    File fromDir = fs.getDir(getProject());", "+                    final File fromDir = fs.getDir(getProject());", "-                    String[] srcFiles = ds.getIncludedFiles();", "-                    String[] srcDirs = ds.getIncludedDirectories();", "+                    final String[] srcFiles = ds.getIncludedFiles();", "+                    final String[] srcDirs = ds.getIncludedDirectories();", "-                    for (Resource r : rc) {", "+                    for (final Resource r : rc) {", "-                            String message = \"Warning: Could not find resource \"", "+                            final String message = \"Warning: Could not find resource \"", "-                        FileProvider fp = r.as(FileProvider.class);", "+                        final FileProvider fp = r.as(FileProvider.class);", "-                            FileResource fr = ResourceUtils.asFileResource(fp);", "+                            final FileResource fr = ResourceUtils.asFileResource(fp);", "-            } catch (BuildException e) {", "+            } catch (final BuildException e) {", "-                Resource[] nonFiles =", "-                    (Resource[]) nonFileResources.toArray(new Resource[nonFileResources.size()]);", "+                final Resource[] nonFiles =", "+                    nonFileResources.toArray(new Resource[nonFileResources.size()]);", "-                Map<Resource, String[]> map = scan(nonFiles, destDir);", "+                final Map<Resource, String[]> map = scan(nonFiles, destDir);", "-                            new String[] { destFile.getAbsolutePath() });", "+                            new String[] {destFile.getAbsolutePath()});", "-                } catch (BuildException e) {", "+                } catch (final BuildException e) {"]}]}
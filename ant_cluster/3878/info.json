{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "033bcd9401ea32cfab3a6b7582f87d83", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "049e04346f7d73b3ab0da1829ecdecc9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecTask.java", "commitBeforeChange": "2429a99dd695f4832b9321b72835944922fc176d", "commitAfterChange": "bd8601a5a3ba0794ff75168fd65a488a5a4939f4", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": "     protected String resolveExecutable(String exec)", "signatureAfterChange": "     protected String resolveExecutable(String exec, boolean searchPath)", "diff": ["-    protected String resolveExecutable(String exec) {", "+    protected String resolveExecutable(String exec, boolean searchPath) {", "+        FileUtils fileUtils = FileUtils.newFileUtils();", "-            FileUtils fileUtils = FileUtils.newFileUtils();", "+        if (searchPath) {", "+            Vector env = Execute.getProcEnvironment();", "+            Enumeration e = env.elements();", "+            Path p = null;", "+            while (e.hasMoreElements()) {", "+                String line = (String) e.nextElement();", "+                if (line.startsWith(\"PATH=\") || line.startsWith(\"Path=\")) {", "+                    p = new Path(getProject(), line.substring(5));", "+                    break;", "+                }", "+            }", "+", "+            if (p != null) {", "+                String[] dirs = p.list();", "+                for (int i = 0; i < dirs.length; i++) {", "+                    executableFile = fileUtils.resolveFile(new File(dirs[i]),", "+                                                           exec);", "+                    if (executableFile.exists()) {", "+                        return executableFile.getAbsolutePath();", "+                    }", "+                }", "+            }", "+        }", "+", "+        // searchPath is false, or no PATH or not found - keep our", "+        // fingers crossed."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcb214d184a7864e5cfe3c90e1dc710a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/EjbcHelper.java", "commitBeforeChange": "403c32e5c5322f65e184f6d21496d0295d74f6e1", "commitAfterChange": "655df7f9e198a141defc9dcfb45f7f14cd7749f8", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void regenerateSupportClasses(File descriptorFile) throws Exception", "signatureAfterChange": "     private void regenerateSupportClasses(File descriptorFile)", "diff": ["-    private void regenerateSupportClasses(File descriptorFile) throws Exception {", "-        // create a Java task to do the rebuild", "+    private void regenerateSupportClasses(File descriptorFile) {", "+        Project project = ejbcTask.getProject();", "+        String javaHome = System.getProperty(\"java.home\");", "-        String[] args = {\"-noexit\",", "-                         \"-keepgenerated\",", "-                         \"-d\", generatedFilesDirectory.getPath(),", "-                         descriptorFile.getPath()};", "+        String compiler = project.getProperty(\"build.compiler\");", "+        String[] args = null;", "+        if (compiler.equalsIgnoreCase(\"jikes\")) {", "+            Path execClassPath = new Path(project);", "+            if (Project.getJavaVersion() == Project.JAVA_1_1) {", "+                execClassPath.addExisting(new Path(project, System.getProperty(\"java.home\")", "+                                          + \"/lib/classes.zip\"));", "+            } else {", "+                execClassPath.addExisting(new Path(project,", "+                                                System.getProperty(\"java.home\")", "+                                                + \"/lib/rt.jar\"));", "+                // Just keep the old version as well and let addExisting", "+                // sort it out.", "+                execClassPath.addExisting(new Path(project,", "+                                                System.getProperty(\"java.home\")", "+                                                + \"/jre/lib/rt.jar\"));", "+            }", "+            execClassPath.append(classpath);", "+    ", "+            args = new String[] {\"-noexit\",", "+                                 \"-keepgenerated\",", "+                                 \"-compiler\", \"Jikes\",", "+                                 \"-d\", generatedFilesDirectory.getPath(),", "+                                 \"-classpath\", execClassPath.toString(), ", "+                                 descriptorFile.getPath()};", "+        }", "+        else {            ", "+            args = new String[]{\"-noexit\",", "+                                \"-keepgenerated\",", "+                                \"-d\", generatedFilesDirectory.getPath(),", "+                                \"-classpath\", classpath.toString(), ", "+                                descriptorFile.getPath()};", "+        }", "+                                       ", "-            // run with no exit for better reporting", "-            String[] newArgs = {\"-keepgenerated\",", "-                         \"-d\", generatedFilesDirectory.getPath(),", "-                         descriptorFile.getPath()};", "-            weblogic.ejbc.main(newArgs);", "+            e.printStackTrace();", "+            throw new BuildException(e);"]}]}
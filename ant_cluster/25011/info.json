{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "329034ac5303033443baa4407f45d878", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b0145be111ffc7a39ef18c0a57ec1e5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Classloader.java", "commitBeforeChange": "4b472fb764166b97cc0869e5e37df1abcbc83515", "commitAfterChange": "359855b65f028b1f5939264810934e7d09f65648", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "       public void execute()", "signatureAfterChange": "       public void execute()", "diff": ["-                // Construct a class loader", "+                // Construct a new class loader", "+                // TODO: allow user to request the system or no parent", "+                if( name==null ) {", "+                    // The core loader must be reverse", "+                    //reverse=true;", "+                }", "+                project.log(\"Setting parent loader \" + name + \" \" +", "+                        parent + \" \" + parentFirst, Project.MSG_DEBUG);", "+", "+                // The param is \"parentFirst\"", "-                        project, classpath, reverse );", "+                        project, classpath, parentFirst );", "+", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4f5d247e80372be9905a5829dff2b01", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/condition/HasMethod.java", "commitBeforeChange": "11af84f764212f34d8f2a8efa4d381f08e3b7339", "commitAfterChange": "171a1f35e390455d105aaf43370c0475711a74c3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private Class loadClass(String classname)", "signatureAfterChange": "     private Class loadClass(String classname)", "diff": ["-                    // class found but restricted name; this is", "-                    // actually the case we're looking for in JDK 1.3+,", "-                    // so catch the exception and return", "-                    return null;", "+                    // class found but restricted name", "+                    throw new BuildException(\"class \\\"\" + classname", "+                                             + \"\\\" was found but a\"", "+                                             + \" SecurityException has been\"", "+                                             + \" raised while loading it\",", "+                                             se);"]}]}
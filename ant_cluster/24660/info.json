{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "377fa48112fe727e76e4d0ed4d558e75", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07c71b309ee228c4f46add891398546b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "69d85ab035ac0f844d21d1b33e7f508820942277", "commitAfterChange": "59c41d005e84e1f673b5b74d6d84aeb82219ed23", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "     private AttributeSetter createAttributeSetter(final Method m,                                                   Class arg,                                                   final String attrName)", "signatureAfterChange": "     private AttributeSetter createAttributeSetter(final Method m,                                                   Class arg,                                                   final String attrName)", "diff": ["+        // resolve Resources/FileProviders as FileResources relative to Project:", "+        if (Resource.class.equals(reflectedArg) || FileProvider.class.equals(reflectedArg)) {", "+            return new AttributeSetter(m, arg) {", "+                void set(Project p, Object parent, String value) throws InvocationTargetException,", "+                        IllegalAccessException, BuildException {", "+                    m.invoke(parent, new Object[] { new FileResource(p, p.resolveFile(value)) });", "+                };", "+            };", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bc72640d9c56241adea59ff0ef7eb0f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "3d0a8d3ae3d72020600766c65f272ed0a9609833", "commitAfterChange": "f4ee8dcc26246fb21e1548605a4cfa2182c104b7", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "     private AttributeSetter createAttributeSetter(final Method m,                                                   Class arg,                                                   final String attrName)", "signatureAfterChange": "     private AttributeSetter createAttributeSetter(final Method m,                                                   Class arg,                                                   final String attrName)", "diff": ["+        // Object.class - it gets handled differently by AttributeSetter", "+        if (java.lang.Object.class == reflectedArg) {", "+            return new AttributeSetter(m, arg) {", "+                public void set(Project p, Object parent, String value)", "+                        throws InvocationTargetException,", "+                    IllegalAccessException {", "+                    throw new BuildException(", "+                        \"Internal ant problem - this should not get called\");", "+                }", "+            };", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7947ffa67f20545aa95d944d8b295e1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "9b79c03c8acbd5b4cd2940b8f44b3f4d4ce13bba", "commitAfterChange": "abd5987913a0a10ee5c1fbbe6232c468986d889b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private AttributeSetter createAttributeSetter(final Method m,                                                   final Class arg)", "signatureAfterChange": "     private AttributeSetter createAttributeSetter(final Method m,                                                   final Class arg)", "diff": ["+        // resolve relative paths through Project", "+        } else if (org.apache.tools.ant.types.Path.class.equals(arg)) {", "+            return new AttributeSetter() {", "+                    public void set(Project p, Object parent, String value) ", "+                        throws InvocationTargetException, IllegalAccessException {", "+                        m.invoke(parent, new Path[] {new Path(p, value)});", "+                    }", "+", "+                };", "+"]}]}
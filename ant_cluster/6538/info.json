{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "532f4e76ad1538ac3c07a4c1fd1e6f05", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f214b5ca9574af04abad2940536923e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/helper/ProjectHelper2.java", "commitBeforeChange": "8016bd8d2869a25c7736b6e0b93ac9d50376b77b", "commitAfterChange": "13941782fe873cc353e3dd1f25649a401d826952", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void parse(Project project, Object source) throws BuildException", "signatureAfterChange": "     public void parse(Project project, Object source) throws BuildException", "diff": ["+", "+            // resolve extensionOf attributes", "+            for (Iterator i = getExtensionStack().iterator(); i.hasNext(); ) {", "+                String[] extensionInfo = (String[]) i.next();", "+                String tgName = extensionInfo[0];", "+                String name = extensionInfo[1];", "+                Hashtable projectTargets = project.getTargets();", "+                if (!projectTargets.containsKey(tgName)) {", "+                    throw new BuildException(\"can't add target \"", "+                                             + name + \" to extension-point \"", "+                                             + tgName", "+                                             + \" because the extension-point\"", "+                                             + \" is unknown.\");", "+                }", "+                Target t = (Target) projectTargets.get(tgName);", "+                if (!(t instanceof ExtensionPoint)) {", "+                    throw new BuildException(\"referenced target \"", "+                                             + tgName", "+                                             + \" is not an extension-point\");", "+                }", "+                t.addDependency(name);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "126082beb79e7178fb3751613d09c68f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java", "commitBeforeChange": "f73917168fc78f993f09f5f3eccbc4d663018c40", "commitAfterChange": "b8c50342cacdaa5bc7e3e4e72eb8351da5824716", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     protected int executeExternalCompile( String[] args, int firstFileName )", "signatureAfterChange": "     protected int executeExternalCompile( String[] args, int firstFileName )", "diff": ["-                        out.println( args[i] );", "+                        out.println( args[ i ] );", "-                    commandArray = new String[firstFileName + 1];", "+                    commandArray = new String[ firstFileName + 1 ];", "-                    commandArray[firstFileName] = \"@\" + tmpFile.getAbsolutePath();", "+                    commandArray[ firstFileName ] = \"@\" + tmpFile.getAbsolutePath();", "-                    throw new BuildException( \"Error creating temporary file\", e );", "+                    throw new TaskException( \"Error creating temporary file\", e );", "-                        {}", "+                        {", "+                        }", "-                    Project.MSG_INFO,", "-                    Project.MSG_WARN ) );", "+                                                                 Project.MSG_INFO,", "+                                                                 Project.MSG_WARN ) );", "-                throw new BuildException( \"Error running \" + args[0]", "-                     + \" compiler\", e );", "+                throw new TaskException( \"Error running \" + args[ 0 ]", "+                                         + \" compiler\", e );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25d3fdcaf338d15b32bfd52f924008c9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java", "commitBeforeChange": "f73917168fc78f993f09f5f3eccbc4d663018c40", "commitAfterChange": "b8c50342cacdaa5bc7e3e4e72eb8351da5824716", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     protected int executeExternalCompile( String[] args, int firstFileName )", "signatureAfterChange": "     protected int executeExternalCompile( String[] args, int firstFileName )", "diff": ["-                        out.println( args[i] );", "+                        out.println( args[ i ] );", "-                    commandArray = new String[firstFileName + 1];", "+                    commandArray = new String[ firstFileName + 1 ];", "-                    commandArray[firstFileName] = \"@\" + tmpFile.getAbsolutePath();", "+                    commandArray[ firstFileName ] = \"@\" + tmpFile.getAbsolutePath();", "-                    throw new BuildException( \"Error creating temporary file\", e );", "+                    throw new TaskException( \"Error creating temporary file\", e );", "-                        {}", "+                        {", "+                        }", "-                    Project.MSG_INFO,", "-                    Project.MSG_WARN ) );", "+                                                                 Project.MSG_INFO,", "+                                                                 Project.MSG_WARN ) );", "-                throw new BuildException( \"Error running \" + args[0]", "-                     + \" compiler\", e );", "+                throw new TaskException( \"Error running \" + args[ 0 ]", "+                                         + \" compiler\", e );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd2d969a00d7e9dc80f32fa3876d410e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ResourceUtils.java", "commitBeforeChange": "3e12dead7d43c7883742264d24a9ed013c06a99d", "commitAfterChange": "06dc6c0eea11b763df082d9e0e929fd250b13ca1", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public static void copyResource(Resource source, Resource dest,                             FilterSetCollection filters, Vector filterChains,                             boolean overwrite, boolean preserveLastModified,                                     boolean append,                                     String inputEncoding, String outputEncoding,                                     Project project, boolean force)         throws IOException", "signatureAfterChange": "     public static void copyResource(Resource source, Resource dest,                             FilterSetCollection filters, Vector filterChains,                             boolean overwrite, boolean preserveLastModified,                                     boolean append,                                     String inputEncoding, String outputEncoding,                                     Project project, boolean force)         throws IOException", "diff": ["-", "+        String effectiveInputEncoding = null;", "+        if (source instanceof StringResource) {", "+             effectiveInputEncoding = ((StringResource) source).getEncoding();", "+        } else {", "+            effectiveInputEncoding = inputEncoding;", "+        }", "-                if (inputEncoding == null) {", "+                if (effectiveInputEncoding == null) {", "-                                                inputEncoding);", "+                                                effectiveInputEncoding);", "-                   || (inputEncoding != null", "-                       && !inputEncoding.equals(outputEncoding))", "-                   || (inputEncoding == null && outputEncoding != null)) {", "+                   || (effectiveInputEncoding != null", "+                       && !effectiveInputEncoding.equals(outputEncoding))", "+                   || (effectiveInputEncoding == null && outputEncoding != null)) {", "-                if (inputEncoding == null) {", "+                if (effectiveInputEncoding == null) {", "-                                                inputEncoding);", "+                                                effectiveInputEncoding);"]}]}
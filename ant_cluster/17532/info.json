{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0cb348e08bbf5d0b179f35e204029257", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27f2f01f6eea4f94ab46d4f2d79da60c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "ee9453f4f459494b616f35d57b58b73773e534dd", "commitAfterChange": "edb71783adeffc29a56df203f97b5ac0e4566a5d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "          private static void runBuild()", "signatureAfterChange": "      private static void runBuild()", "diff": ["-    ", "+", "-        ", "-\tlong startTime = System.currentTimeMillis();", "-\tif (msgOutputLevel >= Project.MSG_INFO) {", "-\t    System.out.println(\"Buildfile: \" + buildFile);", "-\t}", "-        ", "-\tProject project = new Project();", "-\tproject.setOutputLevel(msgOutputLevel);", "-\t// set user-define properties", "+        long startTime = System.currentTimeMillis();", "+        if (msgOutputLevel >= Project.MSG_INFO) {", "+            System.out.println(\"Buildfile: \" + buildFile);", "+        }", "+", "+        Project project = new Project();", "+        project.setOutputLevel(msgOutputLevel);", "+", "+        // set user-define properties", "-        ", "-\ttry {", "-\t    ProjectHelper.configureProject(project, buildFile);", "-\t} catch (BuildException be) {", "-\t    String msg = \"BUILD CONFIG ERROR: \";", "-\t    System.out.println(msg + be.getMessage());", "-\t    be.printStackTrace();", "-\t    exit(1);", "-\t}", "+        try {", "+            ProjectHelper.configureProject(project, buildFile);", "+        } catch (BuildException be) {", "+            String msg = \"BUILD CONFIG ERROR: \";", "+            System.out.println(msg + be.getMessage());", "+            be.printStackTrace();", "+            System.exit(1);", "+        }", "-        ", "-\tif (targetCount == 0) {", "-\t    String target = project.getDefaultTarget();", "-\t    targets[0]=target;", "-\t    targetCount=1;", "-\t}", "-", "-        // set the security manager", "-    securityManager = new AntSecurityManager();", "-    System.setSecurityManager(securityManager);", "+        if (targets.size() == 0) {", "+            targets.addElement(project.getDefaultTarget());", "+        }", "-\ttry {", "-\t    for(int i=0; i< targetCount; i++) ", "-\t\tproject.executeTarget(targets[i]);", "-\t} catch (BuildException be) {", "-\t    String msg = \"BUILD FATAL ERROR: \";", "-\t    System.out.println(msg + be.getMessage());", "-        if (msgOutputLevel > Project.MSG_INFO) {", "-            be.printStackTrace();", "+        try {", "+            Enumeration en = targets.elements();", "+            while (en.hasMoreElements()) {", "+                project.executeTarget((String) en.nextElement());", "+            }", "+        } catch (BuildException be) {", "+            String msg = \"BUILD FATAL ERROR: \";", "+            System.out.println(msg + be.getMessage());", "+            if (msgOutputLevel > Project.MSG_INFO) {", "+                be.printStackTrace();", "+            }", "+            System.exit(1);", "-        exit(1);", "-\t}", "-        // track our stop time and let the user know how long things", "-        // took.", "-        ", "-\tlong finishTime = System.currentTimeMillis();", "-\tlong elapsedTime = finishTime - startTime;", "-\tif (msgOutputLevel >= Project.MSG_INFO) {", "-\t    System.out.println(\"Completed in \" + (elapsedTime/1000)", "-\t\t\t       + \" seconds\");", "-\t}", "+        // track our stop time and let the user know how long things took.", "+        long finishTime = System.currentTimeMillis();", "+        long elapsedTime = finishTime - startTime;", "+        if (msgOutputLevel >= Project.MSG_INFO) {", "+            System.out.println(\"Completed in \" + (elapsedTime/1000)", "+                               + \" seconds\");", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48804c81383cb1360789a70f6d75b51e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "d977d4b58f8e6e323060aeb695e45749822187d4", "commitAfterChange": "b417973d391382a96e26e6c50751b9b24f85b239", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private void runBuild() throws BuildException", "signatureAfterChange": "      private void runBuild() throws BuildException", "diff": ["-        ", "+", "-        long startTime = System.currentTimeMillis();", "-        project.init();", "-        // set user-define properties", "-        Enumeration e = definedProps.keys();", "-        while (e.hasMoreElements()) {", "-            String arg = (String)e.nextElement();", "-            String value = (String)definedProps.get(arg);", "-            project.setUserProperty(arg, value);", "-        }", "+        Throwable error = null;", "-        project.setUserProperty( \"ant.file\" , buildFile.getAbsolutePath() );", "-", "-        // first use the ProjectHelper to create the project object", "-        // from the given build file.", "+            project.init();", "+", "+            // set user-define properties", "+            Enumeration e = definedProps.keys();", "+            while (e.hasMoreElements()) {", "+                String arg = (String)e.nextElement();", "+                String value = (String)definedProps.get(arg);", "+                project.setUserProperty(arg, value);", "+            }", "+", "+            project.setUserProperty( \"ant.file\" , buildFile.getAbsolutePath() );", "+", "+            // first use the ProjectHelper to create the project object", "+            // from the given build file.", "-        } catch (BuildException be) {", "-            System.out.println(\"\\nBUILD CONFIG ERROR\\n\");", "-            System.out.println(be.getMessage());", "-            if (be.getException() == null) {", "-                System.out.println(be.toString());", "-            } else {", "-                be.getException().printStackTrace();", "-\t    }", "-\t    throw be;", "-        }", "-        // make sure that we have a target to execute", "-        if (targets.size() == 0) {", "-            targets.addElement(project.getDefaultTarget());", "-        }", "-", "-        // actually do some work", "-        try {", "-            project.executeTargets(targets);", "-        } catch (BuildException be) {", "-            String msg = \"\\nBUILD FATAL ERROR\\n\\n\";", "-            System.out.println(msg + be.toString());", "-            if (msgOutputLevel > Project.MSG_INFO) {", "-                be.printStackTrace();", "+            // make sure that we have a target to execute", "+            if (targets.size() == 0) {", "+                targets.addElement(project.getDefaultTarget());", "-            throw be;", "-        }", "-        // track our stop time and let the user know how long things took.", "-        long finishTime = System.currentTimeMillis();", "-        long elapsedTime = finishTime - startTime;", "-        if (msgOutputLevel >= Project.MSG_INFO) {", "-            System.out.println(\"Completed in \" + (elapsedTime/1000)", "-                               + \" seconds\");", "+            // actually do some work", "+            project.executeTargets(targets);", "+        }", "+        catch(RuntimeException exc) {", "+            error = exc;", "+            throw exc;", "+        }", "+        catch(Error err) {", "+            error = err;", "+            throw err;", "+        }", "+        finally {", "+            project.fireBuildFinished(error);"]}]}
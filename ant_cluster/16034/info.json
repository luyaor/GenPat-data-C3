{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "451f5c2ae76f1b166c33253b872d3ba3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29418409f3998ad1b9ca33572ae71a2b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ReplaceRegExp.java", "commitBeforeChange": "3a912beff76f60fca0e92f3c9a2170c1bd5da28a", "commitAfterChange": "401473f8de76542db1ada7cfe12a5f7c1cc326d9", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        int options = 0;", "-", "-        if (flags.indexOf('g') != -1) {", "-            options |= Regexp.REPLACE_ALL;", "-        }", "-", "-        if (flags.indexOf('i') != -1) {", "-            options |= Regexp.MATCH_CASE_INSENSITIVE;", "-        }", "-", "-        if (flags.indexOf('m') != -1) {", "-            options |= Regexp.MATCH_MULTILINE;", "-        }", "-", "-        if (flags.indexOf('s') != -1) {", "-            options |= Regexp.MATCH_SINGLELINE;", "-        }", "+        int options = RegexpUtil.asOptions(flags);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40ae40b4ae7731e5180c13295ca35cb7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/TokenFilter.java", "commitBeforeChange": "3a912beff76f60fca0e92f3c9a2170c1bd5da28a", "commitAfterChange": "401473f8de76542db1ada7cfe12a5f7c1cc326d9", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "     public static int convertRegexOptions(String flags)", "signatureAfterChange": "     public static int convertRegexOptions(String flags)", "diff": ["-        if (flags == null) {", "-            return 0;", "-        }", "-        int options = 0;", "-        if (flags.indexOf('g') != -1) {", "-            options |= Regexp.REPLACE_ALL;", "-        }", "-        if (flags.indexOf('i') != -1) {", "-            options |= Regexp.MATCH_CASE_INSENSITIVE;", "-        }", "-        if (flags.indexOf('m') != -1) {", "-            options |= Regexp.MATCH_MULTILINE;", "-        }", "-        if (flags.indexOf('s') != -1) {", "-            options |= Regexp.MATCH_SINGLELINE;", "-        }", "-        return options;", "+        return RegexpUtil.asOptions(flags);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3bf2cdcdce3f08d8f07e52fef2cc6d3a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86f695f9696146edf1b7df61b2cba4de", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/zip/UTF8ZipFilesTest.java", "commitBeforeChange": "cbd20a77eba224b21654251583971e054729f006", "commitAfterChange": "752d64fa43db2172327771ba4d36bee3f2d3b49a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 10, "signatureBeforeChange": "      private static void createTestFile(File file, String encoding)         throws UnsupportedEncodingException, IOException", "signatureAfterChange": "      private static void createTestFile(File file, String encoding,                                        boolean withEFS,                                        boolean withExplicitUnicodeExtra)         throws UnsupportedEncodingException, IOException", "diff": ["-    private static void createTestFile(File file, String encoding)", "+    private static void createTestFile(File file, String encoding,", "+                                       boolean withEFS,", "+                                       boolean withExplicitUnicodeExtra)", "+", "+        ZipEncoding zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);", "+            zos.setUseLanguageEncodingFlag(withEFS);", "+            zos.setCreateUnicodeExtraFields(!withExplicitUnicodeExtra);", "-            if (!ZipEncodingHelper.canEncodeName(ze.getName(),", "-                                                 zos.getEncoding())) {", "+            if (withExplicitUnicodeExtra", "+                && !zipEncoding.canEncode(ze.getName())) {", "+", "+                ByteBuffer en = zipEncoding.encode(ze.getName());", "+", "-                                                           zos.getEncoding()));", "+                                                           en.array(),", "+                                                           en.arrayOffset(),", "+                                                           en.limit()));", "-            if (!ZipEncodingHelper.canEncodeName(ze.getName(),", "-                                                 zos.getEncoding())) {", "+            if (withExplicitUnicodeExtra", "+                && !zipEncoding.canEncode(ze.getName())) {", "+", "+                ByteBuffer en = zipEncoding.encode(ze.getName());", "+", "-                                                           zos.getEncoding()));", "+                                                           en.array(),", "+                                                           en.arrayOffset(),", "+                                                           en.limit()));", "-            if (!ZipEncodingHelper.canEncodeName(ze.getName(),", "-                                                 zos.getEncoding())) {", "+            if (withExplicitUnicodeExtra", "+                && !zipEncoding.canEncode(ze.getName())) {", "+", "+                ByteBuffer en = zipEncoding.encode(ze.getName());", "+", "-                                                           zos.getEncoding()));", "+                                                           en.array(),", "+                                                           en.arrayOffset(),", "+                                                           en.limit()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "babe61a278a7b186a25d86acdd12605c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "2907030ab0cfd24783426d24bf06f7bbee19995f", "commitAfterChange": "b879b27c7274e2a54ad6a6e2a886311cb51ce771", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 68, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        if (version)", "+        if (version && doclet == null)", "-        if (author)", "+        if (author && doclet == null)", "+            if (serialwarn)                     ", "+                argList.addElement(\"-serialwarn\");", "-                argList.addElement(\"-doclet\");", "-                argList.addElement(doclet);", "-            }", "-            if (docletpath != null) {", "-                argList.addElement(\"-docletpath\");", "-                argList.addElement(docletpath);", "-            }", "+                if (doclet.getName() == null) {", "+                    throw new BuildException(\"The doclet name must be specified.\");", "+                }", "+                else {                ", "+                    argList.addElement(\"-doclet\");", "+                    argList.addElement(doclet.getName());", "+                    if (doclet.getPath() != null) {", "+                        argList.addElement(\"-docletpath\");", "+                        argList.addElement(doclet.getPath());", "+                    }", "+                    for (Enumeration e = doclet.getParams(); e.hasMoreElements();) {", "+                        DocletParam param = (DocletParam)e.nextElement();", "+                        if (param.getName() == null) {", "+                            throw new BuildException(\"Doclet parameters must have a name\");", "+                        }", "+                        ", "+                        argList.addElement(param.getName());", "+                        if (param.getValue() != null) {", "+                            argList.addElement(param.getValue());", "+                        }", "+                    }                        ", "+                }", "+            } ", "+            if (charset != null) {", "+                argList.addElement(\"-charset\");", "+                argList.addElement(charset);", "+            }"]}]}
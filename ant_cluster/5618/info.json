{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ab1861608418e11049e9eeae36a788b5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "031b255b4608b926da709094eb23e2cb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XSLTProcess.java", "commitBeforeChange": "e69774d42d7bad164ee19b30e0ddaf964b79b2dc", "commitAfterChange": "6b5745a21d93054c9d1efb9b6782886ba115bf8d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void setProcessor(String processor) throws Exception", "signatureAfterChange": "     public void setProcessor(String processor) throws Exception", "diff": ["-\tif (processor.equals(\"xslp\")) {", "-            liaison = (XSLTLiaison) Class.forName(\"org.apache.tools.ant.taskdefs.optional.XslpLiaison\").newInstance();", "-\t} else if (processor.equals(\"xalan\")) {", "-            liaison = (XSLTLiaison) Class.forName(\"org.apache.tools.ant.taskdefs.optional.XalanLiaison\").newInstance();", "+        if (processor.equals(\"xslp\")) {", "+            final Class clazz = ", "+                Class.forName(\"org.apache.tools.ant.taskdefs.optional.XslpLiaison\");", "+            liaison = (XSLTLiaison) clazz.newInstance();", "+        } else if (processor.equals(\"xalan\")) {", "+            final Class clazz = ", "+                Class.forName(\"org.apache.tools.ant.taskdefs.optional.XalanLiaison\");", "+            liaison = (XSLTLiaison)clazz.newInstance();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "565eae79e2f745bdf619b4491279bfb0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/test/org/apache/myrmidon/components/property/test/AbstractPropertyResolverTestCase.java", "commitBeforeChange": "e2ec6a3988643fe6f3c8fabd5b8656e4209eaa1d", "commitAfterChange": "42c6021a9e42f49f50a3f4a170590d15a9b8c3db", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      protected void setUp() throws Exception", "signatureAfterChange": "      protected void setUp() throws Exception", "diff": ["-        m_context = new DefaultTaskContext( null, null, getLogger() );", "+        final DefaultPropertyStore store = new DefaultPropertyStore();", "+        final DefaultServiceManager serviceManager = new DefaultServiceManager();", "+        m_context = new DefaultTaskContext( serviceManager, getLogger(), store );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6974b26ed74dafbb6dbed2986d5685c8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/types/converters/StringToPathConverter.java", "commitBeforeChange": "6a20789293e6588a94560a11697fb59dd0d9338c", "commitAfterChange": "d319ab594b9d0b5a3a2ee264845172ca590496f3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected Object convert( Object original, Object context )         throws ConverterException", "signatureAfterChange": "     protected Object convert( final Object original, final Object context )         throws ConverterException", "diff": ["-    protected Object convert( Object original, Object context )", "+    protected Object convert( final Object original, final Object context )", "-        /*", "-        TaskContext taskContext = (TaskContext)context;", "-", "-        retval.setBaseDirectory( taskContext.getBaseDirectory() );", "-        */", "-        return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80fb174d6a00a08f8af02e0b8a88d861", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/test/org/apache/myrmidon/components/property/test/AbstractPropertyResolverTestCase.java", "commitBeforeChange": "6638f2ac2b2d797fe2789ea7cbcf235b7cf4ea5a", "commitAfterChange": "7eb8a34e54e5c7ff3241f4414e04cf3b623c3e07", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      protected void setUp() throws Exception", "signatureAfterChange": "      protected void setUp() throws Exception", "diff": ["-        m_store = new DefaultPropertyStore();", "-        m_store.setProperty( \"intProp\", new Integer( 333 ) );", "-        m_store.setProperty( \"stringProp\", \"String property\" );", "+        final PropertyStore store = new DefaultPropertyStore();", "+        m_context =", "+            new DefaultTaskContext( new DefaultServiceManager(), getLogger(), store );", "+", "+        m_context.setProperty( \"intProp\", new Integer( 333 ) );", "+        m_context.setProperty( \"stringProp\", \"String property\" );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87722118c84dd7cf11580b5adfb39b23", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "f19f07d6e4c72f241057ecfc32d80be21201bbf7", "commitAfterChange": "ca91f8cb7e4f2bfe1a191dea6126a32649af9565", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                    log(\"Not authorized - check \" + dest + \" for details\");", "-                    return;", "+                    String message=\"HTTP Authorization failure\";", "+                    if(ignoreErrors) {", "+                        log(message,Project.MSG_WARN);", "+                        return;", "+                    } else {", "+                        throw new BuildException(message);", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c648affb3755956899d67af2f14b6b5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/native2ascii/KaffeNative2Ascii.java", "commitBeforeChange": "0f25392ad69b81d390942ecba933aa5cbcbba5fe", "commitAfterChange": "8f4af96cada1a8c3e7397f40093b736e7a159348", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      protected boolean run(Commandline cmd, ProjectComponent log)         throws BuildException", "signatureAfterChange": "      protected boolean run(Commandline cmd, ProjectComponent log)         throws BuildException", "diff": ["-        cmd.setExecutable(\"kaffe.tools.native2ascii.Native2Ascii\");", "+        Class c = getN2aClass();", "+        if (c == null) {", "+            throw new BuildException(\"Couldn't load Kaffe's Native2Ascii\"", "+                                     + \" class\");", "+        }", "+", "+        cmd.setExecutable(c.getName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9263a09f33ac29321ed56b0376acbbab", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "f83f5c68c975f31a384cc24e94be4e5ebfa2da4d", "commitAfterChange": "f463bd2cab8b132695d8bf60c889212628eba281", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String inputEncoding, String outputEncoding,                          Project project)         throws IOException", "signatureAfterChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String inputEncoding, String outputEncoding,                          Project project)         throws IOException", "diff": ["-        if (overwrite || !destFile.exists() ||", "-            destFile.lastModified() < sourceFile.lastModified()) {", "+        if (overwrite || !destFile.exists()", "+            || destFile.lastModified() < sourceFile.lastModified()) {", "-                        in =", "-                            new BufferedReader(new InputStreamReader(", "-                                                                     new FileInputStream(sourceFile),", "-                                                                     inputEncoding));", "+                        InputStreamReader isr", "+                            = new InputStreamReader(new FileInputStream(sourceFile),", "+                                                    inputEncoding);", "+                        in = new BufferedReader(isr);", "-                        out =", "-                            new BufferedWriter(new OutputStreamWriter(", "-                                                                      new FileOutputStream(destFile),", "-                                                                      outputEncoding));", "+                        OutputStreamWriter osw", "+                            = new OutputStreamWriter(new FileOutputStream(destFile),", "+                                                     outputEncoding);", "+                        out = new BufferedWriter(osw);", "-                            // this should not happen, because the lines are returned with the end of line delimiter", "+                            // this should not happen, because the lines are", "+                            // returned with the end of line delimiter", "-                     char buffer[] = new char[1024*8];", "+                     char[] buffer = new char[1024 * 8];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a84d9fad7857bd0c0ecc026197a04441", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/test/org/apache/myrmidon/components/property/test/AbstractPropertyResolverTestCase.java", "commitBeforeChange": "e06736172f4319d8d75ef9c4cd2fd6322ab44b4e", "commitAfterChange": "0f1259d2f38c0a759f6d1cc89605baba43c5838f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      protected void setUp() throws Exception", "signatureAfterChange": "      protected void setUp() throws Exception", "diff": ["-        final DefaultPropertyStore store = new DefaultPropertyStore();", "-        final DefaultServiceManager serviceManager = new DefaultServiceManager();", "-        m_context = new DefaultTaskContext( serviceManager, getLogger(), store );", "-        m_context.setProperty( \"intProp\", new Integer( 333 ) );", "-        m_context.setProperty( \"stringProp\", \"String property\" );", "+        m_store = new DefaultPropertyStore();", "+        m_store.setProperty( \"intProp\", new Integer( 333 ) );", "+        m_store.setProperty( \"stringProp\", \"String property\" );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd9c4d52fef5f0bcbb306f9a35f0b31f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/interfaces/type/DefaultTypeFactory.java", "commitBeforeChange": "ff5193eb1a36e2653568e6ca524b4d58ddbc0c65", "commitAfterChange": "49e74b1e52dcf8aa320b2ad74ddda5172b4a1c88", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public Object create( final String name )         throws TypeException", "signatureAfterChange": "     public Object create( final String name )         throws TypeException", "diff": ["-", "-            return m_classLoader.loadClass( className ).newInstance();", "+            final ClassLoader classLoader = getClassLoader();", "+            final Class clazz = classLoader.loadClass( className );", "+            return clazz.newInstance();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d68441d223999f25fb939d0b04dbf03e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/junit/src/main/org/apache/tools/ant/taskdefs/optional/junit/remote/Server.java", "commitBeforeChange": "a8965dadded68e9618a8421f64433745011fc62d", "commitAfterChange": "cbf1a178e3f594dd79291e6de776141e55fc3eb7", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void cancel()", "signatureAfterChange": "     public void cancel()", "diff": ["-            writer.sendMessage(MessageIds.TEST_STOP);", "+            TestRunEvent evt = new TestRunEvent(new Integer(-1), TestRunEvent.RUN_STOP);", "+            messenger.writeEvent(evt);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2be639ea0bcaada7131afce69894be57", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73ab26643ae49ab61a276fcaea8cbfd9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "4b3e0ee2041826e51ec60af99e7bcca7024bf676", "commitAfterChange": "ed3fafb887fef0afbcd90eef7f263fef3bde95d9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void setReference( final ConfigurationState state,                                final String refName,                                final String unresolvedId,                                final Context context )         throws Exception", "signatureAfterChange": "     private void setReference( final ConfigurationState state,                                final String refName,                                final String unresolvedId,                                final Context context )         throws Exception", "diff": ["-        Object id = PropertyUtil.resolveProperty( unresolvedId, context, false );", "+        String id = context.resolveValue( unresolvedId ).toString();", "-        Object ref = null;", "-        try", "-        {", "-            ref = context.get( id );", "-        }", "-        catch( final ContextException e )", "+        Object ref = context.getProperty( id );", "+        if( ref == null )", "-            throw new ConfigurationException( message, e );", "+            throw new ConfigurationException( message );", "-        // Check the types", "+        // Convert the object, if necessary", "-            final String message = REZ.getString( \"mismatch-ref-types.error\", id, type.getName(), ref.getClass().getName() );", "-            throw new ConfigurationException( message );", "+            try", "+            {", "+                ref = m_converter.convert( type, ref, context );", "+            }", "+            catch( ConverterException e )", "+            {", "+                final String message = REZ.getString( \"mismatch-ref-types.error\", id, name );", "+                throw new ConfigurationException( message, e );", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfdd1c026d9b15ae29491781fdbb70c0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/SQLExecTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testDriverCaching()", "signatureAfterChange": "     @Test     public void testDriverCaching()", "diff": ["+    @Test", "+            fail(\"BuildException should have been thrown\");", "-            assertTrue(e.getCause().getMessage().indexOf(\"No suitable Driver\") != -1);", "+            assertContains(\"No suitable Driver\", e.getMessage());"]}]}
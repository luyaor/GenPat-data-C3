{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0901ecf469d0c95661fea128e917ebd2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c68d53a6d35b02ca028a3ef6dd29d30", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/RuntimeConfigurable.java", "commitBeforeChange": "84d14bfb72b481348097d71c76c1e47253a8660c", "commitAfterChange": "1038e813e3eccdf970c5a2a82d8b0286370f4270", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public synchronized void setAttribute(String name, String value)", "signatureAfterChange": "     public synchronized void setAttribute(String name, String value)", "diff": ["-            if (attributeNames == null) {", "-                attributeNames = new ArrayList();", "-                attributeMap = new HashMap();", "+            if (attributeMap == null) {", "+                attributeMap = new LinkedHashMap();", "-            if (name.equalsIgnoreCase(\"refid\")) {", "-                attributeNames.add(0, name);", "+            if (name.equalsIgnoreCase(\"refid\") && !attributeMap.isEmpty()) {", "+                LinkedHashMap newAttributeMap = new LinkedHashMap();", "+                newAttributeMap.put(name, value);", "+                newAttributeMap.putAll(attributeMap);", "+                attributeMap = newAttributeMap;", "-                attributeNames.add(name);", "+                attributeMap.put(name, value);", "-            attributeMap.put(name, value);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72d1f7cbb9ad8db116ee02a77ed24850", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/antlib/src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "6540a295cd786c80c28c14f6c544aa1d64ab3778", "commitAfterChange": "5cdfabc038e26f67080037ea0c7ad6ab284d821c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      private IntrospectionHelper(final Class bean)", "signatureAfterChange": "     private IntrospectionHelper(final Class bean)", "diff": ["+     */", "-        for (int i=0; i<methods.length; i++) {", "+        for (int i = 0; i < methods.length; i++) {", "-                && args.length == 1 &&", "-                (", "-                 (", "-                  \"setLocation\".equals(name) && org.apache.tools.ant.Location.class.equals(args[0])", "-                  ) || (", "-                   \"setTaskType\".equals(name) && java.lang.String.class.equals(args[0])", "-                  )", "-                 )) {", "+                 && args.length == 1 && isHiddenSetMethod(name, args[0])) {", "-//              if (org.apache.tools.ant.TaskContainer.class.isAssignableFrom(bean)", "-//                  && args.length == 1 && \"addTask\".equals(name)", "-//                  && org.apache.tools.ant.Task.class.equals(args[0])) {", "-//                  continue;", "-//              }", "+            if (org.apache.tools.ant.TaskContainer.class.isAssignableFrom(bean)", "+                && args.length == 1 && \"addTask\".equals(name)", "+                && org.apache.tools.ant.Task.class.equals(args[0])) {", "+                continue;", "+            }", "-                AttributeSetter as = createAttributeSetter(m, args[0]);", "+                AttributeSetter as = createAttributeSetter(m, args[0], propName);", "-                                throws InvocationTargetException, ", "-\t\t\t\t       IllegalAccessException, ", "-\t\t\t\t       InstantiationException {", "+                                throws InvocationTargetException, IllegalAccessException, InstantiationException {", "-                                throws InvocationTargetException, ", "-\t\t\t\t       IllegalAccessException, ", "-\t\t\t\t       InstantiationException {", "+                                throws InvocationTargetException, IllegalAccessException, InstantiationException {", "-                                throws InvocationTargetException, ", "-\t\t\t\t       IllegalAccessException, ", "-\t\t\t\t       InstantiationException {", "+                                throws InvocationTargetException, IllegalAccessException, InstantiationException {"]}]}
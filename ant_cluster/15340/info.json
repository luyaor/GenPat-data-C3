{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e6f1d7e51ff59e5977d0d0e5196c9994", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c751c77d5c0d0ff84252f8ecd7e3fa3b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "c4dee0afafcc57ede3e3d1e81d2d4a1455c484a4", "commitAfterChange": "f52a170159f6dc5beebe07bfb945cb5b3fa5290b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void setAttribute( final ObjectConfigurer configurer,                                final Object object,                                final String name,                                final String value,                                final Context context )         throws ConfigurationException", "signatureAfterChange": "     private void setAttribute( final ConfigurationState state,                                final String name,                                final String value,                                final Context context )         throws CascadingException", "diff": ["-    private void setAttribute( final ObjectConfigurer configurer,", "-                               final Object object,", "+    private void setAttribute( final ConfigurationState state,", "-        throws ConfigurationException", "+        throws CascadingException", "-        if( DEBUG )", "-        {", "-            final String message = REZ.getString( \"configure-attribute.notice\",", "-                                                  name,", "-                                                  value );", "-            getLogger().debug( message );", "-        }", "-", "-        if( name.endsWith( \"-ref\" ) )", "+        if( name.toLowerCase().endsWith( \"-ref\" ) )", "-            setReference( configurer, object, refName, value, context );", "+            setReference( state, refName, value, context );", "-            // Locate the configurer for this attribute", "-            final PropertyConfigurer propConfigurer = configurer.getProperty( name );", "-            if( null == propConfigurer )", "-            {", "-                final String message = REZ.getString( \"unknown-property.error\", name );", "-                throw new ConfigurationException( message );", "-            }", "-", "-            try", "-            {", "-                setValue( propConfigurer, object, value, context );", "-            }", "-            catch( final Exception e )", "-            {", "-                final String message = REZ.getString( \"bad-set-property.error\", name );", "-                throw new ConfigurationException( message, e );", "-            }", "+            final PropertyConfigurer propConfigurer =", "+                state.getConfigurer().getProperty( name );", "+            setValue( propConfigurer, state, value, context );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f73a6446850306c292a3b313686312b9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "99a9f194032b4185fc017d9bfe31e0419cc51f02", "commitAfterChange": "ced321c00be004a78c335295701169edf0dcb55f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void setAttribute( final ObjectConfigurer configurer,                                final Object object,                                final String name,                                final String value,                                final Context context )         throws ConfigurationException", "signatureAfterChange": "     private void setAttribute( final ObjectConfigurer configurer,                                final Object object,                                final String name,                                final String value,                                final Context context )         throws ConfigurationException", "diff": ["-        // Locate the setter for this attribute", "-        final AttributeSetter setter = configurer.getAttributeSetter( name );", "-        if( null == setter )", "+        if( name.endsWith( \"-ref\" ) )", "-            final String message = REZ.getString( \"unknown-attribute.error\", name );", "-            throw new ConfigurationException( message );", "+            // A reference", "+            final String refName = name.substring( 0, name.length() - 4 );", "+            setReference( configurer, object, refName, value, context );", "+        else", "+        {", "+            // Locate the configurer for this attribute", "+            final PropertyConfigurer propConfigurer = configurer.getProperty( name );", "+            if( null == propConfigurer )", "+            {", "+                final String message = REZ.getString( \"unknown-property.error\", name );", "+                throw new ConfigurationException( message );", "+            }", "-        // Set the value", "-        try", "-        {", "-            setValue( setter, object, value, context );", "-        }", "-        catch( final Exception e )", "-        {", "-            final String message = REZ.getString( \"bad-set-attribute.error\", name );", "-            throw new ConfigurationException( message, e );", "+            // Set the value", "+            try", "+            {", "+                setValue( propConfigurer, object, value, context );", "+            }", "+            catch( final Exception e )", "+            {", "+                final String message = REZ.getString( \"bad-set-property.error\", name );", "+                throw new ConfigurationException( message, e );", "+            }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7425e646bf0ecbc18f571c7aab8b63ef", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89d33138503da27a30e2bd91374a7a2b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/filterreaders/src/main/org/apache/tools/ant/taskdefs/LoadFile.java", "commitBeforeChange": "2986a1b266db0241341764c2ee3c240a45ac3cfd", "commitAfterChange": "e886871506743df400949c1c6c3e87820290119b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private final String processStream(Reader instream, final int size)         throws IOException", "signatureAfterChange": "     private final String processStream(final Reader inputReader, final int size)         throws BuildException, IOException", "diff": ["-    private final String processStream(Reader instream, final int size)", "-        throws IOException {", "+    private final String processStream(final Reader inputReader, final int size)", "+        throws BuildException, IOException {", "+        Reader instream = inputReader;", "-            final FilterReaderSet filterset = (FilterReaderSet) filterReaderSets.elementAt(i);", "+            final FilterReaderSet filterset =", "+                (FilterReaderSet) filterReaderSets.elementAt(i);", "-                final AntFilterReader fr = (AntFilterReader) filterReaders.elementAt(j);", "-                finalFilters.addElement(fr);", "+                final AntFilterReader afr =", "+                    (AntFilterReader) filterReaders.elementAt(j);", "+                finalFilters.addElement(afr);", "-                final AntFilterReader filter = (AntFilterReader) finalFilters.elementAt(i);", "-                final String clazz = filter.getClassName();", "-                if (clazz != null) {", "+                final AntFilterReader filter =", "+                    (AntFilterReader) finalFilters.elementAt(i);", "+                final String className = filter.getClassName();", "+                if (className != null) {", "-                        final Class c = Class.forName(clazz);", "-                        if (c != null) {", "-                            final Constructor[] constructors = c.getConstructors();", "+                        final Class clazz = Class.forName(className);", "+                        if (clazz != null) {", "+                            final Constructor[] constructors =", "+                                clazz.getConstructors();", "-                            instream = (Reader) constructors[0].newInstance(rdr);", "-                            if (Parameterizable.class.isAssignableFrom(c)) {", "+                            instream =", "+                                (Reader) constructors[0].newInstance(rdr);", "+                            if (Parameterizable.class.isAssignableFrom(clazz)) {", "-                                ((Parameterizable) instream).setParameters(params);", "+                                ((Parameterizable)", "+                                    instream).setParameters(params);", "-                        throw new BuildException(cnfe);", "+                        throw new BuildException(cnfe, location);", "-                        throw new BuildException(ie);", "+                        throw new BuildException(ie, location);", "-                        throw new BuildException(iae);", "+                        throw new BuildException(iae, location);", "-                        throw new BuildException(ite);", "+                        throw new BuildException(ite, location);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99bbaaf8e947225ce30cdc934beb9487", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/regexp/JakartaOroMatcher.java", "commitBeforeChange": "fcd6548344aa3f590435beff55530cfdb6983588", "commitAfterChange": "ffea0a9f7459b7c64148ae244b22e847bad9128b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public Vector getGroups(String argument)", "signatureAfterChange": "     public Vector getGroups(String input, int options)         throws BuildException", "diff": ["-    public Vector getGroups(String argument) {", "-        if (!matches(argument)) {", "+     */", "+    public Vector getGroups(String input, int options)", "+        throws BuildException", "+    {", "+        if (!matches(input, options)) {", "-        MatchResult mr = reg.getMatch();", "-        for (int i=0; i<mr.groups(); i++) {", "+        MatchResult mr = matcher.getMatch();", "+        int cnt = mr.groups();", "+        for (int i=0; i<cnt; i++) {"]}]}
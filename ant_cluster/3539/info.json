{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3fa6e4a566c3e13143cd72102a935cd1", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "525978dba9641e98ed27e3afc6a70ba2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "e854f481c9a76b41680eb0f605de524556b059ad", "commitAfterChange": "7a3448dcea316f454dd0ba470f8b0825504ae309", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      private IntrospectionHelper( final Class bean )", "signatureAfterChange": "      private IntrospectionHelper( final Class bean )         throws TaskException", "diff": ["+        throws TaskException", "-            final Method m = methods[i];", "+            final Method m = methods[ i ];", "-                 && args.length == 1 &&", "+                && args.length == 1 &&", "-                \"setLocation\".equals( name ) && org.apache.tools.ant.Location.class.equals( args[0] )", "-                 ) || (", "-                \"setTaskType\".equals( name ) && java.lang.String.class.equals( args[0] )", "-                 )", "-                 ) )", "+                \"setLocation\".equals( name ) && org.apache.tools.ant.Location.class.equals( args[ 0 ] )", "+                ) || (", "+                \"setTaskType\".equals( name ) && java.lang.String.class.equals( args[ 0 ] )", "+                )", "+                ) )", "-                 && args.length == 1 && \"addTask\".equals( name )", "-                 && org.apache.tools.ant.Task.class.equals( args[0] ) )", "+                && args.length == 1 && \"addTask\".equals( name )", "+                && org.apache.tools.ant.Task.class.equals( args[ 0 ] ) )", "-                 && java.lang.Void.TYPE.equals( returnType )", "-                 && args.length == 1", "-                 && java.lang.String.class.equals( args[0] ) )", "+                && java.lang.Void.TYPE.equals( returnType )", "+                && args.length == 1", "+                && java.lang.String.class.equals( args[ 0 ] ) )", "-                addText = methods[i];", "+                addText = methods[ i ];", "-                 && java.lang.Void.TYPE.equals( returnType )", "-                 && args.length == 1", "-                 && !args[0].isArray() )", "+                && java.lang.Void.TYPE.equals( returnType )", "+                && args.length == 1", "+                && !args[ 0 ].isArray() )", "-                    if( java.lang.String.class.equals( args[0] ) )", "+                    if( java.lang.String.class.equals( args[ 0 ] ) )", "-                AttributeSetter as = createAttributeSetter( m, args[0] );", "+                AttributeSetter as = createAttributeSetter( m, args[ 0 ] );", "-                    attributeTypes.put( propName, args[0] );", "+                    attributeTypes.put( propName, args[ 0 ] );", "-                 && !returnType.isArray()", "-                 && !returnType.isPrimitive()", "-                 && args.length == 0 )", "+                && !returnType.isArray()", "+                && !returnType.isPrimitive()", "+                && args.length == 0 )", "-                    new NestedCreator()", "-                    {", "+                                    new NestedCreator()", "+                                    {", "-                        public Object create( Object parent )", "-                            throws InvocationTargetException,", "-                            IllegalAccessException", "-                        {", "+                                        public Object create( Object parent )", "+                                            throws InvocationTargetException,", "+                                            IllegalAccessException", "+                                        {", "-                            return m.invoke( parent, new Object[]{} );", "-                        }", "+                                            return m.invoke( parent, new Object[]{} );", "+                                        }", "-                    } );", "+                                    } );", "-                 && java.lang.Void.TYPE.equals( returnType )", "-                 && args.length == 1", "-                 && !java.lang.String.class.equals( args[0] )", "-                 && !args[0].isArray()", "-                 && !args[0].isPrimitive() )", "+                && java.lang.Void.TYPE.equals( returnType )", "+                && args.length == 1", "+                && !java.lang.String.class.equals( args[ 0 ] )", "+                && !args[ 0 ].isArray()", "+                && !args[ 0 ].isPrimitive() )", "-                        args[0].getConstructor( new Class[]{} );", "+                        args[ 0 ].getConstructor( new Class[]{} );", "-                    nestedTypes.put( propName, args[0] );", "+                    nestedTypes.put( propName, args[ 0 ] );", "-                        new NestedCreator()", "-                        {", "+                                        new NestedCreator()", "+                                        {", "-                            public Object create( Object parent )", "-                                throws InvocationTargetException, IllegalAccessException, InstantiationException", "-                            {", "+                                            public Object create( Object parent )", "+                                                throws InvocationTargetException, IllegalAccessException, InstantiationException", "+                                            {", "-                                Object o = c.newInstance( new Object[]{} );", "-                                return o;", "-                            }", "+                                                Object o = c.newInstance( new Object[]{} );", "+                                                return o;", "+                                            }", "-                        } );", "+                                        } );", "-                        new NestedStorer()", "-                        {", "+                                       new NestedStorer()", "+                                       {", "-                            public void store( Object parent, Object child )", "-                                throws InvocationTargetException, IllegalAccessException, InstantiationException", "-                            {", "+                                           public void store( Object parent, Object child )", "+                                               throws InvocationTargetException, IllegalAccessException, InstantiationException", "+                                           {", "-                                m.invoke( parent, new Object[]{child} );", "-                            }", "+                                               m.invoke( parent, new Object[]{child} );", "+                                           }", "-                        } );", "+                                       } );", "-                 && java.lang.Void.TYPE.equals( returnType )", "-                 && args.length == 1", "-                 && !java.lang.String.class.equals( args[0] )", "-                 && !args[0].isArray()", "-                 && !args[0].isPrimitive() )", "+                && java.lang.Void.TYPE.equals( returnType )", "+                && args.length == 1", "+                && !java.lang.String.class.equals( args[ 0 ] )", "+                && !args[ 0 ].isArray()", "+                && !args[ 0 ].isPrimitive() )", "-                        args[0].getConstructor( new Class[]{} );", "+                        args[ 0 ].getConstructor( new Class[]{} );", "-                    nestedTypes.put( propName, args[0] );", "+                    nestedTypes.put( propName, args[ 0 ] );", "-                        new NestedCreator()", "-                        {", "+                                        new NestedCreator()", "+                                        {", "-                            public Object create( Object parent )", "-                                throws InvocationTargetException, IllegalAccessException, InstantiationException", "-                            {", "+                                            public Object create( Object parent )", "+                                                throws InvocationTargetException, IllegalAccessException, InstantiationException", "+                                            {", "-                                Object o = c.newInstance( new Object[]{} );", "-                                m.invoke( parent, new Object[]{o} );", "-                                return o;", "-                            }", "+                                                Object o = c.newInstance( new Object[]{} );", "+                                                m.invoke( parent, new Object[]{o} );", "+                                                return o;", "+                                            }", "-                        } );", "+                                        } );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c426252c652f6827665c780a3c4313a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "e854f481c9a76b41680eb0f605de524556b059ad", "commitAfterChange": "7a3448dcea316f454dd0ba470f8b0825504ae309", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      private IntrospectionHelper( final Class bean )", "signatureAfterChange": "      private IntrospectionHelper( final Class bean )         throws TaskException", "diff": ["+        throws TaskException", "-            final Method m = methods[i];", "+            final Method m = methods[ i ];", "-                 && args.length == 1 &&", "+                && args.length == 1 &&", "-                \"setLocation\".equals( name ) && org.apache.tools.ant.Location.class.equals( args[0] )", "-                 ) || (", "-                \"setTaskType\".equals( name ) && java.lang.String.class.equals( args[0] )", "-                 )", "-                 ) )", "+                \"setLocation\".equals( name ) && org.apache.tools.ant.Location.class.equals( args[ 0 ] )", "+                ) || (", "+                \"setTaskType\".equals( name ) && java.lang.String.class.equals( args[ 0 ] )", "+                )", "+                ) )", "-                 && args.length == 1 && \"addTask\".equals( name )", "-                 && org.apache.tools.ant.Task.class.equals( args[0] ) )", "+                && args.length == 1 && \"addTask\".equals( name )", "+                && org.apache.tools.ant.Task.class.equals( args[ 0 ] ) )", "-                 && java.lang.Void.TYPE.equals( returnType )", "-                 && args.length == 1", "-                 && java.lang.String.class.equals( args[0] ) )", "+                && java.lang.Void.TYPE.equals( returnType )", "+                && args.length == 1", "+                && java.lang.String.class.equals( args[ 0 ] ) )", "-                addText = methods[i];", "+                addText = methods[ i ];", "-                 && java.lang.Void.TYPE.equals( returnType )", "-                 && args.length == 1", "-                 && !args[0].isArray() )", "+                && java.lang.Void.TYPE.equals( returnType )", "+                && args.length == 1", "+                && !args[ 0 ].isArray() )", "-                    if( java.lang.String.class.equals( args[0] ) )", "+                    if( java.lang.String.class.equals( args[ 0 ] ) )", "-                AttributeSetter as = createAttributeSetter( m, args[0] );", "+                AttributeSetter as = createAttributeSetter( m, args[ 0 ] );", "-                    attributeTypes.put( propName, args[0] );", "+                    attributeTypes.put( propName, args[ 0 ] );", "-                 && !returnType.isArray()", "-                 && !returnType.isPrimitive()", "-                 && args.length == 0 )", "+                && !returnType.isArray()", "+                && !returnType.isPrimitive()", "+                && args.length == 0 )", "-                    new NestedCreator()", "-                    {", "+                                    new NestedCreator()", "+                                    {", "-                        public Object create( Object parent )", "-                            throws InvocationTargetException,", "-                            IllegalAccessException", "-                        {", "+                                        public Object create( Object parent )", "+                                            throws InvocationTargetException,", "+                                            IllegalAccessException", "+                                        {", "-                            return m.invoke( parent, new Object[]{} );", "-                        }", "+                                            return m.invoke( parent, new Object[]{} );", "+                                        }", "-                    } );", "+                                    } );", "-                 && java.lang.Void.TYPE.equals( returnType )", "-                 && args.length == 1", "-                 && !java.lang.String.class.equals( args[0] )", "-                 && !args[0].isArray()", "-                 && !args[0].isPrimitive() )", "+                && java.lang.Void.TYPE.equals( returnType )", "+                && args.length == 1", "+                && !java.lang.String.class.equals( args[ 0 ] )", "+                && !args[ 0 ].isArray()", "+                && !args[ 0 ].isPrimitive() )", "-                        args[0].getConstructor( new Class[]{} );", "+                        args[ 0 ].getConstructor( new Class[]{} );", "-                    nestedTypes.put( propName, args[0] );", "+                    nestedTypes.put( propName, args[ 0 ] );", "-                        new NestedCreator()", "-                        {", "+                                        new NestedCreator()", "+                                        {", "-                            public Object create( Object parent )", "-                                throws InvocationTargetException, IllegalAccessException, InstantiationException", "-                            {", "+                                            public Object create( Object parent )", "+                                                throws InvocationTargetException, IllegalAccessException, InstantiationException", "+                                            {", "-                                Object o = c.newInstance( new Object[]{} );", "-                                return o;", "-                            }", "+                                                Object o = c.newInstance( new Object[]{} );", "+                                                return o;", "+                                            }", "-                        } );", "+                                        } );", "-                        new NestedStorer()", "-                        {", "+                                       new NestedStorer()", "+                                       {", "-                            public void store( Object parent, Object child )", "-                                throws InvocationTargetException, IllegalAccessException, InstantiationException", "-                            {", "+                                           public void store( Object parent, Object child )", "+                                               throws InvocationTargetException, IllegalAccessException, InstantiationException", "+                                           {", "-                                m.invoke( parent, new Object[]{child} );", "-                            }", "+                                               m.invoke( parent, new Object[]{child} );", "+                                           }", "-                        } );", "+                                       } );", "-                 && java.lang.Void.TYPE.equals( returnType )", "-                 && args.length == 1", "-                 && !java.lang.String.class.equals( args[0] )", "-                 && !args[0].isArray()", "-                 && !args[0].isPrimitive() )", "+                && java.lang.Void.TYPE.equals( returnType )", "+                && args.length == 1", "+                && !java.lang.String.class.equals( args[ 0 ] )", "+                && !args[ 0 ].isArray()", "+                && !args[ 0 ].isPrimitive() )", "-                        args[0].getConstructor( new Class[]{} );", "+                        args[ 0 ].getConstructor( new Class[]{} );", "-                    nestedTypes.put( propName, args[0] );", "+                    nestedTypes.put( propName, args[ 0 ] );", "-                        new NestedCreator()", "-                        {", "+                                        new NestedCreator()", "+                                        {", "-                            public Object create( Object parent )", "-                                throws InvocationTargetException, IllegalAccessException, InstantiationException", "-                            {", "+                                            public Object create( Object parent )", "+                                                throws InvocationTargetException, IllegalAccessException, InstantiationException", "+                                            {", "-                                Object o = c.newInstance( new Object[]{} );", "-                                m.invoke( parent, new Object[]{o} );", "-                                return o;", "-                            }", "+                                                Object o = c.newInstance( new Object[]{} );", "+                                                m.invoke( parent, new Object[]{o} );", "+                                                return o;", "+                                            }", "-                        } );", "+                                        } );"]}]}
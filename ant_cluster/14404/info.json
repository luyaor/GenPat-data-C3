{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "123684b3b130c8027dd6e426854f9a44", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ee24f9ae586a510cb52db4ddaefa51b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/optional/ScriptRunner.java", "commitBeforeChange": "ac4255606a629710da5c2c90c2d74370cc9c2ba8", "commitAfterChange": "bc0b6f13329378a8d304b39a38209874e6b89fac", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public boolean supportsLanguage()", "signatureAfterChange": "     public boolean supportsLanguage()", "diff": ["-        if (manager != null) {", "-            return true;", "-        }", "-        checkLanguage();", "-        ClassLoader origLoader = replaceContextLoader();", "-        try {", "-            BSFManager m = createManager();", "-            BSFEngine e =", "-                engine != null", "-                ? engine", "-                : m.loadScriptingEngine(getLanguage());", "-            return e != null;", "-        } catch (Exception ex) {", "+        Hashtable table = (Hashtable) ReflectUtil.getField(", "+            new BSFManager(), \"registeredEngines\");", "+        String engineClassName = (String) table.get(getLanguage());", "+        if (engineClassName == null) {", "+            getProject().log(", "+                \"This is no BSF engine class for language '\"", "+                + getLanguage() + \"'\",", "+                Project.MSG_VERBOSE);", "-        } finally {", "-            restoreContextLoader(origLoader);", "+        }", "+        try {", "+            getScriptClassLoader().loadClass(engineClassName);", "+            return true;", "+        } catch (Throwable ex) {", "+            getProject().log(", "+                \"unable to create BSF engine class for language '\"", "+                + getLanguage() + \"'\",", "+                ex,", "+                Project.MSG_VERBOSE);", "+            return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "910709f837ede0eae866f078493e966d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/ZipScanner.java", "commitBeforeChange": "ec980be7345681968c93f0609e9a3fecb39b9753", "commitAfterChange": "fbb9886634198d8377104bef9ec697fadeb134df", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void scanme()", "signatureAfterChange": "     private void scanme()", "diff": ["+        //do not use a FileResource b/c it pulls File info from the filesystem:", "-", "-", "+        init();", "-        myentries = new Hashtable();", "+", "+        fileEntries.clear();", "+        dirEntries.clear();", "+        matchFileEntries.clear();", "+        matchDirEntries.clear();", "+", "-", "-                myentries.put(new String(entry.getName()),", "-                              new Resource(entry.getName(), true,", "-                                           entry.getTime(),", "-                                           entry.isDirectory(),", "-                                           entry.getSize()));", "+                Resource r = new ZipResource(srcFile, encoding, entry);", "+                String name = entry.getName();", "+                if (entry.isDirectory()) {", "+                    name = trimSeparator(name);", "+                    dirEntries.put(name, r);", "+                    if (match(name)) {", "+                        matchDirEntries.put(name, r);", "+                    }", "+                } else {", "+                    fileEntries.put(name, r);", "+                    if (match(name)) {", "+                        matchFileEntries.put(name, r);", "+                    }", "+                }"]}]}
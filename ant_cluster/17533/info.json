{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9c7cb9e791d6a8c6c2337621a99807b8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5e50c5dd1a3c698252970eb8e5c6275", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/selectors/ContainsSelectorTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testSelectionBehaviour()", "signatureAfterChange": "     @Test     public void testSelectionBehaviour()", "diff": ["+    @Test", "-        try {", "-            makeBed();", "-            s = (ContainsSelector)getInstance();", "-            s.setText(\"no such string in test files\");", "-            results = selectionString(s);", "-            assertEquals(\"TFFFFFFFFFFT\", results);", "+        s = new ContainsSelector();", "+        s.setText(\"no such string in test files\");", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TFFFFFFFFFFT\", results);", "-            s = (ContainsSelector)getInstance();", "-            s.setText(\"Apache Ant\");", "-            results = selectionString(s);", "-            assertEquals(\"TFFFTFFFFFFT\", results);", "+        s = new ContainsSelector();", "+        s.setText(\"Apache Ant\");", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TFFFTFFFFFFT\", results);", "-            s = (ContainsSelector)getInstance();", "-            s.setText(\"apache ant\");", "-            s.setCasesensitive(true);", "-            results = selectionString(s);", "-            assertEquals(\"TFFFFFFFFFFT\", results);", "+        s = new ContainsSelector();", "+        s.setText(\"apache ant\");", "+        s.setCasesensitive(true);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TFFFFFFFFFFT\", results);", "-            s = (ContainsSelector)getInstance();", "-            s.setText(\"apache ant\");", "-            s.setCasesensitive(false);", "-            results = selectionString(s);", "-            assertEquals(\"TFFFTFFFFFFT\", results);", "+        s = new ContainsSelector();", "+        s.setText(\"apache ant\");", "+        s.setCasesensitive(false);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TFFFTFFFFFFT\", results);", "-            s = (ContainsSelector)getInstance();", "-            s.setText(\"ApacheAnt\");", "-            s.setIgnorewhitespace(true);", "-            results = selectionString(s);", "-            assertEquals(\"TFFFTFFFFFFT\", results);", "+        s = new ContainsSelector();", "+        s.setText(\"ApacheAnt\");", "+        s.setIgnorewhitespace(true);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TFFFTFFFFFFT\", results);", "-            s = (ContainsSelector)getInstance();", "-            s.setText(\"A p a c h e    A n t\");", "-            s.setIgnorewhitespace(true);", "-            results = selectionString(s);", "-            assertEquals(\"TFFFTFFFFFFT\", results);", "+        s = new ContainsSelector();", "+        s.setText(\"A p a c h e    A n t\");", "+        s.setIgnorewhitespace(true);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TFFFTFFFFFFT\", results);", "-        }", "-        finally {", "-            cleanupBed();", "-        }", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eedfc20d9d86c0b6a71589e05d5c0550", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/selectors/SizeSelectorTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testSelectionBehaviour()", "signatureAfterChange": "     @Test     public void testSelectionBehaviour()", "diff": ["+    @Test", "-        try {", "-            makeBed();", "+    ", "+        s = new SizeSelector();", "+        s.setValue(10);", "+        s.setWhen(less);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TFFFFFFFFFFT\", results);", "-            s = (SizeSelector)getInstance();", "-            s.setValue(10);", "-            s.setWhen(less);", "-            results = selectionString(s);", "-            assertEquals(\"TFFFFFFFFFFT\", results);", "+        s = new SizeSelector();", "+        s.setValue(10);", "+        s.setWhen(more);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TTTTTTTTTTTT\", results);", "-            s = (SizeSelector)getInstance();", "-            s.setValue(10);", "-            s.setWhen(more);", "-            results = selectionString(s);", "-            assertEquals(\"TTTTTTTTTTTT\", results);", "+        s = new SizeSelector();", "+        s.setValue(32);", "+        s.setWhen(equal);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TFFFTFFFFFFT\", results);", "-            s = (SizeSelector)getInstance();", "-            s.setValue(32);", "-            s.setWhen(equal);", "-            results = selectionString(s);", "-            assertEquals(\"TFFFTFFFFFFT\", results);", "+        s = new SizeSelector();", "+        s.setValue(7);", "+        s.setWhen(more);", "+        s.setUnits(kilo);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TFTFFTTTTTTT\", results);", "-            s = (SizeSelector)getInstance();", "-            s.setValue(7);", "-            s.setWhen(more);", "-            s.setUnits(kilo);", "-            results = selectionString(s);", "-            assertEquals(\"TFTFFTTTTTTT\", results);", "+        s = new SizeSelector();", "+        s.setValue(7);", "+        s.setWhen(more);", "+        s.setUnits(kibi);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TFTFFFTTFTTT\", results);", "-            s = (SizeSelector)getInstance();", "-            s.setValue(7);", "-            s.setWhen(more);", "-            s.setUnits(kibi);", "-            results = selectionString(s);", "-            assertEquals(\"TFTFFFTTFTTT\", results);", "+        s = new SizeSelector();", "+        s.setValue(99999);", "+        s.setWhen(more);", "+        s.setUnits(tibi);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TFFFFFFFFFFT\", results);", "-            s = (SizeSelector)getInstance();", "-            s.setValue(99999);", "-            s.setWhen(more);", "-            s.setUnits(tibi);", "-            results = selectionString(s);", "-            assertEquals(\"TFFFFFFFFFFT\", results);", "-", "-            s = (SizeSelector)getInstance();", "-            Parameter param1 = new Parameter();", "-            Parameter param2 = new Parameter();", "-            Parameter param3 = new Parameter();", "-            param1.setName(\"value\");", "-            param1.setValue(\"20\");", "-            param2.setName(\"units\");", "-            param2.setValue(\"Ki\");", "-            param3.setName(\"when\");", "-            param3.setValue(\"more\");", "-            Parameter[] params = {param1,param2,param3};", "-            s.setParameters(params);", "-            results = selectionString(s);", "-            assertEquals(\"TFFFFFFTFFTT\", results);", "-        }", "-        finally {", "-            cleanupBed();", "-        }", "+        s = new SizeSelector();", "+        Parameter param1 = new Parameter();", "+        Parameter param2 = new Parameter();", "+        Parameter param3 = new Parameter();", "+        param1.setName(\"value\");", "+        param1.setValue(\"20\");", "+        param2.setName(\"units\");", "+        param2.setValue(\"Ki\");", "+        param3.setName(\"when\");", "+        param3.setValue(\"more\");", "+        Parameter[] params = {param1,param2,param3};", "+        s.setParameters(params);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TFFFFFFTFFTT\", results);", "+    "]}]}
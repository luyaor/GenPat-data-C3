{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a0ba145b5f9d64285367d38d6021e317", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c46c6f08aa96d2100f57c4a249b9054", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Touch.java", "commitBeforeChange": "3f1f3c6c1547c25611b62af8d81e7e55ecb57e10", "commitAfterChange": "f14a2ef8c36b9de729a3715f9f7ee3d74d837ed0", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     protected synchronized void checkConfiguration() throws BuildException", "signatureAfterChange": "     protected synchronized void checkConfiguration() throws BuildException", "diff": ["-            DateFormat df = dfFactory.getPrimaryFormat();", "-            ParseException pe = null;", "-            try {", "-                workmillis = df.parse(dateTime).getTime();", "-            } catch (ParseException peOne) {", "-                df = dfFactory.getFallbackFormat();", "-                if (df == null) {", "-                    pe = peOne;", "-                } else {", "-                    try {", "-                        workmillis = df.parse(dateTime).getTime();", "-                    } catch (ParseException peTwo) {", "-                        pe = peTwo;", "+            if (\"now\".equalsIgnoreCase(dateTime)) {", "+                workmillis = System.currentTimeMillis();", "+            } else {", "+                DateFormat df = dfFactory.getPrimaryFormat();", "+                ParseException pe = null;", "+                try {", "+                    workmillis = df.parse(dateTime).getTime();", "+                } catch (ParseException peOne) {", "+                    df = dfFactory.getFallbackFormat();", "+                    if (df == null) {", "+                        pe = peOne;", "+                    } else {", "+                        try {", "+                            workmillis = df.parse(dateTime).getTime();", "+                        } catch (ParseException peTwo) {", "+                            pe = peTwo;", "+                        }", "-            }", "-            if (pe != null) {", "-                throw new BuildException(pe.getMessage(), pe, getLocation());", "-            }", "-            if (workmillis < 0) {", "-                throw new BuildException(\"Date of \" + dateTime", "-                                         + \" results in negative \"", "-                                         + \"milliseconds value \"", "-                                         + \"relative to epoch \"", "-                                         + \"(January 1, 1970, \"", "-                                         + \"00:00:00 GMT).\");", "+                if (pe != null) {", "+                    throw new BuildException(pe.getMessage(), pe, getLocation());", "+                }", "+                if (workmillis < 0) {", "+                    throw new BuildException(\"Date of \" + dateTime", "+                            + \" results in negative \" + \"milliseconds value \"", "+                            + \"relative to epoch \" + \"(January 1, 1970, \"", "+                            + \"00:00:00 GMT).\");", "+                }", "-                ((millis < 0) ? Project.MSG_DEBUG : Project.MSG_VERBOSE));", "+                    ((millis < 0) ? Project.MSG_DEBUG : Project.MSG_VERBOSE));", "-            //only set if successful to this point:", "+            // only set if successful to this point:"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da60ff53b8f12827f3c30efea2cf4e16", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "aa43e37a025cdf54b8914b8283e57419a253ed59", "commitAfterChange": "dee95e3acc5154aee03ff5f91f9a56426ae79f3f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void closeEntry() throws IOException", "signatureAfterChange": "     public void closeEntry() throws IOException", "diff": ["-        if (entry == null) {", "-            return;", "+        if (finished) {", "+            throw new IOException(\"Stream has already been finished\");", "+        if (entry == null) {", "+            throw new IOException(\"No current entry to close\");", "+        }", "+", "+        if (!entry.hasWritten) {", "+            write(new byte[0], 0, 0);", "+        }", "+", "+        flushDeflater();", "+", "+        final Zip64Mode effectiveMode = getEffectiveZip64Mode(entry.entry);", "+        long bytesWritten = written - entry.dataStart;", "-        if (entry.getMethod() == DEFLATED) {", "-            def.finish();", "-            while (!def.finished()) {", "-                deflate();", "-            }", "+        final boolean actuallyNeedsZip64 =", "+            handleSizesAndCrc(bytesWritten, realCrc, effectiveMode);", "-            entry.setSize(adjustToLong(def.getTotalIn()));", "-            entry.setCompressedSize(adjustToLong(def.getTotalOut()));", "-            entry.setCrc(realCrc);", "-", "-            def.reset();", "-", "-            written += entry.getCompressedSize();", "-        } else if (raf == null) {", "-            if (entry.getCrc() != realCrc) {", "-                throw new ZipException(\"bad CRC checksum for entry \"", "-                                       + entry.getName() + \": \"", "-                                       + Long.toHexString(entry.getCrc())", "-                                       + \" instead of \"", "-                                       + Long.toHexString(realCrc));", "-            }", "-", "-            if (entry.getSize() != written - dataStart) {", "-                throw new ZipException(\"bad size for entry \"", "-                                       + entry.getName() + \": \"", "-                                       + entry.getSize()", "-                                       + \" instead of \"", "-                                       + (written - dataStart));", "-            }", "-        } else { /* method is STORED and we used RandomAccessFile */", "-            long size = written - dataStart;", "-", "-            entry.setSize(size);", "-            entry.setCompressedSize(size);", "-            entry.setCrc(realCrc);", "-        }", "-", "-        // If random access output, write the local file header containing", "-        // the correct CRC and compressed/uncompressed sizes", "-            long save = raf.getFilePointer();", "-", "-            raf.seek(localDataStart);", "-            writeOut(ZipLong.getBytes(entry.getCrc()));", "-            writeOut(ZipLong.getBytes(entry.getCompressedSize()));", "-            writeOut(ZipLong.getBytes(entry.getSize()));", "-            raf.seek(save);", "+            rewriteSizesAndCrc(actuallyNeedsZip64);", "-        writeDataDescriptor(entry);", "+        writeDataDescriptor(entry.entry);"]}]}
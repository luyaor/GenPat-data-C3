{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e75163ab8cb85be435da555c2bb6473a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7168b82789e8568746bd9e4cae9206a0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/email/EmailAddress.java", "commitBeforeChange": "7b4290a6232f165327ddf4832c06474c8ef6109e", "commitAfterChange": "f1a4a514784709dadf94d8b4f38ab2f52f1b1e1e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public EmailAddress(String address)", "signatureAfterChange": "     public EmailAddress(String email)", "diff": ["-    public EmailAddress(String address) {", "-        this.address = address;", "+    // Algorithm based on the one found in Ant's MailMessage.java", "+    public EmailAddress(String email) {", "+        final int minLen = 9;", "+        int len = email.length();", "+", "+        // shortcut for \"<address>\"", "+        if (len > minLen) {", "+            if ((email.charAt(0) == '<' || email.charAt(1) == '<')", "+            && (email.charAt(len - 1) == '>' || email.charAt(len - 2) == '>')) {", "+                this.address = trim(email, true);", "+                return;", "+            }", "+        }", "+", "+        int paramDepth = 0;", "+        int start = 0;", "+        int end = 0;", "+        int nStart = 0;", "+        int nEnd = 0;", "+", "+        for (int i = 0; i < len; i++) {", "+            char c = email.charAt(i);", "+            if (c == '(') {", "+                paramDepth++;", "+                if (start == 0) {", "+                    end = i;  // support \"address (name)\"", "+                    nStart = i + 1;", "+                }", "+            } else if (c == ')') {", "+                paramDepth--;", "+                if (end == 0) {", "+                    start = i + 1;  // support \"(name) address\"", "+                    nEnd = i;", "+                }", "+            } else if (paramDepth == 0 && c == '<') {", "+                if (start == 0) {", "+                    nEnd = i;", "+                }", "+                start = i + 1;", "+            } else if (paramDepth == 0 && c == '>') {", "+                end = i;", "+                if (end != len - 1) {", "+                    nStart = i + 1;", "+                }", "+            }", "+        }", "+", "+        // DEBUG: System.out.println( email );", "+        if (end == 0) {", "+            end = len;", "+        }", "+        // DEBUG: System.out.println( \"address: \" + start + \" \" + end );", "+        if (nEnd == 0) {", "+            nEnd = len;", "+        }", "+        // DEBUG: System.out.println( \"name: \" + nStart + \" \" + nEnd );", "+", "+        this.address = trim(email.substring(start, end), true);", "+        this.name = trim(email.substring(nStart, nEnd), false);", "+", "+        // if the two substrings are longer than the original, then name", "+        // contains address - so reset the name to null", "+        if (this.name.length() + this.address.length() > len) {", "+            this.name = null;", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc2488461944c0190477239a70f146b5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "cca008dd0001628eefae7a0ebffba4815a6909f1", "commitAfterChange": "021fdf251c92ecb3981724d83c0265dc770280b3", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public static void main(String[] args) throws IOException", "signatureAfterChange": "     public static void main(String[] args) throws IOException", "diff": ["+        if (args[0].startsWith(\"testsfile=\")) {", "+            multipleTests = true;", "+            args[0] = args[0].substring(10 /* \"testsfile=\".length() */);", "+        }", "+", "-        JUnitTest t = new JUnitTest(args[0]);", "-", "-        t.setProperties(props);", "-        JUnitTestRunner runner = new JUnitTestRunner(t, haltError, stackfilter,", "-                                                     haltFail, showOut);", "-        runner.forked = true;", "-        transferFormatters(runner);", "-        runner.run();", "-        System.exit(runner.getRetCode());", "+        int returnCode = SUCCESS;", "+        if (multipleTests) {", "+            try {", "+                java.io.BufferedReader reader = ", "+                    new java.io.BufferedReader(new java.io.FileReader(args[0]));", "+                String testCaseName;", "+                int code = 0;", "+                boolean errorOccured = false;", "+                boolean failureOccured = false;", "+                String line = null;", "+                while ((line = reader.readLine()) != null) {", "+                    StringTokenizer st = new StringTokenizer(line, \",\");", "+                    testCaseName = st.nextToken();", "+                    JUnitTest t = new JUnitTest(testCaseName);", "+                    t.setTodir(new File(st.nextToken()));", "+                    t.setOutfile(st.nextToken());", "+                    code = launch(t, haltError, stackfilter, haltFail, ", "+                                  showOut, props);", "+                    errorOccured = (code == ERRORS);", "+                    failureOccured = (code != SUCCESS);", "+                    if (errorOccured || failureOccured ) {", "+                        if ((errorOccured && haltError) ", "+                            || (failureOccured && haltFail)) {", "+                            System.exit(code);", "+                        } else {", "+                            if (code > returnCode) {", "+                                returnCode = code;", "+                            }", "+                            System.out.println(\"TEST \" + t.getName() ", "+                                               + \" FAILED\");", "+                        }", "+                    }", "+                }", "+            } catch(IOException e) {", "+                e.printStackTrace();", "+            }", "+        } else {", "+            returnCode = launch(new JUnitTest(args[0]), haltError,", "+                                stackfilter, haltFail, showOut, props);", "+        }", "+", "+        System.exit(returnCode);"]}]}
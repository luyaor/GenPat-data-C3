{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f103c065a90828eb403b04024e64f68b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "331f92179029376feac8e6b008d9e7b0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/executor/DefaultExecutor.java", "commitBeforeChange": "c8ae289ddd72e9f5858612fba38393a3c8698c27", "commitAfterChange": "5b87919be6a8db15efe30f2de6e617aba31ef619", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void execute( final Configuration taskModel, final ExecutionFrame frame )         throws TaskException", "signatureAfterChange": "     public void execute( final Configuration taskModel, final ExecutionFrame frame )         throws TaskException", "diff": ["+     */", "-        debug( \"creating.notice\", taskName );", "-        final Task task = createTask( taskName, frame );", "+        try", "+        {", "+            debug( \"creating.notice\", taskName );", "+            final Task task = doCreateTask( taskName, frame );", "-        debug( \"logger.notice\", taskName );", "-        doLogEnabled( task, taskModel, frame.getLogger() );", "+            debug( \"logger.notice\", taskName );", "+            doLogEnabled( task, taskModel, frame.getLogger() );", "-        debug( \"contextualizing.notice\", taskName );", "-        doContextualize( task, taskModel, frame.getContext() );", "+            debug( \"contextualizing.notice\", taskName );", "+            doContextualize( task, taskModel, frame.getContext() );", "-        debug( \"configuring.notice\", taskName );", "-        doConfigure( task, taskModel, frame.getContext() );", "+            debug( \"configuring.notice\", taskName );", "+            doConfigure( task, taskModel, frame.getContext() );", "-        debug( \"executing.notice\", taskName );", "-        task.execute();", "+            debug( \"executing.notice\", taskName );", "+            task.execute();", "+        }", "+        catch( Exception e )", "+        {", "+            // Wrap in generic error message", "+            final String message = REZ.getString( \"execute.error\", taskName, taskModel.getLocation() );", "+            throw new TaskException( message, e );", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bcb524411119867e2e733c860982666", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/executor/AspectAwareExecutor.java", "commitBeforeChange": "c8ae289ddd72e9f5858612fba38393a3c8698c27", "commitAfterChange": "5b87919be6a8db15efe30f2de6e617aba31ef619", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private void executeTask( final Configuration model,                               final ExecutionFrame frame )         throws TaskException", "signatureAfterChange": "      private void executeTask( final Configuration model,                               final ExecutionFrame frame )         throws TaskException", "diff": ["-        Configuration taskModel = getAspectManager().preCreate( model );", "-        taskModel = prepareAspects( taskModel );", "+        try", "+        {", "+            Configuration taskModel = getAspectManager().preCreate( model );", "+            taskModel = prepareAspects( taskModel );", "-        final String taskName = taskModel.getName();", "-        debug( \"creating.notice\", taskName );", "-        final Task task = createTask( taskName, frame );", "-        getAspectManager().postCreate( task );", "+            final String taskName = taskModel.getName();", "+            debug( \"creating.notice\", taskName );", "+            final Task task = doCreateTask( taskName, frame );", "+            getAspectManager().postCreate( task );", "-        debug( \"logger.notice\", taskName );", "-        final Logger logger = frame.getLogger();", "-        getAspectManager().preLogEnabled( logger );", "-        doLogEnabled( task, taskModel, logger );", "+            debug( \"logger.notice\", taskName );", "+            final Logger logger = frame.getLogger();", "+            getAspectManager().preLogEnabled( logger );", "+            doLogEnabled( task, taskModel, logger );", "-        debug( \"contextualizing.notice\", taskName );", "-        doContextualize( task, taskModel, frame.getContext() );", "+            debug( \"contextualizing.notice\", taskName );", "+            doContextualize( task, taskModel, frame.getContext() );", "-        debug( \"configuring.notice\", taskName );", "-        getAspectManager().preConfigure( taskModel );", "-        doConfigure( task, taskModel, frame.getContext() );", "+            debug( \"configuring.notice\", taskName );", "+            getAspectManager().preConfigure( taskModel );", "+            doConfigure( task, taskModel, frame.getContext() );", "-        debug( \"executing.notice\", taskName );", "-        getAspectManager().preExecute();", "-        doExecute( taskModel, task );", "-        getAspectManager().preDestroy();", "+            debug( \"executing.notice\", taskName );", "+            getAspectManager().preExecute();", "+            doExecute( taskModel, task );", "+            getAspectManager().preDestroy();", "+        }", "+        catch( Exception e )", "+        {", "+            // Wrap in generic error message", "+            final String message = REZ.getString( \"execute.error\",", "+                                                  model.getName(),", "+                                                  model.getLocation() );", "+            throw new TaskException( message, e );", "+        }"]}]}
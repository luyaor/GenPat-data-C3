{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e1002fda8a1d5f942bf542bdfe7403bf", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d626f387a2730b6d2bafb9f926ea89e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntTypeDefinition.java", "commitBeforeChange": "d25488cbbb28cf25e1f91f714c70999fd105432d", "commitAfterChange": "3d706ab8188a674936880b6f4530b0cf3991758b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     public Object innerCreateAndSet(Class newclass, Project project)             throws NoSuchMethodException,             InstantiationException,             IllegalAccessException,             InvocationTargetException", "signatureAfterChange": "     public <T> T innerCreateAndSet(Class<T> newclass, Project project)             throws NoSuchMethodException,             InstantiationException,             IllegalAccessException,             InvocationTargetException", "diff": ["-    public Object innerCreateAndSet(Class newclass, Project project)", "+    public <T> T innerCreateAndSet(Class<T> newclass, Project project)", "-        Constructor ctor = null;", "+        Constructor<T> ctor;", "-        Object o = ctor.newInstance(", "+        T o = ctor.newInstance("]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d411ac597efc1c5f14bf0a6f8cdd866", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/selectors/modifiedselector/ModifiedSelector.java", "commitBeforeChange": "7829faf36a6f4bc565e0e8b92aa85cc948718176", "commitAfterChange": "9caeed5081071d6a2de28844d0a724918f8c6d86", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected Object loadClass(String classname, String msg, Class type)", "signatureAfterChange": "     protected <T> T loadClass(String classname, String msg, Class<? extends T> type)", "diff": ["-    protected Object loadClass(String classname, String msg, Class type) {", "+    protected <T> T loadClass(String classname, String msg, Class<? extends T> type) {", "-            Class clazz = null;", "+            Class<?> clazz = null;", "-            Object rv = clazz.newInstance();", "+            T rv = clazz.asSubclass(type).newInstance();"]}]}
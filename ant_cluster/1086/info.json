{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9f2deb5cfcddf4ccded1d1c6817dbd30", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48804c81383cb1360789a70f6d75b51e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "d977d4b58f8e6e323060aeb695e45749822187d4", "commitAfterChange": "b417973d391382a96e26e6c50751b9b24f85b239", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private void runBuild() throws BuildException", "signatureAfterChange": "      private void runBuild() throws BuildException", "diff": ["-        ", "+", "-        long startTime = System.currentTimeMillis();", "-        project.init();", "-        // set user-define properties", "-        Enumeration e = definedProps.keys();", "-        while (e.hasMoreElements()) {", "-            String arg = (String)e.nextElement();", "-            String value = (String)definedProps.get(arg);", "-            project.setUserProperty(arg, value);", "-        }", "+        Throwable error = null;", "-        project.setUserProperty( \"ant.file\" , buildFile.getAbsolutePath() );", "-", "-        // first use the ProjectHelper to create the project object", "-        // from the given build file.", "+            project.init();", "+", "+            // set user-define properties", "+            Enumeration e = definedProps.keys();", "+            while (e.hasMoreElements()) {", "+                String arg = (String)e.nextElement();", "+                String value = (String)definedProps.get(arg);", "+                project.setUserProperty(arg, value);", "+            }", "+", "+            project.setUserProperty( \"ant.file\" , buildFile.getAbsolutePath() );", "+", "+            // first use the ProjectHelper to create the project object", "+            // from the given build file.", "-        } catch (BuildException be) {", "-            System.out.println(\"\\nBUILD CONFIG ERROR\\n\");", "-            System.out.println(be.getMessage());", "-            if (be.getException() == null) {", "-                System.out.println(be.toString());", "-            } else {", "-                be.getException().printStackTrace();", "-\t    }", "-\t    throw be;", "-        }", "-        // make sure that we have a target to execute", "-        if (targets.size() == 0) {", "-            targets.addElement(project.getDefaultTarget());", "-        }", "-", "-        // actually do some work", "-        try {", "-            project.executeTargets(targets);", "-        } catch (BuildException be) {", "-            String msg = \"\\nBUILD FATAL ERROR\\n\\n\";", "-            System.out.println(msg + be.toString());", "-            if (msgOutputLevel > Project.MSG_INFO) {", "-                be.printStackTrace();", "+            // make sure that we have a target to execute", "+            if (targets.size() == 0) {", "+                targets.addElement(project.getDefaultTarget());", "-            throw be;", "-        }", "-        // track our stop time and let the user know how long things took.", "-        long finishTime = System.currentTimeMillis();", "-        long elapsedTime = finishTime - startTime;", "-        if (msgOutputLevel >= Project.MSG_INFO) {", "-            System.out.println(\"Completed in \" + (elapsedTime/1000)", "-                               + \" seconds\");", "+            // actually do some work", "+            project.executeTargets(targets);", "+        }", "+        catch(RuntimeException exc) {", "+            error = exc;", "+            throw exc;", "+        }", "+        catch(Error err) {", "+            error = err;", "+            throw err;", "+        }", "+        finally {", "+            project.fireBuildFinished(error);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d0505ab58e6aecaa04b3b37aec65c01", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ComponentHelper.java", "commitBeforeChange": "3ed946bae41d5528a2b4762c20efb8dc74b71519", "commitAfterChange": "cdadcda40f178fa306bcb336bacaff34f3a0d026", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "     public String diagnoseCreationFailure(String componentName, String type)", "signatureAfterChange": "     public String diagnoseCreationFailure(String componentName, String type)", "diff": ["-            boolean isAntlib = componentName.indexOf(MagicNames.ANTLIB_PREFIX) == 0;", "-            out.println(\"Cause: The name is undefined.\");", "-            out.println(\"Action: Check the spelling.\");", "-            out.println(\"Action: Check that any custom tasks/types have been declared.\");", "-            out.println(\"Action: Check that any <presetdef>/<macrodef>\"", "-                        + \" declarations have taken place.\");", "-            if (isAntlib) {", "-                out.println();", "-                out.println(\"This appears to be an antlib declaration. \");", "-                out.println(\"Action: Check that the implementing library exists in one of:\");", "-                out.println(dirListing);", "-            }", "+            printUnknownDefinition(out, componentName, dirListing);", "-                out.println(\"Cause: the class \" + classname + \" was not found.\");", "-                if (optional) {", "-                    out.println(\"        This looks like one of Ant's optional components.\");", "-                    out.println(\"Action: Check that the appropriate optional JAR exists in\");", "-                    out.println(dirListing);", "-                } else {", "-                    out.println(\"Action: Check that the component has been correctly declared\");", "-                    out.println(\"        and that the implementing JAR is in one of:\");", "-                    out.println(dirListing);", "+                if (!optional) {", "+                printClassNotFound(out, classname, optional, dirListing);", "-                out.println(\"Cause: Could not load a dependent class \"", "-                        +  ncdfe.getMessage());", "-                if (optional) {", "-                    out.println(\"       It is not enough to have Ant's optional JARs\");", "-                    out.println(\"       you need the JAR files that the\"", "-                                + \" optional tasks depend upon.\");", "-                    out.println(\"       Ant's optional task dependencies are\"", "-                                + \" listed in the manual.\");", "-                } else {", "-                    out.println(\"       This class may be in a separate JAR\"", "-                                + \" that is not installed.\");", "-                }", "-                out.println(\"Action: Determine what extra JAR files are\"", "-                            + \" needed, and place them in one of:\");", "-                out.println(dirListing);", "+                printNotLoadDependentClass(out, optional, ncdfe, dirListing);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e6f8ba86fb7b7b00b802d23f8957456", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Diagnostics.java", "commitBeforeChange": "bc60284c4113a11be40a67932557b1f9f178a015", "commitAfterChange": "94da71c7641a9cdccc8e4b5f0bd814fb75a70b7c", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     public static void doReport(PrintStream out)", "signatureAfterChange": "     public static void doReport(PrintStream out)", "diff": ["+        doReport(out, Project.MSG_INFO);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c71dc2aaa12fe56d23aac573af8c149c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Rmic.java", "commitBeforeChange": "4a99751448c8773ce33c3029af60e20db02167f7", "commitAfterChange": "758b225e9a7868aa92992cc2bb27f5036225a1f1", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "      protected void scanDir(File baseDir, String files[], boolean shouldVerify)", "signatureAfterChange": "      protected void scanDir(File baseDir, String files[])", "diff": ["-    protected void scanDir(File baseDir, String files[], boolean shouldVerify) {", "-        compileList.removeAllElements();", "-        for (int i = 0; i < files.length; i++) {", "-            File baseFile = new File(baseDir, files[i]);", "-            if (files[i].endsWith(\".class\") &&", "-                !files[i].endsWith(\"_Stub.class\") &&", "-                !files[i].endsWith(\"_Skel.class\")) {", "-                if (shouldCompile(baseFile)) {", "-                    String classname = files[i].replace(File.separatorChar, '.');", "-                    classname = classname.substring(0, classname.indexOf(\".class\"));", "-                    boolean shouldAdd = true;", "-                    if (shouldVerify) {", "-                        try {", "-                            Class testClass = Class.forName(classname);", "-                            // One cannot RMIC an interface", "-                            if (testClass.isInterface() || !isValidRmiRemote(testClass)) {", "-                                shouldAdd = false;", "-                            }", "-                        } catch (ClassNotFoundException e) {", "-                            log(\"Unable to verify class \" + classname + ", "-                                    \". It could not be found.\", Project.MSG_WARN);", "-                        } catch (NoClassDefFoundError e) {", "-                            log(\"Unable to verify class \" + classname + ", "-                                        \". It is not defined.\", Project.MSG_WARN);", "-                        }", "-                    }", "-                    if (shouldAdd) {", "-                        log(\"Adding: \" + classname + \" to compile list\",", "-                            Project.MSG_VERBOSE);", "-                        compileList.addElement(classname);", "-                    }", "-                }", "-            }", "+    protected void scanDir(File baseDir, String files[]) {", "+        SourceFileScanner sfs = new SourceFileScanner(this);", "+        String[] newFiles = sfs.restrict(files, baseDir, baseDir,", "+                                         new RmicFileNameMapper());", "+        for (int i = 0; i < newFiles.length; i++) {", "+            String classname = newFiles[i].replace(File.separatorChar, '.');", "+            classname = classname.substring(0, classname.indexOf(\".class\"));", "+            compileList.addElement(classname);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce9ee574cd87aed9a7c4d8833072a40c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/XalanExecutor.java", "commitBeforeChange": "cde70b0faf37b85f91e047dc0648d81851f2cfbe", "commitAfterChange": "d891e90f617556a2f4694ce5878912a92a884c19", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     static XalanExecutor newInstance(AggregateTransformer caller) throws BuildException", "signatureAfterChange": "     static XalanExecutor newInstance(AggregateTransformer caller)          throws BuildException", "diff": ["-    static XalanExecutor newInstance(AggregateTransformer caller) throws BuildException {", "-        Class procVersion = null;", "+    static XalanExecutor newInstance(AggregateTransformer caller) ", "+        throws BuildException {", "-            procVersion = Class.forName(\"org.apache.xalan.processor.XSLProcessorVersion\");", "-            executor = (XalanExecutor) Class.forName(", "-                \"org.apache.tools.ant.taskdefs.optional.junit.Xalan2Executor\").newInstance();", "-        } catch (Exception xalan2missing) {", "-            StringWriter swr = new StringWriter();", "-            xalan2missing.printStackTrace(new PrintWriter(swr));", "-            caller.task.log(\"Didn't find Xalan2.\", Project.MSG_DEBUG);", "-            caller.task.log(swr.toString(), Project.MSG_DEBUG);", "+            Class clazz = Class.forName(pack + \"Xalan2Executor\");", "+            executor = (XalanExecutor)clazz.newInstance();", "+        } catch (Exception xsltcApacheMissing){", "+            caller.task.log(xsltcApacheMissing.toString());", "-                procVersion = Class.forName(\"org.apache.xalan.xslt.XSLProcessorVersion\");", "-                executor = (XalanExecutor) Class.forName(", "-                    \"org.apache.tools.ant.taskdefs.optional.junit.Xalan1Executor\").newInstance();", "-            } catch (Exception xalan1missing) {", "-                swr = new StringWriter();", "-                xalan1missing.printStackTrace(new PrintWriter(swr));", "-                caller.task.log(\"Didn't find Xalan1.\", Project.MSG_DEBUG);", "-                caller.task.log(swr.toString(), Project.MSG_DEBUG);", "-                String msg = \"Could not find xalan2 nor xalan1 \"", "-                    + \"in the classpath. Check http://xml.apache.org/xalan-j/\";", "-                if (!JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)", "-                    && !JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_2)", "-                    && !JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_3)", "-                    && !JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_4)) {", "-                    msg += \"\\r\\nStarting with JDK 1.5, the built-in processor \"", "-                        + \"of the JDK is no longer Xalan\\r\\nbut XSLTC which is \"", "-                        + \"not (yet) supported by the junitreport task.\";", "-                }", "-                throw new BuildException(msg);", "+                Class clazz = Class.forName(pack + \"Xalan1Executor\");", "+                executor = (XalanExecutor) clazz.newInstance();", "+            } catch (Exception xalan1Missing){", "+                caller.task.log(xalan1Missing.toString());", "+                throw new BuildException(\"Could not find xstlc nor xalan2 nor \"", "+                                         + \"xalan1 in the classpath. Check \"", "+                                         + \"http://xml.apache.org/xalan-j\");", "-        String version = getXalanVersion(procVersion);", "-        caller.task.log(\"Using Xalan version: \" + version);", "+        String classNameImpl = executor.getImplementation();", "+        String version = executor.getProcVersion(classNameImpl);", "+        caller.task.log(\"Using \" + version, Project.MSG_VERBOSE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe648fc3dca91a549e6a49d20269d608", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "f6745b24f59bcc6796529c9b43bd37a0d4dd2846", "commitAfterChange": "b61e78e9a65229e792b8ab57d6c4b548403b54fa", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private static void printTargets(Project project)", "signatureAfterChange": "     private static void printTargets(Project project)", "diff": ["-        // find the target with the longest name and", "-        // filter out the targets with no description", "+        // find the target with the longest name", "-        Vector names = new Vector();", "-        Vector descriptions = new Vector();", "+        // split the targets in top-level and sub-targets depending", "+        // on the presence of a description", "+        Vector topNames = new Vector();", "+        Vector topDescriptions = new Vector();", "+        Vector subNames = new Vector();", "+            // maintain a sorted list of targets", "-                targetDescription = \"\";", "-            }", "-            ", "-            names.addElement(targetName);", "-            descriptions.addElement(targetDescription);", "+                int pos = findTargetPosition(subNames, targetName);", "+                subNames.insertElementAt(targetName, pos);", "+            } else {", "+                int pos = findTargetPosition(topNames, targetName);", "+                topNames.insertElementAt(targetName, pos);", "+                topDescriptions.insertElementAt(targetDescription, pos);", "+        }", "+        printTargets(topNames, topDescriptions, \"Main targets:\", maxLength);", "+        printTargets(subNames, null, \"Subtargets:\", 0);", "+    }", "-        while (spaces.length()<maxLength) {", "-        msg.append(\"Targets: \" + lSep);", "-            msg.append(\" -\"+names.elementAt(i));", "-            msg.append(spaces.substring(0, maxLength - ((String)names.elementAt(i)).length() + 2));", "-            msg.append(descriptions.elementAt(i)+lSep);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac76fb947be8154cfc77bf8dd79f1432", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26cd158f7599c06ab97109981c24e9bb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/antlib/src/main/org/apache/tools/ant/taskdefs/Antlib.java", "commitBeforeChange": "f1548aec2b4a57bfdca206f32178a9e03c39d3a1", "commitAfterChange": "7ed240811799349f5a0932e7a464086e5ce31527", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public static String dtdVersion()", "signatureAfterChange": "  \tprivate void parseAttributes(String tag, AttributeList attrs)  \t    throws SAXParseException", "diff": ["-     */", "-    public static String dtdVersion() {", "-        return ANTLIB_DTD_URL + ANTLIB_DTD_PREFIX +", "-                ANTLIB_DTD_VERSION + ANTLIB_DTD_EXT;", "-    }", "+\tprivate void parseAttributes(String tag, AttributeList attrs) ", "+\t    throws SAXParseException {", "+\t    name = null;", "+\t    className = null;", "+\t    adapter = null;", "+\t    ", "+\t    for (int i = 0, last = attrs.getLength(); i < last; i++) {", "+\t\tString key = attrs.getName(i);", "+\t\tString value = attrs.getValue(i);", "+\t\t", "+\t\tif (key.equals(\"name\")) {", "+\t\t    name = value;", "+\t\t}", "+\t\telse if (key.equals(\"class\")) {", "+\t\t    className = value;", "+\t\t}", "+\t\telse if (\"role\".equals(tag) && key.equals(\"adapter\")) {", "+\t\t    adapter = value;", "+\t\t}", "+\t\telse {", "+\t\t    throw new SAXParseException(\"Unexpected attribute \\\"\"", "+\t\t\t\t\t\t+ key + \"\\\"\", locator);", "+\t\t}", "+\t    }", "+\t    if (name == null || className == null) {", "+\t\tString msg = \"Underspecified \" + tag + \" declaration.\";", "+\t\tthrow new SAXParseException(msg, locator);", "+\t    }", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0015a19c867adbae2f43e451bad6fb2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/cli/org/apache/ant/cli/Commandline.java", "commitBeforeChange": "7499c443d67445ea8fd0b8f4bd56c72251b18bf4", "commitAfterChange": "b7e43ad8c5906ae2b6d6b42f8b2715dc7d2e7a16", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void process(String[] args, InitConfig config)", "signatureAfterChange": "     private void process(String[] args, InitConfig initConfig)", "diff": ["-    private void process(String[] args, InitConfig config) {", "-        this.config = config;", "+    private void process(String[] args, InitConfig initConfig) {", "+        this.config = initConfig;", "+        System.out.println(\"Ant Home is \" + initConfig.getAntHome());", "+", "+            AntConfig userConfig = getAntConfig(initConfig.getUserConfigArea());", "+            AntConfig systemConfig", "+                 = getAntConfig(initConfig.getSystemConfigArea());", "+", "+            AntConfig config = systemConfig;", "+            if (config == null) {", "+                config = userConfig;", "+            } else if (userConfig != null) {", "+                config.merge(userConfig);", "+            }", "+", "+            if (!buildFileURL.getProtocol().equals(\"file\")", "+                 && !config.isRemoteProjectAllowed()) {", "+                throw new ConfigException(\"Remote Projects are not allowed: \"", "+                     + buildFileURL);", "+            }", "+", "-            ExecutionManager executionManager = new ExecutionManager(config);", "+            ExecutionManager executionManager", "+                 = new ExecutionManager(initConfig, config);", "-        } catch (AntException e) {", "-            Location location = e.getLocation();", "-            Throwable cause = e.getCause();", "-            System.out.println(e.getMessage());", "-", "-            if (cause != null) {", "-                System.out.print(\"Root cause: \" + cause.getClass().getName());", "-                if (!cause.getMessage().equals(e.getMessage())) {", "-                    System.out.print(\": \" + cause.getMessage());", "+        } catch (Throwable t) {", "+            if (t instanceof AntException) {", "+                AntException e = (AntException)t;", "+                Location location = e.getLocation();", "+                Throwable cause = e.getCause();", "+                if (location != null && location != Location.UNKNOWN_LOCATION) {", "+                    System.out.print(location);", "-                System.out.println();", "+                System.out.println(e.getMessage());", "+", "+                if (messageOutputLevel >= MessageLevel.MSG_VERBOSE) {", "+                    t.printStackTrace();", "+                }", "+", "+                if (cause != null) {", "+                    System.out.println(\"Root cause: \" + cause.toString());", "+                }", "+            } else {", "+                t.printStackTrace(System.err);", "-            e.printStackTrace();", "-", "-            System.exit(1);", "-        } catch (Throwable t) {", "-            t.printStackTrace();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e664d9af3ad12c8cdf9840cbd032ec33", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a0d7b0c93f10fee66c28a5e2418b26f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "     private TestResultHolder executeAsForked(JUnitTest test,                                              ExecuteWatchdog watchdog,                                              File casesFile)         throws BuildException", "signatureAfterChange": "     private TestResultHolder executeAsForked(JUnitTest test,                                              final ExecuteWatchdog watchdog,                                              final File casesFile)         throws BuildException", "diff": ["-                                             ExecuteWatchdog watchdog,", "-                                             File casesFile)", "+                                             final ExecuteWatchdog watchdog,", "+                                             final File casesFile)", "-        } catch (CloneNotSupportedException e) {", "+        } catch (final CloneNotSupportedException e) {", "-            FormatterElement fe = feArray[i];", "+            final FormatterElement fe = feArray[i];", "-                File outFile = getOutput(fe, test);", "+                final File outFile = getOutput(fe, test);", "-        File vmWatcher = createTempPropertiesFile(\"junitvmwatcher\");", "+        final File vmWatcher = createTempPropertiesFile(\"junitvmwatcher\");", "-        File propsFile = createTempPropertiesFile(\"junit\");", "+        final File propsFile = createTempPropertiesFile(\"junit\");", "-        Hashtable p = getProject().getProperties();", "-        Properties props = new Properties();", "-        for (Enumeration e = p.keys(); e.hasMoreElements();) {", "-            Object key = e.nextElement();", "+        final Hashtable p = getProject().getProperties();", "+        final Properties props = new Properties();", "+        for (final Enumeration e = p.keys(); e.hasMoreElements();) {", "+            final Object key = e.nextElement();", "-            FileOutputStream outstream = new FileOutputStream(propsFile);", "+            final FileOutputStream outstream = new FileOutputStream(propsFile);", "-        } catch (java.io.IOException e) {", "+        } catch (final java.io.IOException e) {", "-        Execute execute = new Execute(", "+        final Execute execute = new Execute(", "-        String[] environment = env.getVariables();", "+        final String[] environment = env.getVariables();", "-        TestResultHolder result = new TestResultHolder();", "+        final TestResultHolder result = new TestResultHolder();", "-        } catch (IOException e) {", "+        } catch (final IOException e) {", "-            } catch (Exception e) {", "+            } catch (final Exception e) {", "-            boolean crash = (watchdog != null && watchdog.killedProcess())", "+            final boolean crash = (watchdog != null && watchdog.killedProcess())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68e98b431252935f576eee9fbd747a44", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "     public static void main(String[] args) throws IOException", "signatureAfterChange": "     public static void main(final String[] args) throws IOException", "diff": ["-    public static void main(String[] args) throws IOException {", "+    public static void main(final String[] args) throws IOException {", "-        Properties props = new Properties();", "+        final Properties props = new Properties();", "-                    String methodsList = args[i].substring(Constants.METHOD_NAMES.length());", "+                    final String methodsList = args[i].substring(Constants.METHOD_NAMES.length());", "-                } catch (IllegalArgumentException ex) {", "+                } catch (final IllegalArgumentException ex) {", "-                } catch (BuildException be) {", "+                } catch (final BuildException be) {", "-                FileInputStream in = new FileInputStream(args[i]", "+                final FileInputStream in = new FileInputStream(args[i]", "-                antThreadID = Integer.parseInt( args[i].substring(Constants.THREADID.length()) );", "+                antThreadID = Integer.parseInt(args[i].substring(Constants.THREADID.length()));", "-        Hashtable p = System.getProperties();", "-        for (Enumeration e = p.keys(); e.hasMoreElements();) {", "-            Object key = e.nextElement();", "+        final Hashtable p = System.getProperties();", "+        for (final Enumeration e = p.keys(); e.hasMoreElements();) {", "+            final Object key = e.nextElement();", "-                java.io.BufferedReader reader =", "+                final java.io.BufferedReader reader =", "-                    StringTokenizer st = new StringTokenizer(line, \",\");", "-                    String testListSpec = st.nextToken();", "-                    int colonIndex = testListSpec.indexOf(':');", "+                    final StringTokenizer st = new StringTokenizer(line, \",\");", "+                    final String testListSpec = st.nextToken();", "+                    final int colonIndex = testListSpec.indexOf(':');", "-                    JUnitTest t = new JUnitTest(testCaseName);", "+                    final JUnitTest t = new JUnitTest(testCaseName);", "-            } catch (IOException e) {", "+            } catch (final IOException e) {", "-            JUnitTest t = new JUnitTest(args[0]);", "+            final JUnitTest t = new JUnitTest(args[0]);"]}]}
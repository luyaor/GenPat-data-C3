{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "de0b87b62ffee35d2e104402a87830b6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bfe6589f79e2d8928bccab6c44337b4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antlibs/system/org/apache/ant/antlib/system/Ant.java", "commitBeforeChange": "65b70febb53b077317c4d678291f9af547c3d116", "commitAfterChange": "f9d1c1691c7e9d80b793f5178f6113c949fc2441", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void execute() throws ExecutionException", "signatureAfterChange": "     public void execute() throws AntException", "diff": ["-    public void execute() throws ExecutionException {", "+    public void execute() throws AntException {", "-        Object key = execService.setupBuild(model, getProperties());", "+        BuildKey key = execService.setupBuild(model, getProperties(), true);", "+", "+        if (output != null) {", "+            FileService fileService", "+                = (FileService) getCoreService(FileService.class);", "+", "+            File outfile = null;", "+            if (baseDir != null) {", "+                outfile = FileUtils.newFileUtils().resolveFile(baseDir, output);", "+            } else {", "+                outfile = fileService.resolveFile(output);", "+            }", "+            try {", "+                PrintStream out", "+                    = new PrintStream(new FileOutputStream(outfile));", "+                DefaultLogger logger = new DefaultLogger();", "+                logger.setMessageOutputLevel(MessageLevel.MSG_INFO);", "+                logger.setOutputPrintStream(out);", "+                logger.setErrorPrintStream(out);", "+                execService.addBuildListener(key, logger);", "+            } catch (IOException ex) {", "+                log(\"Ant: Can't set output to \" + output,", "+                    MessageLevel.MSG_INFO);", "+            }", "+        }", "+", "+        execService.releaseBuild(key);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "524d098bc43454b14091340aa5241a8b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/frontends/EmbeddedAnt.java", "commitBeforeChange": "8cab56ee0ec0c658d0dec674d305630eb8e88bf4", "commitAfterChange": "f5ba55efa18fa862c2a4f5762198c2a9481f287e", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private File resolveDirectory( final File baseDir, final String dir, final String name )         throws Exception", "signatureAfterChange": "     private File[] buildPath( final File baseDir,                               final String path,                               final String defaultPath,                               final String name )         throws Exception", "diff": ["-    private File resolveDirectory( final File baseDir, final String dir, final String name )", "+    private File[] buildPath( final File baseDir,", "+                              final String path,", "+                              final String defaultPath,", "+                              final String name )", "-        final File file = FileUtil.resolveFile( baseDir, dir );", "-        checkDirectory( file, name );", "-        return file;", "+        // Build the canonical list of files", "+        final ArrayList files = new ArrayList();", "+", "+        // Add the default path", "+        files.add( FileUtil.resolveFile( baseDir, defaultPath ) );", "+", "+        // Add the additional path", "+        if( path != null )", "+        {", "+            final String[] split = StringUtil.split( path, File.pathSeparator );", "+            for( int i = 0; i < split.length; i++ )", "+            {", "+                final String s = split[ i ];", "+                final File file = new File( s ).getAbsoluteFile();", "+                files.add( file );", "+            }", "+        }", "+", "+        // Check each one", "+        for( int i = 0; i < files.size(); i++ )", "+        {", "+            File file = (File)files.get( i );", "+            checkDirectory( file, name );", "+        }", "+", "+        return (File[])files.toArray( new File[ files.size() ] );"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "36ea35c175b108383243875b3e02d732", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88c4b045d83adf287ffa801ca3e2405f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/RmicAdvancedTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public void testDefaultBadClass() throws Exception", "signatureAfterChange": "     @Test     public void testDefaultBadClass() throws Exception", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testDefaultBadClass\",", "-                \"expected the class to fail\",", "-                Rmic.ERROR_RMIC_FAILED);", "+        try {", "+            buildRule.executeTarget(\"testDefaultBadClass\");", "+            fail(\"expected the class to fail\");", "+        } catch(BuildException ex) {", "+            AntAssert.assertContains(Rmic.ERROR_RMIC_FAILED, ex.getMessage());", "+        }", "-        assertLogContaining(\"unimplemented.class\");", "+        AntAssert.assertContains(\"unimplemented.class\", buildRule.getLog());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9892037c0dc19933fc775789c3f4b2c1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/RmicAdvancedTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 25, "signatureBeforeChange": "       public void NotestFailingAdapter() throws Exception", "signatureAfterChange": "       @Test     @Ignore(\"Previously named to prevent execution\")     public void NotestFailingAdapter() throws Exception", "diff": ["+    @Test", "+    @Ignore(\"Previously named to prevent execution\")", "-        expectBuildExceptionContaining(\"testFailingAdapter\",", "-                \"expected failures to propagate\",", "-                Rmic.ERROR_RMIC_FAILED);", "+        try {", "+            buildRule.executeTarget(\"testFailingAdapter\");", "+            fail(\"Expected failures to propogate\");", "+        } catch (BuildException ex) {", "+            AntAssert.assertContains(Rmic.ERROR_RMIC_FAILED, ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5b21a92559e25e779a290270a03cca1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/ParallelTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void testFail()", "signatureAfterChange": "     @Test     public void testFail()", "diff": ["+    @Test", "-        Project p = getProject();", "+        Project p = buildRule.getProject();", "-        expectBuildExceptionContaining(\"testFail\",", "-            \"fail task in one parallel branch\", FAILURE_MESSAGE);", "+        try {", "+            buildRule.executeTarget(\"testFail\");", "+            fail(\"fail task in one parallel branch\");", "+        } catch (BuildException ex) {", "+            assertEquals(FAILURE_MESSAGE, ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baac86605affd1bc3f81f6b0c9b173c0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/condition/IsReachableTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public void NotestFile() throws Exception", "signatureAfterChange": "      @Test     @Ignore(\"Previously named in a way to prevent execution\")     public void NotestFile() throws Exception", "diff": ["+    @Test", "+    @Ignore(\"Previously named in a way to prevent execution\")", "-        expectBuildExceptionContaining(\"testFile\",", "-                \"error on file URL\",", "-                IsReachable.ERROR_NO_HOST_IN_URL);", "+        try {", "+            buildRule.executeTarget(\"testFile\");", "+            fail(\"Build exception expected: error on file URL\");", "+        } catch(BuildException ex) {", "+            assertEquals(IsReachable.ERROR_NO_HOST_IN_URL, ex.getMessage());", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c554b95dde7a7eefa206abc20dbf36b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0dbcfdf1d1649bff3534f35a0a2967f3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/IntrospectionHelperTest.java", "commitBeforeChange": "64d149d3e9aebbc047bfc4d7942e892e2dc1bc4d", "commitAfterChange": "9844e736fe3bc77e6761f5031e371430907e0c1c", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "      public void testGetExtensionPoints()", "signatureAfterChange": "      public void testGetExtensionPoints()", "diff": ["-        assertEquals(\"extension count\", 3, extensions.size());", "+        final int adders = 2;", "+        assertEquals(\"extension count\", adders, extensions.size());", "-        assertExtMethod(extensions.get(0), \"add\", Number.class,", "-                        new Integer(2), new Integer(3));", "+        // this original test assumed something about the order of", "+        // add(Number) and addConfigured(Map) returned by reflection.", "+        // Unfortunately the assumption doesn't hold for all VMs", "+        // (failed on MacOS X using JDK 1.4.2_05) and the possible", "+        // combinatorics are too hard to check.  We really only want", "+        // to ensure that the more derived Hashtable can be found", "+        // before Map.", "+//        assertExtMethod(extensions.get(0), \"add\", Number.class,", "+//                        new Integer(2), new Integer(3));", "-        assertExtMethod(extensions.get(1), \"addConfigured\", Hashtable.class,", "+        assertExtMethod(extensions.get(adders - 2),", "+                        \"addConfigured\", Hashtable.class,", "-        assertExtMethod(extensions.get(2), \"addConfigured\", Map.class,", "+        assertExtMethod(extensions.get(adders - 1), \"addConfigured\", Map.class,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e2f263ba1bf1523c8b5c1e1533de25f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/CVSPass.java", "commitBeforeChange": "08535a06a25538edd320122b847d546ef085203d", "commitAfterChange": "2b6f0a872003b2f6dcc4ffd4f83fae9fd9cfb362", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public final void execute() throws BuildException", "signatureAfterChange": "     public final void execute() throws BuildException", "diff": ["+\t    String pwdfile = buf.toString() + cvsRoot + \" A\" + mangle(password);", "+", "+            log(\"Writing -> \" + pwdfile , project.MSG_DEBUG);", "+", "-", "-            writer.print(buf.toString());", "-            writer.print(cvsRoot);", "-            writer.print(\" A\");", "-            writer.println(mangle(password));", "-", "-            log(\"Writing -> \" + buf.toString() + cvsRoot + \" A\" + mangle(password), project.MSG_DEBUG);", "+            writer.println( pwdfile );"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c136a39eb6d8f0218fde895e2d4b298e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10d77aba9c250e02327f759c2b6e7bd7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "bb05312e66a2403d2405988dbaf0830cde65df7c", "commitAfterChange": "da5f3bfd256e383926c6ece58dba15a7d4bd5761", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "     protected Resource[][] grabNonFileSetResources(ResourceCollection[] rcs)", "signatureAfterChange": "     protected Resource[][] grabNonFileSetResources(ResourceCollection[] rcs)", "diff": ["-            ArrayList dirs = new ArrayList();", "-            ArrayList files = new ArrayList();", "+            ArrayList<Resource> dirs = new ArrayList<Resource>();", "+            ArrayList<Resource> files = new ArrayList<Resource>();", "-            Collections.sort(dirs, new Comparator() {", "-                    public int compare(Object o1, Object o2) {", "-                        Resource r1 = (Resource) o1;", "-                        Resource r2 = (Resource) o2;", "+            Collections.sort(dirs, new Comparator<Resource>() {", "+                    public int compare(Resource r1, Resource r2) {", "-            ArrayList rs = new ArrayList(dirs);", "+            ArrayList<Resource> rs = new ArrayList<Resource>(dirs);", "-            result[i] = (Resource[]) rs.toArray(new Resource[rs.size()]);", "+            result[i] = rs.toArray(new Resource[rs.size()]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6242519827fe2f01a2faf5c8d7466bcc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Project.java", "commitBeforeChange": "d25488cbbb28cf25e1f91f714c70999fd105432d", "commitAfterChange": "3d706ab8188a674936880b6f4530b0cf3991758b", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 97, "signatureBeforeChange": "     private void tsort(String root, Hashtable targetTable,                              Hashtable state, Stack visiting,                              Vector ret)         throws BuildException", "signatureAfterChange": "     private void tsort(String root, Hashtable<String, Target> targetTable,                              Hashtable<String, String> state, Stack<String> visiting,                              Vector<Target> ret)         throws BuildException", "diff": ["-    private void tsort(String root, Hashtable targetTable,", "-                             Hashtable state, Stack visiting,", "-                             Vector ret)", "+    private void tsort(String root, Hashtable<String, Target> targetTable,", "+                             Hashtable<String, String> state, Stack<String> visiting,", "+                             Vector<Target> ret)", "-        Target target = (Target) targetTable.get(root);", "+        Target target = targetTable.get(root);", "-            StringBuffer sb = new StringBuffer(\"Target \\\"\");", "+            StringBuilder sb = new StringBuilder(\"Target \\\"\");", "-                String parent = (String) visiting.peek();", "+                String parent = visiting.peek();", "-        for (Enumeration en = target.getDependencies(); en.hasMoreElements();) {", "-            String cur = (String) en.nextElement();", "-            String m = (String) state.get(cur);", "+        for (Enumeration<String> en = target.getDependencies(); en.hasMoreElements();) {", "+            String cur = en.nextElement();", "+            String m = state.get(cur);", "-        String p = (String) visiting.pop();", "+        String p = visiting.pop();"]}]}
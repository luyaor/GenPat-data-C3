{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "174183fd0f00dc94817346bdaeef36e3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41071db02e39b8d5370f24ab79dc27a1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java", "commitBeforeChange": "867ec77b0d9efa8819be2ebf82cace4600b929ee", "commitAfterChange": "5337488612953eb072e38cb99e6b5d60999297da", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": "      protected DescriptorHandler getWeblogicDescriptorHandler(File srcDir)", "signatureAfterChange": "      protected DescriptorHandler getWeblogicDescriptorHandler(final File srcDir)", "diff": ["-    protected DescriptorHandler getWeblogicDescriptorHandler(File srcDir) {", "+    protected DescriptorHandler getWeblogicDescriptorHandler(final File srcDir) {", "-                        File descriptorFile = new File(getConfig().descriptorDir, fileName);", "+                        File descriptorFile = new File(srcDir, fileName);", "+                        ", "+                            ", "+        for (Iterator i = getConfig().dtdLocations.iterator(); i.hasNext();) {", "+            EjbJar.DTDLocation dtdLocation = (EjbJar.DTDLocation)i.next();", "+            handler.registerDTD(dtdLocation.getPublicId(), dtdLocation.getLocation());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66a4d3af38d245e4a5a8e090aed710d5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antlibs/monitor/org/apache/ant/antlib/monitor/MonitorAspect.java", "commitBeforeChange": "26d9c6536e7e605b92a6e4b20eb0cd25e116a689", "commitAfterChange": "f19f07d6e4c72f241057ecfc32d80be21201bbf7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public Object preExecuteTask(Task task, AspectValueCollection aspectValues)          throws AntException", "signatureAfterChange": "     public Object preExecuteTask(Task task, AspectValueCollection aspectValues)          throws AntException", "diff": ["-        String taskName = task.getClass().getName();", "-        MonitorRecord record = new MonitorRecord(taskName);", "-        return record;", "+        System.gc();", "+        AntContext taskContext = task.getAntContext();", "+        BuildElement model = taskContext.getModel();", "+        String name = (model == null) ? task.getClass().getName()", "+            : model.getType();", "+        return new MonitorRecord(name, taskContext.getLocation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "838112d250a6a9ece07f2c5d7adba8b2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/RuntimeConfigurable.java", "commitBeforeChange": "d884406a09baca6c865a5281f08bb92000928541", "commitAfterChange": "84abb27b2f8c970557388bb60f09f1c3409d8f75", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public synchronized void maybeConfigure(Project p, boolean configureChildren)         throws BuildException", "signatureAfterChange": "     public synchronized void maybeConfigure(Project p, boolean configureChildren)         throws BuildException", "diff": ["-                Object attrValue = null;", "+                Object attrValue = PropertyHelper.getPropertyHelper(p).parseProperties(value);", "-                    attrValue = value;", "-                } else {", "-                    attrValue = PropertyHelper.getPropertyHelper(p).parseProperties(value);", "+                    for (Iterator attrs = ((MacroInstance) target).getMacroDef().getAttributes().iterator(); attrs.hasNext();) {", "+                        MacroDef.Attribute attr = (MacroDef.Attribute) attrs.next();", "+                        if (attr.getName().equals(name)) {", "+                            if (!attr.isDoubleExpanding()) {", "+                                attrValue = value;", "+                            }", "+                            break;", "+                        }", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d254b6d609a985f71ec2a458933bc49a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ComponentHelper.java", "commitBeforeChange": "780ad2d725a7f88a26d8ea33a804fa5c8becfc8f", "commitAfterChange": "31deeb980977afb1cfe3234eb17a1360aab49d5e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void initSubProject(ComponentHelper helper)", "signatureAfterChange": "     public void initSubProject(ComponentHelper helper)", "diff": ["+        }", "+", "+        // Add the restricted definitions", "+        for (Iterator i = helper.restrictedDefinitions.entrySet().iterator();", "+             i.hasNext();) {", "+            Map.Entry entry = (Map.Entry) i.next();", "+            restrictedDefinitions.put(", "+                entry.getKey(), new ArrayList((List) entry.getValue()));"]}]}
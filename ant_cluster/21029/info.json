{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2016a9652577178c30e7763bb3ef2068", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98f6416a3a9d8d36c6a0c8013d511261", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/taskdefs/StyleTest.java", "commitBeforeChange": "5800b026fac0179cb373c1c85261c04bf2b54e8e", "commitAfterChange": "88f1be2d0462de59e99bf085522756a647195248", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testStyleIsSet() throws Exception", "signatureAfterChange": "      public void testStyleIsSet() throws Exception", "diff": ["-        expectBuildException(\"testStyleIsSet\", \"no stylesheet specified\");", "+        expectSpecificBuildException(\"testStyleIsSet\",", "+                \"no stylesheet specified\", \"specify the \" +", "+                \"stylesheet either as a filename in style \" +", "+                \"attribute or as a nested resource\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8700fd99439ceffe20c94949540aa93", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/IContract.java", "commitBeforeChange": "d60b6ca1eea0a3372c99965f3c15466328659908", "commitAfterChange": "c6c232893c39257745a8f7a618bcdb5c59791cae", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        if( dirty ) {", "+        if (dirty) {", "-            if( useControlFile && !preModified ) {", "+", "+            if (useControlFile && !preModified) {", "-            if( useControlFile && !postModified ) {", "+            if (useControlFile && !postModified) {", "-            if( useControlFile && !invariantModified ) {", "+            if (useControlFile && !invariantModified) {", "-            if( ( pre || post || invariant ) && controlFile != null ) {", "-                log( \"WARNING: specifying pre,post or invariant will override control file settings\" );", "+            if ((pre || post || invariant) && controlFile != null) {", "+                log(\"WARNING: specifying pre,post or invariant will \"", "+                     + \"override control file settings\");", "-", "-            getProject().addBuildListener( new IContractPresenceDetector() );", "+            getProject().addBuildListener(new IContractPresenceDetector());", "-            Mkdir mkdir = (Mkdir) project.createTask( \"mkdir\" );", "-            mkdir.setDir( instrumentDir );", "+            Mkdir mkdir = (Mkdir) project.createTask(\"mkdir\");", "+", "+            mkdir.setDir(instrumentDir);", "-            mkdir.setDir( buildDir );", "+            mkdir.setDir(buildDir);", "-            mkdir.setDir( repositoryDir );", "+            mkdir.setDir(repositoryDir);", "-            ClasspathHelper classpathHelper = new ClasspathHelper( compiler );", "-            classpathHelper.modify( baseClasspath );", "+            ClasspathHelper classpathHelper = new ClasspathHelper(compiler);", "+", "+            classpathHelper.modify(baseClasspath);", "-            beforeInstrumentationClasspath.append( new Path( getProject(), srcDir.getAbsolutePath() ) );", "+", "+            beforeInstrumentationClasspath.append(new Path(getProject(),", "+                srcDir.getAbsolutePath()));", "-            afterInstrumentationClasspath.append( new Path( getProject(), instrumentDir.getAbsolutePath() ) );", "-            afterInstrumentationClasspath.append( new Path( getProject(), repositoryDir.getAbsolutePath() ) );", "-            afterInstrumentationClasspath.append( new Path( getProject(), srcDir.getAbsolutePath() ) );", "-            afterInstrumentationClasspath.append( new Path( getProject(), buildDir.getAbsolutePath() ) );", "+", "+            afterInstrumentationClasspath.append(new Path(getProject(), instrumentDir.getAbsolutePath()));", "+            afterInstrumentationClasspath.append(new Path(getProject(), repositoryDir.getAbsolutePath()));", "+            afterInstrumentationClasspath.append(new Path(getProject(), srcDir.getAbsolutePath()));", "+            afterInstrumentationClasspath.append(new Path(getProject(), buildDir.getAbsolutePath()));", "-            repositoryClasspath.append( new Path( getProject(), instrumentDir.getAbsolutePath() ) );", "-            repositoryClasspath.append( new Path( getProject(), srcDir.getAbsolutePath() ) );", "-            repositoryClasspath.append( new Path( getProject(), repositoryDir.getAbsolutePath() ) );", "-            repositoryClasspath.append( new Path( getProject(), buildDir.getAbsolutePath() ) );", "+", "+            repositoryClasspath.append(new Path(getProject(), instrumentDir.getAbsolutePath()));", "+            repositoryClasspath.append(new Path(getProject(), srcDir.getAbsolutePath()));", "+            repositoryClasspath.append(new Path(getProject(), repositoryDir.getAbsolutePath()));", "+            repositoryClasspath.append(new Path(getProject(), buildDir.getAbsolutePath()));", "-            iContractClasspath.append( new Path( getProject(), System.getProperty( \"java.home\" ) + File.separator + \"..\" + File.separator + \"lib\" + File.separator + \"tools.jar\" ) );", "-            iContractClasspath.append( new Path( getProject(), srcDir.getAbsolutePath() ) );", "-            iContractClasspath.append( new Path( getProject(), repositoryDir.getAbsolutePath() ) );", "-            iContractClasspath.append( new Path( getProject(), instrumentDir.getAbsolutePath() ) );", "-            iContractClasspath.append( new Path( getProject(), buildDir.getAbsolutePath() ) );", "+", "+            iContractClasspath.append(new Path(getProject(), System.getProperty(\"java.home\") + File.separator + \"..\" + File.separator + \"lib\" + File.separator + \"tools.jar\"));", "+            iContractClasspath.append(new Path(getProject(), srcDir.getAbsolutePath()));", "+            iContractClasspath.append(new Path(getProject(), repositoryDir.getAbsolutePath()));", "+            iContractClasspath.append(new Path(getProject(), instrumentDir.getAbsolutePath()));", "+            iContractClasspath.append(new Path(getProject(), buildDir.getAbsolutePath()));", "-            Java iContract = (Java) project.createTask( \"java\" );", "-            iContract.setTaskName( getTaskName() );", "-            iContract.setFork( true );", "-            iContract.setClassname( \"com.reliablesystems.iContract.Tool\" );", "-            iContract.setClasspath( iContractClasspath );", "+            Java iContract = (Java) project.createTask(\"java\");", "+", "+            iContract.setTaskName(getTaskName());", "+            iContract.setFork(true);", "+            iContract.setClassname(\"com.reliablesystems.iContract.Tool\");", "+            iContract.setClasspath(iContractClasspath);", "-            args.append( directiveString() );", "-            args.append( \"-v\" ).append( verbosity ).append( \" \" );", "-            args.append( \"-b\" ).append( \"\\\"\" ).append( icCompiler ).append( \" -classpath \" ).append( beforeInstrumentationClasspath ).append( \"\\\" \" );", "-            args.append( \"-c\" ).append( \"\\\"\" ).append( icCompiler ).append( \" -classpath \" ).append( afterInstrumentationClasspath ).append( \" -d \" ).append( buildDir ).append( \"\\\" \" );", "-            args.append( \"-n\" ).append( \"\\\"\" ).append( icCompiler ).append( \" -classpath \" ).append( repositoryClasspath ).append( \"\\\" \" );", "-            args.append( \"-d\" ).append( failThrowable ).append( \" \" );", "-            args.append( \"-o\" ).append( instrumentDir ).append( File.separator ).append( \"@p\" ).append( File.separator ).append( \"@f.@e \" );", "-            args.append( \"-k\" ).append( repositoryDir ).append( File.separator ).append( \"@p \" );", "-            args.append( quiet ? \"-q \" : \"\" );", "-            args.append( instrumentall ? \"-a \" : \"\" ); // reinstrument everything if controlFile exists and is newer than any class", "-            args.append( \"@\" ).append( targets.getAbsolutePath() );", "-            iContract.createArg().setLine( args.toString() );", "+", "+            args.append(directiveString());", "+            args.append(\"-v\").append(verbosity).append(\" \");", "+            args.append(\"-b\").append(\"\\\"\").append(icCompiler).append(\" -classpath \").append(beforeInstrumentationClasspath).append(\"\\\" \");", "+            args.append(\"-c\").append(\"\\\"\").append(icCompiler).append(\" -classpath \").append(afterInstrumentationClasspath).append(\" -d \").append(buildDir).append(\"\\\" \");", "+            args.append(\"-n\").append(\"\\\"\").append(icCompiler).append(\" -classpath \").append(repositoryClasspath).append(\"\\\" \");", "+            args.append(\"-d\").append(failThrowable).append(\" \");", "+            args.append(\"-o\").append(instrumentDir).append(File.separator).append(\"@p\").append(File.separator).append(\"@f.@e \");", "+            args.append(\"-k\").append(repositoryDir).append(File.separator).append(\"@p \");", "+            args.append(quiet ? \"-q \" : \"\");", "+            args.append(instrumentall ? \"-a \" : \"\");// reinstrument everything if controlFile exists and is newer than any class", "+            args.append(\"@\").append(targets.getAbsolutePath());", "+            iContract.createArg().setLine(args.toString());", "-            if( updateIcontrol ) {", "+            if (updateIcontrol) {", "-                try { // to read existing propertiesfile", "-                    iControlProps.load( new FileInputStream( \"icontrol.properties\" ) );", "-                } catch( IOException e ) {", "-                    log( \"File icontrol.properties not found. That's ok. Writing a default one.\" );", "-                }", "-                iControlProps.setProperty( \"sourceRoot\", srcDir.getAbsolutePath() );", "-                iControlProps.setProperty( \"classRoot\", classDir.getAbsolutePath() );", "-                iControlProps.setProperty( \"classpath\", afterInstrumentationClasspath.toString() );", "-                iControlProps.setProperty( \"controlFile\", controlFile.getAbsolutePath() );", "-                iControlProps.setProperty( \"targetsFile\", targets.getAbsolutePath() );", "-                try { // to read existing propertiesfile", "-                    iControlProps.store( new FileOutputStream( \"icontrol.properties\" ), ICONTROL_PROPERTIES_HEADER );", "-                    log( \"Updated icontrol.properties\" );", "-                } catch( IOException e ) {", "-                    log( \"Couldn't write icontrol.properties.\" );", "+                try {// to read existing propertiesfile", "+                    iControlProps.load(new FileInputStream(\"icontrol.properties\"));", "+                } catch (IOException e) {", "+                    log(\"File icontrol.properties not found. That's ok. Writing a default one.\");", "+                }", "+                iControlProps.setProperty(\"sourceRoot\", srcDir.getAbsolutePath());", "+                iControlProps.setProperty(\"classRoot\", classDir.getAbsolutePath());", "+                iControlProps.setProperty(\"classpath\", afterInstrumentationClasspath.toString());", "+                iControlProps.setProperty(\"controlFile\", controlFile.getAbsolutePath());", "+                iControlProps.setProperty(\"targetsFile\", targets.getAbsolutePath());", "+", "+                try {// to read existing propertiesfile", "+                    iControlProps.store(new FileOutputStream(\"icontrol.properties\"), ICONTROL_PROPERTIES_HEADER);", "+                    log(\"Updated icontrol.properties\");", "+                } catch (IOException e) {", "+                    log(\"Couldn't write icontrol.properties.\");", "-            if( result != 0 ) {", "-                if( iContractMissing ) {", "-                    log( \"iContract can't be found on your classpath. Your classpath is:\" );", "-                    log( classpath.toString() );", "-                    log( \"If you don't have the iContract jar, go get it at http://www.reliable-systems.com/tools/\" );", "-                }", "-                throw new BuildException( \"iContract instrumentation failed. Code=\" + result );", "-            }", "-        } else { // not dirty", "+            if (result != 0) {", "+                if (iContractMissing) {", "+                    log(\"iContract can't be found on your classpath. Your classpath is:\");", "+                    log(classpath.toString());", "+                    log(\"If you don't have the iContract jar, go get it at http://www.reliable-systems.com/tools/\");", "+                }", "+                throw new BuildException(\"iContract instrumentation failed. Code=\" + result);", "+            }", "+        } else {// not dirty"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aaa3dca265a6257501191c878fdd3da4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "ee0fc90c1af3f49fbfc357258ccf63aafd230b10", "commitAfterChange": "27868015eb791e7c83ebc0e12f6a255575504d0e", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "     protected ArchiveState getResourcesToAdd(FileSet[] filesets,                                              File zipFile,                                              boolean needsUpdate)         throws BuildException", "signatureAfterChange": "     protected ArchiveState getResourcesToAdd(FileSet[] filesets,                                              File zipFile,                                              boolean needsUpdate)         throws BuildException", "diff": ["-                        + \" not updated because no new files were included.\",", "-                        Project.MSG_VERBOSE);", "+                                   + \" not updated because no new files were\"", "+                                   + \" included.\", Project.MSG_VERBOSE);", "-                    logOnFirstPass(\"Warning: skipping \" + archiveType + \" archive \"", "-                        + zipFile + \" because no files were included.\",", "-                        Project.MSG_WARN);", "+                    logOnFirstPass(\"Warning: skipping \" + archiveType", "+                                   + \" archive \" + zipFile", "+                                   + \" because no files were included.\",", "+                                   Project.MSG_WARN);"]}]}
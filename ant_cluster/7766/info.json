{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e8e800569a23ecd34f68e4b07e41322", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48fa4aaa79f214a784306527be1f711b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "228fb9839c21a0a853598e114faca72c8e9340e7", "commitAfterChange": "9922008d657c72235c402343fd88847b044014ad", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 0, "signatureBeforeChange": "      protected static void hbMakeCodeLengths(char[] len, int[] freq,                                             int alphaSize, int maxLen)", "signatureAfterChange": "     protected static void hbMakeCodeLengths(char[] len, int[] freq,                                             int alphaSize, int maxLen)", "diff": ["-", "+     */", "-          Nodes and heap entries run from 1.  Entry 0", "-          for both the heap and nodes is a sentinel.", "-        */", "-        int nNodes, nHeap, n1, n2, i, j, k;", "-        boolean  tooLong;", "+         * Nodes and heap entries run from 1. Entry 0 for both the heap and", "+         * nodes is a sentinel.", "+         */", "+        final int[] heap = new int[MAX_ALPHA_SIZE * 2];", "+        final int[] weight = new int[MAX_ALPHA_SIZE * 2];", "+        final int[] parent = new int[MAX_ALPHA_SIZE * 2];", "-        int[] heap = new int[MAX_ALPHA_SIZE + 2];", "-        int[] weight = new int[MAX_ALPHA_SIZE * 2];", "-        int[] parent = new int[MAX_ALPHA_SIZE * 2];", "-", "-        for (i = 0; i < alphaSize; i++) {", "+        for (int i = alphaSize; --i >= 0;) {", "-        while (true) {", "-            nNodes = alphaSize;", "-            nHeap = 0;", "+        for (boolean tooLong = true; tooLong;) {", "+            tooLong = false;", "+            int nNodes = alphaSize;", "+            int nHeap = 0;", "-            for (i = 1; i <= alphaSize; i++) {", "+            for (int i = 1; i <= alphaSize; i++) {", "-                {", "-                    int zz, tmp;", "-                    zz = nHeap;", "-                    tmp = heap[zz];", "-                    while (weight[tmp] < weight[heap[zz >> 1]]) {", "-                        heap[zz] = heap[zz >> 1];", "-                        zz >>= 1;", "-                    }", "-                    heap[zz] = tmp;", "+", "+                int zz = nHeap;", "+                int tmp = heap[zz];", "+                while (weight[tmp] < weight[heap[zz >> 1]]) {", "+                    heap[zz] = heap[zz >> 1];", "+                    zz >>= 1;", "-            }", "-            if (!(nHeap < (MAX_ALPHA_SIZE + 2))) {", "-                panic();", "+                heap[zz] = tmp;", "+            // assert (nHeap < (MAX_ALPHA_SIZE + 2)) : nHeap;", "+", "-                n1 = heap[1];", "+                int n1 = heap[1];", "-                {", "-                    int zz = 0, yy = 0, tmp = 0;", "-                    zz = 1;", "-                    tmp = heap[zz];", "-                    while (true) {", "-                        yy = zz << 1;", "-                        if (yy > nHeap) {", "-                            break;", "-                        }", "-                        if (yy < nHeap", "-                            && weight[heap[yy + 1]] < weight[heap[yy]]) {", "-                            yy++;", "-                        }", "-                        if (weight[tmp] < weight[heap[yy]]) {", "-                            break;", "-                        }", "-                        heap[zz] = heap[yy];", "-                        zz = yy;", "+", "+                int yy = 0;", "+                int zz = 1;", "+                int tmp = heap[1];", "+", "+                while (true) {", "+                    yy = zz << 1;", "+", "+                    if (yy > nHeap) {", "+                        break;", "-                    heap[zz] = tmp;", "+", "+                    if ((yy < nHeap)", "+                        && (weight[heap[yy + 1]] < weight[heap[yy]])) {", "+                        yy++;", "+                    }", "+", "+                    if (weight[tmp] < weight[heap[yy]]) {", "+                        break;", "+                    }", "+", "+                    heap[zz] = heap[yy];", "+                    zz = yy;", "-                n2 = heap[1];", "+", "+                heap[zz] = tmp;", "+", "+                int n2 = heap[1];", "-                {", "-                    int zz = 0, yy = 0, tmp = 0;", "-                    zz = 1;", "-                    tmp = heap[zz];", "-                    while (true) {", "-                        yy = zz << 1;", "-                        if (yy > nHeap) {", "-                            break;", "-                        }", "-                        if (yy < nHeap", "-                            && weight[heap[yy + 1]] < weight[heap[yy]]) {", "-                            yy++;", "-                        }", "-                        if (weight[tmp] < weight[heap[yy]]) {", "-                            break;", "-                        }", "-                        heap[zz] = heap[yy];", "-                        zz = yy;", "+", "+                yy = 0;", "+                zz = 1;", "+                tmp = heap[1];", "+", "+                while (true) {", "+                    yy = zz << 1;", "+", "+                    if (yy > nHeap) {", "+                        break;", "-                    heap[zz] = tmp;", "+", "+                    if ((yy < nHeap)", "+                        && (weight[heap[yy + 1]] < weight[heap[yy]])) {", "+                        yy++;", "+                    }", "+", "+                    if (weight[tmp] < weight[heap[yy]]) {", "+                        break;", "+                    }", "+", "+                    heap[zz] = heap[yy];", "+                    zz = yy;", "+", "+                heap[zz] = tmp;", "-                weight[nNodes] = ((weight[n1] & 0xffffff00)", "-                                  + (weight[n2] & 0xffffff00))", "-                    | (1 + (((weight[n1] & 0x000000ff)", "-                            > (weight[n2] & 0x000000ff))", "-                            ? (weight[n1] & 0x000000ff)", "-                            : (weight[n2] & 0x000000ff)));", "+                final int weight_n1 = weight[n1];", "+                final int weight_n2 = weight[n2];", "+                weight[nNodes] = (((weight_n1 & 0xffffff00)", "+                                   + (weight_n2 & 0xffffff00))", "+                                  |", "+                                  (1 + (((weight_n1 & 0x000000ff)", "+                                         > (weight_n2 & 0x000000ff))", "+                                        ? (weight_n1 & 0x000000ff)", "+                                        : (weight_n2 & 0x000000ff))", "+                                   ));", "-                {", "-                    int zz = 0, tmp = 0;", "-                    zz = nHeap;", "-                    tmp = heap[zz];", "-                    while (weight[tmp] < weight[heap[zz >> 1]]) {", "-                        heap[zz] = heap[zz >> 1];", "-                        zz >>= 1;", "-                    }", "-                    heap[zz] = tmp;", "+", "+                tmp = 0;", "+                zz = nHeap;", "+                tmp = heap[zz];", "+                final int weight_tmp = weight[tmp];", "+                while (weight_tmp < weight[heap[zz >> 1]]) {", "+                    heap[zz] = heap[zz >> 1];", "+                    zz >>= 1;", "-            }", "-            if (!(nNodes < (MAX_ALPHA_SIZE * 2))) {", "-                panic();", "+                heap[zz] = tmp;", "+", "-            tooLong = false;", "-            for (i = 1; i <= alphaSize; i++) {", "-                j = 0;", "-                k = i;", "-                while (parent[k] >= 0) {", "-                    k = parent[k];", "+            // assert (nNodes < (MAX_ALPHA_SIZE * 2)) : nNodes;", "+", "+            for (int i = 1; i <= alphaSize; i++) {", "+                int j = 0;", "+                int k = i;", "+", "+                for (int parent_k; (parent_k = parent[k]) >= 0;) {", "+                    k = parent_k;", "+", "-            if (!tooLong) {", "-                break;", "-            }", "-", "-            for (i = 1; i < alphaSize; i++) {", "-                j = weight[i] >> 8;", "-                j = 1 + (j / 2);", "-                weight[i] = j << 8;", "+            if (tooLong) {", "+                for (int i = 1; i < alphaSize; i++) {", "+                    int j = weight[i] >> 8;", "+                    j = 1 + (j >> 1);", "+                    weight[i] = j << 8;", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95015df9b2c2281cec3bf3e84e370b3c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "3477bbf6474cdd2b70b12eb638e64415a4f1c2ec", "commitAfterChange": "134d95afef9b42cf08f2eccb077b97525ac38034", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 0, "signatureBeforeChange": "      protected static void hbMakeCodeLengths(char[] len, int[] freq,                                             int alphaSize, int maxLen)", "signatureAfterChange": "     protected static void hbMakeCodeLengths(char[] len, int[] freq,                                             int alphaSize, int maxLen)", "diff": ["+     */", "-        int nNodes, nHeap, n1, n2, i, j, k;", "-        boolean  tooLong;", "+        final int[] heap    = new int[MAX_ALPHA_SIZE * 2];", "+        final int[] weight  = new int[MAX_ALPHA_SIZE * 2];", "+        final int[] parent  = new int[MAX_ALPHA_SIZE * 2];", "-        int[] heap = new int[MAX_ALPHA_SIZE + 2];", "-        int[] weight = new int[MAX_ALPHA_SIZE * 2];", "-        int[] parent = new int[MAX_ALPHA_SIZE * 2];", "-", "-        for (i = 0; i < alphaSize; i++) {", "+        for (int i = alphaSize; --i >= 0;) {", "-        while (true) {", "-            nNodes = alphaSize;", "-            nHeap = 0;", "+        for (boolean tooLong = true; tooLong;) {", "+            tooLong = false;", "+            int nNodes = alphaSize;", "+            int nHeap = 0;", "-            for (i = 1; i <= alphaSize; i++) {", "+            for (int i = 1; i <= alphaSize; i++) {", "-                {", "-                    int zz, tmp;", "-                    zz = nHeap;", "-                    tmp = heap[zz];", "-                    while (weight[tmp] < weight[heap[zz >> 1]]) {", "-                        heap[zz] = heap[zz >> 1];", "-                        zz >>= 1;", "-                    }", "-                    heap[zz] = tmp;", "+", "+                int zz = nHeap;", "+                int tmp = heap[zz];", "+                while (weight[tmp] < weight[heap[zz >> 1]]) {", "+                    heap[zz] = heap[zz >> 1];", "+                    zz >>= 1;", "-            }", "-            if (!(nHeap < (MAX_ALPHA_SIZE + 2))) {", "-                panic();", "+                heap[zz] = tmp;", "+            // assert (nHeap < (MAX_ALPHA_SIZE + 2)) : nHeap;", "+", "-                n1 = heap[1];", "+                int n1 = heap[1];", "-                {", "-                    int zz = 0, yy = 0, tmp = 0;", "-                    zz = 1;", "-                    tmp = heap[zz];", "-                    while (true) {", "-                        yy = zz << 1;", "-                        if (yy > nHeap) {", "-                            break;", "-                        }", "-                        if (yy < nHeap", "-                            && weight[heap[yy + 1]] < weight[heap[yy]]) {", "-                            yy++;", "-                        }", "-                        if (weight[tmp] < weight[heap[yy]]) {", "-                            break;", "-                        }", "-                        heap[zz] = heap[yy];", "-                        zz = yy;", "+", "+                int yy = 0;", "+                int zz = 1;", "+                int tmp = heap[1];", "+", "+                while (true) {", "+                    yy = zz << 1;", "+", "+                    if (yy > nHeap) {", "+                        break;", "-                    heap[zz] = tmp;", "+", "+                    if ((yy < nHeap)", "+                        && (weight[heap[yy + 1]] < weight[heap[yy]])) {", "+                        yy++;", "+                    }", "+", "+                    if (weight[tmp] < weight[heap[yy]]) {", "+                        break;", "+                    }", "+", "+                    heap[zz] = heap[yy];", "+                    zz = yy;", "-                n2 = heap[1];", "+", "+                heap[zz] = tmp;", "+", "+                int n2 = heap[1];", "-                {", "-                    int zz = 0, yy = 0, tmp = 0;", "-                    zz = 1;", "-                    tmp = heap[zz];", "-                    while (true) {", "-                        yy = zz << 1;", "-                        if (yy > nHeap) {", "-                            break;", "-                        }", "-                        if (yy < nHeap", "-                            && weight[heap[yy + 1]] < weight[heap[yy]]) {", "-                            yy++;", "-                        }", "-                        if (weight[tmp] < weight[heap[yy]]) {", "-                            break;", "-                        }", "-                        heap[zz] = heap[yy];", "-                        zz = yy;", "+", "+                yy = 0;", "+                zz = 1;", "+                tmp = heap[1];", "+", "+                while (true) {", "+                    yy = zz << 1;", "+", "+                    if (yy > nHeap) {", "+                        break;", "-                    heap[zz] = tmp;", "+", "+                    if ((yy < nHeap)", "+                        && (weight[heap[yy + 1]] < weight[heap[yy]])) {", "+                        yy++;", "+                    }", "+", "+                    if (weight[tmp] < weight[heap[yy]]) {", "+                        break;", "+                    }", "+", "+                    heap[zz] = heap[yy];", "+                    zz = yy;", "+", "+                heap[zz] = tmp;", "-                weight[nNodes] = ((weight[n1] & 0xffffff00)", "-                                  + (weight[n2] & 0xffffff00))", "-                    | (1 + (((weight[n1] & 0x000000ff)", "-                            > (weight[n2] & 0x000000ff))", "-                            ? (weight[n1] & 0x000000ff)", "-                            : (weight[n2] & 0x000000ff)));", "-", "+                final int weight_n1 = weight[n1];", "+                final int weight_n2 = weight[n2];", "+                weight[nNodes] = (((weight_n1 & 0xffffff00)", "+                                   + (weight_n2 & 0xffffff00))", "+                                  | (1 + (((weight_n1 & 0x000000ff)", "+                                           > (weight_n2 & 0x000000ff))", "+                                          ? (weight_n1 & 0x000000ff)", "+                                          : (weight_n2 & 0x000000ff))));", "+                ", "-                {", "-                    int zz = 0, tmp = 0;", "-                    zz = nHeap;", "-                    tmp = heap[zz];", "-                    while (weight[tmp] < weight[heap[zz >> 1]]) {", "-                        heap[zz] = heap[zz >> 1];", "-                        zz >>= 1;", "-                    }", "-                    heap[zz] = tmp;", "+", "+                tmp = 0;", "+                zz = nHeap;", "+                tmp = heap[zz];", "+                final int weight_tmp = weight[tmp];", "+                while (weight_tmp < weight[heap[zz >> 1]]) {", "+                    heap[zz] = heap[zz >> 1];", "+                    zz >>= 1;", "-            }", "-            if (!(nNodes < (MAX_ALPHA_SIZE * 2))) {", "-                panic();", "+                heap[zz] = tmp;", "+", "-            tooLong = false;", "-            for (i = 1; i <= alphaSize; i++) {", "-                j = 0;", "-                k = i;", "-                while (parent[k] >= 0) {", "-                    k = parent[k];", "+            // assert (nNodes < (MAX_ALPHA_SIZE * 2)) : nNodes;", "+", "+            for (int i = 1; i <= alphaSize; i++) {", "+                int j = 0;", "+                int k = i;", "+", "+                for (int parent_k; (parent_k = parent[k]) >= 0;) {", "+                    k = parent_k;", "+", "-            if (!tooLong) {", "-                break;", "-            }", "-", "-            for (i = 1; i < alphaSize; i++) {", "-                j = weight[i] >> 8;", "-                j = 1 + (j / 2);", "-                weight[i] = j << 8;", "+            if (tooLong) {", "+                for (int i = 1; i < alphaSize; i++) {", "+                    int j = weight[i] >> 8;", "+                    j = 1 + (j >> 1);", "+                    weight[i] = j << 8;", "+                }"]}]}
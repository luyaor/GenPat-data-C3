{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "213bb12fc956fd54f0b4ccb9e1c85ee2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1194d7f6dd109fe1bb17f310c3ed84f3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/pvcs/Pvcs.java", "commitBeforeChange": "448f5ee22c42b02fb503c012fa81ece4949fba61", "commitAfterChange": "7d38166d02b60e2b2c8c5d422cf3f6d522d74d9f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void createFolders(File file) throws IOException, ParseException", "signatureAfterChange": "     private void createFolders(File file) throws IOException, ParseException", "diff": ["-                    line.startsWith(getLineStart())) {", "+                    (line.length() >3 &&", "+                     line.startsWith(\"\\\"\") &&", "+                     Character.isLetter(line.charAt(1)) &&", "+                     String.valueOf(line.charAt(2)).equals(\":\") &&", "+                     String.valueOf(line.charAt(3)).equals(\"\\\\\"))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b542ec9b1928d8c594564ec7395ae76", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "4213be7405b3972ce4b346144f04a1878f29561d", "commitAfterChange": "3930d3e938dfbe45835ef7b28d00d5714bc304d0", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void run()", "signatureAfterChange": "     public void run()", "diff": ["-        res = new TestResult();", "+        res = new IgnoredTestResult();", "-                            formalParams = new Class[] {Class.class};", "-                            actualParams = new Object[] {testClass};", "+                            formalParams = new Class[] {Class.class, JUnit4TestAdapterCache.class};", "+                            actualParams = new Object[] {testClass, CustomJUnit4TestAdapterCache.getInstance()};", "-                junitTest.setCounts(1, 0, 1);", "+                junitTest.setCounts(1, 0, 1, 0);", "-                        junitTest.setCounts(res.runCount(), cnts[0], cnts[1]);", "+                        junitTest.setCounts(res.runCount() + res.ignoredCount(), cnts[0], cnts[1], res.ignoredCount() + res.skippedCount());", "-                        junitTest.setCounts(res.runCount(), res.failureCount(),", "-                                res.errorCount());", "+                        junitTest.setCounts(res.runCount() + res.ignoredCount(), res.failureCount(),", "+                                res.errorCount(), res.ignoredCount() + res.skippedCount());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa984600b7838e3411cbda647819e6b7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Tar.java", "commitBeforeChange": "82377345488d92a4bd5f65ae312611b4c7ae5cf0", "commitAfterChange": "d6e5c9e8163a8375db602c97c73e83d01ab85146", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      protected void tarFile(File file, TarOutputStream tOut, String vPath,                            TarFileSet tarFileSet)         throws IOException", "signatureAfterChange": "      protected void tarFile(File file, TarOutputStream tOut, String vPath,                            TarFileSet tarFileSet)         throws IOException", "diff": ["-        FileInputStream fIn = new FileInputStream(file);", "-", "+        FileInputStream fIn = null;", "+        if (file.isDirectory() && vPath.length() != 0 ", "+                && vPath.charAt(vPath.length() - 1) != '/')", "+            vPath = vPath + \"/\";", "-            te.setSize(file.length());", "+                te.setSize(file.length());", "-            }", "+            } ", "-            byte[] buffer = new byte[8 * 1024];", "-            int count = 0;", "-            do {", "-                tOut.write(buffer, 0, count);", "-                count = fIn.read(buffer, 0, buffer.length);", "-            } while (count != -1);", "+            if (!file.isDirectory()) {", "+                fIn = new FileInputStream(file);", "+", "+                byte[] buffer = new byte[8 * 1024];", "+                int count = 0;", "+                do {", "+                    tOut.write(buffer, 0, count);", "+                    count = fIn.read(buffer, 0, buffer.length);", "+                } while (count != -1);", "+            }", "-            fIn.close();", "+            if (fIn != null)", "+                fIn.close();"]}]}
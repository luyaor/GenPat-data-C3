{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b818354b4dbadfe7fa8fe70cb491215a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14e275690b26b1c9a0088e3353bb071a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/JavaTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 17, "signatureBeforeChange": "      public void testRunFailWithFailOnError()", "signatureAfterChange": "      @Test     public void testRunFailWithFailOnError()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testRunFailWithFailOnError\",", "-            \"non zero return code\",", "-            \"Java returned:\");", "+        try {", "+            buildRule.executeTarget(\"testRunFailWithFailOnError\");", "+            fail(\"Build exception should have been thrown - \" + \"non zero return code\");", "+        } catch (BuildException ex) {", "+            assertContains(\"Java returned:\", ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "232d3b1fd00e5a2e10c0bf88f9128e11", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/JavaTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public void testRunFailFoe()", "signatureAfterChange": "      @Test     public void testRunFailFoe()", "diff": ["+    @Test", "-        if(runFatalTests) {", "-            expectBuildExceptionContaining(\"testRunFailFoe\",", "-                \"java failures being propagated\",", "-                \"Java returned:\");", "+        Assume.assumeTrue(\"Fatal tests have not been set to run\", runFatalTests);", "+        try {", "+            buildRule.executeTarget(\"testRunFailFoe\");", "+            fail(\"Build exception should have been thrown - \" + \"java failures being propagated\");", "+        } catch (BuildException ex) {", "+            assertContains(\"Java returned:\", ex.getMessage());", "-}", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2feb84abca2b91d13fd708b99c59daa0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/MacroDefTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 22, "signatureBeforeChange": "      public void testBackTrace()", "signatureAfterChange": "      @Test     public void testBackTrace()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(", "-            \"backtraceon\",", "-            \"Checking if a back trace is created\",", "-            \"following error occurred\");", "+        try {", "+            buildRule.executeTarget(\"backtraceon\");", "+            fail(\"BuildException expected: Checking if a back trace is created\");", "+        } catch (BuildException ex) {", "+            assertContains(\"following error occurred\", ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35d4f6a929c6386fe5b90040f5dfe300", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/AssertionsTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected void expectAssertion(String target)", "signatureAfterChange": "     private void expectAssertion(String target)", "diff": ["-    protected void expectAssertion(String target) {", "-        expectBuildExceptionContaining(target,", "-                \"assertion not thrown in \"+target,", "-                \"Java returned: 1\");", "+    private void expectAssertion(String target) {", "+        try {", "+            buildRule.executeTarget(target);", "+            fail(\"BuildException should have been thrown by assertion fail in task\");", "+        } catch (BuildException ex) {", "+            assertContains(\"assertion not thrown in \"+target, \"Java returned: 1\", ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45329f74ed96c7471eef6b194dd6accd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/taskdefs/JavaTest.java", "commitBeforeChange": "c3949e4e2d483cbd513a5516fc44bb452c686fa8", "commitAfterChange": "c4d8f9c859d302e959453ec519f7883749631980", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "          public void testRunFailFoe()", "signatureAfterChange": "          public void testRunFailFoe()", "diff": ["-        expectBuildExceptionContaining(\"run-fail-foe\",", "-            \"java failures being propagated\",", "-            \"Java returned:\");", "-    }", "+        if(runFatalTests) {", "+            expectBuildExceptionContaining(\"testRunFailFoe\",", "+                \"java failures being propagated\",", "+                \"Java returned:\");", "+        }", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "535cf436d705a7bf4981dd58a840714a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/EchoPropertiesTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 6, "signatureBeforeChange": "       public void testEchoToBadFile()", "signatureAfterChange": "       @Test     public void testEchoToBadFile()", "diff": ["+    @Test", "-        expectBuildExceptionContaining( \"testEchoToBadFile\",", "-            \"destfile is a directory\", \"destfile is a directory!\" );", "+    \ttry {", "+    \t\tbuildRule.executeTarget(\"testEchoToBadFile\");", "+            fail(\"BuildException should have been thrown on destination file being a directory\");", "+    \t} catch(BuildException ex) {", "+    \t\tassertContains(\"destfile is a directory\", \"destfile is a directory!\", ex.getMessage());", "+    \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7da53ef940563338f566e2422adf6c8b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/AssertionsTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": "      public void testMultipleAssertions()", "signatureAfterChange": "      @Test     public void testMultipleAssertions()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"test-multiple-assertions\",", "-                \"multiple assertions rejected\",", "-                \"Only one assertion declaration is allowed\");", "-    }", "+        try {", "+            buildRule.executeTarget(\"test-multiple-assertions\");", "+            fail(\"BuildException should have been thrown by assertion fail in task\");", "+        } catch (BuildException ex) {", "+            assertContains(\"multiple assertions rejected\", \"Only one assertion declaration is allowed\", ex.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "809aeb8d8b2e83054b10d02fc4ba00a9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/SignJarTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public void testTsaLocalhost()", "signatureAfterChange": "      @Test     public void testTsaLocalhost()", "diff": ["+    @Test", "-        //only test on java1.5+", "-        if(JavaEnvUtils.getJavaVersionNumber()>=15) {", "-            expectBuildException(\"testTsaLocalhost\",", "-                \"no TSA at localhost:0\");", "-            assertLogContaining(\"java.net.ConnectException\");", "+        Assume.assumeTrue(\"Only runs on Java 1.5+\", JavaEnvUtils.getJavaVersionNumber()>=15);", "+        try {", "+            buildRule.executeTarget(\"testTsaLocalhost\");", "+            fail(\"Should have thrown exception - no TSA at localhost:0\");", "+        } catch(BuildException ex) {", "+            assertEquals(\"jarsigner returned: 1\", ex.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87cdff24bf736a0a3f3778b29cd39a79", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/ImportTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void testImportInTargetNotAllowed()", "signatureAfterChange": "      @Test     public void testImportInTargetNotAllowed()", "diff": ["+    @Test", "-        configureProject(", "+        buildRule.configureProject(", "-        expectBuildExceptionContaining(", "-            \"do-import\", \"not a top level task\",", "-            \"import only allowed as a top-level task\");", "+        try {", "+        \tbuildRule.executeTarget(\"do-import\");", "+        \tfail(\"Build exception should have been thrown as import only allowed in top level task\");", "+        } catch(BuildException ex) {", "+        \tassertContains( \"not a top level task\", \"import only allowed as a top-level task\", ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d41595b0982ac94d530d4bdb5267345", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/EchoPropertiesTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 4, "signatureBeforeChange": "       public void testReadBadFileFail()", "signatureAfterChange": "       @Test     public void testReadBadFile()", "diff": ["+    @Test", "+    \ttry {", "+    \t\tbuildRule.executeTarget(\"testReadBadFile\");", "+    \t\tfail(\"BuildException should have been thrown on bad file\");", "+    \t}", "+    \tcatch(BuildException ex) {", "+    \t\tassertContains(\"srcfile is a directory\",\"srcfile is a directory!\", ex.getMessage());", "+    \t}", "-", "-    public void testReadBadFileFail() {", "-        expectBuildExceptionContaining( \"testReadBadFile\",", "-            \"srcfile is a directory\", \"srcfile is a directory!\" );", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8de9f1a8694879e2e1b0ee3813cd08d1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/JavaTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void testJarNoFork()", "signatureAfterChange": "      @Test     public void testJarNoFork()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testJarNoFork\",", "-            \"parameter validation\",", "-            \"Cannot execute a jar in non-forked mode. \"", "-                + \"Please set fork='true'. \");", "+        try {", "+            buildRule.executeTarget(\"testJarNoFork\");", "+            fail(\"Build exception should have been thrown - parameter validation\");", "+        } catch (BuildException ex) {", "+            assertContains(\"Cannot execute a jar in non-forked mode. Please set fork='true'. \", ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9517a1607555d2648b3e2ced0c1a936f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/taskdefs/SignJarTest.java", "commitBeforeChange": "b41196e3ea60f0f7da48044aa5d2b6f61d7a6dcf", "commitAfterChange": "7229e5923e3cdbc8bed4d88c96eb90d1134cb379", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "      public void testTsaLocalhost()", "signatureAfterChange": "      public void testTsaLocalhost()", "diff": ["-        expectBuildException(\"testTsaLocalhost\",", "-            \"no TSA at localhost:0\");", "-        assertLogContaining(\"java.net.ConnectException\");", "+        //only test on java1.5+", "+        if(JavaEnvUtils.getJavaVersionNumber()>=15) {", "+            expectBuildException(\"testTsaLocalhost\",", "+                \"no TSA at localhost:0\");", "+            assertLogContaining(\"java.net.ConnectException\");", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a05e3bd786bd01072415fdf158a8bcb0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/JavaTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": "      public void testExceptingFoeFork()", "signatureAfterChange": "      @Test     public void testExceptingFoeFork()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testExceptingFoeFork\",", "-            \"exceptions turned into error codes\",", "-            \"Java returned:\");", "+        try {", "+            buildRule.executeTarget(\"testExceptingFoeFork\");", "+            fail(\"Build exception should have been thrown - \" + \"exceptions turned into error codes\");", "+        } catch (BuildException ex) {", "+            assertContains(\"Java returned:\", ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4084ca379a318238f310346d08f2631", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/JavaTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public void testRunFailFoeFork()", "signatureAfterChange": "      @Test     public void testRunFailFoeFork()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testRunFailFoeFork\",", "-            \"java failures being propagated\",", "-            \"Java returned:\");", "+        try {", "+            buildRule.executeTarget(\"testRunFailFoeFork\");", "+            fail(\"Build exception should have been thrown - \" + \"java failures being propagated\");", "+        } catch (BuildException ex) {", "+            assertContains(\"Java returned:\", ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b77d00914a8e513181328676e4003c83", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/LoaderRefTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testBadRef()", "signatureAfterChange": "     @Test \tpublic void testBadRef()", "diff": ["-    public void testBadRef() {", "-        expectBuildExceptionContaining(\"testbadref\", \"Should fail due to ref \"", "-            + \"not being a class loader\", \"does not reference a class loader\");", "+    @Test", "+\tpublic void testBadRef() {", "+    \ttry {", "+    \t\tbuildRule.executeTarget(\"testbadref\");", "+    \t\tfail(\"BuildRule should have thrown an exception due to a bad classloader being specified\");", "+    \t} catch (BuildException ex) {", "+    \t\tassertContains(\"Should fail due to ref not being a class loader\", \"does not reference a class loader\", ex.getMessage());", "+    \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d137109b3b4923c270bd50f1f223ce05", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/AssertionsTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public void testReferenceAbuse()", "signatureAfterChange": "      @Test     public void testReferenceAbuse()", "diff": ["-", "-    public void testReferenceAbuse() {", "-        expectBuildExceptionContaining(\"test-reference-abuse\",", "-                \"reference abuse rejected\",", "-                \"You must not specify\");", "-    }", "+    @Test", "+    public void testReferenceAbuse() {", "+        try {", "+            buildRule.executeTarget(\"test-reference-abuse\");", "+            fail(\"BuildException should have been thrown by reference abuse\");", "+        } catch (BuildException ex) {", "+            assertContains(\"reference abuse rejected\", \"You must not specify\", ex.getMessage());", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d81a41c8fb4cb39da90bdf685d666acc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/JavaTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testNoJarNoClassname()", "signatureAfterChange": "      @Test     public void testNoJarNoClassname()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testNoJarNoClassname\",", "-            \"parameter validation\",", "-            \"Classname must not be null.\");", "+        try {", "+            buildRule.executeTarget(\"testNoJarNoClassname\");", "+            fail(\"Build exception should have been thrown - parameter validation\");", "+        } catch (BuildException ex) {", "+            assertContains(\"Classname must not be null.\", ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2b4f4f10b9439adcb09919a35f6cacc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/JavaTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 11, "signatureBeforeChange": "      public void testExceptingFoe()", "signatureAfterChange": "      @Test     public void testExceptingFoe()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testExceptingFoe\",", "-            \"passes exception through\",", "-            \"Exception raised inside called program\");", "+        try {", "+            buildRule.executeTarget(\"testExceptingFoe\");", "+            fail(\"Build exception should have been thrown - \" + \"passes exception through\");", "+        } catch (BuildException ex) {", "+            assertContains(\"Exception raised inside called program\", ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb72e99446aad77431ec10de0ef16a0c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/CaseTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void testTaskCase()", "signatureAfterChange": "     @Test     public void testTaskCase()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"taskcase\",", "-            \"Task names are case sensitive\",", "-            \"Problem: failed to create task or type ecHO\");", "+    \ttry {", "+    \t\tbuildRule.executeTarget(\"taskcase\");", "+    \t\tfail(\"Build exception should have been thrown due to case sensitivity of name\");", "+    \t} catch(BuildException ex) {", "+    \t\tassertContains(\"Task names should be case sensitive\", \"Problem: failed to create task or type ecHO\", ex.getMessage());", "+    \t}"]}]}
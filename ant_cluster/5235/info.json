{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "11fabcca252281f8313be36650202d79", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b876d3cce5259f4b6513ccfaf67a7cc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/StringInputStream.java", "commitBeforeChange": "03b6e25418f4b94cbb94e191d23d8ab0ba7b8f6e", "commitAfterChange": "fc6a4383fa7cee5fe2534dc9edc9d8a4eb5c254f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public int read() throws IOException", "signatureAfterChange": "     public synchronized int read() throws IOException", "diff": ["-    public int read() throws IOException {", "-        return in.read();", "+    public synchronized int read() throws IOException {", "+        if (in == null) {", "+            throw new IOException(\"Stream Closed\");", "+        }", "+", "+        byte result;", "+        if (slack != null && begin < slack.length) {", "+            result = slack[begin];", "+            if (++begin == slack.length) {", "+                slack = null;", "+            }", "+        } else {", "+            byte[] buf = new byte[1];", "+            if (read(buf, 0, 1) <= 0) {", "+                return -1;", "+            }", "+            result = buf[0];", "+        }", "+        if (result < 0) {", "+            return 256 + result;", "+        } else {", "+            return result;", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6db4cd0da67cc4f136c3273362b777e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "aa43e37a025cdf54b8914b8283e57419a253ed59", "commitAfterChange": "dee95e3acc5154aee03ff5f91f9a56426ae79f3f", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public void write(byte[] b, int offset, int length) throws IOException", "signatureAfterChange": "     @Override     public void write(byte[] b, int offset, int length) throws IOException", "diff": ["+    @Override", "-        if (entry.getMethod() == DEFLATED) {", "-            if (length > 0) {", "-                if (!def.finished()) {", "-                    if (length <= DEFLATER_BLOCK_SIZE) {", "-                        def.setInput(b, offset, length);", "-                        deflateUntilInputIsNeeded();", "-                    } else {", "-                        final int fullblocks = length / DEFLATER_BLOCK_SIZE;", "-                        for (int i = 0; i < fullblocks; i++) {", "-                            def.setInput(b, offset + i * DEFLATER_BLOCK_SIZE,", "-                                         DEFLATER_BLOCK_SIZE);", "-                            deflateUntilInputIsNeeded();", "-                        }", "-                        final int done = fullblocks * DEFLATER_BLOCK_SIZE;", "-                        if (done < length) {", "-                            def.setInput(b, offset + done, length - done);", "-                            deflateUntilInputIsNeeded();", "-                        }", "-                    }", "-                }", "-            }", "+        ZipUtil.checkRequestedFeatures(entry.entry);", "+        entry.hasWritten = true;", "+        if (entry.entry.getMethod() == DEFLATED) {", "+            writeDeflated(b, offset, length);"]}]}
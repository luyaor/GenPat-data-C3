{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "75db8c12ee6ef5eb12e783ce98685083", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d2806b9dca839487b10c1842e22e9e9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/embed/ProjectHelperImpl2.java", "commitBeforeChange": "f2d8ae34069b455a64a46431bd44a3b2a208e9d7", "commitAfterChange": "86334974455a492f4b76331b6002a45289874ddf", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "         public void startElement(String uri, String name, String qname, AttributeList attrs)             throws SAXParseException", "signatureAfterChange": "         public void onStartElement(String uri, String tag, String qname,                                    Attributes attrs,                                    AntXmlContext context)             throws SAXParseException", "diff": ["-        public void startElement(String uri, String name, String qname, AttributeList attrs)", "-            if (project.getDataTypeDefinitions().get(name) != null) {", "-                new DataTypeHandler(this, target).init(name, attrs);", "-                new TaskHandler(this, target, null, target).init(name, attrs);", "+        public void onStartElement(String uri, String tag, String qname,", "+                                   Attributes attrs,", "+                                   AntXmlContext context)", "+            throws SAXParseException", "+        {", "+                task = context.project.createTask(qname);", "+                task = new UnknownElement(qname);", "+                task.setProject(context.project);", "+                //XXX task.setTaskType(qname);", "+                task.setTaskName(qname);", "+            task.setLocation(new Location(context.buildFile.toString(),", "+                                          context.locator.getLineNumber(),", "+                                          context.locator.getColumnNumber()));", "+            context.configureId(task, attrs);", "+                wrapper.setAttributes(sax1Attributes(attrs));", "+                ProjectHelper.configure(task, sax1Attributes(attrs), context.project);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bee0d34d7ec0afa0f4399b3f149a258", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "aa43e37a025cdf54b8914b8283e57419a253ed59", "commitAfterChange": "dee95e3acc5154aee03ff5f91f9a56426ae79f3f", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 30, "signatureBeforeChange": "     protected void writeCentralFileHeader(ZipEntry ze) throws IOException", "signatureAfterChange": "     protected void writeCentralFileHeader(ZipEntry ze) throws IOException", "diff": ["+        final long lfhOffset = offsets.get(ze).longValue();", "+        final boolean needsZip64Extra = hasZip64Extra(ze)", "+            || ze.getCompressedSize() >= ZIP64_MAGIC", "+            || ze.getSize() >= ZIP64_MAGIC", "+            || lfhOffset >= ZIP64_MAGIC;", "+", "+        if (needsZip64Extra && zip64Mode == Zip64Mode.Never) {", "+            // must be the offset that is too big, otherwise an", "+            // exception would have been throw in putNextEntry or", "+            // closeEntry", "+            throw new Zip64RequiredException(Zip64RequiredException", "+                                             .ARCHIVE_TOO_BIG_MESSAGE);", "+        }", "+", "+        handleZip64Extra(ze, lfhOffset, needsZip64Extra);", "+", "-        writeOut(ZipShort.getBytes((ze.getPlatform() << 8) | 20));", "+        writeOut(ZipShort.getBytes((ze.getPlatform() << 8) | ", "+                                   (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION", "+                                                  : ZIP64_MIN_VERSION)));", "-                                                         && fallbackToUTF8);", "+                                                         && fallbackToUTF8,", "+                                                         needsZip64Extra);", "-        writeOut(toDosTime(ze.getTime()));", "+        writeOut(ZipUtil.toDosTime(ze.getTime()));", "-        writeOut(ZipLong.getBytes(ze.getCompressedSize()));", "-        writeOut(ZipLong.getBytes(ze.getSize()));", "+        if (ze.getCompressedSize() >= ZIP64_MAGIC", "+            || ze.getSize() >= ZIP64_MAGIC) {", "+            writeOut(ZipLong.ZIP64_MAGIC.getBytes());", "+            writeOut(ZipLong.ZIP64_MAGIC.getBytes());", "+        } else {", "+            writeOut(ZipLong.getBytes(ze.getCompressedSize()));", "+            writeOut(ZipLong.getBytes(ze.getSize()));", "+        }", "-        // file name length", "-        final ZipEncoding entryEncoding;", "-        ", "-        if (!encodable && fallbackToUTF8) {", "-            entryEncoding = ZipEncodingHelper.UTF8_ZIP_ENCODING;", "-        } else {", "-            entryEncoding = zipEncoding;", "-        }", "-        ", "-        ByteBuffer name = entryEncoding.encode(ze.getName());        ", "+        ByteBuffer name = getName(ze);", "-        ", "-        ByteBuffer commentB = entryEncoding.encode(comm);", "-        ", "+", "+        ByteBuffer commentB = getEntryEncoding(ze).encode(comm);", "+", "-        writeOut((byte[]) offsets.get(ze));", "+        writeOut(ZipLong.getBytes(Math.min(lfhOffset, ZIP64_MAGIC)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c49e6388aaf1a118b07453028559185", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/embed/ProjectHelperImpl2.java", "commitBeforeChange": "f2d8ae34069b455a64a46431bd44a3b2a208e9d7", "commitAfterChange": "86334974455a492f4b76331b6002a45289874ddf", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 12, "signatureBeforeChange": "         public void startElement(String uri, String tag, String qname,                                  AttributeList attrs)             throws SAXParseException", "signatureAfterChange": "          public void onStartElement(String uri, String tag, String qname,                                    Attributes attrs,                                    AntXmlContext context)             throws SAXParseException", "diff": ["-        public void startElement(String uri, String tag, String qname,", "-                                 AttributeList attrs)", "-            throw new SAXParseException(\"Unexpected element \\\"\" + tag + \"\\\"\", locator);", "+", "+        public void onStartElement(String uri, String tag, String qname,", "+                                   Attributes attrs,", "+                                   AntXmlContext context)", "+            throws SAXParseException", "+        {", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5180be752d91ee29993020a6f5f399d5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipFile.java", "commitBeforeChange": "aa43e37a025cdf54b8914b8283e57419a253ed59", "commitAfterChange": "dee95e3acc5154aee03ff5f91f9a56426ae79f3f", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 17, "signatureBeforeChange": "     protected static Date fromDosTime(ZipLong zipDosTime)", "signatureAfterChange": "     private void setSizesAndOffsetFromZip64Extra(ZipEntry ze,                                                  OffsetEntry offset,                                                  int diskStart)         throws IOException", "diff": ["+     */", "+    private void setSizesAndOffsetFromZip64Extra(ZipEntry ze,", "+                                                 OffsetEntry offset,", "+                                                 int diskStart)", "+        throws IOException {", "+        Zip64ExtendedInformationExtraField z64 =", "+            (Zip64ExtendedInformationExtraField)", "+            ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);", "+        if (z64 != null) {", "+            boolean hasUncompressedSize = ze.getSize() == ZIP64_MAGIC;", "+            boolean hasCompressedSize = ze.getCompressedSize() == ZIP64_MAGIC;", "+            boolean hasRelativeHeaderOffset =", "+                offset.headerOffset == ZIP64_MAGIC;", "+            z64.reparseCentralDirectoryData(hasUncompressedSize,", "+                                            hasCompressedSize,", "+                                            hasRelativeHeaderOffset,", "+                                            diskStart == ZIP64_MAGIC_SHORT);", "+", "+            if (hasUncompressedSize) {", "+                ze.setSize(z64.getSize().getLongValue());", "+            } else if (hasCompressedSize) {", "+                z64.setSize(new ZipEightByteInteger(ze.getSize()));", "+            }", "+", "+            if (hasCompressedSize) {", "+                ze.setCompressedSize(z64.getCompressedSize().getLongValue());", "+            } else if (hasUncompressedSize) {", "+                z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));", "+            }", "+", "+            if (hasRelativeHeaderOffset) {", "+                offset.headerOffset =", "+                    z64.getRelativeHeaderOffset().getLongValue();", "+            }", "+        }", "+    }", "-     */", "-    protected static Date fromDosTime(ZipLong zipDosTime) {", "-        long dosTime = zipDosTime.getValue();", "-        return new Date(dosToJavaTime(dosTime));", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ba44f0db59a347e5fa2ff4b323be021", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/embed/ProjectHelperImpl2.java", "commitBeforeChange": "f2d8ae34069b455a64a46431bd44a3b2a208e9d7", "commitAfterChange": "86334974455a492f4b76331b6002a45289874ddf", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 1, "signatureBeforeChange": "         public void startElement(String uri, String name, String qname, AttributeList attrs)             throws SAXParseException", "signatureAfterChange": "         public void onStartElement(String uri, String tag, String qname,                                    Attributes attrs,                                    AntXmlContext context)             throws SAXParseException", "diff": ["+        public void onStartElement(String uri, String tag, String qname,", "+                                   Attributes attrs,", "+                                   AntXmlContext context)", "+            throw new SAXParseException(\"Unexpected element \\\" \" + qname + \"\\\"\", context.locator);", "+        }", "-        public void startElement(String uri, String name, String qname, AttributeList attrs)", "-                new TaskHandler(this, (TaskContainer)child, childWrapper, target).init(name, attrs);", "-                new NestedElementHandler(this, child, childWrapper, target).init(name, attrs);"]}]}
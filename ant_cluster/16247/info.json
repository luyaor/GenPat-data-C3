{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7d03548ac66cdd3a39e6d634727d542b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ff6e8cc44a0b1b4cb394d577e8d0e3a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/common/org/apache/ant/common/model/Project.java", "commitBeforeChange": "f1025dd3c6deebb466ac41a06a42d812cdf4e08d", "commitAfterChange": "c2f14ffad1518f0d1c23c084b7c216d06c5da363", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void fillinDependencyOrder(String globalName, Target target,                                       List dependencyOrder, Set visited,                                       CircularDependencyChecker checker)          throws ModelException", "signatureAfterChange": "     public void fillinDependencyOrder(Target target,                                       List dependencyOrder, Set visited,                                       CircularDependencyChecker checker)          throws ModelException", "diff": ["-     */", "-    public void fillinDependencyOrder(String globalName, Target target,", "-                                      List dependencyOrder, Set visited,", "-                                      CircularDependencyChecker checker)", "-         throws ModelException {", "-        if (visited.contains(target.getName())) {", "-            return;", "-        }", "-", "-        try {", "-            String targetName = target.getName();", "-            String targetGlobalName = targetName;", "-            if (globalName != null) {", "-                targetGlobalName = globalName + REF_DELIMITER + targetName;", "-            }", "-            checker.visitNode(targetGlobalName);", "-            for (Iterator i = target.getDependencies(); i.hasNext();) {", "-                String dependency = (String) i.next();", "-                boolean localTarget = (dependency.indexOf(REF_DELIMITER) == -1);", "-                Target dependencyTarget", "-                     = localTarget ? getTarget(dependency)", "-                     : getRefTarget(dependency);", "-", "-                if (dependencyTarget == null) {", "-                    StringBuffer sb = new StringBuffer(\"Target '\");", "-                    if (globalName != null) {", "-                        sb.append(globalName + REF_DELIMITER);", "-                    }", "-                    sb.append(dependency);", "-                    sb.append(\"' does not exist in this project. \");", "-                    throw new ModelException(new String(sb),", "-                        target.getLocation());", "-                }", "-", "-                if (localTarget) {", "-                    // need to check the targets we depend on", "-                    fillinDependencyOrder(globalName, dependencyTarget,", "-                        dependencyOrder, visited, checker);", "-                }", "-            }", "-", "-            visited.add(targetName);", "-            checker.leaveNode(targetGlobalName);", "-            dependencyOrder.add(targetName);", "-        } catch (CircularDependencyException e) {", "-            throw new ModelException(e.getMessage(),", "-                target.getLocation());", "-        }", "-    }", "+    public void fillinDependencyOrder(Target target,", "+                                      List dependencyOrder, Set visited,", "+                                      CircularDependencyChecker checker)", "+         throws ModelException {", "+        if (visited.contains(target.getName())) {", "+", "+            String targetName = target.getName();", "+            checker.visitNode(targetName);", "+", "+                String dependency = (String) i.next();", "+                boolean localTarget = (dependency.indexOf(REF_DELIMITER) == -1);", "+                if (localTarget) {", "+                    Target dependencyTarget = getTarget(dependency);", "+", "+                    if (dependencyTarget == null) {", "+                        StringBuffer sb = new StringBuffer(\"Target '\");", "+", "+                        sb.append(dependency);", "+                        sb.append(\"' does not exist in this project. \");", "+                        throw new ModelException(new String(sb),", "+                            target.getLocation());", "+                    }", "+", "+                    // need to check the targets we depend on", "+                    fillinDependencyOrder(dependencyTarget,", "+                        dependencyOrder, visited, checker);", "+", "+            visited.add(targetName);", "+            checker.leaveNode(targetName);", "+            dependencyOrder.add(targetName);", "+        } catch (CircularDependencyException e) {", "+            throw new ModelException(e.getMessage(),", "+                target.getLocation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c80010d22bc5b3e1a4bdf773a7ba3cc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/JonasDeploymentTool.java", "commitBeforeChange": "270394a09fddda0ea9ffa2330956c5f399ab840f", "commitAfterChange": "6bd8d6e938a45868902ecd1092858e8372933c7c", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private boolean addJonasVendorFiles(final Hashtable someEjbFiles,                                               final String aDdPrefix)", "signatureAfterChange": "     private String getJonasDescriptorName()", "diff": ["-    private boolean addJonasVendorFiles(final Hashtable someEjbFiles,", "-                                              final String aDdPrefix) {", "-        // replace \\ by /, remove the last letter ( a dash - )", "-        final String aCanonicalDD", "-             = aDdPrefix.replace('\\\\', '/').substring(0, aDdPrefix.length() - 1);", "-        final int index = aCanonicalDD.lastIndexOf('/') + 1;", "-        String anEjbJarName = aCanonicalDD.substring(index);", "-        if (\"ejb\".equals(anEjbJarName)) {", "-            anEjbJarName = \"ejb-jar\";", "-        }", "-        final String aNewDdPrefix =", "-            aDdPrefix.substring(0, index) + \"jonas-\" + anEjbJarName + \".xml\";", "-        File aConventionNamingJonasDD", "-             = new File(getConfig().descriptorDir, aNewDdPrefix);", "-        log(\"look for jonas specific file using jonas naming convention \"", "-             + aConventionNamingJonasDD,", "-        if (aConventionNamingJonasDD.exists()) {", "-            someEjbFiles.put(META_DIR + JONAS_DD, aConventionNamingJonasDD);", "-            return true;", "-            return false;", "+     */", "+    private String getJonasDescriptorName() {", "+", "+        // descriptorName = <path><basename><basenameterminator><remainder>", "+        // examples = /org/objectweb/fooAppli/foo/Foo-ejb-jar.xml", "+        // examples = /org/objectweb/fooAppli/foo/Foo.xml (JOnAS convention)", "+ ", "+        String jonasDescriptorName; // JOnAS-specific DD", "+        boolean jonasConvention = false; // true if the JOnAS convention is used for the DD", "+        String path;            // Directory path of the EJB descriptor", "+        String fileName;        // EJB descriptor file name", "+        String baseName;        // Filename appearing before name terminator", "+        String remainder;       // Filename appearing after the name terminator", "+ ", "+        int startOfFileName = descriptorName.lastIndexOf(File.separatorChar);", "+        if ( startOfFileName != -1 ) {", "+            // extract path info", "+            path = descriptorName.substring(0, startOfFileName+1);", "+            fileName = descriptorName.substring(startOfFileName+1);", "+        } else {", "+            // descriptorName is just a file without path", "+            path = \"\";", "+            fileName = descriptorName;", "+        }", "+ ", "+        if ( fileName.startsWith(EJB_DD) )", "+            return path + JONAS_DD;", "+", "+        int endOfBaseName = descriptorName.indexOf(getConfig().baseNameTerminator, startOfFileName);", "+ ", "+        /*", "+         * Check for the odd case where the terminator and/or filename", "+         * extension aren't found.  These will ensure \"jonas-\" appears at the", "+         * end of the name and before the '.' (if present).", "+         */", "+        if ( endOfBaseName < 0 ) { ", "+            // baseNameTerminator not found: the descriptor use the", "+            // JOnAS naming convention, ie [Foo.xml,jonas-Foo.xml] and", "+            // not [Foo<baseNameTerminator>-ejb-jar.xml,", "+            // Foo<baseNameTerminator>-jonas-ejb-jar.xml].", "+            endOfBaseName = descriptorName.lastIndexOf('.') - 1;", "+            if (endOfBaseName < 0) {", "+                // no . found", "+                endOfBaseName = descriptorName.length() - 1;", "+            }", "+ ", "+            jonasConvention = true;", "+        }", "+", "+        baseName = descriptorName.substring(startOfFileName + 1, endOfBaseName + 1);", "+        remainder = descriptorName.substring(endOfBaseName + 1);", "+ ", "+        if ( jonasConvention ) {", "+            jonasDescriptorName = path + \"jonas-\" + baseName + \".xml\";", "+        } else {", "+            jonasDescriptorName = path + baseName + \"jonas-\" + remainder;", "+        }", "+ ", "+        log(\"Standard EJB descriptor name: \" + descriptorName, Project.MSG_VERBOSE);", "+        log(\"JOnAS-specific descriptor name: \" + jonasDescriptorName, Project.MSG_VERBOSE);", "+ ", "+        return jonasDescriptorName;", "+    }"]}]}
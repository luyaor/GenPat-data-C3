{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b7b76104ca4846dd4cbd0f7dd189ffb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42bde69a3d85673719d12a26594c25e9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/types/Commandline.java", "commitBeforeChange": "e840fb5f86f0c9af5c2e2ad616f279c45fce62d8", "commitAfterChange": "ad91082694f9344ae3020e16cf9351e48b751b0b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public Argument createArgument()", "signatureAfterChange": "      public Commandline( final String[] command )", "diff": ["+", "+    public Commandline( final String[] command )", "+    {", "+        if( 0 == command.length )", "+        {", "+            throw new IllegalArgumentException( \"command\" );", "+        }", "+", "+        m_executable = command[ 0 ];", "+        for( int i = 1; i < command.length; i++ )", "+        {", "+            addArgument( command[ i ] );", "+        }", "+    }", "-     */", "-    public Argument createArgument()", "-    {", "-        final Argument argument = new Argument();", "-        m_arguments.add( argument );", "-        return argument;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c55b89d9e349fc575be98041823feb7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/types/Commandline.java", "commitBeforeChange": "e840fb5f86f0c9af5c2e2ad616f279c45fce62d8", "commitAfterChange": "ad91082694f9344ae3020e16cf9351e48b751b0b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public Argument createArgument()", "signatureAfterChange": "      public Commandline( final String[] command )", "diff": ["+", "+    public Commandline( final String[] command )", "+    {", "+        if( 0 == command.length )", "+        {", "+            throw new IllegalArgumentException( \"command\" );", "+        }", "+", "+        m_executable = command[ 0 ];", "+        for( int i = 1; i < command.length; i++ )", "+        {", "+            addArgument( command[ i ] );", "+        }", "+    }", "-     */", "-    public Argument createArgument()", "-    {", "-        final Argument argument = new Argument();", "-        m_arguments.add( argument );", "-        return argument;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "71709c6a6f13d9ab9bb499994cce233d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "050d9705da619ac4cfddbcd2c426c6e5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "cdef1ea2fdf8e56abad143b32c8f8593714af19b", "commitAfterChange": "4f46532c945a4fe13670cbbeda0a0c817bcaef9f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        if (inputFile == null && sqlCommand == null) {", "-            throw new BuildException(\"Input file or sql attribute must be set!\");", "+        sqlCommand = sqlCommand.trim();", "+", "+        if (srcFile == null && sqlCommand.length() == 0) {", "+            throw new BuildException(\"Source file or sql statement must be set!\", location);", "-            throw new BuildException(\"Driver attribute must be set!\");", "+            throw new BuildException(\"Driver attribute must be set!\", location);", "-            throw new BuildException(\"User Id attribute must be set!\");", "+            throw new BuildException(\"User Id attribute must be set!\", location);", "-            throw new BuildException(\"Password attribute must be set!\");", "+            throw new BuildException(\"Password attribute must be set!\", location);", "-            throw new BuildException(\"Url attribute must be set!\");", "+            throw new BuildException(\"Url attribute must be set!\", location);", "-        if (inputFile != null && !inputFile.exists()) {", "-            throw new BuildException(\"Input file does not exist!\");", "+        if (srcFile != null && !srcFile.exists()) {", "+            throw new BuildException(\"Source file does not exist!\", location);", "-            throw new BuildException(\"JDBC driver \" + driver + \" could not be loaded\");", "+            throw new BuildException(\"JDBC driver \" + driver + \" could not be loaded\", location);", "-        String line = \"\";", "-        String sql = \"\";", "-        Statement statement = null;", "-", "+            conn.setAutoCommit(autocommit);", "+", "-            if (sqlCommand != null) {", "-                execSQL(statement, sqlCommand);", "+            if (sqlCommand.length() != 0) {", "+                runStatements(new StringReader(sqlCommand));", "-            if (inputFile != null) {", "-                BufferedReader in = new BufferedReader(new FileReader(inputFile));", "-  ", "-                while ((line=in.readLine()) != null){", "-                    if (line.trim().startsWith(\"//\")) continue;", "-                    if (line.trim().startsWith(\"--\")) continue;", "- ", "-                    sql += \" \" + line;", "-                    if (sql.trim().endsWith(\";\")){", "-                        log(\"SQL: \" + sql, Project.MSG_VERBOSE);", "-                        execSQL(statement, sql.substring(0, sql.length()-1));", "-                        sql = \"\";", "-                    }", "-                }", "+            if (srcFile != null) {", "+                runStatements(new FileReader(srcFile));", "+            }", "+", "+            if (!autocommit) {", "+                conn.commit();", "-            conn.commit();", "-            throw new BuildException(e);", "+            if (!autocommit) {", "+                try {", "+                    conn.rollback();", "+                } catch (SQLException ex) {}", "+            }", "+            throw new BuildException(e, location);", "-            log(\"Failed to execute: \" + sql, Project.MSG_ERR);", "-            throw new BuildException(e);", "+            if (!autocommit) {", "+                try {", "+                    conn.rollback();", "+                } catch (SQLException ex) {}", "+            }", "+            throw new BuildException(e, location);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f2e6bfa9c018d2d010a76500efc7ea6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/Ejbc.java", "commitBeforeChange": "205151486acb02a98f17a73c8367302d53fb56b8", "commitAfterChange": "34b083983d52d1bc7eaf31b312924fdf83a76b07", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        Path execClassPath = new Path(project, classpath + \":\" + generatedFilesDirectory + \":\" + systemClassPath);", "-        ", "+        String execClassPath = project.translatePath(systemClassPath + \":\" + classpath +", "+                                                         \":\" + generatedFilesDirectory);", "-        String[] descriptorNames = ds.getIncludedFiles();", "-        ", "+        String[] files = ds.getIncludedFiles();", "-        // create an class loader", "-        AntClassLoader loader = new AntClassLoader(project, execClassPath, false);", "-        loader.addSystemPackageRoot(\"org.apache.tools.ant\");", "-        loader.addSystemPackageRoot(\"javax\");", "-        try {", "-            Helper helper = (Helper)(loader.forceLoadClass(\"org.apache.tools.ant.taskdefs.optional.ejb.EjbcHelper\").newInstance());", "-            helper.initialize(this);", "-            helper.setDescriptorDir(descriptorDirectory);", "-            helper.setDest(generatedFilesDirectory);", "-            helper.setManifest(generatedManifestFile);", "-            helper.setSrc(sourceDirectory);", "-            helper.setDescriptors(descriptorNames);", "-            helper.setClasspath(execClassPath);", "-            helper.execute();", "-            helper = null;", "+        Java helperTask = (Java)project.createTask(\"java\");", "+        helperTask.setFork(true);", "+        helperTask.setClassname(\"org.apache.tools.ant.taskdefs.optional.ejb.EjbcHelper\");", "+        String args = \"\";", "+        args += \" \" + descriptorDirectory;", "+        args += \" \" + generatedFilesDirectory;", "+        args += \" \" + sourceDirectory;", "+        args += \" \" + generatedManifestFile;", "+        for (int i = 0; i < files.length; ++i) {", "+            args += \" \" + files[i];", "-        catch (Exception e) {", "-            throw new BuildException(e);", "+                                    ", "+        helperTask.setArgs(args);", "+        helperTask.setClasspath(new Path(project, execClassPath));", "+        if (helperTask.executeJava() != 0) {                         ", "+            throw new BuildException(\"Execution of ejbc helper failed\");", "-        loader = null;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a017f057cf104cc197baab12bba1d65a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d547e3c19afd4da71abefd2cfdd7daf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/Scp.java", "commitBeforeChange": "72b360356e7489987a637636f2d8c9cdc85a8145", "commitAfterChange": "59e489be6d6d656a7358bed90a391fda6342076c", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "      private void download(String fromSshUri, String toPath)         throws JSchException, IOException", "signatureAfterChange": "      private void download(String fromSshUri, String toPath)         throws JSchException, IOException", "diff": ["-            ScpFromMessage message =", "-                new ScpFromMessage(getVerbose(), session, file,", "-                                   getProject().resolveFile(toPath),", "-                                   fromSshUri.endsWith(\"*\"));", "+            ScpFromMessage message = null;", "+            if (!isSftp){", "+                message =", "+                    new ScpFromMessage(getVerbose(), session, file,", "+                                       getProject().resolveFile(toPath),", "+                                       fromSshUri.endsWith(\"*\"));", "+            } else{", "+                message =", "+                    new ScpFromMessageBySftp(getVerbose(), session, file,", "+                                             getProject().resolveFile(toPath),", "+                                             fromSshUri.endsWith(\"*\"));", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61feed8a12e8b1a5dc75fdcfc09c4e83", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/AggregateTransformer.java", "commitBeforeChange": "b19ac2c39b9ba407994ec7ef2fce7972f274f22f", "commitAfterChange": "bf042df7ec488399fe7db09e73454320f27b8ef1", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void transform() throws BuildException", "signatureAfterChange": "     public void transform() throws BuildException", "diff": ["-        String tempFileProperty = getClass().getName() + String.valueOf(counter++);", "-        File tmp = FILE_UTILS.resolveFile(project.getBaseDir(),", "-                project.getProperty(\"java.io.tmpdir\"));", "-        tempFileTask.setDestDir(tmp);", "-        tempFileTask.setProperty(tempFileProperty);", "-        tempFileTask.execute();", "-        File dummyFile = new File(project.getProperty(tempFileProperty));", "-        xsltTask.setOut(dummyFile);", "+        File outputFile = null;", "+        if (format.equals(FRAMES)) {", "+            String tempFileProperty = getClass().getName() + String.valueOf(counter++);", "+            File tmp = FILE_UTILS.resolveFile(project.getBaseDir(),", "+                    project.getProperty(\"java.io.tmpdir\"));", "+            tempFileTask.setDestDir(tmp);", "+            tempFileTask.setProperty(tempFileProperty);", "+            tempFileTask.execute();", "+            outputFile = new File(project.getProperty(tempFileProperty));", "+        } else {", "+            outputFile = new File(toDir, \"junit-noframes.html\");", "+        }", "+        xsltTask.setOut(outputFile);", "-        Delete delete = new Delete();", "-        delete.bindToOwner(task);", "-        delete.setFile(dummyFile);", "-        delete.execute();", "+        if (format.equals(FRAMES)) {", "+            Delete delete = new Delete();", "+            delete.bindToOwner(task);", "+            delete.setFile(outputFile);", "+            delete.execute();", "+        }"]}]}
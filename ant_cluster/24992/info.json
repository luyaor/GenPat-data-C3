{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7e9aa62d1470f5a92abb6ee3ed8af62e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17c74c729a022d5ad46a1ac073a1e9cf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/modules/edit/ElementNavigator.java", "commitBeforeChange": "df3ce6106dd8870ddbbb29b89426526409c97556", "commitAfterChange": "237bbc895936f5236884d0083d7f9f967875fd09", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "         public boolean eventPosted(EventObject event)", "signatureAfterChange": "         public boolean eventPosted(EventObject event)", "diff": ["+            ElementTreeModel model = (ElementTreeModel)_tree.getModel();", "+            // XXX This crap needs cleaning up. Type switching is lazy...", "-// XXX This won't work until ACSTreeNodeElement.getParent() is fixed", "-//                ElementTreeModel model = (ElementTreeModel)_tree.getModel();", "-//                model.nodeChanged((TreeNode)model.getRoot());", "-                ", "+                model.fireNodeChanged((ACSElement)event.getSource());", "+            }", "+            else if(event instanceof NewElementEvent && model != null) {", "+                ACSElement element = ((NewElementEvent)event).getNewElement();", "+                model.fireNodeAdded(element);", "+                TreePath path = new TreePath(model.getPathToRoot(element));", "+                _selections.setSelectionPath(path);", "+                _tree.scrollPathToVisible(path);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6146d2203a7767d250e4ae9d4917e5ac", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ScriptRunner.java", "commitBeforeChange": "c902c100cddd399b3573cbf35487bb8db22fbea9", "commitAfterChange": "9936be269812cd80ee92432d1ccf3bfb69537e5a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void executeScript(String execName) throws BuildException", "signatureAfterChange": "     public void executeScript(String execName) throws BuildException", "diff": ["+        ClassLoader origContextClassLoader =", "+            Thread.currentThread().getContextClassLoader();", "+        ClassLoader scriptLoader = getClass().getClassLoader();", "+        if (classpath != null && project != null) {", "+            AntClassLoader loader = project.createClassLoader(classpath);", "+            loader.setParent(scriptLoader);", "+            scriptLoader = loader;", "+        }", "+            Thread.currentThread().setContextClassLoader(scriptLoader);", "+            manager.setClassLoader(scriptLoader);", "+        } finally {", "+             Thread.currentThread().setContextClassLoader(", "+                 origContextClassLoader);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80d2df09474a8b5ecf912a4d47fd21fd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/PropertySet.java", "commitBeforeChange": "ce89090b466c00d8a218ff572a4cfe92eebc9d96", "commitAfterChange": "996e16066a9450f18df34582a163957d365bcee1", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "      public Properties getProperties()", "signatureAfterChange": "      public Properties getProperties()", "diff": ["-        Vector names = null;", "+        Set names = null;", "-            names = new Vector(); // :TODO: should be a Set!", "+            names = new HashSet();", "-", "+            // Add this PropertySet's nested PropertySets' property names.", "+            for (Enumeration e = setRefs.elements(); e.hasMoreElements();) {", "+                PropertySet set = (PropertySet) e.nextElement();", "+                names.addAll(set.getProperties().keySet());", "+            }", "+            if (negate) {", "+                //make a copy...", "+                HashSet complement = new HashSet(props.keySet());", "+                complement.removeAll(names);", "+                names = complement;", "+            }", "-        for (Enumeration e = names.elements(); e.hasMoreElements();) {", "-            String name = (String) e.nextElement();", "+        for (Iterator iter = names.iterator(); iter.hasNext();) {", "+            String name = (String) iter.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e71848c181724fb1d64ce42f0fbfa467", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/splash/SplashScreen.java", "commitBeforeChange": "c8232ed82c53175729e226f4bc2dd464136a1e1b", "commitAfterChange": "a1003b0b8e5e18840b648d7da746efe92b093f74", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 14, "signatureBeforeChange": "      public void messageLogged(BuildEvent event)", "signatureAfterChange": "      public void messageLogged(BuildEvent event)", "diff": ["+        if (hasProgressPattern()) {", "+            String message = event.getMessage();", "+            Matcher matcher = progressRegExpPattern.matcher(message);", "+            if (matcher != null && matcher.matches()) {", "+                String gr = matcher.group(1);", "+                try {", "+                    int i = Math.min(new Integer(gr).intValue() * 2, MAX);", "+                    pb.setValue(i);", "+                } catch (NumberFormatException e) {", "+                    //TODO: how to reach logger?!?", "+                    //log(\"Number parsing error in progressRegExp\", Project.MSG_VERBOSE);", "+", "+                }", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f51ee5867175a86eb61c371bfa6748d8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "37e97ef42d47f59a277025d51b1d13719a9e616a", "commitAfterChange": "b92e6b644f97b87083602a8ce4029cce01725674", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": "     private File findFile(File base, String path, boolean cs)", "signatureAfterChange": "     private File findFile(File base, String path, boolean cs)", "diff": ["+        if (FileUtils.isAbsolutePath(path)) {", "+            if (base == null) {", "+                String[] s = FILE_UTILS.dissect(path);", "+                base = new File(s[0]);", "+                path = s[1];", "+            } else {", "+                File f = FILE_UTILS.normalize(path);", "+                String s = FILE_UTILS.removeLeadingPath(base, f);", "+                if (s.equals(f.getAbsolutePath())) {", "+                    //removing base from path yields no change; path not child of base", "+                    return null;", "+                }", "+                path = s;", "+            }", "+        }"]}]}
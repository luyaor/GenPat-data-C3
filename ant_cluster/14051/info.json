{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4564730d13e9c91ebad56df3056acf75", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "077c1ebba2ce1e4bd12ce12674b04710", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipEncodingHelper.java", "commitBeforeChange": "cbd20a77eba224b21654251583971e054729f006", "commitAfterChange": "752d64fa43db2172327771ba4d36bee3f2d3b49a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "     static final String decodeName(byte[] name, String encoding)         throws java.nio.charset.CharacterCodingException", "signatureAfterChange": "     static boolean isUTF8(String encoding)", "diff": ["+     */", "+    static boolean isUTF8(String encoding) {", "+            // check platform's default encoding", "+            encoding = System.getProperty(\"file.encoding\");", "-     */", "-    static final String decodeName(byte[] name, String encoding)", "-        throws java.nio.charset.CharacterCodingException {", "-        Charset cs = Charset.forName(encoding);", "-        return cs.newDecoder()", "-            .onMalformedInput(CodingErrorAction.REPORT)", "-            .onUnmappableCharacter(CodingErrorAction.REPORT)", "-            .decode(ByteBuffer.wrap(name)).toString();", "+        return UTF8.equalsIgnoreCase(encoding)", "+            || \"utf-8\".equalsIgnoreCase(encoding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bbb51e499b9cdbeac67dc19c2dc612a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/dotnet/WsdlToDotnet.java", "commitBeforeChange": "579a1f76bd6eff87405967c4fe523ffe4d9342bb", "commitAfterChange": "803fb00df9e066be53b6bca73efea6fe0d8a83ba", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void execute()              throws BuildException", "signatureAfterChange": "     public void execute()              throws BuildException", "diff": ["+        if(compiler==null) {", "+            compiler=Compiler.createDefaultCompiler();", "+        }", "-        NetCommand command = new NetCommand(this, \"WSDL\", \"wsdl\");", "+        NetCommand command = new NetCommand(this,", "+                \"WSDL\",", "+                compiler.getCommand());", "+        compiler.applyExtraArgs(command);", "-        if(parseableErrors) {", "+        if(ideErrors) {", "-        if (srcFileName != null) {", "-            File srcFile = getProject().resolveFile(srcFileName);", "-            if (isMono) {", "-                // Mono 1.0's wsdl doesn't deal with absolute paths", "-                command.addArgument(srcFileName);", "-            } else {", "-                command.addArgument(srcFile.toString());", "-            }", "-            //rebuild unless the dest file is newer than the source file", "-            if ( destFile.exists() ) {", "-                destLastModified = destFile.lastModified();", "-            }", "-            if (srcFile.exists()", "-                && srcFile.lastModified() <= destLastModified) {", "-                rebuild = false;", "-            }", "-        } else {", "-            //no source file? must be a url, which has no dependency", "-            //handling", "-            rebuild = true;", "-            command.addArgument(url);", "+", "+        //rebuild unless the dest file is newer than the source file", "+        if ( destFile.exists() ) {", "+            destLastModified = destFile.lastModified();", "+            rebuild = isRebuildNeeded(wsdl, destLastModified);", "+        String path;", "+        //mark for a rebuild if the dest file is newer", "+        path=wsdl.evaluate();", "+        if ( !compiler.supportsAbsoluteFiles() ) {", "+            // Mono 1.0's wsdl doesn't deal with absolute paths", "+            path = srcFileName;", "+        }", "+        command.addArgument(path);", "-            //get date, mark for a rebuild if we are newer", "-            long schemaTimestamp;", "-            schemaTimestamp=schema.getTimestamp();", "-            if(schemaTimestamp>destLastModified) {", "-                rebuild=true;", "-            }", "+            //mark for a rebuild if we are newer", "+            rebuild |= isRebuildNeeded(schema, destLastModified);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "719aa1c04e55fac2bc0e2441c3e6b9a7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/CommandlineJava.java", "commitBeforeChange": "198880a644437e0cfb31cb65ee56c3d2d1b2d858", "commitAfterChange": "886b552945335892847014988cfe6c7f40985684", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 17, "signatureBeforeChange": "      public String[] getCommandline()", "signatureAfterChange": "     public String[] getCommandline()", "diff": ["+     */", "-        Path fullClasspath = classpath != null ? classpath.concatSystemClasspath(\"ignore\") : null;", "-        Commandline actualVMCommand = getActualVMCommand();", "-        int size = ", "-            actualVMCommand.size() + javaCommand.size() + sysProperties.size();", "-        if (fullClasspath != null && fullClasspath.size() > 0) {", "-            size += 2;", "-        }", "+       String[] result = new String[size()];", "+        int pos = 0;", "+        String[] vmArgs = vmCommand.getCommandline();", "+        // first argument is the java.exe path...", "+        result[pos++] = vmArgs[0];", "-        String[] result = new String[size];", "-        System.arraycopy(actualVMCommand.getCommandline(), 0, ", "-                         result, 0, actualVMCommand.size());", "-", "-        int pos = actualVMCommand.size();", "+        // -jar must be the first option in the command line.", "+        if (executeJar){", "+            result[pos++] = \"-jar\";", "+        }", "+        // next follows the vm options", "+        System.arraycopy(vmArgs, 1, result, pos, vmArgs.length - 1);", "+        pos += vmArgs.length - 1;", "+        // properties are part of the vm options...", "+        // classpath is a vm option too..", "+        Path fullClasspath = classpath != null ? classpath.concatSystemClasspath(\"ignore\") : null;", "+        // this is the classname to run as well as its arguments.", "+        // in case of 'executeJar', the executable is a jar file."]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b367c7d37578bec40fb13a87a6d0d71b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e18e76125d176bd78f64d1cdd8de0dea", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "b3dffa5f955c1cd32b73ac3b100e648e1106de6c", "commitAfterChange": "b6ec4af9dd33b9a37fe18f1c2a043e67bdf0d67b", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 26, "signatureBeforeChange": "      private void configure(Object target, AttributeList attrs) throws BuildException", "signatureAfterChange": "      private void configure(Object target, AttributeList attrs) throws BuildException", "diff": ["-        // XXX", "-        // instead of doing this introspection each time around, I", "-        // should have a helper class to keep this info around for", "-        // each kind of class", "-", "-        Hashtable propertySetters = new Hashtable();", "-        BeanInfo beanInfo;", "-        try {", "-            beanInfo = Introspector.getBeanInfo(target.getClass());", "-        } catch (IntrospectionException ie) {", "-            String msg = \"Can't introspect class: \" + target.getClass();", "-            throw new BuildException(msg);", "-        }", "-", "-        PropertyDescriptor[] pda = beanInfo.getPropertyDescriptors();", "-        for (int i = 0; i < pda.length; i++) {", "-            PropertyDescriptor pd = pda[i];", "-            String property = pd.getName();", "-            Method setMethod = pd.getWriteMethod();", "-            if (setMethod != null) {", "-", "-                // make sure that there's only 1 param and that it", "-                // takes a String object, all other setMethods need", "-                // to get screened out", "-", "-                Class[] ma =setMethod.getParameterTypes();", "-                if (ma.length == 1) {", "-                    Class c = ma[0];", "-                    if (c.getName().equals(\"java.lang.String\")) {", "-                        propertySetters.put(property, setMethod);", "-                    }", "-                }", "-            }", "-        }", "+        IntrospectionHelper ih = ", "+            IntrospectionHelper.getHelper(target.getClass());", "+            String value=replaceProperties(attrs.getValue(i), ", "+                                           project.getProperties() );", "+            try {", "+                ih.setAttribute(project, target, ", "+                                attrs.getName(i).toLowerCase(), value);", "-            Method setMethod = (Method)propertySetters.get(attrs.getName(i));", "-            if (setMethod == null) {", "+            } catch (BuildException be) {", "-                    continue;", "+                } else {", "+                    be.setLocation(new Location(buildFile.toString(), ", "+                                                locator.getLineNumber(), ", "+                                                locator.getColumnNumber()));", "+                    throw be;", "-", "-                String msg = \"Class \" + target.getClass() +", "-                    \" doesn't support the \\\"\" + attrs.getName(i) + \"\\\" property\";", "-                throw new BuildException(msg);", "-            }", "-", "-            String value=replaceProperties(attrs.getValue(i), project.getProperties() );", "-            try {", "-                setMethod.invoke(target, new String[] {value});", "-            } catch (IllegalAccessException iae) {", "-                String msg = \"Error setting value for attrib: \" +", "-                    attrs.getName(i);", "-                iae.printStackTrace();", "-                throw new BuildException(msg);", "-            } catch (InvocationTargetException ie) {", "-                String msg = \"Error setting value for attrib: \" +", "-                    attrs.getName(i) + \" in \" + target.getClass().getName();", "-                ie.printStackTrace();", "-                ie.getTargetException().printStackTrace();", "-                throw new BuildException(msg);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e657cf22305e9d31fc002238683ba1f5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ComponentManager.java", "commitBeforeChange": "69d9b9a49622889f44d6792faf00f886857828d6", "commitAfterChange": "fcc7e2b47f01468c83803caa09ce8266e56f213c", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private Object createComponent(ClassLoader loader, AntLibFactory factory,                                    Class componentClass, String componentName,                                    String localName, boolean addTaskAdapter,                                    BuildElement model)          throws ExecutionException", "signatureAfterChange": "     public void configureAttributes(Object object, Map attributeValues)          throws ExecutionException", "diff": ["-     */", "-    private Object createComponent(ClassLoader loader, AntLibFactory factory,", "-                                   Class componentClass, String componentName,", "-                                   String localName, boolean addTaskAdapter,", "-                                   BuildElement model)", "-         throws ExecutionException {", "-        // set the location to unknown unless we have a build model to use", "-        Location location = Location.UNKNOWN_LOCATION;", "-        if (model != null) {", "-            location = model.getLocation();", "-        }", "-", "-        try {", "-            // create the component using the factory", "-            Object component", "-                 = factory.createComponent(componentClass, localName);", "-", "-            // wrap the component in an adapter if required.", "-            ExecutionComponent execComponent = null;", "-            if (addTaskAdapter) {", "-                if (component instanceof Task) {", "-                    execComponent = (Task) component;", "-                } else {", "-                    execComponent = new TaskAdapter(componentName, component);", "-                }", "-            } else if (component instanceof ExecutionComponent) {", "-                execComponent = (ExecutionComponent) component;", "-            }", "-", "-            // set the context loader to that for the component", "-            ClassLoader currentLoader", "-                 = LoaderUtils.setContextLoader(loader);", "-", "-            // if the component is an execution component create a context and", "-            // initialise the component with it.", "-            if (execComponent != null) {", "-                ExecutionContext context", "-                     = new ExecutionContext(frame, execComponent, location);", "-                context.setClassLoader(loader);", "-                execComponent.init(context, componentName);", "-            }", "-", "-            // if we have a model, use it to configure the component. Otherwise", "-            // the caller is expected to configure thre object", "-            if (model != null) {", "-                configureElement(factory, component, model);", "-                // if the component is an execution component and we have a", "-                // model, validate it", "-                if (execComponent != null) {", "-                    execComponent.validateComponent();", "-                }", "-            }", "-", "-            // reset the loader", "-            LoaderUtils.setContextLoader(currentLoader);", "-", "-            // if we have an execution component, potentially a wrapper,", "-            // return it otherwise the component directly", "-            if (execComponent != null) {", "-                return execComponent;", "-            } else {", "-                return component;", "-            }", "-        } catch (InstantiationException e) {", "-            throw new ExecutionException(\"Unable to instantiate component \"", "-                 + \"class \" + componentClass.getName() + \" for component <\"", "-                 + componentName + \">\", e, location);", "-        } catch (IllegalAccessException e) {", "-            throw new ExecutionException(\"Unable to access task class \"", "-                 + componentClass.getName() + \" for component <\"", "-                 + componentName + \">\", e, location);", "-        } catch (ExecutionException e) {", "-            e.setLocation(location, false);", "-            throw e;", "-        } catch (RuntimeException e) {", "-            throw new ExecutionException(e, location);", "-        }", "-    }", "+     */", "+    public void configureAttributes(Object object, Map attributeValues)", "+         throws ExecutionException {", "+        Setter setter = getSetter(object.getClass());", "+        for (Iterator i = attributeValues.keySet().iterator(); i.hasNext();) {", "+            String attributeName = (String) i.next();", "+            String attributeValue = (String) attributeValues.get(attributeName);", "+            if (!setter.supportsAttribute(attributeName)) {", "+                throw new ExecutionException(object.getClass().getName()", "+                     + \" does not support the \\\"\" + attributeName", "+                     + \"\\\" attribute\");", "+            }", "+            setter.setAttribute(object, attributeName,", "+                frame.replacePropertyRefs(attributeValue));", "+        }", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4b991ade1bccb68b59af5148875527c0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d3b50396fb892b1ef1acbf3fad1b90a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Definer.java", "commitBeforeChange": "edc2de39292cfb5b94b3dc7563df9f71ad4f1006", "commitAfterChange": "fa7d0ce02c707462773336c0743dca2dbff04db1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+                if (url == null) {", "+                    return;", "+                }", "-                    loadAntlib(al, url);", "+                    if (resourceStack.getStack().contains(url)) {", "+                        log(\"Warning: Attempting to recursively load \" + url", "+                            + \" at \" + getLocation(),", "+                            Project.MSG_WARN);", "+                    } else {", "+                        try {", "+                            resourceStack.getStack().add(url);", "+                            loadAntlib(al, url);", "+                        } finally {", "+                            resourceStack.getStack().remove(url);", "+                        }", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ea430951139020adbe4fa3ac9c7fcdc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/GenericDeploymentTool.java", "commitBeforeChange": "1cd764447cbd26e40fb0b78aaa4b4cf3398d2a9a", "commitAfterChange": "a50b60cdd9337ee2978a7f1522cf4963785f7aa9", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     protected boolean needToRebuild(Hashtable ejbFiles, File jarFile)", "signatureAfterChange": "     protected boolean needToRebuild(Hashtable ejbFiles, File jarFile)", "diff": ["-        // By default we assume we need to build.", "-        boolean needBuild = true;", "-", "-            long    lastBuild = jarFile.lastModified();", "+            long lastBuild = jarFile.lastModified();", "+            if (config.manifest != null && config.manifest.exists() &&", "+                config.manifest.lastModified() > lastBuild) {", "+                log(\"Build needed because manifest \" + config.manifest + \" is out of date\",", "+                    Project.MSG_VERBOSE);", "+                return true;", "+            }", "+                            ", "+            ", "-            // Set the need build to false until we find out otherwise.", "-            needBuild = false;", "-            while( (needBuild == false) && (fileIter.hasNext()) ) {", "+            while(fileIter.hasNext()) {", "-                needBuild = ( lastBuild < currentFile.lastModified() );", "-                if (needBuild) {", "+                if (lastBuild < currentFile.lastModified()) {", "+                    return true;                        ", "+            return false;", "-        return needBuild;", "+        return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ce872dcb338903595d4c06b4305409f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/XMLJUnitResultFormatter.java", "commitBeforeChange": "d90686a9a82bf54d19f1cad9e7cca0aeae46c4aa", "commitAfterChange": "96e6561e659a24f1e2122d884e83561327cb0f48", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void endTest(Test test)", "signatureAfterChange": "     public void endTest(Test test)", "diff": ["-        Element currentTest = (Element) testElements.get(test);", "-        ", "-        if (currentTest == null) {", "+        if (!testStarts.containsKey(test)) {", "+        }", "+", "+        Element currentTest = null;", "+        if (!failedTests.containsKey(test)) {", "+            currentTest = doc.createElement(TESTCASE);", "+            currentTest.setAttribute(ATTR_NAME, ", "+                                     JUnitVersionHelper.getTestCaseName(test));", "+            rootElement.appendChild(currentTest);", "+            testElements.put(test, currentTest);", "+        } else {", "-        ", "+"]}]}
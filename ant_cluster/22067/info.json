{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3b50e8d39c39ba36e8b2d6553061022f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51b01722b1f943cb4ef39f6480e2858d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/frontends/CLIMain.java", "commitBeforeChange": "c8ae289ddd72e9f5858612fba38393a3c8698c27", "commitAfterChange": "5b87919be6a8db15efe30f2de6e617aba31ef619", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private boolean parseCommandLineOptions( final String[] args )", "signatureAfterChange": "      private boolean parseCommandLineOptions( final String[] args )         throws Exception", "diff": ["+        throws Exception", "-            System.err.println( message );", "-            return false;", "+            throw new Exception( message );", "-                    m_parameters.setParameter( \"log.level\", option.getArgument() );", "+                    m_priority = mapLogLevel( option.getArgument() );", "-                    m_parameters.setParameter( \"log.level\", \"INFO\" );", "+                    m_priority = Priority.INFO;", "-                    m_parameters.setParameter( \"log.level\", \"ERROR\" );", "+                    m_priority = Priority.ERROR;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f877d2410f275a214479fbf0486824cf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/antlib/AntLibManager.java", "commitBeforeChange": "c0ddb311373dc9fe32a78a15a68c4587bbb7566d", "commitAfterChange": "69d9b9a49622889f44d6792faf00f886857828d6", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void configLibrary(InitConfig initConfig, Map librarySpecs,                                String libraryId,                                CircularDependencyChecker configuring,                                Map libraries, Map libPathsMap)          throws ExecutionException", "signatureAfterChange": "     private void configLibrary(InitConfig initConfig, Map librarySpecs,                                String libraryId,                                CircularDependencyChecker configuring,                                Map libraries, Map newLibraries, Map libPathsMap)          throws ExecutionException", "diff": ["-                               Map libraries, Map libPathsMap)", "+                               Map libraries, Map newLibraries, Map libPathsMap)", "-                if (!libraries.containsKey(extendsId)) {", "+                if (!libraries.containsKey(extendsId) &&", "+                    !newLibraries.containsKey(extendsId)) {", "-                        configuring, libraries, libPathsMap);", "+                        configuring, libraries, newLibraries, libPathsMap);", "+                if (extendsLibrary == null) {", "+                    extendsLibrary = (AntLibrary) newLibraries.get(extendsId);", "+                }", "+                ", "-            libraries.put(libraryId, antLibrary);", "+            newLibraries.put(libraryId, antLibrary);"]}]}
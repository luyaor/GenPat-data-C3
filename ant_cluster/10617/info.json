{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f2a632466290447603e9eeef04da1bc0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3806f5297d384c7e60efad68defc53c7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Replace.java", "commitBeforeChange": "9fdb1c85ba0d2fab36ce8f3b0563f393d955ac9d", "commitAfterChange": "a51c373c0fcf539fc8f71b5c21951fa64439d361", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 28, "signatureBeforeChange": "     private void processFile(File src) throws BuildException", "signatureAfterChange": "     private void processFile(File src) throws BuildException", "diff": ["-        Reader reader = null;", "-        Writer writer = null;", "+        FileInput in = null;", "+        FileOutput out = null;", "-            reader = encoding == null ? new FileReader(src)", "-                : new InputStreamReader(new FileInputStream(src), encoding);", "+            in = new FileInput(src);", "-            BufferedReader br = new BufferedReader(reader);", "-", "-            String buf = FileUtils.readFully(br);", "-            br.close();", "-            reader = null;", "-", "-            if (buf == null) {", "-                buf = \"\";", "-            }", "-", "-            StringBuffer buffer = new StringBuffer(buf);", "-            buf = null;", "+            temp = fileUtils.createTempFile(\"rep\", \".tmp\",", "+                    src.getParentFile());", "+            out = new FileOutput(temp);", "-            processReplacefilters(buffer, src.getPath());", "+            out.setInputBuffer(buildFilterChain(in.getOutputBuffer()));", "+", "+            while (in.readChunck()) {", "+                if (processFilterChain()) {", "+                    out.process();", "+                }", "+            }", "+", "+            flushFilterChain();", "+", "+            out.flush();", "+            in.close();", "+            in = null;", "+            out.close();", "+            out = null;", "-                String out = buffer.toString();", "-                temp = fileUtils.createTempFile(\"rep\", \".tmp\",", "-                        src.getParentFile());", "-                temp.deleteOnExit();", "-                writer = encoding == null ? new FileWriter(temp)", "-                        : new OutputStreamWriter(new FileOutputStream(temp), encoding);", "-                BufferedWriter bw = new BufferedWriter(writer);", "-                bw.write(out, 0, out.length());", "-                bw.flush();", "-                bw.close();", "-                writer = null;", "-                ++fileCount;", "-                                    + ioe.getClass().getName() + \":\"", "-                                    + ioe.getMessage(), ioe, getLocation());", "+                    + ioe.getClass().getName() + \":\"", "+                    + ioe.getMessage(), ioe, getLocation());", "-            if (reader != null) {", "+            if (in != null) {", "-                    reader.close();", "+                    in.close();", "-            if (writer != null) {", "+            if (out != null) {", "-                    writer.close();", "+                    out.close();", "-                temp.delete();", "+                if (!temp.delete()) {", "+                    temp.deleteOnExit();", "+                }", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d77067e3b164b413eb428e0de9b422b2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/LoadProperties.java", "commitBeforeChange": "224e2140ef1be18480aa565dc462ba34b09d65d1", "commitAfterChange": "861a4490644853d4b9bff9b0d0b871d7e88b0784", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public final void execute() throws BuildException", "signatureAfterChange": "     public final void execute() throws BuildException", "diff": ["-        if (srcFile == null && resource == null) {", "-            throw new BuildException(", "-                \"One of \\\"srcfile\\\" or \\\"resource\\\" is required.\");", "+        if (src == null) {", "+            throw new BuildException(\"A source resource is required.\");", "+        }", "+        if (!src.isExists()) {", "+            if (src instanceof JavaResource) {", "+                // dreaded backwards compatibility", "+                log(\"Unable to find resource \" + src, Project.MSG_WARN);", "+                return;", "+            }", "+            throw new BuildException(\"Source resource does not exist: \" + src);", "-", "-        if (srcFile != null) {", "-            if (!srcFile.exists()) {", "-                throw new BuildException(\"Source file does not exist :\"+srcFile);", "-            }", "-", "-            if (!srcFile.isFile()) {", "-                throw new BuildException(\"Source file is not a file :\"+srcFile);", "-            }", "-", "-            try {", "-                bis = new BufferedInputStream(new FileInputStream(srcFile));", "-            } catch (IOException eyeOhEx) {", "-                throw new BuildException(eyeOhEx);", "-            }", "-        } else {", "-            ClassLoader cL = (classpath != null)", "-                ? getProject().createClassLoader(classpath)", "-                : LoadProperties.class.getClassLoader();", "-", "-            InputStream is = (cL == null)", "-                ? ClassLoader.getSystemResourceAsStream(resource)", "-                : cL.getResourceAsStream(resource);", "-", "-            if (is != null) {", "-                bis = new BufferedInputStream(is);", "-            } else { // do it like Property", "-                log(\"Unable to find resource \" + resource, Project.MSG_WARN);", "-                return;", "-            }", "-        }", "-", "+            bis = new BufferedInputStream(src.getInputStream());", "-        } catch (final BuildException be) {", "-            throw be;", "-            try {", "-                if (bis != null) {", "-                    bis.close();", "-                }", "-            } catch (IOException ioex) {", "-                //ignore", "-            }", "-            try {", "-                if (tis != null) {", "-                    tis.close();", "-                }", "-            } catch (IOException ioex) {", "-                //ignore", "-            }", "+            FileUtils.close(bis);", "+            FileUtils.close(tis);"]}]}
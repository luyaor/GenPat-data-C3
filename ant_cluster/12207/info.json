{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "277dae0cc016e2ce0f15ff657f2fd0dd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e27ae66f02800ebf4787ebd5d52e317", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/filters/HeadTailTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void testFilterReaderHeadLinesSkip() throws IOException", "signatureAfterChange": "      @Test     public void testFilterReaderHeadLinesSkip() throws IOException", "diff": ["+    @Test", "-        executeTarget(\"testFilterReaderHeadLinesSkip\");", "-        File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(),", "-            \"expected/head-tail.headLinesSkip.test\");", "-        File result = new File(getProject().getProperty(\"output\") + \"/head-tail.filterReaderHeadLinesSkip.test\");", "-        assertTrue(\"testFilterReaderHeadLinesSkip: Result not like expected\",", "-                   FILE_UTILS.contentEquals(expected, result));", "+        buildRule.executeTarget(\"testFilterReaderHeadLinesSkip\");", "+        File expected = buildRule.getProject().resolveFile(\"expected/head-tail.headLinesSkip.test\");", "+        File result = new File(buildRule.getProject().getProperty(\"output\") + \"/head-tail.filterReaderHeadLinesSkip.test\");", "+        assertEquals(\"testFilterReaderHeadLinesSkip: Result not like expected\",", "+                FileUtilities.getFileContents(expected), FileUtilities.getFileContents(result));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4994b3a7c941693e1713317333132d23", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/filters/HeadTailTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public void testFilterReaderTailLinesSkip() throws IOException", "signatureAfterChange": "      @Test     public void testFilterReaderTailLinesSkip() throws IOException", "diff": ["+    @Test", "-        executeTarget(\"testFilterReaderTailLinesSkip\");", "-        File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(),", "-            \"expected/head-tail.tailLinesSkip.test\");", "-        File result = new File(getProject().getProperty(\"output\") + \"/head-tail.filterReaderTailLinesSkip.test\");", "-        assertTrue(\"testFilterReaderTailLinesSkip: Result not like expected\",", "-                   FILE_UTILS.contentEquals(expected, result));", "+        buildRule.executeTarget(\"testFilterReaderTailLinesSkip\");", "+        File expected = buildRule.getProject().resolveFile(\"expected/head-tail.tailLinesSkip.test\");", "+        File result = new File(buildRule.getProject().getProperty(\"output\") + \"/head-tail.filterReaderTailLinesSkip.test\");", "+        assertEquals(\"testFilterReaderTailLinesSkip: Result not like expected\",", "+                FileUtilities.getFileContents(expected), FileUtilities.getFileContents(result));"]}]}
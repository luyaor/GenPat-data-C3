{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2e9ec4316e339c27c9cd90f7f7766f05", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "234fe495a04faa523c9be2e548a8ef91", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/ReplaceTokens.java", "commitBeforeChange": "ca4d619112299ab28dd289a2e0e407ddebc6340c", "commitAfterChange": "6e88f92ead6a5f67935055661a9e8041f5ed8bae", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public int read() throws IOException", "signatureAfterChange": "     public int read() throws IOException", "diff": ["-        if (replaceIndex != -1) {", "-            final int ch = replaceData.charAt(replaceIndex++);", "-            if (replaceIndex >= replaceData.length()) {", "-                replaceIndex = -1;", "+        if (!resolvedTokensBuilt) {", "+            // build the resolved tokens tree map.", "+            for (String key : hash.keySet()) {", "+                resolvedTokens.put(beginToken + key + endToken, hash.get(key));", "-            return ch;", "+            resolvedTokensBuilt = true;", "-        int ch = getNextChar();", "-", "-        if (ch == beginToken) {", "-            final StringBuffer key = new StringBuffer(\"\");", "-            do  {", "-                ch = getNextChar();", "-                if (ch != -1) {", "-                    key.append((char) ch);", "-                } else {", "-                    break;", "-                }", "-            } while (ch != endToken);", "-", "-            if (ch == -1) {", "-                if (queuedData == null || queueIndex == -1) {", "-                    queuedData = key.toString();", "-                } else {", "-                    queuedData", "-                        = key.toString() + queuedData.substring(queueIndex);", "-                }", "-                if (queuedData.length() > 0) {", "-                    queueIndex = 0;", "-                } else {", "-                    queueIndex = -1;", "-                }", "-                return beginToken;", "+        // are we currently serving replace data?", "+        if (replaceData != null) {", "+            if (replaceIndex < replaceData.length()) {", "+                return replaceData.charAt(replaceIndex++);", "-                key.setLength(key.length() - 1);", "+                replaceData = null;", "+            }", "+        }", "-                final String replaceWith = (String) hash.get(key.toString());", "-                if (replaceWith != null) {", "-                    if (replaceWith.length() > 0) {", "-                        replaceData = replaceWith;", "-                        replaceIndex = 0;", "-                    }", "-                    return read();", "+        // is the read buffer empty?", "+        if (readBuffer.length() == 0) {", "+            int next = in.read();", "+            if (next == -1) {", "+                return next; // end of stream. all buffers empty.", "+            }", "+            readBuffer += (char)next;", "+        }", "+", "+        for (;;) {", "+            // get the closest tokens", "+            SortedMap<String,String> possibleTokens = resolvedTokens.tailMap(readBuffer);", "+            if (possibleTokens.isEmpty() || !possibleTokens.firstKey().startsWith(readBuffer)) { // if there is none, then deliver the first char from the buffer.", "+                return getFirstCharacterFromReadBuffer();", "+            } else if (readBuffer.equals(possibleTokens.firstKey())) { // there exists a nearest token - is it an exact match?", "+                // we have found a token. prepare the replaceData buffer.", "+                replaceData = resolvedTokens.get(readBuffer);", "+                replaceIndex = 0;", "+                readBuffer = \"\"; // destroy the readBuffer - it's contents are being replaced entirely.", "+                // get the first character via recursive call.", "+                return read();", "+            } else { // nearest token is not matching exactly - read one character more.", "+                int next = in.read();", "+                if (next != -1) {", "+                    readBuffer += (char)next;", "-                    String newData = key.toString() + endToken;", "-                    if (queuedData == null || queueIndex == -1) {", "-                        queuedData = newData;", "-                    } else {", "-                        queuedData = newData + queuedData.substring(queueIndex);", "-                    }", "-                    queueIndex = 0;", "-                    return beginToken;", "+                    return getFirstCharacterFromReadBuffer(); // end of stream. deliver remaining characters from buffer.", "-        return ch;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2c536f442d4e25136d2f7ac12fe4b8d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/init/org/apache/ant/init/LoaderUtils.java", "commitBeforeChange": "7499c443d67445ea8fd0b8f4bd56c72251b18bf4", "commitAfterChange": "b7e43ad8c5906ae2b6d6b42f8b2715dc7d2e7a16", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public static URL[] getLoaderURLs(URL baseURL, String defaultFile,                                       String[] extensions)          throws MalformedURLException", "signatureAfterChange": "     private static URL[] getLocalURLs(File location,                                       final String[] extensions)          throws MalformedURLException", "diff": ["-    public static URL[] getLoaderURLs(URL baseURL, String defaultFile,", "-                                      String[] extensions)", "-        if (baseURL.getProtocol().equals(\"file\")) {", "-            urls = getDirectoryURLs(new File(baseURL.getFile()), extensions);", "-            URL jarListURL = new URL(baseURL, LIST_FILE);", "-                            jarList.add(new URL(baseURL, line));", "-                    urls = new URL[]{new URL(baseURL, defaultFile)};", "+    private static URL[] getLocalURLs(File location,", "+                                      final String[] extensions)", "+        if (!location.exists()) {", "+        if (!location.isDirectory()) {", "+            String path = location.getPath();", "+            for (int i = 0; i < extensions.length; ++i) {", "+                if (path.endsWith(extensions[i])) {", "+                    urls[0] = InitUtils.getFileURL(location);", "+                    break;", "+                }", "+            }", "+            return urls;", "+        }", "+", "+        File[] jars = location.listFiles("]}]}
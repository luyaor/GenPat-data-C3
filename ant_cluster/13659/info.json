{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c0af3a54d2aa93bf8e8a45aef85c33b0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1b010e5254608e854f86c1cda20d57a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SignJar.java", "commitBeforeChange": "0d4d3af7217eadd1463853997ecc1ed7f6870ddf", "commitAfterChange": "3b2ee536588e043b52f5926cd0d60639dada62aa", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 20, "signatureBeforeChange": "     protected boolean isUpToDate(File jarFile, File signedjarFile)", "signatureAfterChange": "     protected boolean isUpToDate(File jarFile, File signedjarFile)", "diff": ["-        if (null == jarFile) {", "+        if (null == jarFile && !jarFile.exists()) {", "+            //these are pathological case, but retained in case somebody", "+            //subclassed us.", "-        if (null != signedjarFile) {", "-", "-            if (!jarFile.exists()) {", "-              return false;", "-            }", "-            if (!signedjarFile.exists()) {", "-              return false;", "-            }", "-            if (jarFile.equals(signedjarFile)) {", "-              return false;", "-            }", "-            if (FILE_UTILS.isUpToDate(jarFile, signedjarFile)) {", "-                return true;", "-            }", "-        } else {", "-            if (lazy) {", "-                return isSigned(jarFile);", "-            }", "+        //we normally compare destination with source", "+        File destFile = signedjarFile;", "+        if (destFile == null) {", "+            //but if no dest is specified, compare source to source", "+            destFile = jarFile;", "-        return false;", "+        //if, by any means, the destfile and source match,", "+        if (jarFile.equals(destFile)) {", "+            if (lazy) {", "+                //we check the presence of signatures on lazy signing", "+                return isSigned(jarFile);", "+            }", "+            //unsigned or non-lazy self signings are always false", "+            return false;", "+        }", "+", "+        //if they are different, the timestamps are used", "+        return FILE_UTILS.isUpToDate(jarFile, destFile);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9a606d32b5eab6e0451bf3838e359e6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntTypeDefinition.java", "commitBeforeChange": "cd8a8e0cc286ceb9111845fbd0606efb25669ef8", "commitAfterChange": "960cd2a7117d0fa96b4247c3081da7b5363ba0d8", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public boolean similarDefinition(AntTypeDefinition other, Project project)", "signatureAfterChange": "     public boolean similarDefinition(AntTypeDefinition other, Project project)", "diff": ["-        if (other == null) {", "-            return false;", "-        }", "-        if (getClass() != other.getClass()) {", "-            return false;", "-        }", "-        if (!getClassName().equals(other.getClassName())) {", "-            return false;", "-        }", "-        if (!extractClassname(adapterClass).equals(", "-                extractClassname(other.adapterClass))) {", "-            return false;", "-        }", "-        if (!extractClassname(adaptToClass).equals(", "-                extractClassname(other.adaptToClass))) {", "+        if (other == null", "+            || getClass() != other.getClass()", "+            || !getClassName().equals(other.getClassName())", "+            || !extractClassname(adapterClass).equals(", "+            extractClassname(other.adapterClass))", "+            || !extractClassname(adaptToClass).equals(", "+            extractClassname(other.adaptToClass))) {", "-        ClassLoader newLoader = this.getClassLoader();", "-        if (oldLoader == newLoader) {", "-            return true;", "-        }", "-        return", "-            newLoader != null", "-            && oldLoader != null", "-            && oldLoader instanceof AntClassLoader", "+        ClassLoader newLoader = getClassLoader();", "+        return oldLoader == newLoader", "+            || (oldLoader instanceof AntClassLoader", "-            .equals(((AntClassLoader) newLoader).getClasspath());", "+            .equals(((AntClassLoader) newLoader).getClasspath()));"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f650b983a4d0f5413840bc9b871c95f4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73023cb81ff19873c2c2e057c9ca29ae", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/DOMElementWriter.java", "commitBeforeChange": "bd79701cef51ac778891ad7112ee49ecb2415caa", "commitAfterChange": "d1895cd5aac83ffcc3961f51359c6fe473384429", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void write(Element element, Writer out, int indent,                        String indentWith)         throws IOException", "signatureAfterChange": "     public void write(Element element, Writer out, int indent,                        String indentWith)         throws IOException", "diff": ["-            if (child.getNodeType() == Node.ELEMENT_NODE) {", "+            switch (child.getNodeType()) {", "+                ", "+            case Node.ELEMENT_NODE:", "-            }", "-", "-            if (child.getNodeType() == Node.TEXT_NODE) {", "+                break;", "+                ", "+            case Node.TEXT_NODE:", "+            case Node.CDATA_SECTION_NODE:", "+                break;", "+", "+            case Node.ENTITY_REFERENCE_NODE:", "+                out.write('&');", "+                out.write(child.getNodeName());", "+                out.write(';');", "+                break;", "+", "+            case Node.PROCESSING_INSTRUCTION_NODE:", "+                out.write(\"<?\");", "+                out.write(child.getNodeName());", "+                String data = child.getNodeValue();", "+                if ( data != null && data.length() > 0 ) {", "+                    out.write(' ');", "+                    out.write(data);", "+                }", "+                out.write(\"?>\");", "+                break;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6744bfbd21cdf43f28281a8055572d8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/vss/MSVSS.java", "commitBeforeChange": "5722812dbe0cfda11a528c3e6c32b2b2b67b7960", "commitAfterChange": "d76fda652ab6bb3f3840e8606f73d23307a33ca4", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 44, "signatureBeforeChange": "     protected String getVersionLabel()", "signatureAfterChange": "     protected String getVersionLabel()", "diff": ["+            if (m_FromLabel.length() > 31) {", "+                m_FromLabel = m_FromLabel.substring(0, 30);", "+                log(\"FromLabel is longer than 31 characters, truncated to: \"", "+                    + m_FromLabel, Project.MSG_WARN);", "+            }", "+            if (m_ToLabel.length() > 31) {", "+                m_ToLabel = m_ToLabel.substring(0, 30);", "+                log(\"ToLabel is longer than 31 characters, truncated to: \"", "+                    + m_ToLabel, Project.MSG_WARN);", "+            }", "+            if (m_FromLabel.length() > 31) {", "+                m_FromLabel = m_FromLabel.substring(0, 30);", "+                log(\"FromLabel is longer than 31 characters, truncated to: \"", "+                    + m_FromLabel, Project.MSG_WARN);", "+            }", "+            if (m_ToLabel.length() > 31) {", "+                m_ToLabel = m_ToLabel.substring(0, 30);", "+                log(\"ToLabel is longer than 31 characters, truncated to: \"", "+                    + m_ToLabel, Project.MSG_WARN);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aceb64efda22dbced6006f6f7d625b5e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "b5ad58c4d736b7f0a97aaa78b258dcceb9c21c89", "commitAfterChange": "7435b27b914764c3845b4821363ffeb4ddfe89cd", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "         public InputSource resolveEntity(String publicId,                                          String systemId)", "signatureAfterChange": "         public InputSource resolveEntity(String publicId,                                          String systemId)", "diff": ["-", "+        ", "+                int index = path.indexOf(\"file:\");", "+                ", "+                // we only have to handle these for backward compatibility", "+                // since they are in the FAQ.", "+                while (index != -1) {", "+                    path = path.substring(0, index) + path.substring(index + 5);", "+                    index = path.indexOf(\"file:\");", "+                }", "+                ", "+                String entitySystemId = path;", "+                index = path.indexOf(\"%23\");", "+                // convert these to #", "+                while (index != -1) {", "+                    path = path.substring(0, index) + \"#\" + path.substring(index + 3);", "+                    index = path.indexOf(\"%23\");", "+                }", "+", "-                    return new InputSource(new FileInputStream(file));", "+                    InputSource inputSource = new InputSource(new FileInputStream(file));", "+                    inputSource.setSystemId(\"file:\" + entitySystemId);", "+                    return inputSource;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4a9631641c5a7cfd25f312ff5ec8bd6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/AntClassLoaderDelegationTest.java", "commitBeforeChange": "3b6aedbd218dfdc3284e0ba331a686b2a8448722", "commitAfterChange": "3dcb9a556eeed579f2517b4835315e4da8bcad59", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "          public void testFindResources() throws Exception", "signatureAfterChange": "          public void testFindResources() throws Exception", "diff": ["+        // --- SOME PRINTF's to figure out gump failure", "+        System.out.println(\"ParentLoader(): \" + enum2List(parent.getResources(TEST_RESOURCE)));", "+        ClassLoader loader = AntClassLoaderDelegationTest.class.getClassLoader();", "+        System.out.println(\"AntClassLoaderDelegationTest\");", "+        while (loader != null) {", "+            System.out.println(\" \" + loader.getClass() + \">>> \" + enum2List(loader.getResources(TEST_RESOURCE)));", "+            loader = loader.getParent();", "+        }", "+", "+        System.out.println(\"Project\");", "+        loader = Project.class.getClassLoader();", "+        while (loader != null) {", "+            System.out.println(\" \" + loader.getClass() + \">>> \" + enum2List(loader.getResources(TEST_RESOURCE)));", "+            loader = loader.getParent();", "+        }", "+            ", "+                               "]}]}
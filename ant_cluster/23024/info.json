{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "930be51d1c42dacf99e91763c1673737", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f0e7f717e4512490b998c6151757cb2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ResourceUtils.java", "commitBeforeChange": "33e3b2533d5782e539cba766f178da3ce2c27d24", "commitAfterChange": "a10f2fd77780d96b37b5eb667c9ec6eab7d332aa", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public static Resource[] selectOutOfDateSources(ProjectComponent logTo,                                                     Resource[] source,                                                     FileNameMapper mapper,                                                     ResourceFactory targets,                                                     long granularity)", "signatureAfterChange": "     public static ResourceCollection selectOutOfDateSources(ProjectComponent logTo,                                                             ResourceCollection source,                                                             FileNameMapper mapper,                                                             ResourceFactory targets,                                                             long granularity)", "diff": ["-        long now = System.currentTimeMillis() + granularity;", "-        Vector vresult = new Vector();", "-        for (int counter = 0; counter < source.length; counter++) {", "-            if (source[counter].getLastModified() > now) {", "-                logTo.log(\"Warning: \" + source[counter].getName()", "-                         + \" modified in the future.\", Project.MSG_WARN);", "-            }", "-            String[] targetnames =", "-                mapper.mapFileName(source[counter].getName()", "-                                   .replace('/', File.separatorChar));", "-            if (targetnames != null) {", "-                boolean added = false;", "-                StringBuffer targetList = new StringBuffer();", "-                for (int ctarget = 0; !added && ctarget < targetnames.length;", "-                     ctarget++) {", "-                    Resource atarget =", "-                        targets.getResource(targetnames[ctarget]", "-                                            .replace(File.separatorChar, '/'));", "-                    // if the target does not exist, or exists and", "-                    // is older than the source, then we want to", "-                    // add the resource to what needs to be copied", "-                    if (!atarget.isExists()) {", "-                        logTo.log(source[counter].getName() + \" added as \"", "-                                  + atarget.getName()", "-                                  + \" doesn\\'t exist.\", Project.MSG_VERBOSE);", "-                        vresult.addElement(source[counter]);", "-                        added = true;", "-                    } else if (!atarget.isDirectory()", "-                               && SelectorUtils.isOutOfDate(source[counter],", "-                                                         atarget,", "-                                                         (int) granularity)) {", "-                        logTo.log(source[counter].getName() + \" added as \"", "-                                  + atarget.getName()", "-                                  + \" is outdated.\", Project.MSG_VERBOSE);", "-                        vresult.addElement(source[counter]);", "-                        added = true;", "-                    } else {", "-                        if (targetList.length() > 0) {", "-                            targetList.append(\", \");", "-                        }", "-                        targetList.append(atarget.getName());", "-                    }", "-                }", "-                if (!added) {", "-                    logTo.log(source[counter].getName()", "-                              + \" omitted as \" + targetList.toString()", "-                              + (targetnames.length == 1 ? \" is\" : \" are \")", "-                              + \" up to date.\", Project.MSG_VERBOSE);", "-                }", "-            } else {", "-                logTo.log(source[counter].getName()", "-                          + \" skipped - don\\'t know how to handle it\",", "-                          Project.MSG_VERBOSE);", "-            }", "+     */", "+    public static ResourceCollection selectOutOfDateSources(ProjectComponent logTo,", "+                                                            ResourceCollection source,", "+                                                            FileNameMapper mapper,", "+                                                            ResourceFactory targets,", "+                                                            long granularity) {", "+        if (source.size() == 0) {", "+            logTo.log(\"No sources found.\", Project.MSG_VERBOSE);", "+            return Resources.NONE;", "-        Resource[] result = new Resource[vresult.size()];", "-        vresult.copyInto(result);", "+        source = Union.getInstance(source);", "+        logFuture(logTo, source, granularity);", "+", "+        Union result = new Union();", "+        for (Iterator iter = source.iterator(); iter.hasNext();) {", "+            Resource sr = (Resource) iter.next();", "+            String[] targetnames = mapper.mapFileName(", "+                sr.getName().replace('/', File.separatorChar));", "+", "+            if (targetnames == null || targetnames.length == 0) {", "+                logTo.log(sr.getName()", "+                      + \" skipped - don\\'t know how to handle it\",", "+                      Project.MSG_VERBOSE);", "+                continue;", "+            }", "+            Union targetColl = new Union();", "+            for (int i = 0; i < targetnames.length; i++) {", "+                targetColl.add(targets.getResource(", "+                    targetnames[i].replace(File.separatorChar, '/')));", "+            }", "+            //find the out-of-date targets:", "+            Restrict r = new Restrict();", "+            r.add(new And(new ResourceSelector[] {Type.FILE, new Or(", "+                new ResourceSelector[] {NOT_EXISTS, new Outdated(sr, granularity)})}));", "+            r.add(targetColl);", "+            if (r.size() > 0) {", "+                result.add(sr);", "+                Resource t = (Resource) (r.iterator().next());", "+                logTo.log(sr.getName() + \" added as \" + t.getName()", "+                    + (t.isExists() ? \" is outdated.\" : \" doesn\\'t exist.\"),", "+                    Project.MSG_VERBOSE);", "+                continue;", "+            }", "+            //log uptodateness of all targets:", "+            logTo.log(sr.getName()", "+                  + \" omitted as \" + targetColl.toString()", "+                  + (targetColl.size() == 1 ? \" is\" : \" are \")", "+                  + \" up to date.\", Project.MSG_VERBOSE);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8edab8f1096db35ec57ae4373586ff60", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteOn.java", "commitBeforeChange": "575148a6633379d3f2c61d0cc838050b68929852", "commitAfterChange": "a7d38cf2639a85056062bdc2c3da1067cb84644a", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": "     protected void runExec(Execute exe) throws BuildException", "signatureAfterChange": "     protected void runExec(Execute exe) throws BuildException", "diff": ["-                    if (!\"dir\".equals(type)) {", "+                    if (!FileDirBoth.DIR.equals(type)) {", "-                        currentType = \"dir\";", "+                        currentType = FileDirBoth.DIR;", "-                if (!\"dir\".equals(currentType)) {", "+                if (!FileDirBoth.DIR.equals(currentType)) {", "-                if (!\"file\".equals(currentType)) {", "+                if (!FileDirBoth.FILE.equals(currentType)) {", "-                        = ((!\"dir\".equals(currentType))", "+                        = ((!FileDirBoth.DIR.equals(currentType))", "-                        + ((!\"file\".equals(currentType))", "+                        + ((!FileDirBoth.FILE.equals(currentType))", "-            for (int i = 0; i < filelists.size(); i++) {", "-                FileList list = (FileList) filelists.elementAt(i);", "-                File base = list.getDir(getProject());", "-                String[] names = getFilesAndDirs(list);", "+\t", "+\t    Iterator iter = resources.iterator();", "+\t    while (iter.hasNext()) {", "+\t\tResource res = (Resource) iter.next();", "-                for (int j = 0; j < names.length; j++) {", "-                    File f = new File(base, names[j]);", "-                    if ((!ignoreMissing) || (f.isFile() && !\"dir\".equals(type))", "-                        || (f.isDirectory() && !\"file\".equals(type))) {", "+\t\tif (!res.isExists() && ignoreMissing) {", "+\t\t    continue;", "+\t\t}", "-                        if (ignoreMissing || f.isFile()) {", "-                            totalFiles++;", "-                        } else {", "-                            totalDirs++;", "-                        }", "-                        fileNames.addElement(names[j]);", "-                        baseDirs.addElement(base);", "-                    }", "-                }", "-                if (fileNames.size() == 0 && skipEmpty) {", "-                    DirectoryScanner ds = new DirectoryScanner();", "-                    ds.setBasedir(base);", "-                    ds.setIncludes(list.getFiles(getProject()));", "-                    ds.scan();", "-                    int includedCount", "-                        = ds.getIncludedFilesCount() + ds.getIncludedDirsCount();", "+\t\tFile base = null;", "+\t\tString name = res.getName();", "+\t\tif (res instanceof FileResource) {", "+\t\t    FileResource fr = (FileResource) res;", "+\t\t    base = fr.getBaseDir();", "+\t\t    if (base == null) {", "+\t\t\tname = fr.getFile().getAbsolutePath();", "+\t\t    }", "+\t\t}", "-                    log(\"Skipping filelist for directory \" + base + \". It is \"", "-                        + ((includedCount > 0) ? \"up to date.\" : \"empty.\"),", "-                        Project.MSG_INFO);", "-                    continue;", "-                }", "+\t\tif (restrict(new String[] {name}, base).length == 0) {", "+\t\t    continue;", "+\t\t}", "+", "+\t\tif ((!res.isDirectory() || !res.isExists())", "+\t\t    && !FileDirBoth.DIR.equals(type)) {", "+\t\t    totalFiles++;", "+\t\t} else if (res.isDirectory() && !FileDirBoth.FILE.equals(type)) {", "+\t\t    totalDirs++;", "+\t\t} else {", "+\t\t    continue;", "+\t\t}", "+", "+\t\tbaseDirs.add(base);", "+\t\tfileNames.add(name);", "+", "-                    String[] s = new String[fileNames.size()];", "-                    fileNames.copyInto(s);", "-                    for (int j = 0; j < s.length; j++) {", "-                        String[] command = getCommandline(s[j], base);", "-                        log(Commandline.describeCommand(command),", "-                            Project.MSG_VERBOSE);", "-                        exe.setCommandline(command);", "+\t\t    String[] command = getCommandline(name, base);", "+\t\t    log(Commandline.describeCommand(command),", "+\t\t\tProject.MSG_VERBOSE);", "+\t\t    exe.setCommandline(command);", "-                        if (redirectorElement != null) {", "-                            setupRedirector();", "-                            redirectorElement.configure(redirector, s[j]);", "-                        }", "-                        if (redirectorElement != null || haveExecuted) {", "-                            // need to reset the stream handler to restart", "-                            // reading of pipes;", "-                            // go ahead and do it always w/ nested redirectors", "-                            exe.setStreamHandler(redirector.createHandler());", "-                        }", "-                        runExecute(exe);", "-                        haveExecuted = true;", "-                    }", "-                    fileNames.removeAllElements();", "-                    baseDirs.removeAllElements();", "-                }", "+\t\t    if (redirectorElement != null) {", "+\t\t\tsetupRedirector();", "+\t\t\tredirectorElement.configure(redirector, name);", "+\t\t    }", "+\t\t    if (redirectorElement != null || haveExecuted) {", "+\t\t\t// need to reset the stream handler to restart", "+\t\t\t// reading of pipes;", "+\t\t\t// go ahead and do it always w/ nested redirectors", "+\t\t\texe.setStreamHandler(redirector.createHandler());", "+\t\t    }", "+\t\t    runExecute(exe);", "+\t\t    haveExecuted = true;", "+\t\t    fileNames.removeAllElements();", "+\t\t    baseDirs.removeAllElements();", "+\t\t}", "-            }", "+\t    }"]}]}
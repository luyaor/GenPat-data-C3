{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "91dd5eaf3cc1d23263d2d35334fcf9cb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0972ce06cde0fa210b1054dddf418dd6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/cli/org/apache/ant/cli/Commandline.java", "commitBeforeChange": "e0fef5cf64773a98734998b9736ded96fc8be2c7", "commitAfterChange": "81c17b6164451315e24ae774f1bed668cbca99ce", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void parseArguments(String[] args)          throws ConfigException", "signatureAfterChange": "     private void parseArguments(String[] args)          throws ConfigException", "diff": ["+            } else if (arg.equals(\"-debug\")) {", "+                // printVersion();", "+                messageOutputLevel = MessageLevel.MSG_DEBUG;", "+            } else if (arg.startsWith(\"-D\")) {", "+                String name = arg.substring(2, arg.length());", "+                String value = null;", "+                int posEq = name.indexOf(\"=\");", "+                if (posEq > 0) {", "+                    value = name.substring(posEq + 1);", "+                    name = name.substring(0, posEq);", "+                } else if (i < args.length - 1) {", "+                    value = args[++i];", "+                }", "+                definedProperties.put(name, value);", "+            if (!defaultBuildFile.exists()) {", "+                File ant1BuildFile =  new File(DEFAULT_ANT1_FILENAME);", "+                if (ant1BuildFile.exists()) {", "+                    defaultBuildFile = ant1BuildFile;", "+                }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f214b5ca9574af04abad2940536923e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/helper/ProjectHelper2.java", "commitBeforeChange": "8016bd8d2869a25c7736b6e0b93ac9d50376b77b", "commitAfterChange": "13941782fe873cc353e3dd1f25649a401d826952", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void parse(Project project, Object source) throws BuildException", "signatureAfterChange": "     public void parse(Project project, Object source) throws BuildException", "diff": ["+", "+            // resolve extensionOf attributes", "+            for (Iterator i = getExtensionStack().iterator(); i.hasNext(); ) {", "+                String[] extensionInfo = (String[]) i.next();", "+                String tgName = extensionInfo[0];", "+                String name = extensionInfo[1];", "+                Hashtable projectTargets = project.getTargets();", "+                if (!projectTargets.containsKey(tgName)) {", "+                    throw new BuildException(\"can't add target \"", "+                                             + name + \" to extension-point \"", "+                                             + tgName", "+                                             + \" because the extension-point\"", "+                                             + \" is unknown.\");", "+                }", "+                Target t = (Target) projectTargets.get(tgName);", "+                if (!(t instanceof ExtensionPoint)) {", "+                    throw new BuildException(\"referenced target \"", "+                                             + tgName", "+                                             + \" is not an extension-point\");", "+                }", "+                t.addDependency(name);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e0c04125b29bd9a1ca8c375008e04fb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/xml/ElementHandler.java", "commitBeforeChange": "b83132393de1bdee68b42caea0604469c85d0306", "commitAfterChange": "af074bc65d9fdde7982618162dfdab2dfae06e5f", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "     protected final void processAttributes(Attributes attributes)          throws SAXParseException", "signatureAfterChange": "     protected final void processAttributes(Attributes attributes)          throws SAXParseException", "diff": ["-        aspectAttributes = new HashMap();", "-        elementAttributes = new HashMap();", "-        int length = attributes.getLength(); ", "+        namespaces = new HashMap();", "+        elementAttributes = new AttributeCollection();", "+        int length = attributes.getLength();", "-            String attributeName = attributes.getQName(i);", "+            String uri = attributes.getURI(i);", "+            if (uri != null && uri.trim().length() == 0) {", "+                uri = null;", "+            }", "+            String localName = attributes.getLocalName(i);", "+            String qName = attributes.getQName(i);", "+            if (uri == null && qName.indexOf(\":\") != -1) {", "+                // try to resolve through known namespaces", "+                uri = context.resolveNamespace(qName);", "+                localName = qName.substring(qName.indexOf(\":\") + 1);", "+            }", "+", "-            if (attributeName.indexOf(\":\") != -1) {", "-                aspectAttributes.put(attributeName, attributeValue);", "+            if (uri != null) {", "+                AttributeCollection namespaceAttributes", "+                    = (AttributeCollection) namespaces.get(uri);", "+                if (namespaceAttributes == null) {", "+                    namespaceAttributes = new AttributeCollection();", "+                    namespaces.put(uri, namespaceAttributes);", "+                }", "+", "+                namespaceAttributes.putAttribute(localName, attributeValue);", "-                validateAttribute(attributeName, attributeValue);", "-                elementAttributes.put(attributeName, attributeValue);", "+                validateAttribute(localName, attributeValue);", "+                elementAttributes.putAttribute(localName, attributeValue);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4af04296220de9f51aa81c1089bb2c5a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/CoreDataService.java", "commitBeforeChange": "752f49d5b18f9743f8e4a6dbdc8065d240d9c97a", "commitAfterChange": "da4e1a3aa99899d6aecc6d14c2a7498fa51647aa", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void setMutableDataValue(String valueName, Object value)          throws ExecutionException", "signatureAfterChange": "     private void setOverrideProperty(String name, DataValue value,                                      boolean mutable)          throws ExecutionException", "diff": ["-    public void setMutableDataValue(String valueName, Object value)", "-         throws ExecutionException {", "-        frame.setDataValue(valueName, value, true);", "+     */", "+    private void setOverrideProperty(String name, DataValue value,", "+                                     boolean mutable)", "+         throws ExecutionException {", "+        int refIndex = name.indexOf(Project.REF_DELIMITER);", "+        if (refIndex == -1) {", "+            throw new ExecutionException(\"Property overrides can only be set\"", "+                 + \" for properties in referenced projects - not \"", "+                 + name);", "+        }", "+", "+        String firstFrameName = name.substring(0, refIndex);", "+", "+        String relativeName", "+             = name.substring(refIndex + Project.REF_DELIMITER.length());", "+", "+        Map frameOverrides = (Map) overrides.get(firstFrameName);", "+        if (frameOverrides == null) {", "+            frameOverrides = new HashMap();", "+            overrides.put(firstFrameName, frameOverrides);", "+        }", "+", "+        updateValue(frameOverrides, relativeName, value, mutable);", "+    }"]}]}
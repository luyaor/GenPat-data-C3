{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c69a1653842bcbf8353ded4ab3159ff7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f1f4892f5f0b51148470481ddfa194b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/Java.java", "commitBeforeChange": "69b275e120885474d0d21a78bb6c7f7cb5eca90d", "commitAfterChange": "df65abbefe02495631560db49de6c99ae9fc4ef4", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private int run( String[] command )         throws TaskException", "signatureAfterChange": "     private int run( final String[] command )         throws TaskException", "diff": ["-    private int run( String[] command )", "+    private int run( final String[] command )", "-        FileOutputStream fos = null;", "+        final Execute2 exe = new Execute2();", "+        setupLogger( exe );", "+", "+        if( m_dir == null )", "+        {", "+            m_dir = getBaseDirectory();", "+        }", "+        else if( !m_dir.exists() || !m_dir.isDirectory() )", "+        {", "+            final String message = m_dir.getAbsolutePath() + \" is not a valid directory\";", "+            throw new TaskException( message );", "+        }", "+", "+        exe.setWorkingDirectory( m_dir );", "+        exe.setCommandline( command );", "-            Execute exe = null;", "-            if( out == null )", "-            {", "-                exe = new Execute();", "-                exe.setOutput( new LogOutputStream( getLogger(), false ) );", "-                exe.setError( new LogOutputStream( getLogger(), true ) );", "-", "-            }", "-            else", "-            {", "-                fos = new FileOutputStream( out );", "-                exe = new Execute();", "-                exe.setOutput( fos );", "-                exe.setError( fos );", "-            }", "-", "-            if( dir == null )", "-            {", "-                dir = getBaseDirectory();", "-            }", "-            else if( !dir.exists() || !dir.isDirectory() )", "-            {", "-                throw new TaskException( dir.getAbsolutePath() + \" is not a valid directory\" );", "-            }", "-", "-            exe.setWorkingDirectory( dir );", "-", "-            exe.setCommandline( command );", "-            try", "-            {", "-                return exe.execute();", "-            }", "-            catch( IOException e )", "-            {", "-                throw new TaskException( \"Error\", e );", "-            }", "+            return exe.execute();", "-        catch( IOException io )", "+        catch( IOException e )", "-            throw new TaskException( \"Error\", io );", "-        }", "-        finally", "-        {", "-            if( fos != null )", "-            {", "-                try", "-                {", "-                    fos.close();", "-                }", "-                catch( IOException io )", "-                {", "-                }", "-            }", "+            final String message = \"Error executing class\";", "+            throw new TaskException( message, e );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8256e6825591da209f6a23716b2e6f02", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/Java.java", "commitBeforeChange": "69b275e120885474d0d21a78bb6c7f7cb5eca90d", "commitAfterChange": "df65abbefe02495631560db49de6c99ae9fc4ef4", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private int run( String[] command )         throws TaskException", "signatureAfterChange": "     private int run( final String[] command )         throws TaskException", "diff": ["-    private int run( String[] command )", "+    private int run( final String[] command )", "-        FileOutputStream fos = null;", "+        final Execute2 exe = new Execute2();", "+        setupLogger( exe );", "+", "+        if( m_dir == null )", "+        {", "+            m_dir = getBaseDirectory();", "+        }", "+        else if( !m_dir.exists() || !m_dir.isDirectory() )", "+        {", "+            final String message = m_dir.getAbsolutePath() + \" is not a valid directory\";", "+            throw new TaskException( message );", "+        }", "+", "+        exe.setWorkingDirectory( m_dir );", "+        exe.setCommandline( command );", "-            Execute exe = null;", "-            if( out == null )", "-            {", "-                exe = new Execute();", "-                exe.setOutput( new LogOutputStream( getLogger(), false ) );", "-                exe.setError( new LogOutputStream( getLogger(), true ) );", "-", "-            }", "-            else", "-            {", "-                fos = new FileOutputStream( out );", "-                exe = new Execute();", "-                exe.setOutput( fos );", "-                exe.setError( fos );", "-            }", "-", "-            if( dir == null )", "-            {", "-                dir = getBaseDirectory();", "-            }", "-            else if( !dir.exists() || !dir.isDirectory() )", "-            {", "-                throw new TaskException( dir.getAbsolutePath() + \" is not a valid directory\" );", "-            }", "-", "-            exe.setWorkingDirectory( dir );", "-", "-            exe.setCommandline( command );", "-            try", "-            {", "-                return exe.execute();", "-            }", "-            catch( IOException e )", "-            {", "-                throw new TaskException( \"Error\", e );", "-            }", "+            return exe.execute();", "-        catch( IOException io )", "+        catch( IOException e )", "-            throw new TaskException( \"Error\", io );", "-        }", "-        finally", "-        {", "-            if( fos != null )", "-            {", "-                try", "-                {", "-                    fos.close();", "-                }", "-                catch( IOException io )", "-                {", "-                }", "-            }", "+            final String message = \"Error executing class\";", "+            throw new TaskException( message, e );"]}]}
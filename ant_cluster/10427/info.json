{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "732e8df7bd4d8365a7d1d9a7422ed0d8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "123774398a91e23806cc3832d5bcad41", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/DirectoryScannerTest.java", "commitBeforeChange": "73b731154ae2ac82f40685f9398e295d5c34457f", "commitAfterChange": "91a07a1f685acd64f79347288b50584e4df34c3e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void testChildrenOfExcludedDirectory()", "signatureAfterChange": "     public void testChildrenOfExcludedDirectory()", "diff": ["-        haveZipPackage = false;", "-        Resource[] includedResources = ds.getIncludedDirectoryResources();", "-        for (int i=0; i<includedResources.length; i++) {", "-            if (includedResources[i].getName().equals(\"zip\")) {", "-                haveZipPackage = true;", "-            } else if (includedResources[i].getName().equals(\"ant\" ", "-                                                             + File.separator", "-                                                             + \"taskdefs\")) {", "-                haveTaskdefsPackage = true;", "-            }", "-        }", "-        assertTrue(\"(1b) zip package included\", haveZipPackage);", "-        assertTrue(\"(1b) taskdefs package not included\", !haveTaskdefsPackage);", "-", "-", "-        haveZipPackage = false;", "-        haveTaskdefsPackage = false;", "-        includedResources = ds.getIncludedDirectoryResources();", "-        for (int i=0; i<includedResources.length; i++) {", "-            if (includedResources[i].getName().equals(\"zip\")) {", "-                haveZipPackage = true;", "-            } else if (includedResources[i].getName().equals(\"ant\"", "-                                                             + File.separator", "-                                                             + \"taskdefs\")) {", "-                haveTaskdefsPackage = true;", "-            }", "-        }", "-        assertTrue(\"(2b) zip package included\", haveZipPackage);", "-        assertTrue(\"(2b) taskdefs package included\", haveTaskdefsPackage);", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea66ccb7fa8d3a08c11d0d02e812d807", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/DirectoryScannerTest.java", "commitBeforeChange": "7e82bff60dc29413bc89101f37da8f971134fe5a", "commitAfterChange": "69e7d88d2e23ff04812a0588bbf9ea59d04ad32d", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     public void testChildrenOfExcludedDirectory()", "signatureAfterChange": "     public void testChildrenOfExcludedDirectory()", "diff": ["-        File dir = new File(\"src/main/org/apache/tools\");", "+        getProject().executeTarget(\"children-of-excluded-dir-setup\");", "-        ds.setBasedir(dir);", "-        ds.setExcludes(new String[] {\"ant/**\"});", "+        ds.setBasedir(new File(getProject().getBaseDir(), \"tmp\"));", "+        ds.setExcludes(new String[] {\"alpha/**\"});", "+        ds.setFollowSymlinks(false);", "-", "-        boolean haveZipPackage = false;", "-        boolean haveTaskdefsPackage = false;", "-        String[] included = ds.getIncludedDirectories();", "-        for (int i=0; i<included.length; i++) {", "-            if (included[i].equals(\"zip\")) {", "-                haveZipPackage = true;", "-            } else if (included[i].equals(\"ant\"+File.separator+\"taskdefs\")) {", "-                haveTaskdefsPackage = true;", "-            }", "-        }", "-        assertTrue(\"(1) zip package included\", haveZipPackage);", "-        assertTrue(\"(1) taskdefs package not included\", !haveTaskdefsPackage);", "+        compareFiles(ds, new String[] {\"delta/delta.xml\"},", "+                    new String[] {\"\", \"delta\"});", "-        ds.setBasedir(dir);", "-        ds.setExcludes(new String[] {\"ant\"});", "+        ds.setBasedir(new File(getProject().getBaseDir(), \"tmp\"));", "+        ds.setExcludes(new String[] {\"alpha\"});", "+        ds.setFollowSymlinks(false);", "-        haveZipPackage = false;", "-        included = ds.getIncludedDirectories();", "-        for (int i=0; i<included.length; i++) {", "-            if (included[i].equals(\"zip\")) {", "-                haveZipPackage = true;", "-            } else if (included[i].equals(\"ant\"+File.separator+\"taskdefs\")) {", "-                haveTaskdefsPackage = true;", "-            }", "-        }", "-        assertTrue(\"(2) zip package included\", haveZipPackage);", "-        assertTrue(\"(2) taskdefs package included\", haveTaskdefsPackage);", "+        compareFiles(ds, new String[] {\"alpha/beta/beta.xml\",", "+                                       \"alpha/beta/gamma/gamma.xml\",", "+                                        \"delta/delta.xml\"},", "+                     new String[] {\"\", \"alpha/beta\", \"alpha/beta/gamma\", \"delta\"});", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec0e19a2c3bfe5a227a241557f095622", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTest.java", "commitBeforeChange": "10c41029aeaba31241f1a85f9b02591b357e20b6", "commitAfterChange": "818cb969adef1df0f5918ba62f80f62502d5e53e", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 21, "signatureBeforeChange": "      public void setCommandline(String [] args)", "signatureAfterChange": "      public boolean shouldRun(Project p)", "diff": ["-", "-    public void setCommandline(String [] args) {", "-        for (int i=0; i<args.length; i++) {", "-            if (args[i] == null) continue;", "-            if (args[i].startsWith(\"haltOnError=\")) {", "-                haltOnError = Project.toBoolean(args[i].substring(12));", "-            } else if (args[i].startsWith(\"haltOnFailure=\")) {", "-                haltOnFail = Project.toBoolean(args[i].substring(14));", "-            } else if (args[i].startsWith(\"printSummary=\")) {", "-                printSummary = Project.toBoolean(args[i].substring(13));", "-            } else if (args[i].startsWith(\"printXML=\")) {", "-                printXml = Project.toBoolean(args[i].substring(9));", "-            } else if (args[i].startsWith(\"outfile=\")) {", "-                outfile = args[i].substring(8);", "-            }", "-    }", "+", "+    public boolean shouldRun(Project p) {", "+        if (ifProperty != null && p.getProperty(ifProperty) == null) {", "+            return false;", "+        } else if (unlessProperty != null && ", "+                   p.getProperty(unlessProperty) != null) {", "+            return false;", "+        }", "+        return true;", "+    }"]}]}
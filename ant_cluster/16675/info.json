{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0be97923e67ee3df9e488c869064fb72", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29e25783b5530dfa8e5621bb95122c7b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "ec980be7345681968c93f0609e9a3fecb39b9753", "commitAfterChange": "fbb9886634198d8377104bef9ec697fadeb134df", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 32, "signatureBeforeChange": "     private boolean textEquals(File f1, File f2) throws IOException", "signatureAfterChange": "     public boolean contentEquals(Resource r1, Resource r2, boolean text) throws IOException", "diff": ["+     */", "+    public boolean contentEquals(Resource r1, Resource r2, boolean text) throws IOException {", "+        if (r1.isExists() != r2.isExists()) {", "+            return false;", "+        }", "+        if (!r1.isExists()) {", "+            // two not existing files are equal", "+            return true;", "+        }", "+        // should the following two be switched?  If r1 and r2 refer to the same file,", "+        // isn't their content equal regardless of whether that file is a directory?", "+        if (r1.isDirectory() || r2.isDirectory()) {", "+            // don't want to compare directory contents for now", "+            return false;", "+        }", "+        if (r1.equals(r2)) {", "+            return true;", "+        }", "+        if (!text && r1.getSize() != r2.getSize()) {", "+            return false;", "+        }", "+        return compareContent(r1, r2, text) == 0;", "+    }", "-    private boolean textEquals(File f1, File f2) throws IOException {", "-            in1 = new BufferedReader(new FileReader(f1));", "-            in2 = new BufferedReader(new FileReader(f2));", "-                if (!expected.equals(in2.readLine())) {", "-                    return false;", "-            if (in2.readLine() != null) {", "-                return false;", "-            }", "-            return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6e185648458f6b1f4b13d5b88da372a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "ec980be7345681968c93f0609e9a3fecb39b9753", "commitAfterChange": "fbb9886634198d8377104bef9ec697fadeb134df", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 31, "signatureBeforeChange": "     public boolean contentEquals(File f1, File f2, boolean textfile) throws IOException", "signatureAfterChange": "     public boolean contentEquals(File f1, File f2, boolean textfile) throws IOException", "diff": ["-        if (f1.exists() != f2.exists()) {", "-            return false;", "-        }", "-        if (!f1.exists()) {", "-            // two not existing files are equal", "-            return true;", "-        }", "-        // should the following two be switched?  If f1 and f2 refer to the same file,", "-        // isn't their content equal regardless of whether that file is a directory?", "-        if (f1.isDirectory() || f2.isDirectory()) {", "-            // don't want to compare directory contents for now", "-            return false;", "-        }", "-        if (fileNameEquals(f1, f2)) {", "-            // same filename => true", "-            return true;", "-        }", "-        return textfile ? textEquals(f1, f2) : binaryEquals(f1, f2);", "+        return contentEquals(new FileResource(f1), new FileResource(f2), textfile);"]}]}
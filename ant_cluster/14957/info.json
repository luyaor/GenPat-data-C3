{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9ee00e51ec0893da07c36fb4ab272d77", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96d6d37e8b621efac36411c27ace1186", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "7932c703d2eb2e092ab2afa38df6edc916ddc98e", "commitAfterChange": "282f346ca230a8dec8d1956af05fcc9d511ad672", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "          public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+     */", "-\t    URL url=new URL( source );", "+            URL url = null;", "+            try {", "+                url = new URL(source);", "+            } catch (MalformedURLException e) {", "+                throw new BuildException(e.toString());", "+            }", "+", "+", "-\t    InputStream is=url.openStream();", "+\t    InputStream is = url.openStream();", "-\t\tif( \"true\".equals(verbose)) System.out.print(\".\");", "+\t\tif (\"true\".equals(verbose)) System.out.print(\".\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9cab78c39b8d912ffba64eaabc400ea", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "0c132498a8026db624c2fcf7026538c52e47b312", "commitAfterChange": "4004834c04e0eec8f0f698435b0c5983751fb593", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "     private boolean isSymlink(File base, Vector pathElements)", "signatureAfterChange": "     private boolean isSymlink(File base, Vector pathElements)", "diff": ["-                if (FILE_UTILS.isSymbolicLink(base, current)) {", "-                    return true;", "-                } else {", "-                    base = new File(base, current);", "-                    return isSymlink(base, pathElements);", "-                }", "+                return FILE_UTILS.isSymbolicLink(base, current)", "+                    || isSymlink(new File(base, current), pathElements);", "-                return false;"]}]}
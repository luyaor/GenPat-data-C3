{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a1cdc797a2ea0e00179b548fc72c501d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "953a93c5a2d746ca0f9c24afb5da610a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Move.java", "commitBeforeChange": "e13d922745cda9a00544c2010e21cafce218e709", "commitAfterChange": "fd507cf2d23a705cb42d8870b483ee3f65d0bc8f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "      protected void doFileOperations()", "signatureAfterChange": "      protected void doFileOperations()", "diff": ["-        if (fileCopyMap.size() > 0) {", "+        if (fileCopyMap.size() > 0) {   // files to move", "-                    project.copyFile(fromFile, ", "-                                     toFile, ", "-                                     filtering, ", "-                                     forceOverwrite);", "+                    project.copyFile(fromFile, toFile, filtering, forceOverwrite);", "+", "+        if (includeEmpty) {", "+            Enumeration e = dirCopyMap.elements();", "+            int count = 0;", "+            while (e.hasMoreElements()) {", "+                File d = new File((String)e.nextElement());", "+                if (!d.exists()) {", "+                    if (!d.mkdirs()) {", "+                        log(\"Unable to create directory \" + d.getAbsolutePath(), Project.MSG_ERR);", "+                    } else {", "+                        count++;", "+                    }", "+                }", "+            }", "+", "+            if (count > 0) {", "+                log(\"Moved \" + count + \" empty directories to \" + destDir.getAbsolutePath());", "+            }", "+        }", "+", "+        if (filesets.size() > 0) {", "+            Enumeration e = filesets.elements();", "+            while (e.hasMoreElements()) {", "+                FileSet fs = (FileSet)e.nextElement();", "+                File dir = fs.getDir(project);", "+", "+                if (okToDelete(dir)) {", "+                    deleteDir(dir);", "+                }", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e254a380adec164abfd2e7f36b0c530a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "c6a2ce5a054f4985d68689f9dff61e43a65a1c23", "commitAfterChange": "5a381558aef54280f925781bed3d4c9ba7ced360", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+            ArrayList nonFileResources = new ArrayList();", "-                if (rc.isFilesystemOnly()) {", "+                // Step (1) - beware of the ZipFileSet", "+                if (rc instanceof FileSet && rc.isFilesystemOnly()) {", "+                    FileSet fs = (FileSet) rc;", "+                    DirectoryScanner ds = null;", "+                    try {", "+                        ds = fs.getDirectoryScanner(getProject());", "+                    } catch (BuildException e) {", "+                        if (failonerror", "+                            || !e.getMessage().endsWith(\" not found.\")) {", "+                            throw e;", "+                        } else {", "+                            log(\"Warning: \" + e.getMessage());", "+                            continue;", "+                        }", "+                    }", "+                    File fromDir = fs.getDir(getProject());", "-                    // Step (1)", "-                    if (rc instanceof FileSet) {", "-                        FileSet fs = (FileSet) rc;", "-                        DirectoryScanner ds = null;", "-                        try {", "-                            ds = fs.getDirectoryScanner(getProject());", "-                        } catch (BuildException e) {", "-                            if (failonerror", "-                                || !e.getMessage().endsWith(\" not found.\")) {", "-                                throw e;", "-                            } else {", "-                                log(\"Warning: \" + e.getMessage());", "-                                continue;", "+                    String[] srcFiles = ds.getIncludedFiles();", "+                    String[] srcDirs = ds.getIncludedDirectories();", "+                    if (!flatten && mapperElement == null", "+                        && ds.isEverythingIncluded() && !fs.hasPatterns()) {", "+                        completeDirMap.put(fromDir, destDir);", "+                    }", "+                    add(fromDir, srcFiles, filesByBasedir);", "+                    add(fromDir, srcDirs, dirsByBasedir);", "+                    baseDirs.add(fromDir);", "+                } else { // not a fileset or contains non-file resources", "+", "+                    if (!rc.isFilesystemOnly() && !supportsNonFileResources()) {", "+                        throw new BuildException(", "+                                   \"Only FileSystem resources are supported.\");", "+                    }", "+", "+                    Iterator resources = rc.iterator();", "+                    while (resources.hasNext()) {", "+                        Resource r = (Resource) resources.next();", "+                        if (!r.isExists()) {", "+                            continue;", "+                        }", "+", "+                        File baseDir = NULL_FILE_PLACEHOLDER;", "+                        String name = r.getName();", "+                        if (r instanceof FileResource) {", "+                            FileResource fr = (FileResource) r;", "+                            baseDir = getKeyFile(fr.getBaseDir());", "+                            if (fr.getBaseDir() == null) {", "+                                name = fr.getFile().getAbsolutePath();", "-                        File fromDir = fs.getDir(getProject());", "-                        String[] srcFiles = ds.getIncludedFiles();", "-                        String[] srcDirs = ds.getIncludedDirectories();", "-                        if (!flatten && mapperElement == null", "-                            && ds.isEverythingIncluded() && !fs.hasPatterns()) {", "-                            completeDirMap.put(fromDir, destDir);", "-                        }", "-                        add(fromDir, srcFiles, filesByBasedir);", "-                        add(fromDir, srcDirs, dirsByBasedir);", "-                        baseDirs.add(fromDir);", "-                    } else { // not a fileset", "-", "-                        Iterator resources = rc.iterator();", "-                        while (resources.hasNext()) {", "-                            FileResource fr = (FileResource) resources.next();", "-                            if (!fr.isExists()) {", "-                                continue;", "-                            }", "-                            File baseDir = getKeyFile(fr.getBaseDir());", "-                            add(baseDir, baseDir == NULL_FILE_PLACEHOLDER", "-                                ? fr.getFile().getAbsolutePath() : fr.getName(),", "-                                fr.isDirectory() ? dirsByBasedir", "-                                                 : filesByBasedir);", "+                        // copying of dirs is trivial and can be done", "+                        // for non-file resources as well as for real", "+                        // files.", "+                        if (r.isDirectory() || r instanceof FileResource) {", "+                            add(baseDir, name,", "+                                r.isDirectory() ? dirsByBasedir ", "+                                                : filesByBasedir);", "+                        } else { // a not-directory file resource", "+                            // needs special treatment", "+                            nonFileResources.add(r);", "-", "-                    Iterator iter = baseDirs.iterator();", "-                    while (iter.hasNext()) {", "-                        File f = (File) iter.next();", "-                        List files = (List) filesByBasedir.get(f);", "-                        List dirs = (List) dirsByBasedir.get(f);", "-", "-                        String[] srcFiles = new String[0];", "-                        if (files != null) {", "-                            srcFiles = (String[]) files.toArray(srcFiles);", "-                        }", "-                        String[] srcDirs = new String[0];", "-                        if (dirs != null) {", "-                            srcDirs = (String[]) dirs.toArray(srcDirs);", "-                        }", "-                        scan(f == NULL_FILE_PLACEHOLDER ? null : f, destDir,", "-                             srcFiles, srcDirs);", "-                    }", "-                } else { // not a File resource collection", "-                    throw new BuildException(", "-                        \"Only FileSystem resources are supported.\");", "+", "+            Iterator iter = baseDirs.iterator();", "+            while (iter.hasNext()) {", "+                File f = (File) iter.next();", "+                List files = (List) filesByBasedir.get(f);", "+                List dirs = (List) dirsByBasedir.get(f);", "+", "+                String[] srcFiles = new String[0];", "+                if (files != null) {", "+                    srcFiles = (String[]) files.toArray(srcFiles);", "+                }", "+                String[] srcDirs = new String[0];", "+                if (dirs != null) {", "+                    srcDirs = (String[]) dirs.toArray(srcDirs);", "+                }", "+                scan(f == NULL_FILE_PLACEHOLDER ? null : f, destDir, srcFiles,", "+                     srcDirs);", "+            }", "+", "+                }", "+            }", "+", "+            if (nonFileResources.size() > 0) {", "+                Resource[] nonFiles =", "+                    (Resource[]) nonFileResources.toArray(new Resource[0]);", "+                // restrict to out-of-date resources", "+                Map map = scan(nonFiles, destDir);", "+                try {", "+                    doResourceOperations(map);", "+                } catch (BuildException e) {", "+                    if (!failonerror) {", "+                        log(\"Warning: \" + e.getMessage(), Project.MSG_ERR);", "+                    } else {", "+                        throw e;", "+                    }"]}]}
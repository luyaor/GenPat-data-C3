{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3fedcc03f25bfeb9b82fc647b21cafc8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "462590b4758a1c34ccc32efafbbe1540", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/EchoProperties.java", "commitBeforeChange": "1a702111eaa72f11467bcfb976ceb2910c1c913a", "commitAfterChange": "3396e7c32132e8bff2d50196131cf641ed8d1fb2", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     protected void jdkSaveProperties(Properties props, OutputStream os,                                      String header) throws IOException", "signatureAfterChange": "     protected void jdkSaveProperties(Properties props, OutputStream os,                                      String header) throws IOException", "diff": ["-        try {", "-            java.lang.reflect.Method m = props.getClass().getMethod(", "-                \"store\", new Class[]{OutputStream.class, String.class});", "-            m.invoke(props, new Object[]{os, header});", "-        } catch (java.lang.reflect.InvocationTargetException ite) {", "-            Throwable t = ite.getTargetException();", "-            if (t instanceof IOException) {", "-                throw (IOException) t;", "-            }", "-            if (t instanceof RuntimeException) {", "-                throw (RuntimeException) t;", "-            }", "+       try {", "+           props.store(os, header);", "-            // not an expected exception.  Resort to JDK 1.0 to execute", "-            // this method", "-            jdk10SaveProperties(props, os, header);", "-        } catch (ThreadDeath td) {", "-            // don't trap thread death errors.", "-            throw td;", "-        } catch (Throwable ex) {", "-            // this 'store' method is not available, so resort to the JDK 1.0", "-            // compatible method.", "-            jdk10SaveProperties(props, os, header);", "-        }", "+       } catch (IOException ioe) {", "+           throw new BuildException(ioe, getLocation());", "+       } finally {", "+           if (os != null) {", "+               try {", "+                   os.close();", "+               } catch (IOException ioex) {", "+                   log(\"Failed to close output stream\");", "+               }", "+           }", "+       }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7643a984b25ed6c9c652f1841ce30533", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Jar.java", "commitBeforeChange": "fffe72edb5a6a6deb6222d79841a42c1663ccd36", "commitAfterChange": "b74b9067510ce1fd1ce68b465f74c38c81fb7d01", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void setManifest(File manifestFile)", "signatureAfterChange": "      public void setManifest(File manifestFile)", "diff": ["-        manifest = manifestFile;", "-        if (!manifest.exists())", "-            throw new BuildException(\"Manifest file: \" + manifest + \" does not exist.\");", "-", "-        // Create a ZipFileSet for this file, and pass it up.", "-        ZipFileSet fs = new ZipFileSet();", "-        fs.setDir(new File(manifest.getParent()));", "-        fs.setIncludes(manifest.getName());", "-        fs.setFullpath(\"META-INF/MANIFEST.MF\");", "-        super.addFileset(fs);", "+        if (!manifestFile.exists()) {", "+            throw new BuildException(\"Manifest file: \" + manifestFile + \" does not exist.\", ", "+                                     getLocation());", "+        }", "+        ", "+        InputStream is = null;", "+        try {", "+            is = new FileInputStream(manifestFile);", "+            Manifest newManifest = new Manifest(is);", "+            if (manifest == null) {", "+                manifest = getDefaultManifest();", "+            }", "+            manifest.merge(newManifest);", "+        }", "+        catch (IOException e) {", "+            throw new BuildException(\"Unable to read manifest file: \" + manifestFile, e);", "+        }", "+        finally {", "+            if (is != null) {", "+                try {", "+                    is.close();", "+                }", "+                catch (IOException e) {", "+                    // do nothing", "+                }", "+            }", "+        }"]}]}
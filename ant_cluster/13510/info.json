{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "49daa85e66f7422ba21efa5f71ff739b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bcd99ad1e24227dcc550ef4b4ad3fad", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "ee9453f4f459494b616f35d57b58b73773e534dd", "commitAfterChange": "edb71783adeffc29a56df203f97b5ac0e4566a5d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "          public static void main(String[] args)", "signatureAfterChange": "      public static void main(String[] args)", "diff": ["-    ", "-    public static void main(String[] args) {", "-        ", "-\t// cycle through given args", "-        ", "-\tfor (int i = 0; i < args.length; i++) {", "-\t    String arg = args[i];", "-            ", "-\t    if (arg.equals(\"-help\") || arg.equals(\"help\")) {", "-\t\tprintUsage();", "-\t\treturn;", "-\t    } else if (arg.equals(\"-quiet\") || arg.equals(\"-q\") ||", "-\t\t       arg.equals(\"q\")) {", "-\t\tmsgOutputLevel = Project.MSG_WARN;", "-\t    } else if (arg.equals(\"-verbose\") || arg.equals(\"-v\") ||", "-\t\t       arg.equals(\"v\")) {", "-\t\tmsgOutputLevel = Project.MSG_VERBOSE;", "-            } else if (arg.equals(\"-buildfile\") || arg.equals(\"-file\") || arg.equals(\"-f\")) {", "-\t\ttry {", "-\t\t    buildFile = new File(args[i+1]);", "-\t\t    i++;", "-\t\t} catch (ArrayIndexOutOfBoundsException aioobe) {", "-\t\t    String msg = \"You must specify a buildfile when \" +", "-\t\t\t\"using the -buildfile argument\";", "-\t\t    System.out.println(msg);", "-\t\t    return;", "-\t\t}", "-\t    } else if (arg.startsWith(\"-D\")) {", "-\t\t/* Interestingly enough, we get to here when a user", "-\t\t * uses -Dname=value. However, the JDK goes ahead", "-\t\t * and parses this out to args {\"-Dname\", \"value\"}", "-\t\t * so instead of parsing on \"=\", we just make the \"-D\"", "-\t\t * characters go away and skip one argument forward.", "-\t\t */", "-\t\t", "+    public static void main(String[] args) {", "+", "+        // cycle through given args", "+", "+        for (int i = 0; i < args.length; i++) {", "+            String arg = args[i];", "+", "+            if (arg.equals(\"-help\") || arg.equals(\"help\")) {", "+                printUsage();", "+                return;", "+            } else if (arg.equals(\"-quiet\") || arg.equals(\"-q\") || arg.equals(\"q\")) {", "+                msgOutputLevel = Project.MSG_WARN;", "+            } else if (arg.equals(\"-verbose\") || arg.equals(\"-v\") || arg.equals(\"v\")) {", "+                msgOutputLevel = Project.MSG_VERBOSE;", "+            } else if (arg.equals(\"-buildfile\") || arg.equals(\"-file\") || arg.equals(\"-f\")) {", "+                try {", "+                    buildFile = new File(args[i+1]);", "+                    i++;", "+                } catch (ArrayIndexOutOfBoundsException aioobe) {", "+                    String msg = \"You must specify a buildfile when \" +", "+                        \"using the -buildfile argument\";", "+                    System.out.println(msg);", "+                    return;", "+                }", "+            } else if (arg.startsWith(\"-D\")) {", "+", "+                /* Interestingly enough, we get to here when a user", "+                 * uses -Dname=value. However, the JDK goes ahead", "+                 * and parses this out to args {\"-Dname\", \"value\"}", "+                 * so instead of parsing on \"=\", we just make the \"-D\"", "+                 * characters go away and skip one argument forward.", "+                 */", "+", "-\t\tString value = args[++i];", "+                String value = args[++i];", "-\t\t// we don't have any more args to recognize!", "-\t\tString msg = \"Unknown arg: \" + arg;", "-\t\tSystem.out.println(msg);", "-\t\tprintUsage();", "-\t\treturn;", "-\t    } else {", "-\t\t// if it's no other arg, it may be the target", "-\t\ttargets[targetCount]=arg;", "-\t\ttargetCount++;", "-\t    }", "-\t}", "-        ", "-\t// make sure buildfile exists", "-        ", "-\tif (!buildFile.exists()) {", "-\t    System.out.println(\"Buildfile: \" + buildFile + \" does not exist!\");", "-\t    return;", "-\t}", "-        ", "-\t// make sure it's not a directory (this falls into the ultra", "-\t// paranoid lets check everything catagory", "-        ", "-\tif (buildFile.isDirectory()) {", "-\t    System.out.println(\"What? Buildfile: \" + buildFile + \" is a dir!\");", "-\t    return;", "-\t}", "+                // we don't have any more args to recognize!", "+                String msg = \"Unknown arg: \" + arg;", "+                System.out.println(msg);", "+                printUsage();", "+                return;", "+            } else {", "+                // if it's no other arg, it may be the target", "+                targets.addElement(arg);", "+            }", "+        }", "-\t// ok, so if we've made it here, let's run the damn build allready", "-\trunBuild();", "-    ", "-    // se should force the exit() to allow everything to cleanup since", "-    // there could be leftover threads running around (some stupid AWT code", "-    // used for image generation does this! grrrr)", "-    exit(0);", "+        // make sure buildfile exists", "+", "+        if (!buildFile.exists()) {", "+            System.out.println(\"Buildfile: \" + buildFile + \" does not exist!\");", "+            return;", "+        }", "+", "+        // make sure it's not a directory (this falls into the ultra", "+        // paranoid lets check everything catagory", "+", "+        if (buildFile.isDirectory()) {", "+            System.out.println(\"What? Buildfile: \" + buildFile + \" is a dir!\");", "+            return;", "+        }", "+", "+        // ok, so if we've made it here, let's run the damn build allready", "+        runBuild();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac05445daf5a59202e0cfa715d2a8279", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "b120eead1b06b7d47b9ba63e4083b6fc387ba9a6", "commitAfterChange": "5fc15284f36e2c714f1904f57ed9788cef3683c2", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void processArgs(String[] args)", "signatureAfterChange": "     private void processArgs(String[] args)", "diff": ["-                try {", "-                    buildFile = new File(args[i + 1].replace('/', File.separatorChar));", "-                    i++;", "-                } catch (ArrayIndexOutOfBoundsException aioobe) {", "-                    String msg = \"You must specify a buildfile when \"", "-                        + \"using the -buildfile argument\";", "-                    throw new BuildException(msg);", "-                }", "+                i = handleArgBuildFile(args, i);", "-                try {", "-                    listeners.addElement(args[i + 1]);", "-                    i++;", "-                } catch (ArrayIndexOutOfBoundsException aioobe) {", "-                    String msg = \"You must specify a classname when \"", "-                        + \"using the -listener argument\";", "-                    throw new BuildException(msg);", "-                }", "+                i = handleArgListener(args, i);", "-", "-                /* Interestingly enough, we get to here when a user", "-                 * uses -Dname=value. However, in some cases, the OS", "-                 * goes ahead and parses this out to args", "-                 *   {\"-Dname\", \"value\"}", "-                 * so instead of parsing on \"=\", we just make the \"-D\"", "-                 * characters go away and skip one argument forward.", "-                 *", "-                 * I don't know how to predict when the JDK is going", "-                 * to help or not, so we simply look for the equals sign.", "-                 */", "-", "-                String name = arg.substring(2, arg.length());", "-                String value = null;", "-                int posEq = name.indexOf(\"=\");", "-                if (posEq > 0) {", "-                    value = name.substring(posEq + 1);", "-                    name = name.substring(0, posEq);", "-                } else if (i < args.length - 1) {", "-                    value = args[++i];", "-                } else {", "-                    throw new BuildException(\"Missing value for property \"", "-                                             + name);", "-                }", "-", "-                definedProps.put(name, value);", "+                i = handleArgDefine(args, i);", "-                if (loggerClassname != null) {", "-                    throw new BuildException(\"Only one logger class may \"", "-                        + \" be specified.\");", "-                }", "-                try {", "-                    loggerClassname = args[++i];", "-                } catch (ArrayIndexOutOfBoundsException aioobe) {", "-                    throw new BuildException(\"You must specify a classname when\"", "-                                             + \" using the -logger argument\");", "-                }", "+                i = handleArgLogger(args, i);", "-                if (inputHandlerClassname != null) {", "-                    throw new BuildException(\"Only one input handler class may \"", "-                                             + \"be specified.\");", "-                }", "-                try {", "-                    inputHandlerClassname = args[++i];", "-                } catch (ArrayIndexOutOfBoundsException aioobe) {", "-                    throw new BuildException(\"You must specify a classname when\"", "-                                             + \" using the -inputhandler\"", "-                                             + \" argument\");", "-                }", "+                i = handleArgInputHandler(args, i);", "-                try {", "-                    propertyFiles.addElement(args[i + 1]);", "-                    i++;", "-                } catch (ArrayIndexOutOfBoundsException aioobe) {", "-                    String msg = \"You must specify a property filename when \"", "-                        + \"using the -propertyfile argument\";", "-                    throw new BuildException(msg);", "-                }", "+                i = handleArgPropertyFile(args, i);", "-                try {", "-                    threadPriority = Integer.decode(args[i + 1]);", "-                } catch (ArrayIndexOutOfBoundsException aioobe) {", "-                    throw new BuildException(", "-                            \"You must supply a niceness value (1-10)\"", "-                            + \" after the -nice option\");", "-                } catch (NumberFormatException e) {", "-                    throw new BuildException(\"Unrecognized niceness value: \"", "-                                             + args[i + 1]);", "-                }", "-                i++;", "-                if (threadPriority.intValue() < Thread.MIN_PRIORITY", "-                    || threadPriority.intValue() > Thread.MAX_PRIORITY) {", "-                    throw new BuildException(", "-                            \"Niceness value is out of the range 1-10\");", "-                }", "+                i = handleArgNice(args, i);", "+        loadPropertyFiles();", "+", "+        if (msgOutputLevel >= Project.MSG_INFO) {", "+            System.out.println(\"Buildfile: \" + buildFile);", "+        }", "+", "+        if (logTo != null) {", "+            out = logTo;", "+            err = logTo;", "+            System.setOut(out);", "+            System.setErr(err);", "+        }", "+        readyToRun = true;", "+    }", "-                   + filename + \": \" + e.getMessage());", "-", "-        if (msgOutputLevel >= Project.MSG_INFO) {", "-            System.out.println(\"Buildfile: \" + buildFile);", "-        }", "-", "-        if (logTo != null) {", "-            out = logTo;", "-            err = logTo;", "-            System.setOut(out);", "-            System.setErr(err);", "-        }", "-        readyToRun = true;"]}]}
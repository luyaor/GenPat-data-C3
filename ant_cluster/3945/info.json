{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7e215b265c386fc00e01710b872a74b4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e142470894e78c7cd3ad7a102716f69", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/antlib/src/main/org/apache/tools/ant/SymbolTable.java", "commitBeforeChange": "2bcc3b328adcc97c10be2efba1077ccf28b92caa", "commitAfterChange": "4ad59f0fc5eb69936f4322c1394993d33299959b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 31, "signatureBeforeChange": "     private Method validAdapter(Class clz, Method mtd)", "signatureAfterChange": " \tprivate Method validAdapter(Class clz, Method mtd)", "diff": ["-     */", "-    private Method validAdapter(Class clz, Method mtd) {", "-\tif (clz == null) return null;", "-\t", "-\tcheckClass(clz);", "-\tif (!mtd.getParameterTypes()[0].isAssignableFrom(clz)) {", "-\t    String msg = \"Adapter \" + clz.getName() + ", "-\t\t\" is incompatible with role interface \" + ", "-\t\tmtd.getDeclaringClass().getName();", "-\t    throw new BuildException(msg);", "-\t}", "-\tString msg = \"Class \" + clz.getName() + \" is not an adapter: \";", "-\tif (!RoleAdapter.class.isAssignableFrom(clz)) {", "-\t    throw new BuildException(msg + \"does not implement RoleAdapter\");", "-\t}", "-\ttry {", "-\t    Method chk = clz.getMethod(\"checkClass\", CHECK_ADAPTER_PARAMS);", "-\t    if (!Modifier.isStatic(chk.getModifiers())) {", "-\t\tthrow new BuildException(msg + \"checkClass() is not static\");", "-\t    }", "-\t    return chk;", "-\t}", "-\tcatch(NoSuchMethodException nme){", "-\t    throw new BuildException(msg + \"checkClass() not found\", nme);", "-\t}", "+\t */", "+\tprivate Method validAdapter(Class clz, Method mtd) {", "+\t    if (clz == null) return null;", "+\t    ", "+\t    if (!mtd.getParameterTypes()[0].isAssignableFrom(clz)) {", "+\t\tString msg = \"Adapter \" + clz.getName() + ", "+\t\t    \" is incompatible with role interface \" + ", "+\t\t    mtd.getDeclaringClass().getName();", "+\t\tthrow new BuildException(msg);", "+\t    }", "+\t    String msg = \"Class \" + clz.getName() + \" is not an adapter: \";", "+\t    if (!RoleAdapter.class.isAssignableFrom(clz)) {", "+\t\tthrow new BuildException(msg + \"does not implement RoleAdapter\");", "+\t    }", "+\t    try {", "+\t\tMethod chk = clz.getMethod(\"checkClass\", CHECK_ADAPTER_PARAMS);", "+\t\tif (!Modifier.isStatic(chk.getModifiers())) {", "+\t\t    throw new BuildException(msg + \"checkClass() is not static\");", "+\t\t}", "+\t\treturn chk;", "+\t    }", "+\t    catch(NoSuchMethodException nme){", "+\t\tthrow new BuildException(msg + \"checkClass() not found\", nme);", "+\t    }", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ef79be0714a0c08782a6d6c5cfc52ec", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/Property.java", "commitBeforeChange": "2a3e3d1d4b07a026d4f6a1604dab5a0bb296c54b", "commitAfterChange": "9c62f617a337a3d384e32c305493291abf3d9828", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "      protected void addProperties( Properties props )         throws TaskException", "signatureAfterChange": "      protected void addProperties( Properties props )         throws TaskException", "diff": ["-        resolveAllProperties( props );", "+        //no longer needs as ant2 properties are completely dynamic", "+        //resolveAllProperties( props );", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7562b8f82f653b3d853980594abecdfe", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/metamata/MAuditStreamHandler.java", "commitBeforeChange": "4a63f3b33824d1af6537636e50dc9f0bf73221aa", "commitAfterChange": "0380eac20a5d2f2fef36091bc8a51135eb916c27", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void start()         throws IOException", "signatureAfterChange": "      public void start()         throws IOException", "diff": ["+", "+    public void start()", "+        throws IOException", "+    {", "+    }", "-     */", "-    public void start()", "-        throws IOException", "-    {", "-        parseOutput( br );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "807ac8b47b0bc9e7e5d8fcb424159a5c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/metamata/MAuditStreamHandler.java", "commitBeforeChange": "4a63f3b33824d1af6537636e50dc9f0bf73221aa", "commitAfterChange": "0380eac20a5d2f2fef36091bc8a51135eb916c27", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void start()         throws IOException", "signatureAfterChange": "      public void start()         throws IOException", "diff": ["+", "+    public void start()", "+        throws IOException", "+    {", "+    }", "-     */", "-    public void start()", "-        throws IOException", "-    {", "-        parseOutput( br );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbcf495995cd590e2fa4a4fc90e58d59", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/Property.java", "commitBeforeChange": "2a3e3d1d4b07a026d4f6a1604dab5a0bb296c54b", "commitAfterChange": "9c62f617a337a3d384e32c305493291abf3d9828", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "      protected void addProperties( Properties props )         throws TaskException", "signatureAfterChange": "      protected void addProperties( Properties props )         throws TaskException", "diff": ["-        resolveAllProperties( props );", "+        //no longer needs as ant2 properties are completely dynamic", "+        //resolveAllProperties( props );", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbdb3ea575ed1f3f8464abf3b135646d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/antlib/src/main/org/apache/tools/ant/SymbolTable.java", "commitBeforeChange": "1d2784e6d5429505b3b420e342992c22cd5373a6", "commitAfterChange": "6252354506953777f5b921b8746a54e7d317475a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 31, "signatureBeforeChange": "     private Method validAdapter(Class clz, Method mtd)", "signatureAfterChange": "         private Method validAdapter(Class clz, Method mtd)", "diff": ["-     */", "-    private Method validAdapter(Class clz, Method mtd) {", "-\tif (clz == null) return null;", "-\t", "-\tcheckClass(clz);", "-\tif (!mtd.getParameterTypes()[0].isAssignableFrom(clz)) {", "-\t    String msg = \"Adapter \" + clz.getName() + ", "-\t\t\" is incompatible with role interface \" + ", "-\t\tmtd.getDeclaringClass().getName();", "-\t    throw new BuildException(msg);", "-\t}", "-\tString msg = \"Class \" + clz.getName() + \" is not an adapter: \";", "-\tif (!RoleAdapter.class.isAssignableFrom(clz)) {", "-\t    throw new BuildException(msg + \"does not implement RoleAdapter\");", "-\t}", "-\ttry {", "-\t    Method chk = clz.getMethod(\"checkClass\", CHECK_ADAPTER_PARAMS);", "-\t    if (!Modifier.isStatic(chk.getModifiers())) {", "-\t\tthrow new BuildException(msg + \"checkClass() is not static\");", "-\t    }", "-\t    return chk;", "-\t}", "-\tcatch(NoSuchMethodException nme){", "-\t    throw new BuildException(msg + \"checkClass() not found\", nme);", "-\t}", "+         */", "+        private Method validAdapter(Class clz, Method mtd) {", "+            if (clz == null) return null;", "+", "+            if (!mtd.getParameterTypes()[0].isAssignableFrom(clz)) {", "+                String msg = \"Adapter \" + clz.getName() +", "+                    \" is incompatible with role interface \" +", "+                    mtd.getDeclaringClass().getName();", "+                throw new BuildException(msg);", "+            }", "+            String msg = \"Class \" + clz.getName() + \" is not an adapter: \";", "+            if (!RoleAdapter.class.isAssignableFrom(clz)) {", "+                throw new BuildException(msg + \"does not implement RoleAdapter\");", "+            }", "+            try {", "+                Method chk = clz.getMethod(\"checkClass\", CHECK_ADAPTER_PARAMS);", "+                if (!Modifier.isStatic(chk.getModifiers())) {", "+                    throw new BuildException(msg + \"checkClass() is not static\");", "+                }", "+                return chk;", "+            }", "+            catch(NoSuchMethodException nme){", "+                throw new BuildException(msg + \"checkClass() not found\", nme);", "+            }", "+        }"]}]}
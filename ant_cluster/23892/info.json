{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "05ddde721a87ecddc50fd3a31e8a79e7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b0166dddc8004c354053cffb6fe2103", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Project.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": "     public final Vector<Target> topoSort(String[] root, Hashtable<String, Target> targetTable,                                  boolean returnAll) throws BuildException", "signatureAfterChange": "     public final Vector<Target> topoSort(final String[] root, final Hashtable<String, Target> targetTable,                                  final boolean returnAll) throws BuildException", "diff": ["-    public final Vector<Target> topoSort(String[] root, Hashtable<String, Target> targetTable,", "-                                 boolean returnAll) throws BuildException {", "-        Vector<Target> ret = new VectorSet<Target>();", "-        Hashtable<String, String> state = new Hashtable<String, String>();", "-        Stack<String> visiting = new Stack<String>();", "+    public final Vector<Target> topoSort(final String[] root, final Hashtable<String, Target> targetTable,", "+                                 final boolean returnAll) throws BuildException {", "+        final Vector<Target> ret = new VectorSet<Target>();", "+        final Hashtable<String, String> state = new Hashtable<String, String>();", "+        final Stack<String> visiting = new Stack<String>();", "-            String st = (String) (state.get(root[i]));", "+            final String st = (state.get(root[i]));", "-        StringBuffer buf = new StringBuffer(\"Build sequence for target(s)\");", "+        final StringBuffer buf = new StringBuffer(\"Build sequence for target(s)\");", "-        Vector<Target> complete = (returnAll) ? ret : new Vector<Target>(ret);", "-        for (Enumeration<String> en = targetTable.keys(); en.hasMoreElements();) {", "-            String curTarget = en.nextElement();", "-            String st = state.get(curTarget);", "+        final Vector<Target> complete = (returnAll) ? ret : new Vector<Target>(ret);", "+        for (final Enumeration<String> en = targetTable.keys(); en.hasMoreElements();) {", "+            final String curTarget = en.nextElement();", "+            final String st = state.get(curTarget);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6912c483c61f246ce17c3b51e8926fe3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     protected void addPathFile(File pathComponent) throws IOException", "signatureAfterChange": "     protected void addPathFile(final File pathComponent) throws IOException", "diff": ["-    protected void addPathFile(File pathComponent) throws IOException {", "+    protected void addPathFile(final File pathComponent) throws IOException {", "-        String absPathPlusTimeAndLength = pathComponent.getAbsolutePath()", "+        final String absPathPlusTimeAndLength = pathComponent.getAbsolutePath()", "-        String classpath = (String) pathMap.get(absPathPlusTimeAndLength);", "+        String classpath = pathMap.get(absPathPlusTimeAndLength);", "-                Manifest manifest = jarFile.getManifest();", "+                final Manifest manifest = jarFile.getManifest();", "-            URL baseURL = FILE_UTILS.getFileURL(pathComponent);", "-            StringTokenizer st = new StringTokenizer(classpath);", "+            final URL baseURL = FILE_UTILS.getFileURL(pathComponent);", "+            final StringTokenizer st = new StringTokenizer(classpath);", "-                String classpathElement = st.nextToken();", "-                URL libraryURL = new URL(baseURL, classpathElement);", "+                final String classpathElement = st.nextToken();", "+                final URL libraryURL = new URL(baseURL, classpathElement);", "-                String decodedPath = Locator.decodeUri(libraryURL.getFile());", "-                File libraryFile = new File(decodedPath);", "+                final String decodedPath = Locator.decodeUri(libraryURL.getFile());", "+                final File libraryFile = new File(decodedPath);"]}]}
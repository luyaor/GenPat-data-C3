{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d854af785795c4cf480a686406ec0ae0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "316e0dfae94d3d6e83aba608d34f45c9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/workspace/DefaultWorkspace.java", "commitBeforeChange": "a3bafc4dc65a60091a09c190752987fa491412e1", "commitAfterChange": "c748e33dc59acb6c057543af70964487dedf97c3", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private void executeTarget( final String name,                                 final Target target,                                 final ExecutionFrame frame )         throws TaskException", "signatureAfterChange": "     private void executeTarget( final String name,                                 final Target target,                                 final ExecutionFrame frame )         throws TaskException", "diff": ["-                    getLogger().debug( \"Skipping target \" + name +", "-                                       \" as it does not satisfy condition\" );", "+                    final String message = REZ.getString( \"skip-target.notice\", name );", "+                    getLogger().debug( message );", "-                throw new TaskException( \"Error evaluating Condition for target \" + ", "-                                         name, ce );", "+                final String message = REZ.getString( \"condition-eval.error\", name );", "+                throw new TaskException( message, ce );", "-        getLogger().debug( \"Executing target \" + name );", "+        final String message = REZ.getString( \"exec-target.notice\", name );", "+        getLogger().debug( message );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87cb1fd60fe5d9aa866f97899e397c67", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/configuration/DefaultConfigurer.java", "commitBeforeChange": "c31e31c52a1f624e72be505d788db9be42b87e5d", "commitAfterChange": "48c54a521235f746024ae8facc272e049d0e1cf5", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      protected boolean setValue( final Object object,                                  Object value,                                  final Method method,                                 final Class sourceClass,                                 final String source,                                 final Context context )         throws ConfigurationException", "signatureAfterChange": "      protected boolean setValue( final Object object,                                 Object value,                                 final Method method,                                 final Class sourceClass,                                 final String source,                                 final Context context )         throws ConfigurationException", "diff": ["-    protected boolean setValue( final Object object, ", "-                                Object value, ", "+    protected boolean setValue( final Object object,", "+                                Object value,", "-        ", "+", "-                m_logger.debug( \"Failed to find converter \", ce );", "+                getLogger().debug( \"Failed to find converter \", ce );", "-            throw new ConfigurationException( \"Error converting attribute for \" + ", "+            throw new ConfigurationException( \"Error converting attribute for \" +", "-        ", "+", "-            throw new ConfigurationException( \"Error retrieving methods with \" + ", "+            throw new ConfigurationException( \"Error retrieving methods with \" +", "-            throw new ConfigurationException( \"Error calling method attribute \" + ", "+            throw new ConfigurationException( \"Error calling method attribute \" +"]}]}
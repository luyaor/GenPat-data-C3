{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f871e4f54e885732bf6aef35f94466bc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bc1fd66242c50d8c1ea1c0c31c92fd9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/GenericDeploymentTool.java", "commitBeforeChange": "4c429d5df3e8cf99713d69c7357abacedfcccbeb", "commitAfterChange": "0fb624e936ea10bcdbbe1e29e69761a87489fdbb", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     protected void writeJar(String baseName, File jarfile, Hashtable files,                              String publicId) throws BuildException", "signatureAfterChange": "     protected void writeJar(String baseName, File jarfile, Hashtable files,                             String publicId) throws BuildException", "diff": ["-    protected void writeJar(String baseName, File jarfile, Hashtable files, ", "+    protected void writeJar(String baseName, File jarfile, Hashtable files,", "-            // clean the addedfiles Vector ", "+            // clean the addedfiles Vector", "-            ", "+", "-                        throw new BuildException(\"Could not find manifest file: \" + config.manifest, ", "+                        throw new BuildException(\"Could not find manifest file: \" + config.manifest,", "-                            ", "+", "-            ", "+", "-            ", "+", "-            ", "+", "-                ", "+", "-                for (int i = 0, n = innerfiles.length; i < n; i++) {", "-            ", "-                    //get and clean up innerclass name", "-                    int entryIndex = entryName.lastIndexOf(entryFile.getName()) -1;", "-                    if ( entryIndex < 0) {", "-                        entryName = innerfiles[i];", "+                if (innerfiles != null) {", "+                    for (int i = 0, n = innerfiles.length; i < n; i++) {", "+", "+                        //get and clean up innerclass name", "+                        int entryIndex = entryName.lastIndexOf(entryFile.getName()) -1;", "+                        if ( entryIndex < 0) {", "+                            entryName = innerfiles[i];", "+                        }", "+                        else {", "+                            entryName = entryName.substring(0, entryIndex) + File.separatorChar + innerfiles[i];", "+                        }", "+                        // link the file", "+                        entryFile = new File(config.srcDir, entryName);", "+", "+                        log(\"adding innerclass file '\" + entryName + \"'\",", "+                                Project.MSG_VERBOSE);", "+", "+                        addFileToJar(jarStream, entryFile, entryName);", "+", "-                    else {", "-                        entryName = entryName.substring(0, entryIndex) + File.separatorChar + innerfiles[i];", "-                    }", "-                    // link the file", "-                    entryFile = new File(config.srcDir, entryName);", "-        ", "-                    log(\"adding innerclass file '\" + entryName + \"'\", ", "-                            Project.MSG_VERBOSE);", "-        ", "-                    addFileToJar(jarStream, entryFile, entryName);", "-        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "606ffbd96f55b5474802842283d0ab61", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Expand.java", "commitBeforeChange": "e22d7c50937ee1d155f91bfd635673bd41017e76", "commitAfterChange": "95fa304e14c4cc49d84e089ea13107a35b68f8d5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      protected void extractFile(FileUtils fileUtils, File srcF, File dir,                                InputStream compressedInputStream,                                String entryName, long entrySize,                                Date entryDate, boolean isDirectory)                                throws IOException", "signatureAfterChange": "      protected void extractFile(FileUtils fileUtils, File srcF, File dir,                                InputStream compressedInputStream,                                String entryName,                                Date entryDate, boolean isDirectory)                                throws IOException", "diff": ["-                               String entryName, long entrySize,", "+                               String entryName,", "-                               throws IOException {", "-        extractFile(fileUtils, srcF, dir, compressedInputStream,", "-                    entryName, entrySize, entryDate, isDirectory,", "-                    null, null);", "-", "-    }", "+        log(\"Expanding: \" + srcF + \" into \" + dir, Project.MSG_INFO);", "+        File f = fileUtils.resolveFile(dir, entryName);", "+        try {", "+            if (!overwrite && f.exists()", "+                && f.lastModified() >= entryDate.getTime()) {", "+                log(\"Skipping \" + f + \" as it is up-to-date\",", "+                    Project.MSG_DEBUG);", "+                return;", "+            log(\"expanding \" + entryName + \" to \"+ f,", "+                Project.MSG_VERBOSE);", "+            // create intermediary directories - sometimes zip don't add them", "+            File dirF= fileUtils.getParentFile(f);", "+            dirF.mkdirs();", "+            if (isDirectory) {", "+                f.mkdirs();", "+            } else {", "+                byte[] buffer = new byte[1024];", "+                int length = 0;", "+                FileOutputStream fos = null;", "+                try {", "+                    fos = new FileOutputStream(f);", "+", "+                    while ((length =", "+                            compressedInputStream.read(buffer)) >= 0) {", "+                        fos.write(buffer, 0, length);", "+                    }", "+", "+                    fos.close();", "+                    fos = null;", "+                } finally {", "+                    if (fos != null) {", "+                        try {", "+                            fos.close();", "+                        } catch (IOException e) {}", "+", "+            fileUtils.setFileLastModified(f, entryDate.getTime());", "+        } catch( FileNotFoundException ex ) {", "+            log(\"Unable to expand to file \" + f.getPath(), Project.MSG_WARN);"]}]}
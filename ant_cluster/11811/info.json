{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "309a1a5315ee93bf9d8a5ca906ef3972", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98c206894d4773c36ee19a2114f7a7fa", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ide/VAJImport.java", "commitBeforeChange": "6cf09d26ffb60c6d9c780b92203ceb6b98b4182c", "commitAfterChange": "fcd6548344aa3f590435beff55530cfdb6983588", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     protected void importFileset(FileSet fileset)", "signatureAfterChange": " \tprotected void importFileset(FileSet fileset)", "diff": ["+\t */", "+\tprotected void importFileset(FileSet fileset) {", "+\t\tDirectoryScanner ds = fileset.getDirectoryScanner(this.project);", "+\t\tif (ds.getIncludedFiles().length == 0) {", "+\t\t\treturn;", "+\t\t}", "+\t\tString[] includes = null;", "+\t\tString[] excludes = null;", "-     */", "-    protected void importFileset(FileSet fileset) {", "-        DirectoryScanner ds = fileset.getDirectoryScanner(this.project);", "-        if (ds.getIncludedFiles().length == 0) {", "-            return;", "-        }", "+\t\t// Hack to get includes and excludes. We could also use getIncludedFiles,", "+\t\t// but that would result in very long HTTP-requests.", "+\t\t// Therefore we want to send the patterns only to the remote tool server", "+\t\t// and let him figure out the files.", "+\t\ttry {", "+\t\t\tClass directoryScanner = ds.getClass();", "+\t\t", "+\t\t\tField includesField = directoryScanner.getDeclaredField(\"includes\");", "+\t\t\tincludesField.setAccessible(true);", "+\t\t\tincludes = (String[]) includesField.get(ds);", "+\t", "+\t\t\tField excludesField = directoryScanner.getDeclaredField(\"excludes\");", "+\t\t\texcludesField.setAccessible(true);", "+\t\t\texcludes = (String[]) excludesField.get(ds);", "+\t\t} catch (NoSuchFieldException nsfe) {", "+\t\t\tthrow new BuildException(", "+\t\t\t\t\"DirectoryScanner.includes or .excludes missing\" + nsfe.getMessage());", "+\t\t} catch (IllegalAccessException iae) {", "+\t\t\tthrow new BuildException(", "+\t\t\t\t\"Access to DirectoryScanner.includes or .excludes not allowed\");", "+\t\t}", "-        Vector classes = new Vector();", "-        Vector sources = new Vector();", "-        Vector resources = new Vector();", "-", "-        String[] classesArr = null;", "-        String[] sourcesArr = null;", "-        String[] resourcesArr = null;", "-", "-        StringBuffer msg = new StringBuffer();", "-        msg.append(\"Importing \");", "-        String connector = \"\";", "-", "-        ImportCodeSpec importSpec = new ImportCodeSpec();", "-        importSpec.setDefaultProject(vajproject);", "-", "-        scan(", "-             fileset.getDir(this.project), ", "-             ds.getIncludedFiles(), ", "-             classes, ", "-             sources, ", "-             resources); ", "-", "-        if (importClasses) {", "-            classesArr = new String[classes.size()];", "-            classes.copyInto(classesArr);", "-            importSpec.setClassFiles(classesArr);", "-            if (classesArr.length > 0) {", "-                logFiles(classes, \"class\");", "-                msg.append( classesArr.length );", "-                msg.append( \" class \" );", "-                msg.append( classesArr.length > 1 ? \"files\" : \"file\" );", "-                connector = \", \";", "-            }", "-        }", "-", "-        if (importSources) {", "-            sourcesArr = new String[sources.size()];", "-            sources.copyInto(sourcesArr);", "-            importSpec.setJavaFiles(sourcesArr);", "-            if (sourcesArr.length > 0) {", "-                logFiles(sources, \"source\");", "-                msg.append( connector );", "-                msg.append( sourcesArr.length );", "-                msg.append( \" source \" );", "-                msg.append( sourcesArr.length > 1 ? \"files\" : \"file\" );", "-                connector = \", \";", "-            }", "-        }", "-", "-        if (importResources) {", "-            String resourcePath = fileset.getDir(this.project).getAbsolutePath();", "-            resourcesArr = new String[resources.size()];", "-            resources.copyInto(resourcesArr);", "-            importSpec.setResourcePath(resourcePath);", "-            importSpec.setResourceFiles(resourcesArr);", "-            if (resourcesArr.length > 0) {", "-                logFiles(resources, \"resource\");", "-                log( \"  (relative to resource path '\" + resourcePath + \"')\", ", "-                     org.apache.tools.ant.Project.MSG_VERBOSE );", "-", "-                msg.append( connector );", "-                msg.append( resourcesArr.length );", "-                msg.append( \" resource \" );", "-                msg.append( resourcesArr.length > 1 ? \"files\" : \"file\" );", "-            }", "-        }", "-", "-        msg.append( \" into the \" );", "-        msg.append( importProject );", "-        msg.append( \" project.\" );", "-", "-        log(msg.toString());", "-                ", "-        try {", "-            Type[] importedTypes = VAJUtil.getWorkspace().importData(importSpec);", "-            if (importedTypes == null) {", "-                throw new BuildException(\"Unable to import into Workspace!\");", "-            }", "-        } catch (IvjException ivje) {", "-            throw VAJUtil.createBuildException(\"Error while importing into Workspace: \", ivje);", "-        }", "-    }", "+\t\tgetUtil().importFiles( importProject, ds.getBasedir(), ", "+\t\t\t\tincludes, excludes, ", "+\t\t\t\timportClasses, importResources, importSources, ", "+\t\t\t\tuseDefaultExcludes);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa1931987459f4db1f3a198c917f5ea1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/CVSPass.java", "commitBeforeChange": "08535a06a25538edd320122b847d546ef085203d", "commitAfterChange": "2b6f0a872003b2f6dcc4ffd4f83fae9fd9cfb362", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public CVSPass()", "signatureAfterChange": "      public CVSPass()", "diff": ["-        // Create lookup for password mangling", "-        c[32]='r'; c[33]='x'; c[34]='5'; c[35]='O'; c[37]='m';", "-        c[38]='H'; c[39]='l'; c[40]='F'; c[42]='L'; c[43]='C';", "-        c[44]='t'; c[45]='J'; c[46]='D'; c[47]='W'; c[48]='o';", "-        c[49]='4'; c[50]='K'; c[51]='w'; c[52]='1'; c[53]='\"';", "-        c[54]='R'; c[55]='Q'; c[56]='_'; c[57]='A'; c[58]='p';", "-        c[59]='V'; c[60]='v'; c[61]='n'; c[62]='z'; c[63]='i';", "-        c[64]=')'; c[65]='9'; c[66]='S'; c[67]='+'; c[68]='.';", "-        c[69]='f'; c[70]='('; c[71]='Y'; c[72]='&'; c[73]='g';", "-        c[74]='-'; c[75]='2'; c[76]='*'; c[81]='7'; c[82]='6';", "-        c[83]='B'; c[86]=';'; c[87]='/'; c[89]='G'; c[90]='s';", "-        c[91]='N'; c[92]='X'; c[93]='k'; c[94]='j'; c[95]='%';", "-        c[97]='y'; c[98]='u'; c[99]='h'; c[100]='e'; c[101]='d';", "-        c[102]='E'; c[103]='I'; c[104]='c'; c[105]='?'; c[108]='\\'';", "-        c[109]='%'; c[110]='='; c[111]='0'; c[112]=':'; c[113]='q';", "-        c[115]='Z'; c[116]=','; c[117]='b'; c[118]='<'; c[119]='3';", "-        c[120]='!'; c[121]='a'; c[122]='>'; c[123]='M'; c[124]='T';", "-        c[125]='P'; c[126]='U';"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cced792507ce35f85b059ba4bdf3cb02", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d9dc1b788ec3bb59d0b935816b9e55c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/filterreaders/src/main/org/apache/tools/ant/taskdefs/LoadProperties.java", "commitBeforeChange": "07f926d903581d863a35f5ab34929cd53a26023c", "commitAfterChange": "4e222b97c6be55124832d53c6478a2688df9e308", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public final void execute() throws BuildException", "signatureAfterChange": "     public final void execute() throws BuildException", "diff": ["-            int index = 0;", "-", "-                while (index != -1) {", "-                    int oldIndex = index;", "-                    index = text.indexOf(\"\\n\", oldIndex);", "-                    if (index != -1) {", "-                        String line = text.substring(oldIndex, index);", "-                        if (line.endsWith(\"\\r\")) {", "-                            line = line.substring(0, line.length() - 1);", "-                        }", "-                        int equalIndex = line.indexOf(\"=\");", "-                        int spaceIndex = line.indexOf(\" \");", "-                        int sepIndex = -1;", "-", "-                        if (equalIndex != -1 || spaceIndex != -1) {", "-                            if (equalIndex == -1) {", "-                                sepIndex = spaceIndex;", "-                            } else if (spaceIndex == -1) {", "-                                sepIndex = equalIndex;", "-                            } else {", "-                                sepIndex = Math.min(spaceIndex, equalIndex);", "-                            }", "-                        }", "-", "-                        if (sepIndex != -1) {", "-                            String key = line.substring(0, sepIndex);", "-                            String value = line.substring(sepIndex + 1);", "-                            if (value != null && value.trim().length() > 0) {", "-                                project.setNewProperty(key, value);", "-                            }", "-                        }", "-", "-                        ++index;", "+                StringInputStream sis = new StringInputStream(text);", "+                Properties props = new Properties();", "+                props.load(sis);", "+                Enumeration e = props.keys();", "+                while (e.hasMoreElements()) {", "+                    String key = (String) e.nextElement();", "+                    String value = props.getProperty(key);", "+                    if (key != null && value != null", "+                            && value.trim().length() > 0) {", "+                        project.setNewProperty(key, value);", "+                sis.close();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a027e5830a0d33ebde72d29ad9cd276a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/PathTokenizer.java", "commitBeforeChange": "d42633d63a6a9b030046f0307850b72ca9282640", "commitAfterChange": "0998ef923253d78f4eda15cacfb415d8d263ec1a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "          public String nextToken() throws NoSuchElementException", "signatureAfterChange": "          public String nextToken() throws NoSuchElementException", "diff": ["+        String token = null;", "-            String token = lookahead;", "+            token = lookahead;", "-            ", "-            return token;", "-            String token = tokenizer.nextToken().trim();", "+            token = tokenizer.nextToken().trim();", "+        }            ", "-            ", "-            if (token.length() == 1 && Character.isLetter(token.charAt(0))", "-                                    && File.pathSeparator.equals(\";\") ", "-                                    && tokenizer.hasMoreTokens()) {", "-                // we are on a dos style system so this path could be a drive", "-                // spec. We look at the next token", "-                String nextToken = tokenizer.nextToken().trim();", "-                if (nextToken.startsWith(\"\\\\\") || nextToken.startsWith(\"/\")) {", "-                    // we know we are on a DOS style platform and the next path starts with a", "-                    // slash or backslash, so we know this is a drive spec", "-                    token += \":\" + nextToken;", "-                }", "-                else {", "-                    // store the token just read for next time", "-                    lookahead = nextToken;", "-                }", "+        if (token.length() == 1 && Character.isLetter(token.charAt(0))", "+                                && File.pathSeparator.equals(\";\") ", "+                                && tokenizer.hasMoreTokens()) {", "+            // we are on a dos style system so this path could be a drive", "+            // spec. We look at the next token", "+            String nextToken = tokenizer.nextToken().trim();", "+            if (nextToken.startsWith(\"\\\\\") || nextToken.startsWith(\"/\")) {", "+                // we know we are on a DOS style platform and the next path starts with a", "+                // slash or backslash, so we know this is a drive spec", "+                token += \":\" + nextToken;", "-            ", "-            return token;", "+            else {", "+                // store the token just read for next time", "+                lookahead = nextToken;", "+            }", "+           ", "+        return token;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8d32ba376d9fe7e5abc066bdb55c276", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "3def9c5ed8dd13b7caf924d25dcd230391b17da6", "commitAfterChange": "2b925503d71972d8b782eedd6cdf75711377d7b0", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     private void checkIncludePatterns()", "signatureAfterChange": "     private void checkIncludePatterns()", "diff": ["+        ensureNonPatternSetsReady();", "+        int wildcardPatternIndex = 0;", "+            boolean wildcards = SelectorUtils.hasWildcards(includes[i]);", "+                    if (wildcards) {", "+                        wildcardPatternIndex++;", "+                    }", "+                if (wildcards) {", "+                    wildcardPatternIndex++;", "+                }", "-            newroots.put(SelectorUtils.rtrimWildcardTokens(", "-                includes[i]), includes[i]);", "+            if (wildcards) {", "+                newroots.put(includePatterns[wildcardPatternIndex++]", "+                             .rtrimWildcardTokens(), includes[i]);", "+            } else {", "+                newroots.put(new TokenizedPath(includes[i]), includes[i]);", "+            }", "-        if (newroots.containsKey(\"\") && basedir != null) {", "+        if (newroots.containsKey(TokenizedPath.EMPTY_PATH)", "+            && basedir != null) {", "-                String currentelement = (String) entry.getKey();", "+                TokenizedPath currentPath = (TokenizedPath) entry.getKey();", "+                String currentelement = currentPath.toString();", "-                String originalpattern = (String) entry.getValue();", "-                            myfile = findFile(basedir, currentelement, true);", "+                            myfile = currentPath.findFile(basedir, true);", "+                                if (!currentPath.toString()", "+                                    .equals(currentelement)) {", "+                                    currentPath =", "+                                        new TokenizedPath(currentelement);", "+                                }", "+", "-                    File f = findFile(basedir, currentelement, false);", "+                    File f = currentPath.findFile(basedir, false);", "+                        currentPath = new TokenizedPath(currentelement);", "+", "-                    if (!followSymlinks", "-                        && isSymlink(basedir, currentelement)) {", "+                    if (!followSymlinks && currentPath.isSymlink(basedir)) {", "+                        String originalpattern = (String) entry.getValue();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5477acc4597af5263384d4c8f09aa3e6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fc026835246cee3d9b3d74909e40cad", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/jdepend/JDependTask.java", "commitBeforeChange": "59e982fc741c834f8436bfca6abc72196a5e5b3b", "commitAfterChange": "569e491428f5899676aed3461999c2ff05cfd2fe", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public int executeAsForked( CommandlineJava commandline )         throws TaskException", "signatureAfterChange": "     private int executeAsForked( final CommandlineJava commandline )         throws TaskException", "diff": ["-    public int executeAsForked( CommandlineJava commandline )", "+    private int executeAsForked( final CommandlineJava commandline )", "-        if( getClasspath().toString().length() > 0 )", "+        if( m_compileClasspath.toString().length() > 0 )", "-            createJvmarg( commandline ).setValue( getClasspath().toString() );", "+            createJvmarg( commandline ).setValue( m_compileClasspath.toString() );", "-        if( getOutputFile() != null )", "+        if( m_outputFile != null )", "-            commandline.createArgument().setValue( _outputFile.getPath() );", "+            commandline.createArgument().setValue( m_outputFile.getPath() );", "-        PathTokenizer sourcesPath = new PathTokenizer( getSourcespath().toString() );", "+        PathTokenizer sourcesPath = new PathTokenizer( m_sourcesPath.toString() );", "-        if( getDir() != null )", "+        if( m_dir != null )", "-            exe.setWorkingDirectory( getDir() );", "+            exe.setWorkingDirectory( m_dir );", "-        if( getOutputFile() != null )", "-            getLogger().info( \"Output to be stored in \" + getOutputFile().getPath() );", "+        if( m_outputFile != null )", "+        {", "+            getLogger().info( \"Output to be stored in \" + m_outputFile.getPath() );", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f55d5fa510ce1da34fe80618649a995c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/jdepend/JDependTask.java", "commitBeforeChange": "59e982fc741c834f8436bfca6abc72196a5e5b3b", "commitAfterChange": "569e491428f5899676aed3461999c2ff05cfd2fe", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public int executeAsForked( CommandlineJava commandline )         throws TaskException", "signatureAfterChange": "     private int executeAsForked( final CommandlineJava commandline )         throws TaskException", "diff": ["-    public int executeAsForked( CommandlineJava commandline )", "+    private int executeAsForked( final CommandlineJava commandline )", "-        if( getClasspath().toString().length() > 0 )", "+        if( m_compileClasspath.toString().length() > 0 )", "-            createJvmarg( commandline ).setValue( getClasspath().toString() );", "+            createJvmarg( commandline ).setValue( m_compileClasspath.toString() );", "-        if( getOutputFile() != null )", "+        if( m_outputFile != null )", "-            commandline.createArgument().setValue( _outputFile.getPath() );", "+            commandline.createArgument().setValue( m_outputFile.getPath() );", "-        PathTokenizer sourcesPath = new PathTokenizer( getSourcespath().toString() );", "+        PathTokenizer sourcesPath = new PathTokenizer( m_sourcesPath.toString() );", "-        if( getDir() != null )", "+        if( m_dir != null )", "-            exe.setWorkingDirectory( getDir() );", "+            exe.setWorkingDirectory( m_dir );", "-        if( getOutputFile() != null )", "-            getLogger().info( \"Output to be stored in \" + getOutputFile().getPath() );", "+        if( m_outputFile != null )", "+        {", "+            getLogger().info( \"Output to be stored in \" + m_outputFile.getPath() );", "+        }"]}]}
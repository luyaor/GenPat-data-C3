{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e8abeb2d3d617c0f03cff192c2068290", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30562ee7cc83abd3684b8c80b6d0177e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/role/DefaultRoleManager.java", "commitBeforeChange": "a14b034437745cfc4066f88bfcaa7923c574ae1d", "commitAfterChange": "bf5d72445b3750fb9e34c150abb7b6372324b85d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void addNameRoleMapping( final String name, final String role )         throws IllegalArgumentException", "signatureAfterChange": "     public void addRole( final RoleInfo role ) throws RoleException", "diff": ["-    public void addNameRoleMapping( final String name, final String role )", "-        throws IllegalArgumentException", "-        final String oldRole = (String)m_names.get( name );", "+     */", "+    public void addRole( final RoleInfo role ) throws RoleException", "+    {", "+        // Check for duplicate role names", "+        final String roleName = role.getName();", "+        RoleInfo oldRole = (RoleInfo)m_nameMap.get( roleName );", "-            final String message = REZ.getString( \"duplicate-name.error\", oldRole );", "-            throw new IllegalArgumentException( message );", "+            final String message = REZ.getString( \"duplicate-role.error\", roleName );", "+            throw new RoleException( message );", "-        final String oldName = (String)m_roles.get( role );", "-        if( null != oldName && !oldName.equals( name ) )", "+        // Check for duplicate shorthand names", "+        final String shorthand = role.getShorthand();", "+        if( shorthand != null )", "-            final String message = REZ.getString( \"duplicate-role.error\", oldName );", "-            throw new IllegalArgumentException( message );", "+            oldRole = (RoleInfo)m_shorthandMap.get( shorthand );", "+            if( null != oldRole && !oldRole.equals( role ) )", "+            {", "+                final String message = REZ.getString( \"duplicate-shorthand.error\", shorthand );", "+                throw new RoleException( message );", "+            }", "-        m_names.put( name, role );", "-        m_roles.put( role, name );", "+        // Check for duplicate types", "+        final Class roleType = role.getType();", "+        if( roleType != null )", "+        {", "+            oldRole = (RoleInfo)m_typeMap.get( roleType );", "+            if( null != oldRole && !oldRole.equals( role ) )", "+            {", "+                final String message = REZ.getString( \"duplicate-type.error\", roleType.getName() );", "+                throw new RoleException( message );", "+            }", "+        }", "+", "+        // Add the role to the maps", "+        m_nameMap.put( roleName, role );", "+        if( shorthand != null )", "+        {", "+            m_shorthandMap.put( shorthand, role );", "+        }", "+        if( roleType != null )", "+        {", "+            m_typeMap.put( roleType, role );", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32213b37305484a9cbcae5d1e52df2b3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/rmic/DefaultRmicAdapter.java", "commitBeforeChange": "739311eb354d0463260406ec3642395e5483d3da", "commitAfterChange": "68fb37b1a2632d9da411ffa8d6b942fb8536fc82", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "          public String[] mapFileName(String name)", "signatureAfterChange": "          public String[] mapFileName(String name)", "diff": ["-            String[] stubName = stubMapper.mapFileName(name);", "-", "-            if (stubName == null", "+            if (name == null", "+                || !name.endsWith(\".class\")", "-                || name.endsWith(getSkelClassSuffix()+\".class\")) {", "-                // Not a .class file", "+                || name.endsWith(getSkelClassSuffix()+\".class\") ", "+                || name.endsWith(getTieClassSuffix()+\".class\")) {", "+                // Not a .class file or the one we'd generate", "-            String classname = name.replace(File.separatorChar, '.');", "-            classname = classname.substring(0, classname.indexOf(\".class\"));", "+            String base = name.substring(0, name.indexOf(\".class\"));", "+            String classname = base.replace(File.separatorChar, '.');", "-            if (skelMapper != null) {", "-                return new String[] {", "-                    stubName[0], ", "-                    skelMapper.mapFileName(name)[0]", "-                };", "+", "+            if (!attributes.getIiop()) {", "+                if (\"1.2\".equals(attributes.getStubVersion())) {", "+                    return new String[] {", "+                        base + getStubClassSuffix() + \".class\"", "+                    };", "+                } else {", "+                    return new String[] {", "+                        base + getStubClassSuffix() + \".class\",", "+                        base + getSkelClassSuffix() + \".class\",", "+                    };", "+                }", "-                return stubName;", "+                int lastSlash = base.lastIndexOf(\"/\");", "+", "+                String dirname = \"\";", "+                /*", "+                 * I know, this is not necessary, but I prefer it explicit (SB)", "+                 */", "+                int index = -1;", "+                if (lastSlash == -1) {", "+                    // no package", "+                    index = 0;", "+                } else {", "+                    index = lastSlash + 1;", "+                    dirname = base.substring(0, index);", "+                }", "+", "+                String filename = base.substring(index);", "+", "+                return new String[] {", "+                    dirname + \"_\" + filename + getStubClassSuffix() + \".class\",", "+                    dirname + \"_\" + filename + getTieClassSuffix() + \".class\"", "+                };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "824c5f13271214b81c0fc7381ed00810", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/repository/Library.java", "commitBeforeChange": "4d831bb7cbb2bb2839303380a28f888c587802a0", "commitAfterChange": "f630ef56ed68316b07aaa27e05cf871de1070498", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 29, "signatureBeforeChange": "     public String getIf()", "signatureAfterChange": "     public boolean equals(Object o)", "diff": ["-     */", "-    public String getIf() {", "-        return ifClause;", "-    }", "+     */", "+    public boolean equals(Object o) {", "+        if (this == o) {", "+            return true;", "+        }", "+        if (!(o instanceof Library)) {", "+            return false;", "+        }", "+", "+        final Library library = (Library) o;", "+", "+        if (archive != null ? !archive.equals(library.archive) : library.archive != null) {", "+            return false;", "+        }", "+        if (destinationName != null ? !destinationName.equals(", "+                library.destinationName) : library.destinationName != null) {", "+            return false;", "+        }", "+        if (project != null ? !project.equals(library.project) : library.project != null) {", "+            return false;", "+        }", "+        if (suffix != null ? !suffix.equals(library.suffix) : library.suffix != null) {", "+            return false;", "+        }", "+        if (version != null ? !version.equals(library.version) : library.version != null) {", "+            return false;", "+        }", "+", "+        return true;", "+    }"]}]}
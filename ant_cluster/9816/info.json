{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4ca3f0373e48cff507d10cc3fe76c42b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40d4332fc3f1da3e63be48471ec3f99d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/launch/Launcher.java", "commitBeforeChange": "1ca4fd877177c9619e7c8d9c6e5bb3c606ac4546", "commitAfterChange": "24a5f03a90e6931dd280031f226b76bfe971193e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private void run(String[] args) throws MalformedURLException", "signatureAfterChange": "     private void run(String[] args) throws MalformedURLException", "diff": ["+        String libPath = \"\";", "+        String[] newargs = null;", "+        int argcount = -1;", "+        for (argcount = 0; argcount < args.length -1; argcount++) {", "+            if (args[argcount].equals(\"-lib\")) {", "+                libPath = args[argcount + 1];", "+                break;", "+            }", "+        }", "+        if (libPath.equals(\"\")) {", "+           newargs = new String[args.length];", "+           System.arraycopy(args, 0, newargs, 0, args.length);", "+        } else {", "+            newargs = new String[args.length - 2];", "+            // copy the beginning of the args array", "+            if (argcount > 0 ) {", "+                System.arraycopy(args, 0, newargs, 0 ,argcount);", "+            }", "+            // copy the end of the args array", "+            if ((argcount + 2 < args.length) && argcount > 0) {", "+                System.arraycopy(args, argcount + 2, newargs, argcount, args.length - (argcount + 2));", "+            }", "+        }", "+        StringTokenizer myTokenizer = new StringTokenizer(libPath, System.getProperty(\"path.separator\"));", "+        URL[] classPathJars = new URL[myTokenizer.countTokens()];", "+        int classPathJarCount = 0;", "+        while (myTokenizer.hasMoreElements()) {", "+            String token = myTokenizer.nextToken();", "+            classPathJars[classPathJarCount++] = new File(token).toURL();", "+        }", "-        int numJars = userJars.length + systemJars.length;", "+        int numJars = classPathJars.length + userJars.length + systemJars.length;", "-        System.arraycopy(userJars, 0, jars, 0, userJars.length);", "-        System.arraycopy(systemJars, 0, jars, userJars.length,", "+        System.arraycopy(classPathJars, 0, jars, 0, classPathJars.length);", "+        System.arraycopy(userJars, 0, jars, classPathJars.length, userJars.length);", "+        System.arraycopy(systemJars, 0, jars, userJars.length + classPathJars.length,", "-            main.startAnt(args, null, null);", "+            main.startAnt(newargs, null, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7168b82789e8568746bd9e4cae9206a0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/email/EmailAddress.java", "commitBeforeChange": "7b4290a6232f165327ddf4832c06474c8ef6109e", "commitAfterChange": "f1a4a514784709dadf94d8b4f38ab2f52f1b1e1e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public EmailAddress(String address)", "signatureAfterChange": "     public EmailAddress(String email)", "diff": ["-    public EmailAddress(String address) {", "-        this.address = address;", "+    // Algorithm based on the one found in Ant's MailMessage.java", "+    public EmailAddress(String email) {", "+        final int minLen = 9;", "+        int len = email.length();", "+", "+        // shortcut for \"<address>\"", "+        if (len > minLen) {", "+            if ((email.charAt(0) == '<' || email.charAt(1) == '<')", "+            && (email.charAt(len - 1) == '>' || email.charAt(len - 2) == '>')) {", "+                this.address = trim(email, true);", "+                return;", "+            }", "+        }", "+", "+        int paramDepth = 0;", "+        int start = 0;", "+        int end = 0;", "+        int nStart = 0;", "+        int nEnd = 0;", "+", "+        for (int i = 0; i < len; i++) {", "+            char c = email.charAt(i);", "+            if (c == '(') {", "+                paramDepth++;", "+                if (start == 0) {", "+                    end = i;  // support \"address (name)\"", "+                    nStart = i + 1;", "+                }", "+            } else if (c == ')') {", "+                paramDepth--;", "+                if (end == 0) {", "+                    start = i + 1;  // support \"(name) address\"", "+                    nEnd = i;", "+                }", "+            } else if (paramDepth == 0 && c == '<') {", "+                if (start == 0) {", "+                    nEnd = i;", "+                }", "+                start = i + 1;", "+            } else if (paramDepth == 0 && c == '>') {", "+                end = i;", "+                if (end != len - 1) {", "+                    nStart = i + 1;", "+                }", "+            }", "+        }", "+", "+        // DEBUG: System.out.println( email );", "+        if (end == 0) {", "+            end = len;", "+        }", "+        // DEBUG: System.out.println( \"address: \" + start + \" \" + end );", "+        if (nEnd == 0) {", "+            nEnd = len;", "+        }", "+        // DEBUG: System.out.println( \"name: \" + nStart + \" \" + nEnd );", "+", "+        this.address = trim(email.substring(start, end), true);", "+        this.name = trim(email.substring(nStart, nEnd), false);", "+", "+        // if the two substrings are longer than the original, then name", "+        // contains address - so reset the name to null", "+        if (this.name.length() + this.address.length() > len) {", "+            this.name = null;", "+        }", "+    }"]}]}
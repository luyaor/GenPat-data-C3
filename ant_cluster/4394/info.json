{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "35e86787af24c7c6f98176411e2d026e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06ce1299eab13a9ac83b44c999768b12", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/scm/AntStarTeamCheckOut.java", "commitBeforeChange": "f7def885dd7bc3f17bb095754a21805701d7ada7", "commitAfterChange": "7fbbcdf665363d7efd4fe092bc7b24bd8eb6d542", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "     protected void runItem( Server s,                              com.starbase.starteam.Project p,                              View v,                              Type t,                              Folder f,                              Item item )", "signatureAfterChange": "     protected void runItem( Server s,                              com.starbase.starteam.Project p,                              View v,                              Type t,                              Folder f,                              Item item,                             String tgt )", "diff": ["-                            Item item )", "+                            Item item,", "+                            String tgt )", "-        // Time to filter...", "-        boolean includeIt = false;", "-        boolean excludeIt = false;", "-", "-        // See if it fits any includes.", "-        if (getIncludes()!=null)", "-        {", "-            StringTokenizer inStr = new StringTokenizer(getIncludes(), \" \");", "-            while (inStr.hasMoreTokens())", "-            {", "-                if (match(inStr.nextToken(), pName))", "-                {", "-                    includeIt = true;", "-                }", "-            }", "-        }", "-", "-        // See if it fits any excludes.", "-        if (getExcludes()!=null)", "-        {", "-            StringTokenizer exStr = new StringTokenizer(getExcludes(), \" \");", "-            while (exStr.hasMoreTokens())", "-            {", "-                if (match(exStr.nextToken(), pName))", "-                {", "-                    excludeIt = true;", "-                }", "-            }", "-        }", "-", "-        // Don't check it out if", "-        // (a) It fits no include filters", "-        // (b) It fits an exclude filter", "-        if (!includeIt | excludeIt)", "-        {", "+        if ( !shouldCheckout(pName) ) {", "-        if (getVerboseAsBoolean())", "+        if (getVerbose())", "-            boolean bShowHeader = true;", "-            if (f != prevFolder)", "+            boolean bShowHeader = (f != prevFolder);", "+            if (bShowHeader)", "-                System.out.println(\"            Folder: \\\"\" + strFolder + \"\\\"\");", "+                log(\"            Folder: \\\"\" + strFolder + \"\\\"\");", "-            }", "-            else", "-                bShowHeader        = false;", "-            // If we displayed the project, view, item type, or folder,", "-            // then show the list of relevant item properties.", "-            if (bShowHeader)", "-            {", "-                System.out.print(\"                Item\");", "-                System.out.print(\",\\t\" + p1.getDisplayName());", "+                // If we displayed the project, view, item type, or folder,", "+                // then show the list of relevant item properties.", "+                StringBuffer header = new StringBuffer(\"                Item\");", "+                header.append(\",\\t\").append(p1.getDisplayName());", "-                    System.out.print(\",\\t\" + p2.getDisplayName());", "+                    header.append(\",\\t\").append(p2.getDisplayName());", "-                System.out.println(\"\");", "+                log(header.toString());", "-", "-            System.out.print(\"                \" + item.getItemID());", "+            StringBuffer itemLine = new StringBuffer(\"                \");", "+            itemLine.append(item.getItemID());", "-            System.out.print(\",\\t\" + formatForDisplay(p1, item.get(p1.getName())));", "+            itemLine.append(\",\\t\").append(formatForDisplay(p1, item.get(p1.getName())));", "-                System.out.print(\",\\t\" + formatForDisplay(p2, item.get(p2.getName())));", "+                itemLine.append(\",\\t\").append(formatForDisplay(p2, item.get(p2.getName())));", "-                System.out.println(\",\\tLocked by \" + locker);", "+                itemLine.append(\",\\tLocked by \").append(locker);", "-                System.out.println(\",\\tNot locked\");", "+                itemLine.append(\",\\tNot locked\");", "+            log(itemLine.toString());", "+        // Create a reference to the local target file using either the \"default path\" calculation or the calculation based", "+        // solely on targetFolder.", "+        java.io.File local = (getUsesDefaultFolder()", "+                              ? getLocalFileUsingDefault(v,item.getParentFolder().getFolderHierarchy(),(String)item.get(p1.getName()))", "+                              : getLocalFile(tgt,(String)item.get(p1.getName())));", "+        try", "+        {", "+            remote.checkoutTo(local, Item.LockType.UNCHANGED, false, true, true);", "+            checkedOut++;", "+        }", "+        catch (Exception e)", "+        {", "+            log(\"Failed to checkout '\" + local + \"': \" + e.getMessage(), Project.MSG_WARN);", "+            // probably not a good idea to swallow the stacktrace", "+        }", "+    }", "-                ", "-        StringTokenizer pathTokenizer = ", "-            new StringTokenizer(item.getParentFolder().getFolderHierarchy(), delim);", "-        // Create a reference to the local target file using the format listed above.", "-        java.io.File local = new java.io.File( getTargetFolder() + localName + ", "-                                               item.get(p1.getName()) );", "-        try", "-        {", "-            remote.checkoutTo(local, Item.LockType.UNCHANGED, false, true, true);", "-        }", "-        catch (Throwable e)", "-        {", "-            project.log(\"    \" + e.getMessage());", "-        }", "-        checkedOut++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bc8efb662e7d5e75da2cd20af87f7af", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/selectors/modifiedselector/ModifiedSelector.java", "commitBeforeChange": "44be0d652d306225e106ce501d4c6421d50fd8b5", "commitAfterChange": "590844e775f322377fe9d9dbb7137ed465d625d9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void configure()", "signatureAfterChange": "     public void configure()", "diff": ["-        org.apache.tools.ant.Project project = getProject();", "+        Project project = getProject();", "+", "+            // set self as a BuildListener to delay cachefile saves", "+            getProject().addBuildListener(this);", "-            // no reference to project - e.g. during JUnit tests", "+            // no reference to project - e.g. during normal JUnit tests", "+            setDelayUpdate(false);", "-        cache = new PropertiesfileCache(cachefile);", "-        algorithm = new DigestAlgorithm();", "-        comparator = new EqualComparator();", "+        Cache      defaultCache      = new PropertiesfileCache(cachefile);", "+        Algorithm  defaultAlgorithm  = new DigestAlgorithm();", "+        Comparator defaultComparator = new EqualComparator();", "-", "-        String pkg = \"org.apache.tools.ant.types.selectors.cacheselector\";", "+        String pkg = \"org.apache.tools.ant.types.selectors.modifiedselector\";", "-        // the algorithm", "-        if (algorithm == null) {", "+        // specify the algorithm classname", "+        if (algoName != null) {", "+            // use Algorithm defined via name", "-                className = pkg + \".HashvalueAlgorithm\";", "+                algorithm = new HashvalueAlgorithm();", "-                className = pkg + \".DigestAlgorithm\";", "+                algorithm = new DigestAlgorithm();", "+            } else if (\"checksum\".equals(algoName.getValue())) {", "+                algorithm = new ChecksumAlgorithm();", "-            if (className != null) {", "-                try {", "-                    // load the specified Algorithm, save the reference and configure it", "-                    algorithm = (Algorithm) Class.forName(className).newInstance();", "-                } catch (Exception e) {", "-                    e.printStackTrace();", "-                }", "+        } else {", "+            if (algorithmClass != null) {", "+                // use Algorithm specified by classname", "+                algorithm = (Algorithm) loadClass(", "+                    algorithmClass,", "+                    \"is not an Algorithm.\",", "+                    Algorithm.class);", "+            } else {", "+                // nothing specified - use default", "+                algorithm = defaultAlgorithm;", "-        // the cache", "-        if (cache == null) {", "+        // specify the cache classname", "+        if (cacheName != null) {", "+            // use Cache defined via name", "-                className = pkg + \".PropertiesfileCache\";", "+                cache = new PropertiesfileCache();", "-            if (className != null) {", "-                try {", "-                    // load the specified Cache, save the reference and configure it", "-                    cache = (Cache) Class.forName(className).newInstance();", "-                } catch (Exception e) {", "-                    e.printStackTrace();", "-                }", "+        } else {", "+            if (cacheClass != null) {", "+                // use Cache specified by classname", "+                cache = (Cache) loadClass(cacheClass, \"is not a Cache.\", Cache.class);", "+            } else {", "+                // nothing specified - use default", "+                cache = defaultCache;", "-        // the comparator", "-        if (comparator == null) {", "+        // specify the comparator classname", "+        if (compName != null) {", "+            // use Algorithm defined via name", "-                className = pkg + \".EqualComparator\";", "-            } else if (\"role\".equals(compName.getValue())) {", "-                className = \"java.text.RuleBasedCollator\";", "+                comparator = new EqualComparator();", "+             } else if (\"rule\".equals(compName.getValue())) {", "+                // TODO there is a problem with the constructor for the RBC.", "+                // you have to provide the rules in the constructors - no setters", "+                // available.", "+                throw new BuildException(\"RuleBasedCollator not yet supported.\");", "+                // Have to think about lazy initialization here...  JHM", "+                // comparator = new java.text.RuleBasedCollator();", "-            if (className != null) {", "-                try {", "-                    // load the specified Cache, save the reference and configure it", "-                    comparator = (Comparator) Class.forName(className).newInstance();", "-                } catch (Exception e) {", "-                    e.printStackTrace();", "-                }", "+        } else {", "+            if (comparatorClass != null) {", "+                // use Algorithm specified by classname", "+                comparator = (Comparator) loadClass(", "+                    comparatorClass,", "+                    \"is not a Comparator.\",", "+                    Comparator.class);", "+            } else {", "+                // nothing specified - use default", "+                comparator = defaultComparator;"]}]}
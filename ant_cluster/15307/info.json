{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ffb7212ce80800fcce142f8b81115d2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07a93abeabe7a6d0c63423c55370459a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/MacroInstance.java", "commitBeforeChange": "5e4408208a34ba760533b1c6738ccb71cdfa03ba", "commitAfterChange": "278074659bf5724cde17788d210699876f7ffa4e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": "      private UnknownElement copy(UnknownElement ue)", "signatureAfterChange": "      private UnknownElement copy(UnknownElement ue)", "diff": ["+            } else if (templateElement.isImplicit()) {", "+                if (unknownElements.size() == 0 && !templateElement.isOptional()) {", "+                    throw new BuildException(", "+                        \"Missing nested elements for implicit element \"", "+                        + templateElement.getName());", "+                }", "+                for (Iterator i = unknownElements.iterator();", "+                     i.hasNext();) {", "+                    UnknownElement child = (UnknownElement) i.next();", "+                    rc.addChild(child.getWrapper());", "+                    ret.addChild(child);", "+                }", "-                Element element = (Element) presentElements.get(tag);", "-                if (element == null) {", "+                List list = (List) presentElements.get(tag);", "+                if (list == null) {", "-                for (Iterator i = element.getUnknownElements().iterator();", "+                for (Iterator i = list.iterator();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09a1c8bfae323ac9731f91c2904cc3b1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antlibs/script/org/apache/ant/antlib/script/ScriptBase.java", "commitBeforeChange": "b0702935362003552b8c456725f3b68b597ab443", "commitAfterChange": "f16a5cd623bf73ae80a737e38e025d9354e20ef2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void execute() throws ExecutionException", "signatureAfterChange": "     public void execute() throws ExecutionException", "diff": ["-", "+            manager.declareBean(\"self\", this, getClass());", "+            manager.declareBean(\"context\", getContext, AntContext.class);", "+            ", "+            ", "+            ", "+            Iterator i = nestedElementNames.iterator();", "+            Iterator j = nestedElements.iterator();", "+            while (i.hasNext()) {", "+                String nestedName = (String)i.next();", "+                Object nestedElement = j.next();", "+                StringBuffer adder = new StringBuffer(nestedName);", "+                adder.setCharAt(0, Character.toUpperCase(adder.charAt(0)));", "+                engine.call(null, \"add\" + adder, new Object[]{nestedElement});", "+            }", "+            "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "308388f212ac85c0101f48fdb7e92420", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/tasklet/engine/DefaultTskDeployer.java", "commitBeforeChange": "bba92ec2234c85ea1ff3ec3e4e2bb45adaaf3197", "commitAfterChange": "51e2cc543512d445e415bc5b7c2a42f98ddf8446", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void deployDataType( final String name, final String location, final URL url )         throws DeploymentException", "signatureAfterChange": "      public void deployDataType( final String name, final String location, final URL url )         throws DeploymentException", "diff": ["+        checkDeployment( location, url );", "+        final ZipFile zipFile = getZipFileFor( url );", "+        final Configuration datatypedefs = loadConfiguration( zipFile, TSKDEF_FILE );", "+        ", "+        try", "+        {", "+            final Iterator datatypes = datatypedefs.getChildren( \"datatype\" );", "+            while( datatypes.hasNext() )", "+            {", "+                final Configuration datatype = (Configuration)datatypes.next();", "+                if( datatype.getAttribute( \"name\" ).equals( name ) )", "+                {", "+                    handleDataType( datatype, url );", "+                    break;", "+                }", "+            }", "+        }", "+        catch( final ConfigurationException ce )", "+        {", "+            throw new DeploymentException( \"Malformed taskdefs.xml\", ce );", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cb24346bf27374792b315056314245c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/XMLJUnitResultFormatter.java", "commitBeforeChange": "4624d76d0403dd32a4d5102c47e890bb0c0be6fc", "commitAfterChange": "230952c5a86a38ebd7208a91012d91ff87491a54", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void startTestSuite(JUnitTest suite)", "signatureAfterChange": "     public void startTestSuite(JUnitTest suite)", "diff": ["+", "+        // Output properties", "+        Element propsElement = doc.createElement(PROPERTIES);", "+        rootElement.appendChild(propsElement);", "+        Properties props = suite.getProperties();", "+        if (props != null) {", "+            Enumeration e = props.propertyNames();", "+            while (e.hasMoreElements()) {", "+                String name = (String) e.nextElement();", "+                Element propElement = doc.createElement(PROPERTY);", "+                propElement.setAttribute(ATTR_NAME, name);", "+                propElement.setAttribute(ATTR_VALUE, props.getProperty(name));", "+                propsElement.appendChild(propElement);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f221a902de31e313627d4ea7ca0a6a4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "af5b94e9d969c42765bd41f15181a6653535a76a", "commitAfterChange": "35bcdc15f7d829f94651c334c9ebfb09c0e7cd37", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static synchronized Vector getProcEnvironment()", "signatureAfterChange": "     public static synchronized Vector getProcEnvironment()", "diff": ["+        if (JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_1_5)) {", "+            try {", "+                Map/*<String,String>*/ env = (Map) System.class.getMethod(\"getenv\", new Class[0]).invoke(null, new Object[0]);", "+                Iterator it = env.entrySet().iterator();", "+                while (it.hasNext()) {", "+                    Map.Entry entry = (Map.Entry) it.next();", "+                    procEnvironment.add(entry.getKey() + \"=\" + entry.getValue());", "+                }", "+                return procEnvironment;", "+            } catch (Exception x) {", "+                x.printStackTrace();", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69acce661bb6c1502f8387e7a6cb782a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/dotnet/WsdlToDotnet.java", "commitBeforeChange": "a8814a50b17bf53d80ecae3e5e58d56979d9366f", "commitAfterChange": "72252a914825c9fb084ea32f3b59f32442ee47ba", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void execute()              throws BuildException", "signatureAfterChange": "     public void execute()              throws BuildException", "diff": ["+        if(protocol!=null) {", "+            command.addArgument(\"/protocol:\"+protocol);", "+        }", "+        if(parseableErrors) {", "+            command.addArgument(\"/parseableErrors\");", "+        }", "+        long destLastModified = -1;", "-            if (srcFile.exists() && destFile.exists()", "-                && srcFile.lastModified() <= destFile.lastModified()) {", "+            if ( destFile.exists() ) {", "+                destLastModified = destFile.lastModified();", "+            }", "+            if (srcFile.exists()", "+                && srcFile.lastModified() <= destLastModified) {", "+        //add in any extra files.", "+        //this is an error in mono, but we do not warn on it as they may fix that outside", "+        //the ant build cycle.", "+        Iterator it=schemas.iterator();", "+        while ( it.hasNext() ) {", "+            Schema schema = (Schema) it.next();", "+            //get date, mark for a rebuild if we are newer", "+            long schemaTimestamp;", "+            schemaTimestamp=schema.getTimestamp();", "+            if(schemaTimestamp>destLastModified) {", "+                rebuild=true;", "+            }", "+            command.addArgument(schema.evaluate());", "+        }", "+        //conditionally compile"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b9537386598f148eca6a21ae0da868a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/AbstractFileSet.java", "commitBeforeChange": "3af30bdfcadad52de3f739223d6937d3f5b0a9bd", "commitAfterChange": "469dcdf7a4a239027eb73268dcb5a540d32b78d4", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "     public Object clone()", "signatureAfterChange": "     public Object clone()", "diff": ["-        try {", "-            AbstractFileSet fs = (AbstractFileSet) super.clone();", "-            fs.setProject(getProject());", "-            return fs;", "-        } catch (CloneNotSupportedException e) {", "-            throw new BuildException(e);", "+        if (isReference()) {", "+            return (getRef(getProject())).clone();", "+        } else {", "+            try {", "+                AbstractFileSet fs = (AbstractFileSet) super.clone();", "+                fs.defaultPatterns = (PatternSet) defaultPatterns.clone();", "+                fs.additionalPatterns = new Vector(additionalPatterns.size());", "+                Enumeration e = additionalPatterns.elements();", "+                while (e.hasMoreElements()) {", "+                    fs.additionalPatterns", "+                        .addElement(((PatternSet) e.nextElement()).clone());", "+                }", "+                fs.selectors = (Vector) fs.selectors.clone();", "+                return fs;", "+            } catch (CloneNotSupportedException e) {", "+                throw new BuildException(e);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "903a68992d42a6e26e710ec2b98e03fb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/modules/edit/ElementNavigator.java", "commitBeforeChange": "113069f80d96fff735116abb27b70951799106fc", "commitAfterChange": "9996345251656eb38c5326fa7e5f394bc5f43882", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "         private void handle(MouseEvent e)", "signatureAfterChange": "         private void handle(MouseEvent e)", "diff": ["-                ActionManager mgr = getContext().getActions();", "-                JPopupMenu menu = mgr.createPopup(", "-                    getContext().getResources().getStringArray(", "-                        ElementNavigator.class, \"popupActions\"));", "-                menu.show((JComponent)e.getSource(), e.getX(), e.getY());", "+                Object source = e.getSource();", "+                String[] menuStr = null;", "+                JTree tree = (JTree) source;", "+                ", "+                // Find the selected path.", "+                TreePath selPath = tree.getPathForLocation(", "+                    e.getX(), e.getY());", "+                if (selPath == null) {", "+                    return;", "+                }", "+", "+                // Update the selection. ", "+                tree.setSelectionPath(selPath);", "+", "+                // Find the selected object.", "+                Object selObj = selPath.getLastPathComponent();", "+", "+                String defaultID = null;", "+                ", "+                // Does the item provide its own menu?", "+                if (selObj instanceof ACSInfoProvider) {", "+                    ACSInfoProvider ip = (ACSInfoProvider) selObj;", "+                    menuStr = ip.getMenuString();", "+                    defaultID = ip.getDefaultActionID();", "+                } else {", "+                    // Get the menu from the prop file.", "+                    menuStr = getContext().getResources().getStringArray(", "+                        ElementNavigator.class, defaultID);", "+                }", "+", "+                // Should we create a menu?", "+                if (menuStr != null && menuStr.length != 0) {", "+                    ActionManager mgr = getContext().getActions();", "+                    JPopupMenu menu = mgr.createPopup(menuStr, defaultID);", "+                    menu.show((JComponent)e.getSource(), e.getX(), e.getY());", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "991d400317d1741b7875f1f2e0a2cfe3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Property.java", "commitBeforeChange": "9c8f401ba1b75b03f001db7415bc3cfbfd320cd9", "commitAfterChange": "5ddb0dfbd998fbfaca281f7537828e202bf02f44", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 31, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            addProperty(name, untypedValue);", "+            if (relative) {", "+                try {", "+                    File from = untypedValue instanceof File ? (File)untypedValue : new File(untypedValue.toString());", "+                    File to = basedir != null ? basedir : getProject().getBaseDir();", "+                    String relPath = FileUtils.getFileUtils().getRelativePath(to, from);", "+                    relPath = relPath.replace('/', File.separatorChar);", "+                    addProperty(name, relPath);", "+                } catch (Exception e) {", "+                    throw new BuildException(e, getLocation());", "+                }", "+            } else {", "+                addProperty(name, untypedValue);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a13ff41e24d551e9cba509a33dde6af8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ComponentHelper.java", "commitBeforeChange": "bf283617dbb972d27c295814d9bdce53886c621d", "commitAfterChange": "b2db0ad0877fcd69ad3ddb91b0e4eac55b377321", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "     private void printUnknownDefinition(         PrintWriter out, String componentName, String dirListing)", "signatureAfterChange": "     private void printUnknownDefinition(         PrintWriter out, String componentName, String dirListing)", "diff": ["+        String uri=ProjectHelper.extractUriFromComponentName(componentName);", "-        if (isAntlib) {", "-            out.println();", "-            out.println(\"This appears to be an antlib declaration. \");", "-            out.println(\"Action: Check that the implementing library exists in one of:\");", "-            out.println(dirListing);", "+        if(uri.length()>0) {", "+            List matches = antTypeTable.findMatches(uri);", "+            if(matches.size()>0) {", "+                out.println();", "+                out.println(\"The definitions in the namespace \"+uri+\" are:\");", "+                for(Iterator it=matches.iterator();it.hasNext();) {", "+                    AntTypeDefinition def=(AntTypeDefinition) it.next();", "+                    String local = ProjectHelper.extractNameFromComponentName(def.getName());", "+                    out.println(\"    \"+local);", "+                }", "+            } else {", "+                out.println(\"No types or tasks have been defined in this namespace yet\");", "+                if (isAntlib) {", "+                    out.println();", "+                    out.println(\"This appears to be an antlib declaration. \");", "+                    out.println(\"Action: Check that the implementing library exists in one of:\");", "+                    out.println(dirListing);", "+                }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b85d3e340d53d3d4f53241404e6fad80", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "030ac58e280b9267ca8ea709bd846443059a0205", "commitAfterChange": "e074b294911e39877ee9a480e44979f16b9a4882", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     protected void createParents(FTPClient ftp, String filename)          throws IOException, BuildException", "signatureAfterChange": "     protected void createParents(FTPClient ftp, String filename)          throws IOException, BuildException", "diff": ["+", "+        String cwd = ftp.printWorkingDirectory();", "+        ", "-        for (int i = parents.size() - 1; i >= 0; i--) {", "+        // find first non cached dir", "+        int i = parents.size() - 1;", "+        while (i >= 0) {", "-                log(\"creating remote directory \" + resolveFile(dir.getPath()),", "-                    Project.MSG_VERBOSE);", "-                if(!ftp.makeDirectory(resolveFile(dir.getPath()))) {", "-                    handleMkDirFailure(ftp);", "+                break;", "+            }", "+            i--;", "+        }", "+                ", "+        if (i >= 0) {", "+            String parent = dir.getParent();", "+            if (parent != null) {", "+                if (!ftp.changeWorkingDirectory(parent)) {", "+                    throw new BuildException(\"could not change to \" ", "+                        + \"directory: \" + ftp.getReplyString());", "+                }", "+            }", "+            ", "+            while (i >= 0) {", "+                dir = (File) parents.elementAt(i--);", "+                // check if dir exists by trying to change into it.", "+                if (!ftp.changeWorkingDirectory(dir.getName())) {", "+                    // could not change to it - try to create it", "+                    log(\"creating remote directory \" ", "+                        + resolveFile(dir.getPath()), Project.MSG_VERBOSE);", "+                    if(!ftp.makeDirectory(dir.getName())) {", "+                        handleMkDirFailure(ftp);", "+                    }", "+                    if (!ftp.changeWorkingDirectory(dir.getName())) {", "+                        throw new BuildException(\"could not change to \" ", "+                            + \"directory: \" + ftp.getReplyString());", "+                    }", "+            ftp.changeWorkingDirectory(cwd);            "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d882ff00428ef62273acc6e0b94401c0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/modules/edit/ElementNavigator.java", "commitBeforeChange": "113069f80d96fff735116abb27b70951799106fc", "commitAfterChange": "9996345251656eb38c5326fa7e5f394bc5f43882", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "         public boolean eventPosted(EventObject event)", "signatureAfterChange": "         public boolean eventPosted(EventObject event)", "diff": ["+            else if(event instanceof RefreshDisplayEvent && model != null) {", "+                _tree.updateUI();", "+            }", "+            }", "+            else if(event instanceof DeleteElementEvent && model != null) {", "+                _tree.updateUI();", "-                    _tree.setModel(new ElementTreeModel(project));", "-                    _selections = new ElementTreeSelectionModel();", "-                    _selections.addTreeSelectionListener(", "-                        new SelectionForwarder());", "-                    _tree.setSelectionModel(_selections);", "+                    boolean updateModel = false;", "+                    TreeModel testModel = _tree.getModel();", "+                    ", "+                    // Set the model if's not an ElementTreeModel", "+                    if (testModel instanceof ElementTreeModel) {", "+                        ElementTreeModel etm = (ElementTreeModel) testModel;", "+                        ACSProjectElement currentProject = ", "+                            (ACSProjectElement) etm.getRoot();", "+                        ", "+                        // Set the model if the project is wrong", "+                        if (currentProject != project) {", "+                            updateModel = true;", "+                        }", "+                    } else {", "+                        updateModel = true;", "+                    }", "+", "+                    // Should we update the tree model", "+                    if (updateModel) {", "+                        _tree.setModel(new ElementTreeModel(project));", "+                        _selections = new ElementTreeSelectionModel();", "+                        _selections.addTreeSelectionListener(", "+                            new SelectionForwarder());", "+                        _tree.setSelectionModel(_selections);", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d93518e0eb27d8ff106bed45382cf89f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultObjectConfigurer.java", "commitBeforeChange": "2efc45999181f493c8438ae9a50b9d61ae085f8f", "commitAfterChange": "ff8b6709bcf07f12efecc3625f5e1665e7ddf34d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private Map findAdders()         throws ConfigurationException", "signatureAfterChange": "     private Map findAdders()         throws ConfigurationException", "diff": ["-            if( method.getReturnType() != Void.TYPE", "-                || method.getParameterTypes().length != 1 )", "+            if( Void.TYPE != method.getReturnType() ||", "+                1 != method.getParameterTypes().length )", "+            }", "+", "+            final boolean isTypedAdder = methodName.equals( \"add\" );", "+", "+            final Class paramType = method.getParameterTypes()[ 0 ];", "+            if( isTypedAdder && !paramType.isInterface() )", "+            {", "+                final String message =", "+                    REZ.getString( \"typed-adder-non-interface.error\",", "+                                   m_class.getName(),", "+                                   paramType.getName() );", "+                throw new ConfigurationException( message );", "-            final Class type = method.getParameterTypes()[ 0 ];", "+            final Class type = paramType;", "-                final Class currentType = ( (Method)adders.get( propName ) ).getParameterTypes()[ 0 ];", "+                final Method candidate = (Method)adders.get( propName );", "+                final Class currentType = candidate.getParameterTypes()[ 0 ];", "-                if( currentType != String.class || type == String.class )", "+                else if( currentType != String.class || type == String.class )", "+                    throw new ConfigurationException( message );", "+                }", "+                else if( isTypedAdder )", "+                {", "+                    // Both are string, or both are not string", "+                    final String message =", "+                        REZ.getString( \"multiple-typed-adder-methods-for-element.error\",", "+                                       m_class.getName(),", "+                                       type.getName(),", "+                                       currentType.getName() );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df65e166f1cb4d2eb3e57ac79db317ee", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Diagnostics.java", "commitBeforeChange": "948e2c6f0d0673bd81e77bdca01fb0bef73d3863", "commitAfterChange": "6cc29239b3603a513225c5709d0fb6b73ebe2271", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "     private static void doReportTempDir(PrintStream out)", "signatureAfterChange": "     private static void doReportTempDir(PrintStream out)", "diff": ["+        FileInputStream filein = null;", "+", "+            // read to make sure the file has been written completely", "+            Thread.sleep(1000);", "+            filein = new FileInputStream(tempFile);", "+            int total = 0;", "+            int read = 0;", "+            while ((read = filein.read(buffer, 0, KILOBYTE)) > 0) {", "+                total += read;", "+            }", "+            filein.close();", "+            filein = null;", "+", "-            tempFile.delete();", "-            out.println(\"Temp dir is writeable\");", "+            tempFile.delete();", "+", "+            out.print(\"Temp dir is writeable\");", "+            if (total != TEST_FILE_SIZE * KILOBYTE) {", "+                out.println(\", but seems to be full.  Wrote \"", "+                            + (TEST_FILE_SIZE * KILOBYTE)", "+                            + \"but could only read \" + total + \" bytes.\");", "+            } else {", "+                out.println();", "+            }", "+", "+        } catch (InterruptedException e) {", "+            ignoreThrowable(e);", "+            out.println(\"Failed to check whether tempdir is writable\");", "+            FileUtils.close(filein);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0748339528f3b83e6f3998200995747", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "c6c2722ad0807de6ce4f826bd92e51f2600ec07f", "commitAfterChange": "387d93e6ece00a294af599f30f0aac7b0bb56eee", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "     protected void makeRemoteDir(FTPClient ftp, String dir)          throws IOException, BuildException", "signatureAfterChange": "     protected void makeRemoteDir(FTPClient ftp, String dir)          throws IOException, BuildException", "diff": ["+        String workingDirectory = ftp.printWorkingDirectory();", "-            log(\"creating directory: \" + dir);", "+            log(\"Creating directory: \" + dir);", "-", "-        if (!ftp.makeDirectory(dir)) {", "-            // codes 521, 550 and 553 can be produced by FTP Servers", "-            //  to indicate that an attempt to create a directory has", "-            //  failed because the directory already exists.", "-            handleMkDirFailure(ftp);", "-            if (verbose) {", "-                log(\"directory already exists\");", "+        if (dir.indexOf(\"/\") == 0) {", "+            ftp.changeWorkingDirectory(\"/\");", "+        }", "+        String subdir = new String();", "+        StringTokenizer st = new StringTokenizer(dir, \"/\");", "+        while (st.hasMoreTokens()) {", "+            subdir = st.nextToken();", "+            log(\"Checking \" + subdir, Project.MSG_DEBUG);", "+            if (!ftp.changeWorkingDirectory(subdir)) {", "+                if(!ftp.makeDirectory(subdir)) {", "+                    // codes 521, 550 and 553 can be produced by FTP Servers", "+                    //  to indicate that an attempt to create a directory has", "+                    //  failed because the directory already exists.", "+                    int rc = ftp.getReplyCode();", "+                    if (!(ignoreNoncriticalErrors && (rc == 550 || rc == 553 || rc==521))) {", "+                        throw new BuildException(\"could not create directory: \" + ftp.getReplyString());", "+                    }", "+                    if (verbose) {", "+                        log(\"Directory already exists\");", "+                    }", "+                } else {", "+                    if (verbose) {", "+                        log(\"Directory created OK\");", "+                    }", "+                    ftp.changeWorkingDirectory(subdir);", "+                }", "-        } else {", "-            if (verbose) {", "-                log(\"directory created OK\");", "-            }", "+        }", "+        if (workingDirectory != null) {", "+            ftp.changeWorkingDirectory(workingDirectory);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1788fbdedc14a5119ff0011fe89846e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Exec.java", "commitBeforeChange": "b0bde5550598d2f86534bc0e599c0326caba90bd", "commitAfterChange": "d904d0c097e16f9f0e9ebc9f90a3a9391fb57f7b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      protected void run(String command) throws BuildException", "signatureAfterChange": "      protected void run(String command) throws BuildException", "diff": ["+", "+    protected void run(String command) throws BuildException {", "+", "-", "-    protected void run(String command) throws BuildException {"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "57ade04b5be0847d8a89c9e5686b80a2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95e1096b9fba02451af9cc57fede3f4e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "6fd0ddc8b843c2f0348fc51f680d465b89046fe7", "commitAfterChange": "d0fe01180db02cdd89d8e1baac7fac3f54041348", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     private IntrospectionHelper(final Class bean)", "signatureAfterChange": "     private IntrospectionHelper(final Class bean)", "diff": ["-            if (org.apache.tools.ant.TaskContainer.class.isAssignableFrom(bean)", "-                && args.length == 1 && \"addTask\".equals(name)", "+            if (isContainer() && args.length == 1 && \"addTask\".equals(name)", "-                    nestedCreators.put(propName, new NestedCreator() {", "-                        public boolean isPolyMorphic() {", "-                            return false;", "-                        }", "-", "-                        public Object getRealObject() {", "-                            return null;", "-                        }", "-", "-                        public Class getElementClass() {", "-                            return null;", "-                        }", "-", "-                        public Object create(", "+                    nestedCreators.put(propName, new NestedCreator(m) {", "+                        Object create(", "-                        }", "-", "-                        public void store(Object parent, Object child) {", "-                    nestedCreators.put(propName, new NestedCreator() {", "-", "-                            public boolean isPolyMorphic() {", "+                    nestedCreators.put(propName, new NestedCreator(m) {", "+                            boolean isPolyMorphic() {", "-                            public Object getRealObject() {", "-                                return null;", "-                            }", "-", "-                            public Class getElementClass() {", "+                            Class getElementClass() {", "-                            public Object create(", "+                            Object create(", "-                            public void store(Object parent, Object child)", "+                            void store(Object parent, Object child)", "-                    nestedCreators.put(propName, new NestedCreator() {", "-", "-                            public boolean isPolyMorphic() {", "+                    nestedCreators.put(propName, new NestedCreator(m) {", "+                            boolean isPolyMorphic() {", "-                            public Object getRealObject() {", "-                                return null;", "-                            }", "-", "-                            public Class getElementClass() {", "+                            Class getElementClass() {", "-                            public Object create(", "+                            Object create(", "-                            public void store(Object parent, Object child)", "-                                throws InvocationTargetException,", "-                                       IllegalAccessException, InstantiationException {", "-", "-                            }", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a16fd10ab11f8eb618d5e1e868b2e22c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "0d8d34b93fc093976a0490142584b6cfe8e40d75", "commitAfterChange": "8a7fce7e2e6db1d736542cfb5a117223fc3b8f14", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      private IntrospectionHelper(final Class bean)", "signatureAfterChange": "      private IntrospectionHelper(final Class bean)", "diff": ["-        ", "+", "-            if (org.apache.tools.ant.Task.class.isAssignableFrom(bean) ", "+            if (org.apache.tools.ant.Task.class.isAssignableFrom(bean)", "-            ", "+", "-            if (org.apache.tools.ant.TaskContainer.class.isAssignableFrom(bean) ", "-                && args.length == 1 && \"addTask\".equals(name) ", "+            if (org.apache.tools.ant.TaskContainer.class.isAssignableFrom(bean)", "+                && args.length == 1 && \"addTask\".equals(name)", "-            ", "+", "+                if (attributeSetters.get(propName) != null) {", "+                    if (java.lang.String.class.equals(args[0])) {", "+                        /*", "+                            Ignore method m, as there is an overloaded", "+                            form of this method that takes in a", "+                            non-string argument, which gains higher", "+                            priority.", "+                        */", "+                        continue;", "+                    }", "+                    /*", "+                        If the argument is not a String, and if there", "+                        is an overloaded form of this method already defined,", "+                        we just override that with the new one.", "+                        This mechanism does not guarantee any specific order", "+                        in which the methods will be selected: so any code", "+                        that depends on the order in which \"set\" methods have", "+                        been defined, is not guaranteed to be selected in any", "+                        particular order.", "+                    */", "+                }", "-                        public Object create(Object parent) ", "-                            throws InvocationTargetException, ", "+                        public Object create(Object parent)", "+                            throws InvocationTargetException,", "-                ", "+", "-                 ", "+", "-                    final Constructor c = ", "+                    final Constructor c =", "-                            public Object create(Object parent) ", "+                            public Object create(Object parent)", "-                                ", "+", "-                            public void store(Object parent, Object child) ", "+                            public void store(Object parent, Object child)", "-                                ", "+", "-                 ", "+", "-                    final Constructor c = ", "+                    final Constructor c =", "-                            public Object create(Object parent) ", "+                            public Object create(Object parent)", "-                                ", "+"]}]}
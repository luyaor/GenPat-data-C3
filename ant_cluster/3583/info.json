{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1fca1c22d11fc6f1533d36803d301607", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7348054d3f27199e034b8ffc05ebe3f2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ExecutionFrame.java", "commitBeforeChange": "e0fef5cf64773a98734998b9736ded96fc8be2c7", "commitAfterChange": "81c17b6164451315e24ae774f1bed668cbca99ce", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 31, "signatureBeforeChange": "     private void createNestedElement(Reflector reflector, Object element,                                      BuildElement model)          throws ExecutionException", "signatureAfterChange": "     private void createNestedElement(Reflector reflector, Object element,                                      BuildElement model)          throws ExecutionException", "diff": ["-        if (nestedElement instanceof ExecutionComponent) {", "-            ExecutionComponent component = (ExecutionComponent)nestedElement;", "-            ExecutionContext context", "-                 = new ExecutionContext(this, eventSupport);", "-            context.setModelElement(model);", "-            component.init(context);", "-        }", "-", "-            configureElement(nestedElement, model);", "+            if (nestedElement instanceof ExecutionComponent) {", "+                ExecutionComponent component", "+                     = (ExecutionComponent)nestedElement;", "+                ExecutionContext context", "+                     = new ExecutionContext(this);", "+                context.setModelElement(model);", "+                component.init(context);", "+                configureElement(nestedElement, model);", "+                component.validateComponent();", "+            } else {", "+                configureElement(nestedElement, model);", "+            }", "-            e.setLocation(model.getLocation());", "+            e.setLocation(model.getLocation(), false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "992d35eac29d07da8ee68c10ab11f6fd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ExecutionFrame.java", "commitBeforeChange": "1523b24a93d8e4b849afd938ab7eaffcb6031969", "commitAfterChange": "ce1af4647df3f1fab5344250d1751b334e774d77", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 36, "signatureBeforeChange": "     private Object createTypeInstance(Class typeClass, AntLibFactory libFactory,                                       BuildElement model)          throws ExecutionException", "signatureAfterChange": "     private Object createTypeInstance(Class typeClass, AntLibFactory libFactory,                                       BuildElement model)          throws ExecutionException", "diff": ["-            Object typeInstance = null;", "-            if (libFactory == null) {", "-                typeInstance = typeClass.newInstance();", "-            } else {", "-                typeInstance = libFactory.createTypeInstance(typeClass);", "-            }", "+            Object typeInstance = libFactory.createTypeInstance(typeClass);", "-                configureElement(typeInstance, model);", "+                configureElement(libFactory, typeInstance, model);", "-                configureElement(typeInstance, model);", "+                configureElement(libFactory, typeInstance, model);", "+        } catch (RuntimeException e) {", "+            throw new ExecutionException(e.getClass().getName() + \": \"", "+                 + e.getMessage(), e, model.getLocation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4a7d73f1287e3f908ff6c2d06218543", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ExecutionFrame.java", "commitBeforeChange": "1523b24a93d8e4b849afd938ab7eaffcb6031969", "commitAfterChange": "ce1af4647df3f1fab5344250d1751b334e774d77", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 32, "signatureBeforeChange": "     private void createNestedElement(Reflector reflector, Object element,                                      BuildElement model)          throws ExecutionException", "signatureAfterChange": "     private void createNestedElement(AntLibFactory factory, Reflector reflector,                                      Object element, BuildElement model)          throws ExecutionException", "diff": ["-    private void createNestedElement(Reflector reflector, Object element,", "-                                     BuildElement model)", "+    private void createNestedElement(AntLibFactory factory, Reflector reflector,", "+                                     Object element, BuildElement model)", "-        Object nestedElement", "-             = reflector.createElement(element, nestedElementName);", "+            Object nestedElement", "+                 = reflector.createElement(element, nestedElementName);", "+            factory.registerCreatedElement(nestedElement);", "+                System.out.println(\"element is an execution component\");", "-                configureElement(nestedElement, model);", "+                configureElement(factory, nestedElement, model);", "-                configureElement(nestedElement, model);", "+                configureElement(factory, nestedElement, model);", "+        } catch (RuntimeException e) {", "+            throw new ExecutionException(e.getClass().getName() + \": \"", "+                 + e.getMessage(), e, model.getLocation());"]}]}
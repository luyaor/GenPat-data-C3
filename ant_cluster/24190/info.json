{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "388c0214a11d3bdaf28e9c47cda1a3bc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a749cf172a220937c545ec12bcc55f94", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Ant.java", "commitBeforeChange": "4783bc46159826bc33858cfc9145c4be93dfe755", "commitAfterChange": "2a291dca9249d6a4958d9898282fa67343bf59b7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                    } else {", "-                        throw new BuildException(getTaskName() + \" task at the\"", "-                                                 + \" top level must not invoke\"", "-                                                 + \" its own build file.\");", "+                    throw new BuildException(getTaskName() + \" task at the\"", "+                                + \" top level must not invoke\"", "+                                + \" its own build file.\");", "-                } else {", "-                    boolean circular = false;", "-                    for (Iterator it = locals.iterator(); !circular && it.hasNext();) {", "-                        Target other = (Target) (getProject().getTargets().get(", "-                            (String) (it.next())));", "-                        circular |= (other != null", "-                            && other.dependsOn(owningTargetName));", "-                    }", "-                    if (circular) {", "-                        throw new BuildException(getTaskName()", "-                                                 + \" task calling a target\"", "-                                                 + \" that depends on\"", "-                                                 + \" its parent target \\'\"", "-                                                 + owningTargetName", "-                                                 + \"\\'.\");", "-                    }", "+                }", "+                boolean circular = false;", "+                for (Iterator it = locals.iterator(); ", "+                     !circular && it.hasNext();) {", "+                    Target other = ", "+                        (Target) (getProject().getTargets().get(it.next()));", "+                    circular |= (other != null", "+                                 && other.dependsOn(owningTargetName));", "+                }", "+                if (circular) {", "+                    throw new BuildException(getTaskName()", "+                                             + \" task calling a target\"", "+                                             + \" that depends on\"", "+                                             + \" its parent target \\'\"", "+                                             + owningTargetName", "+                                             + \"\\'.\");", "-            if (locals.size() > 0 && !(locals.size() == 1 && locals.get(0) == \"\")) {", "+            if (locals.size() > 0 && !(locals.size() == 1 ", "+                                       && locals.get(0) == \"\")) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da856da9b417b8920fde65a474c79507", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/main/org/apache/ant/core/execution/ExecutionFrame.java", "commitBeforeChange": "a48208f6cf8cf80ef1e144305ff8dfe0958599d5", "commitAfterChange": "c2e518039b65dc5b8c9c31f9f78b2d72ea8db2d1", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 24, "signatureBeforeChange": "     public void executeTasks(Iterator taskIterator) throws ExecutionException, ConfigException", "signatureAfterChange": "     public void executeTasks(Iterator taskIterator) throws ExecutionException, ConfigException", "diff": ["-     */", "-    public void executeTasks(Iterator taskIterator) throws ExecutionException, ConfigException {", "-        Task task = null;", "-        try {", "-            while (taskIterator.hasNext()) {", "-                task = (Task)taskIterator.next();", "-                try {", "-                    ExecutionTask executionTask = getConfiguredExecutionTask(task);", "-                    eventSupport.fireTaskStarted(this, task);", "-                    executionTask.execute();", "-                }", "-                catch (ExecutionException e) {", "-                    if (e.getLocation() == null || e.getLocation() == Location.UNKNOWN_LOCATION) {", "-                        e.setLocation(task.getLocation());", "-                    }", "-                    throw e;", "-                }", "-                catch (ConfigException e) {", "-                    if (e.getLocation() == null || e.getLocation() == Location.UNKNOWN_LOCATION) {", "-                        e.setLocation(task.getLocation());", "-                    }", "-                    throw e;", "-                }", "-                eventSupport.fireTaskFinished(this, task, null);", "-            }", "-        }", "-        catch (RuntimeException e) {", "-            eventSupport.fireTaskFinished(this, task, e);", "-            throw e;", "-        }", "-    }        ", "+     */", "+    public void executeTasks(Iterator taskIterator) throws ExecutionException, ConfigException {", "+        TaskElement task = null;", "+        try {", "+            while (taskIterator.hasNext()) {", "+                task = (TaskElement)taskIterator.next();", "+                try {", "+                    Task configuredTask = configureTask(task);", "+                    eventSupport.fireTaskStarted(this, task);", "+                    configuredTask.execute();", "+                }", "+                catch (ExecutionException e) {", "+                    if (e.getLocation() == null || e.getLocation() == Location.UNKNOWN_LOCATION) {", "+                        e.setLocation(task.getLocation());", "+                    }", "+                    throw e;", "+                }", "+                catch (ConfigException e) {", "+                    if (e.getLocation() == null || e.getLocation() == Location.UNKNOWN_LOCATION) {", "+                        e.setLocation(task.getLocation());", "+                    }", "+                    throw e;", "+                }", "+                eventSupport.fireTaskFinished(this, task, null);", "+            }", "+        }", "+        catch (RuntimeException e) {", "+            eventSupport.fireTaskFinished(this, task, e);", "+            throw e;", "+        }", "+    }        "]}]}
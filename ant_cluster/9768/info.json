{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "605f75136fc7fd01740058c48f8720f3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37690913e223b5fdb1b52d70123100a8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Project.java", "commitBeforeChange": "ea41c72f7adfce4ad48caded93962140650f2746", "commitAfterChange": "a65cadb437afdc85fcc77d9c58293c66e456ff46", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public synchronized void addBuildListener(BuildListener listener)", "signatureAfterChange": "     public void addBuildListener(BuildListener listener)", "diff": ["-    public synchronized void addBuildListener(BuildListener listener) {", "-        // If the listeners already has this listener, do nothing", "-        if (listeners.contains(listener)) {", "-            return;", "+    public void addBuildListener(BuildListener listener) {", "+        synchronized (listenersLock) {", "+            // If the listeners already has this listener, do nothing", "+            if (listeners.contains(listener)) {", "+                return;", "+            }", "+            // copy on write semantics", "+            Vector newListeners = getBuildListeners();", "+            newListeners.addElement(listener);", "+            listeners = newListeners;", "-        // create a new Vector to avoid ConcurrentModificationExc when", "-        // the listeners get added/removed while we are in fire", "-        Vector newListeners = getBuildListeners();", "-        newListeners.addElement(listener);", "-        listeners = newListeners;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9837beb97ec2b10039f5e2ed76a358b6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Project.java", "commitBeforeChange": "ea41c72f7adfce4ad48caded93962140650f2746", "commitAfterChange": "a65cadb437afdc85fcc77d9c58293c66e456ff46", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     public synchronized void removeBuildListener(BuildListener listener)", "signatureAfterChange": "     public void removeBuildListener(BuildListener listener)", "diff": ["-    public synchronized void removeBuildListener(BuildListener listener) {", "-        // create a new Vector to avoid ConcurrentModificationExc when", "-        // the listeners get added/removed while we are in fire", "-        Vector newListeners = getBuildListeners();", "-        newListeners.removeElement(listener);", "-        listeners = newListeners;", "+    public void removeBuildListener(BuildListener listener) {", "+        synchronized (listenersLock) {", "+            // copy on write semantics", "+            Vector newListeners = getBuildListeners();", "+            newListeners.removeElement(listener);", "+            listeners = newListeners;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "990e48d87832e3a1c3660123957abfad", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/PropertyHelper.java", "commitBeforeChange": "b361fabe04c2d8e6dec41af36a728575d1399e90", "commitAfterChange": "bf283617dbb972d27c295814d9bdce53886c621d", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public void copyUserProperties(Project other)", "signatureAfterChange": "     public void copyUserProperties(Project other)", "diff": ["-        Enumeration e = userProperties.keys();", "-        while (e.hasMoreElements()) {", "-            Object arg = e.nextElement();", "-            if (inheritedProperties.containsKey(arg)) {", "-                continue;", "+        //avoid concurrent modification:", "+        synchronized (userProperties) {", "+            Enumeration e = userProperties.keys();", "+            while (e.hasMoreElements()) {", "+                Object arg = e.nextElement();", "+                if (inheritedProperties.containsKey(arg)) {", "+                    continue;", "+                }", "+                Object value = userProperties.get(arg);", "+                other.setUserProperty(arg.toString(), value.toString());", "-            Object value = userProperties.get(arg);", "-            other.setUserProperty(arg.toString(), value.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7875038e21d929a5c86ffbfc37193c0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/PropertyHelper.java", "commitBeforeChange": "b361fabe04c2d8e6dec41af36a728575d1399e90", "commitAfterChange": "bf283617dbb972d27c295814d9bdce53886c621d", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public Hashtable getUserProperties()", "signatureAfterChange": "     public Hashtable getUserProperties()", "diff": ["-        return new Hashtable(userProperties);", "+        //avoid concurrent modification:", "+        synchronized (userProperties) {", "+            return new Hashtable(userProperties);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f28aa4b9b05ed2962fce8fcb38dfdf31", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Project.java", "commitBeforeChange": "e03db74846d20974a3aae9cd7054948e5cd502cf", "commitAfterChange": "ea41c72f7adfce4ad48caded93962140650f2746", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 116, "signatureBeforeChange": "     public Task getThreadTask(Thread thread)", "signatureAfterChange": "     public Task getThreadTask(Thread thread)", "diff": ["-        Task task = (Task) threadTasks.get(thread);", "-        if (task == null) {", "-            ThreadGroup group = thread.getThreadGroup();", "-            while (task == null && group != null) {", "-                task = (Task) threadGroupTasks.get(group);", "-                group = group.getParent();", "+        synchronized(threadTasks) {", "+            Task task = (Task) threadTasks.get(thread);", "+            if (task == null) {", "+                ThreadGroup group = thread.getThreadGroup();", "+                while (task == null && group != null) {", "+                    task = (Task) threadGroupTasks.get(group);", "+                    group = group.getParent();", "+                }", "+            return task;", "-        return task;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4eb02bfa61e36d11a29c8cda8322658", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Project.java", "commitBeforeChange": "e03db74846d20974a3aae9cd7054948e5cd502cf", "commitAfterChange": "ea41c72f7adfce4ad48caded93962140650f2746", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": "     public synchronized void registerThreadTask(Thread thread, Task task)", "signatureAfterChange": "     public void registerThreadTask(Thread thread, Task task)", "diff": ["-    public synchronized void registerThreadTask(Thread thread, Task task) {", "-        if (task != null) {", "-            threadTasks.put(thread, task);", "-            threadGroupTasks.put(thread.getThreadGroup(), task);", "-        } else {", "-            threadTasks.remove(thread);", "-            threadGroupTasks.remove(thread.getThreadGroup());", "+    public void registerThreadTask(Thread thread, Task task) {", "+        synchronized(threadTasks) {", "+            if (task != null) {", "+                threadTasks.put(thread, task);", "+                threadGroupTasks.put(thread.getThreadGroup(), task);", "+            } else {", "+                threadTasks.remove(thread);", "+                threadGroupTasks.remove(thread.getThreadGroup());", "+            }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "967641265e75195ce74a89e904f6c5a7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2772dabde9245045f7241962d1fe61be", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/deployer/DefaultDeployer.java", "commitBeforeChange": "e7ab62bc9179b392804835d02155e43d3d2cf5d6", "commitAfterChange": "2e6e170fb375181f4438e1de44808c7adab508a2", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private File[] getOptionalPackagesFor( final File typeLibrary )         throws Exception", "signatureAfterChange": "     private void handleType( final Deployment deployment,                              final String roleShorthand,                              final String typeName,                              final String className )         throws Exception", "diff": ["-    private File[] getOptionalPackagesFor( final File typeLibrary )", "-        final URL url = new URL( \"jar:\" + typeLibrary.getCanonicalFile().toURL() + \"!/\" );", "-        final JarURLConnection connection = (JarURLConnection)url.openConnection();", "-        final Manifest manifest = connection.getManifest();", "-        final Extension[] available = Extension.getAvailable( manifest );", "-        final Extension[] required = Extension.getRequired( manifest );", "-            final String message1 =", "-                REZ.getString( \"available-extensions.notice\", Arrays.asList( available ) );", "-            getLogger().debug( message1 );", "-            final String message2 =", "-                REZ.getString( \"required-extensions.notice\", Arrays.asList( required ) );", "-            getLogger().debug( message2 );", "-        }", "-", "-        final ArrayList dependencies = new ArrayList();", "-        final ArrayList unsatisfied = new ArrayList();", "-", "-        m_packageManager.scanDependencies( required,", "-                                           available,", "-                                           dependencies,", "-                                           unsatisfied );", "-", "-        if( 0 != unsatisfied.size() )", "-        {", "-            final int size = unsatisfied.size();", "-            for( int i = 0; i < size; i++ )", "-            {", "-                final Extension extension = (Extension)unsatisfied.get( i );", "-                final Object[] params = new Object[]", "-                {", "-                    extension.getExtensionName(),", "-                    extension.getSpecificationVendor(),", "-                    extension.getSpecificationVersion(),", "-                    extension.getImplementationVendor(),", "-                    extension.getImplementationVendorId(),", "-                    extension.getImplementationVersion(),", "-                    extension.getImplementationURL()", "-                };", "-                final String message = REZ.format( \"missing.extension\", params );", "-                getLogger().warn( message );", "-            }", "-", "-                REZ.getString( \"unsatisfied.extensions.error\", new Integer( size ) );", "-            throw new Exception( message );", "-", "-        final OptionalPackage[] packages =", "-            (OptionalPackage[])dependencies.toArray( new OptionalPackage[ 0 ] );", "-        return OptionalPackage.toFiles( packages );", "+     */", "+    private void handleType( final Deployment deployment,", "+                             final String roleShorthand,", "+                             final String typeName,", "+                             final String className )", "+        throws Exception", "+    {", "+        // TODO - detect duplicates", "+        final String role = getRoleForName( roleShorthand );", "+        final Class roleType = deployment.getClassLoader().loadClass( role );", "+        final DefaultTypeFactory factory = deployment.getFactory( roleType );", "+        factory.addNameClassMapping( typeName, className );", "+        m_typeManager.registerType( roleType, typeName, factory );", "+", "+        if( getLogger().isDebugEnabled() )", "+        {", "+            final String message =", "+                REZ.getString( \"register-type.notice\", roleShorthand, typeName );", "+            getLogger().debug( message );", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a468c6da0c33f57b7f6208759ffb23d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/frontends/CLIMain.java", "commitBeforeChange": "25c4d95cd51429feee002187eba3dc0acfbb4d3e", "commitAfterChange": "de190c4094ef4f0bb42d710d95b74bcef765aadc", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private void execute( final String[] args )         throws Exception", "signatureAfterChange": "      private void execute( final String[] args )         throws Exception", "diff": ["-        //handle logging...", "-        final String logLevel = m_parameters.getParameter( \"log.level\", null );", "-        enableLogging( new LogKitLogger( createLogger( logLevel ) ) );", "+        prepareLogging();", "-        final String home = m_parameters.getParameter( \"myrmidon.home\", null );", "-        final File homeDir = ( new File( home ) ).getAbsoluteFile();", "-        if( !homeDir.isDirectory() )", "-        {", "-            final String message = REZ.getString( \"home-not-dir.error\", homeDir );", "-            throw new Exception( message );", "-        }", "+        final File homeDir = getHomeDir();", "+        final File buildFile = getBuildFile();", "-        final String filename = m_parameters.getParameter( \"filename\", null );", "-        final File buildFile = ( new File( filename ) ).getCanonicalFile();", "-        if( !buildFile.isFile() )", "-        {", "-            final String message = REZ.getString( \"bad-file.error\", buildFile );", "-            throw new Exception( message );", "-        }", "-", "-        if( getLogger().isInfoEnabled() )", "-        {", "-            final String message = REZ.getString( \"buildfile.notice\", buildFile );", "-            getLogger().info( message );", "-        }", "-", "-        if( getLogger().isInfoEnabled() )", "-        {", "-            final String message = REZ.getString( \"homedir.notice\", homeDir );", "-            getLogger().info( message );", "-        }", "-        final Embeddor embeddor = createEmbeddor();", "-        setupLogger( embeddor );", "-        embeddor.parameterize( m_parameters );", "-        embeddor.initialize();", "-        embeddor.start();", "-", "-        //create the listener", "-        final String listenerName = m_parameters.getParameter( \"listener\", null );", "-        final ProjectListener listener = embeddor.createListener( listenerName );", "+        final Embeddor embeddor = prepareEmbeddor();", "+        final ProjectListener listener = prepareListener( embeddor );", "-        BufferedReader reader = null;", "-", "+        if( !incremental )", "+        {", "+            executeBuild( embeddor, project, listener );", "+        }", "+        else", "+        {", "+            executeIncrementalBuild( embeddor, project, listener );", "+        }", "+", "+        shutdownEmbeddor( embeddor );", "+    }", "-            //actually do the build ...", "-            final Workspace workspace = embeddor.createWorkspace( m_defines );", "-            workspace.addProjectListener( listener );", "-", "-            doBuild( workspace, project, m_targets );", "-", "-            if( !incremental )", "-            {", "-                break;", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8542db75dcc04c8dff79d47c1ec8902", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/cvslib/CvsTagDiff.java", "commitBeforeChange": "98c94f2ed3cb2c8a28812d56f60afdeb69574c72", "commitAfterChange": "cde826c2b0d226773ff00407365ac581b3e7c9e0", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private CvsTagEntry[] parseRDiff(File tmpFile) throws BuildException", "signatureAfterChange": "     private CvsTagEntry[] parseRDiff(File tmpFile) throws BuildException", "diff": ["-            int index;", "-            CvsTagEntry entry = null;", "-                    index = line.indexOf(FILE_IS_NEW);", "-                    if (index  != -1) {", "-                        // it is a new file", "-                        // set the revision but not the prevrevision", "-                        String filename = line.substring(0, index);", "-                        String rev = null;", "-                        int indexrev = line.indexOf(REVISION, index);", "-                        if (indexrev != -1) {", "-                            rev = line.substring(indexrev + REVISION.length());", "-                        }", "-                        entry = new CvsTagEntry(filename, rev);", "-                        entries.addElement(entry);", "-                        log(entry.toString(), Project.MSG_VERBOSE);", "-                    } else if ((index = line.indexOf(FILE_HAS_CHANGED)) != -1) {", "-                        // it is a modified file", "-                        // set the revision and the prevrevision", "-                        String filename = line.substring(0, index);", "-                        int revSeparator = line.indexOf(\" to \", index);", "-                        String prevRevision =", "-                            line.substring(index + FILE_HAS_CHANGED.length(),", "-                                revSeparator);", "-                        String revision = line.substring(revSeparator + TO_STRING.length());", "-                        entry = new CvsTagEntry(filename,", "-                            revision,", "-                            prevRevision);", "-                        entries.addElement(entry);", "-                        log(entry.toString(), Project.MSG_VERBOSE);", "-                    } else if ((index = line.indexOf(FILE_WAS_REMOVED)) != -1) {", "-                        // it is a removed file", "-                        String filename = line.substring(0, index);", "-                        String rev = null;", "-                        int indexrev = line.indexOf(REVISION, index);", "-                        if (indexrev != -1) {", "-                            rev = line.substring(indexrev + REVISION.length());", "-                        }", "-                        entry = new CvsTagEntry(filename, null, rev);", "-                        entries.addElement(entry);", "-                        log(entry.toString(), Project.MSG_VERBOSE);", "-                    }", "+                    // use || in a perl like fashion", "+                    boolean processed", "+                        =  doFileIsNew(entries, line)", "+                        || doFileHasChanged(entries, line)", "+                        || doFileWasRemoved(entries, line);"]}]}
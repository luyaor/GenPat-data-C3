{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "73bc9f21e9f6a2c5c2ea337b1e660b35", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f01105589b67375bd14b6f50c2ab4c9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/TypeAdapterTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testRunAdapterError()", "signatureAfterChange": "      @Test     public void testRunAdapterError()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(", "-            \"runadaptererror\", \"xx\", \"No public run() method in\");", "+        try {", "+            buildRule.executeTarget(\"runadaptererror\");", "+            fail(\"BuildException expected: no public run method\");", "+        } catch (BuildException ex) {", "+            assertContains(\"No public run() method in\", ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaa00c3cc417bf43890d08e5638d0df2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/AddTypeTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public void testNestedAB()", "signatureAfterChange": "      @Test     public void testNestedAB()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(", "-            \"nested.ab\", \"Should have got ambiguous\", \"ambiguous\");", "+        try {", "+            buildRule.executeTarget(\"nested.ab\");", "+            fail(\"Build exception expected: Should have got ambiguous\");", "+        } catch (BuildException ex) {", "+            AntAssert.assertContains(\"ambiguous\", ex.getMessage());", "+        }"]}]}
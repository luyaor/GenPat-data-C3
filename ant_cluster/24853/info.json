{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a285011589f8868588f12050f22c8530", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ab79bfe7bccbee6c1b996e8ba7e7579", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/ScpToMessage.java", "commitBeforeChange": "13eae87a1a80015d2e11ffd8fc008ba33a277adf", "commitAfterChange": "8ec6497d89bb1cc76c15e2f911a2ded3f8c5fbbc", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 10, "signatureBeforeChange": "      private void sendFileToRemote(File localFile,                                    InputStream in,                                    OutputStream out) throws IOException", "signatureAfterChange": "      private void sendFileToRemote(File localFile,                                    InputStream in,                                    OutputStream out) throws IOException", "diff": ["+", "+        // only track progress for files larger than 100kb in verbose mode", "+        boolean trackProgress = getVerbose() && filesize > 102400;", "+        // since filesize keeps on decreasing we have to store the", "+        // initial filesize", "+        int initFilesize = filesize;", "+        int percentTransmitted = 0;", "+", "+", "+                if (trackProgress) {", "+                    percentTransmitted = trackProgress(initFilesize, ", "+                                                       totalLength, ", "+                                                       percentTransmitted);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c842df284294ba0b920d764f513b9c2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/compilers/JavacExternal.java", "commitBeforeChange": "1fbd2fe328a83e69ff72aa45c35414777f218279", "commitAfterChange": "c31f5ae25766b6bab90b1d0ac86eab2c7f66b804", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public boolean execute() throws BuildException", "signatureAfterChange": "     public boolean execute() throws BuildException", "diff": ["-", "+        //On VMS platform, we need to create a special java options file", "+        //containing the arguments and classpath for the javac command.", "+        //The special file is supported by the \"-V\" switch on the VMS JVM.", "+        if (Os.isFamily(\"openvms\")) {", "+            return execOnVMS(cmd, firstFileName);", "+        }", "-            executeExternalCompile(cmd.getCommandline(), firstFileName,", "-                                   true)", "-            == 0;", "+                executeExternalCompile(cmd.getCommandline(), firstFileName,", "+                        true)", "+                == 0;", "+    }"]}]}
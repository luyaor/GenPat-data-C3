{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "54f65b31c74e9e2328e03afa2fe394fb", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72b032571718bb4c77760f705949799a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipFile.java", "commitBeforeChange": "aa43e37a025cdf54b8914b8283e57419a253ed59", "commitAfterChange": "dee95e3acc5154aee03ff5f91f9a56426ae79f3f", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 23, "signatureBeforeChange": "     private void resolveLocalFileHeaderData(Map entriesWithoutUTF8Flag)         throws IOException", "signatureAfterChange": "     private void resolveLocalFileHeaderData(Map<ZipEntry, NameAndComment>                                             entriesWithoutUTF8Flag)         throws IOException", "diff": ["-    private void resolveLocalFileHeaderData(Map entriesWithoutUTF8Flag)", "+    private void resolveLocalFileHeaderData(Map<ZipEntry, NameAndComment>", "+                                            entriesWithoutUTF8Flag)", "-        Enumeration e = Collections.enumeration(new HashSet(entries.keySet()));", "-        while (e.hasMoreElements()) {", "-            ZipEntry ze = (ZipEntry) e.nextElement();", "-            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);", "+        // changing the name of a ZipEntry is going to change", "+        // the hashcode - see COMPRESS-164", "+        // Map needs to be reconstructed in order to keep central", "+        // directory order", "+        Map<ZipEntry, OffsetEntry> origMap =", "+            new LinkedHashMap<ZipEntry, OffsetEntry>(entries);", "+        entries.clear();", "+        for (Map.Entry<ZipEntry, OffsetEntry> ent : origMap.entrySet()) {", "+            ZipEntry ze = ent.getKey();", "+            OffsetEntry offsetEntry = ent.getValue();", "-                    throw new RuntimeException(\"failed to skip file name in\"", "-                                               + \" local file header\");", "+                    throw new IOException(\"failed to skip file name in\"", "+                                          + \" local file header\");", "-            }            ", "+            }", "-            /*dataOffsets.put(ze,", "-                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH", "-                                     + SHORT + SHORT + fileNameLen + extraFieldLen));", "-            */", "-                // changing the name of a ZipEntry is going to change", "-                // the hashcode", "-                // - see https://issues.apache.org/jira/browse/COMPRESS-164", "-                entries.remove(ze);", "-                setNameAndCommentFromExtraFields(ze,", "-                                                 (NameAndComment)", "-                                                 entriesWithoutUTF8Flag.get(ze));", "-                entries.put(ze, offsetEntry);", "+                String orig = ze.getName();", "+                NameAndComment nc = entriesWithoutUTF8Flag.get(ze);", "+                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,", "+                                                         nc.comment);", "+                if (!orig.equals(ze.getName())) {", "+                    nameMap.remove(orig);", "+                    nameMap.put(ze.getName(), ze);", "+                }", "-        }", "-    }", "+            entries.put(ze, offsetEntry);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dce35549639ac9d8734d1916a5cc9b1c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "ec980be7345681968c93f0609e9a3fecb39b9753", "commitAfterChange": "fbb9886634198d8377104bef9ec697fadeb134df", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private void binaryCat()", "signatureAfterChange": "     private void binaryCat(ResourceCollection c)", "diff": ["-    private void binaryCat() {", "-        log(\"Binary concatenation of \" + sourceFiles.size()", "-            + \" files to \" + destinationFile);", "+    private void binaryCat(ResourceCollection c) {", "+        log(\"Binary concatenation of \" + c.size()", "+            + \" resources to \" + destinationFile);", "-        FileInputStream in = null;", "+        InputStream in = null;", "-                throw new BuildException(", "-                    \"Unable to open \" + destinationFile", "-                    + \" for writing\", t);", "+                throw new BuildException(\"Unable to open \"", "+                    + destinationFile + \" for writing\", t);", "-            for (Iterator i = sourceFiles.iterator(); i.hasNext();) {", "-                File sourceFile = (File) i.next();", "+            try {", "+                in = new ConcatResourceInputStream(c);", "+                ((ConcatResourceInputStream) in).setManagingComponent(this);", "+            } catch (IOException e) {", "+                throw new BuildException(e);", "+            }", "+            Thread t = new Thread(new StreamPumper(in, out));", "+            t.start();", "+            try {", "+                t.join();", "+            } catch (InterruptedException e) {", "-                    in = new FileInputStream(sourceFile);", "-                } catch (Exception t) {", "-                    throw new BuildException(", "-                        \"Unable to open input file \" + sourceFile,", "-                        t);", "+                    t.join();", "+                } catch (InterruptedException ee) {", "-                int count = 0;", "-                do {", "-                    try {", "-                        count = in.read(buffer, 0, buffer.length);", "-                    } catch (Exception t) {", "-                        throw new BuildException(", "-                            \"Unable to read from \" + sourceFile, t);", "-                    }", "-                    try {", "-                        if (count > 0) {", "-                            out.write(buffer, 0, count);", "-                        }", "-                    } catch (Exception t) {", "-                        throw new BuildException(", "-                            \"Unable to write to \" + destinationFile, t);", "-                    }", "-                } while (count > 0);", "-", "-                try {", "-                    in.close();", "-                } catch (Exception t) {", "-                    throw new BuildException(", "-                        \"Unable to close \" + sourceFile, t);", "-                }", "-                in = null;", "-"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b36aa0cdbca9126b80a58d8b8323a52f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51153ce8c82ec0015f4df90a6e331668", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ComponentHelper.java", "commitBeforeChange": "4c4ad3483de60ef46e02f3b4f217e78422ac5ab4", "commitAfterChange": "4068d7cd9986a3f05760e3856c003bc9b8a6a8dd", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void initSubProject(ComponentHelper helper)", "signatureAfterChange": "     public void initSubProject(ComponentHelper helper)", "diff": ["-        AntTypeTable typeTable = helper.antTypeTable;", "-        for (Iterator i = typeTable.values().iterator(); i.hasNext();) {", "-            AntTypeDefinition def = (AntTypeDefinition) i.next();", "-            antTypeTable.put(def.getName(), def);", "+        AntTypeTable typeTable = (AntTypeTable) helper.antTypeTable.clone();", "+        synchronized (antTypeTable) { ", "+            for (Iterator i = typeTable.values().iterator(); i.hasNext();) {", "+                AntTypeDefinition def = (AntTypeDefinition) i.next();", "+                antTypeTable.put(def.getName(), def);", "+            }", "-        for (Iterator i = helper.checkedNamespaces.iterator(); i.hasNext();) {", "-            checkedNamespaces.add(i.next());", "+        Set inheritedCheckedNamespace = helper.getCheckedNamespace();", "+        synchronized (this) {", "+            checkedNamespaces.addAll(inheritedCheckedNamespace);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1cbc8992ec2031516581018763c17c3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ComponentHelper.java", "commitBeforeChange": "d25488cbbb28cf25e1f91f714c70999fd105432d", "commitAfterChange": "3d706ab8188a674936880b6f4530b0cf3991758b", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 45, "signatureBeforeChange": "         public synchronized List findMatches(String prefix)", "signatureAfterChange": "     private List<AntTypeDefinition> findTypeMatches(String prefix)", "diff": ["-         */", "-        public synchronized List/*<AntTypeDefinition>*/ findMatches(String prefix) {", "-            ArrayList matches = new ArrayList();", "-            for (Iterator i = values().iterator(); i.hasNext();) {", "-                AntTypeDefinition def = (AntTypeDefinition) (i.next());", "+    private List<AntTypeDefinition> findTypeMatches(String prefix) {", "+        final List<AntTypeDefinition> result = new ArrayList<AntTypeDefinition>();", "+        synchronized (antTypeTable) {", "+            for (AntTypeDefinition def : antTypeTable.values()) {", "-                    matches.add(def);", "+                    result.add(def);", "-            return matches;", "+        return result;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b66f03b2e3a2a4c2d6366bf4dda02967", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "643899bed3824f119da7fbe3addbd440", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/helper/ProjectHelper2.java", "commitBeforeChange": "792092f443a4ffa8039ff1fa4963446574310177", "commitAfterChange": "6cb11c4a231c055d9ed5f710f842ee190282c65c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void parse(Project project, Object source, RootHandler handler) throws BuildException", "signatureAfterChange": "     public void parse(Project project, Object source, RootHandler handler) throws BuildException", "diff": ["+        ZipFile zf = null;", "-                inputStream = url.openStream();", "-                uri = url.toString(); // ?? OK ??", "+                uri = url.toString();", "+                int pling = -1;", "+                if (uri.startsWith(\"jar:file\")", "+                    && (pling = uri.indexOf(\"!\")) > -1) {", "+                    zf = new ZipFile(org.apache.tools.ant.launch.Locator", "+                                     .fromJarURI(uri), \"UTF-8\");", "+                    inputStream =", "+                        zf.getInputStream(zf.getEntry(uri.substring(pling + 1)));", "+                } else {", "+                    inputStream = url.openStream();", "+                }", "-            project.log(\"parsing buildfile \" + buildFileName + \" with URI = \" + uri,", "-                    Project.MSG_VERBOSE);", "+            project.log(\"parsing buildfile \" + buildFileName + \" with URI = \"", "+                        + uri + (zf != null ? \" from a zip file\" : \"\"),", "+                        Project.MSG_VERBOSE);", "+            ZipFile.closeQuietly(zf);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0d9524954b976e510dc0d3bd7a31772", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/SSHExec.java", "commitBeforeChange": "41373655c7e93243aa140ab41cfc2fbf680b6dc6", "commitAfterChange": "d796e53fea54cad6b5c2dfb6f892d704504b09f4", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": "      private ByteArrayOutputStream executeCommand(Session session, String cmd)         throws BuildException", "signatureAfterChange": "      private ByteArrayOutputStream executeCommand(Session session, String cmd)         throws BuildException", "diff": ["+        InputStream istream = null ;", "+        if (inputFile != null) {", "+            try {", "+                istream = new FileInputStream(inputFile) ;", "+            } catch (IOException e) {", "+                // because we checked the existence before, this one", "+                // shouldn't happen What if the file exists, but there", "+                // are no read permissions?", "+                log(\"Failed to read \" + inputFile + \" because of: \"", "+                    + e.getMessage(), Project.MSG_WARN);", "+            }", "+        }", "+        if (inputProperty != null) {", "+            String inputData = getProject().getProperty(inputProperty) ;", "+            if (inputData != null) {", "+                istream = new ByteArrayInputStream(inputData.getBytes()) ;", "+            }        \t", "+        }", "+", "+            if (istream != null) {", "+                channel.setInputStream(istream);", "+            }", "+        } finally {", "+            FileUtils.close(istream);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d66ce1380fbc082891a57efe825e7308", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/SSHExec.java", "commitBeforeChange": "6307fed882ce726b54ff5d478b972ed794aeb275", "commitAfterChange": "93eb236577fd99125091dea1515a94cb47d2c00a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 19, "signatureBeforeChange": "      private void executeCommand(Session session, String cmd, StringBuffer sb)         throws BuildException", "signatureAfterChange": "      private void executeCommand(Session session, String cmd, StringBuffer sb)         throws BuildException", "diff": ["+        ByteArrayOutputStream errout = new ByteArrayOutputStream();", "+        OutputStream teeErr = suppressSystemErr ? errout : new TeeOutputStream(out, KeepAliveOutputStream.wrapSystemErr());", "+            channel.setErrStream(teeErr);", "-                //success", "+                // stdout to outputFile", "-", "+                // set errorProperty", "+                if (errorProperty != null) {", "+                    getProject().setNewProperty(errorProperty, errout.toString());    ", "+                }", "+                // stderr to errorFile", "+                if (errorFile != null) {", "+                    writeToFile(errout.toString(), appenderr, errorFile);", "+                }", "+                // set resultproperty", "+                if (resultProperty != null) {", "+                    getProject().setNewProperty(resultProperty, Integer.toString(ec));", "+                }"]}]}
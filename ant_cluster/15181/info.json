{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4ee50bdb5338891c2b418eb35f7013a3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04c2946adb893cb89e5de071a7de5b4b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/PropertyFile.java", "commitBeforeChange": "62f2142b3431002933bf1281d244c164ed962890", "commitAfterChange": "6cbeee38fa5502baa5d75036ad2c0418cf808d56", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "          protected void executeOn(Properties props) throws BuildException", "signatureAfterChange": "          protected void executeOn(Properties props) throws BuildException", "diff": ["-            // m_type may be null because it wasn't set", "+            // type may be null because it wasn't set", "+            String oldValue = (String)props.get(key);", "-                if (m_type == Type.INTEGER_TYPE)", "+                if (type == Type.INTEGER_TYPE)", "-                    executeInteger((String)props.get(m_key));", "+                    executeInteger(oldValue);", "-                else if (m_type == Type.DATE_TYPE)", "+                else if (type == Type.DATE_TYPE)", "-                    executeDate((String)props.get(m_key));", "+                    executeDate(oldValue);", "-                else if (m_type == Type.STRING_TYPE)", "+                else if (type == Type.STRING_TYPE)", "-                    executeString((String)props.get(m_key));", "+                    executeString(oldValue);", "-                    throw new BuildException(\"Unknown operation type: \"+m_type+\"\");", "+                    throw new BuildException(\"Unknown operation type: \"+type+\"\");", "+            ", "+            if (value == null) {", "+                value = \"\";", "+            }", "+            ", "-            props.put(m_key, m_value);", "-", "+            props.put(key, value);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78e700230877d381f8c936f634de42af", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XSLTProcess.java", "commitBeforeChange": "990243c7851b0c2bc6c5f21a3b61deed0af7712e", "commitAfterChange": "6dbabcb7764ee56eeb2e0806486f4f9f76c40356", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private void process(File baseDir, String xmlFile, File destDir,                          File stylesheet)         throws BuildException", "signatureAfterChange": "     private void process(File baseDir, String xmlFile, File destDir,                          File stylesheet)         throws BuildException", "diff": ["-        String fileExt = targetExtension;", "-            int dotPos = xmlFile.lastIndexOf('.');", "-            if (dotPos > 0) {", "-                outFile = new File(destDir,", "-                    xmlFile.substring(0, xmlFile.lastIndexOf('.')) + fileExt);", "+            FileNameMapper mapper = null;", "+            if (mapperElement != null) {", "+                mapper = mapperElement.getImplementation();", "-                outFile = new File(destDir, xmlFile + fileExt);", "+                mapper = new StyleMapper();", "+", "+            String[] outFileName = mapper.mapFileName(xmlFile);", "+            if (outFileName == null || outFileName.length == 0) {", "+                log(\"Skipping \" + inFile + \" it cannot get mapped to output.\",", "+                    Project.MSG_VERBOSE);", "+                return;", "+            } else if (outFileName == null || outFileName.length > 1) {", "+                log(\"Skipping \" + inFile + \" its mapping is ambiguos.\",", "+                    Project.MSG_VERBOSE);", "+                return;", "+            }", "+", "+            outFile = new File(destDir, outFileName[0]);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f036cc951a208da966880d347727f652", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Sync.java", "commitBeforeChange": "b1cc0a4edb49ab8e1155a6a9394a980a0196f454", "commitAfterChange": "7b84ae34e5dda8ff45d94e73e2537b369d1dedf1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void execute()         throws BuildException", "signatureAfterChange": "     public void execute()         throws BuildException", "diff": ["+        // will hold the directories matched by SyncTarget in reversed", "+        // lexicographic order (order is important, that's why we use", "+        // a LinkedHashSet", "+        Set preservedDirectories = new LinkedHashSet();", "+", "-        int[] removedFileCount = removeOrphanFiles(allFiles, toDir);", "+        int[] removedFileCount = removeOrphanFiles(allFiles, toDir,", "+                                                   preservedDirectories);", "-        if (!myCopy.getIncludeEmptyDirs()) {", "+        if (!myCopy.getIncludeEmptyDirs()", "+            || (syncTarget != null", "+                && syncTarget.getPreserveEmptyDirs() == Boolean.FALSE)) {", "-            int removedDirCount = removeEmptyDirectories(toDir, false);", "+", "+            int removedDirCount = 0;", "+            if (!myCopy.getIncludeEmptyDirs()) {", "+                removedDirCount =", "+                    removeEmptyDirectories(toDir, false, preservedDirectories);", "+            } else { // must be syncTarget.preserveEmptydirs == FALSE", "+                removedDirCount =", "+                    removeEmptyDirectories(preservedDirectories);", "+            }"]}]}
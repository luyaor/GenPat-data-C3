{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "88ecdcccf8d8575f2b2a195abda3e21c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a6ff848bf7bf1b50a6173593ab5ee50", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/FixCRLF.java", "commitBeforeChange": "80a86aadd3850c2eb010a1d1796918666408954d", "commitAfterChange": "7820c64af8cfa6122b1afe00622c3118ce935a36", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "       private void processFile(String file) throws BuildException", "signatureAfterChange": "       private void processFile(String file) throws BuildException", "diff": ["-                    : new OutputStreamWriter(new FileOutputStream(tmpFile), encoding);", "+                    : new OutputStreamWriter(new FileOutputStream(tmpFile),", "+                                             encoding);", "-                            // Got here from LOOKING by finding an opening \"\\'\"", "-                            // next points to that quote character.", "-                            // Find the end of the constant.  Watch out for", "-                            // backslashes.  Literal tabs are left unchanged, and", "-                            // the column is adjusted accordingly.", "+                            // Got here from LOOKING by finding an", "+                            // opening \"\\'\" next points to that quote", "+                            // character.", "+                            // Find the end of the constant.  Watch", "+                            // out for backslashes.  Literal tabs are", "+                            // left unchanged, and the column is", "+                            // adjusted accordingly.", "-                                    line.setColumn(", "-                                                   line.getColumn() +", "+                                    line.setColumn(line.getColumn() +", "-                                                   line.getColumn() % tablength);", "+                                                   (line.getColumn() ", "+                                                    % tablength));", "-                                outWriter.write(line.substring(begin, line.getNext()));", "+                                outWriter.write(line.substring(begin, ", "+                                                               line.getNext()));", "-            File destFile = new File(destD, file);", "-", "-                throw new BuildException(\"Unable to close source file \" + srcFile);", "+                throw new BuildException(\"Unable to close source file \" ", "+                                         + srcFile);", "+            File destFile = new File(destD, file);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ee110203e18df3899a86be8f7954d15", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "e65fb2c1cce7bf58dc8bffbf79b3681dc806b64a", "commitAfterChange": "1eafac93d30650b0fccee220aa4ec6e73af1355c", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private void checkIncludePatterns()", "signatureAfterChange": "     private void checkIncludePatterns()", "diff": ["+", "+        File canonBase = null;", "+        try {", "+            canonBase = basedir.getCanonicalFile();", "+        } catch (IOException ex) {", "+            throw new BuildException(ex);", "+        }", "+", "-            // we need to call getCanonicalFile here for DOS systems", "-            // the reason being that otherwise File will be influenced", "-            // by the case of currentelement, which we want to avoid", "-            if (Os.isFamily(\"dos\") && myfile.exists()) {", "+", "+            if (myfile.exists()) {", "+                // may be on a case insensitive file system.  We want", "+                // the results to show what's really on the disk, so", "+                // we need to double check.", "-                    // getAbsoluteFile() is not enough here unfortunately", "-                    myfile = myfile.getCanonicalFile();", "-                }", "-                catch (Exception ex) {", "+                    File canonFile = myfile.getCanonicalFile();", "+                    String path = fileUtils.removeLeadingPath(canonBase,", "+                                                              canonFile);", "+                    if (!path.equals(currentelement)) {", "+                        myfile = findFile(basedir, currentelement);", "+                        if (myfile != null) {", "+                            currentelement = ", "+                                fileUtils.removeLeadingPath(basedir, myfile);", "+                        }", "+                    }", "+                } catch (IOException ex) {", "-                // the variable currentelement is actually telling what", "-                // the scan results will contain", "-                currentelement = fileUtils.removeLeadingPath(basedir,", "-                                                             myfile);", "-            if (!myfile.exists() && !isCaseSensitive) {", "+            ", "+            if ((myfile == null || !myfile.exists()) && !isCaseSensitive) {", "-            if (myfile.exists()) {", "+            if (myfile != null && myfile.exists()) {", "+        fileListMap.clear();"]}]}
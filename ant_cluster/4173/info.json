{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "be8e8db3735e7017a28a3592a14bec29", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a6140aec931723d5de4dce8cfaf3c3a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java", "commitBeforeChange": "96f9a81fa679d8e7ef4eb3725d383df9730d49dd", "commitAfterChange": "669a7eae15ea1cf4d43f78955eb15a1b757717f5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected Commandline setupJavacCommandlineSwitches( Commandline cmd,                                                          boolean useDebugLevel )         throws TaskException", "signatureAfterChange": "     protected Commandline setupJavacCommandlineSwitches( Commandline cmd,                                                          boolean useDebugLevel )         throws TaskException", "diff": ["-        if( memoryInitialSize != null )", "+        if( m_memoryInitialSize != null )", "-            if( !attributes.isForkedJavac() )", "+            if( !m_attributes.isForkedJavac() )", "-                attributes.log( \"Since fork is false, ignoring memoryInitialSize setting.\",", "-                                Project.MSG_WARN );", "+                final String message = \"Since fork is false, ignoring memoryInitialSize setting.\";", "+                getLogger().warn( message );", "-                cmd.createArgument().setValue( memoryParameterPrefix + \"ms\" + memoryInitialSize );", "+                cmd.createArgument().setValue( memoryParameterPrefix + \"ms\" + m_memoryInitialSize );", "-        if( memoryMaximumSize != null )", "+        if( m_memoryMaximumSize != null )", "-            if( !attributes.isForkedJavac() )", "+            if( !m_attributes.isForkedJavac() )", "-                attributes.log( \"Since fork is false, ignoring memoryMaximumSize setting.\",", "-                                Project.MSG_WARN );", "+                final String message = \"Since fork is false, ignoring memoryMaximumSize setting.\";", "+                getLogger().warn( message );", "-                cmd.createArgument().setValue( memoryParameterPrefix + \"mx\" + memoryMaximumSize );", "+                cmd.createArgument().setValue( memoryParameterPrefix + \"mx\" + m_memoryMaximumSize );", "-        if( attributes.getNowarn() )", "+        if( m_attributes.getNowarn() )", "-        if( deprecation == true )", "+        if( m_deprecation == true )", "-        if( destDir != null )", "+        if( m_destDir != null )", "-            cmd.createArgument().setFile( destDir );", "+            cmd.createArgument().setFile( m_destDir );", "-            Path cp = new Path( project );", "+            Path cp = new Path( m_project );", "-            if( bootclasspath != null )", "+            if( m_bootclasspath != null )", "-                cp.append( bootclasspath );", "+                cp.append( m_bootclasspath );", "-            if( extdirs != null )", "+            if( m_extdirs != null )", "-                cp.addExtdirs( extdirs );", "+                cp.addExtdirs( m_extdirs );", "-            if( bootclasspath != null )", "+            if( m_bootclasspath != null )", "-                cmd.createArgument().setPath( bootclasspath );", "+                cmd.createArgument().setPath( m_bootclasspath );", "-            if( extdirs != null )", "+            if( m_extdirs != null )", "-                cmd.createArgument().setPath( extdirs );", "+                cmd.createArgument().setPath( m_extdirs );", "-        if( encoding != null )", "+        if( m_encoding != null )", "-            cmd.createArgument().setValue( encoding );", "+            cmd.createArgument().setValue( m_encoding );", "-        if( debug )", "+        if( m_debug )", "-                String debugLevel = attributes.getDebugLevel();", "+                String debugLevel = m_attributes.getDebugLevel();", "-        if( optimize )", "+        if( m_optimize )", "-        if( depend )", "+        if( m_depend )", "-                attributes.log( \"depend attribute is not supported by the modern compiler\",", "-                                Project.MSG_WARN );", "+                final String message = \"depend attribute is not supported by the modern compiler\";", "+                getLogger().warn( message );", "-        if( verbose )", "+        if( m_verbose )"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e78fcc133948603566dbbd6c5352f0d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java", "commitBeforeChange": "96f9a81fa679d8e7ef4eb3725d383df9730d49dd", "commitAfterChange": "669a7eae15ea1cf4d43f78955eb15a1b757717f5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected Commandline setupJavacCommandlineSwitches( Commandline cmd,                                                          boolean useDebugLevel )         throws TaskException", "signatureAfterChange": "     protected Commandline setupJavacCommandlineSwitches( Commandline cmd,                                                          boolean useDebugLevel )         throws TaskException", "diff": ["-        if( memoryInitialSize != null )", "+        if( m_memoryInitialSize != null )", "-            if( !attributes.isForkedJavac() )", "+            if( !m_attributes.isForkedJavac() )", "-                attributes.log( \"Since fork is false, ignoring memoryInitialSize setting.\",", "-                                Project.MSG_WARN );", "+                final String message = \"Since fork is false, ignoring memoryInitialSize setting.\";", "+                getLogger().warn( message );", "-                cmd.createArgument().setValue( memoryParameterPrefix + \"ms\" + memoryInitialSize );", "+                cmd.createArgument().setValue( memoryParameterPrefix + \"ms\" + m_memoryInitialSize );", "-        if( memoryMaximumSize != null )", "+        if( m_memoryMaximumSize != null )", "-            if( !attributes.isForkedJavac() )", "+            if( !m_attributes.isForkedJavac() )", "-                attributes.log( \"Since fork is false, ignoring memoryMaximumSize setting.\",", "-                                Project.MSG_WARN );", "+                final String message = \"Since fork is false, ignoring memoryMaximumSize setting.\";", "+                getLogger().warn( message );", "-                cmd.createArgument().setValue( memoryParameterPrefix + \"mx\" + memoryMaximumSize );", "+                cmd.createArgument().setValue( memoryParameterPrefix + \"mx\" + m_memoryMaximumSize );", "-        if( attributes.getNowarn() )", "+        if( m_attributes.getNowarn() )", "-        if( deprecation == true )", "+        if( m_deprecation == true )", "-        if( destDir != null )", "+        if( m_destDir != null )", "-            cmd.createArgument().setFile( destDir );", "+            cmd.createArgument().setFile( m_destDir );", "-            Path cp = new Path( project );", "+            Path cp = new Path( m_project );", "-            if( bootclasspath != null )", "+            if( m_bootclasspath != null )", "-                cp.append( bootclasspath );", "+                cp.append( m_bootclasspath );", "-            if( extdirs != null )", "+            if( m_extdirs != null )", "-                cp.addExtdirs( extdirs );", "+                cp.addExtdirs( m_extdirs );", "-            if( bootclasspath != null )", "+            if( m_bootclasspath != null )", "-                cmd.createArgument().setPath( bootclasspath );", "+                cmd.createArgument().setPath( m_bootclasspath );", "-            if( extdirs != null )", "+            if( m_extdirs != null )", "-                cmd.createArgument().setPath( extdirs );", "+                cmd.createArgument().setPath( m_extdirs );", "-        if( encoding != null )", "+        if( m_encoding != null )", "-            cmd.createArgument().setValue( encoding );", "+            cmd.createArgument().setValue( m_encoding );", "-        if( debug )", "+        if( m_debug )", "-                String debugLevel = attributes.getDebugLevel();", "+                String debugLevel = m_attributes.getDebugLevel();", "-        if( optimize )", "+        if( m_optimize )", "-        if( depend )", "+        if( m_depend )", "-                attributes.log( \"depend attribute is not supported by the modern compiler\",", "-                                Project.MSG_WARN );", "+                final String message = \"depend attribute is not supported by the modern compiler\";", "+                getLogger().warn( message );", "-        if( verbose )", "+        if( m_verbose )"]}]}
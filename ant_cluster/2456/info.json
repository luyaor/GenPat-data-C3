{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "50e0de1819a637b6a6b5ffac4b9c5f2f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "019ef6b2753a6643c5309a5265ca50d9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "196c36bc28dec63b239595132e8b00c55951c860", "commitAfterChange": "689fca41585cc1768a0501fd11c8235b6e4bc481", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 56, "signatureBeforeChange": "     private void evaluatePackages(String source, Vector packages, Vector argList)", "signatureAfterChange": "     private void evaluatePackages(String sourcePath, Vector packages, Vector argList)", "diff": ["-    private void evaluatePackages(String source, Vector packages, Vector argList) {", "+    private void evaluatePackages(String sourcePath, Vector packages, Vector argList) {", "-        project.log(\"Source dir = \" + source, project.MSG_VERBOSE);", "+        project.log(\"Source path = \" + sourcePath, project.MSG_VERBOSE);", "-        Hashtable map = mapClasses(new File(source));", "+        Vector addedPackages = new Vector();", "+        PathTokenizer tokenizer = new PathTokenizer(sourcePath);", "+        while (tokenizer.hasMoreTokens()) {", "+            File source = new File(project.translatePath(tokenizer.nextToken()));", "+            ", "+            Hashtable map = mapClasses(source);", "-        Enumeration e = map.keys();", "-        while (e.hasMoreElements()) {", "-            String pack = (String) e.nextElement();", "-            for (int i = 0; i < packages.size(); i++) {", "-                if (matches(pack, (String) packages.elementAt(i))) {", "-                    argList.addElement(pack);", "-                    break;", "+            Enumeration e = map.keys();", "+            while (e.hasMoreElements()) {", "+                String pack = (String) e.nextElement();", "+                for (int i = 0; i < packages.size(); i++) {", "+                    if (matches(pack, (String) packages.elementAt(i))) {", "+                        if (!addedPackages.contains(pack)) {", "+                            argList.addElement(pack);", "+                            addedPackages.addElement(pack);", "+                        }", "+                        break;", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48fee14b06640cfcb3295521ae1644fb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "cca008dd0001628eefae7a0ebffba4815a6909f1", "commitAfterChange": "021fdf251c92ecb3981724d83c0265dc770280b3", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "      private static void transferFormatters(JUnitTestRunner runner)", "signatureAfterChange": "      private static void transferFormatters(JUnitTestRunner runner,                                            JUnitTest test)", "diff": ["-    private static void transferFormatters(JUnitTestRunner runner) {", "+    private static void transferFormatters(JUnitTestRunner runner,", "+                                           JUnitTest test) {", "-            runner.addFormatter((JUnitResultFormatter) fromCmdLine", "-                                .elementAt(i));", "+            FormatterElement fe = (FormatterElement) fromCmdLine.elementAt(i);", "+            if (multipleTests && fe.getUseFile()) {", "+                File destFile = ", "+                    new File(test.getTodir(), ", "+                             test.getOutfile() + fe.getExtension());", "+                fe.setOutfile(destFile);", "+            }", "+            runner.addFormatter(fe.createFormatter());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "542aa0f9ab147af1278bfc3f8e449d3a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/PathConvert.java", "commitBeforeChange": "cd8ef18058976a150028b5f88a409cdfaf279dc2", "commitAfterChange": "e2ca50cce1c1d277d17d23a0d4682e48310ded10", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        char fromDirSep = onWindows ? '\\\\' : '/';", "-        char toDirSep   = dirSep.charAt(0);", "+//        char fromDirSep = onWindows ? '\\\\' : '/';", "+//        char toDirSep   = dirSep.charAt(0);", "+", "+        String fromDirSep = onWindows ? \"\\\\\" : \"/\";", "+", "-            elem = elem.replace( fromDirSep, toDirSep );", "+//            elem = elem.replace( fromDirSep, toDirSep );", "-            rslt.append( elem );", "+//            rslt.append( elem );", "+", "+            StringTokenizer stDirectory = new StringTokenizer(elem, fromDirSep, true);", "+            String token = null;", "+", "+            while ( stDirectory.hasMoreTokens() ) {", "+              token = stDirectory.nextToken();", "+", "+              if (fromDirSep.equals(token)) {", "+                rslt.append( dirSep ); ", "+              }", "+              else {", "+                rslt.append( token );", "+              }", "+            }"]}]}
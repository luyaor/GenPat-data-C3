{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6bbac2c5217f3bf19b506cb06a667271", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73a3bce01ca9781906b6527aec6822ce", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/embed/src/java/org/apache/tools/ant/taskdefs/optional/VelocityProperties.java", "commitBeforeChange": "e8a83719cd6439a1ac94f5d495f6889be8b81238", "commitAfterChange": "44e40a7606432325bac57bdc244bea997dd7004b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "          public Object getProperty( Object p, String ns, String name )", "signatureAfterChange": "          public Object getPropertyHook( String ns, String name, boolean user )", "diff": ["-    ", "-    public Object getProperty( Object p, String ns, String name ) {", "-        if( ! name.startsWith(PREFIX) )", "-            return null;", "-        try {", "-            name=name.substring( PREFIX.length() );", "-            StringWriter sw=new StringWriter();", "-            ", "-            engine.evaluate( context, sw, \"antVM\", name );", "-            ", "-            System.out.println(\"VM: getProperty \" + ns + \" \" + name + \"=\" + sw.toString());", "-            return sw.toString();", "-        } catch( Exception ex ) {", "-            ex.printStackTrace();", "-            return null;", "+", "+        public Object getPropertyHook( String ns, String name, boolean user ) {", "+            if( ! name.startsWith(PREFIX) ) {", "+                // pass on to next", "+                return super.getPropertyHook(ns, name, user);", "+            }", "+            try {", "+                name=name.substring( PREFIX.length() );", "+                StringWriter sw=new StringWriter();", "+", "+                engine.evaluate( context, sw, \"antVM\", name );", "+", "+                System.out.println(\"VM: getProperty \" + ns + \" \" + name + \"=\" + sw.toString());", "+                return sw.toString();", "+            } catch( Exception ex ) {", "+                ex.printStackTrace();", "+                return null;", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acf3d7546870fc3df03fb9d8dbc51b14", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/embed/src/java/org/apache/tools/ant/taskdefs/optional/JexlProperties.java", "commitBeforeChange": "e8a83719cd6439a1ac94f5d495f6889be8b81238", "commitAfterChange": "44e40a7606432325bac57bdc244bea997dd7004b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public Object getProperty( Object p, String ns, String name )", "signatureAfterChange": "          public Object getPropertyHook( String ns, String name, boolean user )", "diff": ["-    public Object getProperty( Object p, String ns, String name ) {", "-        if( ! name.startsWith(PREFIX) )", "-            return null;", "-        try {", "-            name=name.substring( PREFIX.length() );", "-            Expression e = ExpressionFactory.createExpression(name);", "-            Object o = e.evaluate(jc);", "-            return o;", "-        } catch( Exception ex ) {", "-            ex.printStackTrace();", "-            return null;", "+        public Object getPropertyHook( String ns, String name, boolean user ) {", "+            if( ! name.startsWith(PREFIX) ) {", "+                return super.getPropertyHook(ns, name, user);", "+            }", "+            try {", "+                name=name.substring( PREFIX.length() );", "+                Expression e = ExpressionFactory.createExpression(name);", "+                Object o = e.evaluate(jc);", "+", "+                return o;", "+            } catch( Exception ex ) {", "+                ex.printStackTrace();", "+                return null;", "+            }"]}]}
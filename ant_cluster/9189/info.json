{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "597d9e2c4a9c02e470634ddce3e75cd4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70ed0040a58affc36352099fa84a833c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/main/org/apache/ant/core/execution/ExecutionFrame.java", "commitBeforeChange": "a48208f6cf8cf80ef1e144305ff8dfe0958599d5", "commitAfterChange": "c2e518039b65dc5b8c9c31f9f78b2d72ea8db2d1", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 21, "signatureBeforeChange": "       private ExecutionTask getConfiguredExecutionTask(TaskElement model)          throws ConfigException, ExecutionException", "signatureAfterChange": "             private Task configureTask(TaskElement model)          throws ConfigException, ExecutionException", "diff": ["-    private ExecutionTask getConfiguredExecutionTask(TaskElement model) ", "+     */        ", "+    private Task configureTask(TaskElement model) ", "-            throw new ConfigException(\"There is no task defintion for tasks of type <\" ", "+            throw new ConfigException(\"There is no defintion for tasks of type <\" ", "-            Class executionTaskClass = taskDefinition.getExecutionTaskClass();", "-            ExecutionTask executionTask = (ExecutionTask)executionTaskClass.newInstance();", "-            executionTask.setExecutionFrame(this);", "-            executionTask.setBuildEventSupport(eventSupport);", "-            executionTask.setBuildElement(model);", "-            configureElement(executionTask, model);", "-            return executionTask;", "+            Class elementClass = taskDefinition.getExecutionTaskClass();", "+            Object element = elementClass.newInstance();", "+            Task task = null;", "+            if (element instanceof Task) {", "+                // create a Task context for the Task", "+                task = (Task)element;", "+            }", "+            else {", "+                task = new TaskAdapter(taskType, element);", "+            }", "+            ", "+            ExecutionContext context = new ExecutionContext(this, eventSupport, model);", "+            task.setTaskContext(context);", "+            configureElement(element, model);", "+", "+            return task;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ac3037eea82e3e1baea389123251ba6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ExecutionFrame.java", "commitBeforeChange": "7499c443d67445ea8fd0b8f4bd56c72251b18bf4", "commitAfterChange": "b7e43ad8c5906ae2b6d6b42f8b2715dc7d2e7a16", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 38, "signatureBeforeChange": "     private Object createTypeInstance(Class typeClass, BuildElement model)          throws ExecutionException, TaskException", "signatureAfterChange": "     private Object createTypeInstance(Class typeClass, AntLibFactory libFactory,                                       BuildElement model)          throws ExecutionException", "diff": ["-    private Object createTypeInstance(Class typeClass, BuildElement model)", "-         throws ExecutionException, TaskException {", "+    private Object createTypeInstance(Class typeClass, AntLibFactory libFactory,", "+                                      BuildElement model)", "+         throws ExecutionException {", "-            Object typeInstance = typeClass.newInstance();", "-            if (typeInstance instanceof DataType) {", "-                DataType dataType = (DataType)typeInstance;", "-                TypeContext typeContext = new TypeContext();", "-                typeContext.initEnvironment(this, eventSupport);", "-                typeContext.init(dataType, model);", "+            Object typeInstance = null;", "+            if (libFactory == null) {", "+                typeInstance = typeClass.newInstance();", "+            } else {", "+                typeInstance = libFactory.createTypeInstance(typeClass);", "+", "+            if (typeInstance instanceof ExecutionComponent) {", "+                ExecutionComponent component = (ExecutionComponent)typeInstance;", "+                ExecutionContext context", "+                     = new ExecutionContext(this, eventSupport);", "+                context.setModelElement(model);", "+                component.init(context);", "+            }", "+", "+        } catch (ExecutionException e) {", "+            e.setLocation(model.getLocation());", "+            throw e;"]}]}
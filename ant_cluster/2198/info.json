{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "016bf6df934c4eaf6a142357fad700ab", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b6016056af3171faa55d5c2268f17bf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "8bf76a6d5476dfc5dcaea89528973e324bbdcf6f", "commitAfterChange": "5f81fd801113c7f3bb4b734d0be4337ef482c0fd", "methodNumberBeforeChange": 146, "methodNumberAfterChange": 146, "signatureBeforeChange": "      private String quoteString(String str, final char delim)", "signatureAfterChange": "      private String quoteString(final String str, final char delim)", "diff": ["-    private String quoteString(String str, final char delim) {", "+    private String quoteString(final String str, final char delim) {", "-        if (str.indexOf('\\\\') != -1) {", "-            str = replace(str, '\\\\', \"\\\\\\\\\");", "-        }", "-        if (str.indexOf(delim) != -1) {", "-            str = replace(str, delim, \"\\\\\" + delim);", "-        }", "-        buf.append(str);", "-        buf.append(delim);", "-        return buf.toString();", "-    }", "+        final int len = str.length();", "+        boolean lastCharWasCR = false;", "+        for (int i = 0; i < len; i++) {", "+            char c = str.charAt(i);", "+            if (c == delim) { // can't put the non-constant delim into a case", "+                buf.append('\\\\').append(c);", "+                lastCharWasCR = false;", "+                switch (c) {", "+                case '\\\\':", "+                    buf.append(\"\\\\\\\\\");", "+                    lastCharWasCR = false;", "+                    break;", "+                case '\\r':", "+                    // insert a line continuation marker", "+                    buf.append(\"\\\\\\r\");", "+                    lastCharWasCR = true;", "+                    break;", "+                case '\\n':", "+                    // insert a line continuation marker unless this", "+                    // is a \\r\\n sequence in which case \\r already has", "+                    // created the marker", "+                    if (!lastCharWasCR) {", "+                        buf.append(\"\\\\\\n\");", "+                    } else {", "+                        buf.append(\"\\n\");", "+                    }", "+                    lastCharWasCR = false;", "+                    break;", "+                default:", "+                    buf.append(c);", "+                    lastCharWasCR = false;", "+                    break;", "+                }", "+        buf.append(delim);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e8f6079fa3ea09bdafd875333a35f52", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/MacroInstance.java", "commitBeforeChange": "2a426f599fb6e67d13f24abff7457fd9f9b87fd9", "commitAfterChange": "8dd4e0ba76f304d2a1bfde2ddd614d750d83560f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "          private String macroSubs(String s, Map macroMapping)", "signatureAfterChange": "      private String macroSubs(String s, Map macroMapping)", "diff": ["-    ", "+", "+        if (s == null) {", "+            return null;", "+        }", "-                    if (ch == '$') {", "-                        state = 1;", "+                    if (ch == '@') {", "+                        state = STATE_EXPECT_BRACKET;", "-                    }                    ", "+                    }", "-                        state = 2;", "+                        state = STATE_EXPECT_NAME;", "+                    } else if (ch == '@') {", "+                        state = STATE_EXPECT_EXCAPE;", "-                        state = 0;", "-                        ret.append('$');", "+                        state = STATE_NORMAL;", "+                        ret.append('@');", "-                        state = 0;", "+                        state = STATE_NORMAL;", "-                            ret.append(\"${\" + name + \"}\");", "+                            ret.append(\"@{\" + name + \"}\");", "-                        macroName.append(s.charAt(i));", "+                        macroName.append(ch);", "+                    break;", "+                case STATE_EXPECT_EXCAPE:", "+                    state = STATE_NORMAL;", "+                    if (ch == '{') {", "+                        ret.append(\"@\");", "+                    } else {", "+                        ret.append(\"@@\");", "+                    }", "+                    ret.append(ch);", "+                    break;", "+                default:", "+                    break;", "-                ret.append('$');", "+                ret.append('@');", "-                ret.append(\"${\");", "+                ret.append(\"@{\");", "+                break;", "+            case STATE_EXPECT_EXCAPE:", "+                ret.append(\"@@\");", "+                break;", "+            default:"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1d94de07660d4bd243fefab470435ba", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Untar.java", "commitBeforeChange": "dc00bd536bd6a1cd2bae07cecc352c085a8a0f9d", "commitAfterChange": "80d371a3b4e1ba3f845e1b9a8f831fd6a11fafd5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void setOverwrite(boolean b)", "signatureAfterChange": "      private String mode2str(int mode)", "diff": ["+    private String mode2str(int mode) {", "+        StringBuffer sb = new StringBuffer(\"----------\");", "+        if ((mode & S_IFREG ) == 0) {", "+            if ((mode & S_IFDIR ) != 0) {", "+                sb.setCharAt(0, 'd');", "+            } else if ((mode & S_IFLNK)  != 0) {", "+                sb.setCharAt(0, 'l');", "+            } else if ((mode & S_IFIFO)  != 0) {", "+                sb.setCharAt(0, 'p');", "+            } else if ((mode & S_IFCHR)  != 0) {", "+                sb.setCharAt(0, 'c');", "+            } else if ((mode & S_IFBLK)  != 0) {", "+                sb.setCharAt(0, 'b');", "+            } else if ((mode & S_IFSOCK) != 0) {", "+                sb.setCharAt(0, 's');", "+            } else if ((mode & S_IFIFO)  != 0) {", "+                sb.setCharAt(0, 'p');", "+            }", "+        }", "+        if ((mode & S_IRUSR ) != 0) {", "+            sb.setCharAt(1, 'r');", "+        }", "+        if ((mode & S_IWUSR ) != 0) {", "+            sb.setCharAt(2, 'w');", "+        }", "+        if ((mode & S_IXUSR ) != 0) {", "+            sb.setCharAt(3, 'x');", "+        }", "-     */", "-    public void setOverwrite(boolean b) {", "-        overwrite = b;", "-    }", "+        if ((mode & S_IRGRP ) != 0) {", "+            sb.setCharAt(4, 'r');", "+        }", "+        if ((mode & S_IWGRP ) != 0) {", "+            sb.setCharAt(5, 'w');", "+        }", "+        if ((mode & S_IXGRP ) != 0) {", "+            sb.setCharAt(6, 'x');", "+        }", "+        if ((mode & S_IROTH ) != 0) {", "+            sb.setCharAt(7, 'r');", "+        }", "+        if ((mode & S_IWOTH ) != 0) {", "+            sb.setCharAt(8, 'w');", "+        }", "+        if ((mode & S_IXOTH ) != 0) {", "+            sb.setCharAt(9, 'x');", "+        }", "+        return new String(sb);", "+    }"]}]}
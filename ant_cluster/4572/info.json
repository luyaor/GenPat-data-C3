{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "76142d011d7999ff0d050c2ff1b848b6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f6235fdc2985cb0275e4c981ecf1c0b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/FilterChain.java", "commitBeforeChange": "bb05312e66a2403d2405988dbaf0830cde65df7c", "commitAfterChange": "da5f3bfd256e383926c6ece58dba15a7d4bd5761", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "      protected synchronized void dieOnCircularReference(Stack stk, Project p)         throws BuildException", "signatureAfterChange": "      protected synchronized void dieOnCircularReference(Stack<Object> stk, Project p)         throws BuildException", "diff": ["-    protected synchronized void dieOnCircularReference(Stack stk, Project p)", "+    protected synchronized void dieOnCircularReference(Stack<Object> stk, Project p)", "-            for (Iterator i = filterReaders.iterator(); i.hasNext(); ) {", "+            for (Iterator<Object> i = filterReaders.iterator(); i.hasNext(); ) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e91c077bd7b0171c30c0dd62fb222d8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/Sort.java", "commitBeforeChange": "19d970dbd33bac4654e4d8319afe11dcb15dd708", "commitAfterChange": "c1a8cd521f77cc542c206e7ab3f4aeb6aae53e87", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 11, "signatureBeforeChange": "     protected void dieOnCircularReference(Stack stk, Project p)         throws BuildException", "signatureAfterChange": "     protected synchronized void dieOnCircularReference(Stack stk, Project p)         throws BuildException", "diff": ["-    protected void dieOnCircularReference(Stack stk, Project p)", "+    protected synchronized void dieOnCircularReference(Stack stk, Project p)", "-            for (Iterator i = compStack.iterator(); i.hasNext();) {", "+            for (Iterator i = comp.v.iterator(); i.hasNext();) {"]}]}
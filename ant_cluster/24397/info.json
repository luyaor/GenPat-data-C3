{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0dd33379430ac82c77854615afdeaa2d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fc4d86429b31a54de0fb02036aedcc0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/embed/ProjectHelperImpl2.java", "commitBeforeChange": "fc6a4383fa7cee5fe2534dc9edc9d8a4eb5c254f", "commitAfterChange": "75cdfc682ec1c00da1a7ed51ce5e8621776ccaf1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void parse(Project project, Object source) throws BuildException", "signatureAfterChange": "       public void parse(Project project, Object source) throws BuildException", "diff": ["+", "+    public void parse(Project project, Object source) throws BuildException {", "+        // Hook our internal tasks. XXX refactor ", "+        try {", "+            Class c=Class.forName(\"org.apache.tools.ant.types.SystemPath\");", "+            project.addDataTypeDefinition( \"systemPath\" , c );", "+            c=Class.forName(\"org.apache.tools.ant.tasks.Import\");", "+            project.addTaskDefinition( \"import\" , c );", "+        } catch (Exception ex ) {", "+        }", "+        AntXmlContext context=new AntXmlContext(this);", "+        AntXmlContext.resetImports();", "+        ", "+        project.addReference( \"ant.parsing.context\", context );", "+        parse(project, source,new RootHandler(context));", "+    }", "-    public void parse(Project project, Object source) throws BuildException {", "-        // Hook our one tasks.", "-        try {", "-            Class c=Class.forName(\"org.apache.tools.ant.types.SystemPath\");", "-            project.addDataTypeDefinition( \"systemPath\" , c );", "-        } catch (Exception ex ) {", "-        }", "-        AntXmlContext context=new AntXmlContext();", "-            org.xml.sax.XMLReader parser;", "-    ", "-            parser =JAXPUtils.getXMLReader();", "-            DefaultHandler hb = new RootHandler(context);", "-            parser.setContentHandler(hb);", "-            parser.setEntityResolver(hb);", "-            parser.setErrorHandler(hb);", "-            parser.setDTDHandler(hb);", "-            parser.parse(inputSource);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db251a334f19c7923adc4981cdabab4c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "536bfb63e3ad71036b032550ca8241e07e1f5d45", "commitAfterChange": "b5397fd0e4b2a0e360dc14a9cb1ebec8f4ce7aa5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void parse() throws BuildException", "signatureAfterChange": "     public void parse(Project project, Object source) throws BuildException", "diff": ["-    private void parse() throws BuildException {", "-        FileInputStream inputStream = null;", "-        InputSource inputSource = null;", "+    public void parse(Project project, Object source) throws BuildException {", "+        throw new BuildException(\"ProjectHelper.parse() must be implemented in a helper plugin \"", "+                                 + this.getClass().getName());", "+    }", "-            SAXParser saxParser = getParserFactory().newSAXParser();", "-                parser = saxParser.getParser();", "-            } catch (SAXException exc) {", "-                parser = new XMLReaderAdapter(saxParser.getXMLReader());", "-            }", "-", "-            String uri = \"file:\" + buildFile.getAbsolutePath().replace('\\\\', '/');", "-            for (int index = uri.indexOf('#'); index != -1; index = uri.indexOf('#')) {", "-                uri = uri.substring(0, index) + \"%23\" + uri.substring(index+1);", "-            }", "-            ", "-            inputStream = new FileInputStream(buildFile);", "-            inputSource = new InputSource(inputStream);", "-            inputSource.setSystemId(uri);", "-            project.log(\"parsing buildfile \" + buildFile + \" with URI = \" + uri, Project.MSG_VERBOSE);", "-            HandlerBase hb = new RootHandler();", "-            parser.setDocumentHandler(hb);", "-            parser.setEntityResolver(hb);", "-            parser.setErrorHandler(hb);", "-            parser.setDTDHandler(hb);", "-            parser.parse(inputSource);", "-        }", "-        catch(ParserConfigurationException exc) {", "-            throw new BuildException(\"Parser has not been configured correctly\", exc);", "-        }", "-        catch(SAXParseException exc) {", "-            Location location =", "-                new Location(buildFile.toString(), exc.getLineNumber(), exc.getColumnNumber());", "-", "-            Throwable t = exc.getException();", "-            if (t instanceof BuildException) {", "-                BuildException be = (BuildException) t;", "-                if (be.getLocation() == Location.UNKNOWN_LOCATION) {", "-                    be.setLocation(location);", "-                throw be;", "-            }", "-            ", "-            throw new BuildException(exc.getMessage(), t, location);", "-        }", "-        catch(SAXException exc) {", "-            Throwable t = exc.getException();", "-            if (t instanceof BuildException) {", "-                throw (BuildException) t;", "-            }", "-            throw new BuildException(exc.getMessage(), t);", "-        }", "-        catch(FileNotFoundException exc) {", "-            throw new BuildException(exc);", "-        }", "-        catch(IOException exc) {", "-            throw new BuildException(\"Error reading project file\", exc);", "-        }", "-        finally {", "-            if (inputStream != null) {", "-                try {", "-                    inputStream.close();", "-                }", "-                catch (IOException ioe) {", "-                    // ignore this", "-                }", "-            }", "-        }", "-    }"]}]}
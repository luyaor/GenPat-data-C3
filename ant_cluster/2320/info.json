{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "33d528c34dd6cf63aa57515562d6f080", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c2bca650975a76ad45b94501e236e8b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/Frame.java", "commitBeforeChange": "752f49d5b18f9743f8e4a6dbdc8065d240d9c97a", "commitAfterChange": "da4e1a3aa99899d6aecc6d14c2a7498fa51647aa", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 19, "signatureBeforeChange": "     protected void createProjectReference(String name, Project project,                                           Map initialData)         throws AntException", "signatureAfterChange": "     protected void createProjectReference(String name, Project project,                                           Map initialData)         throws AntException", "diff": ["-       Frame referencedFrame = createFrame(project);", "-       addListeners(referencedFrame);", "+        Frame referencedFrame = createFrame(project);", "+        addListeners(referencedFrame);", "-       referencedFrame.initialize(initialData);", "-       // does the frame have any overrides?", "-       Map initialProperties = (Map) overrides.get(name);", "-       referencedFrame.initialize(initialProperties);", "-       overrides.remove(name);", "+        Map overrideProperties = dataService.getOverrides(name);", "+        Map values = new HashMap();", "+        dataService.mergeDataValues(values, initialData);", "+        dataService.mergeDataValues(values, overrideProperties);", "+        referencedFrame.initialize(values);", "+        dataService.removeOverrides(name);", "-       referencedFrames.put(name, referencedFrame);", "-       referencedFrame.importStandardComponents();", "-       referencedFrame.runGlobalTasks();", "+        referencedFrames.put(name, referencedFrame);", "+        referencedFrame.importStandardComponents();", "+        referencedFrame.runGlobalTasks();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5c25a026b301fa948491371d066f94e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/WLRun.java", "commitBeforeChange": "2deeb0512d5eb2cf2dd9d35490a0469d2a111d02", "commitAfterChange": "a58b5083c49b0e8f202d6843d65ff9b4a6ce2c78", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        String execClassPath = project.translatePath(classpath);", "-            ", "+        weblogicServer.setTaskName(getTaskName());", "-        weblogicServer.setClassname(\"weblogic.Server\");", "+        weblogicServer.setClassname(weblogicMainClass);", "+", "+        ", "-            jvmArgs += \"-Dweblogic.class.path=\" + project.translatePath(weblogicClasspath);", "+            jvmArgs += \" -Dweblogic.class.path=\" + weblogicClasspath;", "+        jvmArgs += \" \" + additionalJvmArgs;", "-        weblogicServer.setJvmargs(jvmArgs);", "-        weblogicServer.setClasspath(new Path(project, execClassPath));                         ", "+        weblogicServer.createJvmarg().setLine(jvmArgs);", "+        weblogicServer.createArg().setLine(additionalArgs);", "+        ", "+        weblogicServer.setClasspath(classpath);                         "]}]}
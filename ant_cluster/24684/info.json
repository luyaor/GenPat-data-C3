{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "37e5a6fdacc7d062d32a4c50d9772e30", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ffd318f56cb9434e63295dd84ab1ba6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "a9c576b74204f899d6541ad0366a2e4535e2b30a", "commitAfterChange": "d4071f9eb63cf6114580ec13036f8f0bf39c6e32", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "          private boolean get() throws IOException, BuildException", "signatureAfterChange": "          private boolean get() throws IOException, BuildException", "diff": ["-            //set up the URL connection", "-            URLConnection connection = source.openConnection();", "-            //modify the headers", "-            //NB: things like user authentication could go in here too.", "+            ", "+            connection = openConnection(source);", "+", "+            if (connection == null)", "+            {", "+                return false;", "+            }", "+", "+            boolean downloadSucceeded = downloadFile();", "+", "+            //if (and only if) the use file time option is set, then", "+            //the saved file now has its timestamp set to that of the", "+            //downloaded file", "+            if (downloadSucceeded && useTimestamp)  {", "+                updateTimeStamp();", "+            }", "+            ", "+            return downloadSucceeded;", "+        }", "-                //we do not use the sun impl for portability,", "-                //and always use our own implementation for consistent", "-                //testing", "-                connection.setRequestProperty (\"Authorization\",", "-                                               \"Basic \" + encoding);", "-            //connect to the remote site (may take some time)", "-            connection.connect();", "-            //next test for a 304 result (HTTP only)", "-                HttpURLConnection httpConnection", "-                    = (HttpURLConnection) connection;", "-                if (httpConnection.getResponseCode()", "-                    == HttpURLConnection.HTTP_NOT_MODIFIED", "-                    || (lastModified != 0 && hasTimestamp", "-                        && timestamp >= lastModified)) {", "-                    //not modified so no file download. just return", "-                    //instead and trace out something so the user", "-                    //doesn't think that the download happened when it", "-                    //didn't", "-                    return false;", "-                if (httpConnection.getResponseCode()", "-                    == HttpURLConnection.HTTP_UNAUTHORIZED)  {", "-                        return false;", "-", "-                //this three attempt trick is to get round quirks in different", "-                //Java implementations. Some of them take a few goes to bind", "-                //property; we ignore the first couple of such failures.", "-                throw new BuildException(\"Can't get \" + source + \" to \"", "-                                         + dest, getLocation());", "-", "-            //if (and only if) the use file time option is set, then", "-            //the saved file now has its timestamp set to that of the", "-            //downloaded file", "-            if (useTimestamp)  {", "-                long remoteTimestamp = connection.getLastModified();", "-                if (verbose)  {", "-                    Date t = new Date(remoteTimestamp);", "-                    log(\"last modified = \" + t.toString()", "-                        + ((remoteTimestamp == 0)", "-                           ? \" - using current time instead\"", "-                           : \"\"), logLevel);", "-                }", "-                if (remoteTimestamp != 0) {", "-                    FILE_UTILS.setFileLastModified(dest, remoteTimestamp);", "-                }", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cf08d2494295188a8d35b6a59261c8f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "7db5bdf3b44fcfda18bb256e6d627590bab7ccfc", "commitAfterChange": "0c1efed954c2370fb8e6217c0c246e227df6708f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            URL url = null;", "-            try {", "-                url = new URL(source);", "-            } catch (MalformedURLException e) {", "-                throw new BuildException(e.toString());", "-            }", "-\t    File destF=new File(dest);", "-\t    FileOutputStream fos = new FileOutputStream(destF);", "+\t    \t//set the timestamp to the file date.", "+\t    long timestamp=0;", "+", "+            boolean hasTimestamp=false;", "+\t    if(useTimestamp && dest.exists()) {", "+\t        timestamp=dest.lastModified();", "+                if (verbose)  {", "+                    Date t=new Date(timestamp);", "+                    log(\"local file date : \"+t.toString());", "+                }", "+                ", "+                hasTimestamp=true;", "+            }", "+\t", "+            //set up the URL connection", "+            URLConnection connection=source.openConnection();", "+            //modify the headers", "+            //NB: things like user authentication could go in here too.", "+            if(useTimestamp && hasTimestamp) {", "+                connection.setIfModifiedSince(timestamp);", "+            }", "+", "+            //connect to the remote site (may take some time)", "+            connection.connect();", "+            //next test for a 304 result (HTTP only)", "+            if(connection instanceof HttpURLConnection)  {", "+           \tHttpURLConnection httpConnection=(HttpURLConnection)connection;", "+                if(httpConnection.getResponseCode()==HttpURLConnection.HTTP_NOT_MODIFIED)  {", "+                    //not modified so no file download. just return instead", "+                    //and trace out something so the user doesn't think that the ", "+                    //download happened when it didnt", "+                    log(\"Not modified - so not downloaded\");", "+                    return; ", "+                }", "+            }", "+", "+            //REVISIT: at this point even non HTTP connections may support the if-modified-since", "+            //behaviour -we just check the date of the content and skip the write if it is not", "+            //newer. Some protocols (FTP) dont include dates, of course. ", "+           \t", "+\t    FileOutputStream fos = new FileOutputStream(dest);", "-\t\t    is = url.openStream();", "+\t\t    is = connection.getInputStream();", "-\t\tif( ignoreErrors != null ) return;", "-\t\tthrow new BuildException( \"Can't get \" + source + \" to \" + dest);", "+\t\tif(ignoreErrors) ", "+                    return;", "+\t\tthrow new BuildException( \"Can't get \" + source + \" to \" + dest,", "+                                          location);", "-\t\tif (\"true\".equals(verbose)) System.out.print(\".\");", "+\t\tif (verbose) System.out.print(\".\");", "-\t    if( \"true\".equals(verbose)) System.out.println();", "+\t    if(verbose) System.out.println();", "+           ", "+            //if (and only if) the use file time option is set, then the ", "+            //saved file now has its timestamp set to that of the downloaded file", "+            if(useTimestamp)  {", "+           \tlong remoteTimestamp=connection.getLastModified();", "+                if (verbose)  {", "+                    Date t=new Date(remoteTimestamp);", "+                    log(\"last modified = \"+t.toString()", "+                   \t+((remoteTimestamp==0)?\" - using current time instead\":\"\"));", "+                }", "+                if(remoteTimestamp!=0)", "+                    touchFile(dest,remoteTimestamp);", "+            }", "+", "+           ", "+", "-\t    if( ignoreErrors != null ) return;", "-\t    throw new BuildException(ioe.toString());", "+\t    if(ignoreErrors) ", "+                return;", "+\t    throw new BuildException(ioe, location);"]}]}
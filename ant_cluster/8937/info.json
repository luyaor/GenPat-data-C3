{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cd0e213fc34e61c52b2d97fe2dffb057", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d9872fc3c9433378424b85cc685c919", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Checksum.java", "commitBeforeChange": "e562f879e82fea2c7960533aaa097c769429968c", "commitAfterChange": "4db83aaa5baa9b47810796035a0e9cafeab911d7", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private void addToIncludeFileMap(File file) throws BuildException", "signatureAfterChange": "     private void addToIncludeFileMap(File file) throws BuildException", "diff": ["-        if (file != null) {", "-            if (file.exists()) {", "-                if (property == null) {", "-                    File checksumFile = getChecksumFile(file);", "-                    if (forceOverwrite || isCondition", "-                        || (file.lastModified() > checksumFile.lastModified())) {", "-                        includeFileMap.put(file, checksumFile);", "-                    } else {", "-                        log(file + \" omitted as \" + checksumFile + \" is up to date.\",", "-                            Project.MSG_VERBOSE);", "-                        if (totalproperty != null) {", "-                            // Read the checksum from disk.", "-                            String checksum = readChecksum(checksumFile);", "-                            byte[] digest = decodeHex(checksum.toCharArray());", "-                            allDigests.put(file, digest);", "-                        }", "-                    }", "+        if (file.exists()) {", "+            if (property == null) {", "+                File checksumFile = getChecksumFile(file);", "+                if (forceOverwrite || isCondition", "+                    || (file.lastModified() > checksumFile.lastModified())) {", "+                    includeFileMap.put(file, checksumFile);", "-                    includeFileMap.put(file, property);", "+                    log(file + \" omitted as \" + checksumFile + \" is up to date.\",", "+                        Project.MSG_VERBOSE);", "+                    if (totalproperty != null) {", "+                        // Read the checksum from disk.", "+                        String checksum = readChecksum(checksumFile);", "+                        byte[] digest = decodeHex(checksum.toCharArray());", "+                        allDigests.put(file, digest);", "+                    }", "-                String message = \"Could not find file \"", "-                    + file.getAbsolutePath()", "-                    + \" to generate checksum for.\";", "-                log(message);", "-                throw new BuildException(message, getLocation());", "+                includeFileMap.put(file, property);", "+        } else {", "+            String message = \"Could not find file \"", "+                + file.getAbsolutePath()", "+                + \" to generate checksum for.\";", "+            log(message);", "+            throw new BuildException(message, getLocation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c4f7d6f1c10d56696371f9a318aceb5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/SSHExec.java", "commitBeforeChange": "f3709b2e5b64d2d62ec339119d59109da61fc32e", "commitAfterChange": "eb4293a5c60d218c2410b4a03bfb90b29fd7cf52", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-", "-        /* called once */", "-        if (command != null) {", "-            log(\"cmd : \" + command, Project.MSG_INFO);", "-            executeCommand(command);", "-        } else { // read command resource and execute for each command", "-            try {", "-                BufferedReader br = new BufferedReader(", "-                    new InputStreamReader(commandResource.getInputStream()));", "-                String cmd;", "-                while ((cmd = br.readLine()) != null) {", "-                    log(\"cmd : \" + cmd, Project.MSG_INFO);", "-                    executeCommand(cmd);", "+        ", "+        Session session = null;", "+        ", "+        try {", "+            session = openSession();", "+            /* called once */", "+            if (command != null) {", "+                log(\"cmd : \" + command, Project.MSG_INFO);", "+                ByteArrayOutputStream out = executeCommand(session, command);", "+                if(outputProperty != null) {", "+                    //#bugzilla 43437", "+                    getProject().setNewProperty(outputProperty, command + \" : \" + out);", "-                FileUtils.close(br);", "-            } catch (IOException e) {", "-                throw new BuildException(e);", "+            } else { // read command resource and execute for each command", "+                try {", "+                    BufferedReader br = new BufferedReader(", "+                            new InputStreamReader(commandResource.getInputStream()));", "+                    String cmd;", "+                    String output = \"\";", "+                    while ((cmd = br.readLine()) != null) {", "+                        log(\"cmd : \" + cmd, Project.MSG_INFO);", "+                        ByteArrayOutputStream out = executeCommand(session, cmd);", "+                        output += cmd + \" : \" + out + \"\\n\";", "+                    }", "+                    if(outputProperty != null) {", "+                        //#bugzilla 43437", "+                        getProject().setNewProperty(outputProperty, output);", "+                    }", "+                    FileUtils.close(br);", "+                } catch (IOException e) {", "+                    throw new BuildException(e);", "+                }", "+            }", "+        } catch(JSchException e) {", "+            throw new BuildException(e);", "+        } finally {", "+            if (session != null && session.isConnected()) {", "+                session.disconnect();"]}]}
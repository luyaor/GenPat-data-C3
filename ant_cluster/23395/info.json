{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a53f40624dd1ce3db734996372e05f03", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75657b55a12c0adfef1778767f2c2a03", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "93db46be115205107729104e728d45687d885295", "commitAfterChange": "20ab59bff57796a67e1cdfefbc29826c7d55edba", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": "      private void mainSort()", "signatureAfterChange": "      private void mainSort()", "diff": ["-            block[ last + i + 2 ] = block[ ( i % ( last + 1 ) ) + 1 ];", "+            m_block[ m_last + i + 2 ] = m_block[ ( i % ( m_last + 1 ) ) + 1 ];", "-        for( i = 0; i <= last + NUM_OVERSHOOT_BYTES; i++ )", "+        for( i = 0; i <= m_last + NUM_OVERSHOOT_BYTES; i++ )", "-            quadrant[ i ] = 0;", "+            m_quadrant[ i ] = 0;", "-        block[ 0 ] = (char)( block[ last + 1 ] );", "+        m_block[ 0 ] = (char)( m_block[ m_last + 1 ] );", "-        if( last < 4000 )", "+        if( m_last < 4000 )", "-            for( i = 0; i <= last; i++ )", "+            for( i = 0; i <= m_last; i++ )", "-                zptr[ i ] = i;", "+                m_zptr[ i ] = i;", "-            firstAttempt = false;", "-            workDone = workLimit = 0;", "-            simpleSort( 0, last, 0 );", "+            m_firstAttempt = false;", "+            m_workDone = m_workLimit = 0;", "+            simpleSort( 0, m_last, 0 );", "-                ftab[ i ] = 0;", "+                m_ftab[ i ] = 0;", "-            c1 = block[ 0 ];", "-            for( i = 0; i <= last; i++ )", "+            c1 = m_block[ 0 ];", "+            for( i = 0; i <= m_last; i++ )", "-                c2 = block[ i + 1 ];", "-                ftab[ ( c1 << 8 ) + c2 ]++;", "+                c2 = m_block[ i + 1 ];", "+                m_ftab[ ( c1 << 8 ) + c2 ]++;", "-                ftab[ i ] += ftab[ i - 1 ];", "+                m_ftab[ i ] += m_ftab[ i - 1 ];", "-            c1 = block[ 1 ];", "-            for( i = 0; i < last; i++ )", "+            c1 = m_block[ 1 ];", "+            for( i = 0; i < m_last; i++ )", "-                c2 = block[ i + 2 ];", "+                c2 = m_block[ i + 2 ];", "-                ftab[ j ]--;", "-                zptr[ ftab[ j ] ] = i;", "+                m_ftab[ j ]--;", "+                m_zptr[ m_ftab[ j ] ] = i;", "-            j = ( ( block[ last + 1 ] ) << 8 ) + ( block[ 1 ] );", "-            ftab[ j ]--;", "-            zptr[ ftab[ j ] ] = last;", "+            j = ( ( m_block[ m_last + 1 ] ) << 8 ) + ( m_block[ 1 ] );", "+            m_ftab[ j ]--;", "+            m_zptr[ m_ftab[ j ] ] = m_last;", "-                        while( ( ftab[ ( ( runningOrder[ j - h ] ) + 1 ) << 8 ]", "-                            - ftab[ ( runningOrder[ j - h ] ) << 8 ] ) >", "-                            ( ftab[ ( ( vv ) + 1 ) << 8 ] - ftab[ ( vv ) << 8 ] ) )", "+                        while( ( m_ftab[ ( ( runningOrder[ j - h ] ) + 1 ) << 8 ]", "+                            - m_ftab[ ( runningOrder[ j - h ] ) << 8 ] ) >", "+                            ( m_ftab[ ( ( vv ) + 1 ) << 8 ] - m_ftab[ ( vv ) << 8 ] ) )", "-                    if( !( ( ftab[ sb ] & SETMASK ) == SETMASK ) )", "+                    if( !( ( m_ftab[ sb ] & SETMASK ) == SETMASK ) )", "-                        int lo = ftab[ sb ] & CLEARMASK;", "-                        int hi = ( ftab[ sb + 1 ] & CLEARMASK ) - 1;", "+                        int lo = m_ftab[ sb ] & CLEARMASK;", "+                        int hi = ( m_ftab[ sb + 1 ] & CLEARMASK ) - 1;", "-                            if( workDone > workLimit && firstAttempt )", "+                            if( m_workDone > m_workLimit && m_firstAttempt )", "-                        ftab[ sb ] |= SETMASK;", "+                        m_ftab[ sb ] |= SETMASK;", "-                    int bbStart = ftab[ ss << 8 ] & CLEARMASK;", "-                    int bbSize = ( ftab[ ( ss + 1 ) << 8 ] & CLEARMASK ) - bbStart;", "+                    int bbStart = m_ftab[ ss << 8 ] & CLEARMASK;", "+                    int bbSize = ( m_ftab[ ( ss + 1 ) << 8 ] & CLEARMASK ) - bbStart;", "-                        int a2update = zptr[ bbStart + j ];", "+                        int a2update = m_zptr[ bbStart + j ];", "-                        quadrant[ a2update ] = qVal;", "+                        m_quadrant[ a2update ] = qVal;", "-                            quadrant[ a2update + last + 1 ] = qVal;", "+                            m_quadrant[ a2update + m_last + 1 ] = qVal;", "-                    copy[ j ] = ftab[ ( j << 8 ) + ss ] & CLEARMASK;", "+                    copy[ j ] = m_ftab[ ( j << 8 ) + ss ] & CLEARMASK;", "-                for( j = ftab[ ss << 8 ] & CLEARMASK;", "-                     j < ( ftab[ ( ss + 1 ) << 8 ] & CLEARMASK ); j++ )", "+                for( j = m_ftab[ ss << 8 ] & CLEARMASK;", "+                     j < ( m_ftab[ ( ss + 1 ) << 8 ] & CLEARMASK ); j++ )", "-                    c1 = block[ zptr[ j ] ];", "+                    c1 = m_block[ m_zptr[ j ] ];", "-                        zptr[ copy[ c1 ] ] = zptr[ j ] == 0 ? last : zptr[ j ] - 1;", "+                        m_zptr[ copy[ c1 ] ] = m_zptr[ j ] == 0 ? m_last : m_zptr[ j ] - 1;", "-                    ftab[ ( j << 8 ) + ss ] |= SETMASK;", "+                    m_ftab[ ( j << 8 ) + ss ] |= SETMASK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88b336a65659702724b6a73ad32836c4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "93db46be115205107729104e728d45687d885295", "commitAfterChange": "20ab59bff57796a67e1cdfefbc29826c7d55edba", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 33, "signatureBeforeChange": "      private void writeRun()         throws IOException", "signatureAfterChange": "      private void writeRun()         throws IOException", "diff": ["-        if( last < allowableBlockSize )", "+        if( m_last < m_allowableBlockSize )", "-            m_inUse[ currentChar ] = true;", "-            for( int i = 0; i < runLength; i++ )", "+            m_inUse[ m_currentChar ] = true;", "+            for( int i = 0; i < m_runLength; i++ )", "-                m_crc.updateCRC( (char)currentChar );", "+                m_crc.updateCRC( (char)m_currentChar );", "-            switch( runLength )", "+            switch( m_runLength )", "-                    last++;", "-                    block[ last + 1 ] = (char)currentChar;", "+                    m_last++;", "+                    m_block[ m_last + 1 ] = (char)m_currentChar;", "-                    last++;", "-                    block[ last + 1 ] = (char)currentChar;", "-                    last++;", "-                    block[ last + 1 ] = (char)currentChar;", "+                    m_last++;", "+                    m_block[ m_last + 1 ] = (char)m_currentChar;", "+                    m_last++;", "+                    m_block[ m_last + 1 ] = (char)m_currentChar;", "-                    last++;", "-                    block[ last + 1 ] = (char)currentChar;", "-                    last++;", "-                    block[ last + 1 ] = (char)currentChar;", "-                    last++;", "-                    block[ last + 1 ] = (char)currentChar;", "+                    m_last++;", "+                    m_block[ m_last + 1 ] = (char)m_currentChar;", "+                    m_last++;", "+                    m_block[ m_last + 1 ] = (char)m_currentChar;", "+                    m_last++;", "+                    m_block[ m_last + 1 ] = (char)m_currentChar;", "-                    m_inUse[ runLength - 4 ] = true;", "-                    last++;", "-                    block[ last + 1 ] = (char)currentChar;", "-                    last++;", "-                    block[ last + 1 ] = (char)currentChar;", "-                    last++;", "-                    block[ last + 1 ] = (char)currentChar;", "-                    last++;", "-                    block[ last + 1 ] = (char)currentChar;", "-                    last++;", "-                    block[ last + 1 ] = (char)( runLength - 4 );", "+                    m_inUse[ m_runLength - 4 ] = true;", "+                    m_last++;", "+                    m_block[ m_last + 1 ] = (char)m_currentChar;", "+                    m_last++;", "+                    m_block[ m_last + 1 ] = (char)m_currentChar;", "+                    m_last++;", "+                    m_block[ m_last + 1 ] = (char)m_currentChar;", "+                    m_last++;", "+                    m_block[ m_last + 1 ] = (char)m_currentChar;", "+                    m_last++;", "+                    m_block[ m_last + 1 ] = (char)( m_runLength - 4 );"]}]}
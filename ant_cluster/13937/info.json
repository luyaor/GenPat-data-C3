{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec3298d12a1c6c9f2e4ad0bd9857eee4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "136f0163930942d556b47879bed20313", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "99a9f194032b4185fc017d9bfe31e0419cc51f02", "commitAfterChange": "ced321c00be004a78c335295701169edf0dcb55f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private Class getComplexTypeFor( final Class clazz )", "signatureAfterChange": "     private void configureReference( final ObjectConfigurer configurer,                                      final Object object,                                      final Configuration element,                                      final Context context )         throws ConfigurationException", "diff": ["+     */", "+    private void configureReference( final ObjectConfigurer configurer,", "+                                     final Object object,", "+                                     final Configuration element,", "+                                     final Context context )", "+        throws ConfigurationException", "+    {", "+        // Adjust the name", "+        final String elementName = element.getName();", "+        final String name = elementName.substring( 0, elementName.length() - 4 );", "+", "+        // Extract the id", "+        final String id = element.getAttribute( \"id\" );", "+        if( 1 != element.getAttributeNames().length ||", "+            0 != element.getChildren().length )", "+        {", "+            final String message = REZ.getString( \"extra-config-for-ref.error\" );", "+            throw new ConfigurationException( message );", "+        }", "+", "+        // Set the property", "+        setReference( configurer, object, name, id, context );", "+    }", "-", "-    private Class getComplexTypeFor( final Class clazz )", "-    {", "-        if( String.class == clazz )", "-        {", "-            return String.class;", "-        }", "-        else if( Integer.TYPE.equals( clazz ) )", "-        {", "-            return Integer.class;", "-        }", "-        else if( Long.TYPE.equals( clazz ) )", "-        {", "-            return Long.class;", "-        }", "-        else if( Short.TYPE.equals( clazz ) )", "-        {", "-            return Short.class;", "-        }", "-        else if( Byte.TYPE.equals( clazz ) )", "-        {", "-            return Byte.class;", "-        }", "-        else if( Boolean.TYPE.equals( clazz ) )", "-        {", "-            return Boolean.class;", "-        }", "-        else if( Float.TYPE.equals( clazz ) )", "-        {", "-            return Float.class;", "-        }", "-        else if( Double.TYPE.equals( clazz ) )", "-        {", "-            return Double.class;", "-        }", "-        else", "-        {", "-            final String message = REZ.getString( \"no-complex-type.error\", clazz.getName() );", "-            throw new IllegalArgumentException( message );", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "641b4292e2ce413ee4f51d7f76c30f29", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/builder/DefaultProjectBuilder.java", "commitBeforeChange": "4d492454dde097210c04b4cca33feb56fa0f9554", "commitAfterChange": "80793a20ada49e7453e836ffeab1e41c8a88d49d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      protected void process( final URL systemID,                             final SAXConfigurationHandler handler )         throws Exception", "signatureAfterChange": "     private Configuration parseProject( final URL systemID )         throws ProjectException", "diff": ["-    protected void process( final URL systemID,", "-                            final SAXConfigurationHandler handler )", "-        throws Exception", "+     */", "+    private Configuration parseProject( final URL systemID )", "+        throws ProjectException", "-        final SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();", "-        final SAXParser saxParser = saxParserFactory.newSAXParser();", "-        final XMLReader parser = saxParser.getXMLReader();", "-        parser.setFeature( \"http://xml.org/sax/features/namespace-prefixes\", false );", "-        parser.setFeature( \"http://xml.org/sax/features/namespaces\", false );", "-        //parser.setFeature( \"http://xml.org/sax/features/validation\", false );", "+        try", "+        {", "+            final SAXConfigurationHandler handler = new SAXConfigurationHandler();", "+            final SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();", "+            final SAXParser saxParser = saxParserFactory.newSAXParser();", "+            final XMLReader parser = saxParser.getXMLReader();", "+            parser.setFeature( \"http://xml.org/sax/features/namespace-prefixes\", false );", "+            parser.setFeature( \"http://xml.org/sax/features/namespaces\", false );", "+            //parser.setFeature( \"http://xml.org/sax/features/validation\", false );", "-        parser.setContentHandler( handler );", "-        parser.setErrorHandler( handler );", "-        parser.parse( systemID.toString() );", "+            parser.setContentHandler( handler );", "+            parser.setErrorHandler( handler );", "+            parser.parse( systemID.toString() );", "+", "+            return handler.getConfiguration();", "+        }", "+        catch( Exception e )", "+        {", "+            String message = REZ.getString( \"ant.project-parse.error\" );", "+            throw new ProjectException( message, e );", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d16fc8eebc6af4a8ca1d3e1f97cc3f6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "f87b5ed7757c30daca5cf875c95520a00dce2269", "commitAfterChange": "010a31e84477b60ff536725b388b38323540dcca", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private void addElement( final Object object,                              final Method method,                              final Configuration configuration,                              final Context context )         throws ConfigurationException", "signatureAfterChange": "     private void setContent( final ObjectConfigurer configurer,                              final Object object,                              final String content,                              final Context context )         throws ConfigurationException", "diff": ["+     */", "+    private void setContent( final ObjectConfigurer configurer,", "+                             final Object object,", "+                             final String content,", "+                             final Context context )", "+        throws ConfigurationException", "+    {", "+        if( DEBUG )", "+        {", "+            final String message =", "+                REZ.getString( \"configure-content.notice\", content );", "+            getLogger().debug( message );", "+        }", "+        // Set the content", "+        final AttributeSetter setter = configurer.getContentSetter();", "+        if( null == setter )", "+        {", "+            final String message = REZ.getString( \"content-not-supported.error\" );", "+            throw new ConfigurationException( message );", "+        }", "+        try", "+        {", "+            setValue( setter, object, content, context );", "+        }", "+        catch( final Exception e )", "+        {", "+            final String message = REZ.getString( \"bad-set-content.error\" );", "+            throw new ConfigurationException( message, e );", "+        }", "+    }", "-", "-    private void addElement( final Object object,", "-                             final Method method,", "-                             final Configuration configuration,", "-                             final Context context )", "-        throws ConfigurationException", "-    {", "-        try", "-        {", "-            final Class clazz = method.getParameterTypes()[ 0 ];", "-            final Object created = clazz.newInstance();", "-", "-            configure( created, configuration, context );", "-            method.invoke( object, new Object[]{created} );", "-        }", "-        catch( final ConfigurationException ce )", "-        {", "-            throw ce;", "-        }", "-        catch( final Exception e )", "-        {", "-            final String message = REZ.getString( \"subelement-create.error\" );", "-            throw new ConfigurationException( message, e );"]}]}
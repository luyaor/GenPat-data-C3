{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3a6269db1485efda6091da7694059f42", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f334bf4547f3fa5b8c2475cefe42960", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/modules/core/RegisterConverter.java", "commitBeforeChange": "414575a432489206adb9cbaf9496cc51b320239a", "commitAfterChange": "362616390fb06104b98d1ddcab5e2bc8d998a793", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void execute()         throws TaskException", "signatureAfterChange": "      public void execute()         throws TaskException", "diff": ["-            final ConverterInfo info = new ConverterInfo( m_sourceType, m_destinationType );", "-            m_converterRegistry.registerConverterInfo( m_classname, info );", "+            m_converterRegistry.registerConverter( m_classname, m_sourceType, m_destinationType );", "-            final DefaultComponentFactory factory =", "-                new DefaultComponentFactory( new URL[] { url } );", "-", "+            final DefaultComponentFactory factory = new DefaultComponentFactory( new URL[] { url } );", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33659adab017135d367b9906ad82fbd2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/runtime/ConverterDef.java", "commitBeforeChange": "af9fedaddcecbe135f7e3b6158799d524a7d2150", "commitAfterChange": "c171b4c9f2bf641be687e7d5edb9456d4ecd3930", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void execute()         throws TaskException", "signatureAfterChange": "      public void execute()         throws TaskException", "diff": ["-            m_converterRegistry.registerConverter( m_classname, m_sourceType, m_destinationType );", "+            final ConverterRegistry converterRegistry = (ConverterRegistry)getService( ConverterRegistry.class );", "+            converterRegistry.registerConverter( m_classname, m_sourceType, m_destinationType );", "-            m_typeManager.registerType( Converter.ROLE, m_classname, factory );", "+            final TypeManager typeManager = (TypeManager)getService( TypeManager.class );", "+            typeManager.registerType( Converter.ROLE, m_classname, factory );"]}]}
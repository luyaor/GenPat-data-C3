{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "87575eba4a38c55e2f97a3b8d9bb3dab", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c2e0007abb2e1a1310c4e190c590807", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Taskdef.java", "commitBeforeChange": "91f7d992dc20124771b9a9709df15b4295c825ef", "commitAfterChange": "68f6b984a991fd9cbf20bdfe6c1abc5b1a410588", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "     protected void addDefinition(String name, Class c)", "diff": ["-", "-    public void execute() throws BuildException {", "-        if (name==null || value==null ) {", "-            String msg = \"name or classname attributes of taskdef element \"", "-                + \"are undefined\";", "-            throw new BuildException(msg);", "-        }", "-        try {", "-            ClassLoader loader = null;", "-            if (classpath != null) {", "-                AntClassLoader al = new AntClassLoader(project, classpath,", "-                                                       false);", "-                // need to load Task via system classloader or the new", "-                // task we want to define will never be a Task but always", "-                // be wrapped into a TaskAdapter.", "-                al.addSystemPackageRoot(\"org.apache.tools.ant\");", "-                loader = al;", "-            } else {", "-                loader = this.getClass().getClassLoader();", "-            }", "-", "-            Class taskClass = null;", "-            if (loader != null) {", "-                taskClass = loader.loadClass(value);", "-                AntClassLoader.initializeClass(taskClass);", "-            } else {", "-                taskClass = Class.forName(value);", "-            }", "-            project.addTaskDefinition(name, taskClass);", "-        } catch (ClassNotFoundException cnfe) {", "-            String msg = \"taskdef class \" + value +", "-                \" cannot be found\";", "-            throw new BuildException(msg, cnfe, location);", "-        } catch (NoClassDefFoundError ncdfe) {", "-            String msg = \"taskdef class \" + value +", "-                \" cannot be found\";", "-            throw new BuildException(msg, ncdfe, location);", "-        }", "-    }", "+public class Taskdef extends Definer {", "+    protected void addDefinition(String name, Class c) {", "+        project.addTaskDefinition(name, c);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b08852a8b1069a27f4a7f009a69b240", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javac.java", "commitBeforeChange": "c1a5419faf39033ffc2db1dcf8000f6a796f2dad", "commitAfterChange": "4ca5683c2a54ff4a141ed562a0f3b431b153b2c2", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 32, "signatureBeforeChange": "     private boolean doClassicCompile() throws BuildException", "signatureAfterChange": "     public String getTarget()", "diff": ["+    /** Gets the target VM that the classes will be compiled for. */", "+    public String getTarget() {", "+        return target;", "+    }", "-     */", "-    private boolean doClassicCompile() throws BuildException {", "-        log(\"Using classic compiler\", Project.MSG_VERBOSE);", "-        Commandline cmd = setupJavacCommand();", "-", "-        // Use reflection to be able to build on all JDKs", "-        /*", "-        // provide the compiler a different message sink - namely our own", "-        sun.tools.javac.Main compiler =", "-                new sun.tools.javac.Main(new LogOutputStream(this, Project.MSG_WARN), \"javac\");", "-", "-        if (!compiler.compile(cmd.getArguments())) {", "-            throw new BuildException(\"Compile failed\");", "-        }", "-        */", "-        try {", "-            // Create an instance of the compiler, redirecting output to", "-            // the project log", "-            OutputStream logstr = new LogOutputStream(this, Project.MSG_WARN);", "-            Class c = Class.forName(\"sun.tools.javac.Main\");", "-            Constructor cons = c.getConstructor(new Class[] { OutputStream.class, String.class });", "-            Object compiler = cons.newInstance(new Object[] { logstr, \"javac\" });", "-", "-            // Call the compile() method", "-            Method compile = c.getMethod(\"compile\", new Class [] { String[].class });", "-            Boolean ok = (Boolean)compile.invoke(compiler, new Object[] {cmd.getArguments()});", "-            return ok.booleanValue();", "-        }", "-        catch (ClassNotFoundException ex) {", "-            throw new BuildException(\"Cannot use classic compiler, as it is not available\"+", "-            \t\t\t\t\t\t \" A common solution is to set the environment variable\"+", "-                                     \" JAVA_HOME to your jdk directory.\", location);", "-        }", "-        catch (Exception ex) {", "-            if (ex instanceof BuildException) {", "-                throw (BuildException) ex;", "-            } else {", "-                throw new BuildException(\"Error starting classic compiler: \", ex, location);", "-            }", "-        }", "-    }"]}]}
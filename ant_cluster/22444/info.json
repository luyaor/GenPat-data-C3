{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e7d8891e9cb64927c367ab053262a482", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17d131f3b0aa381121d99f7f0e7e2303", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Rmic.java", "commitBeforeChange": "d5313cd9aeb9e62923cf784c46598937160aba2e", "commitAfterChange": "38c2a2a22283450dab6afcf3d3ec094c67dc1e4e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["+", "-        File baseFile = project.resolveFile(base);", "+        File baseDir = project.resolveFile(base);", "+        if (baseDir == null) {", "+            throw new BuildException(\"base attribute must be set!\", location);", "+        }", "+        if (!baseDir.exists()) {", "+            throw new BuildException(\"base does not exist!\", location);", "+        }", "+", "+        if (verify) {", "+            project.log(\"Verify has been turned on.\", Project.MSG_INFO);", "+        }", "-        if (null != sourceBase)", "+        if (null != sourceBase) {", "-        String classpath = getCompileClasspath(baseFile);", "+        }", "+        String classpath = getCompileClasspath(baseDir);", "+", "+        // scan base dirs to build up compile lists", "+", "+        DirectoryScanner ds = this.getDirectoryScanner(baseDir);", "+", "+        String[] files = ds.getIncludedFiles();", "+", "+        scanDir(baseDir, files, verify);", "+", "-            int argCount = 5;", "+        int argCount = 5;", "+        if (compileList.size() > 0) argCount += compileList.size() - 1;", "-        args[i++] = baseFile.getAbsolutePath();", "+        args[i++] = baseDir.getAbsolutePath();", "-        args[i++] = classname;", "-        compiler.compile(args);", "+        if (classname != null) {", "+            if (shouldCompile(new File(baseDir, classname.replace('.', File.separatorChar)))) {", "+                args[i++] = classname;", "+                compiler.compile(args);", "+            }", "+        } else {", "+            if (compileList.size() > 0) {", "+                project.log(\"RMI Compiling \" + compileList.size() +", "+                            \" classes to \" + baseDir, Project.MSG_INFO);", "+", "+                for (int j = 0; j < compileList.size(); j++) {", "+                    args[i++] = (String) compileList.elementAt(j);", "+                }", "+                compiler.compile(args);", "+            }", "+        }", "-                String stubFileName = classname.replace('.', '/') + \"_Stub.java\";", "-            File oldStubFile = new File(baseFile, stubFileName);", "-            File newStubFile = new File(sourceBaseFile, stubFileName);", "-            try {", "-                project.copyFile(oldStubFile, newStubFile, filtering);", "-                oldStubFile.delete();", "-            } catch (IOException ioe) {", "-                String msg = \"Failed to copy \" + oldStubFile + \" to \" +", "-                             newStubFile + \" due to \" + ioe.getMessage();", "-                throw new BuildException(msg);", "-            }", "-            if (!\"1.2\".equals(stubVersion)) {", "-                String skelFileName = classname.replace('.', '/') + \"_Skel.java\";", "-                File oldSkelFile = new File(baseFile, skelFileName);", "-                File newSkelFile = new File(sourceBaseFile, skelFileName);", "-                try {", "-                    project.copyFile(oldSkelFile, newSkelFile, filtering);", "-                    oldSkelFile.delete();", "-                } catch (IOException ioe) {", "-                    String msg = \"Failed to copy \" + oldSkelFile + \" to \" +", "-                                  newSkelFile + \" due to \" + ioe.getMessage();", "-                    throw new BuildException(msg);", "+            if (classname != null) {", "+                moveGeneratedFile(baseDir, sourceBaseFile, classname);", "+            } else {", "+                for (int j = 0; j < compileList.size(); j++) {", "+                    moveGeneratedFile(baseDir, sourceBaseFile, (String) compileList.elementAt(j));", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f84cb412a70ae90bd841c62db392f81", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/launch/Launcher.java", "commitBeforeChange": "6867c1dd7e1ff94b1ab8f87a314a528eb847c69a", "commitAfterChange": "c12912c52bda86fe28ed7476165b6cc49ce8c0ee", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private void run(String[] args) throws MalformedURLException", "signatureAfterChange": "     private void run(String[] args) throws MalformedURLException", "diff": ["-        String libPath = \"\";", "-        String[] newargs = null;", "-        int argcount = -1;", "-        for (argcount = 0; argcount < args.length -1; argcount++) {", "-            if (args[argcount].equals(\"-lib\")) {", "-                libPath = args[argcount + 1];", "-                break;", "+", "+        List libPaths = new ArrayList();", "+        List argList = new ArrayList();", "+        String[] newArgs;", "+", "+        for (int i = 0; i < args.length; ++i) {", "+            if (args[i].equals(\"-lib\")) {", "+                if (i == args.length - 1) {", "+                    throw new IllegalStateException(\"The -lib argument must \"", "+                        + \"be followed by a library location\");", "+                }", "+                libPaths.add(args[++i]);", "+            } else {", "+                argList.add(args[i]);", "-        }", "-        if (args.length > 0 && args[args.length -1].equals(\"-lib\")) {", "-            // if the last argument is -lib", "-            // remove it from the arguments passed to Launcher", "-            //", "-            newargs = new String[args.length - 1];", "-            System.arraycopy(args, 0, newargs, 0, args.length -1);", "-        } else if (libPath.equals(\"\")) {", "-           newargs = new String[args.length];", "-           System.arraycopy(args, 0, newargs, 0, args.length);", "-        }  else {", "-            newargs = new String[args.length - 2];", "-            // copy the beginning of the args array", "-            if (argcount > 0 ) {", "-                System.arraycopy(args, 0, newargs, 0 ,argcount);", "-            }", "-            // copy the end of the args array", "-            if ((argcount + 2 < args.length) && argcount > 0) {", "-                System.arraycopy(args, argcount + 2, newargs, argcount, args.length - (argcount + 2));", "-            }", "-        }", "-        StringTokenizer myTokenizer = new StringTokenizer(libPath, System.getProperty(\"path.separator\"));", "-        URL[] classPathJars = new URL[myTokenizer.countTokens()];", "-        int classPathJarCount = 0;", "-        while (myTokenizer.hasMoreElements()) {", "-            String token = myTokenizer.nextToken();", "-            classPathJars[classPathJarCount++] = new File(token).toURL();", "+        if (libPaths.size() == 0) {", "+            newArgs = args;", "+        } else {", "+            newArgs = (String[]) argList.toArray(new String[0]);", "+        }", "+", "+        List libPathURLs = new ArrayList();", "+        for (Iterator i = libPaths.iterator(); i.hasNext();) {", "+            String libPath = (String) i.next();", "+            StringTokenizer myTokenizer", "+                = new StringTokenizer(libPath, System.getProperty(\"path.separator\"));", "+            while (myTokenizer.hasMoreElements()) {", "+                File element = new File(myTokenizer.nextToken());", "+                if (element.isDirectory()) {", "+                    // add any jars in the directory", "+                    URL[] dirURLs = Locator.getLocationURLs(element);", "+                    for (int j = 0; j < dirURLs.length; ++j) {", "+                        libPathURLs.add(dirURLs[j]);", "+                    }", "+                }", "+                libPathURLs.add(element.toURL());", "+            }", "+        }", "+", "+        URL[] libJars = (URL[])libPathURLs.toArray(new URL[0]);", "-        int numJars = classPathJars.length + userJars.length + systemJars.length;", "+        int numJars = libJars.length + userJars.length + systemJars.length;", "-        System.arraycopy(classPathJars, 0, jars, 0, classPathJars.length);", "-        System.arraycopy(userJars, 0, jars, classPathJars.length, userJars.length);", "-        System.arraycopy(systemJars, 0, jars, userJars.length + classPathJars.length,", "+        System.arraycopy(libJars, 0, jars, 0, libJars.length);", "+        System.arraycopy(userJars, 0, jars, libJars.length, userJars.length);", "+        System.arraycopy(systemJars, 0, jars, userJars.length + libJars.length,", "+        if (baseClassPath.charAt(baseClassPath.length() - 1)", "+                == File.pathSeparatorChar) {", "+            baseClassPath.setLength(baseClassPath.length() - 1);", "+        }", "-            main.startAnt(newargs, null, null);", "+            main.startAnt(newArgs, null, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e849943b0b08a9697c85a85f4a2446a9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "76248d54a131e0eafa34a739f1814ff3e6ae4304", "commitAfterChange": "7ac63c0bc264d9192d38abf2c1f2302c8fdee8f6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["+", "-        if (baseDir == null) {", "-            throw new BuildException(\"basedir attribute must be set!\");", "-        }", "-        if (!baseDir.exists()) {", "-            throw new BuildException(\"basedir does not exist!\");", "-        }", "+        if (baseDir == null && filesets.size() == 0)", "+            throw new BuildException(\"basedir attribute must be set, or at least one fileset must be given!\");", "-        DirectoryScanner ds = super.getDirectoryScanner(baseDir);", "-", "-        String[] files = ds.getIncludedFiles();", "-        String[] dirs  = ds.getIncludedDirectories();", "+        Vector dss = new Vector ();", "+        if (baseDir != null)", "+            dss.addElement(getDirectoryScanner(baseDir));", "+        for (int i=0; i<filesets.size(); i++) {", "+            Object o = filesets.elementAt(i);", "+            FileSet fs;", "+            if (o instanceof FileSet) {", "+                fs = (FileSet) o;", "+            } else {", "+                Reference r = (Reference) o;", "+                o = r.getReferencedObject(project);", "+                if (o instanceof FileSet) {", "+                    fs = (FileSet) o;", "+                } else {", "+                    throw new BuildException(r.getRefId() + \" does not denote a fileset\", location);", "+                }", "+            }", "+            dss.addElement (fs.getDirectoryScanner(project));", "+        }", "+        FileScanner[] scanners = new FileScanner[dss.size()];", "+        dss.copyInto(scanners);", "-        boolean upToDate = true;", "-        for (int i=0; i<files.length && upToDate; i++)", "-            if (new File(baseDir,files[i]).lastModified() > ", "-                zipFile.lastModified())", "-                upToDate = false;", "-        if (upToDate) return;", "+        // can also handle empty archives", "+        if (isUpToDate(scanners, zipFile)) return;", "-        ZipOutputStream zOut = null;", "-        try {", "-            zOut = new ZipOutputStream(new FileOutputStream(zipFile));", "-            if (doCompress) {", "-                zOut.setMethod(ZipOutputStream.DEFLATED);", "-            } else {", "-                zOut.setMethod(ZipOutputStream.STORED);", "-            }", "-            initZipOutputStream(zOut);", "+\ttry {", "+\t    ZipOutputStream zOut = new ZipOutputStream(new FileOutputStream(zipFile));", "+\t    try {", "+\t\tif (doCompress) {", "+\t\t    zOut.setMethod(ZipOutputStream.DEFLATED);", "+\t\t} else {", "+\t\t    zOut.setMethod(ZipOutputStream.STORED);", "+\t\t}", "+\t\tinitZipOutputStream(zOut);", "-            for (int i = 0; i < dirs.length; i++) {", "-                File f = new File(baseDir,dirs[i]);", "-                String name = dirs[i].replace(File.separatorChar,'/')+\"/\";", "-                zipDir(f, zOut, name);", "-            }", "+                // XXX ideally would also enter includedDirectories to the archive", "+\t\tHashtable parentDirs = new Hashtable();", "-            for (int i = 0; i < files.length; i++) {", "-                File f = new File(baseDir,files[i]);", "-                String name = files[i].replace(File.separatorChar,'/');", "-                zipFile(f, zOut, name);", "-            }", "-        } catch (IOException ioe) {", "-            String msg = \"Problem creating \" + archiveType + \" \" + ioe.getMessage();", "+                for (int j = 0; j < scanners.length; j++) {", "+                    String[] files = scanners[j].getIncludedFiles();", "+                    File thisBaseDir = scanners[j].getBasedir();", "+                    for (int i = 0; i < files.length; i++) {", "+                        File f = new File(thisBaseDir,files[i]);", "+                        String name = files[i].replace(File.separatorChar,'/');", "+                        // Look for & create parent dirs as needed.", "+                        int slashPos = -1;", "+                        while ((slashPos = name.indexOf((int)'/', slashPos + 1)) != -1) {", "+                            String dir = name.substring(0, slashPos);", "+                            if (!parentDirs.contains(dir)) {", "+                                parentDirs.put(dir, dir);", "+                                zipDir(new File(thisBaseDir, dir.replace('/', File.separatorChar)),", "+                                       zOut, dir + '/');", "+                            }", "+                        }", "+                        zipFile(f, zOut, name);", "+                    }", "+                }", "+\t    } finally {", "+\t\tzOut.close ();", "+\t    }", "+\t} catch (IOException ioe) {", "+\t    String msg = \"Problem creating \" + archiveType + \": \" + ioe.getMessage();", "-\t    if (zOut != null) {", "-\t        try {", "-\t            zOut.close();", "-                    zOut = null;", "-\t        } catch (IOException e) {}", "-                if (!zipFile.delete()) {", "-                    msg = zipFile + \" is probably corrupt but I could not delete it\";", "-                }", "-            }", "+\t    if (!zipFile.delete()) {", "+\t\tmsg += \" (and the archive is probably corrupt but I could not delete it)\";", "+\t    }", "-\t} finally {", "-\t    if (zOut != null) {", "-\t        try {", "-                    // close up", "-\t            zOut.close();", "-\t        }", "-\t        catch (IOException e) {}", "-\t    }"]}]}
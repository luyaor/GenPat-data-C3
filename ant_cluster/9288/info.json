{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "239f1188278d37e385f521abbe0bd901", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bebfc0fea49ac30514e95f419b99f6e3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "b04c338caa73cc14ad6e8b258280426c3522de38", "commitAfterChange": "4c83562c6c9f681cdcd17c86f5e3c68c910dd5f8", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public File normalize(String path)", "signatureAfterChange": "     public File normalize(final String path)", "diff": ["-    public File normalize(String path) {", "-        String orig = path;", "-", "-        path = path.replace('/', File.separatorChar)", "-            .replace('\\\\', File.separatorChar);", "-", "-        // make sure we are dealing with an absolute path", "-        int colon = path.indexOf(\":\");", "-", "-        if (!isAbsolutePath(path)) {", "-            String msg = path + \" is not an absolute path\";", "-            throw new BuildException(msg);", "-        }", "-        boolean dosWithDrive = false;", "-        String root = null;", "-        // Eliminate consecutive slashes after the drive spec", "-        if ((onDos && path.length() >= 2", "-                && Character.isLetter(path.charAt(0))", "-                && path.charAt(1) == ':')", "-            || (onNetWare && colon > -1)) {", "-", "-            dosWithDrive = true;", "-", "-            char[] ca = path.replace('/', '\\\\').toCharArray();", "-            StringBuffer sbRoot = new StringBuffer();", "-            for (int i = 0; i < colon; i++) {", "-                sbRoot.append(Character.toUpperCase(ca[i]));", "-            }", "-            sbRoot.append(':');", "-            if (colon + 1 < path.length()) {", "-                sbRoot.append(File.separatorChar);", "-            }", "-            root = sbRoot.toString();", "-", "-            // Eliminate consecutive slashes after the drive spec", "-            StringBuffer sbPath = new StringBuffer();", "-            for (int i = colon + 1; i < ca.length; i++) {", "-                if ((ca[i] != '\\\\')", "-                    || (ca[i] == '\\\\' && ca[i - 1] != '\\\\')) {", "-                    sbPath.append(ca[i]);", "-                }", "-            }", "-            path = sbPath.toString().replace('\\\\', File.separatorChar);", "-        } else {", "-            if (path.length() == 1) {", "-                root = File.separator;", "-                path = \"\";", "-            } else if (path.charAt(1) == File.separatorChar) {", "-                // UNC drive", "-                root = File.separator + File.separator;", "-                path = path.substring(2);", "-            } else {", "-                root = File.separator;", "-                path = path.substring(1);", "-            }", "-        }", "+    public File normalize(final String path) {", "-        s.push(root);", "-        StringTokenizer tok = new StringTokenizer(path, File.separator);", "+        String[] dissect = dissect(path);", "+        s.push(dissect[0]);", "+", "+        StringTokenizer tok = new StringTokenizer(dissect[1], File.separator);", "-                    throw new BuildException(\"Cannot resolve path \" + orig);", "-                } else {", "-                    s.pop();", "+                    throw new BuildException(\"Cannot resolve path \" + path);", "+                s.pop();", "-        path = sb.toString();", "-        if (dosWithDrive) {", "-            path = path.replace('/', '\\\\');", "+        return new File(sb.toString());", "+    }", "-        return new File(path);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "deb4d778db31be245c5ca3caab812dc1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/common/org/apache/ant/common/util/FileUtils.java", "commitBeforeChange": "7499c443d67445ea8fd0b8f4bd56c72251b18bf4", "commitAfterChange": "b7e43ad8c5906ae2b6d6b42f8b2715dc7d2e7a16", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public File normalize(String path)          throws NullPointerException, GeneralAntException", "signatureAfterChange": "     public File normalize(String path)          throws NullPointerException, ExecutionException", "diff": ["-    public File normalize(String path) ", "-        throws NullPointerException, GeneralAntException {", "-        String orig = path;", "+    public File normalize(String path)", "+         throws NullPointerException, ExecutionException {", "-        path = path.replace('/', File.separatorChar)", "+        String platformPath = path.replace('/', File.separatorChar)", "-        if (!path.startsWith(File.separator) &&", "-            !(path.length() >= 2 &&", "-            Character.isLetter(path.charAt(0)) &&", "-            path.charAt(1) == ':')", "-            ) {", "+        if (!platformPath.startsWith(File.separator) &&", "+            !(platformPath.length() >= 2 &&", "+            Character.isLetter(platformPath.charAt(0)) &&", "+            platformPath.charAt(1) == ':')) {", "-            throw new GeneralAntException(msg);", "+            throw new ExecutionException(msg);", "-        if (path.length() >= 2 &&", "-            Character.isLetter(path.charAt(0)) &&", "-            path.charAt(1) == ':') {", "+        if (platformPath.length() >= 2 &&", "+            Character.isLetter(platformPath.charAt(0)) &&", "+            platformPath.charAt(1) == ':') {", "-            char[] ca = path.replace('/', '\\\\').toCharArray();", "+            char[] ca = platformPath.replace('/', '\\\\').toCharArray();", "-            path = sb.toString().replace('\\\\', File.separatorChar);", "-            if (path.length() == 2) {", "-                root = path;", "-                path = \"\";", "+            platformPath = sb.toString().replace('\\\\', File.separatorChar);", "+            if (platformPath.length() == 2) {", "+                root = platformPath;", "+                platformPath = \"\";", "-                root = path.substring(0, 3);", "-                path = path.substring(3);", "+                root = platformPath.substring(0, 3);", "+                platformPath = platformPath.substring(3);", "-            if (path.length() == 1) {", "+            if (platformPath.length() == 1) {", "-                path = \"\";", "-            } else if (path.charAt(1) == File.separatorChar) {", "+                platformPath = \"\";", "+            } else if (platformPath.charAt(1) == File.separatorChar) {", "-                path = path.substring(2);", "+                platformPath = platformPath.substring(2);", "-                path = path.substring(1);", "+                platformPath = platformPath.substring(1);", "-        StringTokenizer tok = new StringTokenizer(path, File.separator);", "+        StringTokenizer tok = new StringTokenizer(platformPath, File.separator);", "-                    throw new GeneralAntException(\"Cannot resolve path \" ", "-                        + orig);", "+                    throw new ExecutionException(\"Cannot resolve path \"", "+                         + path);", "-        path = sb.toString();", "+        platformPath = sb.toString();", "-            path = path.replace('/', '\\\\');", "+            platformPath = platformPath.replace('/', '\\\\');", "-        return new File(path);", "+        return new File(platformPath);"]}]}
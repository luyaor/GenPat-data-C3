{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e8a5fe742e39fc51236f751a2d6bb92", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2111baa5a92673e17d26e96c5bf25275", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/launcher/Main.java", "commitBeforeChange": "321497ad25f76931e5b18e384fbd73ca8d198d92", "commitAfterChange": "ec74722dcd89659e5f1b1241acd59dc3f5978be7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static final void main( final String[] args )         throws Exception", "signatureAfterChange": "     public static final void main( final String[] args )         throws Exception", "diff": ["-            //actually try to discover the install directory based on where", "-            // the myrmidon.jar is", "+            final Map properties = new HashMap();", "+", "+            // Try to discover the install directory based on where the", "+            // launcher Jar is", "-            System.setProperty( \"myrmidon.home\", installDirectory.toString() );", "+            properties.put( \"myrmidon.home\", installDirectory );", "-            final URLClassLoader sharedClassLoader = createSharedClassLoader( installDirectory );", "-            final URLClassLoader classLoader =", "-                createContainerClassLoader( installDirectory, sharedClassLoader );", "+            // Build the shared classloader", "+            final URL[] sharedClassPath = getSharedClassPath( installDirectory );", "+            properties.put( \"myrmidon.shared.classpath\", sharedClassPath );", "+            final URLClassLoader sharedClassLoader = new URLClassLoader( sharedClassPath );", "+            properties.put( \"myrmidon.shared.classloader\", sharedClassLoader );", "-            execMainClass( classLoader, args );", "+            // Build the container classloader", "+            final URL[] containerClassPath = getContainerClassPath( installDirectory );", "+            properties.put( \"myrmidon.container.classpath\", containerClassPath );", "+            final URLClassLoader containerClassLoader = new URLClassLoader( containerClassPath, sharedClassLoader );", "+            properties.put( \"myrmidon.container.classloader\", containerClassLoader );", "+", "+            execMainClass( containerClassLoader, properties, args );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e7a4351435c5ae3bfd3471920b59687", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/deployer/DefaultDeployer.java", "commitBeforeChange": "e7ab62bc9179b392804835d02155e43d3d2cf5d6", "commitAfterChange": "2e6e170fb375181f4438e1de44808c7adab508a2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private URLClassLoader getClassLoaderForFile( final File file )         throws Exception", "signatureAfterChange": "     public TypeDefinition createTypeDefinition( final Configuration configuration )         throws ConfigurationException", "diff": ["-     */", "-    private URLClassLoader getClassLoaderForFile( final File file )", "-        throws Exception", "-    {", "-        final File canonFile = file.getCanonicalFile();", "-", "-        // Locate cached classloader, creating it if necessary", "-        URLClassLoader classLoader = (URLClassLoader)m_fileDeployers.get( canonFile );", "-        if( classLoader == null )", "-        {", "-            checkFile( canonFile );", "-            final File[] extensions = getOptionalPackagesFor( canonFile );", "-            final URL[] urls = buildClasspath( canonFile, extensions );", "-            classLoader = new URLClassLoader( urls, Thread.currentThread().getContextClassLoader() );", "-            m_fileDeployers.put( canonFile, classLoader );", "-        }", "-        return classLoader;", "+     */", "+    public TypeDefinition createTypeDefinition( final Configuration configuration )", "+        throws ConfigurationException", "+        final String converterShorthand = m_roleManager.getNameForRole( Converter.ROLE );", "+        final String roleShorthand = configuration.getName();", "+        if( roleShorthand.equals( converterShorthand ) )", "+            // A converter definition", "+            final String className = configuration.getAttribute( \"classname\" );", "+            final String source = configuration.getAttribute( \"source\" );", "+            final String destination = configuration.getAttribute( \"destination\" );", "+            return new ConverterDefinition( className, source, destination );", "+        else", "+        {", "+            // A type definition", "+            final String typeName = configuration.getAttribute( \"name\" );", "+            final String className = configuration.getAttribute( \"classname\" );", "+            return new TypeDefinition( typeName, roleShorthand, className );", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0a91e98a41bd4eb5118b40e64a8452e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/classloader/DefaultClassLoaderManager.java", "commitBeforeChange": "274da3301287be067b66a5778b27bfa98ef0a662", "commitAfterChange": "b91e4a3c1d8310dea42c2c353ab016d9c5425109", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private ClassLoader buildClassLoader( final ArrayList files )         throws Exception", "signatureAfterChange": "     private ClassLoader buildClassLoader( final OptionalPackage pkg,                                           final Set pending )         throws Exception", "diff": ["-    private ClassLoader buildClassLoader( final ArrayList files )", "+    private ClassLoader buildClassLoader( final OptionalPackage pkg,", "+                                          final Set pending )", "-        final ArrayList allFiles = new ArrayList( files );", "-        final int count = files.size();", "-        for( int i = 0; i < count; i++ )", "+        final File jarFile = pkg.getFile();", "+", "+        // Check for cached classloader", "+        ClassLoader classLoader = (ClassLoader)m_classLoaders.get( jarFile );", "+        if( classLoader != null )", "-            final File file = (File)files.get(i );", "-            checkFile( file );", "-            getOptionalPackagesFor( file, allFiles );", "+            return classLoader;", "-        final URL[] urls = buildClasspath( allFiles );", "-        return new URLClassLoader( urls, m_commonClassLoader );", "+        // Check for cyclic dependency", "+        if( pending.contains( jarFile ) )", "+        {", "+            final String message = REZ.getString( \"dependency-cycle.error\", jarFile );", "+            throw new Exception( message );", "+        }", "+        pending.add( jarFile );", "+", "+        // Build the classloaders for the extensions required by this optional", "+        // package", "+        final ClassLoader[] parentClassLoaders =", "+            buildParentClassLoaders( new OptionalPackage[] { pkg }, pending );", "+", "+        // Create and cache the classloader", "+        final URL[] urls = { jarFile.toURL() };", "+        classLoader = new MultiParentURLClassLoader( urls, parentClassLoaders );", "+        m_classLoaders.put( jarFile, classLoader );", "+        pending.remove( jarFile );", "+        return classLoader;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b130f5e861a7a8a90570556519eefae1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/classloader/DefaultClassLoaderManager.java", "commitBeforeChange": "274da3301287be067b66a5778b27bfa98ef0a662", "commitAfterChange": "b91e4a3c1d8310dea42c2c353ab016d9c5425109", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public ClassLoader createClassLoader( final File[] files ) throws ClassLoaderException", "signatureAfterChange": "     public ClassLoader createClassLoader( final File[] files ) throws ClassLoaderException", "diff": ["-            // Build a list of canonical file names", "-            final ArrayList canonFiles = new ArrayList( files.length );", "-            for( int i = 0; i < files.length; i++ )", "+            if( files == null || files.length == 0 )", "-                canonFiles.add( files[ i ].getCanonicalFile() );", "+                return m_commonClassLoader;", "-            // Locate cached classloader, creating it if necessary", "-            ClassLoader classLoader = (ClassLoader)m_fileDeployers.get( canonFiles );", "-            if( classLoader == null )", "+            // Build a list of optional packages for the files", "+            final OptionalPackage[] packages = new OptionalPackage[ files.length ];", "+            for( int i = 0; i < files.length; i++ )", "-                classLoader = buildClassLoader( canonFiles );", "-                m_fileDeployers.put( canonFiles, classLoader );", "+                final File canonFile = files[ i ].getCanonicalFile();", "+                checkFile( canonFile );", "+                packages[ i ] = toOptionalPackage( canonFile );", "-            return classLoader;", "+", "+            // Build the classloaders for the required extensions", "+            final ClassLoader[] parentClassLoaders = buildParentClassLoaders( packages, new HashSet() );", "+", "+            // Build the classloader", "+            final URL[] urls = buildClasspath( files );", "+            return new MultiParentURLClassLoader( urls, parentClassLoaders );", "-            final String message = REZ.getString( \"create-classloader-for-file.error\", fileNames );", "+            final String message = REZ.getString( \"create-classloader-for-files.error\", fileNames );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4a09ef49e01180f08e41e5ea7955695", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/classloader/DefaultClassLoaderManager.java", "commitBeforeChange": "62562693ac733d0697b5a522972f36ea5570225c", "commitAfterChange": "a816a71d9e2587a83890f499dd2cabb7c6e02889", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public ClassLoader createClassLoader( File file ) throws DeploymentException", "signatureAfterChange": "     public ClassLoader createClassLoader( final File[] files ) throws ClassLoaderException", "diff": ["-    public ClassLoader createClassLoader( File file ) throws DeploymentException", "+     */", "+    public ClassLoader createClassLoader( final File[] files ) throws ClassLoaderException", "-            final File canonFile = file.getCanonicalFile();", "+            // Build a list of canonical file names", "+            final ArrayList canonFiles = new ArrayList( files.length );", "+            for( int i = 0; i < files.length; i++ )", "+            {", "+                canonFiles.add( files[ i ].getCanonicalFile() );", "+            }", "-            URLClassLoader classLoader = (URLClassLoader)m_fileDeployers.get( canonFile );", "+            ClassLoader classLoader = (ClassLoader)m_fileDeployers.get( canonFiles );", "-                checkFile( canonFile );", "-                final File[] extensions = getOptionalPackagesFor( canonFile );", "-                final URL[] urls = buildClasspath( canonFile, extensions );", "-                classLoader = new URLClassLoader( urls, m_baseClassLoader );", "-                m_fileDeployers.put( canonFile, classLoader );", "+                classLoader = buildClassLoader( canonFiles );", "+                m_fileDeployers.put( canonFiles, classLoader );", "-        catch( Exception e )", "+        catch( final Exception e )", "-            final String message = REZ.getString( \"create-classloader-for-file.error\", file );", "-            throw new DeploymentException( message );", "+            final String fileNames = PathUtil.formatPath( files );", "+            final String message = REZ.getString( \"create-classloader-for-file.error\", fileNames );", "+            throw new ClassLoaderException( message, e );", "+    }"]}]}
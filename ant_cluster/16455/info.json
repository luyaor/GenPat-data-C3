{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4429b63e7ed424f0e4ec4d366c2be54d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "835f785c3a3e9b366646e9296fec0f43", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/DependSet.java", "commitBeforeChange": "3fd5d9ba323b0d4cf83368085be5c9103d97f7f5", "commitAfterChange": "d8a41c88bee05a818356bf6f4f16f31ccc43940e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-", "-        if ((sourceFileSets.size() == 0) && (sourceFileLists.size() == 0)) {", "-          throw new BuildException(\"At least one <srcfileset> or <srcfilelist>\"", "-                                   + \" element must be set\");", "+        if (sources == null) {", "+          throw new BuildException(", "+              \"At least one set of source resources must be specified\");", "-        if ((targetFileSets.size() == 0) && (targetFileLists.size() == 0)) {", "-          throw new BuildException(\"At least one <targetfileset> or\"", "-                                   + \" <targetfilelist> element must be set\");", "+        if (targets == null) {", "+          throw new BuildException(", "+              \"At least one set of target files must be specified\");", "-        long now = (new Date()).getTime();", "-        /*", "-          We have to munge the time to allow for the filesystem time", "-          granularity.", "-        */", "-        now += FILE_UTILS.getFileTimestampGranularity();", "-", "-        // Grab all the target files specified via filesets:", "-        Vector allTargets = new Vector();", "-        long oldestTargetTime = 0;", "-        File oldestTarget = null;", "-        Enumeration enumTargetSets = targetFileSets.elements();", "-        while (enumTargetSets.hasMoreElements()) {", "-", "-           FileSet targetFS          = (FileSet) enumTargetSets.nextElement();", "-           if (!targetFS.getDir(getProject()).exists()) {", "-               // this is the same as if it was empty, no target files found", "-               continue;", "-           }", "-           DirectoryScanner targetDS = targetFS.getDirectoryScanner(getProject());", "-           String[] targetFiles      = targetDS.getIncludedFiles();", "-", "-           for (int i = 0; i < targetFiles.length; i++) {", "-", "-              File dest = new File(targetFS.getDir(getProject()), targetFiles[i]);", "-              allTargets.addElement(dest);", "-", "-              if (dest.lastModified() > now) {", "-                 log(\"Warning: \" + targetFiles[i] + \" modified in the future.\",", "-                     Project.MSG_WARN);", "-              }", "-              if (oldestTarget == null", "-                || dest.lastModified() < oldestTargetTime) {", "-                  oldestTargetTime = dest.lastModified();", "-                  oldestTarget = dest;", "-              }", "-           }", "+        //no sources = nothing to compare; no targets = nothing to delete:", "+        if (sources.size() > 0 && targets.size() > 0 && !uptodate(sources, targets)) {", "+           log(\"Deleting all target files.\", Project.MSG_VERBOSE);", "+           Delete delete = new Delete();", "+           delete.bindToOwner(this);", "+           delete.add(targets);", "+           delete.perform();", "-        // Grab all the target files specified via filelists:", "-        boolean upToDate = true;", "-        Enumeration enumTargetLists = targetFileLists.elements();", "-        while (enumTargetLists.hasMoreElements()) {", "+    }", "-           FileList targetFL    = (FileList) enumTargetLists.nextElement();", "-           String[] targetFiles = targetFL.getFiles(getProject());", "-           for (int i = 0; i < targetFiles.length; i++) {", "-", "-              File dest = new File(targetFL.getDir(getProject()), targetFiles[i]);", "-              if (!dest.exists()) {", "-                 log(targetFiles[i] + \" does not exist.\", Project.MSG_VERBOSE);", "-                 upToDate = false;", "-                 continue;", "-              } else {", "-                 allTargets.addElement(dest);", "-              }", "-              if (dest.lastModified() > now) {", "-                 log(\"Warning: \" + targetFiles[i] + \" modified in the future.\",", "-                     Project.MSG_WARN);", "-              }", "-              if (oldestTarget == null", "-                  || dest.lastModified() < oldestTargetTime) {", "-                  oldestTargetTime = dest.lastModified();", "-                  oldestTarget = dest;", "-              }", "-           }", "-        if (oldestTarget != null) {", "-            log(oldestTarget + \" is oldest target file\", Project.MSG_VERBOSE);", "-        } else {", "-            // no target files, then we cannot remove any target files and", "-            // skip the following tests right away", "-            upToDate = false;", "-        // Check targets vs source files specified via filelists:", "-        if (upToDate) {", "-           Enumeration enumSourceLists = sourceFileLists.elements();", "-           while (upToDate && enumSourceLists.hasMoreElements()) {", "-              FileList sourceFL    = (FileList) enumSourceLists.nextElement();", "-              String[] sourceFiles = sourceFL.getFiles(getProject());", "-", "-              for (int i = 0; upToDate && i < sourceFiles.length; i++) {", "-                 File src = new File(sourceFL.getDir(getProject()), sourceFiles[i]);", "-", "-                 if (src.lastModified() > now) {", "-                    log(\"Warning: \" + sourceFiles[i]", "-                        + \" modified in the future.\", Project.MSG_WARN);", "-                 }", "-                 if (!src.exists()) {", "-                    log(sourceFiles[i] + \" does not exist.\",", "-                        Project.MSG_VERBOSE);", "-                    upToDate = false;", "-                    break;", "-                 }", "-                 if (src.lastModified() > oldestTargetTime) {", "-                    upToDate = false;", "-                    log(oldestTarget + \" is out of date with respect to \"", "-                        + sourceFiles[i], Project.MSG_VERBOSE);", "-                 }", "-              }", "-           }", "-        }", "-        // Check targets vs source files specified via filesets:", "-        if (upToDate) {", "-           Enumeration enumSourceSets = sourceFileSets.elements();", "-           while (upToDate && enumSourceSets.hasMoreElements()) {", "-", "-              FileSet sourceFS          = (FileSet) enumSourceSets.nextElement();", "-              DirectoryScanner sourceDS = sourceFS.getDirectoryScanner(getProject());", "-              String[] sourceFiles      = sourceDS.getIncludedFiles();", "-", "-              for (int i = 0; upToDate && i < sourceFiles.length; i++) {", "-                 File src = new File(sourceFS.getDir(getProject()), sourceFiles[i]);", "-", "-                 if (src.lastModified() > now) {", "-                    log(\"Warning: \" + sourceFiles[i]", "-                        + \" modified in the future.\", Project.MSG_WARN);", "-                 }", "-                 if (src.lastModified() > oldestTargetTime) {", "-                    upToDate = false;", "-                    log(oldestTarget + \" is out of date with respect to \"", "-                        + sourceFiles[i], Project.MSG_VERBOSE);", "-                 }", "-              }", "-           }", "-        }", "-        if (!upToDate) {", "-           log(\"Deleting all target files. \", Project.MSG_VERBOSE);", "-           for (Enumeration e = allTargets.elements(); e.hasMoreElements();) {", "-              File fileToRemove = (File) e.nextElement();", "-              log(\"Deleting file \" + fileToRemove.getAbsolutePath(),", "-                  Project.MSG_VERBOSE);", "-              fileToRemove.delete();", "-           }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcb9628c09a94183d346948515117654", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/DependSet.java", "commitBeforeChange": "a45ed20242bd108126f9f35b642ceee711b4d2e5", "commitAfterChange": "63eed537b696553cbbb7a98f85ab9f8d2e8e8dfa", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["+        long oldestTargetTime = 0;", "+        File oldestTarget = null;", "+              }", "+", "+              if (oldestTarget == null ||", "+                  dest.lastModified() < oldestTargetTime) {", "+                  oldestTargetTime = dest.lastModified();", "+                  oldestTarget = dest;", "-           }", "-        }", "-", "-        //", "-        // Check targets vs source files specified via filesets", "-        //", "-        if (upToDate) {", "-           Enumeration enumSourceSets = sourceFileSets.elements();", "-           while (upToDate && enumSourceSets.hasMoreElements()) {", "-          ", "-              FileSet sourceFS          = (FileSet) enumSourceSets.nextElement();", "-              DirectoryScanner sourceDS = sourceFS.getDirectoryScanner(project);", "-              String[] sourceFiles      = sourceDS.getIncludedFiles();", "-", "-              for (int i=0; upToDate && i < sourceFiles.length; i++) {", "-                 File src = new File(sourceFS.getDir(project), sourceFiles[i]);", "-", "-                 if (src.lastModified() > now) {", "-                    log(\"Warning: \"+sourceFiles[i]+\" modified in the future.\", ", "-                        Project.MSG_WARN);", "-                 }", "-", "-                 Enumeration enumTargets = allTargets.elements();", "-                 while (upToDate && enumTargets.hasMoreElements()) {", "-                 ", "-                    File dest = (File)enumTargets.nextElement();", "-                    if (src.lastModified() > dest.lastModified()) {", "-                       log(dest.getPath() + \" is out of date with respect to \" +", "-                                sourceFiles[i], Project.MSG_VERBOSE);", "-                       upToDate = false;", "-", "-                    }", "-                 }", "+              if (oldestTarget == null ||", "+                  dest.lastModified() < oldestTargetTime) {", "+                  oldestTargetTime = dest.lastModified();", "+                  oldestTarget = dest;", "+        }", "+        if (oldestTarget != null) {", "+            log(oldestTarget + \" is oldest target file\", Project.MSG_VERBOSE);", "+        } else { ", "+            // no target files, then we cannot remove any target files and", "+            // skip the following tests right away", "+            upToDate = false;", "-                 Enumeration enumTargets = allTargets.elements();", "-                 while (upToDate && enumTargets.hasMoreElements()) {", "-                 ", "-                    File dest = (File)enumTargets.nextElement();", "-                    ", "-                    if (src.lastModified() > dest.lastModified()) {", "-                       log(dest.getPath() + \" is out of date with respect to \" +", "-                                sourceFiles[i], Project.MSG_VERBOSE);", "-                       upToDate = false;", "-", "-                    }", "+                 if (src.lastModified() > oldestTargetTime) {", "+                    upToDate = false;", "+                    log(oldestTarget + \" is out of date with respect to \" +", "+                        sourceFiles[i], Project.MSG_VERBOSE);", "+        //", "+        // Check targets vs source files specified via filesets", "+        //", "+        if (upToDate) {", "+           Enumeration enumSourceSets = sourceFileSets.elements();", "+           while (upToDate && enumSourceSets.hasMoreElements()) {", "+          ", "+              FileSet sourceFS          = (FileSet) enumSourceSets.nextElement();", "+              DirectoryScanner sourceDS = sourceFS.getDirectoryScanner(project);", "+              String[] sourceFiles      = sourceDS.getIncludedFiles();", "+", "+              for (int i=0; upToDate && i < sourceFiles.length; i++) {", "+                 File src = new File(sourceFS.getDir(project), sourceFiles[i]);", "+", "+                 if (src.lastModified() > now) {", "+                    log(\"Warning: \"+sourceFiles[i]+\" modified in the future.\", ", "+                        Project.MSG_WARN);", "+                 }", "+", "+                 if (src.lastModified() > oldestTargetTime) {", "+                    upToDate = false;", "+                    log(oldestTarget + \" is out of date with respect to \" +", "+                        sourceFiles[i], Project.MSG_VERBOSE);", "+                 }", "+              }", "+           }", "+        }", "+"]}]}
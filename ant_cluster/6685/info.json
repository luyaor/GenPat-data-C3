{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e22632516e4123307a3555c961d09549", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0da8ca0c1e6abb26a2b98fcf3600438e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/frontends/CLIMain.java", "commitBeforeChange": "c8ae289ddd72e9f5858612fba38393a3c8698c27", "commitAfterChange": "5b87919be6a8db15efe30f2de6e617aba31ef619", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private void doBuild( final Workspace workspace,                           final Project project,                           final ArrayList targets )", "signatureAfterChange": "     private void doBuild( final Workspace workspace,                           final Project project,                           final ArrayList targets )         throws TaskException", "diff": ["+        throws TaskException", "-        try", "-        {", "-            final int targetCount = targets.size();", "+        final int targetCount = targets.size();", "-            //if we didn't specify a target on CLI then choose default", "-            if( 0 == targetCount )", "-            {", "-                workspace.executeProject( project, project.getDefaultTargetName() );", "-            }", "-            else", "-            {", "-                for( int i = 0; i < targetCount; i++ )", "-                {", "-                    workspace.executeProject( project, (String)targets.get( i ) );", "-                }", "-            }", "-        }", "-        catch( final TaskException ae )", "+        //if we didn't specify a target on CLI then choose default", "+        if( 0 == targetCount )", "-            final String message =", "-                REZ.getString( \"build-failed.error\", ExceptionUtil.printStackTrace( ae, 5, true ) );", "-            getLogger().error( message );", "+            workspace.executeProject( project, project.getDefaultTargetName() );", "+        }", "+        else", "+        {", "+            for( int i = 0; i < targetCount; i++ )", "+            {", "+                workspace.executeProject( project, (String)targets.get( i ) );", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "890b678420a77bb0b2495b15ccbf62d1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "af67c9bf8ffc275f7a9c9c74d94dbbf41b51544d", "commitAfterChange": "41bb1f619a5fba02e5a0eb911250ff74c7ee6782", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public static ProjectHelper getProjectHelper()         throws BuildException", "signatureAfterChange": "     public static ProjectHelper getProjectHelper()         throws BuildException", "diff": ["-            try {", "-                // Default", "-                // return new ProjectHelperImpl();", "-                return new ProjectHelper2();", "-            } catch (Throwable e) {", "-                String message = \"Unable to load default ProjectHelper due to \"", "-                    + e.getClass().getName() + \": \" + e.getMessage();", "-                throw new BuildException(message, e);", "-            }", "+            return new ProjectHelper2();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e182a5e287bcfdb1bd9caff1c3ac6346", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/executor/DefaultExecutor.java", "commitBeforeChange": "c8ae289ddd72e9f5858612fba38393a3c8698c27", "commitAfterChange": "5b87919be6a8db15efe30f2de6e617aba31ef619", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected final void doConfigure( final Task task,                                       final Configuration taskModel,                                       final TaskContext taskContext )         throws TaskException", "signatureAfterChange": "     protected final void doConfigure( final Task task,                                       final Configuration taskModel,                                       final TaskContext taskContext )         throws ConfigurationException", "diff": ["-        throws TaskException", "+        throws ConfigurationException", "-        try", "-        {", "-            m_configurer.configure( task, taskModel, taskContext );", "-        }", "-        catch( final Throwable throwable )", "-        {", "-            final String message =", "-                REZ.getString( \"config.error\",", "-                               taskModel.getName(),", "-                               taskModel.getLocation() );", "-            throw new TaskException( message, throwable );", "-        }", "+        m_configurer.configure( task, taskModel, taskContext );"]}]}
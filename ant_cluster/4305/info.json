{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "14d521bcb9f44fb43d33a0d0c17b52ee", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4da6b1e62746269df01c0980ed19f8d6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/frontends/CLIMain.java", "commitBeforeChange": "8b39211862c5a0b88ce5764bbc1682a89fd02895", "commitAfterChange": "8b4b896303cebb9f6f054254131e248da36b454b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private CLOptionDescriptor[] createCLOptions()", "signatureAfterChange": "     private CLOptionDescriptor[] createCLOptions()", "diff": ["-        final CLOptionDescriptor[] options = new CLOptionDescriptor[ 13 ];", "-        options[ 0 ] =", "+        final CLOptionDescriptor[] options = {", "-                                    INFO_OPT_INCOMPAT );", "-        options[ 1 ] =", "+                                    INFO_OPT_INCOMPAT ),", "-                                    REZ.getString( \"file.opt\" ) );", "-        options[ 2 ] =", "+                                    REZ.getString( \"file.opt\" ) ),", "-                                    LOG_OPT_INCOMPAT );", "-        options[ 3 ] =", "+                                    LOG_OPT_INCOMPAT ),", "-                                    LOG_OPT_INCOMPAT );", "-        options[ 4 ] =", "+                                    LOG_OPT_INCOMPAT ),", "-                                    LOG_OPT_INCOMPAT );", "-        options[ 5 ] =", "+                                    LOG_OPT_INCOMPAT ),", "-                                    REZ.getString( \"listener.opt\" ) );", "-        options[ 6 ] =", "+                                    REZ.getString( \"listener.opt\" ),", "+                                    LISTENER_OPT_INCOMPAT ),", "+            new CLOptionDescriptor( \"noprefix\",", "+                                    CLOptionDescriptor.ARGUMENT_DISALLOWED,", "+                                    NO_PREFIX_OPT,", "+                                    REZ.getString( \"noprefix.opt\" ),", "+                                    LISTENER_OPT_INCOMPAT ),", "-                                    INFO_OPT_INCOMPAT );", "-", "-        options[ 7 ] =", "+                                    INFO_OPT_INCOMPAT ),", "-                                    REZ.getString( \"tasklib.opt\" ) );", "-        options[ 8 ] =", "+                                    REZ.getString( \"tasklib.opt\" ) ),", "-                                    REZ.getString( \"incremental.opt\" ) );", "-        options[ 9 ] =", "+                                    REZ.getString( \"incremental.opt\" ) ),", "-                                    REZ.getString( \"home.opt\" ) );", "-        options[ 10 ] =", "+                                    REZ.getString( \"home.opt\" ) ),", "-                                    new int[ 0 ] );", "-        options[ 11 ] =", "+                                    new int[ 0 ] ),", "-                                    REZ.getString( \"build.opt\" ) );", "-        options[ 12 ] =", "+                                    REZ.getString( \"build.opt\" ) ),", "-                                    REZ.getString( \"dry-run.opt\" ) );", "+                                    REZ.getString( \"dry-run.opt\" ) )", "+        };", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "738777d6ec9edc15879a066508fbcd19", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/antlib/AntLibrary.java", "commitBeforeChange": "408a4c09b05e9710ce19870d99a5ef79ea9c82a7", "commitAfterChange": "8e684f3e6e608fb3d36212faea4c1c7ad80f4323", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public AntLibrary(int defType, String componentName, Class componentClass)", "signatureAfterChange": "     public AntLibDefinition getDefinition(String definitionName)", "diff": ["-     */", "-    public AntLibrary(int defType, String componentName, Class componentClass) {", "-        this.libraryId = \"_internal\" + (implicitLibCount++);", "-        this.definitions = new HashMap();", "-        AntLibDefinition definition = new AntLibDefinition(defType,", "-            componentName, componentClass.getName());", "-        this.definitions.put(componentName, definition);", "-        this.isolated = false;", "-        this.factoryClassName = null;", "-        this.definitionURL = null;", "-        loader = componentClass.getClassLoader();", "-    }", "+     */", "+    public AntLibDefinition getDefinition(String definitionName) {", "+        return (AntLibDefinition)definitions.get(definitionName);"]}]}
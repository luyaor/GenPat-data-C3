{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "72e00cc968fec7809b9d3df55d97182f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9724ff2b2b042a6b6f5c2ec901a93490", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "a1e34e70c48a1ca625ff9769b4f1af4979566db6", "commitAfterChange": "86b59ef90ab835a88e013bda195c6c2039e2715d", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 41, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-    public void execute() throws BuildException {", "-        ClassLoader mirrorLoader;", "+     */", "+    public void execute() throws BuildException {", "+        setupJUnitDelegate();", "-            deleteClassLoader();", "-            if (mirrorLoader instanceof SplitLoader) {", "-                ((SplitLoader) mirrorLoader).cleanup();", "-            }", "-            delegate = null;", "+            cleanup();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa8e3463a3ccda65d678a0996f0bc8b1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "fdade0537c4628290168a365b9a14d28c3e32b72", "commitAfterChange": "9af46a2ca05b7e2da738a1688ff679445f2c1a6e", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 38, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+        ClassLoader myLoader = JUnitTask.class.getClassLoader();", "+        ClassLoader mirrorLoader;", "+        if (splitJunit) {", "+            Path path = new Path(getProject());", "+            path.add(antRuntimeClasses);", "+            path.add(getCommandline().getClasspath());", "+            mirrorLoader = new SplitLoader(myLoader, path);", "+        } else {", "+            mirrorLoader = myLoader;", "+        }", "+        delegate = createMirror(this, mirrorLoader);", "+", "+            if (mirrorLoader instanceof SplitLoader) {", "+                ((SplitLoader) mirrorLoader).cleanup();", "+            }", "+            delegate = null;"]}]}
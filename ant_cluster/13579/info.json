{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e4f7bf5d4c5481ecce12c6153e049927", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94523e26a17e838cbcd9af7f27a26d38", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "92ba08996fc4224f2653057f06bfc7fefb72a81b", "commitAfterChange": "10c41029aeaba31241f1a85f9b02591b357e20b6", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "       protected Process exec() throws IOException", "signatureAfterChange": "       protected Process exec() throws IOException", "diff": ["-        String userDir = System.getProperty(\"user.dir\");", "-        try {", "-            if (myos.equals(\"Mac OS\") && workingDirectory != null) {", "-                System.getProperties().put(\"user.dir\", ", "-                                           workingDirectory.getAbsolutePath());", "-            }", "-", "-            return Runtime.getRuntime().exec(getCommandline(), getEnvironment());", "-        } finally {", "-            if (myos.equals(\"Mac OS\") && workingDirectory != null) {", "-                System.getProperties().put(\"user.dir\", userDir);", "-            }", "-        }", "+\tif (workingDirectory == null) {", "+\t    // Easy.", "+\t    return Runtime.getRuntime().exec(cmdl, getEnvironment());", "+\t} else if (execWithCWD != null) {", "+\t    // The best way to set cwd, if you have JDK 1.3.", "+\t    try {", "+\t\tObject[] arguments = new Object[] {getCommandline(), getEnvironment(), workingDirectory};", "+\t\treturn (Process)execWithCWD.invoke(Runtime.getRuntime(), arguments);", "+            } catch (InvocationTargetException ite) {", "+                Throwable t = ite.getTargetException();", "+                if (t instanceof ThreadDeath) {", "+                    throw (ThreadDeath)t;", "+                } else if (t instanceof IOException) {", "+                    throw (IOException)t;", "+                } else {", "+                    throw new IOException(t.toString());", "+                }", "+\t    } catch (Exception e) {", "+\t\t// IllegalAccess, IllegalArgument, ClassCast", "+\t\tthrow new IOException(e.toString());", "+\t    }", "+\t} else if (myos.equals(\"Mac OS\")) {", "+\t    // Dubious Mac hack.", "+\t    System.getProperties().put(\"user.dir\", ", "+\t\t\t\t       workingDirectory.getAbsolutePath());", "+\t    try {", "+\t\treturn Runtime.getRuntime().exec(cmdl, getEnvironment());", "+\t    } finally {", "+                System.getProperties().put(\"user.dir\", antWorkingDirectory);", "+\t    }", "+\t} else if (myos.toLowerCase().indexOf(\"windows\") >= 0 &&", "+\t\t   (myos.toLowerCase().indexOf(\"nt\") >= 0 ||", "+\t\t    myos.indexOf(\"2000\") >= 0)) {", "+\t    // cmd /c cd works OK on Windows NT & friends.", "+\t    String[] commandLine = new String[cmdl.length+5];", "+\t    commandLine[0] = \"cmd\";", "+\t    commandLine[1] = \"/c\";", "+\t    commandLine[2] = \"cd\";", "+\t    commandLine[3] = workingDirectory.getAbsolutePath();", "+\t    commandLine[4] = \"&&\";", "+\t    System.arraycopy(cmdl, 0, commandLine, 5, cmdl.length);", "+\t    return Runtime.getRuntime().exec(commandLine, getEnvironment());", "+\t} else {", "+\t    // Fallback to the antRun wrapper script (POSIX, Win95/98, etc.):", "+\t    String[] commandLine = new String[cmdl.length+2];", "+\t    commandLine[0] = antRun;", "+\t    commandLine[1] = workingDirectory.getAbsolutePath();", "+\t    System.arraycopy(cmdl, 0, commandLine, 2, cmdl.length);", "+\t    return Runtime.getRuntime().exec(commandLine, getEnvironment());", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfac148a534c814c62157a855c1acc87", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "9bab4dab1ab3b86354929a1929906fe471d9fa93", "commitAfterChange": "e47b4d5aca65c519f01afabb9479b8443abd2ccf", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 19, "signatureBeforeChange": "       protected Process exec() throws IOException", "signatureAfterChange": "         public Process exec(Project project, String[] cmd, String[] env, File workingDir) throws IOException", "diff": ["-", "-    protected Process exec() throws IOException {", "-\tif (workingDirectory == null) {", "-\t    // Easy.", "-\t    return Runtime.getRuntime().exec(cmdl, getEnvironment());", "-\t} else if (execWithCWD != null) {", "-\t    // The best way to set cwd, if you have JDK 1.3.", "-\t    try {", "-\t\tObject[] arguments = new Object[] {getCommandline(), getEnvironment(), workingDirectory};", "-\t\treturn (Process)execWithCWD.invoke(Runtime.getRuntime(), arguments);", "-            } catch (InvocationTargetException ite) {", "-                Throwable t = ite.getTargetException();", "-                if (t instanceof ThreadDeath) {", "-                    throw (ThreadDeath)t;", "-                } else if (t instanceof IOException) {", "-                    throw (IOException)t;", "-                } else {", "-                    throw new IOException(t.toString());", "-                }", "-\t    } catch (Exception e) {", "-\t\t// IllegalAccess, IllegalArgument, ClassCast", "-\t\tthrow new IOException(e.toString());", "-\t    }", "-\t} else if (myos.equals(\"Mac OS\")) {", "-\t    // Dubious Mac hack.", "-\t    System.getProperties().put(\"user.dir\", ", "-\t\t\t\t       workingDirectory.getAbsolutePath());", "-\t    try {", "-\t\treturn Runtime.getRuntime().exec(cmdl, getEnvironment());", "-\t    } finally {", "-                System.getProperties().put(\"user.dir\", antWorkingDirectory);", "-\t    }", "-\t} else if ((myos.toLowerCase().indexOf(\"windows\") >= 0 &&", "-                       (myos.toLowerCase().indexOf(\"nt\") >= 0 ||", "-                        myos.indexOf(\"2000\") >= 0))", "-                      // cmd /c cd works OK on Windows NT & friends.", "-                   || myos.toLowerCase().indexOf(\"os/2\") >= 0", "-                      // as well as on OS/2", "-                   ) {", "-\t    String[] commandLine = new String[cmdl.length+5];", "-\t    commandLine[0] = \"cmd\";", "-\t    commandLine[1] = \"/c\";", "-\t    commandLine[2] = \"cd\";", "-\t    commandLine[3] = workingDirectory.getAbsolutePath();", "-\t    commandLine[4] = \"&&\";", "-\t    System.arraycopy(cmdl, 0, commandLine, 5, cmdl.length);", "-\t    return Runtime.getRuntime().exec(commandLine, getEnvironment());", "-\t} else {", "-\t    // Fallback to the antRun wrapper script (POSIX, Win95/98, etc.):", "-\t    String[] commandLine = new String[cmdl.length+2];", "-\t    commandLine[0] = antRun;", "-\t    commandLine[1] = workingDirectory.getAbsolutePath();", "-\t    System.arraycopy(cmdl, 0, commandLine, 2, cmdl.length);", "-\t    return Runtime.getRuntime().exec(commandLine, getEnvironment());", "-\t}", "-    }", "+         */", "+        public Process exec(Project project, String[] cmd, String[] env, File workingDir) throws IOException", "+        {", "+ \t    try {", "+\t\tObject[] arguments = { cmd, env, workingDir };", "+\t\treturn (Process)_execWithCWD.invoke(Runtime.getRuntime(), arguments);", "+            } ", "+            catch ( InvocationTargetException exc ) {", "+                Throwable realexc = exc.getTargetException();", "+                if ( realexc instanceof ThreadDeath ) {", "+                    throw (ThreadDeath)realexc;", "+                } ", "+                else if ( realexc instanceof IOException ) {", "+                    throw (IOException)realexc;", "+                } ", "+                else {", "+                    throw new IOException(realexc.getMessage());", "+                }", "+\t    } ", "+            catch ( Exception exc ) {", "+\t\t// IllegalAccess, IllegalArgument, ClassCast", "+\t\tthrow new IOException(exc.getMessage());", "+\t    }", "+        }"]}]}
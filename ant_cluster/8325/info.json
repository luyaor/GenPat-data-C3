{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1364f2bd49500a489481b3d34ad17162", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7444bfc7cea09269a4badac8d6e09593", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/ZipExtraFieldTest.java", "commitBeforeChange": "b505179217b41dec4666a905a5398c1dd5b6b390", "commitAfterChange": "ef4c94df7d5faabb65e7dbec22043cb0cb7a31d8", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testPreservesExtraFields() throws IOException", "signatureAfterChange": "      public void testPreservesExtraFields() throws IOException", "diff": ["+        testExtraField(new Zip(), true);", "+    }", "-            Zip testInstance = new Zip();", "-            assertEquals(2, ze.getExtraFields().length);", "-            assertTrue(ze.getExtraFields()[1]", "-                       instanceof Zip64ExtendedInformationExtraField);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec79c995d16648bcb686c502d0880432", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "3ce64dd501a7e5dfd84967399cc4c68c643de810", "commitAfterChange": "b941f2ef443cbbaec2b995b3c34958067c4979c3", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 45, "signatureBeforeChange": "     private ResourceCollection validate()", "signatureAfterChange": "     private void validate()", "diff": ["-     */", "-    private ResourceCollection validate() {", "-", "-        // treat empty nested text as no text", "-        sanitizeText();", "-", "-        // if binary check if incompatible attributes are used", "-        if (binary) {", "-            if (destinationFile == null) {", "-                throw new BuildException(", "-                    \"destfile attribute is required for binary concatenation\");", "-            }", "-            if (textBuffer != null) {", "-                throw new BuildException(", "-                    \"Nested text is incompatible with binary concatenation\");", "-            }", "-            if (encoding != null || outputEncoding != null) {", "-                throw new BuildException(", "-                    \"Seting input or output encoding is incompatible with binary\"", "-                    + \" concatenation\");", "-            }", "-            if (filterChains != null) {", "-                throw new BuildException(", "-                    \"Setting filters is incompatible with binary concatenation\");", "-            }", "-            if (fixLastLine) {", "-                throw new BuildException(", "-                    \"Setting fixlastline is incompatible with binary concatenation\");", "-            }", "-            if (header != null || footer != null) {", "-                throw new BuildException(", "-                    \"Nested header or footer is incompatible with binary concatenation\");", "-            }", "-        }", "-        if (destinationFile != null && outputWriter != null) {", "-            throw new BuildException(", "-                \"Cannot specify both a destination file and an output writer\");", "-        }", "-        // Sanity check our inputs.", "-        if (rc == null && textBuffer == null) {", "-            // Nothing to concatenate!", "-            throw new BuildException(", "-                \"At least one resource must be provided, or some text.\");", "-        }", "-        if (rc != null) {", "-            // If using resources, disallow inline text. This is similar to", "-            // using GNU 'cat' with file arguments -- stdin is simply", "-            // ignored.", "-            if (textBuffer != null) {", "-                throw new BuildException(", "-                    \"Cannot include inline text when using resources.\");", "-            }", "-            Restrict noexistRc = new Restrict();", "-            noexistRc.add(NOT_EXISTS);", "-            noexistRc.add(rc);", "-            for (Iterator i = noexistRc.iterator(); i.hasNext();) {", "-                log(i.next() + \" does not exist.\", Project.MSG_ERR);", "-            }", "-            if (destinationFile != null) {", "-                for (Iterator i = rc.iterator(); i.hasNext();) {", "-                    Object o = i.next();", "-                    if (o instanceof FileResource) {", "-                        File f = ((FileResource) o).getFile();", "-                        if (FILE_UTILS.fileNameEquals(f, destinationFile)) {", "-                            throw new BuildException(\"Input file \\\"\"", "-                                + f + \"\\\" is the same as the output file.\");", "-                        }", "-                    }", "-                }", "-            }", "-            Restrict existRc = new Restrict();", "-            existRc.add(EXISTS);", "-            existRc.add(rc);", "-            boolean outofdate = destinationFile == null || forceOverwrite;", "-            if (!outofdate) {", "-                for (Iterator i = existRc.iterator(); !outofdate && i.hasNext();) {", "-                    Resource r = (Resource) i.next();", "-                    outofdate =", "-                        (r.getLastModified() == 0L", "-                         || r.getLastModified() > destinationFile.lastModified());", "-                }", "-            }", "-            if (!outofdate) {", "-                log(destinationFile + \" is up-to-date.\", Project.MSG_VERBOSE);", "-                return null; // no need to do anything", "-            }", "-            return existRc;", "-        } else {", "-            StringResource s = new StringResource();", "-            s.setProject(getProject());", "-            s.setValue(textBuffer.toString());", "-            return s;", "-        }", "-    }", "+     */", "+    private void validate() {", "+", "+        // treat empty nested text as no text", "+        sanitizeText();", "+", "+        // if binary check if incompatible attributes are used", "+        if (binary) {", "+            if (textBuffer != null) {", "+                throw new BuildException(", "+                    \"Nested text is incompatible with binary concatenation\");", "+            }", "+            if (encoding != null || outputEncoding != null) {", "+                throw new BuildException(", "+                    \"Setting input or output encoding is incompatible with binary\"", "+                    + \" concatenation\");", "+            }", "+            if (filterChains != null) {", "+                throw new BuildException(", "+                    \"Setting filters is incompatible with binary concatenation\");", "+            }", "+            if (fixLastLine) {", "+                throw new BuildException(", "+                    \"Setting fixlastline is incompatible with binary concatenation\");", "+            }", "+            if (header != null || footer != null) {", "+                throw new BuildException(", "+                    \"Nested header or footer is incompatible with binary concatenation\");", "+            }", "+        }", "+        if (destinationFile != null && outputWriter != null) {", "+            throw new BuildException(", "+                \"Cannot specify both a destination file and an output writer\");", "+        }", "+        // Sanity check our inputs.", "+        if (rc == null && textBuffer == null) {", "+            // Nothing to concatenate!", "+            throw new BuildException(", "+                \"At least one resource must be provided, or some text.\");", "+        }", "+        if (rc != null && textBuffer != null) {", "+            // If using resources, disallow inline text. This is similar to", "+            // using GNU 'cat' with file arguments--stdin is simply ignored.", "+            throw new BuildException(", "+                \"Cannot include inline text when using resources.\");", "+        }", "+    }"]}]}
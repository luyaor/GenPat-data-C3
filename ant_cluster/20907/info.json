{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3b66671210c4da9894f4c34d23537a9c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e6412491c2a8da5e3808829b11e4b71", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "46534f2b3d9b703e570c263eaeabf4f874513abf", "commitAfterChange": "b139901cab374b10e2f73a58769fb4ef1c2837bd", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public static void main(String[] args)", "signatureAfterChange": "      public static void main(String[] args)", "diff": ["-                 * uses -Dname=value. However, the JDK goes ahead", "-                 * and parses this out to args {\"-Dname\", \"value\"}", "+                 * uses -Dname=value. However, in some cases, the JDK", "+                 * goes ahead * and parses this out to args ", "+                 *   {\"-Dname\", \"value\"}", "+                 *", "+                 * I don't know how to predict when the JDK is going", "+                 * to help or not, so we simply look for the equals sign.", "-                String value = args[++i];", "+                String value = null;", "+                int posEq = name.indexOf(\"=\");", "+                if (posEq > 0) {", "+                    value = name.substring(posEq+1);", "+                    name = name.substring(0, posEq);", "+                } else if (i < args.length)", "+                    value = args[++i];", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ad5ff05806a435369d9e9f9f9f5db18", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/launch/Locator.java", "commitBeforeChange": "4b62dd00017c5be577d5e8cd4615e691e207bf8b", "commitAfterChange": "5e4d3d0c93a57c8ead35236c6e444d78897f427f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public static String fromURI(String uri)", "signatureAfterChange": "     public static String fromURI(String uri)", "diff": ["+            String cwd = System.getProperty(\"user.dir\");", "+            int posi = cwd.indexOf(\":\");", "+            if ((posi > 0) && path.startsWith(File.separator)) {", "+               path = cwd.substring(0, posi + 1) + path; ", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6933afe9780de14aee95be0fa1c4ddc6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/depend/bcel/DependencyVisitor.java", "commitBeforeChange": "ffd2a2d7c25b78eb5f50c182312acb9dcf01ccda", "commitAfterChange": "5722812dbe0cfda11a528c3e6c32b2b2b67b7960", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void visitConstantNameAndType(ConstantNameAndType obj)", "signatureAfterChange": "     public void visitConstantNameAndType(ConstantNameAndType obj)", "diff": ["-            addClass(classname);", "-            int index = classname.lastIndexOf(\".\");", "-            if (index != -1) {", "-                classname = classname.substring(0, index) + \"$\" +", "-                            classname.substring(index + 1);", "+            // does the class have a package structure", "+            int index = classname.lastIndexOf(\".\");            ", "+            if (index > 0) {", "+                char start;", "+                // check if the package structure is more than 1 level deep", "+                int index2 = classname.lastIndexOf(\".\", index -1);", "+                if (index2 != -1) {", "+                    // class name has more than 1 package level 'com.company.Class'", "+                    start = classname.charAt(index2 + 1);", "+                }", "+                else {", "+                    // class name has only 1 package level 'package.Class'", "+                    start = classname.charAt(0);", "+                }", "+                // Check to see if it's an inner class 'com.company.Class$Inner'", "+                if ((start > 0x40) && (start < 0x5B)) {", "+                    // first letter of the previous segment of the class name 'Class'", "+                    // is upper case ascii. so according to the spec it's an inner class", "+                    classname = classname.substring(0, index) + \"$\" +", "+                            classname.substring(index + 1);                            ", "+                    addClass(classname);", "+                }", "+                else {", "+                    // Add the class in dotted notation 'com.company.Class'                       ", "+                    addClass(classname);", "+                }                    ", "+            }", "+            else {               ", "+                // Add a class with no package 'Class'"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2b81b415e99bc35b9e8770ddfc1c0a3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "9de9f96130722fdc5761aa186dd87e7fbe84f994", "commitAfterChange": "f948bb98aabcf47939c53e349b1a054f00ecc833", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "      private NestedCreator getNestedCreator(Project project, Object parent,         String elementName) throws BuildException", "signatureAfterChange": "      private NestedCreator getNestedCreator(         Project project, String parentUri, Object parent,         String elementName) throws BuildException", "diff": ["-    private NestedCreator getNestedCreator(Project project, Object parent,", "-        String elementName) throws BuildException {", "-", "-        NestedCreator nc = (NestedCreator) nestedCreators.get(", "-            elementName.toLowerCase(Locale.US));", "-        if (nc == null) {", "-            nc = createAddTypeCreator(project, parent, elementName);", "-        }", "-        if (nc == null && parent instanceof DynamicConfigurator) {", "-            DynamicConfigurator dc = (DynamicConfigurator) parent;", "-            final Object nestedElement = dc.createDynamicElement(elementName);", "-            if (nestedElement != null) {", "-                nc = new NestedCreator() {", "-                    public boolean isPolyMorphic() {", "-                        return false;", "-                    }", "-                    public Class getElementClass() {", "-                        return null;", "-                    }", "-", "-                    public Object getRealObject() {", "-                        return null;", "-                    }", "-", "-                    public Object create(", "-                        Project project, Object parent, Object ignore) {", "-                        return nestedElement;", "-                    }", "-                    public void store(Object parent, Object child) {", "-                    }", "-                };", "-            }", "-        }", "-        if (nc == null) {", "-            throwNotSupported(project, parent, elementName);", "-        }", "-        return nc;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f036cc951a208da966880d347727f652", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Sync.java", "commitBeforeChange": "b1cc0a4edb49ab8e1155a6a9394a980a0196f454", "commitAfterChange": "7b84ae34e5dda8ff45d94e73e2537b369d1dedf1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void execute()         throws BuildException", "signatureAfterChange": "     public void execute()         throws BuildException", "diff": ["+        // will hold the directories matched by SyncTarget in reversed", "+        // lexicographic order (order is important, that's why we use", "+        // a LinkedHashSet", "+        Set preservedDirectories = new LinkedHashSet();", "+", "-        int[] removedFileCount = removeOrphanFiles(allFiles, toDir);", "+        int[] removedFileCount = removeOrphanFiles(allFiles, toDir,", "+                                                   preservedDirectories);", "-        if (!myCopy.getIncludeEmptyDirs()) {", "+        if (!myCopy.getIncludeEmptyDirs()", "+            || (syncTarget != null", "+                && syncTarget.getPreserveEmptyDirs() == Boolean.FALSE)) {", "-            int removedDirCount = removeEmptyDirectories(toDir, false);", "+", "+            int removedDirCount = 0;", "+            if (!myCopy.getIncludeEmptyDirs()) {", "+                removedDirCount =", "+                    removeEmptyDirectories(toDir, false, preservedDirectories);", "+            } else { // must be syncTarget.preserveEmptydirs == FALSE", "+                removedDirCount =", "+                    removeEmptyDirectories(preservedDirectories);", "+            }"]}]}
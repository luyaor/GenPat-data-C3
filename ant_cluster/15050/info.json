{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d2bde6a2e059e9e1a9e54b455eb8df82", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fc6f3c0f38f4b9015fe15369c32453b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/EjbcHelper.java", "commitBeforeChange": "205151486acb02a98f17a73c8367302d53fb56b8", "commitAfterChange": "34b083983d52d1bc7eaf31b312924fdf83a76b07", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "                 private void process() throws Exception", "diff": ["-     */", "-    public void execute() throws BuildException {", "-        try {", "-            String manifest = \"Manifest-Version: 1.0\\n\\n\";", "-            for (int i = 0; i < descriptors.length; ++i) {", "-                String descriptorName = descriptors[i];", "-                File descriptorFile = new File(descriptorDirectory, descriptorName);", "-                ", "-                if (isRegenRequired(descriptorFile)) {", "-                    ejbcTask.log(\"Running ejbc for \" + descriptorFile.getName(), Project.MSG_INFO);", "-                    regenerateSupportClasses(descriptorFile);", "-                }", "-                else {", "-                    ejbcTask.log(descriptorFile.getName() + \" is up to date\", Project.MSG_VERBOSE);", "-                }", "-                manifest += \"Name: \" + descriptorFile.getName() + \"\\nEnterprise-Bean: True\\n\\n\";", "-            }", "-            ", "-            FileWriter fw = new FileWriter(manifestFile);", "-            PrintWriter pw = new PrintWriter(fw);", "-            pw.print(manifest);", "-            fw.flush();", "-            fw.close();", "-        }", "-        catch (IOException e) {", "-            throw new BuildException(e);", "+     */            ", "+    private void process() throws Exception {", "+        String manifest = \"Manifest-Version: 1.0\\n\\n\";", "+        for (int i = 0; i < descriptors.length; ++i) {", "+            String descriptorName = descriptors[i];", "+            File descriptorFile = new File(descriptorDirectory, descriptorName);", "+            ", "+            if (isRegenRequired(descriptorFile)) {", "+                System.out.println(\"Running ejbc for \" + descriptorFile.getName());", "+                regenerateSupportClasses(descriptorFile);", "+            }", "+            else {", "+                System.out.println(descriptorFile.getName() + \" is up to date\");", "+            }", "+            manifest += \"Name: \" + descriptorFile.getName() + \"\\nEnterprise-Bean: True\\n\\n\";", "+        }", "+        ", "+        FileWriter fw = new FileWriter(manifestFile);", "+        PrintWriter pw = new PrintWriter(fw);", "+        pw.print(manifest);", "+        fw.flush();", "+        fw.close();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8c7e1beaac39c78a8858d44900d4d5a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javac.java", "commitBeforeChange": "1fa24dc235453d37357a5ffb190f5a3c15a49295", "commitAfterChange": "bba4624fac50881dcc5e81de48fffe05f92e2116", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 84, "signatureBeforeChange": "      private boolean needsCompilePackageFile(         File file, File srcDir, File destDir)", "signatureAfterChange": "     private void generateMissingPackageInfoClasses() throws IOException", "diff": ["+     */", "+    private void generateMissingPackageInfoClasses() throws IOException {", "+        for (Iterator i = packageInfos.entrySet().iterator(); i.hasNext(); ) {", "+            Map.Entry entry = (Map.Entry) i.next();", "+            String pkg = (String) entry.getKey();", "+            Long sourceLastMod = (Long) entry.getValue();", "+            File pkgBinDir = new File(destDir, pkg.replace('/', File.separatorChar));", "+            pkgBinDir.mkdirs();", "+            File pkgInfoClass = new File(pkgBinDir, \"package-info.class\");", "+            if (pkgInfoClass.isFile() && pkgInfoClass.lastModified() >= sourceLastMod.longValue()) {", "+                continue;", "+            }", "+            log(\"Creating empty \" + pkgInfoClass);", "+            OutputStream os = new FileOutputStream(pkgInfoClass);", "+            try {", "+                os.write(PACKAGE_INFO_CLASS_HEADER);", "+                byte[] name = pkg.getBytes(\"UTF-8\");", "+                int length = name.length + /* \"/package-info\" */ 13;", "+                os.write((byte) length / 256);", "+                os.write((byte) length % 256);", "+                os.write(name);", "+                os.write(PACKAGE_INFO_CLASS_FOOTER);", "+            } finally {", "+                os.close();", "-", "-    private boolean needsCompilePackageFile(", "-        File file, File srcDir, File destDir) {", "-        if (!file.getName().equals(PACKAGE_INFO_JAVA)) {", "-            return true;", "-        }", "-        // return true if destDir contains the file", "-        String rel = FILE_UTILS.removeLeadingPath(srcDir, file);", "-        File destFile = new File(destDir, rel);", "-        File parent = destFile.getParentFile();", "-        destFile = new File(parent, PACKAGE_INFO_CLASS);", "-        File sourceFile = new File(srcDir, rel);", "-        if (destFile.exists()) {", "-            return true;", "-        }", "-        // Dest file does not exist", "-        // Compile Source file if sourceFile is newer that destDir", "-        // TODO - use fs", "-        if (sourceFile.lastModified()", "-            > destFile.getParentFile().lastModified()) {", "-            updateDirList.add(destFile.getParentFile());", "-            return true;", "-        }", "-        return false;", "-    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "684f4a80848846343e969c2fdffffaba", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47a51424af43d4ba0ea87384565c43b9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/modules/edit/ElementNavigator.java", "commitBeforeChange": "8f7d91aacd3823ed8a447f714d2a3d97ca69518e", "commitAfterChange": "11b6cebd071bd1851cd57916525ea5ec386dbf79", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "         public boolean eventPosted(EventObject event)", "signatureAfterChange": "         public boolean eventPosted(EventObject event)", "diff": ["-            ACSProjectElement project = null;", "-            if(event instanceof ProjectSelectedEvent) {", "-                ProjectSelectedEvent e = (ProjectSelectedEvent) event;", "-                project = e.getSelectedProject();", "-            }", "-", "-            if(project == null) {", "-                // The project has been closed.", "-                // XXX this needs to be tested against ", "-                // different version of Swing...", "-                _tree.setModel(null);", "-                _tree.setSelectionModel(null);", "-                // Send an empty selection event to notify others that", "-                // nothing is selected.", "-                ElementSelectionEvent.createEvent(getContext(), null);", "+            if(event instanceof PropertyChangeEvent) {", "+                // The project node has changed.", "+// XXX This won't work until ACSTreeNodeElement.getParent() is fixed", "+//                ElementTreeModel model = (ElementTreeModel)_tree.getModel();", "+//                model.nodeChanged((TreeNode)model.getRoot());", "+                ", "-                _tree.setModel(new ElementTreeModel(project));", "-                _selections = new ElementTreeSelectionModel();", "-                _selections.addTreeSelectionListener(new SelectionForwarder());", "-                _tree.setSelectionModel(_selections);", "+                ACSProjectElement project = null;", "+                if(event instanceof ProjectSelectedEvent) {", "+                    ProjectSelectedEvent e = (ProjectSelectedEvent) event;", "+                    project = e.getSelectedProject();", "+                }", "+                ", "+                if(project == null) {", "+                    // The project has been closed.", "+                    // XXX this needs to be tested against ", "+                    // different version of Swing...", "+                    _tree.setModel(null);", "+                    _tree.setSelectionModel(null);", "+                    // Send an empty selection event to notify others that", "+                    // nothing is selected.", "+                    ElementSelectionEvent.createEvent(getContext(), null);", "+                }", "+                else {", "+                    _tree.setModel(new ElementTreeModel(project));", "+                    _selections = new ElementTreeSelectionModel();", "+                    _selections.addTreeSelectionListener(", "+                        new SelectionForwarder());", "+                    _tree.setSelectionModel(_selections);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86db886c07f69c4bc9a0d6034e08d330", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/acs/ACSTargetElementBeanInfo.java", "commitBeforeChange": "8170daae431ee785c4c5fe5b924ab200f077ab3a", "commitAfterChange": "6a6e0bd2647db6ae35dcfa3e9f81e306a64b7cc4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public PropertyDescriptor[] getPropertyDescriptors()", "signatureAfterChange": "     public PropertyDescriptor[] getPropertyDescriptors()", "diff": ["-                new PropertyDescriptor(getResources().getString(", "-                    getClass(),ACSTargetElement.NAME), ", "+                new PropertyDescriptor(ACSTargetElement.NAME, ", "-                new PropertyDescriptor(getResources().getString(", "-                    getClass(),ACSTargetElement.DESCRIPTION),", "-                                       ACSTargetElement.class)", "-", "+                new PropertyDescriptor(ACSTargetElement.DESCRIPTION,", "+                                       ACSTargetElement.class),", "+                new PropertyDescriptor(ACSTargetElement.DEPENDS,", "+                                       ACSTargetElement.class),", "+                new PropertyDescriptor(ACSTargetElement.IF,", "+                                       ACSTargetElement.class),", "+                new PropertyDescriptor(ACSTargetElement.UNLESS,", "+                                       ACSTargetElement.class),", "+                new PropertyDescriptor(ACSTargetElement.XML_STRING, ", "+                                       ACSTargetElement.class,", "+                                       \"getXMLString\", null)", "+", "+            // Set display names.", "+            retval[0].setDisplayName(getResources().getString(", "+                getClass(),ACSTargetElement.NAME));", "+            retval[1].setDisplayName(getResources().getString(", "+                getClass(),ACSTargetElement.DESCRIPTION));", "+            retval[2].setDisplayName(getResources().getString(", "+                getClass(),ACSTargetElement.DEPENDS));", "+            retval[3].setDisplayName(getResources().getString(", "+                getClass(),ACSTargetElement.IF));", "+            retval[4].setDisplayName(getResources().getString(", "+                getClass(),ACSTargetElement.UNLESS));", "+            retval[5].setDisplayName(getResources().getString(", "+                getClass(),ACSTargetElement.XML_STRING));", "+", "+            setSortingOrder(retval);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "903a68992d42a6e26e710ec2b98e03fb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/modules/edit/ElementNavigator.java", "commitBeforeChange": "113069f80d96fff735116abb27b70951799106fc", "commitAfterChange": "9996345251656eb38c5326fa7e5f394bc5f43882", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "         private void handle(MouseEvent e)", "signatureAfterChange": "         private void handle(MouseEvent e)", "diff": ["-                ActionManager mgr = getContext().getActions();", "-                JPopupMenu menu = mgr.createPopup(", "-                    getContext().getResources().getStringArray(", "-                        ElementNavigator.class, \"popupActions\"));", "-                menu.show((JComponent)e.getSource(), e.getX(), e.getY());", "+                Object source = e.getSource();", "+                String[] menuStr = null;", "+                JTree tree = (JTree) source;", "+                ", "+                // Find the selected path.", "+                TreePath selPath = tree.getPathForLocation(", "+                    e.getX(), e.getY());", "+                if (selPath == null) {", "+                    return;", "+                }", "+", "+                // Update the selection. ", "+                tree.setSelectionPath(selPath);", "+", "+                // Find the selected object.", "+                Object selObj = selPath.getLastPathComponent();", "+", "+                String defaultID = null;", "+                ", "+                // Does the item provide its own menu?", "+                if (selObj instanceof ACSInfoProvider) {", "+                    ACSInfoProvider ip = (ACSInfoProvider) selObj;", "+                    menuStr = ip.getMenuString();", "+                    defaultID = ip.getDefaultActionID();", "+                } else {", "+                    // Get the menu from the prop file.", "+                    menuStr = getContext().getResources().getStringArray(", "+                        ElementNavigator.class, defaultID);", "+                }", "+", "+                // Should we create a menu?", "+                if (menuStr != null && menuStr.length != 0) {", "+                    ActionManager mgr = getContext().getActions();", "+                    JPopupMenu menu = mgr.createPopup(menuStr, defaultID);", "+                    menu.show((JComponent)e.getSource(), e.getX(), e.getY());", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d882ff00428ef62273acc6e0b94401c0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/modules/edit/ElementNavigator.java", "commitBeforeChange": "113069f80d96fff735116abb27b70951799106fc", "commitAfterChange": "9996345251656eb38c5326fa7e5f394bc5f43882", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "         public boolean eventPosted(EventObject event)", "signatureAfterChange": "         public boolean eventPosted(EventObject event)", "diff": ["+            else if(event instanceof RefreshDisplayEvent && model != null) {", "+                _tree.updateUI();", "+            }", "+            }", "+            else if(event instanceof DeleteElementEvent && model != null) {", "+                _tree.updateUI();", "-                    _tree.setModel(new ElementTreeModel(project));", "-                    _selections = new ElementTreeSelectionModel();", "-                    _selections.addTreeSelectionListener(", "-                        new SelectionForwarder());", "-                    _tree.setSelectionModel(_selections);", "+                    boolean updateModel = false;", "+                    TreeModel testModel = _tree.getModel();", "+                    ", "+                    // Set the model if's not an ElementTreeModel", "+                    if (testModel instanceof ElementTreeModel) {", "+                        ElementTreeModel etm = (ElementTreeModel) testModel;", "+                        ACSProjectElement currentProject = ", "+                            (ACSProjectElement) etm.getRoot();", "+                        ", "+                        // Set the model if the project is wrong", "+                        if (currentProject != project) {", "+                            updateModel = true;", "+                        }", "+                    } else {", "+                        updateModel = true;", "+                    }", "+", "+                    // Should we update the tree model", "+                    if (updateModel) {", "+                        _tree.setModel(new ElementTreeModel(project));", "+                        _selections = new ElementTreeSelectionModel();", "+                        _selections.addTreeSelectionListener(", "+                            new SelectionForwarder());", "+                        _tree.setSelectionModel(_selections);", "+                    }"]}]}
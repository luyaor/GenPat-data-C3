{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "678e5895c7757978618d6601b92c9f51", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a74ba97b4bc7d0d320d1a3b7146239b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Definer.java", "commitBeforeChange": "ef710b030375243e30d55aafc475b5e168b6cd2b", "commitAfterChange": "b57735118f019c87d4f15ba13cd6871b584dcc99", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void addDefinition(ClassLoader al, String name, String value)         throws BuildException", "signatureAfterChange": "     private void addDefinition(ClassLoader al, String name, String value)         throws BuildException", "diff": ["-            String msg = getTaskName() + \" class \" + value", "-                + \" cannot be found\";", "-            throw new BuildException(msg, ncdfe, getLocation());", "+            String msg = getTaskName() + \"A class needed on loading by class \"", "+                + value + \" cannot be found: \" + ncdfe.getMessage();", "+            throw new BuildException(msg, ncdfe, location);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa1636df3fdfcc6815e6153d26c6ce99", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/TaskAdapter.java", "commitBeforeChange": "2c4b09e15f09ece3d4e8276687a809ddefa9408f", "commitAfterChange": "9f1eefd3a2e6760daa8941c1c69b4825f4c136fa", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            executeM = c.getMethod(\"execute\", new Class[0]);", "+            final String methodName = getExecuteMethodName();", "+            executeM = c.getMethod(methodName, new Class[0]);", "-                log(\"No public execute() in \" + proxy.getClass(),", "+                log(\"No public \" + methodName + \" in \" + proxy.getClass(),", "-                throw new BuildException(\"No public execute() in \"", "+                throw new BuildException(\"No public \" + methodName + \"() in \""]}]}
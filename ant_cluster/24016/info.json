{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6a5fcf28b50e00ccd634067615298b60", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a38918def621da9be92b32bbd33cd48", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/StripJavaComments.java", "commitBeforeChange": "bd0662b8fa0d69a8129ea1089518b146e77c6abd", "commitAfterChange": "a1e68fb8c70781a8a2529d2a3cdee319720a93ce", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public final int read() throws IOException", "signatureAfterChange": "     public final int read() throws IOException", "diff": ["-        int ch = in.read();", "-        if (ch == '/') {", "+        int ch = -1;", "+        if (readAheadCh != -1) {", "+            ch = readAheadCh;", "+            readAheadCh = -1;", "+        } else {", "-            if (ch == '/') {", "-                while (ch != '\\n' && ch != -1) {", "-                    ch = in.read();", "-                }", "-            } else if (ch == '*') {", "-                while (ch != -1) {", "-                    ch = in.read();", "-                    if (ch == '*') {", "+            if (ch == '\"') {", "+                inString = !inString;", "+            } else {", "+                if (!inString) {", "+                    if (ch == '/') {", "-                        while (ch == '*' && ch != -1) {", "-                            ch = in.read();", "-                        }", "-", "-                            ch = read();", "-                            break;", "+                            while (ch != '\\n' && ch != -1) {", "+                                ch = in.read();", "+                            }", "+                        } else if (ch == '*') {", "+                            while (ch != -1) {", "+                                ch = in.read();", "+                                if (ch == '*') {", "+                                    ch = in.read();", "+                                    while (ch == '*' && ch != -1) {", "+                                        ch = in.read();", "+                                    }", "+", "+                                    if (ch == '/') {", "+                                        ch = read();", "+                                        break;", "+                                    }", "+                                }", "+                            }", "+                        } else {", "+                            readAheadCh = ch;", "+                            ch = '/';", "-        }", "-", "-        if (ch == '\"') {", "-            while (ch != -1) {", "-                ch = in.read();", "-                if (ch == '\\\\') {", "-                    ch = in.read();", "-                } else if (ch == '\"') {", "-                    ch = read();", "-                    break;", "-                }", "-            }", "-        }", "-", "-        if (ch == '\\'') {", "-            ch = in.read();", "-            if (ch == '\\\\') {", "-                ch = in.read();", "-            }", "-            ch = in.read();", "-            ch = read();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5da00d9b7fe83ecc0990e0ba92c0351", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "37e97ef42d47f59a277025d51b1d13719a9e616a", "commitAfterChange": "b92e6b644f97b87083602a8ce4029cce01725674", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "     private void checkIncludePatterns()", "signatureAfterChange": "     private void checkIncludePatterns()", "diff": ["+            if (FileUtils.isAbsolutePath(includes[icounter])) {", "+                //skip abs. paths not under basedir, if set:", "+                if (basedir != null", "+                    && !SelectorUtils.matchPatternStart(includes[icounter],", "+                    basedir.getAbsolutePath(), isCaseSensitive())) {", "+                    continue;", "+                }", "+            } else if (basedir == null) {", "+                //skip non-abs. paths if basedir == null:", "+                continue;", "+            }", "-        if (newroots.containsKey(\"\")) {", "+        if (newroots.containsKey(\"\") && basedir != null) {", "-            try {", "-                canonBase = basedir.getCanonicalFile();", "-            } catch (IOException ex) {", "-                throw new BuildException(ex);", "+            if (basedir != null) {", "+                try {", "+                    canonBase = basedir.getCanonicalFile();", "+                } catch (IOException ex) {", "+                    throw new BuildException(ex);", "+                }", "+                if (basedir == null && !FileUtils.isAbsolutePath(currentelement)) {", "+                    continue;", "+                }", "-                        File canonFile = myfile.getCanonicalFile();", "-                        String path = FILE_UTILS.removeLeadingPath(canonBase,", "-                                                                  canonFile);", "+                        String path = (basedir == null)", "+                            ? myfile.getCanonicalPath()", "+                            : FILE_UTILS.removeLeadingPath(canonBase,", "+                            myfile.getCanonicalFile());", "-                            if (myfile != null) {", "-                                currentelement =", "-                                    FILE_UTILS.removeLeadingPath(basedir,", "-                                                                 myfile);", "+                            if (myfile != null && basedir != null) {", "+                                currentelement = FILE_UTILS.removeLeadingPath(", "+                                    basedir, myfile);", "-                        currentelement = FILE_UTILS.removeLeadingPath(basedir,", "-                                                                     f);", "+                        currentelement = (basedir == null)", "+                            ? f.getAbsolutePath()", "+                            : FILE_UTILS.removeLeadingPath(basedir, f);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "406bbcf27dc6b640e4f66f324c8fbf4a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0742a899fa0b36fcd6ca089ba11632e6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "23a03fcf16119310506d2e18d585cfdffb550650", "commitAfterChange": "1844a85f5feebe940057df6b041ab2fe095cc43d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 7, "signatureBeforeChange": "          public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["+", "-        project.log(\"Building \" + archiveType + \": \" + zipFile.getAbsolutePath());", "-    ", "+        project.log(\"Building \"+ archiveType +\": \"+ zipFile.getAbsolutePath());", "+", "+        if (baseDir == null) {", "+            throw new BuildException(\"basedir attribute must be set!\");", "+        }", "+        if (!baseDir.exists()) {", "+            throw new BuildException(\"basedir does not exist!\");", "+        }", "+", "+        DirectoryScanner ds = new DirectoryScanner();", "+        ds.setBasedir(baseDir);", "+        ds.setIncludes(includes);", "+        ds.setExcludes(excludes);", "+        if (useDefaultExcludes) {", "+            ds.addDefaultExcludes();", "+        }", "+        ds.scan();", "+", "+        String[] files = ds.getIncludedFiles();", "+        String[] dirs  = ds.getIncludedDirectories();", "+", "-\t    initZipOutputStream(zOut);", "-            ", "-            if ( allItems ) {", "-                String[] lst = baseDir.list();", "-                for (int i=0;i<lst.length;i++) {", "-                    items.addElement(lst[i]);", "-                }", "+            initZipOutputStream(zOut);", "+", "+            for (int i = 0; i < dirs.length; i++) {", "+                File f = new File(baseDir,dirs[i]);", "+                String name = dirs[i].replace(File.separatorChar,'/')+\"/\";", "+                zipDir(f, zOut, name);", "-            // add items", "-            Enumeration e = items.elements();", "-            while (e.hasMoreElements()) {", "-                String s = (String)e.nextElement();", "-                // check to make sure item is not in ignore list", "-                // shouldn't be ignored here, but just want to make sure", "-                if (! ignoreList.contains(s)) {", "-                    File f = new File(baseDir, s);", "-                    if (f.isDirectory()) {", "-                        zipDir(f, zOut, s + \"/\");", "-                    } else {", "-                        zipFile(f, zOut, s);", "-                    }", "-                } else {", "-                    project.log(\"Ignoring: \" + s, Project.MSG_WARN);", "-                }", "+            for (int i = 0; i < files.length; i++) {", "+                File f = new File(baseDir,files[i]);", "+                String name = files[i].replace(File.separatorChar,'/');", "+                zipFile(f, zOut, name);", "-    ", "-            // close up            ", "+", "+            // close up"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d522ecbeca4b7e01f4185dea94c6b6dd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Sync.java", "commitBeforeChange": "32365ed4e0db6ddef7498334a9ca574df66e6726", "commitAfterChange": "b1186f08a39d23367aefcabd37ef446d36a0afb1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private int[] removeOrphanFiles(Hashtable nonOrphans, File file)", "signatureAfterChange": "     private int[] removeOrphanFiles(Set nonOrphans, File toDir)", "diff": ["-    private int[] removeOrphanFiles(Hashtable nonOrphans, File file) {", "-        int[] removedCount = new int[] {0, 0, 0};", "-        if (file.isDirectory()) {", "-            File[] children = file.listFiles();", "-            for (int i = 0; i < children.length; ++i) {", "-                int[] temp = removeOrphanFiles(nonOrphans, children[i]);", "-                removedCount[0] += temp[0];", "-                removedCount[1] += temp[1];", "-                removedCount[2] += temp[2];", "-            }", "-", "-            if (nonOrphans.get(file) == null && removedCount[2] == 0) {", "-                log(\"Removing orphan directory: \" + file, Project.MSG_DEBUG);", "-                file.delete();", "-                ++removedCount[0];", "-            } else {", "-                /*", "-                  Contrary to what is said above, position 2 is not", "-                  meaningless inside the recursion.", "-                  Position 2 is used to carry information back up the", "-                  recursion about whether or not a directory contains", "-                  a directory or file at any depth that is not an", "-                  orphan", "-                  This has to be done, because if you have the", "-                  following directory structure: c:\\src\\a\\file and", "-                  your mapper src files were constructed like so:", "-                  <include name=\"**\\a\\**\\*\"/>", "-                  The folder 'a' will not be in the hashtable of", "-                  nonorphans.  So, before deleting it as an orphan, we", "-                  have to know whether or not any of its children at", "-                  any level are orphans.", "-                  If no, then this folder is also an orphan, and may", "-                  be deleted.  I do this by changing position 2 to a", "-                  '1'.", "-                */", "-                removedCount[2] = 1;", "-            }", "-", "-        } else {", "-            if (nonOrphans.get(file) == null) {", "-                log(\"Removing orphan file: \" + file, Project.MSG_DEBUG);", "-                file.delete();", "-                ++removedCount[1];", "-            } else {", "-                removedCount[2] = 1;", "-            }", "+    private int[] removeOrphanFiles(Set nonOrphans, File toDir) {", "+        int[] removedCount = new int[] {0, 0};", "+        DirectoryScanner ds = new DirectoryScanner();", "+        ds.setBasedir(toDir);", "+        Set s = new HashSet(nonOrphans);", "+        s.add(\"\");", "+        String[] excls = (String[]) s.toArray(new String[s.size()]);", "+        ds.setExcludes(excls);", "+        ds.scan();", "+        String[] files = ds.getIncludedFiles();", "+        for (int i = 0; i < files.length; i++) {", "+            File f = new File(toDir, files[i]);", "+            log(\"Removing orphan file: \" + f, Project.MSG_DEBUG);", "+            f.delete();", "+            ++removedCount[1];", "+        }", "+        String[] dirs = ds.getIncludedDirectories();", "+        for (int i = dirs.length - 1 ; i >= 0 ; --i) {", "+            File f = new File(toDir, dirs[i]);", "+            log(\"Removing orphan directory: \" + f, Project.MSG_DEBUG);", "+            f.delete();", "+            ++removedCount[0];"]}]}
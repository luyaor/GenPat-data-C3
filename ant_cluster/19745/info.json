{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c27eac5ac1950a7828324ecdd1643324", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cb4b3dce3eced735fc9c059248dbe62", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/anteater/bootstrap/Bootstrap2.java", "commitBeforeChange": "f85678f1abd081bfd165ce81b94bad652968e4fd", "commitAfterChange": "d8a7035c55e9315383161c20b42077f65748f081", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String[] args) throws Exception", "signatureAfterChange": "     public static void main(String[] args) throws Exception", "diff": ["-        // build crimson", "+        // build crimson, but only if it hasn't been built yet since", "+        // 127 class files takes more seconds than I like to wait.", "-        Vector v1 = getSources(base + crimsonSources);", "-        doCompile(base + \"bootstrap/temp/crimson\", v1);", "+        if (!(new File(base + \"bootstrap/temp/crimson/javax\").exists())) {", "+            Vector v1 = getSources(base + crimsonSources);", "+            doCompile(base + \"bootstrap/temp/crimson\", v1);", "+        }", "-        String[] cmdarray = new String[9];", "+        String[] cmdarray = new String[10];", "-        cmdarray[7] = base + \"source/main.ant\"; ", "-        cmdarray[8] = \"default\";", "+        cmdarray[7] = base + \"source/main.ant\";", "+        cmdarray[8] = \"-target\"; ", "+        cmdarray[9] = \"default\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e22ab2c50c17cdb31ca61a34ba62a3bf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ANTLR.java", "commitBeforeChange": "244d3009de6569e7f784f253e0b480f5b3922543", "commitAfterChange": "270394a09fddda0ea9ffa2330956c5f399ab840f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 19, "signatureBeforeChange": "      private void validateAttributes() throws BuildException", "signatureAfterChange": "      private void validateAttributes() throws BuildException", "diff": ["+", "-", "+        ", "+        // validate the superGrammar file", "+        if (superGrammar != null && !new File(superGrammar).isFile()) {", "+            throw new BuildException(\"Invalid super grammar file: \" + superGrammar);", "+        }", "+        "]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "51fa3888299e504b53ac134f5996b35b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d932272178cfab4983ae4771529ac5d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/starteam/StarTeamCheckout.java", "commitBeforeChange": "225893c4b96e202aae6654f8ab2354b307ad35ef", "commitAfterChange": "6409f0ec87cfcc04196be80e0c72aec39a76ec04", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     protected void visit(Folder starteamFolder, java.io.File targetFolder)             throws BuildException", "signatureAfterChange": "     protected void visit(Folder starteamFolder, java.io.File targetFolder)             throws BuildException", "diff": ["+            if (!targetFolder.exists()) {", "+                if (!this.isUsingRevisionLabel()) {", "+                    if (this.createDirs) {", "+                        if (targetFolder.mkdirs()) {", "+                            log(\"Creating folder: \" + targetFolder);", "+                        } else {", "+                            throw new BuildException(", "+                                \"Failed to create local folder \" + targetFolder);", "+                        }", "+                    }", "+                }", "+            }", "+            ", "+", "+            if (this.isUsingRevisionLabel()) {", "+", "+                // prune away any files not belonging to the revision label", "+                // this is one ugly API from Starteam SDK", "+                ", "+                Hashtable labelItems = new Hashtable(filesList.length);", "+                int s = filesList.length;", "+                int[] ids = new int[s];", "+                for (int i=0; i < s; i++) {", "+                    ids[i]=filesList[i].getItemID();", "+                    labelItems.put(new Integer(ids[i]), new Integer(i));", "+                }", "+                int[] foundIds = getLabelInUse().getLabeledItemIDs(ids);", "+                s = foundIds.length;", "+                Item[] labeledFiles = new Item[s];", "+                for (int i=0; i < s; i++) {", "+                    Integer ID = new Integer(foundIds[i]);", "+                    labeledFiles[i] = ", "+                        filesList[((Integer) labelItems.get(ID)).intValue()];", "+                }", "+                filesList = labeledFiles;", "+            }", "-                     if (!subfolder.exists()) {", "-                         if (this.createDirs) {", "-                             log(\"Creating folder: \" + subfolder);", "-                             subfolder.mkdirs();", "-                         }", "-                     }", "-                     if (subfolder.exists()) {", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf791f58c6f3e86f8b9519747e460ae3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/RedirectorElement.java", "commitBeforeChange": "e539f6378221559dd8f18f43ceb941801e9a9820", "commitAfterChange": "37e97ef42d47f59a277025d51b1d13719a9e616a", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "     protected void dieOnCircularReference() throws BuildException", "signatureAfterChange": "     protected void dieOnCircularReference(Stack stk, Project p)         throws BuildException", "diff": ["-     */", "-    protected void dieOnCircularReference() throws BuildException {", "-        if (isChecked()) {", "-            return;", "-        }", "-        Stack s = new Stack();", "-        s.push(this);", "-        dieOnCircularReference(s, getProject());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1ab042161fbf3303bebb2d295091080", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/FixCRLF.java", "commitBeforeChange": "14d7f3c9152c8c52501a5624e361a588f9e56367", "commitAfterChange": "6231c77d24ce79d308b50e46097851fa8dc63e93", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            \" cr=\" + (addcr==-1 ? \"add\" : addcr==0 ? \"asis\" : \"remove\") +", "-            \" tab=\" + (addtab==-1 ? \"add\" : addtab==0 ? \"asis\" : \"remove\") +", "-            \" eof=\" + (ctrlz==-1 ? \"add\" : ctrlz==0 ? \"asis\" : \"remove\") +", "+            \" cr=\" + (addcr==1 ? \"add\" : addcr==0 ? \"asis\" : \"remove\") +", "+            \" tab=\" + (addtab==1 ? \"add\" : addtab==0 ? \"asis\" : \"remove\") +", "+            \" eof=\" + (ctrlz==1 ? \"add\" : ctrlz==0 ? \"asis\" : \"remove\") +", "+                // Determine whether it should be written,", "+                // that is if it is different than the potentially already existing file", "+                boolean write = false;", "+                byte[] existingdata = indata;", "-                if (destDir != null) destFile = new File(destDir, files[i]);", "-                FileOutputStream outStream = new FileOutputStream(destFile);", "-                outStream.write(outdata,0,o);", "-                outStream.close();", "+                if (destDir != null) {", "+                    destFile = new File(destDir, files[i]);", "+                    if(destFile.isFile()) {", "+                        int len = (int)destFile.length();", "+                        if(len != o) {", "+                            write = true;", "+                        } else {", "+                            existingdata = new byte[len];", "+                            try {", "+                                FileInputStream in = new FileInputStream(destFile);", "+                                in.read(existingdata);", "+                                in.close();", "+                            } catch (IOException e) {", "+                                throw new BuildException(e);", "+                            }", "+                        }", "+                    } else {", "+                        write = true;", "+                    }", "+                }", "+", "+                if(!write) {", "+                    if(existingdata.length != o) {", "+                        write = true;", "+                    } else {", "+                        for(int j = 0; j < o; ++j) {", "+                            if(existingdata[j] != outdata[j]) {", "+                                write = true;", "+                                break;", "+                            }", "+                        }", "+                    }", "+                }", "+", "+                if(write) {", "+                    log(destFile + \" is being written\", Project.MSG_VERBOSE);", "+                    FileOutputStream outStream = new FileOutputStream(destFile);", "+                    outStream.write(outdata,0,o);", "+                    outStream.close();", "+                } else {", "+                    log(destFile + \" is not written, as the contents are identical\",", "+                        Project.MSG_VERBOSE);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb1d2bd77e94985570c915fbb1b54093", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/DirectoryScannerTest.java", "commitBeforeChange": "59024a8a7b8cec05501e3c6b28a5bb5c8478addf", "commitAfterChange": "07b710cc96c363b69d4e7225c96ffc0296354597", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void testChildrenOfExcludedDirectory()", "signatureAfterChange": "     public void testChildrenOfExcludedDirectory()", "diff": ["+        haveZipPackage = false;", "+        Resource[] includedResources = ds.getIncludedDirectoryResources();", "+        for (int i=0; i<includedResources.length; i++) {", "+            if (includedResources[i].getName().equals(\"zip\")) {", "+                haveZipPackage = true;", "+            } else if (includedResources[i].getName().equals(\"ant\" ", "+                                                             + File.separator", "+                                                             + \"taskdefs\")) {", "+                haveTaskdefsPackage = true;", "+            }", "+        }", "+        assertTrue(\"(1b) zip package included\", haveZipPackage);", "+        assertTrue(\"(1b) taskdefs package not included\", !haveTaskdefsPackage);", "+", "+        haveZipPackage = false;", "+        haveTaskdefsPackage = false;", "+        includedResources = ds.getIncludedDirectoryResources();", "+        for (int i=0; i<includedResources.length; i++) {", "+            if (includedResources[i].getName().equals(\"zip\")) {", "+                haveZipPackage = true;", "+            } else if (includedResources[i].getName().equals(\"ant\"", "+                                                             + File.separator", "+                                                             + \"taskdefs\")) {", "+                haveTaskdefsPackage = true;", "+            }", "+        }", "+        assertTrue(\"(2b) zip package included\", haveZipPackage);", "+        assertTrue(\"(2b) taskdefs package included\", haveTaskdefsPackage);", "+"]}]}
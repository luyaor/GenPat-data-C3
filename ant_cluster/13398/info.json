{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d9af871bb5ce3e16944d0ffb14f9a96f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "126b0478650bbb95092700f61eeb9eba", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "10c41029aeaba31241f1a85f9b02591b357e20b6", "commitAfterChange": "818cb969adef1df0f5918ba62f80f62502d5e53e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void run()", "signatureAfterChange": "      public void run()", "diff": ["-        long start = System.currentTimeMillis();", "-", "-        if (retCode != 0) { // had an exception in the constructor", "-            return;", "+        res = new TestResult();", "+        res.addListener(this);", "+        for (int i=0; i < formatters.size(); i++) {", "+            res.addListener((TestListener)formatters.elementAt(i));", "+        long start = System.currentTimeMillis();", "+", "-        suite.run(res);", "-        junitTest.setRunTime(System.currentTimeMillis()-start);", "-        junitTest.setCounts(res.runCount(), res.failureCount(),", "-                            res.errorCount());", "+        if (exception != null) { // had an exception in the constructor", "+            for (int i=0; i < formatters.size(); i++) {", "+                ((TestListener)formatters.elementAt(i)).addError(null, ", "+                                                                 exception);", "+            }", "+            junitTest.setCounts(1, 0, 1);", "+            junitTest.setRunTime(0);", "+        } else {", "+            suite.run(res);", "+            junitTest.setCounts(res.runCount(), res.failureCount(), ", "+                                res.errorCount());", "+            junitTest.setRunTime(System.currentTimeMillis() - start);", "+        }", "-        if (res.errorCount() != 0) {", "-            retCode = 2;", "+        if (retCode != SUCCESS || res.errorCount() != 0) {", "+            retCode = ERRORS;", "-            retCode = 1;", "+            retCode = FAILURES;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14c41a8c70bea41ede58cfa09157a8fc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "3c26912e56e06ac64c392444cb19e3587f1bbb11", "commitAfterChange": "ba22b3de5a2c195cc893e6455dbd88940f7547ac", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private static void configureTasks(Project project, \t\t\t\t       Target target, \t\t\t\t       Element targetElement) \tthrows BuildException", "signatureAfterChange": "      private static void configureTasks(Project project,                                        Target target,                                        Element targetElement)         throws BuildException", "diff": ["-\t\t\t\t       Target target,", "-\t\t\t\t       Element targetElement)", "-\tthrows BuildException", "+                                       Target target,", "+                                       Element targetElement)", "+        throws BuildException", "-\tNodeList list = targetElement.getChildNodes();", "-\tfor (int i = 0; i < list.getLength(); i++) {", "-\t    Node node = list.item(i);", "+        NodeList list = targetElement.getChildNodes();", "+        for (int i = 0; i < list.getLength(); i++) {", "+            Node node = list.item(i);", "-\t    // right now, all we are interested in is element nodes", "-\t    // not quite sure what to do with others except drop 'em", "+            // right now, all we are interested in is element nodes", "+            // not quite sure what to do with others except drop 'em", "-\t    if (node.getNodeType() == Node.ELEMENT_NODE) {", "-\t\tElement element = (Element)node;", "-\t\tString taskType = element.getTagName();", "+            if (node.getNodeType() == Node.ELEMENT_NODE) {", "+                Element element = (Element)node;", "+                String taskType = element.getTagName();", "-\t\t// special case - no target in a target.", "-\t\t// hack to allow this method to set \"init\" target", "-\t\t// using root element", "-\t\tif( ! taskType.equals( \"target\" ) ) {", "-\t\t    // XXX", "-\t\t    // put in some sanity checking", "-\t\t    ", "-\t\t    Task task = project.createTask(taskType);", "-\t\t    ", "-\t\t    // get the attributes of this element and reflect them", "-\t\t    // into the task", "-\t\t    ", "-\t\t    NamedNodeMap nodeMap = element.getAttributes();", "-\t\t    configureTask(project, task, nodeMap);", "-\t\t    target.addTask(task);", "-\t\t}", "-\t    }", "-\t}", "+                // special case - no target in a target.", "+                // hack to allow this method to set \"init\" target", "+                // using root element", "+                if( ! taskType.equals( \"target\" ) ) {", "+                    // XXX", "+                    // put in some sanity checking", "+", "+                    Task task = project.createTask(taskType);", "+", "+                    // get the attributes of this element and reflect them", "+                    // into the task", "+", "+                    NamedNodeMap nodeMap = element.getAttributes();", "+                    configureTask(project, task, nodeMap);", "+                    task.init();", "+                    target.addTask(task);", "+                }", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e7ade84fcdcad73b005c9b296ccf796", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/types/PathUtil.java", "commitBeforeChange": "32d43b7b8b7377202a2f9b1cde1962ef838b41ad", "commitAfterChange": "8887e0b5b9907e9bf831061ecaed683aa7daf6f5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public static void addJavaRuntime( final Path path )         throws TaskException", "signatureAfterChange": "     public static void addJavaRuntime( final Path path )         throws TaskException", "diff": ["+        else if( Os.isFamily( Os.OS_FAMILY_OSX ) )", "+        {", "+            // MacOS X", "+            final String classDir = System.getProperty( \"java.home\" ) +", "+                File.separator + \"..\" + File.separator + \"Classes\";", "+            final File classes = new File( classDir, \"classes.jar\" );", "+            path.addLocation( classes );", "+            final File ui = new File( classDir, \"ui.jar\" );", "+            path.addLocation( ui );", "+        }", "-            // JDK > 1.1 seems to set java.home to the JRE directory.", "+            // JDK > 1.1 sets java.home to the JRE directory.", "-            path.addLocation( new File( rt ) );", "-            // Just keep the old version as well and let addExisting", "-            // sort it out.", "-            final String rt2 = System.getProperty( \"java.home\" ) +", "-                File.separator + \"jre\" + File.separator + \"lib\" +", "-                File.separator + \"rt.jar\";", "-            path.addLocation( new File( rt2 ) );", "-", "-            // Added for MacOS X", "-            final String classes = System.getProperty( \"java.home\" ) +", "-                File.separator + \"..\" + File.separator + \"Classes\" +", "-                File.separator + \"classes.jar\";", "-            path.addLocation( new File( classes ) );", "-            final String ui = System.getProperty( \"java.home\" ) +", "-                File.separator + \"..\" + File.separator + \"Classes\" +", "-                File.separator + \"ui.jar\";", "-            path.addLocation( new File( ui ) );", "+            final File rtJar = new File( rt );", "+            path.addLocation( rtJar );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "380d366c021a5cc8fe0e93f1a618b197", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XSLTProcess.java", "commitBeforeChange": "5800b026fac0179cb373c1c85261c04bf2b54e8e", "commitAfterChange": "88f1be2d0462de59e99bf085522756a647195248", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 48, "signatureBeforeChange": "     protected void configureLiaison(File stylesheet) throws BuildException", "signatureAfterChange": "     protected void configureLiaison(Resource stylesheet) throws BuildException", "diff": ["+     */", "+    protected void configureLiaison(Resource stylesheet) throws BuildException {", "-            liaison.setStylesheet(stylesheet);", "+            // We call liason.configure() and then liaison.setStylesheet()", "+            // so that the internal variables of liaison can be set up", "+            if (liaison instanceof XSLTLiaison2) {", "+                ((XSLTLiaison2) liaison).configure(this);", "+            }", "+", "+            if (liaison instanceof XSLTLiaison3) {", "+                // If we are here we can set the stylesheet as a", "+                // resource", "+                ((XSLTLiaison3) liaison).setStylesheet(stylesheet);", "+            } else {", "+                // If we are here we cannot set the stylesheet as", "+                // a resource, but we can set it as a file. So,", "+                // we make an attempt to get it as a file", "+                if (stylesheet instanceof FileResource) {", "+                    liaison.setStylesheet(", "+                            ((FileResource) stylesheet).getFile());", "+                } else {", "+                    throw new BuildException(liaison.getClass().toString()", "+                            + \" accepts the stylesheet only as a file\",", "+                            getLocation());", "+                }", "+            }", "-            }", "-            if (liaison instanceof XSLTLiaison2) {", "-                ((XSLTLiaison2) liaison).configure(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "465b6ad1b80ed18a2e79680f98dd5ec4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/AbstractClasspathResource.java", "commitBeforeChange": "28ca0623119a788c754840b78a50b052518b2006", "commitAfterChange": "211d0a8ea6b0e7f4c28b83abab1961b40bba90e7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public InputStream getInputStream() throws IOException", "signatureAfterChange": "     public InputStream getInputStream() throws IOException", "diff": ["+", "+        final ClassLoaderWithFlag classLoader = getClassLoader();", "+        return !classLoader.needsCleanup()", "+            ? openInputStream(classLoader.getLoader())", "+            : new FilterInputStream(openInputStream(classLoader.getLoader())) {", "+                    public void close() throws IOException {", "+                        FileUtils.close(in);", "+                        classLoader.cleanup();", "+                    }", "+                    protected void finalize() throws Throwable {", "+                        try {", "+                            close();", "+                        } finally {", "+                            super.finalize();", "+                        }", "+                    }", "+                };", "+    }", "-", "-        final ClassLoader classLoader = cl;", "-        return !clNeedsCleanup", "-            ? openInputStream(cl)", "-            : new FilterInputStream(openInputStream(cl)) {", "-                    public void close() throws IOException {", "-                        FileUtils.close(in);", "-                        ((AntClassLoader) classLoader).cleanup();", "-                    }", "-                    protected void finalize() throws Throwable {", "-                        try {", "-                            close();", "-                        } finally {", "-                            super.finalize();", "-                        }", "-                    }", "-                };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5369474fc44958395b9efc74be025368", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "6eca61f317d03db4bcef364adc0b99241b236210", "commitAfterChange": "30d8dc80a562b0c3c7db85f1fbf501dcf9ffa706", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private static void configureTasks(Project project,                                        Target target,                                        Element targetElement)         throws BuildException", "signatureAfterChange": "      private static void configureTasks(Project project,                                        Target target,                                        Element targetElement)         throws BuildException", "diff": ["-                // special case - no target in a target.", "-                // hack to allow this method to set \"init\" target", "-                // using root element", "-                if( ! taskType.equals( \"target\" ) ) {", "-                    // XXX", "-                    // put in some sanity checking", "+                // XXX", "+                // put in some sanity checking", "-                    Task task = project.createTask(taskType);", "+                Task task = project.createTask(taskType);", "-                    // get the attributes of this element and reflect them", "-                    // into the task", "+                // get the attributes of this element and reflect them", "+                // into the task", "-                    NamedNodeMap nodeMap = element.getAttributes();", "-                    configure(project, task, nodeMap);", "-                    task.init();", "-                    task.setTarget(target);", "-                    target.addTask(task);", "+                NamedNodeMap nodeMap = element.getAttributes();", "+                configure(project, task, nodeMap);", "+                task.init();", "+                task.setTarget(target);", "+                target.addTask(task);", "-                    processNestedProperties(project, task, element);", "-                }", "+                processNestedProperties(project, task, element);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a88fef8ddc277012ad687a09325feb8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "0a679803f04b2e3e9d63c5f6b46677b0cf713d6b", "commitAfterChange": "a4e5c13b86391f9b7ad23e326fe3d2bb66a16cc7", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 93, "signatureBeforeChange": "     protected int transferFiles(final FTPClient ftp, FileSet fs)          throws IOException, BuildException", "signatureAfterChange": "     protected int transferFiles(final FTPClient ftp, FileSet fs)         throws IOException, BuildException", "diff": ["-         throws IOException, BuildException {", "+        throws IOException, BuildException {", "-            // warn that selectors are not supported", "-            if (fs.getSelectors(getProject()).length != 0) {", "-                getProject().log(\"selectors are not supported in remote filesets\",", "-                    Project.MSG_WARN);", "-            }", "-             && ((action == SEND_FILES) || (action == GET_FILES))) {", "+            && ((action == SEND_FILES) || (action == GET_FILES))) {", "-                 + \"and get actions\");", "+                                     + \"and get actions\");", "-                        public void execute() throws IOException {", "-                            rmDir(ftp, dsfile);", "-                        }", "-                    }, dsfile);", "+                            public void execute() throws IOException {", "+                                rmDir(ftp, dsfile);", "+                            }", "+                        }, dsfile);", "-                        public void execute() throws IOException {", "-                            switch (action) {", "+                            public void execute() throws IOException {", "+                                switch (action) {", "+                                }", "-                        }", "-                    }, dsfile);", "+                        }, dsfile);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cbe66f6efd218cfd27be1e62284bb3e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/perforce/P4Label.java", "commitBeforeChange": "52579e96823f78d8588c70e92d5cded416cbeb9a", "commitAfterChange": "c3633d1c5a471deebcca60685fe7ebec2e55cf52", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "          public void execute() throws BuildException", "signatureAfterChange": "              public void execute() throws BuildException", "diff": ["-    ", "+        ", "-", "+\t\tif(lock != null && !lock.equalsIgnoreCase(\"locked\")) {", "+        \tlog(\"lock attribute invalid - ignoring\",Project.MSG_WARN);", "+\t\t}", "+        ", "+        //We have to create a unlocked label first", "+", "+        //Now lock if required", "+        if (lock != null && lock.equalsIgnoreCase(\"locked\"))  {", "+        ", "+        \tlog(\"Modifying lock status to 'locked'\",Project.MSG_INFO);", "+", "+        \tfinal StringBuffer labelSpec = new StringBuffer();", "+            ", "+\t\t\t//Read back the label spec from perforce, ", "+            //Replace Options", "+            //Submit back to Perforce", "+            ", "+        \thandler = new P4HandlerAdapter()  {", "+           \t\tpublic void process(String line)  {", "+                \tlog(line, Project.MSG_VERBOSE);", "+                    ", "+\t\t\t\t\tif(util.match(\"/^Options:/\",line)) {", "+   \t                \tline = \"Options: \"+lock;", "+\t\t\t\t\t}", "+                    ", "+                    labelSpec.append(line+\"\\n\");", "+           \t\t}", "+        \t};", "+        ", "+        \t", "+            ", "+\t\t\texecP4Command(\"label -o \"+name, handler);", "+            log(labelSpec.toString(),Project.MSG_DEBUG);", "+", "+            log(\"Now locking label...\",Project.MSG_VERBOSE);", "+\t\t\thandler = new P4HandlerAdapter() {", "+\t\t\t\tpublic void process(String line) {", "+\t\t\t\t\tlog(line, Project.MSG_VERBOSE);", "+\t\t\t\t}", "+        \t};", "+", "+            handler.setOutput(labelSpec.toString());", "+\t\t\texecP4Command(\"label -i\", handler);", "+        }", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65ff8fc5e98bdc97621cc2f192237b73", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Delete.java", "commitBeforeChange": "5f7fbe8b732d8ad675be2e58acf2fde106b484b5", "commitAfterChange": "ebac9845309a1af1c1814faa758cdd310f9f3bd9", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 44, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+                DirectoryScanner ds = fs.getDirectoryScanner();", "-                    filesetDirs.add(new ReverseDirs(getProject(), fsDir, fs", "-                            .getDirectoryScanner().getIncludedDirectories()));", "+                    filesetDirs.add(new ReverseDirs(getProject(), fsDir,", "+                                                    ds", "+                                                    .getIncludedDirectories()));", "+                }", "+", "+                if (removeNotFollowedSymlinks) {", "+                    String[] n = ds.getNotFollowedSymlinks();", "+                    if (n.length > 0) {", "+                        String[] links = new String[n.length];", "+                        System.arraycopy(n, 0, links, 0, n.length);", "+                        Arrays.sort(links, ReverseDirs.REVERSE);", "+                        for (int l = 0; l < links.length; l++) {", "+                            try {", "+                                SYMLINK_UTILS", "+                                    .deleteSymbolicLink(new File(links[l]),", "+                                                        this);", "+                            } catch (java.io.IOException ex) {", "+                                handle(ex);", "+                            }", "+                        }", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7789a5a7a4348c9fac7564a7a775d8b1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/LayoutPreservingProperties.java", "commitBeforeChange": "a9f17b8762844ce8dde2b9563286a431d223fbcb", "commitAfterChange": "127dbbc9430bd1d3761987c27f66258d1e885d30", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      public void store(OutputStream out, String header) throws IOException", "signatureAfterChange": "      public void store(OutputStream out, String header) throws IOException", "diff": ["+        int skipLines = 0;", "+        int totalLines = logicalLines.size();", "+", "+            if (totalLines > 0", "+                && logicalLines.get(0) instanceof Comment", "+                && header.equals(logicalLines.get(0).toString().substring(1))) {", "+                skipLines = 1;", "+            }", "-        osw.write(\"#\" + (new Date()).toString() + LS);", "+", "+        // we may be updatiung a file written by this class, replace", "+        // the date comment instead of adding a new one and preserving", "+        // the one written last time", "+        if (totalLines > skipLines", "+            && logicalLines.get(skipLines) instanceof Comment) {", "+            try {", "+                DateUtils.parseDateFromHeader(logicalLines", "+                                              .get(skipLines)", "+                                              .toString().substring(1));", "+                skipLines++;", "+            } catch (java.text.ParseException pe) {", "+                // not an existing date comment", "+            }", "+        }", "+        osw.write(\"#\" + DateUtils.getDateForHeader() + LS);", "-        boolean maySkipComment = header != null;", "-        for (Iterator i = logicalLines.iterator(); i.hasNext();", "-             maySkipComment = false) {", "+        for (Iterator i = logicalLines.subList(skipLines, totalLines).iterator();", "+             i.hasNext(); ) {", "-            if (maySkipComment && line instanceof Comment && ", "-                header.equals(line.toString().substring(1))) {", "-                continue;", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e1d7f15c968015498334d6f421f5487", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "6b3d8a02956aad55938df6c7a1b2994a4acc5f6a", "commitAfterChange": "fe4a5cb02940376fddc661302141394be20d1f02", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 19, "signatureBeforeChange": "      private static void configureTasks(Project project,                                        Target target,                                        Element targetElement)         throws BuildException", "signatureAfterChange": "          public void init(String tag, AttributeList attrs) throws SAXParseException", "diff": ["-    private static void configureTasks(Project project,", "-                                       Target target,", "-                                       Element targetElement)", "-        throws BuildException", "-    {", "-        NodeList list = targetElement.getChildNodes();", "-        for (int i = 0; i < list.getLength(); i++) {", "-            Node node = list.item(i);", "-            // right now, all we are interested in is element nodes", "-            // not quite sure what to do with others except drop 'em", "-            if (node.getNodeType() == Node.ELEMENT_NODE) {", "-                Element element = (Element)node;", "-                String taskType = element.getTagName();", "-                // XXX", "-                // put in some sanity checking", "+        public void init(String tag, AttributeList attrs) throws SAXParseException {", "+            task = project.createTask(tag);", "+            configure(task, attrs);", "+            task.setLocation(new Location(buildFile.toString(), locator.getLineNumber(), locator.getColumnNumber()));", "+            task.init();", "-                Task task = project.createTask(taskType);", "-", "-                // get the attributes of this element and reflect them", "-                // into the task", "-", "-                configure(project, task, element);", "-                task.init();", "+            // Top level tasks don't have associated targets", "+            if (target != null) {", "-", "-                processNestedProperties(project, task, element);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7eff4d2d5da2529da8ad4d823a2f3eb8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "784f04c929eb440b8c3b792671053f789160da4f", "commitAfterChange": "b7e18b46c407a3a2b29b632055eb03d5ad434151", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "          protected void scandir(String dir, String vpath, boolean fast)", "signatureAfterChange": "          protected void scandir(String dir, String vpath, boolean fast)", "diff": ["-                            String name = file.getName();", "+                            String name = vpath + file.getName();", "-                                        scandir(name, ", "-                                                vpath + name + File.separator,", "-                                                fast);", "+                                        scandir(file.getName(), ", "+                                                name + File.separator, fast);", "+                                    if (fast && couldHoldIncluded(name)) {", "+                                        scandir(file.getName(), ", "+                                                name + File.separator, fast);", "+                                    }", "-                                    scandir(name, ", "-                                            vpath + name + File.separator, ", "-                                            fast);", "+                                    scandir(file.getName(), ", "+                                            name + File.separator, fast);", "-                                scandir(name, vpath + name + File.separator, ", "-                                        fast);", "+                                scandir(file.getName(), ", "+                                        name + File.separator, fast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f251ef234ea0e036ddc3571cea75090", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteOn.java", "commitBeforeChange": "3732eb195b3d24d6480a2d7edb2818b325a3e199", "commitAfterChange": "b0507d4451b72856ddca45183143a96493e8ef3e", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 18, "signatureBeforeChange": "      protected void runExec(Execute exe) throws BuildException", "signatureAfterChange": "      protected void runExec(Execute exe) throws BuildException", "diff": ["+", "-                        if (haveExecuted) {", "+", "+                        if (redirectorElement != null) {", "+                            setupRedirector();", "+                            redirectorElement.configure(redirector, s[j]);", "+                        }", "+", "+                        if (redirectorElement != null || haveExecuted) {", "-                            // reading of pipes", "-                            exe.setStreamHandler(createHandler());", "+                            // reading of pipes;", "+                            // go ahead and do it always w/ nested redirectors", "+                            exe.setStreamHandler(redirector.createHandler());", "-                        if (haveExecuted) {", "+", "+                        if (redirectorElement != null) {", "+                            setupRedirector();", "+                            redirectorElement.configure(redirector, s[j]);", "+                        }", "+", "+                        if (redirectorElement != null || haveExecuted) {", "-                            // reading of pipes", "-                            exe.setStreamHandler(createHandler());", "+                            // reading of pipes;", "+                            // go ahead and do it always w/ nested redirectors", "+                            exe.setStreamHandler(redirector.createHandler());", "+            redirector.setAppendProperties(false);", "+            redirector.setProperties();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "837539843847ed2ba26ee13cb1509405", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ResourceUtils.java", "commitBeforeChange": "127199510da5c3579a0814f19a2635e95bbca901", "commitAfterChange": "e05733aa9b6666651f4aa455e3ce0dc0158951b2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static Resource[] selectOutOfDateSources(ProjectComponent logTo,                                                     Resource[] source,                                                     FileNameMapper mapper,                                                     ResourceFactory targets)", "signatureAfterChange": "     public static Resource[] selectOutOfDateSources(ProjectComponent logTo,                                                     Resource[] source,                                                     FileNameMapper mapper,                                                     ResourceFactory targets,                                                     long granularity)", "diff": ["-        long now = (new java.util.Date()).getTime();", "-        /*", "-          If we're on Windows, we have to munge the time up to 2 secs to", "-          be able to check file modification times.", "-          (Windows has a max resolution of two secs for modification times)", "-          Actually this is a feature of the FAT file system, NTFS does", "-          not have it, so if we could reliably passively test for an NTFS", "-          file systems we could turn this off...", "-        */", "-        if (Os.isFamily(\"windows\")) {", "-            now += 2000;", "-        }", "+     */", "+    public static Resource[] selectOutOfDateSources(ProjectComponent logTo,", "+                                                    Resource[] source,", "+                                                    FileNameMapper mapper,", "+                                                    ResourceFactory targets,", "+                                                    long granularity) {", "+        long now = (new java.util.Date()).getTime() + granularity;", "-                    } else if (!atarget.isDirectory() && atarget.getLastModified()", "-                               < source[counter].getLastModified()) {", "+                    } else if (!atarget.isDirectory() && ", "+                               SelectorUtils.isOutOfDate(source[counter], ", "+                                                         atarget,", "+                                                         (int) granularity)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87a00cc9cbdbbbb26554d45e03ae2203", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "37ed344b385cde54ee62f2e66d347cb243dd6708", "commitAfterChange": "33107ab10098823c23924741100a6c3faf9fd267", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 20, "signatureBeforeChange": "     protected void execSQL(String sql) throws SQLException", "signatureAfterChange": "     protected void execSQL(String sql) throws SQLException", "diff": ["-        if (!statement.execute(sql)) {", "-            log(statement.getUpdateCount()+\" rows affected\", ", "-                Project.MSG_VERBOSE);", "+        try {  ", "+            totalSql++;", "+            if (!statement.execute(sql)) {", "+                log(statement.getUpdateCount()+\" rows affected\", ", "+                    Project.MSG_VERBOSE);", "+            }", "+            ", "+            if (print) {", "+                printResults();", "+            }", "+            ", "+            SQLWarning warning = conn.getWarnings();", "+            while(warning!=null){", "+                log(warning + \" sql warning\", Project.MSG_VERBOSE);", "+                warning=warning.getNextWarning();", "+            }", "+            conn.clearWarnings();", "+            goodSql++;", "-", "-        if (print) {", "-            printResults();", "+        catch (SQLException e) {", "+            log(\"Failed to execute: \" + sql, Project.MSG_ERR);", "+            if (!onError.equals(\"continue\")) throw e;", "+            log(e.toString(), Project.MSG_ERR);", "-", "-        SQLWarning warning = conn.getWarnings();", "-        while(warning!=null){", "-            log(warning + \" sql warning\", Project.MSG_VERBOSE);", "-            warning=warning.getNextWarning();", "-        }", "-        conn.clearWarnings();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93f30c00c42a12a37b1c5c700b1be750", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ResourceUtils.java", "commitBeforeChange": "50558dd274c428071d86fbc78ce5431ebb88935c", "commitAfterChange": "a4c986354481641bc4b9811854fefaf2fec7f86a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public static ResourceCollection selectOutOfDateSources(ProjectComponent logTo,                                                             ResourceCollection source,                                                             FileNameMapper mapper,                                                             ResourceFactory targets,                                                             final long granularity)", "signatureAfterChange": "     public static ResourceCollection selectOutOfDateSources(ProjectComponent logTo,                                                             ResourceCollection source,                                                             FileNameMapper mapper,                                                             ResourceFactory targets,                                                             final long granularity)", "diff": ["+        logFuture(logTo, source, granularity);", "+        ResourceSelectorProvider p = ", "+            new ResourceSelectorProvider() {", "+                public ResourceSelector", "+                    getTargetSelectorForSource(final Resource sr) {", "+                    return new ResourceSelector() {", "+                        public boolean isSelected(Resource target) {", "+                            /* Extra I/O, probably wasted:", "+                               if (target.isDirectory()) {", "+                               return false;", "+                               }", "+                            */", "+                            return SelectorUtils.isOutOfDate(sr, target,", "+                                                             granularity);", "+                        }", "+                    };", "+                }", "+            };", "+        return selectSources(logTo, source, mapper, targets, p);", "+    }", "-        logFuture(logTo, source, granularity);", "-            r.add(new ResourceSelector() {", "-                public boolean isSelected(Resource target) {", "-                    /* Extra I/O, probably wasted:", "-                    if (target.isDirectory()) {", "-                        return false;", "-                    }", "-                     */", "-                    return SelectorUtils.isOutOfDate(sr, target, granularity);", "-                }", "-            });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94da575dab708fce0350fb393ca430ce", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "62ff30c775164f20e004fc217cccbc9a0f4453ec", "commitAfterChange": "b57651f539a20ca5b1e4bb50eb2737eac648d622", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      protected Main(String[] args) throws BuildException", "signatureAfterChange": "      protected Main(String[] args) throws BuildException", "diff": ["+            } else if (arg.startsWith(\"-propertyfile\")) {", "+                try {", "+                    propertyFiles.addElement(args[i+1]);", "+                    i++;", "+                } catch (ArrayIndexOutOfBoundsException aioobe) {", "+                    String msg = \"You must specify a property filename when \" +", "+                        \"using the -propertyfile argument\";", "+                    System.out.println(msg);", "+                    return;", "+                }", "-", "-", "+        ", "+        }", "+", "+        // Load the property files specified by -propertyfile", "+        for (int propertyFileIndex=0;", "+             propertyFileIndex < propertyFiles.size();", "+             propertyFileIndex++) {", "+            String filename = (String) propertyFiles.elementAt(propertyFileIndex);", "+            Properties props = new Properties();", "+            try {", "+                FileInputStream fis = new FileInputStream(filename);", "+                props.load(fis);", "+            }", "+            catch (IOException e) {", "+                System.out.println(\"Could not load property file \"", "+                   + filename + \": \" + e.getMessage());", "+            }", "+            ", "+            // ensure that -D properties take precedence", "+            Enumeration propertyNames = props.propertyNames();", "+            while (propertyNames.hasMoreElements()) {", "+                String name = (String) propertyNames.nextElement();", "+                if (definedProps.getProperty(name) == null) {", "+                    definedProps.put(name, props.getProperty(name));", "+                }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "953a93c5a2d746ca0f9c24afb5da610a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Move.java", "commitBeforeChange": "e13d922745cda9a00544c2010e21cafce218e709", "commitAfterChange": "fd507cf2d23a705cb42d8870b483ee3f65d0bc8f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "      protected void doFileOperations()", "signatureAfterChange": "      protected void doFileOperations()", "diff": ["-        if (fileCopyMap.size() > 0) {", "+        if (fileCopyMap.size() > 0) {   // files to move", "-                    project.copyFile(fromFile, ", "-                                     toFile, ", "-                                     filtering, ", "-                                     forceOverwrite);", "+                    project.copyFile(fromFile, toFile, filtering, forceOverwrite);", "+", "+        if (includeEmpty) {", "+            Enumeration e = dirCopyMap.elements();", "+            int count = 0;", "+            while (e.hasMoreElements()) {", "+                File d = new File((String)e.nextElement());", "+                if (!d.exists()) {", "+                    if (!d.mkdirs()) {", "+                        log(\"Unable to create directory \" + d.getAbsolutePath(), Project.MSG_ERR);", "+                    } else {", "+                        count++;", "+                    }", "+                }", "+            }", "+", "+            if (count > 0) {", "+                log(\"Moved \" + count + \" empty directories to \" + destDir.getAbsolutePath());", "+            }", "+        }", "+", "+        if (filesets.size() > 0) {", "+            Enumeration e = filesets.elements();", "+            while (e.hasMoreElements()) {", "+                FileSet fs = (FileSet)e.nextElement();", "+                File dir = fs.getDir(project);", "+", "+                if (okToDelete(dir)) {", "+                    deleteDir(dir);", "+                }", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a002023fc975ce6fadedcc9dd90b911b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java", "commitBeforeChange": "ec4f3457422ecd2218feeb6181a56f6238b28144", "commitAfterChange": "4a2da130a89cb00a8b2170a9514e26b06f1f5725", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     protected Commandline setupModernJavacCommandlineSwitches(Commandline cmd)", "signatureAfterChange": "     protected Commandline setupModernJavacCommandlineSwitches(Commandline cmd)", "diff": ["-        } else if ((assumeJava15() || assumeJava16() || assumeJava17() || assumeJava18())", "+        } else if (!assumeJava13() && !assumeJava14()", "-            if (t.equals(\"1.1\") || t.equals(\"1.2\") || t.equals(\"1.3\")", "-                || t.equals(\"1.4\")) {", "-                setImplicitSourceSwitch((assumeJava15() || assumeJava16())", "-                                        ? \"1.5 in JDK 1.5 and 1.6\"", "-                                        : (assumeJava17()", "-                                           ? \"1.7 in JDK 1.7\"", "-                                           : \"1.8 in JDK 1.8\"),", "-                                        cmd, t, s);", "-            } else if (assumeJava17() && (t.equals(\"1.5\") || t.equals(\"1.6\") || t.equals(\"5\") || t.equals(\"6\"))) {", "-                setImplicitSourceSwitch(\"1.7 in JDK 1.7\", cmd, t, t);", "-            } else if (assumeJava18() &&", "-                       (t.equals(\"1.5\") || t.equals(\"1.6\") || t.equals(\"1.7\")", "-                        || t.equals(\"5\") || t.equals(\"6\") || t.equals(\"7\"))) {", "-                setImplicitSourceSwitch(\"1.8 in JDK 1.8\", cmd, t, t);", "+            if (mustSetSourceForTarget(t)) {", "+                setImplicitSourceSwitch(cmd, t, s);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1b010e5254608e854f86c1cda20d57a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SignJar.java", "commitBeforeChange": "0d4d3af7217eadd1463853997ecc1ed7f6870ddf", "commitAfterChange": "3b2ee536588e043b52f5926cd0d60639dada62aa", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 20, "signatureBeforeChange": "     protected boolean isUpToDate(File jarFile, File signedjarFile)", "signatureAfterChange": "     protected boolean isUpToDate(File jarFile, File signedjarFile)", "diff": ["-        if (null == jarFile) {", "+        if (null == jarFile && !jarFile.exists()) {", "+            //these are pathological case, but retained in case somebody", "+            //subclassed us.", "-        if (null != signedjarFile) {", "-", "-            if (!jarFile.exists()) {", "-              return false;", "-            }", "-            if (!signedjarFile.exists()) {", "-              return false;", "-            }", "-            if (jarFile.equals(signedjarFile)) {", "-              return false;", "-            }", "-            if (FILE_UTILS.isUpToDate(jarFile, signedjarFile)) {", "-                return true;", "-            }", "-        } else {", "-            if (lazy) {", "-                return isSigned(jarFile);", "-            }", "+        //we normally compare destination with source", "+        File destFile = signedjarFile;", "+        if (destFile == null) {", "+            //but if no dest is specified, compare source to source", "+            destFile = jarFile;", "-        return false;", "+        //if, by any means, the destfile and source match,", "+        if (jarFile.equals(destFile)) {", "+            if (lazy) {", "+                //we check the presence of signatures on lazy signing", "+                return isSigned(jarFile);", "+            }", "+            //unsigned or non-lazy self signings are always false", "+            return false;", "+        }", "+", "+        //if they are different, the timestamps are used", "+        return FILE_UTILS.isUpToDate(jarFile, destFile);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b79994da35563da1cd209fb0d8d05aed", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "12df7ec426adb3e47cfb0d268d9b646769e38ac7", "commitAfterChange": "152be14c152edab99f90e8c71f589a6bf8087bbe", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "          protected void scandir(String dir, String vpath, boolean fast)", "signatureAfterChange": "          protected void scandir(String dir, String vpath, boolean fast)", "diff": ["-                    if (!file.getName().equals(\".\") && !file.getName().equals(\"..\")) {", "+                    if (!file.getName().equals(\".\") ", "+                        && !file.getName().equals(\"..\")) {", "-                                        scandir(name, vpath + name + File.separator, fast);", "+                                        scandir(name, ", "+                                                vpath + name + File.separator,", "+                                                fast);", "-                                    scandir(name, vpath + name + File.separator, fast);", "+                                    scandir(name, ", "+                                            vpath + name + File.separator, ", "+                                            fast);", "-                                scandir(name, vpath + name + File.separator, fast);", "+                                scandir(name, vpath + name + File.separator, ", "+                                        fast);", "-                throw new BuildException(\"Error while communicating with FTP server: \", e);", "+                throw new BuildException(\"Error while communicating with FTP \"", "+                                         + \"server: \", e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bce8722eb66339cdfed60dcb8be0625a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/PropertyFile.java", "commitBeforeChange": "334ac128fea4c6e8e76c7c8af8061a47b5019bf4", "commitAfterChange": "ba37bf7991e099b567f8cd5a09178893ff55bb9c", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 16, "signatureBeforeChange": "          protected void executeOn(Properties props) throws BuildException", "signatureAfterChange": "          protected void executeOn(Properties props) throws BuildException", "diff": ["-        protected void executeOn(Properties props) throws BuildException ", "+        protected void executeOn(Properties props) throws BuildException", "-            // Fork off process per the operation type requested", "+            checkParameters();", "-            if (m_type.equals(INTEGER_TYPE)) ", "-            {", "-                executeInteger((String)props.get(m_key));", "-            }", "-            else if (m_type.equals(DATE_TYPE)) ", "-            {", "-                executeDate((String)props.get(m_key));", "-            }", "-            else if (m_type.equals(STRING_TYPE)) ", "-            {", "-            }", "-            else ", "-            {", "-                throw new BuildException(\"Unknown operation type: \"+m_type+\"\");", "-            }", "-            ", "+                if (m_type == Type.INTEGER_TYPE)", "+                {", "+                    executeInteger((String)props.get(m_key));", "+                }", "+                else if (m_type == Type.DATE_TYPE)", "+                {", "+                    executeDate((String)props.get(m_key));", "+                }", "+                else if (m_type == Type.STRING_TYPE)", "+                {", "+                    executeString((String)props.get(m_key));", "+                }", "+                else", "+                {", "+                    throw new BuildException(\"Unknown operation type: \"+m_type+\"\");", "+                }", "+                npe.printStackTrace();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c244f0a84ceeb03bd1b06d0a3cfd1cfe", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "7b6a46d13193059c7ea056ad646fe5620e2bb79d", "commitAfterChange": "740ed5fbfbb7f59db596062f9e853fba40a65722", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     protected void execSQL(String sql, PrintStream out) throws SQLException", "signatureAfterChange": "     protected void execSQL(String sql, PrintStream out) throws SQLException", "diff": ["-            if (!statement.execute(sql)) {", "-                log(statement.getUpdateCount() + \" rows affected\",", "-                    Project.MSG_VERBOSE);", "-            } else {", "-                if (print) {", "-                    printResults(out);", "+", "+            boolean ret;", "+            int updateCount = 0, updateCountTotal = 0;", "+            ResultSet resultSet = null;", "+", "+            ret = statement.execute(sql);", "+            updateCount = statement.getUpdateCount();", "+            resultSet = statement.getResultSet();", "+            do", "+            {", "+                if (!ret)", "+                {", "+                    if (updateCount != -1)", "+                    {", "+                        updateCountTotal += updateCount;", "+                    }", "+                else", "+                {", "+                    if (print)", "+                    {", "+                        printResults(out);", "+                    }", "+                }", "+                ret = statement.getMoreResults();", "+                updateCount = statement.getUpdateCount();", "+                resultSet = statement.getResultSet();", "+            } while ((resultSet != null) || (updateCount != -1));", "+", "+            log(updateCountTotal + \" rows affected\",", "+                Project.MSG_VERBOSE);", "+", "+            if (print)", "+            {", "+                StringBuffer line = new StringBuffer();", "+                line.append(updateCountTotal + \" rows affected\");", "+                out.println(line);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbf50aba190b7beb6830389d79c27d47", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/email/MimeMailer.java", "commitBeforeChange": "39b1929142d8d29f58b4654edf13d677e3959dcb", "commitAfterChange": "416d46165ba953cbc74387d62e82515e8180208a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void send()", "signatureAfterChange": "   public void send()", "diff": ["-    /** Sends the email  */", "-    public void send() {", "+  /** Sends the email  */", "+  public void send() {", "-            if (subject != null) {", "-                msg.setSubject(subject);", "+            // Choosing character set of the mail message", "+            // First: looking it from MimeType", "+            String charset = parseCharSetFromMimeType(message.getMimeType());", "+            if(charset!=null) {", "+              // Assign/reassign message charset from MimeType", "+                message.setCharset(charset);", "+            // Next: looking if charset having explict definition", "+            else {", "+              charset = message.getCharset();", "+              if(charset==null) {", "+                // Using default", "+                charset=defaultCharset;", "+                message.setCharset(charset);", "+              }", "+            }", "+", "+            // Using javax.activation.DataSource paradigm", "+            StringDataSource sds = new StringDataSource();", "+            sds.setContentType(message.getMimeType());", "+            sds.setCharset(charset);", "+", "+            if (subject != null)", "+                msg.setSubject(subject,charset);", "-            ByteArrayOutputStream baos = new ByteArrayOutputStream();", "-            PrintStream out = new PrintStream(baos);", "-", "+            PrintStream out = new PrintStream(sds.getOutputStream());", "-", "-            textbody.setContent(baos.toString(), message.getMimeType());", "+            textbody.setDataHandler(new DataHandler(sds));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d22c1f12e8cf8f8d3d8b4e9081812e03", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "93db46be115205107729104e728d45687d885295", "commitAfterChange": "20ab59bff57796a67e1cdfefbc29826c7d55edba", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 31, "signatureBeforeChange": "      private void simpleSort( int lo, int hi, int d )", "signatureAfterChange": "      private void simpleSort( int lo, int hi, int d )", "diff": ["-        while( incs[ hp ] < bigN )", "+        while( m_incs[ hp ] < bigN )", "-            h = incs[ hp ];", "+            h = m_incs[ hp ];", "-                v = zptr[ i ];", "+                v = m_zptr[ i ];", "-                while( fullGtU( zptr[ j - h ] + d, v + d ) )", "+                while( fullGtU( m_zptr[ j - h ] + d, v + d ) )", "-                    zptr[ j ] = zptr[ j - h ];", "+                    m_zptr[ j ] = m_zptr[ j - h ];", "-                zptr[ j ] = v;", "+                m_zptr[ j ] = v;", "-                v = zptr[ i ];", "+                v = m_zptr[ i ];", "-                while( fullGtU( zptr[ j - h ] + d, v + d ) )", "+                while( fullGtU( m_zptr[ j - h ] + d, v + d ) )", "-                    zptr[ j ] = zptr[ j - h ];", "+                    m_zptr[ j ] = m_zptr[ j - h ];", "-                zptr[ j ] = v;", "+                m_zptr[ j ] = v;", "-                v = zptr[ i ];", "+                v = m_zptr[ i ];", "-                while( fullGtU( zptr[ j - h ] + d, v + d ) )", "+                while( fullGtU( m_zptr[ j - h ] + d, v + d ) )", "-                    zptr[ j ] = zptr[ j - h ];", "+                    m_zptr[ j ] = m_zptr[ j - h ];", "-                zptr[ j ] = v;", "+                m_zptr[ j ] = v;", "-                if( workDone > workLimit && firstAttempt )", "+                if( m_workDone > m_workLimit && m_firstAttempt )"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f08ed15fd8130f1653663982b84ba002", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/launch/Launcher.java", "commitBeforeChange": "4848c4503153606ff29c6a0548ec094eec904091", "commitAfterChange": "6e72d89be84e4a3b021e1d59f14a97d2f4959adc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private int run(String[] args)             throws LaunchException, MalformedURLException", "signatureAfterChange": "     private int run(String[] args)             throws LaunchException, MalformedURLException", "diff": ["-            System.setProperty(ANTHOME_PROPERTY, antHome.getAbsolutePath());", "+            setProperty(ANTHOME_PROPERTY, antHome.getAbsolutePath());", "-                + \"ant could not be located\");", "+                + \"ant could not be located (estimated value=\"+antHome.getAbsolutePath()+\")\");", "+            } else if (args[i].equals(\"--launchdiag\")) {", "+                launchDiag = true;", "+", "+        logPath(\"Launcher JAR\",sourceJar);", "+        logPath(\"Launcher JAR directory\", sourceJar.getParentFile());", "+        logPath(\"java.home\", new File(System.getProperty(\"java.home\")));", "+        File toolsJAR = Locator.getToolsJar();", "+        logPath(\"tools.jar\",toolsJAR);", "-            libURLs, userURLs, systemURLs, Locator.getToolsJar());", "+            libURLs, userURLs, systemURLs, toolsJAR);", "-        System.setProperty(JAVA_CLASS_PATH, baseClassPath.toString());", "+        setProperty(JAVA_CLASS_PATH, baseClassPath.toString());", "+        Throwable thrown=null;", "-            exitCode = EXIT_CODE_ERROR;", "+            thrown = ex;", "+        } catch (ClassNotFoundException cnfe) {", "+            System.err.println(", "+                    \"Failed to locate\" + mainClassname);", "+            thrown = cnfe;", "+            thrown=t;", "+        }", "+        if(thrown!=null) {", "+            System.err.println(ANTHOME_PROPERTY+\": \"+antHome.getAbsolutePath());", "+            System.err.println(\"Classpath: \" + baseClassPath.toString());", "+            System.err.println(\"Launcher JAR: \" + sourceJar.getAbsolutePath());", "+            System.err.println(\"Launcher Directory: \" + jarDir.getAbsolutePath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f94948ccd709d8f04d620d3c06a94dd5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "4464369821e5824727322622259f6ffd3ab8880b", "commitAfterChange": "1d3ca73f3c02e7a06c94f677057b04c3c238027e", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 32, "signatureBeforeChange": "      private void scandir(File dir, String vpath, boolean fast,                          String[] newfiles)", "signatureAfterChange": "      private void scandir(File dir, String vpath, boolean fast,                          String[] newfiles, Stack directoryNamesFollowed)", "diff": ["-                         String[] newfiles) {", "+                         String[] newfiles, Stack directoryNamesFollowed) {", "+        } else {", "+            directoryNamesFollowed.push(dir.getName());", "+", "+", "+                if (followSymlinks", "+                    && causesIllegalSymlinkLoop(newfiles[i], dir,", "+                                                directoryNamesFollowed)) {", "+                    // will be caught and redirected to Ant's logging system", "+                    System.err.println(\"skipping symbolic link \"", "+                                       + file.getAbsolutePath()", "+                                       + \" -- too many levels of symbolic\"", "+                                       + \" links.\");", "+                    continue;", "+                }", "+", "-                    accountForIncludedDir(name, file, fast, children);", "+                    accountForIncludedDir(name, file, fast, children,", "+                                          directoryNamesFollowed);", "-                        scandir(file, name + File.separator, fast, children);", "+                        scandir(file, name + File.separator, fast, children,", "+                                directoryNamesFollowed);", "-                    scandir(file, name + File.separator, fast, children);", "+                    scandir(file, name + File.separator, fast, children,", "+                            directoryNamesFollowed);", "+        }", "+", "+        if (followSymlinks) {", "+            directoryNamesFollowed.pop();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdabdaf85ad284ab6855a2509f520678", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "a9aa3e7efe1a4e4437f575079a89f915936b95dd", "commitAfterChange": "c341e8606d84afbac9fbe08b9814bbb0bf826e3b", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 47, "signatureBeforeChange": "     protected final void addResources(ResourceCollection rc,                                       Resource[] resources,                                       ZipOutputStream zOut)         throws IOException", "signatureAfterChange": "     protected final void addResources(ResourceCollection rc,                                       Resource[] resources,                                       ZipOutputStream zOut)         throws IOException", "diff": ["+", "-                if (!name.endsWith(\"/\")) {", "-                    name = name + \"/\";", "-                }", "-            }", "+                addDirectoryResource(resources[i], name, \"\", base, zOut,", "+                                     ArchiveFileSet.DEFAULT_DIR_MODE,", "+                                     ArchiveFileSet.DEFAULT_DIR_MODE);", "-            addParentDirs(base, name, zOut, \"\",", "-                          ArchiveFileSet.DEFAULT_DIR_MODE);", "+            } else {", "+                addParentDirs(base, name, zOut, \"\",", "+                              ArchiveFileSet.DEFAULT_DIR_MODE);", "-            if (!resources[i].isDirectory()) {", "-                    InputStream is = null;", "-                    try {", "-                        is = resources[i].getInputStream();", "-                        zipFile(is, zOut, name,", "-                                resources[i].getLastModified(),", "-                                null, ArchiveFileSet.DEFAULT_FILE_MODE);", "-                    } finally {", "-                        FileUtils.close(is);", "-                    }", "+                    addResource(resources[i], name, \"\", zOut,", "+                                ArchiveFileSet.DEFAULT_FILE_MODE,", "+                                null, null);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6da751e394e5fee47a669bd358d5a1cd", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8da039c261a1aadabdf47a3050847db6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "bb05312e66a2403d2405988dbaf0830cde65df7c", "commitAfterChange": "da5f3bfd256e383926c6ece58dba15a7d4bd5761", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     @Deprecated     public static synchronized Vector getProcEnvironment()", "signatureAfterChange": "     @Deprecated     public static synchronized Vector<String> getProcEnvironment()", "diff": ["-    public static synchronized Vector getProcEnvironment() {", "-        Vector v = new Vector();", "-        Iterator it = getEnvironmentVariables().entrySet().iterator();", "-        while (it.hasNext()) {", "-            Map.Entry entry = (Map.Entry) it.next();", "+    public static synchronized Vector<String> getProcEnvironment() {", "+        Vector<String> v = new Vector<String>();", "+        for (Entry<String, String> entry : getEnvironmentVariables().entrySet()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94e78a72ba66f7ba33700e8942d76165", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Target.java", "commitBeforeChange": "d25488cbbb28cf25e1f91f714c70999fd105432d", "commitAfterChange": "3d706ab8188a674936880b6f4530b0cf3991758b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public Task[] getTasks()", "signatureAfterChange": "     public Task[] getTasks()", "diff": ["-        List tasks = new ArrayList(children.size());", "-        Iterator it = children.iterator();", "-        while (it.hasNext()) {", "-            Object o = it.next();", "+        List<Task> tasks = new ArrayList<Task>(children.size());", "+        for (Object o : children) {", "-                tasks.add(o);", "+                tasks.add((Task) o);", "-        return (Task[]) tasks.toArray(new Task[tasks.size()]);", "+        return tasks.toArray(new Task[tasks.size()]);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fff09254eef6a1f1f0c3bf814d23634f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7789a5a7a4348c9fac7564a7a775d8b1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/LayoutPreservingProperties.java", "commitBeforeChange": "a9f17b8762844ce8dde2b9563286a431d223fbcb", "commitAfterChange": "127dbbc9430bd1d3761987c27f66258d1e885d30", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      public void store(OutputStream out, String header) throws IOException", "signatureAfterChange": "      public void store(OutputStream out, String header) throws IOException", "diff": ["+        int skipLines = 0;", "+        int totalLines = logicalLines.size();", "+", "+            if (totalLines > 0", "+                && logicalLines.get(0) instanceof Comment", "+                && header.equals(logicalLines.get(0).toString().substring(1))) {", "+                skipLines = 1;", "+            }", "-        osw.write(\"#\" + (new Date()).toString() + LS);", "+", "+        // we may be updatiung a file written by this class, replace", "+        // the date comment instead of adding a new one and preserving", "+        // the one written last time", "+        if (totalLines > skipLines", "+            && logicalLines.get(skipLines) instanceof Comment) {", "+            try {", "+                DateUtils.parseDateFromHeader(logicalLines", "+                                              .get(skipLines)", "+                                              .toString().substring(1));", "+                skipLines++;", "+            } catch (java.text.ParseException pe) {", "+                // not an existing date comment", "+            }", "+        }", "+        osw.write(\"#\" + DateUtils.getDateForHeader() + LS);", "-        boolean maySkipComment = header != null;", "-        for (Iterator i = logicalLines.iterator(); i.hasNext();", "-             maySkipComment = false) {", "+        for (Iterator i = logicalLines.subList(skipLines, totalLines).iterator();", "+             i.hasNext(); ) {", "-            if (maySkipComment && line instanceof Comment && ", "-                header.equals(line.toString().substring(1))) {", "-                continue;", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a9219e09306bd5d786719230518d4da", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/compilers/Jikes.java", "commitBeforeChange": "03c6952a50ba663cea05d8a3e4cc4ca4b956d879", "commitAfterChange": "c7dfaa577bd7940283563befa0aacd048f5de4d7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public boolean execute() throws BuildException", "signatureAfterChange": "     public boolean execute() throws BuildException", "diff": ["-        Path classpath = new Path(project);", "+        Commandline cmd = new Commandline();", "-        // Jikes doesn't support an extension dir (-extdir)", "-        // so we'll emulate it for compatibility and convenience.", "-        classpath.addExtdirs(extdirs);", "+        // For -sourcepath, use the \"sourcepath\" value if present.", "+        // Otherwise default to the \"srcdir\" value.", "+        Path sourcepath = null;", "+        if (compileSourcepath != null) {", "+            sourcepath = compileSourcepath;", "+        } else {", "+            sourcepath = src;", "+        }", "+        // If the buildfile specifies sourcepath=\"\", then don't", "+        // output any sourcepath.", "+        if (sourcepath.size() > 0) {", "+            cmd.createArgument().setValue(\"-sourcepath\");", "+            cmd.createArgument().setPath(sourcepath);", "+        }", "+", "+        Path classpath = new Path(project);", "-        // Jikes has no option for source-path so we", "-        // will add it to classpath.", "-        if (compileSourcepath != null) {", "-            classpath.append(compileSourcepath);", "-        } else {", "-            classpath.append(src);", "-        }", "-", "-        Commandline cmd = new Commandline();", "+        if (extdirs != null && extdirs.size() > 0) {", "+            cmd.createArgument().setValue(\"-extdirs\");", "+            cmd.createArgument().setPath(extdirs);", "+        }", "+", "-            cmd.createArgument().setValue(\"-g\");", "+            String debugLevel = attributes.getDebugLevel();", "+            if (debugLevel != null) {", "+                cmd.createArgument().setValue(\"-g:\" + debugLevel);", "+            } else {", "+                cmd.createArgument().setValue(\"-g\");", "+            }", "+        } else {", "+            cmd.createArgument().setValue(\"-g:none\");", "-            /*", "-             * FIXME later", "-             *", "-             * let the magic property win over the attribute for backwards", "-             * compatibility", "-             */"]}]}
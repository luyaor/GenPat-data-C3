{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8dca9b8ab831d66106cd26c68ce44723", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59d971daaebe71f1a7fcce97f362cf2f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/vfs/provider/zip/ZipFileSystemProvider.java", "commitBeforeChange": "5b87919be6a8db15efe30f2de6e617aba31ef619", "commitAfterChange": "52926715b4f4f53da4b63cf660a14f357d7a9b6e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected FileSystem createFileSystem( ParsedUri uri ) throws FileSystemException", "signatureAfterChange": "     protected FileSystem createFileSystem( final ParsedUri uri )         throws FileSystemException", "diff": ["-    protected FileSystem createFileSystem( ParsedUri uri ) throws FileSystemException", "+    protected FileSystem createFileSystem( final ParsedUri uri )", "+        throws FileSystemException", "-        // Locate the Zip file", "-        ParsedZipUri zipUri = (ParsedZipUri)uri;", "-        String fileName = zipUri.getZipFile();", "-        // TODO - use the context to resolve zip file to a FileObject", "-        File file = new File( fileName ).getAbsoluteFile();", "-        DefaultFileName name = new DefaultFileName( m_parser, zipUri.getRootURI(), \"/\" );", "-        return new ZipFileSystem( name, file );", "+        final ParsedZipUri zipUri = (ParsedZipUri)uri;", "+        final FileObject file = zipUri.getZipFile();", "+", "+        // TODO - temporary hack; need to use a converter", "+        File destFile = null;", "+        try", "+        {", "+            final File cacheDir = new File( \"ant_vfs_cache\" );", "+            cacheDir.mkdirs();", "+            destFile = File.createTempFile( \"cache_\", \"_\" + file.getName().getBaseName(), cacheDir );", "+            destFile.deleteOnExit();", "+        }", "+        catch( IOException e )", "+        {", "+            throw new FileSystemException( \"Could not replicate file\", e );", "+        }", "+        FileObject destFileObj = getContext().resolveFile( null, destFile.getAbsolutePath() );", "+        destFileObj.copy( file );", "+", "+        // Create the file system", "+        DefaultFileName name = new DefaultFileName( m_parser, zipUri.getRootUri(), \"/\" );", "+        return new ZipFileSystem( name, destFile );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5a645f33f6ba1869d981228c37ab42e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Java.java", "commitBeforeChange": "5e898465ac1ab3d90fdc26dc34a2b87a2ea9be35", "commitAfterChange": "c5faebbd854cf6f4363402c2cd2a54749b4eeb61", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 13, "signatureBeforeChange": "     protected Vector tokenize(String args)", "signatureAfterChange": "     private int run(String[] command) throws BuildException", "diff": ["+     */", "+    private int run(String[] command) throws BuildException {", "+        Execute exe = new Execute(new LogStreamHandler(this, Project.MSG_INFO,", "+                                                       Project.MSG_WARN), ", "+                                  null);", "+        exe.setAntRun(project);", "+", "+        if (dir == null) dir = project.getBaseDir();", "+        exe.setWorkingDirectory(dir);", "+", "+        exe.setCommandline(command);", "+        try {", "+            return exe.execute();", "+        } catch (IOException e) {", "+            throw new BuildException(e, location);", "+        }", "+    }", "-     */", "-    protected Vector tokenize(String args) {", "-        Vector v = new Vector();", "-        if (args == null) return v;", "-", "-        StringTokenizer t = new StringTokenizer(args, \" \");", "-        ", "-        while (t.hasMoreTokens()) {", "-            v.addElement(t.nextToken());", "-        }", "-", "-        return v;", "-    }"]}]}
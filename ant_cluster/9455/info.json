{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "56038ef00ba09ce8283dcf16f5514eb1", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f3b8fd295ac12cbcfdd66974dba8f16", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/Sort.java", "commitBeforeChange": "c1a8cd521f77cc542c206e7ab3f4aeb6aae53e87", "commitAfterChange": "edd384517ac70036d69a1fe33887720419fba0ef", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     protected synchronized void dieOnCircularReference(Stack stk, Project p)         throws BuildException", "signatureAfterChange": "     protected synchronized void dieOnCircularReference(Stack stk, Project p)         throws BuildException", "diff": ["-            for (Iterator i = comp.v.iterator(); i.hasNext();) {", "-                Object o = i.next();", "-                if (o instanceof DataType) {", "-                    stk.push(o);", "-                    invokeCircularReferenceCheck((DataType) o, stk, p);", "+            if (comp.v != null && comp.v.size() > 0) {", "+                for (Iterator i = comp.v.iterator(); i.hasNext();) {", "+                    Object o = i.next();", "+                    if (o instanceof DataType) {", "+                        stk.push(o);", "+                        invokeCircularReferenceCheck((DataType) o, stk, p);", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51eefeb380b56e92e5f76b5ce5561abf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ComponentHelper.java", "commitBeforeChange": "c569344ce1b0fcac34c21d79c03704ccadcb9af3", "commitAfterChange": "527056c9efc3468a3b3c2bd0aba9c3b249474eb4", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "          public boolean contains(Object clazz)", "signatureAfterChange": "          public boolean contains(Object clazz)", "diff": ["-            for (Iterator i = values().iterator(); i.hasNext();) {", "-                AntTypeDefinition def = (AntTypeDefinition) i.next();", "-                Class c = def.getExposedClass(project);", "-                if (c == clazz) {", "-                    return true;", "+            boolean found = false;", "+            if (clazz instanceof Class) {", "+                for (Iterator i = values().iterator(); i.hasNext() && !found;) {", "+                    found |= (((AntTypeDefinition)(i.next())).getExposedClass(", "+                        project) == clazz);", "-            return false;", "+            return found;"]}]}
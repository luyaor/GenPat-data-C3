{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c8002c6227df8de16451ef1c88465191", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c56535e2cd5251d3e8c75eb733980a4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/PathTokenizer.java", "commitBeforeChange": "769fac83235a4c2fac00097cd26f201aa7eae534", "commitAfterChange": "a91adaf451abf4857fd8ce133757dfc3b433bf3f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public PathTokenizer(String path)", "signatureAfterChange": "     public PathTokenizer(String path)", "diff": ["-       tokenizer = new StringTokenizer(path, \":;\", false);", "-       dosStyleFilesystem = File.pathSeparatorChar == ';'; ", "+        if (onNetWare) {", "+            // For NetWare, use the boolean=true mode, so we can use delimiter ", "+            // information to make a better decision later.", "+            tokenizer = new StringTokenizer(path, \":;\", true);", "+        }", "+        else {", "+            // on Windows and Unix, we can ignore delimiters and still have", "+            // enough information to tokenize correctly.", "+            tokenizer = new StringTokenizer(path, \":;\", false);", "+        }", "+        dosStyleFilesystem = File.pathSeparatorChar == ';'; "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1667bcec18be0c295f4535db3b59141f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteOn.java", "commitBeforeChange": "45660d1b2d543689a2f6fbdc2f794263e7e7b85d", "commitAfterChange": "67fd3299e351531ef36c1678c191ccc2eaebb2c4", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     protected String[] getCommandline(String[] srcFiles, File[] baseDirs)", "signatureAfterChange": "     protected String[] getCommandline(String[] srcFiles, File[] baseDirs)", "diff": ["-                        String name = (new File(destDir, subTargets[j])).getAbsolutePath();", "+                        String name = null;", "+                        if (!relative) {", "+                            name =", "+                                (new File(destDir, subTargets[j])).getAbsolutePath();", "+                        } else {", "+                            name = subTargets[j];", "+                        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "411423011e7b7d266ad9f3e96fe28ec2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "c007edc9da8892674744c1142401c5db41dd655f", "commitAfterChange": "d2eddd7e4d3a7509fbebf87e11c1186073316be6", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     protected void addParentDirs(File baseDir, String entry,                                  ZipOutputStream zOut, String prefix)         throws IOException", "signatureAfterChange": "     protected void addParentDirs(File baseDir, String entry,                                  ZipOutputStream zOut, String prefix)         throws IOException", "diff": ["-            File f = new File(baseDir, dir);", "+            File f = null;", "+            if (baseDir != null) {", "+                f = new File(baseDir, dir);", "+            } else {", "+                f = new File(dir);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "583b878150e70d6c40d70b1d29cf5f11", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteOn.java", "commitBeforeChange": "7c913046ab65cbb3d5a850408f779c0ef8f24cb4", "commitAfterChange": "45660d1b2d543689a2f6fbdc2f794263e7e7b85d", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "     protected String[] getCommandline(String[] srcFiles, File[] baseDirs)", "signatureAfterChange": "     protected String[] getCommandline(String[] srcFiles, File[] baseDirs)", "diff": ["-            result[srcIndex+i] = ", "-                (new File(baseDirs[i], srcFiles[i])).getAbsolutePath();", "+            if (!relative) {", "+                result[srcIndex+i] = ", "+                    (new File(baseDirs[i], srcFiles[i])).getAbsolutePath();", "+            } else {", "+                result[srcIndex+i] = srcFiles[i];", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9794572794b05c405327157ef5915612", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelperRepository.java", "commitBeforeChange": "8dd8b1bb02f9992909c7bd08f8922eb9f35a5052", "commitAfterChange": "fdc711e2e2805a41b766e9d1e07d83512d97f658", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": "          public Object next()", "signatureAfterChange": "          public Object next()", "diff": ["-            Constructor c = (Constructor) nested.next();", "+            Constructor c;", "+            if (nested.hasNext()) {", "+                c = (Constructor) nested.next();", "+            } else {", "+                // last but not least, ant default project helper", "+                empty = true;", "+                c = PROJECTHELPER2_CONSTRUCTOR;", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddacb5f039402ba4333a68c2cf291b25", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ManifestTask.java", "commitBeforeChange": "7f78161f39c51c9315e11295014030b0debdef4a", "commitAfterChange": "709e8bb7a2132b80b51b7d2a9ec33c9df8c5db4f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                isr = new InputStreamReader(fis, \"UTF-8\");", "+                if (encoding == null) {", "+                    isr = new InputStreamReader(fis, \"UTF-8\");", "+                } else {", "+                    isr = new InputStreamReader(fis, encoding);", "+                }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c1b6d1f13ae852f85e3a467984b86e26", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12f9bb8bf3509e481dfab038a84f32bd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/anteater/source/main/org/apache/ant/cli/CLIFrontEnd.java", "commitBeforeChange": "421736ed4a52a3f068a31f53678b97915ebb0cc9", "commitAfterChange": "f85678f1abd081bfd165ce81b94bad652968e4fd", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void run(String[] args)", "signatureAfterChange": "     public void run(String[] args)", "diff": ["+     */", "+    public void run(String[] args) {", "+        this.args = args;", "+        String target = \"\";", "+        File buildFile = null;", "+        writeMessage(\"Ant(Eater) -- Proposed Ant 2.0\");", "+        ", "+        // process through the args set", "+        ", "+        if (isArg(\"help\")) {", "+            printHelp();", "+            return;", "+        }", "+        ", "+        if (isArg(\"quiet\")) {", "+            msgLevelFilter = MSG_LEVEL_HIGH;", "+        }", "+        ", "+        if (isArg(\"verbose\")) {", "+            msgLevelFilter = MSG_LEVEL_LOW;", "+        }", "+        ", "+        String argTaskpath = getArgValue(\"taskpath\");", "+        if (argTaskpath != null) {", "+            if (argTaskpath.equals(\"\")) {", "+                writeMessage(\"Must give a value for -taskpath\");", "+                return;", "+            } else {", "+                // XXX need to separate on path seps so that real paths can be taken", "+                // ant.addTaskPathNode(new File(argTaskpath));", "+            }", "+        }", "+        ", "+        String argBuildfile = getArgValue(\"buildfile\");", "+        if (argBuildfile != null) {", "+            if (argBuildfile.equals(\"\")) {", "+                writeMessage(\"Must give a value for -buildfile\");", "+                return;", "+            } else {", "+                //try {", "+                buildFile = new File(argBuildfile);", "+                    //ant.setBuildfile(new File(argBuildfile));", "+                //} catch (AntException ae) {", "+                //    writeMessage(\"Can't set buildfile\");", "+                //    writeMessage(ae.toString());", "+                //    return;", "+                //}", "+            }", "+        }", "+        ", "+        target = getTargetArg();", "+                ", "+        // XXX do something if we dont' have a buildfile set!", "+        ", "+        // XXX really should check to make sure that the target is set to something", "+        // like get the default...", "+        ", "+        try {", "+            ProjectBuilder projectBuilder = new ProjectBuilder(this);", "+            Project project = projectBuilder.buildFromFile(buildFile);", "+            //Project project = ant.getProject();", "+            ", "+            // XXX", "+            // get taskmanager from project and set taskpath nodes on it!", "+            ", "+            project.setFrontEnd(this);", "+            project.startBuild(target);", "+        } catch (AntException ae) {            ", "+            writeMessage(\"Build Stopped\");", "+            writeMessage(\"    Project: \" + ae.getProject().getName());", "+            writeMessage(\"     Target: \" + ae.getTarget().getName());", "+            writeMessage(\"  Task Type: \" + ae.getTask().getType());", "+            writeMessage(\"Details Follow\");", "+            writeMessage(\"\");", "+            writeMessage(ae.getMessage());", "+            ae.printStackTrace(System.out);", "+        }        ", "+    }", "-     */", "-    public void run(String[] args) {", "-        String target = \"\";", "-        writeMessage(\"Ant(Eater) -- Proposed Ant 2.0\");", "-        ", "-        // flip through args and set things accordingly", "-        for (int i = 0; i < args.length; i++) {", "-            String arg = args[i];", "-            // scan through -- all -aaa args come first.", "-            if (arg.startsWith(\"-\")) {", "-                if (arg.equals(\"-help\")) {", "-                    printHelp();", "-                    return; ", "-                } else if (arg.equals(\"-taskpath\")) {", "-                    // XXX", "-                    // need to seperate on pathsep, but not today", "-                    ant.addTaskPathNode(new File(args[++i]));", "-                } else if (arg.equals(\"-buildfile\")) {", "-                    // XXX", "-                    // need to check file to make sure it exists!", "-                    try {", "-                        ant.setBuildfile(new File(args[++i]));", "-                    } catch (AntException ae) {", "-                        writeMessage(\"ICK: \" + ae);", "-                        writeMessage(ae.getMessage());", "-                        return;", "-                    }", "-                }", "-            } else {", "-                target = arg;", "-            }", "-        }", "-        ", "-        // XXX do something if we dont' have a buildfile set!", "-        ", "-        // XXX really should check to make sure that the target is set to something", "-", "-        // set our listeners on the project", "-        ", "-        Project project = ant.getProject();", "-        project.setOutput(System.out);", "-        ", "-        try {", "-            ant.buildTarget(target);", "-        } catch (AntException ae) {", "-            writeMessage(\"Problem while building: \" + ae);", "-            writeMessage(ae.getMessage());", "-        }        ", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81b7e266e5afb2983a681cfc8b00512d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SignJar.java", "commitBeforeChange": "e876237361b02eb8cc5af2cc733ed6e0c9b15cd0", "commitAfterChange": "1375c85ac2718db69e07fc8535ba0d71cb0fa691", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "       public void execute() throws BuildException", "signatureAfterChange": "       public void execute() throws BuildException", "diff": ["-        sb.append(\"jarsigner \");", "-", "+        final ExecTask cmd = (ExecTask) project.createTask(\"exec\");", "+        cmd.setExecutable(\"jarsigner\");", "+        ", "-            sb.append(\"-keystore \\\"\");", "-            sb.append(keystore);", "-            sb.append(\"\\\" \");", "+            cmd.createArg().setValue(\"-keystore\");", "+            cmd.createArg().setValue(keystore);", "-            sb.append(\"-storepass \\\"\");", "-            sb.append(storepass);", "-            sb.append(\"\\\" \");", "+            cmd.createArg().setValue(\"-storepass\");", "+            cmd.createArg().setValue(storepass);", "-            sb.append(\"-storetype \\\"\");", "-            sb.append(storetype);", "-            sb.append(\"\\\" \");", "+            cmd.createArg().setValue(\"-storetype\");", "+            cmd.createArg().setValue(storetype);", "-            sb.append(\"-keypass \\\"\");", "-            sb.append(keypass);", "-            sb.append(\"\\\" \");", "+            cmd.createArg().setValue(\"-keypass\");", "+            cmd.createArg().setValue(keypass);", "-            sb.append(\"-sigfile \\\"\");", "-            sb.append(sigfile);", "-            sb.append(\"\\\" \");", "+            cmd.createArg().setValue(\"-sigfile\");", "+            cmd.createArg().setValue(sigfile);", "-            sb.append(\"-signedjar \\\"\");", "-            sb.append(signedjar);", "-            sb.append(\"\\\" \");", "+            cmd.createArg().setValue(\"-signedjar\");", "+            cmd.createArg().setValue(signedjar);", "-            sb.append(\"-verbose \");", "+            cmd.createArg().setValue(\"-verbose\");", "-            sb.append(\"-internalsf \");", "+            cmd.createArg().setValue(\"-internalsf\");", "-            sb.append(\"-sectionsonly \");", "+            cmd.createArg().setValue(\"-sectionsonly\");", "-        sb.append('\\\"');", "-        sb.append(jar);", "-        sb.append(\"\\\" \");", "+        cmd.createArg().setValue(jar);", "-        sb.append('\\\"');", "-        sb.append(alias);", "-        sb.append(\"\\\" \");", "+", "+        cmd.createArg().setValue(alias);", "-        final ExecTask cmd = (ExecTask) project.createTask(\"exec\");", "-        cmd.setCommand(new Commandline(sb.toString()));"]}]}
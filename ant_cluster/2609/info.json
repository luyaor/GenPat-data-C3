{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "56bd6413303b2d1c019c99ebc537c0d0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2008d2e8ef6b721647154499b46e1da8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/listeners/DefaultProjectListener.java", "commitBeforeChange": "8b39211862c5a0b88ce5764bbc1682a89fd02895", "commitAfterChange": "8b4b896303cebb9f6f054254131e248da36b454b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void log( final String message, final Throwable throwable )", "signatureAfterChange": "     public void log( final LogEvent event )", "diff": ["-     */", "-    public void log( final String message, final Throwable throwable )", "-    {", "-        output( message + \"\\n\" + ExceptionUtil.printStackTrace( throwable, 5, true ) );", "-    }", "+     */", "+    public void log( final LogEvent event )", "+    {", "+        // Write the target header, if necessary", "+        final String target = event.getTargetName();", "+        if( target != null && !m_targetOutput )", "+        {", "+            writeTargetHeader( event );", "+        // Write the message", "+        super.log( event );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6c8da8912b3a352c047e85a653ceb0f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/util/ChainReaderHelper.java", "commitBeforeChange": "0d63880cccc77def418c52f41cfdef4f57a8c5fe", "commitAfterChange": "26a42bd2034a7ecb1e5bd0f0dfbd179a2185502a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public Reader getAssembledReader() throws BuildException", "signatureAfterChange": "     public Reader getAssembledReader() throws BuildException", "diff": ["+            boolean success = false;", "+            try {", "-                                clazz = Class.forName(className, true, al);", "+                                clazz = Class.forName(className, true, al);", "+            success = true;", "+            } finally {", "+                if (!success && classLoadersToCleanUp.size() > 0) {", "+                    cleanUpClassLoaders(classLoadersToCleanUp);", "+                }", "+            }", "-                        for (Iterator it = classLoadersToCleanUp.iterator();", "-                             it.hasNext(); ) {", "-                            ((AntClassLoader) it.next()).cleanup();", "-                        }", "+                        cleanUpClassLoaders(classLoadersToCleanUp);"]}]}
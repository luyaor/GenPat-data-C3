{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "61d83bc08fdc6abb2bcf4304237726cc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "573ab1af936029868151d1b22b2cef22", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Replace.java", "commitBeforeChange": "79ab8ae1d59ed007337a3657ac5c6c78107cc0d8", "commitAfterChange": "c8c751af8ea4cb0607690327d79a0b56d6054925", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": "     private String stringReplace(String str, String str1, String str2,                                  boolean countReplaces)", "signatureAfterChange": "     private void stringReplace(StringBuffer str, String str1, String str2,                                  boolean countReplaces)", "diff": ["-    private String stringReplace(String str, String str1, String str2,", "+     */", "+    private void stringReplace(StringBuffer str, String str1, String str2,", "-        StringBuffer ret = new StringBuffer();", "-        int start = 0;", "-            // write everything up to the found str1", "-            if (found > start) {", "-                ret.append(str.substring(start, found));", "-            }", "-", "-            // write the replacement str2", "-            if (str2 != null) {", "-                ret.append(str2);", "-            }", "-", "-            // search again", "-            start = found + str1.length();", "-            found = str.indexOf(str1, start);", "+            str.replace(found, found + str1.length(), str2);", "+            found = str.indexOf(str1, found + str2.length());", "-", "-        // write the remaining characters", "-        if (str.length() > start) {", "-            ret.append(str.substring(start, str.length()));", "-        }", "-", "-        return ret.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2664d2ddb70f32bb91e6395a61e428a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/dotnet/DotnetCompile.java", "commitBeforeChange": "c5d224e2fabd860332b84182429505a5f2a2ee54", "commitAfterChange": "6f8402d926c54252e54ac79efa3f5480ab7323c3", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "      protected int addReferenceFilesets(NetCommand command, long outputTimestamp)", "signatureAfterChange": "      protected int addReferenceFilesets(NetCommand command, long outputTimestamp)", "diff": ["-        StringBuffer referenceList = new StringBuffer(REFERENCE_OPTION);", "-        boolean firstEntry = true;", "-                if (!firstEntry) {", "-                    referenceList.append(getReferenceDelimiter());", "-                } else if (isWindows) {", "-                    referenceList.append('\\\"');", "-                }", "-                referenceList.append(file.toString());", "-                firstEntry = false;", "+                if (isWindows) command.addArgument('\"'+REFERENCE_OPTION+file.toString()+'\"');", "+                else command.addArgument(REFERENCE_OPTION+file.toString());", "-        // hack: This means we've added at least one reference that's", "-        // a managed binary", "-        if (!firstEntry) {", "-            //add it all to an argument", "-            if (isWindows) {", "-                command.addArgument(referenceList.toString() + '\\\"');", "-            } else {", "-                command.addArgument(referenceList.toString());", "-            }", "-        }", "-        ", "+"]}]}
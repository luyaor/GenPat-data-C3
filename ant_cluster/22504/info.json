{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d8d3b02e6145737400372041b73f427b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4bb64b4b5b1ea8b30c1124319460cb8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/comparators/DelegatedResourceComparator.java", "commitBeforeChange": "7829faf36a6f4bc565e0e8b92aa85cc948718176", "commitAfterChange": "9caeed5081071d6a2de28844d0a724918f8c6d86", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected synchronized int resourceCompare(Resource foo, Resource bar)", "signatureAfterChange": "     protected synchronized int resourceCompare(Resource foo, Resource bar)", "diff": ["-        if (v == null || v.isEmpty()) {", "+        if (resourceComparators == null || resourceComparators.isEmpty()) {", "-        for (Iterator i = v.iterator(); result == 0 && i.hasNext();) {", "-            result = ((ResourceComparator) i.next()).resourceCompare(foo, bar);", "+        for (Iterator<ResourceComparator> i = resourceComparators.iterator(); result == 0 && i.hasNext();) {", "+            result = i.next().resourceCompare(foo, bar);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5b1318b5d10b0405c7d7cd5e280bcdf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/BaseResourceCollectionContainer.java", "commitBeforeChange": "7829faf36a6f4bc565e0e8b92aa85cc948718176", "commitAfterChange": "9caeed5081071d6a2de28844d0a724918f8c6d86", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public synchronized boolean isFilesystemOnly()", "signatureAfterChange": "     public synchronized boolean isFilesystemOnly()", "diff": ["-        for (Iterator i = rc.iterator(); goEarly && i.hasNext();) {", "-            goEarly = ((ResourceCollection) i.next()).isFilesystemOnly();", "+        for (Iterator<ResourceCollection> i = rc.iterator(); goEarly && i.hasNext();) {", "+            goEarly = i.next().isFilesystemOnly();", "-        for (Iterator i = cacheCollection().iterator(); i.hasNext();) {", "-            Resource r = (Resource) i.next();", "+        for (Resource r : cacheCollection()) {"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0c3a72945cfae666ce33618e530a4a28", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "700629c6584476da778e98da1c038e6b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "0c25b6891413a3af1006c54d9d68459b1a5609b5", "commitAfterChange": "3fe578a16dfaae9a9bb1f24561e3bba6b9c88830", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     private String[] patchEnvironment()", "signatureAfterChange": "     private String[] patchEnvironment()", "diff": ["+            String keyValue = env[i];", "-            String key = env[i].substring(0, env[i].indexOf('=') + 1);", "+            String key = keyValue.substring(0, keyValue.indexOf('=') + 1);", "+            // Find the key in the current enviroment copy", "+            // and remove it.", "-                if (environmentCaseInSensitive) {", "-                    osEnvItem = osEnvItem.toLowerCase();", "-                }", "-                if (osEnvItem.startsWith(key)) {", "+                String convertedItem = environmentCaseInSensitive", "+                    ? osEnvItem.toLowerCase() : osEnvItem;", "+                if (convertedItem.startsWith(key)) {", "+                    if (environmentCaseInSensitive) {", "+                        // Use the original casiness of the key", "+                        keyValue = osEnvItem.substring(0, key.length())", "+                            + keyValue.substring(key.length());", "+                    }", "-            osEnv.addElement(env[i]);", "+            // Add the key to the enviromnent copy", "+            osEnv.addElement(keyValue);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80031b72d92c2a60ecccd0cd006f5b9c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/frontend/org/apache/ant/cli/Commandline.java", "commitBeforeChange": "752f49d5b18f9743f8e4a6dbdc8065d240d9c97a", "commitAfterChange": "da4e1a3aa99899d6aecc6d14c2a7498fa51647aa", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public static void start(String[] args, AntEnvironment config)", "signatureAfterChange": "     public void start(final String[] args, final AntEnvironment antEnv)", "diff": ["-     */", "-    public static void start(String[] args, AntEnvironment config) {", "-        // create a command line and use it to run ant", "-        Commandline commandline = new Commandline();", "-        commandline.process(args, config);", "-    }", "+    public void start(final String[] args, final AntEnvironment antEnv) {", "+", "+            URL buildSourceURL = determineBuildFile();", "+                     = FrontendUtils.getAntConfigFile(configFile);", "+            if (buildSourceURL.getProtocol().equals(\"file\")) {", "+                System.out.println(\"Buildfile: \" + buildSource);", "+            } else if (!config.isRemoteProjectAllowed()) {", "+                     + buildSourceURL);", "+            } else {", "+                System.out.println(\"Build: \" + buildSourceURL);", "+            project = parseProject(buildSourceURL);", "+                 = new DemuxOutputStream(mainFrame, false);", "+                 = new DemuxOutputStream(mainFrame, true);", "+            mainFrame.setProject(project);", "+            mainFrame.initialize(definedValues);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a7ef552561dbba86215a1cf8ad47654c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69540978831264c5c30a9f19fb3be8fa", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/start/org/apache/ant/start/Main.java", "commitBeforeChange": "242af536519aef1a43fdce2fdb383762fb5b6ccc", "commitAfterChange": "e16a4c7b1db880e29d37406177e983142302af57", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void start(String frontend, String[] args)", "signatureAfterChange": "     public void start(String frontend, String defaultClass, String[] args)          throws InitException", "diff": ["-     */", "-    public void start(String frontend, String[] args) {", "-        try {", "-            InitConfig config = new InitConfig();", "-            URL frontendJar = new URL(config.getLibraryURL(), ", "+     */", "+    public void start(String frontend, String defaultClass, String[] args)", "+         throws InitException {", "+        try {             ", "+            InitConfig config = new InitConfig();", "+    ", "+            URL frontendJar = new URL(config.getLibraryURL(),", "-            ClassLoader frontEndLoader ", "-                = new URLClassLoader(frontendJars, config.getCoreLoader());", "-", "+            ClassLoader frontEndLoader", "+                 = new URLClassLoader(frontendJars, config.getCoreLoader());", "+    ", "-            String mainClass = getMainClass(frontendJar);", "-            System.out.println(\"Front end main class = \" + mainClass);", "-            if (mainClass == null) {", "-                mainClass = DEFAULT_COMMANDLINE_CLASS;", "+            if (frontendJar.getProtocol().equals(\"file\")) {", "+                File jarFile = new File(frontendJar.getFile());", "+                if (!jarFile.exists()) {", "+                    throw new InitException(\"Could not jar for frontend \\\"\" ", "+                        + frontend + \"\\\"\");", "+                }", "-            ", "+            String mainClass = getMainClass(frontendJar);", "+    ", "+            if (mainClass == null) {", "+                mainClass = defaultClass;", "+            }", "+    ", "+            if (mainClass == null) {", "+                throw new InitException(\"Unable to determine main class \"", "+                     + \" for \\\"\" + frontend + \"\\\" frontend\");", "+            }", "+    ", "-            Class commandLineClass = Class.forName(mainClass, true,", "+            Class frontendClass = Class.forName(mainClass, true,", "-", "+    ", "-                 = commandLineClass.getMethod(\"start\", param);", "+                 = frontendClass.getMethod(\"start\", param);", "+    ", "-            e.printStackTrace();", "+            throw new InitException(e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f54c07e13d0b3b920a8c2a6d45b4631", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/depend/Depend.java", "commitBeforeChange": "7be61ff46cba15020a14a9d8c83236e929bb5a31", "commitAfterChange": "07a3027bb2230d2add3de5ec0b166a35d50b0236", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private int deleteAffectedFiles(String className)", "signatureAfterChange": "     private int deleteAffectedFiles(String className)", "diff": ["-        if (affectedClasses != null) {", "-            for (Enumeration e = affectedClasses.keys(); e.hasMoreElements();) {", "-                String affectedClassName = (String)e.nextElement();", "-                ClassFileInfo affectedClassInfo = (ClassFileInfo)affectedClasses.get(affectedClassName);", "-                if (affectedClassInfo.absoluteFile.exists()) {", "-                    log(\"Deleting file \" + affectedClassInfo.absoluteFile.getPath() + \" since \" +", "-                        className + \" out of date\", Project.MSG_VERBOSE);", "-                    affectedClassInfo.absoluteFile.delete();", "+        if (affectedClasses == null) {", "+            return count;", "+        }", "+        for (Enumeration e = affectedClasses.keys(); e.hasMoreElements();) {", "+            String affectedClass = (String)e.nextElement();", "+            ClassFileInfo affectedClassInfo ", "+                = (ClassFileInfo)affectedClasses.get(affectedClass);", "+                ", "+            if (!affectedClassInfo.absoluteFile.exists()) {", "+                continue;", "+            }", "+                ", "+            if (affectedClassInfo.sourceFile == null) {", "+                if (!affectedClassInfo.isUserWarned) {", "+                    log(\"The class \" + affectedClass + \" in file \" ", "+                        + affectedClassInfo.absoluteFile.getPath() ", "+                        + \" is out of date due to \" + className ", "+                        + \" but has not been deleted because its source file\" ", "+                        + \" could not be determined\", Project.MSG_WARN);", "+                    affectedClassInfo.isUserWarned = true;", "+                }", "+                continue;", "+            }", "+", "+            log(\"Deleting file \" + affectedClassInfo.absoluteFile.getPath() ", "+                + \" since \" + className + \" out of date\", Project.MSG_VERBOSE);", "+", "+            affectedClassInfo.absoluteFile.delete();", "+            count++;", "+            if (closure) {", "+                count += deleteAffectedFiles(affectedClass);", "+            } else {", "+                // without closure we may delete an inner class but not the", "+                // top level class which would not trigger a recompile.", "+", "+                if (affectedClass.indexOf(\"$\") == -1) {", "+                    continue;", "+                }", "+                // need to delete the main class", "+                String topLevelClassName", "+                     = affectedClass.substring(0, affectedClass.indexOf(\"$\"));", "+                log(\"Top level class = \" + topLevelClassName, ", "+                    Project.MSG_VERBOSE);", "+                ClassFileInfo topLevelClassInfo", "+                     = (ClassFileInfo)classFileInfoMap.get(topLevelClassName);", "+                if (topLevelClassInfo != null &&", "+                    topLevelClassInfo.absoluteFile.exists()) {", "+                    log(\"Deleting file \" ", "+                        + topLevelClassInfo.absoluteFile.getPath() ", "+                        + \" since one of its inner classes was removed\", ", "+                        Project.MSG_VERBOSE);", "+                    topLevelClassInfo.absoluteFile.delete();", "-                        count += deleteAffectedFiles(affectedClassName);", "-                    } else {", "-                        // without closure we may delete an inner class but not the", "-                        // top level class which would not trigger a recompile.", "-", "-                        if (affectedClassName.indexOf(\"$\") != -1) {", "-                            // need to delete the main class", "-                            String topLevelClassName", "-                                 = affectedClassName.substring(0, affectedClassName.indexOf(\"$\"));", "-                            log(\"Top level class = \" + topLevelClassName, Project.MSG_VERBOSE);", "-                            ClassFileInfo topLevelClassInfo", "-                                 = (ClassFileInfo)classFileInfoMap.get(topLevelClassName);", "-                            if (topLevelClassInfo != null &&", "-                                topLevelClassInfo.absoluteFile.exists()) {", "-                                log(\"Deleting file \" + topLevelClassInfo.absoluteFile.getPath() + \" since \" +", "-                                    \"one of its inner classes was removed\", Project.MSG_VERBOSE);", "-                                topLevelClassInfo.absoluteFile.delete();", "-                                count++;", "-                                if (closure) {", "-                                    count += deleteAffectedFiles(topLevelClassName);", "-                                }", "-                            }", "-                        }", "+                        count += deleteAffectedFiles(topLevelClassName);"]}]}
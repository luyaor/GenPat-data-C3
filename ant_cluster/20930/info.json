{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b8581d14a0f4cda2c535a086789ff3a5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56541f5a3e8d560f0c294d2917f1a60c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/init/org/apache/ant/init/AntEnvironment.java", "commitBeforeChange": "752f49d5b18f9743f8e4a6dbdc8065d240d9c97a", "commitAfterChange": "da4e1a3aa99899d6aecc6d14c2a7498fa51647aa", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public AntEnvironment(Class libraryClass) throws InitException", "signatureAfterChange": "     public AntEnvironment(Class coreClass) throws InitException", "diff": ["-    public AntEnvironment(Class libraryClass) throws InitException {", "+    public AntEnvironment(Class coreClass) throws InitException {", "-            URL antLibURL = getAntLibURL(libraryClass);", "-            setLibraryURL(antLibURL);", "+            // is Ant Home set?", "+            String antHomeProperty = System.getProperty(ANTHOME_PROPERTY);", "+            if (antHomeProperty == null) {", "+                URL classURL = getAntLibURL(coreClass);", "+                antHome = new URL(classURL, CORECLASS_TO_ANTHOME);", "+            } else {", "+                try {", "+                    antHome = new URL(antHomeProperty);", "+                } catch (MalformedURLException e) {", "+                    // try as a file", "+                    File antHomeDir = new File(antHomeProperty);", "+                    if (!antHomeDir.exists()) {", "+                        throw new InitException(\"ant.home value \\\"\"", "+                             + antHomeProperty + \"\\\" is not valid.\");", "+                    }", "+                    antHome = InitUtils.getFileURL(antHomeDir);", "+                }", "+            }", "-            URL antHome = new URL(antLibURL, \"..\");", "-            setAntHome(antHome);", "+            setLibraryURL(new URL(antHome, LIB_DIR));", "+", "-                File systemConfigArea = new File(antHome.getFile(), \"conf\");", "+                File systemConfigArea", "+                     = new File(antHome.getFile(), SYSTEM_CONFDIR);", "-                 = new File(System.getProperty(\"user.home\"), \".ant/conf\");", "+                 = new File(System.getProperty(\"user.home\"), USER_CONFDIR);", "-            URL commonJarLib = new URL(libraryURL, \"common/\");", "+            URL commonJarLib = new URL(libraryURL, COMMON_DIR);", "-            URL parserBase = new URL(libraryURL, \"parser/\");", "+            URL parserBase = new URL(libraryURL, PARSER_DIR);", "+            URL antcoreBase = new URL(libraryURL, ANTCORE_DIR);", "-                 = LoaderUtils.getLocationURLs(new URL(libraryURL, \"antcore/\"),", "-                \"antcore.jar\");", "+                 = LoaderUtils.getLocationURLs(antcoreBase, \"antcore.jar\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd1aa59298080473895becf4108cd834", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "f87b5ed7757c30daca5cf875c95520a00dce2269", "commitAfterChange": "010a31e84477b60ff536725b388b38323540dcca", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private void configureAttribute( final Object object,                                      final String name,                                      final String value,                                      final Context context )         throws ConfigurationException", "signatureAfterChange": "     private void setAttribute( final ObjectConfigurer configurer,                                final Object object,                                final String name,                                final String value,                                final Context context )         throws ConfigurationException", "diff": ["+    private void setAttribute( final ObjectConfigurer configurer,", "+                               final Object object,", "+                               final String name,", "+                               final String value,", "+                               final Context context )", "-", "-    private void configureAttribute( final Object object,", "-                                     final String name,", "-                                     final String value,", "-                                     final Context context )", "-        throws ConfigurationException", "-    {", "-        final String methodName = getMethodNameFor( name );", "-        setValue( object, methodName, value, context );", "-    }", "+        if( DEBUG )", "+            final String message = REZ.getString( \"configure-attribute.notice\",", "+                                                  name,", "+                                                  value );", "+            getLogger().debug( message );", "+        }", "+", "+        // Locate the setter for this attribute", "+        final AttributeSetter setter = configurer.getAttributeSetter( name );", "+        if( null == setter )", "+        {", "+            final String message = REZ.getString( \"unknown-attribute.error\", name );", "+        // Set the value", "+            setValue( setter, object, value, context );", "+            final String message = REZ.getString( \"bad-set-attribute.error\", name );", "+    }"]}]}
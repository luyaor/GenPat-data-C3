{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "142e7683f8026837dba903dbaddc7bcf", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "807728705dec645651b7cadf024f107f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "f8c1bb00f245b6d96ee71deb589d3f4e5d5bef8d", "commitAfterChange": "122c6ddd9ee015a8638b9143815d3289badfdf04", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 34, "signatureBeforeChange": "     protected final Method getSetLastModified()", "signatureAfterChange": "     public boolean isUpToDate(File source,File dest,long granularity)", "diff": ["-     */", "-    protected final Method getSetLastModified() {", "-        if (JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)) {", "-            return null;", "-        }", "-        synchronized (lockReflection) {", "-            if (setLastModified == null) {", "-                try {", "-                    setLastModified =", "-                        java.io.File.class.getMethod(\"setLastModified\",", "-                                                     new Class[] {Long.TYPE});", "-                } catch (NoSuchMethodException nse) {", "-                    throw new BuildException(\"File.setlastModified not in JDK > 1.1?\",", "-                                             nse);", "-                }", "-            }", "-        }", "-        return setLastModified;", "-    }", "+     */", "+    public boolean isUpToDate(File source,File dest,long granularity) {", "+        //do a check for the destination file existing", "+        if(!dest.exists()) {", "+            //if it does not, then the file is not up to date.", "+            return false;", "+        }", "+        long sourceTime=source.lastModified();", "+        long destTime=dest.lastModified();", "+        return destTime>=sourceTime+granularity;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a00319862bbe831249c7b34d2d6bac8c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/helper/ProjectHelper2.java", "commitBeforeChange": "7cbce4bf09d398a8f7cb9011b3f859f09274aa82", "commitAfterChange": "c2dba687256b368d6ca095487a17d432dcab22e4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void parse(Project project, Object source, RootHandler handler)             throws BuildException", "signatureAfterChange": "     public void parse(Project project, Object source, RootHandler handler)             throws BuildException", "diff": ["-            throws BuildException", "-    {", "+            throws BuildException {", "-        AntXmlContext context=handler.context;", "+        AntXMLContext context = handler.context;", "-        if(source instanceof File) {", "-            context.buildFile=(File)source;", "+        File buildFile = null;", "+", "+        if (source instanceof File) {", "+            buildFile = (File) source;", "-            throw new BuildException( \"Source \" + source.getClass().getName() +", "-                                      \" not supported by this plugin\" );", "+            throw new BuildException(\"Source \" + source.getClass().getName() +", "+                                     \" not supported by this plugin\");", "-        context.buildFile = new File(context.buildFile.getAbsolutePath());", "-        context.buildFileParent = new File(context.buildFile.getParent());", "+        buildFile = new File(buildFile.getAbsolutePath());", "+        context.setBuildFile(buildFile);", "-            context.parser =JAXPUtils.getNamespaceXMLReader();", "+            XMLReader parser = JAXPUtils.getNamespaceXMLReader();", "-            String uri = fu.toURI(context.buildFile.getAbsolutePath());", "+            String uri = fu.toURI(buildFile.getAbsolutePath());", "-            inputStream = new FileInputStream(context.buildFile);", "+            inputStream = new FileInputStream(buildFile);", "-            project.log(\"parsing buildfile \" + context.buildFile + \" with URI = \" + uri, Project.MSG_VERBOSE);", "+            project.log(\"parsing buildfile \" + buildFile", "+                + \" with URI = \" + uri, Project.MSG_VERBOSE);", "-            context.parser.setContentHandler(hb);", "-            context.parser.setEntityResolver(hb);", "-            context.parser.setErrorHandler(hb);", "-            context.parser.setDTDHandler(hb);", "-            context.parser.parse(inputSource);", "-        } catch(SAXParseException exc) {", "-            Location location =", "-                new Location(exc.getSystemId(), exc.getLineNumber(), exc.getColumnNumber());", "+            parser.setContentHandler(hb);", "+            parser.setEntityResolver(hb);", "+            parser.setErrorHandler(hb);", "+            parser.setDTDHandler(hb);", "+            parser.parse(inputSource);", "+        } catch (SAXParseException exc) {", "+            Location location = new Location(exc.getSystemId(),", "+                exc.getLineNumber(), exc.getColumnNumber());", "-        }", "-        catch(SAXException exc) {", "+        } catch (SAXException exc) {", "-        }", "-        catch(FileNotFoundException exc) {", "+        } catch (FileNotFoundException exc) {", "-        }", "-        catch(UnsupportedEncodingException exc) {", "-              throw new BuildException(\"Encoding of project file is invalid.\",exc);", "-        }", "-        catch(IOException exc) {", "-            throw new BuildException(\"Error reading project file: \" +exc.getMessage(), exc);", "-        }", "-        finally {", "+        } catch (UnsupportedEncodingException exc) {", "+              throw new BuildException(\"Encoding of project file is invalid.\",", "+                exc);", "+        } catch (IOException exc) {", "+            throw new BuildException(\"Error reading project file: \"", "+                + exc.getMessage(), exc);", "+        } finally {", "-                }", "-                catch (IOException ioe) {", "+                } catch (IOException ioe) {"]}]}
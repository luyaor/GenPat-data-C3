{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c832978d7acf389b7a737c19a33a5d7b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a8bdfce8875db54988f485f2976752f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/main/org/apache/ant/frontend/Commandline.java", "commitBeforeChange": "a48208f6cf8cf80ef1e144305ff8dfe0958599d5", "commitAfterChange": "c2e518039b65dc5b8c9c31f9f78b2d72ea8db2d1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "          public void runAnt(String[] args)", "signatureAfterChange": "          public void runAnt(String[] args)", "diff": ["-        ExecutionManager executionManager = null;", "+        ExecutionFrame mainFrame = null;", "-            executionManager = new ExecutionManager();", "-            executionManager.addLibraries(libraries);", "-            executionManager.setProject(project);", "-            addBuildListeners(executionManager);", "+", "+            mainFrame = new ExecutionFrame(project, libraries);", "+            ", "+            // We iterate through all nodes of all projects and make sure every node is OK", "+            Map state = new HashMap();", "+            Stack visiting = new Stack();", "+            List dependencyOrder = new ArrayList();", "+    ", "+            mainFrame.checkTargets(dependencyOrder, state, visiting);", "+            addBuildListeners(mainFrame);", "-            System.out.print(e.getMessage());", "+            System.out.println(e.getMessage());", "-                System.out.println();", "-                System.out.print(\"Root cause: \" + cause.getClass().getName() + \": \" + cause.getMessage());", "+                System.out.println(\"Root cause: \" + cause.getClass().getName() + \": \" + cause.getMessage());", "-            System.out.println();", "-            executionManager.runBuild(targets);", "+            mainFrame.runBuild(targets);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e2be6b04deaad4e253471ba00861fca", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/net/FTPTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void setUp()", "signatureAfterChange": "       @Before     public void setUp()", "diff": ["-    }", "+", "+    @Before", "-        configureProject(\"src/etc/testcases/taskdefs/optional/net/ftp.xml\");", "-        getProject().executeTarget(\"setup\");", "-        tmpDir = getProject().getProperty(\"tmp.dir\");", "+        buildRule.configureProject(\"src/etc/testcases/taskdefs/optional/net/ftp.xml\");", "+        Project project = buildRule.getProject();", "+        project.executeTarget(\"setup\");", "+        tmpDir = project.getProperty(\"tmp.dir\");", "-        ftpFileSep = getProject().getProperty(\"ftp.filesep\");", "+        ftpFileSep = project.getProperty(\"ftp.filesep\");", "-        myFTPTask.setProject(getProject());", "+        myFTPTask.setProject(project);", "-        String remoteHost = getProject().getProperty(\"ftp.host\");", "-        int port = Integer.parseInt(getProject().getProperty(\"ftp.port\"));", "-        String remoteUser = getProject().getProperty(\"ftp.user\");", "-        String password = getProject().getProperty(\"ftp.password\");", "+        String remoteHost = project.getProperty(\"ftp.host\");", "+        int port = Integer.parseInt(project.getProperty(\"ftp.port\"));", "+        String remoteUser = project.getProperty(\"ftp.user\");", "+        String password = project.getProperty(\"ftp.password\");", "+        boolean connectionSucceeded = false;", "+            connectionSucceeded = true;", "-            connectionSucceeded = false;", "-            loginSuceeded = false;", "-            System.out.println(\"could not connect to host \" + remoteHost + \" on port \" + port);", "+            loginFailureMessage = \"could not connect to host \" + remoteHost + \" on port \" + port;", "+                loginSuceeded = true;", "-                loginSuceeded = false;", "-                System.out.println(\"could not log on to \" + remoteHost + \" as user \" + remoteUser);", "+                loginFailureMessage = \"could not log on to \" + remoteHost + \" as user \" + remoteUser;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3a946a6458fbf4e2e9d0bb1b406d661e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59d971daaebe71f1a7fcce97f362cf2f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/vfs/provider/zip/ZipFileSystemProvider.java", "commitBeforeChange": "5b87919be6a8db15efe30f2de6e617aba31ef619", "commitAfterChange": "52926715b4f4f53da4b63cf660a14f357d7a9b6e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected FileSystem createFileSystem( ParsedUri uri ) throws FileSystemException", "signatureAfterChange": "     protected FileSystem createFileSystem( final ParsedUri uri )         throws FileSystemException", "diff": ["-    protected FileSystem createFileSystem( ParsedUri uri ) throws FileSystemException", "+    protected FileSystem createFileSystem( final ParsedUri uri )", "+        throws FileSystemException", "-        // Locate the Zip file", "-        ParsedZipUri zipUri = (ParsedZipUri)uri;", "-        String fileName = zipUri.getZipFile();", "-        // TODO - use the context to resolve zip file to a FileObject", "-        File file = new File( fileName ).getAbsoluteFile();", "-        DefaultFileName name = new DefaultFileName( m_parser, zipUri.getRootURI(), \"/\" );", "-        return new ZipFileSystem( name, file );", "+        final ParsedZipUri zipUri = (ParsedZipUri)uri;", "+        final FileObject file = zipUri.getZipFile();", "+", "+        // TODO - temporary hack; need to use a converter", "+        File destFile = null;", "+        try", "+        {", "+            final File cacheDir = new File( \"ant_vfs_cache\" );", "+            cacheDir.mkdirs();", "+            destFile = File.createTempFile( \"cache_\", \"_\" + file.getName().getBaseName(), cacheDir );", "+            destFile.deleteOnExit();", "+        }", "+        catch( IOException e )", "+        {", "+            throw new FileSystemException( \"Could not replicate file\", e );", "+        }", "+        FileObject destFileObj = getContext().resolveFile( null, destFile.getAbsolutePath() );", "+        destFileObj.copy( file );", "+", "+        // Create the file system", "+        DefaultFileName name = new DefaultFileName( m_parser, zipUri.getRootUri(), \"/\" );", "+        return new ZipFileSystem( name, destFile );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f47a861a33c2a1d8af45764489dd79a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/junit/src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "5fe902d78b8ba74492a37b9bf3ac7b4328e140dd", "commitAfterChange": "a8b3b468afe3a5ba67bbeb1c604846c7a6340842", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["+        File tmp = configureTestRunner();", "+        Execute execute = new Execute(new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN));", "+        execute.setCommandline(cmd.getCommandline());", "+        execute.setAntRun(project);", "+        log(\"Executing: \" + cmd.toString(), Project.MSG_VERBOSE);", "+        int retVal;", "+        try {", "+            retVal = execute.execute();", "+        } catch (IOException e) {", "+            throw new BuildException(\"Process fork failed.\", e, location);", "+        } finally {", "+            tmp.delete();", "+        }", "+", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80c62b62f701a061cd32ef0b333d5610", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/XMLCatalog.java", "commitBeforeChange": "d9c45b7a34a73bf4f4fcb6af80821eb8f8175765", "commitAfterChange": "299a7d5929bc956bf865bb1c86e5bfce49ca7df1", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private InputSource filesystemLookup(ResourceLocation matchingEntry)", "signatureAfterChange": "     private InputSource filesystemLookup(ResourceLocation matchingEntry)", "diff": ["+        // the following line seems to be necessary on Windows under JDK 1.2", "+        uri = uri.replace(File.separatorChar, '/');", "-", "-            // ignore", "+            // this processing is useful under Windows when the location of the DTD has been given as an absolute path", "+            // see Bugzilla Report 23913", "+            File testFile = new File(uri);", "+            if (testFile.exists() && testFile.canRead()) {", "+                log(\"uri : '\"", "+                    + uri + \"' matches a readable file\", Project.MSG_DEBUG);", "+                try {", "+                    url = fileUtils.getFileURL(testFile);", "+                } catch (MalformedURLException ex1) {", "+                    throw new BuildException(\"could not find an URL for :\" + testFile.getAbsolutePath());", "+                }", "+            } else {", "+                log(\"uri : '\"", "+                    + uri + \"' does not match a readable file\", Project.MSG_DEBUG);", "+", "+            }"]}]}
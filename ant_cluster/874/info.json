{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "929e3c3f0e127dc58fc2779e1c83faa6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2def3e53bf5a7c4bb781819c736d5acd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Property.java", "commitBeforeChange": "b846bf0a0491b2b8293082991157f05f0a12e5ff", "commitAfterChange": "d6ae851614fdd338ece0f76246e8b4939f0126f6", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "     private void resolveAllProperties(Properties props) throws BuildException", "signatureAfterChange": "     private void resolveAllProperties(Properties props) throws BuildException", "diff": ["-            String value = props.getProperty(name);", "+            Stack referencesSeen = new Stack();", "+            resolve(props, name, referencesSeen);", "+        }", "+    }", "-            boolean resolved = false;", "-            Vector expandedReferences = new Vector();", "-            expandedReferences.addElement(name);", "-            while (!resolved) {", "-                Vector fragments = new Vector();", "-                Vector propertyRefs = new Vector();", "-                ProjectHelper.parsePropertyString(value, fragments,", "-                                                  propertyRefs);", "-                resolved = true;", "-                if (propertyRefs.size() != 0) {", "-                    StringBuffer sb = new StringBuffer();", "-                    Enumeration i = fragments.elements();", "-                    Enumeration j = propertyRefs.elements();", "-                    while (i.hasMoreElements()) {", "-                        String fragment = (String) i.nextElement();", "-                        if (fragment == null) {", "-                            String propertyName = (String) j.nextElement();", "-                            if (expandedReferences.contains(propertyName)) {", "-                                throw new BuildException(\"Property \" + name", "-                                                         + \" was circularly \"", "-                                                         + \"defined.\");", "-                            }", "-                            expandedReferences.addElement(propertyName);", "-                            fragment = getProject().getProperty(propertyName);", "-                            if (fragment == null) {", "-                                if (props.containsKey(propertyName)) {", "-                                    fragment = props.getProperty(propertyName);", "-                                    resolved = false;", "-                                } else {", "-                                    fragment = \"${\" + propertyName + \"}\";", "-                                }", "-                            }", "-                        sb.append(fragment);", "-                    value = sb.toString();", "-                    props.put(name, value);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "310ca013bf9ad994084596e0e8b88579", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "96e6561e659a24f1e2122d884e83561327cb0f48", "commitAfterChange": "88dcebf815f27d9b16735745605342963870010e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 28, "signatureBeforeChange": "     private void catText()", "signatureAfterChange": "          public void close() throws IOException", "diff": ["-     */", "-    private void catText() {", "-        // Check the buffer.", "-        if (textBuffer == null) {", "-            // No text to write.", "-            return;", "-", "-        String text = textBuffer.toString();", "-", "-        // Replace ${property} strings.", "-        text = getProject().replaceProperties(text);", "-", "-        // Set up a writer if necessary.", "-        FileWriter writer = null;", "-        if (destinationFile != null) {", "-            try {", "-                writer = new FileWriter(destinationFile.getAbsolutePath(), ", "-                                        append);", "-            } catch (IOException ioe) {", "-                throw new BuildException(\"Error creating destination \" + ", "-                                         \"file.\", ioe);", "-", "-        // Reads the text, line by line.", "-        BufferedReader reader = null;", "-        try {", "-            reader = new BufferedReader(new StringReader(text));", "-", "-            String line;", "-            while ((line = reader.readLine()) != null) {", "-                if (destinationFile == null) {", "-                    // Log the line, using WARN so it displays in", "-                    // 'quiet' mode.", "-                    log(line, Project.MSG_WARN);", "-                } else {", "-                    writer.write(line);", "-                    writer.write(StringUtils.LINE_SEP);", "-                    writer.flush();", "-                }", "-            }", "-", "-        } catch (IOException ioe) {", "-            throw new BuildException(\"Error while concatenating \" + ", "-                                     \"text.\", ioe);", "-        } finally {", "-            // Close resources.", "-            if (reader != null) {", "-                try {", "-                    reader.close();", "-                } catch (Exception ignore) {}", "-            }", "-", "-            if (writer != null) {", "-                try {", "-                    writer.close();", "-                } catch (Exception ignore) {}", "-            }", "-        }", "+", "+        public void close() throws IOException {", "+            if (reader != null) {", "+                reader.close();", "+            }", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7c87bdf61c183c0079526e111298b193", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05eff664409c50830bcbe4693ce717ee", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/Manifest.java", "commitBeforeChange": "4f74fbfd061cf36cbd862727c8d3156302ecb80e", "commitAfterChange": "85f0f72113aa88da57b62eb336b5b5c1c492b054", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void execute()         throws TaskException", "signatureAfterChange": "     public void execute()         throws TaskException", "diff": ["-        if( manifestFile == null )", "+        if( m_manifestFile == null )", "-        if( mode.getValue().equals( \"update\" ) && manifestFile.exists() )", "+        if( m_mode.getValue().equals( \"update\" ) && m_manifestFile.exists() )", "-                f = new FileReader( manifestFile );", "+                f = new FileReader( m_manifestFile );", "-                throw new TaskException( \"Existing manifest \" + manifestFile", "+                throw new TaskException( \"Existing manifest \" + m_manifestFile", "-                    TaskException( \"Failed to read \" + manifestFile, e );", "+                    TaskException( \"Failed to read \" + m_manifestFile, e );", "-            w = new PrintWriter( new FileWriter( manifestFile ) );", "+            w = new PrintWriter( new FileWriter( m_manifestFile ) );", "-            throw new TaskException( \"Failed to write \" + manifestFile, e );", "+            throw new TaskException( \"Failed to write \" + m_manifestFile, e );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "183afb0240f5316590b6fb730f4734a3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "ed50251db4ac48d4d7917b05f5c9c12864837865", "commitAfterChange": "a6ab0235192d311e0846d196589b71a02e2a7a43", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 25, "signatureBeforeChange": "     protected void slowScan()         throws TaskException", "signatureAfterChange": "     protected void slowScan()         throws TaskException", "diff": ["-        if( haveSlowResults )", "+        if( m_haveSlowResults )", "-        String[] excl = new String[ dirsExcluded.size() ];", "-        excl = (String[])dirsExcluded.toArray( excl );", "+        String[] excl = new String[ m_dirsExcluded.size() ];", "+        excl = (String[])m_dirsExcluded.toArray( excl );", "-        String[] notIncl = new String[ dirsNotIncluded.size() ];", "-        notIncl = (String[])dirsNotIncluded.toArray( notIncl );", "+        String[] notIncl = new String[ m_dirsNotIncluded.size() ];", "+        notIncl = (String[])m_dirsNotIncluded.toArray( notIncl );", "-                scandir( new File( basedir, excl[ i ] ),", "+                scandir( new File( m_basedir, excl[ i ] ),", "-                scandir( new File( basedir, notIncl[ i ] ),", "+                scandir( new File( m_basedir, notIncl[ i ] ),", "-        haveSlowResults = true;", "+        m_haveSlowResults = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ddb7bd79a12da41a3dc809638a078fd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/sound/AntSoundPlayer.java", "commitBeforeChange": "dff89c5ee288ed809304d9df1c4458a8b1d496c1", "commitAfterChange": "1b5824a6f65d5ec5286668eb2e68fc2f698bef54", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void buildFinished( BuildEvent event )", "signatureAfterChange": "     public void buildFinished( BuildEvent event )", "diff": ["-        if( event.getException() == null && fileSuccess != null )", "+        if( event.getException() == null && m_fileSuccess != null )", "-            play( event.getProject(), fileSuccess, loopsSuccess, durationSuccess );", "+            play( event.getProject(), m_fileSuccess, m_loopsSuccess, m_durationSuccess );", "-        else if( event.getException() != null && fileFail != null )", "+        else if( event.getException() != null && m_fileFail != null )", "-            play( event.getProject(), fileFail, loopsFail, durationFail );", "+            play( event.getProject(), m_fileFail, m_loopsFail, m_durationFail );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4466bb603f6fefd821e29143a478f83b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/Manifest.java", "commitBeforeChange": "4f74fbfd061cf36cbd862727c8d3156302ecb80e", "commitAfterChange": "85f0f72113aa88da57b62eb336b5b5c1c492b054", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void execute()         throws TaskException", "signatureAfterChange": "     public void execute()         throws TaskException", "diff": ["-        if( manifestFile == null )", "+        if( m_manifestFile == null )", "-        if( mode.getValue().equals( \"update\" ) && manifestFile.exists() )", "+        if( m_mode.getValue().equals( \"update\" ) && m_manifestFile.exists() )", "-                f = new FileReader( manifestFile );", "+                f = new FileReader( m_manifestFile );", "-                throw new TaskException( \"Existing manifest \" + manifestFile", "+                throw new TaskException( \"Existing manifest \" + m_manifestFile", "-                    TaskException( \"Failed to read \" + manifestFile, e );", "+                    TaskException( \"Failed to read \" + m_manifestFile, e );", "-            w = new PrintWriter( new FileWriter( manifestFile ) );", "+            w = new PrintWriter( new FileWriter( m_manifestFile ) );", "-            throw new TaskException( \"Failed to write \" + manifestFile, e );", "+            throw new TaskException( \"Failed to write \" + m_manifestFile, e );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a730710deb75187d89c4b022a26546c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/testcases/org/apache/myrmidon/components/configurer/DefaultConfigurerTest.java", "commitBeforeChange": "5c710a6a3823f6fb91218c5be5df77cd30b75db7", "commitAfterChange": "02a2cffe8f27603fdd8c7c83cc415170496a6fe1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void testSetElement()         throws Exception", "signatureAfterChange": "     public void testSetElement()         throws Exception", "diff": ["-        final ConfigTestObjectProps test = new ConfigTestObjectProps();", "+        final ConfigTestSetElement test = new ConfigTestSetElement();", "-        final ConfigTestObjectProps expected = new ConfigTestObjectProps();", "-        ConfigTestStringProps elem = new ConfigTestStringProps();", "+        final ConfigTestSetElement expected = new ConfigTestSetElement();", "+        ConfigTestSetElement elem = new ConfigTestSetElement();", "-        expected.setProp( elem );", "-        elem = new ConfigTestStringProps();", "+        expected.addProp( elem );", "+        elem = new ConfigTestSetElement();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e9c74fd1528b438dad152ee5c30446c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/test/org/apache/myrmidon/components/configurer/DefaultConfigurerTest.java", "commitBeforeChange": "5c710a6a3823f6fb91218c5be5df77cd30b75db7", "commitAfterChange": "02a2cffe8f27603fdd8c7c83cc415170496a6fe1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void testSetElement()         throws Exception", "signatureAfterChange": "     public void testSetElement()         throws Exception", "diff": ["-        final ConfigTestObjectProps test = new ConfigTestObjectProps();", "+        final ConfigTestSetElement test = new ConfigTestSetElement();", "-        final ConfigTestObjectProps expected = new ConfigTestObjectProps();", "-        ConfigTestStringProps elem = new ConfigTestStringProps();", "+        final ConfigTestSetElement expected = new ConfigTestSetElement();", "+        ConfigTestSetElement elem = new ConfigTestSetElement();", "-        expected.setProp( elem );", "-        elem = new ConfigTestStringProps();", "+        expected.addProp( elem );", "+        elem = new ConfigTestSetElement();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64d48fabfdb9a7767d0dc5399b0ee8df", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "1ea766b31d257946420ddd2a56581f7a21d3c2cd", "commitAfterChange": "5f6832bd82418c0d62e243e5d6ae5dcdb95b7446", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     protected static boolean matchPatternStart( String pattern, String str,                                                 boolean isCaseSensitive )", "signatureAfterChange": "     protected static boolean matchPatternStart( String pattern, String str,                                                 boolean isCaseSensitive )", "diff": ["-        Vector patDirs = new Vector();", "+        ArrayList patDirs = new ArrayList();", "-            patDirs.addElement( st.nextToken() );", "+            patDirs.add( st.nextToken() );", "-        Vector strDirs = new Vector();", "+        ArrayList strDirs = new ArrayList();", "-            strDirs.addElement( st.nextToken() );", "+            strDirs.add( st.nextToken() );", "-            String patDir = (String)patDirs.elementAt( patIdxStart );", "+            String patDir = (String)patDirs.get( patIdxStart );", "-            if( !match( patDir, (String)strDirs.elementAt( strIdxStart ), isCaseSensitive ) )", "+            if( !match( patDir, (String)strDirs.get( strIdxStart ), isCaseSensitive ) )"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "887ca07aab50cbad0c7c10c2b9bd35d2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "1ea766b31d257946420ddd2a56581f7a21d3c2cd", "commitAfterChange": "5f6832bd82418c0d62e243e5d6ae5dcdb95b7446", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     protected static boolean matchPatternStart( String pattern, String str,                                                 boolean isCaseSensitive )", "signatureAfterChange": "     protected static boolean matchPatternStart( String pattern, String str,                                                 boolean isCaseSensitive )", "diff": ["-        Vector patDirs = new Vector();", "+        ArrayList patDirs = new ArrayList();", "-            patDirs.addElement( st.nextToken() );", "+            patDirs.add( st.nextToken() );", "-        Vector strDirs = new Vector();", "+        ArrayList strDirs = new ArrayList();", "-            strDirs.addElement( st.nextToken() );", "+            strDirs.add( st.nextToken() );", "-            String patDir = (String)patDirs.elementAt( patIdxStart );", "+            String patDir = (String)patDirs.get( patIdxStart );", "-            if( !match( patDir, (String)strDirs.elementAt( strIdxStart ), isCaseSensitive ) )", "+            if( !match( patDir, (String)strDirs.get( strIdxStart ), isCaseSensitive ) )"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cd927051e920aa8a7270e7a51b251be", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/types/PatternSet.java", "commitBeforeChange": "676c2c7cbc53cf43d91f5cb64da1cb84495b0e4f", "commitAfterChange": "ce6c8d711c59101ecf7c4bbef534d5d66daec1f7", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private void readFiles( Project p )         throws TaskException", "signatureAfterChange": "     private void readFiles( Project p )         throws TaskException", "diff": ["-        if( includesFileList.size() > 0 )", "+        if( m_includesFileList.size() > 0 )", "-            Iterator e = includesFileList.iterator();", "+            Iterator e = m_includesFileList.iterator();", "-                    readPatterns( inclFile, includeList, p );", "+                    readPatterns( inclFile, m_includeList, p );", "-            includesFileList.clear();", "+            m_includesFileList.clear();", "-        if( excludesFileList.size() > 0 )", "+        if( m_excludesFileList.size() > 0 )", "-            Iterator e = excludesFileList.iterator();", "+            Iterator e = m_excludesFileList.iterator();", "-                    readPatterns( exclFile, excludeList, p );", "+                    readPatterns( exclFile, m_excludeList, p );", "-            excludesFileList.clear();", "+            m_excludesFileList.clear();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "953b7dbd6c5a2d36c6545edff8123f49", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/cvslib/CvsTagDiff.java", "commitBeforeChange": "9a9f726dc3634a7a80adefee62dffecfa5e0d6a9", "commitAfterChange": "ff0739c9ea16f764f011c95caa199d0772416e87", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        if (m_startTag != null) {", "+        if (mystartTag != null) {", "-            addCommandArgument(m_startTag);", "-        } else", "-        {", "+            addCommandArgument(mystartTag);", "+        } else {", "-            addCommandArgument(m_startDate);", "+            addCommandArgument(mystartDate);", "-        if (m_endTag != null) {", "+        if (myendTag != null) {", "-            addCommandArgument(m_endTag);", "-        } else", "-        {", "+            addCommandArgument(myendTag);", "+        } else {", "-            addCommandArgument(m_endDate);", "+            addCommandArgument(myendDate);", "-        addCommandArgument(m_package);", "+        addCommandArgument(mypackage);", "-        /*", "-        StringBuffer rdiff = new StringBuffer();", "-        rdiff.append(\"rdiff\");", "-        rdiff.append(\" -s\");", "-        if (m_startTag != null) {", "-           rdiff.append(\" -r\");", "-           rdiff.append(\" \" + m_startTag);", "-        } else", "-        {", "-            rdiff.append(\" -D\");", "-            rdiff.append(\" '\" + m_startDate + \"'\");", "-        }", "-        if (m_endTag != null) {", "-           rdiff.append(\" -r\");", "-           rdiff.append(\" \" + m_endTag);", "-        } else", "-        {", "-            rdiff.append(\" -D\");", "-            rdiff.append(\" '\" + m_endDate + \"'\");", "-        }", "-        rdiff.append(\" \" + m_package);", "-        log(\"Cvs command is \" + rdiff.toString(), Project.MSG_VERBOSE);", "-        setCommand(rdiff.toString());", "-        */", "-            tmpFile = m_fileUtils.createTempFile(\"cvstagdiff\", \".log\", null);", "+            tmpFile = myfileUtils.createTempFile(\"cvstagdiff\", \".log\", null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8cacc5bfc2712c91b8a7ece3d1659b7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/test/org/apache/myrmidon/components/configurer/DefaultConfigurerTest.java", "commitBeforeChange": "4b3e0ee2041826e51ec60af99e7bcca7024bf676", "commitAfterChange": "ed3fafb887fef0afbcd90eef7f263fef3bde95d9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void testSetElement()         throws Exception", "signatureAfterChange": "     public void testSetElement()         throws Exception", "diff": ["-        final ConfigTest2 test = new ConfigTest2();", "+        final ConfigTestObjectProps test = new ConfigTestObjectProps();", "-        m_configurer.configure( test, config, m_adaptor );", "+        m_configurer.configure( test, config, m_context );", "-        final ConfigTest2 expected = new ConfigTest2();", "-        ConfigTest1 elem = new ConfigTest1();", "+        final ConfigTestObjectProps expected = new ConfigTestObjectProps();", "+        ConfigTestStringProps elem = new ConfigTestStringProps();", "-        elem = new ConfigTest1();", "+        elem = new ConfigTestStringProps();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa3b9bcdf5e391ad497e3be9eaaadbd4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/testcases/org/apache/myrmidon/components/configurer/DefaultConfigurerTest.java", "commitBeforeChange": "4b3e0ee2041826e51ec60af99e7bcca7024bf676", "commitAfterChange": "ed3fafb887fef0afbcd90eef7f263fef3bde95d9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void testSetElement()         throws Exception", "signatureAfterChange": "     public void testSetElement()         throws Exception", "diff": ["-        final ConfigTest2 test = new ConfigTest2();", "+        final ConfigTestObjectProps test = new ConfigTestObjectProps();", "-        m_configurer.configure( test, config, m_adaptor );", "+        m_configurer.configure( test, config, m_context );", "-        final ConfigTest2 expected = new ConfigTest2();", "-        ConfigTest1 elem = new ConfigTest1();", "+        final ConfigTestObjectProps expected = new ConfigTestObjectProps();", "+        ConfigTestStringProps elem = new ConfigTestStringProps();", "-        elem = new ConfigTest1();", "+        elem = new ConfigTestStringProps();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aed2d9e9db07451a0852558e81760197", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/types/PatternSet.java", "commitBeforeChange": "676c2c7cbc53cf43d91f5cb64da1cb84495b0e4f", "commitAfterChange": "ce6c8d711c59101ecf7c4bbef534d5d66daec1f7", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private void readFiles( Project p )         throws TaskException", "signatureAfterChange": "     private void readFiles( Project p )         throws TaskException", "diff": ["-        if( includesFileList.size() > 0 )", "+        if( m_includesFileList.size() > 0 )", "-            Iterator e = includesFileList.iterator();", "+            Iterator e = m_includesFileList.iterator();", "-                    readPatterns( inclFile, includeList, p );", "+                    readPatterns( inclFile, m_includeList, p );", "-            includesFileList.clear();", "+            m_includesFileList.clear();", "-        if( excludesFileList.size() > 0 )", "+        if( m_excludesFileList.size() > 0 )", "-            Iterator e = excludesFileList.iterator();", "+            Iterator e = m_excludesFileList.iterator();", "-                    readPatterns( exclFile, excludeList, p );", "+                    readPatterns( exclFile, m_excludeList, p );", "-            excludesFileList.clear();", "+            m_excludesFileList.clear();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b726ec9613d902234aedd4ffb78d67c5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "f735f5f44df9fa52266e7b8b7f2741c2b7560d22", "commitAfterChange": "400ba5d1981259cc07b41f08cd1b53f048f8ef52", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "     protected void sendFile( FTPClient ftp, String dir, String filename )         throws IOException, TaskException", "signatureAfterChange": "     protected void sendFile( FTPClient ftp, String dir, String filename )         throws IOException, TaskException", "diff": ["-            if( newerOnly && isUpToDate( ftp, file, resolveFile( filename ) ) )", "+            if( m_newerOnly && isUpToDate( ftp, file, remoteResolveFile( filename ) ) )", "-            if( verbose )", "+            if( m_verbose )", "-            ftp.storeFile( resolveFile( filename ), instream );", "+            ftp.storeFile( remoteResolveFile( filename ), instream );", "-                if( skipFailedTransfers == true )", "+                if( m_skipFailedTransfers == true )", "-                    skipped++;", "+                    m_skipped++;", "-                getLogger().debug( \"File \" + file.getAbsolutePath() + \" copied to \" + server );", "-                transferred++;", "+                getLogger().debug( \"File \" + file.getAbsolutePath() + \" copied to \" + m_server );", "+                m_transferred++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba9d84388a360429cb9f9d2a158f58a5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "f735f5f44df9fa52266e7b8b7f2741c2b7560d22", "commitAfterChange": "400ba5d1981259cc07b41f08cd1b53f048f8ef52", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "     protected void sendFile( FTPClient ftp, String dir, String filename )         throws IOException, TaskException", "signatureAfterChange": "     protected void sendFile( FTPClient ftp, String dir, String filename )         throws IOException, TaskException", "diff": ["-            if( newerOnly && isUpToDate( ftp, file, resolveFile( filename ) ) )", "+            if( m_newerOnly && isUpToDate( ftp, file, remoteResolveFile( filename ) ) )", "-            if( verbose )", "+            if( m_verbose )", "-            ftp.storeFile( resolveFile( filename ), instream );", "+            ftp.storeFile( remoteResolveFile( filename ), instream );", "-                if( skipFailedTransfers == true )", "+                if( m_skipFailedTransfers == true )", "-                    skipped++;", "+                    m_skipped++;", "-                getLogger().debug( \"File \" + file.getAbsolutePath() + \" copied to \" + server );", "-                transferred++;", "+                getLogger().debug( \"File \" + file.getAbsolutePath() + \" copied to \" + m_server );", "+                m_transferred++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5c72abcd911c661acc73a11f1196d92", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/Project.java", "commitBeforeChange": "1ea766b31d257946420ddd2a56581f7a21d3c2cd", "commitAfterChange": "5f6832bd82418c0d62e243e5d6ae5dcdb95b7446", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private void parsePropertyString( String value, Vector fragments, Vector propertyRefs )         throws TaskException", "signatureAfterChange": "     private void parsePropertyString( String value, ArrayList fragments, ArrayList propertyRefs )         throws TaskException", "diff": ["-    private void parsePropertyString( String value, Vector fragments, Vector propertyRefs )", "+    private void parsePropertyString( String value, ArrayList fragments, ArrayList propertyRefs )", "-                fragments.addElement( value.substring( prev, pos ) );", "+                fragments.add( value.substring( prev, pos ) );", "-                fragments.addElement( \"$\" );", "+                fragments.add( \"$\" );", "-                fragments.addElement( value.substring( pos + 1, pos + 2 ) );", "+                fragments.add( value.substring( pos + 1, pos + 2 ) );", "-                fragments.addElement( null );", "-                propertyRefs.addElement( propertyName );", "+                fragments.add( null );", "+                propertyRefs.add( propertyName );", "-            fragments.addElement( value.substring( prev ) );", "+            fragments.add( value.substring( prev ) );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5989dfaab77570f3541707e60ebd361", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/Project.java", "commitBeforeChange": "1ea766b31d257946420ddd2a56581f7a21d3c2cd", "commitAfterChange": "5f6832bd82418c0d62e243e5d6ae5dcdb95b7446", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private void parsePropertyString( String value, Vector fragments, Vector propertyRefs )         throws TaskException", "signatureAfterChange": "     private void parsePropertyString( String value, ArrayList fragments, ArrayList propertyRefs )         throws TaskException", "diff": ["-    private void parsePropertyString( String value, Vector fragments, Vector propertyRefs )", "+    private void parsePropertyString( String value, ArrayList fragments, ArrayList propertyRefs )", "-                fragments.addElement( value.substring( prev, pos ) );", "+                fragments.add( value.substring( prev, pos ) );", "-                fragments.addElement( \"$\" );", "+                fragments.add( \"$\" );", "-                fragments.addElement( value.substring( pos + 1, pos + 2 ) );", "+                fragments.add( value.substring( pos + 1, pos + 2 ) );", "-                fragments.addElement( null );", "-                propertyRefs.addElement( propertyName );", "+                fragments.add( null );", "+                propertyRefs.add( propertyName );", "-            fragments.addElement( value.substring( prev ) );", "+            fragments.add( value.substring( prev ) );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e863eeb13ea34d75b28e76532f6928d9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/sound/AntSoundPlayer.java", "commitBeforeChange": "dff89c5ee288ed809304d9df1c4458a8b1d496c1", "commitAfterChange": "1b5824a6f65d5ec5286668eb2e68fc2f698bef54", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void buildFinished( BuildEvent event )", "signatureAfterChange": "     public void buildFinished( BuildEvent event )", "diff": ["-        if( event.getException() == null && fileSuccess != null )", "+        if( event.getException() == null && m_fileSuccess != null )", "-            play( event.getProject(), fileSuccess, loopsSuccess, durationSuccess );", "+            play( event.getProject(), m_fileSuccess, m_loopsSuccess, m_durationSuccess );", "-        else if( event.getException() != null && fileFail != null )", "+        else if( event.getException() != null && m_fileFail != null )", "-            play( event.getProject(), fileFail, loopsFail, durationFail );", "+            play( event.getProject(), m_fileFail, m_loopsFail, m_durationFail );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e89deca0fed26315db24b6670ca64af3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "ed50251db4ac48d4d7917b05f5c9c12864837865", "commitAfterChange": "a6ab0235192d311e0846d196589b71a02e2a7a43", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 25, "signatureBeforeChange": "     protected void slowScan()         throws TaskException", "signatureAfterChange": "     protected void slowScan()         throws TaskException", "diff": ["-        if( haveSlowResults )", "+        if( m_haveSlowResults )", "-        String[] excl = new String[ dirsExcluded.size() ];", "-        excl = (String[])dirsExcluded.toArray( excl );", "+        String[] excl = new String[ m_dirsExcluded.size() ];", "+        excl = (String[])m_dirsExcluded.toArray( excl );", "-        String[] notIncl = new String[ dirsNotIncluded.size() ];", "-        notIncl = (String[])dirsNotIncluded.toArray( notIncl );", "+        String[] notIncl = new String[ m_dirsNotIncluded.size() ];", "+        notIncl = (String[])m_dirsNotIncluded.toArray( notIncl );", "-                scandir( new File( basedir, excl[ i ] ),", "+                scandir( new File( m_basedir, excl[ i ] ),", "-                scandir( new File( basedir, notIncl[ i ] ),", "+                scandir( new File( m_basedir, notIncl[ i ] ),", "-        haveSlowResults = true;", "+        m_haveSlowResults = true;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b744a238bf71bf0c29d7bdb7d21ca0a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5aaf5fd8be6418a98ac5d5c193e0d7e9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/vfs/impl/DefaultFileSystemManager.java", "commitBeforeChange": "5b87919be6a8db15efe30f2de6e617aba31ef619", "commitAfterChange": "52926715b4f4f53da4b63cf660a14f357d7a9b6e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": "         public FileSystem getFileSystem( final String rootURI )", "signatureAfterChange": "     public FileObject createFileSystem( final String scheme,                                         final FileObject file )         throws FileSystemException", "diff": ["-         */", "-        public FileSystem getFileSystem( final String rootURI )", "-        {", "-            // TODO - need to have a per-fs uri comparator", "-            return (FileSystem)m_fileSystems.get( rootURI );", "-        }", "+     */", "+    public FileObject createFileSystem( final String scheme,", "+                                        final FileObject file )", "+        throws FileSystemException", "+    {", "+        FileSystemProvider provider = (FileSystemProvider)m_providers.get( scheme );", "+        if( provider == null )", "+            final String message = REZ.getString( \"unknown-provider.error\", scheme );", "+            throw new FileSystemException( message );", "+        return provider.createFileSystem( scheme, file );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebdd0c7cb74bd39233795bc59170ad65", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/type/DefaultTypeManager.java", "commitBeforeChange": "bcd2dfcf11671f2c237daf0b2c7dd240d62d829a", "commitAfterChange": "28a812e0cfaba7e946d865eee09dc9a35bfdbb63", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private MultiSourceTypeFactory createFactory( final Class role )         throws TypeException", "signatureAfterChange": "     private MultiSourceTypeFactory createFactory( final String roleName )         throws TypeException", "diff": ["-    private MultiSourceTypeFactory createFactory( final Class role )", "+    private MultiSourceTypeFactory createFactory( final String roleName )", "-        MultiSourceTypeFactory factory = (MultiSourceTypeFactory)m_roleMap.get( role );", "+        MultiSourceTypeFactory factory = (MultiSourceTypeFactory)m_roleMap.get( roleName );", "-        final MultiSourceTypeFactory parentFactory = getParentTypedFactory( role );", "+        final MultiSourceTypeFactory parentFactory = getParentTypedFactory( roleName );", "-            factory = new MultiSourceTypeFactory( role );", "+            // Lookup the role type", "+            final RoleInfo role = m_roleManager.getRole( roleName );", "+            if( role == null )", "+            {", "+                final String message = REZ.getString( \"unknown-role.error\", roleName );", "+                throw new TypeException( message );", "+            }", "+            factory = new MultiSourceTypeFactory( role.getType() );", "-        m_roleMap.put( role, factory );", "+        m_roleMap.put( roleName, factory );"]}]}
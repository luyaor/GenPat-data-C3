{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3b31f31ef8991e1ee3b2cbd04a3c98f6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "839c803c40c6afaad291521ccc506add", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ExecutionFrame.java", "commitBeforeChange": "e0fef5cf64773a98734998b9736ded96fc8be2c7", "commitAfterChange": "81c17b6164451315e24ae774f1bed668cbca99ce", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 28, "signatureBeforeChange": "     private AntLibFactory getLibFactory(AntLibrary antLibrary)          throws ExecutionException", "signatureAfterChange": "     private void determineBaseDirs() throws ExecutionException", "diff": ["-    private AntLibFactory getLibFactory(AntLibrary antLibrary)", "-         throws ExecutionException {", "-        String libraryId = antLibrary.getLibraryId();", "-        if (libFactories.containsKey(libraryId)) {", "-            return (AntLibFactory)libFactories.get(libraryId);", "+    private void determineBaseDirs() throws ExecutionException {", "+        if (isDataValueSet(BASEDIR_PROP)) {", "+            baseDir = new File(getDataValue(BASEDIR_PROP).toString());", "+        } else {", "+            URL projectURL = project.getSourceURL();", "+            if (projectURL.getProtocol().equals(\"file\")) {", "+                File projectFile = new File(projectURL.getFile());", "+                File projectFileParent = projectFile.getParentFile();", "+                String base = project.getBase();", "+                if (base == null) {", "+                    baseDir = projectFileParent;", "+                } else {", "+                    FileUtils fileUtils = new FileUtils();", "+                    baseDir = fileUtils.resolveFile(projectFileParent, base);", "+                }", "+            } else {", "+                baseDir = new File(\".\");", "+            }", "+            setDataValue(BASEDIR_PROP, baseDir.getPath(), true);", "-        AntLibFactory libFactory = antLibrary.getFactory();", "-        if (libFactory == null) {", "-            libFactory = new StandardLibFactory();", "+", "+        for (Iterator i = getReferencedFrames(); i.hasNext(); ) {", "+            ExecutionFrame refFrame = (ExecutionFrame)i.next();", "+            refFrame.determineBaseDirs();", "-        libFactories.put(libraryId, libFactory);", "-        libFactory.init(new ExecutionContext(this, eventSupport));", "-        return libFactory;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86f695f9696146edf1b7df61b2cba4de", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/zip/UTF8ZipFilesTest.java", "commitBeforeChange": "cbd20a77eba224b21654251583971e054729f006", "commitAfterChange": "752d64fa43db2172327771ba4d36bee3f2d3b49a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 10, "signatureBeforeChange": "      private static void createTestFile(File file, String encoding)         throws UnsupportedEncodingException, IOException", "signatureAfterChange": "      private static void createTestFile(File file, String encoding,                                        boolean withEFS,                                        boolean withExplicitUnicodeExtra)         throws UnsupportedEncodingException, IOException", "diff": ["-    private static void createTestFile(File file, String encoding)", "+    private static void createTestFile(File file, String encoding,", "+                                       boolean withEFS,", "+                                       boolean withExplicitUnicodeExtra)", "+", "+        ZipEncoding zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);", "+            zos.setUseLanguageEncodingFlag(withEFS);", "+            zos.setCreateUnicodeExtraFields(!withExplicitUnicodeExtra);", "-            if (!ZipEncodingHelper.canEncodeName(ze.getName(),", "-                                                 zos.getEncoding())) {", "+            if (withExplicitUnicodeExtra", "+                && !zipEncoding.canEncode(ze.getName())) {", "+", "+                ByteBuffer en = zipEncoding.encode(ze.getName());", "+", "-                                                           zos.getEncoding()));", "+                                                           en.array(),", "+                                                           en.arrayOffset(),", "+                                                           en.limit()));", "-            if (!ZipEncodingHelper.canEncodeName(ze.getName(),", "-                                                 zos.getEncoding())) {", "+            if (withExplicitUnicodeExtra", "+                && !zipEncoding.canEncode(ze.getName())) {", "+", "+                ByteBuffer en = zipEncoding.encode(ze.getName());", "+", "-                                                           zos.getEncoding()));", "+                                                           en.array(),", "+                                                           en.arrayOffset(),", "+                                                           en.limit()));", "-            if (!ZipEncodingHelper.canEncodeName(ze.getName(),", "-                                                 zos.getEncoding())) {", "+            if (withExplicitUnicodeExtra", "+                && !zipEncoding.canEncode(ze.getName())) {", "+", "+                ByteBuffer en = zipEncoding.encode(ze.getName());", "+", "-                                                           zos.getEncoding()));", "+                                                           en.array(),", "+                                                           en.arrayOffset(),", "+                                                           en.limit()));"]}]}
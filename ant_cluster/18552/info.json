{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd463eb93667614ede48ae9b964788d2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ffdb1413ff8916880e17c56b42107d0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Ant.java", "commitBeforeChange": "bb05312e66a2403d2405988dbaf0830cde65df7c", "commitAfterChange": "da5f3bfd256e383926c6ece58dba15a7d4bd5761", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private void addReferences() throws BuildException", "signatureAfterChange": "     private void addReferences() throws BuildException", "diff": ["-        Hashtable thisReferences", "-            = (Hashtable) getProject().getReferences().clone();", "-        Hashtable newReferences = newProject.getReferences();", "-        Enumeration e;", "-        if (references.size() > 0) {", "-            for (e = references.elements(); e.hasMoreElements();) {", "-                Reference ref = (Reference) e.nextElement();", "-                String refid = ref.getRefId();", "-                if (refid == null) {", "-                    throw new BuildException(\"the refid attribute is required\"", "-                                             + \" for reference elements\");", "-                }", "-                if (!thisReferences.containsKey(refid)) {", "-                    log(\"Parent project doesn't contain any reference '\"", "-                        + refid + \"'\",", "-                        Project.MSG_WARN);", "-                    continue;", "-                }", "-", "-                thisReferences.remove(refid);", "-                String toRefid = ref.getToRefid();", "-                if (toRefid == null) {", "-                    toRefid = refid;", "-                }", "-                copyReference(refid, toRefid);", "+        @SuppressWarnings(\"unchecked\")", "+        Hashtable<String, Object> thisReferences", "+            = (Hashtable<String, Object>) getProject().getReferences().clone();", "+        for (Reference ref : references) {", "+            String refid = ref.getRefId();", "+            if (refid == null) {", "+                throw new BuildException(\"the refid attribute is required\"", "+                                         + \" for reference elements\");", "+            if (!thisReferences.containsKey(refid)) {", "+                log(\"Parent project doesn't contain any reference '\"", "+                    + refid + \"'\",", "+                    Project.MSG_WARN);", "+                continue;", "+            }", "+", "+            thisReferences.remove(refid);", "+            String toRefid = ref.getToRefid();", "+            if (toRefid == null) {", "+                toRefid = refid;", "+            }", "+            copyReference(refid, toRefid);", "-            for (e = thisReferences.keys(); e.hasMoreElements();) {", "-                String key = (String) e.nextElement();", "+            Hashtable<String, Object> newReferences = newProject.getReferences();", "+            for (String key : thisReferences.keySet()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "930ae60f04a5802fc2db1dc26562f6d0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "d25488cbbb28cf25e1f91f714c70999fd105432d", "commitAfterChange": "3d706ab8188a674936880b6f4530b0cf3991758b", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "     private static Map removeDuplicateTargets(Map targets)", "signatureAfterChange": "     private static Map<String, Target> removeDuplicateTargets(Map<String, Target> targets)", "diff": ["-    private static Map removeDuplicateTargets(Map targets) {", "-        Map locationMap = new HashMap();", "-        for (Iterator i = targets.entrySet().iterator(); i.hasNext();) {", "-            Map.Entry entry = (Map.Entry) i.next();", "-            String name = (String) entry.getKey();", "-            Target target = (Target) entry.getValue();", "-            Target otherTarget =", "-                (Target) locationMap.get(target.getLocation());", "+    private static Map<String, Target> removeDuplicateTargets(Map<String, Target> targets) {", "+        Map<Location, Target> locationMap = new HashMap<Location, Target>();", "+        for (Entry<String, Target> entry : targets.entrySet()) {", "+            String name = entry.getKey();", "+            Target target = entry.getValue();", "+            Target otherTarget = locationMap.get(target.getLocation());", "-            //  b) location is in map, but it's name is longer", "+            //  b) location is in map, but its name is longer", "-        Map ret = new HashMap();", "-        for (Iterator i = locationMap.values().iterator(); i.hasNext();) {", "-            Target target = (Target) i.next();", "+        Map<String, Target> ret = new HashMap<String, Target>();", "+        for (Target target : locationMap.values()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf7615664b08a150c7829b630ee0c3ff", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "bb05312e66a2403d2405988dbaf0830cde65df7c", "commitAfterChange": "da5f3bfd256e383926c6ece58dba15a7d4bd5761", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "     private String[] patchEnvironment()", "signatureAfterChange": "     private String[] patchEnvironment()", "diff": ["-        Map/*<String, String>*/ osEnv =", "-            new LinkedHashMap(getEnvironmentVariables());", "+        Map<String, String> osEnv =", "+            new LinkedHashMap<String, String>(getEnvironmentVariables());", "-                for (Iterator it = osEnv.keySet().iterator(); it.hasNext();) {", "-                    String osEnvItem = (String) it.next();", "+                for (String osEnvItem : osEnv.keySet()) {", "-        ArrayList l = new ArrayList();", "-        for (Iterator it = osEnv.entrySet().iterator(); it.hasNext();) {", "-            Map.Entry entry = (Map.Entry) it.next();", "+        ArrayList<String> l = new ArrayList<String>();", "+        for (Entry<String, String> entry : osEnv.entrySet()) {", "-        return (String[]) (l.toArray(new String[osEnv.size()]));", "+        return l.toArray(new String[osEnv.size()]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6e346d718064f41cac4e50d87c54d75", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "d25488cbbb28cf25e1f91f714c70999fd105432d", "commitAfterChange": "3d706ab8188a674936880b6f4530b0cf3991758b", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     private void checkIncludePatterns()", "signatureAfterChange": "     private void checkIncludePatterns()", "diff": ["-        Map newroots = new HashMap();", "+        Map<TokenizedPath, String> newroots = new HashMap<TokenizedPath, String>();", "-        for (Iterator iter = includeNonPatterns.entrySet().iterator();", "-             iter.hasNext(); ) {", "-            Map.Entry entry = (Map.Entry) iter.next();", "-            String pattern = (String) entry.getKey();", "+        for (Map.Entry<String, TokenizedPath> entry : includeNonPatterns.entrySet()) {", "+            String pattern = entry.getKey();", "-                newroots.put((TokenizedPath) entry.getValue(), pattern);", "+                newroots.put(entry.getValue(), pattern);", "-            // only scan directories that can include matched files or", "-            // directories", "-            Iterator it = newroots.entrySet().iterator();", "-", "-            while (it.hasNext()) {", "-                Map.Entry entry = (Map.Entry) it.next();", "-                TokenizedPath currentPath = (TokenizedPath) entry.getKey();", "+            // only scan directories that can include matched files or", "+            // directories", "+            for (Map.Entry<TokenizedPath, String> entry : newroots.entrySet()) {", "+                TokenizedPath currentPath = entry.getKey();"]}]}
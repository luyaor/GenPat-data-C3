{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bd6eb8aa42df5de7dc28bc79093ef2ad", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72e05271085922acef796b9b42125462", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/unix/Symlink.java", "commitBeforeChange": "1225a5a849faa66e73a1262180dd002332b162b0", "commitAfterChange": "90a6d8155086ee0d0a1911584a56eb7b33fb3d0f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public synchronized void execute() throws BuildException", "diff": ["-    public void execute() throws BuildException {", "+    public synchronized void execute() throws BuildException {", "+        if (executing) {", "+            throw new BuildException(", "+                \"Infinite recursion detected in Symlink.execute()\");", "+        }", "-            if (action.equals(\"single\")) {", "-                doLink(resource, link);", "-            } else if (action.equals(\"delete\")) {", "-                try {", "-                    log(\"Removing symlink: \" + link);", "-                    Symlink.deleteSymlink(link);", "-                } catch (FileNotFoundException fnfe) {", "-                    handleError(fnfe.toString());", "-                } catch (IOException ioe) {", "-                    handleError(ioe.toString());", "-                }", "-            } else if (action.equals(\"recreate\")) {", "-                Properties listOfLinks;", "-                Enumeration keys;", "-", "-                if (fileSets.size() == 0) {", "-                    handleError(\"File set identifying link file(s) \"", "-                                + \"required for action recreate\");", "-                    return;", "-                }", "-                listOfLinks = loadLinks(fileSets);", "-", "-                keys = listOfLinks.keys();", "-", "-                while (keys.hasMoreElements()) {", "-                    link = (String) keys.nextElement();", "-                    resource = listOfLinks.getProperty(link);", "-                    // handle the case where the link exists", "-                    // and points to a directory (bug 25181)", "-                    try {", "-                        File test = new File(link);", "-                        File testRes = new File(resource);", "-                        if (!FILE_UTILS.isSymbolicLink(test.getParentFile(),", "-                                               test.getName())) {", "-                            doLink(resource, link);", "-                        } else {", "-                            if (!test.getCanonicalPath().", "-                                equals(testRes.getCanonicalPath())) {", "-                                Symlink.deleteSymlink(link);", "-                                doLink(resource, link);", "-                            } // else the link exists, do nothing", "-                        }", "-                    } catch (IOException ioe) {", "-                        handleError(\"IO exception while creating \"", "-                                    + \"link\");", "-                    }", "-                }", "-            } else if (action.equals(\"record\")) {", "-                Vector vectOfLinks;", "-                Hashtable byDir = new Hashtable();", "-                Enumeration links, dirs;", "-", "-                if (fileSets.size() == 0) {", "-                    handleError(\"Fileset identifying links to \"", "-                                + \"record required\");", "-                    return;", "-                }", "-                if (linkFileName == null) {", "-                    handleError(\"Name of file to record links in \"", "-                                + \"required\");", "-                    return;", "-                }", "-                // fill our vector with file objects representing", "-                // links (canonical)", "-                vectOfLinks = findLinks(fileSets);", "-", "-                // create a hashtable to group them by parent directory", "-                links = vectOfLinks.elements();", "-                while (links.hasMoreElements()) {", "-                    File thisLink = (File) links.nextElement();", "-                    String parent = thisLink.getParent();", "-                    if (byDir.containsKey(parent)) {", "-                        ((Vector) byDir.get(parent)).addElement(thisLink);", "-                    } else {", "-                        byDir.put(parent, new Vector());", "-                        ((Vector) byDir.get(parent)).addElement(thisLink);", "-                    }", "-                }", "-                // write a Properties file in each directory", "-                dirs = byDir.keys();", "-                while (dirs.hasMoreElements()) {", "-                    String dir = (String) dirs.nextElement();", "-                    Vector linksInDir = (Vector) byDir.get(dir);", "-                    Properties linksToStore = new Properties();", "-                    Enumeration eachlink = linksInDir.elements();", "-                    File writeTo;", "-", "-                    // fill up a Properties object with link and resource", "-                    // names", "-                    while (eachlink.hasMoreElements()) {", "-                        File alink = (File) eachlink.nextElement();", "-                        try {", "-                            linksToStore.put(alink.getName(),", "-                                             alink.getCanonicalPath());", "-                        } catch (IOException ioe) {", "-                            handleError(\"Couldn't get canonical \"", "-                                        + \"name of a parent link\");", "-                        }", "-                    }", "-                    // Get a place to record what we are about to write", "-                    writeTo = new File(dir + File.separator", "-                                       + linkFileName);", "-", "-                    writePropertyFile(linksToStore, writeTo,", "-                                      \"Symlinks from \" + writeTo.getParent());", "-                }", "-            } else {", "-                handleError(\"Invalid action specified in symlink\");", "-            }", "+            executing = true;", "+            DispatchUtils.execute(this);", "-            // return all variables to their default state,", "-            // ready for the next invocation.", "-            resource = null;", "-            link = null;", "-            action = \"single\";", "-            fileSets = new Vector();", "-            linkFileName = null;", "-            overwrite = false;", "-            failonerror = true;", "+            executing = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac05445daf5a59202e0cfa715d2a8279", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "b120eead1b06b7d47b9ba63e4083b6fc387ba9a6", "commitAfterChange": "5fc15284f36e2c714f1904f57ed9788cef3683c2", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void processArgs(String[] args)", "signatureAfterChange": "     private void processArgs(String[] args)", "diff": ["-                try {", "-                    buildFile = new File(args[i + 1].replace('/', File.separatorChar));", "-                    i++;", "-                } catch (ArrayIndexOutOfBoundsException aioobe) {", "-                    String msg = \"You must specify a buildfile when \"", "-                        + \"using the -buildfile argument\";", "-                    throw new BuildException(msg);", "-                }", "+                i = handleArgBuildFile(args, i);", "-                try {", "-                    listeners.addElement(args[i + 1]);", "-                    i++;", "-                } catch (ArrayIndexOutOfBoundsException aioobe) {", "-                    String msg = \"You must specify a classname when \"", "-                        + \"using the -listener argument\";", "-                    throw new BuildException(msg);", "-                }", "+                i = handleArgListener(args, i);", "-", "-                /* Interestingly enough, we get to here when a user", "-                 * uses -Dname=value. However, in some cases, the OS", "-                 * goes ahead and parses this out to args", "-                 *   {\"-Dname\", \"value\"}", "-                 * so instead of parsing on \"=\", we just make the \"-D\"", "-                 * characters go away and skip one argument forward.", "-                 *", "-                 * I don't know how to predict when the JDK is going", "-                 * to help or not, so we simply look for the equals sign.", "-                 */", "-", "-                String name = arg.substring(2, arg.length());", "-                String value = null;", "-                int posEq = name.indexOf(\"=\");", "-                if (posEq > 0) {", "-                    value = name.substring(posEq + 1);", "-                    name = name.substring(0, posEq);", "-                } else if (i < args.length - 1) {", "-                    value = args[++i];", "-                } else {", "-                    throw new BuildException(\"Missing value for property \"", "-                                             + name);", "-                }", "-", "-                definedProps.put(name, value);", "+                i = handleArgDefine(args, i);", "-                if (loggerClassname != null) {", "-                    throw new BuildException(\"Only one logger class may \"", "-                        + \" be specified.\");", "-                }", "-                try {", "-                    loggerClassname = args[++i];", "-                } catch (ArrayIndexOutOfBoundsException aioobe) {", "-                    throw new BuildException(\"You must specify a classname when\"", "-                                             + \" using the -logger argument\");", "-                }", "+                i = handleArgLogger(args, i);", "-                if (inputHandlerClassname != null) {", "-                    throw new BuildException(\"Only one input handler class may \"", "-                                             + \"be specified.\");", "-                }", "-                try {", "-                    inputHandlerClassname = args[++i];", "-                } catch (ArrayIndexOutOfBoundsException aioobe) {", "-                    throw new BuildException(\"You must specify a classname when\"", "-                                             + \" using the -inputhandler\"", "-                                             + \" argument\");", "-                }", "+                i = handleArgInputHandler(args, i);", "-                try {", "-                    propertyFiles.addElement(args[i + 1]);", "-                    i++;", "-                } catch (ArrayIndexOutOfBoundsException aioobe) {", "-                    String msg = \"You must specify a property filename when \"", "-                        + \"using the -propertyfile argument\";", "-                    throw new BuildException(msg);", "-                }", "+                i = handleArgPropertyFile(args, i);", "-                try {", "-                    threadPriority = Integer.decode(args[i + 1]);", "-                } catch (ArrayIndexOutOfBoundsException aioobe) {", "-                    throw new BuildException(", "-                            \"You must supply a niceness value (1-10)\"", "-                            + \" after the -nice option\");", "-                } catch (NumberFormatException e) {", "-                    throw new BuildException(\"Unrecognized niceness value: \"", "-                                             + args[i + 1]);", "-                }", "-                i++;", "-                if (threadPriority.intValue() < Thread.MIN_PRIORITY", "-                    || threadPriority.intValue() > Thread.MAX_PRIORITY) {", "-                    throw new BuildException(", "-                            \"Niceness value is out of the range 1-10\");", "-                }", "+                i = handleArgNice(args, i);", "+        loadPropertyFiles();", "+", "+        if (msgOutputLevel >= Project.MSG_INFO) {", "+            System.out.println(\"Buildfile: \" + buildFile);", "+        }", "+", "+        if (logTo != null) {", "+            out = logTo;", "+            err = logTo;", "+            System.setOut(out);", "+            System.setErr(err);", "+        }", "+        readyToRun = true;", "+    }", "-                   + filename + \": \" + e.getMessage());", "-", "-        if (msgOutputLevel >= Project.MSG_INFO) {", "-            System.out.println(\"Buildfile: \" + buildFile);", "-        }", "-", "-        if (logTo != null) {", "-            out = logTo;", "-            err = logTo;", "-            System.setOut(out);", "-            System.setErr(err);", "-        }", "-        readyToRun = true;"]}]}
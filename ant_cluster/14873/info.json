{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0374fddf4567727886af05668d994ccd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "308388f212ac85c0101f48fdb7e92420", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/tasklet/engine/DefaultTskDeployer.java", "commitBeforeChange": "bba92ec2234c85ea1ff3ec3e4e2bb45adaaf3197", "commitAfterChange": "51e2cc543512d445e415bc5b7c2a42f98ddf8446", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void deployDataType( final String name, final String location, final URL url )         throws DeploymentException", "signatureAfterChange": "      public void deployDataType( final String name, final String location, final URL url )         throws DeploymentException", "diff": ["+        checkDeployment( location, url );", "+        final ZipFile zipFile = getZipFileFor( url );", "+        final Configuration datatypedefs = loadConfiguration( zipFile, TSKDEF_FILE );", "+        ", "+        try", "+        {", "+            final Iterator datatypes = datatypedefs.getChildren( \"datatype\" );", "+            while( datatypes.hasNext() )", "+            {", "+                final Configuration datatype = (Configuration)datatypes.next();", "+                if( datatype.getAttribute( \"name\" ).equals( name ) )", "+                {", "+                    handleDataType( datatype, url );", "+                    break;", "+                }", "+            }", "+        }", "+        catch( final ConfigurationException ce )", "+        {", "+            throw new DeploymentException( \"Malformed taskdefs.xml\", ce );", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f61581a1301861aa5d7dcbb970334578", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/api/DefaultTaskContext.java", "commitBeforeChange": "21a88b996ae1899e19a7062eeb3fe214cb2cbe4f", "commitAfterChange": "80712682289dee8200289b46365bdb5066d1d2f7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void setProperty(  final String name, final Object value, final ScopeEnum scope )         throws TaskException", "signatureAfterChange": "     public void setProperty( final String name, final Object value, final ScopeEnum scope )         throws TaskException", "diff": ["-    public void setProperty(  final String name, final Object value, final ScopeEnum scope )", "+    public void setProperty( final String name, final Object value, final ScopeEnum scope )", "-                                        \" has no parent\" );", "+                                         \" has no parent\" );", "-                ((DefaultTaskContext)getParent()).put( name, value );", "+                ((TaskContext)getParent()).setProperty( name, value );", "-            context.putValue( name, value );", "+            context.put( name, value );", "-            throw new TaskException( \"Can't set a property with an unknown \" +", "-                                    \"property context! (\" + scope + \")\" );", "+            throw new IllegalStateException( \"Unknown property scope! (\" + scope + \")\" );", "-    }"]}]}
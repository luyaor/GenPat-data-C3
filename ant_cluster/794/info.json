{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0f67ea3c546fbdfa38cff8eb899811e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba28c8a8b433db29164e60e0bdeb1900", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "ae16bb711b331f6c8a20ee1298cf171de43266f7", "commitAfterChange": "e0ad7527a06eb0e9513160b0c5b49bc9f8ab5f5b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        project.log(\"Building \"+ archiveType +\": \"+ zipFile.getAbsolutePath());", "-", "+        // quick exit if the target is up to date", "+        boolean upToDate = true;", "+        for (int i=0; i<files.length && upToDate; i++)", "+            if (new File(baseDir,files[i]).lastModified() > ", "+                zipFile.lastModified())", "+                upToDate = false;", "+        if (upToDate) return;", "+", "+        project.log(\"Building \"+ archiveType +\": \"+ zipFile.getAbsolutePath());", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8c9986aad2b8e27f77ee8f5068c041d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/DefaultExcludesTest.java", "commitBeforeChange": "6a02f448306dee5d4d63dbb092c365469420129d", "commitAfterChange": "a98a49253bd792fec570f11f310d61dc9370f67a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void assertEquals(String message, String[] expected, String[] actual)", "signatureAfterChange": "     private void assertEquals(String message, String[] expected, String[] actual)", "diff": ["-        for (int counter=0; counter <expected.length; counter++) {", "-            assertEquals(message + \" : \" + counter + \"th element in array match\", expected[counter], actual[counter]);", "+        for (int counter=0; counter < expected.length; counter++) {", "+            boolean found = false;", "+            for (int i = 0; !found && i < actual.length; i++) {", "+                found |= expected[counter].equals(actual[i]);", "+            }", "+            assertTrue(message + \" : didn't find element \"", "+                       + expected[counter] + \" in array match\", found);"]}]}
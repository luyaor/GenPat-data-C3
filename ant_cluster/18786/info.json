{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf9f5dab43cc8b0fcc6c7d6742e5441f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e25f876ac2f27a0d428f0d8db99f0664", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/JonasDeploymentTool.java", "commitBeforeChange": "270394a09fddda0ea9ffa2330956c5f399ab840f", "commitAfterChange": "6bd8d6e938a45868902ecd1092858e8372933c7c", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 24, "signatureBeforeChange": "     private File createTempDir()", "signatureAfterChange": "     private File createTempDir() throws IOException", "diff": ["-    private File createTempDir() {", "-        String theTempDir = System.getProperty(\"java.io.tmpdir\");", "-        int anIndice = 0;", "-        File aFile = null;", "-        // try 50 times to find a free tempory directory", "-        while (anIndice < 50 && aFile == null) {", "-            aFile = new File(theTempDir, \"GenicTemp\" + anIndice);", "-            if (aFile.exists()) {", "-                anIndice++;", "-                aFile = null;", "-            }", "-        }", "-        if (aFile == null) {", "-            // problem in temp directory", "-            throw new BuildException(\"Impossible to find a free temp directory for output.\");", "-        } else {", "-            aFile.mkdirs();", "-            return (aFile);", "-        }", "+    private File createTempDir() throws IOException {       ", "+\tFile tmpDir = File.createTempFile(\"genic\", null, null);\t    ", "+\ttmpDir.delete();", "+\tif ( !tmpDir.mkdir() ) {", "+\t    throw new IOException(\"Cannot create the temporary directory '\" + tmpDir + \"'.\");", "+\t}", "+\treturn tmpDir;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc1c887ee3921379144cd0209a9e57e2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Jar.java", "commitBeforeChange": "7e7fa2f905e691ba00568bc670cc80060c224fd4", "commitAfterChange": "590936af269c77bda5fb410fd81e19958062efe6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private Manifest getDefaultManifest() throws IOException", "signatureAfterChange": "              private Manifest getDefaultManifest()", "diff": ["-", "-    private Manifest getDefaultManifest() throws IOException {", "-        String s = \"/org/apache/tools/ant/defaultManifest.mf\";", "-        InputStream in = this.getClass().getResourceAsStream(s);", "-        if (in == null) {", "-            throw new BuildException(\"Could not find: \" + s);", "+        ", "+    private Manifest getDefaultManifest() {", "+        try {", "+            String s = \"/org/apache/tools/ant/defaultManifest.mf\";", "+            InputStream in = this.getClass().getResourceAsStream(s);", "+            if (in == null) {", "+                throw new BuildException(\"Could not find default manifest: \" + s);", "+            }", "+            return new Manifest(in);", "-        return new Manifest(in);", "+        catch (ManifestException e) {", "+            throw new BuildException(\"Default manifest is invalid !!\");", "+        }", "+        catch (IOException e) {", "+            throw new BuildException(\"Unable to read default manifest\", e);", "+        }"]}]}
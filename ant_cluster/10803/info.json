{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "03959828eb6f60e609ac62e9965293aa", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95d5f61e42703d4236881ef3d4f89dd0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/configuration/DefaultConfigurer.java", "commitBeforeChange": "c31e31c52a1f624e72be505d788db9be42b87e5d", "commitAfterChange": "48c54a521235f746024ae8facc272e049d0e1cf5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void configure( final Object object,                             final Configuration configuration,                            final Context context )         throws ConfigurationException", "signatureAfterChange": "     public void configure( final Object object,                            final Configuration configuration,                            final Context context )         throws ConfigurationException", "diff": ["-    public void configure( final Object object, ", "+    public void configure( final Object object,", "-            m_logger.debug( \"Configuring \" + object );", "+            getLogger().debug( \"Configuring \" + object );", "-            if( DEBUG ) ", "+            if( DEBUG )", "-                m_logger.debug( \"Configuring object via Configurable interface\" );", "+                getLogger().debug( \"Configuring object via Configurable interface\" );", "-            if( DEBUG ) ", "+            if( DEBUG )", "-                m_logger.debug( \"Configuring object via Configurable reflection\" );", "+                getLogger().debug( \"Configuring object via Configurable reflection\" );", "-            final Iterator attributes = configuration.getAttributeNames();", "-            while( attributes.hasNext() )", "+            final String[] attributes = configuration.getAttributeNames();", "+            for( int i = 0; i < attributes.length; i++ )", "-                final String name = (String)attributes.next();", "+                final String name = attributes[ i ];", "-             ", "-                if( DEBUG ) ", "+", "+                if( DEBUG )", "-                    m_logger.debug( \"Configuring attribute name=\" + name +", "+                    getLogger().debug( \"Configuring attribute name=\" + name +", "-                ", "+", "-            final Iterator elements = configuration.getChildren();", "-            ", "-            while( elements.hasNext() )", "+            final Configuration[] children = configuration.getChildren();", "+", "+            for( int i = 0; i < children.length; i++ )", "-                final Configuration element = (Configuration)elements.next();", "-                ", "-                if( DEBUG ) ", "+                final Configuration child = children[ i ];", "+", "+                if( DEBUG )", "-                    m_logger.debug( \"Configuring subelement name=\" + element.getName() );", "+                    getLogger().debug( \"Configuring subelement name=\" + child.getName() );", "-                ", "-                configureElement( object, element, context );", "+", "+                configureElement( object, child, context );", "-                    if( DEBUG ) ", "+                    if( DEBUG )", "-                        m_logger.debug( \"Configuring content \" + content );", "+                        getLogger().debug( \"Configuring content \" + content );", "-                    ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df5ae7151e075657e3ebbc7c096a0861", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XmlProperty.java", "commitBeforeChange": "d1019d39f4e2987a46f2a43d4306aac00ce56467", "commitAfterChange": "c5fa091ce5dbdf1ddaa2b5f03f9c7ad3c6476535", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void execute()             throws BuildException", "signatureAfterChange": "     public void execute()             throws BuildException", "diff": ["-            configurationStream =", "-                    new BufferedInputStream(new FileInputStream(src));", "+            log(\"Loading \" + src.getAbsolutePath(), Project.MSG_VERBOSE);", "+           ", "+            if (src.exists()) {", "-            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();", "+              configurationStream =", "+                      new BufferedInputStream(new FileInputStream(src));", "-            factory.setValidating(validate);", "-            factory.setNamespaceAware(false);", "+              DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();", "-            Element topElement = factory.newDocumentBuilder().parse(configurationStream).getDocumentElement();", "+              factory.setValidating(validate);", "+              factory.setNamespaceAware(false);", "-            // Keep a hashtable of attributes added by this task.", "-            // This task is allow to override its own properties", "-            // but not other properties.  So we need to keep track", "-            // of which properties we've added.", "-            addedAttributes = new Hashtable();", "+              Element topElement = factory.newDocumentBuilder().parse(configurationStream).getDocumentElement();", "-            if (keepRoot) {", "-                addNodeRecursively(topElement, prefix, null);", "-            } else {", "-                NodeList topChildren = topElement.getChildNodes();", "-                int numChildren = topChildren.getLength();", "-                for (int i = 0; i < numChildren; i++) {", "+              // Keep a hashtable of attributes added by this task.", "+              // This task is allow to override its own properties", "+              // but not other properties.  So we need to keep track", "+              // of which properties we've added.", "+              addedAttributes = new Hashtable();", "+", "+              if (keepRoot) {", "+                  addNodeRecursively(topElement, prefix, null);", "+              } else {", "+                  NodeList topChildren = topElement.getChildNodes();", "+                  int numChildren = topChildren.getLength();", "+                  for (int i = 0; i < numChildren; i++) {", "-                }", "-            }", "+                  }", "+              }", "+            } else {", "+                log(\"Unable to find property file: \" + src.getAbsolutePath(),", "+                    Project.MSG_VERBOSE);", "+            }", "+            "]}]}
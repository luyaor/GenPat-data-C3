{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "476acda025da3dc372518a2af5ca448b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7dcd522419951368fedb4fae44f82ac", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "616fc9850d475bb426b01f957e9559c000c619e6", "commitAfterChange": "f2078ba20bea6666d82c9572e1626b55fdd55426", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "          public void run()", "signatureAfterChange": "          public void run()", "diff": ["-        res.addListener(this);", "+        res.addListener(wrapListener(this));", "-            res.addListener((TestListener) formatters.elementAt(i));", "+            res.addListener(wrapListener((TestListener) formatters.elementAt(i)));", "+                Class junit4TestAdapterClass = null;", "+                // Note that checking for JDK 5 directly won't work; under JDK 4, this will already have failed.", "+                try {", "+                    if (loader == null) {", "+                        junit4TestAdapterClass = Class.forName(\"junit.framework.JUnit4TestAdapter\");", "+                    } else {", "+                        junit4TestAdapterClass = Class.forName(\"junit.framework.JUnit4TestAdapter\", true, loader);", "+                    }", "+                } catch (ClassNotFoundException e) {", "+                    // OK, fall back to JUnit 3.", "+                }", "+                junit4 = junit4TestAdapterClass != null;", "+", "-                Method suiteMethod = null;", "-                try {", "-                    // check if there is a suite method", "-                    suiteMethod = testClass.getMethod(\"suite\", new Class[0]);", "-                } catch (NoSuchMethodException e) {", "-                    // no appropriate suite method found. We don't report any", "-                    // error here since it might be perfectly normal.", "-                }", "-                if (suiteMethod != null) {", "-                    // if there is a suite method available, then try", "-                    // to extract the suite from it. If there is an error", "-                    // here it will be caught below and reported.", "-                    suite = (Test) suiteMethod.invoke(null, new Class[0]);", "+                if (junit4) {", "+                    // Let's use it!", "+                    suite = (Test) junit4TestAdapterClass.getConstructor(new Class[] {Class.class}).", "+                            newInstance(new Object[] {testClass});", "-                    // try to extract a test suite automatically this", "-                    // will generate warnings if the class is no", "-                    // suitable Test", "-                    suite = new TestSuite(testClass);", "+                    // Use JUnit 3.", "+", "+                    Method suiteMethod = null;", "+                    try {", "+                        // check if there is a suite method", "+                        suiteMethod = testClass.getMethod(\"suite\", new Class[0]);", "+                    } catch (NoSuchMethodException e) {", "+                        // no appropriate suite method found. We don't report any", "+                        // error here since it might be perfectly normal.", "+                    }", "+                    if (suiteMethod != null) {", "+                        // if there is a suite method available, then try", "+                        // to extract the suite from it. If there is an error", "+                        // here it will be caught below and reported.", "+                        suite = (Test) suiteMethod.invoke(null, new Class[0]);", "+                    } else {", "+                        // try to extract a test suite automatically this", "+                        // will generate warnings if the class is no", "+                        // suitable Test", "+                        suite = new TestSuite(testClass);", "+                    }", "+", "-                    junitTest.setCounts(res.runCount(), res.failureCount(),", "-                                        res.errorCount());", "+                    if (junit4) {", "+                        int[] cnts = findJUnit4FailureErrorCount(res);", "+                        junitTest.setCounts(res.runCount(), cnts[0], cnts[1]);", "+                    } else {", "+                        junitTest.setCounts(res.runCount(), res.failureCount(),", "+                                res.errorCount());", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8082391881f3f163af29b5cd6b6673e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "8c1e2b5d55d4e3ffdbedb99bc40c10ab70adadac", "commitAfterChange": "41387c3188e193586634b6eb33df541301098b05", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "          public void run()", "signatureAfterChange": "          public void run()", "diff": ["+                Class testClass = null;", "+                if (loader == null) {", "+                    testClass = Class.forName(junitTest.getName());", "+                } else {", "+                    testClass = Class.forName(junitTest.getName(), true,", "+                                              loader);", "+                }", "+", "+                // check for a static suite method first, even when using", "+                // JUnit 4", "+                Method suiteMethod = null;", "+                try {", "+                    // check if there is a suite method", "+                    suiteMethod = testClass.getMethod(\"suite\", new Class[0]);", "+                } catch (NoSuchMethodException e) {", "+                    // no appropriate suite method found. We don't report any", "+                    // error here since it might be perfectly normal.", "+                }", "+                if (suiteMethod != null) {", "+                    // if there is a suite method available, then try", "+                    // to extract the suite from it. If there is an error", "+                    // here it will be caught below and reported.", "+                    suite = (Test) suiteMethod.invoke(null, new Class[0]);", "+                } else {", "-                Class testClass = null;", "-                if (loader == null) {", "-                    testClass = Class.forName(junitTest.getName());", "-                } else {", "-                    testClass = Class.forName(junitTest.getName(), true,", "-                                              loader);", "-                }", "-", "-                    Method suiteMethod = null;", "-                    try {", "-                        // check if there is a suite method", "-                        suiteMethod = testClass.getMethod(\"suite\", new Class[0]);", "-                    } catch (NoSuchMethodException e) {", "-                        // no appropriate suite method found. We don't report any", "-                        // error here since it might be perfectly normal.", "-                    }", "-                    if (suiteMethod != null) {", "-                        // if there is a suite method available, then try", "-                        // to extract the suite from it. If there is an error", "-                        // here it will be caught below and reported.", "-                        suite = (Test) suiteMethod.invoke(null, new Class[0]);", "-                    } else {"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "52222a7a7c23ef90f1ca5ca06b1158c2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d8eacdc9f33b89a6e187b3b5f137abf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ide/VAJImport.java", "commitBeforeChange": "adb10aa72e51f837386530781d2845cdcba3f799", "commitAfterChange": "7cd7c4e5f82cbe8a3fe5d03b7c8ea871a523fdd1", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": "     protected void importFileset(FileSet fileset)", "signatureAfterChange": "     protected void importFileset(FileSet fileset)", "diff": ["-        DirectoryScanner ds = fileset.getDirectoryScanner(this.getProject());", "+        LocalDirectoryScanner ds = new LocalDirectoryScanner();", "+        fileset.setupDirectoryScanner(ds, this.getProject());", "-        String[] includes = null;", "-        String[] excludes = null;", "-", "-        // Hack to get includes and excludes. We could also use getIncludedFiles,", "-        // but that would result in very long HTTP-requests.", "-        // Therefore we want to send the patterns only to the remote tool server", "-        // and let him figure out the files.", "-        try {", "-            Class directoryScanner = ds.getClass();", "-", "-            Field includesField = directoryScanner.getDeclaredField(\"includes\");", "-            includesField.setAccessible(true);", "-            includes = (String[]) includesField.get(ds);", "-", "-            Field excludesField = directoryScanner.getDeclaredField(\"excludes\");", "-            excludesField.setAccessible(true);", "-            excludes = (String[]) excludesField.get(ds);", "-        } catch (NoSuchFieldException nsfe) {", "-            throw new BuildException(", "-                \"DirectoryScanner.includes or .excludes missing\" + nsfe.getMessage());", "-        } catch (IllegalAccessException iae) {", "-            throw new BuildException(", "-                \"Access to DirectoryScanner.includes or .excludes not allowed\");", "-        }", "+        String[] includes = ds.getIncludes();", "+        String[] excludes = ds.getExcludes();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae2c6da34fcebb2a2abf5401037a4357", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "b3dffa5f955c1cd32b73ac3b100e648e1106de6c", "commitAfterChange": "b6ec4af9dd33b9a37fe18f1c2a043e67bdf0d67b", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "          public void init(String propType, AttributeList attrs) throws SAXParseException", "signatureAfterChange": "          public void init(String propType, AttributeList attrs) throws SAXParseException", "diff": ["-", "-            String methodName = \"create\" + Character.toUpperCase(propType.charAt(0)) + propType.substring(1);", "+            IntrospectionHelper ih = ", "+                IntrospectionHelper.getHelper(targetClass);", "-                Method addProp = targetClass.getMethod(methodName, new Class[]{});", "-                child = addProp.invoke(target, new Object[] {});", "+                child = ih.createElement(target, propType.toLowerCase());", "-            } catch(NoSuchMethodException exc) {", "-                throw new SAXParseException(targetClass + \" does not support nested \" + propType + \" properties\", locator);", "-            } catch(InvocationTargetException exc) {", "-                throw new SAXParseException(exc.getMessage(), locator);", "-            } catch(IllegalAccessException exc) {", "-                throw new SAXParseException(exc.getMessage(), locator);", "+            } catch (BuildException exc) {", "+                throw new SAXParseException(exc.getMessage(), locator, exc);", "+            }", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "173e28e77da74cacbb47e5eb69b5f892", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "198f8d7734cdd6167bdcea87add5ad87", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/jdepend/JDependTask.java", "commitBeforeChange": "99de043a35f48a0a37ff1ec17e0ad0d2fc9fed5c", "commitAfterChange": "e160d8323df859e424047fd929fa01a3da0340a3", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     public int executeInVM(CommandlineJava commandline) throws BuildException", "signatureAfterChange": "     public int executeInVM(CommandlineJava commandline) throws BuildException", "diff": ["+        FileWriter fw = null;", "-            FileWriter fw;", "-        if (getClassespath() != null) {", "-            // This is the new, better way - use classespath instead", "-            // of sourcespath.  The code is currently the same - you", "-            // need class files in a directory to use this - jar files", "-            // coming soon....", "-            String[] classesPath = getClassespath().list();", "-            for (int i = 0; i < classesPath.length; i++) {", "-                File f = new File(classesPath[i]);", "-                // not necessary as JDepend would fail, but why loose", "-                // some time?", "-                if (!f.exists() || !f.isDirectory()) {", "-                    String msg = \"\\\"\"", "-                        + f.getPath()", "-                        + \"\\\" does not represent a valid\"", "-                        + \" directory. JDepend would fail.\";", "-                    log(msg);", "-                    throw new BuildException(msg);", "+", "+        try {", "+            if (getClassespath() != null) {", "+                // This is the new, better way - use classespath instead", "+                // of sourcespath.  The code is currently the same - you", "+                // need class files in a directory to use this - jar files", "+                // coming soon....", "+                String[] classesPath = getClassespath().list();", "+                for (int i = 0; i < classesPath.length; i++) {", "+                    File f = new File(classesPath[i]);", "+                    // not necessary as JDepend would fail, but why loose", "+                    // some time?", "+                    if (!f.exists() || !f.isDirectory()) {", "+                        String msg = \"\\\"\"", "+                            + f.getPath()", "+                            + \"\\\" does not represent a valid\"", "+                            + \" directory. JDepend would fail.\";", "+                        log(msg);", "+                        throw new BuildException(msg);", "+                    }", "+                    try {", "+                        jdepend.addDirectory(f.getPath());", "+                    } catch (IOException e) {", "+                        String msg =", "+                            \"JDepend Failed when adding a class directory: \"", "+                            + e.getMessage();", "+                        log(msg);", "+                        throw new BuildException(msg);", "+                    }", "-                try {", "-                    jdepend.addDirectory(f.getPath());", "-                } catch (IOException e) {", "-                    String msg =", "-                        \"JDepend Failed when adding a class directory: \"", "-                        + e.getMessage();", "-                    log(msg);", "-                    throw new BuildException(msg);", "+", "+            } else if (getSourcespath() != null) {", "+", "+                // This is the old way and is deprecated - classespath is", "+                // the right way to do this and is above", "+                String[] sourcesPath = getSourcespath().list();", "+                for (int i = 0; i < sourcesPath.length; i++) {", "+                    File f = new File(sourcesPath[i]);", "+", "+                    // not necessary as JDepend would fail, but why loose", "+                    // some time?", "+                    if (!f.exists() || !f.isDirectory()) {", "+                        String msg = \"\\\"\"", "+                            + f.getPath()", "+                            + \"\\\" does not represent a valid\"", "+                            + \" directory. JDepend would fail.\";", "+                        log(msg);", "+                        throw new BuildException(msg);", "+                    }", "+                    try {", "+                        jdepend.addDirectory(f.getPath());", "+                    } catch (IOException e) {", "+                        String msg =", "+                            \"JDepend Failed when adding a source directory: \"", "+                            + e.getMessage();", "+                        log(msg);", "+                        throw new BuildException(msg);", "+                    }", "-        } else if (getSourcespath() != null) {", "-", "-            // This is the old way and is deprecated - classespath is", "-            // the right way to do this and is above", "-            String[] sourcesPath = getSourcespath().list();", "-            for (int i = 0; i < sourcesPath.length; i++) {", "-                File f = new File(sourcesPath[i]);", "-", "-                // not necessary as JDepend would fail, but why loose", "-                // some time?", "-                if (!f.exists() || !f.isDirectory()) {", "-                    String msg = \"\\\"\"", "-                        + f.getPath()", "-                        + \"\\\" does not represent a valid\"", "-                        + \" directory. JDepend would fail.\";", "-                    log(msg);", "-                    throw new BuildException(msg);", "+            // This bit turns <exclude> child tags into patters to ignore", "+            String[] patterns = defaultPatterns.getExcludePatterns(getProject());", "+            if (patterns != null && patterns.length > 0) {", "+                if (setFilter != null) {", "+                    Vector v = new Vector();", "+                    for (int i = 0; i < patterns.length; i++) {", "+                        v.addElement(patterns[i]);", "+                    }", "+                    try {", "+                        Object o = packageFilterC.newInstance(new Object[] {v});", "+                        setFilter.invoke(jdepend, new Object[] {o});", "+                    } catch (Throwable e) {", "+                        log(\"excludes will be ignored as JDepend doesn't like me: \"", "+                            + e.getMessage(), Project.MSG_WARN);", "+                    }", "+                } else {", "+                    log(\"Sorry, your version of JDepend doesn't support excludes\",", "+                        Project.MSG_WARN);", "+            }", "+", "+            jdepend.analyze();", "+        } finally {", "+            if (fw != null) {", "-                    jdepend.addDirectory(f.getPath());", "-                } catch (IOException e) {", "-                    String msg =", "-                        \"JDepend Failed when adding a source directory: \"", "-                        + e.getMessage();", "-                    log(msg);", "-                    throw new BuildException(msg);", "+                    fw.close();", "+                } catch (Throwable t) {", "+                    // Ignore", "-", "-        // This bit turns <exclude> child tags into patters to ignore", "-        String[] patterns = defaultPatterns.getExcludePatterns(getProject());", "-        if (patterns != null && patterns.length > 0) {", "-            if (setFilter != null) {", "-                Vector v = new Vector();", "-                for (int i = 0; i < patterns.length; i++) {", "-                    v.addElement(patterns[i]);", "-                }", "-                try {", "-                    Object o = packageFilterC.newInstance(new Object[] {v});", "-                    setFilter.invoke(jdepend, new Object[] {o});", "-                } catch (Throwable e) {", "-                    log(\"excludes will be ignored as JDepend doesn't like me: \"", "-                        + e.getMessage(), Project.MSG_WARN);", "-                }", "-            } else {", "-                log(\"Sorry, your version of JDepend doesn't support excludes\",", "-                    Project.MSG_WARN);", "-            }", "-        }", "-", "-        jdepend.analyze();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6059b1fd4cda2c686a59534cc0284244", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Ant.java", "commitBeforeChange": "e2aa7c41ea6b92db4fdb91c61f97ad09b4a25940", "commitAfterChange": "8edaa455e6de687be40590a6a74f166098e20340", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        ", "+", "-            ", "+", "-            ", "+", "-                target.equals(this.getOwningTarget().getName())) { ", "+                target.equals(this.getOwningTarget().getName())) {", "+            if (output != null && out != null) {", "+                try {", "+                    out.close();", "+                } catch (final Exception e) {", "+                    //ignore", "+                }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62fca9f77c9dafb3ffff7ce2119e9faa", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "9936be269812cd80ee92432d1ccf3bfb69537e5a", "commitAfterChange": "56e61f039f54d015e60e3e2ecaaeaa8e666d8cef", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void setParent(ClassLoader parent)", "signatureAfterChange": "     private void setParent(ClassLoader parent)", "diff": ["-    public void setParent(ClassLoader parent) {", "+    private void setParent(ClassLoader parent) {", "+        // ClassLoader.parent is private and there is", "+        // no accessor to set it, there is an accessor", "+        // to get it, but it is final.", "+        // This method setParent sets the parent of", "+        // this classloader, and that is the way that the", "+        // class behaves - so use a bit of reflection", "+        // to set the field.", "+        if (parentField == null) {", "+            return; // Unable to get access to the parent field", "+        }", "+        try {", "+            parentField.set(this, parent);", "+        } catch (Throwable t) {", "+            // Ignore - unable to set the parent", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b1b75651b0de81b094e8d385ce8a118", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/EchoPropertiesTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 9, "signatureBeforeChange": "       public void testEchoToGoodFileXml() throws Exception", "signatureAfterChange": "       @Test     public void testEchoToGoodFileXml() throws Exception", "diff": ["+    @Test", "-        executeTarget( \"testEchoToGoodFileXml\" );", "+        buildRule.executeTarget(\"testEchoToGoodFileXml\");", "-        File f = createRelativeFile( GOOD_OUTFILE_XML );", "-        FileReader fr = new FileReader( f );", "+        File f = createRelativeFile(GOOD_OUTFILE_XML);", "+        FileReader fr = new FileReader(f);", "+        BufferedReader br = new BufferedReader(fr);", "-            BufferedReader br = new BufferedReader( fr );", "-            while ( (read = br.readLine()) != null) {", "+            while ((read = br.readLine()) != null) {", "-            fail( \"did not encounter set property in generated file.\" );", "+            fail(\"did not encounter set property in generated file.\");", "+            } catch(IOException e) {}", "+            try {", "+                br.close();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2a81c94cf40332832d74334e0e46ca3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/XMLJUnitResultFormatter.java", "commitBeforeChange": "14c45a0623d7f87bb7585e802524d36695a1c916", "commitAfterChange": "f21a1750ce8008bd256ff8fd0ba35e97949b2829", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void endTestSuite(JUnitTest suite) throws BuildException", "signatureAfterChange": "     public void endTestSuite(JUnitTest suite) throws BuildException", "diff": ["-                wri.flush();", "+                if (wri != null) {", "+                    try {", "+                        wri.flush();", "+                    } catch (IOException ex) {", "+                        // ignore", "+                    }", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd115a3923c027a5733c21226cabc77e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Property.java", "commitBeforeChange": "25253f3faa839d0341bdfe9eecb06d8791fcf8ea", "commitAfterChange": "925e23a2861ea0dd5605a31b21ce85e72d32238c", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "      protected void loadResource(String name)", "signatureAfterChange": "      protected void loadResource(String name)", "diff": ["+        InputStream is = null;", "-            InputStream is = null;", "+        } finally {", "+            if (is != null) {", "+                try {", "+                    is.close();", "+                } catch (IOException e) {}", "+            }", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf87133d7380d9383f567d584ba1fcbc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/taskdefs/ZipTest.java", "commitBeforeChange": "a1f6b5b24b36eef55dbc03445c299165db616392", "commitAfterChange": "1d273bec1ae6eb178757073054aedf51e245710e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void tearDown()", "signatureAfterChange": "      public void tearDown()", "diff": ["+        try {", "+            if ( zfPrefixAddsDir != null) {", "+                zfPrefixAddsDir.close();", "+            }", "+", "+        } catch (IOException e) {", "+            //ignored", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de6e311979f8ca9c19dfa90a17a4327e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XSLTProcess.java", "commitBeforeChange": "986b213cec2bfff8af1e561c43211c46f84f11cd", "commitAfterChange": "65c82879ee9fbf59f8c95ac2fdd23051297f7463", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "      protected XSLTLiaison getLiaison()", "signatureAfterChange": "      protected XSLTLiaison getLiaison()", "diff": ["-                        resolveProcessor(\"xslp\");", "+                        resolveProcessor(\"xalan\");", "-                            resolveProcessor(\"xalan\");", "+                            resolveProcessor(\"adaptx\");", "-                            e3.printStackTrace();", "-                            e2.printStackTrace();", "-                            throw new BuildException(e1);", "+                            try {", "+                                resolveProcessor(\"xslp\");", "+                            } catch (Throwable e4) {", "+                                e4.printStackTrace();", "+                                e3.printStackTrace();", "+                                e2.printStackTrace();", "+                                throw new BuildException(e1);", "+                            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8a4d78eb658407b52400bf7b8dcc623", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/executor/AspectAwareExecutor.java", "commitBeforeChange": "6008290de6bfbdca34ddc86c26f436be4664f54a", "commitAfterChange": "2ddb4ff944dd3ed84fd6d6ed7b08ba753334f4de", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private final Configuration prepareAspects( final Configuration taskModel )         throws TaskException", "signatureAfterChange": "     private final Configuration prepareAspects( final Configuration taskModel )         throws TaskException", "diff": ["+        try", "+        {", "+            newTaskModel.setValue( taskModel.getValue() );", "+        }", "+        catch( final ConfigurationException cee )", "+        {", "+            //Will never occur", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdab7edf7baed12c7d3e4cbfc069033b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Definer.java", "commitBeforeChange": "17279312b558faecefb7527401824068e77fbda9", "commitAfterChange": "2cd5cfabd458ab9d92e045a32d6831f72a4e2940", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["+            InputStream is=null;", "-                    String msg = \"You must not specify both, file and resource.\";", "+                    String msg = \"You must not specify both, file and \"", "+                        + \"resource.\";", "-                InputStream is=null;", "+            } finally {", "+                if (is != null) {", "+                    try {", "+                        is.close();", "+                    } catch (IOException e) {}", "+                }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5c37aed0195535041d01a3f0a22d4b4a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ced8d889528ad3f9a919174275521460", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/SummaryJUnitResultFormatter.java", "commitBeforeChange": "10c41029aeaba31241f1a85f9b02591b357e20b6", "commitAfterChange": "818cb969adef1df0f5918ba62f80f62502d5e53e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void endTestSuite(JUnitTest suite)", "signatureAfterChange": "     public void endTestSuite(JUnitTest suite) throws BuildException", "diff": ["-    public void endTestSuite(JUnitTest suite) {", "-        System.out.print(\"Tests run: \");", "-        System.out.print(suite.runCount());", "-        System.out.print(\", Failures: \");", "-        System.out.print(suite.failureCount());", "-        System.out.print(\", Errors: \");", "-        System.out.print(suite.errorCount());", "-        System.out.print(\", Time ellapsed: \");", "-        System.out.print(nf.format(suite.getRunTime()/1000.0));", "-        System.out.println(\" sec\");", "+    public void endTestSuite(JUnitTest suite) throws BuildException {", "+        StringBuffer sb = new StringBuffer(\"Tests run: \");", "+        sb.append(suite.runCount());", "+        sb.append(\", Failures: \");", "+        sb.append(suite.failureCount());", "+        sb.append(\", Errors: \");", "+        sb.append(suite.errorCount());", "+        sb.append(\", Time elapsed: \");", "+        sb.append(nf.format(suite.getRunTime()/1000.0));", "+        sb.append(\" sec\");", "+        sb.append(System.getProperty(\"line.separator\"));", "+        try {", "+            out.write(sb.toString().getBytes());", "+            out.flush();", "+        } catch (IOException ioex) {", "+            throw new BuildException(\"Unable to write summary output\", ioex);", "+        } finally {", "+            try {", "+                out.close();", "+            } catch (IOException e) {}", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed1dfe47d3bf7e53ada15da0bd7ab0a2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/project/DefaultProjectBuilder.java", "commitBeforeChange": "58f8db35ee5db94294191fc2599cb02a8086b881", "commitAfterChange": "8c97911720b40557d78672245bc2e7f724917297", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      protected void buildTarget( final DefaultProject project,                                  final Configuration configuration )", "signatureAfterChange": "     protected void buildTarget( final DefaultProject project, final Configuration target )", "diff": ["-    protected void buildTarget( final DefaultProject project, ", "-                                final Configuration configuration )", "+     */", "+    protected void buildTarget( final DefaultProject project, final Configuration target )", "-        final String name = configuration.getAttribute( \"name\", null );", "-        final String depends = configuration.getAttribute( \"depends\", null );", "-        final String ifCondition = configuration.getAttribute( \"if\", null );", "-        final String unlessCondition = configuration.getAttribute( \"unless\", null );", "+        final String name = target.getAttribute( \"name\", null );", "+        final String depends = target.getAttribute( \"depends\", null );", "+        final String ifCondition = target.getAttribute( \"if\", null );", "+        final String unlessCondition = target.getAttribute( \"unless\", null );", "-                                    configuration.getLocation() );", "+                                    target.getLocation() );", "-        m_logger.debug( \"Parsing target: \" + name );", "+        getLogger().debug( \"Parsing target: \" + name );", "-                                    \"unless condition at \" + configuration.getLocation() );    ", "+                                    \"unless condition at \" + target.getLocation() );    ", "-            m_logger.debug( \"Target if condition: \" + ifCondition );", "+            getLogger().debug( \"Target if condition: \" + ifCondition );", "-            m_logger.debug( \"Target unless condition: \" + unlessCondition );", "+            getLogger().debug( \"Target unless condition: \" + unlessCondition );", "-        final DefaultTarget target = new DefaultTarget( condition );", "+        final DefaultTarget defaultTarget = new DefaultTarget( condition );", "+        //apply depends attribute", "-            int start = 0;", "-            int end = depends.indexOf( ',' );", "+            final String[] elements = StringUtil.splitString( depends, \",\" );", "-            while( -1 != end )", "+            for( int i = 0; i < elements.length; i++ )", "-                final String dependency = ", "-                    parseDependency( configuration, depends.substring( start, end ) );", "+                final String dependency = elements[ i ].trim();", "-                target.addDependency( dependency );", "-                start = end++;", "-                end = depends.indexOf( ',', start );", "+                if( 0 == dependency.length() )", "+                {", "+                    throw new AntException( \"Discovered empty dependency in target \" + ", "+                                            target.getName() + \" at \" + target.getLocation() ); ", "+                }", "+", "+                getLogger().debug( \"Target dependency: \" + dependency );", "+                defaultTarget.addDependency( dependency );", "-", "-            final String dependency = ", "-                parseDependency( configuration, depends.substring( start ) );", "-", "-            target.addDependency( dependency );", "-        final Iterator tasks = configuration.getChildren();", "+        //add all the targets from element", "+        final Iterator tasks = target.getChildren();", "-            m_logger.debug( \"Parsed task: \" + task.getName() );", "-            target.addTask( task );", "+            getLogger().debug( \"Parsed task: \" + task.getName() );", "+            defaultTarget.addTask( task );", "-        project.addTarget( name, target );", "+        //add target to project", "+        project.addTarget( name, defaultTarget );"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "41d80b729e8cf0cddc63e4e4ab53a1ed", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "606ffbd96f55b5474802842283d0ab61", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Expand.java", "commitBeforeChange": "e22d7c50937ee1d155f91bfd635673bd41017e76", "commitAfterChange": "95fa304e14c4cc49d84e089ea13107a35b68f8d5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      protected void extractFile(FileUtils fileUtils, File srcF, File dir,                                InputStream compressedInputStream,                                String entryName, long entrySize,                                Date entryDate, boolean isDirectory)                                throws IOException", "signatureAfterChange": "      protected void extractFile(FileUtils fileUtils, File srcF, File dir,                                InputStream compressedInputStream,                                String entryName,                                Date entryDate, boolean isDirectory)                                throws IOException", "diff": ["-                               String entryName, long entrySize,", "+                               String entryName,", "-                               throws IOException {", "-        extractFile(fileUtils, srcF, dir, compressedInputStream,", "-                    entryName, entrySize, entryDate, isDirectory,", "-                    null, null);", "-", "-    }", "+        log(\"Expanding: \" + srcF + \" into \" + dir, Project.MSG_INFO);", "+        File f = fileUtils.resolveFile(dir, entryName);", "+        try {", "+            if (!overwrite && f.exists()", "+                && f.lastModified() >= entryDate.getTime()) {", "+                log(\"Skipping \" + f + \" as it is up-to-date\",", "+                    Project.MSG_DEBUG);", "+                return;", "+            log(\"expanding \" + entryName + \" to \"+ f,", "+                Project.MSG_VERBOSE);", "+            // create intermediary directories - sometimes zip don't add them", "+            File dirF= fileUtils.getParentFile(f);", "+            dirF.mkdirs();", "+            if (isDirectory) {", "+                f.mkdirs();", "+            } else {", "+                byte[] buffer = new byte[1024];", "+                int length = 0;", "+                FileOutputStream fos = null;", "+                try {", "+                    fos = new FileOutputStream(f);", "+", "+                    while ((length =", "+                            compressedInputStream.read(buffer)) >= 0) {", "+                        fos.write(buffer, 0, length);", "+                    }", "+", "+                    fos.close();", "+                    fos = null;", "+                } finally {", "+                    if (fos != null) {", "+                        try {", "+                            fos.close();", "+                        } catch (IOException e) {}", "+", "+            fileUtils.setFileLastModified(f, entryDate.getTime());", "+        } catch( FileNotFoundException ex ) {", "+            log(\"Unable to expand to file \" + f.getPath(), Project.MSG_WARN);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff2f72c0c84ca83c9897adb4643298b5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteOn.java", "commitBeforeChange": "9ff2d6a1ab17e51f25cadf8de2a1b7ada8c15490", "commitAfterChange": "eefa2aba55ad71e6c5ee6e54748b1dc76025c7ac", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 10, "signatureBeforeChange": "     protected String[] getCommandline(String[] srcFiles, File baseDir)", "signatureAfterChange": "     protected String[] getCommandline(String[] srcFiles, File[] baseDirs)", "diff": ["-    protected String[] getCommandline(String[] srcFiles, File baseDir) {", "-        String[] orig = cmdl.getCommandline();", "-        String[] result = new String[orig.length+srcFiles.length];", "-", "-        int index = orig.length;", "-        if (srcFilePos != null) {", "-            index = srcFilePos.getPosition();", "+    protected String[] getCommandline(String[] srcFiles, File[] baseDirs) {", "+        Vector targets = new Vector();", "+        if (targetFilePos != null) {", "+            Hashtable addedFiles = new Hashtable();", "+            for (int i=0; i<srcFiles.length; i++) {", "+                String[] subTargets = mapper.mapFileName(srcFiles[i]);", "+                if (subTargets != null) {", "+                    for (int j=0; j<subTargets.length; j++) {", "+                        String name = (new File(destDir, subTargets[j])).getAbsolutePath();", "+                        if (!addedFiles.contains(name)) {", "+                            targets.addElement(name);", "+                            addedFiles.put(name, name);", "+                        }", "+                    }", "+                }", "+            }", "-        System.arraycopy(orig, 0, result, 0, index);", "-", "-        for (int i=0; i < srcFiles.length; i++) {", "-            result[index+i] = (new File(baseDir, srcFiles[i])).getAbsolutePath();", "-        }", "+        String[] targetFiles = new String[targets.size()];", "+        targets.copyInto(targetFiles);", "-        System.arraycopy(orig, index, result, index+srcFiles.length, ", "-                         orig.length-index);", "+        String[] orig = cmdl.getCommandline();", "+        String[] result = new String[orig.length+srcFiles.length+targetFiles.length];", "+", "+        int srcIndex = orig.length;", "+        if (srcFilePos != null) {", "+            srcIndex = srcFilePos.getPosition();", "+        }", "+", "+        if (targetFilePos != null) {", "+            int targetIndex = targetFilePos.getPosition();", "+", "+            if (srcIndex < targetIndex ", "+                || (srcIndex == targetIndex && srcIsFirst)) {", "+", "+                // 0 --> srcIndex", "+                System.arraycopy(orig, 0, result, 0, srcIndex);", "+                ", "+                // srcIndex --> targetIndex", "+                System.arraycopy(orig, srcIndex, result, ", "+                                 srcIndex + srcFiles.length,", "+                                 targetIndex - srcIndex);", "+                ", "+                // targets are already absolute file names", "+                System.arraycopy(targetFiles, 0, result, ", "+                                 targetIndex + srcFiles.length, ", "+                                 targetFiles.length);", "+                ", "+                // targetIndex --> end", "+                System.arraycopy(orig, targetIndex, result, ", "+                                 targetIndex + srcFiles.length + targetFiles.length,", "+                                 orig.length - targetIndex);", "+            } else {", "+                // 0 --> targetIndex", "+                System.arraycopy(orig, 0, result, 0, targetIndex);", "+                ", "+                // targets are already absolute file names", "+                System.arraycopy(targetFiles, 0, result, ", "+                                 targetIndex,", "+                                 targetFiles.length);", "+                ", "+                // targetIndex --> srcIndex", "+                System.arraycopy(orig, targetIndex, result, ", "+                                 targetIndex + targetFiles.length,", "+                                 srcIndex - targetIndex);", "+                ", "+                // srcIndex --> end", "+                System.arraycopy(orig, srcIndex, result, ", "+                                 srcIndex + srcFiles.length + targetFiles.length,", "+                                 orig.length - srcIndex);", "+                srcIndex += targetFiles.length;", "+            }", "+", "+        } else { // no targetFilePos", "+            System.arraycopy(orig, 0, result, 0, srcIndex);", "+        }", "+", "+        // fill in source file names", "+        for (int i=0; i < srcFiles.length; i++) {", "+            result[srcIndex+i] = ", "+                (new File(baseDirs[i], srcFiles[i])).getAbsolutePath();", "+        }"]}]}
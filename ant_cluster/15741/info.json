{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1cc84191eaa4d43e60ea885f7fae1943", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "071faa792d38c7238a3d6f92c5b6f96f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/compilers/Gcj.java", "commitBeforeChange": "96f9a81fa679d8e7ef4eb3725d383df9730d49dd", "commitAfterChange": "669a7eae15ea1cf4d43f78955eb15a1b757717f5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      protected Commandline setupGCJCommand()         throws TaskException", "signatureAfterChange": "      protected Commandline setupGCJCommand()         throws TaskException", "diff": ["-        Path classpath = new Path( project );", "+        Path classpath = new Path( m_project );", "-        if( bootclasspath != null )", "+        if( m_bootclasspath != null )", "-            classpath.append( bootclasspath );", "+            classpath.append( m_bootclasspath );", "-        classpath.addExtdirs( extdirs );", "+        classpath.addExtdirs( m_extdirs );", "-        if( ( bootclasspath == null ) || ( bootclasspath.size() == 0 ) )", "+        if( ( m_bootclasspath == null ) || ( m_bootclasspath.size() == 0 ) )", "-            includeJavaRuntime = true;", "+            m_includeJavaRuntime = true;", "-        if( destDir != null )", "+        if( m_destDir != null )", "-            cmd.createArgument().setFile( destDir );", "+            cmd.createArgument().setFile( m_destDir );", "-            if( destDir.mkdirs() )", "+            if( m_destDir.mkdirs() )", "-        if( encoding != null )", "+        if( m_encoding != null )", "-            cmd.createArgument().setValue( \"--encoding=\" + encoding );", "+            cmd.createArgument().setValue( \"--encoding=\" + m_encoding );", "-        if( debug )", "+        if( m_debug )", "-        if( optimize )", "+        if( m_optimize )"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28077be9c332110ff4f36aa3a4c0ab14", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/metamata/MMetrics.java", "commitBeforeChange": "1ea766b31d257946420ddd2a56581f7a21d3c2cd", "commitAfterChange": "5f6832bd82418c0d62e243e5d6ae5dcdb95b7446", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      protected Vector getOptions()", "signatureAfterChange": "      protected ArrayList getOptions()", "diff": ["-    protected Vector getOptions()", "+    protected ArrayList getOptions()", "-        Vector options = new Vector( 512 );", "+        ArrayList options = new ArrayList( 512 );", "-            options.addElement( \"-classpath\" );", "-            options.addElement( classPath );", "+            options.add( \"-classpath\" );", "+            options.add( classPath );", "-        options.addElement( \"-output\" );", "-        options.addElement( tmpFile.toString() );", "+        options.add( \"-output\" );", "+        options.add( tmpFile.toString() );", "-        options.addElement( \"-\" + granularity );", "+        options.add( \"-\" + granularity );", "-        // options.addElement( \"-quiet\");", "-        options.addElement( \"-format\" );", "+        // options.add( \"-quiet\");", "+        options.add( \"-format\" );", "-        options.addElement( \"tab\" );", "+        options.add( \"tab\" );", "-        options.addElement( \"-i\" );", "-        options.addElement( \"/\" );", "+        options.add( \"-i\" );", "+        options.add( \"/\" );", "-            options.addElement( dirs[ i ] );", "+            options.add( dirs[ i ] );", "-        addAllVector( options, includedFiles.keys() );", "+        addAllArrayList( options, includedFiles.keys() );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f216bd9efa96fc1133e9e7d0cff0309", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/compilers/Gcj.java", "commitBeforeChange": "96f9a81fa679d8e7ef4eb3725d383df9730d49dd", "commitAfterChange": "669a7eae15ea1cf4d43f78955eb15a1b757717f5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      protected Commandline setupGCJCommand()         throws TaskException", "signatureAfterChange": "      protected Commandline setupGCJCommand()         throws TaskException", "diff": ["-        Path classpath = new Path( project );", "+        Path classpath = new Path( m_project );", "-        if( bootclasspath != null )", "+        if( m_bootclasspath != null )", "-            classpath.append( bootclasspath );", "+            classpath.append( m_bootclasspath );", "-        classpath.addExtdirs( extdirs );", "+        classpath.addExtdirs( m_extdirs );", "-        if( ( bootclasspath == null ) || ( bootclasspath.size() == 0 ) )", "+        if( ( m_bootclasspath == null ) || ( m_bootclasspath.size() == 0 ) )", "-            includeJavaRuntime = true;", "+            m_includeJavaRuntime = true;", "-        if( destDir != null )", "+        if( m_destDir != null )", "-            cmd.createArgument().setFile( destDir );", "+            cmd.createArgument().setFile( m_destDir );", "-            if( destDir.mkdirs() )", "+            if( m_destDir.mkdirs() )", "-        if( encoding != null )", "+        if( m_encoding != null )", "-            cmd.createArgument().setValue( \"--encoding=\" + encoding );", "+            cmd.createArgument().setValue( \"--encoding=\" + m_encoding );", "-        if( debug )", "+        if( m_debug )", "-        if( optimize )", "+        if( m_optimize )"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2ad87bb32cf25b8454e35d1b144bc41", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/FixCRLF.java", "commitBeforeChange": "f73917168fc78f993f09f5f3eccbc4d663018c40", "commitAfterChange": "b8c50342cacdaa5bc7e3e4e72eb8351da5824716", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "       private void processFile( String file )         throws BuildException", "signatureAfterChange": "      private void processFile( String file )         throws TaskException", "diff": ["-", "-        throws BuildException", "+        throws TaskException", "-                     : new OutputStreamWriter( new FileOutputStream( tmpFile ), encoding );", "+                    : new OutputStreamWriter( new FileOutputStream( tmpFile ), encoding );", "-                throw new BuildException( \"Error\", e );", "+                throw new TaskException( \"Error\", e );", "-                    line = ( OneLiner.BufferLine )lines.nextElement();", "+                    line = (OneLiner.BufferLine)lines.nextElement();", "-                    throw new BuildException( \"Error\", e );", "+                    throw new TaskException( \"Error\", e );", "-                        throw new BuildException( \"Error\", e );", "+                        throw new TaskException( \"Error\", e );", "-                        switch ( lines.getState() )", "+                        switch( lines.getState() )", "-                        case NOTJAVA:", "-                            notInConstant( line, line.length(), outWriter );", "-                            break;", "-                        case IN_MULTI_COMMENT:", "-                            if( ( endComment =", "-                                lineString.indexOf( \"*/\", line.getNext() )", "-                                 ) >= 0 )", "-                            {", "-                                // End of multiLineComment on this line", "-                                endComment += 2;// Include the end token", "-                                lines.setState( LOOKING );", "-                            }", "-                            else", "-                            {", "-                                endComment = linelen;", "-                            }", "-", "-                            notInConstant( line, endComment, outWriter );", "-                            break;", "-                        case IN_SINGLE_COMMENT:", "-                            notInConstant( line, line.length(), outWriter );", "-                            lines.setState( LOOKING );", "-                            break;", "-                        case IN_CHAR_CONST:", "-                        case IN_STR_CONST:", "-                            // Got here from LOOKING by finding an opening \"\\'\"", "-                            // next points to that quote character.", "-                            // Find the end of the constant.  Watch out for", "-                            // backslashes.  Literal tabs are left unchanged, and", "-                            // the column is adjusted accordingly.", "-", "-                            int begin = line.getNext();", "-                            char terminator = ( lines.getState() == IN_STR_CONST", "-                                 ? '\\\"'", "-                                 : '\\'' );", "-                            endOfCharConst( line, terminator );", "-                            while( line.getNext() < line.getLookahead() )", "-                            {", "-                                if( line.getNextCharInc() == '\\t' )", "+                            case NOTJAVA:", "+                                notInConstant( line, line.length(), outWriter );", "+                                break;", "+                            case IN_MULTI_COMMENT:", "+                                if( ( endComment =", "+                                    lineString.indexOf( \"*/\", line.getNext() )", "+                                    ) >= 0 )", "-                                    line.setColumn(", "-                                        line.getColumn() +", "-                                        tablength -", "-                                        line.getColumn() % tablength );", "+                                    // End of multiLineComment on this line", "+                                    endComment += 2;// Include the end token", "+                                    lines.setState( LOOKING );", "-                                    line.incColumn();", "+                                    endComment = linelen;", "-                            }", "-                            // Now output the substring", "-                            try", "-                            {", "-                                outWriter.write( line.substring( begin, line.getNext() ) );", "-                            }", "-                            catch( IOException e )", "-                            {", "-                                throw new BuildException( \"Error\", e );", "-                            }", "+                                notInConstant( line, endComment, outWriter );", "+                                break;", "+                            case IN_SINGLE_COMMENT:", "+                                notInConstant( line, line.length(), outWriter );", "+                                lines.setState( LOOKING );", "+                                break;", "+                            case IN_CHAR_CONST:", "+                            case IN_STR_CONST:", "+                                // Got here from LOOKING by finding an opening \"\\'\"", "+                                // next points to that quote character.", "+                                // Find the end of the constant.  Watch out for", "+                                // backslashes.  Literal tabs are left unchanged, and", "+                                // the column is adjusted accordingly.", "-                            lines.setState( LOOKING );", "+                                int begin = line.getNext();", "+                                char terminator = ( lines.getState() == IN_STR_CONST", "+                                    ? '\\\"'", "+                                    : '\\'' );", "+                                endOfCharConst( line, terminator );", "+                                while( line.getNext() < line.getLookahead() )", "+                                {", "+                                    if( line.getNextCharInc() == '\\t' )", "+                                    {", "+                                        line.setColumn(", "+                                            line.getColumn() +", "+                                            tablength -", "+                                            line.getColumn() % tablength );", "+                                    }", "+                                    else", "+                                    {", "+                                        line.incColumn();", "+                                    }", "+                                }", "-                            break;", "+                                // Now output the substring", "+                                try", "+                                {", "+                                    outWriter.write( line.substring( begin, line.getNext() ) );", "+                                }", "+                                catch( IOException e )", "+                                {", "+                                    throw new TaskException( \"Error\", e );", "+                                }", "-                        case LOOKING:", "-                            nextStateChange( line );", "-                            notInConstant( line, line.getLookahead(), outWriter );", "-                            break;", "+                                lines.setState( LOOKING );", "+", "+                                break;", "+", "+                            case LOOKING:", "+                                nextStateChange( line );", "+                                notInConstant( line, line.getLookahead(), outWriter );", "+                                break;", "-                    throw new BuildException( \"Error\", e );", "+                    throw new TaskException( \"Error\", e );", "-                throw new BuildException( \"Error\", e );", "+                throw new TaskException( \"Error\", e );", "-                    throw new BuildException( \"Error\", e );", "+                    throw new TaskException( \"Error\", e );", "-                throw new BuildException( \"Unable to close source file \" + srcFile );", "+                throw new TaskException( \"Unable to close source file \" + srcFile );", "-                        throw new BuildException( \"Unable to delete \"", "-                             + destFile );", "+                        throw new TaskException( \"Unable to delete \"", "+                                                 + destFile );", "-                        throw new BuildException(", "+                        throw new TaskException(", "-                             + \" to \" + destFile", "-                             + \". Couldn't rename temporary file: \"", "-                             + tmpFile );", "+                            + \" to \" + destFile", "+                            + \". Couldn't rename temporary file: \"", "+                            + tmpFile );", "-                        \" is not written, as the contents are identical\",", "-                        Project.MSG_DEBUG );", "+                         \" is not written, as the contents are identical\",", "+                         Project.MSG_DEBUG );", "-                        throw new BuildException( \"Unable to delete \"", "-                             + tmpFile );", "+                        throw new TaskException( \"Unable to delete \"", "+                                                 + tmpFile );", "-                    throw new BuildException(", "+                    throw new TaskException(", "-                         + \" to \" + destFile", "-                         + \". Couldn't rename temporary file: \"", "-                         + tmpFile );", "+                        + \" to \" + destFile", "+                        + \". Couldn't rename temporary file: \"", "+                        + tmpFile );", "-            throw new BuildException( \"Error\", e );", "+            throw new TaskException( \"Error\", e );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b110b0aece2db0c49473150317b25c4c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/FixCRLF.java", "commitBeforeChange": "f73917168fc78f993f09f5f3eccbc4d663018c40", "commitAfterChange": "b8c50342cacdaa5bc7e3e4e72eb8351da5824716", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "       private void processFile( String file )         throws BuildException", "signatureAfterChange": "      private void processFile( String file )         throws TaskException", "diff": ["-", "-        throws BuildException", "+        throws TaskException", "-                     : new OutputStreamWriter( new FileOutputStream( tmpFile ), encoding );", "+                    : new OutputStreamWriter( new FileOutputStream( tmpFile ), encoding );", "-                throw new BuildException( \"Error\", e );", "+                throw new TaskException( \"Error\", e );", "-                    line = ( OneLiner.BufferLine )lines.nextElement();", "+                    line = (OneLiner.BufferLine)lines.nextElement();", "-                    throw new BuildException( \"Error\", e );", "+                    throw new TaskException( \"Error\", e );", "-                        throw new BuildException( \"Error\", e );", "+                        throw new TaskException( \"Error\", e );", "-                        switch ( lines.getState() )", "+                        switch( lines.getState() )", "-                        case NOTJAVA:", "-                            notInConstant( line, line.length(), outWriter );", "-                            break;", "-                        case IN_MULTI_COMMENT:", "-                            if( ( endComment =", "-                                lineString.indexOf( \"*/\", line.getNext() )", "-                                 ) >= 0 )", "-                            {", "-                                // End of multiLineComment on this line", "-                                endComment += 2;// Include the end token", "-                                lines.setState( LOOKING );", "-                            }", "-                            else", "-                            {", "-                                endComment = linelen;", "-                            }", "-", "-                            notInConstant( line, endComment, outWriter );", "-                            break;", "-                        case IN_SINGLE_COMMENT:", "-                            notInConstant( line, line.length(), outWriter );", "-                            lines.setState( LOOKING );", "-                            break;", "-                        case IN_CHAR_CONST:", "-                        case IN_STR_CONST:", "-                            // Got here from LOOKING by finding an opening \"\\'\"", "-                            // next points to that quote character.", "-                            // Find the end of the constant.  Watch out for", "-                            // backslashes.  Literal tabs are left unchanged, and", "-                            // the column is adjusted accordingly.", "-", "-                            int begin = line.getNext();", "-                            char terminator = ( lines.getState() == IN_STR_CONST", "-                                 ? '\\\"'", "-                                 : '\\'' );", "-                            endOfCharConst( line, terminator );", "-                            while( line.getNext() < line.getLookahead() )", "-                            {", "-                                if( line.getNextCharInc() == '\\t' )", "+                            case NOTJAVA:", "+                                notInConstant( line, line.length(), outWriter );", "+                                break;", "+                            case IN_MULTI_COMMENT:", "+                                if( ( endComment =", "+                                    lineString.indexOf( \"*/\", line.getNext() )", "+                                    ) >= 0 )", "-                                    line.setColumn(", "-                                        line.getColumn() +", "-                                        tablength -", "-                                        line.getColumn() % tablength );", "+                                    // End of multiLineComment on this line", "+                                    endComment += 2;// Include the end token", "+                                    lines.setState( LOOKING );", "-                                    line.incColumn();", "+                                    endComment = linelen;", "-                            }", "-                            // Now output the substring", "-                            try", "-                            {", "-                                outWriter.write( line.substring( begin, line.getNext() ) );", "-                            }", "-                            catch( IOException e )", "-                            {", "-                                throw new BuildException( \"Error\", e );", "-                            }", "+                                notInConstant( line, endComment, outWriter );", "+                                break;", "+                            case IN_SINGLE_COMMENT:", "+                                notInConstant( line, line.length(), outWriter );", "+                                lines.setState( LOOKING );", "+                                break;", "+                            case IN_CHAR_CONST:", "+                            case IN_STR_CONST:", "+                                // Got here from LOOKING by finding an opening \"\\'\"", "+                                // next points to that quote character.", "+                                // Find the end of the constant.  Watch out for", "+                                // backslashes.  Literal tabs are left unchanged, and", "+                                // the column is adjusted accordingly.", "-                            lines.setState( LOOKING );", "+                                int begin = line.getNext();", "+                                char terminator = ( lines.getState() == IN_STR_CONST", "+                                    ? '\\\"'", "+                                    : '\\'' );", "+                                endOfCharConst( line, terminator );", "+                                while( line.getNext() < line.getLookahead() )", "+                                {", "+                                    if( line.getNextCharInc() == '\\t' )", "+                                    {", "+                                        line.setColumn(", "+                                            line.getColumn() +", "+                                            tablength -", "+                                            line.getColumn() % tablength );", "+                                    }", "+                                    else", "+                                    {", "+                                        line.incColumn();", "+                                    }", "+                                }", "-                            break;", "+                                // Now output the substring", "+                                try", "+                                {", "+                                    outWriter.write( line.substring( begin, line.getNext() ) );", "+                                }", "+                                catch( IOException e )", "+                                {", "+                                    throw new TaskException( \"Error\", e );", "+                                }", "-                        case LOOKING:", "-                            nextStateChange( line );", "-                            notInConstant( line, line.getLookahead(), outWriter );", "-                            break;", "+                                lines.setState( LOOKING );", "+", "+                                break;", "+", "+                            case LOOKING:", "+                                nextStateChange( line );", "+                                notInConstant( line, line.getLookahead(), outWriter );", "+                                break;", "-                    throw new BuildException( \"Error\", e );", "+                    throw new TaskException( \"Error\", e );", "-                throw new BuildException( \"Error\", e );", "+                throw new TaskException( \"Error\", e );", "-                    throw new BuildException( \"Error\", e );", "+                    throw new TaskException( \"Error\", e );", "-                throw new BuildException( \"Unable to close source file \" + srcFile );", "+                throw new TaskException( \"Unable to close source file \" + srcFile );", "-                        throw new BuildException( \"Unable to delete \"", "-                             + destFile );", "+                        throw new TaskException( \"Unable to delete \"", "+                                                 + destFile );", "-                        throw new BuildException(", "+                        throw new TaskException(", "-                             + \" to \" + destFile", "-                             + \". Couldn't rename temporary file: \"", "-                             + tmpFile );", "+                            + \" to \" + destFile", "+                            + \". Couldn't rename temporary file: \"", "+                            + tmpFile );", "-                        \" is not written, as the contents are identical\",", "-                        Project.MSG_DEBUG );", "+                         \" is not written, as the contents are identical\",", "+                         Project.MSG_DEBUG );", "-                        throw new BuildException( \"Unable to delete \"", "-                             + tmpFile );", "+                        throw new TaskException( \"Unable to delete \"", "+                                                 + tmpFile );", "-                    throw new BuildException(", "+                    throw new TaskException(", "-                         + \" to \" + destFile", "-                         + \". Couldn't rename temporary file: \"", "-                         + tmpFile );", "+                        + \" to \" + destFile", "+                        + \". Couldn't rename temporary file: \"", "+                        + tmpFile );", "-            throw new BuildException( \"Error\", e );", "+            throw new TaskException( \"Error\", e );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdd68741dad98ec61587fd22cda64e59", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/metamata/MMetrics.java", "commitBeforeChange": "1ea766b31d257946420ddd2a56581f7a21d3c2cd", "commitAfterChange": "5f6832bd82418c0d62e243e5d6ae5dcdb95b7446", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      protected Vector getOptions()", "signatureAfterChange": "      protected ArrayList getOptions()", "diff": ["-    protected Vector getOptions()", "+    protected ArrayList getOptions()", "-        Vector options = new Vector( 512 );", "+        ArrayList options = new ArrayList( 512 );", "-            options.addElement( \"-classpath\" );", "-            options.addElement( classPath );", "+            options.add( \"-classpath\" );", "+            options.add( classPath );", "-        options.addElement( \"-output\" );", "-        options.addElement( tmpFile.toString() );", "+        options.add( \"-output\" );", "+        options.add( tmpFile.toString() );", "-        options.addElement( \"-\" + granularity );", "+        options.add( \"-\" + granularity );", "-        // options.addElement( \"-quiet\");", "-        options.addElement( \"-format\" );", "+        // options.add( \"-quiet\");", "+        options.add( \"-format\" );", "-        options.addElement( \"tab\" );", "+        options.add( \"tab\" );", "-        options.addElement( \"-i\" );", "-        options.addElement( \"/\" );", "+        options.add( \"-i\" );", "+        options.add( \"/\" );", "-            options.addElement( dirs[ i ] );", "+            options.add( dirs[ i ] );", "-        addAllVector( options, includedFiles.keys() );", "+        addAllArrayList( options, includedFiles.keys() );"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "30405d9c93473cd87d30e0897fb37f03", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "180c33e639d4429a3270d1f691c43301", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/script/ScriptDef.java", "commitBeforeChange": "a812b0a411cf480013ea88e0a272d82143be4702", "commitAfterChange": "e00d04fd4a3b08756835d0238168daa01cd701b0", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void executeScript(RuntimeConfigurable scriptConfig, List elements)", "signatureAfterChange": "     public void executeScript(Map attributes, Map elements)", "diff": ["-    public void executeScript(RuntimeConfigurable scriptConfig, List elements) {", "-        ", "-        Map configAttributes = scriptConfig.getAttributeMap();", "-        for (Iterator i = configAttributes.keySet().iterator(); i.hasNext();) {", "-            String attributeName = (String) i.next();", "-            if (!attributeSet.contains(attributeName)) {", "-                throw new BuildException(\"<\" + name + \"> does not support \" ", "-                    + \"the \\\"\" + attributeName + \"\\\" attribute\");", "-            }", "-        }", "-", "-        // handle nested elements", "-        Map elementInstances = new HashMap();", "-        for (Iterator i = elements.iterator(); i.hasNext();) {", "-            UnknownElement element = (UnknownElement) i.next();", "-            String elementTag = element.getTag().toLowerCase(Locale.US);", "-            ", "-            NestedElement definition ", "-                = (NestedElement) nestedElementMap.get(elementTag);", "-            if (definition == null) {                ", "-                throw new BuildException(\"<\" + name + \"> does not support \" ", "-                    + \"the <\" + elementTag + \"> nested element\");", "-            }", "-            ", "-            // what is the type of the object to be created", "-            Object instance = null;", "-            String classname = definition.className;", "-            if (classname == null) {", "-                instance = getProject().createTask(definition.type);", "-                if (instance == null) {", "-                    instance = getProject().createDataType(definition.type);", "-                }", "-            } else {", "-                // try the context classloader", "-                ClassLoader loader ", "-                    = Thread.currentThread().getContextClassLoader();", "-                ", "-                Class instanceClass = null;", "-                try {", "-                    instanceClass = Class.forName(classname, true, loader);", "-                } catch (Throwable e) {", "-                    // try normal method", "-                    try {", "-                        instanceClass = Class.forName(classname);", "-                    } catch (Throwable e2) {", "-                        throw new BuildException(\"scriptdef: Unable to load \" ", "-                            + \"class \" + classname + \" for nested element <\" ", "-                            + elementTag + \">\", e2);", "-                    }", "-                }", "-                ", "-                try {", "-                    instance = instanceClass.newInstance();", "-                } catch (Throwable e) {", "-                    throw new BuildException(\"scriptdef: Unable to create \" ", "-                        + \"element of class \" + classname + \" for nested \" ", "-                        + \"element <\" + elementTag + \">\", e);", "-                }", "-                getProject().setProjectReference(instance);", "-            }", "-            ", "-            if (instance == null) {", "-                throw new BuildException(\"<\" + name + \"> is unable to create \" ", "-                    + \"the <\" + elementTag + \"> nested element\");", "-            }", "-", "-            element.configure(instance);", "-            ", "-            // find the appropriate list", "-            List instanceList = (List) elementInstances.get(elementTag);", "-            if (instanceList == null) {", "-                instanceList = new ArrayList();", "-                elementInstances.put(elementTag, instanceList);", "-            }", "-            instanceList.add(instance);", "-        }", "-        ", "+    public void executeScript(Map attributes, Map elements) {", "-            manager.declareBean(\"attributes\", configAttributes, ", "-                configAttributes.getClass());", "-            manager.declareBean(\"elements\", elementInstances, ", "-                elementInstances.getClass());", "+            manager.declareBean(\"attributes\", attributes, ", "+                attributes.getClass());", "+            manager.declareBean(\"elements\", elements, ", "+                elements.getClass());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2efb73a7e86873d89c7ebf9606c0df4e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/GenericDeploymentTool.java", "commitBeforeChange": "7624036cc03ba31d2199cf340a8d3de09392efc0", "commitAfterChange": "a80cf0dfece4c5bd7a1dd24b05a8d30bf441abf5", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "      public void processDescriptor(String descriptorFileName, SAXParser saxParser)", "signatureAfterChange": "      public void processDescriptor(String descriptorFileName, SAXParser saxParser)", "diff": ["-        FileInputStream descriptorStream = null;", "-        try {", "-            DescriptorHandler handler = getDescriptorHandler(config.srcDir);", "-            ", "-            /* Parse the ejb deployment descriptor.  While it may not", "-             * look like much, we use a SAXParser and an inner class to", "-             * get hold of all the classfile names for the descriptor.", "-             */", "-            descriptorStream = new FileInputStream(new File(config.descriptorDir, descriptorFileName));", "-            saxParser.parse(new InputSource(descriptorStream), handler);", "-                            ", "-            Hashtable ejbFiles = handler.getFiles();", "+\t\tcheckConfiguration(descriptorFileName, saxParser);", "-            // add in support classes if any", "-            Project project = task.getProject();", "-            for (Iterator i = config.supportFileSets.iterator(); i.hasNext();) {", "-                FileSet supportFileSet = (FileSet)i.next();", "-                File supportBaseDir = supportFileSet.getDir(project);", "-                DirectoryScanner supportScanner = supportFileSet.getDirectoryScanner(project);", "-                supportScanner.scan();", "-                String[] supportFiles = supportScanner.getIncludedFiles();", "-                for (int j = 0; j < supportFiles.length; ++j) {", "-                    ejbFiles.put(supportFiles[j], new File(supportBaseDir, supportFiles[j]));", "-                }", "-            }            ", "+        try {", "+\t\t\t// Retrive the files to be added to JAR from EJB descriptor", "+\t\t\tHashtable ejbFiles = parseEjbFiles(descriptorFileName, saxParser);", "-            String baseName = \"\";", "-            ", "-            // Work out what the base name is", "-            if (config.baseJarName != null) {", "-                baseName = config.baseJarName;", "-            } else {", "-                int lastSeparatorIndex = descriptorFileName.lastIndexOf(File.separator);", "-                int endBaseName = -1;", "-                if (lastSeparatorIndex != -1) {", "-                    endBaseName = descriptorFileName.indexOf(config.baseNameTerminator, ", "-                                                             lastSeparatorIndex);", "-                }", "-                else {", "-                    endBaseName = descriptorFileName.indexOf(config.baseNameTerminator);", "-                }", "+\t\t\t// Add any support classes specified in the build file", "+\t\t\taddSupportClasses(ejbFiles);", "-                if (endBaseName != -1) {", "-                    baseName = descriptorFileName.substring(0, endBaseName);", "-                }", "-                baseName = descriptorFileName.substring(0, endBaseName);", "-            }", "+\t\t\t// Determine the JAR filename (without filename extension)", "+\t\t\tString baseName = getJarBaseName(descriptorFileName);", "-            // By default we assume we need to build.", "-            boolean needBuild = true;", "-", "-            if (jarFile.exists()) {", "-                long    lastBuild = jarFile.lastModified();", "-                Iterator fileIter = ejbFiles.values().iterator();", "-                // Set the need build to false until we find out otherwise.", "-                needBuild = false;", "-", "-                // Loop through the files seeing if any has been touched", "-                // more recently than the destination jar.", "-                while( (needBuild == false) && (fileIter.hasNext()) ) {", "-                    File currentFile = (File) fileIter.next();", "-                    needBuild = ( lastBuild < currentFile.lastModified() );", "-                    if (needBuild) {", "-                        log(\"Build needed because \" + currentFile.getPath() + \" is out of date\",", "-                            Project.MSG_VERBOSE);", "-                    }", "-                }", "-            }", "-            // Check to see if we need a build and start", "-            // doing the work!", "-            if (needBuild) {", "+            // Check to see if we need a build and start doing the work!", "+            if (needToRebuild(ejbFiles, jarFile)) {", "-                writeJar(baseName, jarFile, ejbFiles, handler.getPublicId());", "+\t\t\t\tString publicId = getPublicId();", "+                writeJar(baseName, jarFile, ejbFiles, publicId);", "-        finally {", "+    }", "-    }"]}]}
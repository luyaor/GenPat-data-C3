{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2cd2c2960d9fc80911f63f3ec138aa7a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09317e9345636f911e926733bd7dcc00", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ReplaceRegExp.java", "commitBeforeChange": "23b5b9d2ca3e35f969fa33bbcdfe55f583024c20", "commitAfterChange": "a26c94ea6a7ed1d62eccb2170a17e3cbb86c759c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     protected void doReplace(File f, int options)          throws IOException", "signatureAfterChange": "     protected void doReplace(File f, int options)          throws IOException", "diff": ["-                LineNumberReader lnr = new LineNumberReader(br);", "+                StringBuffer linebuf = new StringBuffer();", "+                String res = null;", "+                int c;", "+                boolean hasCR = false;", "-                while ((line = lnr.readLine()) != null) {", "-                    String res = doReplace(regex, subs, line, options);", "+                do {", "+                    c = br.read();", "-                    if (!res.equals(line)) {", "-                        changes = true;", "+                    if (c == '\\r') {", "+                        if (hasCR) {", "+                            // second CR -> EOL + possibly empty line", "+                            line = linebuf.toString();", "+                            res  = doReplace(regex, subs, line, options);", "+", "+                            if (!res.equals(line)) {", "+                                changes = true;", "+                            }", "+", "+                            pw.print(res);", "+                            pw.print('\\r');", "+", "+                            linebuf.setLength(0);", "+                            // hasCR is still true (for the second one)", "+                        } else {", "+                            // first CR in this line", "+                            hasCR = true;", "+                        }", "+                    else if (c == '\\n') {", "+                        // LF -> EOL", "+                        line = linebuf.toString();", "+                        res  = doReplace(regex, subs, line, options);", "-                    pw.println(res);", "-                }", "+                        if (!res.equals(line)) {", "+                            changes = true;", "+                        }", "+", "+                        pw.print(res);", "+                        if (hasCR) {", "+                            pw.print('\\r');", "+                            hasCR = false;", "+                        }", "+                        pw.print('\\n');", "+", "+                        linebuf.setLength(0);", "+                    } else { // any other char", "+                        if ((hasCR) || (c < 0)) {", "+                            // Mac-style linebreak or EOF (or both)", "+                            line = linebuf.toString();", "+                            res  = doReplace(regex, subs, line, options);", "+", "+                            if (!res.equals(line)) {", "+                                changes = true;", "+                            }", "+", "+                            pw.print(res);", "+                            if (hasCR) {", "+                                pw.print('\\r');", "+                                hasCR = false;", "+                            }", "+", "+                            linebuf.setLength(0);", "+                        }", "+", "+                        if (c >= 0) {", "+                            linebuf.append((char) c);", "+                        }", "+                    }", "+                } while (c >= 0);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "650f1b814f821ccc7403e266501384e4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/PathTokenizer.java", "commitBeforeChange": "769fac83235a4c2fac00097cd26f201aa7eae534", "commitAfterChange": "a91adaf451abf4857fd8ce133757dfc3b433bf3f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public String nextToken() throws NoSuchElementException", "signatureAfterChange": "     public String nextToken() throws NoSuchElementException", "diff": ["-        if (token.length() == 1 && Character.isLetter(token.charAt(0))", "-                                && dosStyleFilesystem", "-                                && tokenizer.hasMoreTokens()) {", "-            // we are on a dos style system so this path could be a drive", "-            // spec. We look at the next token", "-            String nextToken = tokenizer.nextToken().trim();", "-            if (nextToken.startsWith(\"\\\\\") || nextToken.startsWith(\"/\")) {", "-                // we know we are on a DOS style platform and the next path starts with a", "-                // slash or backslash, so we know this is a drive spec", "-                token += \":\" + nextToken;", "-            }", "-            else {", "-                // store the token just read for next time", "-                lookahead = nextToken;", "+        if (!onNetWare) {", "+            if (token.length() == 1 && Character.isLetter(token.charAt(0))", "+                                    && dosStyleFilesystem", "+                                    && tokenizer.hasMoreTokens()) {", "+                // we are on a dos style system so this path could be a drive", "+                // spec. We look at the next token", "+                String nextToken = tokenizer.nextToken().trim();", "+                if (nextToken.startsWith(\"\\\\\") || nextToken.startsWith(\"/\")) {", "+                    // we know we are on a DOS style platform and the next path", "+                    // starts with a slash or backslash, so we know this is a ", "+                    // drive spec", "+                    token += \":\" + nextToken;", "+                }", "+                else {", "+                    // store the token just read for next time", "+                    lookahead = nextToken;", "+                }", "-           ", "+        else {", "+            // we are on NetWare, tokenizing is handled a little differently,", "+            // due to the fact that NetWare has multiple-character volume names.", "+            if (token.equals(pathSeparatorStr)) {", "+                // ignore \";\" and get the next token", "+                token = tokenizer.nextToken().trim();", "+            }", "+            ", "+            if (tokenizer.hasMoreTokens()) {", "+                // this path could be a drive spec, so look at the next token", "+                String nextToken = tokenizer.nextToken().trim();", "+                ", "+                // make sure we aren't going to get the path separator next", "+                if (!nextToken.equals(pathSeparatorStr)) {", "+                    if (nextToken.equals(\":\")) {", "+                        if (!token.startsWith(\"/\") && !token.startsWith(\"\\\\\")){ ", "+                            // it indeed is a drive spec, get the next bit", "+                            String oneMore = tokenizer.nextToken().trim();", "+                            if (!oneMore.equals(pathSeparatorStr)) {", "+                                token += \":\" + oneMore;", "+                            }", "+                            else {", "+                                token += \":\";", "+                            }", "+                        }", "+                        // implicit else: ignore the ':' since we have either a", "+                        // UNIX or a relative path", "+                    }", "+                    else {", "+                        // store the token just read for next time", "+                        lookahead = nextToken;", "+                    }", "+                }", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c382d5e322b61793658a2f5b8ebcbd8f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/TailFilter.java", "commitBeforeChange": "51fa6c6e412765a4540fd0d597b4b1805d189376", "commitAfterChange": "e596d350ae9efa7d0aaf51d8f988be6ea3909078", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public final int read() throws IOException", "signatureAfterChange": "     public final int read() throws IOException", "diff": ["-        if (!completedReadAhead) {", "-            int ch = -1;", "-            while ((ch = in.read()) != -1) {", "-                if (buffer.length == bufferPos) {", "-                    if (returnedCharPos != -1) {", "-                        final char[] tmpBuffer = new char[buffer.length];", "-                        System.arraycopy(buffer, returnedCharPos + 1, tmpBuffer,", "-                                         0, buffer.length - (returnedCharPos + 1));", "-                        buffer = tmpBuffer;", "-                        bufferPos = bufferPos - (returnedCharPos + 1);", "-                        returnedCharPos = -1;", "-                    } else {", "-                        final char[] tmpBuffer = new char[buffer.length * 2];", "-                        System.arraycopy(buffer, 0, tmpBuffer, 0, bufferPos);", "-                        buffer = tmpBuffer;", "-                    }", "-                }", "-", "-                if (lines > 0) {", "-                    if (ch == '\\n' || ch == -1) {", "-                        ++linesRead;", "-", "-                        if ((linesRead == lines + skip)) {", "-                            int i = 0;", "-                            for (i = returnedCharPos + 1;", "-                                buffer[i] != 0 && buffer[i] != '\\n'; i++) {", "-                            }", "-                            returnedCharPos = i;", "-                            --linesRead;", "-                        }", "-                    }", "-                }", "-                if (ch == -1) {", "-                    break;", "-                }", "-", "-                buffer[bufferPos] = (char) ch;", "-                bufferPos++;", "-            }", "-            completedReadAhead = true;", "+        while (line == null || line.length() == 0) {", "+            line = lineTokenizer.getToken(in);", "+            line = tailFilter(line);", "+            if (line == null)", "+                return -1;", "+            linePos = 0;", "-        // Because the complete stream is read into the buffer I can delete", "-        // the \"skip lines\" from back to the beginning.", "-        if (skip > 0) {", "-            // searching...", "-            int i;", "-            for (i = buffer.length - 1; skip > 0; i--) {", "-                if (buffer[i]=='\\n') {", "-                    skip--;", "-                }", "-            }", "-", "-           // cut the buffer to the new length", "-           char[] newBuffer = new char[i];", "-           System.arraycopy(buffer, 0, newBuffer, 0, i);", "-           buffer = newBuffer;", "-", "-           // don\ufffdt forget to set the \"lastposition\" new", "-           bufferPos = i;", "-        }", "-", "-        ++returnedCharPos;", "-        if (returnedCharPos >= bufferPos) {", "-            return -1;", "-        } else {", "-            return buffer[returnedCharPos];", "-        }", "+        int ch = line.charAt(linePos);", "+        linePos++;", "+        if (linePos == line.length())", "+            line = null;", "+        return ch;"]}]}
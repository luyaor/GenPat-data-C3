{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "481b32969f5d9603c7a112602884fc69", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc8b244e7264d0708585c1f57e5a5292", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteOn.java", "commitBeforeChange": "e160d8323df859e424047fd929fa01a3da0340a3", "commitAfterChange": "58d6ff11a8f8a336ebcce95385e4f8893e65db83", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 20, "signatureBeforeChange": "      protected void runExec(Execute exe) throws BuildException", "signatureAfterChange": "      protected void runExec(Execute exe) throws BuildException", "diff": ["-                DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "+", "+                ExtendedDirectoryScanner ds = new ExtendedDirectoryScanner();", "+                fs.setupDirectoryScanner(ds, getProject());", "+                ds.setFollowSymlinks(fs.isFollowSymlinks());", "+                ds.scan();", "-                    log(\"Skipping fileset for directory \"", "-                        + base + \". It is empty.\", Project.MSG_INFO);", "+                    int includedCount", "+                        = ((!\"dir\".equals(currentType))", "+                        ? ds.getIncludedFilesCount() : 0)", "+                        + ((!\"file\".equals(currentType))", "+                        ? ds.getIncludedDirsCount() : 0);", "+", "+                    log(\"Skipping fileset for directory \" + base + \". It is \"", "+                        + ((includedCount > 0) ? \"up to date.\" : \"empty.\"),", "+                        Project.MSG_INFO);", "-                    log(\"Skipping filelist for directory \"", "-                        + base + \". It is empty.\", Project.MSG_INFO);", "+                    ExtendedDirectoryScanner ds = new ExtendedDirectoryScanner();", "+                    ds.setBasedir(base);", "+                    ds.setIncludes(list.getFiles(getProject()));", "+                    ds.scan();", "+                    int includedCount", "+                        = ds.getIncludedFilesCount() + ds.getIncludedDirsCount();", "+", "+                    log(\"Skipping filelist for directory \" + base + \". It is \"", "+                        + ((includedCount > 0) ? \"up to date.\" : \"empty.\"),", "+                        Project.MSG_INFO);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb0e60e854b930563495f609f2c27729", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Sync.java", "commitBeforeChange": "13b07b313fdc7ab2620f71517ab16698be496f24", "commitAfterChange": "a799f17a4e2ff063e0d4c05d6a1be064e84d68c8", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private int[] removeOrphanFiles(Set nonOrphans, File toDir)", "signatureAfterChange": "     private int[] removeOrphanFiles(Set nonOrphans, File toDir)", "diff": ["-            syncTarget.setTargetDir(toDir);", "-            ds = syncTarget.getDirectoryScanner(getProject());", "+            FileSet fs = new FileSet();", "+            fs.setDir(toDir);", "+            fs.setCaseSensitive(syncTarget.isCaseSensitive());", "+            fs.setFollowSymlinks(syncTarget.isFollowSymlinks());", "+", "+            // preserveInTarget would find all files we want to keep,", "+            // but we need to find all that we want to delete - so the", "+            // meaning of all patterns and selectors must be inverted", "+            PatternSet ps = syncTarget.mergePatterns(getProject());", "+            String[] excludes = ps.getExcludePatterns(getProject());", "+            fs.appendExcludes(ps.getIncludePatterns(getProject()));", "+            fs.appendIncludes(ps.getExcludePatterns(getProject()));", "+            fs.setDefaultexcludes(!syncTarget.getDefaultexcludes());", "+", "+            // selectors are implicitly ANDed in DirectoryScanner.  To", "+            // revert their logic we wrap them into a <none> selector", "+            // instead.", "+            FileSelector[] s = syncTarget.getSelectors(getProject());", "+            if (s.length > 0) {", "+                NoneSelector ns = new NoneSelector();", "+                for (int i = 0; i < s.length; i++) {", "+                    ns.appendSelector(s[i]);", "+                }", "+                fs.appendSelector(ns);", "+            }", "+            ", "+            ds = fs.getDirectoryScanner(getProject());", "-        // ds returns the directories as it has visited them.", "+        // ds returns the directories in lexicographic order."]}]}
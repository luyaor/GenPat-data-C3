{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a73b6c17a2c6adbb77bdf4caa496499d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09a1c8bfae323ac9731f91c2904cc3b1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antlibs/script/org/apache/ant/antlib/script/ScriptBase.java", "commitBeforeChange": "b0702935362003552b8c456725f3b68b597ab443", "commitAfterChange": "f16a5cd623bf73ae80a737e38e025d9354e20ef2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void execute() throws ExecutionException", "signatureAfterChange": "     public void execute() throws ExecutionException", "diff": ["-", "+            manager.declareBean(\"self\", this, getClass());", "+            manager.declareBean(\"context\", getContext, AntContext.class);", "+            ", "+            ", "+            ", "+            Iterator i = nestedElementNames.iterator();", "+            Iterator j = nestedElements.iterator();", "+            while (i.hasNext()) {", "+                String nestedName = (String)i.next();", "+                Object nestedElement = j.next();", "+                StringBuffer adder = new StringBuffer(nestedName);", "+                adder.setCharAt(0, Character.toUpperCase(adder.charAt(0)));", "+                engine.call(null, \"add\" + adder, new Object[]{nestedElement});", "+            }", "+            "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b9537386598f148eca6a21ae0da868a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/AbstractFileSet.java", "commitBeforeChange": "3af30bdfcadad52de3f739223d6937d3f5b0a9bd", "commitAfterChange": "469dcdf7a4a239027eb73268dcb5a540d32b78d4", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "     public Object clone()", "signatureAfterChange": "     public Object clone()", "diff": ["-        try {", "-            AbstractFileSet fs = (AbstractFileSet) super.clone();", "-            fs.setProject(getProject());", "-            return fs;", "-        } catch (CloneNotSupportedException e) {", "-            throw new BuildException(e);", "+        if (isReference()) {", "+            return (getRef(getProject())).clone();", "+        } else {", "+            try {", "+                AbstractFileSet fs = (AbstractFileSet) super.clone();", "+                fs.defaultPatterns = (PatternSet) defaultPatterns.clone();", "+                fs.additionalPatterns = new Vector(additionalPatterns.size());", "+                Enumeration e = additionalPatterns.elements();", "+                while (e.hasMoreElements()) {", "+                    fs.additionalPatterns", "+                        .addElement(((PatternSet) e.nextElement()).clone());", "+                }", "+                fs.selectors = (Vector) fs.selectors.clone();", "+                return fs;", "+            } catch (CloneNotSupportedException e) {", "+                throw new BuildException(e);", "+            }"]}]}
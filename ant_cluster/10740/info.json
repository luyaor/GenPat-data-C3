{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ab82a19bb3c93cc7186661f903588158", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93277f5589a3fb3cf72114e88be0c928", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCLock.java", "commitBeforeChange": "f9a5ef3610dbe3c461e46acf15678475a3b814b1", "commitAfterChange": "5f41947fea063436dbeb9b190662016f939e9554", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        System.out.println(commandLine.toString());", "+        // System.out.println(commandLine.toString());", "+        if (!getFailOnErr()) {", "+            getProject().log(\"Ignoring any errors that occur for: \"", "+                    + getOpType(), Project.MSG_VERBOSE);", "+        }", "-        if (Execute.isFailure(result)) {", "+        if (Execute.isFailure(result) && getFailOnErr()) {", "-            throw new BuildException(msg, location);", "+            throw new BuildException(msg, getLocation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dda3774f6d9c62b034adf54c8fb2a312", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCUnlock.java", "commitBeforeChange": "f9a5ef3610dbe3c461e46acf15678475a3b814b1", "commitAfterChange": "5f41947fea063436dbeb9b190662016f939e9554", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        System.out.println(commandLine.toString());", "+        // System.out.println(commandLine.toString());", "+        if (!getFailOnErr()) {", "+            getProject().log(\"Ignoring any errors that occur for: \"", "+                    + getOpType(), Project.MSG_VERBOSE);", "+        }", "-        if (Execute.isFailure(result)) {", "+        if (Execute.isFailure(result) && getFailOnErr()) {", "-            throw new BuildException(msg, location);", "+            throw new BuildException(msg, getLocation());"]}]}
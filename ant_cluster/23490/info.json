{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d97fb854782c3d4df173668346eb804a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c64458faaaef8e8af99ab6ec8d51227", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "80962473e91835af31b494928c227d62aba6a9ef", "commitAfterChange": "2058109551cc0acb90301456c4c6627dba65836d", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private AttributeSetter createAttributeSetter(final Method m,                                                   final Class arg)", "signatureAfterChange": "     private AttributeSetter createAttributeSetter(final Method m,                                                   final Class arg)", "diff": ["+        // ValidatedFileAttributes have their own helper class", "+        } else if (ValidatedFileAttribute.class.isAssignableFrom(arg)) {", "+            return new AttributeSetter() {", "+                    public void set(Project p, Object parent, String value)", "+                        throws InvocationTargetException, IllegalAccessException, BuildException {", "+                        try {", "+                            ValidatedFileAttribute[] vfa = {", "+                                (ValidatedFileAttribute) arg.newInstance()", "+                            };", "+                            File f = p.resolveFile(value);", "+                            vfa[0].setFile(f);", "+                            m.invoke(parent, vfa);", "+                        } catch (InstantiationException ie) {", "+                            throw new BuildException(ie);", "+                        }", "+                    }", "+                };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f66339c1451bd870243ec10570b5b115", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "0c2d03d031ecacd79ea8d77cd88b8428e84a3c7c", "commitAfterChange": "44ecc125fa2df70025e742ba113dd793c0e27580", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "      private static void transferFormatters(JUnitTestRunner runner,                                            JUnitTest test)", "signatureAfterChange": "      private static void transferFormatters(JUnitTestRunner runner,                                            JUnitTest test)", "diff": ["+        runner.addFormatter(new JUnitResultFormatter() {", "+", "+            public void startTestSuite(JUnitTest suite) throws BuildException {", "+            }", "+", "+            public void endTestSuite(JUnitTest suite) throws BuildException {", "+            }", "+", "+            public void setOutput(OutputStream out) {", "+            }", "+", "+            public void setSystemOutput(String out) {", "+            }", "+", "+            public void setSystemError(String err) {", "+            }", "+", "+            public void addError(Test arg0, Throwable arg1) {", "+            }", "+", "+            public void addFailure(Test arg0, AssertionFailedError arg1) {", "+            }", "+", "+            public void endTest(Test arg0) {", "+            }", "+", "+            public void startTest(Test arg0) {", "+                System.out.println(this.getClass().getName() + \":\" + arg0);", "+                registerTestCase(JUnitVersionHelper.getTestCaseName(arg0));", "+            }", "+        });"]}]}
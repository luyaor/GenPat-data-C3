{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7c3b57e40690586b7d85b1f2a1cf2871", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18793eaf48a2ba52c71501bd2eed0208", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "78ba5f07530c5aaf81dfd8f7643180af7359effd", "commitAfterChange": "0a679803f04b2e3e9d63c5f6b46677b0cf713d6b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public boolean doGet(int logLevel, DownloadProgress progress)             throws IOException", "signatureAfterChange": "     public boolean doGet(int logLevel, DownloadProgress progress)             throws IOException", "diff": ["-        //set up the URL connection", "-        URLConnection connection = source.openConnection();", "-        //modify the headers", "-        //NB: things like user authentication could go in here too.", "-        if (hasTimestamp) {", "-            connection.setIfModifiedSince(timestamp);", "-        }", "-        // prepare Java 1.1 style credentials", "-        if (uname != null || pword != null) {", "-            String up = uname + \":\" + pword;", "-            String encoding;", "-            //we do not use the sun impl for portability,", "-            //and always use our own implementation for consistent", "-            //testing", "-            Base64Converter encoder = new Base64Converter();", "-            encoding = encoder.encode(up.getBytes());", "-            connection.setRequestProperty (\"Authorization\",", "-                    \"Basic \" + encoding);", "-        }", "-", "-        //connect to the remote site (may take some time)", "-        connection.connect();", "-        //next test for a 304 result (HTTP only)", "-        if (connection instanceof HttpURLConnection) {", "-            HttpURLConnection httpConnection", "-                    = (HttpURLConnection) connection;", "-            long lastModified = httpConnection.getLastModified();", "-            if (httpConnection.getResponseCode()", "-                    == HttpURLConnection.HTTP_NOT_MODIFIED", "-                || (lastModified != 0 && hasTimestamp", "-                && timestamp >= lastModified)) {", "-                //not modified so no file download. just return", "-                //instead and trace out something so the user", "-                //doesn't think that the download happened when it", "-                //didn't", "-                log(\"Not modified - so not downloaded\", logLevel);", "-                return false;", "-            }", "-            // test for 401 result (HTTP only)", "-            if (httpConnection.getResponseCode()", "-                    == HttpURLConnection.HTTP_UNAUTHORIZED)  {", "-                String message = \"HTTP Authorization failure\";", "-                if (ignoreErrors) {", "-                    log(message, logLevel);", "-                    return false;", "-                } else {", "-                    throw new BuildException(message);", "-                }", "-            }", "-", "-        }", "-", "-        //REVISIT: at this point even non HTTP connections may", "-        //support the if-modified-since behaviour -we just check", "-        //the date of the content and skip the write if it is not", "-        //newer. Some protocols (FTP) don't include dates, of", "-        //course.", "-", "-        InputStream is = null;", "-        for (int i = 0; i < NUMBER_RETRIES; i++) {", "-            //this three attempt trick is to get round quirks in different", "-            //Java implementations. Some of them take a few goes to bind", "-            //property; we ignore the first couple of such failures.", "-            try {", "-                is = connection.getInputStream();", "-                break;", "-            } catch (IOException ex) {", "-                log(\"Error opening connection \" + ex, logLevel);", "-            }", "-        }", "-        if (is == null) {", "-            log(\"Can't get \" + source + \" to \" + dest, logLevel);", "-            if (ignoreErrors) {", "-                return false;", "-            }", "-            throw new BuildException(\"Can't get \" + source + \" to \" + dest,", "-                    getLocation());", "-        }", "-", "-        FileOutputStream fos = new FileOutputStream(dest);", "-        progress.beginDownload();", "-        boolean finished = false;", "+        GetThread getThread = new GetThread(hasTimestamp, timestamp, progress,", "+                                            logLevel);", "+        getThread.setDaemon(true);", "+        getProject().registerThreadTask(getThread, this);", "+        getThread.start();", "-            byte[] buffer = new byte[BIG_BUFFER_SIZE];", "-            int length;", "-            while ((length = is.read(buffer)) >= 0) {", "-                fos.write(buffer, 0, length);", "-                progress.onTick();", "-            }", "-            finished = true;", "-        } finally {", "-            FileUtils.close(fos);", "-            FileUtils.close(is);", "-", "-            // we have started to (over)write dest, but failed.", "-            // Try to delete the garbage we'd otherwise leave", "-            // behind.", "-            if (!finished) {", "-                dest.delete();", "-            }", "-        }", "-        progress.endDownload();", "-", "-        //if (and only if) the use file time option is set, then", "-        //the saved file now has its timestamp set to that of the", "-        //downloaded file", "-        if (useTimestamp)  {", "-            long remoteTimestamp = connection.getLastModified();", "-            if (verbose)  {", "-                Date t = new Date(remoteTimestamp);", "-                log(\"last modified = \" + t.toString()", "-                        + ((remoteTimestamp == 0)", "-                        ? \" - using current time instead\"", "-                        : \"\"), logLevel);", "-            }", "-            if (remoteTimestamp != 0) {", "-                FILE_UTILS.setFileLastModified(dest, remoteTimestamp);", "-            }", "+            getThread.join(maxTime * 1000);", "+        } catch (InterruptedException ie) {", "+            log(\"interrupted waiting for GET to finish\",", "+                Project.MSG_VERBOSE);", "-        //successful download", "-        return true;", "+        if (getThread.isAlive()) {", "+            String msg = \"The GET operation took longer than \" + maxTime", "+                + \" seconds, stopping it.\";", "+            if (ignoreErrors) {", "+                log(msg);", "+            }", "+            getThread.closeStreams();", "+            if (!ignoreErrors) {", "+                throw new BuildException(msg);", "+            }", "+            return false;", "+        }", "+", "+        return getThread.wasSuccessful();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ffd318f56cb9434e63295dd84ab1ba6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "a9c576b74204f899d6541ad0366a2e4535e2b30a", "commitAfterChange": "d4071f9eb63cf6114580ec13036f8f0bf39c6e32", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "          private boolean get() throws IOException, BuildException", "signatureAfterChange": "          private boolean get() throws IOException, BuildException", "diff": ["-            //set up the URL connection", "-            URLConnection connection = source.openConnection();", "-            //modify the headers", "-            //NB: things like user authentication could go in here too.", "+            ", "+            connection = openConnection(source);", "+", "+            if (connection == null)", "+            {", "+                return false;", "+            }", "+", "+            boolean downloadSucceeded = downloadFile();", "+", "+            //if (and only if) the use file time option is set, then", "+            //the saved file now has its timestamp set to that of the", "+            //downloaded file", "+            if (downloadSucceeded && useTimestamp)  {", "+                updateTimeStamp();", "+            }", "+            ", "+            return downloadSucceeded;", "+        }", "-                //we do not use the sun impl for portability,", "-                //and always use our own implementation for consistent", "-                //testing", "-                connection.setRequestProperty (\"Authorization\",", "-                                               \"Basic \" + encoding);", "-            //connect to the remote site (may take some time)", "-            connection.connect();", "-            //next test for a 304 result (HTTP only)", "-                HttpURLConnection httpConnection", "-                    = (HttpURLConnection) connection;", "-                if (httpConnection.getResponseCode()", "-                    == HttpURLConnection.HTTP_NOT_MODIFIED", "-                    || (lastModified != 0 && hasTimestamp", "-                        && timestamp >= lastModified)) {", "-                    //not modified so no file download. just return", "-                    //instead and trace out something so the user", "-                    //doesn't think that the download happened when it", "-                    //didn't", "-                    return false;", "-                if (httpConnection.getResponseCode()", "-                    == HttpURLConnection.HTTP_UNAUTHORIZED)  {", "-                        return false;", "-", "-                //this three attempt trick is to get round quirks in different", "-                //Java implementations. Some of them take a few goes to bind", "-                //property; we ignore the first couple of such failures.", "-                throw new BuildException(\"Can't get \" + source + \" to \"", "-                                         + dest, getLocation());", "-", "-            //if (and only if) the use file time option is set, then", "-            //the saved file now has its timestamp set to that of the", "-            //downloaded file", "-            if (useTimestamp)  {", "-                long remoteTimestamp = connection.getLastModified();", "-                if (verbose)  {", "-                    Date t = new Date(remoteTimestamp);", "-                    log(\"last modified = \" + t.toString()", "-                        + ((remoteTimestamp == 0)", "-                           ? \" - using current time instead\"", "-                           : \"\"), logLevel);", "-                }", "-                if (remoteTimestamp != 0) {", "-                    FILE_UTILS.setFileLastModified(dest, remoteTimestamp);", "-                }", "-            }"]}]}
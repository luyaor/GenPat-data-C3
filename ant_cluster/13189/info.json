{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "13a05b40977b138dbd1a27ecb0206e36", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a346abc7b2274c04ccc82b76ca62f77", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "196c36bc28dec63b239595132e8b00c55951c860", "commitAfterChange": "689fca41585cc1768a0501fd11c8235b6e4bc481", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 55, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["+", "+", "+        if(maxmemory != null){", "+            if(javadoc1){", "+                argList.addElement(\"-J-mx\" + maxmemory);", "+            }", "+            else{", "+                argList.addElement(\"-J-Xmx\" + maxmemory);", "+            }", "+        }", "+            ", "+            // add the single link arguments", "+            ", "+            // add the links arguments", "+            if (links.size() != 0) {", "+                for (Enumeration e = links.elements(); e.hasMoreElements(); ) {", "+                    LinkArgument la = (LinkArgument)e.nextElement();", "+                ", "+                    if (la.getHref() == null) {", "+                        throw new BuildException(\"Links must provide the RUL to the external class documentation.\");", "+                    }", "+                ", "+                    if (la.isLinkOffline()) {", "+                        String packageListLocation = la.getPackagelistLoc();", "+                        if (packageListLocation == null) {", "+                            throw new BuildException(\"The package list location for link \" + la.getHref() +", "+                                                     \" must be provided because the link is offline\");", "+                        }", "+                        argList.addElement(\"-linkoffline\");", "+                        argList.addElement(la.getHref());", "+                        argList.addElement(packageListLocation);", "+                    }", "+                    else {", "+                        argList.addElement(\"-link\");", "+                        argList.addElement(la.getHref());", "+                    }", "+                }", "+            }                                   ", "+                                                ", "+            // add the single linkoffline arguments", "-", "+            ", "+            // add the single group arguments", "+            ", "+            // add the group arguments", "+            if (groups.size() != 0) {", "+                String title = null;", "+                String packages = null;", "+                GroupArgument ga = null;", "+                for (int i = 0; i < groups.size(); i++) {", "+                    ga = (GroupArgument)groups.get(i);", "+                    if (ga != null) {", "+                        title = ga.getTitle();", "+                        packages = ga.getPackages();", "+                    }", "+                    if (title != null) {", "+                        argList.addElement(\"-group\");", "+                        argList.addElement(title);", "+                        if (packages != null) {", "+                            argList.addElement(packages);", "+                        }", "+                    }", "+                }", "+            }", "+            }", "+            if (additionalParam != null) {", "+                argList.addElement(additionalParam);", "+         if (packageList != null) {", "+            argList.addElement(\"@\" + packageList);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c57656fbc49a6e7d42579287d248af00", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "536a84c211f50992fedce887f3120414eec39068", "commitAfterChange": "d0cb590844449882c124f78aa671ef8750c75ea9", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 76, "signatureBeforeChange": "     protected int transferFiles(FTPClient ftp, FileSet fs)          throws IOException, BuildException", "signatureAfterChange": "     protected int transferFiles(final FTPClient ftp, FileSet fs)          throws IOException, BuildException", "diff": ["-    protected int transferFiles(FTPClient ftp, FileSet fs)", "+    protected int transferFiles(final FTPClient ftp, FileSet fs)", "+            RetryHandler h = new RetryHandler(this.retriesAllowed, this);", "-                    rmDir(ftp, dsfiles[i]);", "+                    final String dsfile = dsfiles[i];", "+                    executeRetryable(h, new Retryable() {", "+                        public void execute() throws IOException {", "+                            rmDir(ftp, dsfile);", "+                        }", "+                    }, dsfile);", "+                final BufferedWriter fbw = bw;", "+                final String fdir = dir;", "-                    switch (action) {", "-                        case SEND_FILES:", "-                            sendFile(ftp, dir, dsfiles[i]);", "-                            break;", "-                        case GET_FILES:", "-                            getFile(ftp, dir, dsfiles[i]);", "-                            break;", "-                        case DEL_FILES:", "-                            delFile(ftp, dsfiles[i]);", "-                            break;", "-                        case LIST_FILES:", "-                            listFile(ftp, bw, dsfiles[i]);", "-                            break;", "-                        case CHMOD:", "-                            doSiteCommand(ftp, \"chmod \" + chmod + \" \" + resolveFile(dsfiles[i]));", "-                            transferred++;", "-                            break;", "-                        default:", "-                            throw new BuildException(\"unknown ftp action \" + action);", "-                    }", "+                    final String dsfile = dsfiles[i];", "+                    executeRetryable(h, new Retryable() {", "+                        public void execute() throws IOException {", "+                            switch (action) {", "+                                case SEND_FILES:", "+                                    sendFile(ftp, fdir, dsfile);", "+                                    break;", "+                                case GET_FILES:", "+                                    getFile(ftp, fdir, dsfile);", "+                                    break;", "+                                case DEL_FILES:", "+                                    delFile(ftp, dsfile);", "+                                    break;", "+                                case LIST_FILES:", "+                                    listFile(ftp, fbw, dsfile);", "+                                    break;", "+                                case CHMOD:", "+                                    doSiteCommand(ftp, \"chmod \" + chmod + \" \" + resolveFile(dsfile));", "+                                    transferred++;", "+                                    break;", "+                                default:", "+                                    throw new BuildException(\"unknown ftp action \" + action);", "+                            }", "+                        }", "+                    }, dsfile);"]}]}
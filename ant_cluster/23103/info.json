{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b7beec7d17f2ede07497710827d1fcff", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15015bf08bf1630845621e841eea84a8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/EjbJar.java", "commitBeforeChange": "018aa8685b246a8bb269832fcbc935874eff0c1e", "commitAfterChange": "e545bf4a3695a90cc6d3645fb20d5dbacc7ec988", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void setGenerateweblogic(String inValue)", "signatureAfterChange": "     public Path createClasspath()", "diff": ["+     */", "+    public Path createClasspath() {", "+        if (classpath == null) {", "+            classpath = new Path(project);", "+        }", "+        return classpath.createPath();", "+    }", "-     */", "-    public void setGenerateweblogic(String inValue) {", "-        log(\"The syntax for using ejbjar with Weblogic has changed.\", Project.MSG_ERR);", "-        log(\"Please refer to the ejbjar documentation\" +", "-            \" for information on the using the <weblogic> nested element\", Project.MSG_ERR);", "-        throw new BuildException(\"generateweblogic not supported - use nested <weblogic> element\");", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94bd6e4e5bfeb9ed2423783ef3b17436", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Jar.java", "commitBeforeChange": "1fa5ccf5682707c6b5e33482b641009e48190013", "commitAfterChange": "bec2a0777e910345fa7877d5aaa209ddde0937e3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      protected void initZipOutputStream(ZipOutputStream zOut)         throws IOException, BuildException", "signatureAfterChange": "      protected void initZipOutputStream(ZipOutputStream zOut)         throws IOException, BuildException", "diff": ["-            // If no manifest is specified, add the default one.", "-            if (manifest == null) {", "-                execManifest = null;", "-            }", "-            else {", "-                execManifest = new Manifest();", "+            execManifest = getDefaultManifest();", "+", "+            if (manifest != null) {", "+            for (Enumeration e = execManifest.getWarnings(); e.hasMoreElements(); ) {", "+                log(\"Manifest warning: \" + (String)e.nextElement(), Project.MSG_WARN);", "+            }", "+        ", "+            // time to write the manifest", "+            ByteArrayOutputStream baos = new ByteArrayOutputStream();", "+            PrintWriter writer = new PrintWriter(baos);", "+            execManifest.write(writer);", "+            writer.flush();", "+        ", "+            ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());", "+            super.zipFile(bais, zOut, \"META-INF/MANIFEST.MF\", System.currentTimeMillis());", "-                log(\"Manifest is invalid: \" + e.getMessage(), Project.MSG_ERR);", "-                throw new BuildException(\"Invalid Manifest\", e, getLocation());", "+            log(\"Manifest is invalid: \" + e.getMessage(), Project.MSG_ERR);", "+            throw new BuildException(\"Invalid Manifest\", e, getLocation());"]}]}
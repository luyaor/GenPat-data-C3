{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a7f6dbc920b2217478325fc09788d4f6", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07bf42d451d61fb6dac7d938f52dfe7e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/JonasDeploymentTool.java", "commitBeforeChange": "270394a09fddda0ea9ffa2330956c5f399ab840f", "commitAfterChange": "6bd8d6e938a45868902ecd1092858e8372933c7c", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 19, "signatureBeforeChange": "     protected String getJarBaseName(String aDescriptorFileName)", "signatureAfterChange": "      protected String getJarBaseName(String descriptorFileName)", "diff": ["-    // Determine the JAR filename (without filename extension)", "-    protected String getJarBaseName(String aDescriptorFileName) {", "-        String aBaseName = null;", "-        EjbJar.Config aConfig = super.getConfig();", "-        if (aConfig.namingScheme.getValue().equals(EjbJar.NamingScheme.DESCRIPTOR)) {", "+", "+    protected String getJarBaseName(String descriptorFileName) {", "+", "+        String baseName = null;", "+", "+        if ( getConfig().namingScheme.getValue().equals(EjbJar.NamingScheme.DESCRIPTOR) ) {", "+", "-            // ??/MyEJB.xml ( I will find later the ??/jonas-MyEJB.xml file )", "-            if (aDescriptorFileName.indexOf(aConfig.baseNameTerminator) == -1) {", "-                String aCanonicalDescriptor = aDescriptorFileName.replace('\\\\', '/');", "+            if ( descriptorFileName.indexOf(getConfig().baseNameTerminator) == -1 ) {", "+", "+\t\t// baseNameTerminator not found: the descriptor use the", "+\t\t// JOnAS naming convention, ie [Foo.xml,jonas-Foo.xml] and", "+\t\t// not [Foo<baseNameTerminator>-ejb-jar.xml,", "+\t\t// Foo<baseNameTerminator>-jonas-ejb-jar.xml].", "+\t\t", "+                String aCanonicalDescriptor = descriptorFileName.replace('\\\\', '/');", "-                int endBaseName;", "+                int endOfBaseName;", "-                if (lastSeparatorIndex != -1) {", "-                    endBaseName = aDescriptorFileName.indexOf(\".xml\", lastSeparatorIndex);", "+                if ( lastSeparatorIndex != -1 ) {", "+                    endOfBaseName = descriptorFileName.indexOf(\".xml\", lastSeparatorIndex);", "-                    endBaseName = aDescriptorFileName.indexOf(\".xml\");", "+                    endOfBaseName = descriptorFileName.indexOf(\".xml\");", "-                if (endBaseName != -1) {", "-                    aBaseName = aDescriptorFileName.substring(0, endBaseName);", "+                if ( endOfBaseName != -1 ) {", "+                    baseName = descriptorFileName.substring(0, endOfBaseName);", "-        if (aBaseName == null) {", "-            // else get standard BaseName", "-            aBaseName = super.getJarBaseName(aDescriptorFileName);", "+        if ( baseName == null ) {", "+            // else get standard baseName", "+            baseName = super.getJarBaseName(descriptorFileName);", "-        return aBaseName;", "+\t", "+        log(\"JAR base name: \" + baseName, Project.MSG_VERBOSE);\t", "+", "+        return baseName;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c78c48a21c3b4c48f000bbd1ab44e68", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/GenericDeploymentTool.java", "commitBeforeChange": "a7988a63f686fa0249f1ccac7d66f461d182f455", "commitAfterChange": "17fbe62a7d3180404fa527bcc568678870edb7e2", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 13, "signatureBeforeChange": "          public void processDescriptor(File srcDir, File descriptorDir,                                   String descriptorFilename, SAXParser saxParser)", "signatureAfterChange": "          public void processDescriptor(String descriptorFileName, SAXParser saxParser)", "diff": ["-    public void processDescriptor(File srcDir, File descriptorDir,", "-                                  String descriptorFilename, SAXParser saxParser) {", "+    public void processDescriptor(String descriptorFileName, SAXParser saxParser) {", "-                             (new File(descriptorDir, descriptorFilename))),", "+                            (new File(getDescriptorDir(), descriptorFileName))),", "-            int lastSeparatorIndex = descriptorFilename.lastIndexOf(File.separator);", "-            int endBaseName = -1;", "-            if (lastSeparatorIndex != -1) {", "-                endBaseName = descriptorFilename.indexOf(basenameTerminator, ", "-                                                         lastSeparatorIndex);", "-            }", "-            else {", "-                endBaseName = descriptorFilename.indexOf(basenameTerminator);", "-            }", "-            ", "-            if (endBaseName != -1) {", "-                baseName = descriptorFilename.substring(0, endBaseName);", "+            if (baseJarName != null) {", "+                baseName = baseJarName;", "+            } else {", "+                int lastSeparatorIndex = descriptorFileName.lastIndexOf(File.separator);", "+                int endBaseName = -1;", "+                if (lastSeparatorIndex != -1) {", "+                    endBaseName = descriptorFileName.indexOf(baseNameTerminator, ", "+                                                             lastSeparatorIndex);", "+                }", "+                else {", "+                    endBaseName = descriptorFileName.indexOf(baseNameTerminator);", "+                }", "+", "+                if (endBaseName != -1) {", "+                    baseName = descriptorFileName.substring(0, endBaseName);", "+                }", "+                baseName = descriptorFileName.substring(0, endBaseName);", "-                         new File(descriptorDir, descriptorFilename));", "+                         new File(getDescriptorDir(), descriptorFileName));", "-            addVendorFiles(ejbFiles, srcDir, descriptorDir, baseName);", "+            addVendorFiles(ejbFiles, baseName);", "-                + descriptorFilename.toString()", "+                + descriptorFileName.toString()", "-                + descriptorFilename.toString()", "+                + descriptorFileName.toString()"]}]}
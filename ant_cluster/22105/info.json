{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "32da4a34b588ef9fb052e6d2843da64e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2effac61c39584941e713991b6c3b4ae", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/Scp.java", "commitBeforeChange": "d796e53fea54cad6b5c2dfb6f892d704504b09f4", "commitAfterChange": "13bc6453fe4c31a2f053a6ebb28638a20136227f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "      private void download(String fromSshUri, String toPath)         throws JSchException, IOException", "signatureAfterChange": "      private void download(String fromSshUri, String toPath)         throws JSchException, IOException", "diff": ["-                                       fromSshUri.endsWith(\"*\"));", "+                                       fromSshUri.endsWith(\"*\"),", "+                                       preserveLastModified);", "-                                             fromSshUri.endsWith(\"*\"));", "+                                             fromSshUri.endsWith(\"*\"),", "+                                             preserveLastModified);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3d4ee4cb3a369a0fa026b9854b6e65d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "e04ff4d52c085936aae51afe2bc9a4db7ab18dde", "commitAfterChange": "8ebe808f72152ef41370bcfd89c7cd0c369db2f0", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 61, "signatureBeforeChange": "     public static AntClassLoader newAntClassLoader(ClassLoader parent,                                                    Project project,                                                    Path path,                                                    boolean parentFirst)", "signatureAfterChange": "     public static AntClassLoader newAntClassLoader(ClassLoader parent,                                                    Project project,                                                    Path path,                                                    boolean parentFirst)", "diff": ["+        if (subClassToLoad != null) {", "+            return (AntClassLoader)", "+                ReflectUtil.newInstance(subClassToLoad,", "+                                        CONSTRUCTOR_ARGS,", "+                                        new Object[] {", "+                                            parent, project, path,", "+                                            Boolean.valueOf(parentFirst)", "+                                        });", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "973a2bde71b90a32a54f5a4bfd14c65e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41f277b2103439d6fed4266b05e7b7e6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "380870c2b26a9f3289569dc2451178df3f05613e", "commitAfterChange": "ad9edf5f5ea4a8f2a974726eeb8e656c177357df", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 28, "signatureBeforeChange": "      private void randomiseBlock()", "signatureAfterChange": "      private void randomiseBlock()", "diff": ["-        final boolean[] inUse = this.data.inUse;", "-        final byte[] block    = this.data.block;", "-        final int lastShadow        = this.last;", "-", "-        for (int i = 256; --i >= 0;)", "-            inUse[i] = false;", "-", "+        int i;", "-        for (int i = 0, j = 1; i <= lastShadow; i = j, j++) {", "+        for (i = 0; i < 256; i++) {", "+            inUse[i] = false;", "+        }", "+", "+        for (i = 0; i <= last; i++) {", "-                rNToGo = (char) BZip2Constants.rNums[rTPos];", "-                if (++rTPos == 512) {", "+                rNToGo = (char) rNums[rTPos];", "+                rTPos++;", "+                if (rTPos == 512) {", "-", "-            block[j] ^= ((rNToGo == 1) ? 1 : 0);", "-", "+            block[i + 1] ^= ((rNToGo == 1) ? 1 : 0);", "-            inUse[block[j] & 0xff] = true;", "+            block[i + 1] &= 0xFF;", "+", "+            inUse[block[i + 1]] = true;", "+        }", "+    }", "-        this.blockRandomised = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d451ecdc7d19fe5894f6afd62330a22b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "380870c2b26a9f3289569dc2451178df3f05613e", "commitAfterChange": "ad9edf5f5ea4a8f2a974726eeb8e656c177357df", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 29, "signatureBeforeChange": "      private void blockSort()", "signatureAfterChange": "      private void doReversibleTransformation()", "diff": ["-", "-    private void blockSort() {", "-        this.workLimit = WORK_FACTOR * this.last;", "-        this.workDone = 0;", "-        this.blockRandomised = false;", "-        this.firstAttempt = true;", "-        mainSort();", "-", "-        if (this.firstAttempt && (this.workDone > this.workLimit)) {", "-            randomiseBlock();", "-            this.workLimit = this.workDone = 0;", "-            this.firstAttempt = false;", "-            mainSort();", "-        }", "-", "-        int[] fmap = this.data.fmap;", "-        this.origPtr = -1;", "-        for (int i = 0, lastShadow = this.last; i <= lastShadow; i++) {", "-            if (fmap[i] == 0) {", "-                this.origPtr = i;", "-                break;", "-            }", "-        }", "-", "-        // assert (this.origPtr != -1) : this.origPtr;", "-    }", "+", "+    private void doReversibleTransformation() {", "+        int i;", "+", "+        workLimit = workFactor * last;", "+        workDone = 0;", "+        blockRandomised = false;", "+        firstAttempt = true;", "+", "+        mainSort();", "+", "+        if (workDone > workLimit && firstAttempt) {", "+            randomiseBlock();", "+            workLimit = workDone = 0;", "+            blockRandomised = true;", "+            firstAttempt = false;", "+            mainSort();", "+        origPtr = -1;", "+        for (i = 0; i <= last; i++) {", "+            if (zptr[i] == 0) {", "+                origPtr = i;", "+                break;", "+            }", "+        };", "+", "+        if (origPtr == -1) {", "+            panic();", "+        }", "+    }"]}]}
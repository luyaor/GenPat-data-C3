{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec6fc6d1c0562874c9b0cf13a61638e9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bff1701feb88b1854263d8076aeebc27", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/GenericDeploymentTool.java", "commitBeforeChange": "8a21be498479cb838b88fc0f77547e82ed1c5334", "commitAfterChange": "f71b0b02959caf4a48c67b06f818b74cfaca7541", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      protected DescriptorHandler getDescriptorHandler(File srcDir)", "signatureAfterChange": "      protected DescriptorHandler getDescriptorHandler(File srcDir)", "diff": ["-    protected DescriptorHandler getDescriptorHandler(File srcDir) {", "-        return new DescriptorHandler(task, srcDir);", "-    }", "+    protected DescriptorHandler getDescriptorHandler(File srcDir) { ", "+        DescriptorHandler handler = new DescriptorHandler(getTask(), srcDir); ", "+        ", "+        registerKnownDTDs(handler);", "+        ", "+        // register any DTDs supplied by the user", "+        for (Iterator i = getConfig().dtdLocations.iterator(); i.hasNext();) { ", "+            EjbJar.DTDLocation dtdLocation = (EjbJar.DTDLocation)i.next(); ", "+            handler.registerDTD(dtdLocation.getPublicId(), dtdLocation.getLocation()); ", "+        } ", "+        return handler; ", "+    } "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8492a4b88fa14c95b52c33f4f8d485f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/cli/org/apache/ant/cli/Commandline.java", "commitBeforeChange": "7e6ed5c57f2d59a4ef3089d3f66863441a296e54", "commitAfterChange": "984e12200a21e70c9ec9086f8c69e86aaa0d7de9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void process(String[] args, InitConfig initConfig)", "signatureAfterChange": "     private void process(String[] args, InitConfig initConfig)", "diff": ["-        this.config = initConfig;", "+        this.initConfig = initConfig;", "+            AntConfig config = new AntConfig();", "-            AntConfig config = systemConfig;", "-            if (config == null) {", "-                config = userConfig;", "-            } else if (userConfig != null) {", "+            if (systemConfig != null) {", "+                config.merge(systemConfig);", "+            }", "+            if (userConfig != null) {", "+            }", "+", "+            for (Iterator i = configFiles.iterator(); i.hasNext(); ) {", "+                File configFile = (File)i.next();", "+                AntConfig runConfig = getAntConfigFile(configFile);", "+                config.merge(runConfig);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d13e1c4c36c49f4b4df383b1840e5930", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "448e3057ec91f407a6ea8319a40716cd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "d25488cbbb28cf25e1f91f714c70999fd105432d", "commitAfterChange": "3d706ab8188a674936880b6f4530b0cf3991758b", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": "     private boolean causesIllegalSymlinkLoop(String dirName, File parent,                                              LinkedList directoryNamesFollowed)", "signatureAfterChange": "     private boolean causesIllegalSymlinkLoop(String dirName, File parent,                                              LinkedList<String> directoryNamesFollowed)", "diff": ["-                                             LinkedList directoryNamesFollowed) {", "+                                             LinkedList<String> directoryNamesFollowed) {", "-                ArrayList files = new ArrayList();", "+                ArrayList<String> files = new ArrayList<String>();", "-                for (Iterator i = directoryNamesFollowed.iterator();", "-                     i.hasNext(); ) {", "+                for (String dir : directoryNamesFollowed) {", "-                    String dir = (String) i.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f0dc8addcef47e3db6d0b6fc3ac153b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/VectorSet.java", "commitBeforeChange": "d25488cbbb28cf25e1f91f714c70999fd105432d", "commitAfterChange": "3d706ab8188a674936880b6f4530b0cf3991758b", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "      public synchronized boolean retainAll(Collection c)", "signatureAfterChange": "      public synchronized boolean retainAll(Collection<?> c)", "diff": ["-    public synchronized boolean retainAll(Collection c) {", "+    public synchronized boolean retainAll(Collection<?> c) {", "-            c = new HashSet(c);", "+            c = new HashSet<Object>(c);", "-        LinkedList l = new LinkedList();", "-        for (Iterator i = iterator(); i.hasNext(); ) {", "-            Object o = i.next();", "+        LinkedList<E> l = new LinkedList<E>();", "+        for (E o : this) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80c78e1e03ceb6396c468c7dc1ba41f1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/MappedResourceCollection.java", "commitBeforeChange": "bd7585adb01844d04d23a6b1707427f9f4a490ad", "commitAfterChange": "ea33301047ba2de74fa062155df4d6337e5d1392", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      private Collection getCollection()", "signatureAfterChange": "      private Collection<Resource> getCollection()", "diff": ["-    private Collection getCollection() {", "-        Collection collected = new ArrayList();", "+    private Collection<Resource> getCollection() {", "+        Collection<Resource> collected = new ArrayList<Resource>();", "-        for (Iterator iter = nested.iterator(); iter.hasNext(); ) {", "-            Resource r = (Resource) iter.next();", "+        for (Resource r : nested) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b39a241bb26d558284347291cd6fd6e8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/facade/FacadeTaskHelper.java", "commitBeforeChange": "241a7d6d0ce4f4235f1684cd0f1d6081c43076b2", "commitAfterChange": "4c0b73f72630fa7b07bc92dcf4855327265911f1", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public String[] getArgs()", "signatureAfterChange": "     public String[] getArgs()", "diff": ["-        List tmp = new ArrayList(args.size());", "-        for (Iterator e = args.iterator(); e.hasNext();) {", "-            ImplementationSpecificArgument arg =", "-                ((ImplementationSpecificArgument) e.next());", "+        List<String> tmp = new ArrayList<String>(args.size());", "+        for (ImplementationSpecificArgument arg : args) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca6c1d4cdd22db6b0351e7829f56cbba", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/Files.java", "commitBeforeChange": "7829faf36a6f4bc565e0e8b92aa85cc948718176", "commitAfterChange": "9caeed5081071d6a2de28844d0a724918f8c6d86", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "     public synchronized Object clone()", "signatureAfterChange": "     public synchronized Object clone()", "diff": ["-        f.additionalPatterns = new Vector(additionalPatterns.size());", "-        for (Iterator iter = additionalPatterns.iterator(); iter.hasNext();) {", "-            PatternSet ps = (PatternSet) iter.next();", "-            f.additionalPatterns.add(ps.clone());", "+        f.additionalPatterns = new Vector<PatternSet>(additionalPatterns.size());", "+        for (PatternSet ps : additionalPatterns) {", "+            f.additionalPatterns.add((PatternSet) ps.clone());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf92eb560bc7422ca596e133f9a8ef0c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/property/ResolvePropertyMap.java", "commitBeforeChange": "bb05312e66a2403d2405988dbaf0830cde65df7c", "commitAfterChange": "da5f3bfd256e383926c6ece58dba15a7d4bd5761", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void resolveAllProperties(Map map, String prefix,                                      boolean prefixValues)", "signatureAfterChange": "     public void resolveAllProperties(Map<String, Object> map, String prefix,                                      boolean prefixValues)", "diff": ["-    public void resolveAllProperties(Map map, String prefix,", "+    public void resolveAllProperties(Map<String, Object> map, String prefix,", "-        for (Iterator i = map.keySet().iterator(); i.hasNext();) {", "+        for (String key : map.keySet()) {", "-            String key = (String) i.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3a004c4f454ba3435e4e3cbc2f49864", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/launch/Launcher.java", "commitBeforeChange": "bb05312e66a2403d2405988dbaf0830cde65df7c", "commitAfterChange": "da5f3bfd256e383926c6ece58dba15a7d4bd5761", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private URL[] getLibPathURLs(String cpString, List libPaths)         throws MalformedURLException", "signatureAfterChange": "     private URL[] getLibPathURLs(String cpString, List<String> libPaths)         throws MalformedURLException", "diff": ["-    private URL[] getLibPathURLs(String cpString, List libPaths)", "+    private URL[] getLibPathURLs(String cpString, List<String> libPaths)", "-        List libPathURLs = new ArrayList();", "+        List<URL> libPathURLs = new ArrayList<URL>();", "-        for (Iterator i = libPaths.iterator(); i.hasNext();) {", "-            String libPath = (String) i.next();", "+        for (String libPath : libPaths) {", "-        return  (URL[]) libPathURLs.toArray(new URL[libPathURLs.size()]);", "+        return libPathURLs.toArray(new URL[libPathURLs.size()]);"]}]}
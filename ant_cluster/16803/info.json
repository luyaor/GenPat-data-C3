{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c76e58fa01e1e650ff3e0ac93884964", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8f025a66e6ac8127b7534858b52c95c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "d25488cbbb28cf25e1f91f714c70999fd105432d", "commitAfterChange": "3d706ab8188a674936880b6f4530b0cf3991758b", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "      private AttributeSetter getEnumSetter(         final Class reflectedArg, final Method m, Class arg)", "signatureAfterChange": "      private AttributeSetter getEnumSetter(         final Class<?> reflectedArg, final Method m, Class<?> arg)", "diff": ["-        final Class reflectedArg, final Method m, Class arg) {", "-        Class enumClass = null;", "-        try {", "-            enumClass = Class.forName(\"java.lang.Enum\");", "-        } catch (ClassNotFoundException e) {", "-            //ignore", "-        }", "-        if (enumClass != null && enumClass.isAssignableFrom(reflectedArg)) {", "+        final Class<?> reflectedArg, final Method m, Class<?> arg) {", "+        if (reflectedArg.isEnum()) {", "+                    Enum<?> setValue;", "-                        m.invoke(", "-                            parent, new Object[] {", "-                                reflectedArg.getMethod(", "-                                    \"valueOf\", new Class[] {String.class}).", "-                                invoke(null, new Object[] {value})});", "-                    } catch (InvocationTargetException x) {", "+                        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })", "+                        Enum<?> enumValue = Enum.valueOf((Class<? extends Enum>) reflectedArg,", "+                                value);", "+                        setValue = enumValue;", "+                    } catch (IllegalArgumentException e) {", "-                        if (x.getTargetException() instanceof IllegalArgumentException) {", "-                            throw new BuildException(", "-                                \"'\" + value + \"' is not a permitted value for \"", "+                        throw new BuildException(\"'\" + value + \"' is not a permitted value for \"", "-                        }", "-                        //only if the exception is not an IllegalArgument do we", "-                        // request the", "-                        //BuildException via extractBuildException():", "-                        throw extractBuildException(x);", "-                    } catch (Exception x) {", "-                        //any other failure of invoke() to work.", "-                        throw new BuildException(x);", "+                    m.invoke(parent, setValue);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d730bc0798605ca8938463a14bc360aa", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "04340a9cb3fc58edcb167ec7fc3a7c8da2a8bb8c", "commitAfterChange": "eefee2f267c1f2fe0c2a1f2aa1c0af625ca3daed", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "     private AttributeSetter createAttributeSetter(final Method m,                                                   Class arg,                                                   final String attrName)", "signatureAfterChange": "     private AttributeSetter createAttributeSetter(final Method m,                                                   Class arg,                                                   final String attrName)", "diff": ["-        Class enumClass = null;", "-        try {", "-            enumClass = Class.forName(\"java.lang.Enum\");", "-        } catch (ClassNotFoundException e) {", "-            //ignore", "+", "+        AttributeSetter setter = getEnumSetter(reflectedArg, m, arg);", "+        if (setter != null) {", "+            return setter;", "-        if (enumClass != null && enumClass.isAssignableFrom(reflectedArg)) {", "-            return new AttributeSetter(m, arg) {", "-                public void set(Project p, Object parent, String value)", "-                        throws InvocationTargetException, IllegalAccessException, BuildException {", "-                    try {", "-                        m.invoke(parent, new Object[] {", "-                            reflectedArg.getMethod(\"valueOf\", new Class[] {String.class}).", "-                                    invoke(null, new Object[] {value})});", "-                    } catch (InvocationTargetException x) {", "-                        //there is specific logic here for the value being out of the allowed", "-                        //set of enumerations.", "-                        if (x.getTargetException() instanceof IllegalArgumentException) {", "-                            throw new BuildException(\"'\" + value + \"' is not a permitted value for \"", "-                                    + reflectedArg.getName());", "-                        }", "-                        //only if the exception is not an IllegalArgument do we request the", "-                        //BuildException via extractBuildException():", "-                        throw extractBuildException(x);", "-                    } catch (Exception x) {", "-                        //any other failure of invoke() to work.", "-                        throw new BuildException(x);", "-                    }", "-                }", "-            };", "-        }", "+"]}]}
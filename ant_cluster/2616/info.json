{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "537a2e6e1af4463cc66adccaa5451b79", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bb92ad592450de986e6e72e30036a8d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipEntry.java", "commitBeforeChange": "1c5c68f3ed2854776e2377bf5486caadc8ecc5b8", "commitAfterChange": "f665a4d33564ecc12851996978a9847024643829", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 33, "signatureBeforeChange": "     private void mergeExtraFields(ZipExtraField[] f, boolean local)         throws ZipException", "signatureAfterChange": "     private void mergeExtraFields(ZipExtraField[] f, boolean local)         throws ZipException", "diff": ["-                ZipExtraField existing = getExtraField(f[i].getHeaderId());", "+                ZipExtraField existing;", "+                if (f[i] instanceof UnparseableExtraFieldData) {", "+                    existing = unparseableExtra;", "+                } else {", "+                    existing = getExtraField(f[i].getHeaderId());", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e1e7ec0020105c0e75ed453685b8cb3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/RuntimeConfigurable.java", "commitBeforeChange": "589af888eb8b6ea9c139272fac2bd69382e10ea0", "commitAfterChange": "7d1ecbc1bb5db282ffbf95b6589eb49900ad163d", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public synchronized void maybeConfigure(Project p, boolean configureChildren)         throws BuildException", "signatureAfterChange": "     public synchronized void maybeConfigure(Project p, boolean configureChildren)         throws BuildException", "diff": ["-                // reflect these into the target", "-                Object attrValue = PropertyHelper.getPropertyHelper(p).parseProperties(value);", "+                // reflect these into the target, defer for", "+                // MacroInstance where properties are expanded for the", "+                // nested sequential", "+                Object attrValue = null;", "+                if (target instanceof MacroInstance) {", "+                    attrValue = value;", "+                } else {", "+                    attrValue = PropertyHelper.getPropertyHelper(p).parseProperties(value);", "+                }"]}]}
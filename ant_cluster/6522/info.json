{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "234e8c3d39a09c684d05db832b6d44e4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "306bc8202a9ec7e3ce3a4df9893cc87f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Rmic.java", "commitBeforeChange": "cf4c2f018749355bf2c390e438cc18bc7e234efa", "commitAfterChange": "8162d141e44b778d135f9251277e85c922f0544c", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private void addExistingToClasspath(StringBuffer target,String source)", "signatureAfterChange": "     private void addExistingToClasspath(Path target, Path source)", "diff": ["-    private void addExistingToClasspath(StringBuffer target,String source) {", "-       StringTokenizer tok = new StringTokenizer(source,", "-                             System.getProperty(\"path.separator\"), false);", "-       while (tok.hasMoreTokens()) {", "-           File f = project.resolveFile(tok.nextToken());", "+    private void addExistingToClasspath(Path target, Path source) {", "+        String[] list = source.list();", "+        for (int i=0; i<list.length; i++) {", "+            File f = project.resolveFile(list[i]);", "-           if (f.exists()) {", "-               target.append(File.pathSeparator);", "-               target.append(f.getAbsolutePath());", "+            if (f.exists()) {", "+                target.setLocation(f.getAbsolutePath());", "-       }", "-", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90ffe3550c550322a72fe994da29cff6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "cf4c2f018749355bf2c390e438cc18bc7e234efa", "commitAfterChange": "8162d141e44b778d135f9251277e85c922f0544c", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 73, "signatureBeforeChange": "     private void evaluatePackages(String sourcePath, Vector packages, Vector argList)", "signatureAfterChange": "     private void evaluatePackages(Path sourcePath, Vector packages, Vector argList)", "diff": ["-    private void evaluatePackages(String sourcePath, Vector packages, Vector argList) {", "+    private void evaluatePackages(Path sourcePath, Vector packages, Vector argList) {", "-        log(\"Source path = \" + sourcePath, Project.MSG_VERBOSE);", "+        log(\"Source path = \" + sourcePath.toString(), Project.MSG_VERBOSE);", "-        PathTokenizer tokenizer = new PathTokenizer(sourcePath);", "-        while (tokenizer.hasMoreTokens()) {", "-            File source = new File(project.translatePath(tokenizer.nextToken()));", "+        String[] list = sourcePath.list();", "+        for (int j=0; j<list.length; j++) {", "+            File source = project.resolveFile(list[j]);"]}]}
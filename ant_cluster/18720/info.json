{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "07c17e492e84bee8b31a5fafa08c833f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a1092be7ed04722dab21002ff393f33", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ExecutionFrame.java", "commitBeforeChange": "e0fef5cf64773a98734998b9736ded96fc8be2c7", "commitAfterChange": "81c17b6164451315e24ae774f1bed668cbca99ce", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 34, "signatureBeforeChange": "     private Object configureType(String typeName, BuildElement model)          throws ExecutionException", "signatureAfterChange": "     private Object configureType(String typeName, BuildElement model)          throws ExecutionException", "diff": ["-        ImportInfo typeDefInfo = (ImportInfo)definitions.get(typeName);", "+        ImportInfo typeDefInfo = componentManager.getDefinition(typeName);", "-            AntLibFactory libFactory = getLibFactory(antLibrary);", "+            AntLibFactory libFactory", "+                 = componentManager.getLibFactory(antLibrary);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a601630961cd449df4c6e89ad52fa7f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ExecutionFrame.java", "commitBeforeChange": "e0fef5cf64773a98734998b9736ded96fc8be2c7", "commitAfterChange": "81c17b6164451315e24ae774f1bed668cbca99ce", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 33, "signatureBeforeChange": "     private TaskContext configureTask(BuildElement model)          throws ExecutionException", "signatureAfterChange": "     private TaskContext configureTask(BuildElement model)          throws ExecutionException", "diff": ["-        ImportInfo taskDefInfo = (ImportInfo)definitions.get(taskType);", "+        ImportInfo taskDefInfo = componentManager.getDefinition(taskType);", "-            AntLibFactory libFactory = getLibFactory(antLibrary);", "+            AntLibFactory libFactory", "+                 = componentManager.getLibFactory(antLibrary);", "-            TaskContext taskContext = new TaskContext(this, eventSupport);", "+            TaskContext taskContext = new TaskContext(this);", "+            task.validateComponent();", "-            e.setLocation(model.getLocation());", "+            e.setLocation(model.getLocation(), false);"]}]}
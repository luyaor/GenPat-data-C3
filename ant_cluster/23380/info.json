{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "774688ecbccb8f54afc26e85861869be", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79d75283a3c4674f056631c67ff42bb1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/IContract.java", "commitBeforeChange": "72053e82f182e41019dfda7b72b4b81676e48660", "commitAfterChange": "60ed8507e7718d1e5b0d5f36d18571ff07c8c017", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 18, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+", "+            // turn off assertions if we're using controlfile, unless they are not explicitly set.", "+            boolean useControlFile = (controlFile != null) && controlFile.exists();", "+            if( useControlFile && !preModified ) {", "+                pre = false;", "+            }", "+            if( useControlFile && !postModified ) {", "+                post = false;", "+            }", "+            if( useControlFile && !invariantModified ) {", "+                invariant = false;", "+            }", "+            // issue warning if pre,post or invariant is used together with controlfile", "+            if( ( pre || post || invariant ) && controlFile != null ) {", "+                log( \"WARNING: specifying pre,post or invariant will override control file settings\" );", "+            }", "+", "+", "+", "+            mkdir.setDir( buildDir );", "+            mkdir.execute();", "-            // Set the compiler", "-            setCompiler();", "-", "+", "+            // Might need to add the core classes if we're not using Sun's Javac (like Jikes)", "+            String compiler = project.getProperty(\"build.compiler\");", "+            ClasspathHelper classpathHelper = new ClasspathHelper( compiler );", "+            classpathHelper.modify( baseClasspath );", "+            afterInstrumentationClasspath.append( new Path( getProject(), buildDir.getAbsolutePath() ) );", "+            repositoryClasspath.append( new Path( getProject(), buildDir.getAbsolutePath() ) );", "+            iContractClasspath.append( new Path( getProject(), buildDir.getAbsolutePath() ) );", "-            args.append( \"-b\" ).append( icCompiler ).append( \"\\\"\" ).append( \" -classpath \" ).append( beforeInstrumentationClasspath ).append( \"\\\" \" );", "-            args.append( \"-c\" ).append( icCompiler ).append( \"\\\"\" ).append( \" -classpath \" ).append( afterInstrumentationClasspath ).append( \"\\\" \" );", "-            args.append( \"-n\" ).append( icCompiler ).append( \"\\\"\" ).append( \" -classpath \" ).append( repositoryClasspath ).append( \"\\\" \" );", "+            args.append( \"-b\" ).append( \"\\\"\" ).append( icCompiler ).append( \" -classpath \" ).append( beforeInstrumentationClasspath ).append( \"\\\" \" );", "+            args.append( \"-c\" ).append( \"\\\"\" ).append( icCompiler ).append( \" -classpath \" ).append( afterInstrumentationClasspath ).append( \" -d \" ).append( buildDir ).append( \"\\\" \" );", "+            args.append( \"-n\" ).append( \"\\\"\" ).append( icCompiler ).append( \" -classpath \" ).append( repositoryClasspath ).append( \"\\\" \" );", "-            args.append( instrumentall ? \"-a \" : \"\" ); // reinstrument everything if controlFile exists and is newer than source", "+            args.append( quiet ? \"-q \" : \"\" );", "+            args.append( instrumentall ? \"-a \" : \"\" ); // reinstrument everything if controlFile exists and is newer than any class", "-// System.out.println( \"JAVA -classpath \" + iContractClasspath + \" com.reliablesystems.iContract.Tool \" + args.toString() );", "+//System.out.println( \"JAVA -classpath \" + iContractClasspath + \" com.reliablesystems.iContract.Tool \" + args.toString() );", "-                iControlProps.setProperty( \"classRoot\", srcDir.getAbsolutePath() );", "-                iControlProps.setProperty( \"classpath\", iContractClasspath.toString() );", "-                iControlProps.setProperty( \"controlFile\", \"control\" );", "+                iControlProps.setProperty( \"sourceRoot\", srcDir.getAbsolutePath() );", "+                iControlProps.setProperty( \"classRoot\", classDir.getAbsolutePath() );", "+                iControlProps.setProperty( \"classpath\", afterInstrumentationClasspath.toString() );", "+                iControlProps.setProperty( \"controlFile\", controlFile.getAbsolutePath() );", "+                iControlProps.setProperty( \"targetsFile\", targets.getAbsolutePath() );", "-                    iControlProps.store( new FileOutputStream( \"icontrol.properties\" ), \"Edit the classRoot and controlfile properties if you like\" );", "-                    log( \"Updated file icontrol.properties.\" );", "+                    iControlProps.store( new FileOutputStream( \"icontrol.properties\" ), ICONTROL_PROPERTIES_HEADER );", "+                    log( \"Updated icontrol.properties\" );", "+            // do it!", "-        } else {", "+", "+        } else { // not dirty"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d010e45be8f7159b73ef99967c0d5538", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Definer.java", "commitBeforeChange": "26f6bfe2be0861267eca5624537b48daa7574dd6", "commitAfterChange": "8701272b2418d74536d09b289f118d1833d42217", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 34, "signatureBeforeChange": "     private void addDefinition(ClassLoader al, String name, String value)         throws BuildException", "signatureAfterChange": "      protected void addDefinition(ClassLoader al, String name, String classname)         throws BuildException", "diff": ["-     */", "-    private void addDefinition(ClassLoader al, String name, String value)", "-        throws BuildException {", "-        try {", "-            Class c = al.loadClass(value);", "-            AntClassLoader.initializeClass(c);", "-            addDefinition(name, c);", "-        } catch (ClassNotFoundException cnfe) {", "-            String msg = getTaskName() + \" class \" + value", "-                + \" cannot be found\";", "-            throw new BuildException(msg, cnfe, getLocation());", "-        } catch (NoClassDefFoundError ncdfe) {", "-            String msg = getTaskName() + \": A class needed by class \"", "-                + value + \" cannot be found: \" + ncdfe.getMessage();", "-            throw new BuildException(msg, ncdfe, location);", "-        }", "-    }", "+    protected void addDefinition(ClassLoader al, String name, String classname)", "+        throws BuildException", "+    {", "+        Class cl = null;", "+        try {", "+            try {", "+                if (onError != OnError.IGNORE) {", "+                    cl = al.loadClass(classname);", "+                    AntClassLoader.initializeClass(cl);", "+                }", "+                ", "+                if (adapter != null) {", "+                    adapterClass = al.loadClass(adapter);", "+                    AntClassLoader.initializeClass(adapterClass);", "+                }", "+", "+                if (adaptTo != null) {", "+                    adaptToClass = al.loadClass(adaptTo);", "+                    AntClassLoader.initializeClass(adaptToClass);", "+                }", "+", "+                AntTypeDefinition def = new AntTypeDefinition();", "+                def.setName(name);", "+                def.setProject(getProject());", "+                def.setClassName(classname);", "+                def.setClass(cl);", "+                def.setAdapterClass(adapterClass);", "+                def.setAdaptToClass(adaptToClass);", "+                def.setClassLoader(al);", "+                if (cl != null) {", "+                    def.checkClass();", "+                }", "+                ComponentHelper.getComponentHelper(getProject())", "+                    .addDataTypeDefinition(def);", "+            } catch (ClassNotFoundException cnfe) {", "+                String msg = getTaskName() + \" class \" + classname", "+                    + \" cannot be found\";", "+                throw new BuildException(msg, cnfe, getLocation());", "+            } catch (NoClassDefFoundError ncdfe) {", "+                String msg = getTaskName() + \"A class needed by class \"", "+                    + classname + \" cannot be found: \" + ncdfe.getMessage();", "+                throw new BuildException(msg, ncdfe, location);", "+            }", "+        } catch (BuildException ex) {", "+            switch (onError) {", "+                case OnError.FAIL:", "+                    throw ex;", "+                case OnError.REPORT:", "+                    log(ex.getLocation() + \"Warning: \" + ex.getMessage(),", "+                        Project.MSG_WARN);", "+                    break;", "+                default:", "+                    log(ex.getLocation() + ex.getMessage(),", "+                        Project.MSG_DEBUG);", "+            }", "+        }", "+    }"]}]}
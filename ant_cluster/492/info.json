{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d55bd41f69d3d2162ebae113f982cdf9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13f13f69b10c6e690c2e8d972718440b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/launcher/AntLoader.java", "commitBeforeChange": "58f8db35ee5db94294191fc2599cb02a8086b881", "commitAfterChange": "8c97911720b40557d78672245bc2e7f724917297", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void addURL( final URL url )", "signatureAfterChange": "     protected final static File findInstallDir()          throws Exception", "diff": ["+    protected final static File findInstallDir() ", "+        throws Exception", "+        final String classpath = System.getProperty( \"java.class.path\" );", "+        final String pathSeparator = System.getProperty( \"path.separator\" );", "+        final StringTokenizer tokenizer = new StringTokenizer( classpath, pathSeparator );", "+        ", "+        while( tokenizer.hasMoreTokens() )", "+        {", "+            final String element = tokenizer.nextToken();", "-     */", "-    public void addURL( final URL url )", "-    {", "-        super.addURL( url );", "+            if( element.endsWith( \"ant.jar\" ) )", "+            {", "+                File file = (new File( element )).getAbsoluteFile();", "+                file = file.getParentFile();", "+                ", "+                if( null != file )", "+                {", "+                    file = file.getParentFile();", "+                }", "+", "+                return file;                ", "+            }", "+        }", "+        ", "+        throw new Exception( \"Unable to locate ant.jar in classpath\" );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a650ebac1f3c85bcd5dc7f0bbb4db4b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/AbstractFileSet.java", "commitBeforeChange": "a41c55cd1af2ca412cb61ee6c81a7a93c9ab8a2d", "commitAfterChange": "d2d5078dc7b94ec29512c2609322281dbc983539", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     protected abstract String getDataTypeName();", "signatureAfterChange": "     protected String getDataTypeName()", "diff": ["-    protected abstract String getDataTypeName();", "+    protected String getDataTypeName() {", "+        // look up the types in project and see if they match this class", "+        Project project = getProject();", "+        if (project != null) {", "+            Hashtable typedefs = project.getDataTypeDefinitions();", "+            for (Enumeration e = typedefs.keys(); e.hasMoreElements();) {", "+                String typeName = (String)e.nextElement();", "+                Class typeClass = (Class)typedefs.get(typeName);", "+                if (typeClass == getClass()) {", "+                    return typeName;", "+                }", "+            }", "+        }", "+            ", "+        String classname = getClass().getName();", "+        ", "+        int dotIndex = classname.lastIndexOf(\".\");", "+        if (dotIndex == -1) {", "+            return classname;", "+        }", "+        return classname.substring(dotIndex + 1); ", "+    }"]}]}
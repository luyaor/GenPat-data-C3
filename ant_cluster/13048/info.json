{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "37f1c430339f6549cc7168a10604ae61", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a77f9f15c55776debd8db6772394db0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Manifest.java", "commitBeforeChange": "8ceff1b470d117265bbe4dd7d982e448c213bb4f", "commitAfterChange": "c35619ac8a554bebec2008a08b8084993b3837f1", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "         public void merge(Section section) throws ManifestException", "signatureAfterChange": "         public void merge(Section section) throws ManifestException", "diff": ["-                // the merge file always wins", "-                attributes.put(attributeName, section.attributes.get(attributeName));", "+                if (attributeName.equals(ATTRIBUTE_CLASSPATH) && ", "+                        attributes.containsKey(attributeName)) {", "+                    // classpath entries are vetors which are merged", "+                    Vector classpathAttrs = (Vector)section.attributes.get(attributeName);", "+                    Vector ourClasspathAttrs = (Vector)attributes.get(attributeName);", "+                    for (Enumeration e2 = classpathAttrs.elements(); e2.hasMoreElements();) {", "+                        ourClasspathAttrs.addElement(e2.nextElement());", "+                    }", "+                }", "+                else {        ", "+                    // the merge file always wins", "+                    attributes.put(attributeName, section.attributes.get(attributeName));", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bc5a10386abfab26ea1d2e95d7649cb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/ReplaceTokens.java", "commitBeforeChange": "8bb8fad68fbd3486824bddff5784f6b0d1adb289", "commitAfterChange": "ea67f0d44a5ed4eeb7101366fd83e00c0657ac28", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private void initialize()", "signatureAfterChange": "     private void initialize()", "diff": ["+                    } else if (\"propertiesfile\".equals(type)) {", "+                        Properties props = getPropertiesFromFile(params[i].getValue());", "+                        for (Enumeration e = props.keys(); e.hasMoreElements();) {", "+                            String key = (String) e.nextElement();", "+                            String value = props.getProperty(key);", "+                            hash.put(key, value);", "+                        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7ef593d915fb3d3f8923b30d48c0d075", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d4d6c62bdb09ca9deb87a87c701cd0c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/builder/DefaultProjectBuilder.java", "commitBeforeChange": "4ad59f0fc5eb69936f4322c1394993d33299959b", "commitAfterChange": "6e89cb024f5e360f9a4a9a3d9e8b8483c7e1ecee", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void buildTarget( final DefaultProject project, final Configuration target )         throws Exception", "signatureAfterChange": "     private void buildTarget( final DefaultProject project, final Configuration target )         throws Exception", "diff": ["+        verifyName( name, target );", "+", "+        if( getLogger().isDebugEnabled() )", "+        {", "+            final String message = REZ.getString( \"ant.target-parse.notice\", name );", "+            getLogger().debug( message );", "+        }", "+", "+        final String[] dependencies = buildDependsList( depends, target );", "+        final Condition condition = buildCondition( ifCondition, unlessCondition, target );", "+        final Target defaultTarget =", "+            new Target( condition, target.getChildren(), dependencies );", "+", "+        //add target to project", "+        project.addTarget( name, defaultTarget );", "+    }", "-        if( getLogger().isDebugEnabled() )", "-        {", "-            final String message = REZ.getString( \"ant.target-parse.notice\", name );", "-            getLogger().debug( message );", "-        }", "-", "-        if( null != ifCondition && null != unlessCondition )", "-        {", "-            final String message =", "-                REZ.getString( \"ant.target-bad-logic.error\", target.getLocation() );", "-            throw new Exception( message );", "-        }", "-", "-        Condition condition = null;", "-", "-        if( null != ifCondition )", "-        {", "-            if( getLogger().isDebugEnabled() )", "-            {", "-                final String message = REZ.getString( \"ant.target-if.notice\", ifCondition );", "-                getLogger().debug( message );", "-            }", "-            condition = new Condition( true, ifCondition );", "-        }", "-        else if( null != unlessCondition )", "-        {", "-            if( getLogger().isDebugEnabled() )", "-            {", "-                final String message = REZ.getString( \"ant.target-unless.notice\", unlessCondition );", "-                getLogger().debug( message );", "-            }", "-            condition = new Condition( false, unlessCondition );", "-        }", "-", "-        final Target defaultTarget =", "-            new Target( condition, target.getChildren(), dependencies );", "-        //add target to project", "-        project.addTarget( name, defaultTarget );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a468c6da0c33f57b7f6208759ffb23d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/frontends/CLIMain.java", "commitBeforeChange": "25c4d95cd51429feee002187eba3dc0acfbb4d3e", "commitAfterChange": "de190c4094ef4f0bb42d710d95b74bcef765aadc", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private void execute( final String[] args )         throws Exception", "signatureAfterChange": "      private void execute( final String[] args )         throws Exception", "diff": ["-        //handle logging...", "-        final String logLevel = m_parameters.getParameter( \"log.level\", null );", "-        enableLogging( new LogKitLogger( createLogger( logLevel ) ) );", "+        prepareLogging();", "-        final String home = m_parameters.getParameter( \"myrmidon.home\", null );", "-        final File homeDir = ( new File( home ) ).getAbsoluteFile();", "-        if( !homeDir.isDirectory() )", "-        {", "-            final String message = REZ.getString( \"home-not-dir.error\", homeDir );", "-            throw new Exception( message );", "-        }", "+        final File homeDir = getHomeDir();", "+        final File buildFile = getBuildFile();", "-        final String filename = m_parameters.getParameter( \"filename\", null );", "-        final File buildFile = ( new File( filename ) ).getCanonicalFile();", "-        if( !buildFile.isFile() )", "-        {", "-            final String message = REZ.getString( \"bad-file.error\", buildFile );", "-            throw new Exception( message );", "-        }", "-", "-        if( getLogger().isInfoEnabled() )", "-        {", "-            final String message = REZ.getString( \"buildfile.notice\", buildFile );", "-            getLogger().info( message );", "-        }", "-", "-        if( getLogger().isInfoEnabled() )", "-        {", "-            final String message = REZ.getString( \"homedir.notice\", homeDir );", "-            getLogger().info( message );", "-        }", "-        final Embeddor embeddor = createEmbeddor();", "-        setupLogger( embeddor );", "-        embeddor.parameterize( m_parameters );", "-        embeddor.initialize();", "-        embeddor.start();", "-", "-        //create the listener", "-        final String listenerName = m_parameters.getParameter( \"listener\", null );", "-        final ProjectListener listener = embeddor.createListener( listenerName );", "+        final Embeddor embeddor = prepareEmbeddor();", "+        final ProjectListener listener = prepareListener( embeddor );", "-        BufferedReader reader = null;", "-", "+        if( !incremental )", "+        {", "+            executeBuild( embeddor, project, listener );", "+        }", "+        else", "+        {", "+            executeIncrementalBuild( embeddor, project, listener );", "+        }", "+", "+        shutdownEmbeddor( embeddor );", "+    }", "-            //actually do the build ...", "-            final Workspace workspace = embeddor.createWorkspace( m_defines );", "-            workspace.addProjectListener( listener );", "-", "-            doBuild( workspace, project, m_targets );", "-", "-            if( !incremental )", "-            {", "-                break;", "-            }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c282ec993fc5bf69a4a4dab2f6d09720", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f3b1ad1c5414257b827c4022a286c65", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/modelparser/ProjectHandler.java", "commitBeforeChange": "f1025dd3c6deebb466ac41a06a42d812cdf4e08d", "commitAfterChange": "c2f14ffad1518f0d1c23c084b7c216d06c5da363", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void startElement(String uri, String localName, String qualifiedName,                              Attributes attributes)          throws SAXParseException", "signatureAfterChange": "     public void startElement(String uri, String localName, String qualifiedName,                              Attributes attributes)          throws SAXParseException", "diff": ["-        if (qualifiedName.equals(REF_ELEMENT)) {", "-            RefHandler refHandler = new RefHandler();", "-            refHandler.start(getParseContext(), getXMLReader(), this,", "-                getLocator(), attributes, getElementSource(),", "-                qualifiedName);", "-            try {", "-                project.referenceProject(refHandler.getRefName(),", "-                    refHandler.getReferencedProject());", "-            } catch (ModelException e) {", "-                throw new SAXParseException(e.getMessage(), getLocator(), e);", "-            }", "-        } else if (qualifiedName.equals(INCLUDE_ELEMENT)) {", "+        if (qualifiedName.equals(INCLUDE_ELEMENT)) {", "-          throw new SAXParseException(\"Only the \\\"ant\\\" namespace is \"", "+          throw new SAXParseException(\"namespace support is not \""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a037285541ceae7797355eef62f6134", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/DOMElementWriter.java", "commitBeforeChange": "80eb41df70f59620db5127b116b1311dc33bd804", "commitAfterChange": "a7900921c30f730f0fda304913f867dee4dcebc5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void write(Element element, Writer out, int indent,                       String indentWith)         throws IOException", "signatureAfterChange": "     public void write(Element element, Writer out, int indent,                       String indentWith)         throws IOException", "diff": ["-        // Write indent characters", "-        for (int i = 0; i < indent; i++) {", "-            out.write(indentWith);", "-        }", "-", "-        // Write element", "-        out.write(\"<\");", "-        out.write(element.getTagName());", "-", "-        // Write attributes", "-        NamedNodeMap attrs = element.getAttributes();", "-        for (int i = 0; i < attrs.getLength(); i++) {", "-            Attr attr = (Attr) attrs.item(i);", "-            out.write(\" \");", "-            out.write(attr.getName());", "-            out.write(\"=\\\"\");", "-            out.write(encode(attr.getValue()));", "-            out.write(\"\\\"\");", "-        }", "-        out.write(\">\");", "+        openElement(element, out, indent, indentWith);", "+        closeElement(element, out, indent, indentWith, hasChildren);", "+    }"]}]}
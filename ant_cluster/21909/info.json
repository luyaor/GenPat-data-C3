{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2267014749257a98b3026fa77fe74c62", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06fa9ee92ac3a730ab058b0659803150", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/ExpandProperties.java", "commitBeforeChange": "314d4d7ba7942ae0427800f340ff045f9f0b084e", "commitAfterChange": "4b3719fe42e1068aa206645dde99be722f6a89c1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public int read() throws IOException", "signatureAfterChange": "     public int read() throws IOException", "diff": ["-", "-        int ch = -1;", "-", "-        if (queuedData != null && queuedData.length() == 0) {", "-            queuedData = null;", "-        }", "-", "-        if (queuedData != null) {", "-            ch = queuedData.charAt(0);", "-            queuedData = queuedData.substring(1);", "-            if (queuedData.length() == 0) {", "-                queuedData = null;", "-            }", "-        } else {", "-            queuedData = readFully();", "-            if (queuedData == null || queuedData.length() == 0) {", "-                ch = -1;", "-            } else {", "+        if (index > EOF) {", "+            if (buffer == null) {", "+                String data = readFully();", "-                        ", "+", "-                queuedData = new ParseProperties(project, PropertyHelper.getPropertyHelper(project)", "-                        .getExpanders(), getProperty).parseProperties(queuedData).toString();", "-                return read();", "+                buffer = new ParseProperties(project, PropertyHelper.getPropertyHelper(project)", "+                        .getExpanders(), getProperty).parseProperties(data).toString()", "+                        .toCharArray();", "+            if (index < buffer.length) {", "+                return buffer[index++];", "+            }", "+            index = EOF;", "-        return ch;", "+        return EOF;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23546c0a3bc6f6fd971242444c5760d2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/xdocs/src/org/apache/tools/ant/xdoclet/TaskTagsHandler.java", "commitBeforeChange": "f19f07d6e4c72f241057ecfc32d80be21201bbf7", "commitAfterChange": "ca91f8cb7e4f2bfe1a191dea6126a32649af9565", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private MethodDoc[] getAttributeMethods(ClassDoc cur_class) throws XDocletException", "signatureAfterChange": "      private MethodDoc[] getAttributeMethods(ClassDoc cur_class) throws XDocletException", "diff": ["-     */", "+        Map nameTypeMap = new HashMap();", "-            if (!methods[i].name().startsWith(\"set\")) {", "+            MethodDoc method = methods[i];", "+", "+            if (!method.isPublic()) {", "+                continue;", "+            }", "+", "+            if (!method.name().startsWith(\"set\")) {", "-            if (isAntAttribute(methods[i])) {", "+            if (isAntAttribute(method)) {", "-            Parameter[] params = methods[i].parameters();", "+            Parameter[] params = method.parameters();", "-            attributeMethods.add(methods[i]);", "+            Parameter param = params[0];", "+", "+            // Screen out attribute setters if there are duplicates,", "+            // and only return the first non-String one", "+            // (this may or may not jive with IntrospectionHelper)", "+            MethodDoc oldMethod = (MethodDoc) nameTypeMap.get(method.name());", "+            if (oldMethod == null) {", "+                nameTypeMap.put(method.name(), method);", "+            }", "+            else {", "+                if (\"java.lang.String\".equals(oldMethod.parameters()[0].typeName())) {", "+                    attributeMethods.remove(oldMethod);", "+                    nameTypeMap.put(method.name(), method);", "+                }", "+            }", "+", "+            attributeMethods.add(method);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ee24f9ae586a510cb52db4ddaefa51b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/optional/ScriptRunner.java", "commitBeforeChange": "ac4255606a629710da5c2c90c2d74370cc9c2ba8", "commitAfterChange": "bc0b6f13329378a8d304b39a38209874e6b89fac", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public boolean supportsLanguage()", "signatureAfterChange": "     public boolean supportsLanguage()", "diff": ["-        if (manager != null) {", "-            return true;", "-        }", "-        checkLanguage();", "-        ClassLoader origLoader = replaceContextLoader();", "-        try {", "-            BSFManager m = createManager();", "-            BSFEngine e =", "-                engine != null", "-                ? engine", "-                : m.loadScriptingEngine(getLanguage());", "-            return e != null;", "-        } catch (Exception ex) {", "+        Hashtable table = (Hashtable) ReflectUtil.getField(", "+            new BSFManager(), \"registeredEngines\");", "+        String engineClassName = (String) table.get(getLanguage());", "+        if (engineClassName == null) {", "+            getProject().log(", "+                \"This is no BSF engine class for language '\"", "+                + getLanguage() + \"'\",", "+                Project.MSG_VERBOSE);", "-        } finally {", "-            restoreContextLoader(origLoader);", "+        }", "+        try {", "+            getScriptClassLoader().loadClass(engineClassName);", "+            return true;", "+        } catch (Throwable ex) {", "+            getProject().log(", "+                \"unable to create BSF engine class for language '\"", "+                + getLanguage() + \"'\",", "+                ex,", "+                Project.MSG_VERBOSE);", "+            return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f85cc6f59e7ac87e4fe5e4c4f0c2569", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/PropertyEditor.java", "commitBeforeChange": "a9cc5fd794d793374e83ef922a0d32b3a9d5afdb", "commitAfterChange": "d830141f773d284b894679215e4d17a379422033", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private void displayTargetInfo(ACSTargetElement[] targets)", "signatureAfterChange": "     private void updateDisplay(ACSElement item)", "diff": ["-    private void displayTargetInfo(ACSTargetElement[] targets) {", "-", "-        // The text to display.", "-        String text = null;", "-", "-        int num = targets == null ? 0 : targets.length;", "-        Object[] args = null;", "-        switch(num) {", "-          case 0:", "-              text = getAppContext().getResources().", "-                  getString(getClass(), \"noTargets\");", "-              break;", "-          case 1:", "-              args = getTargetParams(targets[0]);", "-              text = getAppContext().getResources().", "-                  getMessage(getClass(), \"oneTarget\", args);", "-              break;", "-          default:", "-              args = getTargetParams(targets);", "-              text = getAppContext().getResources().", "-                  getMessage(getClass(), \"manyTargets\", args);", "-              break;", "+    private void updateDisplay(ACSElement item) {", "+        if(_customizer != null) {", "+            remove(_customizer);", "+            _customizer = null;", "-        if(text != null) {", "-            _text.setText(text);", "+        if(item != null) {", "+            _customizer = new DynamicCustomizer(item.getClass(), true);", "+            _customizer.setObject(item);", "+            add(BorderLayout.CENTER, _customizer);", "+        validate();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1e1f50e0cd1e4be89452a81215c68d6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "9662217bcdcb51660f8fa051a66f72e0201b0cfc", "commitAfterChange": "b50848acbae81898bb10c59495c089c2697adde4", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["+", "+            // Javadoc 1.2 rules:", "+            //   Multiple -group args allowed.", "+            //   Each arg includes 3 strings: -group [name] [packagelist].", "+            //   Elements in [packagelist] are colon-delimited.", "+            //   An element in [packagelist] may end with the * wildcard.", "+", "+            // Ant javadoc task rules for group attribute:", "+            //   Args are comma-delimited.", "+            //   Each arg is 2 space-delimited strings.", "+            //   E.g., group=\"XSLT_Packages org.apache.xalan.xslt*,XPath_Packages orgapache.xalan.xpath*\"", "-                argList.addElement(\"-group\");", "-                argList.addElement(group);", "+                StringTokenizer tok = new StringTokenizer(group, \",\", false);", "+                while (tok.hasMoreTokens()) {", "+                  String grp = tok.nextToken().trim();", "+                  int space = grp.indexOf(\" \");", "+                  if (space > 0){", "+                    String name = grp.substring(0, space);", "+                    String pkgList = grp.substring(space + 1);", "+                    argList.addElement(\"-group\");", "+                    argList.addElement(name);", "+                    argList.addElement(pkgList);", "+                  }", "+                }", "+"]}]}
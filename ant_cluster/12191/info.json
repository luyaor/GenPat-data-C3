{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "609a129707cea4a4c8437a06eb79c4cc", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82b683aedea5bcd518b787227d980216", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "     private AttributeSetter createAttributeSetter(final Method m,                                                   Class<?> arg,                                                   final String attrName)", "signatureAfterChange": "     private AttributeSetter createAttributeSetter(final Method m,                                                   final Class<?> arg,                                                   final String attrName)", "diff": ["-                                                  Class<?> arg,", "+                                                  final Class<?> arg,", "-                public void set(Project p, Object parent, String value)", "+                @Override", "+\t\t\t\tpublic void set(final Project p, final Object parent, final String value)", "-                public void set(Project p, Object parent, String value)", "+                @Override", "+\t\t\t\tpublic void set(final Project p, final Object parent, final String value)", "-                public void set(Project p, Object parent, String value)", "+                @Override", "+\t\t\t\tpublic void set(final Project p, final Object parent, final String value)", "-                public void set(Project p, Object parent, String value)", "+                @Override", "+\t\t\t\tpublic void set(final Project p, final Object parent, final String value)", "-                public void set(Project p, Object parent, String value)", "+                @Override", "+\t\t\t\tpublic void set(final Project p, final Object parent, final String value)", "-                    } catch (ClassNotFoundException ce) {", "+                    } catch (final ClassNotFoundException ce) {", "-                public void set(Project p, Object parent, String value)", "+                @Override", "+\t\t\t\tpublic void set(final Project p, final Object parent, final String value)", "-                void set(Project p, Object parent, String value) throws InvocationTargetException,", "+                @Override", "+\t\t\t\tvoid set(final Project p, final Object parent, final String value) throws InvocationTargetException,", "-                    m.invoke(parent, new Object[] { new FileResource(p, p.resolveFile(value)) });", "+                    m.invoke(parent, new Object[] {new FileResource(p, p.resolveFile(value))});", "-                public void set(Project p, Object parent, String value)", "+                @Override", "+\t\t\t\tpublic void set(final Project p, final Object parent, final String value)", "-                        EnumeratedAttribute ea = (EnumeratedAttribute) reflectedArg.newInstance();", "+                        final EnumeratedAttribute ea = (EnumeratedAttribute) reflectedArg.newInstance();", "-                    } catch (InstantiationException ie) {", "+                    } catch (final InstantiationException ie) {", "-        AttributeSetter setter = getEnumSetter(reflectedArg, m, arg);", "+        final AttributeSetter setter = getEnumSetter(reflectedArg, m, arg);", "-                public void set(Project p, Object parent, String value)", "+                @Override", "+\t\t\t\tpublic void set(final Project p, final Object parent, final String value)", "-                    } catch (NumberFormatException e) {", "+                    } catch (final NumberFormatException e) {", "-                    } catch (InvocationTargetException e) {", "+                    } catch (final InvocationTargetException e) {", "-                    } catch (IllegalAccessException e) {", "+                    } catch (final IllegalAccessException e) {", "-                    } catch (Exception e) {", "+                    } catch (final Exception e) {", "-        } catch (NoSuchMethodException nme) {", "+        } catch (final NoSuchMethodException nme) {", "-            } catch (NoSuchMethodException nme2) {", "+            } catch (final NoSuchMethodException nme2) {", "-            public void set(Project p, Object parent, String value)", "+            @Override", "+\t\t\tpublic void set(final Project p, final Object parent, final String value)", "-                    Object[] args = finalIncludeProject", "+                    final Object[] args = finalIncludeProject", "-                    Object attribute = finalConstructor.newInstance(args);", "+                    final Object attribute = finalConstructor.newInstance(args);", "-                } catch (InvocationTargetException e) {", "-                    Throwable cause = e.getCause();", "+                } catch (final InvocationTargetException e) {", "+                    final Throwable cause = e.getCause();", "-                } catch (InstantiationException ie) {", "+                } catch (final InstantiationException ie) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e18caad49b7ed9f6f25bc8aeffade07c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "      private static void transferFormatters(JUnitTestRunner runner,                                            JUnitTest test)", "signatureAfterChange": "      private static void transferFormatters(final JUnitTestRunner runner,                                            final JUnitTest test)", "diff": ["-    private static void transferFormatters(JUnitTestRunner runner,", "-                                           JUnitTest test) {", "+    private static void transferFormatters(final JUnitTestRunner runner,", "+                                           final JUnitTest test) {", "-            public void startTestSuite(JUnitTest suite) throws BuildException {", "+            @Override", "+\t\t\tpublic void startTestSuite(final JUnitTest suite) throws BuildException {", "-            public void endTestSuite(JUnitTest suite) throws BuildException {", "+            @Override", "+\t\t\tpublic void endTestSuite(final JUnitTest suite) throws BuildException {", "-            public void setOutput(OutputStream out) {", "+            @Override", "+\t\t\tpublic void setOutput(final OutputStream out) {", "-            public void setSystemOutput(String out) {", "+            @Override", "+\t\t\tpublic void setSystemOutput(final String out) {", "-            public void setSystemError(String err) {", "+            @Override", "+\t\t\tpublic void setSystemError(final String err) {", "-            public void addError(Test arg0, Throwable arg1) {", "+            @Override", "+\t\t\tpublic void addError(final Test arg0, final Throwable arg1) {", "-            public void addFailure(Test arg0, AssertionFailedError arg1) {", "+            @Override", "+\t\t\tpublic void addFailure(final Test arg0, final AssertionFailedError arg1) {", "-            public void endTest(Test arg0) {", "+            @Override", "+\t\t\tpublic void endTest(final Test arg0) {", "-            public void startTest(Test arg0) {", "+            @Override", "+\t\t\tpublic void startTest(final Test arg0) {", "-            FormatterElement fe = (FormatterElement) fromCmdLine.elementAt(i);", "+            final FormatterElement fe = (FormatterElement) fromCmdLine.elementAt(i);", "-                File destFile =", "+                final File destFile ="]}]}
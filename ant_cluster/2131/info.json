{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f8efc00d2f15b045e3fc4de636350a88", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b5d63c509619f4bf8e3c3f635e60f62", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "380870c2b26a9f3289569dc2451178df3f05613e", "commitAfterChange": "ad9edf5f5ea4a8f2a974726eeb8e656c177357df", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 31, "signatureBeforeChange": "          Data(int blockSize100k)", "signatureAfterChange": "      private void allocateCompressStructures ()", "diff": ["+", "+    private void allocateCompressStructures () {", "+        int n = baseBlockSize * blockSize100k;", "+        block = new char[(n + 1 + NUM_OVERSHOOT_BYTES)];", "+        quadrant = new int[(n + NUM_OVERSHOOT_BYTES)];", "+        zptr = new int[n];", "+        ftab = new int[65537];", "+", "+        if (block == null || quadrant == null || zptr == null", "+            || ftab == null) {", "+            //int totalDraw = (n + 1 + NUM_OVERSHOOT_BYTES) + (n + NUM_OVERSHOOT_BYTES) + n + 65537;", "+            //compressOutOfMemory ( totalDraw, n );", "+        }", "+", "+        /*", "+          The back end needs a place to store the MTF values", "+          whilst it calculates the coding tables.  We could", "+          put them in the zptr array.  However, these values", "+          will fit in a short, so we overlay szptr at the", "+          start of zptr, in the hope of reducing the number", "+          of cache misses induced by the multiple traversals", "+          of the MTF values when calculating coding tables.", "+          Seems to improve compression speed by about 1%.", "+        */", "+        //    szptr = zptr;", "+", "+", "+        szptr = new short[2 * n];", "-", "-        Data(int blockSize100k) {", "-            super();", "-", "-            final int n = blockSize100k * BZip2Constants.baseBlockSize;", "-            this.block = new byte[(n + 1 + NUM_OVERSHOOT_BYTES)];", "-            this.fmap = new int[n];", "-            this.sfmap = new char[2 * n];", "-            this.quadrant = this.sfmap;", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb926f96c6a62524b3e12aba72e9ce85", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "380870c2b26a9f3289569dc2451178df3f05613e", "commitAfterChange": "ad9edf5f5ea4a8f2a974726eeb8e656c177357df", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 17, "signatureBeforeChange": "      private void bsW(final int n, final int v) throws IOException", "signatureAfterChange": "      private void bsW(int n, int v) throws IOException", "diff": ["-    private void bsW(final int n, final int v) throws IOException {", "-        final OutputStream outShadow = this.out;", "-        int bsLiveShadow    = this.bsLive;", "-        int bsBuffShadow    = this.bsBuff;", "-", "-        while (bsLiveShadow >= 8) {", "-            outShadow.write(bsBuffShadow >> 24); // write 8-bit", "-            bsBuffShadow <<= 8;", "-            bsLiveShadow -= 8;", "+    private void bsW(int n, int v) throws IOException {", "+        while (bsLive >= 8) {", "+            int ch = (bsBuff >> 24);", "+            try {", "+                bsStream.write(ch); // write 8-bit", "+            } catch (IOException e) {", "+                throw e;", "+            }", "+            bsBuff <<= 8;", "+            bsLive -= 8;", "+            bytesOut++;", "-", "-        this.bsBuff = bsBuffShadow | (v << (32 - bsLiveShadow - n));", "-        this.bsLive = bsLiveShadow + n;", "+        bsBuff |= (v << (32 - bsLive - n));", "+        bsLive += n;"]}]}
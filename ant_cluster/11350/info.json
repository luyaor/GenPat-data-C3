{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf731f8f307ffdc1446e2b85572ec588", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2008d2e8ef6b721647154499b46e1da8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/listeners/DefaultProjectListener.java", "commitBeforeChange": "8b39211862c5a0b88ce5764bbc1682a89fd02895", "commitAfterChange": "8b4b896303cebb9f6f054254131e248da36b454b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void log( final String message, final Throwable throwable )", "signatureAfterChange": "     public void log( final LogEvent event )", "diff": ["-     */", "-    public void log( final String message, final Throwable throwable )", "-    {", "-        output( message + \"\\n\" + ExceptionUtil.printStackTrace( throwable, 5, true ) );", "-    }", "+     */", "+    public void log( final LogEvent event )", "+    {", "+        // Write the target header, if necessary", "+        final String target = event.getTargetName();", "+        if( target != null && !m_targetOutput )", "+        {", "+            writeTargetHeader( event );", "+        // Write the message", "+        super.log( event );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a4b395cc7051ecf6c4e524e33504e08", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2InputStream.java", "commitBeforeChange": "3477bbf6474cdd2b70b12eb638e64415a4f1c2ec", "commitAfterChange": "134d95afef9b42cf08f2eccb077b97525ac38034", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 28, "signatureBeforeChange": "      private int bsGetIntVS(int numBits)", "signatureAfterChange": "         final int[] initTT(int length)", "diff": ["-    private int bsGetIntVS(int numBits) {", "-        return (int) bsR(numBits);", "-    }", "+         */", "+        final int[] initTT(int length) {", "+            int[] tt = this.tt;", "+", "+            // tt.length should always be >= length, but theoretically", "+            // it can happen, if the compressor mixed small and large", "+            // blocks.  Normally only the last block will be smaller", "+            // than others.", "+            if ((tt == null) || (tt.length < length)) {", "+                this.tt = tt = new int[length];", "+            }", "+", "+            return tt;", "+        }"]}]}
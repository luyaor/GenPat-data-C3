{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bc2d24542df33a2691fa9149fef08f82", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69ad2e5e19c8276043a2ccedc7abba27", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/Available.java", "commitBeforeChange": "bab80bf968716d4230c3c4461a8dfbc6343f6a6b", "commitAfterChange": "093967db0e29ab675eef29fbe21d840f3467c5a7", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      public boolean eval()         throws TaskException", "signatureAfterChange": "      public boolean eval()         throws TaskException", "diff": ["-        if( classname == null && file == null && resource == null )", "+        if( m_classname == null && m_file == null && m_resource == null )", "-        if( type != null )", "+        if( m_type != null )", "-            if( file == null )", "+            if( m_file == null )", "-        if( classpath != null )", "+        if( m_classpath != null )", "-            this.loader = new AntClassLoader( getProject(), classpath );", "+            final URL[] urls = m_classpath.toURLs();", "+            m_classLoader = new URLClassLoader( urls );", "-        if( ( classname != null ) && !checkClass( classname ) )", "+        if( ( m_classname != null ) && !checkClass( m_classname ) )", "-            getLogger().debug( \"Unable to load class \" + classname + \" to set property \" + property );", "+            getLogger().debug( \"Unable to load class \" + m_classname + \" to set property \" + m_property );", "-        if( ( file != null ) && !checkFile() )", "+        if( ( m_file != null ) && !checkFile() )", "-            if( type != null )", "+            if( m_type != null )", "-                getLogger().debug( \"Unable to find \" + type + \" \" + file + \" to set property \" + property );", "+                getLogger().debug( \"Unable to find \" + m_type + \" \" + m_file + \" to set property \" + m_property );", "-                getLogger().debug( \"Unable to find \" + file + \" to set property \" + property );", "+                getLogger().debug( \"Unable to find \" + m_file + \" to set property \" + m_property );", "-        if( ( resource != null ) && !checkResource( resource ) )", "+        if( ( m_resource != null ) && !checkResource( m_resource ) )", "-            getLogger().debug( \"Unable to load resource \" + resource + \" to set property \" + property );", "+            getLogger().debug( \"Unable to load resource \" + m_resource + \" to set property \" + m_property );", "-        }", "-", "-        if( loader != null )", "-        {", "-            loader.cleanup();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86601ed0b6e4f922338b44a3ac074dce", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/Available.java", "commitBeforeChange": "bab80bf968716d4230c3c4461a8dfbc6343f6a6b", "commitAfterChange": "093967db0e29ab675eef29fbe21d840f3467c5a7", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      public boolean eval()         throws TaskException", "signatureAfterChange": "      public boolean eval()         throws TaskException", "diff": ["-        if( classname == null && file == null && resource == null )", "+        if( m_classname == null && m_file == null && m_resource == null )", "-        if( type != null )", "+        if( m_type != null )", "-            if( file == null )", "+            if( m_file == null )", "-        if( classpath != null )", "+        if( m_classpath != null )", "-            this.loader = new AntClassLoader( getProject(), classpath );", "+            final URL[] urls = m_classpath.toURLs();", "+            m_classLoader = new URLClassLoader( urls );", "-        if( ( classname != null ) && !checkClass( classname ) )", "+        if( ( m_classname != null ) && !checkClass( m_classname ) )", "-            getLogger().debug( \"Unable to load class \" + classname + \" to set property \" + property );", "+            getLogger().debug( \"Unable to load class \" + m_classname + \" to set property \" + m_property );", "-        if( ( file != null ) && !checkFile() )", "+        if( ( m_file != null ) && !checkFile() )", "-            if( type != null )", "+            if( m_type != null )", "-                getLogger().debug( \"Unable to find \" + type + \" \" + file + \" to set property \" + property );", "+                getLogger().debug( \"Unable to find \" + m_type + \" \" + m_file + \" to set property \" + m_property );", "-                getLogger().debug( \"Unable to find \" + file + \" to set property \" + property );", "+                getLogger().debug( \"Unable to find \" + m_file + \" to set property \" + m_property );", "-        if( ( resource != null ) && !checkResource( resource ) )", "+        if( ( m_resource != null ) && !checkResource( m_resource ) )", "-            getLogger().debug( \"Unable to load resource \" + resource + \" to set property \" + property );", "+            getLogger().debug( \"Unable to load resource \" + m_resource + \" to set property \" + m_property );", "-        }", "-", "-        if( loader != null )", "-        {", "-            loader.cleanup();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5d8ca43cceeb611c7deb5540422107bc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b340f4bb73edb5e82e8dd86cda3f906", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/selectors/DependSelectorTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public DependSelectorTest(String name)", "signatureAfterChange": "      @Test     public void testMergeMapper()", "diff": ["-    public DependSelectorTest(String name) {", "-        super(name);", "-    }", "+", "+    @Test", "+    public void testMergeMapper() {", "+        DependSelector s = new DependSelector();", "+        s.setTargetdir(selectorRule.getBeddir());", "+", "+        Mapper m = s.createMapper();", "+        m.setType(merge);", "+        m.setTo(\"asf-logo.gif.gz\");", "+        String results = selectorRule.selectionString(s);", "+        assertEquals(\"TFFFFTTTFFF\", results.substring(0,11));", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d69d39d268600e93c5c457b47269c57", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DefaultLogger.java", "commitBeforeChange": "affdc94099335f21a0e62be2256c9eaf16ad1e85", "commitAfterChange": "233ae85c5f835679681ece8d58a279b6bcf50550", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void messageLogged(BuildEvent event)", "signatureAfterChange": "     public void messageLogged(BuildEvent event)", "diff": ["-            // Print out the name of the task if we're in one", "-            if (event.getTask() != null) {", "+            if (event.getTask() != null && !emacsMode) {", "+                // Print out the name of the task if we're in one", "-", "-                if (!emacsMode) {", "-                    String label = \"[\" + name + \"] \";", "-                    int size = LEFT_COLUMN_SIZE - label.length();", "-                    for (int i = 0; i < size; i++) {", "-                        message.append(\" \");", "-                    }", "-                    message.append(label);", "+                String label = \"[\" + name + \"] \";", "+                int size = LEFT_COLUMN_SIZE - label.length();", "+                StringBuffer tmp = new StringBuffer(size);", "+                for (int i = 0; i < size; i++) {", "+                    tmp.append(\" \");", "+                tmp.append(label);", "+                label = tmp.toString();", "+", "+                StringTokenizer tok = new StringTokenizer(event.getMessage(),", "+                                                          \"\\r\\n\", false);", "+                boolean first = true;", "+                while (tok.hasMoreTokens()) {", "+                    if (!first) {", "+                        message.append(StringUtils.LINE_SEP);", "+                    }", "+                    first = false;", "+                    message.append(label);", "+                    message.append(tok.nextToken());", "+                }", "+", "+            } else {", "+                message.append(event.getMessage());", "-            message.append(event.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "521f5bd2e284c6924df897a2840de557", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/junit/src/main/org/apache/tools/ant/taskdefs/optional/rjunit/remote/Server.java", "commitBeforeChange": "b07408a415c2be0594dfe88062177fc4cc571d05", "commitAfterChange": "c2b10718db2516942cbceeae8a89d1032393a55f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void start()", "signatureAfterChange": "     public void start(boolean loop) throws IOException", "diff": ["-    public void start() {", "-        try {", "-            start(false);", "-        } catch (InterruptedException e){", "-        }", "-    }", "+    public void start(boolean loop) throws IOException {", "+        server = new ServerSocket(port);", "+        while (server != null) {", "+            client = server.accept();", "+            messenger = new Messenger(client.getInputStream(), client.getOutputStream());", "+            TestRunEvent evt = null;", "+            try {", "+                while ( (evt = messenger.read()) != null ) {", "+                    dispatcher.dispatchEvent(evt);", "+                }", "+            } catch (Exception e){", "+                e.printStackTrace();", "+                //@fixme this stacktrace might be normal when closing", "+                // the socket. So decompose the above in distinct steps", "+            }", "+            if (!loop){", "+                break;", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7405594f2a064c7fdb8d3d226a21f698", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultObjectConfigurer.java", "commitBeforeChange": "c4dee0afafcc57ede3e3d1e81d2d4a1455c484a4", "commitAfterChange": "f52a170159f6dc5beebe07bfb945cb5b3fa5290b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private Map findAdders()         throws ConfigurationException", "signatureAfterChange": "     private Map findAdders()         throws ConfigurationException", "diff": ["-            if( method.getReturnType() != Void.TYPE ||", "-                method.getParameterTypes().length != 1 )", "+            if( method.getReturnType() != Void.TYPE", "+                || method.getParameterTypes().length != 1 )", "-            // Extract element name", "-            final String elemName = extractName( 3, methodName );", "+            // Extract property name", "+            final String propName = extractName( 3, methodName );", "+", "+            final Class type = method.getParameterTypes()[ 0 ];", "-            if( adders.containsKey( elemName ) )", "+            if( adders.containsKey( propName ) )", "-                final String message =", "-                    REZ.getString( \"multiple-adder-methods-for-element.error\",", "-                                   m_class.getName(),", "-                                   elemName );", "-                throw new ConfigurationException( message );", "+                final Class currentType = ( (Method)adders.get( propName ) ).getParameterTypes()[ 0 ];", "+", "+                // Ditch the string version, if any", "+                if( currentType != String.class && type == String.class )", "+                {", "+                    // New type is string, and current type is not.  Ignore", "+                    // the new method", "+                    continue;", "+                }", "+                if( currentType != String.class || type == String.class )", "+                {", "+                    // Both are string, or both are not string", "+                    final String message =", "+                        REZ.getString( \"multiple-adder-methods-for-element.error\",", "+                                       m_class.getName(),", "+                                       propName );", "+                    throw new ConfigurationException( message );", "+                }", "+", "+                // Else, current type is string, and new type is not, so", "+                // continue below, and overwrite the current method", "-            adders.put( elemName, method );", "+            adders.put( propName, method );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae0773f48331d65e7ca79472145e0694", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "51fe5cb2d9c5c0aae9a528b1af992bcf1d407b1a", "commitAfterChange": "3849918afcc50b3f87292c7a9f3ef2bbb73fd4bc", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "     private static void printTargets(Project project, Vector names,                                      Vector descriptions, String heading,                                      int maxlen)", "signatureAfterChange": "     private static void printTargets(Project project, Vector names,                                      Vector descriptions, Vector dependencies,                                      String heading,                                      int maxlen)", "diff": ["-                                     Vector descriptions, String heading,", "+                                     Vector descriptions, Vector dependencies,", "+                                     String heading,", "+            if (!dependencies.isEmpty()) {", "+                Enumeration deps = (Enumeration) dependencies.elementAt(i);", "+                if (deps.hasMoreElements()) {", "+                    msg.append(\"   depends of: \");", "+                    while (deps.hasMoreElements()) {", "+                        msg.append(deps.nextElement());", "+                        if (deps.hasMoreElements()) {", "+                            msg.append(\", \");", "+                        }", "+                    }", "+                    msg.append(lSep);                ", "+                }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f85b70f45e06ef6d8cbd4839cd5929d4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "7b496796a17f0f7260141b2bbeb8681785788664", "commitAfterChange": "c524f9ba2269aab3e0126cedba791854d797c592", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+        // Apply the basetest attributes", "+        Enumeration e = allTests();", "+        while (e.hasMoreElements()) {", "+            BaseTest test = (BaseTest) e.nextElement();", "+            test.setFiltertrace(filterTrace);", "+            test.setHaltonerror(haltOnError);", "+            if (errorProperty != null) {", "+                test.setErrorProperty(errorProperty);", "+            }", "+            test.setHaltonfailure(haltOnFail);", "+            if (failureProperty != null) {", "+                test.setFailureProperty(failureProperty);", "+            }", "+            test.setFork(fork);", "+        }", "+"]}]}
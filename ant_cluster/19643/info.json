{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0a07630d914758c2d5e607d463c7b4ad", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78da65868a59b5018a012c73ac8566dd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ide/VAJRemoteUtil.java", "commitBeforeChange": "00eb48bddc7183e3d960299901b931aefd1bf61a", "commitAfterChange": "4ac9a8932c13b7d5c9e8f15c7856a71d7044f236", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private String assembleImportExportParams(                                               File dir,                                               String[] includePatterns, String[] excludePatterns,                                               boolean includeClasses, boolean includeResources,                                               boolean includeSources, boolean useDefaultExcludes)", "signatureAfterChange": "     private void assembleImportExportParams(Vector parameters,                                             File dir,                                             String[] includePatterns, String[] excludePatterns,                                             boolean includeClasses, boolean includeResources,                                             boolean includeSources, boolean useDefaultExcludes)", "diff": ["-    private String assembleImportExportParams(", "-                                              File dir,", "-                                              String[] includePatterns, String[] excludePatterns,", "-                                              boolean includeClasses, boolean includeResources,", "-                                              boolean includeSources, boolean useDefaultExcludes) {", "-        String result =", "-            VAJToolsServlet.DIR_PARAM + \"=\"", "-            + URLEncoder.encode(dir.getPath()) + \"&\"", "-            + VAJToolsServlet.CLASSES_PARAM + \"=\" + includeClasses + \"&\"", "-            + VAJToolsServlet.RESOURCES_PARAM + \"=\" + includeResources + \"&\"", "-            + VAJToolsServlet.SOURCES_PARAM + \"=\" + includeSources + \"&\"", "-            + VAJToolsServlet.DEFAULT_EXCLUDES_PARAM + \"=\" + useDefaultExcludes;", "+    private void assembleImportExportParams(Vector parameters,", "+                                            File dir,", "+                                            String[] includePatterns, String[] excludePatterns,", "+                                            boolean includeClasses, boolean includeResources,", "+                                            boolean includeSources, boolean useDefaultExcludes) {", "+        parameters.addElement(new URLParam(VAJToolsServlet.DIR_PARAM, dir.getPath()));", "+        parameters.addElement(new URLParam(VAJToolsServlet.CLASSES_PARAM, includeClasses));", "+        parameters.addElement(new URLParam(VAJToolsServlet.RESOURCES_PARAM, includeResources));", "+        parameters.addElement(new URLParam(VAJToolsServlet.SOURCES_PARAM, includeSources));", "+        parameters.addElement(new URLParam(VAJToolsServlet.DEFAULT_EXCLUDES_PARAM, useDefaultExcludes));", "-                result = result + \"&\" + VAJExportServlet.INCLUDE_PARAM + \"=\"", "-                    + URLEncoder.encode(includePatterns[i]);", "+                parameters.addElement(new", "+                                      URLParam(VAJExportServlet.INCLUDE_PARAM, includePatterns[i]));", "-                result = result + \"&\" + VAJExportServlet.EXCLUDE_PARAM + \"=\"", "-                    + URLEncoder.encode(excludePatterns[i]);", "+                parameters.addElement(new", "+                                      URLParam(VAJExportServlet.EXCLUDE_PARAM, excludePatterns[i]));", "-", "-        return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ff7914ab322886cbcd616fb912ffca0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/cli/org/apache/ant/cli/Commandline.java", "commitBeforeChange": "7e6ed5c57f2d59a4ef3089d3f66863441a296e54", "commitAfterChange": "984e12200a21e70c9ec9086f8c69e86aaa0d7de9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void parseArguments(String[] args)          throws ConfigException", "signatureAfterChange": "     private void parseArguments(String[] args)          throws ConfigException", "diff": ["-                    String url = args[i++];", "+                    String url = getOption(args, i++, arg);", "-                } catch (ArrayIndexOutOfBoundsException e) {", "-                    System.err.println(\"You must specify a buildfile when \" +", "-                        \"using the -buildfile argument\");", "-                    return;", "-                    File logFile = new File(args[i++]);", "+                    File logFile = new File(getOption(args, i++, arg));", "-                    return;", "-                } catch (ArrayIndexOutOfBoundsException aioobe) {", "-                    System.err.println(\"You must specify a log file when \" +", "-                        \"using the -log argument\");", "+            } else if (arg.equals(\"-config\") || arg.equals(\"-c\")) {", "+                configFiles.add(new File(getOption(args, i++, arg)));", "-                try {", "-                    listeners.add(args[i++]);", "-                } catch (ArrayIndexOutOfBoundsException aioobe) {", "-                    System.err.println(\"You must specify a classname when \" +", "-                        \"using the -listener argument\");", "-                    return;", "-                }", "+                listeners.add(getOption(args, i++, arg));", "-                try {", "-                    loggerClassname = args[i++];", "-                } catch (ArrayIndexOutOfBoundsException aioobe) {", "-                    System.err.println(\"You must specify a classname when \" +", "-                        \"using the -logger argument\");", "-                    return;", "-                }", "+                loggerClassname = getOption(args, i++, arg);", "-                } else if (i < args.length - 1) {", "-                    value = args[++i];", "+                } else {", "+                    value = getOption(args, i++, arg);", "-                File ant1BuildFile =  new File(DEFAULT_ANT1_FILENAME);", "+                File ant1BuildFile = new File(DEFAULT_ANT1_FILENAME);"]}]}
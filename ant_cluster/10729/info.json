{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "db24f79909828b734811aaa0e322b070", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67b3de14ca3cc86f58c4fc04b848610d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "93db46be115205107729104e728d45687d885295", "commitAfterChange": "20ab59bff57796a67e1cdfefbc29826c7d55edba", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "      private void doReversibleTransformation()", "signatureAfterChange": "      private void doReversibleTransformation()", "diff": ["-        workLimit = workFactor * last;", "-        workDone = 0;", "-        blockRandomised = false;", "-        firstAttempt = true;", "+        m_workLimit = m_workFactor * m_last;", "+        m_workDone = 0;", "+        m_blockRandomised = false;", "+        m_firstAttempt = true;", "-        if( workDone > workLimit && firstAttempt )", "+        if( m_workDone > m_workLimit && m_firstAttempt )", "-            workLimit = workDone = 0;", "-            blockRandomised = true;", "-            firstAttempt = false;", "+            m_workLimit = m_workDone = 0;", "+            m_blockRandomised = true;", "+            m_firstAttempt = false;", "-        origPtr = -1;", "-        for( i = 0; i <= last; i++ )", "+        m_origPtr = -1;", "+        for( i = 0; i <= m_last; i++ )", "-            if( zptr[ i ] == 0 )", "+            if( m_zptr[ i ] == 0 )", "-                origPtr = i;", "+                m_origPtr = i;", "-        if( origPtr == -1 )", "+        if( m_origPtr == -1 )"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a0033385926b33b474d8d4b82c2f184", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "84c1b5f0378a357ba9cf75317fa1fa108247bbdf", "commitAfterChange": "e98db2e5116b7e208157f8c8064deb39ae5b583f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private void writeRun() throws IOException", "signatureAfterChange": "      private void writeRun() throws IOException", "diff": ["-        final int last = this.last;", "+        final int lastShadow = this.last;", "-        if (last < this.allowableBlockSize) {", "-            final int currentChar = this.currentChar;", "-            final Data data = this.data;", "-            data.inUse[currentChar] = true;", "-            final byte ch = (byte) currentChar;", "+        if (lastShadow < this.allowableBlockSize) {", "+            final int currentCharShadow = this.currentChar;", "+            final Data dataShadow = this.data;", "+            dataShadow.inUse[currentCharShadow] = true;", "+            final byte ch = (byte) currentCharShadow;", "-            int runLength = this.runLength;", "-            this.crc.updateCRC(currentChar, runLength);", "+            int runLengthShadow = this.runLength;", "+            this.crc.updateCRC(currentCharShadow, runLengthShadow);", "-            switch (runLength) {", "+            switch (runLengthShadow) {", "-                data.block[last + 2] = ch;", "-                this.last = last + 1;", "+                dataShadow.block[lastShadow + 2] = ch;", "+                this.last = lastShadow + 1;", "-                data.block[last + 2] = ch;", "-                data.block[last + 3] = ch;", "-                this.last = last + 2;", "+                dataShadow.block[lastShadow + 2] = ch;", "+                dataShadow.block[lastShadow + 3] = ch;", "+                this.last = lastShadow + 2;", "-                    final byte[] block = data.block;", "-                    block[last + 2] = ch;", "-                    block[last + 3] = ch;", "-                    block[last + 4] = ch;", "-                    this.last = last + 3;", "+                    final byte[] block = dataShadow.block;", "+                    block[lastShadow + 2] = ch;", "+                    block[lastShadow + 3] = ch;", "+                    block[lastShadow + 4] = ch;", "+                    this.last = lastShadow + 3;", "-                    runLength -= 4;", "-                    data.inUse[runLength] = true;", "-                    final byte[] block = data.block;", "-                    block[last + 2] = ch;", "-                    block[last + 3] = ch;", "-                    block[last + 4] = ch;", "-                    block[last + 5] = ch;", "-                    block[last + 6] = (byte) runLength;", "-                    this.last = last + 5;", "+                    runLengthShadow -= 4;", "+                    dataShadow.inUse[runLengthShadow] = true;", "+                    final byte[] block = dataShadow.block;", "+                    block[lastShadow + 2] = ch;", "+                    block[lastShadow + 3] = ch;", "+                    block[lastShadow + 4] = ch;", "+                    block[lastShadow + 5] = ch;", "+                    block[lastShadow + 6] = (byte) runLengthShadow;", "+                    this.last = lastShadow + 5;"]}]}
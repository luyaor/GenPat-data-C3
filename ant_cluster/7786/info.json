{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4f79faf8d531c263cad963444bf98b6a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "191ce5e7c3bb566ad46c899123c234b2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javac.java", "commitBeforeChange": "d9dc37613d9674bcd4caa399529317bdd41ac512", "commitAfterChange": "ba0d3f2a3e98523d8fd5a9c4e8e2005a901eadc0", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     protected Path getCompileClasspath(boolean addRuntime)", "signatureAfterChange": "     protected Path getCompileClasspath(boolean addRuntime)", "diff": ["-        // add our classpath to the mix", "+        // Compine the build classpath with the system classpath, in an ", "+        // order determined by the value of build.classpath", "-        if (compileClasspath != null) {", "-            classpath.addExisting(compileClasspath);", "+        if (compileClasspath == null) {", "+            classpath.addExisting(Path.systemClasspath);", "+        } else {", "+            String order = project.getProperty(\"build.sysclasspath\");", "+            if (order == null) order=\"first\";", "+", "+            if (order.equals(\"only\")) {", "+                // only: the developer knows what (s)he is doing", "+                classpath.addExisting(Path.systemClasspath);", "+", "+            } else if (order.equals(\"last\")) {", "+                // last: don't trust the developer", "+                classpath.addExisting(compileClasspath);", "+                classpath.addExisting(Path.systemClasspath);", "+", "+            } else if (order.equals(\"ignore\")) {", "+                // ignore: don't trust anyone", "+                classpath.addExisting(compileClasspath);", "+                addRuntime = true;", "+", "+            } else {", "+                // first: developer could use a little help", "+                classpath.addExisting(Path.systemClasspath);", "+                classpath.addExisting(compileClasspath);", "+            }", "-        // add the system classpath", "+        // optionally add the runtime classes", "-        classpath.addExisting(Path.systemClasspath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb03458e31483b3f9cbc4874903ae96a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/repository/HttpRepository.java", "commitBeforeChange": "c8203de650acea3fa8e0e1a6acce7425f5bbe322", "commitAfterChange": "7651d02856325bec057619d215ee30c4c605ee80", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public GetMethod createGet(String url)", "signatureAfterChange": "     public boolean get(URL url,File destFile,boolean useTimestamp,String user,String passwd)             throws IOException", "diff": ["-     */", "-    public GetMethod createGet(String url) {", "-        GetMethod method = new GetMethod(url);", "-", "-        method.setMethodRetryHandler(retryhandler);", "-        method.setDoAuthentication(true);", "-        method.setFollowRedirects(true);", "-", "-        return method;", "-    }", "+     */", "+    public boolean get(URL url,File destFile,boolean useTimestamp,String user,String passwd)", "+            throws IOException {", "+        Get getTask = new Get();", "+        getTask.setProject(getProject());", "+        getTask.setTaskName(\"dependencies\");", "+        getTask.setDest(destFile);", "+        getTask.setUsername(user);", "+        getTask.setPassword(passwd);", "+        getTask.setUseTimestamp(useTimestamp);", "+        getTask.setSrc(url);", "+        getTask.setIgnoreErrors(true);", "+        return getTask.doGet(Project.MSG_VERBOSE,null);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "44c17e01af4035c10e086177b3a44618", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93eebf6ae504360f41c5e5416e4f71f8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "2a713cc02adc21aa5bd5189c8a2718631e6f6a88", "commitAfterChange": "99067d060752e5a89c24d99c17b6eb7231f96380", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 29, "signatureBeforeChange": "      protected void buildMap(File fromDir, File toDir, String[] names,                             FileNameMapper mapper, Hashtable map)", "signatureAfterChange": "      protected void buildMap(File fromDir, File toDir, String[] names,                             FileNameMapper mapper, Hashtable map)", "diff": ["-            File dest = new File(toDir, mapper.mapFileName(toCopy[i])[0]);", "-            map.put(src.getAbsolutePath(), dest.getAbsolutePath());", "+", "+            String[] mappedFiles = mapper.mapFileName(toCopy[i]);", "+", "+            if (!enableMultipleMappings) {", "+                map.put(src.getAbsolutePath(),", "+                        new String[] {new File(toDir, mappedFiles[0]).getAbsolutePath()});", "+            } else {", "+                // reuse the array created by the mapper", "+                for (int k = 0; k < mappedFiles.length; k++) {", "+                    mappedFiles[k] = new File(toDir, mappedFiles[k]).getAbsolutePath();", "+                }", "+", "+                map.put(src.getAbsolutePath(), mappedFiles);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c47669716ac95cb1b70107bd60a8c420", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Project.java", "commitBeforeChange": "e713682ea69123ef5ca4935776b817a2b81645cf", "commitAfterChange": "695ce2ed1c7ffb7ce113fcdc05d12cd70abad525", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     public void addBuildListener(BuildListener listener)", "signatureAfterChange": "     public void addBuildListener(BuildListener listener)", "diff": ["-            if (listeners.contains(listener)) {", "-                return;", "+            for (int i = 0; i < listeners.length; i++) {", "+                if (listeners[i] == listener) {", "+                    return;", "+                }", "-            Vector newListeners = getBuildListeners();", "-            newListeners.addElement(listener);", "+            BuildListener[] newListeners = new BuildListener[listeners.length + 1];", "+            System.arraycopy(listeners, 0, newListeners, 0, listeners.length);", "+            newListeners[listeners.length] = listener;"]}]}
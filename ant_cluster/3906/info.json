{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "78f7f32586266f4d41da859e49a15838", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b22213ffda46b8a0e9c0bd4a381bc99", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Retry.java", "commitBeforeChange": "e49770109c81b4437dc3db2bd63533017b30357e", "commitAfterChange": "9d227828e93a14f326798f56de333341c72d443a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r     public void execute() throws BuildException", "signatureAfterChange": "\r     public void execute() throws BuildException", "diff": ["-        for(int i=0; i<=retryCount; i++) {\r", "+        String br = getProject().getProperty(\"line.separator\");\r", "+        for (int i = 0; i <= retryCount; i++) {\r", "-                if (i<retryCount) {\r", "-                    log(\"Attempt [\"+i+\"] error occured, retrying...\", e, Project.MSG_INFO);\r", "-                    errorMessages.append(e.getMessage());\r", "-                    errorMessages.append(getProject().getProperty(\"line.separator\"));\r", "-                } else {\r", "-                    errorMessages.append(e.getMessage());\r", "+                errorMessages.append(e.getMessage());\r", "+                if (i >= retryCount) {\r", "-                    exceptionMessage.append(\"] attempts, giving up.\");\r", "-                    exceptionMessage.append(getProject().getProperty(\"line.separator\"));\r", "-                    exceptionMessage.append(\"Error messages:\").append(getProject().getProperty(\"line.separator\"));\r", "+                    exceptionMessage.append(\"] attempts; giving up.\").append(br);\r", "+                    exceptionMessage.append(\"Error messages:\").append(br);\r", "+                log(\"Attempt [\" + i + \"]:  error occurred; retrying...\", e, Project.MSG_INFO);\r", "+                errorMessages.append(br);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc3e54f504372bc8bec85f94cae4e6f5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteOn.java", "commitBeforeChange": "767f4f57854f2a3285ef43583d0bb97be37f5399", "commitAfterChange": "95b658dec86bbd7866411b1df9b51250d1a8a0a9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      protected void runExec(Execute exe) throws BuildException", "signatureAfterChange": "      protected void runExec(Execute exe) throws BuildException", "diff": ["-            Vector v = new Vector();", "+                Vector v = new Vector();", "+                File base = fs.getDir(project);", "-                    String[] s = ds.getIncludedFiles();", "+                    String[] s = getFiles(base, ds);", "-                        v.addElement(new File(fs.getDir(project), s[j]).getAbsolutePath());", "+                        v.addElement(s[j]);", "-                    String[] s = ds.getIncludedDirectories();", "+                    String[] s = getDirs(base, ds);;", "-                        v.addElement(new File(fs.getDir(project), s[j]).getAbsolutePath());", "-                    }", "-                }", "-            }", "-", "-            String[] s = new String[v.size()];", "-            v.copyInto(s);", "-", "-            int err = -1;", "-", "-            if (parallel) {", "-                String[] command = getCommandline(s);", "-                log(\"Executing \" + Commandline.toString(command), Project.MSG_VERBOSE);", "-                exe.setCommandline(command);", "-                err = exe.execute();", "-                if (err != 0) {", "-                    if (failOnError) {", "-                        throw new BuildException(\"Exec returned: \"+err, ", "-                                                 location);", "-                    } else {", "-                        log(\"Result: \" + err, Project.MSG_ERR);", "+                        v.addElement(s[j]);", "-            } else {", "-                for (int i=0; i<s.length; i++) {", "-                    String[] command = getCommandline(s[i]);", "-                    log(\"Executing \" + Commandline.toString(command), Project.MSG_VERBOSE);", "+                String[] s = new String[v.size()];", "+                v.copyInto(s);", "+", "+                int err = -1;", "+                ", "+                if (parallel) {", "+                    String[] command = getCommandline(s, base);", "+                    log(\"Executing \" + Commandline.toString(command), ", "+                        Project.MSG_VERBOSE);", "+                        }", "+                    }", "+", "+                } else {", "+                    for (int j=0; j<s.length; j++) {", "+                        String[] command = getCommandline(s[j], base);", "+                        log(\"Executing \" + Commandline.toString(command), ", "+                            Project.MSG_VERBOSE);", "+                        exe.setCommandline(command);", "+                        err = exe.execute();", "+                        if (err != 0) {", "+                            if (failOnError) {", "+                                throw new BuildException(\"Exec returned: \"+err, ", "+                                                         location);", "+                            } else {", "+                                log(\"Result: \" + err, Project.MSG_ERR);", "+                            }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b5dcd00203e5bcc9300e786be59400c7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37af5111416601f2ce49ba1935086856", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/types/PathTest.java", "commitBeforeChange": "769fac83235a4c2fac00097cd26f201aa7eae534", "commitAfterChange": "a91adaf451abf4857fd8ce133757dfc3b433bf3f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void testConstructor()", "signatureAfterChange": "      public void testConstructorWindowsStyle()", "diff": ["-    public void testConstructor() {", "-        p = new Path(project, \"\\\\a;\\\\b\");", "-        l = p.list();", "+    public void testConstructorWindowsStyle() {", "+        Path p = new Path(project, \"\\\\a;\\\\b\");", "+        String[] l = p.list();", "-        }        ", "-", "-        p = new Path(project, \"\\\\a;\\\\b:/c\");", "-        l = p.list();", "-        assertEquals(\"three items, mixed style\", 3, l.length);", "-        if (isUnixStyle) {", "-            assertEquals(\"/a\", l[0]);", "-            assertEquals(\"/b\", l[1]);", "-            assertEquals(\"/c\", l[2]);", "-        } else if (isNetWare) {", "-            assertEquals(\"\\\\a\", l[0]);", "-            assertEquals(\"\\\\b\", l[1]);", "-            assertEquals(\"\\\\c\", l[2]);", "-        } else {", "-            assertEquals(\":\\\\a\", l[0].substring(1));", "-            assertEquals(\":\\\\b\", l[1].substring(1));", "-            assertEquals(\":\\\\c\", l[2].substring(1));", "+        p = new Path(project, \"c:\\\\test;d:\\\\programs\");", "+        l = p.list();", "+        if (isUnixStyle) {", "+            assertEquals(\"no drives on Unix\", 4, l.length);", "+            assertTrue(\"c resolved relative to project\\'s basedir\", ", "+                   l[0].endsWith(\"/c\"));", "+            assertEquals(\"/test\", l[1]);", "+            assertTrue(\"d resolved relative to project\\'s basedir\", ", "+                   l[2].endsWith(\"/d\"));", "+            assertEquals(\"/programs\", l[3]);", "+        } else if (isNetWare) {", "+            assertEquals(\"volumes on NetWare\", 2, l.length);", "+            assertEquals(\"c:\\\\test\", l[0].toLowerCase(Locale.US));", "+            assertEquals(\"d:\\\\programs\", l[1].toLowerCase(Locale.US));", "+        } else {", "+            assertEquals(\"drives on DOS\", 2, l.length);", "+            assertEquals(\"c:\\\\test\", l[0].toLowerCase(Locale.US));", "+            assertEquals(\"d:\\\\programs\", l[1].toLowerCase(Locale.US));", "+        }", "+", "+", "+        p = new Path(project, \"c:/test;d:/programs\");", "+        l = p.list();", "+        if (isUnixStyle) {", "+            assertEquals(\"no drives on Unix\", 4, l.length);", "+            assertTrue(\"c resolved relative to project\\'s basedir\", ", "+                   l[0].endsWith(\"/c\"));", "+            assertEquals(\"/test\", l[1]);", "+            assertTrue(\"d resolved relative to project\\'s basedir\", ", "+                   l[2].endsWith(\"/d\"));", "+            assertEquals(\"/programs\", l[3]);", "+        } else if (isNetWare) {", "+            assertEquals(\"volumes on NetWare\", 2, l.length);", "+            assertEquals(\"c:\\\\test\", l[0].toLowerCase(Locale.US));", "+            assertEquals(\"d:\\\\programs\", l[1].toLowerCase(Locale.US));", "+        } else {", "+            assertEquals(\"drives on DOS\", 2, l.length);", "+            assertEquals(\"c:\\\\test\", l[0].toLowerCase(Locale.US));", "+            assertEquals(\"d:\\\\programs\", l[1].toLowerCase(Locale.US));", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d8c1669fb15b22d957059068a0cf558", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/util/FileUtilsTest.java", "commitBeforeChange": "ef606c34138dc742a6c3e2f1322a1ab89f21044a", "commitAfterChange": "f334365459cf908a8d2fa4ba634a670f1568486c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void testNormalize()", "signatureAfterChange": "      public void testNormalize()", "diff": ["-        /*", "-         * throw in drive letters", "-         */", "-        String driveSpec = \"C:\";", "-        assertEquals(driveSpec,", "-                     FILE_UTILS.normalize(driveSpec).getPath());", "-        assertEquals(driveSpec + \"\\\\\",", "-                     FILE_UTILS.normalize(driveSpec + \"/\").getPath());", "-        assertEquals(driveSpec + \"\\\\\",", "-                     FILE_UTILS.normalize(driveSpec + \"\\\\\").getPath());", "-        String driveSpecLower = \"c:\";", "-        assertEquals(driveSpec + \"\\\\\",", "-                     FILE_UTILS.normalize(driveSpecLower + \"/\").getPath());", "-        assertEquals(driveSpec + \"\\\\\",", "-                     FILE_UTILS.normalize(driveSpecLower + \"\\\\\").getPath());", "-        /*", "-         * promised to eliminate consecutive slashes after drive letter.", "-         */", "-        assertEquals(driveSpec + \"\\\\\",", "-                     FILE_UTILS.normalize(driveSpec + \"/////\").getPath());", "-        assertEquals(driveSpec + \"\\\\\",", "-                     FILE_UTILS.normalize(driveSpec + \"\\\\\\\\\\\\\\\\\\\\\\\\\").getPath());", "-", "-        if (Os.isFamily(\"netware\")) {", "+        if (Os.isFamily(\"dos\")) {", "+            /*", "+             * throw in drive letters", "+             */", "+            String driveSpec = \"C:\";", "+            assertEquals(driveSpec,", "+                         FILE_UTILS.normalize(driveSpec).getPath());", "+            assertEquals(driveSpec + \"\\\\\",", "+                         FILE_UTILS.normalize(driveSpec + \"/\").getPath());", "+            assertEquals(driveSpec + \"\\\\\",", "+                         FILE_UTILS.normalize(driveSpec + \"\\\\\").getPath());", "+            String driveSpecLower = \"c:\";", "+            assertEquals(driveSpec + \"\\\\\",", "+                         FILE_UTILS.normalize(driveSpecLower + \"/\").getPath());", "+            assertEquals(driveSpec + \"\\\\\",", "+                         FILE_UTILS.normalize(driveSpecLower + \"\\\\\").getPath());", "+            /*", "+             * promised to eliminate consecutive slashes after drive letter.", "+             */", "+            assertEquals(driveSpec + \"\\\\\",", "+                         FILE_UTILS.normalize(driveSpec + \"/////\").getPath());", "+            assertEquals(driveSpec + \"\\\\\",", "+                         FILE_UTILS.normalize(driveSpec + \"\\\\\\\\\\\\\\\\\\\\\\\\\").getPath());", "+        } else if (Os.isFamily(\"netware\")) {", "-            driveSpec = \"SYS:\";", "+            String driveSpec = \"SYS:\";", "-            driveSpecLower = \"sys:\";", "+            String driveSpecLower = \"sys:\";", "+        } else {", "+            try {", "+                String driveSpec = \"C:\";", "+                assertEquals(driveSpec,", "+                             FILE_UTILS.normalize(driveSpec).getPath());", "+                fail(\"Expected failure, C: isn't an absolute path on other os's\");", "+            } catch (BuildException e) {", "+                // Passed test ", "+            }"]}]}
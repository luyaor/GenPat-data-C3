{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da5f03b703367dab576ddd5260fc490e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "448782fe178c0b65e54a3783b859e14f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Cvs.java", "commitBeforeChange": "44b170125dfa5ee3189c220a433f2c48a4338727", "commitAfterChange": "5c39c18686cb56e64fcf3098a637c1399030865d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "        public void execute() throws BuildException", "signatureAfterChange": "          public Cvs()", "diff": ["-", "-    public void execute() throws BuildException {", "-", "-        // XXX: we should use JCVS (www.ice.com/JCVS) instead of command line", "-        // execution so that we don't rely on having native CVS stuff around (SM)", "-", "-        // We can't do it ourselves as jCVS is GPLed, a third party task ", "-        // outside of jakarta repositories would be possible though (SB).", "-    ", "-        Commandline toExecute = new Commandline();", "-", "-        toExecute.setExecutable(\"cvs\");", "-        if (cvsRoot != null) { ", "-            toExecute.createArgument().setValue(\"-d\");", "-            toExecute.createArgument().setValue(cvsRoot);", "-        }", "-        if (noexec) {", "-            toExecute.createArgument().setValue(\"-n\");", "-        }", "-        if (quiet) {", "-            toExecute.createArgument().setValue(\"-q\");", "-        }", "-        toExecute.createArgument().setLine(command);", "-        toExecute.addArguments(cmd.getCommandline());", "-", "-        if (pack != null) {", "-            toExecute.createArgument().setLine(pack);", "-        }", "-", "-        Environment env = new Environment();", "-", "-        if(port>0){", "-            Environment.Variable var = new Environment.Variable();", "-            var.setKey(\"CVS_CLIENT_PORT\");", "-            var.setValue(String.valueOf(port));", "-            env.addVariable(var);", "-        }", "-", "-        if(passFile!=null){", "-            Environment.Variable var = new Environment.Variable();", "-            var.setKey(\"CVS_PASSFILE\");", "-            var.setValue(String.valueOf(passFile));", "-            env.addVariable(var);", "-        }", "-", "-        if(cvsRsh!=null){", "-            Environment.Variable var = new Environment.Variable();", "-            var.setKey(\"CVS_RSH\");", "-            var.setValue(String.valueOf(cvsRsh));", "-            env.addVariable(var);", "-        }", "-", "-        ExecuteStreamHandler streamhandler = null;", "-        OutputStream outputstream = null;", "-        OutputStream errorstream = null;", "-        if (error == null && output == null) {", "-            streamhandler = new LogStreamHandler(this, Project.MSG_INFO,", "-                                                 Project.MSG_WARN);", "-        }", "-        else {", "-            if (output != null) {", "-                try {", "-                    outputstream = new PrintStream(new BufferedOutputStream(new FileOutputStream(output.getPath(), append)));", "-                } catch (IOException e) {", "-                    throw new BuildException(e, location);", "-                }", "-            }", "-            else {", "-                outputstream = new LogOutputStream(this, Project.MSG_INFO);", "-            }", "-            if (error != null) {", "-                try {", "-                    errorstream = new PrintStream(new BufferedOutputStream(new FileOutputStream(error.getPath(), append)));", "-                } catch (IOException e) {", "-                    throw new BuildException(e, location);", "-                }", "-            }", "-            else {", "-                errorstream = new LogOutputStream(this, Project.MSG_WARN);", "-            }", "-            streamhandler = new PumpStreamHandler(outputstream, errorstream);", "-        }", "-", "-        Execute exe = new Execute(streamhandler,", "-                                  null);", "-", "-        exe.setAntRun(project);", "-        if (dest == null) {", "-          dest = project.getBaseDir();", "-        }", "-        exe.setWorkingDirectory(dest);", "-", "-        exe.setCommandline(toExecute.getCommandline());", "-        exe.setEnvironment(env.getVariables());", "-        try {", "-            int retCode = exe.execute();", "-            /*Throw an exception if cvs exited with error. (Iulian)*/", "-            if(failOnError && retCode != 0) {", "-                throw new BuildException(\"cvs exited with error code \"+ retCode);", "-            }", "-        } catch (IOException e) {", "-            throw new BuildException(e, location);", "-        } finally {", "-            if (output != null) {", "-                try {", "-                    outputstream.close();", "-                } catch (IOException e) {}", "-            }", "-            if (error != null) {", "-                try {", "-                    errorstream.close();", "-                } catch (IOException e) {}", "-            }", "-        }", "-    }", "+    public Cvs(){", "+     ", "+        setTaskName(\"cvs\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc1393d48f92a38b3831f75dcbf66e4a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/cvslib/Cvs.java", "commitBeforeChange": "7e3a3c6b31d98e0670eafa58b20215808105ddaf", "commitAfterChange": "1a19815b52a418a3fb1c4979bb269ef6626a07a9", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 11, "signatureBeforeChange": "      public void execute()         throws TaskException", "signatureAfterChange": "      public void execute()         throws TaskException", "diff": ["-        // XXX: we should use JCVS (www.ice.com/JCVS) instead of command line", "-        // execution so that we don't rely on having native CVS stuff around (SM)", "+        final Commandline command = buildCommandline();", "+        final Environment env = buildEnvironment();", "-        // We can't do it ourselves as jCVS is GPLed, a third party task", "-        // outside of jakarta repositories would be possible though (SB).", "+        //FIXME:", "+        ExecuteStreamHandler streamhandler =", "+            new LogStreamHandler( null, Project.MSG_INFO, Project.MSG_WARN );", "-        Commandline toExecute = new Commandline();", "+        final Execute exe = new Execute( streamhandler, null );", "+        if( m_dest == null ) m_dest = getBaseDirectory();", "+        exe.setWorkingDirectory( m_dest );", "-        toExecute.setExecutable( \"cvs\" );", "-        if( cvsRoot != null )", "-        {", "-            toExecute.createArgument().setValue( \"-d\" );", "-            toExecute.createArgument().setValue( cvsRoot );", "-        }", "-        if( noexec )", "-        {", "-            toExecute.createArgument().setValue( \"-n\" );", "-        }", "-        if( quiet )", "-        {", "-            toExecute.createArgument().setValue( \"-q\" );", "-        }", "-        toExecute.createArgument().setLine( command );", "-        toExecute.addArguments( cmd.getCommandline() );", "-", "-        if( pack != null )", "-        {", "-            toExecute.createArgument().setLine( pack );", "-        }", "-", "-        Environment env = new Environment();", "-", "-        if( port > 0 )", "-        {", "-            Environment.Variable var = new Environment.Variable();", "-            var.setKey( \"CVS_CLIENT_PORT\" );", "-            var.setValue( String.valueOf( port ) );", "-            env.addVariable( var );", "-        }", "-", "-        if( passFile != null )", "-        {", "-            Environment.Variable var = new Environment.Variable();", "-            var.setKey( \"CVS_PASSFILE\" );", "-            var.setValue( String.valueOf( passFile ) );", "-            env.addVariable( var );", "-        }", "-", "-        if( cvsRsh != null )", "-        {", "-            Environment.Variable var = new Environment.Variable();", "-            var.setKey( \"CVS_RSH\" );", "-            var.setValue( String.valueOf( cvsRsh ) );", "-            env.addVariable( var );", "-        }", "-", "-        ExecuteStreamHandler streamhandler = null;", "-        OutputStream outputstream = null;", "-        OutputStream errorstream = null;", "-        if( error == null && output == null )", "-        {", "-            streamhandler = new LogStreamHandler( this, Project.MSG_INFO,", "-                                                  Project.MSG_WARN );", "-        }", "-        else", "-        {", "-            if( output != null )", "-            {", "-                try", "-                {", "-                    outputstream = new PrintStream( new BufferedOutputStream( new FileOutputStream( output ) ) );", "-                }", "-                catch( IOException e )", "-                {", "-                    throw new TaskException( e.toString(), e );", "-                }", "-            }", "-            else", "-            {", "-                outputstream = new LogOutputStream( this, Project.MSG_INFO );", "-            }", "-            if( error != null )", "-            {", "-                try", "-                {", "-                    errorstream = new PrintStream( new BufferedOutputStream( new FileOutputStream( error ) ) );", "-                }", "-                catch( IOException e )", "-                {", "-                    throw new TaskException( e.toString(), e );", "-                }", "-            }", "-            else", "-            {", "-                errorstream = new LogOutputStream( this, Project.MSG_WARN );", "-            }", "-            streamhandler = new PumpStreamHandler( outputstream, errorstream );", "-        }", "-", "-        Execute exe = new Execute( streamhandler,", "-                                   null );", "-", "-        exe.setAntRun( project );", "-        if( dest == null ) dest = getBaseDirectory();", "-        exe.setWorkingDirectory( dest );", "-", "-        exe.setCommandline( toExecute.getCommandline() );", "+        exe.setCommandline( command.getCommandline() );", "-            int retCode = exe.execute();", "-            /*", "-             * Throw an exception if cvs exited with error. (Iulian)", "-             */", "-            if( failOnError && retCode != 0 )", "+            final int retCode = exe.execute();", "+            if( retCode != 0 )", "+            {", "+                //replace with an ExecuteException(message,code);", "+            }", "-        finally", "+    }", "-            if( output != null )", "-            {", "-                try", "-                {", "-                    outputstream.close();", "-                }", "-                catch( IOException e )", "-                {", "-                }", "-            }", "-            if( error != null )", "-            {", "-                try", "-                {", "-                    errorstream.close();", "-                }", "-                catch( IOException e )", "-                {", "-                }", "-            }"]}]}
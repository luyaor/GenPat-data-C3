{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ecd89567793a0d9583dfe8e978710ebc", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "096c86fc69f0f18b9be2c326a402f249", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/embeddor/DefaultEmbeddor.java", "commitBeforeChange": "c7e6b6c8d782d04c8f7a2406938567b36f29873d", "commitAfterChange": "f26fff422c8ac77a5ca16ca226529fbed7630621", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public ProjectBuilder getProjectBuilder()", "signatureAfterChange": "      public Project createProject( final String location,                                    final String type,                                    final Parameters parameters )         throws Exception", "diff": ["-     */", "-    public ProjectBuilder getProjectBuilder()", "+    public Project createProject( final String location, ", "+                                  final String type, ", "+                                  final Parameters parameters )", "+        throws Exception", "-        return m_builder;", "+        return m_builder.build( location );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1da979f0b9b04a8c3c6e57a39fa6d860", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/BuildEventSupport.java", "commitBeforeChange": "e0fef5cf64773a98734998b9736ded96fc8be2c7", "commitAfterChange": "81c17b6164451315e24ae774f1bed668cbca99ce", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void forwardEvent(BuildEvent event)", "signatureAfterChange": "     public void fireMessageLogged(ModelElement element,                                   String message, int priority)", "diff": ["-     */", "-    public void forwardEvent(BuildEvent event) {", "-        for (Iterator i = listeners.iterator(); i.hasNext(); ) {", "-            BuildListener listener = (BuildListener)i.next();", "-", "-            listener.processBuildEvent(event);", "-        }", "-    }", "+        for (Iterator i = listeners.iterator(); i.hasNext(); ) {", "+            BuildListener listener = (BuildListener)i.next();", "+            listener.messageLogged(event);", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d5f8ebe9f9a23ba8ea8d98a0ef4a03a3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "836e091ad4cc094541bc6696d2e12353", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/util/regexp/RegexpMatcherTest.java", "commitBeforeChange": "b436d9ec5e1d6025d26b1da85769994e387646d4", "commitAfterChange": "e0c5a1f097d74e51109bc095bb09f946d4ea48e5", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 13, "signatureBeforeChange": "      public void testMultiVersusSingleLine() throws IOException", "signatureAfterChange": "       public void testMultiVersusSingleLine() throws IOException", "diff": ["+", "-        StringWriter swr = new StringWriter();", "-        PrintWriter p = new PrintWriter(swr);", "-        p.println(\"Line1\");", "-        p.println(\"starttest Line2\");", "-        p.println(\"Line3 endtest\");", "-        p.println(\"Line4\");", "-        p.close();", "-        String text = swr.toString();", "+        StringBuffer buf = new StringBuffer();", "+        buf.append(\"Line1\").append(UNIX_LINE);", "+        buf.append(\"starttest Line2\").append(UNIX_LINE);", "+        buf.append(\"Line3 endtest\").append(UNIX_LINE);", "+        buf.append(\"Line4\").append(UNIX_LINE);", "+        String text = buf.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e36172df76c070e8d24afcfc09fc32a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/tasklet/engine/DefaultTaskletEngine.java", "commitBeforeChange": "66c74a2fceee359d38138fb601c1b639e99fb17d", "commitAfterChange": "19600e6d005c8bebbf6697bd00516e843f0a34f4", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void init()         throws Exception", "signatureAfterChange": "      public void init()         throws Exception", "diff": ["-", "+        m_taskletRegistry = createTaskletRegistry();", "-        m_converterFactory =  createConverterFactory();", "-        m_configurer = createTaskletConfigurer();", "-        if( m_configurer instanceof Composer )", "+        m_converterEngine = createConverterEngine();", "+        m_converterEngine.setLogger( m_logger );", "+        setupSubComponent( m_converterEngine );", "+", "+        m_configurer = createTaskletConfigurer();", "+        setupSubComponent( m_configurer );", "+", "+        m_tskDeployer = createTskDeployer();", "+        m_tskDeployer.setLogger( m_logger );", "+        setupSubComponent( m_tskDeployer );", "+    }", "-            componentManager.put( \"org.apache.ant.convert.ConverterFactory\", ", "-                                  m_converterFactory );", "-            componentManager.put( \"org.apache.ant.convert.ConverterRegistry\",", "-                                  m_converterRegistry );", "-            ((Composer)m_configurer).compose( componentManager );", "-", "-        if( m_configurer instanceof Initializable )", "-            ((Initializable)m_configurer).init();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6ad4b9a16350fd3153be60d1a1b39f1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/junit/src/main/org/apache/tools/ant/taskdefs/optional/junit/remote/MessageWriter.java", "commitBeforeChange": "48a9017850dc1a302304a057ad05640175a2dd15", "commitAfterChange": "626c685b1dd04334dcdebcdaa39f5f438a51be2e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "      public void notifySystemProperties()", "signatureAfterChange": "      public void notifySystemProperties()", "diff": ["-            ByteArrayOutputStream out = new ByteArrayOutputStream();", "-            ObjectOutputStream oos = new ObjectOutputStream(out);", "-            oos.writeObject(System.getProperties());", "-            oos.close();", "-            String msg = new String(Base64.encode(out.toByteArray()));", "-            sendMessage(MessageIds.PROPS_START + msg + MessageIds.PROPS_END);", "-        } catch (IOException e){", "+            StringBuffer msg = new StringBuffer(512);", "+            msg.append(MessageIds.PROPS_START);", "+            byte[] data = SocketUtil.serialize(System.getProperties());", "+            msg.append(Base64.encode(data));", "+            msg.append(MessageIds.PROPS_END);", "+            sendMessage(msg.toString());", "+        } catch (Exception e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec13cae74c1a3ad19e97ab6ed8554b4b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Checksum.java", "commitBeforeChange": "6c2201f3094a0733e3e2caa7998cf260b61a3eb3", "commitAfterChange": "0f723fa82a38431c93baa7b8f102a79200b7f620", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private boolean generateChecksums() throws BuildException", "signatureAfterChange": "     private boolean generateChecksums() throws BuildException", "diff": ["-                            fis = new FileInputStream(existingFile);", "-                            InputStreamReader isr = new InputStreamReader(fis);", "-                            BufferedReader br = new BufferedReader(isr);", "-                            String suppliedChecksum = br.readLine();", "-                            fis.close();", "-                            fis = null;", "-                            br.close();", "-                            isr.close();", "-                            checksumMatches = checksumMatches", "-                                && checksum.equals(suppliedChecksum);", "+                            try {", "+                                String suppliedChecksum = ", "+                                    readChecksum(existingFile);", "+                                checksumMatches = checksumMatches", "+                                    && checksum.equals(suppliedChecksum);", "+                            } catch (BuildException be) {", "+                                // file is on wrong format, swallow", "+                                checksumMatches = false;", "+                            }", "-                        fos.write(checksum.getBytes());", "+                        fos.write(format.format(new Object[] {", "+                                                    checksum,", "+                                                    src.getName(),", "+                                                }).getBytes());", "+                        fos.write(StringUtils.LINE_SEP.getBytes());"]}]}
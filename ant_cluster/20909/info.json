{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b9c3e0a1f4882c0023ccd5b2c20e6f08", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5fb275161f48b5fabba4ba2a8bcb728", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ExecutionFrame.java", "commitBeforeChange": "7499c443d67445ea8fd0b8f4bd56c72251b18bf4", "commitAfterChange": "b7e43ad8c5906ae2b6d6b42f8b2715dc7d2e7a16", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 32, "signatureBeforeChange": "     private void addLibraryConverters(AntLibrary library)          throws ConfigException", "signatureAfterChange": "     private void addLibraryConverters(AntLibrary library)          throws ExecutionException", "diff": ["-         throws ConfigException {", "+         throws ExecutionException {", "+            AntLibFactory libFactory = getLibFactory(library);", "-                    throw new ConfigException(\"The converter class \"", "+                    throw new ExecutionException(\"In Ant library \\\"\"", "+                         + library.getLibraryId() + \"\\\" the converter class \"", "-                Converter converter = (Converter)converterClass.newInstance();", "-                ExecutionContext context = new ExecutionContext();", "-                context.initEnvironment(this, eventSupport);", "+                Converter converter", "+                     = libFactory.createConverter(converterClass);", "+                ExecutionContext context", "+                     = new ExecutionContext(this, eventSupport);", "-            throw new ConfigException(\"Converter Class \" + className", "-                 + \" was not found\", e);", "+            throw new ExecutionException(\"In Ant library \\\"\"", "+                 + library.getLibraryId() + \"\\\" converter class \"", "+                 + className + \" was not found\", e);", "-            throw new ConfigException(\"Could not load a dependent class (\"", "+            throw new ExecutionException(\"In Ant library \\\"\"", "+                 + library.getLibraryId()", "+                 + \"\\\" could not load a dependent class (\"", "-            throw new ConfigException(\"Unable to instantiate converter class \"", "+            throw new ExecutionException(\"In Ant library \\\"\"", "+                 + library.getLibraryId()", "+                 + \"\\\" unable to instantiate converter class \"", "-            throw new ConfigException(\"Unable to access converter class \"", "+            throw new ExecutionException(\"In Ant library \\\"\"", "+                 + library.getLibraryId()", "+                 + \"\\\" unable to access converter class \""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da890b63680bd61e670889ed72695dd0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "46330b41c1a0cd642c895b8ff39ab295a3519ca4", "commitAfterChange": "f42a96f3046b6a665f9755123c9f7939e53737ba", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void configureObject( final Object object,                                   final Configuration configuration,                                   final Context context )         throws ConfigurationException", "signatureAfterChange": "     private void configureObject( final Object object,                                   final Configuration configuration,                                   final Context context )         throws Exception", "diff": ["-        throws ConfigurationException", "+        throws Exception", "+            // Start configuration of the object", "-", "-            // Locate the configurer for this object", "-", "-            // Start configuring this object", "-                    throw new ConfigurationException( message, nspe );", "-                }", "-                catch( final ConfigurationException ce )", "-                {", "-                    throw ce;", "+                    throw new ReportableConfigurationException( message, nspe );", "-                    throw new ConfigurationException( message, ce );", "+                    throw new ReportableConfigurationException( message, ce );", "-                    final PropertyConfigurer contentConfigurer = state.getConfigurer().getContentConfigurer();", "-                    setValue( contentConfigurer, state, content, context );", "+                    setContent( state, content, context );", "-                    throw new ConfigurationException( message, nspe );", "-                }", "-                catch( final ConfigurationException ce )", "-                {", "-                    throw ce;", "+                    throw new ReportableConfigurationException( message );", "-                    throw new ConfigurationException( message, ce );", "+                    throw new ReportableConfigurationException( message, ce );", "-                    throw new ConfigurationException( message, nspe );", "+                    throw new ReportableConfigurationException( message, nspe );", "-                catch( final ConfigurationException ce )", "+                catch( final ReportableConfigurationException ce )", "-                        REZ.getString( \"bad-set-element.error\", elemName, name );", "-                    throw new ConfigurationException( message, ce );", "+                        REZ.getString( \"bad-configure-element.error\", name );", "+                    throw new ReportableConfigurationException( message, ce );"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e03b9dcda1e2d2bb07589106554da44", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e2573cfb42468875d3423be12aca767", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/XMLCatalogTest.java", "commitBeforeChange": "336c1beb219da09734b237ab6f7f0e56b14ae7b3", "commitAfterChange": "2d1ac70e3bebee7b64ccf4a926371095df00666c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public void testNonExistentEntry()", "signatureAfterChange": "      public void testNonExistentEntry()", "diff": ["-            String resultStr = new URL(((SAXSource)result).getInputSource().getSystemId()).getFile();", "-            assertTrue(\"Nonexistent Catalog entry return input\",", "+            String resultStr =", "+                fileURLPartWithoutLeadingSlashes((SAXSource)result);", "+            assertTrue(\"Nonexistent Catalog entry return input with a system ID like \"", "+                       + expected + \" but was \" + resultStr,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "237f49620e85578f6e587842e657a37e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/XMLCatalogTest.java", "commitBeforeChange": "336c1beb219da09734b237ab6f7f0e56b14ae7b3", "commitAfterChange": "2d1ac70e3bebee7b64ccf4a926371095df00666c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void testEmptyCatalog()", "signatureAfterChange": "     public void testEmptyCatalog()", "diff": ["-           //", "-           // These shenanigans are necessary b/c Norm Walsh's resolver", "-           // has a different idea of how file URLs are created on windoze", "-           // ie file://c:/foo instead of file:///c:/foo", "-           //", "-           String resultStr = new URL(((SAXSource)result).getInputSource().getSystemId()).getFile();", "-           assertTrue(\"Empty catalog should return input\",", "+           String resultStr =", "+               fileURLPartWithoutLeadingSlashes((SAXSource)result);", "+           assertTrue(\"Empty catalog should return input with a system ID like \"", "+                      + expected + \" but was \" + resultStr,"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "49c0a6891f99feada1387f35866418b8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "097ffbb120f9c837f5ebaddc3b27e675", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/antlib/src/main/org/apache/tools/ant/SymbolTable.java", "commitBeforeChange": "1d2784e6d5429505b3b420e342992c22cd5373a6", "commitAfterChange": "6252354506953777f5b921b8746a54e7d317475a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 10, "signatureBeforeChange": "     void checkClass(final Class clz)  \tthrows BuildException", "signatureAfterChange": "     Factory checkClass(final Class clz)         throws BuildException", "diff": ["-    void checkClass(final Class clz) ", "-\tthrows BuildException {", "+    Factory checkClass(final Class clz) // Package on purpose", "+        throws BuildException {", "+        if (clz == null) return null;", "+", "-            // Class can have a \"no arg\" constructor or take a single ", "+            // Class can have a \"no arg\" constructor or take a single", "+                return new Factory(){", "+                        public Object create(Project p) {", "+                            try {", "+                                return clz.newInstance();", "+                            }", "+                            catch(Exception e) {", "+                                throw new BuildException(e);", "+                            }", "+                        }", "+", "+                        public Class getOriginalClass() {", "+                            return clz;", "+                        }", "+                    };", "-                clz.getConstructor(new Class[] {Project.class});", "+                final Constructor c =", "+                    clz.getConstructor(new Class[] {Project.class});", "+                return new Factory(){", "+                        public Object create(Project p) {", "+                            try {", "+                                return c.newInstance(new Object[]{p});", "+                            }", "+                            catch(Exception e) {", "+                                throw new BuildException(e);", "+                            }", "+                        }", "+", "+                        public Class getOriginalClass() {", "+                            return clz;", "+                        }", "+                    };", "-            final String message = ", "-\t\t\"No valid public constructor in \" + clz;", "+            final String message = \"No valid public constructor in \" + clz;", "+        }", "+        catch (NoClassDefFoundError ncdfe) {", "+            final String msg = \"Class cannot be loaded: \" + ncdfe.getMessage();", "+            throw new BuildException(msg, ncdfe);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bccce8acbea51460b767e93bc9db79f5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/antlib/src/main/org/apache/tools/ant/SymbolTable.java", "commitBeforeChange": "2bcc3b328adcc97c10be2efba1077ccf28b92caa", "commitAfterChange": "4ad59f0fc5eb69936f4322c1394993d33299959b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 10, "signatureBeforeChange": "     void checkClass(final Class clz)  \tthrows BuildException", "signatureAfterChange": "     Factory checkClass(final Class clz) \tthrows BuildException", "diff": ["-    void checkClass(final Class clz) ", "+    Factory checkClass(final Class clz) // Package on purpose", "+\tif (clz == null) return null;", "+", "+\t\treturn new Factory(){", "+\t\t\tpublic Object create(Project p) {", "+\t\t\t    try {", "+\t\t\t\treturn clz.newInstance();", "+\t\t\t    }", "+\t\t\t    catch(Exception e) {", "+\t\t\t\tthrow new BuildException(e);", "+\t\t\t    }", "+\t\t\t}", "+", "+\t\t\tpublic Class getOriginalClass() {", "+\t\t\t    return clz;", "+\t\t\t}", "+\t\t    };", "-                clz.getConstructor(new Class[] {Project.class});", "+                final Constructor c = ", "+\t\t    clz.getConstructor(new Class[] {Project.class});", "+\t\treturn new Factory(){", "+\t\t\tpublic Object create(Project p) {", "+\t\t\t    try {", "+\t\t\t\treturn c.newInstance(new Object[]{p});", "+\t\t\t    }", "+\t\t\t    catch(Exception e) {", "+\t\t\t\tthrow new BuildException(e);", "+\t\t\t    }", "+\t\t\t}", "+", "+\t\t\tpublic Class getOriginalClass() {", "+\t\t\t    return clz;", "+\t\t\t}", "+\t\t    };"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d66ce960ab33fef0e36f6d33c2786db2", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09d325a49b39df5fe223085e3a38198d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/CoreExecService.java", "commitBeforeChange": "37fe632d837d518878c90f674153a6b7cd5adcfd", "commitAfterChange": "7fe322a2163dc184ea0223ca656de6c244985c87", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void runBuild(File antFile, Map properties, List targets)          throws ExecutionException", "signatureAfterChange": "     public Object setupBuild(File antFile, Map properties)          throws ExecutionException", "diff": ["-     */", "-    public void runBuild(File antFile, Map properties, List targets)", "-         throws ExecutionException {", "-        try {", "-            // Parse the build file into a project", "-            XMLProjectParser parser = new XMLProjectParser();", "-            Project project", "-                 = parser.parseBuildFile(InitUtils.getFileURL(antFile));", "-            runBuild(project, properties, targets);", "-        } catch (MalformedURLException e) {", "-            throw new ExecutionException(e);", "-        } catch (XMLParseException e) {", "-            throw new ExecutionException(e);", "-        }", "-    }", "+     */", "+    public Object setupBuild(File antFile, Map properties)", "+         throws ExecutionException {", "+        try {", "+            // Parse the build file into a project", "+            XMLProjectParser parser = new XMLProjectParser();", "+            Project project", "+                 = parser.parseBuildFile(InitUtils.getFileURL(antFile));", "+", "+            return setupBuild(project, properties);", "+        } catch (MalformedURLException e) {", "+            throw new ExecutionException(e);", "+        } catch (XMLParseException e) {", "+            throw new ExecutionException(e);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87517863ece2cfd05ac6e016c1cf6e47", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/input/src/main/org/apache/tools/ant/input/PropertyFileInputHandler.java", "commitBeforeChange": "6b61cb14f38a03ce9d2d7c0408ac47e35a984387", "commitAfterChange": "fdcbd434d8c5cb90bd0c7a98acd9a3f26a0e20fa", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private void readProps() throws BuildException", "signatureAfterChange": "      private synchronized void readProps() throws BuildException", "diff": ["-    private void readProps() throws BuildException {", "-        String propsFile = System.getProperty(\"input.properties\");", "-        if (propsFile == null) {", "-            throw new BuildException(\"System property input.properties for PropertyFileInputHandler not set\");", "-        }", "-        ", "-        props = new Properties();", "-        ", "-        try {", "-            props.load(new FileInputStream(propsFile));", "-        } catch (IOException e) {", "-            throw new BuildException(\"Couldn't load \"+propsFile, e);", "+    private synchronized void readProps() throws BuildException {", "+        if (props == null) {", "+            String propsFile = System.getProperty(FILE_NAME_KEY);", "+            if (propsFile == null) {", "+                throw new BuildException(\"System property \"", "+                                         + FILE_NAME_KEY", "+                                         + \" for PropertyFileInputHandler not set\");", "+            }", "+            ", "+            props = new Properties();", "+            ", "+            try {", "+                props.load(new FileInputStream(propsFile));", "+            } catch (IOException e) {", "+                throw new BuildException(\"Couldn't load \"+propsFile, e);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eac361d0a806faf9d6bda604e9506aa6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/types/SysProperties.java", "commitBeforeChange": "7513ab1efa12321b3e2014764bfb23d16b425caf", "commitAfterChange": "299ea801bc1031e308bfe07a22e51edd1b972872", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void setSystem()         throws TaskException", "signatureAfterChange": "     public synchronized static void setSystem( final Map properties )         throws TaskException", "diff": ["-    public void setSystem()", "-        throws TaskException", "-        try", "-        {", "-            Properties p = new Properties( m_system = System.getProperties() );", "-", "-            for( Iterator e = m_variables.iterator(); e.hasNext(); )", "-            {", "-                EnvironmentVariable v = (EnvironmentVariable)e.next();", "-                p.put( v.getKey(), v.getValue() );", "-            }", "-            System.setProperties( p );", "-        }", "-        catch( SecurityException e )", "-        {", "-            throw new TaskException( \"Cannot modify system properties\", e );", "-        }", "+     */", "+    public synchronized static void setSystem( final Map properties )", "+        throws TaskException", "+        if( properties.size() == 0 )", "+        {", "+            return;", "+        }", "+        if( m_system != null )", "+        {", "+            throw new TaskException( \"System properties have not been restored.\" );", "+        }", "+", "+        final Properties sysProps;", "+            sysProps = System.getProperties();", "+            Properties allProps = new Properties( sysProps );", "+            allProps.putAll( properties );", "+            System.setProperties( allProps );", "+        catch( final SecurityException e )", "+            throw new TaskException( \"Cannot modify system properties.\", e );", "+", "+        m_system = sysProps;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef4612472aee392ba35e589346700cec", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/starteam/TreeBasedTask.java", "commitBeforeChange": "837f7ef785e24137608ba41f850d605b23bccff4", "commitAfterChange": "23e61358c8ed2aa3fe63c1f67082150047f1df9e", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 25, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public final void execute() throws BuildException", "diff": ["-    public void execute() throws BuildException {", "-            testPreconditions();", "-", "-            Folder starteamrootfolder =", "-            if (null == starteamrootfolder) {", "-                throw new BuildException(", "-                        \"Unable to find root folder in repository.\");", "-            }", "+", "+    public final void execute() throws BuildException {", "+        try {", "+            testPreconditions();", "+", "+            Folder starteamrootfolder = configureRootStarteamFolder();", "-            java.io.File localrootfolder;", "-            if (null == this.rootLocalFolder) {", "-                // use Star Team's default", "-                localrootfolder =", "-                        new java.io.File(starteamrootfolder.getPath());", "-            } else {", "-                // force StarTeam to use our folder", "-                localrootfolder = new java.io.File(getRootLocalFolder());", "-                log(\"overriding local folder to \" + localrootfolder);", "-            }", "+            java.io.File localrootfolder = ", "+                getLocalRootMapping(starteamrootfolder);", "+            // Tell user what he is doing", "+            logOperationDescription(starteamrootfolder, localrootfolder);", "+            ", "+", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "def92cce7ecab6f7f4afb7d9edc0daf3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a61d00387415778c3746c3c811c682f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/condition/AntVersion.java", "commitBeforeChange": "11eb66160fc05b622bc3b8b68926b7e1fb5bc089", "commitAfterChange": "55ada84e847507662f8e884bca47fe2354d1f42f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "          private DeweyDecimal getVersion()", "signatureAfterChange": "              private DeweyDecimal getVersion()", "diff": ["-    ", "+        ", "-        String versionString = p.getProperty(\"ant.version\");", "-        String v = versionString.substring(versionString.indexOf(\"Ant version\")+12, ", "-                versionString.indexOf(\"Ant version\")+17);", "-        char[] cs = v.toCharArray();", "-        int end = cs.length;", "-        for (int i = cs.length; i > 0; i--) {", "-            if (!Character.isLetter(cs[i-1])) {", "-                end = i;", "+        char[] versionString = p.getProperty(\"ant.version\").toCharArray();", "+        StringBuffer sb = new StringBuffer();", "+        boolean foundFirstDigit = false;", "+        for (int i=0; i<versionString.length; i++) {", "+            if (Character.isDigit(versionString[i])) {", "+                sb.append(versionString[i]);", "+                foundFirstDigit = true;", "+            }", "+            if  (versionString[i]=='.' && foundFirstDigit) {", "+                sb.append(versionString[i]);", "+            }", "+            if (Character.isLetter(versionString[i]) && foundFirstDigit) {", "-        v = v.substring(0, end);", "-        return new DeweyDecimal(v);", "+        return new DeweyDecimal(sb.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34db0115dbdeafa5a7030498d0369647", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/FixCRLF.java", "commitBeforeChange": "7e8bb3f17d5621a4aaa176ff4eb8f1aa9d1777af", "commitAfterChange": "286537d1f81a29fff0b913229d7750604265ea71", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "          protected void nextLine()             throws BuildException", "signatureAfterChange": "          protected void nextLine()             throws BuildException", "diff": ["-            int ch;", "+            int ch = -1;", "+            line.setLength(0);", "-                int linelen;", "-", "-                reader.mark(INBUFLEN);", "-                line = reader.readLine();", "-                if (line == null) {", "-                    // Eof has been reached", "-                    linelen = 0;", "-                }", "-                else {", "-                    linelen = line.length();", "-                }", "-                ", "-                ", "-                // Find the EOL character(s)", "-", "-                reader.reset();", "-", "-                // an IOException will be thrown", "-                reader.skip((long)linelen);", "-                reader.mark(INBUFLEN);", "+                while (ch != -1 && ch != '\\r' && ch != '\\n') {", "+                    line.append((char) ch);", "+                    ch = reader.read();", "+                }", "+                ", "+                if (ch == -1 && line.length() == 0) {", "+                    // Eof has been reached", "+                    reachedEof = true;", "+                    return;", "+                }", "+                ", "-                // Reset the position of the file reader", "-                reader.reset();", "-                reader.skip((long)eolcount);", "-", "-                if (line != null && eolcount == 0) {", "-                    int i = linelen;", "-                    while (--i >= 0 && line.charAt(i) == CTRLZ) {}", "-                    if (i < linelen - 1) {", "+                if (eolcount == 0) {", "+                    int i = line.length();", "+                    while (--i >= 0 && line.charAt(i) == CTRLZ) {", "+                        // keep searching for the first ^Z", "+                    }", "+                    if (i < line.length() - 1) {", "-                        line = i < 0 ? null : line.substring(0, i + 1);", "+                        if (i < 0) {", "+                            line.setLength(0);", "+                            reachedEof = true;", "+                        } else {", "+                            line.setLength(i + 1);", "+                        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "701f49dc895a6bac88be3e360638431a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "519b97d7cf70e486ddcc74dc70285642320ef109", "commitAfterChange": "49727a3da8d30bd6abcb219f140097f4a3b6fe95", "methodNumberBeforeChange": 124, "methodNumberAfterChange": 127, "signatureBeforeChange": "     private void addFileSets(Vector sf)", "signatureAfterChange": "     private void addSourceFiles(Vector sf)", "diff": ["-    private void addFileSets(Vector sf) {", "-        Enumeration e = fileSets.elements();", "-        while (e.hasMoreElements()) {", "-            FileSet fs = (FileSet) e.nextElement();", "+    private void addSourceFiles(Vector sf) {", "+        Iterator e = nestedSourceFiles.iterator();", "+        while (e.hasNext()) {", "+            ResourceCollection rc = (ResourceCollection) e.next();", "+            if (!rc.isFilesystemOnly()) {", "+                throw new BuildException(\"only file system based resources are\"", "+                                         + \" supported by javadoc\");", "+            }", "+            if (rc instanceof FileSet) {", "+                FileSet fs = (FileSet) rc;", "-            File baseDir = fs.getDir(getProject());", "-            DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "-            String[] files = ds.getIncludedFiles();", "-            for (int i = 0; i < files.length; i++) {", "-                sf.addElement(new SourceFile(new File(baseDir, files[i])));", "+            }", "+            Iterator iter = rc.iterator();", "+            while (iter.hasNext()) {", "+                sf.addElement(new SourceFile(((FileResource) iter.next())", "+                                             .getFile()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a428f08deaf69a77881ea8d6f4595c88", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Patch.java", "commitBeforeChange": "1c38f4ed52ca23857b7b83ca909cd1748dea88d6", "commitAfterChange": "6035bbf18dc7df5472368d91d69de03b1819c800", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        if (patchFile == null) {", "+        if (!havePatchfile) {", "-        if (!patchFile.exists()) {", "-            throw new BuildException(\"patchfile \"+patchFile+\" doesn\\'t exist\", ", "-                                     location);", "-        }", "-        StringBuffer command = new StringBuffer(\"patch -i \"+patchFile+\" \");", "+        cmd.setExecutable(\"patch\");", "-        if (backup) {", "-            command.append(\"-b \");", "-        }", "-        ", "-        if (ignoreWhitespace) {", "-            command.append(\"-l \");", "-        }", "-        ", "-        if (strip >= 0) {", "-            command.append(\"-p\"+strip+\" \");", "-        }", "-        ", "-        if (quiet) {", "-            command.append(\"-s \");", "-        }", "-        ", "-        if (reverse) {", "-            command.append(\"-R \");", "-        }", "-        ", "-            command.append(originalFile);", "-        } ", "+            cmd.addValue(originalFile.getAbsolutePath());", "+        }", "-        run(command.toString());", "+        Execute exe = new Execute(new LogStreamHandler(this, Project.MSG_INFO,", "+                                                       Project.MSG_WARN), ", "+                                  null);", "+        exe.setCommandline(cmd.getCommandline());", "+        try {", "+            exe.execute();", "+        } catch (IOException e) {", "+            throw new BuildException(e, location);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2a6c8eae1f6ae97461239aefae5b09b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/vss/MSVSSHISTORY.java", "commitBeforeChange": "b5de6e5a6a5d41ba7e3d4aae0109c6838a59cbb2", "commitAfterChange": "b50fd138f8b9c08dc04ff70319e953d2450780a6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     Commandline buildCmdLine()", "diff": ["-    public void execute() throws BuildException {", "+    Commandline buildCmdLine() {", "-        int result = 0;", "-", "-        // now look for illegal combinations of things ...", "-", "-        commandLine.createArgument().setValue(\"-I-\");  // ignore all errors", "-", "-        // -V", "-        // Label an existing file or project version", "-        getVersionDateCommand(commandLine);", "-        getVersionLabelCommand(commandLine);", "-", "-        // -R   ", "-        if (m_Recursive) {", "-            commandLine.createArgument().setValue(FLAG_RECURSION);", "-        }", "-", "+        commandLine.createArgument().setValue(FLAG_AUTORESPONSE_DEF);  // ignore all errors", "+        // -Vd", "+        commandLine.createArgument().setValue(getVersionDate());", "+        // -VL", "+        commandLine.createArgument().setValue(getVersionLabel());", "+        // -R", "+        commandLine.createArgument().setValue(getRecursive());", "-        if (m_Style.length() > 0) {", "-            commandLine.createArgument().setValue(m_Style);", "-        }", "-", "+        commandLine.createArgument().setValue(getStyle());", "-        getLoginCommand(commandLine);", "-                ", "+        commandLine.createArgument().setValue(getLogin());", "-        getOutputCommand(commandLine);", "+        commandLine.createArgument().setValue(getOutput());", "-        System.out.println(\"***: \" + commandLine);", "-        ", "-        result = run(commandLine);", "-        if (result != 0) {", "-            String msg = \"Failed executing: \" + commandLine.toString();", "-            throw new BuildException(msg, getLocation());", "-        }", "-", "+        return commandLine;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe2a82f29844f91617d751a17a0a9990", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "5b362efc980668c8bd04aa2ea6405174bd443f16", "commitAfterChange": "d93d7b09161b9fed366062f9fc095e46e772a69e", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 30, "signatureBeforeChange": "     protected void validateAttributes() throws BuildException", "signatureAfterChange": "     protected void validateAttributes() throws BuildException", "diff": ["-        if (file == null && filesets.size() == 0) {", "+        if (file == null && rcs.size() == 0) {", "-                \"Specify at least one source--a file or a fileset.\");", "+                \"Specify at least one source--a file or a resource collection.\");", "-            throw new BuildException(\"Use a fileset to copy directories.\");", "+            throw new BuildException(\"Use a resource collection to copy directories.\");", "-        if (destFile != null && filesets.size() > 0) {", "-            if (filesets.size() > 1) {", "+        if (destFile != null && rcs.size() > 0) {", "+            if (rcs.size() > 1) {", "-                FileSet fs = (FileSet) filesets.elementAt(0);", "-                DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "-                String[] srcFiles = ds.getIncludedFiles();", "-", "-                if (srcFiles.length == 0) {", "+\t\tResourceCollection rc = (ResourceCollection) rcs.elementAt(0);", "+\t\tif (!rc.isFilesystemOnly()) {", "+\t\t    throw new BuildException(\"Only FileSystem resources are\"", "+\t\t\t\t\t     + \" supported.\");", "+\t\t}", "+\t\tif (rc.size() == 0) {", "-                } else if (srcFiles.length == 1) {", "+                } else if (rc.size() == 1) {", "+\t\t    FileResource r = (FileResource) rc.iterator().next();", "-                        file = new File(ds.getBasedir(), srcFiles[0]);", "-                        filesets.removeElementAt(0);", "+                        file = r.getFile();", "+                        rcs.removeElementAt(0);"]}]}
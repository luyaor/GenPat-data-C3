{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f3455b9d828f763ad43534f412b80a8e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43273489a4942c123064df8a97776f4a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/image/ImageTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void off_testFailOnError()", "signatureAfterChange": "      @Test     @Ignore(\"Previously named in a manner to prevent execution\")     public void testFailOnError()", "diff": ["-    public void off_testFailOnError() {", "+    @Test", "+    @Ignore(\"Previously named in a manner to prevent execution\")", "+    public void testFailOnError() {", "-            expectLogContaining(\"testFailOnError\", ", "-                                \"Unable to process image stream\");", "+            buildRule.executeTarget(\"testFailOnError\");", "+            AntAssert.assertContains(\"Unable to process image stream\", buildRule.getLog());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a3b848ac77aa8a1080c6f261c0d3117", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/junit/JUnitReportTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 13, "signatureBeforeChange": "      public void testWithParams() throws Exception", "signatureAfterChange": "      @Test     public void testWithParams() throws Exception", "diff": ["+    @Test", "-        expectLogContaining(\"testWithParams\", \"key1=value1,key2=value2\");", "-        File reportFile = new File(getOutputDir(), \"html/index.html\");", "+    \tbuildRule.executeTarget(\"testWithParams\");", "+    \tassertContains(\"key1=value1,key2=value2\", buildRule.getLog());", "+        File reportFile = new File(buildRule.getOutputDir(), \"html/index.html\");", "-        assertTrue(\"File shouldnt be empty.\", reportFile.length() > 0 );", "+        assertTrue(\"File shouldn't be empty.\", reportFile.length() > 0 );", "-        assertTrue(\"This shouldnt be an empty stream.\", reportStream.available() > 0);", "+        assertTrue(\"This shouldn't be an empty stream.\", reportStream.available() > 0);"]}]}
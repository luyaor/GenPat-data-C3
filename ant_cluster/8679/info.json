{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dca93813644d6877bc49b70f2adcc386", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5850b5fb0225628d7e5becf4b168a75", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/test/org/apache/myrmidon/components/configurer/test/DefaultConfigurerTestCase.java", "commitBeforeChange": "e2ec6a3988643fe6f3c8fabd5b8656e4209eaa1d", "commitAfterChange": "42c6021a9e42f49f50a3f4a170590d15a9b8c3db", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected void setUp() throws Exception", "signatureAfterChange": "     protected void setUp() throws Exception", "diff": ["-        m_context = new DefaultTaskContext( null, getServiceManager(), getLogger() );", "+        final DefaultPropertyStore store = new DefaultPropertyStore();", "+        m_context =", "+            new DefaultTaskContext( getServiceManager(), getLogger(), store );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d84ce0a686d136b760c45ea18e2c1ee5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/i18n/Translate.java", "commitBeforeChange": "78c2215a4eb3d786fbe46f5d532a845822bad676", "commitAfterChange": "293d45a72a842e0381ad0d21a1efbb304e5fc10d", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private void translate() throws BuildException", "signatureAfterChange": "     private void translate() throws BuildException", "diff": ["+                            StringBuffer newline = new StringBuffer(line);", "-outer:                      while (true) {", "-                                startIndex = line.indexOf(startToken, endIndex + 1);", "-                                if (startIndex < 0 ||", "-                                    startIndex + 1 >= line.length()) {", "-                                    break;", "-                                }", "-                                endIndex = line.indexOf(endToken, startIndex + 1);", "-                                if (endIndex < 0) {", "-                                    break;", "-                                }", "-                                String matches = line.substring(startIndex + 1,", "-                                                                endIndex);", "-                                    //If there is a white space or = or :, then", "-                                    //it isn't to be treated as a valid key.", "-                                for (int k = 0; k < matches.length(); k++) {", "-                                    char c = matches.charAt(k);", "-                                    if (c == ':' ||", "-                                        c == '=' ||", "-                                        Character.isSpaceChar(c)) {", "-                                        endIndex = endIndex - 1;", "-                                        continue outer;", "-                                    }", "-                                }", "-                                String replace = null;", "-                                replace = (String) resourceMap.get(matches);", "-                                    //If the key hasn't been loaded into resourceMap,", "-                                    //use the key itself as the value also.", "-                                if (replace == null) {", "-                                    log(\"Warning: The key: \" + matches", "-                                        + \" hasn't been defined.\",", "-                                        Project.MSG_DEBUG);", "-                                    replace = matches;", "-                                }", "-                                line = line.substring(0, startIndex)", "-                                    + replace", "-                                    + line.substring(endIndex + 1);", "-                                endIndex = startIndex + replace.length() + 1;", "-                                if (endIndex + 1 >= line.length()) {", "-                                    break;", "+                        outer:                      while (true) {", "+                            startIndex = line.indexOf(startToken, endIndex + 1);", "+                            if (startIndex < 0 ||", "+                                startIndex + 1 >= line.length()) {", "+                                break;", "+                            }", "+                            endIndex = line.indexOf(endToken, startIndex + 1);", "+                            if (endIndex < 0) {", "+                                break;", "+                            }", "+                            String matches = line.substring(startIndex + 1,", "+                                                            endIndex);", "+                                //If there is a white space or = or :, then", "+                                //it isn't to be treated as a valid key.", "+                            for (int k = 0; k < matches.length(); k++) {", "+                                char c = matches.charAt(k);", "+                                if (c == ':' ||", "+                                    c == '=' ||", "+                                    Character.isSpaceChar(c)) {", "+                                    endIndex = endIndex - 1;", "+                                    continue outer;", "+                            String replace = null;", "+                            replace = (String) resourceMap.get(matches);", "+                                //If the key hasn't been loaded into resourceMap,", "+                                //use the key itself as the value also.", "+                            if (replace == null) {", "+                                log(\"Warning: The key: \" + matches", "+                                    + \" hasn't been defined.\",", "+                                    Project.MSG_DEBUG);", "+                                replace = matches;", "+                            }", "+                            line = line.substring(0, startIndex)", "+                                + replace", "+                                + line.substring(endIndex + 1);", "+                            endIndex = startIndex + replace.length() + 1;", "+                            if (endIndex + 1 >= line.length()) {", "+                                break;", "+                            }", "+                        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5d4c6864bf261536ad717f93f0909110", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caf24dd808d201d010220002b72acdd7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/Main.java", "commitBeforeChange": "58f8db35ee5db94294191fc2599cb02a8086b881", "commitAfterChange": "8c97911720b40557d78672245bc2e7f724917297", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected void execute( final List clOptions )         throws Exception", "signatureAfterChange": "     protected void execute( final List clOptions )         throws Exception", "diff": ["-        String builderName = null;", "-        String binDir = null;", "-        String libDir = null;", "-            case BIN_DIR_OPT: binDir = option.getArgument(); break;", "-            case LIB_DIR_OPT: libDir = option.getArgument(); break;", "-        if( null == logLevel ) logLevel = getDefaultLogLevel();", "-        if( null == listenerName ) listenerName = getDefaultListener();", "-        if( null == filename ) filename = getDefaultFilename();", "-        if( null == libDir ) libDir = getDefaultLibDir();", "-        if( null == taskLibDir ) taskLibDir = getDefaultTaskLibDir();", "-        if( null == builderName ) builderName = getBuilderNameFor( filename );", "+        if( null == logLevel ) logLevel = DEFAULT_LOGLEVEL;", "+        if( null == listenerName ) listenerName = DEFAULT_LISTENER;", "+        if( null == filename ) filename = DEFAULT_FILENAME;", "-        setupLogger( logLevel ); //handle logging...", "-        setupListener( listenerName ); //handle listener..", "-        setupDefaultAntDirs();        ", "+        //handle logging...", "+        setLogger( createLogger( logLevel ) );", "-        //try to auto-discover the location of ant so that ", "-        //can populate classpath with libs/tasks and gain access", "-        //to antRun", "-        if( null == binDir && null == homeDir ) ", "+        //if ant home not set then use system property ant.home ", "+        //that was set up by launcher.", "+        if( null == homeDir ) homeDir = System.getProperty( \"ant.home\" );", "+", "+        final Properties properties = new Properties();", "+        properties.setProperty( \"ant.home\", homeDir );", "+", "+        if( null != taskLibDir ) properties.setProperty( \"ant.path.task-lib\", taskLibDir );", "+", "+        m_homeDir = (new File( homeDir )).getAbsoluteFile();", "+        if( !m_homeDir.isDirectory() )", "-            m_homeDir = getDefaultHomeDir();", "-            m_binDir = m_homeDir.getParentFile();", "-        }", "-        else if( null == binDir ) // && null != homeDir", "-        {", "-            m_homeDir = getHomeDir( homeDir );", "-            m_binDir = new File( m_homeDir, \"bin\" );", "-        }", "-        else", "-        {", "-            m_binDir = getBinDir( binDir );", "-            m_homeDir = m_binDir.getParentFile();", "+            throw new AntException( \"ant-home (\" + m_homeDir + \") is not a directory\" );", "-        m_libDir = getLibDir( m_homeDir, libDir );", "-        m_taskLibDir = getTaskLibDir( m_homeDir, taskLibDir );", "-        m_buildFile = getFile( filename );", "+        final File libDir = new File( m_homeDir, \"lib\" );", "-        m_logger.warn( \"Ant Build File: \" + m_buildFile );", "-        m_logger.info( \"Ant Home Directory: \" + m_homeDir );", "-        m_logger.info( \"Ant Bin Directory: \" + m_binDir );", "-        m_logger.debug( \"Ant Lib Directory: \" + m_libDir );", "-        m_logger.debug( \"Ant Task Lib Directory: \" + m_taskLibDir );", "-", "+        final File buildFile = (new File( filename )).getCanonicalFile();", "+        if( !buildFile.isFile() )", "+        {", "+            throw new AntException( \"File \" + buildFile + \" is not a file or doesn't exist\" );", "+        }", "+        ", "-        setupContextClassLoader( m_libDir );", "+        final ClassLoader classLoader = createClassLoader( libDir );", "+        Thread.currentThread().setContextClassLoader( classLoader );", "-        final Project project = getProject( builderName, m_buildFile );", "+        //handle listener.. ", "+        final ProjectListener listener = createListener( listenerName ); ", "+", "+        getLogger().warn( \"Ant Build File: \" + buildFile );", "+        getLogger().info( \"Ant Home Directory: \" + m_homeDir );", "+        //getLogger().info( \"Ant Bin Directory: \" + m_binDir );", "+        //getLogger().debug( \"Ant Lib Directory: \" + m_libDir );", "+        //getLogger().debug( \"Ant Task Lib Directory: \" + m_taskLibDir );", "+", "+        final AntEngine antEngine = new DefaultAntEngine();", "+        setupLogger( antEngine );", "+        antEngine.setProperties( properties );", "+        antEngine.init();", "+", "+        final ProjectBuilder builder = antEngine.getProjectBuilder();", "+", "+        //create the project", "+        final Project project = builder.build( buildFile );", "-        final ProjectEngine engine = getProjectEngine();", "-", "-        //make sure Engine is sweet...", "-        if( engine instanceof Initializable )", "-        {", "-            ((Initializable)engine).init();", "-        }", "-", "-        engine.addProjectListener( m_listener );", "-", "-        deployDefaultTaskLibs( engine, m_taskLibDir );", "+        final ProjectEngine engine = antEngine.getProjectEngine();", "+        engine.addProjectListener( listener );", "-        //shutdown engine gracefully if needed", "-        if( engine instanceof Disposable )", "-        {", "-            ((Disposable)engine).dispose();", "-        }", "-    }", "+        antEngine.dispose();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd821ed1a89b5d5a647573f5ec50685b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/Main.java", "commitBeforeChange": "685af27ceefe23e6cbaf8e8212805d3850765bdc", "commitAfterChange": "157d8f04d2c676ac93a8cda891f804bddf6f7836", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      protected void execute( final String[] args )         throws Exception", "signatureAfterChange": "      protected void execute( final String[] args )         throws Exception", "diff": ["-        String filename = null;", "-        String listenerName = null;", "-        String logLevel = null;", "-        String homeDir = null;", "-        String taskLibDir = null;", "-        boolean incremental = false;", "-        HashMap defines = new HashMap();", "+        final HashMap defines = new HashMap();", "+", "+        m_parameters.setParameter( \"filename\", \"build.ant\" );", "+        m_parameters.setParameter( \"log.level\", \"WARN\" );", "+        m_parameters.setParameter( \"listener\", \"org.apache.myrmidon.listeners.DefaultProjectListener\" );", "+        m_parameters.setParameter( \"incremental\", \"false\" );", "+", "+        //System property set up by launcher", "+        m_parameters.setParameter( \"myrmidon.home\", System.getProperty( \"myrmidon.home\" ) );", "-            case 0: targets.add( option.getArgument() ); break;", "-            case VERSION_OPT: System.out.println( VERSION ); return;", "-            case FILE_OPT: filename = option.getArgument(); break;", "-            case HOME_DIR_OPT: homeDir = option.getArgument(); break;", "-            case TASKLIB_DIR_OPT: taskLibDir = option.getArgument(); break;", "-            case VERBOSE_OPT: logLevel = \"INFO\"; break;", "-            case QUIET_OPT: logLevel = \"ERROR\"; break;", "-            case LOG_LEVEL_OPT: logLevel = option.getArgument(); break;", "-            case LISTENER_OPT: listenerName = option.getArgument(); break;", "-            case INCREMENTAL_OPT: incremental = true; break;", "+            case VERSION_OPT: System.out.println( Constants.BUILD_DESCRIPTION ); return;", "+", "+            case HOME_DIR_OPT: m_parameters.setParameter( \"myrmidon.home\", option.getArgument() ); break;", "+            case TASKLIB_DIR_OPT: ", "+                m_parameters.setParameter( \"myrmidon.lib.path\", option.getArgument() ); ", "+                break;", "+", "+            case LOG_LEVEL_OPT: m_parameters.setParameter( \"log.level\", option.getArgument() ); break;", "+            case VERBOSE_OPT: m_parameters.setParameter( \"log.level\", \"INFO\" ); break;", "+            case QUIET_OPT: m_parameters.setParameter( \"log.level\", \"ERROR\" ); break;", "+", "+            case INCREMENTAL_OPT: m_parameters.setParameter( \"incremental\", \"true\" ); break;", "+", "+            case FILE_OPT: m_parameters.setParameter( \"filename\", option.getArgument() ); break;", "+            case LISTENER_OPT: m_parameters.setParameter( \"listener\", option.getArgument() ); break;", "+", "+            case 0: targets.add( option.getArgument() ); break;", "-        if( null == logLevel ) logLevel = DEFAULT_LOGLEVEL;", "-        if( null == listenerName ) listenerName = DEFAULT_LISTENER;", "-        if( null == filename ) filename = DEFAULT_FILENAME;", "-", "+        final String logLevel = m_parameters.getParameter( \"log.level\", null );", "-        //if ant home not set then use system property ant.home", "-        //that was set up by launcher.", "-        if( null == homeDir ) homeDir = System.getProperty( \"ant.home\" );", "-", "-        final Parameters parameters = new Parameters();", "-        parameters.setParameter( \"ant.home\", homeDir );", "-", "-        if( null != taskLibDir ) parameters.setParameter( \"ant.path.task-lib\", taskLibDir );", "-", "-        m_homeDir = (new File( homeDir )).getAbsoluteFile();", "-        if( !m_homeDir.isDirectory() )", "+        final String home = m_parameters.getParameter( \"myrmidon.home\", null );", "+        final File homeDir = (new File( home )).getAbsoluteFile();", "+        if( !homeDir.isDirectory() )", "-            throw new TaskException( \"ant-home (\" + m_homeDir + \") is not a directory\" );", "+            throw new TaskException( \"myrmidon-home (\" + homeDir + \") is not a directory\" );", "-        final File libDir = new File( m_homeDir, \"lib\" );", "+        final File libDir = new File( homeDir, \"lib\" );", "+        final String filename = m_parameters.getParameter( \"filename\", null );", "+        final String listenerName = m_parameters.getParameter( \"listener\", null );", "+        final LogTarget target = new LogTargetToListenerAdapter( listener );", "+        getLogger().setLogTargets( new LogTarget[] { target } );", "+", "+", "+", "-        getLogger().info( \"Ant Home Directory: \" + m_homeDir );", "+        getLogger().info( \"Ant Home Directory: \" + homeDir );", "-        embeddor.parameterize( parameters );", "+        embeddor.parameterize( m_parameters );", "+        final boolean incremental = m_parameters.getParameterAsBoolean( \"incremental\", false );", "-            setupContext( context, defines );", "+            ", "+            //Add CLI defines", "+            addToContext( context, defines );", "+", "+            //Add system properties second so that they overide user-defined properties", "+            addToContext( context, System.getProperties() );", "-            //context.setProperty( Project.PROJECT, projectName );", "+            //context.setProperty( Project.PROJECT, project.getName() );"]}]}
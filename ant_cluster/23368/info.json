{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b92415c8fd8b43742bdb5f34b8cb818f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "019ef6b2753a6643c5309a5265ca50d9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "196c36bc28dec63b239595132e8b00c55951c860", "commitAfterChange": "689fca41585cc1768a0501fd11c8235b6e4bc481", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 56, "signatureBeforeChange": "     private void evaluatePackages(String source, Vector packages, Vector argList)", "signatureAfterChange": "     private void evaluatePackages(String sourcePath, Vector packages, Vector argList)", "diff": ["-    private void evaluatePackages(String source, Vector packages, Vector argList) {", "+    private void evaluatePackages(String sourcePath, Vector packages, Vector argList) {", "-        project.log(\"Source dir = \" + source, project.MSG_VERBOSE);", "+        project.log(\"Source path = \" + sourcePath, project.MSG_VERBOSE);", "-        Hashtable map = mapClasses(new File(source));", "+        Vector addedPackages = new Vector();", "+        PathTokenizer tokenizer = new PathTokenizer(sourcePath);", "+        while (tokenizer.hasMoreTokens()) {", "+            File source = new File(project.translatePath(tokenizer.nextToken()));", "+            ", "+            Hashtable map = mapClasses(source);", "-        Enumeration e = map.keys();", "-        while (e.hasMoreElements()) {", "-            String pack = (String) e.nextElement();", "-            for (int i = 0; i < packages.size(); i++) {", "-                if (matches(pack, (String) packages.elementAt(i))) {", "-                    argList.addElement(pack);", "-                    break;", "+            Enumeration e = map.keys();", "+            while (e.hasMoreElements()) {", "+                String pack = (String) e.nextElement();", "+                for (int i = 0; i < packages.size(); i++) {", "+                    if (matches(pack, (String) packages.elementAt(i))) {", "+                        if (!addedPackages.contains(pack)) {", "+                            argList.addElement(pack);", "+                            addedPackages.addElement(pack);", "+                        }", "+                        break;", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "955e9181b10fc786b9c7815d2bbcdb6d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "6769b415ef3830ffbd4058a7094f6a4765fd91d4", "commitAfterChange": "a9a32155c55b9fafe17c094167a195e276117e36", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": "     private void evaluatePackages(Commandline toExecute, Path sourcePath,                                    Vector packages, Vector excludePackages)", "signatureAfterChange": "     private void evaluatePackages(Commandline toExecute, Path sourcePath,                                    Vector packages, Vector excludePackages)", "diff": ["-        log(\"Packages = \" + packages, Project.MSG_VERBOSE);", "-\t\tlog(\"Exclude Packages = \" + excludePackages, Project.MSG_VERBOSE);", "+        StringBuffer msg = new StringBuffer(\"Packages = \");", "+        for (int i=0; i<packages.size(); i++) {", "+            if (i > 0) {", "+                msg.append(\",\");", "+            }", "+            msg.append(packages.elementAt(i));", "+        }", "+        log(msg.toString(), Project.MSG_VERBOSE);", "+", "+        msg.setLength(0);", "+        msg.append(\"Exclude Packages = \");", "+        for (int i=0; i<excludePackages.size(); i++) {", "+            if (i > 0) {", "+                msg.append(\",\");", "+            }", "+            msg.append(excludePackages.elementAt(i));", "+        }", "+        log(msg.toString(), Project.MSG_VERBOSE);", "-\t\te = excludePackages.elements();", "-\t\twhile (e.hasMoreElements()) {", "-\t\t\tString pkg = (String)e.nextElement();", "-\t\t\tpkg = pkg.replace('.','/');", "-\t\t\tif (pkg.endsWith(\"*\")) {", "-\t\t\t\tpkg += \"*\";", "-\t\t\t}", "-", "-\t\t\tfs.createExclude().setName(pkg);", "-\t\t}", "-", "+        e = excludePackages.elements();", "+        while (e.hasMoreElements()) {", "+            String pkg = (String)e.nextElement();", "+            pkg = pkg.replace('.','/');", "+            if (pkg.endsWith(\"*\")) {", "+                pkg += \"*\";", "+            }", "+            ", "+            fs.createExclude().setName(pkg);", "+        }", "+        "]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cc74cad1fb2593e7aac5b1e83b6f5f20", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f1db6e1f7ada1c71ce10884eac92f10", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/bzip2/CBZip2InputStream.java", "commitBeforeChange": "c05fecf453869e6962a7f3ba8ec302b628a997ba", "commitAfterChange": "7ac20d949c1479a45698ca673b1de7321e9977f2", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 24, "signatureBeforeChange": "      private void hbCreateDecodeTables( int[] limit, int[] base,                                        int[] perm, char[] length,                                        int minLen, int maxLen, int alphaSize )", "signatureAfterChange": "      private void hbCreateDecodeTables( final int[] limit,                                        final int[] base,                                        final int[] perm,                                        final char[] length,                                        final int minLen,                                        final int maxLen,                                        final int alphaSize )", "diff": ["-    private void hbCreateDecodeTables( int[] limit, int[] base,", "-                                       int[] perm, char[] length,", "-                                       int minLen, int maxLen, int alphaSize )", "+    private void hbCreateDecodeTables( final int[] limit,", "+                                       final int[] base,", "+                                       final int[] perm,", "+                                       final char[] length,", "+                                       final int minLen,", "+                                       final int maxLen,", "+                                       final int alphaSize )", "-        int pp;", "-        int i;", "-        int j;", "-        int vec;", "-", "-        pp = 0;", "-        for( i = minLen; i <= maxLen; i++ )", "-            for( j = 0; j < alphaSize; j++ )", "+        int pp = 0;", "+        for( int i = minLen; i <= maxLen; i++ )", "+        {", "+            for( int j = 0; j < alphaSize; j++ )", "+            {", "-        ;", "+            }", "+        }", "-        for( i = 0; i < MAX_CODE_LEN; i++ )", "+        for( int i = 0; i < MAX_CODE_LEN; i++ )", "+        {", "-        for( i = 0; i < alphaSize; i++ )", "+        }", "+", "+        for( int i = 0; i < alphaSize; i++ )", "+        {", "+        }", "-        for( i = 1; i < MAX_CODE_LEN; i++ )", "+        for( int i = 1; i < MAX_CODE_LEN; i++ )", "+        {", "+        }", "-        for( i = 0; i < MAX_CODE_LEN; i++ )", "+        for( int i = 0; i < MAX_CODE_LEN; i++ )", "+        {", "-        vec = 0;", "+        }", "-        for( i = minLen; i <= maxLen; i++ )", "+        int vec = 0;", "+        for( int i = minLen; i <= maxLen; i++ )", "-        for( i = minLen + 1; i <= maxLen; i++ )", "+", "+        for( int i = minLen + 1; i <= maxLen; i++ )", "+        {", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b91f147cd0871809dde1b9cff09affd4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/bzip2/CBZip2InputStream.java", "commitBeforeChange": "c05fecf453869e6962a7f3ba8ec302b628a997ba", "commitAfterChange": "7ac20d949c1479a45698ca673b1de7321e9977f2", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 24, "signatureBeforeChange": "      private void hbCreateDecodeTables( int[] limit, int[] base,                                        int[] perm, char[] length,                                        int minLen, int maxLen, int alphaSize )", "signatureAfterChange": "      private void hbCreateDecodeTables( final int[] limit,                                        final int[] base,                                        final int[] perm,                                        final char[] length,                                        final int minLen,                                        final int maxLen,                                        final int alphaSize )", "diff": ["-    private void hbCreateDecodeTables( int[] limit, int[] base,", "-                                       int[] perm, char[] length,", "-                                       int minLen, int maxLen, int alphaSize )", "+    private void hbCreateDecodeTables( final int[] limit,", "+                                       final int[] base,", "+                                       final int[] perm,", "+                                       final char[] length,", "+                                       final int minLen,", "+                                       final int maxLen,", "+                                       final int alphaSize )", "-        int pp;", "-        int i;", "-        int j;", "-        int vec;", "-", "-        pp = 0;", "-        for( i = minLen; i <= maxLen; i++ )", "-            for( j = 0; j < alphaSize; j++ )", "+        int pp = 0;", "+        for( int i = minLen; i <= maxLen; i++ )", "+        {", "+            for( int j = 0; j < alphaSize; j++ )", "+            {", "-        ;", "+            }", "+        }", "-        for( i = 0; i < MAX_CODE_LEN; i++ )", "+        for( int i = 0; i < MAX_CODE_LEN; i++ )", "+        {", "-        for( i = 0; i < alphaSize; i++ )", "+        }", "+", "+        for( int i = 0; i < alphaSize; i++ )", "+        {", "+        }", "-        for( i = 1; i < MAX_CODE_LEN; i++ )", "+        for( int i = 1; i < MAX_CODE_LEN; i++ )", "+        {", "+        }", "-        for( i = 0; i < MAX_CODE_LEN; i++ )", "+        for( int i = 0; i < MAX_CODE_LEN; i++ )", "+        {", "-        vec = 0;", "+        }", "-        for( i = minLen; i <= maxLen; i++ )", "+        int vec = 0;", "+        for( int i = minLen; i <= maxLen; i++ )", "-        for( i = minLen + 1; i <= maxLen; i++ )", "+", "+        for( int i = minLen + 1; i <= maxLen; i++ )", "+        {", "+        }"]}]}
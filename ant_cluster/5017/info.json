{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec45e1bfd3464bf40f09f530af168f7b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebec8c8fc21fddde95a4e64426d9aa15", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/PropertyFile.java", "commitBeforeChange": "62f2142b3431002933bf1281d244c164ed962890", "commitAfterChange": "6cbeee38fa5502baa5d75036ad2c0418cf808d56", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "         private void executeDate(String oldValue) throws BuildException", "signatureAfterChange": "         private void executeDate(String oldValue) throws BuildException", "diff": ["-            GregorianCalendar value = new GregorianCalendar();", "-            GregorianCalendar newValue = new GregorianCalendar();", "+            Calendar currentValue = Calendar.getInstance();", "-            if (m_pattern == null) {", "-              m_pattern = \"yyyy/MM/dd HH:mm\";", "+            if (pattern == null) {", "+              pattern = \"yyyy/MM/dd HH:mm\";", "-            DateFormat fmt = new SimpleDateFormat(m_pattern);", "+            DateFormat fmt = new SimpleDateFormat(pattern);", "-            // special case", "-            if (m_default != null &&", "-                NOW_VALUE_.equals(m_default.toLowerCase()) &&", "-                (m_operation == Operation.INCREMENT_OPER ||", "-                 m_operation == Operation.DECREMENT_OPER) ) {", "-                 oldValue = null;", "+            String currentStringValue = getCurrentValue(oldValue);", "+            if (currentStringValue == null) {", "+                currentStringValue = DEFAULT_DATE_VALUE;", "-", "-            if (oldValue != null) {", "+            ", "+            if (\"now\".equals(currentStringValue)) {", "+                currentValue.setTime(new Date());", "+            }", "+            else {", "-                    value.setTime(fmt.parse(oldValue));", "+                    currentValue.setTime(fmt.parse(currentStringValue));", "-", "-            if (m_value != null) {", "-                if (NOW_VALUE_.equals(m_value.toLowerCase())) {", "-                    value.setTime(new Date());", "-                }", "-                else if (NULL_VALUE_.equals(m_value.toLowerCase())) {", "-                    value = null;", "-                }", "-                else {", "-                    try {", "-                        value.setTime(fmt.parse(m_value));", "+            ", "+            if (operation != Operation.EQUALS_OPER) {", "+                int offset = 0;", "+                try {", "+                    offset = Integer.parseInt(value);", "+                    if (operation == Operation.DECREMENT_OPER) {", "+                        offset = -1 * offset;", "-                    catch (Exception ex) {", "-                        // obviously not a date, try a simple int", "-                        try {", "-                            int offset = Integer.parseInt(m_value);", "-                            value.clear();", "-                            value.set(Calendar.DAY_OF_YEAR, offset);", "-                        }", "-                        catch (Exception ex_) {", "-                            value.clear();", "-                            value.set(Calendar.DAY_OF_YEAR, 1);", "-                        }", "-                    }", "-", "+                catch (NumberFormatException e) {", "+                    throw new BuildException(\"Value not an integer on \" + key);", "+                }", "+                currentValue.add(field, offset);", "-            if (m_default != null && oldValue == null) {", "-                if (NOW_VALUE_.equals(m_default.toLowerCase())) {", "-                    value.setTime(new Date());", "-                }", "-                else if (NULL_VALUE_.equals(m_default.toLowerCase())) {", "-                    value = null;", "-                }", "-                else {", "-                    try {", "-                        value.setTime(fmt.parse(m_default));", "-                    }", "-                    catch (ParseException pe)  { /* swollow */ }", "-                }", "-            }", "-", "-", "-            if (m_operation == Operation.EQUALS_OPER) {", "-                newValue = value;", "-            }", "-            else if (m_operation == Operation.INCREMENT_OPER) {", "-                newValue.add(Calendar.SECOND, value.get(Calendar.SECOND));", "-                newValue.add(Calendar.MINUTE, value.get(Calendar.MINUTE));", "-                newValue.add(Calendar.HOUR_OF_DAY, value.get(Calendar.HOUR_OF_DAY));", "-                newValue.add(Calendar.DAY_OF_YEAR, value.get(Calendar.DAY_OF_YEAR));", "-            }", "-            else if (m_operation == Operation.DECREMENT_OPER) {", "-                newValue.add(Calendar.SECOND, -1 * value.get(Calendar.SECOND));", "-                newValue.add(Calendar.MINUTE, -1 * value.get(Calendar.MINUTE));", "-                newValue.add(Calendar.HOUR_OF_DAY, -1 * value.get(Calendar.HOUR_OF_DAY));", "-                newValue.add(Calendar.DAY_OF_YEAR, -1 * value.get(Calendar.DAY_OF_YEAR));", "-            }", "-            if (newValue != null) {", "-                m_value = fmt.format(newValue.getTime());", "-            }", "-            else {", "-                m_value = \"\";", "-            }", "+            value = fmt.format(currentValue.getTime());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7a45a287ca7b32702156d5b70039e4e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/selectors/DependSelectorTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void testSelectionBehaviour()", "signatureAfterChange": "      @Test     public void testSelectionNoMapper()", "diff": ["-     */", "-    public void testSelectionBehaviour() {", "-        DependSelector s;", "-        String results;", "-        File subdir;", "-        Mapper m;", "-        Mapper.MapperType glob = new Mapper.MapperType();", "-        glob.setValue(\"glob\");", "-        try {", "-            makeBed();", "-            s = (DependSelector)getInstance();", "-            s.setTargetdir(beddir);", "-            results = selectionString(s);", "-            assertEquals(\"FFFFFFFFFFFF\", results);", "-            s = (DependSelector)getInstance();", "-            s.setTargetdir(beddir);", "-            m = s.createMapper();", "-            m.setType(identity);", "-            results = selectionString(s);", "-            assertEquals(\"FFFFFFFFFFFF\", results);", "-            s = (DependSelector)getInstance();", "-            s.setTargetdir(beddir);", "-            m = s.createMapper();", "-            m.setType(merge);", "-            m.setTo(\"asf-logo.gif.gz\");", "-            results = selectionString(s);", "-            assertEquals(\"TFFFFTTTFFF\", results.substring(0,11));", "-            s = (DependSelector)getInstance();", "-            s.setTargetdir(beddir);", "-            m = s.createMapper();", "-            m.setType(merge);", "-            m.setTo(\"asf-logo.gif.bz2\");", "-            results = selectionString(s);", "-            assertEquals(\"TTFTTTTTTTTT\", results);", "-            // Test for path relative to project base directory", "-            s = (DependSelector)getInstance();", "-            subdir = new File(\"selectortest/tar/bz2\");", "-            s.setTargetdir(subdir);", "-            m = s.createMapper();", "-            m.setType(glob);", "-            m.setFrom(\"*.bz2\");", "-            m.setTo(\"*.tar.bz2\");", "-            results = selectionString(s);", "-            assertEquals(\"FFTFFFFFFTTF\", results);", "-            s = (DependSelector)getInstance();", "-            subdir = new File(beddir,\"tar/bz2\");", "-            s.setTargetdir(subdir);", "-            m = s.createMapper();", "-            m.setType(glob);", "-            m.setFrom(\"*.bz2\");", "-            m.setTo(\"*.tar.bz2\");", "-            results = selectionString(s);", "-            assertEquals(\"FFFFFFFFFTTF\", results);", "-            try {", "-                makeMirror();", "-                s = (DependSelector)getInstance();", "-                File testdir = new File(getOutputDir(), \"selectortest2\");", "-                s.setTargetdir(testdir);", "-                results = selectionString(s);", "-                assertEquals(\"FFFTTFFFFFFF\", results);", "-                s = (DependSelector)getInstance();", "-                testdir = new File(getOutputDir(), \"selectortest2/tar/bz2\");", "-                s.setTargetdir(testdir);", "-                m = s.createMapper();", "-                m.setType(glob);", "-                m.setFrom(\"*.bz2\");", "-                m.setTo(\"*.tar.bz2\");", "-                results = mirrorSelectionString(s);", "-                assertEquals(\"FFFFFFFFFTTF\", results);", "-                results = selectionString(s);", "-                assertEquals(\"FFFFFFFFFTTF\", results);", "-            }", "-            finally {", "-                cleanupMirror();", "-            }", "-        }", "-        finally {", "-            cleanupBed();", "-        }", "+", "+    @Test", "+    public void testSelectionNoMapper() {", "+        DependSelector s = new DependSelector();", "+        s.setTargetdir(new File(selectorRule.getOutputDir(), \"selectortest2\"));", "+        String results = selectorRule.selectionString(s);", "+        assertEquals(\"FFFTTFFFFFFF\", results);", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aff8b184684ee0c949f25d589d52033c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65c08ebfa6210df7f0e938f577e9314c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Rmic.java", "commitBeforeChange": "12a8163d89f051f1950a8e2b136edbe08b6cc711", "commitAfterChange": "5db106732ce0f855fd2b03fd68104a708acf7996", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        RmicAdapter adapter = RmicAdapterFactory.getRmic(compiler, this );", "+        RmicAdapter adapter = RmicAdapterFactory.getRmic(compiler, this);", "-        // scan base dirs to build up compile lists only if a", "-        // specific classname is not given", "-        if (classname == null) {", "-            DirectoryScanner ds = this.getDirectoryScanner(baseDir);", "-            String[] files = ds.getIncludedFiles();", "-            scanDir(baseDir, files, adapter.getMapper());", "-        } else {", "-            // otherwise perform a timestamp comparison - at least", "-            scanDir(baseDir, ", "-                    new String[] {classname.replace('.', File.separatorChar) + \".class\"},", "-                    adapter.getMapper());", "-        }", "-        ", "-        int fileCount = compileList.size();", "-        if (fileCount > 0) {", "-            log(\"RMI Compiling \" + fileCount +", "-                \" class\"+ (fileCount > 1 ? \"es\" : \"\")+\" to \" + baseDir, ", "-                Project.MSG_INFO);", "-", "-            // finally, lets execute the compiler!!", "-            if (!adapter.execute()) {", "-                throw new BuildException(FAIL_MSG, location);", "-            }", "-        }", "-", "-        /* ", "-         * Move the generated source file to the base directory.  If", "-         * base directory and sourcebase are the same, the generated", "-         * sources are already in place.", "-         */", "-        if (null != sourceBase && !baseDir.equals(sourceBase)) {", "-            if (idl) {", "-                log(\"Cannot determine sourcefiles in idl mode, \", ", "-                    Project.MSG_WARN);", "-                log(\"sourcebase attribute will be ignored.\", Project.MSG_WARN);", "+        try {", "+            // scan base dirs to build up compile lists only if a", "+            // specific classname is not given", "+            if (classname == null) {", "+                DirectoryScanner ds = this.getDirectoryScanner(baseDir);", "+                String[] files = ds.getIncludedFiles();", "+                scanDir(baseDir, files, adapter.getMapper());", "-                for (int j = 0; j < fileCount; j++) {", "-                    moveGeneratedFile(baseDir, sourceBase,", "-                                      (String) compileList.elementAt(j),", "-                                      adapter);", "+                // otherwise perform a timestamp comparison - at least", "+                scanDir(baseDir, ", "+                        new String[] {classname.replace('.', ", "+                                                        File.separatorChar)", "+                                          + \".class\"},", "+                        adapter.getMapper());", "+            }", "+            ", "+            int fileCount = compileList.size();", "+            if (fileCount > 0) {", "+                log(\"RMI Compiling \" + fileCount +", "+                    \" class\"+ (fileCount > 1 ? \"es\" : \"\")+\" to \" + baseDir, ", "+                    Project.MSG_INFO);", "+                ", "+                // finally, lets execute the compiler!!", "+                if (!adapter.execute()) {", "+                    throw new BuildException(FAIL_MSG, location);", "+            ", "+            /* ", "+             * Move the generated source file to the base directory.  If", "+             * base directory and sourcebase are the same, the generated", "+             * sources are already in place.", "+             */", "+            if (null != sourceBase && !baseDir.equals(sourceBase) ", "+                && fileCount > 0) {", "+                if (idl) {", "+                    log(\"Cannot determine sourcefiles in idl mode, \", ", "+                        Project.MSG_WARN);", "+                    log(\"sourcebase attribute will be ignored.\", ", "+                        Project.MSG_WARN);", "+                } else {", "+                    for (int j = 0; j < fileCount; j++) {", "+                        moveGeneratedFile(baseDir, sourceBase,", "+                                          (String) compileList.elementAt(j),", "+                                          adapter);", "+                    }", "+                }", "+            }", "+        } finally {", "+            compileList.removeAllElements();", "-        compileList.removeAllElements();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df62c275f52ee1907a63053236282236", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "c34b9ee41bcc31359f581d04d38e0b5615eee21b", "commitAfterChange": "df6e16ab5f83605b7bb379d04af8eb4be0e2a858", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            FileOutputStream fos = new FileOutputStream(dest);", "-", "-            byte[] buffer = new byte[100 * 1024];", "-            int length;", "-", "-            while ((length = is.read(buffer)) >= 0) {", "-                fos.write(buffer, 0, length);", "-                if (verbose) {", "-                    System.out.print(\".\");", "+            FileOutputStream fos = new FileOutputStream(dest);", "+            try {", "+                byte[] buffer = new byte[100 * 1024];", "+                int length;", "+                ", "+                while ((length = is.read(buffer)) >= 0) {", "+                    fos.write(buffer, 0, length);", "+                    if (verbose) {", "+                        System.out.print(\".\");", "+                    }", "+                if (verbose) {", "+                    System.out.println();", "+                }", "+            } finally {", "+                if (fos != null) {", "+                    fos.close();", "+                }", "+                is.close();", "-            if (verbose) {", "-                System.out.println();", "-            }", "-            fos.close();", "-            is.close();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "231ab7e142ed1e16f3a755b9cf5e08b7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a80b2bb79d477f31c00777273bc87e3c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/launch/Launcher.java", "commitBeforeChange": "dad211c19fbf676be2462650e380439c0cae4982", "commitAfterChange": "91ee1ced95e8b60187ccaaa4f032015605c26e07", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void run(String[] args)             throws LaunchException, MalformedURLException", "signatureAfterChange": "     private int run(String[] args)             throws LaunchException, MalformedURLException", "diff": ["-    private void run(String[] args)", "+    private int run(String[] args)", "+        String mainClassname = MAIN_CLASS;", "+            } else if (args[i].equals(\"-main\")) {", "+                if (i == args.length - 1) {", "+                    throw new LaunchException(\"The -main argument must \"", "+                            + \"be followed by a library location\");", "+                }", "+                mainClassname = args[++i];", "+        int exitCode=0;", "-            mainClass = loader.loadClass(MAIN_CLASS);", "+            mainClass = loader.loadClass(mainClassname);", "-            System.out.println(", "-                \"Incompatible version of org.apache.tools.ant detected\");", "+            System.err.println(", "+                \"Incompatible version of \"+mainClassname+\" detected\");", "-            System.out.println(", "+            System.err.println(", "+            exitCode=-1;", "-            t.printStackTrace();", "+            t.printStackTrace(System.err);", "+            exitCode=-1;", "+        return exitCode;", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c63df0011c33ea9734d05959629e03f3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "5c01d4c1642a27fb74ed91d9799ea9b06d04fbb6", "commitAfterChange": "006b093ab20fd85da0a95dfa967d3eb4d5d26fe7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      private static String[] getProcEnvCommand()", "signatureAfterChange": "      private static String[] getProcEnvCommand()", "diff": ["-        } else if (Os.isFamily(\"z/os\")) {", "-            String[] cmd = {\"/bin/env\"};", "-            return cmd;", "-        } else if (Os.isFamily(\"tandem\")) {", "-//            String[] cmd = {\"/bin/sh -c env\"};", "-            String[] cmd = {\"/bin/env\"};", "-            return cmd;", "-        } else if (Os.isFamily(\"unix\")) {", "-            // Generic UNIX", "-            // Alternatively one could use: /bin/sh -c env", "-            String[] cmd = {\"/usr/bin/env\"};", "+        } else if (Os.isFamily(\"z/os\") || Os.isFamily(\"tandem\") ", "+                   || Os.isFamily(\"unix\")) {", "+            // On most systems one could use: /bin/sh -c env", "+", "+            // Some systems have /bin/env, others /usr/bin/env, just try", "+            String[] cmd = new String[1];", "+            if (new File(\"/bin/env\").canRead()) {", "+                cmd[0] = \"/bin/env\";", "+            } else if (new File(\"/usr/bin/env\").canRead()) {", "+                cmd[0] = \"/usr/bin/env\";", "+            } else {", "+                // rely on PATH", "+                cmd[0] = \"env\";", "+            }", "+            // rely on PATH"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9df87765e12ac50417e67e0cd0c21369", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "539b948ffedd25e824bf2994a7c26328", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/PumpStreamHandler.java", "commitBeforeChange": "5a6247d496855302f131c8b8a0bb74e652ea050a", "commitAfterChange": "1b30eea4620f697369cb2948254e5ad7fac5fe99", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": " StreamPumper createInputPump(InputStream is, OutputStream os,                                 boolean closeWhenExhausted)", "signatureAfterChange": "     protected Thread createPump(InputStream is, OutputStream os,                                 boolean closeWhenExhausted, boolean nonBlockingIO)", "diff": ["-    /*protected*/ StreamPumper createInputPump(InputStream is, OutputStream os,", "-                                boolean closeWhenExhausted) {", "-        StreamPumper pumper = new StreamPumper(is, os, closeWhenExhausted,", "-                                               false);", "-        pumper.setAutoflush(true);", "-        return pumper;", "+    protected Thread createPump(InputStream is, OutputStream os,", "+                                boolean closeWhenExhausted, boolean nonBlockingIO) {", "+        final Thread result", "+            = new ThreadWithPumper(new StreamPumper(is, os,", "+                                                    closeWhenExhausted,", "+                                                    nonBlockingIO));", "+        result.setDaemon(true);", "+        return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79974f8d9bc33e556ed1b0e0eb630c83", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "2c4faa154f069f3f69d6c3c95629409a7b8b0cc4", "commitAfterChange": "8b58203e3120ecbeb7c53ce127fb41316f7eea92", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 67, "signatureBeforeChange": "     private TokenizedPattern[] fillNonPatternSet(Set set, String[] patterns)", "signatureAfterChange": "     private TokenizedPattern[] fillNonPatternSet(Map map, String[] patterns)", "diff": ["-    private TokenizedPattern[] fillNonPatternSet(Set set, String[] patterns) {", "+    private TokenizedPattern[] fillNonPatternSet(Map map, String[] patterns) {", "-                set.add(isCaseSensitive() ? patterns[i]", "-                    : patterns[i].toUpperCase());", "+                String s = isCaseSensitive()", "+                    ? patterns[i] : patterns[i].toUpperCase();", "+                map.put(s, new TokenizedPath(s));"]}]}
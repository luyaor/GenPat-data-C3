{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "699c44fc7eba57fb6e330e523afccfc6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "379affe50beb3c0985891e7e2ae947f1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SignJar.java", "commitBeforeChange": "ec540b86a35705412b7b3cc9dc0808100f28c913", "commitAfterChange": "fcbf12d7b68d07dffc7d0002ef9a69ea4c2b43a8", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 13, "signatureBeforeChange": "       public void execute() throws BuildException", "signatureAfterChange": "       public void execute() throws BuildException", "diff": ["+        if (null == jar && null == filesets) {", "+            throw new BuildException(\"jar must be set through jar attribute or nested filesets\");", "+        }", "+        if( null != jar ) {", "+            doOneJar(jar, signedjar);", "+            return;", "+        } else {", "+            //Assume null != filesets", "+", "+            // deal with the filesets", "+            for (int i=0; i<filesets.size(); i++) {", "+                FileSet fs = (FileSet) filesets.elementAt(i);", "+                DirectoryScanner ds = fs.getDirectoryScanner(project);", "+                String[] jarFiles = ds.getIncludedFiles();", "+                for(int j=0; j<jarFiles.length; j++) {", "+                    doOneJar(jarFiles[j], null);", "+                }", "+            }", "+        }", "+    }", "-        } ", "-", "-        if (null == jar) {", "-            throw new BuildException(\"jar attribute must be set\");", "-        } ", "-        } ", "-        } ", "-        if(isUpToDate()) return;", "-        ", "-        } ", "-        } ", "-        } ", "-        } ", "-        } ", "-        if (null != signedjar) {", "-            cmd.createArg().setValue(signedjar);", "-        } ", "-        } ", "-        } ", "-        } ", "-        cmd.createArg().setValue(jar);", "-        ", "-        log(\"Signing Jar : \" + (new File(jar)).getAbsolutePath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48331983ada5e7f6e9c161c2c5ae84ef", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/unix/Symlink.java", "commitBeforeChange": "1225a5a849faa66e73a1262180dd002332b162b0", "commitAfterChange": "90a6d8155086ee0d0a1911584a56eb7b33fb3d0f", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 19, "signatureBeforeChange": "      private Vector findLinks(Vector fileSets)", "signatureAfterChange": "     private HashSet findLinks(Vector v)", "diff": ["-", "-    private Vector findLinks(Vector fileSets) {", "-        Vector result = new Vector();", "-", "-        // loop through the supplied file sets:", "-        FSLoop: for (int i = 0; i < fileSets.size(); i++) {", "-            FileSet fsTemp = (FileSet) fileSets.elementAt(i);", "-            String workingDir = null;", "-            Vector links = new Vector();", "-            Vector linksFiles = new Vector();", "-            Enumeration enumLinks;", "-", "-            DirectoryScanner ds;", "-", "-            File tmpfil = null;", "-            try {", "-                tmpfil = fsTemp.getDir(this.getProject());", "-                workingDir = tmpfil.getCanonicalPath();", "-            } catch (IOException ioe) {", "-                handleError(\"Exception caught getting \"", "-                            + \"canonical path of working dir \" + tmpfil", "-                            + \" in a FileSet passed to the symlink \"", "-                            + \"task. Further processing of this \"", "-                            + \"fileset skipped\");", "-                continue FSLoop;", "-            }", "-            // Get a vector of String with file names that match the pattern:", "-            ds = fsTemp.getDirectoryScanner(this.getProject());", "-            links = scanDirsAndFiles(ds);", "-", "-            // Now convert the strings to File Objects", "-            // using the canonical version of the working dir:", "-            enumLinks = links.elements();", "-", "-            while (enumLinks.hasMoreElements()) {", "-                linksFiles.addElement(new File(workingDir", "-                                               + File.separator", "-                                               + (String) enumLinks", "-                                               .nextElement()));", "-            }", "-            // Now loop through and remove the non-links:", "-", "-            enumLinks = linksFiles.elements();", "-", "-            File parentNext, next;", "-            String nameParentNext;", "-            Vector removals = new Vector();", "-            while (enumLinks.hasMoreElements()) {", "-                next = (File) enumLinks.nextElement();", "-                nameParentNext = next.getParent();", "-", "-                parentNext = new File(nameParentNext);", "-                try {", "-                    if (!FILE_UTILS.isSymbolicLink(parentNext, next.getName())) {", "-                        removals.addElement(next);", "+    private HashSet findLinks(Vector v) {", "+        HashSet result = new HashSet();", "+        for (int i = 0; i < v.size(); i++) {", "+            FileSet fs = (FileSet) v.get(i);", "+            DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "+            String[][] fnd = new String[][]", "+                {ds.getIncludedFiles(), ds.getIncludedDirectories()};", "+            File dir = fs.getDir(getProject());", "+            for (int j = 0; j < fnd.length; j++) {", "+                for (int k = 0; k < fnd[j].length; k++) {", "+                    try {", "+                        File f = new File(dir, fnd[j][k]);", "+                        File pf = f.getParentFile();", "+                        String name = f.getName();", "+                        if (FILE_UTILS.isSymbolicLink(pf, name)) {", "+                            result.add(new File(pf.getCanonicalFile(), name));", "+                        }", "+                    } catch (IOException e) {", "+                        handleError(\"IOException: \" + fnd[j][k] + \" omitted\");", "-                } catch (IOException ioe) {", "-                    handleError(\"Failed checking \" + next", "-                                + \" for symbolic link. FileSet skipped.\");", "-                    continue FSLoop;", "-                    // Otherwise this file will be falsely recorded as a link,", "-                    // if failonerror = false, hence the warn and skip.", "-            enumLinks = removals.elements();", "-", "-            while (enumLinks.hasMoreElements()) {", "-                linksFiles.removeElement(enumLinks.nextElement());", "-            }", "-            // Now we have what we want so add it to results, ensuring that", "-            // no link is returned twice and we have a canonical reference", "-            // to the link. (no symlinks in the parent dir)", "-", "-            enumLinks = linksFiles.elements();", "-            while (enumLinks.hasMoreElements()) {", "-                File temp, parent;", "-                next = (File) enumLinks.nextElement();", "-                try {", "-                    parent = new File(next.getParent());", "-                    parent = new File(parent.getCanonicalPath());", "-                    temp = new File(parent, next.getName());", "-                    if (!result.contains(temp)) {", "-                        result.addElement(temp);", "-                    }", "-                } catch (IOException ioe) {", "-                    handleError(\"IOException: \" + next + \" omitted\");", "-                }", "-            }", "-            // Note that these links are now specified with a full", "-            // canonical path irrespective of the working dir of the", "-            // file set so it is ok to mix them in the same vector."]}]}
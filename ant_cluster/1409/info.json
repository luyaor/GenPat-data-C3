{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7762708e1df08b5f6aa6b5ad5fdb7fa8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "015f3895d21c671929582ac1f81dc012", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/DOMElementWriter.java", "commitBeforeChange": "a0b111116d82b1ab530e3237b9b1706455052771", "commitAfterChange": "b7b59490a82c8b2df3c580a2f2502cc28b8e75d8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void openElement(Element element, Writer out, int indent,                             String indentWith, boolean hasChildren)         throws IOException", "signatureAfterChange": "     public void openElement(Element element, Writer out, int indent,                             String indentWith, boolean hasChildren)         throws IOException", "diff": ["+        if (namespacePolicy.qualifyElements) {", "+            String prefix = (String) nsPrefixMap.get(element.getNamespaceURI());", "+            if (prefix == null) {", "+                if (nsPrefixMap.isEmpty()) {", "+                    // steal default namespace", "+                    prefix = \"\";", "+                } else {", "+                    prefix = NS + (nextPrefix++);", "+                }", "+                nsPrefixMap.put(element.getNamespaceURI(), prefix);", "+                addNSDefinition(element, element.getNamespaceURI());", "+            }", "+            if (!\"\".equals(prefix)) {", "+                out.write(prefix);", "+                out.write(\":\");", "+            }", "+        }", "+            if (namespacePolicy.qualifyAttributes) {", "+                String prefix =", "+                    (String) nsPrefixMap.get(attr.getNamespaceURI());", "+                if (prefix == null) {", "+                    prefix = NS + (nextPrefix++);", "+                    nsPrefixMap.put(attr.getNamespaceURI(), prefix);", "+                    addNSDefinition(element, attr.getNamespaceURI());", "+                }", "+                out.write(prefix);", "+                out.write(\":\");", "+            }", "+", "+        // write namespace declarations", "+        ArrayList al = (ArrayList) nsURIByElement.get(element);", "+        if (al != null) {", "+            Iterator iter = al.iterator();", "+            while (iter.hasNext()) {", "+                String uri = (String) iter.next();", "+                String prefix = (String) nsPrefixMap.get(uri);", "+                out.write(\" xmlns\");", "+                if (!\"\".equals(prefix)) {", "+                    out.write(\":\");", "+                    out.write(prefix);", "+                }", "+                out.write(\"=\\\"\");", "+                out.write(uri);", "+                out.write(\"\\\"\");", "+            }", "+        }", "+", "+            removeNSDefinitions(element);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05b46c52ad0c183fa0d0ac14553208af", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/util/FileUtils.java", "commitBeforeChange": "6a20789293e6588a94560a11697fb59dd0d9338c", "commitAfterChange": "d319ab594b9d0b5a3a2ee264845172ca590496f3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public static String[] translateCommandline( Path to_process )         throws TaskException", "signatureAfterChange": "      public static String[] translateCommandline( final String to_process )         throws TaskException", "diff": ["-    public static String[] translateCommandline( Path to_process )", "-        throws TaskException", "-    {", "-        return translateCommandline( to_process.toString() );", "-    }", "+    public static String[] translateCommandline( final String to_process )"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b176f6fe99e694a1d001c7bce003981", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteOn.java", "commitBeforeChange": "a9659b5c2ea9ebd7990ecef24b478e59243fea8c", "commitAfterChange": "0d7f1ce40f2ca5e16a8c99bf9c185d01cf6fa1cb", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 15, "signatureBeforeChange": "      protected void runExec(Execute exe) throws BuildException", "signatureAfterChange": "      protected void runExec(Execute exe) throws BuildException", "diff": ["+        int totalFiles = 0;", "+        int totalDirs = 0;", "+        boolean haveExecuted = false;", "+                        totalFiles++;", "+                        totalDirs++;", "+                        haveExecuted = true;", "+                    }", "+                    fileNames.removeAllElements();", "+                    baseDirs.removeAllElements();", "+                }", "+            }", "+", "+            for (int i = 0; i < filelists.size(); i++) {", "+                FileList list = (FileList) filelists.elementAt(i);", "+                File base = list.getDir(getProject());", "+                String[] names = list.getFiles(getProject());", "+", "+                for (int j = 0; j < names.length; j++) {", "+                    File f = new File(base, names[j]);", "+                    if ((f.isFile() && !\"dir\".equals(type))", "+                        || (f.isDirectory() && !\"file\".equals(type))) {", "+", "+                        if (f.isFile()) {", "+                            totalFiles++;", "+                        } else {", "+                            totalDirs++;", "+                        }", "+", "+                        fileNames.addElement(names[j]);", "+                        baseDirs.addElement(base);", "+                    }", "+                }", "+", "+                if (fileNames.size() == 0 && skipEmpty) {", "+                    log(\"Skipping filelist for directory \"", "+                        + base + \". It is empty.\", Project.MSG_INFO);", "+                    continue;", "+                }", "+", "+                if (!parallel) {", "+                    String[] s = new String[fileNames.size()];", "+                    fileNames.copyInto(s);", "+                    for (int j = 0; j < s.length; j++) {", "+                        String[] command = getCommandline(s[j], base);", "+                        log(Commandline.describeCommand(command), ", "+                            Project.MSG_VERBOSE);", "+                        exe.setCommandline(command);", "+                        runExecute(exe);", "+                        haveExecuted = true;", "-                String[] s = new String[fileNames.size()];", "-                fileNames.copyInto(s);", "-                File[] b = new File[baseDirs.size()];", "-                baseDirs.copyInto(b);", "-                String[] command = getCommandline(s, b);", "-                log(Commandline.describeCommand(command), Project.MSG_VERBOSE);", "-                exe.setCommandline(command);", "-                runExecute(exe);", "+                runParallel(exe, fileNames, baseDirs);", "+                haveExecuted = true;", "+            }", "+", "+            if (haveExecuted) {", "+                log(\"Applied \" + cmdl.getExecutable() + \" to \"", "+                    + totalFiles + \" file\"", "+                    + (totalFiles != 1 ? \"s\" : \"\") + \" and \"", "+                    + totalDirs + \" director\"", "+                    + (totalDirs != 1 ? \"ies\" : \"y\") + \".\",", "+                    verbose ? Project.MSG_INFO : Project.MSG_VERBOSE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "316287d3966f1c0a5340d2b0fa0de356", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "47a487c0dd073ced71720ad46588eeb38e12e47c", "commitAfterChange": "67c71a89e9e02b6e4841f748c79350b7ca190a00", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     protected void addPathFile(File pathComponent) throws IOException", "signatureAfterChange": "     protected void addPathFile(File pathComponent) throws IOException", "diff": ["+        if (pathComponent.isDirectory()) {", "+            return;", "+        }", "+", "+        String absPathPlusTimeAndLength =", "+            pathComponent.getAbsolutePath() + pathComponent.lastModified() + \"-\"", "+            + pathComponent.length();", "+        String classpath = (String) pathMap.get(absPathPlusTimeAndLength);", "+        if (classpath == null) {", "+            ZipFile jarFile = null;", "+            InputStream manifestStream = null;", "+            try {", "+                jarFile = new ZipFile(pathComponent);", "+                manifestStream", "+                    = jarFile.getInputStream(new ZipEntry(\"META-INF/MANIFEST.MF\"));", "+", "+                if (manifestStream == null) {", "+                    return;", "+                }", "+                Reader manifestReader", "+                    = new InputStreamReader(manifestStream, \"UTF-8\");", "+                org.apache.tools.ant.taskdefs.Manifest manifest", "+                    = new org.apache.tools.ant.taskdefs.Manifest(manifestReader);", "+                classpath", "+                    = manifest.getMainSection().getAttributeValue(\"Class-Path\");", "+", "+            } catch (org.apache.tools.ant.taskdefs.ManifestException e) {", "+                // ignore", "+            } finally {", "+                if (manifestStream != null) {", "+                    manifestStream.close();", "+                }", "+                if (jarFile != null) {", "+                    jarFile.close();", "+                }", "+            }", "+            if (classpath == null) {", "+                classpath = \"\";", "+            }", "+            pathMap.put(absPathPlusTimeAndLength, classpath);", "+        }", "+", "+        if (!\"\".equals(classpath)) {", "+            URL baseURL = FILE_UTILS.getFileURL(pathComponent);", "+            StringTokenizer st = new StringTokenizer(classpath);", "+            while (st.hasMoreTokens()) {", "+                String classpathElement = st.nextToken();", "+                URL libraryURL = new URL(baseURL, classpathElement);", "+                if (!libraryURL.getProtocol().equals(\"file\")) {", "+                    log(\"Skipping jar library \" + classpathElement", "+                        + \" since only relative URLs are supported by this\"", "+                        + \" loader\", Project.MSG_VERBOSE);", "+                    continue;", "+                }", "+                File libraryFile = new File(libraryURL.getFile());", "+                if (libraryFile.exists() && !isInPath(libraryFile)) {", "+                    addPathFile(libraryFile);", "+                }", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40d4332fc3f1da3e63be48471ec3f99d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/launch/Launcher.java", "commitBeforeChange": "1ca4fd877177c9619e7c8d9c6e5bb3c606ac4546", "commitAfterChange": "24a5f03a90e6931dd280031f226b76bfe971193e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private void run(String[] args) throws MalformedURLException", "signatureAfterChange": "     private void run(String[] args) throws MalformedURLException", "diff": ["+        String libPath = \"\";", "+        String[] newargs = null;", "+        int argcount = -1;", "+        for (argcount = 0; argcount < args.length -1; argcount++) {", "+            if (args[argcount].equals(\"-lib\")) {", "+                libPath = args[argcount + 1];", "+                break;", "+            }", "+        }", "+        if (libPath.equals(\"\")) {", "+           newargs = new String[args.length];", "+           System.arraycopy(args, 0, newargs, 0, args.length);", "+        } else {", "+            newargs = new String[args.length - 2];", "+            // copy the beginning of the args array", "+            if (argcount > 0 ) {", "+                System.arraycopy(args, 0, newargs, 0 ,argcount);", "+            }", "+            // copy the end of the args array", "+            if ((argcount + 2 < args.length) && argcount > 0) {", "+                System.arraycopy(args, argcount + 2, newargs, argcount, args.length - (argcount + 2));", "+            }", "+        }", "+        StringTokenizer myTokenizer = new StringTokenizer(libPath, System.getProperty(\"path.separator\"));", "+        URL[] classPathJars = new URL[myTokenizer.countTokens()];", "+        int classPathJarCount = 0;", "+        while (myTokenizer.hasMoreElements()) {", "+            String token = myTokenizer.nextToken();", "+            classPathJars[classPathJarCount++] = new File(token).toURL();", "+        }", "-        int numJars = userJars.length + systemJars.length;", "+        int numJars = classPathJars.length + userJars.length + systemJars.length;", "-        System.arraycopy(userJars, 0, jars, 0, userJars.length);", "-        System.arraycopy(systemJars, 0, jars, userJars.length,", "+        System.arraycopy(classPathJars, 0, jars, 0, classPathJars.length);", "+        System.arraycopy(userJars, 0, jars, classPathJars.length, userJars.length);", "+        System.arraycopy(systemJars, 0, jars, userJars.length + classPathJars.length,", "-            main.startAnt(args, null, null);", "+            main.startAnt(newargs, null, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "410a556b8cd7ba9bfc3ee21f79059f5e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Expand.java", "commitBeforeChange": "dc00bd536bd6a1cd2bae07cecc352c085a8a0f9d", "commitAfterChange": "80d371a3b4e1ba3f845e1b9a8f831fd6a11fafd5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        ", "+", "+        if (source == null && filesets.size() == 0) {", "+            throw new BuildException(\"src attribute and/or filesets must be specified\");", "+        }", "+", "+        if (dest == null && outFile == null) {", "+            throw new BuildException(", "+                \"Dest and/or the OutFile attribute \" +", "+                \"must be specified\");", "+        }", "+", "+        if (dest != null && dest.exists() && !dest.isDirectory()) {", "+            throw new BuildException(\"Dest must be a directory.\", location);", "+        }", "+", "+        if (verbose && outFile == null) {", "+            throw new BuildException(", "+                \"Verbose can be set only when OutFile is \" +", "+                \"specified\");", "+        }", "-        ", "-        if (source == null) {", "-            throw new BuildException(\"Source attribute must be specified\");", "-        }", "-        if (dest == null) {", "-            throw new BuildException(\"Dest attribute must be specified\");", "-        }", "-        if (source.isDirectory()) {", "-            // get all the files in the descriptor directory", "-            DirectoryScanner ds = super.getDirectoryScanner(source);", "-    ", "-            String[] files = ds.getIncludedFiles();", "-            for (int i = 0; i < files.length; ++i) {", "-                File file = new File(source, files[i]);", "-                expandFile(touch, file, dest);", "+        try {", "+            if (outFile != null) {", "+                if (outFile.isDirectory()) {", "+                    throw new BuildException(\"Outfile \" + outFile", "+                        + \" must not be a directory.\");", "+                }", "+                if (!outFile.exists()) {", "+                    File parent = new File(outFile.getParent());", "+                    if (!parent.exists()) {", "+                        if (!parent.mkdirs()) {", "+                            throw new BuildException(\"Unable to create \"", "+                                + outFile);", "+                        }", "+                    }", "+                }", "+                fw = new FileWriter(outFile);", "+                bw = new BufferedWriter(fw);", "+                pw = new PrintWriter(bw, true);", "+            }", "+        } catch (IOException ioe) {", "+            throw new BuildException(ioe.getMessage(), location);", "+        }", "+        if (source != null) {", "+            if (source.isDirectory()) {", "+                // get all the files in the descriptor directory", "+                DirectoryScanner ds = super.getDirectoryScanner(source);", "+", "+                String[] files = ds.getIncludedFiles();", "+                for (int i = 0; i < files.length; ++i) {", "+                    File file = new File(source, files[i]);", "+                    expandFile(touch, file, dest);", "+                }", "+            }", "+            else {", "+                expandFile(touch, source, dest);", "-        else {", "-            expandFile(touch, source, dest);", "+        if (filesets.size() > 0) {", "+            for (int j=0; j < filesets.size(); j++) {", "+                FileSet fs = (FileSet) filesets.elementAt(j);", "+                DirectoryScanner ds = fs.getDirectoryScanner(project);", "+                File fromDir = fs.getDir(project);", "+", "+                String[] files = ds.getIncludedFiles();", "+                for (int i = 0; i < files.length; ++i) {", "+                    File file = new File(fromDir, files[i]);", "+                    expandFile(touch, file, dest);", "+                }", "+            }", "+        }", "+        try {", "+            if (pw != null) {", "+                pw.close();", "+            }", "+            if (bw != null) {", "+                bw.close();", "+            }", "+            if (fw != null) {", "+                fw.close();", "+            }", "+        } catch (IOException ioe1) {", "+            //Oh, well!  We did our best"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "486a90703ec6bba5559cc98ea83b6dbe", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/depend/Depend.java", "commitBeforeChange": "2bb82ea3965603288bc8defcacdf2dcb1e549fe2", "commitAfterChange": "798eedafd9e38fb45daae1aa139ca40b7b23f493", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 6, "signatureBeforeChange": "       private void determineDependencies() throws IOException", "signatureAfterChange": "     private void determineDependencies() throws IOException", "diff": ["+     */", "+        Hashtable dependencyMap = new Hashtable();", "+            dependencyMap.put(info.className, dependencyList);", "-            ", "+        ", "+        classJarDependencies = null;", "+        if (compileClasspath != null) {", "+            // now determine which jars each class depends upon", "+            classJarDependencies = new Hashtable();", "+            AntClassLoader loader = new AntClassLoader(getProject(), compileClasspath);", "+            Hashtable jarFileCache = new Hashtable();", "+            Object nullJarFile = new Object();", "+            for (Enumeration e = dependencyMap.keys(); e.hasMoreElements();) {", "+                String className = (String)e.nextElement();", "+                Vector dependencyList = (Vector)dependencyMap.get(className);", "+                Hashtable jarDependencies = new Hashtable();", "+                classJarDependencies.put(className, jarDependencies);", "+                for (Enumeration e2 = dependencyList.elements(); e2.hasMoreElements();) {", "+                    String dependency =(String)e2.nextElement();", "+                    Object jarFileObject = jarFileCache.get(dependency);", "+                    if (jarFileObject == null) {", "+                        jarFileObject = nullJarFile;", "+                        ", "+                        if (!dependency.startsWith(\"java.\") && !dependency.startsWith(\"javax.\")) {", "+                            URL classURL = loader.getResource(dependency.replace('.', '/') + \".class\");", "+                            if (classURL != null) {", "+                                String jarFilePath = classURL.getFile();", "+                                if (jarFilePath.startsWith(\"file:\")) {", "+                                    int classMarker = jarFilePath.indexOf('!');", "+                                    jarFilePath = jarFilePath.substring(5, classMarker);", "+                                }", "+                                jarFileObject = new File(jarFilePath);", "+                                log(\"Class \" + className + ", "+                                    \" depends on \" + jarFileObject + ", "+                                    \" due to \" + dependency, Project.MSG_DEBUG);", "+                            }", "+                        }", "+                        jarFileCache.put(dependency, jarFileObject);", "+                    }", "+                    if (jarFileObject != null && jarFileObject != nullJarFile) {", "+                        // we need to add this jar to the list for this class.", "+                        File jarFile = (File)jarFileObject;", "+                        jarDependencies.put(jarFile, jarFile);", "+                    }", "+                }", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "606ffbd96f55b5474802842283d0ab61", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Expand.java", "commitBeforeChange": "e22d7c50937ee1d155f91bfd635673bd41017e76", "commitAfterChange": "95fa304e14c4cc49d84e089ea13107a35b68f8d5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      protected void extractFile(FileUtils fileUtils, File srcF, File dir,                                InputStream compressedInputStream,                                String entryName, long entrySize,                                Date entryDate, boolean isDirectory)                                throws IOException", "signatureAfterChange": "      protected void extractFile(FileUtils fileUtils, File srcF, File dir,                                InputStream compressedInputStream,                                String entryName,                                Date entryDate, boolean isDirectory)                                throws IOException", "diff": ["-                               String entryName, long entrySize,", "+                               String entryName,", "-                               throws IOException {", "-        extractFile(fileUtils, srcF, dir, compressedInputStream,", "-                    entryName, entrySize, entryDate, isDirectory,", "-                    null, null);", "-", "-    }", "+        log(\"Expanding: \" + srcF + \" into \" + dir, Project.MSG_INFO);", "+        File f = fileUtils.resolveFile(dir, entryName);", "+        try {", "+            if (!overwrite && f.exists()", "+                && f.lastModified() >= entryDate.getTime()) {", "+                log(\"Skipping \" + f + \" as it is up-to-date\",", "+                    Project.MSG_DEBUG);", "+                return;", "+            log(\"expanding \" + entryName + \" to \"+ f,", "+                Project.MSG_VERBOSE);", "+            // create intermediary directories - sometimes zip don't add them", "+            File dirF= fileUtils.getParentFile(f);", "+            dirF.mkdirs();", "+            if (isDirectory) {", "+                f.mkdirs();", "+            } else {", "+                byte[] buffer = new byte[1024];", "+                int length = 0;", "+                FileOutputStream fos = null;", "+                try {", "+                    fos = new FileOutputStream(f);", "+", "+                    while ((length =", "+                            compressedInputStream.read(buffer)) >= 0) {", "+                        fos.write(buffer, 0, length);", "+                    }", "+", "+                    fos.close();", "+                    fos = null;", "+                } finally {", "+                    if (fos != null) {", "+                        try {", "+                            fos.close();", "+                        } catch (IOException e) {}", "+", "+            fileUtils.setFileLastModified(f, entryDate.getTime());", "+        } catch( FileNotFoundException ex ) {", "+            log(\"Unable to expand to file \" + f.getPath(), Project.MSG_WARN);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "652ecec64274134b38ced5fa55a6a2d3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/depend/Depend.java", "commitBeforeChange": "2bb82ea3965603288bc8defcacdf2dcb1e549fe2", "commitAfterChange": "798eedafd9e38fb45daae1aa139ca40b7b23f493", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        ", "+            ", "-        ", "+            ", "-        ", "+            ", "- ", "-/*            ", "-            for (Enumeration e = affectedClassMap.keys(); e.hasMoreElements(); ) {", "-                String className = (String)e.nextElement();", "-                log(\"Class \" + className + \" affects:\", Project.MSG_DEBUG);", "-                Hashtable affectedClasses = (Hashtable)affectedClassMap.get(className);", "-                for (Enumeration e2 = affectedClasses.keys(); e2.hasMoreElements(); ) {", "-                    String affectedClass = (String)e2.nextElement();", "-                    ClassFileInfo info = (ClassFileInfo)affectedClasses.get(affectedClass);", "-                    log(\"   \" + affectedClass + \" in \" + info.absoluteFile.getPath(), Project.MSG_DEBUG);", "+            ", "+            if (dump) {            ", "+                log(\"Reverse Dependency Dump for \" + affectedClassMap.size() + ", "+                    \" classes:\", Project.MSG_DEBUG);", "+                for (Enumeration e = affectedClassMap.keys(); e.hasMoreElements(); ) {", "+                    String className = (String)e.nextElement();", "+                    log(\" Class \" + className + \" affects:\", Project.MSG_DEBUG);", "+                    Hashtable affectedClasses = (Hashtable)affectedClassMap.get(className);", "+                    for (Enumeration e2 = affectedClasses.keys(); e2.hasMoreElements(); ) {", "+                        String affectedClass = (String)e2.nextElement();", "+                        ClassFileInfo info = (ClassFileInfo)affectedClasses.get(affectedClass);", "+                        log(\"    \" + affectedClass + \" in \" + info.absoluteFile.getPath(), Project.MSG_DEBUG);", "+                    }", "+                ", "+                if (classJarDependencies != null) {", "+                    log(\"Jar dependencies (Forward):\", Project.MSG_DEBUG);", "+                    for (Enumeration e = classJarDependencies.keys(); e.hasMoreElements();) { ", "+                        String className = (String)e.nextElement();", "+                        log(\" Class \" + className + \" depends on:\", Project.MSG_DEBUG);", "+                        Hashtable jarDependencies = (Hashtable)classJarDependencies.get(className);", "+                        for (Enumeration e2 = jarDependencies.elements(); e2.hasMoreElements();) {", "+                            File jarFile = (File)e2.nextElement();", "+                            log(\"    \" + jarFile.getPath(), Project.MSG_DEBUG);", "+                        }", "+                    }", "+                }", "+                            ", "-*/            ", "+            ", "-            outOfDateClasses = new Vector();", "-            for (int i=0; i<srcPathList.length; i++) {", "+            outOfDateClasses = new Hashtable();", "+            for (int i=0; i < srcPathList.length; i++) {", "-        ", "-        ", "-        ", "+                }", "+            }", "+", "+            // now check jar dependencies", "+            if (classJarDependencies != null) {", "+                for (Enumeration e = classJarDependencies.keys(); e.hasMoreElements();) { ", "+                    String className = (String)e.nextElement();", "+                    if (!outOfDateClasses.containsKey(className)) {", "+                        ClassFileInfo info = (ClassFileInfo)classFileInfoMap.get(className);", "+                        Hashtable jarDependencies = (Hashtable)classJarDependencies.get(className);", "+                        for (Enumeration e2 = jarDependencies.elements(); e2.hasMoreElements();) {", "+                            File jarFile = (File)e2.nextElement();", "+                            if (jarFile.lastModified() > info.absoluteFile.lastModified()) {", "+                                log(\"Class \" + className + ", "+                                    \" is out of date with respect to \" + jarFile, Project.MSG_DEBUG);", "+                                outOfDateClasses.put(className, className);", "+                                break;", "+                            }", "+                        }", "+                    }", "-            deleteAllAffectedFiles();", "+            int count = deleteAllAffectedFiles();", "-            log(\"Duration = \" + (System.currentTimeMillis() - start));", "+            long duration = (System.currentTimeMillis() - start) / 1000;", "+            log(\"Deleted \" + count + \" out of date files in \" + duration + \" seconds\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6956c8b8a9d7fe52be90dc0759183739", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/anteater/source/main/org/apache/ant/ProjectBuilder.java", "commitBeforeChange": "421736ed4a52a3f068a31f53678b97915ebb0cc9", "commitAfterChange": "f85678f1abd081bfd165ce81b94bad652968e4fd", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "                  public void startElement(String name, AttributeList atts) throws SAXException", "signatureAfterChange": "                  public void startElement(String name, AttributeList atts) throws SAXException", "diff": ["+        ", "-            //System.out.println(\"element: \" + name);", "+", "+            StringBuffer tagCharData = new StringBuffer();", "+            tagCharDataStack.insertElementAt(tagCharData, 0);", "+            ", "-                    if (projectName == null) {", "-                        System.out.println(\"Projects *must* have names\");", "-                        // XXX exception out", "+                    if (projectName != null) {", "+                        project.setName(projectName);", "+                    } else {", "+                        String msg = \"Project element doesn't contain a name attribute\";", "+                        AntException ae = new AntException(msg);", "+                        throw new SAXException(ae);", "-                    project.setName(projectName);", "+                    String defaultTarget = atts.getValue(\"default\");", "+                    if (defaultTarget != null) {", "+                        project.setDefaultTargetName(defaultTarget);", "+                    }", "+                    String baseDirName = atts.getValue(\"basedir\");", "+                    if (baseDirName != null) {", "+                        // XXX need to check to see if base dir exists", "+                        project.setBaseDir(new File(baseDirName));", "+                    }", "-                    System.out.println(\"Expecting project, got: \" + name);", "-                    // XXX exception out", "+                    String msg = \"Project file doesn't contain a project element as \" +", "+                                 \"its root node\";", "+                    AntException ae = new AntException(msg);", "+                    throw new SAXException(ae);", "+                ", "-                if (name.equals(\"target\")) {", "+              ", "+                // valid tags in a project object are: description, property, and target", "+              ", "+                if (name.equals(\"description\")) {", "+                    state = STATE_DESCRIPTION;", "+                } else if (name.equals(\"property\")) {", "+                    state = STATE_PROPERTY;", "+                    String propertyName = atts.getValue(\"name\");", "+                    String propertyValue = atts.getValue(\"value\");", "+                    if (propertyName == null) {", "+                        String msg = \"Name attribute must be present on property\";", "+                        AntException ae = new AntException(msg);", "+                        throw new SAXException(ae);", "+                    } else if (propertyValue == null) {", "+                        String msg = \"Value attribute must be present on property\";", "+                        AntException ae = new AntException(msg);", "+                        throw new SAXException(ae);", "+                    } else {", "+                        project.setProperty(propertyName, propertyValue);", "+                    }", "+                } else if (name.equals(\"target\")) {", "-                    if (targetName == null) {", "-                        System.out.println(\"Targets *must* have names\");", "-                        // XXX exception out", "+                    if (targetName != null) {", "+                        currentTarget = new Target(targetName);", "+                        project.addTarget(currentTarget);", "+                    } else {", "+                        // XXX figure out which target we're talking about! ", "+                        // Like a location", "+                        String msg = \"Target element doesn't contain a name attribute\";", "+                        AntException ae = new AntException(msg);", "+                        throw new SAXException(ae);", "-                    currentTarget = new Target(targetName);", "-                    project.addTarget(currentTarget);", "-                    ", "+                    String depends = atts.getValue(\"depends\");", "+                    if (depends != null) {", "+                        StringTokenizer tok = new StringTokenizer(depends, \",\", false);", "+                        while(tok.hasMoreTokens()) {", "+                            currentTarget.addDependancy(tok.nextToken().trim());", "+                        }", "+                    }", "+                                            ", "+                ", "+              ", "+                // Valid tags inside target: task", "+              ", "+                ", "+              case STATE_TASK:", "+              ", "+                // data in here needs to be reflected into tasks", "+                ", "+                System.out.println(\"Not yet supporting tags inside of tasks!\");", "+                System.out.println(\"The project build will probably bust right here\");", "+                ", "+                break;", "+                "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7168b82789e8568746bd9e4cae9206a0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/email/EmailAddress.java", "commitBeforeChange": "7b4290a6232f165327ddf4832c06474c8ef6109e", "commitAfterChange": "f1a4a514784709dadf94d8b4f38ab2f52f1b1e1e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public EmailAddress(String address)", "signatureAfterChange": "     public EmailAddress(String email)", "diff": ["-    public EmailAddress(String address) {", "-        this.address = address;", "+    // Algorithm based on the one found in Ant's MailMessage.java", "+    public EmailAddress(String email) {", "+        final int minLen = 9;", "+        int len = email.length();", "+", "+        // shortcut for \"<address>\"", "+        if (len > minLen) {", "+            if ((email.charAt(0) == '<' || email.charAt(1) == '<')", "+            && (email.charAt(len - 1) == '>' || email.charAt(len - 2) == '>')) {", "+                this.address = trim(email, true);", "+                return;", "+            }", "+        }", "+", "+        int paramDepth = 0;", "+        int start = 0;", "+        int end = 0;", "+        int nStart = 0;", "+        int nEnd = 0;", "+", "+        for (int i = 0; i < len; i++) {", "+            char c = email.charAt(i);", "+            if (c == '(') {", "+                paramDepth++;", "+                if (start == 0) {", "+                    end = i;  // support \"address (name)\"", "+                    nStart = i + 1;", "+                }", "+            } else if (c == ')') {", "+                paramDepth--;", "+                if (end == 0) {", "+                    start = i + 1;  // support \"(name) address\"", "+                    nEnd = i;", "+                }", "+            } else if (paramDepth == 0 && c == '<') {", "+                if (start == 0) {", "+                    nEnd = i;", "+                }", "+                start = i + 1;", "+            } else if (paramDepth == 0 && c == '>') {", "+                end = i;", "+                if (end != len - 1) {", "+                    nStart = i + 1;", "+                }", "+            }", "+        }", "+", "+        // DEBUG: System.out.println( email );", "+        if (end == 0) {", "+            end = len;", "+        }", "+        // DEBUG: System.out.println( \"address: \" + start + \" \" + end );", "+        if (nEnd == 0) {", "+            nEnd = len;", "+        }", "+        // DEBUG: System.out.println( \"name: \" + nStart + \" \" + nEnd );", "+", "+        this.address = trim(email.substring(start, end), true);", "+        this.name = trim(email.substring(nStart, nEnd), false);", "+", "+        // if the two substrings are longer than the original, then name", "+        // contains address - so reset the name to null", "+        if (this.name.length() + this.address.length() > len) {", "+            this.name = null;", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80031b72d92c2a60ecccd0cd006f5b9c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/frontend/org/apache/ant/cli/Commandline.java", "commitBeforeChange": "752f49d5b18f9743f8e4a6dbdc8065d240d9c97a", "commitAfterChange": "da4e1a3aa99899d6aecc6d14c2a7498fa51647aa", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public static void start(String[] args, AntEnvironment config)", "signatureAfterChange": "     public void start(final String[] args, final AntEnvironment antEnv)", "diff": ["-     */", "-    public static void start(String[] args, AntEnvironment config) {", "-        // create a command line and use it to run ant", "-        Commandline commandline = new Commandline();", "-        commandline.process(args, config);", "-    }", "+    public void start(final String[] args, final AntEnvironment antEnv) {", "+", "+            URL buildSourceURL = determineBuildFile();", "+                     = FrontendUtils.getAntConfigFile(configFile);", "+            if (buildSourceURL.getProtocol().equals(\"file\")) {", "+                System.out.println(\"Buildfile: \" + buildSource);", "+            } else if (!config.isRemoteProjectAllowed()) {", "+                     + buildSourceURL);", "+            } else {", "+                System.out.println(\"Build: \" + buildSourceURL);", "+            project = parseProject(buildSourceURL);", "+                 = new DemuxOutputStream(mainFrame, false);", "+                 = new DemuxOutputStream(mainFrame, true);", "+            mainFrame.setProject(project);", "+            mainFrame.initialize(definedValues);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a346abc7b2274c04ccc82b76ca62f77", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "196c36bc28dec63b239595132e8b00c55951c860", "commitAfterChange": "689fca41585cc1768a0501fd11c8235b6e4bc481", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 55, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["+", "+", "+        if(maxmemory != null){", "+            if(javadoc1){", "+                argList.addElement(\"-J-mx\" + maxmemory);", "+            }", "+            else{", "+                argList.addElement(\"-J-Xmx\" + maxmemory);", "+            }", "+        }", "+            ", "+            // add the single link arguments", "+            ", "+            // add the links arguments", "+            if (links.size() != 0) {", "+                for (Enumeration e = links.elements(); e.hasMoreElements(); ) {", "+                    LinkArgument la = (LinkArgument)e.nextElement();", "+                ", "+                    if (la.getHref() == null) {", "+                        throw new BuildException(\"Links must provide the RUL to the external class documentation.\");", "+                    }", "+                ", "+                    if (la.isLinkOffline()) {", "+                        String packageListLocation = la.getPackagelistLoc();", "+                        if (packageListLocation == null) {", "+                            throw new BuildException(\"The package list location for link \" + la.getHref() +", "+                                                     \" must be provided because the link is offline\");", "+                        }", "+                        argList.addElement(\"-linkoffline\");", "+                        argList.addElement(la.getHref());", "+                        argList.addElement(packageListLocation);", "+                    }", "+                    else {", "+                        argList.addElement(\"-link\");", "+                        argList.addElement(la.getHref());", "+                    }", "+                }", "+            }                                   ", "+                                                ", "+            // add the single linkoffline arguments", "-", "+            ", "+            // add the single group arguments", "+            ", "+            // add the group arguments", "+            if (groups.size() != 0) {", "+                String title = null;", "+                String packages = null;", "+                GroupArgument ga = null;", "+                for (int i = 0; i < groups.size(); i++) {", "+                    ga = (GroupArgument)groups.get(i);", "+                    if (ga != null) {", "+                        title = ga.getTitle();", "+                        packages = ga.getPackages();", "+                    }", "+                    if (title != null) {", "+                        argList.addElement(\"-group\");", "+                        argList.addElement(title);", "+                        if (packages != null) {", "+                            argList.addElement(packages);", "+                        }", "+                    }", "+                }", "+            }", "+            }", "+            if (additionalParam != null) {", "+                argList.addElement(additionalParam);", "+         if (packageList != null) {", "+            argList.addElement(\"@\" + packageList);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94523e26a17e838cbcd9af7f27a26d38", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "92ba08996fc4224f2653057f06bfc7fefb72a81b", "commitAfterChange": "10c41029aeaba31241f1a85f9b02591b357e20b6", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "       protected Process exec() throws IOException", "signatureAfterChange": "       protected Process exec() throws IOException", "diff": ["-        String userDir = System.getProperty(\"user.dir\");", "-        try {", "-            if (myos.equals(\"Mac OS\") && workingDirectory != null) {", "-                System.getProperties().put(\"user.dir\", ", "-                                           workingDirectory.getAbsolutePath());", "-            }", "-", "-            return Runtime.getRuntime().exec(getCommandline(), getEnvironment());", "-        } finally {", "-            if (myos.equals(\"Mac OS\") && workingDirectory != null) {", "-                System.getProperties().put(\"user.dir\", userDir);", "-            }", "-        }", "+\tif (workingDirectory == null) {", "+\t    // Easy.", "+\t    return Runtime.getRuntime().exec(cmdl, getEnvironment());", "+\t} else if (execWithCWD != null) {", "+\t    // The best way to set cwd, if you have JDK 1.3.", "+\t    try {", "+\t\tObject[] arguments = new Object[] {getCommandline(), getEnvironment(), workingDirectory};", "+\t\treturn (Process)execWithCWD.invoke(Runtime.getRuntime(), arguments);", "+            } catch (InvocationTargetException ite) {", "+                Throwable t = ite.getTargetException();", "+                if (t instanceof ThreadDeath) {", "+                    throw (ThreadDeath)t;", "+                } else if (t instanceof IOException) {", "+                    throw (IOException)t;", "+                } else {", "+                    throw new IOException(t.toString());", "+                }", "+\t    } catch (Exception e) {", "+\t\t// IllegalAccess, IllegalArgument, ClassCast", "+\t\tthrow new IOException(e.toString());", "+\t    }", "+\t} else if (myos.equals(\"Mac OS\")) {", "+\t    // Dubious Mac hack.", "+\t    System.getProperties().put(\"user.dir\", ", "+\t\t\t\t       workingDirectory.getAbsolutePath());", "+\t    try {", "+\t\treturn Runtime.getRuntime().exec(cmdl, getEnvironment());", "+\t    } finally {", "+                System.getProperties().put(\"user.dir\", antWorkingDirectory);", "+\t    }", "+\t} else if (myos.toLowerCase().indexOf(\"windows\") >= 0 &&", "+\t\t   (myos.toLowerCase().indexOf(\"nt\") >= 0 ||", "+\t\t    myos.indexOf(\"2000\") >= 0)) {", "+\t    // cmd /c cd works OK on Windows NT & friends.", "+\t    String[] commandLine = new String[cmdl.length+5];", "+\t    commandLine[0] = \"cmd\";", "+\t    commandLine[1] = \"/c\";", "+\t    commandLine[2] = \"cd\";", "+\t    commandLine[3] = workingDirectory.getAbsolutePath();", "+\t    commandLine[4] = \"&&\";", "+\t    System.arraycopy(cmdl, 0, commandLine, 5, cmdl.length);", "+\t    return Runtime.getRuntime().exec(commandLine, getEnvironment());", "+\t} else {", "+\t    // Fallback to the antRun wrapper script (POSIX, Win95/98, etc.):", "+\t    String[] commandLine = new String[cmdl.length+2];", "+\t    commandLine[0] = antRun;", "+\t    commandLine[1] = workingDirectory.getAbsolutePath();", "+\t    System.arraycopy(cmdl, 0, commandLine, 2, cmdl.length);", "+\t    return Runtime.getRuntime().exec(commandLine, getEnvironment());", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba8f1b1698cf5db9be51e5a3dbae4fe5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/AggregateTransformer.java", "commitBeforeChange": "f274a4b1ad577013835b77ba608c546847cd063c", "commitAfterChange": "e7734def8b0961af37c37eb1964a7e9ffdd052ca", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public void transform() throws BuildException", "signatureAfterChange": "     public void transform() throws BuildException", "diff": ["+     */", "+        Project project = task.getProject();", "+", "+        TempFile tempFileTask = new TempFile();", "+        tempFileTask.bindToOwner(task);", "+        String tempFileProperty = getClass().getName() + String.valueOf(counter++);", "+        File tmp = FILE_UTILS.resolveFile(project.getBaseDir(),", "+                project.getProperty(\"java.io.tmpdir\"));", "+        tempFileTask.setDestDir(tmp);", "+        tempFileTask.setProperty(tempFileProperty);", "+        tempFileTask.execute();", "+", "+        XSLTProcess xsltTask = new XSLTProcess();", "+        xsltTask.bindToOwner(task);", "+", "+        xsltTask.addConfigured(getStylesheet());", "+        // acrobatic cast.", "+        xsltTask.setIn(((XMLResultAggregator) task).getDestinationFile());", "+        File dummyFile = new File(project.getProperty(tempFileProperty));", "+        xsltTask.setOut(dummyFile);", "+        for (Iterator i = params.iterator(); i.hasNext();) {", "+            XSLTProcess.Param param = (XSLTProcess.Param) i.next();", "+            XSLTProcess.Param newParam = xsltTask.createParam();", "+            newParam.setProject(task.getProject());", "+            newParam.setName(param.getName());", "+            newParam.setExpression(param.getExpression());", "+        }", "+        XSLTProcess.Param paramx = xsltTask.createParam();", "+        paramx.setProject(task.getProject());", "+        paramx.setName(\"output.dir\");", "+        paramx.setExpression(toDir.getAbsolutePath());", "-        XalanExecutor executor = XalanExecutor.newInstance(this);", "-            executor.execute();", "+            xsltTask.execute();", "-                + e.getMessage(), e);", "+                    + e.getMessage(), e);", "+        Delete delete = new Delete();", "+        delete.bindToOwner(task);", "+        delete.setFile(dummyFile);", "+        delete.execute();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1d94de07660d4bd243fefab470435ba", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Untar.java", "commitBeforeChange": "dc00bd536bd6a1cd2bae07cecc352c085a8a0f9d", "commitAfterChange": "80d371a3b4e1ba3f845e1b9a8f831fd6a11fafd5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void setOverwrite(boolean b)", "signatureAfterChange": "      private String mode2str(int mode)", "diff": ["+    private String mode2str(int mode) {", "+        StringBuffer sb = new StringBuffer(\"----------\");", "+        if ((mode & S_IFREG ) == 0) {", "+            if ((mode & S_IFDIR ) != 0) {", "+                sb.setCharAt(0, 'd');", "+            } else if ((mode & S_IFLNK)  != 0) {", "+                sb.setCharAt(0, 'l');", "+            } else if ((mode & S_IFIFO)  != 0) {", "+                sb.setCharAt(0, 'p');", "+            } else if ((mode & S_IFCHR)  != 0) {", "+                sb.setCharAt(0, 'c');", "+            } else if ((mode & S_IFBLK)  != 0) {", "+                sb.setCharAt(0, 'b');", "+            } else if ((mode & S_IFSOCK) != 0) {", "+                sb.setCharAt(0, 's');", "+            } else if ((mode & S_IFIFO)  != 0) {", "+                sb.setCharAt(0, 'p');", "+            }", "+        }", "+        if ((mode & S_IRUSR ) != 0) {", "+            sb.setCharAt(1, 'r');", "+        }", "+        if ((mode & S_IWUSR ) != 0) {", "+            sb.setCharAt(2, 'w');", "+        }", "+        if ((mode & S_IXUSR ) != 0) {", "+            sb.setCharAt(3, 'x');", "+        }", "-     */", "-    public void setOverwrite(boolean b) {", "-        overwrite = b;", "-    }", "+        if ((mode & S_IRGRP ) != 0) {", "+            sb.setCharAt(4, 'r');", "+        }", "+        if ((mode & S_IWGRP ) != 0) {", "+            sb.setCharAt(5, 'w');", "+        }", "+        if ((mode & S_IXGRP ) != 0) {", "+            sb.setCharAt(6, 'x');", "+        }", "+        if ((mode & S_IROTH ) != 0) {", "+            sb.setCharAt(7, 'r');", "+        }", "+        if ((mode & S_IWOTH ) != 0) {", "+            sb.setCharAt(8, 'w');", "+        }", "+        if ((mode & S_IXOTH ) != 0) {", "+            sb.setCharAt(9, 'x');", "+        }", "+        return new String(sb);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2d8b3b8191738853c84decb552172ab", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "e5fcb123200cbdf1faccaf2a57fdf8c1e272d8bb", "commitAfterChange": "ec2d68aa71e1dfc8503b4a74f04d8ebd9bc02561", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["+        // Renamed version of original file, if it exists", "+        File renamedFile=null;", "+        // Whether or not an actual update is required -", "+        // we don't need to update if the original file doesn't exist", "+        boolean reallyDoUpdate=false;", "+        if (doUpdate && zipFile.exists())", "+        {", "+            reallyDoUpdate=true;", "+            ", "+            int i;", "+            for (i=0; i < 1000; i++)", "+            {", "+                renamedFile = new File (zipFile.getParent(), \"tmp.\"+i);", "+                ", "+                if (!renamedFile.exists())", "+                    break;", "+            }", "+            if (i==1000)", "+                throw new BuildException ", "+                (\"Can't find temporary filename to rename old file to.\");", "+            try", "+            {", "+                if (!zipFile.renameTo (renamedFile))", "+                    throw new BuildException ", "+                    (\"Unable to rename old file to temporary file\");", "+            }", "+            catch (SecurityException e)", "+            {", "+                throw new BuildException ", "+                    (\"Not allowed to rename old file to temporary file\");", "+            }", "+        }", "+        ", "-        log(\"Building \"+ archiveType +\": \"+ zipFile.getAbsolutePath());", "+        String action=reallyDoUpdate ? \"Updating \" : \"Building \";", "+        ", "+        log(action + archiveType +\": \"+ zipFile.getAbsolutePath());", "+        boolean success = false;", "-            boolean success = false;", "+                if (reallyDoUpdate)", "+                {", "+                    ZipFileSet oldFiles = new ZipFileSet ();", "+                    oldFiles.setSrc (renamedFile);", "+                    ", "+                    StringBuffer exclusionPattern=new StringBuffer();", "+                    for (int i=0; i < addedFiles.size(); i++)", "+                    {", "+                        if (i != 0)", "+                            exclusionPattern.append (\",\");", "+                        exclusionPattern.append ", "+                            ((String) addedFiles.elementAt(i));", "+                    }", "+                    oldFiles.setExcludes (exclusionPattern.toString());", "+                    Vector tmp = new Vector();", "+                    tmp.addElement (oldFiles);", "+                    addFiles (tmp, zOut);", "+                }", "+            if (reallyDoUpdate) {", "+                if (!renamedFile.renameTo (zipFile)) {", "+                    msg+=\" (and I couldn't rename the temporary file \"+", "+                        renamedFile.getName()+\" back)\";", "+                }", "+            }", "+            ", "+        // If we've been successful on an update, delete the temporary file", "+        if (success && reallyDoUpdate)", "+            if (!renamedFile.delete())", "+                log (\"Warning: unable to delete temporary file \"+", "+                     renamedFile.getName(), Project.MSG_WARN);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7ee1ec175b79c0345f5ad9d9c7118e3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/tar/TarInputStream.java", "commitBeforeChange": "babc81c13536c029da523af8c7d9cb85a43521ac", "commitAfterChange": "79d125cc05d47c1e7540332740483650f38f13cf", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public int read(byte[] buf) throws IOException", "signatureAfterChange": "     public int read(byte[] buf, int offset, int numToRead) throws IOException", "diff": ["-     */", "-    public int read(byte[] buf) throws IOException {", "-        return this.read(buf, 0, buf.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0e925270e5722a6ee8246b97222566e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "5b362efc980668c8bd04aa2ea6405174bd443f16", "commitAfterChange": "d93d7b09161b9fed366062f9fc095e46e772a69e", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 29, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        FileSet savedFileSet = null;", "-        if (file == null && destFile != null && filesets.size() == 1) {", "+\tResourceCollection savedRc = null;", "+        if (file == null && destFile != null && rcs.size() == 1) {", "-            savedFileSet = (FileSet) filesets.elementAt(0);", "+\t    savedRc = (ResourceCollection) rcs.elementAt(0);", "-            // deal with the filesets", "-            for (int i = 0; i < filesets.size(); i++) {", "-                FileSet fs = (FileSet) filesets.elementAt(i);", "-                DirectoryScanner ds = null;", "-                try {", "-                    ds = fs.getDirectoryScanner(getProject());", "-                } catch (BuildException e) {", "-                    if (failonerror", "-                        || !e.getMessage().endsWith(\" not found.\")) {", "-                        throw e;", "-                    } else {", "-                        log(\"Warning: \" + e.getMessage());", "-                        continue;", "-                    }", "-                }", "-                File fromDir = fs.getDir(getProject());", "+            // deal with the ResourceCollections", "-                String[] srcFiles = ds.getIncludedFiles();", "-                String[] srcDirs = ds.getIncludedDirectories();", "-                if (!flatten && mapperElement == null", "-                    && ds.isEverythingIncluded() && !fs.hasPatterns()) {", "-                    completeDirMap.put(fromDir, destDir);", "-                }", "-                scan(fromDir, destDir, srcFiles, srcDirs);", "+\t    /* for historical and performance reasons we have to do", "+\t       things in a rather complex way.", "+\t    ", "+\t       (1) Move is optimized to move directories if a fileset", "+\t       has been included completely, therefore FileSets need a", "+\t       special treatment.  This is also required to support", "+\t       the failOnError semantice (skip filesets with broken", "+\t       basedir but handle the remaining collections).", "+", "+\t       (2) We carry around a few protected methods that work", "+\t       on basedirs and arrays of names.  To optimize stuff, all", "+\t       resources with the same basedir get collected in", "+\t       separate lists and then each list is handled in one go.", "+\t    */", "+", "+\t    HashMap filesByBasedir = new HashMap();", "+\t    HashMap dirsByBasedir = new HashMap();", "+\t    HashSet baseDirs = new HashSet();", "+            for (int i = 0; i < rcs.size(); i++) {", "+\t\tResourceCollection rc = (ResourceCollection) rcs.elementAt(i);", "+", "+\t\tif (rc.isFilesystemOnly()) {", "+", "+\t\t    // Step (1)", "+\t\t    if (rc instanceof FileSet) {", "+\t\t\tFileSet fs = (FileSet) rc;", "+\t\t\tDirectoryScanner ds = null;", "+\t\t\ttry {", "+\t\t\t    ds = fs.getDirectoryScanner(getProject());", "+\t\t\t} catch (BuildException e) {", "+\t\t\t    if (failonerror", "+\t\t\t\t|| !e.getMessage().endsWith(\" not found.\")) {", "+\t\t\t\tthrow e;", "+\t\t\t    } else {", "+\t\t\t\tlog(\"Warning: \" + e.getMessage());", "+\t\t\t\tcontinue;", "+\t\t\t    }", "+\t\t\t}", "+\t\t\tFile fromDir = fs.getDir(getProject());", "+", "+\t\t\tString[] srcFiles = ds.getIncludedFiles();", "+\t\t\tString[] srcDirs = ds.getIncludedDirectories();", "+\t\t\tif (!flatten && mapperElement == null", "+\t\t\t    && ds.isEverythingIncluded() && !fs.hasPatterns()) {", "+\t\t\t    completeDirMap.put(fromDir, destDir);", "+\t\t\t}", "+\t\t\tadd(fromDir, srcFiles, filesByBasedir);", "+\t\t\tadd(fromDir, srcDirs, dirsByBasedir);", "+\t\t\tbaseDirs.add(fromDir);", "+\t\t    } else { // not a fileset", "+", "+\t\t\tIterator resources = rc.iterator();", "+\t\t\twhile (resources.hasNext()) {", "+\t\t\t    FileResource fr = (FileResource) resources.next();", "+\t\t\t    if (!fr.isExists()) {", "+\t\t\t\tcontinue;", "+\t\t\t    }", "+\t\t\t    File baseDir = getKeyFile(fr.getBaseDir());", "+\t\t\t    add(baseDir, ", "+\t\t\t\tbaseDir == NULL_FILE_PLACEHOLDER", "+\t\t\t\t? fr.getFile().getAbsolutePath() : fr.getName(),", "+\t\t\t\tfr.isDirectory() ? dirsByBasedir ", "+\t\t\t\t                 : filesByBasedir);", "+\t\t\t    baseDirs.add(baseDir);", "+\t\t\t}", "+\t\t    }", "+", "+\t\t    Iterator iter = baseDirs.iterator();", "+\t\t    while (iter.hasNext()) {", "+\t\t\tFile f = (File) iter.next();", "+\t\t\tList files = (List) filesByBasedir.get(f);", "+\t\t\tList dirs = (List) dirsByBasedir.get(f);", "+", "+\t\t\tString[] srcFiles = new String[0];", "+\t\t\tif (files != null) {", "+\t\t\t    srcFiles = (String[]) files.toArray(srcFiles);", "+\t\t\t}", "+\t\t\tString[] srcDirs = new String[0];", "+\t\t\tif (dirs != null) {", "+\t\t\t    srcDirs = (String[]) dirs.toArray(srcDirs);", "+\t\t\t}", "+\t\t\tscan(f == NULL_FILE_PLACEHOLDER ? null : f, destDir,", "+\t\t\t     srcFiles, srcDirs);", "+\t\t    }", "+\t\t} else { // not a File resource collection", "+\t\t    throw new BuildException(\"Only FileSystem resources are\"", "+\t\t\t\t\t     + \" supported.\");", "+\t\t}", "-            if (savedFileSet != null) {", "-                filesets.insertElementAt(savedFileSet, 0);", "+            if (savedRc != null) {", "+                rcs.insertElementAt(savedRc, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff2f72c0c84ca83c9897adb4643298b5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteOn.java", "commitBeforeChange": "9ff2d6a1ab17e51f25cadf8de2a1b7ada8c15490", "commitAfterChange": "eefa2aba55ad71e6c5ee6e54748b1dc76025c7ac", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 10, "signatureBeforeChange": "     protected String[] getCommandline(String[] srcFiles, File baseDir)", "signatureAfterChange": "     protected String[] getCommandline(String[] srcFiles, File[] baseDirs)", "diff": ["-    protected String[] getCommandline(String[] srcFiles, File baseDir) {", "-        String[] orig = cmdl.getCommandline();", "-        String[] result = new String[orig.length+srcFiles.length];", "-", "-        int index = orig.length;", "-        if (srcFilePos != null) {", "-            index = srcFilePos.getPosition();", "+    protected String[] getCommandline(String[] srcFiles, File[] baseDirs) {", "+        Vector targets = new Vector();", "+        if (targetFilePos != null) {", "+            Hashtable addedFiles = new Hashtable();", "+            for (int i=0; i<srcFiles.length; i++) {", "+                String[] subTargets = mapper.mapFileName(srcFiles[i]);", "+                if (subTargets != null) {", "+                    for (int j=0; j<subTargets.length; j++) {", "+                        String name = (new File(destDir, subTargets[j])).getAbsolutePath();", "+                        if (!addedFiles.contains(name)) {", "+                            targets.addElement(name);", "+                            addedFiles.put(name, name);", "+                        }", "+                    }", "+                }", "+            }", "-        System.arraycopy(orig, 0, result, 0, index);", "-", "-        for (int i=0; i < srcFiles.length; i++) {", "-            result[index+i] = (new File(baseDir, srcFiles[i])).getAbsolutePath();", "-        }", "+        String[] targetFiles = new String[targets.size()];", "+        targets.copyInto(targetFiles);", "-        System.arraycopy(orig, index, result, index+srcFiles.length, ", "-                         orig.length-index);", "+        String[] orig = cmdl.getCommandline();", "+        String[] result = new String[orig.length+srcFiles.length+targetFiles.length];", "+", "+        int srcIndex = orig.length;", "+        if (srcFilePos != null) {", "+            srcIndex = srcFilePos.getPosition();", "+        }", "+", "+        if (targetFilePos != null) {", "+            int targetIndex = targetFilePos.getPosition();", "+", "+            if (srcIndex < targetIndex ", "+                || (srcIndex == targetIndex && srcIsFirst)) {", "+", "+                // 0 --> srcIndex", "+                System.arraycopy(orig, 0, result, 0, srcIndex);", "+                ", "+                // srcIndex --> targetIndex", "+                System.arraycopy(orig, srcIndex, result, ", "+                                 srcIndex + srcFiles.length,", "+                                 targetIndex - srcIndex);", "+                ", "+                // targets are already absolute file names", "+                System.arraycopy(targetFiles, 0, result, ", "+                                 targetIndex + srcFiles.length, ", "+                                 targetFiles.length);", "+                ", "+                // targetIndex --> end", "+                System.arraycopy(orig, targetIndex, result, ", "+                                 targetIndex + srcFiles.length + targetFiles.length,", "+                                 orig.length - targetIndex);", "+            } else {", "+                // 0 --> targetIndex", "+                System.arraycopy(orig, 0, result, 0, targetIndex);", "+                ", "+                // targets are already absolute file names", "+                System.arraycopy(targetFiles, 0, result, ", "+                                 targetIndex,", "+                                 targetFiles.length);", "+                ", "+                // targetIndex --> srcIndex", "+                System.arraycopy(orig, targetIndex, result, ", "+                                 targetIndex + targetFiles.length,", "+                                 srcIndex - targetIndex);", "+                ", "+                // srcIndex --> end", "+                System.arraycopy(orig, srcIndex, result, ", "+                                 srcIndex + srcFiles.length + targetFiles.length,", "+                                 orig.length - srcIndex);", "+                srcIndex += targetFiles.length;", "+            }", "+", "+        } else { // no targetFilePos", "+            System.arraycopy(orig, 0, result, 0, srcIndex);", "+        }", "+", "+        // fill in source file names", "+        for (int i=0; i < srcFiles.length; i++) {", "+            result[srcIndex+i] = ", "+                (new File(baseDirs[i], srcFiles[i])).getAbsolutePath();", "+        }"]}]}
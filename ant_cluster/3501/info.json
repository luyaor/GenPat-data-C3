{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f47bcd5dcce5a1e0399454747eac4fb4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13fe46b2d1e16c0b164ed0dc3d8b00c1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/tasks/core/RegisterTasklet.java", "commitBeforeChange": "66c74a2fceee359d38138fb601c1b639e99fb17d", "commitAfterChange": "19600e6d005c8bebbf6697bd00516e843f0a34f4", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void compose( final ComponentManager componentManager )         throws ComponentNotFoundException, ComponentNotAccessibleException", "signatureAfterChange": "     protected void registerResource( final String name,                                       final String classname,                                       final URL url )         throws AntException, RegistryException", "diff": ["-", "-    public void compose( final ComponentManager componentManager )", "-        throws ComponentNotFoundException, ComponentNotAccessibleException", "+    protected void registerResource( final String name, ", "+                                     final String classname, ", "+                                     final URL url )", "+        throws AntException, RegistryException ", "-        final TaskletEngine engine = (TaskletEngine)componentManager.", "-            lookup( \"org.apache.ant.tasklet.engine.TaskletEngine\" );", "-        m_taskletRegistry = engine.getTaskletRegistry();", "-    }", "+        if( null == classname )", "+            try { m_engine.getTskDeployer().deployTasklet( name, url.toString(), url ); }", "+            catch( final DeploymentException de )", "+                throw new AntException( \"Failed deploying \" + name + \" from \" + url, de );", "+        else", "+            final DefaultTaskletInfo info = new DefaultTaskletInfo( classname, url );", "+            m_engine.getTaskletRegistry().register( name, info ); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56541f5a3e8d560f0c294d2917f1a60c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/init/org/apache/ant/init/AntEnvironment.java", "commitBeforeChange": "752f49d5b18f9743f8e4a6dbdc8065d240d9c97a", "commitAfterChange": "da4e1a3aa99899d6aecc6d14c2a7498fa51647aa", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public AntEnvironment(Class libraryClass) throws InitException", "signatureAfterChange": "     public AntEnvironment(Class coreClass) throws InitException", "diff": ["-    public AntEnvironment(Class libraryClass) throws InitException {", "+    public AntEnvironment(Class coreClass) throws InitException {", "-            URL antLibURL = getAntLibURL(libraryClass);", "-            setLibraryURL(antLibURL);", "+            // is Ant Home set?", "+            String antHomeProperty = System.getProperty(ANTHOME_PROPERTY);", "+            if (antHomeProperty == null) {", "+                URL classURL = getAntLibURL(coreClass);", "+                antHome = new URL(classURL, CORECLASS_TO_ANTHOME);", "+            } else {", "+                try {", "+                    antHome = new URL(antHomeProperty);", "+                } catch (MalformedURLException e) {", "+                    // try as a file", "+                    File antHomeDir = new File(antHomeProperty);", "+                    if (!antHomeDir.exists()) {", "+                        throw new InitException(\"ant.home value \\\"\"", "+                             + antHomeProperty + \"\\\" is not valid.\");", "+                    }", "+                    antHome = InitUtils.getFileURL(antHomeDir);", "+                }", "+            }", "-            URL antHome = new URL(antLibURL, \"..\");", "-            setAntHome(antHome);", "+            setLibraryURL(new URL(antHome, LIB_DIR));", "+", "-                File systemConfigArea = new File(antHome.getFile(), \"conf\");", "+                File systemConfigArea", "+                     = new File(antHome.getFile(), SYSTEM_CONFDIR);", "-                 = new File(System.getProperty(\"user.home\"), \".ant/conf\");", "+                 = new File(System.getProperty(\"user.home\"), USER_CONFDIR);", "-            URL commonJarLib = new URL(libraryURL, \"common/\");", "+            URL commonJarLib = new URL(libraryURL, COMMON_DIR);", "-            URL parserBase = new URL(libraryURL, \"parser/\");", "+            URL parserBase = new URL(libraryURL, PARSER_DIR);", "+            URL antcoreBase = new URL(libraryURL, ANTCORE_DIR);", "-                 = LoaderUtils.getLocationURLs(new URL(libraryURL, \"antcore/\"),", "-                \"antcore.jar\");", "+                 = LoaderUtils.getLocationURLs(antcoreBase, \"antcore.jar\");"]}]}
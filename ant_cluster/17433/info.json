{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e68e5c60b690fa88b9a39faa704585ff", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3289b9f7813b7e7ffdcae30b39120a76", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/sound/SoundTask.java", "commitBeforeChange": "aca4841ccd92c51c178285fe5d49a225765ae0a1", "commitAfterChange": "f30a0fa451a62e4937f67191a543fc62e2fab5c0", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 3, "signatureBeforeChange": "         public File getSource()", "signatureAfterChange": "     private File getRandomSource( final BuildAlert alert )", "diff": ["+    private File getRandomSource( final BuildAlert alert )", "+        final File source = alert.getSource();", "+        // Check if source is a directory", "+        if( source.exists() )", "-         */", "-        public File getSource()", "-        {", "-            File nofile = null;", "-            // Check if source is a directory", "-            if( source.exists() )", "+            if( source.isDirectory() )", "-                if( source.isDirectory() )", "+                // get the list of files in the dir", "+                final String[] entries = source.list();", "+                ArrayList files = new ArrayList();", "+                for( int i = 0; i < entries.length; i++ )", "-                    // get the list of files in the dir", "-                    String[] entries = source.list();", "-                    ArrayList files = new ArrayList();", "-                    for( int i = 0; i < entries.length; i++ )", "+                    File f = new File( source, entries[ i ] );", "+                    if( f.isFile() )", "-                        File f = new File( source, entries[ i ] );", "-                        if( f.isFile() )", "-                        {", "-                            files.add( f );", "-                        }", "+                        files.add( f );", "-                    if( files.size() < 1 )", "-                    {", "-                        throw new TaskException( \"No files found in directory \" + source );", "-                    }", "-                    int numfiles = files.size();", "-                    // get a random number between 0 and the number of files", "-                    Random rn = new Random();", "-                    int x = rn.nextInt( numfiles );", "-                    // set the source to the file at that location", "-                    this.source = (File)files.get( x );", "+                if( files.size() < 1 )", "+                {", "+                    throw new TaskException( \"No files found in directory \" + source );", "+                }", "+                final int numfiles = files.size();", "+                // get a random number between 0 and the number of files", "+                final Random random = new Random();", "+                final int x = random.nextInt( numfiles );", "+                // set the source to the file at that location", "+                source = (File)files.get( x );", "-            else", "-            {", "-                getLogger().warn( source + \": invalid path.\" );", "-                this.source = nofile;", "-            }", "-            return this.source;", "+        else", "+        {", "+            getLogger().warn( source + \": invalid path.\" );", "+            source = null;", "+        }", "+        return source;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77704235998089c20906c8d1c39e31e0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/sound/SoundTask.java", "commitBeforeChange": "aca4841ccd92c51c178285fe5d49a225765ae0a1", "commitAfterChange": "f30a0fa451a62e4937f67191a543fc62e2fab5c0", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 3, "signatureBeforeChange": "         public File getSource()", "signatureAfterChange": "     private File getRandomSource( final BuildAlert alert )", "diff": ["+    private File getRandomSource( final BuildAlert alert )", "+        final File source = alert.getSource();", "+        // Check if source is a directory", "+        if( source.exists() )", "-         */", "-        public File getSource()", "-        {", "-            File nofile = null;", "-            // Check if source is a directory", "-            if( source.exists() )", "+            if( source.isDirectory() )", "-                if( source.isDirectory() )", "+                // get the list of files in the dir", "+                final String[] entries = source.list();", "+                ArrayList files = new ArrayList();", "+                for( int i = 0; i < entries.length; i++ )", "-                    // get the list of files in the dir", "-                    String[] entries = source.list();", "-                    ArrayList files = new ArrayList();", "-                    for( int i = 0; i < entries.length; i++ )", "+                    File f = new File( source, entries[ i ] );", "+                    if( f.isFile() )", "-                        File f = new File( source, entries[ i ] );", "-                        if( f.isFile() )", "-                        {", "-                            files.add( f );", "-                        }", "+                        files.add( f );", "-                    if( files.size() < 1 )", "-                    {", "-                        throw new TaskException( \"No files found in directory \" + source );", "-                    }", "-                    int numfiles = files.size();", "-                    // get a random number between 0 and the number of files", "-                    Random rn = new Random();", "-                    int x = rn.nextInt( numfiles );", "-                    // set the source to the file at that location", "-                    this.source = (File)files.get( x );", "+                if( files.size() < 1 )", "+                {", "+                    throw new TaskException( \"No files found in directory \" + source );", "+                }", "+                final int numfiles = files.size();", "+                // get a random number between 0 and the number of files", "+                final Random random = new Random();", "+                final int x = random.nextInt( numfiles );", "+                // set the source to the file at that location", "+                source = (File)files.get( x );", "-            else", "-            {", "-                getLogger().warn( source + \": invalid path.\" );", "-                this.source = nofile;", "-            }", "-            return this.source;", "+        else", "+        {", "+            getLogger().warn( source + \": invalid path.\" );", "+            source = null;", "+        }", "+        return source;"]}]}
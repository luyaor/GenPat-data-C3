{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "829354f3f7731b8378af5ef4b2510e3e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52366a64b495e8376dbde7550609ec43", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/optional/depend/DependScanner.java", "commitBeforeChange": "114af4d3939a9216b4d46f60befb82a54042d0af", "commitAfterChange": "4d83c345bd3cddee208b0bdb18d9b91d4aa3bbc4", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void scan()", "signatureAfterChange": "     public void scan()", "diff": ["+        ", "-        Set newSet = new HashSet();", "+", "-        String start;", "-            start = baseClass.getCanonicalPath();", "-        start = start.substring(base.length(), start.length() - \".class\".length()).replace(File.separatorChar, '/');", "-        System.err.println(\"start: \" + start);", "+        for (Iterator rootClassIterator = rootClasses.iterator(); rootClassIterator.hasNext();) {", "+            Set newSet = new HashSet();", "+            String start = (String)rootClassIterator.next();", "+            start = start.replace('.', '/');", "-        newSet.add(start);", "-        set.add(start);", "-", "-        do {", "-            Iterator i = newSet.iterator();", "-            while (i.hasNext()) {", "-                String fileName = base + ((String)i.next()).replace('/', File.separatorChar) + \".class\";", "-", "-                try {", "-                    JavaClass javaClass = new ClassParser(fileName).parse();", "-                    javaClass.accept(visitor);", "+            newSet.add(start);", "+            set.add(start);", "+            ", "+            do {", "+                Iterator i = newSet.iterator();", "+                while (i.hasNext()) {", "+                    String fileName = base + ((String)i.next()).replace('/', File.separatorChar) + \".class\";", "+                    ", "+                    try {", "+                        JavaClass javaClass = new ClassParser(fileName).parse();", "+                        javaClass.accept(visitor);", "+                    }", "+                    catch (IOException e) {", "+                        System.err.println(\"exception: \" +  e.getMessage());", "+                    }", "-                catch (IOException e) {", "-                    System.err.println(\"exception: \" +  e.getMessage());", "-                }", "-            }", "-            newSet.clear();", "-            newSet.addAll(visitor.getDependencies());", "-            visitor.clearDependencies();", "-", "-            Dependencies.applyFilter(newSet, new Filter() {", "+                newSet.clear();", "+                newSet.addAll(visitor.getDependencies());", "+                visitor.clearDependencies();", "+                ", "+                Dependencies.applyFilter(newSet, new Filter() {", "-            newSet.removeAll(set);", "-            set.addAll(newSet);", "+                newSet.removeAll(set);", "+                set.addAll(newSet);", "+            }", "+            while (newSet.size() > 0);", "-        while (newSet.size() > 0);", "-", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a0286a21b1fd048c5d6232266b70787", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/GenericDeploymentTool.java", "commitBeforeChange": "03d2b1c05fef9a3b37e4fbe70fffe08cbacf14f8", "commitAfterChange": "8303dd1fd643ab7369de8a3125f5a1e3b6a72968", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 27, "signatureBeforeChange": "           private void addSuperClass(Class superClass, Hashtable checkEntries)", "signatureAfterChange": "     protected void checkAndAddDependants(Hashtable checkEntries)         throws BuildException", "diff": ["+    protected void checkAndAddDependants(Hashtable checkEntries)", "+        throws BuildException", "+        Dependencies visitor = new Dependencies();", "+        Set set = new TreeSet();", "+        Set newSet = new HashSet();", "+        final String base = config.srcDir.getAbsolutePath() + File.separator;", "+        Iterator i = checkEntries.keySet().iterator();", "+        while (i.hasNext()) {", "+            String entryName = (String)i.next();", "+                newSet.add(entryName.substring(0, entryName.length() - \".class\".length()).replace(File.separatorChar, '/'));", "+        }", "+        set.addAll(newSet);", "+", "+        do {", "+            i = newSet.iterator();", "+            while (i.hasNext()) {", "+                String fileName = base + ((String)i.next()).replace('/', File.separatorChar) + \".class\";", "+", "+                    JavaClass javaClass = new ClassParser(fileName).parse();", "+                    javaClass.accept(visitor);", "+                catch (IOException e) {", "+                    log(\"exception: \" +  e.getMessage(), Project.MSG_INFO);", "+            newSet.clear();", "+            newSet.addAll(visitor.getDependencies());", "+            visitor.clearDependencies();", "+", "+            Dependencies.applyFilter(newSet, new Filter() {", "+                    public boolean accept(Object object) {", "+                        String fileName = base + ((String)object).replace('/', File.separatorChar) + \".class\";", "+                        return new File(fileName).exists();", "+                    }", "+                });", "+            newSet.removeAll(set);", "+            set.addAll(newSet);", "+        }", "+        while (newSet.size() > 0);", "+", "+        i = set.iterator();", "+        while (i.hasNext()) {", "+            String next = ((String)i.next()).replace('/', File.separatorChar);", "+            checkEntries.put(next + \".class\", new File(base + next + \".class\"));", "+            log(\"dependent class: \" + next + \".class\" + \" - \" + base + next + \".class\", Project.MSG_VERBOSE);", "-     ", "-    private void addSuperClass(Class superClass, Hashtable checkEntries) {", "-    ", "-        if (!superClass.getName().startsWith(\"java\"))", "-        {", "-            File superClassFile = new File(config.srcDir.getAbsolutePath() ", "-                                            + File.separatorChar ", "-                                            + superClass.getName().replace('.',File.separatorChar)", "-                                            + \".class\");", "-            if (superClassFile.exists() && superClassFile.isFile())", "-            {", "-                checkEntries.put(superClass.getName().replace('.',File.separatorChar) + \".class\", ", "-                                 superClassFile);", "-                ", "-                // now need to get super classes and interfaces for this class", "-                Class[] superInterfaces = superClass.getInterfaces();", "-                for (int i = 0; i < superInterfaces.length; i++) {", "-                    addInterface(superInterfaces[i], checkEntries);", "-                }", "-                ", "-                addSuperClass(superClass.getSuperclass(), checkEntries);", "-            }               ", "-        }", "-    }"]}]}
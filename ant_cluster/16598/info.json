{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c35dbae2984a61a165c7731899cf9a70", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36c77b3c81db2d5d907bf45886fbf0e5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/converter/DefaultMasterConverter.java", "commitBeforeChange": "4b3e0ee2041826e51ec60af99e7bcca7024bf676", "commitAfterChange": "ed3fafb887fef0afbcd90eef7f263fef3bde95d9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public Object convert( final Class destination,                            final Object original,                            final Object context )         throws ConverterException", "signatureAfterChange": "     public Object convert( final Class destination,                            final Object original,                            final Object context )         throws ConverterException", "diff": ["-        if( DEBUG )", "-        {", "-            final String message =", "-                REZ.getString( \"converter-lookup.notice\",", "-                               originalClass.getName(),", "-                               destination.getName() );", "-            getLogger().debug( message );", "-        }", "-", "-        //Searching inheritance hierarchy for converter", "-        final String name = getConverterName( originalClass, destination );", "-", "-            //TODO: Start caching converters instead of repeatedly instantiating em.", "-            final Converter converter = (Converter)m_factory.create( name );", "+            // Search inheritance hierarchy for converter", "+            final String name = getConverterName( originalClass, destination );", "-            if( DEBUG )", "+            // Create the converter", "+            Converter converter = (Converter)m_converters.get( name );", "+            if( converter == null )", "-                final String message = REZ.getString( \"found-converter.notice\", converter );", "-                getLogger().debug( message );", "+                converter = (Converter)m_factory.create( name );", "+                m_converters.put( name, converter );", "+            // Convert", "-            else", "-            {", "-                final String message =", "-                    REZ.getString( \"bad-return-type.error\",", "-                                   name,", "-                                   object,", "-                                   destination.getName() );", "-                throw new ConverterException( message );", "-            }", "+", "+            final String message =", "+                REZ.getString( \"bad-return-type.error\",", "+                               object.getClass().getName(),", "+                               destination.getName() );", "+            throw new ConverterException( message );", "-        catch( final TypeException te )", "+        catch( final Exception e )", "-            final String message = REZ.getString( \"bad-typemanager.error\" );", "-            throw new ConverterException( message, te );", "+            final String message = REZ.getString( \"convert.error\",", "+                                                  originalClass.getName(),", "+                                                  destination.getName() );", "+            throw new ConverterException( message, e );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61af098fd291c500e9c9d353a4a797f6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/TaskAdapter.java", "commitBeforeChange": "2c4b09e15f09ece3d4e8276687a809ddefa9408f", "commitAfterChange": "9f1eefd3a2e6760daa8941c1c69b4825f4c136fa", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void checkTaskClass(final Class taskClass,                                       final Project project)", "signatureAfterChange": "     public static void checkTaskClass(final Class taskClass,                                       final Project project)", "diff": ["-        // don't have to check for interface, since then", "-        // taskClass would be abstract too.", "-        try {", "-            final Method executeM = taskClass.getMethod(\"execute\", null);", "-            // don't have to check for public, since", "-            // getMethod finds public method only.", "-            // don't have to check for abstract, since then", "+        if (!Dispatchable.class.isAssignableFrom(taskClass)) {", "+            // don't have to check for interface, since then", "-            if (!Void.TYPE.equals(executeM.getReturnType())) {", "-                final String message = \"return type of execute() should be \"", "-                    + \"void but was \\\"\" + executeM.getReturnType() + \"\\\" in \"", "-                    + taskClass;", "-                project.log(message, Project.MSG_WARN);", "+            try {", "+                final Method executeM = taskClass.getMethod(\"execute\", null);", "+                // don't have to check for public, since", "+                // getMethod finds public method only.", "+                // don't have to check for abstract, since then", "+                // taskClass would be abstract too.", "+                if (!Void.TYPE.equals(executeM.getReturnType())) {", "+                    final String message = \"return type of execute() should be \"", "+                        + \"void but was \\\"\" + executeM.getReturnType() + \"\\\" in \"", "+                        + taskClass;", "+                    project.log(message, Project.MSG_WARN);", "+                }", "+            } catch (NoSuchMethodException e) {", "+                final String message = \"No public execute() in \" + taskClass;", "+                project.log(message, Project.MSG_ERR);", "+                throw new BuildException(message);", "+            } catch (LinkageError e) {", "+                String message = \"Could not load \" + taskClass + \": \" + e;", "+                project.log(message, Project.MSG_ERR);", "+                throw new BuildException(message, e);", "-        } catch (NoSuchMethodException e) {", "-            final String message = \"No public execute() in \" + taskClass;", "-            project.log(message, Project.MSG_ERR);", "-            throw new BuildException(message);", "-        } catch (LinkageError e) {", "-            String message = \"Could not load \" + taskClass + \": \" + e;", "-            project.log(message, Project.MSG_ERR);", "-            throw new BuildException(message, e);"]}]}
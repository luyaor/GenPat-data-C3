{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a3b0a606a12010f4095abe76b491dc92", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0dbcfdf1d1649bff3534f35a0a2967f3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/IntrospectionHelperTest.java", "commitBeforeChange": "64d149d3e9aebbc047bfc4d7942e892e2dc1bc4d", "commitAfterChange": "9844e736fe3bc77e6761f5031e371430907e0c1c", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "      public void testGetExtensionPoints()", "signatureAfterChange": "      public void testGetExtensionPoints()", "diff": ["-        assertEquals(\"extension count\", 3, extensions.size());", "+        final int adders = 2;", "+        assertEquals(\"extension count\", adders, extensions.size());", "-        assertExtMethod(extensions.get(0), \"add\", Number.class,", "-                        new Integer(2), new Integer(3));", "+        // this original test assumed something about the order of", "+        // add(Number) and addConfigured(Map) returned by reflection.", "+        // Unfortunately the assumption doesn't hold for all VMs", "+        // (failed on MacOS X using JDK 1.4.2_05) and the possible", "+        // combinatorics are too hard to check.  We really only want", "+        // to ensure that the more derived Hashtable can be found", "+        // before Map.", "+//        assertExtMethod(extensions.get(0), \"add\", Number.class,", "+//                        new Integer(2), new Integer(3));", "-        assertExtMethod(extensions.get(1), \"addConfigured\", Hashtable.class,", "+        assertExtMethod(extensions.get(adders - 2),", "+                        \"addConfigured\", Hashtable.class,", "-        assertExtMethod(extensions.get(2), \"addConfigured\", Map.class,", "+        assertExtMethod(extensions.get(adders - 1), \"addConfigured\", Map.class,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47a8784dd3301cbf47ec68ce74e05149", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/modules/edit/DependentTargetChooser.java", "commitBeforeChange": "2ff201801b557593afe6cf9dcd4d4c4f4da65b39", "commitAfterChange": "cfa93603e73e635d31be01cdb31dc9959a5ea35c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 15, "signatureBeforeChange": "         public void actionPerformed(ActionEvent e)", "signatureAfterChange": "         public void actionPerformed(ActionEvent e)", "diff": ["-            TargetsTableModel srcModel = (TargetsTableModel)_srcTable.getModel();", "-            TargetsTableModel dstModel = (TargetsTableModel)_dstTable.getModel();", "-            int srcRow = _srcTable.getSelectedRow();", "-            int dstRow = _dstTable.getSelectedRow();", "-                _target.setDepends( dstModel.getTargetsAsStringArray() );", "+                _target.setDepends( ((SelectableTargetsTableModel)_targetsTable.getModel()).getSelectedTargetsAsStringArray() );", "-            } else if (e.getSource()==_moveUp) {", "-                // Move dependent target up (one row)", "-                dstModel.moveTarget(dstRow, -1);", "-                _dstTable.getSelectionModel().setSelectionInterval(dstRow - 1, dstRow - 1);", "-            } else if (e.getSource()==_moveDown) {", "-                // Move dependent target down (one row)", "-                dstModel.moveTarget(dstRow, 1);", "-                _dstTable.getSelectionModel().setSelectionInterval(dstRow + 1, dstRow + 1);", "-            } else if (e.getSource()==_append) {", "-                // Append selected target to depends", "-                if (srcRow >= 0) dstModel.addTarget(srcModel.getTarget(srcRow));", "-            } else if (e.getSource()==_remove) {", "-                // Remove dependent target", "-                if (dstRow >= 0) dstModel.removeTarget(dstRow);"]}]}
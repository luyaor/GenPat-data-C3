{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "29b8101cbd34c438ab88515eea8b17d3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13f13f69b10c6e690c2e8d972718440b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/launcher/AntLoader.java", "commitBeforeChange": "58f8db35ee5db94294191fc2599cb02a8086b881", "commitAfterChange": "8c97911720b40557d78672245bc2e7f724917297", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void addURL( final URL url )", "signatureAfterChange": "     protected final static File findInstallDir()          throws Exception", "diff": ["+    protected final static File findInstallDir() ", "+        throws Exception", "+        final String classpath = System.getProperty( \"java.class.path\" );", "+        final String pathSeparator = System.getProperty( \"path.separator\" );", "+        final StringTokenizer tokenizer = new StringTokenizer( classpath, pathSeparator );", "+        ", "+        while( tokenizer.hasMoreTokens() )", "+        {", "+            final String element = tokenizer.nextToken();", "-     */", "-    public void addURL( final URL url )", "-    {", "-        super.addURL( url );", "+            if( element.endsWith( \"ant.jar\" ) )", "+            {", "+                File file = (new File( element )).getAbsoluteFile();", "+                file = file.getParentFile();", "+                ", "+                if( null != file )", "+                {", "+                    file = file.getParentFile();", "+                }", "+", "+                return file;                ", "+            }", "+        }", "+        ", "+        throw new Exception( \"Unable to locate ant.jar in classpath\" );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a650ebac1f3c85bcd5dc7f0bbb4db4b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/AbstractFileSet.java", "commitBeforeChange": "a41c55cd1af2ca412cb61ee6c81a7a93c9ab8a2d", "commitAfterChange": "d2d5078dc7b94ec29512c2609322281dbc983539", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     protected abstract String getDataTypeName();", "signatureAfterChange": "     protected String getDataTypeName()", "diff": ["-    protected abstract String getDataTypeName();", "+    protected String getDataTypeName() {", "+        // look up the types in project and see if they match this class", "+        Project project = getProject();", "+        if (project != null) {", "+            Hashtable typedefs = project.getDataTypeDefinitions();", "+            for (Enumeration e = typedefs.keys(); e.hasMoreElements();) {", "+                String typeName = (String)e.nextElement();", "+                Class typeClass = (Class)typedefs.get(typeName);", "+                if (typeClass == getClass()) {", "+                    return typeName;", "+                }", "+            }", "+        }", "+            ", "+        String classname = getClass().getName();", "+        ", "+        int dotIndex = classname.lastIndexOf(\".\");", "+        if (dotIndex == -1) {", "+            return classname;", "+        }", "+        return classname.substring(dotIndex + 1); ", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "579a4e095fe929c71d8ba90c150fcf61", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultPropertyConfigurer.java", "commitBeforeChange": "c4dee0afafcc57ede3e3d1e81d2d4a1455c484a4", "commitAfterChange": "f52a170159f6dc5beebe07bfb945cb5b3fa5290b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void setValue( final Object parent, final Object child )         throws ConfigurationException", "signatureAfterChange": "     public void addValue( ConfigurationState state, Object value )         throws ConfigurationException", "diff": ["-    public void setValue( final Object parent, final Object child )", "+    public void addValue( ConfigurationState state, Object value )", "+        final DefaultConfigurationState defState = (DefaultConfigurationState)state;", "+", "+        // Make sure the supplied object is the pending object", "+        final Object pending = defState.getCreatedObject( m_propIndex );", "+        if( pending != null && pending != value )", "+        {", "+        }", "+", "+        // Make sure the creator method was called, if necessary", "+        if( pending == null && m_createMethod != null  )", "+        {", "+            final String message = REZ.getString( \"must-be-element.error\" );", "+            throw new ConfigurationException( message );", "+        }", "+", "+        defState.setCreatedObject( m_propIndex, null );", "+", "+        // Check the property count", "+        if( defState.getPropCount( m_propIndex ) >= m_maxCount )", "+        {", "+            final String message = REZ.getString( \"too-many-values.error\" );", "+            throw new ConfigurationException( message );", "+        }", "+        defState.incPropCount( m_propIndex );", "+", "+            // Add the value", "-                m_addMethod.invoke( parent, new Object[]{child} );", "+                m_addMethod.invoke( defState.getObject(), new Object[]{ value } );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "937810e0d1cac4ebcaf54e36c98cfc8b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/XmlLogger.java", "commitBeforeChange": "0ea3777ec4ae3e34aff17dfb05d1e6c818eb5bc0", "commitAfterChange": "bdd7cc0e9751c1a7378bc59a9825e6fb5b169c71", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "      public void messageLogged(BuildEvent event)", "signatureAfterChange": "      public void messageLogged(BuildEvent event)", "diff": ["-        if (taskElement != null) {", "-            taskElement.appendChild(messageElement);", "+        TimedElement parentElement = null;", "+        ", "+        Task task = event.getTask();", "+        Target target = event.getTarget();", "+        if (task != null) {", "+            parentElement = (TimedElement)tasks.get(task);", "-        else if (targetElement != null) {", "-            targetElement.appendChild(messageElement);", "+        if (parentElement == null && target != null) {", "+            parentElement = (TimedElement)targets.get(target);", "+        }", "+         ", "+        if (parentElement == null) {", "+            Stack threadStack = (Stack)threadStacks.get(Thread.currentThread());", "+            if (threadStack != null) {", "+                if (!threadStack.empty()) {", "+                    parentElement = (TimedElement)threadStack.peek();", "+                }", "+            }", "+        }", "+        ", "+        if (parentElement != null) {", "+            parentElement.element.appendChild(messageElement);", "-            buildElement.appendChild(messageElement);", "+            buildElement.element.appendChild(messageElement);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b2cfbc98d200454ea9bc44b0cd43bd4a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08b2f5d423fbcb61b5de0553a9d65585", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/Rpm.java", "commitBeforeChange": "c7dfaa577bd7940283563befa0aacd048f5de4d7", "commitAfterChange": "89d025a11df25e7edd6820ec47cc4859ea7a7ecc", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            streamhandler = new LogStreamHandler(this, Project.MSG_INFO,", "-                                                 Project.MSG_WARN);", "+            if (showoutput) {", "+                streamhandler = new LogStreamHandler(this, Project.MSG_INFO,", "+                                                     Project.MSG_WARN);", "+            } else {", "+                streamhandler = new LogStreamHandler(this, Project.MSG_DEBUG,", "+                                                     Project.MSG_DEBUG);", "+            }", "-            } else {", "+            } else if (showoutput) {", "+            } else {", "+                outputstream = new LogOutputStream(this, Project.MSG_DEBUG);", "-            } else {", "+            } else if (showoutput) {", "+            } else {", "+                errorstream = new LogOutputStream(this, Project.MSG_DEBUG);", "-            if (returncode != 0) {", "-                throw new BuildException(\"'\" +", "-                        toExecute.getExecutable() +", "-                        \"' failed with exit code \"+returncode);", "+            if (Execute.isFailure(returncode)) {", "+                String msg = \"'\" + toExecute.getExecutable() ", "+                    + \"' failed with exit code \" + returncode;", "+                if (failOnError) {", "+                    throw new BuildException(msg);", "+                } else {", "+                    log(msg, Project.MSG_ERR);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74f4fdf6d584a8eed312557212d88526", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "cf16fb5f634301ce5f7818c3b709677da5b3aac7", "commitAfterChange": "2ef29682402005b032a35068643e520194049c69", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": "     private void logVmExit(FormatterElement[] feArray, JUnitTest test,                            String message, String testCase)", "signatureAfterChange": "     private void logVmExit(FormatterElement[] feArray, JUnitTest test,                            String message, String testCase)", "diff": ["-                File outFile = getOutput(fe, test);", "-                JUnitTaskMirror.JUnitResultFormatterMirror formatter =", "-                    fe.createFormatter(classLoader);", "-                if (outFile != null && formatter != null) {", "-                    try {", "-                        OutputStream out = new FileOutputStream(outFile);", "-                        delegate.addVmExit(test, formatter, out, message, testCase);", "-                    } catch (IOException e) {", "-                        // ignore", "+                if (fe.shouldUse(this)) {", "+                    JUnitTaskMirror.JUnitResultFormatterMirror formatter =", "+                        fe.createFormatter(classLoader);", "+                    if (formatter != null) {", "+                        OutputStream out = null;", "+                        File outFile = getOutput(fe, test);", "+                        if (outFile != null) {", "+                            try {", "+                                out = new FileOutputStream(outFile);", "+                            } catch (IOException e) {", "+                                // ignore", "+                            }", "+                        }", "+                        if (out == null) {", "+                            out = getDefaultOutput();", "+                        }", "+                        delegate.addVmExit(test, formatter, out, message,", "+                                           testCase);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d741678d07c1c09c8426d045f43a1948", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/TraXLiaison.java", "commitBeforeChange": "a738000acab66d8d7ce5cf563f6dd96d9c7024fb", "commitAfterChange": "53db3a2602bcc7a0b357dbb3cc02b6e254960a7e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void createTransformer() throws Exception", "signatureAfterChange": "     private void createTransformer() throws Exception", "diff": ["+        }", "+", "+        if (traceConfiguration != null) {", "+            if (\"org.apache.xalan.transformer.TransformerImpl\"", "+                .equals(transformer.getClass().getName())) {", "+                try {", "+                    Class traceSupport =", "+                        Class.forName(\"org.apache.tools.ant.taskdefs.optional.\"", "+                                      + \"Xalan2TraceSupport\", true,", "+                                      Thread.currentThread()", "+                                      .getContextClassLoader());", "+                    XSLTTraceSupport ts =", "+                        (XSLTTraceSupport) traceSupport.newInstance();", "+                    ts.configureTrace(transformer, traceConfiguration);", "+                } catch (Exception e) {", "+                    String msg = \"Failed to enable tracing because of \" + e;", "+                    if (project != null) {", "+                        project.log(msg, Project.MSG_WARN);", "+                    } else {", "+                        System.err.println(msg);", "+                    }", "+                }", "+            } else {", "+                String msg = \"Not enabling trace support for transformer\"", "+                    + \" implementation\" + transformer.getClass().getName();", "+                if (project != null) {", "+                    project.log(msg, Project.MSG_WARN);", "+                } else {", "+                    System.err.println(msg);", "+                }", "+            }"]}]}
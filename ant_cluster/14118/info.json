{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "79b249b44e02ce4f9791a1ac663c63f1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b34e57b558c8b5fb152cbffbaae85792", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/Permissions.java", "commitBeforeChange": "446a11fca8f834862f54a49010c1551ffa572c0d", "commitAfterChange": "543e74c7843629a29d55ae81068c57385e6b3eab", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "         public void checkPermission(java.security.Permission perm)", "signatureAfterChange": "         public void checkPermission(java.security.Permission perm)", "diff": ["-                if (!granted.implies(perm)) {", "-                    throw new SecurityException(\"Permission \" + perm +\" was not granted.\");", "-                }", "-                for (Iterator i = revokedPermissions.listIterator(); i.hasNext();) {", "-                    if (((Permissions.Permission)i.next()).matches(perm)) {", "-                        throw new SecurityException(\"Permission \" + perm +\" was revoked.\");", "+                if (delegateToOldSM && !perm.getName().equals(\"exitVM\")) {", "+                    boolean permOK = false;", "+                    if (granted.implies(perm)) {", "+                        permOK = true;", "+                    checkRevoked(perm);", "+                    /*", "+                     if the permission was not explicitly granted or revoked", "+                     the original security manager will do its work", "+                    */", "+                    if (!permOK && origSm != null) {", "+                        origSm.checkPermission(perm);", "+                    }", "+                }  else {", "+                    if (!granted.implies(perm)) {", "+                        throw new SecurityException(\"Permission \" + perm + \" was not granted.\");", "+                    }", "+                    checkRevoked(perm);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1d9400ecfcfc2bbe3d71e257f1250b6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "380870c2b26a9f3289569dc2451178df3f05613e", "commitAfterChange": "ad9edf5f5ea4a8f2a974726eeb8e656c177357df", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public CBZip2OutputStream(final OutputStream out, final int blockSize)         throws IOException", "signatureAfterChange": "      public CBZip2OutputStream(OutputStream inStream, int inBlockSize)         throws IOException", "diff": ["-     */", "-    public CBZip2OutputStream(final OutputStream out, final int blockSize)", "+    public CBZip2OutputStream(OutputStream inStream, int inBlockSize)", "-        super();", "+        block = null;", "+        quadrant = null;", "+        zptr = null;", "+        ftab = null;", "-        if (blockSize < 1) {", "-            throw new IllegalArgumentException(\"blockSize(\" + blockSize", "-                                               + \") < 1\");", "-        }", "-        if (blockSize > 9) {", "-            throw new IllegalArgumentException(\"blockSize(\" + blockSize", "-                                               + \") > 9\");", "-        }", "+        bsSetStream(inStream);", "-        this.blockSize100k = blockSize;", "-        this.out = out;", "-        init();", "+        workFactor = 50;", "+        if (inBlockSize > 9) {", "+            inBlockSize = 9;", "+        }", "+        if (inBlockSize < 1) {", "+            inBlockSize = 1;", "+        }", "+        blockSize100k = inBlockSize;", "+        allocateCompressStructures();", "+        initialize();", "+        initBlock();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7068904f2f3fe24149c5709ae35eaf9d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f706427239c64617fca38a738c89d51", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/FixCRLF.java", "commitBeforeChange": "e0ad7527a06eb0e9513160b0c5b49bc9f8ab5f5b", "commitAfterChange": "8d02bfc707ffeb41a31153bba6adbccebb06106b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        try {", "-            for (int i = 0; i < files.length; i++) {", "-                File srcFile = new File(srcDir, files[i]);", "+        for (int i = 0; i < files.length; i++) {", "+            File srcFile = new File(srcDir, files[i]);", "-                // read the contents of the file", "-                int count = (int)srcFile.length();", "-                byte indata[] = new byte[count];", "-                try {", "-                    FileInputStream inStream = new FileInputStream(srcFile);", "-                    inStream.read(indata);", "-                    inStream.close();", "-                } catch (IOException e) {", "-                    throw new BuildException(e);", "-                }", "+            // read the contents of the file", "+            int count = (int)srcFile.length();", "+            byte indata[] = new byte[count];", "+            try {", "+                FileInputStream inStream = new FileInputStream(srcFile);", "+                inStream.read(indata);", "+                inStream.close();", "+            } catch (IOException e) {", "+                throw new BuildException(e);", "+            }", "-                // count the number of cr, lf,  and tab characters", "-                int cr = 0;", "-                int lf = 0;", "-                int tab = 0;", "+            // count the number of cr, lf,  and tab characters", "+            int cr = 0;", "+            int lf = 0;", "+            int tab = 0;", "-                for (int k=0; k<count; k++) {", "-                    byte c = indata[k];", "-                    if (c == '\\r') cr++;", "-                    if (c == '\\n') lf++;", "-                    if (c == '\\t') tab++;", "-                }", "+            for (int k=0; k<count; k++) {", "+                byte c = indata[k];", "+                if (c == '\\r') cr++;", "+                if (c == '\\n') lf++;", "+                if (c == '\\t') tab++;", "+            }", "-                // check for trailing eof", "-                boolean eof = ((count>0) && (indata[count-1] == 0x1A));", "+            // check for trailing eof", "+            boolean eof = ((count>0) && (indata[count-1] == 0x1A));", "-                // log stats (before fixes)", "-                project.log(srcFile + \": size=\" + count + \" cr=\" + cr +", "-                            \" lf=\" + lf + \" tab=\" + tab + \" eof=\" + eof,", "-                            \"fixcrlf\", project.MSG_VERBOSE);", "+            // log stats (before fixes)", "+            project.log(srcFile + \": size=\" + count + \" cr=\" + cr +", "+                        \" lf=\" + lf + \" tab=\" + tab + \" eof=\" + eof,", "+                        \"fixcrlf\", project.MSG_VERBOSE);", "-                // determine the output buffer size (slightly pessimisticly)", "-                int outsize = count;", "-                if (addcr  !=  0) outsize-=cr;", "-                if (addcr  == +1) outsize+=lf;", "-                if (addtab == -1) outsize+=tab*7;", "-                if (ctrlz  == +1) outsize+=1;", "+            // determine the output buffer size (slightly pessimisticly)", "+            int outsize = count;", "+            if (addcr  !=  0) outsize-=cr;", "+            if (addcr  == +1) outsize+=lf;", "+            if (addtab == -1) outsize+=tab*7;", "+            if (ctrlz  == +1) outsize+=1;", "-                // copy the data", "-                byte outdata[] = new byte[outsize];", "-                int o = 0;    // output offset", "-                int line = o; // beginning of line", "-                int col = 0;  // desired column", "+            // copy the data", "+            byte outdata[] = new byte[outsize];", "+            int o = 0;    // output offset", "+            int line = o; // beginning of line", "+            int col = 0;  // desired column", "-                for (int k=0; k<count; k++) {", "-                    switch (indata[k]) {", "-                        case ' ':", "-                            // advance column", "-                            if (addtab == 0) outdata[o++]=(byte)' ';", "+            for (int k=0; k<count; k++) {", "+                switch (indata[k]) {", "+                    case ' ':", "+                        // advance column", "+                        if (addtab == 0) outdata[o++]=(byte)' ';", "+                        col++;", "+                        break;", "+", "+                    case '\\t':", "+                        if (addtab == 0) {", "+                            // treat like any other character", "+                            outdata[o++]=(byte)'\\t';", "-                            break;", "+                        } else {", "+                            // advance column to next tab stop", "+                            col = (col|7)+1;", "+                        }", "+                        break;", "-                        case '\\t':", "-                            if (addtab == 0) {", "-                                // treat like any other character", "+                    case '\\r':", "+                        if (addcr == 0) {", "+                            // treat like any other character", "+                            outdata[o++]=(byte)'\\r';", "+                            col++;", "+                        }", "+                        break;", "+", "+                    case '\\n':", "+                        // start a new line (optional CR followed by LF)", "+                        if (addcr == +1) outdata[o++]=(byte)'\\r';", "+                        outdata[o++]=(byte)'\\n';", "+                        line=o;", "+                        col=0;", "+                        break;", "+", "+                    default:", "+                        // add tabs if two or more spaces are required", "+                        if (addtab>0 && o+1<line+col) {", "+                            // determine logical column", "+                            int diff=o-line;", "+", "+                            // add tabs until this column would be passed", "+                            // note: the start of line is adjusted to match", "+                            while ((diff|7)<col) {", "-                                col++;", "-                            } else {", "-                                // advance column to next tab stop", "-                                col = (col|7)+1;", "-                            }", "-                            break;", "-", "-                        case '\\r':", "-                            if (addcr == 0) {", "-                                // treat like any other character", "-                                outdata[o++]=(byte)'\\r';", "-                                col++;", "-                            }", "-                            break;", "-", "-                        case '\\n':", "-                            // start a new line (optional CR followed by LF)", "-                            if (addcr == +1) outdata[o++]=(byte)'\\r';", "-                            outdata[o++]=(byte)'\\n';", "-                            line=o;", "-                            col=0;", "-                            break;", "-", "-                        default:", "-                            // add tabs if two or more spaces are required", "-                            if (addtab>0 && o+1<line+col) {", "-                                // determine logical column", "-                                int diff=o-line;", "-", "-                                // add tabs until this column would be passed", "-                                // note: the start of line is adjusted to match", "-                                while ((diff|7)<col) {", "-                                    outdata[o++]=(byte)'\\t';", "-                                    line-=7-(diff&7);", "-                                    diff=o-line;", "-                                };", "+                                line-=7-(diff&7);", "+                                diff=o-line;", "+                        };", "-                            // space out to desired column", "-                            while (o<line+col) outdata[o++]=(byte)' ';", "+                        // space out to desired column", "+                        while (o<line+col) outdata[o++]=(byte)' ';", "-                            // append desired character", "-                            outdata[o++]=indata[k];", "-                            col++;", "-                    }", "+                        // append desired character", "+                        outdata[o++]=indata[k];", "+                        col++;", "+            }", "-                // add or remove an eof character as required", "-                if (ctrlz == +1) {", "-                    if (outdata[o-1]!=0x1A) outdata[o++]=0x1A;", "-                } else if (ctrlz == -1) {", "-                    if (o>2 && outdata[o-1]==0x0A && outdata[o-2]==0x1A) o--;", "-                    if (o>1 && outdata[o-1]==0x1A) o--;", "-                }", "+            // add or remove an eof character as required", "+            if (ctrlz == +1) {", "+                if (outdata[o-1]!=0x1A) outdata[o++]=0x1A;", "+            } else if (ctrlz == -1) {", "+                if (o>2 && outdata[o-1]==0x0A && outdata[o-2]==0x1A) o--;", "+                if (o>1 && outdata[o-1]==0x1A) o--;", "+            }", "-                // output the data", "-                try {", "-                    File destFile = srcFile;", "-                    if (destDir != null) destFile = new File(destDir, files[i]);", "-                    FileOutputStream outStream = new FileOutputStream(destFile);", "-                    outStream.write(outdata,0,o);", "-                    outStream.close();", "-                } catch (IOException e) {", "-                    throw new BuildException(e);", "-                }", "+            // output the data", "+            try {", "+                File destFile = srcFile;", "+                if (destDir != null) destFile = new File(destDir, files[i]);", "+                FileOutputStream outStream = new FileOutputStream(destFile);", "+                outStream.write(outdata,0,o);", "+                outStream.close();", "+            } catch (IOException e) {", "+                throw new BuildException(e);", "+            }", "-            } /* end for */", "-        } catch (Exception e) {", "-            e.printStackTrace();", "-            throw new BuildException(e);", "-        }", "+        } /* end for */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac927dd7b6691be896885c81bde0db60", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "3477bbf6474cdd2b70b12eb638e64415a4f1c2ec", "commitAfterChange": "134d95afef9b42cf08f2eccb077b97525ac38034", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 37, "signatureBeforeChange": "      private void mainSort()", "signatureAfterChange": "      private void mainSort()", "diff": ["-        int i, j, ss, sb;", "-        int[] runningOrder = new int[256];", "-        int[] copy = new int[256];", "-        boolean[] bigDone = new boolean[256];", "-        int c1, c2;", "-        int numQSorted;", "+        final Data data             = this.data;", "+        final int[] runningOrder    = data.mainSort_runningOrder;", "+        final int[] copy            = data.mainSort_copy;", "+        final boolean[] bigDone     = data.mainSort_bigDone;", "+        final int[] ftab            = data.ftab;", "+        final byte[] block          = data.block;", "+        final int[] fmap            = data.fmap;", "+        final char[] quadrant       = data.quadrant;", "+        final int last              = this.last;", "+        final int workLimit         = this.workLimit;", "+        final boolean firstAttempt  = this.firstAttempt;", "+", "+        // Set up the 2-byte frequency table", "+        for (int i = 65537; --i >= 0;) {", "+            ftab[i] = 0;", "+        }", "-", "-        //   if (verbosity >= 4) fprintf ( stderr, \"   sort initialise ...\\n\" );", "-        for (i = 0; i < NUM_OVERSHOOT_BYTES; i++) {", "+        for (int i = 0; i < NUM_OVERSHOOT_BYTES; i++) {", "-        for (i = 0; i <= last + NUM_OVERSHOOT_BYTES; i++) {", "+        for (int i = last + NUM_OVERSHOOT_BYTES; --i >= 0;) {", "+        block[0] = block[last + 1];", "-        block[0] = (char) (block[last + 1]);", "+        // Complete the initial radix sort:", "-        if (last < 4000) {", "-            /*", "-              Use simpleSort(), since the full sorting mechanism", "-              has quite a large constant overhead.", "-            */", "-            for (i = 0; i <= last; i++) {", "-                zptr[i] = i;", "-            }", "-            firstAttempt = false;", "-            workDone = workLimit = 0;", "-            simpleSort(0, last, 0);", "-        } else {", "-            numQSorted = 0;", "-            for (i = 0; i <= 255; i++) {", "-                bigDone[i] = false;", "-            }", "+        int c1 = block[0] & 0xff;", "+        for (int i = 0; i <= last; i++) {", "+            final int c2 = block[i + 1] & 0xff;", "+            ftab[(c1 << 8) + c2]++;", "+            c1 = c2;", "+        }", "-            for (i = 0; i <= 65536; i++) {", "-                ftab[i] = 0;", "-            }", "+        for (int i = 1; i <= 65536; i++)", "+            ftab[i] += ftab[i - 1];", "-            c1 = block[0];", "-            for (i = 0; i <= last; i++) {", "-                c2 = block[i + 1];", "-                ftab[(c1 << 8) + c2]++;", "-                c1 = c2;", "-            }", "+        c1 = block[1] & 0xff;", "+        for (int i = 0; i < last; i++) {", "+            final int c2 = block[i + 2] & 0xff;", "+            fmap[--ftab[(c1 << 8) + c2]] = i;", "+            c1 = c2;", "+        }", "-            for (i = 1; i <= 65536; i++) {", "-                ftab[i] += ftab[i - 1];", "-            }", "+        fmap[--ftab[((block[last + 1] & 0xff) << 8) + (block[1] & 0xff)]]", "+            = last;", "-            c1 = block[1];", "-            for (i = 0; i < last; i++) {", "-                c2 = block[i + 2];", "-                j = (c1 << 8) + c2;", "-                c1 = c2;", "-                ftab[j]--;", "-                zptr[ftab[j]] = i;", "-            }", "-", "-            j = ((block[last + 1]) << 8) + (block[1]);", "-            ftab[j]--;", "-            zptr[ftab[j]] = last;", "-", "-            /*", "+        /*", "-            */", "+        */", "+        for (int i = 256; --i >= 0;) {", "+            bigDone[i] = false;", "+            runningOrder[i] = i;", "+        }", "-            for (i = 0; i <= 255; i++) {", "-                runningOrder[i] = i;", "-            }", "-", "-            {", "-                int vv;", "-                int h = 1;", "-                do {", "-                    h = 3 * h + 1;", "-                }", "-                while (h <= 256);", "-                do {", "-                    h = h / 3;", "-                    for (i = h; i <= 255; i++) {", "-                        vv = runningOrder[i];", "-                        j = i;", "-                        while ((ftab[((runningOrder[j - h]) + 1) << 8]", "-                                - ftab[(runningOrder[j - h]) << 8])", "-                                > (ftab[((vv) + 1) << 8] - ftab[(vv) << 8])) {", "-                            runningOrder[j] = runningOrder[j - h];", "-                            j = j - h;", "-                            if (j <= (h - 1)) {", "-                                break;", "-                            }", "-                        }", "-                        runningOrder[j] = vv;", "+        for (int h = 364; h != 1;) {", "+            h /= 3;", "+            for (int i = h; i <= 255; i++) {", "+                final int vv = runningOrder[i];", "+                final int a = ftab[(vv + 1) << 8] - ftab[vv << 8];", "+                final int b = h - 1;", "+                int j = i;", "+                for (int ro = runningOrder[j - h];", "+                     (ftab[(ro + 1) << 8] - ftab[ro << 8]) > a;", "+                     ro = runningOrder[j - h]) {", "+                    runningOrder[j] = ro;", "+                    j -= h;", "+                    if (j <= b) {", "+                        break;", "-                } while (h != 1);", "+                }", "+                runningOrder[j] = vv;", "+        }", "-            /*", "+        /*", "-            */", "-            for (i = 0; i <= 255; i++) {", "-", "-                /*", "+        */", "+        for (int i = 0; i <= 255; i++) {", "+            /*", "-                */", "-                ss = runningOrder[i];", "+            */", "+            final int ss = runningOrder[i];", "-                /*", "+            // Step 1:", "+            /*", "-                */", "-                for (j = 0; j <= 255; j++) {", "-                    sb = (ss << 8) + j;", "-                    if (!((ftab[sb] & SETMASK) == SETMASK)) {", "-                        int lo = ftab[sb] & CLEARMASK;", "-                        int hi = (ftab[sb + 1] & CLEARMASK) - 1;", "-                        if (hi > lo) {", "-                            qSort3(lo, hi, 2);", "-                            numQSorted += (hi - lo + 1);", "-                            if (workDone > workLimit && firstAttempt) {", "-                                return;", "-                            }", "+            */", "+            for (int j = 0; j <= 255; j++) {", "+                final int sb = (ss << 8) + j;", "+                final int ftab_sb = ftab[sb];", "+                if ((ftab_sb & SETMASK) != SETMASK) {", "+                    final int lo = ftab_sb & CLEARMASK;", "+                    final int hi = (ftab[sb + 1] & CLEARMASK) - 1;", "+                    if (hi > lo) {", "+                        mainQSort3(data, lo, hi, 2);", "+                        if (firstAttempt && (this.workDone > workLimit)) {", "+                            return;", "-                        ftab[sb] |= SETMASK;", "+                    ftab[sb] = ftab_sb | SETMASK;", "+            }", "-                /*", "+            // Step 2:", "+            // Now scan this big bucket so as to synthesise the", "+            // sorted order for small buckets [t, ss] for all t != ss.", "+", "+            for (int j = 0; j <= 255; j++) {", "+                copy[j] = ftab[(j << 8) + ss] & CLEARMASK;", "+            }", "+", "+            for (int j = ftab[ss << 8] & CLEARMASK,", "+                     hj = (ftab[(ss + 1) << 8] & CLEARMASK);", "+                 j < hj;", "+                 j++) {", "+                final int fmap_j = fmap[j];", "+                c1 = block[fmap_j] & 0xff;", "+                if (!bigDone[c1]) {", "+                    fmap[copy[c1]] = (fmap_j == 0) ? last : (fmap_j - 1);", "+                    copy[c1]++;", "+                }", "+            }", "+", "+            for (int j = 256; --j >= 0;)", "+                ftab[(j << 8) + ss] |= SETMASK;", "+", "+            // Step 3:", "+            /*", "-                */", "-                bigDone[ss] = true;", "+            */", "+            bigDone[ss] = true;", "-                if (i < 255) {", "-                    int bbStart  = ftab[ss << 8] & CLEARMASK;", "-                    int bbSize   = (ftab[(ss + 1) << 8] & CLEARMASK) - bbStart;", "-                    int shifts   = 0;", "+            if (i < 255) {", "+                final int bbStart = ftab[ss << 8] & CLEARMASK;", "+                final int bbSize  = ", "+                    (ftab[(ss + 1) << 8] & CLEARMASK) - bbStart;", "+                int shifts = 0;", "-                    while ((bbSize >> shifts) > 65534) {", "-                        shifts++;", "-                    }", "-", "-                    for (j = 0; j < bbSize; j++) {", "-                        int a2update = zptr[bbStart + j];", "-                        int qVal = (j >> shifts);", "-                        quadrant[a2update] = qVal;", "-                        if (a2update < NUM_OVERSHOOT_BYTES) {", "-                            quadrant[a2update + last + 1] = qVal;", "-                        }", "-                    }", "-", "-                    if (!(((bbSize - 1) >> shifts) <= 65535)) {", "-                        panic();", "-                    }", "+                while ((bbSize >> shifts) > 65534) {", "+                    shifts++;", "-                /*", "-                  Now scan this big bucket so as to synthesise the", "-                  sorted order for small buckets [t, ss] for all t != ss.", "-                */", "-                for (j = 0; j <= 255; j++) {", "-                    copy[j] = ftab[(j << 8) + ss] & CLEARMASK;", "-                }", "-", "-                for (j = ftab[ss << 8] & CLEARMASK;", "-                     j < (ftab[(ss + 1) << 8] & CLEARMASK); j++) {", "-                    c1 = block[zptr[j]];", "-                    if (!bigDone[c1]) {", "-                        zptr[copy[c1]] = zptr[j] == 0 ? last : zptr[j] - 1;", "-                        copy[c1]++;", "+                for (int j = 0; j < bbSize; j++) {", "+                    final int a2update = fmap[bbStart + j];", "+                    final char qVal = (char) (j >> shifts);", "+                    quadrant[a2update] = qVal;", "+                    if (a2update < NUM_OVERSHOOT_BYTES) {", "+                        quadrant[a2update + last + 1] = qVal;", "-                }", "-", "-                for (j = 0; j <= 255; j++) {", "-                    ftab[(j << 8) + ss] |= SETMASK;", "+"]}]}
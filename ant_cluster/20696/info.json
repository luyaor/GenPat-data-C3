{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3dd96937cd5404c35a3f6765ddf43b6c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "462845c33645c2690c98c3d92acc22db", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/Main.java", "commitBeforeChange": "b641968fade3f4f16c1676f2b5f06c6b4344ab08", "commitAfterChange": "bb67dc44d84a49fc3d8a14b02b014ac5acd41877", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String[] args)", "signatureAfterChange": "     public static void main(String[] args)", "diff": ["+        Args settings = new Args(args);", "+", "+", "-            AppContext context = new AppContext(f);", "-            EventResponder resp = new EventResponder(context);", "-            Antidote gui = new Antidote(context);", "-", "-            JMenuBar menu = context.getActions().createMenuBar();", "-            f.setJMenuBar(menu);", "-            f.getContentPane().add(BorderLayout.CENTER, gui);", "-            f.getContentPane().add(BorderLayout.NORTH, ", "-                                   context.getActions().createToolBar());", "+            AppContext context = new AppContext(f);", "-            // Add the project selection menu.", "-            ProjectSelectionMenu ps = new ProjectSelectionMenu(context);", "-            ps.insertInto(menu);", "+            if(!settings.isWizzardMode()) {", "+                EventResponder resp = new EventResponder(context);", "+                Antidote gui = new Antidote(context);", "-            // Add debugging items.", "-            if(context.isDebugOn()) {", "-                context.getEventBus().addMember(", "-                    EventBus.VETOING, new EventDebugMonitor());", "+                JMenuBar menu = context.getActions().createMenuBar();", "+                f.setJMenuBar(menu);", "+                f.getContentPane().add(BorderLayout.CENTER, gui);", "+                f.getContentPane().add(BorderLayout.NORTH, ", "+                                       context.getActions().createToolBar());", "+                ", "+                // Add the project selection menu.", "+                ProjectSelectionMenu ps = new ProjectSelectionMenu(context);", "+                ps.insertInto(menu);", "+                ", "+                // Add debugging items.", "+                if(settings.isDebugMode()) {", "+                    context.getEventBus().addMember(", "+                        EventBus.VETOING, new EventDebugMonitor());", "+                }", "+", "+                // Load a build file if one is provided.", "+                if(settings.getBuildFile() != null) {", "+                    LoadFileCmd load = new LoadFileCmd(context);", "+                    load.setFile(new File(settings.getBuildFile()));", "+                    load.run();", "+                }", "+            }", "+            else {", "+                // We are in wizzard mode. Create it.", "+                ResourceManager resources = new ResourceManager(", "+                    \"org.apache.tools.ant.gui.resources.buildFileWizzard\");", "+                Wizzard wiz = new Wizzard(", "+                    resources, ACSFactory.getInstance().createProject());", "+                // XXX this is temporary for testing. Eventually", "+                // it will launch the regular antidote screen with the", "+                // results of the wizzard.", "+                wiz.addWizzardListener(new WizzardListener() {", "+                        public void finished(Object model) {", "+                            System.out.println(model);", "+                            System.exit(0);", "+                        }", "+                        public void canceled() {", "+                            System.exit(0);", "+                        }", "+", "+                    });", "+", "+                f.getContentPane().add(BorderLayout.CENTER, wiz);", "-            f.pack();", "+            f.pack();", "-            // XXX this will change once full command line argument parsing", "-            // is supported.", "-            if(args.length > 0) {", "-                LoadFileCmd load = new LoadFileCmd(context);", "-                load.setFile(new File(args[0]));", "-                load.run();", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2b2cfad569b7111714cbaab365e5325", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/pvcs/Pvcs.java", "commitBeforeChange": "270394a09fddda0ea9ffa2330956c5f399ab840f", "commitAfterChange": "6bd8d6e938a45868902ecd1092858e8372933c7c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void createFolders(File file) throws IOException, ParseException", "signatureAfterChange": "     private void createFolders(File file) throws IOException, ParseException", "diff": ["-        BufferedReader in = new BufferedReader(new FileReader(file));", "-        MessageFormat mf = new MessageFormat(getFilenameFormat());", "-        String line = in.readLine();", "-        while (line != null) {", "-            log(\"Considering \\\"\" + line + \"\\\"\", Project.MSG_VERBOSE);", "-            if (line.startsWith(\"\\\"\\\\\") ||", "-               line.startsWith(\"\\\"/\") ||", "-               line.startsWith(getLineStart())) {", "-                Object[] objs = mf.parse(line);", "-                String f = (String) objs[1];", "-                // Extract the name of the directory from the filename", "-                int index = f.lastIndexOf(File.separator);", "-                if (index > -1) {", "-                    File dir = new File(f.substring(0, index));", "-                    if (!dir.exists()) {", "-                        log(\"Creating \" + dir.getAbsolutePath(), ", "-                            Project.MSG_VERBOSE);", "-                        if (dir.mkdirs()) {", "-                            log(\"Created \" + dir.getAbsolutePath(), ", "-                                Project.MSG_INFO);", "+        BufferedReader in = null;", "+        try {", "+            in = new BufferedReader(new FileReader(file));", "+            MessageFormat mf = new MessageFormat(getFilenameFormat());", "+            String line = in.readLine();", "+            while (line != null) {", "+                log(\"Considering \\\"\" + line + \"\\\"\", Project.MSG_VERBOSE);", "+                if (line.startsWith(\"\\\"\\\\\") ||", "+                    line.startsWith(\"\\\"/\") ||", "+                    line.startsWith(getLineStart())) {", "+                    Object[] objs = mf.parse(line);", "+                    String f = (String) objs[1];", "+                    // Extract the name of the directory from the filename", "+                    int index = f.lastIndexOf(File.separator);", "+                    if (index > -1) {", "+                        File dir = new File(f.substring(0, index));", "+                        if (!dir.exists()) {", "+                            log(\"Creating \" + dir.getAbsolutePath(), ", "+                                Project.MSG_VERBOSE);", "+                            if (dir.mkdirs()) {", "+                                log(\"Created \" + dir.getAbsolutePath(), ", "+                                    Project.MSG_INFO);", "+                            } else {", "+                                log(\"Failed to create \" ", "+                                    + dir.getAbsolutePath(), ", "+                                    Project.MSG_INFO);", "+                            }", "-                            log(\"Failed to create \" + dir.getAbsolutePath(), ", "-                                Project.MSG_INFO);", "+                            log(dir.getAbsolutePath() + \" exists. Skipping\", ", "+                                Project.MSG_VERBOSE);", "-                        log(dir.getAbsolutePath() + \" exists. Skipping\", ", "-                            Project.MSG_VERBOSE);", "+                        log(\"File separator problem with \" + line,", "+                            Project.MSG_WARN);", "-                    log(\"File separator problem with \" + line,", "-                        Project.MSG_WARN);", "+                    log(\"Skipped \\\"\" + line + \"\\\"\", Project.MSG_VERBOSE);", "-            } else {", "-                log(\"Skipped \\\"\" + line + \"\\\"\", Project.MSG_VERBOSE);", "+                line = in.readLine();", "-            line = in.readLine();", "+        } finally {", "+            if (in != null) {", "+                in.close();", "+            }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "49a3c0875be3233f005d666e554ef4e8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "515a2740e0d32df13f6032e6043ba66a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "536bfb63e3ad71036b032550ca8241e07e1f5d45", "commitAfterChange": "b5397fd0e4b2a0e360dc14a9cb1ebec8f4ce7aa5", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 3, "signatureBeforeChange": "         public void init(String tag, AttributeList attrs) throws SAXParseException", "signatureAfterChange": "     public static ProjectHelper getProjectHelper()         throws BuildException", "diff": ["+     */", "+    public static ProjectHelper getProjectHelper()", "+        throws BuildException", "+    {", "+        // Identify the class loader we will be using. Ant may be", "+        // in a webapp or embeded in a different app", "+        ProjectHelper helper=null;", "+        // First, try the system property", "+            String helperClass = System.getProperty(HELPER_PROPERTY);", "+            if (helperClass != null) {", "+                helper = newHelper(helperClass);", "+            }", "+        } catch (SecurityException e) {", "+            // It's ok, we'll try next option", "+            ;", "+        }", "+", "+        // A JDK1.3 'service' ( like in JAXP ). That will plug a helper", "+        // automatically if in CLASSPATH, with the right META-INF/services.", "+        if( helper==null ) {", "+                ClassLoader classLoader=getContextClassLoader();", "+                InputStream is=null;", "+                if (classLoader != null) {", "+                    is=classLoader.getResourceAsStream( SERVICE_ID );", "+                if( is==null ) {", "+                    is=ClassLoader.getSystemResourceAsStream( SERVICE_ID );", "+                if( is != null ) {", "+                    // This code is needed by EBCDIC and other strange systems.", "+                    // It's a fix for bugs reported in xerces", "+                    BufferedReader rd;", "+                    try {", "+                        rd = new BufferedReader(new InputStreamReader(is, \"UTF-8\"));", "+                    } catch (java.io.UnsupportedEncodingException e) {", "+                        rd = new BufferedReader(new InputStreamReader(is));", "+                    }", "+                    ", "+                    String helperClassName = rd.readLine();", "+                    rd.close();", "+                    ", "+                    if (helperClassName != null &&", "+                        ! \"\".equals(helperClassName)) {", "+                        ", "+                        helper= newHelper( helperClassName );", "-         */", "-        public void init(String tag, AttributeList attrs) throws SAXParseException {", "-            String name = null;", "-            String depends = \"\";", "-            String ifCond = null;", "-            String unlessCond = null;", "-            String id = null;", "-            String description = null;", "-", "-            for (int i = 0; i < attrs.getLength(); i++) {", "-                String key = attrs.getName(i);", "-                String value = attrs.getValue(i);", "-", "-                if (key.equals(\"name\")) {", "-                    name = value;", "-                } else if (key.equals(\"depends\")) {", "-                    depends = value;", "-                } else if (key.equals(\"if\")) {", "-                    ifCond = value;", "-                } else if (key.equals(\"unless\")) {", "-                    unlessCond = value;", "-                } else if (key.equals(\"id\")) {", "-                    id = value;", "-                } else if (key.equals(\"description\")) {", "-                    description = value;", "-                } else {", "-                    throw new SAXParseException(\"Unexpected attribute \\\"\" + key + \"\\\"\", locator);", "-                }", "-            }", "-", "-            if (name == null) {", "-                throw new SAXParseException(\"target element appears without a name attribute\", locator);", "-            }", "-", "-            target = new Target();", "-            target.setName(name);", "-            target.setIf(ifCond);", "-            target.setUnless(unlessCond);", "-            target.setDescription(description);", "-            project.addTarget(name, target);", "-", "-            if (id != null && !id.equals(\"\")) {", "-                project.addReference(id, target);", "-            }", "-", "-            // take care of dependencies", "-", "-            if (depends.length() > 0) {", "-                target.setDepends(depends);", "+            } catch( Exception ex ) {", "+                ;", "+        if( helper!=null ) {", "+            return helper;", "+        } else {", "+            // Default", "+            return new ProjectHelperImpl();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c9df6cd71e42ae124a39b76a060c5bf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "cb2df57502298cff2dc5355d58e529e8afcb4796", "commitAfterChange": "df121a6cf559a17a573a5795d7c7daa0cd37be37", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public static ProjectHelper getProjectHelper() throws BuildException", "signatureAfterChange": "     public static ProjectHelper getProjectHelper()", "diff": ["-    public static ProjectHelper getProjectHelper() throws BuildException {", "-        // Identify the class loader we will be using. Ant may be", "-        // in a webapp or embedded in a different app", "-        ProjectHelper helper = null;", "-", "-        // First, try the system property", "-        String helperClass = System.getProperty(HELPER_PROPERTY);", "-        try {", "-            if (helperClass != null) {", "-                helper = newHelper(helperClass);", "-            }", "-        } catch (SecurityException e) {", "-            System.out.println(\"Unable to load ProjectHelper class \\\"\"", "-                + helperClass + \" specified in system property \"", "-                + HELPER_PROPERTY);", "-        }", "-", "-        // A JDK1.3 'service' ( like in JAXP ). That will plug a helper", "-        // automatically if in CLASSPATH, with the right META-INF/services.", "-        if (helper == null) {", "-            try {", "-                ClassLoader classLoader = LoaderUtils.getContextClassLoader();", "-                InputStream is = null;", "-                if (classLoader != null) {", "-                    is = classLoader.getResourceAsStream(SERVICE_ID);", "-                }", "-                if (is == null) {", "-                    is = ClassLoader.getSystemResourceAsStream(SERVICE_ID);", "-                }", "-                if (is != null) {", "-                    // This code is needed by EBCDIC and other strange systems.", "-                    // It's a fix for bugs reported in xerces", "-                    InputStreamReader isr;", "-                    try {", "-                        isr = new InputStreamReader(is, \"UTF-8\");", "-                    } catch (java.io.UnsupportedEncodingException e) {", "-                        isr = new InputStreamReader(is);", "-                    }", "-                    BufferedReader rd = new BufferedReader(isr);", "-", "-                    String helperClassName = rd.readLine();", "-                    rd.close();", "-", "-                    if (helperClassName != null && !\"\".equals(helperClassName)) {", "-                        helper = newHelper(helperClassName);", "-                    }", "-                }", "-            } catch (Exception ex) {", "-                System.out.println(\"Unable to load ProjectHelper from service \" + SERVICE_ID);", "-            }", "-        }", "-        return helper == null ? new ProjectHelper2() : helper;", "-    }", "+    public static ProjectHelper getProjectHelper() {", "+        return (ProjectHelper) ProjectHelperRepository.getInstance().getHelpers().next();"]}]}
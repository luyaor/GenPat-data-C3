{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "54052fcf84740b8b2984a2ddbc971fea", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af2a6da680e83530553e9ea6bf791c76", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/PropertyFile.java", "commitBeforeChange": "1c75ce2bee96873b6fbe22a9eada83d3f23c3e3d", "commitAfterChange": "37cf105bb344793a164900b1a09d678679e13946", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private void writeFile() throws BuildException", "signatureAfterChange": "      private void writeFile() throws BuildException", "diff": ["-        BufferedOutputStream bos = null;", "+        // Write to RAM first, as an OOME could otherwise produce a truncated file:", "+        ByteArrayOutputStream baos = new ByteArrayOutputStream();", "-            bos = new BufferedOutputStream(new FileOutputStream(propertyfile));", "-            properties.store(bos, comment);", "-        } catch (IOException ioe) {", "-            throw new BuildException(ioe, getLocation());", "-        } finally {", "-            FileUtils.close(bos);", "+            properties.store(baos, comment);", "+        } catch (IOException x) { // should not happen", "+            throw new BuildException(x, getLocation());", "+        }", "+        try {", "+            OutputStream os = new FileOutputStream(propertyfile);", "+            try {", "+                os.write(baos.toByteArray());", "+            } catch (IOException x) {", "+                propertyfile.delete(); // possibly corrupt", "+                throw new BuildException(x, getLocation());", "+            } finally {", "+                os.close();", "+            }", "+        } catch (IOException x) {", "+            throw new BuildException(x, getLocation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5a645f33f6ba1869d981228c37ab42e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Java.java", "commitBeforeChange": "5e898465ac1ab3d90fdc26dc34a2b87a2ea9be35", "commitAfterChange": "c5faebbd854cf6f4363402c2cd2a54749b4eeb61", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 13, "signatureBeforeChange": "     protected Vector tokenize(String args)", "signatureAfterChange": "     private int run(String[] command) throws BuildException", "diff": ["+     */", "+    private int run(String[] command) throws BuildException {", "+        Execute exe = new Execute(new LogStreamHandler(this, Project.MSG_INFO,", "+                                                       Project.MSG_WARN), ", "+                                  null);", "+        exe.setAntRun(project);", "+", "+        if (dir == null) dir = project.getBaseDir();", "+        exe.setWorkingDirectory(dir);", "+", "+        exe.setCommandline(command);", "+        try {", "+            return exe.execute();", "+        } catch (IOException e) {", "+            throw new BuildException(e, location);", "+        }", "+    }", "-     */", "-    protected Vector tokenize(String args) {", "-        Vector v = new Vector();", "-        if (args == null) return v;", "-", "-        StringTokenizer t = new StringTokenizer(args, \" \");", "-        ", "-        while (t.hasMoreTokens()) {", "-            v.addElement(t.nextToken());", "-        }", "-", "-        return v;", "-    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "41f777743aa547479ea3c7d1055bd979", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38f0a013c60aff2892f78587bd10c723", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/ImportTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void testSerial()", "signatureAfterChange": "  \t@Test     public void testSerial()", "diff": ["+\t@Test", "-        configureProject(\"src/etc/testcases/taskdefs/import/subdir/serial.xml\");", "-        assertLogContaining(\"Unnamed2.xmlUnnamed1.xml\");", "-        String fullLog = getFullLog();", "-        String substring = \"Skipped already imported file\";", "-        assertTrue(\"expecting full log to contain \\\"\" + substring", "-            + \"\\\" full log was \\\"\" + fullLog + \"\\\"\",", "-            fullLog.indexOf(substring) >= 0);", "+        buildRule.configureProject(\"src/etc/testcases/taskdefs/import/subdir/serial.xml\");", "+        assertContains(\"Unnamed2.xmlUnnamed1.xml\", buildRule.getLog());", "+        assertContains(\"Expected string was not found in log\",", "+        \t\t\"Skipped already imported file\", buildRule.getFullLog());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd46b6d0979fecf5d98cb223ed2d4a65", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SignJar.java", "commitBeforeChange": "37a64a407cf3080ccd6b6a6d37aac9f48fdcd7e1", "commitAfterChange": "ba170891db5e5a75d02391a73085dee6e7a6074d", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     private void addTimestampAuthorityCommands(final ExecTask cmd)", "signatureAfterChange": "     private void addTimestampAuthorityCommands(final ExecTask cmd)", "diff": ["-", "-            if (tsaproxyhost != null) {", "-                final String connectionType;", "-                if (tsaurl.startsWith(\"https\")) {", "-                    connectionType = \"https\";", "-                } else {", "-                    connectionType = \"http\";", "-                }", "-", "-                addValue(cmd, \"-J-D\" + connectionType + \".proxyHost=\" + tsaproxyhost);", "-", "-                if (tsaproxyport != null) {", "-                    addValue(cmd, \"-J-D\" + connectionType + \".proxyPort=\" + tsaproxyport);", "-                }", "-            }", "+        if (tsaproxyhost != null) {", "+            if (tsaurl == null || tsaurl.startsWith(\"https\")) {", "+                addProxyFor(cmd, \"https\");", "+            }", "+            if (tsaurl == null || !tsaurl.startsWith(\"https\")) {", "+                addProxyFor(cmd, \"http\");", "+            }", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "565ff7e2c61aedd3c74117a29bf2eb91", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11cb5db29e047d5ced011a6363dcb7b2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "4f509c65b02916132edfc67763f19656e841b06b", "commitAfterChange": "c84425e271b6fec1221fd7d742cfe4699b941e98", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String encoding, Project project)         throws IOException", "signatureAfterChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String inputEncoding, String outputEncoding,                          Project project)         throws IOException", "diff": ["+     */", "+    public void copyFile(File sourceFile, File destFile,", "+                         FilterSetCollection filters, Vector filterChains,", "+                         boolean overwrite, boolean preserveLastModified,", "+                         String inputEncoding, String outputEncoding,", "+                         Project project)", "+        throws IOException {", "-            if (filterSetsAvailable || filterChainsAvailable) {", "+            if (filterSetsAvailable || filterChainsAvailable", "+                || (inputEncoding != null ", "+                    && !inputEncoding.equals(outputEncoding))", "+                || (inputEncoding == null && outputEncoding != null)) {", "-                    if (encoding == null) {", "+                    if (inputEncoding == null) {", "-                        out = new BufferedWriter(new FileWriter(destFile));", "-                                                                     encoding));", "+                                                                     inputEncoding));", "+                    }", "+", "+                    if (outputEncoding == null) {", "+                        out = new BufferedWriter(new FileWriter(destFile));", "+                    } else {", "-                                                                      encoding));", "+                                                                      outputEncoding));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "596b90f5756c1e3107a5de8a72f6c9c8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipFile.java", "commitBeforeChange": "aa43e37a025cdf54b8914b8283e57419a253ed59", "commitAfterChange": "dee95e3acc5154aee03ff5f91f9a56426ae79f3f", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 30, "signatureBeforeChange": "     private String getUnicodeStringIfOriginalMatches(AbstractUnicodeExtraField f,                                                      byte[] orig)", "signatureAfterChange": "         public int compare(ZipEntry e1, ZipEntry e2)", "diff": ["-     */", "-    private String getUnicodeStringIfOriginalMatches(AbstractUnicodeExtraField f,", "-                                                     byte[] orig) {", "-        if (f != null) {", "-            CRC32 crc32 = new CRC32();", "-            crc32.update(orig);", "-            long origCRC32 = crc32.getValue();", "-", "-            if (origCRC32 == f.getNameCRC32()) {", "-                try {", "-                    return ZipEncodingHelper", "-                        .UTF8_ZIP_ENCODING.decode(f.getUnicodeName());", "-                } catch (IOException ex) {", "-                    // UTF-8 unsupported?  should be impossible the", "-                    // Unicode*ExtraField must contain some bad bytes", "-", "-                    // TODO log this anywhere?", "-                    return null;", "-                }", "-            }", "-        }", "-        return null;", "-    }", "+        new Comparator<ZipEntry>() {", "+        public int compare(ZipEntry e1, ZipEntry e2) {", "+            if (e1 == e2) {", "+                return 0;", "+            }", "+", "+            OffsetEntry off1 = entries.get(e1);", "+            OffsetEntry off2 = entries.get(e2);", "+            if (off1 == null) {", "+                return 1;", "+            }", "+            if (off2 == null) {", "+                return -1;", "+            }", "+            long val = (off1.headerOffset - off2.headerOffset);", "+            return val == 0 ? 0 : val < 0 ? -1 : +1;", "+        }"]}]}
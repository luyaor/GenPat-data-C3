{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9eeef82cac90f2907870f63d71b260ab", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd48f4aa83a7a616095055334bba6138", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "c35a248ef870c9f98b7eda39ba9e3653775aea82", "commitAfterChange": "4653e638dd921ac96a2e8583851b121e46477ae9", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 15, "signatureBeforeChange": "     protected void writeLocalFileHeader(ZipEntry ze) throws IOException", "signatureAfterChange": "     protected void writeLocalFileHeader(ZipEntry ze) throws IOException", "diff": ["-        out.write(LFH_SIG.getBytes());", "+        writeOut(LFH_SIG.getBytes());", "-        if (ze.getMethod() == DEFLATED) {", "+        if (ze.getMethod() == DEFLATED && raf == null) {", "-            out.write((new ZipShort(20)).getBytes());", "+            writeOut((new ZipShort(20)).getBytes());", "-            out.write((new ZipShort(8)).getBytes());", "+            writeOut((new ZipShort(8)).getBytes());", "-            out.write((new ZipShort(10)).getBytes());", "-            out.write(ZERO);", "+            writeOut((new ZipShort(10)).getBytes());", "+            writeOut(ZERO);", "-        out.write((new ZipShort(ze.getMethod())).getBytes());", "+        writeOut((new ZipShort(ze.getMethod())).getBytes());", "-        out.write(toDosTime(new Date(ze.getTime())).getBytes());", "+        writeOut(toDosTime(new Date(ze.getTime())).getBytes());", "-        if (ze.getMethod() == DEFLATED) {", "-            out.write(LZERO);", "-            out.write(LZERO);", "-            out.write(LZERO);", "+        localDataStart = written;", "+        if (ze.getMethod() == DEFLATED || raf != null) {", "+            writeOut(LZERO);", "+            writeOut(LZERO);", "+            writeOut(LZERO);", "-            out.write((new ZipLong(ze.getCrc())).getBytes());", "-            out.write((new ZipLong(ze.getSize())).getBytes());", "-            out.write((new ZipLong(ze.getSize())).getBytes());", "+            writeOut((new ZipLong(ze.getCrc())).getBytes());", "+            writeOut((new ZipLong(ze.getSize())).getBytes());", "+            writeOut((new ZipLong(ze.getSize())).getBytes());", "-        out.write((new ZipShort(name.length)).getBytes());", "+        writeOut((new ZipShort(name.length)).getBytes());", "-        out.write((new ZipShort(extra.length)).getBytes());", "+        writeOut((new ZipShort(extra.length)).getBytes());", "-        out.write(name);", "+        writeOut(name);", "-        out.write(extra);", "+        writeOut(extra);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d25d7710cba934c582cfd1f775ef0618", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/perforce/P4HandlerAdapter.java", "commitBeforeChange": "9a177657a630bfda7961b10ddcf76b8c199fdfda", "commitAfterChange": "ec0ed5336208c963b32eb8c3858532828a4e2997", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "       public void start() throws BuildException", "signatureAfterChange": "      public void start() throws BuildException", "diff": ["-", "-        try {", "-            //First write any output to P4", "-            if (p4input != null && p4input.length() > 0 && os != null) {", "-                os.write(p4input.getBytes());", "-                os.flush();", "-                os.close();", "-            }", "-", "-            //Now read any input and process", "-            Thread output = new Thread(new Reader(is));", "-            Thread error = new Thread(new Reader(es));", "-            output.start();", "-            error.start();", "-            output.join();", "-            error.join();", "-        } catch (Exception e) {", "-            throw new BuildException(e);", "+        if (p4input != null && p4input.length() > 0) {", "+            myHandler = new PumpStreamHandler(new P4OutputStream(this),new P4OutputStream(this), new ByteArrayInputStream(p4input.getBytes()));", "+        else {", "+            myHandler = new PumpStreamHandler(new P4OutputStream(this), new P4OutputStream(this));", "+        }", "+        myHandler.setProcessInputStream(os);", "+        myHandler.setProcessErrorStream(es);", "+        myHandler.setProcessOutputStream(is);", "+        myHandler.start();", "+    }"]}]}
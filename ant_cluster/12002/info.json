{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5346e535e8d59857d9ff7e9839f11a15", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0670afb3c8e4bd42b7a32d0992ccebea", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/starteam/TreeBasedTask.java", "commitBeforeChange": "6e6abf78f4cbabecf38ed8b9664b5bef88915742", "commitAfterChange": "f87b5ed7757c30daca5cf875c95520a00dce2269", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 16, "signatureBeforeChange": "            public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-     ", "-     public void execute() throws BuildException {", "-        // Get view as of the current time?", "-        View view = StarTeamFinder.openView(getUserName() + \":\" + getPassword()", "-                + \"@\" + getURL());", "-        View snapshot = new View(view, ViewConfiguration.createFromTime(", "-                new OLEDate()));", "-        Folder starteamrootfolder = ", "-\t    StarTeamFinder.findFolder(snapshot.getRootFolder(), this.rootStarteamFolder);", "-        if ( null == starteamrootfolder) {", "-            throw new BuildException(\"Unable to find root folderin repository.\");", "+    public void execute() throws BuildException {", "+        try {", "+            if (null != this.rootLocalFolder && !this.forced) {", "+                log(\"Warning: rootLocalFolder specified, but forcing off.\",", "+                        Project.MSG_WARN);", "+            }", "+            // Open the view", "+            View view =", "+                    StarTeamFinder.openView(getUserName() + \":\"", "+                    + getPassword()", "+                    + \"@\" + getURL());", "+", "+            if (null == view) {", "+                throw new BuildException(\"Cannot find view\" + getURL() +", "+                        \" in repository()\");", "+            }", "+", "+            View snapshot = createSnapshotView(view);", "+", "+            // find the starteam folder specified to be the root of the", "+            // operation.  Throw if it can't be found.", "+            Folder starteamrootfolder =", "+                    StarTeamFinder.findFolder(snapshot.getRootFolder(),", "+                            this.rootStarteamFolder);", "+", "+            if (null == starteamrootfolder) {", "+                throw new BuildException(", "+                        \"Unable to find root folder in repository.\");", "+            }", "+", "+            // set the local folder.", "+            java.io.File localrootfolder;", "+            if (null == this.rootLocalFolder) {", "+                // use Star Team's default", "+                localrootfolder =", "+                        new java.io.File(starteamrootfolder.getPath());", "+            } else {", "+                // force StarTeam to use our folder", "+                localrootfolder = new java.io.File(getRootLocalFolder());", "+                log(\"overriding local folder to \" + localrootfolder);", "+            }", "+", "+            // Inspect everything in the root folder and then recursively", "+            visit(starteamrootfolder, localrootfolder);", "+        } catch (Exception e) {", "+            throw new BuildException(e);", "-", "-\tjava.io.File localrootfolder;", "-", "-\tif (null == this.rootLocalFolder) {", "-\t    // use Star Team's default", "-\t    localrootfolder = new java.io.File(starteamrootfolder.getPath());", "-\t} else {", "-\t    // force StarTeam to use our folder", "-\t    localrootfolder = new java.io.File(getRootLocalFolder());", "-\t    log(\"overriding local folder to \" + localrootfolder);", "-\t}", "-", "-        // Inspect everything in the root folder and then recursively", "-        visit(starteamrootfolder, localrootfolder);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d0f80bab2d092b48abf6659083e57b8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/javacc/JavaCC.java", "commitBeforeChange": "46c40044e121ccf6096148a2def4159a4887e405", "commitAfterChange": "5c5152c705ed97f52e319498b7fcb7e639f75cc8", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     protected static String getMainClass(File home, int type)          throws BuildException", "signatureAfterChange": "     protected static String getMainClass(File home, int type)          throws BuildException", "diff": ["-            case 1:", "-            case 2:", "-                packagePrefix = COM_PACKAGE;", "+        case 1:", "+        case 2:", "+            packagePrefix = COM_PACKAGE;", "-                switch (type) {", "-                    case TASKDEF_TYPE_JAVACC:", "-                        mainClass = COM_JAVACC_CLASS;", "-", "-                        break;", "-", "-                    case TASKDEF_TYPE_JJTREE:", "-                        mainClass = COM_JJTREE_CLASS;", "-", "-                        break;", "-", "-                    case TASKDEF_TYPE_JJDOC:", "-                        mainClass = COM_JJDOC_CLASS;", "-", "-                        break;", "-                }", "+            switch (type) {", "+            case TASKDEF_TYPE_JAVACC:", "+                mainClass = COM_JAVACC_CLASS;", "-            case 3:", "-                packagePrefix = ORG_PACKAGE;", "-", "-                switch (type) {", "-                    case TASKDEF_TYPE_JAVACC:", "-                        mainClass = ORG_JAVACC_CLASS;", "-", "-                        break;", "-", "-                    case TASKDEF_TYPE_JJTREE:", "-                        mainClass = ORG_JJTREE_CLASS;", "-", "-                        break;", "-", "-                    case TASKDEF_TYPE_JJDOC:", "-                        mainClass = ORG_JJDOC_CLASS;", "-", "-                        break;", "-                }", "+            case TASKDEF_TYPE_JJTREE:", "+                mainClass = COM_JJTREE_CLASS;", "+", "+            case TASKDEF_TYPE_JJDOC:", "+                mainClass = COM_JJDOC_CLASS;", "+", "+                break;", "+            }", "+", "+            break;", "+", "+        case 3:", "+            /* ", "+             * This is where the fun starts, JavaCC 3.0 uses", "+             * org.netbeans.javacc, 3.1 uses org.javacc - I wonder", "+             * which version is going to use net.java.javacc.", "+             *", "+             * Look into to the archive to pick up the best", "+             * package.", "+             */", "+            ZipFile zf = null;", "+            try {", "+                zf = new ZipFile(getArchiveFile(home));", "+                if (zf.getEntry(ORG_PACKAGE.replace('.', '/')) != null) {", "+                    packagePrefix = ORG_PACKAGE;", "+                } else {", "+                    packagePrefix = ORG_JAVACC_PACKAGE;", "+                }", "+            } catch (IOException e) {", "+                throw new BuildException(\"Error reading javacc.jar\", e);", "+            } finally {", "+                if (zf != null) {", "+                    try {", "+                        zf.close();", "+                    } catch (IOException e) {", "+                        throw new BuildException(e);", "+                    }", "+                }", "+            }", "+", "+            switch (type) {", "+            case TASKDEF_TYPE_JAVACC:", "+                mainClass = ORG_JAVACC_CLASS;", "+", "+                break;", "+", "+            case TASKDEF_TYPE_JJTREE:", "+                mainClass = ORG_JJTREE_CLASS;", "+", "+                break;", "+", "+            case TASKDEF_TYPE_JJDOC:", "+                mainClass = ORG_JJDOC_CLASS;", "+", "+                break;", "+            }", "+", "+            break;"]}]}
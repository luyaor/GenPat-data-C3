{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6f0567ca0252a04cd1a2fe04e8997ce4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23d995374772bcacf5844f4ad9518e05", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "3808ad11fb482568a1fe739f58ebb71b77e5a8eb", "commitAfterChange": "cfd119edd23f56c4aa458d892285c6b038820ce2", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 32, "signatureBeforeChange": "          public void init(String propType, AttributeList attrs) throws SAXParseException", "signatureAfterChange": "          public void init(String propType, AttributeList attrs) throws SAXParseException", "diff": ["-                configure(element, attrs, project);", "+                if (target != null) {", "+                    wrapper = new RuntimeConfigurable(element);", "+                    wrapper.setAttributes(attrs);", "+                    target.addDataType(wrapper);", "+                } else {", "+                    configure(element, attrs, project);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "277516f6900798aa40083557c673ebe5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/deployer/DefaultTskDeployer.java", "commitBeforeChange": "7b722732fbbdb511be32f94588d43f55b0b51f65", "commitAfterChange": "8d9a74fe25ffb24cb1b8a2c6a191ea3ac7c02b38", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void deployConverter( String name, String location, URL url )         throws DeploymentException", "signatureAfterChange": "      public void deployConverter( String name, String location, URL url )         throws DeploymentException", "diff": ["-                    handleConverter( converters[ i ], url );", "+                    final DefaultComponentFactory factory =", "+                        new DefaultComponentFactory( new URL[] { url } );", "+                    handleConverter( converters[ i ], url, factory );", "+        }", "+        catch( final Exception e )", "+        {", "+            throw new DeploymentException( \"Failed to deploy \" + name, e );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "809675a9eed52834144abafb31dea01f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/MacroInstance.java", "commitBeforeChange": "9bcaaaa34eedddac37e3681eb261c8ac600b6555", "commitAfterChange": "077ae8dc2737da5be6a853a030a2116fb4c65796", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private UnknownElement copy(UnknownElement ue)", "signatureAfterChange": "      private UnknownElement copy(UnknownElement ue)", "diff": ["-        ret.setOwningTarget(getOwningTarget());", "+        if (getOwningTarget() == null) {", "+            Target t = new Target();", "+            t.setProject(getProject());", "+            ret.setOwningTarget(t);", "+        } else {", "+            ret.setOwningTarget(getOwningTarget());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80f1a8f0aed3bd6390326ee3f83c1460", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/DescriptorHandler.java", "commitBeforeChange": "cea87ef983a6ea3fc23cdd6a0edd3e6f12061e02", "commitAfterChange": "df8f6d006fa97e72701588efbcc89f5964da425f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "          public void registerDTD(String publicId, String location)", "signatureAfterChange": "          public void registerDTD(String publicId, String location)", "diff": ["+", "+        try {", "+            if (publicId != null) {", "+                URL urldtd = new URL(location);", "+                urlDTDs.put(publicId, urldtd);", "+            }            ", "+        } catch ( java.net.MalformedURLException   e) {", "+            //ignored", "+        } ", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0866a0c906d6546e2e0f5d27d878891", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XSLTProcess.java", "commitBeforeChange": "dc2e0846ac0b71caf2bfc3e6b24042c87062ebc8", "commitAfterChange": "1e57e83036edb25a9106c8eb30bbb0183a6f44ed", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 18, "signatureBeforeChange": "          protected XSLTLiaison getLiaison()", "signatureAfterChange": "          protected XSLTLiaison getLiaison()", "diff": ["-            try {", "-                setProcessor(\"trax\");", "-            } catch (Throwable e1) {", "+            if (processor != null) {", "-                    setProcessor(\"xslp\");", "-                } catch (Throwable e2) {", "+                    resolveProcessor(processor);", "+                } catch (Exception e) {", "+                    throw new BuildException(e);", "+                }", "+            } else {", "+                try {", "+                    resolveProcessor(\"trax\");", "+                } catch (Throwable e1) {", "-                        setProcessor(\"xalan\");", "-                    } catch (Throwable e3) {", "-                        e2.printStackTrace();", "-                        e3.printStackTrace();", "-                        throw new BuildException(e1);", "+                        resolveProcessor(\"xslp\");", "+                    } catch (Throwable e2) {", "+                        try {", "+                            resolveProcessor(\"xalan\");", "+                        } catch (Throwable e3) {", "+                            e3.printStackTrace();", "+                            e2.printStackTrace();", "+                            throw new BuildException(e1);", "+                        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f315094207a0c1a6188e28c53818119a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/condition/AntVersion.java", "commitBeforeChange": "11eb66160fc05b622bc3b8b68926b7e1fb5bc089", "commitAfterChange": "55ada84e847507662f8e884bca47fe2354d1f42f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "          private void validate() throws BuildException", "signatureAfterChange": "          private void validate() throws BuildException", "diff": ["+        try {", "+            if (atLeast != null) {", "+                new DeweyDecimal(atLeast);", "+            } else {", "+                new DeweyDecimal(exactly);", "+            }", "+        } catch (NumberFormatException e) {", "+            throw new BuildException(\"The argument is not a Dewey Decimal eg 1.1.0\");", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc1c887ee3921379144cd0209a9e57e2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Jar.java", "commitBeforeChange": "7e7fa2f905e691ba00568bc670cc80060c224fd4", "commitAfterChange": "590936af269c77bda5fb410fd81e19958062efe6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private Manifest getDefaultManifest() throws IOException", "signatureAfterChange": "              private Manifest getDefaultManifest()", "diff": ["-", "-    private Manifest getDefaultManifest() throws IOException {", "-        String s = \"/org/apache/tools/ant/defaultManifest.mf\";", "-        InputStream in = this.getClass().getResourceAsStream(s);", "-        if (in == null) {", "-            throw new BuildException(\"Could not find: \" + s);", "+        ", "+    private Manifest getDefaultManifest() {", "+        try {", "+            String s = \"/org/apache/tools/ant/defaultManifest.mf\";", "+            InputStream in = this.getClass().getResourceAsStream(s);", "+            if (in == null) {", "+                throw new BuildException(\"Could not find default manifest: \" + s);", "+            }", "+            return new Manifest(in);", "-        return new Manifest(in);", "+        catch (ManifestException e) {", "+            throw new BuildException(\"Default manifest is invalid !!\");", "+        }", "+        catch (IOException e) {", "+            throw new BuildException(\"Unable to read default manifest\", e);", "+        }"]}]}
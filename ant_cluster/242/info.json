{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "96d1e947154a8b09e0fb2bf86b8a159d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d8a12c6f92174d98ebe67b6b9bcddfe", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/taskdefs/jdepend/JDependTask.java", "commitBeforeChange": "7513ab1efa12321b3e2014764bfb23d16b425caf", "commitAfterChange": "299ea801bc1031e308bfe07a22e51edd1b972872", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void executeAsForked( final CommandlineJava commandline )         throws TaskException", "signatureAfterChange": "     private void executeAsForked()         throws TaskException", "diff": ["-    private void executeAsForked( final CommandlineJava commandline )", "+    private void executeAsForked()", "-        // if not set, auto-create the ClassPath from the project", "-        createClasspath();", "+        final ExecuteJava exe = new ExecuteJava();", "+        exe.setWorkingDirectory( m_dir );", "-        // not sure whether this test is needed but cost nothing to put.", "-        // hope it will be reviewed by anybody competent", "-        final String compileClasspath = PathUtil.formatPath( m_compileClasspath );", "-        if( compileClasspath.length() > 0 )", "+        if( \"text\".equals( m_format ) )", "-            commandline.addVmArgument( \"-classpath\" );", "-            commandline.addVmArgument( compileClasspath );", "+            exe.setClassName( \"jdepend.textui.JDepend\" );", "+        else", "+        {", "+            exe.setClassName( \"jdepend.xmlui.JDepend\" );", "+        }", "+", "+        if( m_jvm != null )", "+        {", "+            exe.setJvm( m_jvm );", "+        }", "+", "+        exe.getClassPath().addPath( m_compileClasspath );", "-            commandline.addArgument( \"-file\" );", "-            commandline.addArgument( m_outputFile.getPath() );", "-            // we have to find a cleaner way to put this output", "+            exe.getArguments().addArgument( \"-file\" );", "+            exe.getArguments().addArgument( m_outputFile );", "+            getContext().info( \"Output to be stored in \" + m_outputFile.getPath() );", "-            commandline.addArgument( f.getPath() );", "+            exe.getArguments().addArgument( f );", "-        final Execute exe = new Execute();", "-", "-        final String[] commandline1 = commandline.getCommandline();", "-        exe.setCommandline( new Commandline( commandline1 ) );", "-        exe.setWorkingDirectory( m_dir );", "-", "-        if( m_outputFile != null )", "-        {", "-            getContext().info( \"Output to be stored in \" + m_outputFile.getPath() );", "-        }", "-        exe.execute( getContext() );", "+        exe.executeForked( getContext() );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d37be2795bd5c6fb9c13c122362c9594", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/taskdefs/javacc/JJTree.java", "commitBeforeChange": "7513ab1efa12321b3e2014764bfb23d16b425caf", "commitAfterChange": "299ea801bc1031e308bfe07a22e51edd1b972872", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 14, "signatureBeforeChange": "      public void execute()         throws TaskException", "signatureAfterChange": "      public void execute()         throws TaskException", "diff": ["+        final ExecuteJava exe = new ExecuteJava();", "+        exe.setClassName( \"COM.sun.labs.jjtree.Main\" );", "-            cmdl.addArgument( \"-\" + name + \":\" + value.toString() );", "+            exe.getArguments().addArgument( \"-\" + name + \":\" + value.toString() );", "-            outputDirectory = new File( target.getParent() );", "+            outputDirectory = target.getParentFile();", "+", "-        cmdl.addArgument( \"-OUTPUT_DIRECTORY:\" + outputDirectory.getAbsolutePath().replace( '\\\\', '/' ) );", "+        exe.getArguments().addArgument( \"-OUTPUT_DIRECTORY:\" + outputDirectory.getAbsolutePath().replace( '\\\\', '/' ) );", "-        cmdl.addArgument( target.getAbsolutePath() );", "+        exe.getArguments().addArgument( target );", "-        final Path classpath = cmdl.createClasspath();", "+        final Path classpath = exe.getClassPath();", "-        cmdl.addVmArgument( \"-mx140M\" );", "-        cmdl.addVmArgument( \"-Dinstall.root=\" + javaccHome.getAbsolutePath() );", "+        exe.setMaxMemory( \"140M\" );", "+        exe.getSysProperties().addVariable( \"install.root\", javaccHome.getAbsolutePath() );", "-        final Execute exe = new Execute();", "-        getContext().debug( cmdl.toString() );", "-        exe.setCommandline( new Commandline( cmdl.getCommandline() ) );", "-        exe.execute( getContext() );", "+        exe.executeForked( getContext() );"]}]}
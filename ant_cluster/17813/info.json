{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "159b544d9fd26337059058304cc5ad1b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5bdd84368f0a610145fca7fd031b8e0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/XMLCatalogTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void testNonExistentEntry()", "signatureAfterChange": "      @Test     public void testNonExistentEntry() throws IOException, SAXException, TransformerException", "diff": ["-    public void testNonExistentEntry() {", "+    @Test", "+    public void testNonExistentEntry() throws IOException, SAXException, TransformerException {", "-        try {", "-            InputSource result = catalog.resolveEntity(\"PUBLIC ID ONE\",", "-                                                       \"i/dont/exist.dtd\");", "-            assertNull(\"Nonexistent Catalog entry should not be returned\", result);", "-        } catch (Exception e) {", "-            fail(\"resolveEntity() failed!\" + e.toString());", "-        }", "+        InputSource isResult = catalog.resolveEntity(\"PUBLIC ID ONE\",", "+                                                   \"i/dont/exist.dtd\");", "+        assertNull(\"Nonexistent Catalog entry should not be returned\", isResult);", "-        try {", "-            Source result = catalog.resolve(\"i/dont/exist.dtd\", null);", "-            String expected = toURLString(new File(project.getBaseDir().toURL() +", "-                                                   \"/i/dont/exist.dtd\"));", "-            String resultStr =", "-                fileURLPartWithoutLeadingSlashes((SAXSource)result);", "-            assertTrue(\"Nonexistent Catalog entry return input with a system ID like \"", "-                       + expected + \" but was \" + resultStr,", "-                       expected.endsWith(resultStr));", "-        } catch (Exception e) {", "-            fail(\"resolve() failed!\" + e.toString());", "-        }", "+        Source result = catalog.resolve(\"i/dont/exist.dtd\", null);", "+        String expected = toURLString(new File(project.getBaseDir().toURL() +", "+                                               \"/i/dont/exist.dtd\"));", "+        String resultStr =", "+            fileURLPartWithoutLeadingSlashes((SAXSource)result);", "+        assertTrue(\"Nonexistent Catalog entry return input with a system ID like \"", "+                   + expected + \" but was \" + resultStr,", "+                   expected.endsWith(resultStr));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4efc0eb417c89144775579e95815ac1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/XMLCatalogTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 12, "signatureBeforeChange": "      public void testResolverBase()", "signatureAfterChange": "      @Test     public void testResolverBase() throws MalformedURLException, TransformerException", "diff": ["-    public void testResolverBase() {", "+    @Test", "+    public void testResolverBase() throws MalformedURLException, TransformerException {", "-        String base = null;", "-        try {", "-            base = toURLString(project.getBaseDir()) + \"/src/\";", "-        } catch (MalformedURLException ex) {", "-            fail (ex.toString());", "-        }", "+        String base = toURLString(project.getBaseDir()) + \"/src/\";", "-        try {", "-            Source result = catalog.resolve(uri, base);", "-            assertNotNull(result);", "-            assertEquals(toURLString(xmlFile),", "-                         result.getSystemId());", "-        } catch (Exception e) {", "-            fail(\"resolve() failed!\" + e.toString());", "-        }", "+        Source result = catalog.resolve(uri, base);", "+        assertNotNull(result);", "+        assertEquals(toURLString(xmlFile),", "+                     result.getSystemId());", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da890b63680bd61e670889ed72695dd0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "46330b41c1a0cd642c895b8ff39ab295a3519ca4", "commitAfterChange": "f42a96f3046b6a665f9755123c9f7939e53737ba", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void configureObject( final Object object,                                   final Configuration configuration,                                   final Context context )         throws ConfigurationException", "signatureAfterChange": "     private void configureObject( final Object object,                                   final Configuration configuration,                                   final Context context )         throws Exception", "diff": ["-        throws ConfigurationException", "+        throws Exception", "+            // Start configuration of the object", "-", "-            // Locate the configurer for this object", "-", "-            // Start configuring this object", "-                    throw new ConfigurationException( message, nspe );", "-                }", "-                catch( final ConfigurationException ce )", "-                {", "-                    throw ce;", "+                    throw new ReportableConfigurationException( message, nspe );", "-                    throw new ConfigurationException( message, ce );", "+                    throw new ReportableConfigurationException( message, ce );", "-                    final PropertyConfigurer contentConfigurer = state.getConfigurer().getContentConfigurer();", "-                    setValue( contentConfigurer, state, content, context );", "+                    setContent( state, content, context );", "-                    throw new ConfigurationException( message, nspe );", "-                }", "-                catch( final ConfigurationException ce )", "-                {", "-                    throw ce;", "+                    throw new ReportableConfigurationException( message );", "-                    throw new ConfigurationException( message, ce );", "+                    throw new ReportableConfigurationException( message, ce );", "-                    throw new ConfigurationException( message, nspe );", "+                    throw new ReportableConfigurationException( message, nspe );", "-                catch( final ConfigurationException ce )", "+                catch( final ReportableConfigurationException ce )", "-                        REZ.getString( \"bad-set-element.error\", elemName, name );", "-                    throw new ConfigurationException( message, ce );", "+                        REZ.getString( \"bad-configure-element.error\", name );", "+                    throw new ReportableConfigurationException( message, ce );"]}]}
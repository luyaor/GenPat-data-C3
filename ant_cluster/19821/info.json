{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ffc1a638ba03b9af2b1c1a637ded6b17", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "858a901f3dc0b58999eaa2ad5177e5ad", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "1dc3ff85f64b99ede826fbfe4656f1a0b27bcbb5", "commitAfterChange": "3fd5393e99cef2d28ced46f804a3ae53f915bf3c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void processArgs(String[] args)", "signatureAfterChange": "     private void processArgs(String[] args)", "diff": ["+            } else if (arg.equals(\"-nice\")) {", "+                try {", "+                    threadPriority=Integer.decode(args[i + 1]);", "+                } catch (ArrayIndexOutOfBoundsException aioobe) {", "+                    throw new BuildException(", "+                            \"You must supply a niceness value (1-10)\"+", "+                            \" after the -nice option\");", "+                } catch (NumberFormatException e) {", "+                    throw new BuildException(\"Unrecognized niceness value: \" +", "+                            args[i + 1]);", "+                }", "+                i++;", "+                if(threadPriority.intValue()<Thread.MIN_PRIORITY ||", "+                        threadPriority.intValue()>Thread.MAX_PRIORITY) {", "+                    throw new BuildException(", "+                            \"Niceness value is out of the range 1-10\");", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b72fedb5407f3d1c5019070772091417", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/core/Fail.java", "commitBeforeChange": "304246c96873572205cefe74b7ab9e23fbc829bc", "commitAfterChange": "9fcace6e3a391dda5a49f6fd06a6eb6ec0bbaba8", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void execute()         throws TaskException", "signatureAfterChange": "      public void execute()         throws TaskException", "diff": ["-        try", "+        boolean failed = true;", "+", "+        if( null != m_condition )", "-            boolean failed = true;", "-", "-            if( null != m_condition )", "-            {", "-                failed = m_condition.evaluate( getContext() );", "-            }", "-", "-            if( failed )", "-            {", "-                if( null != m_message )", "-                {", "-                    throw new TaskException( m_message );", "-                }", "-                else", "-                {", "-                    throw new TaskException();", "-                }", "-            }", "+            failed = m_condition.evaluate( getContext() );", "-        catch( final ContextException ce )", "+", "+        if( failed )", "-            throw new TaskException( ce.toString(), ce );", "+            if( null != m_message )", "+            {", "+                throw new TaskException( m_message );", "+            }", "+            else", "+            {", "+                throw new TaskException();", "+            }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da6aa3a692649b4295628322097a99b1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aeed9c7cea7b1a7b82e11e29f6fdb48c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/VerifyJar.java", "commitBeforeChange": "d99445bb67a0feecbc78238c54ff468fc72d2315", "commitAfterChange": "4cf9ef09a97e2c53eacb9e629d8470ab856acc2c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        final boolean hasFileset = filesets.size() > 0;", "-        if (!hasJar && !hasFileset) {", "+        if (!hasJar && !hasResources()) {", "-            Vector sources = createUnifiedSources();", "-            for (int i = 0; i < sources.size(); i++) {", "-                FileSet fs = (FileSet) sources.elementAt(i);", "-                //get all included files in a fileset", "-                DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "-                String[] jarFiles = ds.getIncludedFiles();", "-                File baseDir = fs.getDir(getProject());", "-", "-                //loop through all jars in the fileset", "-                for (int j = 0; j < jarFiles.length; j++) {", "-                    String jarFile = jarFiles[j];", "-                    File jarSource = new File(baseDir, jarFile);", "-                    verifyOneJar(jarSource);", "-                }", "+            Path sources = createUnifiedSourcePath();", "+            Iterator iter = sources.iterator();", "+            while (iter.hasNext()) {", "+                FileResource fr = (FileResource) iter.next();", "+                verifyOneJar(fr.getFile());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3e02c6d510520a268f4bbd4a17e812d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SignJar.java", "commitBeforeChange": "7c2876282a38e560ee26eb15cf136629dc672c2e", "commitAfterChange": "c51cce56b802399a1712e67544a3224da62b7c49", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        final boolean hasFileset = filesets.size() > 0;", "-        if (!hasJar && !hasFileset) {", "+        if (!hasJar && !hasResources()) {", "-        if (hasFileset && hasSignedJar) {", "-            throw new BuildException(ERROR_SIGNEDJAR_AND_FILESETS);", "+        if (hasResources() && hasSignedJar) {", "+            throw new BuildException(ERROR_SIGNEDJAR_AND_PATHS);", "-            //a nested fileset with one file", "+            //a nested path with one file", "-            Vector sources = createUnifiedSources();", "+            Path sources = createUnifiedSourcePath();", "-            //at this point the filesets are set up with lists of files,", "+            //at this point the paths are set up with lists of files,", "-            // deal with the filesets", "-            for (int i = 0; i < sources.size(); i++) {", "-                FileSet fs = (FileSet) sources.elementAt(i);", "-                //get all included files in a fileset", "-                DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "-                String[] jarFiles = ds.getIncludedFiles();", "-                File baseDir = fs.getDir(getProject());", "+            // deal with the paths", "+            Iterator iter = sources.iterator();", "+            while (iter.hasNext()) {", "+                FileResource fr = (FileResource) iter.next();", "-                File toDir = hasDestDir ? destDir : baseDir;", "+                File toDir = hasDestDir ? destDir : fr.getBaseDir();", "-                //loop through all jars in the fileset", "-                for (int j = 0; j < jarFiles.length; j++) {", "-                    String jarFile = jarFiles[j];", "-                    //determine the destination filename via the mapper", "-                    String[] destFilenames = destMapper.mapFileName(jarFile);", "-                    if (destFilenames == null || destFilenames.length != 1) {", "-                        //we only like simple mappers.", "-                        throw new BuildException(ERROR_BAD_MAP + jarFile);", "-                    }", "-                    File destFile = new File(toDir, destFilenames[0]);", "-                    File jarSource = new File(baseDir, jarFile);", "-                    signOneJar(jarSource, destFile);", "+                //determine the destination filename via the mapper", "+                String[] destFilenames = destMapper.mapFileName(fr.getName());", "+                if (destFilenames == null || destFilenames.length != 1) {", "+                    //we only like simple mappers.", "+                    throw new BuildException(ERROR_BAD_MAP + fr.getFile());", "+                File destFile = new File(toDir, destFilenames[0]);", "+                signOneJar(fr.getFile(), destFile);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a455743325982d1af4fd8233d2b428bc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc066f270d72ed5955514b09fe8df015", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/EchoProperties.java", "commitBeforeChange": "c2b495458c2c71f438084e249f49a0eb6dfb37dd", "commitAfterChange": "2f35469477b9358250cb3f5d7778b06f6ff58e2f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     protected void saveProperties(Hashtable allProps, OutputStream os)              throws IOException, BuildException", "signatureAfterChange": "     protected void saveProperties(Hashtable allProps, OutputStream os)         throws IOException, BuildException", "diff": ["-             throws IOException, BuildException {", "-        Properties props = new Properties();", "-        Enumeration e = allProps.keys();", "-        while (e.hasMoreElements()) {", "-            String name = e.nextElement().toString();", "+        throws IOException, BuildException {", "+        final List keyList = new ArrayList(allProps.keySet());", "+        Collections.sort(keyList);", "+        Properties props = new Properties() {", "+            public Enumeration keys() {", "+                return CollectionUtils.asEnumeration(keyList.iterator());", "+            }", "+        };", "+        for (int i = 0; i < keyList.size(); i++) {", "+            String name = keyList.get(i).toString();", "-            props.put(name, value);", "+            props.setProperty(name, value);", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcb85dc25b478ea0b75a5303e8cc409f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/taskdefs/XmlPropertyTest.java", "commitBeforeChange": "ed1dc6c2376542ff311a33f0d2269c5c19d00a29", "commitAfterChange": "2d0707e1315f5b49ed01c4476f79ccd1c57ff2f1", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private void doTest(String msg, boolean keepRoot, boolean collapse,                         boolean semantic, boolean include, boolean localRoot)", "signatureAfterChange": "     private void doTest(String msg, boolean keepRoot, boolean collapse,                         boolean semantic, boolean include, boolean localRoot)", "diff": ["-                Project project = new Project();", "+                Project p = new Project();", "-                xmlproperty.setProject(project);", "+                xmlproperty.setProject(p);", "-                project.setNewProperty(\"override.property.test\", \"foo\");", "+                p.setNewProperty(\"override.property.test\", \"foo\");", "-                //printProperties(project.getProperties());", "+                //printProperties(p.getProperties());", "-                ensureProperties(msg, inputFile, workingDir, project, props);", "-                ensureReferences(msg, inputFile, project.getReferences());", "+                ensureProperties(msg, inputFile, workingDir, p, props);", "+                ensureReferences(msg, inputFile, p.getReferences());"]}]}
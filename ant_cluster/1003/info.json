{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "170f338ab8383036a799a5d13493c627", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a5994c73830bcac13ce9a0bc7cbb666", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "6f4f0c60756a92b3a5dbc1c123904be0db030ad3", "commitAfterChange": "8c9b19d0a2849ba712c6859ed7b7d3537cef33fb", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "     private int executeAsForked(JUnitTest test, ExecuteWatchdog watchdog,                                  File casesFile)         throws BuildException", "signatureAfterChange": "     private TestResultHolder executeAsForked(JUnitTest test,                                               ExecuteWatchdog watchdog,                                               File casesFile)         throws BuildException", "diff": ["-    private int executeAsForked(JUnitTest test, ExecuteWatchdog watchdog, ", "-                                File casesFile)", "+    private TestResultHolder executeAsForked(JUnitTest test, ", "+                                             ExecuteWatchdog watchdog, ", "+                                             File casesFile)", "+        File vmWatcher = createTempPropertiesFile(\"junitvmwatcher\");", "+        formatterArg.append(\"formatter=\");", "+        formatterArg.append(ForkedVMWatcher.class.getName());", "+        formatterArg.append(\",\");", "+        formatterArg.append(vmWatcher);", "+        cmd.createArgument().setValue(formatterArg.toString());", "-        int retVal;", "+        TestResultHolder result = new TestResultHolder();", "-            retVal = execute.execute();", "+            result.exitCode = execute.execute();", "+                result.timedOut = true;", "+            } else if (vmWatcher.length() == 0) {", "+                result.crashed = true;", "+                logVmCrash(feArray, test);", "+            vmWatcher.delete();", "-        return retVal;", "+        return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3b3cf0d45b460e625832c7c351ac40a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/DirectoryScannerTest.java", "commitBeforeChange": "cf850ea7b4cb5efb50408e3b005c5b4acc731467", "commitAfterChange": "56e9d4dcd5f5a5a8f21725c2106a91217e7e4d37", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "      public void testSetFollowLinks()", "signatureAfterChange": "      public void testSetFollowLinks() throws IOException", "diff": ["-    public void testSetFollowLinks() {", "+    public void testSetFollowLinks() throws IOException {", "+            if (JavaEnvUtils.isKaffe()) {", "+                System.err.println(\"link exists pre-test? \" + linkFile.exists());", "+            }", "+            ", "+            if (JavaEnvUtils.isKaffe()) {", "+                System.err.println(\"link exists after exec? \" + linkFile.exists());", "+                System.err.println(\"Ant knows it is a link? \" + FileUtils.getFileUtils().isSymbolicLink(dir, \"ThisIsALink\"));", "+            }", "+", "+            if (JavaEnvUtils.isKaffe()) {", "+                System.err.println(\"link exists pre-delete? \" + linkFile.exists());", "+            }", "+            if (JavaEnvUtils.isKaffe()) {", "+                System.err.println(\"link exists post-delete? \" + linkFile.exists());", "+            }"]}]}
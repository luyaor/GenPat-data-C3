{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "21a55f246f631d3fab85ce9e08db5a3a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c0ff864de178fd0a235d4059691919e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "c4dee0afafcc57ede3e3d1e81d2d4a1455c484a4", "commitAfterChange": "f52a170159f6dc5beebe07bfb945cb5b3fa5290b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void configureInline( final ObjectConfigurer configurer,                                   final Object object,                                   final Configuration element,                                   final Context context )         throws ConfigurationException", "signatureAfterChange": "     private void configureInline( final ConfigurationState state,                                   final Configuration element,                                   final Context context )         throws CascadingException, InvocationTargetException", "diff": ["-    private void configureInline( final ObjectConfigurer configurer,", "-                                  final Object object,", "+    private void configureInline( final ConfigurationState state,", "-        throws ConfigurationException", "+        throws CascadingException, InvocationTargetException", "-        final PropertyConfigurer childConfigurer = configurer.getProperty( elementName );", "-        if( null == childConfigurer )", "+        final PropertyConfigurer childConfigurer = state.getConfigurer().getProperty( elementName );", "+", "+        // Create the child element", "+        Object child = childConfigurer.createValue( state );", "+        if( child == null )", "-            final String message = REZ.getString( \"unknown-property.error\", elementName );", "-            throw new ConfigurationException( message );", "+            // Create an instance using the default constructor", "+            try", "+            {", "+                child = childConfigurer.getType().newInstance();", "+            }", "+            catch( final Exception e )", "+            {", "+                final String message =", "+                    REZ.getString( \"create-object.error\",", "+                                   childConfigurer.getType().getName() );", "+                throw new ConfigurationException( message, e );", "+            }", "+        // Configure the child element", "-            // Create the child element", "-            final Object child = childConfigurer.createValue( object );", "-", "-            // Configure the child element", "-            configure( child, element, context );", "-", "-            // Set the child element", "-            childConfigurer.setValue( object, child );", "+            configureObject( child, element, context );", "-            final String message =", "-                REZ.getString( \"bad-set-property.error\", elementName );", "-            throw new ConfigurationException( message, ce );", "+            // Nasty hack-o-rama, used to get this exception up through", "+            // the stack of doConfigure() calls.  This is unpacked by the", "+            // top-most configure() call, and rethrown.", "+            throw new InvocationTargetException( ce );", "+", "+        // Set the child element", "+        childConfigurer.addValue( state, child );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d16fc8eebc6af4a8ca1d3e1f97cc3f6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "f87b5ed7757c30daca5cf875c95520a00dce2269", "commitAfterChange": "010a31e84477b60ff536725b388b38323540dcca", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private void addElement( final Object object,                              final Method method,                              final Configuration configuration,                              final Context context )         throws ConfigurationException", "signatureAfterChange": "     private void setContent( final ObjectConfigurer configurer,                              final Object object,                              final String content,                              final Context context )         throws ConfigurationException", "diff": ["+     */", "+    private void setContent( final ObjectConfigurer configurer,", "+                             final Object object,", "+                             final String content,", "+                             final Context context )", "+        throws ConfigurationException", "+    {", "+        if( DEBUG )", "+        {", "+            final String message =", "+                REZ.getString( \"configure-content.notice\", content );", "+            getLogger().debug( message );", "+        }", "+        // Set the content", "+        final AttributeSetter setter = configurer.getContentSetter();", "+        if( null == setter )", "+        {", "+            final String message = REZ.getString( \"content-not-supported.error\" );", "+            throw new ConfigurationException( message );", "+        }", "+        try", "+        {", "+            setValue( setter, object, content, context );", "+        }", "+        catch( final Exception e )", "+        {", "+            final String message = REZ.getString( \"bad-set-content.error\" );", "+            throw new ConfigurationException( message, e );", "+        }", "+    }", "-", "-    private void addElement( final Object object,", "-                             final Method method,", "-                             final Configuration configuration,", "-                             final Context context )", "-        throws ConfigurationException", "-    {", "-        try", "-        {", "-            final Class clazz = method.getParameterTypes()[ 0 ];", "-            final Object created = clazz.newInstance();", "-", "-            configure( created, configuration, context );", "-            method.invoke( object, new Object[]{created} );", "-        }", "-        catch( final ConfigurationException ce )", "-        {", "-            throw ce;", "-        }", "-        catch( final Exception e )", "-        {", "-            final String message = REZ.getString( \"subelement-create.error\" );", "-            throw new ConfigurationException( message, e );"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3d9bf90384900776d0ff88e4609b1494", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e925d64ac1677a862dbae326547a5cb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java", "commitBeforeChange": "afd11ba3a874515c715ac3b65fd951123b476855", "commitAfterChange": "7c0bc50a96e8e885beaf8fa150da252efca3eb00", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      protected Commandline setupJavacCommandlineSwitches( Commandline cmd )", "signatureAfterChange": "     protected Commandline setupJavacCommandlineSwitches( Commandline cmd,                                                          boolean useDebugLevel )         throws TaskException", "diff": ["-", "-    protected Commandline setupJavacCommandlineSwitches( Commandline cmd )", "-    {", "-        return setupJavacCommandlineSwitches( cmd, false );", "+        throws TaskException"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cb784e1df8284e9a696c514723df55f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Redirector.java", "commitBeforeChange": "3732eb195b3d24d6480a2d7edb2818b325a3e199", "commitAfterChange": "b0507d4451b72856ddca45183143a96493e8ef3e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 23, "signatureBeforeChange": "     public void createStreams()", "signatureAfterChange": "     public synchronized void createStreams()", "diff": ["-    public void createStreams() {", "-        if (out == null && outputProperty == null) {", "+    public synchronized void createStreams() {", "+        if ((out == null || out.length == 0) && outputProperty == null) {", "-            errorStream = new LogOutputStream(managingTask, Project.MSG_WARN);", "-            if (out != null)  {", "-                outputStream = new LazyFileOutputStream(out, append, true);", "-                managingTask.log(\"Output redirected to \" + out,", "-                                 Project.MSG_VERBOSE);", "+            if (out != null && out.length > 0) {", "+                String logHead = new StringBuffer(\"Output \").append(", "+                    ((append) ? \"appended\" : \"redirected\")).append(", "+                    \" to \").toString();", "+                outputStream = foldFiles(out, logHead, Project.MSG_VERBOSE);", "-                baos = new ByteArrayOutputStream();", "-                managingTask.log(\"Output redirected to property: \"", "-                    + outputProperty, Project.MSG_VERBOSE);", "-                if (out == null) {", "-                    outputStream = baos;", "+                if (baos == null) {", "+                    baos = new PropertyOutputStream(outputProperty);", "+                    managingTask.log(\"Output redirected to property: \"", "+                        + outputProperty, Project.MSG_VERBOSE);", "+                }", "+                //shield it from being closed by a filtering StreamPumper", "+                OutputStream keepAliveOutput = new KeepAliveOutputStream(baos);", "+                if (outputStream == null) {", "+                    outputStream = keepAliveOutput;", "-                    outputStream = new TeeOutputStream(outputStream, baos);", "+                    outputStream", "+                        = new TeeOutputStream(outputStream, keepAliveOutput);", "-        if (logError) {", "-            errorStream = new LogOutputStream(managingTask, Project.MSG_WARN);", "-        }", "+        if (error != null && error.length > 0) {", "+            String logHead = new StringBuffer(\"Error \").append(", "+                ((append) ? \"appended\" : \"redirected\")).append(", "+                \" to \").toString();", "+            errorStream = foldFiles(error, logHead, Project.MSG_VERBOSE);", "-        if (error != null)  {", "-            errorStream = new LazyFileOutputStream(error, append, true);", "-            managingTask.log(\"Error redirected to \" + error,", "-                             Project.MSG_VERBOSE);", "+        } else if (logError || errorStream == null) {", "+            errorStream = new LogOutputStream(managingTask, Project.MSG_WARN);", "+        } else { //must be errorStream == outputStream", "+            long funnelTimeout = 0L;", "+            OutputStreamFunneler funneler", "+                = new OutputStreamFunneler(outputStream, funnelTimeout);", "+            try {", "+                outputStream = funneler.getFunnelInstance();", "+                errorStream = funneler.getFunnelInstance();", "+            } catch (IOException eyeOhEx) {", "+                throw new BuildException(", "+                    \"error splitting output/error streams\", eyeOhEx);", "+            }", "-            errorBaos = new ByteArrayOutputStream();", "-            managingTask.log(\"Error redirected to property: \" + errorProperty,", "-                Project.MSG_VERBOSE);", "-            if (error == null) {", "-                errorStream = errorBaos;", "-            } else {", "-                errorStream = new TeeOutputStream(errorStream, errorBaos);", "+            if (errorBaos == null) {", "+                errorBaos = new PropertyOutputStream(errorProperty);", "+                managingTask.log(\"Error redirected to property: \" + errorProperty,", "+                    Project.MSG_VERBOSE);", "+            //shield it from being closed by a filtering StreamPumper", "+            OutputStream keepAliveError = new KeepAliveOutputStream(errorBaos);", "+            errorStream = (error == null || error.length == 0) ? keepAliveError", "+                : new TeeOutputStream(errorStream, keepAliveError);", "-        if (input != null && inputString != null) {", "-            throw new BuildException(\"The \\\"input\\\" and \\\"inputstring\\\" \"", "-                + \"attributes cannot both be specified\");", "-        }", "-        if (input != null) {", "+        if ((outputFilterChains != null && outputFilterChains.size() > 0)", "+            || !(outputEncoding.equalsIgnoreCase(inputEncoding))) {", "-                inputStream = new FileInputStream(input);", "-            } catch (FileNotFoundException fne) {", "-                throw new BuildException(\"Cannot read from \" + input, fne);", "+                LeadPipeInputStream snk = new LeadPipeInputStream();", "+                snk.setManagingTask(managingTask);", "+    ", "+                InputStream outPumpIn = snk;", "+", "+                Reader reader = new InputStreamReader(outPumpIn, inputEncoding);", "+", "+                if (outputFilterChains != null && outputFilterChains.size() > 0) {", "+                    ChainReaderHelper helper = new ChainReaderHelper();", "+                    helper.setPrimaryReader(reader);", "+                    helper.setFilterChains(outputFilterChains);", "+                    reader = helper.getAssembledReader();", "+                }", "+                outPumpIn = new ReaderInputStream(reader, outputEncoding);", "+", "+                Thread t = new Thread(threadGroup, new StreamPumper(", "+                    outPumpIn, outputStream, true), \"output pumper\");", "+                t.setPriority(Thread.MAX_PRIORITY);", "+                outputStream = new PipedOutputStream(snk);", "+                t.start();", "+            } catch (IOException eyeOhEx) {", "+                throw new BuildException(", "+                    \"error setting up output stream\", eyeOhEx);", "+        }", "+", "+        if ((errorFilterChains != null && errorFilterChains.size() > 0)", "+            || !(errorEncoding.equalsIgnoreCase(inputEncoding))) {", "+            try {", "+                LeadPipeInputStream snk = new LeadPipeInputStream();", "+                snk.setManagingTask(managingTask);", "+    ", "+                InputStream errPumpIn = snk;", "+", "+                Reader reader = new InputStreamReader(errPumpIn, inputEncoding);", "+", "+                if (errorFilterChains != null && errorFilterChains.size() > 0) {", "+                    ChainReaderHelper helper = new ChainReaderHelper();", "+                    helper.setPrimaryReader(reader);", "+                    helper.setFilterChains(errorFilterChains);", "+                    reader = helper.getAssembledReader();", "+                }", "+                errPumpIn = new ReaderInputStream(reader, errorEncoding);", "+", "+                Thread t = new Thread(threadGroup, new StreamPumper(", "+                    errPumpIn, errorStream, true), \"error pumper\");", "+                t.setPriority(Thread.MAX_PRIORITY);", "+                errorStream = new PipedOutputStream(snk);", "+                t.start();", "+            } catch (IOException eyeOhEx) {", "+                throw new BuildException(", "+                    \"error setting up error stream\", eyeOhEx);", "+            }", "+        }", "+", "+        // if input files are specified, inputString is ignored;", "+        // classes that work with redirector attributes can enforce", "+        // whatever warnings are needed", "+        if (input != null && input.length > 0) {", "+            managingTask.log(\"Redirecting input from file\"", "+                + ((input.length == 1) ? \"\" : \"s\"), Project.MSG_VERBOSE);", "+            try {", "+                inputStream = new ConcatFileInputStream(input);", "+            } catch (IOException eyeOhEx) {", "+                throw new BuildException(eyeOhEx);", "+            }", "+            ((ConcatFileInputStream)inputStream).setManagingTask(managingTask);", "+            managingTask.log(\"Using input \\\"\" + inputString + \"\\\"\",", "+                Project.MSG_VERBOSE);", "-    }", "+        if (inputStream != null", "+            && inputFilterChains != null && inputFilterChains.size() > 0) {", "+            ChainReaderHelper helper = new ChainReaderHelper();", "+            try {", "+                helper.setPrimaryReader(", "+                    new InputStreamReader(inputStream, inputEncoding));", "+            } catch (IOException eyeOhEx) {", "+                throw new BuildException(", "+                    \"error setting up input stream\", eyeOhEx);", "+            }", "+            helper.setFilterChains(inputFilterChains);", "+            inputStream = new ReaderInputStream(", "+                helper.getAssembledReader(), inputEncoding);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c03192cc8c576410fde30b77c6813994", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java", "commitBeforeChange": "afd11ba3a874515c715ac3b65fd951123b476855", "commitAfterChange": "7c0bc50a96e8e885beaf8fa150da252efca3eb00", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      protected Commandline setupJavacCommandlineSwitches( Commandline cmd )", "signatureAfterChange": "     protected Commandline setupJavacCommandlineSwitches( Commandline cmd,                                                          boolean useDebugLevel )         throws TaskException", "diff": ["-", "-    protected Commandline setupJavacCommandlineSwitches( Commandline cmd )", "-    {", "-        return setupJavacCommandlineSwitches( cmd, false );", "+        throws TaskException"]}]}
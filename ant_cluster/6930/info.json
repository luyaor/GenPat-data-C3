{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "25889411b7c347a7dfd8b1004eee0186", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "206db15a2f991fd737f48745442bd405", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      private static boolean containsTests(Class<?> testClass, boolean isJUnit4)", "signatureAfterChange": "      private static boolean containsTests(final Class<?> testClass, final boolean isJUnit4)", "diff": ["-    private static boolean containsTests(Class<?> testClass, boolean isJUnit4) {", "+    private static boolean containsTests(final Class<?> testClass, final boolean isJUnit4) {", "-        } catch (ClassNotFoundException e) {", "+        } catch (final ClassNotFoundException e) {", "-        } catch(ClassNotFoundException ex) {", "+        } catch(final ClassNotFoundException ex) {", "-        } catch(ClassNotFoundException ex) {", "+        } catch(final ClassNotFoundException ex) {", "-        for (Class<?> innerClass : testClass.getDeclaredClasses()) {", "+        for (final Class<?> innerClass : testClass.getDeclaredClasses()) {", "-        for (Method m : testClass.getMethods()) {", "+        for (final Method m : testClass.getMethods()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca280e2cecdd25eeed013b9d43ad91b9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": "     private boolean causesIllegalSymlinkLoop(String dirName, File parent,                                              LinkedList<String> directoryNamesFollowed)", "signatureAfterChange": "     private boolean causesIllegalSymlinkLoop(final String dirName, final File parent,                                              final LinkedList<String> directoryNamesFollowed)", "diff": ["-    private boolean causesIllegalSymlinkLoop(String dirName, File parent,", "-                                             LinkedList<String> directoryNamesFollowed) {", "+    private boolean causesIllegalSymlinkLoop(final String dirName, final File parent,", "+                                             final LinkedList<String> directoryNamesFollowed) {", "-                ArrayList<String> files = new ArrayList<String>();", "+                final ArrayList<String> files = new ArrayList<String>();", "-                String target = f.getCanonicalPath();", "+                final String target = f.getCanonicalPath();", "-                for (String dir : directoryNamesFollowed) {", "+                for (final String dir : directoryNamesFollowed) {", "-        } catch (IOException ex) {", "+        } catch (final IOException ex) {"]}]}
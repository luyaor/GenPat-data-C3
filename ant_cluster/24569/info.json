{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a2f9dfe45bd6276463f9a7a9aa45056c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0701fd7ab8b010786c421ea525422737", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/SubAntTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void testgenericantfile()", "signatureAfterChange": "     @Test     public void testgenericantfile()", "diff": ["+    @Test", "-        File dir1 = project.resolveFile(\".\");", "-        File dir2 = project.resolveFile(\"subant/subant-test1\");", "-        File dir3 = project.resolveFile(\"subant/subant-test2\");", "+        File dir1 = buildRule.getProject().resolveFile(\".\");", "+        File dir2 = buildRule.getProject().resolveFile(\"subant/subant-test1\");", "+        File dir3 = buildRule.getProject().resolveFile(\"subant/subant-test2\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ee51d494668264906f3f4327e43d0a9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/AntTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 22, "signatureBeforeChange": "      public void testRefId()", "signatureAfterChange": "      @Test     public void testRefId()", "diff": ["+    @Test", "-        Path testPath = new Path(project);", "+        Path testPath = new Path(buildRule.getProject());", "-        project.addBuildListener(pc);", "-        executeTarget(\"testRefid\");", "+        buildRule.getProject().addBuildListener(pc);", "+        buildRule.executeTarget(\"testRefid\");", "-        project.removeBuildListener(pc);", "+        buildRule.getProject().removeBuildListener(pc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69ff55b452957a77fe6c8f94d29a8cb7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/RecorderTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void testSubBuild() throws IOException", "signatureAfterChange": "      @Test     public void testSubBuild() throws IOException", "diff": ["+    @Test", "-        executeTarget(\"subbuild\");", "+        buildRule.executeTarget(\"subbuild\");", "-                   .contentEquals(project.resolveFile(REC_IN", "+                   .contentEquals(buildRule.getProject().resolveFile(REC_IN", "-                           new File(getOutputDir(), \"rectest5.log\"), true));", "+                           new File(buildRule.getOutputDir(), \"rectest5.log\"), true));", "-                   .contentEquals(project.resolveFile(REC_IN", "+                   .contentEquals(buildRule.getProject().resolveFile(REC_IN", "-                           new File(getOutputDir(), \"rectest6.log\"), true));", "-                                                      ", "+                           new File(buildRule.getOutputDir(), \"rectest6.log\"), true));", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a60b600a15fe76a6aa357a01b353a01", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/AntTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": "      public void testReferenceNoInheritance()", "signatureAfterChange": "      @Test     public void testReferenceNoInheritance()", "diff": ["+    @Test", "-        p.setProject(project);", "-        project.addReference(\"path\", p);", "-        project.addReference(\"no-override\", p);", "+        p.setProject(buildRule.getProject());", "+        buildRule.getProject().addReference(\"path\", p);", "+        buildRule.getProject().addReference(\"no-override\", p);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81eecca78c7d6392ad2222b394b374d4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/SubAntTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testantfile()", "signatureAfterChange": "      @Test     public void testantfile()", "diff": ["+    @Test", "-        File dir1 = project.resolveFile(\".\");", "+        File dir1 = buildRule.getProject().resolveFile(\".\");", "-        File dir2 = project.resolveFile(\"subant/subant-test1\");", "+        File dir2 = buildRule.getProject().resolveFile(\"subant/subant-test1\");", "-        File dir3 = project.resolveFile(\"subant\");", "+        File dir3 = buildRule.getProject().resolveFile(\"subant\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86bbe1916dda6a20281ea8794d252c80", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/AntClassLoaderTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void testCleanup() throws BuildException", "signatureAfterChange": "          @Test     public void testCleanup() throws BuildException", "diff": ["+    ", "+    @Test", "-        Path path = new Path(project, \".\");", "-        loader = project.createClassLoader(path);", "+        Path path = new Path(buildRule.getProject(), \".\");", "+        loader = buildRule.getProject().createClassLoader(path);", "-        project.fireBuildFinished(null);", "+        buildRule.getProject().fireBuildFinished(null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f328aa345bd20e20ed4ccaa4d7c8d14", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/JavaTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 28, "signatureBeforeChange": "      public void testFlushedInput() throws Exception", "signatureAfterChange": "      @Test     public void testFlushedInput() throws Exception", "diff": ["+    @Test", "-        project.setInputHandler(new DefaultInputHandler() {", "+        buildRule.getProject().setInputHandler(new DefaultInputHandler() {", "-        project.setDefaultInputStream(in);", "+        buildRule.getProject().setDefaultInputStream(in);", "-                    // don't care", "+                    throw new AssumptionViolatedException(\"Thread interrupted\", e);", "-        executeTarget(\"flushedInput\");", "+        buildRule.executeTarget(\"flushedInput\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "daa775db6fba323e70fae4ad4552999d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/AntTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 15, "signatureBeforeChange": "      public void testReferenceInheritance()", "signatureAfterChange": "      @Test     public void testReferenceInheritance()", "diff": ["+    @Test", "-        p.setProject(project);", "-        project.addReference(\"path\", p);", "-        project.addReference(\"no-override\", p);", "+        p.setProject(buildRule.getProject());", "+        buildRule.getProject().addReference(\"path\", p);", "+        buildRule.getProject().addReference(\"no-override\", p);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea9d3eba3ad8aa7bb8cdcb2ed70759f3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/PropertyTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": "          public void testXmlProperty()", "signatureAfterChange": "          @Test     public void testXmlProperty()", "diff": ["+    @Test", "-            executeTarget(\"testXmlProperty\");", "-            assertEquals(\"ONE\", project.getProperty(\"xml.one\"));", "-            assertEquals(\"TWO\", project.getProperty(\"xml.two\"));", "-            // Xml-Loading only on Java5+", "+        \tAssume.assumeNoException(\"XML Loading only on Java 5+\", e);", "+        buildRule.executeTarget(\"testXmlProperty\");", "+        assertEquals(\"ONE\", buildRule.getProject().getProperty(\"xml.one\"));", "+        assertEquals(\"TWO\", buildRule.getProject().getProperty(\"xml.two\"));", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa218a3ad0498a43a3405d62fc7073f8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/ReplaceRegExpTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testReplace() throws IOException", "signatureAfterChange": "      @Test     public void testReplace() throws IOException", "diff": ["+    @Test", "-            propsFile = new FileInputStream(new File(project.getBaseDir() + \"/replaceregexp.properties\"));", "+            propsFile = new FileInputStream(new File(buildRule.getProject().getBaseDir() + \"/replaceregexp.properties\"));", "-        executeTarget(\"testReplace\");", "+        buildRule.executeTarget(\"testReplace\");", "-            propsFile = new FileInputStream(new File(getOutputDir(), \"test.properties\"));", "+            propsFile = new FileInputStream(new File(buildRule.getOutputDir(), \"test.properties\"));", "-                propsFile = null;"]}]}
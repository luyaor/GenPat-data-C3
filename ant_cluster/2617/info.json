{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0aa1e07f65af81133a0203e828d2b620", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3401f87d5ed65da9af327f9b53515ae8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/ide/VAJExport.java", "commitBeforeChange": "ecabb608919ac02deaa8150bb06fccd9f0e62d4f", "commitAfterChange": "0c7462a17f34651ebc644b89810827a024d0a53f", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void execute()         throws TaskException", "signatureAfterChange": "     public void execute()         throws TaskException", "diff": ["+        final TaskContext context = getContext();", "+        final TaskContext context1 = getContext();", "-                                  patternSet.getIncludePatterns( getContext() ),", "-                                  patternSet.getExcludePatterns( getContext() ),", "+                                  PatternUtil.getIncludePatterns( patternSet, context ),", "+                                  PatternUtil.getExcludePatterns( patternSet, context1 ),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bf324e86c43b850b8db498fd8fcfef5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/ide/VAJExport.java", "commitBeforeChange": "ecabb608919ac02deaa8150bb06fccd9f0e62d4f", "commitAfterChange": "0c7462a17f34651ebc644b89810827a024d0a53f", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void execute()         throws TaskException", "signatureAfterChange": "     public void execute()         throws TaskException", "diff": ["+        final TaskContext context = getContext();", "+        final TaskContext context1 = getContext();", "-                                  patternSet.getIncludePatterns( getContext() ),", "-                                  patternSet.getExcludePatterns( getContext() ),", "+                                  PatternUtil.getIncludePatterns( patternSet, context ),", "+                                  PatternUtil.getExcludePatterns( patternSet, context1 ),"]}]}
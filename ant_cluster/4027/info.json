{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dde3abbb92edd2bb35e9d33c325045bd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f12778c2b99e105d2438d7fd53ef6d1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/antlib/AntLibManager.java", "commitBeforeChange": "ec9816997d704ba18f8209a3b8330275e5a61325", "commitAfterChange": "30b81779b563d12a1e28bebf934d5a5626da57ce", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void configLibrary(InitConfig initConfig, Map librarySpecs,                                String libraryId,                                CircularDependencyChecker configuring,                                Map libraries)          throws ExecutionException", "signatureAfterChange": "     private void configLibrary(InitConfig initConfig, Map librarySpecs,                                String libraryId,                                CircularDependencyChecker configuring,                                Map libraries, Map libPathsMap)          throws ExecutionException", "diff": ["-                               Map libraries)", "+                               Map libraries, Map libPathsMap)", "-                        configuring, libraries);", "+                        configuring, libraries, libPathsMap);", "-            URL[] parserURLs = initConfig.getParserURLs();", "+                URL[] parserURLs = initConfig.getParserURLs();", "+", "+            List libPaths = (List)libPathsMap.get(libraryId);", "+            if (libPaths != null) {", "+                for (Iterator j = libPaths.iterator(); j.hasNext(); ) {", "+                    URL pathURL = (URL)j.next();", "+                    addLibPath(antLibrary, pathURL);", "+                }", "+            }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbd64a3933783ed2e2d1fb308153ff58", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/helper/ProjectHelper2.java", "commitBeforeChange": "eed11060d56db6336cccec940722e8e972e110ed", "commitAfterChange": "f15fb7639cb643c876f15a87659cf4a068689a33", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void parse(Project project, Object source)             throws BuildException", "signatureAfterChange": "      public void parse(Project project, Object source)             throws BuildException", "diff": ["-        AntXmlContext context=new AntXmlContext(project, this);", "-        ", "-        project.addReference( \"ant.parsing.context\", context );", "-        project.addReference( \"ant.targets\", context.targetVector );", "+        this.getImportStack().addElement(source);", "+        AntXmlContext context=null;", "+        context=(AntXmlContext)project.getReference(\"ant.parsing.context\");", "+//        System.out.println(\"Parsing \" + getImportStack().size() + \" \" +", "+//                context+ \" \" + getImportStack() );", "+        if( context==null ) {", "+            context=new AntXmlContext(project, this);", "+            project.addReference( \"ant.parsing.context\", context );", "+            project.addReference( \"ant.targets\", context.targetVector );", "+        }", "-        parse(project, source,new RootHandler(context));", "-", "-        // Execute the top-level target", "-        context.implicitTarget.execute();", "+        if( this.getImportStack().size() > 1 ) {", "+            // we are in an imported file.", "+            context.ignoreProjectTag=true;", "+            parse(project, source, new RootHandler(context));", "+        } else {", "+            // top level file", "+            parse(project, source,new RootHandler(context));", "+            // Execute the top-level target", "+            context.implicitTarget.execute();", "+        }"]}]}
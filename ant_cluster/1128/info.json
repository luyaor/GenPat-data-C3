{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e299bfa9db86dd08abc004891b4f0e31", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11931ce4c43b9613d472fd69eba5a1e8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/PathConvert.java", "commitBeforeChange": "e3909b82b15ff754f687e14798725f504f37adfe", "commitAfterChange": "e98e1462b5a05048e3336b230901ea885977f339", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        // If we are a reference, the create a Path from the reference", "+        // If we are a reference, create a Path from the reference", "+            } else if( obj instanceof DirSet ) {", "+                DirSet ds = (DirSet)obj;", "+                path.addDirset( ds );", "+            } else if( obj instanceof FileList ) {", "+                FileList fl = (FileList)obj;", "+                path.addFilelist( fl );", "+                ", "-                throw new BuildException( \"'refid' does not refer to a path or fileset\" );", "+                throw new BuildException( \"'refid' does not refer to a path, fileset, dirset, or filelist.\" );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b48fc1e094cd9b1cc4c01bdd6d00fe1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Project.java", "commitBeforeChange": "fc7e960e14d08b836f9816357297c3f56e421e8b", "commitAfterChange": "c9ee19786b722aebf77cc88cfbe984e145f179a2", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "     public void executeTargets(Vector targetNames) throws BuildException", "signatureAfterChange": "     public void executeTargets(Vector targetNames) throws BuildException", "diff": ["+        BuildException thrownException = null;", "-            executeTarget((String) targetNames.elementAt(i));", "+            try {", "+                executeTarget((String) targetNames.elementAt(i));", "+            } catch (BuildException ex) {", "+                if (!(keepGoingMode)) {", "+                    throw ex; // Throw further", "+                }", "+                thrownException = ex;", "+            }", "+        }", "+        if (thrownException != null) {", "+            throw thrownException;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3777c5c993d729efbbf9f69d58e62000", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/helper/DefaultExecutor.java", "commitBeforeChange": "faba017869b796b137c9147c00a00cd11dd94f1e", "commitAfterChange": "2c68e6ab607fa6a70e414eee76d56afe00c29c31", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void executeTargets(Project project, String[] targetNames)         throws BuildException", "signatureAfterChange": "     public void executeTargets(Project project, String[] targetNames)         throws BuildException", "diff": ["+        BuildException thrownException = null;", "-            project.executeTarget(targetNames[i]);", "+            try {", "+                project.executeTarget(targetNames[i]);", "+            } catch (BuildException ex) {", "+                if (project.isKeepGoingMode()) {", "+                    thrownException = ex;", "+                } else {", "+                    throw ex;", "+                }", "+            }", "+        if (thrownException != null) {", "+            throw thrownException;", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3adf402fa0a4d55a262572bca3760f36", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/ZipFileSet.java", "commitBeforeChange": "23db4b2dbc59274284cd07fae846f43fa4faba93", "commitAfterChange": "33c2653138032f6190b57e53e4e2512ee1938c55", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public String getEncoding()", "signatureAfterChange": "     public String getEncoding()", "diff": ["+        if (isReference()) {", "+            AbstractFileSet ref = getRef(getProject());", "+            if (ref instanceof ZipFileSet) {", "+                return ((ZipFileSet) ref).getEncoding();", "+            } else {", "+                return null;", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56ddb2961e3e23842fb1abff26b0179c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "07119705a3be7e0bcf6145d4de1dfd58b42b3734", "commitAfterChange": "abf343291206f3cab8b3436214cc0a88efefcb25", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public Object createElement(Project project, Object parent,         String elementName) throws BuildException", "signatureAfterChange": "     public Object createElement(Project project, Object parent,         String elementName) throws BuildException", "diff": ["+        if (nc == null && addTypeMethods.size() > 0) {", "+            Object nestedElement = createAddTypeElement(", "+                project, parent, elementName);", "+            if (nestedElement != null) {", "+                if (project != null) {", "+                    project.setProjectReference(nestedElement);", "+                }", "+                return nestedElement;", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67ac9791737d175bb51b3e212a242178", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Property.java", "commitBeforeChange": "79903e422d3becd0638be21b7fae4b0b3326ba4f", "commitAfterChange": "3f2688a0edbb0994a6b274971a0d75e55ef5d20f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 11, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["+            if ((name != null) && (ref != null)) {", "+                Object obj = ref.getReferencedObject(getProject());", "+                if (obj != null) {", "+                    addProperty(name, obj.toString());", "+                }", "+            }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73de1ef3e1ebed33ef6096399120a5fa", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "02a2cffe8f27603fdd8c7c83cc415170496a6fe1", "commitAfterChange": "9c6515959f5bf9016b0dd8c12691e1e7549b2dd0", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private PropertyConfigurer getConfigurerFromName( final ObjectConfigurer configurer,                                                       final String name,                                                       boolean ignoreRoleName )         throws Exception", "signatureAfterChange": "     private PropertyConfigurer getConfigurerFromName( final ObjectConfigurer configurer,                                                       final String name,                                                       boolean ignoreRoleName,                                                       final boolean isAdder )         throws Exception", "diff": ["-                                                      boolean ignoreRoleName )", "+                                                      boolean ignoreRoleName,", "+                                                      final boolean isAdder )", "-        PropertyConfigurer propertyConfigurer = configurer.getProperty( name );", "-        if( propertyConfigurer != null )", "+        if( !isAdder )", "-            return propertyConfigurer;", "-        }", "-", "-        // Try a typed property", "-        propertyConfigurer = configurer.getTypedProperty();", "-        if( propertyConfigurer != null )", "-        {", "-            if( ignoreRoleName )", "+            PropertyConfigurer propertyConfigurer = configurer.getSetter( name );", "+            if( propertyConfigurer != null )", "-            else", "+        }", "+        else", "+        {", "+            PropertyConfigurer propertyConfigurer = configurer.getAdder( name );", "+            if( propertyConfigurer != null )", "-                // Check the role name", "-                final RoleInfo roleInfo = m_roleManager.getRoleByType( propertyConfigurer.getType() );", "-                if( roleInfo != null && name.equalsIgnoreCase( roleInfo.getShorthand() ) )", "+                return propertyConfigurer;", "+            }", "+", "+            // Try a typed property", "+            propertyConfigurer = configurer.getTypedProperty();", "+            if( propertyConfigurer != null )", "+            {", "+                if( ignoreRoleName )", "+                else", "+                {", "+                    // Check the role name", "+                    final RoleInfo roleInfo = m_roleManager.getRoleByType( propertyConfigurer.getType() );", "+                    if( roleInfo != null && name.equalsIgnoreCase( roleInfo.getShorthand() ) )", "+                    {", "+                        return propertyConfigurer;", "+                    }", "+                }", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89ab366ab8787a2a0431c28cd7d09692", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "7aaf095c51dcb4b22dd8a7aec2a63676a73ad8e0", "commitAfterChange": "6d54725ac9d2fc606d5b4d8ec6574b648399f68d", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public Object createElement(Project project, Object parent,          String elementName) throws BuildException", "signatureAfterChange": "     public Object createElement(Project project, Object parent,          String elementName) throws BuildException", "diff": ["+        if (nc == null && parent instanceof DynamicConfigurator) {", "+            DynamicConfigurator dc = (DynamicConfigurator) parent;", "+            Object nestedElement = dc.createDynamicElement(elementName);", "+            if (nestedElement != null) {", "+                if (nestedElement instanceof ProjectComponent) {", "+                    ((ProjectComponent) nestedElement).setProject(project);", "+                }", "+                return nestedElement;", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ffd7d94760c01258c89716812a883b1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "63363f91c8fc49f6b46adefab32b1f50c0c7c3ce", "commitAfterChange": "e7e63a0e7a7cb40a720e48b3a7477d3d3bbd94d1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["+", "+            // delete a bogus ZIP file", "+\t    if (zOut != null) {", "+\t        try {", "+\t            zOut.close();", "+                    zOut = null;", "+\t        } catch (IOException e) {}", "+                if (!zipFile.delete()) {", "+                    msg = zipFile + \" is probably corrupt but I could not delete it\";", "+                }", "+            }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98fe137688c8a47ca9d943d4d9dbdbb9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SubAnt.java", "commitBeforeChange": "84bb508794b3d1fad60ad8b3b835b942310eb86d", "commitAfterChange": "ea42c65bec22316c5ba3c3096b8346e4a7eed6b8", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private Ant createAntTask()", "signatureAfterChange": "     private Ant createAntTask(File directory)", "diff": ["-    private Ant createAntTask() {", "+    private Ant createAntTask(File directory) {", "-        if(target.length()>0) {", "+        if(target != null && target.length()>0) {", "+        }", "+", "+", "+        if (output != null) {", "+            ant.setOutput(output);", "+        }", "+", "+        if (directory != null) {", "+            ant.setDir(directory);", "-        ", "+", "-        ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a066e871fb0ea0932784b6667d409e3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/launch/Locator.java", "commitBeforeChange": "50333ecba9313e1b0b85368279daf50e5b7db649", "commitAfterChange": "74fb3d870dc2bb95466ba7672eb63ff3d106ad96", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public static String decodeUri(String uri) throws UnsupportedEncodingException", "signatureAfterChange": "     public static String decodeUri(String uri) throws UnsupportedEncodingException", "diff": ["-            } else {", "+            } else if (c >= 0x0000 && c < 0x0080) {", "+            } else { // #50543", "+                byte[] bytes = String.valueOf(c).getBytes(URI_ENCODING);", "+                sb.write(bytes, 0, bytes.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b83a0edb7f7538aa8d36b532374cf9fa", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "dbecca155c71b3db823e8b6b9998503a4c42077d", "commitAfterChange": "9bc78e6c258fbc9ff142f959d67730b990f4834f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public Object createElement(Object element, String elementName)          throws BuildException", "signatureAfterChange": "     public Object createElement(Object element, String elementName)          throws BuildException", "diff": ["-        if (nc == null) {", "-            String msg = \"Class \" + element.getClass().getName() +", "-                \" doesn't support the nested \\\"\" + elementName + \"\\\" element\";", "-            throw new BuildException(msg);", "-        }", "-            return nc.create(element);", "+            if (nc == null) {", "+                Object nestedElement = null;", "+                if (elementFactoryMethod != null) {", "+                    nestedElement ", "+                        = elementFactoryMethod.invoke(element, new Object[] {elementName});", "+                }", "+                if (nestedElement == null) {", "+                    String msg = \"Class \" + element.getClass().getName() +", "+                        \" doesn't support the nested \\\"\" + elementName + \"\\\" element\";", "+                    throw new BuildException(msg);", "+                }", "+                return nestedElement;", "+            }", "+            else {", "+                return nc.create(element);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd64cb697ad923a6051b540d45d6a7fc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/antlib/src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "6540a295cd786c80c28c14f6c544aa1d64ab3778", "commitAfterChange": "5cdfabc038e26f67080037ea0c7ad6ab284d821c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public Object createElement(Project project, Object element, String elementName)         throws BuildException", "signatureAfterChange": "     public Object createElement(Project project, Object parent,          String elementName) throws BuildException", "diff": ["-    public Object createElement(Project project, Object element, String elementName)", "-        throws BuildException {", "-\t", "+    public Object createElement(Project project, Object parent, ", "+        String elementName) throws BuildException {", "+        NestedCreator nc = (NestedCreator) nestedCreators.get(elementName);", "+        if (nc == null && parent instanceof DynamicConfigurator) {", "+            DynamicConfigurator dc = (DynamicConfigurator) parent;", "+            Object nestedElement = dc.createDynamicElement(elementName);", "+            if (nestedElement != null) {", "+                if (nestedElement instanceof ProjectComponent) {", "+                    ((ProjectComponent) nestedElement).setProject(project);", "+                }", "+                return nestedElement;", "+            }", "+        }", "+        if (nc == null) {", "+            String msg = project.getElementName(parent) +", "+                \" doesn't support the nested \\\"\" + elementName + \"\\\" element.\";", "+            throw new BuildException(msg);", "+        }", "-\t    // First check if there are any roles supported by this class", "-\t    Object nestedElement = project.createInRole(element, elementName);", "-\t    if (nestedElement == null) {", "-\t\tNestedCreator nc = ", "-\t\t    (NestedCreator) nestedCreators.get(elementName);", "-\t\tif (nc == null) {", "-\t\t    String msg = getElementName(project, element) +", "-\t\t\t\" doesn't support the nested \\\"\" + elementName + ", "-\t\t\t\"\\\" element.\";", "-\t\t    throw new BuildException(msg);", "-\t\t}", "-\t\tnestedElement = nc.create(element);", "-\t    }", "+            Object nestedElement = nc.create(parent);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eea37e82a404335863ebc65acf0e0ec9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/splash/SplashScreen.java", "commitBeforeChange": "c8232ed82c53175729e226f4bc2dd464136a1e1b", "commitAfterChange": "a1003b0b8e5e18840b648d7da746efe92b093f74", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 5, "signatureBeforeChange": "      protected void init(ImageIcon img)", "signatureAfterChange": "      protected void init(ImageIcon img, String progressRegExp,                         String displayText)", "diff": ["+", "+    protected void init(ImageIcon img, String progressRegExp,", "+                        String displayText) {", "+        if (progressRegExp != null) {", "+            progressRegExpPattern = Pattern.compile(progressRegExp);", "+        }", "-        text = new JLabel(\"Building....\", JLabel.CENTER);", "+        if (displayText == null) {", "+            displayText = \"Building....\";", "+        }", "+        text = new JLabel(displayText, JLabel.CENTER);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc1c1878a05f0895974ee5ed94ad5e71", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/property/ResolvePropertyMap.java", "commitBeforeChange": "9ce605cca7a222eb605121e5921409353b2d0d6e", "commitAfterChange": "9caa9ff4403ffbe97b9eae43d7cd79003319535b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public Object getProperty(String name)", "signatureAfterChange": "     public Object getProperty(String name)", "diff": ["+", "+        // if the property has already been set to the name it will", "+        // have in the end, then return the existing value to ensure", "+        // properties remain immutable", "+        String masterPropertyName = name;", "+        if (prefix != null) {", "+            masterPropertyName = prefix + name;", "+        }", "+        Object masterProperty = master.getProperty(masterPropertyName);", "+        if (masterProperty != null) {", "+            return masterProperty;", "+        }", "+"]}]}
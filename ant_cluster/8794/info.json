{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac67407605bf9b938bbc7eac8e6ddf72", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41de62943f01b4bcddf0e5a7d50162c6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/BatchTest.java", "commitBeforeChange": "e9117208e20934276266169c6b434a102371883e", "commitAfterChange": "c30a74289ebfd6c0f714cb63bc952a6340b5fca6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "          private FileList()", "signatureAfterChange": "     private String[] getFilenames()", "diff": ["-", "-        private FileList(){", "-            Vector v = new Vector();", "-            for (int j=0; j<filesets.size(); j++) {", "-                FileSet fs = (FileSet) filesets.elementAt(j);", "-                DirectoryScanner ds = fs.getDirectoryScanner(project);", "-                ds.scan();", "-                String[] f = ds.getIncludedFiles();", "-                for (int k=0; k<f.length; k++) {", "-                    if (f[k].endsWith(\".java\")) {", "-                        v.addElement(f[k].substring(0, f[k].length()-5));", "-                    } else if (f[k].endsWith(\".class\")) {", "-                        v.addElement(f[k].substring(0, f[k].length()-6));", "-                    }", "-                }", "-            }", "-", "-            files = new String[v.size()];", "-            v.copyInto(files);", "-        }", "+     */", "+    private String[] getFilenames(){", "+        Vector v = new Vector();", "+        final int size = this.filesets.size();", "+        for (int j=0; j<size; j++) {", "+            FileSet fs = (FileSet) filesets.elementAt(j);", "+            DirectoryScanner ds = fs.getDirectoryScanner(project);", "+            ds.scan();", "+            String[] f = ds.getIncludedFiles();", "+            for (int k = 0; k < f.length; k++) {", "+                String pathname = f[k];", "+                if (pathname.endsWith(\".java\")) {", "+                    v.addElement(pathname.substring(0, pathname.length()-\".java\".length()));", "+                } else if (pathname.endsWith(\".class\")) {", "+                    v.addElement(pathname.substring(0, pathname.length()-\".class\".length()));", "+                }", "+            }", "+        }", "+", "+        String[] files = new String[v.size()];", "+        v.copyInto(files);", "+        return files;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9719e970597ac9adbb505046ae9e65d5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Checksum.java", "commitBeforeChange": "7c24f9164c6c8c840010e49f7780f9158b2e2e46", "commitAfterChange": "222693b10f20a17af93ca107ba09dc2a679ab5cd", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private boolean validateAndExecute() throws BuildException", "signatureAfterChange": "     private boolean validateAndExecute() throws BuildException", "diff": ["+        String savedFileExt = fileext;", "-        if (fileext == null) {", "-            fileext = \".\" + algorithm;", "-        } else if (fileext.trim().length() == 0) {", "-            throw new BuildException(", "-                \"File extension when specified must not be an empty string\");", "-        }", "-", "-        addToIncludeFileMap(file);", "-", "-        int sizeofFileSet = filesets.size();", "-        for (int i = 0; i < sizeofFileSet; i++) {", "-            FileSet fs = (FileSet) filesets.elementAt(i);", "-            DirectoryScanner ds = fs.getDirectoryScanner(project);", "-            String[] srcFiles = ds.getIncludedFiles();", "-            for (int j = 0; j < srcFiles.length; j++) {", "-                File src = new File(fs.getDir(project), srcFiles[j]);", "-                addToIncludeFileMap(src);", "-            }", "+        if (fileext == null) {", "+            fileext = \".\" + algorithm;", "+        } else if (fileext.trim().length() == 0) {", "+            throw new BuildException(", "+                \"File extension when specified must not be an empty string\");", "-        return generateChecksums();", "+        try {", "+            addToIncludeFileMap(file);", "+            ", "+            int sizeofFileSet = filesets.size();", "+            for (int i = 0; i < sizeofFileSet; i++) {", "+                FileSet fs = (FileSet) filesets.elementAt(i);", "+                DirectoryScanner ds = fs.getDirectoryScanner(project);", "+                String[] srcFiles = ds.getIncludedFiles();", "+                for (int j = 0; j < srcFiles.length; j++) {", "+                    File src = new File(fs.getDir(project), srcFiles[j]);", "+                    addToIncludeFileMap(src);", "+                }", "+            }", "+", "+            return generateChecksums();", "+        } finally {", "+            fileext = savedFileExt;", "+            includeFileMap.clear();", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c72ecb1db59b1358d52aaebe10687fbf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/Path.java", "commitBeforeChange": "20dede5ad87cf903e9be1a39d67312d7f39dfcd0", "commitAfterChange": "a8d4fe6d9b8c7a4adb1704b12de610dc6e18fe94", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public String[] list()", "signatureAfterChange": "     public String[] list()", "diff": ["-        final String[] result = new String[definition.size()];", "-        definition.copyInto(result);", "-        return result;", "+        Vector result = new Vector(2*elements.size());", "+        for (int i=0; i<elements.size(); i++) {", "+            Object o = elements.elementAt(i);", "+            if (o instanceof Reference) {", "+                Reference r = (Reference) o;", "+                o = r.getReferencedObject(project);", "+                // we only support references to filesets right now", "+                if (o == null || !(o instanceof FileSet)) {", "+                    String msg = r.getRefId()+\" doesn\\'t denote a fileset\";", "+                    throw new BuildException(msg);", "+                }", "+            }", "+            ", "+            if (o instanceof String) {", "+                // obtained via append", "+                addUnlessPresent(result, (String) o);", "+            } else if (o instanceof PathElement) {", "+                String[] parts = ((PathElement) o).getParts();", "+                if (parts == null) {", "+                    throw new BuildException(\"You must either set location or path on <pathelement>\");", "+                }", "+                for (int j=0; j<parts.length; j++) {", "+                    addUnlessPresent(result, parts[j]);", "+                }", "+            } else if (o instanceof FileSet) {", "+                FileSet fs = (FileSet) o;", "+                DirectoryScanner ds = fs.getDirectoryScanner(project);", "+                String[] s = ds.getIncludedFiles();", "+                File dir = fs.getDir();", "+                for (int j=0; j<s.length; j++) {", "+                    addUnlessPresent(result, ", "+                                     translateFile((new File(dir, s[j])).getAbsolutePath()));", "+                }", "+            }", "+        }", "+        String[] res = new String[result.size()];", "+        result.copyInto(res);", "+        return res;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bcdb77403c2f0dde117973e2457d2404", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d48bc5731a775a37b0d8d6b7b3abbcb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/CollectionUtils.java", "commitBeforeChange": "d25488cbbb28cf25e1f91f714c70999fd105432d", "commitAfterChange": "3d706ab8188a674936880b6f4530b0cf3991758b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public static void putAll(Dictionary m1, Dictionary m2)", "signatureAfterChange": "     public static <K, V> void putAll(Dictionary<? super K, ? super V> m1, Dictionary<? extends K, ? extends V> m2)", "diff": ["-    public static void putAll(Dictionary m1, Dictionary m2) {", "-        for (Enumeration it = m2.keys(); it.hasMoreElements();) {", "-            Object key = it.nextElement();", "+    public static <K, V> void putAll(Dictionary<? super K, ? super V> m1, Dictionary<? extends K, ? extends V> m2) {", "+        for (Enumeration<? extends K> it = m2.keys(); it.hasMoreElements();) {", "+            K key = it.nextElement();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3720fe6ca6ca6d96fcade6e27cc8983", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/util/ChainReaderHelper.java", "commitBeforeChange": "bb05312e66a2403d2405988dbaf0830cde65df7c", "commitAfterChange": "da5f3bfd256e383926c6ece58dba15a7d4bd5761", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private static void cleanUpClassLoaders(List loaders)", "signatureAfterChange": "     private static void cleanUpClassLoaders(List<AntClassLoader> loaders)", "diff": ["-    private static void cleanUpClassLoaders(List/*<AntClassLoader>*/ loaders) {", "-        for (Iterator it = loaders.iterator(); it.hasNext(); ) {", "-            ((AntClassLoader) it.next()).cleanup();", "+    private static void cleanUpClassLoaders(List<AntClassLoader> loaders) {", "+        for (Iterator<AntClassLoader> it = loaders.iterator(); it.hasNext(); ) {", "+            it.next().cleanup();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d18e2b58f095175fae6d9dba3a8fa020", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79974f8d9bc33e556ed1b0e0eb630c83", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "2c4faa154f069f3f69d6c3c95629409a7b8b0cc4", "commitAfterChange": "8b58203e3120ecbeb7c53ce127fb41316f7eea92", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 67, "signatureBeforeChange": "     private TokenizedPattern[] fillNonPatternSet(Set set, String[] patterns)", "signatureAfterChange": "     private TokenizedPattern[] fillNonPatternSet(Map map, String[] patterns)", "diff": ["-    private TokenizedPattern[] fillNonPatternSet(Set set, String[] patterns) {", "+    private TokenizedPattern[] fillNonPatternSet(Map map, String[] patterns) {", "-                set.add(isCaseSensitive() ? patterns[i]", "-                    : patterns[i].toUpperCase());", "+                String s = isCaseSensitive()", "+                    ? patterns[i] : patterns[i].toUpperCase();", "+                map.put(s, new TokenizedPath(s));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8c55cf21d5a1eeb2facc16e60e371ad", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/frontends/EmbeddedAnt.java", "commitBeforeChange": "8cab56ee0ec0c658d0dec674d305630eb8e88bf4", "commitAfterChange": "f5ba55efa18fa862c2a4f5762198c2a9481f287e", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private Embeddor prepareEmbeddor()         throws Exception", "signatureAfterChange": "     private Embeddor prepareEmbeddor( final Map parameters )         throws Exception", "diff": ["-    private Embeddor prepareEmbeddor()", "+    private Embeddor prepareEmbeddor( final Map parameters )", "-            if( m_embeddor instanceof Parameterizable )", "+            if( m_embeddor instanceof Contextualizable )", "-                ( (Parameterizable)m_embeddor ).parameterize( m_embeddorParameters );", "+                final Context context = new DefaultContext( parameters );", "+                ( (Contextualizable)m_embeddor ).contextualize( context );"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd69e757e8766b8b93d769241eec9309", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "578dfc41360fa818bafbc854e7a2011f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/cli/org/apache/ant/cli/Commandline.java", "commitBeforeChange": "af01f285a19e2502eb29bf8d10083f15cf392b7f", "commitAfterChange": "99dc457c6f7721903927fc6a154a730a36d42e51", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void process(String[] args, InitConfig initConfig)", "signatureAfterChange": "     private void process(String[] args, InitConfig initConfig)", "diff": ["+            System.exit(0);", "-            if (t instanceof AntException) {", "-                AntException e = (AntException)t;", "-                Location location = e.getLocation();", "-                Throwable cause = e.getCause();", "-                if (location != null && location != Location.UNKNOWN_LOCATION) {", "-                    System.out.print(location);", "-                }", "-                System.out.println(e.getMessage());", "-", "-                if (messageOutputLevel >= MessageLevel.MSG_VERBOSE) {", "-                    t.printStackTrace();", "-                }", "-", "-                if (cause != null) {", "-                    System.out.println(\"Root cause: \" + cause.toString());", "-                }", "-            } else {", "-                t.printStackTrace(System.err);", "-            }", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93e9db05013fb2af629edc413e55339f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Project.java", "commitBeforeChange": "2e52d68af6f378e43debf2e78aa89ef37833179f", "commitAfterChange": "f5f6982c88e608482d611018d32219f2f528c045", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": "     public static String translatePath(String toProcess)", "signatureAfterChange": "     public static String translatePath(String toProcess)", "diff": ["-        if (toProcess == null || toProcess.length() == 0) {", "-            return \"\";", "-        }", "-        StringBuffer path = new StringBuffer(toProcess.length() + 50);", "-        PathTokenizer tokenizer = new PathTokenizer(toProcess);", "-        while (tokenizer.hasMoreTokens()) {", "-            String pathComponent = tokenizer.nextToken();", "-            pathComponent = pathComponent.replace('/', File.separatorChar);", "-            pathComponent = pathComponent.replace('\\\\', File.separatorChar);", "-            if (path.length() != 0) {", "-                path.append(File.pathSeparatorChar);", "-            }", "-            path.append(pathComponent);", "-        }", "-        return path.toString();", "+        return FileUtils.translatePath(toProcess);"]}]}
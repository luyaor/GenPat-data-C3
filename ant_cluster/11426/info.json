{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "529c3b204ef27e339159571f14f9cfb9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "177c276852b2aa2e3ff4fd0359763428", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "3a94f3d9dc3e5086b874a4f1f363b3c1adba644a", "commitAfterChange": "4f8bb2ee77ac387500caffe5b3b830547b465bd2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      private static void runBuild()", "signatureAfterChange": "      private static void runBuild()", "diff": ["+                ProjectHelper.configureProject(project, buildFile);", "+            } catch (NoClassDefFoundError ncdfe) {", "+                throw new BuildException(\"No JAXP compliant XML parser found. See http://java.sun.com/xml for the\\nreference implementation.\", ncdfe);", "-                throw new BuildException(cnfe);", "+                throw new BuildException(\"No JAXP compliant XML parser found. See http://java.sun.com/xml for the\\nreference implementation.\", cnfe);", "+            } catch (NullPointerException npe) {", "+                throw new BuildException(\"No JAXP compliant XML parser found. See http://java.sun.com/xml for the\\nreference implementation.\", npe);", "-            ProjectHelper.configureProject(project, buildFile);", "+            System.out.println(be.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b8a169124dbaf78303a2a24d5817e8e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/builder/DefaultProjectBuilder.java", "commitBeforeChange": "50fb7f5643cba98640e7d4ce2b00736e9d42cbab", "commitAfterChange": "6ff9bf50ad2e4fcda69911d207c8dfe93e7b4e0b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      private Project build( final File file, final HashMap projects )         throws ProjectException", "signatureAfterChange": "      private Project build( final File file, final HashMap projects )         throws ProjectException", "diff": ["-        final URL systemID = extractURL( file );", "-        final Project result = (Project)projects.get( systemID.toString() );", "-        if( null != result )", "+        try", "-            return result;", "+            // Check for cached project", "+            final String systemID = extractURL( file );", "+            final Project result = (Project)projects.get( systemID );", "+            if( null != result )", "+            {", "+                return result;", "+            }", "+", "+            // Parse the project file", "+            final Configuration configuration = parseProject( systemID );", "+", "+            // Build the project model and add to cache", "+            final DefaultProject project = buildProject( file, configuration );", "+            projects.put( systemID, project );", "+", "+            // Build using all top-level attributes", "+            buildTopLevelProject( project, configuration, projects );", "+", "+            return project;", "-", "-        // Parse the project file", "-        final Configuration configuration = parseProject( systemID );", "-", "-        // Build the project model", "-        final DefaultProject project = buildProject( file, configuration );", "-", "-        projects.put( systemID.toString(), project );", "-", "-        //build using all top-level attributes", "-        buildTopLevelProject( project, configuration, projects );", "-", "-        return project;", "+        catch( Exception e )", "+        {", "+            final String message = REZ.getString( \"ant.project-build.error\", file.getAbsolutePath() );", "+            throw new ProjectException( message, e );", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "309ff9150b4e7f4c892b4344d7c45dd7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "46330b41c1a0cd642c895b8ff39ab295a3519ca4", "commitAfterChange": "f42a96f3046b6a665f9755123c9f7939e53737ba", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void configure( final Object object,                            final Configuration configuration,                            final Context context )         throws ConfigurationException", "signatureAfterChange": "     public void configure( final Object object,                            final Configuration configuration,                            final Context context )         throws ConfigurationException", "diff": ["-        configureObject( object, configuration, context );", "+        try", "+        {", "+            // Configure the object", "+            configureObject( object, configuration, context );", "+        }", "+        catch( final ReportableConfigurationException e )", "+        {", "+            // Already have a reasonable error message - so rethrow", "+            throw e.getCause();", "+        }", "+        catch( final Exception e )", "+        {", "+            // Wrap all other errors with general purpose error message", "+            final String message = REZ.getString( \"bad-configure-element.error\", configuration.getName() );", "+            throw new ConfigurationException( message, e );", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32d14ba7a5e210e39fefa541b603d6b6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ExecutionFrame.java", "commitBeforeChange": "7499c443d67445ea8fd0b8f4bd56c72251b18bf4", "commitAfterChange": "b7e43ad8c5906ae2b6d6b42f8b2715dc7d2e7a16", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 36, "signatureBeforeChange": "     private TaskContext configureTask(BuildElement model)          throws ExecutionException, TaskException", "signatureAfterChange": "     private TaskContext configureTask(BuildElement model)          throws ExecutionException", "diff": ["-         throws ExecutionException, TaskException {", "+         throws ExecutionException {", "-            Object element = elementClass.newInstance();", "+            AntLibFactory libFactory = getLibFactory(antLibrary);", "+            Object element = libFactory.createTaskInstance(elementClass);", "+", "-            TaskContext taskContext = allocateTaskContext();", "+            TaskContext taskContext = new TaskContext(this, eventSupport);", "-                 + e.getMessage() + \") for task \" + taskType);", "+                 + e.getMessage() + \") for task \" + taskType,", "+                e, model.getLocation());", "+        } catch (ExecutionException e) {", "+            e.setLocation(model.getLocation());", "+            throw e;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "331f92179029376feac8e6b008d9e7b0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/executor/DefaultExecutor.java", "commitBeforeChange": "c8ae289ddd72e9f5858612fba38393a3c8698c27", "commitAfterChange": "5b87919be6a8db15efe30f2de6e617aba31ef619", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void execute( final Configuration taskModel, final ExecutionFrame frame )         throws TaskException", "signatureAfterChange": "     public void execute( final Configuration taskModel, final ExecutionFrame frame )         throws TaskException", "diff": ["+     */", "-        debug( \"creating.notice\", taskName );", "-        final Task task = createTask( taskName, frame );", "+        try", "+        {", "+            debug( \"creating.notice\", taskName );", "+            final Task task = doCreateTask( taskName, frame );", "-        debug( \"logger.notice\", taskName );", "-        doLogEnabled( task, taskModel, frame.getLogger() );", "+            debug( \"logger.notice\", taskName );", "+            doLogEnabled( task, taskModel, frame.getLogger() );", "-        debug( \"contextualizing.notice\", taskName );", "-        doContextualize( task, taskModel, frame.getContext() );", "+            debug( \"contextualizing.notice\", taskName );", "+            doContextualize( task, taskModel, frame.getContext() );", "-        debug( \"configuring.notice\", taskName );", "-        doConfigure( task, taskModel, frame.getContext() );", "+            debug( \"configuring.notice\", taskName );", "+            doConfigure( task, taskModel, frame.getContext() );", "-        debug( \"executing.notice\", taskName );", "-        task.execute();", "+            debug( \"executing.notice\", taskName );", "+            task.execute();", "+        }", "+        catch( Exception e )", "+        {", "+            // Wrap in generic error message", "+            final String message = REZ.getString( \"execute.error\", taskName, taskModel.getLocation() );", "+            throw new TaskException( message, e );", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bcb524411119867e2e733c860982666", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/executor/AspectAwareExecutor.java", "commitBeforeChange": "c8ae289ddd72e9f5858612fba38393a3c8698c27", "commitAfterChange": "5b87919be6a8db15efe30f2de6e617aba31ef619", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private void executeTask( final Configuration model,                               final ExecutionFrame frame )         throws TaskException", "signatureAfterChange": "      private void executeTask( final Configuration model,                               final ExecutionFrame frame )         throws TaskException", "diff": ["-        Configuration taskModel = getAspectManager().preCreate( model );", "-        taskModel = prepareAspects( taskModel );", "+        try", "+        {", "+            Configuration taskModel = getAspectManager().preCreate( model );", "+            taskModel = prepareAspects( taskModel );", "-        final String taskName = taskModel.getName();", "-        debug( \"creating.notice\", taskName );", "-        final Task task = createTask( taskName, frame );", "-        getAspectManager().postCreate( task );", "+            final String taskName = taskModel.getName();", "+            debug( \"creating.notice\", taskName );", "+            final Task task = doCreateTask( taskName, frame );", "+            getAspectManager().postCreate( task );", "-        debug( \"logger.notice\", taskName );", "-        final Logger logger = frame.getLogger();", "-        getAspectManager().preLogEnabled( logger );", "-        doLogEnabled( task, taskModel, logger );", "+            debug( \"logger.notice\", taskName );", "+            final Logger logger = frame.getLogger();", "+            getAspectManager().preLogEnabled( logger );", "+            doLogEnabled( task, taskModel, logger );", "-        debug( \"contextualizing.notice\", taskName );", "-        doContextualize( task, taskModel, frame.getContext() );", "+            debug( \"contextualizing.notice\", taskName );", "+            doContextualize( task, taskModel, frame.getContext() );", "-        debug( \"configuring.notice\", taskName );", "-        getAspectManager().preConfigure( taskModel );", "-        doConfigure( task, taskModel, frame.getContext() );", "+            debug( \"configuring.notice\", taskName );", "+            getAspectManager().preConfigure( taskModel );", "+            doConfigure( task, taskModel, frame.getContext() );", "-        debug( \"executing.notice\", taskName );", "-        getAspectManager().preExecute();", "-        doExecute( taskModel, task );", "-        getAspectManager().preDestroy();", "+            debug( \"executing.notice\", taskName );", "+            getAspectManager().preExecute();", "+            doExecute( taskModel, task );", "+            getAspectManager().preDestroy();", "+        }", "+        catch( Exception e )", "+        {", "+            // Wrap in generic error message", "+            final String message = REZ.getString( \"execute.error\",", "+                                                  model.getName(),", "+                                                  model.getLocation() );", "+            throw new TaskException( message, e );", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "641b4292e2ce413ee4f51d7f76c30f29", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/builder/DefaultProjectBuilder.java", "commitBeforeChange": "4d492454dde097210c04b4cca33feb56fa0f9554", "commitAfterChange": "80793a20ada49e7453e836ffeab1e41c8a88d49d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      protected void process( final URL systemID,                             final SAXConfigurationHandler handler )         throws Exception", "signatureAfterChange": "     private Configuration parseProject( final URL systemID )         throws ProjectException", "diff": ["-    protected void process( final URL systemID,", "-                            final SAXConfigurationHandler handler )", "-        throws Exception", "+     */", "+    private Configuration parseProject( final URL systemID )", "+        throws ProjectException", "-        final SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();", "-        final SAXParser saxParser = saxParserFactory.newSAXParser();", "-        final XMLReader parser = saxParser.getXMLReader();", "-        parser.setFeature( \"http://xml.org/sax/features/namespace-prefixes\", false );", "-        parser.setFeature( \"http://xml.org/sax/features/namespaces\", false );", "-        //parser.setFeature( \"http://xml.org/sax/features/validation\", false );", "+        try", "+        {", "+            final SAXConfigurationHandler handler = new SAXConfigurationHandler();", "+            final SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();", "+            final SAXParser saxParser = saxParserFactory.newSAXParser();", "+            final XMLReader parser = saxParser.getXMLReader();", "+            parser.setFeature( \"http://xml.org/sax/features/namespace-prefixes\", false );", "+            parser.setFeature( \"http://xml.org/sax/features/namespaces\", false );", "+            //parser.setFeature( \"http://xml.org/sax/features/validation\", false );", "-        parser.setContentHandler( handler );", "-        parser.setErrorHandler( handler );", "-        parser.parse( systemID.toString() );", "+            parser.setContentHandler( handler );", "+            parser.setErrorHandler( handler );", "+            parser.parse( systemID.toString() );", "+", "+            return handler.getConfiguration();", "+        }", "+        catch( Exception e )", "+        {", "+            String message = REZ.getString( \"ant.project-parse.error\" );", "+            throw new ProjectException( message, e );", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7769000dc9b4f54a33acbd891f74459", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/frontends/CLIMain.java", "commitBeforeChange": "c8ae289ddd72e9f5858612fba38393a3c8698c27", "commitAfterChange": "5b87919be6a8db15efe30f2de6e617aba31ef619", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private void execute( final String[] args )         throws Exception", "signatureAfterChange": "      private void execute( final String[] args )         throws Exception", "diff": ["-        final File homeDir = getHomeDir();", "+        checkHomeDir();", "-        final ProjectListener listener = prepareListener( embeddor );", "-        //create the project", "-        final Project project =", "-            embeddor.createProject( buildFile.toString(), null, m_builderParameters );", "-", "-        //loop over build if we are in incremental mode..", "-        final boolean incremental = m_parameters.getParameterAsBoolean( \"incremental\", false );", "-        if( !incremental )", "+        try", "-            executeBuild( embeddor, project, listener );", "-        }", "-        else", "-        {", "-            executeIncrementalBuild( embeddor, project, listener );", "-        }", "+            final ProjectListener listener = prepareListener( embeddor );", "-        shutdownEmbeddor( embeddor );", "+            //create the project", "+            final Project project =", "+                embeddor.createProject( buildFile.toString(), null, m_builderParameters );", "+", "+            //loop over build if we are in incremental mode..", "+            final boolean incremental = m_parameters.getParameterAsBoolean( \"incremental\", false );", "+            if( !incremental )", "+            {", "+                executeBuild( embeddor, project, listener );", "+            }", "+            else", "+            {", "+                executeIncrementalBuild( embeddor, project, listener );", "+            }", "+        }", "+        catch( final Exception e )", "+        {", "+            final String message = REZ.getString( \"build-failed.error\" );", "+            throw new CascadingException( message, e );", "+        }", "+        finally", "+        {", "+            shutdownEmbeddor( embeddor );", "+        }"]}]}
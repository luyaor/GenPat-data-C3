{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b73b1cea9abc5cc3ba0c6de31ef64513", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b4523e00bf79bc0083f9cfb597e3e83", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/regexp/RegexpMatcherFactory.java", "commitBeforeChange": "fcd6548344aa3f590435beff55530cfdb6983588", "commitAfterChange": "ffea0a9f7459b7c64148ae244b22e847bad9128b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public RegexpMatcher newRegexpMatcher() throws BuildException", "signatureAfterChange": "     public RegexpMatcher newRegexpMatcher(Project p)         throws BuildException", "diff": ["-        String systemDefault = System.getProperty(\"ant.regexp.matcherimpl\");", "+     */", "+    public RegexpMatcher newRegexpMatcher(Project p)", "+        throws BuildException {", "+        String systemDefault = null;", "+        if (p == null) {", "+            systemDefault = System.getProperty(\"ant.regexp.regexpimpl\");", "+        } else {", "+            systemDefault = (String) p.getProperties().get(\"ant.regexp.regexpimpl\");", "+        }", "+        ", "-            // XXX     should we silently possible exceptions and try to ", "+            // XXX     should we silently catch possible exceptions and try to "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a973fcfe41e3e6ecba2e19d818a16bdb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/FormatterElement.java", "commitBeforeChange": "ed475344e72f1fb4d9e19cf627ddf8e67cc23942", "commitAfterChange": "bd578f489a9200bf0c1e361023cb235c15d743e7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "      JUnitResultFormatter createFormatter() throws BuildException", "signatureAfterChange": "     JUnitResultFormatter createFormatter(ClassLoader loader)          throws BuildException", "diff": ["+     */", "+    JUnitResultFormatter createFormatter(ClassLoader loader) ", "+        throws BuildException {", "+", "-            f = Class.forName(classname);", "+            if (loader == null) {", "+                f = Class.forName(classname);", "+            } else {", "+                f = loader.loadClass(classname);", "+                AntClassLoader.initializeClass(f);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe3bd85f6074a8d64a112e693424d460", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Manifest.java", "commitBeforeChange": "6309813d01620379a35da64c12c4de488efedc2d", "commitAfterChange": "4ab1950bd8ba0bf2335e09b07852d74e1b016f5a", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 30, "signatureBeforeChange": "     public void merge(Manifest other) throws ManifestException", "signatureAfterChange": "     public void merge(Manifest other, boolean overwriteMain) throws ManifestException", "diff": ["-        if (other.manifestVersion != null) {", "-            manifestVersion = other.manifestVersion;", "-        }", "-        mainSection.merge(other.mainSection);", "-        for (Enumeration e = other.sections.keys(); e.hasMoreElements();) {", "-            String sectionName = (String)e.nextElement();", "-            Section ourSection = (Section)sections.get(sectionName);", "-            Section otherSection = (Section)other.sections.get(sectionName);", "-            if (ourSection == null) {", "-                sections.put(sectionName, otherSection);", "-            }", "-            else {", "-                ourSection.merge(otherSection);", "-            }", "-        }", "+     */", "+    public void merge(Manifest other, boolean overwriteMain) throws ManifestException {", "+        if (other != null) {", "+             if (overwriteMain) {", "+                 mainSection = other.mainSection;", "+             }", "+             else {", "+                 mainSection.merge(other.mainSection);", "+             }", "+", "+             if (other.manifestVersion != null) {", "+                 manifestVersion = other.manifestVersion;", "+             }", "+", "+             for (Enumeration e = other.sections.keys(); e.hasMoreElements();) {", "+                 String sectionName = (String)e.nextElement();", "+                 Section ourSection = (Section)sections.get(sectionName);", "+                 Section otherSection = (Section)other.sections.get(sectionName);", "+                 if (ourSection == null) {", "+                     if (otherSection != null) {", "+                         sections.put(sectionName.toLowerCase(), otherSection);", "+                     }", "+                 }", "+                 else {", "+                     ourSection.merge(otherSection);", "+                 }", "+             }", "+         }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f54297152a5f061940fb9fb57a95162f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26e54a170144a52a5a7b3a33ce64d9ee", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "33f3479056780007a3b474d8633e36d38552e875", "commitAfterChange": "81197f555a134f3d58f7195fa85046db167bd704", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public boolean doGet(int logLevel, DownloadProgress progress)             throws IOException", "signatureAfterChange": "     public boolean doGet(int logLevel, DownloadProgress progress)             throws IOException", "diff": ["+            long lastModified = httpConnection.getLastModified();", "-                //workaround:  doesn't work on 1.2", "-                || (hasTimestamp", "-                && JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_2)", "-                && timestamp > httpConnection.getLastModified())) {", "+                || (lastModified != 0 && hasTimestamp", "+                && timestamp > lastModified)) {", "-                // also, if timestamp is roughly >= now, HTTP_NOT_MODIFIED is _not_", "-                // returned... We may want to remove the 1.2 qualifier above."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2df01bc261cfea9aa49ab836fe5b74ab", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "8d0f8b396723de1644ead635375bcff948de5958", "commitAfterChange": "73e22b9d37f72c3cf1e6a277813bdfbef2cc7a80", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     protected void writeLocalFileHeader(ZipEntry ze) throws IOException", "signatureAfterChange": "     protected void writeLocalFileHeader(ZipEntry ze) throws IOException", "diff": ["+        //store method in local variable to prevent multiple method calls", "+        final int zipMethod = ze.getMethod();", "+        ", "-        if (ze.getMethod() == DEFLATED && raf == null) {", "+        if (zipMethod == DEFLATED && raf == null) {", "-        writeOut(ZipShort.getBytes(ze.getMethod()));", "+        writeOut(ZipShort.getBytes(zipMethod));", "-        if (ze.getMethod() == DEFLATED || raf != null) {", "+        if (zipMethod == DEFLATED || raf != null) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4578160c8305919bcbcd3e17a2b3c473", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/property/ParseProperties.java", "commitBeforeChange": "52b6f9a43f6b6d4287a3376438e964572d93eb73", "commitAfterChange": "e11335f5be704c98ab9c83f5e1337e2a5e579704", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public Object parseProperties(String value)", "signatureAfterChange": "     public Object parseProperties(String value)", "diff": ["+        final int len = value.length();", "-        if (o != null && pos.getIndex() == value.length()) {", "+        if (o != null && pos.getIndex() >= len) {", "-        StringBuffer sb = new StringBuffer(value.length() * 2);", "+        StringBuffer sb = new StringBuffer(len * 2);", "-        while (pos.getIndex() < value.length()) {", "+        while (pos.getIndex() < len) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "948f72d0ecd28bc4ebe40e56a834a6a1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/UnknownElement.java", "commitBeforeChange": "9cd109fd31f374702a3ab4cd20fa864ac9939cac", "commitAfterChange": "5f20b99140fb4ec958a6d540b9df7b3c08312b40", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "     public boolean similar(Object obj)", "signatureAfterChange": "     public boolean similar(Object obj)", "diff": ["-        if (children == null || children.size() == 0) {", "+        final int childrenSize = children == null ? 0 : children.size();", "+        if (childrenSize == 0) {", "-        if (children.size() != other.children.size()) {", "+        if (childrenSize != other.children.size()) {", "-        for (int i = 0; i < children.size(); ++i) {", "+        for (int i = 0; i < childrenSize; ++i) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e05875792eab35954d868299f2b39003", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "e11e04dc6e6d6dcabe531346f60b597a8a58c453", "commitAfterChange": "fffe72edb5a6a6deb6222d79841a42c1663ccd36", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 23, "signatureBeforeChange": "     protected void createParents(FTPClient ftp, String filename)         throws IOException, BuildException", "signatureAfterChange": "     protected void createParents(FTPClient ftp, String filename)         throws IOException, BuildException", "diff": ["-                if (!FTPReply.isPositiveCompletion(ftp.getReplyCode()) &&", "-                    (ftp.getReplyCode() != 550) && (ftp.getReplyCode() != 553))", "+                int result=ftp.getReplyCode();", "+                if (!FTPReply.isPositiveCompletion(result) &&", "+                     (result != 550) && (result!= 553)   &&", "+                     !ignoreNoncriticalErrors)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0ecc3e7105be391e5373eb6e2b848d2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DefaultLogger.java", "commitBeforeChange": "8dc6be273ce30411faf2b7554dd6c82151f86c3c", "commitAfterChange": "dc060b5ab03eb8ad0b2cf933d56c645e1063188f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public void messageLogged(BuildEvent event)", "signatureAfterChange": "      public void messageLogged(BuildEvent event)", "diff": ["+        int priority = event.getPriority();", "-        if (event.getPriority() <= msgOutputLevel) {", "+        if (priority <= msgOutputLevel) {", "-            if (event.getPriority() != Project.MSG_ERR) {", "-                out.println(msg);", "+            if (priority != Project.MSG_ERR) {", "+                printMessage(msg, out, priority);", "-                err.println(msg);", "+                printMessage(msg, err, priority);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e4900a32a29f5849a49500c9d5d5cfb9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b7b5b0c877d1dbea1f4511ef403f4a9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Move.java", "commitBeforeChange": "2a713cc02adc21aa5bd5189c8a2718631e6f6a88", "commitAfterChange": "99067d060752e5a89c24d99c17b6eb7231f96380", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      protected void doFileOperations()", "signatureAfterChange": "      protected void doFileOperations()", "diff": ["-                String toFile = (String) fileCopyMap.get(fromFile);", "-                if (fromFile.equals(toFile)) {", "-                    log(\"Skipping self-move of \" + fromFile, verbosity);", "-                    continue;", "-                }", "-", "-                boolean moved = false;", "-", "+                boolean selfMove = false;", "-                    File d = new File(toFile);", "+                    String[] toFiles = (String[]) fileCopyMap.get(fromFile);", "+                    for (int i = 0; i < toFiles.length; i++) {", "+                        String toFile = (String) toFiles[i];", "-                    try {", "-                        log(\"Attempting to rename: \" + fromFile", "-                            + \" to \" + toFile, verbosity);", "-                        moved = renameFile(f, d, filtering, forceOverwrite);", "-                    } catch (IOException ioe) {", "-                        String msg = \"Failed to rename \" + fromFile", "-                            + \" to \" + toFile", "-                            + \" due to \" + ioe.getMessage();", "-                        throw new BuildException(msg, ioe, getLocation());", "-                    }", "+                        if (fromFile.equals(toFile)) {", "+                            log(\"Skipping self-move of \" + fromFile, verbosity);", "+                            selfMove = true;", "-                    if (!moved) {", "-                        try {", "-                            log(\"Moving \" + fromFile + \" to \" + toFile,", "-                                verbosity);", "-", "-                            FilterSetCollection executionFilters =", "-                                new FilterSetCollection();", "-                            if (filtering) {", "-                                executionFilters", "-                                    .addFilterSet(getProject().getGlobalFilterSet());", "-                            }", "-                            for (Enumeration filterEnum =", "-                                     getFilterSets().elements();", "-                                 filterEnum.hasMoreElements();) {", "-                                executionFilters", "-                                    .addFilterSet((FilterSet) filterEnum", "-                                                  .nextElement());", "-                            }", "-                            getFileUtils().copyFile(f, d, executionFilters,", "-                                                    getFilterChains(),", "-                                                    forceOverwrite,", "-                                                    getPreserveLastModified(),", "-                                                    getEncoding(),", "-                                                    getOutputEncoding(),", "-                                                    getProject());", "-", "-                            f = new File(fromFile);", "-                            if (!f.delete()) {", "-                                throw new BuildException(\"Unable to delete \"", "-                                                         + \"file \"", "-                                                         + f.getAbsolutePath());", "-                            }", "-                        } catch (IOException ioe) {", "-                            String msg = \"Failed to copy \" + fromFile + \" to \"", "-                                + toFile", "-                                + \" due to \" + ioe.getMessage();", "-                            throw new BuildException(msg, ioe, getLocation());", "+                            // if this is the last time through the loop then", "+                            // move will not occur, but that's what we want", "+                            continue;", "+                        }", "+                        File d = new File(toFile);", "+                        if ((i + 1) == toFiles.length && !selfMove) {", "+                            // Only try to move if this is the last mapped file", "+                            // and one of the mappings isn't to itself", "+                            moveFile(f, d, filtering, forceOverwrite);", "+                        } else {", "+                            copyFile(f, d, filtering, forceOverwrite);", "-            int count = 0;", "+            int createCount = 0;", "-                String toDirName = (String) dirCopyMap.get(fromDirName);", "-                File fromDir = new File(fromDirName);", "-                File toDir = new File(toDirName);", "-                if (!toDir.exists()) {", "-                    if (!toDir.mkdirs()) {", "-                        log(\"Unable to create directory \"", "-                            + toDirName, Project.MSG_ERR);", "-                    } else {", "-                        count++;", "+                String[] toDirNames = (String[]) dirCopyMap.get(fromDirName);", "+                boolean selfMove = false;", "+                for (int i = 0; i < toDirNames.length; i++) {", "+", "+                    if (fromDirName.equals(toDirNames[i])) {", "+                        log(\"Skipping self-move of \" + fromDirName, verbosity);", "+                        selfMove = true;", "+                        continue;", "+                    }", "+", "+                    File d = new File(toDirNames[i]);", "+                    if (!d.exists()) {", "+                        if (!d.mkdirs()) {", "+                            log(\"Unable to create directory \"", "+                                + d.getAbsolutePath(), Project.MSG_ERR);", "+                        } else {", "+                            createCount++;", "+                        }", "-                if (okToDelete(fromDir)) {", "+", "+                File fromDir = new File(fromDirName);", "+                if (!selfMove && okToDelete(fromDir)) {", "+", "-            if (count > 0) {", "-                log(\"Moved \" + count + \" empty directories to \"", "+            if (createCount > 0) {", "+                log(\"Moved \" + dirCopyMap.size()", "+                    + \" empty director\"", "+                    + (dirCopyMap.size()== 1 ? \"y\" : \"ies\")", "+                    + \" to \" + createCount", "+                    + \" empty director\"", "+                    + (createCount == 1 ? \"y\" : \"ies\") + \" under \""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e7a53a91f8cb00b9a03e5d219889923", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "2a713cc02adc21aa5bd5189c8a2718631e6f6a88", "commitAfterChange": "99067d060752e5a89c24d99c17b6eb7231f96380", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 30, "signatureBeforeChange": "     protected void doFileOperations()", "signatureAfterChange": "     protected void doFileOperations()", "diff": ["-                String toFile = (String) fileCopyMap.get(fromFile);", "+                String[] toFiles = (String[]) fileCopyMap.get(fromFile);", "-                if (fromFile.equals(toFile)) {", "-                    log(\"Skipping self-copy of \" + fromFile, verbosity);", "-                    continue;", "-                }", "+                for (int i = 0; i < toFiles.length; i++) {", "+                    String toFile = toFiles[i];", "-                try {", "-                    log(\"Copying \" + fromFile + \" to \" + toFile, verbosity);", "+                    if (fromFile.equals(toFile)) {", "+                        log(\"Skipping self-copy of \" + fromFile, verbosity);", "+                        continue;", "+                    }", "-                    FilterSetCollection executionFilters =", "-                        new FilterSetCollection();", "-                    if (filtering) {", "-                        executionFilters", "-                            .addFilterSet(getProject().getGlobalFilterSet());", "+                    try {", "+                        log(\"Copying \" + fromFile + \" to \" + toFile, verbosity);", "+", "+                        FilterSetCollection executionFilters =", "+                            new FilterSetCollection();", "+                        if (filtering) {", "+                            executionFilters", "+                                .addFilterSet(getProject().getGlobalFilterSet());", "+                        }", "+                        for (Enumeration filterEnum = filterSets.elements();", "+                            filterEnum.hasMoreElements();) {", "+                            executionFilters", "+                                .addFilterSet((FilterSet) filterEnum.nextElement());", "+                        }", "+                        fileUtils.copyFile(fromFile, toFile, executionFilters,", "+                                           filterChains, forceOverwrite,", "+                                           preserveLastModified, inputEncoding,", "+                                           outputEncoding, getProject());", "+                    } catch (IOException ioe) {", "+                        String msg = \"Failed to copy \" + fromFile + \" to \" + toFile", "+                            + \" due to \" + ioe.getMessage();", "+                        File targetFile = new File(toFile);", "+                        if (targetFile.exists() && !targetFile.delete()) {", "+                            msg += \" and I couldn't delete the corrupt \" + toFile;", "+                        }", "+                        throw new BuildException(msg, ioe, getLocation());", "-                    for (Enumeration filterEnum = filterSets.elements();", "-                         filterEnum.hasMoreElements();) {", "-                        executionFilters", "-                            .addFilterSet((FilterSet) filterEnum.nextElement());", "-                    }", "-                    fileUtils.copyFile(fromFile, toFile, executionFilters,", "-                                       filterChains, forceOverwrite,", "-                                       preserveLastModified, inputEncoding,", "-                                       outputEncoding, getProject());", "-                } catch (IOException ioe) {", "-                    String msg = \"Failed to copy \" + fromFile + \" to \" + toFile", "-                        + \" due to \" + ioe.getMessage();", "-                    File targetFile = new File(toFile);", "-                    if (targetFile.exists() && !targetFile.delete()) {", "-                        msg += \" and I couldn't delete the corrupt \" + toFile;", "-                    }", "-                    throw new BuildException(msg, ioe, getLocation());", "-            int count = 0;", "+            int createCount = 0;", "-                File d = new File((String) e.nextElement());", "-                if (!d.exists()) {", "-                    if (!d.mkdirs()) {", "-                        log(\"Unable to create directory \"", "-                            + d.getAbsolutePath(), Project.MSG_ERR);", "-                    } else {", "-                        count++;", "+                String[] dirs = (String[]) e.nextElement();", "+                for (int i = 0; i < dirs.length; i++) {", "+                    File d = new File(dirs[i]);", "+                    if (!d.exists()) {", "+                        if (!d.mkdirs()) {", "+                            log(\"Unable to create directory \"", "+                                + d.getAbsolutePath(), Project.MSG_ERR);", "+                        } else {", "+                            createCount++;", "+                        }", "-", "-            if (count > 0) {", "-                log(\"Copied \" + count + \" empty director\"", "-                    + (count == 1 ? \"y\" : \"ies\")", "-                    + \" to \" + destDir.getAbsolutePath());", "+            if (createCount > 0) {", "+                log(\"Copied \" + dirCopyMap.size()", "+                    + \" empty director\"", "+                    + (dirCopyMap.size() == 1 ? \"y\" : \"ies\")", "+                    + \" to \" + createCount", "+                    + \" empty director\"", "+                    + (createCount == 1 ? \"y\" : \"ies\") + \" under \"", "+                    + destDir.getAbsolutePath());"]}]}
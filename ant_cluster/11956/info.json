{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c6cc65082c806b7de83b2532e7639872", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72a0407a7d733046dad965200a6d01df", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/Union.java", "commitBeforeChange": "b17f72b88269697a5ebe0731a49a37ca3f1d18ba", "commitAfterChange": "d754a20c3fb29379494a2411bbd69ed876fb9e7a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     protected Collection getCollection(boolean asString)", "signatureAfterChange": "     protected Collection getCollection(boolean asString)", "diff": ["-        //preserve order-encountered using a list; enforce set logic manually:", "-        // (LinkedHashSet better, but JDK 1.4+)", "-        ArrayList union = new ArrayList(rc.size() * 2);", "-        // Use a set as list.contains() can be expensive for lots of resources", "-        Set set = new HashSet(rc.size() * 2);", "+        LinkedHashSet set = new LinkedHashSet(rc.size() * 2);", "-                if (set.add(o)) {", "-                    union.add(o);", "-                }", "+                set.add(o);", "-        return union;", "+        return set;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd79cb999beb2b6413d12eb10b207366", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/image/Image.java", "commitBeforeChange": "bc718c9348493ae16f1e6f6299a9625b6ca0ccbd", "commitAfterChange": "9dd88b23e50a8bae889903f737ce2deccb06c73d", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void execute()", "signatureAfterChange": "     public void execute()", "diff": ["+", "+            if (!overwrite){", "+             // remove any files that shouldn't be overwritten.", "+             ArrayList filesToRemove = new ArrayList();", "+             for(Iterator i = filesList.iterator();i.hasNext();){", "+               File f = (File)i.next();", "+               File new_file = new File(destDir.getAbsolutePath() + File.separator + f.getName());", "+               if (new_file.exists()){", "+                 filesToRemove.add(f);", "+               }", "+             }", "+             filesList.removeAll(filesToRemove);", "+            }", "+", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc9c923917737d8b6dbb9ccb8df3d736", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/PathConvert.java", "commitBeforeChange": "aaed31a8a95dd02706b8760cf8d69081a767c85b", "commitAfterChange": "6483e387712948cd97e5840ce7eae72638bd1259", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+            if (mapper != null) {", "+                FileNameMapper impl = mapper.getImplementation();", "+                List ret = new ArrayList();", "+                for (int i = 0; i < elems.length; ++i) {", "+                    String[] mapped = impl.mapFileName(elems[i]);", "+                    for (int m = 0; mapped != null && m < mapped.length; ++m) {", "+                        ret.add(mapped[m]);", "+                    }", "+                }", "+                elems = (String[]) ret.toArray(new String[] {});", "+            }", "+"]}]}
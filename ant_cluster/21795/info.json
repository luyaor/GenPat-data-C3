{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e7af363ca371065b03ef1341a4334656", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24b29f4d7722940fe57f376e9a9941dd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "fdade0537c4628290168a365b9a14d28c3e32b72", "commitAfterChange": "9af46a2ca05b7e2da738a1688ff679445f2c1a6e", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 37, "signatureBeforeChange": "             public void run(TestResult r)", "signatureAfterChange": "          private boolean isSplit(String classname)", "diff": ["+", "+        private boolean isSplit(String classname) {", "+            String simplename = classname.substring(classname.lastIndexOf('.') + 1);", "+            for (int i = 0; i < SPLIT_CLASSES.length; i++) {", "+                if (simplename.equals(SPLIT_CLASSES[i]) || simplename.startsWith(SPLIT_CLASSES[i] + '$')) {", "+                    return true;", "+                }", "+            }", "+            return false;", "+        }", "-            public int countTestCases() { return 1; }", "-            public void run(TestResult r) {", "-                throw new AssertionFailedError(message);", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "896b4a8fd1de235f8467d7e0d0aea2e7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Project.java", "commitBeforeChange": "e713682ea69123ef5ca4935776b817a2b81645cf", "commitAfterChange": "695ce2ed1c7ffb7ce113fcdc05d12cd70abad525", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void removeBuildListener(BuildListener listener)", "signatureAfterChange": "     public void removeBuildListener(BuildListener listener)", "diff": ["-            Vector newListeners = getBuildListeners();", "-            newListeners.removeElement(listener);", "-            listeners = newListeners;", "+            for (int i = 0; i < listeners.length; i++) {", "+                if (listeners[i] == listener) {", "+                    BuildListener[] newListeners = new BuildListener[listeners.length - 1];", "+                    System.arraycopy(listeners, 0, newListeners, 0, i);", "+                    System.arraycopy(listeners, i + 1, newListeners, i, listeners.length - i - 1);", "+                    listeners = newListeners;", "+                    break;", "+                }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cad7e76d72f62f22de825267fe02cdc4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/extensions/LibraryDisplayer.java", "commitBeforeChange": "233e04e45369b3c5bbcff070a75205e4c0d48e96", "commitAfterChange": "829ab528ab20211bf041ac82b1bc7b46eac0b768", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     void displayLibrary( final File file,                          final Manifest manifest )         throws TaskException", "signatureAfterChange": "     void displayLibrary( final File file,                          final Manifest manifest )         throws TaskException", "diff": ["+        final Extension[] options = Extension.getOptions( manifest );", "+            0 == options.length &&", "+        if( 0 != options.length )", "+        {", "+            System.out.println( \"Extensions that will be used by Library if present:\" );", "+            for( int i = 0; i < options.length; i++ )", "+            {", "+                final Extension extension = options[ i ];", "+                System.out.println( extension.toString() );", "+            }", "+        }", "+"]}]}
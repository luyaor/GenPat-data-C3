{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9855471110e6404360919a2a9d09685a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1abe8150933b30a6e222d4b4f87afe0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/image/Image.java", "commitBeforeChange": "26839fdb3234b8344a313d1bee71aff8494b3842", "commitAfterChange": "541157c5de95bf1cb2ff9f47b8aadac0b3ee98e1", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            DirectoryScanner ds = null;", "-            String[] files = null;", "-            ArrayList filesList = new ArrayList();", "+            File dest = destDir != null ? destDir : srcDir;", "+", "+            int writeCount = 0;", "+", "+            // build mapper", "+            final FileNameMapper mapper;", "+            if (mapperElement==null){", "+                mapper = new IdentityMapper();", "+            } else {", "+                mapper = mapperElement.getImplementation();", "+            }", "-                ds = super.getDirectoryScanner(srcDir);", "+                final DirectoryScanner ds = super.getDirectoryScanner(srcDir);", "-                files = ds.getIncludedFiles();", "-                for (int i = 0; i < files.length; i++) {", "-                    filesList.add(new File(srcDir, files[i]));", "-                }", "+                final String[] files = ds.getIncludedFiles();", "+                writeCount += processDir(srcDir, files, dest, mapper);", "-                FileSet fs = (FileSet) filesets.elementAt(i);", "-                ds = fs.getDirectoryScanner(getProject());", "-                files = ds.getIncludedFiles();", "-                File fromDir = fs.getDir(getProject());", "-                for (int j = 0; j < files.length; j++) {", "-                    filesList.add(new File(fromDir, files[j]));", "-                }", "+                final FileSet fs = (FileSet) filesets.elementAt(i);", "+                final DirectoryScanner ds =", "+                    fs.getDirectoryScanner(getProject());", "+                final String[] files = ds.getIncludedFiles();", "+                final File fromDir = fs.getDir(getProject());", "+                writeCount += processDir(fromDir, files, dest, mapper);", "-            if (!overwrite) {", "-                // remove any files that shouldn't be overwritten.", "-                ArrayList filesToRemove = new ArrayList();", "-                for (Iterator i = filesList.iterator(); i.hasNext();) {", "-                    File f = (File) i.next();", "-                    File newFile = new File(destDir, f.getName());", "-                    if (newFile.exists()) {", "-                        filesToRemove.add(f);", "-                    }", "-                }", "-                filesList.removeAll(filesToRemove);", "-            }", "-            // iterator through all the files and process them.", "-            for (Iterator i = filesList.iterator(); i.hasNext();) {", "-                File file = (File) i.next();", "-                processFile(file);", "-                if (garbage_collect) {", "-                    System.gc();", "-                }", "+            if (writeCount>0){", "+                log(\"Processed \" + writeCount +", "+                    (writeCount == 1 ? \" image.\" : \" images.\"));", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8d15abd25a670321dbf6cf3a42ad92f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Delete.java", "commitBeforeChange": "a1665b567b2b4c85c5f9ca356a678107147c0073", "commitAfterChange": "ec53cbb02a54af81b299b610acdbdda516f623b1", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 38, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        if (file == null && dir == null && filesets.size() == 0) {", "+        if (file == null && dir == null && filesets.size() == 0 && rcs.size() == 0) {", "-                                     + \"attributes, or a fileset element, \"", "+                                     + \"attributes, or a nested resource collection, \"", "-", "-", "-        // delete the files in the filesets", "+        Path p = new Path(getProject());", "+        p.addAll(rcs);", "-            FileSet fs = (FileSet) filesets.elementAt(i);", "-            try {", "-                DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "-                String[] files = ds.getIncludedFiles();", "-                String[] dirs = ds.getIncludedDirectories();", "-                removeFiles(fs.getDir(getProject()), files, dirs);", "-            } catch (BuildException be) {", "-                // directory doesn't exist or is not readable", "-                if (failonerror) {", "-                    throw be;", "-                } else {", "-                    log(be.getMessage(),", "-                        quiet ? Project.MSG_VERBOSE : Project.MSG_WARN);", "-                }", "-            }", "+            FileSet fs = (FileSet) filesets.get(i);", "+            p.add(includeEmpty ? new BCFileSet(fs) : fs);", "-", "-        // delete the files from the default fileset", "-            try {", "-                DirectoryScanner ds = super.getDirectoryScanner(dir);", "-                String[] files = ds.getIncludedFiles();", "-                String[] dirs = ds.getIncludedDirectories();", "-                removeFiles(dir, files, dirs);", "-            } catch (BuildException be) {", "-                // directory doesn't exist or is not readable", "-                if (failonerror) {", "-                    throw be;", "-                } else {", "-                    log(be.getMessage(),", "+            //add the files from the default fileset:", "+            FileSet implicit = getImplicitFileSet();", "+            p.add(includeEmpty ? new BCFileSet(implicit) : implicit);", "+        }", "+        // delete the files in the resource collections; sort to files, then dirs", "+        Sort s = new Sort();", "+        s.add(new Reverse(new FileSystem()));", "+        s.add(p);", "+        for (Iterator iter = s.iterator(); iter.hasNext();) {", "+            FileResource r = (FileResource) iter.next();", "+            if (!(r.isDirectory()) || r.getFile().list().length == 0) {", "+                log(\"Deleting \" + r, verbosity);", "+                if (!delete(r.getFile())) {", "+                    String message = \"Unable to delete \"", "+                        + (r.isDirectory() ? \"directory \" : \"file \") + r;", "+                    if (failonerror) {", "+                        throw new BuildException(message);", "+                    }", "+                    log(message,"]}]}
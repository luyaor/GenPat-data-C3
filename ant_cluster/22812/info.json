{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bca52194bac36fe4b7d9c1f52d619ec6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38076ecebba08e91f575c4c00ff17a6c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "37ed344b385cde54ee62f2e66d347cb243dd6708", "commitAfterChange": "33107ab10098823c23924741100a6c3faf9fd267", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        if (srcFile == null && sqlCommand.length() == 0) {", "-            throw new BuildException(\"Source file or sql statement must be set!\", location);", "+        if (srcFile == null && sqlCommand.length() == 0) { ", "+            if (transactions.size() == 0) {", "+                throw new BuildException(\"Source file, transactions or sql statement must be set!\", location);", "+            }", "+        } else {", "+            // Make a transaction group for the outer command", "+            Transaction t = createTransaction();", "+            t.setSrc(srcFile);", "+            t.addText(sqlCommand);", "+", "+            if (!isValidRdbms(conn)) return;", "+", "-            if (sqlCommand.length() != 0) {", "-                runStatements(new StringReader(sqlCommand));", "-            }", "-            ", "-            if (srcFile != null) {", "-                runStatements(new FileReader(srcFile));", "-            }", "-", "-            if (!autocommit) {", "-                conn.commit();", "+            // Process all transactions", "+            for (Enumeration e = transactions.elements(); ", "+                 e.hasMoreElements();) {", "+                ((Transaction) e.nextElement()).runTransaction();", "+                if (!autocommit) {", "+                    log(\"Commiting transaction\", Project.MSG_VERBOSE);", "+                    conn.commit();", "+                }", "-            if (!autocommit && conn != null) {", "+            if (!autocommit && conn != null && onError.equals(\"abort\")) {", "-            if (!autocommit && conn != null) {", "+            if (!autocommit && conn != null && onError.equals(\"abort\")) {", "-        log(\"SQL statements executed successfully\", Project.MSG_VERBOSE);", "+        log(goodSql + \" of \" + totalSql + ", "+            \" SQL statements executed successfully\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "647c3fb8882611691e26876142e6efce", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/Cab.java", "commitBeforeChange": "d3cd72efd0bcc53e93dc30234f1793d9c44b3093", "commitAfterChange": "2737393e9f982e62dcd84f35a5f342ae9fa07cd7", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-                Process p = Runtime.getRuntime().exec(\"listcab\");", "+                Process p = Execute.launch(getProject(), ", "+                                           new String[] {\"listcab\"}, null,", "+                                           baseDir, true);", "+", "+                // Create the stream pumpers to forward listcab's stdout and stderr to the log", "+                // note: listcab is an interactive program, and issues prompts for every new line.", "+                //       Therefore, make it show only with verbose logging turned on.", "+                LogOutputStream outLog = new LogOutputStream(this, Project.MSG_VERBOSE);", "+                LogOutputStream errLog = new LogOutputStream(this, Project.MSG_ERR);", "+                StreamPumper    outPump = new StreamPumper(p.getInputStream(), outLog);", "+                StreamPumper    errPump = new StreamPumper(p.getErrorStream(), errLog);", "+                ", "+                // Pump streams asynchronously", "+                (new Thread(outPump)).start();", "+                (new Thread(errPump)).start();", "+", "+                int result = -99; // A wild default for when the thread is interrupted", "+", "+                try {", "+                    // Wait for the process to finish", "+                    result = p.waitFor();", "+", "+                    // Wait for the end of output and error streams", "+                    outPump.waitFor();", "+                    outLog.close();", "+                    errPump.waitFor();", "+                    errLog.close();", "+                } catch(InterruptedException ie) {", "+                    log(\"Thread interrupted: \" + ie);", "+                }", "+", "+                // Informative summary message in case of errors", "+                if(result != 0) {", "+                    log(\"Error executing listcab; error code: \" + result);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ed8fa94e897d23b370458af97ba0f8a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "4bdc90bd5ea371107ce5f4fbe0939557e1f5aaa9", "commitAfterChange": "2270580b7724fb28e357cd2ea4da561778bc8fa8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            if (srcFile == null && sqlCommand.length() == 0", "-                && filesets.isEmpty()) {", "+            if (srcFile == null && sqlCommand.length() == 0 ", "+                && filesets.isEmpty()) { ", "-                                             + \"must be set!\", getLocation());", "+                                             + \"must be set!\", location);", "-", "+        ", "-                throw new BuildException(\"Source file does not exist!\", getLocation());", "+                throw new BuildException(\"Source file does not exist!\", location);", "-                DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "-                File srcDir = fs.getDir(getProject());", "-", "+                DirectoryScanner ds = fs.getDirectoryScanner(project);", "+                File srcDir = fs.getDir(project);", "+                ", "-", "+                ", "-", "+            ", "-", "+            ", "-                        log(\"Opening PrintStream to output file \" + output,", "+                        log(\"Opening PrintStream to output file \" + output, ", "-", "+                    ", "-                    for (Enumeration e = transactions.elements();", "+                    for (Enumeration e = transactions.elements(); ", "-", "+                       ", "-                }", "+                } ", "-                throw new BuildException(e, getLocation());", "+                throw new BuildException(e, location);", "-                throw new BuildException(e, getLocation());", "+                throw new BuildException(e, location);", "-", "-            log(goodSql + \" of \" + totalSql +", "+            ", "+            log(goodSql + \" of \" + totalSql + "]}]}
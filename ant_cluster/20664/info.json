{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c252a59583afcbbffe0e9475e196677b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "399697789b3b31bb6f8d3b7b9c0083ba", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "3eea43f1a5e140f831623d4ebf15e177fa807263", "commitAfterChange": "dec8af009abc97d5488fab3ff35eec7fb5dbed83", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private void checkIncludePatterns()", "signatureAfterChange": "     private void checkIncludePatterns()", "diff": ["+            String originalpattern = (String) newroots.get(currentelement);", "+            if (!myfile.exists() && !isCaseSensitive) {", "+                File f = findFileCaseInsensitive(basedir, currentelement);", "+                if (f.exists()) {", "+                    // adapt currentelement to the case we've actually found", "+                    currentelement = fileUtils.removeLeadingPath(basedir,", "+                                                                 f);", "+                    myfile = f;", "+                }", "+            }", "+", "-                            if (currentelement.charAt(currentelement.length()-1)", "+                            if (currentelement.charAt(currentelement.length()", "+                                                      - 1) ", "-                    String originalpattern =", "-                        (String) newroots.get(currentelement);", "-                    if (originalpattern.equals(currentelement)) {", "+                    if (isCaseSensitive ", "+                        && originalpattern.equals(currentelement)) {", "+                        accountForIncludedFile(currentelement, myfile);", "+                    } else if (!isCaseSensitive ", "+                        && originalpattern.equalsIgnoreCase(currentelement)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd04dddc955698c2a3f19eadef3e883d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/PropertySet.java", "commitBeforeChange": "94e7786f36caa2224635477133814e8e77d5fd37", "commitAfterChange": "3f31dc8f7a3bfbca7fc1b633742521ce5e4cb6c4", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private void addPropertyNames(Set names, Hashtable properties)", "signatureAfterChange": "     private void addPropertyNames(Set names, Hashtable properties)", "diff": ["-            PropertyRef ref = (PropertyRef) e.nextElement();", "-            if (ref.name != null) {", "-                if (prj != null && prj.getProperty(ref.name) != null) {", "-                    names.add(ref.name);", "+            PropertyRef r = (PropertyRef) e.nextElement();", "+            if (r.name != null) {", "+                if (prj != null && prj.getProperty(r.name) != null) {", "+                    names.add(r.name);", "-            } else if (ref.prefix != null) {", "+            } else if (r.prefix != null) {", "-                    if (name.startsWith(ref.prefix)) {", "+                    if (name.startsWith(r.prefix)) {", "-            } else if (ref.regex != null) {", "+            } else if (r.regex != null) {", "-                matcher.setPattern(ref.regex);", "+                matcher.setPattern(r.regex);", "-            } else if (ref.builtin != null) {", "+            } else if (r.builtin != null) {", "-                if (ref.builtin.equals(BuiltinPropertySetName.ALL)) {", "+                if (r.builtin.equals(BuiltinPropertySetName.ALL)) {", "-                } else if (ref.builtin.equals(BuiltinPropertySetName.SYSTEM)) {", "+                } else if (r.builtin.equals(BuiltinPropertySetName.SYSTEM)) {", "-                } else if (ref.builtin.equals(BuiltinPropertySetName", "+                } else if (r.builtin.equals(BuiltinPropertySetName"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3551694ce3d744b5bcdb8cdf0bb56289", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46fe362d71b15a53767d54d2a0c0c5b2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 132, "methodNumberAfterChange": 132, "signatureBeforeChange": "     @Override \tpublic void execute() throws BuildException", "signatureAfterChange": "     @Override \tpublic void execute() throws BuildException", "diff": ["-        Vector<String> packagesToDoc = new Vector<String>();", "-        Path sourceDirs = new Path(getProject());", "+        final Vector<String> packagesToDoc = new Vector<String>();", "+        final Path sourceDirs = new Path(getProject());", "+\t\tfinal", "-        Commandline toExecute = (Commandline) cmd.clone();", "+        final Commandline toExecute = (Commandline) cmd.clone();", "-        } catch (IOException e) {", "+        } catch (final IOException e) {", "-        JavadocOutputStream out = new JavadocOutputStream(Project.MSG_INFO);", "-        JavadocOutputStream err = new JavadocOutputStream(Project.MSG_WARN);", "-        Execute exe = new Execute(new PumpStreamHandler(out, err));", "+        final JavadocOutputStream out = new JavadocOutputStream(Project.MSG_INFO);", "+        final JavadocOutputStream err = new JavadocOutputStream(Project.MSG_WARN);", "+        final Execute exe = new Execute(new PumpStreamHandler(out, err));", "-            int ret = exe.execute();", "+            final int ret = exe.execute();", "-        } catch (IOException e) {", "+        } catch (final IOException e) {", "-            } catch (IOException e) {", "+            } catch (final IOException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d967a8875af52347ece85b81c1f76c3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     private void checkIncludePatterns()", "signatureAfterChange": "     private void checkIncludePatterns()", "diff": ["-        Map<TokenizedPath, String> newroots = new HashMap<TokenizedPath, String>();", "+        final Map<TokenizedPath, String> newroots = new HashMap<TokenizedPath, String>();", "-            String pattern = includePatterns[i].toString();", "+            final String pattern = includePatterns[i].toString();", "-        for (Map.Entry<String, TokenizedPath> entry : includeNonPatterns.entrySet()) {", "-            String pattern = entry.getKey();", "+        for (final Map.Entry<String, TokenizedPath> entry : includeNonPatterns.entrySet()) {", "+            final String pattern = entry.getKey();", "-                } catch (IOException ex) {", "+                } catch (final IOException ex) {", "-            for (Map.Entry<TokenizedPath, String> entry : newroots.entrySet()) {", "+            for (final Map.Entry<TokenizedPath, String> entry : newroots.entrySet()) {", "-                        String path = (basedir == null)", "+                        final String path = (basedir == null)", "-                    } catch (IOException ex) {", "+                    } catch (final IOException ex) {", "-                    File f = currentPath.findFile(basedir, false);", "+                    final File f = currentPath.findFile(basedir, false);", "-                        String originalpattern = entry.getValue();", "-                        boolean included = isCaseSensitive()", "+                        final String originalpattern = entry.getValue();", "+                        final boolean included = isCaseSensitive()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "767067b3e94bedb19714847b04bc669b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/ScpToMessage.java", "commitBeforeChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "commitAfterChange": "789422e131b6c2c003d94f394169a64297e986c6", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "      private void sendFileToRemote(File localFile,                                    InputStream in,                                    OutputStream out) throws IOException", "signatureAfterChange": "      private void sendFileToRemote(final File localFile,                                    final InputStream in,                                    final OutputStream out) throws IOException", "diff": ["-    private void sendFileToRemote(File localFile,", "-                                   InputStream in,", "-                                   OutputStream out) throws IOException {", "+    private void sendFileToRemote(final File localFile,", "+                                   final InputStream in,", "+                                   final OutputStream out) throws IOException {", "-        long filesize = localFile.length();", "+        final long filesize = localFile.length();", "-        FileInputStream fis = new FileInputStream(localFile);", "-        byte[] buf = new byte[BUFFER_SIZE];", "-        long startTime = System.currentTimeMillis();", "+        final FileInputStream fis = new FileInputStream(localFile);", "+        final byte[] buf = new byte[BUFFER_SIZE];", "+        final long startTime = System.currentTimeMillis();", "-        boolean trackProgress = getVerbose() && filesize > HUNDRED_KILOBYTES;", "+        final boolean trackProgress = getVerbose() && filesize > HUNDRED_KILOBYTES;", "-        long initFilesize = filesize;", "+        final long initFilesize = filesize;", "-                int len = fis.read(buf, 0, buf.length);", "+                final int len = fis.read(buf, 0, buf.length);", "-                long endTime = System.currentTimeMillis();", "+                final long endTime = System.currentTimeMillis();"]}]}
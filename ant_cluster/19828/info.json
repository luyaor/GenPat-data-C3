{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "476c8261c12211821cd404eda8584fef", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0470358f90b7e5d0eb8d68202d7f5150", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/vfs/provider/UriParser.java", "commitBeforeChange": "b6ed0b49348d6e8f820f4e5590bd71782c111976", "commitAfterChange": "5b48abc10df6339a4114a4135fdab2b38b9252bd", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public String getChildPath( String parent, String name ) throws FileSystemException", "signatureAfterChange": "     public String resolvePath( final String baseFile,                                final String path,                                final NameScope scope )         throws FileSystemException", "diff": ["-    public String getChildPath( String parent, String name ) throws FileSystemException", "+    public String resolvePath( final String baseFile,", "+                               final String path,", "+                               final NameScope scope )", "+        throws FileSystemException", "-        // Validate the child name", "-        if( name.length() == 0", "-            || name.equals( \".\" )", "-            || name.equals( \"..\" ) )", "+        final String resolvedPath = resolvePath( baseFile, path );", "+        if( scope == NameScope.CHILD )", "-            final String message = REZ.getString( \"invalid-childname.error\", name );", "-            throw new FileSystemException( message );", "-        }", "-", "-        // Check for separators", "-        if( name.indexOf( m_separatorChar ) != -1 )", "-        {", "-            final String message = REZ.getString( \"invalid-childname.error\", name );", "-            throw new FileSystemException( message );", "-        }", "-        for( int i = 0; i < m_separators.length; i++ )", "-        {", "-            char separator = m_separators[ i ];", "-            if( name.indexOf( separator ) != -1 )", "+            final int baseLen = baseFile.length();", "+            if( ! resolvedPath.startsWith( baseFile )", "+                || resolvedPath.length() == baseLen", "+                || resolvedPath.charAt( baseLen ) != m_separatorChar", "+                || resolvedPath.indexOf( m_separatorChar, baseLen + 1 ) != -1 )", "-                final String message = REZ.getString( \"invalid-childname.error\", name );", "+                final String message = REZ.getString( \"invalid-childname.error\", path );", "-", "-        if( parent.endsWith( m_separator ) )", "+        else if( scope == NameScope.DESCENDENT )", "-            // Either root, or the parent name already ends with the separator", "-            return parent + name;", "+            final int baseLen = baseFile.length();", "+            if( ! resolvedPath.startsWith( baseFile )", "+                || resolvedPath.length() == baseLen", "+                || resolvedPath.charAt( baseLen ) != m_separatorChar )", "+            {", "+                final String message = REZ.getString( \"invalid-descendent-name.error\", path );", "+                throw new FileSystemException( message );", "+            }", "-        return parent + m_separatorChar + name;", "+        else if( scope != NameScope.FILE_SYSTEM )", "+        {", "+            throw new IllegalArgumentException();", "+        }", "+", "+        return resolvedPath;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df74f06590ab2adb5bc8e887376bf1e9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "99a9f194032b4185fc017d9bfe31e0419cc51f02", "commitAfterChange": "ced321c00be004a78c335295701169edf0dcb55f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void configureElement( final ObjectConfigurer configurer,                                    final Object object,                                    final Configuration childConfig,                                    final Context context )         throws ConfigurationException", "signatureAfterChange": "     private void configureElement( final ObjectConfigurer configurer,                                    final Object object,                                    final Configuration element,                                    final Context context )         throws ConfigurationException", "diff": ["-     */", "-    private void configureElement( final ObjectConfigurer configurer,", "-                                   final Object object,", "-                                   final Configuration childConfig,", "-                                   final Context context )", "-        throws ConfigurationException", "-    {", "-        final String childName = childConfig.getName();", "-", "-        if( DEBUG )", "-        {", "-            final String message =", "-                REZ.getString( \"configure-subelement.notice\", childName );", "-            getLogger().debug( message );", "-        }", "-", "-        // Locate the configurer for the child element", "-        final ElementConfigurer childConfigurer = configurer.getElement( childName );", "-        if( null == childConfigurer )", "-        {", "-            final String message = REZ.getString( \"unknown-subelement.error\", childName );", "-            throw new ConfigurationException( message );", "-        }", "-", "-        try", "-        {", "-            // Create the child element", "-            final Object child = childConfigurer.createElement( object );", "-", "-            // Configure the child element", "-            configure( child, childConfig, context );", "-", "-            // Set the child element", "-            childConfigurer.addElement( object, child );", "-        }", "-        catch( final ConfigurationException ce )", "-        {", "-            final String message =", "-                REZ.getString( \"bad-configure-subelement.error\", childName );", "-            throw new ConfigurationException( message, ce );", "-        }", "-    }", "+     */", "+    private void configureElement( final ObjectConfigurer configurer,", "+                                   final Object object,", "+                                   final Configuration element,", "+                                   final Context context )", "+        throws ConfigurationException", "+    {", "+        final String elementName = element.getName();", "+", "+        if( DEBUG )", "+        {", "+            final String message =", "+                REZ.getString( \"configure-subelement.notice\", elementName );", "+            getLogger().debug( message );", "+        }", "+", "+        if( elementName.endsWith( \"-ref\" ) )", "+        {", "+            // A reference", "+            configureReference( configurer, object, element, context );", "+        }", "+        else", "+        {", "+            // An inline object", "+            configureInline( configurer, object, element, context );", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc45c1fc731beb29df232c78e9a1133d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "f87b5ed7757c30daca5cf875c95520a00dce2269", "commitAfterChange": "010a31e84477b60ff536725b388b38323540dcca", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private void configureElement( final Object object,                                    final Configuration configuration,                                    final Context context )         throws ConfigurationException", "signatureAfterChange": "     private void configureElement( final ObjectConfigurer configurer,                                    final Object object,                                    final Configuration childConfig,                                    final Context context )         throws ConfigurationException", "diff": ["+     */", "+    private void configureElement( final ObjectConfigurer configurer,", "+                                   final Object object,", "+                                   final Configuration childConfig,", "+                                   final Context context )", "+        throws ConfigurationException", "+    {", "+        final String childName = childConfig.getName();", "+", "+        if( DEBUG )", "+        {", "+            final String message =", "+                REZ.getString( \"configure-subelement.notice\", childName );", "+            getLogger().debug( message );", "+        }", "+", "+        // Locate the configurer for the child element", "+        final ElementConfigurer childConfigurer = configurer.getElement( childName );", "+        if( null == childConfigurer )", "+        {", "+            final String message = REZ.getString( \"unknown-subelement.error\", childName );", "+            throw new ConfigurationException( message );", "+        }", "+", "+        try", "+        {", "+            // Create the child element", "+            final Object child = childConfigurer.createElement( object );", "+", "+            // Configure the child element", "+            configure( child, childConfig, context );", "+", "+            // Set the child element", "+            childConfigurer.addElement( object, child );", "+        }", "+        catch( final ConfigurationException ce )", "+        {", "+            final String message =", "+                REZ.getString( \"bad-configure-subelement.error\", childName );", "+            throw new ConfigurationException( message, ce );", "-", "-    private void configureElement( final Object object,", "-                                   final Configuration configuration,", "-                                   final Context context )", "-        throws ConfigurationException", "-    {", "-        final String name = configuration.getName();", "-        final String javaName = getJavaNameFor( name );", "-", "-        // OMFG the rest of this is soooooooooooooooooooooooooooooooo", "-        // slow. Need to cache results per class etc.", "-        final Class clazz = object.getClass();", "-        Method methods[] = getMethodsFor( clazz, \"add\" + javaName );", "-", "-        if( 0 != methods.length )", "-        {", "-            //guess it is first method ????", "-            addElement( object, methods[ 0 ], configuration, context );", "-        }", "-        else", "-        {", "-            methods = getCreateMethodsFor( clazz, \"create\" + javaName );", "-", "-            if( 0 == methods.length )", "-            {", "-                final String message =", "-                    REZ.getString( \"no-element-method.error\", javaName );", "-                throw new ConfigurationException( message );", "-            }", "-", "-            //guess it is first method ????", "-            createElement( object, methods[ 0 ], configuration, context );", "-        }", "-    }"]}]}
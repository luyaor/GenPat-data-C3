{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9b593023e77cdd8a6c0746e0b521903a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f84cb412a70ae90bd841c62db392f81", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/launch/Launcher.java", "commitBeforeChange": "6867c1dd7e1ff94b1ab8f87a314a528eb847c69a", "commitAfterChange": "c12912c52bda86fe28ed7476165b6cc49ce8c0ee", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private void run(String[] args) throws MalformedURLException", "signatureAfterChange": "     private void run(String[] args) throws MalformedURLException", "diff": ["-        String libPath = \"\";", "-        String[] newargs = null;", "-        int argcount = -1;", "-        for (argcount = 0; argcount < args.length -1; argcount++) {", "-            if (args[argcount].equals(\"-lib\")) {", "-                libPath = args[argcount + 1];", "-                break;", "+", "+        List libPaths = new ArrayList();", "+        List argList = new ArrayList();", "+        String[] newArgs;", "+", "+        for (int i = 0; i < args.length; ++i) {", "+            if (args[i].equals(\"-lib\")) {", "+                if (i == args.length - 1) {", "+                    throw new IllegalStateException(\"The -lib argument must \"", "+                        + \"be followed by a library location\");", "+                }", "+                libPaths.add(args[++i]);", "+            } else {", "+                argList.add(args[i]);", "-        }", "-        if (args.length > 0 && args[args.length -1].equals(\"-lib\")) {", "-            // if the last argument is -lib", "-            // remove it from the arguments passed to Launcher", "-            //", "-            newargs = new String[args.length - 1];", "-            System.arraycopy(args, 0, newargs, 0, args.length -1);", "-        } else if (libPath.equals(\"\")) {", "-           newargs = new String[args.length];", "-           System.arraycopy(args, 0, newargs, 0, args.length);", "-        }  else {", "-            newargs = new String[args.length - 2];", "-            // copy the beginning of the args array", "-            if (argcount > 0 ) {", "-                System.arraycopy(args, 0, newargs, 0 ,argcount);", "-            }", "-            // copy the end of the args array", "-            if ((argcount + 2 < args.length) && argcount > 0) {", "-                System.arraycopy(args, argcount + 2, newargs, argcount, args.length - (argcount + 2));", "-            }", "-        }", "-        StringTokenizer myTokenizer = new StringTokenizer(libPath, System.getProperty(\"path.separator\"));", "-        URL[] classPathJars = new URL[myTokenizer.countTokens()];", "-        int classPathJarCount = 0;", "-        while (myTokenizer.hasMoreElements()) {", "-            String token = myTokenizer.nextToken();", "-            classPathJars[classPathJarCount++] = new File(token).toURL();", "+        if (libPaths.size() == 0) {", "+            newArgs = args;", "+        } else {", "+            newArgs = (String[]) argList.toArray(new String[0]);", "+        }", "+", "+        List libPathURLs = new ArrayList();", "+        for (Iterator i = libPaths.iterator(); i.hasNext();) {", "+            String libPath = (String) i.next();", "+            StringTokenizer myTokenizer", "+                = new StringTokenizer(libPath, System.getProperty(\"path.separator\"));", "+            while (myTokenizer.hasMoreElements()) {", "+                File element = new File(myTokenizer.nextToken());", "+                if (element.isDirectory()) {", "+                    // add any jars in the directory", "+                    URL[] dirURLs = Locator.getLocationURLs(element);", "+                    for (int j = 0; j < dirURLs.length; ++j) {", "+                        libPathURLs.add(dirURLs[j]);", "+                    }", "+                }", "+                libPathURLs.add(element.toURL());", "+            }", "+        }", "+", "+        URL[] libJars = (URL[])libPathURLs.toArray(new URL[0]);", "-        int numJars = classPathJars.length + userJars.length + systemJars.length;", "+        int numJars = libJars.length + userJars.length + systemJars.length;", "-        System.arraycopy(classPathJars, 0, jars, 0, classPathJars.length);", "-        System.arraycopy(userJars, 0, jars, classPathJars.length, userJars.length);", "-        System.arraycopy(systemJars, 0, jars, userJars.length + classPathJars.length,", "+        System.arraycopy(libJars, 0, jars, 0, libJars.length);", "+        System.arraycopy(userJars, 0, jars, libJars.length, userJars.length);", "+        System.arraycopy(systemJars, 0, jars, userJars.length + libJars.length,", "+        if (baseClassPath.charAt(baseClassPath.length() - 1)", "+                == File.pathSeparatorChar) {", "+            baseClassPath.setLength(baseClassPath.length() - 1);", "+        }", "-            main.startAnt(newargs, null, null);", "+            main.startAnt(newArgs, null, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "870e930c05cdf4689786351605ca1f3b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "ec980be7345681968c93f0609e9a3fecb39b9753", "commitAfterChange": "fbb9886634198d8377104bef9ec697fadeb134df", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private void checkAndExecute()", "signatureAfterChange": "     private ResourceCollection validate()", "diff": ["-    private void checkAndExecute() {", "+    private ResourceCollection validate() {", "-                    \"DestFile attribute is required for binary concatenation\");", "+                    \"destfile attribute is required for binary concatenation\");", "-", "-", "-", "-        if (sources.size() == 0 && textBuffer == null) {", "+        if (rc == null && textBuffer == null) {", "-                \"At least one file must be provided, or some text.\");", "+                \"At least one resource must be provided, or some text.\");", "-", "-        // If using filesets, disallow inline text. This is similar to", "-        // using GNU 'cat' with file arguments -- stdin is simply", "-        // ignored.", "-        if (sources.size() > 0 && textBuffer != null) {", "-            throw new BuildException(", "-                \"Cannot include inline text when using filesets.\");", "-        }", "-", "-        // Iterate thru the sources - paths, filesets and filelists", "-        for (Enumeration e = sources.elements(); e.hasMoreElements();) {", "-            Object o = e.nextElement();", "-            if (o instanceof Path) {", "-                Path path = (Path) o;", "-                checkAddFiles(null, path.list());", "-", "-            } else if (o instanceof FileSet) {", "-                FileSet fileSet = (FileSet) o;", "-                DirectoryScanner scanner =", "-                    fileSet.getDirectoryScanner(getProject());", "-                checkAddFiles(fileSet.getDir(getProject()),", "-                              scanner.getIncludedFiles());", "-", "-            } else if (o instanceof FileList) {", "-                FileList fileList = (FileList) o;", "-                checkAddFiles(fileList.getDir(getProject()),", "-                              fileList.getFiles(getProject()));", "+        if (rc != null) {", "+            // If using resources, disallow inline text. This is similar to", "+            // using GNU 'cat' with file arguments -- stdin is simply", "+            // ignored.", "+            if (textBuffer != null) {", "+                throw new BuildException(", "+                    \"Cannot include inline text when using resources.\");", "-        }", "-", "-        // check if the files are outofdate", "-        if (destinationFile != null && !forceOverwrite", "-            && (sourceFiles.size() > 0) && destinationFile.exists()) {", "-            boolean outofdate = false;", "-            for (int i = 0; i < sourceFiles.size(); ++i) {", "-                File file = (File) sourceFiles.elementAt(i);", "-                if (file.lastModified() > destinationFile.lastModified()) {", "-                    outofdate = true;", "-                    break;", "+            Restrict noexistRc = new Restrict();", "+            noexistRc.add(NOT_EXISTS);", "+            noexistRc.add(rc);", "+            for (Iterator i = noexistRc.iterator(); i.hasNext();) {", "+                log(i.next() + \" does not exist.\", Project.MSG_ERR);", "+            }", "+            if (destinationFile != null) {", "+                for (Iterator i = rc.iterator(); i.hasNext();) {", "+                    Object o = i.next();", "+                    if (o instanceof FileResource) {", "+                        File f = ((FileResource) o).getFile();", "+                        if (FILE_UTILS.fileNameEquals(f, destinationFile)) {", "+                            throw new BuildException(\"Input file \\\"\"", "+                                + f + \"\\\" is the same as the output file.\");", "+                        }", "+                    }", "+                }", "+            }", "+            Restrict existRc = new Restrict();", "+            existRc.add(EXISTS);", "+            existRc.add(rc);", "+            boolean outofdate = destinationFile == null || forceOverwrite;", "+            if (!outofdate) {", "+                for (Iterator i = existRc.iterator(); !outofdate && i.hasNext();) {", "+                    Resource r = (Resource) i.next();", "-                return; // no need to do anything", "+                return null; // no need to do anything", "+            return existRc;", "+        } else {", "+            StringResource s = new StringResource();", "+            s.setProject(getProject());", "+            s.setValue(textBuffer.toString());", "+            return s;", "+    }", "-        // Do nothing if all the sources are not present", "-        // And textBuffer is null", "-        if (textBuffer == null && sourceFiles.size() == 0", "-            && header == null && footer == null) {", "-            log(\"No existing files and no nested text, doing nothing\",", "-", "-            binaryCat();", "-            cat();", "-        }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92d8f3914a14b2a625e8dae8f98c5ee5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "85875db138d8efbc050b5d34dbba19cc9c707db6", "commitAfterChange": "d53f5e961288efbb6a95db34d841b31d9571ea1b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void execute()          throws BuildException", "signatureAfterChange": "     public void execute()          throws BuildException", "diff": ["-        // Iterate the FileSet collection, concatenating each file as", "-        // it is encountered.", "-        for (Enumeration e = fileSets.elements(); e.hasMoreElements(); ) {", "-", "-            // Root directory for files.", "-            File fileSetBase = null;", "-", "-            // List of files.", "-            String[] srcFiles = null;", "-", "-            // Get the next file set, which could be a FileSet or a", "-            // FileList instance.", "-            Object next = e.nextElement();", "-", "-            if (next instanceof FileSet) {", "-", "-                FileSet fileSet = (FileSet) next;", "-", "-                // Get a directory scanner from the file set, which will", "-                // determine the files from the set which need to be", "-                // concatenated.", "-                DirectoryScanner scanner = ", "-                    fileSet.getDirectoryScanner(project);", "-", "-                // Determine the root path.", "-                fileSetBase = fileSet.getDir(project);", "-", "-                // Get the list of files.", "-                srcFiles = scanner.getIncludedFiles();", "-", "-            } else if (next instanceof FileList) {", "-", "-                FileList fileList = (FileList) next;", "-", "-                // Determine the root path.", "-                fileSetBase = fileList.getDir(project);", "-", "-                // Get the list of files.", "-                srcFiles = fileList.getFiles(project);", "-", "-            }", "-", "-            // Concatenate the files.", "-            catFiles(fileSetBase, srcFiles);", "+        // If using filesets, disallow inline text. This is similar to", "+        // using GNU 'cat' with file arguments -- stdin is simply", "+        // ignored.", "+        if (fileSets.size() > 0 && textBuffer != null) {", "+            throw new BuildException(\"Cannot include inline text \" + ", "+                                     \"when using filesets.\");", "+        boolean savedAppend = append;", "+        try {", "+            // Iterate the FileSet collection, concatenating each file as", "+            // it is encountered.", "+            for (Enumeration e = fileSets.elements(); e.hasMoreElements(); ) {", "+                ", "+                // Root directory for files.", "+                File fileSetBase = null;", "+                ", "+                // List of files.", "+                String[] srcFiles = null;", "+                ", "+                // Get the next file set, which could be a FileSet or a", "+                // FileList instance.", "+                Object next = e.nextElement();", "+                ", "+                if (next instanceof FileSet) {", "+                    ", "+                    FileSet fileSet = (FileSet) next;", "+                    ", "+                    // Get a directory scanner from the file set, which will", "+                    // determine the files from the set which need to be", "+                    // concatenated.", "+                    DirectoryScanner scanner = ", "+                        fileSet.getDirectoryScanner(project);", "+                    ", "+                    // Determine the root path.", "+                    fileSetBase = fileSet.getDir(project);", "+                    ", "+                    // Get the list of files.", "+                    srcFiles = scanner.getIncludedFiles();", "+                    ", "+                } else if (next instanceof FileList) {", "+                    ", "+                    FileList fileList = (FileList) next;", "+                    ", "+                    // Determine the root path.", "+                    fileSetBase = fileList.getDir(project);", "+                    ", "+                    // Get the list of files.", "+                    srcFiles = fileList.getFiles(project);", "+                    ", "+                }", "+", "+                // Concatenate the files.", "+                if (srcFiles != null) {", "+                    catFiles(fileSetBase, srcFiles);", "+                }", "+            }", "+        } finally {", "+            append = savedAppend;", "+        }", "+        ", "+    }", "-        // Reset state to default."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f95b2e652d4f8a659ddaa39aca57584c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "96e6561e659a24f1e2122d884e83561327cb0f48", "commitAfterChange": "88dcebf815f27d9b16735745605342963870010e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void execute()          throws BuildException", "signatureAfterChange": "     public void execute()          throws BuildException", "diff": ["-        if (fileSets.size() == 0 && textBuffer == null) {", "+        if (sources.size() == 0 && textBuffer == null) {", "-        if (fileSets.size() > 0 && textBuffer != null) {", "+        if (sources.size() > 0 && textBuffer != null) {", "-        boolean savedAppend = append;", "-        try {", "-            // Iterate the FileSet collection, concatenating each file as", "-            // it is encountered.", "-            for (Enumeration e = fileSets.elements(); e.hasMoreElements();) {", "-                ", "-                // Root directory for files.", "-                File fileSetBase = null;", "-                ", "-                // List of files.", "-                String[] srcFiles = null;", "-                ", "-                // Get the next file set, which could be a FileSet or a", "-                // FileList instance.", "-                Object next = e.nextElement();", "-                ", "-                if (next instanceof FileSet) {", "-                    ", "-                    FileSet fileSet = (FileSet) next;", "-                    ", "-                    // Get a directory scanner from the file set, which will", "-                    // determine the files from the set which need to be", "-                    // concatenated.", "-                    DirectoryScanner scanner = ", "-                        fileSet.getDirectoryScanner(getProject());", "-                    ", "-                    // Determine the root path.", "-                    fileSetBase = fileSet.getDir(getProject());", "-                    ", "-                    // Get the list of files.", "-                    srcFiles = scanner.getIncludedFiles();", "-                    ", "-                } else if (next instanceof FileList) {", "-                    ", "-                    FileList fileList = (FileList) next;", "-                    ", "-                    // Determine the root path.", "-                    fileSetBase = fileList.getDir(getProject());", "-                    ", "-                    // Get the list of files.", "-                    srcFiles = fileList.getFiles(getProject());", "-                    ", "-                }", "+        // Iterate thru the sources - paths, filesets and filelists", "+        for (Enumeration e = sources.elements(); e.hasMoreElements();) {", "+            Object o = e.nextElement();", "+            if (o instanceof Path) {", "+                Path path = (Path) o;", "+                checkAddFiles(null, path.list());", "-                // Concatenate the files.", "-                if (srcFiles != null) {", "-                    catFiles(fileSetBase, srcFiles);", "-                } else {", "-                    log(\"Warning: Concat received empty fileset.\", ", "-                        Project.MSG_WARN);", "+            } else if (o instanceof FileSet) {", "+                FileSet fileSet = (FileSet) o;", "+                DirectoryScanner scanner =", "+                    fileSet.getDirectoryScanner(getProject());", "+                checkAddFiles(fileSet.getDir(getProject()),", "+                              scanner.getIncludedFiles());", "+", "+            } else if (o instanceof FileList) {", "+                FileList fileList = (FileList) o;", "+                checkAddFiles(fileList.getDir(getProject()),", "+                              fileList.getFiles(getProject()));", "+            }", "+        }", "+", "+        // check if the files are outofdate", "+        if (destinationFile != null && !forceOverwrite", "+            && (sourceFiles.size() > 0) && destinationFile.exists()) {", "+            boolean outofdate = false;", "+            for (int i = 0; i < sourceFiles.size(); ++i) {", "+                File file = (File) sourceFiles.elementAt(i);", "+                if (file.lastModified() > destinationFile.lastModified()) {", "+                    outofdate = true;", "+                    break;", "-        } finally {", "-            append = savedAppend;", "+            if (!outofdate) {", "+                log(destinationFile + \" is up-to-date.\", Project.MSG_VERBOSE);", "+                return; // no need to do anything", "+            }", "-        ", "-        // Now, cat the inline text, if applicable.", "-        catText();", "+", "+        // Do nothing if all the sources are not present", "+        // And textBuffer is null", "+        if (textBuffer == null && sourceFiles.size() == 0 ", "+            && header == null && footer == null) {", "+            log(\"No existing files and no nested text, doing nothing\", ", "+                Project.MSG_INFO);", "+            return;", "+        }", "+", "+        cat();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff2f72c0c84ca83c9897adb4643298b5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteOn.java", "commitBeforeChange": "9ff2d6a1ab17e51f25cadf8de2a1b7ada8c15490", "commitAfterChange": "eefa2aba55ad71e6c5ee6e54748b1dc76025c7ac", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 10, "signatureBeforeChange": "     protected String[] getCommandline(String[] srcFiles, File baseDir)", "signatureAfterChange": "     protected String[] getCommandline(String[] srcFiles, File[] baseDirs)", "diff": ["-    protected String[] getCommandline(String[] srcFiles, File baseDir) {", "-        String[] orig = cmdl.getCommandline();", "-        String[] result = new String[orig.length+srcFiles.length];", "-", "-        int index = orig.length;", "-        if (srcFilePos != null) {", "-            index = srcFilePos.getPosition();", "+    protected String[] getCommandline(String[] srcFiles, File[] baseDirs) {", "+        Vector targets = new Vector();", "+        if (targetFilePos != null) {", "+            Hashtable addedFiles = new Hashtable();", "+            for (int i=0; i<srcFiles.length; i++) {", "+                String[] subTargets = mapper.mapFileName(srcFiles[i]);", "+                if (subTargets != null) {", "+                    for (int j=0; j<subTargets.length; j++) {", "+                        String name = (new File(destDir, subTargets[j])).getAbsolutePath();", "+                        if (!addedFiles.contains(name)) {", "+                            targets.addElement(name);", "+                            addedFiles.put(name, name);", "+                        }", "+                    }", "+                }", "+            }", "-        System.arraycopy(orig, 0, result, 0, index);", "-", "-        for (int i=0; i < srcFiles.length; i++) {", "-            result[index+i] = (new File(baseDir, srcFiles[i])).getAbsolutePath();", "-        }", "+        String[] targetFiles = new String[targets.size()];", "+        targets.copyInto(targetFiles);", "-        System.arraycopy(orig, index, result, index+srcFiles.length, ", "-                         orig.length-index);", "+        String[] orig = cmdl.getCommandline();", "+        String[] result = new String[orig.length+srcFiles.length+targetFiles.length];", "+", "+        int srcIndex = orig.length;", "+        if (srcFilePos != null) {", "+            srcIndex = srcFilePos.getPosition();", "+        }", "+", "+        if (targetFilePos != null) {", "+            int targetIndex = targetFilePos.getPosition();", "+", "+            if (srcIndex < targetIndex ", "+                || (srcIndex == targetIndex && srcIsFirst)) {", "+", "+                // 0 --> srcIndex", "+                System.arraycopy(orig, 0, result, 0, srcIndex);", "+                ", "+                // srcIndex --> targetIndex", "+                System.arraycopy(orig, srcIndex, result, ", "+                                 srcIndex + srcFiles.length,", "+                                 targetIndex - srcIndex);", "+                ", "+                // targets are already absolute file names", "+                System.arraycopy(targetFiles, 0, result, ", "+                                 targetIndex + srcFiles.length, ", "+                                 targetFiles.length);", "+                ", "+                // targetIndex --> end", "+                System.arraycopy(orig, targetIndex, result, ", "+                                 targetIndex + srcFiles.length + targetFiles.length,", "+                                 orig.length - targetIndex);", "+            } else {", "+                // 0 --> targetIndex", "+                System.arraycopy(orig, 0, result, 0, targetIndex);", "+                ", "+                // targets are already absolute file names", "+                System.arraycopy(targetFiles, 0, result, ", "+                                 targetIndex,", "+                                 targetFiles.length);", "+                ", "+                // targetIndex --> srcIndex", "+                System.arraycopy(orig, targetIndex, result, ", "+                                 targetIndex + targetFiles.length,", "+                                 srcIndex - targetIndex);", "+                ", "+                // srcIndex --> end", "+                System.arraycopy(orig, srcIndex, result, ", "+                                 srcIndex + srcFiles.length + targetFiles.length,", "+                                 orig.length - srcIndex);", "+                srcIndex += targetFiles.length;", "+            }", "+", "+        } else { // no targetFilePos", "+            System.arraycopy(orig, 0, result, 0, srcIndex);", "+        }", "+", "+        // fill in source file names", "+        for (int i=0; i < srcFiles.length; i++) {", "+            result[srcIndex+i] = ", "+                (new File(baseDirs[i], srcFiles[i])).getAbsolutePath();", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e9de97fa86e591fb4e197a0ab9f10af", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a3dfab58e71cad814a0b533b48f566f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/embeddor/DefaultEmbeddor.java", "commitBeforeChange": "e7ab62bc9179b392804835d02155e43d3d2cf5d6", "commitAfterChange": "2e6e170fb375181f4438e1de44808c7adab508a2", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private void setupComponent( final Component component )         throws Exception", "signatureAfterChange": "     private void setupObject( final Object object,                               final Parameters parameters )         throws Exception", "diff": ["-     */", "-    private void setupComponent( final Component component )", "-        throws Exception", "-    {", "-        setupLogger( component );", "-", "-        if( component instanceof Composable )", "-            ( (Composable)component ).compose( m_componentManager );", "-        }", "-", "-        if( component instanceof Parameterizable )", "-        {", "-            ( (Parameterizable)component ).parameterize( m_parameters );", "-        }", "-", "-        if( component instanceof Initializable )", "-        {", "-            ( (Initializable)component ).initialize();", "+     */", "+    private void setupObject( final Object object,", "+                              final Parameters parameters )", "+        throws Exception", "+    {", "+        setupLogger( object );", "+", "+        if( object instanceof Composable )", "+        {", "+            ( (Composable)object ).compose( m_componentManager );", "+        }", "+", "+        if( object instanceof Parameterizable )", "+        {", "+            ( (Parameterizable)object ).parameterize( parameters );", "+        }", "+", "+        if( object instanceof Initializable )", "+        {", "+            ( (Initializable)object ).initialize();", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d9387bd6576ebbcea9d83eb84a4cad3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antlibs/ant1compat/org/apache/tools/ant/Ant1Factory.java", "commitBeforeChange": "83dc385bd01fbc8ee2fb166b9a5605bdc6958d76", "commitAfterChange": "bf844382c856f7b51c56024189c93f11d34cb720", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public Object createTypeInstance(Class typeClass, String localName)          throws InstantiationException, IllegalAccessException,         ExecutionException", "signatureAfterChange": "     public Object createComponent(Class componentClass, String localName)          throws InstantiationException, IllegalAccessException,         ExecutionException", "diff": ["-    public Object createTypeInstance(Class typeClass, String localName)", "+    public Object createComponent(Class componentClass, String localName)", "-            java.lang.reflect.Constructor ctor = null;", "+            java.lang.reflect.Constructor constructor = null;", "-            Object o = null;", "+            Object component = null;", "-                ctor = typeClass.getConstructor(new Class[0]);", "-                o = ctor.newInstance(new Object[0]);", "+                constructor = componentClass.getConstructor(new Class[0]);", "+                component = constructor.newInstance(new Object[0]);", "-                ctor = typeClass.getConstructor(new Class[]{Project.class});", "-                o = ctor.newInstance(new Object[]{project});", "+                constructor ", "+                    = componentClass.getConstructor(new Class[]{Project.class});", "+                component = constructor.newInstance(new Object[]{project});", "-            if (o instanceof ProjectComponent) {", "-                ((ProjectComponent)o).setProject(project);", "+            if (component instanceof ProjectComponent) {", "+                ((ProjectComponent)component).setProject(project);", "-            return o;", "+            return component;", "-            String msg = \"Could not create datatype of type: \"", "-                 + typeClass.getName() + \" due to \" + t;", "+            String msg = \"Could not create component of type: \"", "+                 + componentClass.getName() + \" due to \" + t;", "-                 + \"constructor for type \" + typeClass.getName(), e);", "+                 + \"constructor for component \" + componentClass.getName(), e);", "-    }"]}]}
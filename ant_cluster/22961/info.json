{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ab0a45b3c67f3f20d82bfc921017f71c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "303e1161713ba9bd9d04e2782e1e20cb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/UnknownElement.java", "commitBeforeChange": "12e8a63e2f797fdfb28e9f30761669465cb033ee", "commitAfterChange": "f9121ee81e58e6cb4369a4e043e0a88cbfe3e503", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void maybeConfigure() throws BuildException", "signatureAfterChange": "     public void maybeConfigure() throws BuildException", "diff": ["-        realThing = makeObject(this, wrapper);", "+        realThing = makeObject(this, getWrapper());", "-        wrapper.setProxy(realThing);", "+        getWrapper().setProxy(realThing);", "-            ((Task) realThing).setRuntimeConfigurableWrapper(wrapper);", "+            ((Task) realThing).setRuntimeConfigurableWrapper(getWrapper());", "-        handleChildren(realThing, wrapper);", "+        handleChildren(realThing, getWrapper());", "-        wrapper.maybeConfigure(getProject());", "+        getWrapper().maybeConfigure(getProject());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed666cc7bdc2298fd483d3e67dab7211", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/helper/ProjectHelper2.java", "commitBeforeChange": "7cbce4bf09d398a8f7cb9011b3f859f09274aa82", "commitAfterChange": "c2dba687256b368d6ca095487a17d432dcab22e4", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void parse(Project project, Object source)             throws BuildException", "signatureAfterChange": "      public void parse(Project project, Object source)             throws BuildException", "diff": ["-            throws BuildException", "-    {", "+            throws BuildException {", "-        AntXmlContext context=null;", "-        context=(AntXmlContext)project.getReference(\"ant.parsing.context\");", "+        AntXMLContext context = null;", "+        context = (AntXMLContext) project.getReference(\"ant.parsing.context\");", "-        if (context==null ) {", "-            context=new AntXmlContext(project, this);", "-            project.addReference( \"ant.parsing.context\", context );", "-            project.addReference( \"ant.targets\", context.targetVector );", "+        if (context == null) {", "+            context = new AntXMLContext(project);", "+            project.addReference(\"ant.parsing.context\", context);", "+            project.addReference(\"ant.targets\", context.getTargets());", "-        if (this.getImportStack().size() > 1 ) {", "+        if (this.getImportStack().size() > 1) {", "-            context.ignoreProjectTag=true;", "+            context.setIgnoreProjectTag(true);", "-            parse(project, source,new RootHandler(context));", "+            parse(project, source, new RootHandler(context));", "-            context.implicitTarget.execute();", "+            context.getImplicitTarget().execute();"]}]}
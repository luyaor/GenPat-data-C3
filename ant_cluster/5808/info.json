{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f8f5e900d2c26bfe3ef6b8dac230ae32", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c8fd0d98be1c3fe1aa57874834cc931", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/rmic/RmicAdapterFactory.java", "commitBeforeChange": "4f1e68bd2b9b912702ce0d1588688b5491be0ad5", "commitAfterChange": "c767541c7d35c9eef55bf65e686373b02b71af2a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public static RmicAdapter getRmic(String rmicType, Task task,                                       Path classpath)         throws BuildException", "signatureAfterChange": "     public static RmicAdapter getRmic(String rmicType, Task task,                                       Path classpath)         throws BuildException", "diff": ["-        //convert to lower case in the English locale,", "-        String compiler = rmicType.toLowerCase(Locale.ENGLISH);", "-", "-        if (DEFAULT_COMPILER.equals(compiler) || compiler.length() == 0) {", "-            compiler = KaffeRmic.isAvailable()", "+        if (DEFAULT_COMPILER.equalsIgnoreCase(rmicType) || rmicType.length() == 0) {", "+            rmicType = KaffeRmic.isAvailable()", "-        if (SunRmic.COMPILER_NAME.equals(compiler)) {", "+        if (SunRmic.COMPILER_NAME.equalsIgnoreCase(rmicType)) {", "-        } else if (KaffeRmic.COMPILER_NAME.equals(compiler)) {", "+        } else if (KaffeRmic.COMPILER_NAME.equalsIgnoreCase(rmicType)) {", "-        } else if (WLRmic.COMPILER_NAME.equals(compiler)) {", "+        } else if (WLRmic.COMPILER_NAME.equalsIgnoreCase(rmicType)) {", "-        } else if (ForkingSunRmic.COMPILER_NAME.equals(compiler)) {", "+        } else if (ForkingSunRmic.COMPILER_NAME.equalsIgnoreCase(rmicType)) {", "-        } else if (XNewRmic.COMPILER_NAME.equals(compiler)) {", "+        } else if (XNewRmic.COMPILER_NAME.equalsIgnoreCase(rmicType)) {", "-        //no match? ask for the non-lower-cased type", "+        //no match?"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f291a61105d16e5f1d707b14fe54a075", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/junit/BatchTestTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 0, "signatureBeforeChange": "       public void testParseTestMethodNamesList()", "signatureAfterChange": "      \t@Test     public void testParseTestMethodNamesList()", "diff": ["-", "+\t@Test", "-        assertEquals(new String[0], JUnitTest.parseTestMethodNamesList(\"\"));", "-        assertEquals(new String[0], JUnitTest.parseTestMethodNamesList(\" \"));", "-        assertEquals(new String[0], JUnitTest.parseTestMethodNamesList(\"  \"));", "+        assertArrayEquals(new String[0], JUnitTest.parseTestMethodNamesList(\"\"));", "+        assertArrayEquals(new String[0], JUnitTest.parseTestMethodNamesList(\" \"));", "+        assertArrayEquals(new String[0], JUnitTest.parseTestMethodNamesList(\"  \"));", "-        assertEquals(new String[] {\"abc\"}, JUnitTest.parseTestMethodNamesList(\"abc\"));", "-        assertEquals(new String[] {\"abc\"}, JUnitTest.parseTestMethodNamesList(\"abc \"));", "-        assertEquals(new String[] {\"abc\"}, JUnitTest.parseTestMethodNamesList(\" abc\"));", "-        assertEquals(new String[] {\"abc\"}, JUnitTest.parseTestMethodNamesList(\" abc \"));", "-        assertEquals(new String[] {\"abc\"}, JUnitTest.parseTestMethodNamesList(\"abc  \"));", "-        assertEquals(new String[] {\"abc\"}, JUnitTest.parseTestMethodNamesList(\"abc,\"));", "-        assertEquals(new String[] {\"abc\"}, JUnitTest.parseTestMethodNamesList(\"abc, \"));", "-        assertEquals(new String[] {\"abc\"}, JUnitTest.parseTestMethodNamesList(\"abc ,\"));", "-        assertEquals(new String[] {\"abc\"}, JUnitTest.parseTestMethodNamesList(\"abc , \"));", "-        assertEquals(new String[] {\"abc\"}, JUnitTest.parseTestMethodNamesList(\" abc  ,\"));", "+        assertArrayEquals(new String[] {\"abc\"}, JUnitTest.parseTestMethodNamesList(\"abc\"));", "+        assertArrayEquals(new String[] {\"abc\"}, JUnitTest.parseTestMethodNamesList(\"abc \"));", "+        assertArrayEquals(new String[] {\"abc\"}, JUnitTest.parseTestMethodNamesList(\" abc\"));", "+        assertArrayEquals(new String[] {\"abc\"}, JUnitTest.parseTestMethodNamesList(\" abc \"));", "+        assertArrayEquals(new String[] {\"abc\"}, JUnitTest.parseTestMethodNamesList(\"abc  \"));", "+        assertArrayEquals(new String[] {\"abc\"}, JUnitTest.parseTestMethodNamesList(\"abc,\"));", "+        assertArrayEquals(new String[] {\"abc\"}, JUnitTest.parseTestMethodNamesList(\"abc, \"));", "+        assertArrayEquals(new String[] {\"abc\"}, JUnitTest.parseTestMethodNamesList(\"abc ,\"));", "+        assertArrayEquals(new String[] {\"abc\"}, JUnitTest.parseTestMethodNamesList(\"abc , \"));", "+        assertArrayEquals(new String[] {\"abc\"}, JUnitTest.parseTestMethodNamesList(\" abc  ,\"));", "-        assertEquals(new String[] {\"a\"}, JUnitTest.parseTestMethodNamesList(\"a\"));", "-        assertEquals(new String[] {\"a1\"}, JUnitTest.parseTestMethodNamesList(\"a1\"));", "-        assertEquals(new String[] {\"a$\"}, JUnitTest.parseTestMethodNamesList(\"a$\"));", "-        assertEquals(new String[] {\"a$1\"}, JUnitTest.parseTestMethodNamesList(\"a$1\"));", "-        assertEquals(new String[] {\"_bc\"}, JUnitTest.parseTestMethodNamesList(\"_bc\"));", "-        assertEquals(new String[] {\"___\"}, JUnitTest.parseTestMethodNamesList(\"___\"));", "+        assertArrayEquals(new String[] {\"a\"}, JUnitTest.parseTestMethodNamesList(\"a\"));", "+        assertArrayEquals(new String[] {\"a1\"}, JUnitTest.parseTestMethodNamesList(\"a1\"));", "+        assertArrayEquals(new String[] {\"a$\"}, JUnitTest.parseTestMethodNamesList(\"a$\"));", "+        assertArrayEquals(new String[] {\"a$1\"}, JUnitTest.parseTestMethodNamesList(\"a$1\"));", "+        assertArrayEquals(new String[] {\"_bc\"}, JUnitTest.parseTestMethodNamesList(\"_bc\"));", "+        assertArrayEquals(new String[] {\"___\"}, JUnitTest.parseTestMethodNamesList(\"___\"));", "-        assertEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\"abc,def\"));", "-        assertEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\"abc,def,\"));", "-        assertEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\"abc,def \"));", "-        assertEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\"abc, def\"));", "-        assertEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\"abc, def \"));", "-        assertEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\"abc ,def\"));", "-        assertEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\"abc ,def \"));", "-        assertEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\"abc , def\"));", "-        assertEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\"abc , def \"));", "-        assertEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\" abc,def\"));", "-        assertEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\" abc,def \"));", "-        assertEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\" abc, def\"));", "-        assertEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\" abc, def \"));", "-        assertEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\" abc ,def\"));", "-        assertEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\" abc ,def \"));", "-        assertEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\" abc , def\"));", "-        assertEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\" abc , def \"));", "-        assertEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\" abc , def ,\"));", "+        assertArrayEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\"abc,def\"));", "+        assertArrayEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\"abc,def,\"));", "+        assertArrayEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\"abc,def \"));", "+        assertArrayEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\"abc, def\"));", "+        assertArrayEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\"abc, def \"));", "+        assertArrayEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\"abc ,def\"));", "+        assertArrayEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\"abc ,def \"));", "+        assertArrayEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\"abc , def\"));", "+        assertArrayEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\"abc , def \"));", "+        assertArrayEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\" abc,def\"));", "+        assertArrayEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\" abc,def \"));", "+        assertArrayEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\" abc, def\"));", "+        assertArrayEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\" abc, def \"));", "+        assertArrayEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\" abc ,def\"));", "+        assertArrayEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\" abc ,def \"));", "+        assertArrayEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\" abc , def\"));", "+        assertArrayEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\" abc , def \"));", "+        assertArrayEquals(new String[] {\"abc\", \"def\"}, JUnitTest.parseTestMethodNamesList(\" abc , def ,\"));"]}]}
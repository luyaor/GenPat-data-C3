{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dfde0d39f0d39f81dc87d8bd5f2a46c4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17edfa9b159f2e23f2c0cebaa3a837d8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/test/org/apache/myrmidon/components/AbstractComponentTest.java", "commitBeforeChange": "8cab56ee0ec0c658d0dec674d305630eb8e88bf4", "commitAfterChange": "f5ba55efa18fa862c2a4f5762198c2a9481f287e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected final ServiceManager getServiceManager() throws Exception", "signatureAfterChange": "     protected final ServiceManager getServiceManager() throws Exception", "diff": ["+            // Contextualise the components", "+            final Context context = new DefaultContext( getParameters() );", "+            for( Iterator iterator = components.iterator(); iterator.hasNext(); )", "+            {", "+                Object obj = iterator.next();", "+                if( obj instanceof Contextualizable )", "+                {", "+                    final Contextualizable contextualizable = (Contextualizable)obj;", "+                    contextualizable.contextualize( context );", "+                }", "+            }", "+", "-                }", "-            }", "-", "-            // Parameterise the components", "-            final Parameters parameters = getParameters();", "-            for( Iterator iterator = components.iterator(); iterator.hasNext(); )", "-            {", "-                Object obj = iterator.next();", "-                if( obj instanceof Parameterizable )", "-                {", "-                    final Parameterizable parameterizable = (Parameterizable)obj;", "-                    parameterizable.parameterize( parameters );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "539b948ffedd25e824bf2994a7c26328", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/PumpStreamHandler.java", "commitBeforeChange": "5a6247d496855302f131c8b8a0bb74e652ea050a", "commitAfterChange": "1b30eea4620f697369cb2948254e5ad7fac5fe99", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": " StreamPumper createInputPump(InputStream is, OutputStream os,                                 boolean closeWhenExhausted)", "signatureAfterChange": "     protected Thread createPump(InputStream is, OutputStream os,                                 boolean closeWhenExhausted, boolean nonBlockingIO)", "diff": ["-    /*protected*/ StreamPumper createInputPump(InputStream is, OutputStream os,", "-                                boolean closeWhenExhausted) {", "-        StreamPumper pumper = new StreamPumper(is, os, closeWhenExhausted,", "-                                               false);", "-        pumper.setAutoflush(true);", "-        return pumper;", "+    protected Thread createPump(InputStream is, OutputStream os,", "+                                boolean closeWhenExhausted, boolean nonBlockingIO) {", "+        final Thread result", "+            = new ThreadWithPumper(new StreamPumper(is, os,", "+                                                    closeWhenExhausted,", "+                                                    nonBlockingIO));", "+        result.setDaemon(true);", "+        return result;"]}]}
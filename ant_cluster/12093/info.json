{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "46c9508d3baf5a5df0b0a24877328bfd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31e8fd8fd9d74592e796362c531c9045", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "596d7e465f62f4783ed3ac41870098d56d018322", "commitAfterChange": "f4fc4080573cc5711f0e2b888fe9d0af6720eaca", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            // Process all transactions", "-            for (Enumeration e = transactions.elements(); ", "-                 e.hasMoreElements();) {", "-                ((Transaction) e.nextElement()).runTransaction();", "-                if (!autocommit) {", "-                    log(\"Commiting transaction\", Project.MSG_VERBOSE);", "-                    conn.commit();", "+            ", "+            PrintStream out = System.out;", "+            try {", "+                if (output != null) {", "+        \t    log(\"Opening PrintStream to output file \" + output, Project.MSG_VERBOSE);", "+                    out = new PrintStream(new BufferedOutputStream(new FileOutputStream(output)));", "+                }", "+                        ", "+                // Process all transactions", "+                for (Enumeration e = transactions.elements(); ", "+                     e.hasMoreElements();) {", "+                       ", "+                    ((Transaction) e.nextElement()).runTransaction(out);", "+                    if (!autocommit) {", "+                        log(\"Commiting transaction\", Project.MSG_VERBOSE);", "+                        conn.commit();", "+                    }", "-            ", "+            finally {", "+                if (out != null && out != System.out) {", "+                    out.close();", "+                }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2423b40c4a51fc9846f9289418459b7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Jar.java", "commitBeforeChange": "f2bc3fe7c89755a2e53e79aaf636b4177fe8928d", "commitAfterChange": "cc911f59921cda9a230eebd58c4ab6d9e292d5e9", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "     protected boolean isUpToDate(FileScanner[] scanners, File zipFile) throws BuildException", "signatureAfterChange": "     protected boolean isUpToDate(FileScanner[] scanners, File zipFile) throws BuildException", "diff": ["-        if (manifestFile != null && manifestFile.lastModified() > zipFile.lastModified()) {", "+        if (buildFileManifest || manifestFile == null) {", "+            java.util.zip.ZipFile theZipFile = null;", "+            try {", "+                theZipFile = new java.util.zip.ZipFile(zipFile);", "+                java.util.zip.ZipEntry entry = theZipFile.getEntry(\"META-INF/MANIFEST.MF\");", "+                if (entry == null) {", "+                    return false;", "+                }", "+                Manifest currentManifest = new Manifest(theZipFile.getInputStream(entry));", "+                if (!currentManifest.equals(manifest)) {", "+                    return false;", "+                }", "+            }", "+            catch (Exception e) {", "+                // any problems and we will rebuild", "+                return false;", "+            }", "+            finally {", "+                if (theZipFile != null) {", "+                    try {", "+                        theZipFile.close();", "+                    }", "+                    catch (IOException e) {", "+                        //ignore", "+                    }", "+                }", "+            }", "+        }", "+        else if (manifestFile.lastModified() > zipFile.lastModified()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6ea9850bae0a5f5b5bc9f48d3d2bd18", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "12f19c932133ae8e0eaae97b14eb718262cb0843", "commitAfterChange": "8b613e7fb2924211824146110e777f7cdc5a120f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private InputStream getResourceStream(File file, String resourceName)", "signatureAfterChange": "     private InputStream getResourceStream(File file, String resourceName)", "diff": ["+     */", "-                ZipFile zipFile = new ZipFile(file);", "+                ZipFile zipFile = null;", "+                try {", "+                    zipFile = new ZipFile(file);", "-                ZipEntry entry = zipFile.getEntry(resourceName);", "-                if (entry != null) {", "-                    return zipFile.getInputStream(entry);", "+                    ZipEntry entry = zipFile.getEntry(resourceName);", "+                    if (entry != null) {", "+                        // we need to read the entry out of the zip file into", "+                        // a baos and then ", "+                        ByteArrayOutputStream baos = new ByteArrayOutputStream();", "+                        byte[] buffer = new byte[BUFFER_SIZE];", "+                        int bytesRead;", "+                        InputStream stream = zipFile.getInputStream(entry);", "+                        while ((bytesRead = stream.read(buffer, 0, BUFFER_SIZE)) != -1) {", "+                            baos.write(buffer, 0, bytesRead);", "+                        }", "+                        return new ByteArrayInputStream(baos.toByteArray());   ", "+                    }", "+                }", "+                finally {", "+                    if (zipFile != null) {", "+                        zipFile.close();", "+                    }"]}]}
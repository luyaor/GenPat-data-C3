{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "723b1244e02a97fb45e17a1cfa900a2f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10dc257cf7ce9d6d640efcba52d8097a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "          private URLConnection openConnection(URL aSource) throws IOException", "signatureAfterChange": "          private URLConnection openConnection(final URL aSource) throws IOException", "diff": ["-        private URLConnection openConnection(URL aSource) throws IOException {", "+        private URLConnection openConnection(final URL aSource) throws IOException {", "-            URLConnection connection = aSource.openConnection();", "+            final URLConnection connection = aSource.openConnection();", "-                String up = uname + \":\" + pword;", "+                final String up = uname + \":\" + pword;", "-                Base64Converter encoder = new Base64Converter();", "+                final Base64Converter encoder = new Base64Converter();", "-            } catch (NullPointerException e) {", "+            } catch (final NullPointerException e) {", "-                HttpURLConnection httpConnection = (HttpURLConnection) connection;", "-                int responseCode = httpConnection.getResponseCode();", "+                final HttpURLConnection httpConnection = (HttpURLConnection) connection;", "+                final int responseCode = httpConnection.getResponseCode();", "-                    String newLocation = httpConnection.getHeaderField(\"Location\");", "-                    String message = aSource", "+                    final String newLocation = httpConnection.getHeaderField(\"Location\");", "+                    final String message = aSource", "-                    URL newURL = new URL(aSource, newLocation);", "+                    final URL newURL = new URL(aSource, newLocation);", "-                long lastModified = httpConnection.getLastModified();", "+                final long lastModified = httpConnection.getLastModified();", "-                    String message = \"HTTP Authorization failure\";", "+                    final String message = \"HTTP Authorization failure\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46fe362d71b15a53767d54d2a0c0c5b2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 132, "methodNumberAfterChange": 132, "signatureBeforeChange": "     @Override \tpublic void execute() throws BuildException", "signatureAfterChange": "     @Override \tpublic void execute() throws BuildException", "diff": ["-        Vector<String> packagesToDoc = new Vector<String>();", "-        Path sourceDirs = new Path(getProject());", "+        final Vector<String> packagesToDoc = new Vector<String>();", "+        final Path sourceDirs = new Path(getProject());", "+\t\tfinal", "-        Commandline toExecute = (Commandline) cmd.clone();", "+        final Commandline toExecute = (Commandline) cmd.clone();", "-        } catch (IOException e) {", "+        } catch (final IOException e) {", "-        JavadocOutputStream out = new JavadocOutputStream(Project.MSG_INFO);", "-        JavadocOutputStream err = new JavadocOutputStream(Project.MSG_WARN);", "-        Execute exe = new Execute(new PumpStreamHandler(out, err));", "+        final JavadocOutputStream out = new JavadocOutputStream(Project.MSG_INFO);", "+        final JavadocOutputStream err = new JavadocOutputStream(Project.MSG_WARN);", "+        final Execute exe = new Execute(new PumpStreamHandler(out, err));", "-            int ret = exe.execute();", "+            final int ret = exe.execute();", "-        } catch (IOException e) {", "+        } catch (final IOException e) {", "-            } catch (IOException e) {", "+            } catch (final IOException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d967a8875af52347ece85b81c1f76c3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     private void checkIncludePatterns()", "signatureAfterChange": "     private void checkIncludePatterns()", "diff": ["-        Map<TokenizedPath, String> newroots = new HashMap<TokenizedPath, String>();", "+        final Map<TokenizedPath, String> newroots = new HashMap<TokenizedPath, String>();", "-            String pattern = includePatterns[i].toString();", "+            final String pattern = includePatterns[i].toString();", "-        for (Map.Entry<String, TokenizedPath> entry : includeNonPatterns.entrySet()) {", "-            String pattern = entry.getKey();", "+        for (final Map.Entry<String, TokenizedPath> entry : includeNonPatterns.entrySet()) {", "+            final String pattern = entry.getKey();", "-                } catch (IOException ex) {", "+                } catch (final IOException ex) {", "-            for (Map.Entry<TokenizedPath, String> entry : newroots.entrySet()) {", "+            for (final Map.Entry<TokenizedPath, String> entry : newroots.entrySet()) {", "-                        String path = (basedir == null)", "+                        final String path = (basedir == null)", "-                    } catch (IOException ex) {", "+                    } catch (final IOException ex) {", "-                    File f = currentPath.findFile(basedir, false);", "+                    final File f = currentPath.findFile(basedir, false);", "-                        String originalpattern = entry.getValue();", "-                        boolean included = isCaseSensitive()", "+                        final String originalpattern = entry.getValue();", "+                        final boolean included = isCaseSensitive()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6526da1514cfa3c5c41e26f74127d9a4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "     protected ArchiveState getResourcesToAdd(FileSet[] filesets,                                              File zipFile,                                              boolean needsUpdate)         throws BuildException", "signatureAfterChange": "     protected ArchiveState getResourcesToAdd(final FileSet[] filesets,                                              final File zipFile,                                              boolean needsUpdate)         throws BuildException", "diff": ["-    protected ArchiveState getResourcesToAdd(FileSet[] filesets,", "-                                             File zipFile,", "+    protected ArchiveState getResourcesToAdd(final FileSet[] filesets,", "+                                             final File zipFile,", "-        Resource[][] initialResources = grabResources(filesets);", "+        final Resource[][] initialResources = grabResources(filesets);", "-        Resource[][] newerResources = new Resource[filesets.length][];", "+        final Resource[][] newerResources = new Resource[filesets.length][];", "-                File base = filesets[i].getDir(getProject());", "+                final File base = filesets[i].getDir(getProject());", "-                    File resourceAsFile =", "+                    final File resourceAsFile =", "-                ZipFileSet zfs = (ZipFileSet) filesets[i];", "+                final ZipFileSet zfs = (ZipFileSet) filesets[i];", "-                    MergingMapper fm = new MergingMapper();", "+                    final MergingMapper fm = new MergingMapper();", "-                    GlobPatternMapper gm = new GlobPatternMapper();", "+                    final GlobPatternMapper gm = new GlobPatternMapper();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "767067b3e94bedb19714847b04bc669b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/ScpToMessage.java", "commitBeforeChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "commitAfterChange": "789422e131b6c2c003d94f394169a64297e986c6", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "      private void sendFileToRemote(File localFile,                                    InputStream in,                                    OutputStream out) throws IOException", "signatureAfterChange": "      private void sendFileToRemote(final File localFile,                                    final InputStream in,                                    final OutputStream out) throws IOException", "diff": ["-    private void sendFileToRemote(File localFile,", "-                                   InputStream in,", "-                                   OutputStream out) throws IOException {", "+    private void sendFileToRemote(final File localFile,", "+                                   final InputStream in,", "+                                   final OutputStream out) throws IOException {", "-        long filesize = localFile.length();", "+        final long filesize = localFile.length();", "-        FileInputStream fis = new FileInputStream(localFile);", "-        byte[] buf = new byte[BUFFER_SIZE];", "-        long startTime = System.currentTimeMillis();", "+        final FileInputStream fis = new FileInputStream(localFile);", "+        final byte[] buf = new byte[BUFFER_SIZE];", "+        final long startTime = System.currentTimeMillis();", "-        boolean trackProgress = getVerbose() && filesize > HUNDRED_KILOBYTES;", "+        final boolean trackProgress = getVerbose() && filesize > HUNDRED_KILOBYTES;", "-        long initFilesize = filesize;", "+        final long initFilesize = filesize;", "-                int len = fis.read(buf, 0, buf.length);", "+                final int len = fis.read(buf, 0, buf.length);", "-                long endTime = System.currentTimeMillis();", "+                final long endTime = System.currentTimeMillis();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae86385ee817b60c64d0de38e9e4d175", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "     protected void zipFile(InputStream in, ZipOutputStream zOut, String vPath,                            long lastModified, File fromArchive, int mode)         throws IOException", "signatureAfterChange": "     protected void zipFile(InputStream in, final ZipOutputStream zOut, final String vPath,                            final long lastModified, final File fromArchive, final int mode)         throws IOException", "diff": ["-    protected void zipFile(InputStream in, ZipOutputStream zOut, String vPath,", "-                           long lastModified, File fromArchive, int mode)", "+    protected void zipFile(InputStream in, final ZipOutputStream zOut, final String vPath,", "+                           final long lastModified, final File fromArchive, final int mode)", "-            ZipEntry ze = new ZipEntry(vPath);", "+            final ZipEntry ze = new ZipEntry(vPath);", "-                CRC32 cal = new CRC32();", "+                final CRC32 cal = new CRC32();", "-                    ByteArrayOutputStream bos = new ByteArrayOutputStream();", "+                    final ByteArrayOutputStream bos = new ByteArrayOutputStream();", "-                    byte[] buffer = new byte[BUFFER_SIZE];", "+                    final byte[] buffer = new byte[BUFFER_SIZE];", "-                    byte[] buffer = new byte[BUFFER_SIZE];", "+                    final byte[] buffer = new byte[BUFFER_SIZE];", "-            ZipExtraField[] extra = getCurrentExtraFields();", "+            final ZipExtraField[] extra = getCurrentExtraFields();", "-            byte[] buffer = new byte[BUFFER_SIZE];", "+            final byte[] buffer = new byte[BUFFER_SIZE];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca11ed057794e1f3212baa0c1199aefa", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Project.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 97, "signatureBeforeChange": "     private void tsort(String root, Hashtable<String, Target> targetTable,                              Hashtable<String, String> state, Stack<String> visiting,                              Vector<Target> ret)         throws BuildException", "signatureAfterChange": "     private void tsort(final String root, final Hashtable<String, Target> targetTable,                              final Hashtable<String, String> state, final Stack<String> visiting,                              final Vector<Target> ret)         throws BuildException", "diff": ["-    private void tsort(String root, Hashtable<String, Target> targetTable,", "-                             Hashtable<String, String> state, Stack<String> visiting,", "-                             Vector<Target> ret)", "+    private void tsort(final String root, final Hashtable<String, Target> targetTable,", "+                             final Hashtable<String, String> state, final Stack<String> visiting,", "+                             final Vector<Target> ret)", "-        Target target = targetTable.get(root);", "+        final Target target = targetTable.get(root);", "-            StringBuilder sb = new StringBuilder(\"Target \\\"\");", "+            final StringBuilder sb = new StringBuilder(\"Target \\\"\");", "-                String parent = visiting.peek();", "+                final String parent = visiting.peek();", "-        for (Enumeration<String> en = target.getDependencies(); en.hasMoreElements();) {", "-            String cur = en.nextElement();", "-            String m = state.get(cur);", "+        for (final Enumeration<String> en = target.getDependencies(); en.hasMoreElements();) {", "+            final String cur = en.nextElement();", "+            final String m = state.get(cur);", "-        String p = visiting.pop();", "+        final String p = visiting.pop();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4325fc0d5aead9a73824d0c234f81da", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipFile.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     private void resolveLocalFileHeaderData(Map<ZipEntry, NameAndComment>                                             entriesWithoutUTF8Flag)         throws IOException", "signatureAfterChange": "     private void resolveLocalFileHeaderData(final Map<ZipEntry, NameAndComment>                                             entriesWithoutUTF8Flag)         throws IOException", "diff": ["-    private void resolveLocalFileHeaderData(Map<ZipEntry, NameAndComment>", "+    private void resolveLocalFileHeaderData(final Map<ZipEntry, NameAndComment>", "-        for (Iterator<ZipEntry> it = entries.iterator(); it.hasNext();) {", "+        for (final Iterator<ZipEntry> it = entries.iterator(); it.hasNext();) {", "-            Entry ze = (Entry) it.next();", "-            OffsetEntry offsetEntry = ze.getOffsetEntry();", "-            long offset = offsetEntry.headerOffset;", "+            final Entry ze = (Entry) it.next();", "+            final OffsetEntry offsetEntry = ze.getOffsetEntry();", "+            final long offset = offsetEntry.headerOffset;", "-            int fileNameLen = ZipShort.getValue(SHORT_BUF);", "+            final int fileNameLen = ZipShort.getValue(SHORT_BUF);", "-            int extraFieldLen = ZipShort.getValue(SHORT_BUF);", "+            final int extraFieldLen = ZipShort.getValue(SHORT_BUF);", "-                int skipped = archive.skipBytes(lenToSkip);", "+                final int skipped = archive.skipBytes(lenToSkip);", "-            byte[] localExtraData = new byte[extraFieldLen];", "+            final byte[] localExtraData = new byte[extraFieldLen];", "-                NameAndComment nc = entriesWithoutUTF8Flag.get(ze);", "+                final NameAndComment nc = entriesWithoutUTF8Flag.get(ze);", "-            String name = ze.getName();", "+            final String name = ze.getName();"]}]}
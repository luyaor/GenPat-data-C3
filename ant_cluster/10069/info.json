{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "237bbf78cc5b93aa9a4a308477b5d109", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3403c6f73043fecfd4a544aef5ab07d3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java", "commitBeforeChange": "98efd3aaf071a4bae2cba92d4a0b579367c18006", "commitAfterChange": "367d32fa5bacafb911ea8e6f631b58a7669d1105", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     protected Commandline setupModernJavacCommandlineSwitches(Commandline cmd)", "signatureAfterChange": "     protected Commandline setupModernJavacCommandlineSwitches(Commandline cmd)", "diff": ["+        } else if (assumeJava15() && attributes.getTarget() != null) {", "+            String t = attributes.getTarget();", "+            if (t.equals(\"1.1\") || t.equals(\"1.2\") || t.equals(\"1.3\") ", "+                || t.equals(\"1.4\")) {", "+                attributes.log(\"The -source switch defaults to 1.5 in JDK 1.5.\",", "+                               Project.MSG_WARN);", "+                attributes.log(\"If you specify -target \" + t", "+                               + \" you now must also specify -source \" + t ", "+                               + \".\", Project.MSG_WARN);", "+                attributes.log(\"Ant will implicitly add -source \" + t", "+                               + \" for you.  Please change your build file.\",", "+                               Project.MSG_WARN);", "+                cmd.createArgument().setValue(\"-source\");", "+                cmd.createArgument().setValue(t);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bd5988ea40e4343317f998bf8dbb11b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/jdepend/JDependTask.java", "commitBeforeChange": "a94ef2aa3bc2c2129b8cbe32eb41ef4f21023284", "commitAfterChange": "1e7d5dd17be982cf12c4b326b38d52977208cc2c", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 28, "signatureBeforeChange": "     public int executeAsForked(CommandlineJava commandline,                                ExecuteWatchdog watchdog) throws BuildException", "signatureAfterChange": "     public int executeAsForked(CommandlineJava commandline,                                ExecuteWatchdog watchdog) throws BuildException", "diff": ["+        runtimeClasses = new Path(getProject());", "+        addClasspathEntry(\"/jdepend/textui/JDepend.class\");", "+", "+        }", "+", "+        if (includeRuntime) {", "+            Vector v = Execute.getProcEnvironment();", "+            Enumeration e = v.elements();", "+            while (e.hasMoreElements()) {", "+                String s = (String) e.nextElement();", "+                if (s.startsWith(\"CLASSPATH=\")) {", "+                    commandline.createClasspath(getProject()).createPath()", "+                        .append(new Path(getProject(),", "+                                         s.substring(\"CLASSPATH=\".length()", "+                                                     )));", "+                }", "+            }", "+            log(\"Implicitly adding \" + runtimeClasses + \" to CLASSPATH\",", "+                Project.MSG_VERBOSE);", "+            commandline.createClasspath(getProject()).createPath()", "+                .append(runtimeClasses);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af29c094d70d830c25381f14319f05d4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "4cf9ef09a97e2c53eacb9e629d8470ab856acc2c", "commitAfterChange": "ef830de68e452f5673aefdcd49f7de071a12e11a", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": "     protected final void addResources(FileSet fileset, Resource[] resources,                                       ZipOutputStream zOut)         throws IOException", "signatureAfterChange": "     protected final void addResources(FileSet fileset, Resource[] resources,                                       ZipOutputStream zOut)         throws IOException", "diff": ["-        int dirMode = ZipFileSet.DEFAULT_DIR_MODE;", "-        int fileMode = ZipFileSet.DEFAULT_FILE_MODE;", "+        int dirMode = ArchiveFileSet.DEFAULT_DIR_MODE;", "+        int fileMode = ArchiveFileSet.DEFAULT_FILE_MODE;", "-        ZipFileSet zfs = null;", "-        if (fileset instanceof ZipFileSet) {", "-            zfs = (ZipFileSet) fileset;", "+        ArchiveFileSet zfs = null;", "+        if (fileset instanceof ArchiveFileSet) {", "+            zfs = (ArchiveFileSet) fileset;", "-            } else {", "+            } else if (zfs instanceof ZipFileSet) {", "-                    ZipEntry ze = zf.getEntry(resources[i].getName());", "-                    addParentDirs(base, name, zOut, prefix, ze.getUnixMode());", "+                    if (zf != null) {", "+                        ZipEntry ze = zf.getEntry(resources[i].getName());", "+                        addParentDirs(base, name, zOut, prefix,", "+                                      ze.getUnixMode());", "+                    } else {", "+                        ArchiveResource tr = (ArchiveResource) resources[i];", "+                        addParentDirs(base, name, zOut, prefix,", "+                                      tr.getMode());", "+                    }", "+                    if (zf != null) {", "+                    } else {", "+                        ArchiveResource tr = (ArchiveResource) resources[i];", "+                        InputStream is = null;", "+                        try {", "+                            is = tr.getInputStream();", "+                            zipFile(is, zOut, prefix + name,", "+                                    resources[i].getLastModified(),", "+                                    zfs.getSrc(getProject()),", "+                                    zfs.hasFileModeBeenSet() ? fileMode", "+                                    : tr.getMode());", "+                        } finally {", "+                            FileUtils.close(is);", "+                        }", "+                    }", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9d9d62262b2b3518d3547bd09d4a604", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/GenericDeploymentTool.java", "commitBeforeChange": "b8d38ba0777a7b548d8ea40201da37ec594c0520", "commitAfterChange": "f688c57ce10a8ab655aae2c0ccb178f72288bcd9", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     protected void writeJar(String baseName, File jarfile, Hashtable files) throws BuildException", "signatureAfterChange": "     protected void writeJar(String baseName, File jarfile, Hashtable files) throws BuildException", "diff": ["+\tFile entryDir = null;", "+\tString innerfiles[] = null;", "+", "+\t\t// See if there are any inner classes for this class and add them in if there are", "+\t\tInnerClassFilenameFilter flt = new InnerClassFilenameFilter(entryFile.getName());", "+\t\tentryDir = entryFile.getParentFile();", "+\t\tinnerfiles = entryDir.list(flt);", "+\t\tfor (int i=0, n=innerfiles.length; i < n; i++) {", "+\t", "+\t\t\t//get and clean up innerclass name", "+\t\t\tentryName = entryName.substring(0, entryName.lastIndexOf(entryFile.getName())-1) + File.separatorChar + innerfiles[i];", "+", "+\t\t\t// link the file", "+\t\t\tentryFile = new File(srcDir, entryName);", "+", "+\t\t\tgetTask().log(\"adding innerclass file '\" + entryName + \"'\", ", "+\t\t\t\t    Project.MSG_VERBOSE);", "+", "+\t\t\taddFileToJar(jarStream,", "+                                     new FileInputStream(entryFile),", "+                                     entryName);", "+", "+\t\t}"]}]}
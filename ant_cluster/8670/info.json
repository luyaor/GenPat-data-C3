{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4ee0999900a51f46bb79990b8609f943", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "062b9b2783327264468ca0f367ae86ec", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "b04ea4a4a37fda61874f9da193ccef4095afa2e8", "commitAfterChange": "672481d0aed938db880c9691736877e74cde875c", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 23, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        // Load the driver using the ", "-                log( \"Loading \" + driver + \" using AntClassLoader with classpath \" + classpath, ", "-                     Project.MSG_VERBOSE );", "-", "-                loader = new AntClassLoader(project, classpath);", "+                // check first that it is not already loaded otherwise", "+                // consecutive runs seems to end into an OutOfMemoryError", "+                // or it fails when there is a native library to load", "+                // several times.", "+                // this is far from being perfect but should work in most cases.", "+                synchronized (loaderMap){", "+                    if (caching){", "+                        loader = (AntClassLoader)loaderMap.get(driver);", "+                    }", "+                    if (loader == null){", "+                        log( \"Loading \" + driver + \" using AntClassLoader with classpath \" + classpath,", "+                             Project.MSG_VERBOSE );", "+                        loader = new AntClassLoader(project, classpath);", "+                        if (caching){", "+                            loaderMap.put(driver, loader);", "+                        }", "+                    } else {", "+                        log(\"Loading \" + driver + \" using a cached AntClassLoader.\",", "+                                Project.MSG_VERBOSE);", "+                    }", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11cb5db29e047d5ced011a6363dcb7b2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "4f509c65b02916132edfc67763f19656e841b06b", "commitAfterChange": "c84425e271b6fec1221fd7d742cfe4699b941e98", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String encoding, Project project)         throws IOException", "signatureAfterChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String inputEncoding, String outputEncoding,                          Project project)         throws IOException", "diff": ["+     */", "+    public void copyFile(File sourceFile, File destFile,", "+                         FilterSetCollection filters, Vector filterChains,", "+                         boolean overwrite, boolean preserveLastModified,", "+                         String inputEncoding, String outputEncoding,", "+                         Project project)", "+        throws IOException {", "-            if (filterSetsAvailable || filterChainsAvailable) {", "+            if (filterSetsAvailable || filterChainsAvailable", "+                || (inputEncoding != null ", "+                    && !inputEncoding.equals(outputEncoding))", "+                || (inputEncoding == null && outputEncoding != null)) {", "-                    if (encoding == null) {", "+                    if (inputEncoding == null) {", "-                        out = new BufferedWriter(new FileWriter(destFile));", "-                                                                     encoding));", "+                                                                     inputEncoding));", "+                    }", "+", "+                    if (outputEncoding == null) {", "+                        out = new BufferedWriter(new FileWriter(destFile));", "+                    } else {", "-                                                                      encoding));", "+                                                                      outputEncoding));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "596b90f5756c1e3107a5de8a72f6c9c8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipFile.java", "commitBeforeChange": "aa43e37a025cdf54b8914b8283e57419a253ed59", "commitAfterChange": "dee95e3acc5154aee03ff5f91f9a56426ae79f3f", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 30, "signatureBeforeChange": "     private String getUnicodeStringIfOriginalMatches(AbstractUnicodeExtraField f,                                                      byte[] orig)", "signatureAfterChange": "         public int compare(ZipEntry e1, ZipEntry e2)", "diff": ["-     */", "-    private String getUnicodeStringIfOriginalMatches(AbstractUnicodeExtraField f,", "-                                                     byte[] orig) {", "-        if (f != null) {", "-            CRC32 crc32 = new CRC32();", "-            crc32.update(orig);", "-            long origCRC32 = crc32.getValue();", "-", "-            if (origCRC32 == f.getNameCRC32()) {", "-                try {", "-                    return ZipEncodingHelper", "-                        .UTF8_ZIP_ENCODING.decode(f.getUnicodeName());", "-                } catch (IOException ex) {", "-                    // UTF-8 unsupported?  should be impossible the", "-                    // Unicode*ExtraField must contain some bad bytes", "-", "-                    // TODO log this anywhere?", "-                    return null;", "-                }", "-            }", "-        }", "-        return null;", "-    }", "+        new Comparator<ZipEntry>() {", "+        public int compare(ZipEntry e1, ZipEntry e2) {", "+            if (e1 == e2) {", "+                return 0;", "+            }", "+", "+            OffsetEntry off1 = entries.get(e1);", "+            OffsetEntry off2 = entries.get(e2);", "+            if (off1 == null) {", "+                return 1;", "+            }", "+            if (off2 == null) {", "+                return -1;", "+            }", "+            long val = (off1.headerOffset - off2.headerOffset);", "+            return val == 0 ? 0 : val < 0 ? -1 : +1;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67f47e1cf83fd2e36d8ffba63be34a35", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/types/selectors/PresentSelectorTest.java", "commitBeforeChange": "e5235423ccd494cb7516a1df6e3e13a74a22b767", "commitAfterChange": "da5a13f8e4e0e4475f942b5ae5670271b711d423", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void testSelectionBehaviour()", "signatureAfterChange": "     public void testSelectionBehaviour()", "diff": ["-            s.setTargetdir(basedirname);", "+            s.setTargetdir(beddir);", "-            s.setTargetdir(basedirname);", "+            s.setTargetdir(beddir);", "-            s.setTargetdir(\"src/etc/testcases/taskdefs/expected\");", "+            File subdir = new File(\"src/etc/testcases/taskdefs/expected\");", "+            s.setTargetdir(subdir);", "-            assertEquals(\"TTTTTTTTTTTF\", results);", "+        if (JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)) {", "+                assertEquals(\"TTTTTFFFFFFF\", results);", "+            } else {", "+                assertEquals(\"TTTTTTTTTTTF\", results);", "+            }", "-            s.setTargetdir(basedirname);", "+            s.setTargetdir(beddir);", "-            s.setTargetdir(basedirname + \"/tar/bz2\");", "+            subdir = new File(beddir, \"tar/bz2\");", "+            s.setTargetdir(subdir);", "+            try {", "+                makeMirror();", "+", "+                s = (PresentSelector)getInstance();", "+                subdir = getProject().resolveFile(\"selectortest2\");", "+                s.setTargetdir(subdir);", "+                results = mirrorSelectionString(s);", "+                assertEquals(\"TTTFFTTTTTTT\", results);", "+                results = selectionString(s);", "+                assertEquals(\"TTTFFTTTTTTT\", results);", "+", "+", "+            }", "+            finally {", "+                cleanupMirror();", "+            }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f3fc56168007776485c32cc80adb845", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "cca008dd0001628eefae7a0ebffba4815a6909f1", "commitAfterChange": "021fdf251c92ecb3981724d83c0265dc770280b3", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 35, "signatureBeforeChange": "     protected void execute(JUnitTest arg) throws BuildException", "signatureAfterChange": "     protected void execute(JUnitTest arg) throws BuildException", "diff": ["-            exitValue = executeAsForked(test, watchdog);", "+            exitValue = executeAsForked(test, watchdog, null);", "+        actOnTestResult(exitValue, wasKilled, test, \"Test \" + test.getName());", "+    }", "-        // if there is an error/failure and that it should halt, stop", "-        // everything otherwise just log a statement", "-        boolean errorOccurredHere =", "-            exitValue == JUnitTestRunner.ERRORS || wasKilled;", "-        boolean failureOccurredHere =", "-            exitValue != JUnitTestRunner.SUCCESS || wasKilled;", "-        if (errorOccurredHere || failureOccurredHere) {", "-            if ((errorOccurredHere && test.getHaltonerror())", "-                || (failureOccurredHere && test.getHaltonfailure())) {", "-                throw new BuildException(\"Test \" + test.getName() + \" failed\"", "-                    + (wasKilled ? \" (timeout)\" : \"\"), getLocation());", "-            } else {", "-                log(\"TEST \" + test.getName() + \" FAILED\"", "-                    + (wasKilled ? \" (timeout)\" : \"\"), Project.MSG_ERR);", "-                if (errorOccurredHere && test.getErrorProperty() != null) {", "-                    getProject().setNewProperty(test.getErrorProperty(), \"true\");", "-                if (failureOccurredHere && test.getFailureProperty() != null) {", "-                    getProject().setNewProperty(test.getFailureProperty(), \"true\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d50a6dae58f51611274725055574b151", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "3ce64dd501a7e5dfd84967399cc4c68c643de810", "commitAfterChange": "b941f2ef443cbbaec2b995b3c34958067c4979c3", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 50, "signatureBeforeChange": "     private void concatenate(char[] buffer, Writer writer, Reader in)         throws IOException", "signatureAfterChange": "      private Reader getFilteredReader(Reader r)", "diff": ["-    /** Concatenate a single reader to the writer using buffer */", "-    private void concatenate(char[] buffer, Writer writer, Reader in)", "-        throws IOException {", "-        if (filterChains != null) {", "-            ChainReaderHelper helper = new ChainReaderHelper();", "-            helper.setBufferSize(BUFFER_SIZE);", "-            helper.setPrimaryReader(in);", "-            helper.setFilterChains(filterChains);", "-            helper.setProject(getProject());", "-            in = new BufferedReader(helper.getAssembledReader());", "-        }", "-        while (true) {", "-            int nRead = in.read(buffer, 0, buffer.length);", "-            if (nRead == -1) {", "-                break;", "-            }", "-            writer.write(buffer, 0, nRead);", "-        }", "-        writer.flush();", "-    }", "+", "+    private Reader getFilteredReader(Reader r) {", "+        if (filterChains == null) {", "+            return r;", "+        }", "+        ChainReaderHelper helper = new ChainReaderHelper();", "+        helper.setBufferSize(BUFFER_SIZE);", "+        helper.setPrimaryReader(r);", "+        helper.setFilterChains(filterChains);", "+        helper.setProject(getProject());", "+        //used to be a BufferedReader here, but we should be buffering lower:", "+        return helper.getAssembledReader();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f51aafe4ffa7511290be7ae6a118fc59", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/LoadFile.java", "commitBeforeChange": "f19f07d6e4c72f241057ecfc32d80be21201bbf7", "commitAfterChange": "ca91f8cb7e4f2bfe1a191dea6126a32649af9565", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public final void execute()         throws BuildException", "signatureAfterChange": "     public final void execute()         throws BuildException", "diff": ["-            ChainReaderHelper crh = new ChainReaderHelper();", "-            crh.setBufferSize(size);", "-            crh.setPrimaryReader(instream);", "-            crh.setFilterChains(filterChains);", "-            crh.setProject(project);", "-            instream = crh.getAssembledReader();", "-", "-            String text = crh.readFully(instream);", "+            String text = \"\";", "+            if (size != 0) {", "+                ChainReaderHelper crh = new ChainReaderHelper();", "+                crh.setBufferSize(size);", "+                crh.setPrimaryReader(instream);", "+                crh.setFilterChains(filterChains);", "+                crh.setProject(project);", "+                instream = crh.getAssembledReader();", "+    ", "+                text = crh.readFully(instream);", "+            }", "-                project.setNewProperty(property, text);", "-                log(\"loaded \" + text.length() + \" characters\",", "-                    Project.MSG_VERBOSE);", "-                log(property + \" := \" + text, Project.MSG_DEBUG);", "+                if (text.length() > 0) {", "+                    project.setNewProperty(property, text);", "+                    log(\"loaded \" + text.length() + \" characters\",", "+                        Project.MSG_VERBOSE);", "+                    log(property + \" := \" + text, Project.MSG_DEBUG);", "+                }"]}]}
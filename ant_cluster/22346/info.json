{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "03987a319ec40de2e0fecd4b635b69bc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "486a90703ec6bba5559cc98ea83b6dbe", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/depend/Depend.java", "commitBeforeChange": "2bb82ea3965603288bc8defcacdf2dcb1e549fe2", "commitAfterChange": "798eedafd9e38fb45daae1aa139ca40b7b23f493", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 6, "signatureBeforeChange": "       private void determineDependencies() throws IOException", "signatureAfterChange": "     private void determineDependencies() throws IOException", "diff": ["+     */", "+        Hashtable dependencyMap = new Hashtable();", "+            dependencyMap.put(info.className, dependencyList);", "-            ", "+        ", "+        classJarDependencies = null;", "+        if (compileClasspath != null) {", "+            // now determine which jars each class depends upon", "+            classJarDependencies = new Hashtable();", "+            AntClassLoader loader = new AntClassLoader(getProject(), compileClasspath);", "+            Hashtable jarFileCache = new Hashtable();", "+            Object nullJarFile = new Object();", "+            for (Enumeration e = dependencyMap.keys(); e.hasMoreElements();) {", "+                String className = (String)e.nextElement();", "+                Vector dependencyList = (Vector)dependencyMap.get(className);", "+                Hashtable jarDependencies = new Hashtable();", "+                classJarDependencies.put(className, jarDependencies);", "+                for (Enumeration e2 = dependencyList.elements(); e2.hasMoreElements();) {", "+                    String dependency =(String)e2.nextElement();", "+                    Object jarFileObject = jarFileCache.get(dependency);", "+                    if (jarFileObject == null) {", "+                        jarFileObject = nullJarFile;", "+                        ", "+                        if (!dependency.startsWith(\"java.\") && !dependency.startsWith(\"javax.\")) {", "+                            URL classURL = loader.getResource(dependency.replace('.', '/') + \".class\");", "+                            if (classURL != null) {", "+                                String jarFilePath = classURL.getFile();", "+                                if (jarFilePath.startsWith(\"file:\")) {", "+                                    int classMarker = jarFilePath.indexOf('!');", "+                                    jarFilePath = jarFilePath.substring(5, classMarker);", "+                                }", "+                                jarFileObject = new File(jarFilePath);", "+                                log(\"Class \" + className + ", "+                                    \" depends on \" + jarFileObject + ", "+                                    \" due to \" + dependency, Project.MSG_DEBUG);", "+                            }", "+                        }", "+                        jarFileCache.put(dependency, jarFileObject);", "+                    }", "+                    if (jarFileObject != null && jarFileObject != nullJarFile) {", "+                        // we need to add this jar to the list for this class.", "+                        File jarFile = (File)jarFileObject;", "+                        jarDependencies.put(jarFile, jarFile);", "+                    }", "+                }", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb4833cf62fb98bd3a97de8ee4b0d3dd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/depend/Depend.java", "commitBeforeChange": "0992b41f807cf4bdeb4fd517d08adc8f8f8e258e", "commitAfterChange": "75722dcb03cb32e6efbd01d306f301c1bd490716", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void determineDependencies() throws IOException", "signatureAfterChange": "     private void determineDependencies() throws IOException", "diff": ["-        classJarDependencies = null;", "-        if (compileClasspath != null) {", "+        classpathDependencies = null;", "+        if (dependClasspath != null) {", "-            classJarDependencies = new Hashtable();", "-            AntClassLoader loader = new AntClassLoader(getProject(), compileClasspath);", "-            Hashtable jarFileCache = new Hashtable();", "-            Object nullJarFile = new Object();", "+            classpathDependencies = new Hashtable();", "+            AntClassLoader loader = new AntClassLoader(getProject(), dependClasspath);", "+            Hashtable classpathFileCache = new Hashtable();", "+            Object nullFileMarker = new Object();", "-                Hashtable jarDependencies = new Hashtable();", "-                classJarDependencies.put(className, jarDependencies);", "+                Hashtable dependencies = new Hashtable();", "+                classpathDependencies.put(className, dependencies);", "-                    Object jarFileObject = jarFileCache.get(dependency);", "-                    if (jarFileObject == null) {", "-                        jarFileObject = nullJarFile;", "+                    Object classpathFileObject = classpathFileCache.get(dependency);", "+                    if (classpathFileObject == null) {", "+                        classpathFileObject = nullFileMarker;", "-                                String jarFilePath = classURL.getFile();", "-                                if (jarFilePath.startsWith(\"file:\")) {", "-                                    int classMarker = jarFilePath.indexOf('!');", "-                                    jarFilePath = jarFilePath.substring(5, classMarker);", "+                                if (classURL.getProtocol().equals(\"jar\")) {", "+                                    String jarFilePath = classURL.getFile();", "+                                    if (jarFilePath.startsWith(\"file:\")) {", "+                                        int classMarker = jarFilePath.indexOf('!');", "+                                        jarFilePath = jarFilePath.substring(5, classMarker);", "+                                    }", "+                                    classpathFileObject = new File(jarFilePath);", "-                                jarFileObject = new File(jarFilePath);", "+                                else if (classURL.getProtocol().equals(\"file\")) {", "+                                    String classFilePath = classURL.getFile();", "+                                    classpathFileObject = new File(classFilePath);", "+                                }", "-                                    \" depends on \" + jarFileObject + ", "+                                    \" depends on \" + classpathFileObject + ", "-                        jarFileCache.put(dependency, jarFileObject);", "+                        classpathFileCache.put(dependency, classpathFileObject);", "-                    if (jarFileObject != null && jarFileObject != nullJarFile) {", "+                    if (classpathFileObject != null && classpathFileObject != nullFileMarker) {", "-                        File jarFile = (File)jarFileObject;", "-                        jarDependencies.put(jarFile, jarFile);", "+                        File jarFile = (File)classpathFileObject;", "+                        dependencies.put(jarFile, jarFile);"]}]}
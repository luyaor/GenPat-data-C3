{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df3b0699a9f48042d4066a5900bcf500", "detectedBy": ["DIFF_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3dffc39c9c4b839eb326dc3afd1c72d9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/filters/TokenFilterTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void testDosLineOutput() throws IOException", "signatureAfterChange": "      @Test     public void testDosLineOutput() throws IOException", "diff": ["+    @Test", "-        expectFileContains(", "-            \"doslineoutput\", getProject().getProperty(\"output\") + \"/doslineoutput\",", "-            \"\\r\\nThis\\r\\nis\\r\\na\\r\\nnumber\\r\\nof\\r\\nwords\\r\\n\");", "+", "+        buildRule.executeTarget(\"doslineoutput\");", "+        assertContains(\"\\r\\nThis\\r\\nis\\r\\na\\r\\nnumber\\r\\nof\\r\\nwords\\r\\n\",", "+                getFileString(buildRule.getProject().getProperty(\"output\") + \"/doslineoutput\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2b7164ec6f5165a229bea1b1febf2d7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/filters/TokenFilterTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void testUnixLineOutput() throws IOException", "signatureAfterChange": "      @Test     public void testUnixLineOutput() throws IOException", "diff": ["+    @Test", "-        expectFileContains(", "-            \"unixlineoutput\", getProject().getProperty(\"output\") + \"/unixlineoutput\",", "-            \"\\nThis\\nis\\na\\nnumber\\nof\\nwords\\n\");", "+    \tbuildRule.executeTarget(\"unixlineoutput\");", "+    \tassertContains(\"\\nThis\\nis\\na\\nnumber\\nof\\nwords\\n\",", "+                getFileString(buildRule.getProject().getProperty(\"output\") + \"/unixlineoutput\"));"]}]}
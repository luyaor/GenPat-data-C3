{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7c1a237ba30d37e3b4969f962c16578e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "410a556b8cd7ba9bfc3ee21f79059f5e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Expand.java", "commitBeforeChange": "dc00bd536bd6a1cd2bae07cecc352c085a8a0f9d", "commitAfterChange": "80d371a3b4e1ba3f845e1b9a8f831fd6a11fafd5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        ", "+", "+        if (source == null && filesets.size() == 0) {", "+            throw new BuildException(\"src attribute and/or filesets must be specified\");", "+        }", "+", "+        if (dest == null && outFile == null) {", "+            throw new BuildException(", "+                \"Dest and/or the OutFile attribute \" +", "+                \"must be specified\");", "+        }", "+", "+        if (dest != null && dest.exists() && !dest.isDirectory()) {", "+            throw new BuildException(\"Dest must be a directory.\", location);", "+        }", "+", "+        if (verbose && outFile == null) {", "+            throw new BuildException(", "+                \"Verbose can be set only when OutFile is \" +", "+                \"specified\");", "+        }", "-        ", "-        if (source == null) {", "-            throw new BuildException(\"Source attribute must be specified\");", "-        }", "-        if (dest == null) {", "-            throw new BuildException(\"Dest attribute must be specified\");", "-        }", "-        if (source.isDirectory()) {", "-            // get all the files in the descriptor directory", "-            DirectoryScanner ds = super.getDirectoryScanner(source);", "-    ", "-            String[] files = ds.getIncludedFiles();", "-            for (int i = 0; i < files.length; ++i) {", "-                File file = new File(source, files[i]);", "-                expandFile(touch, file, dest);", "+        try {", "+            if (outFile != null) {", "+                if (outFile.isDirectory()) {", "+                    throw new BuildException(\"Outfile \" + outFile", "+                        + \" must not be a directory.\");", "+                }", "+                if (!outFile.exists()) {", "+                    File parent = new File(outFile.getParent());", "+                    if (!parent.exists()) {", "+                        if (!parent.mkdirs()) {", "+                            throw new BuildException(\"Unable to create \"", "+                                + outFile);", "+                        }", "+                    }", "+                }", "+                fw = new FileWriter(outFile);", "+                bw = new BufferedWriter(fw);", "+                pw = new PrintWriter(bw, true);", "+            }", "+        } catch (IOException ioe) {", "+            throw new BuildException(ioe.getMessage(), location);", "+        }", "+        if (source != null) {", "+            if (source.isDirectory()) {", "+                // get all the files in the descriptor directory", "+                DirectoryScanner ds = super.getDirectoryScanner(source);", "+", "+                String[] files = ds.getIncludedFiles();", "+                for (int i = 0; i < files.length; ++i) {", "+                    File file = new File(source, files[i]);", "+                    expandFile(touch, file, dest);", "+                }", "+            }", "+            else {", "+                expandFile(touch, source, dest);", "-        else {", "-            expandFile(touch, source, dest);", "+        if (filesets.size() > 0) {", "+            for (int j=0; j < filesets.size(); j++) {", "+                FileSet fs = (FileSet) filesets.elementAt(j);", "+                DirectoryScanner ds = fs.getDirectoryScanner(project);", "+                File fromDir = fs.getDir(project);", "+", "+                String[] files = ds.getIncludedFiles();", "+                for (int i = 0; i < files.length; ++i) {", "+                    File file = new File(fromDir, files[i]);", "+                    expandFile(touch, file, dest);", "+                }", "+            }", "+        }", "+        try {", "+            if (pw != null) {", "+                pw.close();", "+            }", "+            if (bw != null) {", "+                bw.close();", "+            }", "+            if (fw != null) {", "+                fw.close();", "+            }", "+        } catch (IOException ioe1) {", "+            //Oh, well!  We did our best"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a346abc7b2274c04ccc82b76ca62f77", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "196c36bc28dec63b239595132e8b00c55951c860", "commitAfterChange": "689fca41585cc1768a0501fd11c8235b6e4bc481", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 55, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["+", "+", "+        if(maxmemory != null){", "+            if(javadoc1){", "+                argList.addElement(\"-J-mx\" + maxmemory);", "+            }", "+            else{", "+                argList.addElement(\"-J-Xmx\" + maxmemory);", "+            }", "+        }", "+            ", "+            // add the single link arguments", "+            ", "+            // add the links arguments", "+            if (links.size() != 0) {", "+                for (Enumeration e = links.elements(); e.hasMoreElements(); ) {", "+                    LinkArgument la = (LinkArgument)e.nextElement();", "+                ", "+                    if (la.getHref() == null) {", "+                        throw new BuildException(\"Links must provide the RUL to the external class documentation.\");", "+                    }", "+                ", "+                    if (la.isLinkOffline()) {", "+                        String packageListLocation = la.getPackagelistLoc();", "+                        if (packageListLocation == null) {", "+                            throw new BuildException(\"The package list location for link \" + la.getHref() +", "+                                                     \" must be provided because the link is offline\");", "+                        }", "+                        argList.addElement(\"-linkoffline\");", "+                        argList.addElement(la.getHref());", "+                        argList.addElement(packageListLocation);", "+                    }", "+                    else {", "+                        argList.addElement(\"-link\");", "+                        argList.addElement(la.getHref());", "+                    }", "+                }", "+            }                                   ", "+                                                ", "+            // add the single linkoffline arguments", "-", "+            ", "+            // add the single group arguments", "+            ", "+            // add the group arguments", "+            if (groups.size() != 0) {", "+                String title = null;", "+                String packages = null;", "+                GroupArgument ga = null;", "+                for (int i = 0; i < groups.size(); i++) {", "+                    ga = (GroupArgument)groups.get(i);", "+                    if (ga != null) {", "+                        title = ga.getTitle();", "+                        packages = ga.getPackages();", "+                    }", "+                    if (title != null) {", "+                        argList.addElement(\"-group\");", "+                        argList.addElement(title);", "+                        if (packages != null) {", "+                            argList.addElement(packages);", "+                        }", "+                    }", "+                }", "+            }", "+            }", "+            if (additionalParam != null) {", "+                argList.addElement(additionalParam);", "+         if (packageList != null) {", "+            argList.addElement(\"@\" + packageList);", "+        }"]}]}
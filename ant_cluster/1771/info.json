{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "17f056f518c802f2f954889a286aabb7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15cdd007b0e7d4b5132382cd58a72690", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/SSHExec.java", "commitBeforeChange": "99905c75ac5271a7eb5c1cabd0493b25e11cdc2d", "commitAfterChange": "e601be9dd7423c9000e6913ce2f5a785c7881b89", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            throw new BuildException(\"Host is null.\");", "+            throw new BuildException(\"Host is required.\");", "-            throw new BuildException(\"Username is null.\");", "+            throw new BuildException(\"Username is required.\");", "-            throw new BuildException(\"Password and Keyfile are null.\");", "+            throw new BuildException(\"Password or Keyfile is required.\");", "-            throw new BuildException(\"Command is null.\");", "+            throw new BuildException(\"Command is required.\");", "+        ByteArrayOutputStream out = new ByteArrayOutputStream();", "+        Tee tee = new Tee(out, System.out);", "+", "+            // execute the command", "-            ChannelExec channel=(ChannelExec) session.openChannel(\"exec\");", "+            session.setTimeout(maxwait);", "+            final ChannelExec channel=(ChannelExec) session.openChannel(\"exec\");", "-            channel.setInputStream(System.in);", "-            channel.setOutputStream(System.out);", "+            channel.setOutputStream(tee);", "+", "+            // wait for it to finish", "+            thread =", "+                new Thread() {", "+                    public void run() {", "+                        while (!channel.isEOF()) {", "+                            if (thread == null) {", "+                                return;", "+                            }", "+                            try {", "+                                sleep(500);", "+                            } catch (Exception e) {", "+                                // ignored", "+                            }", "+                        }", "+                    }", "+                };", "+                    ", "+            thread.start();", "+            thread.join(maxwait);", "+            ", "+            if (thread.isAlive()) {", "+                // ran out of time", "+                thread = null;", "+                log(\"Timeout period exceeded, connection dropped.\");", "+            } else {", "+                // completed successfully", "+                if (output_property != null) {", "+                    getProject().setProperty(output_property, out.toString());", "+                }", "+                if (output_file != null) {", "+                    writeToFile(out.toString(), append, output_file);", "+                }", "+            }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25e1edfd9e4957b192cd900575b1897f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/start/org/apache/ant/start/Main.java", "commitBeforeChange": "242af536519aef1a43fdce2fdb383762fb5b6ccc", "commitAfterChange": "e16a4c7b1db880e29d37406177e983142302af57", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String[] args)", "signatureAfterChange": "     public static void main(String[] args) throws Exception", "diff": ["-    public static void main(String[] args) {", "+    public static void main(String[] args) throws Exception {", "-        main.start(DEFAULT_FRONTEND, args);", "+        int frontendIndex = -1;", "+        String frontend = DEFAULT_FRONTEND;", "+", "+        for (int i = 0; i < args.length; ++i) {", "+            if (args[i].equals(\"-frontend\")) {", "+                frontendIndex = i;", "+                break;", "+            }", "+        }", "+", "+        if (frontendIndex != -1) {", "+            try {", "+                frontend = args[frontendIndex + 1];", "+            } catch (IndexOutOfBoundsException e) {", "+                throw new InitException(\"You must specify a value for the \"", "+                     + \"-frontend argument\");", "+            }", "+", "+            String[] newArgs = new String[args.length - 2];", "+", "+            System.arraycopy(args, 0, newArgs, 0, frontendIndex);", "+            if (args.length > (frontendIndex + 2)) {", "+                System.arraycopy(args, frontendIndex + 2, newArgs,", "+                    frontendIndex, args.length - frontendIndex - 2);", "+            }", "+            args = newArgs;", "+        }", "+", "+        String defaultClass = frontend.equals(DEFAULT_FRONTEND)", "+             ? DEFAULT_COMMANDLINE_CLASS : null;", "+", "+        main.start(frontend, defaultClass, args);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "267b5c3935c46a83ab990c16a5402bc1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "34f1e4e99194055534eb0cf61bc0b9c74c79e4b0", "commitAfterChange": "58d96d54fb9bfabc28e6daf9a4bc138dfbddd81b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private static void printVersion()", "signatureAfterChange": "      private static void printVersion()", "diff": ["-        System.out.println( BANNER );", "-        System.out.println();", "+        try {", "+            Properties props = new Properties();", "+            InputStream in =", "+                Main.class.getResourceAsStream(\"/org/apache/tools/ant/version.txt\");", "+            props.load(in);", "+            in.close();", "+", "+            String lSep = System.getProperty(\"line.separator\");", "+            StringBuffer msg = new StringBuffer();", "+            msg.append(\"Ant version \");", "+            msg.append(props.getProperty(\"VERSION\"));", "+            msg.append(\" compiled on \");", "+            msg.append(props.getProperty(\"DATE\"));", "+            msg.append(lSep);", "+            System.out.println(msg.toString());", "+        } catch (IOException ioe) {", "+            System.err.println(\"Could not load the version information.\");", "+            System.err.println(ioe.getMessage());", "+        } catch (NullPointerException npe) {", "+            System.err.println(\"Could not load the version information.\");", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "293f7b362796379d47709276d70bd12f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "f19f07d6e4c72f241057ecfc32d80be21201bbf7", "commitAfterChange": "ca91f8cb7e4f2bfe1a191dea6126a32649af9565", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "     protected void scandir(File dir, String vpath, boolean fast)", "signatureAfterChange": "     protected void scandir(File dir, String vpath, boolean fast)", "diff": ["+        if (!followSymlinks) {", "+            Vector noLinks = new Vector();", "+            for (int i = 0; i < newfiles.length; i++) {", "+                try {", "+                    if (fileUtils.isSymbolicLink(dir, newfiles[i])) {", "+                        String name = vpath + newfiles[i];", "+                        File   file = new File(dir, newfiles[i]);", "+                        if (file.isDirectory()) {", "+                            dirsExcluded.addElement(name);", "+                        } else {", "+                            filesExcluded.addElement(name);", "+                        }", "+                    } else {", "+                        noLinks.addElement(newfiles[i]);", "+                    }", "+                } catch (IOException ioe) {", "+                    String msg = \"IOException caught while checking \"", "+                        + \"for links, couldn't get cannonical path!\";", "+                    // will be caught and redirected to Ant's logging system", "+                    System.err.println(msg);", "+                    noLinks.addElement(newfiles[i]);", "+                }", "+            }", "+            newfiles = new String[noLinks.size()];", "+            noLinks.copyInto(newfiles);", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bfe6589f79e2d8928bccab6c44337b4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antlibs/system/org/apache/ant/antlib/system/Ant.java", "commitBeforeChange": "65b70febb53b077317c4d678291f9af547c3d116", "commitAfterChange": "f9d1c1691c7e9d80b793f5178f6113c949fc2441", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void execute() throws ExecutionException", "signatureAfterChange": "     public void execute() throws AntException", "diff": ["-    public void execute() throws ExecutionException {", "+    public void execute() throws AntException {", "-        Object key = execService.setupBuild(model, getProperties());", "+        BuildKey key = execService.setupBuild(model, getProperties(), true);", "+", "+        if (output != null) {", "+            FileService fileService", "+                = (FileService) getCoreService(FileService.class);", "+", "+            File outfile = null;", "+            if (baseDir != null) {", "+                outfile = FileUtils.newFileUtils().resolveFile(baseDir, output);", "+            } else {", "+                outfile = fileService.resolveFile(output);", "+            }", "+            try {", "+                PrintStream out", "+                    = new PrintStream(new FileOutputStream(outfile));", "+                DefaultLogger logger = new DefaultLogger();", "+                logger.setMessageOutputLevel(MessageLevel.MSG_INFO);", "+                logger.setOutputPrintStream(out);", "+                logger.setErrorPrintStream(out);", "+                execService.addBuildListener(key, logger);", "+            } catch (IOException ex) {", "+                log(\"Ant: Can't set output to \" + output,", "+                    MessageLevel.MSG_INFO);", "+            }", "+        }", "+", "+        execService.releaseBuild(key);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "462845c33645c2690c98c3d92acc22db", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/Main.java", "commitBeforeChange": "b641968fade3f4f16c1676f2b5f06c6b4344ab08", "commitAfterChange": "bb67dc44d84a49fc3d8a14b02b014ac5acd41877", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String[] args)", "signatureAfterChange": "     public static void main(String[] args)", "diff": ["+        Args settings = new Args(args);", "+", "+", "-            AppContext context = new AppContext(f);", "-            EventResponder resp = new EventResponder(context);", "-            Antidote gui = new Antidote(context);", "-", "-            JMenuBar menu = context.getActions().createMenuBar();", "-            f.setJMenuBar(menu);", "-            f.getContentPane().add(BorderLayout.CENTER, gui);", "-            f.getContentPane().add(BorderLayout.NORTH, ", "-                                   context.getActions().createToolBar());", "+            AppContext context = new AppContext(f);", "-            // Add the project selection menu.", "-            ProjectSelectionMenu ps = new ProjectSelectionMenu(context);", "-            ps.insertInto(menu);", "+            if(!settings.isWizzardMode()) {", "+                EventResponder resp = new EventResponder(context);", "+                Antidote gui = new Antidote(context);", "-            // Add debugging items.", "-            if(context.isDebugOn()) {", "-                context.getEventBus().addMember(", "-                    EventBus.VETOING, new EventDebugMonitor());", "+                JMenuBar menu = context.getActions().createMenuBar();", "+                f.setJMenuBar(menu);", "+                f.getContentPane().add(BorderLayout.CENTER, gui);", "+                f.getContentPane().add(BorderLayout.NORTH, ", "+                                       context.getActions().createToolBar());", "+                ", "+                // Add the project selection menu.", "+                ProjectSelectionMenu ps = new ProjectSelectionMenu(context);", "+                ps.insertInto(menu);", "+                ", "+                // Add debugging items.", "+                if(settings.isDebugMode()) {", "+                    context.getEventBus().addMember(", "+                        EventBus.VETOING, new EventDebugMonitor());", "+                }", "+", "+                // Load a build file if one is provided.", "+                if(settings.getBuildFile() != null) {", "+                    LoadFileCmd load = new LoadFileCmd(context);", "+                    load.setFile(new File(settings.getBuildFile()));", "+                    load.run();", "+                }", "+            }", "+            else {", "+                // We are in wizzard mode. Create it.", "+                ResourceManager resources = new ResourceManager(", "+                    \"org.apache.tools.ant.gui.resources.buildFileWizzard\");", "+                Wizzard wiz = new Wizzard(", "+                    resources, ACSFactory.getInstance().createProject());", "+                // XXX this is temporary for testing. Eventually", "+                // it will launch the regular antidote screen with the", "+                // results of the wizzard.", "+                wiz.addWizzardListener(new WizzardListener() {", "+                        public void finished(Object model) {", "+                            System.out.println(model);", "+                            System.exit(0);", "+                        }", "+                        public void canceled() {", "+                            System.exit(0);", "+                        }", "+", "+                    });", "+", "+                f.getContentPane().add(BorderLayout.CENTER, wiz);", "-            f.pack();", "+            f.pack();", "-            // XXX this will change once full command line argument parsing", "-            // is supported.", "-            if(args.length > 0) {", "-                LoadFileCmd load = new LoadFileCmd(context);", "-                load.setFile(new File(args[0]));", "-                load.run();", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "647c3fb8882611691e26876142e6efce", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/Cab.java", "commitBeforeChange": "d3cd72efd0bcc53e93dc30234f1793d9c44b3093", "commitAfterChange": "2737393e9f982e62dcd84f35a5f342ae9fa07cd7", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-                Process p = Runtime.getRuntime().exec(\"listcab\");", "+                Process p = Execute.launch(getProject(), ", "+                                           new String[] {\"listcab\"}, null,", "+                                           baseDir, true);", "+", "+                // Create the stream pumpers to forward listcab's stdout and stderr to the log", "+                // note: listcab is an interactive program, and issues prompts for every new line.", "+                //       Therefore, make it show only with verbose logging turned on.", "+                LogOutputStream outLog = new LogOutputStream(this, Project.MSG_VERBOSE);", "+                LogOutputStream errLog = new LogOutputStream(this, Project.MSG_ERR);", "+                StreamPumper    outPump = new StreamPumper(p.getInputStream(), outLog);", "+                StreamPumper    errPump = new StreamPumper(p.getErrorStream(), errLog);", "+                ", "+                // Pump streams asynchronously", "+                (new Thread(outPump)).start();", "+                (new Thread(errPump)).start();", "+", "+                int result = -99; // A wild default for when the thread is interrupted", "+", "+                try {", "+                    // Wait for the process to finish", "+                    result = p.waitFor();", "+", "+                    // Wait for the end of output and error streams", "+                    outPump.waitFor();", "+                    outLog.close();", "+                    errPump.waitFor();", "+                    errLog.close();", "+                } catch(InterruptedException ie) {", "+                    log(\"Thread interrupted: \" + ie);", "+                }", "+", "+                // Informative summary message in case of errors", "+                if(result != 0) {", "+                    log(\"Error executing listcab; error code: \" + result);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ead8cd26de8bd26f1220d9b9b2ba3c7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "7f98652146940a5c7714f209979d74fe2092af34", "commitAfterChange": "61320f305f5ccb78963b3a9fe607f3505ec635e4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public String[] getCommandline()", "signatureAfterChange": "     public String[] getCommandline()", "diff": ["-        return cmdl;", "+        String[] commandLine = cmdl;", "+", "+        if (workingDirectory != null && ", "+            !antWorkingDirectory.equals(workingDirectory.getAbsolutePath())) {", "+", "+            if (myos.toLowerCase().indexOf(\"windows\") >= 0 &&", "+                myos.toLowerCase().indexOf(\"nt\") >= 0) {", "+", "+                commandLine = new String[cmdl.length+5];", "+                commandLine[0] = \"cmd\";", "+                commandLine[1] = \"/c\";", "+                commandLine[2] = \"cd\";", "+                commandLine[3] = workingDirectory.getAbsolutePath();", "+                commandLine[4] = \"&&\";", "+                System.arraycopy(cmdl, 0, commandLine, 5, cmdl.length);", "+", "+            } else {", "+                commandLine = new String[cmdl.length+2];", "+                commandLine[0] = antRun;", "+                commandLine[1] = workingDirectory.getAbsolutePath();", "+                System.arraycopy(cmdl, 0, commandLine, 2, cmdl.length);", "+            }", "+        }", "+        ", "+        return commandLine;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b4b80e53b8d1ea7abcba5c757c4d7db", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/Cab.java", "commitBeforeChange": "08eef4e8a6bbe820b1622250bdc08de9b0d0cb15", "commitAfterChange": "66d9c994937f8b4667773ebad664322a9f0e74c6", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        // we must be on Windows to continue", "-        if (!isWindows)", "-        {", "-            log(\"cannot run on non-Windows platforms: \" + myos,", "-                Project.MSG_VERBOSE);", "-            return;", "-        }", "-        ", "+", "-        ", "+    ", "-        try {", "-            File listFile = createListFile(files);", "-            ExecTask exec = createExec();", "-            File outFile = null;", "+        // we must be on Windows to continue", "+        if (!isWindows) {", "+            log(\"Using listcab/libcabinet\", Project.MSG_VERBOSE);", "-            // die if cabarc fails", "-            exec.setFailonerror(true);", "-            exec.setDir(baseDir);", "+            StringBuffer sb = new StringBuffer();", "-            if (!doVerbose)", "-            {", "-                outFile = createTempFile(\"ant\", null);", "-                exec.setOutput(outFile);", "+            Enumeration fileEnum = files.elements();", "+            ", "+            while (fileEnum.hasMoreElements()) {", "+                sb.append(fileEnum.nextElement()).append(\"\\n\");", "+            sb.append(\"\\n\").append(cabFile.getAbsolutePath()).append(\"\\n\");", "+            ", "+            try {", "+                Process p = Runtime.getRuntime().exec(\"listcab\");", "+                OutputStream out = p.getOutputStream();", "+                out.write(sb.toString().getBytes());", "+                out.flush();", "+                out.close();", "+            } catch (IOException ex) {", "+                String msg = \"Problem creating \" + cabFile + \" \" + ex.getMessage();", "+                throw new BuildException(msg);", "+            }", "+        } else {", "+            try {", "+                File listFile = createListFile(files);", "+                ExecTask exec = createExec();", "+                File outFile = null;", "-            exec.setCommand(createCommand(listFile));", "-            exec.execute();", "-", "-            if (outFile != null)", "-            {", "-                outFile.delete();", "+                // die if cabarc fails", "+                exec.setFailonerror(true);", "+                exec.setDir(baseDir);", "+                ", "+                if (!doVerbose) {", "+                    outFile = createTempFile(\"ant\", null);", "+                    exec.setOutput(outFile);", "+                }", "+                    ", "+                exec.setCommand(createCommand(listFile));", "+                exec.execute();", "+    ", "+                if (outFile != null) {", "+                    outFile.delete();", "+                }", "+                ", "+                listFile.delete();", "+            } catch (IOException ioe) {", "+                String msg = \"Problem creating \" + cabFile + \" \" + ioe.getMessage();", "+                throw new BuildException(msg);", "-            ", "-            listFile.delete();", "-        } catch (IOException ioe) {", "-            String msg = \"Problem creating \" + cabFile + \" \" + ioe.getMessage();", "-            throw new BuildException(msg);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a046f71ed8eb40663caa6e3cc6b336bc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/taskdefs/ExecTaskTest.java", "commitBeforeChange": "f0724e7b098588dd0742d5dd4adef7fef13e7eb2", "commitAfterChange": "7aff2d5b921ab730204dba2e47d936ce53c0c129", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testspawn()", "signatureAfterChange": "      public void testspawn()", "diff": ["+        GregorianCalendar startwait = new GregorianCalendar();", "+        while (!buildFinished) {", "+            try {", "+                Thread.sleep(10);", "+            } catch (InterruptedException e) {", "+                System.out.println(\"my sleep was interrupted\");", "+            }", "+            GregorianCalendar now = new GregorianCalendar();", "+            // security", "+            if (now.getTimeInMillis() - startwait.getTimeInMillis() > MAX_BUILD_TIME) {", "+                break;", "+            }", "+        }", "+        try {", "+            Thread.sleep((TIME_TO_WAIT) * 1000 + SECURITY_MARGIN);", "+        } catch (InterruptedException e) {", "+            System.out.println(\"my sleep was interrupted\");", "+        }", "+        // time of the build in milli seconds", "+        long elapsed = myBuild.getTimeElapsed();", "+        assertTrue(\"we waited more than the process lasted\", TIME_TO_WAIT * 1000 > elapsed);", "+        logFile = new File(logFile.getAbsolutePath());", "+        System.out.println(\"log file exists \"+ logFile.exists());", "+        assertTrue(\"log file found after spawn\", logFile.exists());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0ff897cf5f35a14050f259f19ad4e63", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/XmlLogger.java", "commitBeforeChange": "90dcced6ab280d3093912bc4c831be790eeeb295", "commitAfterChange": "6c315c38234faf9c26ca3ab76195b767eccbe558", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void buildFinished(BuildEvent event)", "signatureAfterChange": "      public void buildFinished(BuildEvent event)", "diff": ["+            // print the stacktrace in the build file it is always useful...", "+            // better have too much info than not enough.", "+            ByteArrayOutputStream baos = new ByteArrayOutputStream();", "+            PrintStream ps = new PrintStream(baos,true);", "+            Throwable t = event.getException();", "+            t.printStackTrace(ps);", "+            ps.flush();", "+            ps.close();", "+            Text errText =  doc.createCDATASection(baos.toString());", "+            Element stacktrace = doc.createElement(STACKTRACE_TAG);", "+            stacktrace.appendChild(errText);", "+            buildElement.element.appendChild(stacktrace);", "+       String outFilename = event.getProject().getProperty(\"XmlLogger.file\");", "+        if (outFilename == null) {", "+            outFilename = \"log.xml\";", "+        }", "+        Writer out = null;", "-            String outFilename = ", "-                event.getProject().getProperty(\"XmlLogger.file\");", "-", "-            if (outFilename == null) {", "-                outFilename = \"log.xml\";", "-            }", "-", "-            Writer out =", "-                new OutputStreamWriter(new FileOutputStream(outFilename),", "-                                       \"UTF8\");", "+            FileOutputStream fos = new FileOutputStream(outFilename);", "+            out = new OutputStreamWriter(fos, \"UTF8\");", "-            out.close();", "-            ", "-            throw new BuildException(\"Unable to close log file\", exc);", "+            throw new BuildException(\"Unable to write log file\", exc);", "+        } finally {", "+            if (out != null){", "+                try {", "+                    out.close();", "+                } catch (IOException e){ }", "+            }"]}]}
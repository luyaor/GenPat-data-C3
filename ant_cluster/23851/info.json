{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a1622f8c4842497e61d3d59dbf540ce", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40fab72c00ee0ab0dbf6b6476f2e35e7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/i18n/Translate.java", "commitBeforeChange": "16cc5da1fc0317172d43328232994314b59697fa", "commitAfterChange": "fb25c836b47f9a54bc7cb7924e40537e65d00b2b", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private void translate() throws BuildException", "signatureAfterChange": "     private void translate() throws BuildException", "diff": ["-                        // 2003-02-21 new replace algorithm by tbee (tbee@tbee.org)", "-                        // because it wasn't able to replace something like \"@aaa;@bbb;\"", "+                            // 2003-02-21 new replace algorithm by tbee (tbee@tbee.org)", "+                            // because it wasn't able to replace something like \"@aaa;@bbb;\"", "-                        // is there a startToken", "-                        // and there is still stuff following the startToken", "-                        int startIndex = line.indexOf(startToken);", "-                        while (startIndex >= 0", "-                            && (startIndex + startToken.length()) <= line.length()) {", "-                            // the new value, this needs to be here", "-                            // because it is required to calculate the next position to search from", "-                            // at the end of the loop", "-                            String replace = null;", "+                            // is there a startToken", "+                            // and there is still stuff following the startToken", "+                            int startIndex = line.indexOf(startToken);", "+                            while (startIndex >= 0", "+                                && (startIndex + startToken.length()) <= line.length()) {", "+                                // the new value, this needs to be here", "+                                // because it is required to calculate the next position to search from", "+                                // at the end of the loop", "+                                String replace = null;", "-                            // we found a starttoken, is there an endtoken following?", "-                            // start at token+tokenlength because start and end", "-                            // token may be indentical", "-                            int endIndex = line.indexOf(endToken, startIndex + startToken.length());", "-                            if (endIndex < 0) {", "-                                startIndex += 1;", "-                            } else {", "-                                // grab the token", "-                                String token", "-                                    = line.substring(startIndex + startToken.length(), endIndex);", "-", "-                                // If there is a white space or = or :, then", "-                                // it isn't to be treated as a valid key.", "-                                boolean validToken = true;", "-                                for (int k = 0; k < token.length() && validToken; k++) {", "-                                    char c = token.charAt(k);", "-                                    if (c == ':' || c == '='", "-                                        || Character.isSpaceChar(c)) {", "-                                        validToken = false;", "-                                    }", "-                                }", "-                                if (!validToken) {", "+                                // we found a starttoken, is there an endtoken following?", "+                                // start at token+tokenlength because start and end", "+                                // token may be indentical", "+                                int endIndex = line.indexOf(endToken, startIndex + startToken.length());", "+                                if (endIndex < 0) {", "-                                    // find the replace string", "-                                    if (resourceMap.containsKey(token)) {", "-                                        replace = (String) resourceMap.get(token);", "-                                    } else {", "-                                        replace = token;", "+                                    // grab the token", "+                                    String token", "+                                        = line.substring(startIndex + startToken.length(), endIndex);", "+", "+                                    // If there is a white space or = or :, then", "+                                    // it isn't to be treated as a valid key.", "+                                    boolean validToken = true;", "+                                    for (int k = 0; k < token.length() && validToken; k++) {", "+                                        char c = token.charAt(k);", "+                                        if (c == ':' || c == '='", "+                                            || Character.isSpaceChar(c)) {", "+                                            validToken = false;", "+                                        }", "+                                    if (!validToken) {", "+                                        startIndex += 1;", "+                                    } else {", "+                                        // find the replace string", "+                                        if (resourceMap.containsKey(token)) {", "+                                            replace = (String) resourceMap.get(token);", "+                                        } else {", "+                                            log(\"Replacement string missing for: \"", "+                                                + token, Project.MSG_VERBOSE);", "+                                            replace = startToken + token + endToken;", "+                                        }", "-                                    // generate the new line", "-                                    line = line.substring(0, startIndex)", "-                                         + replace", "-                                         + line.substring(endIndex + endToken.length());", "+                                        // generate the new line", "+                                        line = line.substring(0, startIndex)", "+                                             + replace", "+                                             + line.substring(endIndex + endToken.length());", "-                                    // set start position for next search", "-                                    startIndex += replace.length();", "+                                        // set start position for next search", "+                                        startIndex += replace.length();", "+                                    }", "+", "+                                // find next starttoken", "+                                startIndex = line.indexOf(startToken, startIndex);", "-", "-                            // find next starttoken", "-                            startIndex = line.indexOf(startToken, startIndex);", "-                        }", "-", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfc23296b0980c1e527465e1fa7b5981", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "89531ee35458b1c34de19d32cde979948ec4c70b", "commitAfterChange": "66676d22f4163163a8f7b567577705159d7d4d60", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void run()", "signatureAfterChange": "      public void run()", "diff": ["-        long start = System.currentTimeMillis();", "+        ByteArrayOutputStream errStrm = new ByteArrayOutputStream();", "+        systemError = new PrintStream(errStrm);", "-        fireStartTestSuite();", "-        if (exception != null) { // had an exception in the constructor", "-            for (int i = 0; i < formatters.size(); i++) {", "-                ((TestListener) formatters.elementAt(i)).addError(null,", "-                                                                  exception);", "-            }", "-            junitTest.setCounts(1, 0, 1);", "-            junitTest.setRunTime(0);", "-        } else {", "+        ByteArrayOutputStream outStrm = new ByteArrayOutputStream();", "+        systemOut = new PrintStream(outStrm);", "+        PrintStream savedOut = null;", "+        PrintStream savedErr = null;", "-            ByteArrayOutputStream errStrm = new ByteArrayOutputStream();", "-            systemError = new PrintStream(errStrm);", "-", "-            ByteArrayOutputStream outStrm = new ByteArrayOutputStream();", "-            systemOut = new PrintStream(outStrm);", "-", "-            PrintStream savedOut = null;", "-            PrintStream savedErr = null;", "-", "-            if (forked) {", "-                savedOut = System.out;", "-                savedErr = System.err;", "-                if (!showOutput) {", "-                    System.setOut(systemOut);", "-                    System.setErr(systemError);", "-                } else {", "-                    System.setOut(new PrintStream(", "-                                      new TeeOutputStream(savedOut, systemOut)", "-                                      )", "-                                  );", "-                    System.setErr(new PrintStream(", "-                                      new TeeOutputStream(savedErr,", "-                                                          systemError)", "-                                      )", "-                                  );", "-                }", "-                perm = null;", "+        if (forked) {", "+            savedOut = System.out;", "+            savedErr = System.err;", "+            if (!showOutput) {", "+                System.setOut(systemOut);", "+                System.setErr(systemError);", "-                if (perm != null) {", "-                    perm.setSecurityManager();", "-                }", "+                System.setOut(new PrintStream(", "+                                       new TeeOutputStream(savedOut, systemOut)", "+                                       )", "+                              );", "+                System.setErr(new PrintStream(", "+                                       new TeeOutputStream(savedErr,", "+                                                           systemError)", "+                                       )", "+                              );", "+            perm = null;", "+        } else {", "+            if (perm != null) {", "+                perm.setSecurityManager();", "+            }", "+        }", "+        Test suite = null;", "+        Exception exception = null;", "+", "+        try {", "-                suite.run(res);", "-            } finally {", "-                if (perm != null) {", "-                    perm.restoreSecurityManager();", "-                }", "-                if (savedOut != null) {", "-                    System.setOut(savedOut);", "-                }", "-                if (savedErr != null) {", "-                    System.setErr(savedErr);", "+                Class testClass = null;", "+                if (loader == null) {", "+                    testClass = Class.forName(junitTest.getName());", "+                } else {", "+                    testClass = Class.forName(junitTest.getName(), true, ", "+                                              loader);", "-                systemError.close();", "-                systemError = null;", "-                systemOut.close();", "-                systemOut = null;", "-                sendOutAndErr(new String(outStrm.toByteArray()),", "-                              new String(errStrm.toByteArray()));", "+                Method suiteMethod = null;", "+                try {", "+                    // check if there is a suite method", "+                    suiteMethod = testClass.getMethod(\"suite\", new Class[0]);", "+                } catch (NoSuchMethodException e) {", "+                    // no appropriate suite method found. We don't report any", "+                    // error here since it might be perfectly normal.", "+                }", "+                if (suiteMethod != null) {", "+                    // if there is a suite method available, then try", "+                    // to extract the suite from it. If there is an error", "+                    // here it will be caught below and reported.", "+                    suite = (Test) suiteMethod.invoke(null, new Class[0]);", "+                } else {", "+                    // try to extract a test suite automatically this", "+                    // will generate warnings if the class is no", "+                    // suitable Test", "+                    suite = new TestSuite(testClass);", "+                }", "-                junitTest.setCounts(res.runCount(), res.failureCount(),", "-                                    res.errorCount());", "-                junitTest.setRunTime(System.currentTimeMillis() - start);", "+            } catch (Exception e) {", "+                retCode = ERRORS;", "+                exception = e;", "+", "+            long start = System.currentTimeMillis();", "+", "+            fireStartTestSuite();", "+            if (exception != null) { // had an exception constructing suite", "+                for (int i = 0; i < formatters.size(); i++) {", "+                    ((TestListener) formatters.elementAt(i))", "+                        .addError(null, exception);", "+                }", "+                junitTest.setCounts(1, 0, 1);", "+                junitTest.setRunTime(0);", "+            } else {", "+                try {", "+                    suite.run(res);", "+                } finally {", "+                    junitTest.setCounts(res.runCount(), res.failureCount(),", "+                                        res.errorCount());", "+                    junitTest.setRunTime(System.currentTimeMillis() - start);", "+                }", "+            }", "+        } finally {", "+            if (perm != null) {", "+                perm.restoreSecurityManager();", "+            }", "+            if (savedOut != null) {", "+                System.setOut(savedOut);", "+            }", "+            if (savedErr != null) {", "+                System.setErr(savedErr);", "+            }", "+", "+            systemError.close();", "+            systemError = null;", "+            systemOut.close();", "+            systemOut = null;", "+            sendOutAndErr(new String(outStrm.toByteArray()),", "+                          new String(errStrm.toByteArray()));"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "244bfb0da294be676421b89e5819ac08", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6845382177d18e969debe158f7bdb095", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/tar/TarOutputStream.java", "commitBeforeChange": "0b93bdd7cdfe6a7a48f02cf125014e5d538d5381", "commitAfterChange": "1447e596aa13ca3441f24a8e163f4a255c5a7e23", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void write( byte[] wBuf, int wOffset, int numToWrite )         throws IOException", "signatureAfterChange": "     public void write( final byte[] buffer,                        final int offset,                        final int count )         throws IOException", "diff": ["-    public void write( byte[] wBuf, int wOffset, int numToWrite )", "+    public void write( final byte[] buffer,", "+                       final int offset,", "+                       final int count )", "-        if( ( this.currBytes + numToWrite ) > this.currSize )", "+        int position = offset;", "+        int numToWrite = count;", "+        if( ( m_currBytes + numToWrite ) > m_currSize )", "-            throw new IOException( \"request to write '\" + numToWrite", "-                                   + \"' bytes exceeds size in header of '\"", "-                                   + this.currSize + \"' bytes\" );", "+            final String message = \"request to write '\" + numToWrite +", "+                \"' bytes exceeds size in header of '\" + m_currSize + \"' bytes\";", "+            throw new IOException( message );", "-        if( this.assemLen > 0 )", "+        if( m_assemLen > 0 )", "-            if( ( this.assemLen + numToWrite ) >= this.recordBuf.length )", "+            if( ( m_assemLen + numToWrite ) >= m_recordBuf.length )", "-                int aLen = this.recordBuf.length - this.assemLen;", "+                final int length = m_recordBuf.length - m_assemLen;", "-                System.arraycopy( this.assemBuf, 0, this.recordBuf, 0,", "-                                  this.assemLen );", "-                System.arraycopy( wBuf, wOffset, this.recordBuf,", "-                                  this.assemLen, aLen );", "-                this.buffer.writeRecord( this.recordBuf );", "+                System.arraycopy( m_assemBuf, 0, m_recordBuf, 0,", "+                                  m_assemLen );", "+                System.arraycopy( buffer, position, m_recordBuf,", "+                                  m_assemLen, length );", "+                m_buffer.writeRecord( m_recordBuf );", "-                this.currBytes += this.recordBuf.length;", "-                wOffset += aLen;", "-                numToWrite -= aLen;", "-                this.assemLen = 0;", "+                m_currBytes += m_recordBuf.length;", "+                position += length;", "+                numToWrite -= length;", "+                m_assemLen = 0;", "-                System.arraycopy( wBuf, wOffset, this.assemBuf, this.assemLen,", "+                System.arraycopy( buffer, position, m_assemBuf, m_assemLen,", "-                wOffset += numToWrite;", "-                this.assemLen += numToWrite;", "+                position += numToWrite;", "+                m_assemLen += numToWrite;", "-            if( numToWrite < this.recordBuf.length )", "+            if( numToWrite < m_recordBuf.length )", "-                System.arraycopy( wBuf, wOffset, this.assemBuf, this.assemLen,", "+                System.arraycopy( buffer, position, m_assemBuf, m_assemLen,", "-                this.assemLen += numToWrite;", "+                m_assemLen += numToWrite;", "-            this.buffer.writeRecord( wBuf, wOffset );", "+            m_buffer.writeRecord( buffer, position );", "-            int num = this.recordBuf.length;", "+            int num = m_recordBuf.length;", "-            this.currBytes += num;", "+            m_currBytes += num;", "-            wOffset += num;", "+            position += num;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89863f68441ac81d6b4e270954ba9da7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/tar/TarOutputStream.java", "commitBeforeChange": "23bbf085727756cfbad92aaa345e10c7370d3486", "commitAfterChange": "75110026aa35fe98da6c696598361977c3c46c48", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException", "signatureAfterChange": "     public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException", "diff": ["-        if ((this.currBytes + numToWrite) > this.currSize) {", "+        if ((currBytes + numToWrite) > currSize) {", "-                                  + this.currSize + \"' bytes for entry '\"", "+                                  + currSize + \"' bytes for entry '\"", "-        if (this.assemLen > 0) {", "-            if ((this.assemLen + numToWrite) >= this.recordBuf.length) {", "-                int aLen = this.recordBuf.length - this.assemLen;", "+        if (assemLen > 0) {", "+            if ((assemLen + numToWrite) >= recordBuf.length) {", "+                int aLen = recordBuf.length - assemLen;", "-                System.arraycopy(this.assemBuf, 0, this.recordBuf, 0,", "-                                 this.assemLen);", "-                System.arraycopy(wBuf, wOffset, this.recordBuf,", "-                                 this.assemLen, aLen);", "-                this.buffer.writeRecord(this.recordBuf);", "+                System.arraycopy(assemBuf, 0, recordBuf, 0,", "+                                 assemLen);", "+                System.arraycopy(wBuf, wOffset, recordBuf,", "+                                 assemLen, aLen);", "+                buffer.writeRecord(recordBuf);", "-                this.currBytes += this.recordBuf.length;", "+                currBytes += recordBuf.length;", "-                this.assemLen = 0;", "+                assemLen = 0;", "-                System.arraycopy(wBuf, wOffset, this.assemBuf, this.assemLen,", "+                System.arraycopy(wBuf, wOffset, assemBuf, assemLen,", "-                this.assemLen += numToWrite;", "+                assemLen += numToWrite;", "-            if (numToWrite < this.recordBuf.length) {", "-                System.arraycopy(wBuf, wOffset, this.assemBuf, this.assemLen,", "+            if (numToWrite < recordBuf.length) {", "+                System.arraycopy(wBuf, wOffset, assemBuf, assemLen,", "-                this.assemLen += numToWrite;", "+                assemLen += numToWrite;", "-            this.buffer.writeRecord(wBuf, wOffset);", "+            buffer.writeRecord(wBuf, wOffset);", "-            int num = this.recordBuf.length;", "+            int num = recordBuf.length;", "-            this.currBytes += num;", "+            currBytes += num;"]}]}
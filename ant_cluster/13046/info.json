{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "006052878daacbc280451d7cd286fb04", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fa032c9b9b53fbea2518b65d6f8f48d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/main/org/apache/ant/core/execution/ExecutionFrame.java", "commitBeforeChange": "a48208f6cf8cf80ef1e144305ff8dfe0958599d5", "commitAfterChange": "c2e518039b65dc5b8c9c31f9f78b2d72ea8db2d1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "          public ExecutionFrame(Project project, Map taskDefs, Map converterDefs,                           String namespace) throws ConfigException", "signatureAfterChange": "          private ExecutionFrame(Project project, AntLibrary[] libraries, String namespace)          throws ConfigException", "diff": ["-    public ExecutionFrame(Project project, Map taskDefs, Map converterDefs,", "-                          String namespace) throws ConfigException {", "-        this.project = project;", "-        this.taskDefs = taskDefs;", "+     */     ", "+    private ExecutionFrame(Project project, AntLibrary[] libraries, String namespace) ", "+        throws ConfigException {", "+    ", "+        setupFrame(project, libraries);", "+    }", "-        // We create a set of converters from the converter definitions we", "-        // have been given and initialise them. They should be AntConverters", "-        setupConverters(converterDefs);", "-        ", "-                = new ExecutionFrame(importedProject, taskDefs, converterDefs, importNamespace);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc9dbdb04ff0df398fb3d2ec67866445", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultObjectConfigurer.java", "commitBeforeChange": "ba1f6f147af327833c018a27a46347cbd46625f3", "commitAfterChange": "a989b254f04d33e5bc2370b62121bd56830ac2f1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void enableProperties()         throws ConfigurationException", "signatureAfterChange": "     private void enableTypedAdder()         throws ConfigurationException", "diff": ["-    private void enableProperties()", "-        final Map configurers = findPropertyConfigurers();", "-        // Add the elements", "-", "-        final Iterator iterator = configurers.keySet().iterator();", "-            final String name = (String)iterator.next();", "-            final Method method = (Method)configurers.get( name );", "-            final boolean isSetter = method.getName().startsWith( \"set\" );", "-            // Determine and check the return type", "-            final boolean isTypedProp = ( name.length() == 0 );", "-            if( isTypedProp && !type.isInterface() )", "-            {", "-                final String message =", "-                    REZ.getString( \"typed-adder-non-interface.error\",", "-                                   m_class.getName(),", "-                                   type.getName() );", "-                throw new ConfigurationException( message );", "-            }", "-            else if( isTypedProp && isSetter )", "-            {", "-                final String message =", "-                    REZ.getString( \"typed-setter-not-allowed.error\",", "-                                   m_class.getName(),", "-                                   type.getName() );", "-                throw new ConfigurationException( message );", "-            }", "-            else if( isTypedProp && null != m_typedPropertyConfigurer )", "-            {", "-                final String message =", "-                    REZ.getString( \"typed-adder-duplicates.error\",", "-                                   m_class.getName(),", "-                                   type.getName() );", "-                throw new ConfigurationException( message );", "-            }", "-            // Determine the max count for the property", "-            if( isSetter )", "-            {", "-                final DefaultPropertyConfigurer setter =", "-                    new DefaultPropertyConfigurer( getPropertyCount(),", "-                                                   type,", "-                                                   method,", "-                                                   1 );", "-                m_setters.put( name, setter );", "-            }", "-            else", "-            {", "-                final DefaultPropertyConfigurer configurer =", "-                    new DefaultPropertyConfigurer( getPropertyCount(),", "-                                                   type,", "-                                                   method,", "-                                                   Integer.MAX_VALUE );", "-                if( isTypedProp )", "-                {", "-                    m_typedPropertyConfigurer = configurer;", "-                }", "-                else", "-                {", "-                    m_adders.put( name, configurer );", "-                }", "-            }", "+    private void enableTypedAdder()", "+        final Collection methods = findMethods( \"add\", true );", "+        if( methods.size() == 0 )", "+        {", "+            return;", "+        }", "+        final Method method = (Method)methods.iterator().next();", "+        final Class type = method.getParameterTypes()[ 0 ];", "+", "+        // TODO - this isn't necessary", "+        if( !type.isInterface() )", "+        {", "+            final String message =", "+                REZ.getString( \"typed-adder-non-interface.error\",", "+                               m_class.getName(),", "+                               type.getName() );", "+            throw new ConfigurationException( message );", "+        }", "+", "+        m_typedPropertyConfigurer", "+            = new DefaultPropertyConfigurer( getPropertyCount(),", "+                                             type,", "+                                             method,", "+                                             Integer.MAX_VALUE );", "+    }"]}]}
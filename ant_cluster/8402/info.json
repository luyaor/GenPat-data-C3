{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4e2247e32f684ddd4db1ff7ac574823d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c76f26b177c93f22eca092be9359aa1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/filters/TokenFilterTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 14, "signatureBeforeChange": "      public void testTrimFileByLine() throws IOException", "signatureAfterChange": "      @Test     public void testTrimFileByLine() throws IOException", "diff": ["+    @Test", "-        String contents = getFileString(", "-            \"trimfilebyline\", getProject().getProperty(\"output\") + \"/trimfilebyline\");", "+    \tbuildRule.executeTarget(\"trimfilebyline\");", "+        String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/trimfilebyline\");", "-        assertStringNotContains(contents, \"  This is the second\");", "-        assertStringContains(contents, \"file.\\nThis is the second\");", "+        assertNotContains(\"  This is the second\", contents);", "+        assertContains(\"file.\\nThis is the second\", contents);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f54049596ea7b7a00c0050fe2278c72b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/filters/TokenFilterTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 20, "signatureBeforeChange": "      public void testDeleteCharacters() throws IOException", "signatureAfterChange": "      @Test     public void testDeleteCharacters() throws IOException", "diff": ["+    @Test", "-        String contents = getFileString(", "-            \"deletecharacters\", getProject().getProperty(\"output\") + \"/deletechars\");", "-        assertStringNotContains(contents, \"#\");", "-        assertStringNotContains(contents, \"*\");", "-        assertStringContains(contents, \"This is some \");", "+    \tbuildRule.executeTarget(\"deletecharacters\");", "+        String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/deletechars\");", "+        assertNotContains(\"#\", contents);", "+        assertNotContains(\"*\", contents);", "+        assertContains(\"This is some \", contents);"]}]}
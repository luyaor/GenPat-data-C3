{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4bc1efaa7329bd00a6bff54a2ae8570e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54ed4e61bd0810e784ce8a617c4e5122", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/Javah.java", "commitBeforeChange": "5ffacddada00339f7c26549ff306e1d4fa04fc41", "commitAfterChange": "13b07b313fdc7ab2620f71517ab16698be496f24", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private void doClassicCompile() throws BuildException", "signatureAfterChange": "     public String[] getClasses()", "diff": ["+     */", "+    public String[] getClasses() {", "+        ArrayList al = new ArrayList();", "+        if (cls != null) {", "+            StringTokenizer tok = new StringTokenizer(cls, \",\", false);", "+            while (tok.hasMoreTokens()) {", "+                al.add(tok.nextToken().trim());", "+            }", "+        }", "+", "+        Enumeration e = classes.elements();", "+        while (e.hasMoreElements()) {", "+            ClassArgument arg = (ClassArgument) e.nextElement();", "+            al.add(arg.getName());", "+        }", "+        return (String[]) al.toArray(new String[0]);", "+    }", "-", "-    private void doClassicCompile() throws BuildException {", "-        Commandline cmd = setupJavahCommand();", "-", "-        // Use reflection to be able to build on all JDKs", "-        /*", "-        // provide the compiler a different message sink - namely our own", "-        sun.tools.javac.Main compiler =", "-                new sun.tools.javac.Main(new LogOutputStream(this, Project.MSG_WARN), \"javac\");", "-", "-        if (!compiler.compile(cmd.getArguments())) {", "-            throw new BuildException(\"Compile failed\");", "-        }", "-        */", "-", "-", "-        try {", "-            Class javahMainClass = null;", "-            try {", "-                // first search for the \"old\" javah class in 1.4.2 tools.jar", "-                javahMainClass = Class.forName(\"com.sun.tools.javah.oldjavah.Main\");", "-            } catch (ClassNotFoundException cnfe) {", "-                // assume older than 1.4.2 tools.jar", "-                javahMainClass = Class.forName(\"com.sun.tools.javah.Main\");", "-            }", "-", "-            // now search for the constructor that takes in String[] arguments.", "-            Class[] strings = new Class[] {String[].class};", "-            Constructor constructor = javahMainClass.getConstructor(strings);", "-", "-            // construct the javah Main instance", "-            Object javahMain = constructor.newInstance(new Object[] {cmd.getArguments()});", "-", "-            // find the run method", "-            Method runMethod = javahMainClass.getMethod(\"run\", new Class[0]);", "-", "-            runMethod.invoke(javahMain, new Object[0]);", "-        } catch (Exception ex) {", "-            if (ex instanceof BuildException) {", "-                throw (BuildException) ex;", "-            } else {", "-                throw new BuildException(\"Error starting javah: \" + ex, ex, getLocation());", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b08852a8b1069a27f4a7f009a69b240", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javac.java", "commitBeforeChange": "c1a5419faf39033ffc2db1dcf8000f6a796f2dad", "commitAfterChange": "4ca5683c2a54ff4a141ed562a0f3b431b153b2c2", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 32, "signatureBeforeChange": "     private boolean doClassicCompile() throws BuildException", "signatureAfterChange": "     public String getTarget()", "diff": ["+    /** Gets the target VM that the classes will be compiled for. */", "+    public String getTarget() {", "+        return target;", "+    }", "-     */", "-    private boolean doClassicCompile() throws BuildException {", "-        log(\"Using classic compiler\", Project.MSG_VERBOSE);", "-        Commandline cmd = setupJavacCommand();", "-", "-        // Use reflection to be able to build on all JDKs", "-        /*", "-        // provide the compiler a different message sink - namely our own", "-        sun.tools.javac.Main compiler =", "-                new sun.tools.javac.Main(new LogOutputStream(this, Project.MSG_WARN), \"javac\");", "-", "-        if (!compiler.compile(cmd.getArguments())) {", "-            throw new BuildException(\"Compile failed\");", "-        }", "-        */", "-        try {", "-            // Create an instance of the compiler, redirecting output to", "-            // the project log", "-            OutputStream logstr = new LogOutputStream(this, Project.MSG_WARN);", "-            Class c = Class.forName(\"sun.tools.javac.Main\");", "-            Constructor cons = c.getConstructor(new Class[] { OutputStream.class, String.class });", "-            Object compiler = cons.newInstance(new Object[] { logstr, \"javac\" });", "-", "-            // Call the compile() method", "-            Method compile = c.getMethod(\"compile\", new Class [] { String[].class });", "-            Boolean ok = (Boolean)compile.invoke(compiler, new Object[] {cmd.getArguments()});", "-            return ok.booleanValue();", "-        }", "-        catch (ClassNotFoundException ex) {", "-            throw new BuildException(\"Cannot use classic compiler, as it is not available\"+", "-            \t\t\t\t\t\t \" A common solution is to set the environment variable\"+", "-                                     \" JAVA_HOME to your jdk directory.\", location);", "-        }", "-        catch (Exception ex) {", "-            if (ex instanceof BuildException) {", "-                throw (BuildException) ex;", "-            } else {", "-                throw new BuildException(\"Error starting classic compiler: \", ex, location);", "-            }", "-        }", "-    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4bf1395a0ece57671428d1b6452acfa4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32ba2de62dc39f2715806c5e1691fe96", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/types/PatternSet.java", "commitBeforeChange": "1829060b863bcb631e251a2a58b7a752d60ddddb", "commitAfterChange": "432a0ae47a43a7e8c6a8c2678289b88b8aa18960", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void readPatterns( File patternfile, ArrayList patternlist, Project p )         throws TaskException", "signatureAfterChange": "      private Pattern[] parsePatterns( final String patternString )", "diff": ["+    private Pattern[] parsePatterns( final String patternString )", "+        final ArrayList patterns = new ArrayList();", "+        if( patternString != null && patternString.length() > 0 )", "+        {", "+            StringTokenizer tok = new StringTokenizer( patternString, \", \", false );", "+            while( tok.hasMoreTokens() )", "+            {", "+                final Pattern pattern = new Pattern( tok.nextToken() );", "+                patterns.add( pattern );", "+            }", "+        }", "+        return (Pattern[])patterns.toArray( new Pattern[ patterns.size() ] );", "-     */", "-    private void readPatterns( File patternfile, ArrayList patternlist, Project p )", "-        throws TaskException", "-    {", "-", "-        BufferedReader patternReader = null;", "-        try", "-        {", "-            // Get a FileReader", "-            patternReader =", "-                new BufferedReader( new FileReader( patternfile ) );", "-", "-            // Create one Pattern in the appropriate pattern list for each", "-            // line in the file.", "-            String line = patternReader.readLine();", "-            while( line != null )", "-            {", "-                if( line.length() > 0 )", "-                {", "-                    line = p.replaceProperties( line );", "-                    addPatternToList( patternlist ).setName( line );", "-                }", "-                line = patternReader.readLine();", "-            }", "-        }", "-        catch( IOException ioe )", "-        {", "-            String msg = \"An error occured while reading from pattern file: \"", "-                + patternfile;", "-            throw new TaskException( msg, ioe );", "-        }", "-        finally", "-        {", "-            if( null != patternReader )", "-            {", "-                try", "-                {", "-                    patternReader.close();", "-                }", "-                catch( IOException ioe )", "-                {", "-                    //Ignore exception", "-                }", "-            }", "-        }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb84b948b7a4bca04e1f500e056e4ef7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/types/PatternSet.java", "commitBeforeChange": "1829060b863bcb631e251a2a58b7a752d60ddddb", "commitAfterChange": "432a0ae47a43a7e8c6a8c2678289b88b8aa18960", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void readPatterns( File patternfile, ArrayList patternlist, Project p )         throws TaskException", "signatureAfterChange": "      private Pattern[] parsePatterns( final String patternString )", "diff": ["+    private Pattern[] parsePatterns( final String patternString )", "+        final ArrayList patterns = new ArrayList();", "+        if( patternString != null && patternString.length() > 0 )", "+        {", "+            StringTokenizer tok = new StringTokenizer( patternString, \", \", false );", "+            while( tok.hasMoreTokens() )", "+            {", "+                final Pattern pattern = new Pattern( tok.nextToken() );", "+                patterns.add( pattern );", "+            }", "+        }", "+        return (Pattern[])patterns.toArray( new Pattern[ patterns.size() ] );", "-     */", "-    private void readPatterns( File patternfile, ArrayList patternlist, Project p )", "-        throws TaskException", "-    {", "-", "-        BufferedReader patternReader = null;", "-        try", "-        {", "-            // Get a FileReader", "-            patternReader =", "-                new BufferedReader( new FileReader( patternfile ) );", "-", "-            // Create one Pattern in the appropriate pattern list for each", "-            // line in the file.", "-            String line = patternReader.readLine();", "-            while( line != null )", "-            {", "-                if( line.length() > 0 )", "-                {", "-                    line = p.replaceProperties( line );", "-                    addPatternToList( patternlist ).setName( line );", "-                }", "-                line = patternReader.readLine();", "-            }", "-        }", "-        catch( IOException ioe )", "-        {", "-            String msg = \"An error occured while reading from pattern file: \"", "-                + patternfile;", "-            throw new TaskException( msg, ioe );", "-        }", "-        finally", "-        {", "-            if( null != patternReader )", "-            {", "-                try", "-                {", "-                    patternReader.close();", "-                }", "-                catch( IOException ioe )", "-                {", "-                    //Ignore exception", "-                }", "-            }", "-        }", "-    }"]}]}
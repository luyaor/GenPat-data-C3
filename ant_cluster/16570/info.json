{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c48326bc378468fc75b36d6b8732e708", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "363406f0498aa42cac23415d40306db8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/cli/org/apache/ant/cli/Commandline.java", "commitBeforeChange": "ec9816997d704ba18f8209a3b8330275e5a61325", "commitAfterChange": "30b81779b563d12a1e28bebf934d5a5626da57ce", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private void parseArguments(String[] args)          throws ConfigException", "signatureAfterChange": "     private void parseArguments(String[] args)          throws ConfigException", "diff": ["-                try {", "-                    String url = getOption(args, i++, arg);", "-                    if (url.indexOf(\":\") == -1) {", "-                        // We convert any hash characters to their URL escape.", "-                        buildFileURL = InitUtils.getFileURL(new File(url));", "-                    } else {", "-                        buildFileURL = new URL(url);", "-                    }", "-                } catch (MalformedURLException e) {", "-                    System.err.println(\"Buildfile is not valid: \" +", "-                        e.getMessage());", "-                    throw new ConfigException(\"Build file is not valid\", e);", "-                }", "+                argBuildFile(getOption(args, i++, arg));", "-                try {", "-                    File logFile = new File(getOption(args, i++, arg));", "-                    out = new PrintStream(new FileOutputStream(logFile));", "-                    err = out;", "-                } catch (IOException ioe) {", "-                    System.err.println(\"Cannot write on the specified log \" +", "-                        \"file. Make sure the path exists and \" +", "-                        \"you have write permissions.\");", "-                    return;", "-                }", "+                argLogFile(getOption(args, i++, arg));", "-                if (loggerClassname != null) {", "-                    System.err.println(\"Only one logger class may be \" +", "-                        \"specified.\");", "-                    return;", "-                }", "-                loggerClassname = getOption(args, i++, arg);", "+                argLogger(getOption(args, i++, arg));", "-        if (buildFileURL == null) {", "-            File defaultBuildFile = new File(DEFAULT_BUILD_FILENAME);", "-            if (!defaultBuildFile.exists()) {", "-                File ant1BuildFile = new File(DEFAULT_ANT1_FILENAME);", "-                if (ant1BuildFile.exists()) {", "-                    defaultBuildFile = ant1BuildFile;", "-                }", "-            }", "-            try {", "-                buildFileURL = InitUtils.getFileURL(defaultBuildFile);", "-            } catch (MalformedURLException e) {", "-                System.err.println(\"Buildfile is not valid: \" + e.getMessage());", "-                throw new ConfigException(\"Build file is not valid\", e);", "-            }", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c9df6cd71e42ae124a39b76a060c5bf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "cb2df57502298cff2dc5355d58e529e8afcb4796", "commitAfterChange": "df121a6cf559a17a573a5795d7c7daa0cd37be37", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public static ProjectHelper getProjectHelper() throws BuildException", "signatureAfterChange": "     public static ProjectHelper getProjectHelper()", "diff": ["-    public static ProjectHelper getProjectHelper() throws BuildException {", "-        // Identify the class loader we will be using. Ant may be", "-        // in a webapp or embedded in a different app", "-        ProjectHelper helper = null;", "-", "-        // First, try the system property", "-        String helperClass = System.getProperty(HELPER_PROPERTY);", "-        try {", "-            if (helperClass != null) {", "-                helper = newHelper(helperClass);", "-            }", "-        } catch (SecurityException e) {", "-            System.out.println(\"Unable to load ProjectHelper class \\\"\"", "-                + helperClass + \" specified in system property \"", "-                + HELPER_PROPERTY);", "-        }", "-", "-        // A JDK1.3 'service' ( like in JAXP ). That will plug a helper", "-        // automatically if in CLASSPATH, with the right META-INF/services.", "-        if (helper == null) {", "-            try {", "-                ClassLoader classLoader = LoaderUtils.getContextClassLoader();", "-                InputStream is = null;", "-                if (classLoader != null) {", "-                    is = classLoader.getResourceAsStream(SERVICE_ID);", "-                }", "-                if (is == null) {", "-                    is = ClassLoader.getSystemResourceAsStream(SERVICE_ID);", "-                }", "-                if (is != null) {", "-                    // This code is needed by EBCDIC and other strange systems.", "-                    // It's a fix for bugs reported in xerces", "-                    InputStreamReader isr;", "-                    try {", "-                        isr = new InputStreamReader(is, \"UTF-8\");", "-                    } catch (java.io.UnsupportedEncodingException e) {", "-                        isr = new InputStreamReader(is);", "-                    }", "-                    BufferedReader rd = new BufferedReader(isr);", "-", "-                    String helperClassName = rd.readLine();", "-                    rd.close();", "-", "-                    if (helperClassName != null && !\"\".equals(helperClassName)) {", "-                        helper = newHelper(helperClassName);", "-                    }", "-                }", "-            } catch (Exception ex) {", "-                System.out.println(\"Unable to load ProjectHelper from service \" + SERVICE_ID);", "-            }", "-        }", "-        return helper == null ? new ProjectHelper2() : helper;", "-    }", "+    public static ProjectHelper getProjectHelper() {", "+        return (ProjectHelper) ProjectHelperRepository.getInstance().getHelpers().next();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "93cb98e18bdcfdff2648d65d9dc778b0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75b83b9585d439d99532f172c020c4fc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ManifestTask.java", "commitBeforeChange": "18094d3d58aab29c6cb85afea04b2f001e0eaeaf", "commitAfterChange": "a4be70fbf09b8f00cccb697fd031e9bdd277c89a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            FileReader f = null;", "+            FileInputStream fis = null;", "+            InputStreamReader isr = null;", "-                f = new FileReader(manifestFile);", "-                current = new Manifest(f);", "+                fis = new FileInputStream(manifestFile);", "+                isr = new InputStreamReader(fis, \"UTF-8\");", "+                current = new Manifest(isr);", "-                if (f != null) {", "+                if (isr != null) {", "-                        f.close();", "+                        isr.close();", "-            w = new PrintWriter(new FileWriter(manifestFile));", "+            FileOutputStream fos = new FileOutputStream(manifestFile);", "+            OutputStreamWriter osw = new OutputStreamWriter(fos, \"UTF-8\");", "+            w = new PrintWriter(osw);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f352addf25d26d52e3bca0a762f19b4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/bootstrap/org/apache/ant/builder/BuildHelper.java", "commitBeforeChange": "d1503ea657ceb138b9453ec8f8d1cd5d929fbbde", "commitAfterChange": "07d490fcd539717e83be6262f00a6612d0fc360e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected void jar(String basedir, String jarFile, String metaInfDir,                        String metaInfIncludes)", "signatureAfterChange": "     protected void jar(String basedir, String jarFile, String metaInfDir,                        String metaInfIncludes,                        String classpath, String mainClass)", "diff": ["-                       String metaInfIncludes) {", "+                       String metaInfIncludes,", "+                       String classpath, String mainClass) {", "+            Manifest manifest = new Manifest();", "+            Attributes attributes = manifest.getMainAttributes();", "+            attributes.putValue(\"Manifest-Version\", \"1.0\");", "+            attributes.putValue(\"Created-By\", \"Mutant Bootstrap\");", "+", "+            if (classpath != null) {", "+                attributes.putValue(\"Class-Path\", classpath);", "+            }", "+            if (mainClass != null) {", "+                attributes.putValue(\"Main-Class\", mainClass);", "+            }", "+", "-                 = new JarOutputStream(new FileOutputStream(jar));", "+                 = new JarOutputStream(new FileOutputStream(jar), manifest);", "+", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b79063a45647ab3183fb0305647e8fd1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "c35a248ef870c9f98b7eda39ba9e3653775aea82", "commitAfterChange": "4653e638dd921ac96a2e8583851b121e46477ae9", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void closeEntry() throws IOException", "signatureAfterChange": "     public void closeEntry() throws IOException", "diff": ["-        } else {", "+        } else if (raf == null) {", "+        } else { /* method is STORED and we used RandomAccessFile */", "+            long size = written - dataStart;", "+            entry.setSize(size);", "+            entry.setComprSize(size);", "+            entry.setCrc(realCrc);", "+        }", "+", "+        // If random access output, write the local file header containing", "+        // the correct CRC and compressed/uncompressed sizes", "+        if (raf != null) {", "+            long save = raf.getFilePointer();", "+", "+            raf.seek(localDataStart);", "+            writeOut((new ZipLong(entry.getCrc())).getBytes());", "+            writeOut((new ZipLong(entry.getCompressedSize())).getBytes());", "+            writeOut((new ZipLong(entry.getSize())).getBytes());", "+            raf.seek(save);", "-   }", "+    }"]}]}
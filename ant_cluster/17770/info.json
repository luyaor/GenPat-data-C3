{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d65c31c6ad40f69744c0203bb4d4ca78", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35e28e8e43caa06aa164f4f45881c7f2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "228fb9839c21a0a853598e114faca72c8e9340e7", "commitAfterChange": "9922008d657c72235c402343fd88847b044014ad", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 25, "signatureBeforeChange": "      private void sendMTFValues() throws IOException", "signatureAfterChange": "      private int sendMTFValues1(final int nGroups, final int alphaSize)", "diff": ["-        char len[][] = new char[N_GROUPS][MAX_ALPHA_SIZE];", "-        int v, t, i, j, gs, ge, totc, bt, bc, iter;", "-        int nSelectors = 0, alphaSize, minLen, maxLen, selCtr;", "-        int nGroups; //, nBytes;", "-", "-        alphaSize = nInUse + 2;", "-        for (t = 0; t < N_GROUPS; t++) {", "-            for (v = 0; v < alphaSize; v++) {", "-                len[t][v] = (char) GREATER_ICOST;", "-        if (nMTF <= 0) {", "-            panic();", "-        }", "-        if (nMTF < 200) {", "-            nGroups = 2;", "-        } else if (nMTF < 600) {", "-            nGroups = 3;", "-        } else if (nMTF < 1200) {", "-            nGroups = 4;", "-        } else if (nMTF < 2400) {", "-            nGroups = 5;", "-        } else {", "-            nGroups = 6;", "-        }", "-        /* Generate an initial set of coding tables */ {", "-            int nPart, remF, tFreq, aFreq;", "-", "-            nPart = nGroups;", "-            remF  = nMTF;", "-            gs = 0;", "-            while (nPart > 0) {", "-                tFreq = remF / nPart;", "-                ge = gs - 1;", "-                aFreq = 0;", "-                while (aFreq < tFreq && ge < alphaSize - 1) {", "-                    ge++;", "-                    aFreq += mtfFreq[ge];", "-                }", "-", "-                if (ge > gs && nPart != nGroups && nPart != 1", "-                    && ((nGroups - nPart) % 2 != 0)) {", "-                    aFreq -= mtfFreq[ge];", "-                    ge--;", "-                }", "-", "-                for (v = 0; v < alphaSize; v++) {", "-                    if (v >= gs && v <= ge) {", "-                        len[nPart - 1][v] = (char) LESSER_ICOST;", "-                    } else {", "-                        len[nPart - 1][v] = (char) GREATER_ICOST;", "-                    }", "-                }", "-", "-                nPart--;", "-                gs = ge + 1;", "-                remF -= aFreq;", "-            }", "-        }", "-", "-        int[][] rfreq = new int[N_GROUPS][MAX_ALPHA_SIZE];", "-        int[] fave = new int[N_GROUPS];", "-        short[] cost = new short[N_GROUPS];", "-          Iterate up to N_ITERS times to improve the tables.", "-        */", "-        for (iter = 0; iter < N_ITERS; iter++) {", "-            for (t = 0; t < nGroups; t++) {", "-                fave[t] = 0;", "-            for (t = 0; t < nGroups; t++) {", "-                for (v = 0; v < alphaSize; v++) {", "-                    rfreq[t][v] = 0;", "+", "+    private int sendMTFValues1(final int nGroups, final int alphaSize) {", "+        final Data dataShadow = this.data;", "+        final int[][] rfreq = dataShadow.sendMTFValues_rfreq;", "+        final int[] fave = dataShadow.sendMTFValues_fave;", "+        final short[] cost = dataShadow.sendMTFValues_cost;", "+        final char[] sfmap = dataShadow.sfmap;", "+        final byte[] selector = dataShadow.selector;", "+        final byte[][] len = dataShadow.sendMTFValues_len;", "+        final byte[] len_0 = len[0];", "+        final byte[] len_1 = len[1];", "+        final byte[] len_2 = len[2];", "+        final byte[] len_3 = len[3];", "+        final byte[] len_4 = len[4];", "+        final byte[] len_5 = len[5];", "+        final int nMTFShadow = this.nMTF;", "+", "+        int nSelectors = 0;", "+", "+        for (int iter = 0; iter < N_ITERS; iter++) {", "+            for (int t = nGroups; --t >= 0;) {", "+                fave[t] = 0;", "+                int[] rfreqt = rfreq[t];", "+                for (int i = alphaSize; --i >= 0;) {", "+                    rfreqt[i] = 0;", "-            totc = 0;", "-            gs = 0;", "-            while (true) {", "+            for (int gs = 0; gs < this.nMTF;) {", "-                if (gs >= nMTF) {", "-                    break;", "-                }", "-                ge = gs + G_SIZE - 1;", "-                if (ge >= nMTF) {", "-                    ge = nMTF - 1;", "-                }", "-                  Calculate the cost of this group as coded", "-                  by each of the coding tables.", "-                */", "-                for (t = 0; t < nGroups; t++) {", "-                    cost[t] = 0;", "-                }", "+                 * Calculate the cost of this group as coded by each of the", "+                 * coding tables.", "+                 */", "-                if (nGroups == 6) {", "-                    short cost0, cost1, cost2, cost3, cost4, cost5;", "-                    cost0 = cost1 = cost2 = cost3 = cost4 = cost5 = 0;", "-                    for (i = gs; i <= ge; i++) {", "-                        short icv = szptr[i];", "-                        cost0 += len[0][icv];", "-                        cost1 += len[1][icv];", "-                        cost2 += len[2][icv];", "-                        cost3 += len[3][icv];", "-                        cost4 += len[4][icv];", "-                        cost5 += len[5][icv];", "+                final int ge = Math.min(gs + G_SIZE - 1, nMTFShadow - 1);", "+", "+                if (nGroups == N_GROUPS) {", "+                    // unrolled version of the else-block", "+", "+                    short cost0 = 0;", "+                    short cost1 = 0;", "+                    short cost2 = 0;", "+                    short cost3 = 0;", "+                    short cost4 = 0;", "+                    short cost5 = 0;", "+", "+                    for (int i = gs; i <= ge; i++) {", "+                        final int icv = sfmap[i];", "+                        cost0 += len_0[icv] & 0xff;", "+                        cost1 += len_1[icv] & 0xff;", "+                        cost2 += len_2[icv] & 0xff;", "+                        cost3 += len_3[icv] & 0xff;", "+                        cost4 += len_4[icv] & 0xff;", "+                        cost5 += len_5[icv] & 0xff;", "+", "+", "-                    for (i = gs; i <= ge; i++) {", "-                        short icv = szptr[i];", "-                        for (t = 0; t < nGroups; t++) {", "-                            cost[t] += len[t][icv];", "+                    for (int t = nGroups; --t >= 0;) {", "+                        cost[t] = 0;", "+                    }", "+", "+                    for (int i = gs; i <= ge; i++) {", "+                        final int icv = sfmap[i];", "+                        for (int t = nGroups; --t >= 0;) {", "+                            cost[t] += len[t][icv] & 0xff;", "-                  Find the coding table which is best for this group,", "-                  and record its identity in the selector table.", "-                */", "-                bc = 999999999;", "-                bt = -1;", "-                for (t = 0; t < nGroups; t++) {", "-                    if (cost[t] < bc) {", "-                        bc = cost[t];", "+                 * Find the coding table which is best for this group, and", "+                 * record its identity in the selector table.", "+                 */", "+                int bt = -1;", "+                for (int t = nGroups, bc = 999999999; --t >= 0;) {", "+                    final int cost_t = cost[t];", "+                    if (cost_t < bc) {", "+                        bc = cost_t;", "-                totc += bc;", "+", "-                selector[nSelectors] = (char) bt;", "+                selector[nSelectors] = (byte) bt;", "-                  Increment the symbol frequencies for the selected table.", "-                */", "-                for (i = gs; i <= ge; i++) {", "-                    rfreq[bt][szptr[i]]++;", "+                 * Increment the symbol frequencies for the selected table.", "+                 */", "+                final int[] rfreq_bt = rfreq[bt];", "+                for (int i = gs; i <= ge; i++) {", "+                    rfreq_bt[sfmap[i]]++;", "-              Recompute the tables based on the accumulated frequencies.", "-            */", "-            for (t = 0; t < nGroups; t++) {", "-                hbMakeCodeLengths(len[t], rfreq[t], alphaSize, 20);", "+             * Recompute the tables based on the accumulated frequencies.", "+             */", "+            for (int t = 0; t < nGroups; t++) {", "+                hbMakeCodeLengths(len[t], rfreq[t], this.data, alphaSize, 20);", "-        rfreq = null;", "-        fave = null;", "-        cost = null;", "+        return nSelectors;", "+    }", "-        if (!(nGroups < 8)) {", "-            panic();", "-        }", "-        if (!(nSelectors < 32768 && nSelectors <= (2 + (900000 / G_SIZE)))) {", "-            panic();", "-        /* Compute MTF values for the selectors. */", "-        {", "-            char[] pos = new char[N_GROUPS];", "-            char ll_i, tmp2, tmp;", "-            for (i = 0; i < nGroups; i++) {", "-                pos[i] = (char) i;", "-            }", "-            for (i = 0; i < nSelectors; i++) {", "-                ll_i = selector[i];", "-                j = 0;", "-                while (ll_i != tmp) {", "-                    j++;", "-                    tmp2 = tmp;", "-                    tmp = pos[j];", "-                    pos[j] = tmp2;", "-                }", "-                pos[0] = tmp;", "-                selectorMtf[i] = (char) j;", "-        int[][] code = new int[N_GROUPS][MAX_ALPHA_SIZE];", "-        /* Assign actual codes for the tables. */", "-        for (t = 0; t < nGroups; t++) {", "-            minLen = 32;", "-            maxLen = 0;", "-            for (i = 0; i < alphaSize; i++) {", "-                if (len[t][i] > maxLen) {", "-                    maxLen = len[t][i];", "-                if (len[t][i] < minLen) {", "-                    minLen = len[t][i];", "-            if (maxLen > 20) {", "-                panic();", "-            }", "-            if (minLen < 1) {", "-                panic();", "-            }", "-        /* Transmit the mapping table. */", "-        {", "-            boolean[] inUse16 = new boolean[16];", "-            for (i = 0; i < 16; i++) {", "-                inUse16[i] = false;", "-                for (j = 0; j < 16; j++) {", "-                    if (inUse[i * 16 + j]) {", "-                        inUse16[i] = true;", "-                    }", "-", "-            //nBytes = bytesOut;", "-            for (i = 0; i < 16; i++) {", "-                if (inUse16[i]) {", "-                    bsW(1, 1);", "-                } else {", "-                    bsW(1, 0);", "-                }", "-            }", "-", "-            for (i = 0; i < 16; i++) {", "-                if (inUse16[i]) {", "-                    for (j = 0; j < 16; j++) {", "-                        if (inUse[i * 16 + j]) {", "-                            bsW(1, 1);", "-                        } else {", "-                            bsW(1, 0);", "-                        }", "-                    }", "-                }", "-            }", "-", "-        /* Now the selectors. */", "-        //nBytes = bytesOut;", "-        bsW (3, nGroups);", "-        bsW (15, nSelectors);", "-        for (i = 0; i < nSelectors; i++) {", "-            for (j = 0; j < selectorMtf[i]; j++) {", "-                bsW(1, 1);", "-            }", "-            bsW(1, 0);", "-        /* Now the coding tables. */", "-        //nBytes = bytesOut;", "-        for (t = 0; t < nGroups; t++) {", "-            int curr = len[t][0];", "-            bsW(5, curr);", "-            for (i = 0; i < alphaSize; i++) {", "-                while (curr < len[t][i]) {", "-                    bsW(2, 2);", "-                while (curr > len[t][i]) {", "-                    bsW(2, 3);", "-                bsW (1, 0);", "-        /* And finally, the block data proper */", "-        //nBytes = bytesOut;", "-        selCtr = 0;", "-        gs = 0;", "-        while (true) {", "-            if (gs >= nMTF) {", "-                break;", "-            }", "-            ge = gs + G_SIZE - 1;", "-            if (ge >= nMTF) {", "-                ge = nMTF - 1;", "-            }", "-            for (i = gs; i <= ge; i++) {", "-                bsW(len[selector[selCtr]][szptr[i]],", "-                    code[selector[selCtr]][szptr[i]]);", "-        if (!(selCtr == nSelectors)) {", "-            panic();", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd0f076cdd65f27364ff8edd904605bf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "3477bbf6474cdd2b70b12eb638e64415a4f1c2ec", "commitAfterChange": "134d95afef9b42cf08f2eccb077b97525ac38034", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 24, "signatureBeforeChange": "      private void sendMTFValues() throws IOException", "signatureAfterChange": "      private int sendMTFValues1(final int nGroups, final int alphaSize)", "diff": ["-", "-        char len[][] = new char[N_GROUPS][MAX_ALPHA_SIZE];", "-        int v, t, i, j, gs, ge, totc, bt, bc, iter;", "-        int nSelectors = 0, alphaSize, minLen, maxLen, selCtr;", "-        int nGroups, nBytes;", "-", "-        alphaSize = nInUse + 2;", "-        for (t = 0; t < N_GROUPS; t++) {", "-            for (v = 0; v < alphaSize; v++) {", "-                len[t][v] = (char) GREATER_ICOST;", "-        if (nMTF <= 0) {", "-            panic();", "-        }", "-        if (nMTF < 200) {", "-            nGroups = 2;", "-        } else if (nMTF < 600) {", "-            nGroups = 3;", "-        } else if (nMTF < 1200) {", "-            nGroups = 4;", "-        } else if (nMTF < 2400) {", "-            nGroups = 5;", "-        } else {", "-            nGroups = 6;", "-        }", "-        /* Generate an initial set of coding tables */ {", "-            int nPart, remF, tFreq, aFreq;", "-", "-            nPart = nGroups;", "-            remF  = nMTF;", "-            gs = 0;", "-            while (nPart > 0) {", "-                tFreq = remF / nPart;", "-                ge = gs - 1;", "-                aFreq = 0;", "-                while (aFreq < tFreq && ge < alphaSize - 1) {", "-                    ge++;", "-                    aFreq += mtfFreq[ge];", "-                }", "-", "-                if (ge > gs && nPart != nGroups && nPart != 1", "-                    && ((nGroups - nPart) % 2 == 1)) {", "-                    aFreq -= mtfFreq[ge];", "-                    ge--;", "-                }", "-", "-                for (v = 0; v < alphaSize; v++) {", "-                    if (v >= gs && v <= ge) {", "-                        len[nPart - 1][v] = (char) LESSER_ICOST;", "-                    } else {", "-                        len[nPart - 1][v] = (char) GREATER_ICOST;", "-                    }", "-                }", "-", "-                nPart--;", "-                gs = ge + 1;", "-                remF -= aFreq;", "-            }", "-        }", "-", "-        int[][] rfreq = new int[N_GROUPS][MAX_ALPHA_SIZE];", "-        int[] fave = new int[N_GROUPS];", "-        short[] cost = new short[N_GROUPS];", "-        for (iter = 0; iter < N_ITERS; iter++) {", "-            for (t = 0; t < nGroups; t++) {", "-                fave[t] = 0;", "-            for (t = 0; t < nGroups; t++) {", "-                for (v = 0; v < alphaSize; v++) {", "-                    rfreq[t][v] = 0;", "+", "+    private int sendMTFValues1(final int nGroups, final int alphaSize) {", "+        final Data data       = this.data;", "+        final int[][] rfreq   = data.sendMTFValues_rfreq;", "+        final int[] fave      = data.sendMTFValues_fave;", "+        final short[] cost    = data.sendMTFValues_cost;", "+        final char[] sfmap    = data.sfmap;", "+        final byte[] selector = data.selector;", "+        final byte[][] len    = data.sendMTFValues_len;", "+        final byte[] len_0 = len[0];", "+        final byte[] len_1 = len[1];", "+        final byte[] len_2 = len[2];", "+        final byte[] len_3 = len[3];", "+        final byte[] len_4 = len[4];", "+        final byte[] len_5 = len[5];", "+        final int nMTF = this.nMTF;", "+", "+        int nSelectors = 0;", "+", "+        for (int iter = 0; iter < N_ITERS; iter++) {", "+            for (int t = nGroups; --t >= 0;) {", "+                fave[t] = 0;", "+                int[] rfreqt = rfreq[t];", "+                for (int i = alphaSize; --i >= 0;) {", "+                    rfreqt[i] = 0;", "-            totc = 0;", "-            gs = 0;", "-            while (true) {", "+            for (int gs = 0; gs < this.nMTF;) {", "-                if (gs >= nMTF) {", "-                    break;", "-                }", "-                ge = gs + G_SIZE - 1;", "-                if (ge >= nMTF) {", "-                    ge = nMTF - 1;", "-                }", "-                for (t = 0; t < nGroups; t++) {", "-                    cost[t] = 0;", "-                }", "-                if (nGroups == 6) {", "-                    short cost0, cost1, cost2, cost3, cost4, cost5;", "-                    cost0 = cost1 = cost2 = cost3 = cost4 = cost5 = 0;", "-                    for (i = gs; i <= ge; i++) {", "-                        short icv = szptr[i];", "-                        cost0 += len[0][icv];", "-                        cost1 += len[1][icv];", "-                        cost2 += len[2][icv];", "-                        cost3 += len[3][icv];", "-                        cost4 += len[4][icv];", "-                        cost5 += len[5][icv];", "+                final int ge = Math.min(gs + G_SIZE - 1, nMTF - 1);", "+", "+                if (nGroups == N_GROUPS) {", "+                    // unrolled version of the else-block", "+", "+                    short cost0 = 0;", "+                    short cost1 = 0;", "+                    short cost2 = 0;", "+                    short cost3 = 0;", "+                    short cost4 = 0;", "+                    short cost5 = 0;", "+", "+                    for (int i = gs; i <= ge; i++) {", "+                        final int icv = sfmap[i];", "+                        cost0 += len_0[icv] & 0xff;", "+                        cost1 += len_1[icv] & 0xff;", "+                        cost2 += len_2[icv] & 0xff;", "+                        cost3 += len_3[icv] & 0xff;", "+                        cost4 += len_4[icv] & 0xff;", "+                        cost5 += len_5[icv] & 0xff;", "+", "+", "-                    for (i = gs; i <= ge; i++) {", "-                        short icv = szptr[i];", "-                        for (t = 0; t < nGroups; t++) {", "-                            cost[t] += len[t][icv];", "+                    for (int t = nGroups; --t >= 0;) {", "+                        cost[t] = 0;", "+                    }", "+", "+                    for (int i = gs; i <= ge; i++) {", "+                        final int icv = sfmap[i];", "+                        for (int t = nGroups; --t >= 0;) {", "+                            cost[t] += len[t][icv] & 0xff;", "-                bc = 999999999;", "-                bt = -1;", "-                for (t = 0; t < nGroups; t++) {", "-                    if (cost[t] < bc) {", "-                        bc = cost[t];", "+                int bt = -1;", "+                for (int t = nGroups, bc = 999999999; --t >= 0;) {", "+                    final int cost_t = cost[t];", "+                    if (cost_t < bc) {", "+                        bc = cost_t;", "-                };", "-                totc += bc;", "+                }", "+", "-                selector[nSelectors] = (char) bt;", "+                selector[nSelectors] = (byte) bt;", "-                for (i = gs; i <= ge; i++) {", "-                    rfreq[bt][szptr[i]]++;", "+                final int[] rfreq_bt = rfreq[bt];", "+                for (int i = gs; i <= ge; i++) {", "+                    rfreq_bt[sfmap[i]]++;", "-            for (t = 0; t < nGroups; t++) {", "-                hbMakeCodeLengths(len[t], rfreq[t], alphaSize, 20);", "+            for (int t = 0; t < nGroups; t++) {", "+                hbMakeCodeLengths(len[t], rfreq[t], this.data, alphaSize, 20);", "-        rfreq = null;", "-        fave = null;", "-        cost = null;", "+        return nSelectors;", "+    }", "-        if (!(nGroups < 8)) {", "-            panic();", "-        }", "-        if (!(nSelectors < 32768 && nSelectors <= (2 + (900000 / G_SIZE)))) {", "-            panic();", "-        /* Compute MTF values for the selectors. */", "-        {", "-            char[] pos = new char[N_GROUPS];", "-            char ll_i, tmp2, tmp;", "-            for (i = 0; i < nGroups; i++) {", "-                pos[i] = (char) i;", "-            }", "-            for (i = 0; i < nSelectors; i++) {", "-                ll_i = selector[i];", "-                j = 0;", "-                while (ll_i != tmp) {", "-                    j++;", "-                    tmp2 = tmp;", "-                    tmp = pos[j];", "-                    pos[j] = tmp2;", "-                }", "-                pos[0] = tmp;", "-                selectorMtf[i] = (char) j;", "-        int[][] code = new int[N_GROUPS][MAX_ALPHA_SIZE];", "-        /* Assign actual codes for the tables. */", "-        for (t = 0; t < nGroups; t++) {", "-            minLen = 32;", "-            maxLen = 0;", "-            for (i = 0; i < alphaSize; i++) {", "-                if (len[t][i] > maxLen) {", "-                    maxLen = len[t][i];", "-                if (len[t][i] < minLen) {", "-                    minLen = len[t][i];", "-            if (maxLen > 20) {", "-                panic();", "-            }", "-            if (minLen < 1) {", "-                panic();", "-            }", "-        /* Transmit the mapping table. */", "-        {", "-            boolean[] inUse16 = new boolean[16];", "-            for (i = 0; i < 16; i++) {", "-                inUse16[i] = false;", "-                for (j = 0; j < 16; j++) {", "-                    if (inUse[i * 16 + j]) {", "-                        inUse16[i] = true;", "-                    }", "-", "-            nBytes = bytesOut;", "-            for (i = 0; i < 16; i++) {", "-                if (inUse16[i]) {", "-                    bsW(1, 1);", "-                } else {", "-                    bsW(1, 0);", "-                }", "-            }", "-", "-            for (i = 0; i < 16; i++) {", "-                if (inUse16[i]) {", "-                    for (j = 0; j < 16; j++) {", "-                        if (inUse[i * 16 + j]) {", "-                            bsW(1, 1);", "-                        } else {", "-                            bsW(1, 0);", "-                        }", "-                    }", "-                }", "-            }", "-", "-        /* Now the selectors. */", "-        nBytes = bytesOut;", "-        bsW (3, nGroups);", "-        bsW (15, nSelectors);", "-        for (i = 0; i < nSelectors; i++) {", "-            for (j = 0; j < selectorMtf[i]; j++) {", "-                bsW(1, 1);", "-            }", "-            bsW(1, 0);", "-        /* Now the coding tables. */", "-        nBytes = bytesOut;", "-        for (t = 0; t < nGroups; t++) {", "-            int curr = len[t][0];", "-            bsW(5, curr);", "-            for (i = 0; i < alphaSize; i++) {", "-                while (curr < len[t][i]) {", "-                    bsW(2, 2);", "-                while (curr > len[t][i]) {", "-                    bsW(2, 3);", "-                bsW (1, 0);", "-        /* And finally, the block data proper */", "-        nBytes = bytesOut;", "-        selCtr = 0;", "-        gs = 0;", "-        while (true) {", "-            if (gs >= nMTF) {", "-                break;", "-            }", "-            ge = gs + G_SIZE - 1;", "-            if (ge >= nMTF) {", "-                ge = nMTF - 1;", "-            }", "-            for (i = gs; i <= ge; i++) {", "-                bsW(len[selector[selCtr]][szptr[i]],", "-                    code[selector[selCtr]][szptr[i]]);", "-        if (!(selCtr == nSelectors)) {", "-            panic();", "-        }"]}]}
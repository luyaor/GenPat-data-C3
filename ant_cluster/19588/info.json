{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1a461d47b1dd61890e40ef16261101b2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23ed9977a1a5c433b22223da26eb6994", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/util/FileUtilsTest.java", "commitBeforeChange": "02307f7dea1fb0177a13e50d7037c0f6286de1e7", "commitAfterChange": "760f5d26a1695095eecf18a235013fb43c9621a5", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void testToURI()", "signatureAfterChange": "     public void testToURI()", "diff": ["+        String dosRoot = null;", "+        if (Os.isFamily(\"dos\")) {", "+            dosRoot = \"C:/\";", "+        }", "+        else", "+        {", "+            dosRoot = \"\";", "+        }", "-        assertEquals(\"file:///foo\", fu.toURI(\"/foo\"));", "+        assertEquals(\"file:///\" + dosRoot + \"foo\", fu.toURI(\"/foo\"));", "-        assertEquals(\"file:///foo\", fu.toURI(\"\\\\foo\"));", "+        assertEquals(\"file:///\" + dosRoot + \"foo\", fu.toURI(\"\\\\foo\"));", "-        assertEquals(\"file:///foo%20bar\", fu.toURI(\"/foo bar\"));", "-        assertEquals(\"file:///foo%20bar\", fu.toURI(\"\\\\foo bar\"));", "-        assertEquals(\"file:///foo%23bar\", fu.toURI(\"/foo#bar\"));", "-        assertEquals(\"file:///foo%23bar\", fu.toURI(\"\\\\foo#bar\"));", "+        assertEquals(\"file:///\" + dosRoot + \"foo%20bar\", fu.toURI(\"/foo bar\"));", "+        assertEquals(\"file:///\" + dosRoot + \"foo%20bar\", fu.toURI(\"\\\\foo bar\"));", "+        assertEquals(\"file:///\" + dosRoot + \"foo%23bar\", fu.toURI(\"/foo#bar\"));", "+        assertEquals(\"file:///\" + dosRoot + \"foo%23bar\", fu.toURI(\"\\\\foo#bar\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d9ec41c142524ce6c375dcf8f7866b9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/util/FileUtilsTest.java", "commitBeforeChange": "1efb922bf591d5a8b083c5984b51fd46b0ebb9af", "commitAfterChange": "e12c63a6ee1b0bb45e9821ff84392c9391d76bd9", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void testFromURI()", "signatureAfterChange": "     public void testFromURI()", "diff": ["+        String dosRoot = null;", "+        if (Os.isFamily(\"dos\") || Os.isFamily(\"netware\")) {", "+            dosRoot = Character.toUpperCase(", "+                System.getProperty(\"user.dir\").charAt(0)) + \":\";", "+        }", "+        else", "+        {", "+            dosRoot = \"\";", "+        }", "-        assertEqualsIgnoreDriveCase(File.separator + \"foo\", FILE_UTILS.fromURI(\"file:///foo\"));", "+        assertEqualsIgnoreDriveCase(dosRoot + File.separator + \"foo\", FILE_UTILS.fromURI(\"file:///foo\"));", "-        assertEquals(File.separator + \"foo bar\", FILE_UTILS.fromURI(\"file:///foo%20bar\"));", "-        assertEquals(File.separator + \"foo#bar\", FILE_UTILS.fromURI(\"file:///foo%23bar\"));", "+        assertEquals(dosRoot + File.separator + \"foo bar\", FILE_UTILS.fromURI(\"file:///foo%20bar\"));", "+        assertEquals(dosRoot + File.separator + \"foo#bar\", FILE_UTILS.fromURI(\"file:///foo%23bar\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87b83f9dd225fe061da52d867221fdac", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SignJar.java", "commitBeforeChange": "789422e131b6c2c003d94f394169a64297e986c6", "commitAfterChange": "7f51882300a8e40ff675867e055061867ba6c8bd", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 24, "signatureBeforeChange": "     private void addTimestampAuthorityCommands(final ExecTask cmd)", "signatureAfterChange": "     private void addTimestampAuthorityCommands(final ExecTask cmd)", "diff": ["+", "+", "+        if (tsaproxyhost != null) {", "+            final String connectionType;", "+            if (tsaurl.startsWith(\"https\")) {", "+                connectionType = \"https\";", "+            } else {", "+                connectionType = \"http\";", "+            }", "+", "+            addValue(cmd, \"-J-D\" + connectionType + \".proxyHost=\" + tsaproxyhost);", "+", "+            if (tsaproxyport != null) {", "+                addValue(cmd, \"-J-D\" + connectionType + \".proxyPort=\" + tsaproxyport);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aafada44476927765bea729ba8e84570", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/embeddor/DefaultEmbeddor.java", "commitBeforeChange": "b51fbab47db1b7ee3178fd7da2223d71a31f517b", "commitAfterChange": "d91ef0968d3cc0e095115dfb8fcc84e9807d4caf", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private Parameters createDefaultParameters()", "signatureAfterChange": "     private Parameters createDefaultParameters()", "diff": ["-        defaults.setParameter( AspectManager.ROLE,", "-                               \"org.apache.myrmidon.components.aspect.DefaultAspectManager\" );", "-        defaults.setParameter( RoleManager.ROLE,", "-                               \"org.apache.myrmidon.components.role.DefaultRoleManager\" );", "-        defaults.setParameter( MasterConverter.ROLE,", "-                               \"org.apache.myrmidon.components.converter.DefaultMasterConverter\" );", "-        defaults.setParameter( ConverterRegistry.ROLE,", "-                               \"org.apache.myrmidon.components.converter.DefaultConverterRegistry\" );", "-        defaults.setParameter( TypeManager.ROLE,", "-                               \"org.apache.myrmidon.components.type.DefaultTypeManager\" );", "+        final String PREFIX = \"org.apache.myrmidon.components.\";", "+        defaults.setParameter( AspectManager.ROLE, PREFIX + \"aspect.DefaultAspectManager\" );", "+        defaults.setParameter( RoleManager.ROLE, PREFIX + \"role.DefaultRoleManager\" );", "+        defaults.setParameter( MasterConverter.ROLE, PREFIX + \"converter.DefaultMasterConverter\" );", "+        defaults.setParameter( ConverterRegistry.ROLE, PREFIX + \"converter.DefaultConverterRegistry\" );", "+        defaults.setParameter( TypeManager.ROLE, PREFIX + \"type.DefaultTypeManager\" );", "-                               \"org.apache.myrmidon.components.executor.AspectAwareExecutor\" );", "-        defaults.setParameter( Workspace.ROLE,", "-                               \"org.apache.myrmidon.components.workspace.DefaultWorkspace\" );", "-        defaults.setParameter( Deployer.ROLE,", "-                               \"org.apache.myrmidon.components.deployer.DefaultDeployer\" );", "-        defaults.setParameter( Configurer.ROLE,", "-                               \"org.apache.myrmidon.components.configurer.DefaultConfigurer\" );", "+                               PREFIX + \"executor.AspectAwareExecutor\" );", "+        defaults.setParameter( Workspace.ROLE, PREFIX + \"workspace.DefaultWorkspace\" );", "+        defaults.setParameter( Deployer.ROLE, PREFIX + \"deployer.DefaultDeployer\" );", "+        defaults.setParameter( Configurer.ROLE, PREFIX + \"configurer.DefaultConfigurer\" );", "+        defaults.setParameter( ExtensionManager.ROLE, PREFIX + \"extensions.DefaultExtensionManager\" );"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b2887019ed94fd092161c0fc2d06f345", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "039d81a85bf36aefe035f87dd542f157", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ExecutionManager.java", "commitBeforeChange": "ec9816997d704ba18f8209a3b8330275e5a61325", "commitAfterChange": "30b81779b563d12a1e28bebf934d5a5626da57ce", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void runBuild(Project project, List targets, Map commandProperties)", "signatureAfterChange": "     public void runBuild(Project project, List targets, Map commandProperties)", "diff": ["+", "+            mainFrame = new Frame(antLibraries, initConfig, config);", "+            for (Iterator j = eventSupport.getListeners(); j.hasNext(); ) {", "+                BuildListener listener = (BuildListener)j.next();", "+                mainFrame.addBuildListener(listener);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2987d28380f29a838bc7e2eaf6c5431c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Project.java", "commitBeforeChange": "25e76768e8d8dcdc6c770d00c0659daf0c13003e", "commitAfterChange": "4ac04f30c2cdc4c0d31eaf13f797afe2aa72fea0", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": "     private void fireMessageLoggedEvent(BuildEvent event, String message,                                         int priority)", "signatureAfterChange": "     private void fireMessageLoggedEvent(BuildEvent event, String message,                                         int priority)", "diff": ["-        event.setMessage(message, priority);", "+", "+        if (message.endsWith(StringUtils.LINE_SEP)) {", "+            int endIndex = message.length() - StringUtils.LINE_SEP.length();", "+            event.setMessage(message.substring(0, endIndex), priority);", "+        } else {", "+            event.setMessage(message, priority);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35dba2ceebcb18555c36cc6e534b452d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/junit/XMLResultAggregatorTest.java", "commitBeforeChange": "d5e0cccd5d7adc25edb3ac41dd5999243f71eff1", "commitAfterChange": "aa200450f56a4b561e1c69d9149ce5e1fe89d6b7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testFrames() throws Exception", "signatureAfterChange": "      public void testFrames() throws Exception", "diff": ["+        DefaultLogger logger = new DefaultLogger();", "+        logger.setOutputPrintStream(System.out);", "+        logger.setErrorPrintStream(System.err);", "+        logger.setMessageOutputLevel(Project.MSG_INFO);", "+        project.addBuildListener(logger);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5522088a9f356784bc124be72bfefcbd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javac.java", "commitBeforeChange": "b0bdced687d02b5b68c19b2c7bf9bccb2724b802", "commitAfterChange": "eaa4b86d6b8a248ebb06122b47ec51c1ebc3cdbb", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": "     protected void compile()", "signatureAfterChange": "     protected void compile()", "diff": ["-            if (!adapter.execute()) {", "+            if (adapter.execute()) {", "+                // Success - check", "+                for (Iterator i = updateDirList.iterator(); i.hasNext();) {", "+                    File file = (File) i.next();", "+                    file.setLastModified(System.currentTimeMillis());", "+                }", "+            } else {", "+                // Fail path"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d1aed4e5f8a4866c6e70b287b8005f3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Chmod.java", "commitBeforeChange": "6035bbf18dc7df5472368d91d69de03b1819c800", "commitAfterChange": "632dad4136fbd0a5eccc98059c56b8c5f2a22030", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "          public void setFile(File src)", "signatureAfterChange": "      public void setFile(File src)", "diff": ["+", "-        srcFile = src;", "+        FileSet fs = new FileSet();", "+        fs.setDir(new File(src.getParent()));", "+        fs.createInclude().setName(src.getName());", "+        addFileset(fs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d25f43d0775d58015fe3afc904cb7ae", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/AbstractCvsTask.java", "commitBeforeChange": "068651116c8e7b2912c894e3958e33b7e3f63bb0", "commitAfterChange": "d85c862e9e6814b15f8b7c13ef20883ad8bad4cb", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "     protected void configureCommandline(Commandline c)", "signatureAfterChange": "     protected void configureCommandline(Commandline c)", "diff": ["+        for (Iterator iter = modules.iterator(); iter.hasNext(); ) {", "+            Module m = (Module) iter.next();", "+            c.createArgument().setValue(m.getName());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da75661c1a5cb3eec4b543662e7ce04c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/email/MimeMailer.java", "commitBeforeChange": "e7fb9570418c8f963123c259470373667ac8a84e", "commitAfterChange": "f5b5a8b53cad568d5a5ab97ed35c91f698fb1c8e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void send()", "signatureAfterChange": "     public void send()", "diff": ["-  /** Sends the email  */", "-  public void send() {", "+     */", "+    public void send() {", "-                    Provider p", "-                        = (Provider) Class.forName(\"com.sun.net.ssl.internal.ssl.Provider\").newInstance();", "+                    Provider p = (Provider) Class.forName(", "+                        \"com.sun.net.ssl.internal.ssl.Provider\").newInstance();", "-", "+            for (Iterator iter = headers.iterator(); iter.hasNext();) {", "+                Header h = (Header) iter.next();", "+                msg.addHeader(h.getName(), h.getValue());", "+            }", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcb3ccde0e028f007cc807c1f21138b2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/ResourceList.java", "commitBeforeChange": "a87dab03d9895405290e64156080fe2cb28d51ef", "commitAfterChange": "1d9f0594cf6ad866250ea83520b0bdba8a37726e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     protected synchronized void dieOnCircularReference(Stack stk, Project p)         throws BuildException", "signatureAfterChange": "     protected synchronized void dieOnCircularReference(Stack stk, Project p)         throws BuildException", "diff": ["-            pushAndInvokeCircularReferenceCheck(textDocuments, stk, p);", "+            for (Iterator iter = textDocuments.iterator(); iter.hasNext(); ) {", "+                Object o = (Object) iter.next();", "+                if (o instanceof DataType) {", "+                    pushAndInvokeCircularReferenceCheck((DataType) o, stk, p);", "+                }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eda4132bd27c0bcb383b492a8c8351b7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "07119705a3be7e0bcf6145d4de1dfd58b42b3734", "commitAfterChange": "abf343291206f3cab8b3436214cc0a88efefcb25", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     private IntrospectionHelper(final Class bean)", "signatureAfterChange": "     private IntrospectionHelper(final Class bean)", "diff": ["+        addTypeMethods = new ArrayList();", "+", "+            // check of add[Configured](Class) pattern", "+            if (args.length == 1", "+                && java.lang.Void.TYPE.equals(returnType)", "+                && (name.equals(\"add\") /*|| name.equals(\"addConfigured\")*/)) {", "+                insertAddTypeMethod(m);", "+                continue;", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f73a6446850306c292a3b313686312b9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "99a9f194032b4185fc017d9bfe31e0419cc51f02", "commitAfterChange": "ced321c00be004a78c335295701169edf0dcb55f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void setAttribute( final ObjectConfigurer configurer,                                final Object object,                                final String name,                                final String value,                                final Context context )         throws ConfigurationException", "signatureAfterChange": "     private void setAttribute( final ObjectConfigurer configurer,                                final Object object,                                final String name,                                final String value,                                final Context context )         throws ConfigurationException", "diff": ["-        // Locate the setter for this attribute", "-        final AttributeSetter setter = configurer.getAttributeSetter( name );", "-        if( null == setter )", "+        if( name.endsWith( \"-ref\" ) )", "-            final String message = REZ.getString( \"unknown-attribute.error\", name );", "-            throw new ConfigurationException( message );", "+            // A reference", "+            final String refName = name.substring( 0, name.length() - 4 );", "+            setReference( configurer, object, refName, value, context );", "+        else", "+        {", "+            // Locate the configurer for this attribute", "+            final PropertyConfigurer propConfigurer = configurer.getProperty( name );", "+            if( null == propConfigurer )", "+            {", "+                final String message = REZ.getString( \"unknown-property.error\", name );", "+                throw new ConfigurationException( message );", "+            }", "-        // Set the value", "-        try", "-        {", "-            setValue( setter, object, value, context );", "-        }", "-        catch( final Exception e )", "-        {", "-            final String message = REZ.getString( \"bad-set-attribute.error\", name );", "-            throw new ConfigurationException( message, e );", "+            // Set the value", "+            try", "+            {", "+                setValue( propConfigurer, object, value, context );", "+            }", "+            catch( final Exception e )", "+            {", "+                final String message = REZ.getString( \"bad-set-property.error\", name );", "+                throw new ConfigurationException( message, e );", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb023ef258ff5dc8f70fe4a0b9a7671c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/Main.java", "commitBeforeChange": "32dc44001f1d8348ce37d9b551feab8158e7b35f", "commitAfterChange": "ce225a0e46c3cb76bd99b45b24c5da3b7f126ed0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      protected void execute( final String[] args )         throws Exception", "signatureAfterChange": "      protected void execute( final String[] args )         throws Exception", "diff": ["-        setupProjectContext( project, defines );", "-            doBuild( engine, project, targets );", "+            final TaskContext context = new DefaultTaskContext();", "+            setupContext( context, defines );", "+", "+            context.setProperty( TaskContext.BASE_DIRECTORY, project.getBaseDirectory() );", "+            context.setProperty( Project.PROJECT_FILE, buildFile );", "+            //context.setProperty( Project.PROJECT, projectName );", "+", "+            doBuild( engine, project, context, targets );"]}]}
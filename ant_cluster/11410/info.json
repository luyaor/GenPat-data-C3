{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "439f5ed6e0bbe10631e59c8152f20de7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fdde3353672c663ec52b248bae04c10", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/workspace/DefaultWorkspace.java", "commitBeforeChange": "e8e790834d38556214ff7d727444f612f871dbc2", "commitAfterChange": "014cf44f1577c2e734efb3357177812df68b1d91", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private ExecutionFrame createExecutionFrame( final Project project )         throws TaskException", "signatureAfterChange": "      private ExecutionFrame createExecutionFrame( final Project project )         throws TaskException", "diff": ["-            final Logger logger = new LogKitLogger( m_hierarchy.getLoggerFor( \"project\" + m_projectID ) );", "+            final Logger logger =", "+                new LogKitLogger( m_hierarchy.getLoggerFor( \"project\" + m_projectID ) );", "+", "+            /**", "+             *  @todo Should no occur but done for the time being to simplify evolution.", "+             */", "+            componentManager.put( ExecutionFrame.ROLE, frame );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1582b346848428f56dce177225fc9888", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/workspace/DefaultWorkspace.java", "commitBeforeChange": "77be1b356a8b5456088e9f314f2e6371e803849c", "commitAfterChange": "3b5944bc9cc8e332a16f02acdea8698b710fea43", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private ExecutionFrame createExecutionFrame( final Project project )         throws TaskException", "signatureAfterChange": "      private ExecutionFrame createExecutionFrame( final Project project )         throws TaskException", "diff": ["-        deployer.setLogger( getLogger() );", "+        deployer.enableLogging( getLogger() );", "-            final Logger logger = m_hierarchy.getLoggerFor( \"project\" + m_projectID );", "+            final Logger logger = new LogKitLogger( m_hierarchy.getLoggerFor( \"project\" + m_projectID ) );", "-            frame.setLogger( logger );", "+            frame.enableLogging( logger );"]}]}
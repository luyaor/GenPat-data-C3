{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "93d7680f78b8406e35823772f5b9b614", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "602a154387dca59dc1d128b7ee8f232d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/antlib/src/main/org/apache/tools/ant/SymbolTable.java", "commitBeforeChange": "6885f5ccadd471cc33c19bdcca4271aa3086d3ca", "commitAfterChange": "8dfa7abd4d64b0cbef6166a28440f39f46d6efd1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public Class add(String role, String name, Class clz)", "signatureAfterChange": "     public Class add(String role, String name, Class clz)", "diff": ["-\tFactory old = get(role, name);", "+\tClass old = get(role, name);", "-\t    if (old.getOriginalClass().equals(clz)) {", "+\t    if (old.equals(clz)) {", "-\t\treturn old.getOriginalClass();", "+\t\treturn old;", "-\tFactory f = checkClass(clz);", "+\tcheckClass(clz);", "-\tf = r.verifyAdaptability(role, f);", "+\tr.verifyAdaptability(role, clz);", "-\tdefTable.put(name, f);", "-", "-        String msg = ", "-\t    \" +User \" + role + \": \" + name + \"     \" + clz.getName();", "-        project.log(msg, project.MSG_DEBUG);", "-\treturn (old != null ? old.getOriginalClass() : null);", "+\tdefTable.put(name, clz);", "+\treturn old;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3b5940cde59edca818746912570ba20", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/DirectoryScannerTest.java", "commitBeforeChange": "02f7f5bc1e0feef4f516ecc8fbbb7084f61b150e", "commitAfterChange": "c0e5ece04f0f654317bff4e63f3d398d0aaae74b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void compareFiles(DirectoryScanner ds, String[] expectedFiles, String[] expectedDirectories)", "signatureAfterChange": "      private void compareFiles(DirectoryScanner ds, String[] expectedFiles,                                String[] expectedDirectories)", "diff": ["-    private void compareFiles(DirectoryScanner ds, String[] expectedFiles, String[] expectedDirectories) {", "-        String includedFiles[] = ds.getIncludedFiles();", "-        String includedDirectories[] = ds.getIncludedDirectories();", "-        assertTrue(\"expecting : \" + expectedFiles.length + \" files, present : \" + includedFiles.length, includedFiles.length == expectedFiles.length);", "-        assertTrue(\"expecting : \" + expectedDirectories.length + \" directories, present : \" + includedDirectories.length, includedDirectories.length == expectedDirectories.length);", "-        TreeSet files = new TreeSet();", "-        for (int counter=0; counter < includedFiles.length; counter++) {", "-            files.add(includedFiles[counter].replace(File.separatorChar,'/'));", "-        }", "-        TreeSet directories = new TreeSet();", "-        for (int counter=0; counter < includedDirectories.length; counter++) {", "-            directories.add(includedDirectories[counter].replace(File.separatorChar,'/'));", "-        }", "-        String currentfile;", "-        Iterator i = files.iterator();", "-        int counter = 0;", "-        while (i.hasNext()) {", "-            currentfile = (String) i.next();", "-            assertTrue(\"expecting file \" + expectedFiles[counter], currentfile.equals(expectedFiles[counter]));", "-            counter++;", "-        }", "-        String currentdirectory;", "-        Iterator dirit = directories.iterator();", "-        counter = 0;", "-        while (dirit.hasNext()) {", "-            currentdirectory = (String) dirit.next();", "-            assertTrue(\"expecting directory \" + expectedDirectories[counter], currentdirectory.equals(expectedDirectories[counter]));", "-            counter++;", "-        }", "+    private void compareFiles(DirectoryScanner ds, String[] expectedFiles, ", "+                              String[] expectedDirectories) {", "+        String includedFiles[] = ds.getIncludedFiles();", "+        String includedDirectories[] = ds.getIncludedDirectories();", "+        assertEquals(\"file present: \", expectedFiles.length,  ", "+                     includedFiles.length);", "+        assertEquals(\"directories present: \", expectedDirectories.length,  ", "+                     includedDirectories.length);", "+", "+        TreeSet files = new TreeSet();", "+        for (int counter=0; counter < includedFiles.length; counter++) {", "+            files.add(includedFiles[counter].replace(File.separatorChar, '/'));", "+        }", "+        TreeSet directories = new TreeSet();", "+        for (int counter=0; counter < includedDirectories.length; counter++) {", "+            directories.add(includedDirectories[counter]", "+                            .replace(File.separatorChar, '/'));", "+        }", "+", "+        String currentfile;", "+        Iterator i = files.iterator();", "+        int counter = 0;", "+        while (i.hasNext()) {", "+            currentfile = (String) i.next();", "+            assertEquals(expectedFiles[counter], currentfile);", "+            counter++;", "+        }", "+        String currentdirectory;", "+        Iterator dirit = directories.iterator();", "+        counter = 0;", "+        while (dirit.hasNext()) {", "+            currentdirectory = (String) dirit.next();", "+            assertEquals(expectedDirectories[counter], currentdirectory);", "+            counter++;", "+        }", "+    }"]}]}
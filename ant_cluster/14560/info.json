{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f27e2e6c116829b5501f03e9306554a8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32b5a0d1d572942acea695754616112a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/framework/Execute.java", "commitBeforeChange": "b0bf9dddde85cb1e6723303338ed03432acfcf2e", "commitAfterChange": "9f496d1b2a1bcf4a5ac32e2e890a695eb163d81e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public Commandline getCommandline()", "signatureAfterChange": "     private String[] getCommandLine()", "diff": ["-     */", "-    public Commandline getCommandline()", "-    {", "-        if( null == m_command )", "-        {", "-            m_command = new Commandline();", "-        }", "-        return m_command;", "+     */", "+    private String[] getCommandLine()", "+    {", "+        final String[] args = getArguments();", "+        final String[] result = new String[ args.length + 1 ];", "+        result[ 0 ] = getExecutable().replace( '/', File.separatorChar ).replace( '\\\\', File.separatorChar );", "+        System.arraycopy( args, 0, result, 1, args.length );", "+        return result;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99bf6ed28858acf08f750ce98fdbfb7d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/Commandline.java", "commitBeforeChange": "0f2ab7fa915b56f0c27995e813d16b25d392e0cc", "commitAfterChange": "2c905033e5cd06651d88e58949883841858059c9", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     public String[] getCommandline()", "signatureAfterChange": "     public String[] getCommandline()", "diff": ["-        final String[] args = getArguments();", "-        if (executable == null) {", "-            return args;", "+        List commands=new LinkedList();", "+        ListIterator list = commands.listIterator();", "+        addCommandToList(list);", "+        final String[] result = new String[commands.size()];", "+        return (String[])commands.toArray(result);", "+    }", "-        final String[] result = new String[args.length + 1];", "-        result[0] = executable;", "-        System.arraycopy(args, 0, result, 1, args.length);", "-        return result;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "825570272262b5c849fd7eb207471526", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52567a7c75c2eb36315210ebcfacac5c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/UnknownElement.java", "commitBeforeChange": "149ce34431423cd116e5d7175ff281c30565aa6a", "commitAfterChange": "5460755b447223e93e926e11a08e4df4f0e0ddb5", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private boolean handleChild(IntrospectionHelper ih,                                 Object parent, UnknownElement child,                                 String childTag,                                 RuntimeConfigurable childWrapper)", "signatureAfterChange": "     private boolean handleChild(IntrospectionHelper ih,                                 Object parent, UnknownElement child,                                 RuntimeConfigurable childWrapper)", "diff": ["-                                String childTag,", "-        if (ih.supportsNestedElement(childTag)) {", "-            Object realChild", "-                = ih.createElement(getProject(), parent, childTag);", "+        // backwards compatibility - element names of nested", "+        // elements have been all lower-case in Ant, except for", "+        // TaskContainers", "+        String childName = child.getTag().toLowerCase(Locale.US);", "+        if (ih.supportsNestedElement(childName)) {", "+            IntrospectionHelper.Creator creator =", "+                ih.getElementCreator(getProject(), parent, childName);", "+            creator.setPolyType(childWrapper.getPolyType());", "+            Object realChild=creator.create();", "+            childWrapper.setCreator(creator);", "-                childTask.setTaskName(childTag);", "-                childTask.setTaskType(childTag);", "+                childTask.setTaskName(childName);", "+                childTask.setTaskType(childName);", "+                childTask.setLocation(child.getLocation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6430f83a06f0780896b653536ad8d7e0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "3b1f2fca74ade338347b53d7f450d5dc1bdea0c9", "commitAfterChange": "585ca2b4d92ac5cc3bacfc5aa5ebeeee3fe8659a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     protected boolean isUpToDate(FileScanner[] scanners, File zipFile) throws BuildException", "signatureAfterChange": "     protected boolean isUpToDate(FileScanner[] scanners, File zipFile) throws BuildException", "diff": ["-        File[] files = grabFiles(scanners);", "+        String[][] fileNames = grabFileNames(scanners);", "+        File[] files = grabFiles(scanners, fileNames);", "-            // Probably unnecessary but just for clarity:", "-            for (int i=0; i<files.length; i++) {", "-                if (files[i].lastModified() > zipFile.lastModified()) {", "+", "+            SourceFileScanner sfs = new SourceFileScanner(this);", "+            MergingMapper mm = new MergingMapper();", "+            mm.setTo(zipFile.getAbsolutePath());", "+            for (int i=0; i<scanners.length; i++) {", "+                if (sfs.restrict(fileNames[i], scanners[i].getBasedir(), null,", "+                                 mm).length > 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab5bb86c7f0df0b5a3321194271b828f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/BriefJUnitResultFormatter.java", "commitBeforeChange": "776c80d8ec4791029cc3601b7a6d0a1b0a45bc24", "commitAfterChange": "866b754aadc0d8f482a569e0fd9e136dd7df824c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void startTestSuite(JUnitTest suite) throws BuildException", "signatureAfterChange": "     public void startTestSuite(JUnitTest suite)", "diff": ["-    public void startTestSuite(JUnitTest suite) throws BuildException {", "-    }", "+    public void startTestSuite(JUnitTest suite) {", "+        if (output == null) {", "+            return; // Quick return - no output do nothing.", "+        }", "+        output.write(sb.toString());", "+        output.flush();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afb7a9cc53506455f8af040956cf86f9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/project/DefaultProjectEngine.java", "commitBeforeChange": "f6a78a634593cd4660e2efa17a80f71a927df3d5", "commitAfterChange": "1d3dc3765d4efd6ae54488feab07f6a17315ebe6", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": "              public void execute( final Project project, final String target )         throws AntException", "signatureAfterChange": "              public void execute( final Project project, final String target )         throws AntException", "diff": ["-        m_taskletEngine.contextualize( project.getContext() );", "-        executeTarget( \"<init>\", project.getImplicitTarget() );", "+        m_componentManager.put( \"org.apache.ant.project.Project\", project );", "-        final ArrayList done = new ArrayList();", "-        execute( project, target, done );", "+        final TaskletContext context = project.getContext();", "+", "+        final String projectName = (String)context.getProperty( Project.PROJECT );", "+", "+        m_listenerSupport.projectStarted( projectName );", "+", "+        executeTargetWork( \"<init>\", project.getImplicitTarget(), context );", "+", "+        //context = new DefaultTaskletContext( context );", "+        ", "+        //placing logger lower (at targetlevel or at task level)", "+        //is possible if you want more fine grained control", "+        context.setProperty( TaskletContext.LOGGER, m_logger );", "+", "+        execute( project, target, context );", "+", "+        m_listenerSupport.projectFinished();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c477a6a8b2833deaf38429c08c0a9bc2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/zip/UTF8ZipFilesTest.java", "commitBeforeChange": "cbd20a77eba224b21654251583971e054729f006", "commitAfterChange": "752d64fa43db2172327771ba4d36bee3f2d3b49a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 13, "signatureBeforeChange": "      private static void assertUnicodeName(ZipEntry ze,                                           String expectedName,                                           String encoding)         throws IOException", "signatureAfterChange": "      private static void assertUnicodeName(ZipEntry ze,                                           String expectedName,                                           String encoding)         throws IOException", "diff": ["-            UnicodePathExtraField ucpe = new UnicodePathExtraField(expectedName,", "-                                                                   encoding);", "-            assertEquals(ucpe.getNameCRC32(), ucpf.getNameCRC32());", "+            ZipEncoding enc = ZipEncodingHelper.getZipEncoding(encoding);", "+            ByteBuffer ne = enc.encode(ze.getName());", "+", "+            CRC32 crc = new CRC32();", "+            crc.update(ne.array(),ne.arrayOffset(),ne.limit());", "+", "+            assertEquals(crc.getValue(), ucpf.getNameCRC32());"]}]}
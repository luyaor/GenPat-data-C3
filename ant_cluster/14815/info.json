{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c77ed318ba2cec221a3721149dbb5a98", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25ef112f8bc0da3c0fd787fa68bd1d05", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/Property.java", "commitBeforeChange": "4058f2a97f7dc93772debc5bfd54f193e51f0256", "commitAfterChange": "b8a71bf8463f8c38c404467a5aef7c451569ad50", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "      protected void loadEnvironment( String prefix )         throws TaskException", "signatureAfterChange": "      protected void loadEnvironment( String prefix )         throws TaskException", "diff": ["-        Properties props = new Properties();", "+        final Properties props = new Properties();", "-        log( \"Loading Environment \" + prefix, Project.MSG_VERBOSE );", "-        ArrayList osEnv = Execute.getProcEnvironment();", "-        for( Iterator e = osEnv.iterator(); e.hasNext(); )", "+", "+        log( \"Loading EnvironmentData \" + prefix, Project.MSG_VERBOSE );", "+        try", "-            String entry = (String)e.next();", "-            int pos = entry.indexOf( '=' );", "-            if( pos == -1 )", "+            final Properties environment = Environment.getNativeEnvironment();", "+            for( Iterator e = environment.keySet().iterator(); e.hasNext(); )", "-                log( \"Ignoring: \" + entry, Project.MSG_WARN );", "-            }", "-            else", "-            {", "-                props.put( prefix + entry.substring( 0, pos ),", "-                           entry.substring( pos + 1 ) );", "+                final String key = (String)e.next();", "+                final String value = environment.getProperty( key );", "+", "+                if( value.equals( \"\" ) )", "+                {", "+                    log( \"Ignoring: \" + key, Project.MSG_WARN );", "+                }", "+                else", "+                {", "+                    props.put( prefix + key, value );", "+                }", "+        catch( final IOException ioe )", "+        {", "+            throw new TaskException( ioe.getMessage(), ioe );", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59c8522ea0f379d0c8d15a9c72196987", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/Property.java", "commitBeforeChange": "4058f2a97f7dc93772debc5bfd54f193e51f0256", "commitAfterChange": "b8a71bf8463f8c38c404467a5aef7c451569ad50", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "      protected void loadEnvironment( String prefix )         throws TaskException", "signatureAfterChange": "      protected void loadEnvironment( String prefix )         throws TaskException", "diff": ["-        Properties props = new Properties();", "+        final Properties props = new Properties();", "-        log( \"Loading Environment \" + prefix, Project.MSG_VERBOSE );", "-        ArrayList osEnv = Execute.getProcEnvironment();", "-        for( Iterator e = osEnv.iterator(); e.hasNext(); )", "+", "+        log( \"Loading EnvironmentData \" + prefix, Project.MSG_VERBOSE );", "+        try", "-            String entry = (String)e.next();", "-            int pos = entry.indexOf( '=' );", "-            if( pos == -1 )", "+            final Properties environment = Environment.getNativeEnvironment();", "+            for( Iterator e = environment.keySet().iterator(); e.hasNext(); )", "-                log( \"Ignoring: \" + entry, Project.MSG_WARN );", "-            }", "-            else", "-            {", "-                props.put( prefix + entry.substring( 0, pos ),", "-                           entry.substring( pos + 1 ) );", "+                final String key = (String)e.next();", "+                final String value = environment.getProperty( key );", "+", "+                if( value.equals( \"\" ) )", "+                {", "+                    log( \"Ignoring: \" + key, Project.MSG_WARN );", "+                }", "+                else", "+                {", "+                    props.put( prefix + key, value );", "+                }", "+        catch( final IOException ioe )", "+        {", "+            throw new TaskException( ioe.getMessage(), ioe );", "+        }", "+"]}]}
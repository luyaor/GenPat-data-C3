{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "08ba27b39d21bfba0e80214e07c5e2bb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02cf4a1e48e0c2e801e96d7f248018cd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/extension/Extension.java", "commitBeforeChange": "ac7274e1bcaa234a92f70c93d4c92fda3505ec4d", "commitAfterChange": "77f91dc2d98b28ce1524ca20489bef0e283aed47", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     public String toString()", "signatureAfterChange": "     public String toString()", "diff": ["-    public String toString()", "-    {", "-        final String lineSeparator = System.getProperty( \"line.separator\" );", "+    public String toString() {", "+        final String lineSeparator = System.getProperty(\"line.separator\");", "-        final StringBuffer sb = new StringBuffer( EXTENSION_NAME.toString() );", "-        sb.append( brace );", "-        sb.append( m_extensionName );", "-        sb.append( lineSeparator );", "+        final StringBuffer sb = new StringBuffer(EXTENSION_NAME.toString());", "+        sb.append(brace);", "+        sb.append(extensionName);", "+        sb.append(lineSeparator);", "-        if( null != m_specificationVersion )", "-        {", "-            sb.append( SPECIFICATION_VERSION );", "-            sb.append( brace );", "-            sb.append( m_specificationVersion );", "-            sb.append( lineSeparator );", "+        if (null != specificationVersion) {", "+            sb.append(SPECIFICATION_VERSION);", "+            sb.append(brace);", "+            sb.append(specificationVersion);", "+            sb.append(lineSeparator);", "-        if( null != m_specificationVendor )", "-        {", "-            sb.append( SPECIFICATION_VENDOR );", "-            sb.append( brace );", "-            sb.append( m_specificationVendor );", "-            sb.append( lineSeparator );", "+        if (null != specificationVendor) {", "+            sb.append(SPECIFICATION_VENDOR);", "+            sb.append(brace);", "+            sb.append(specificationVendor);", "+            sb.append(lineSeparator);", "-        if( null != m_implementationVersion )", "-        {", "-            sb.append( IMPLEMENTATION_VERSION );", "-            sb.append( brace );", "-            sb.append( m_implementationVersion );", "-            sb.append( lineSeparator );", "+        if (null != implementationVersion) {", "+            sb.append(IMPLEMENTATION_VERSION);", "+            sb.append(brace);", "+            sb.append(implementationVersion);", "+            sb.append(lineSeparator);", "-        if( null != m_implementationVendorID )", "-        {", "-            sb.append( IMPLEMENTATION_VENDOR_ID );", "-            sb.append( brace );", "-            sb.append( m_implementationVendorID );", "-            sb.append( lineSeparator );", "+        if (null != implementationVendorID) {", "+            sb.append(IMPLEMENTATION_VENDOR_ID);", "+            sb.append(brace);", "+            sb.append(implementationVendorID);", "+            sb.append(lineSeparator);", "-        if( null != m_implementationVendor )", "-        {", "-            sb.append( IMPLEMENTATION_VENDOR );", "-            sb.append( brace );", "-            sb.append( m_implementationVendor );", "-            sb.append( lineSeparator );", "+        if (null != implementationVendor) {", "+            sb.append(IMPLEMENTATION_VENDOR);", "+            sb.append(brace);", "+            sb.append(implementationVendor);", "+            sb.append(lineSeparator);", "-        if( null != m_implementationURL )", "-        {", "-            sb.append( IMPLEMENTATION_URL );", "-            sb.append( brace );", "-            sb.append( m_implementationURL );", "-            sb.append( lineSeparator );", "+        if (null != implementationURL) {", "+            sb.append(IMPLEMENTATION_URL);", "+            sb.append(brace);", "+            sb.append(implementationURL);", "+            sb.append(lineSeparator);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02f8175d49783512de6e30a14f137e8e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/dotnet/NetCommand.java", "commitBeforeChange": "0a895bf986aa2493542963ec55628f6d23a0997e", "commitAfterChange": "d328f5e4ea1bbde4a82116fa46c4a7425f12ff7d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void runCommand()             throws BuildException", "signatureAfterChange": "     public void runCommand()              throws BuildException", "diff": ["-            throws BuildException {", "-        int err = -1; // assume the worst", "+             throws BuildException {", "+        int err = -1;", "+        // assume the worst", "-            if (_traceCommandLine) {", "-                _owner.log(_commandLine.toString());", "+            if (traceCommandLine) {", "+                owner.log(commandLine.toString());", "-                logVerbose(_commandLine.toString());", "+                logVerbose(commandLine.toString());", "-            _exe.setCommandline(_commandLine.getCommandline());", "-            err = _exe.execute();", "+            executable.setCommandline(commandLine.getCommandline());", "+            err = executable.execute();", "-                if (_failOnError) {", "-                    throw new BuildException(_title + \" returned: \" + err, _owner.getLocation());", "+                if (failOnError) {", "+                    throw new BuildException(title + \" returned: \" + err, owner.getLocation());", "-                    _owner.log(_title + \"  Result: \" + err, Project.MSG_ERR);", "+                    owner.log(title + \"  Result: \" + err, Project.MSG_ERR);", "-            throw new BuildException(_title + \" failed: \" + e, e, _owner.getLocation());", "+            throw new BuildException(title + \" failed: \" + e, e, owner.getLocation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05365987d784869c9c4ff8d9267b8c88", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipFile.java", "commitBeforeChange": "69eba07e72da7b69d2ef95717c1e91d7b9b75b00", "commitAfterChange": "d3e00e275a0cb053f2a7020c1c45f94804fc9065", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private Map populateFromCentralDirectory()         throws IOException", "signatureAfterChange": "     private Map populateFromCentralDirectory()         throws IOException", "diff": ["-        HashMap noEFS = new HashMap();", "+        HashMap noUTF8Flag = new HashMap();", "-            final boolean hasEFS = ", "-                (generalPurposeFlag & ZipOutputStream.EFS_FLAG) != 0;", "+            final boolean hasUTF8Flag = ", "+                (generalPurposeFlag & ZipOutputStream.UFT8_NAMES_FLAG) != 0;", "-                hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;", "+                hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;", "-            if (!hasEFS && useUnicodeExtraFields) {", "-                noEFS.put(ze, new NameAndComment(fileName, comment));", "+            if (!hasUTF8Flag && useUnicodeExtraFields) {", "+                noUTF8Flag.put(ze, new NameAndComment(fileName, comment));", "-        return noEFS;", "+        return noUTF8Flag;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09e0c25316853e0dfb0764bc1cedecbf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/extension/Specification.java", "commitBeforeChange": "99cdb67df9d2ec13a938a635fed1f01109fcf945", "commitAfterChange": "12d6c01879b76774bb1cb969f3081301b96dab32", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public String toString()", "signatureAfterChange": "     public String toString()", "diff": ["-    public String toString()", "-    {", "-        final String lineSeparator = System.getProperty( \"line.separator\" );", "+    public String toString() {", "+        final String lineSeparator = System.getProperty(\"line.separator\");", "-        final StringBuffer sb = new StringBuffer( SPECIFICATION_TITLE.toString() );", "-        sb.append( brace );", "-        sb.append( m_specificationTitle );", "-        sb.append( lineSeparator );", "+        final StringBuffer sb", "+            = new StringBuffer(SPECIFICATION_TITLE.toString());", "+        sb.append(brace);", "+        sb.append(specificationTitle);", "+        sb.append(lineSeparator);", "-        if( null != m_specificationVersion )", "-        {", "-            sb.append( SPECIFICATION_VERSION );", "-            sb.append( brace );", "-            sb.append( m_specificationVersion );", "-            sb.append( lineSeparator );", "+        if (null != specificationVersion) {", "+            sb.append(SPECIFICATION_VERSION);", "+            sb.append(brace);", "+            sb.append(specificationVersion);", "+            sb.append(lineSeparator);", "-        if( null != m_specificationVendor )", "-        {", "-            sb.append( SPECIFICATION_VENDOR );", "-            sb.append( brace );", "-            sb.append( m_specificationVendor );", "-            sb.append( lineSeparator );", "+        if (null != specificationVendor) {", "+            sb.append(SPECIFICATION_VENDOR);", "+            sb.append(brace);", "+            sb.append(specificationVendor);", "+            sb.append(lineSeparator);", "-        if( null != m_implementationTitle )", "-        {", "-            sb.append( IMPLEMENTATION_TITLE );", "-            sb.append( brace );", "-            sb.append( m_implementationTitle );", "-            sb.append( lineSeparator );", "+        if (null != implementationTitle) {", "+            sb.append(IMPLEMENTATION_TITLE);", "+            sb.append(brace);", "+            sb.append(implementationTitle);", "+            sb.append(lineSeparator);", "-        if( null != m_implementationVersion )", "-        {", "-            sb.append( IMPLEMENTATION_VERSION );", "-            sb.append( brace );", "-            sb.append( m_implementationVersion );", "-            sb.append( lineSeparator );", "+        if (null != implementationVersion) {", "+            sb.append(IMPLEMENTATION_VERSION);", "+            sb.append(brace);", "+            sb.append(implementationVersion);", "+            sb.append(lineSeparator);", "-        if( null != m_implementationVendor )", "-        {", "-            sb.append( IMPLEMENTATION_VENDOR );", "-            sb.append( brace );", "-            sb.append( m_implementationVendor );", "-            sb.append( lineSeparator );", "+        if (null != implementationVendor) {", "+            sb.append(IMPLEMENTATION_VENDOR);", "+            sb.append(brace);", "+            sb.append(implementationVendor);", "+            sb.append(lineSeparator);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19d1a8ee24e186889631044db3a0964a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/ConcatFilter.java", "commitBeforeChange": "71be9bc2d672d09173a5d47a4acd18c18186ac37", "commitAfterChange": "d1bc937f76bfe650c3c2a530e848140cadedd785", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void initialize() throws IOException", "signatureAfterChange": "     private void initialize() throws IOException", "diff": ["-                if (\"before\".equals(params[i].getName())) {", "-                    setBefore(new File(params[i].getValue()));", "+                if (\"prepend\".equals(params[i].getName())) {", "+                    setPrepend(new File(params[i].getValue()));", "-                if (\"after\".equals(params[i].getName())) {", "-                    setAfter(new File(params[i].getValue()));", "+                if (\"append\".equals(params[i].getName())) {", "+                    setAppend(new File(params[i].getValue()));", "-        if (before != null) {", "-            if (!before.isAbsolute()) {", "-                before = new File(getProject().getBaseDir(), before.getPath());", "+        if (prepend != null) {", "+            if (!prepend.isAbsolute()) {", "+                prepend = new File(getProject().getBaseDir(), prepend.getPath());", "-            beforeReader = new BufferedReader(new FileReader(before));", "+            prependReader = new BufferedReader(new FileReader(prepend));", "-        if (after != null) {", "-            if (!after.isAbsolute()) {", "-                after = new File(getProject().getBaseDir(), after.getPath());", "+        if (append != null) {", "+            if (!append.isAbsolute()) {", "+                append = new File(getProject().getBaseDir(), append.getPath());", "-            afterReader = new BufferedReader(new FileReader(after));", "+            appendReader = new BufferedReader(new FileReader(append));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "249c121a7a1d5be75770ea2b95fa2493", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/IntrospectionHelperTest.java", "commitBeforeChange": "efd287b871106edf3efb9e1b96aeea16b85f0549", "commitAfterChange": "11c355f54f6d651aa9d4d79e64ca61dcebc6be1e", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "      public void testAttributeSetters() throws BuildException", "signatureAfterChange": "      public void testAttributeSetters() throws BuildException", "diff": ["-            assertTrue(be.getException() instanceof AssertionFailedError);", "+            assertTrue(be.getCause() instanceof AssertionFailedError);", "-            assertTrue(be.getException() instanceof AssertionFailedError);", "+            assertTrue(be.getCause() instanceof AssertionFailedError);", "-            assertTrue(be.getException() instanceof AssertionFailedError);", "+            assertTrue(be.getCause() instanceof AssertionFailedError);", "-            assertTrue(be.getException() instanceof AssertionFailedError);", "+            assertTrue(be.getCause() instanceof AssertionFailedError);", "-            assertTrue(be.getException() instanceof AssertionFailedError);", "+            assertTrue(be.getCause() instanceof AssertionFailedError);", "-            assertTrue(be.getException() instanceof AssertionFailedError);", "+            assertTrue(be.getCause() instanceof AssertionFailedError);", "-            assertTrue(be.getException() instanceof AssertionFailedError);", "+            assertTrue(be.getCause() instanceof AssertionFailedError);", "-            assertTrue(be.getException() instanceof ClassNotFoundException);", "+            assertTrue(be.getCause() instanceof ClassNotFoundException);", "-            assertTrue(be.getException() instanceof AssertionFailedError);", "+            assertTrue(be.getCause() instanceof AssertionFailedError);", "-            assertTrue(be.getException() instanceof AssertionFailedError);", "+            assertTrue(be.getCause() instanceof AssertionFailedError);", "-            assertTrue(be.getException() instanceof AssertionFailedError);", "+            assertTrue(be.getCause() instanceof AssertionFailedError);", "-            assertTrue(be.getException() instanceof AssertionFailedError);", "+            assertTrue(be.getCause() instanceof AssertionFailedError);", "-            assertTrue(be.getException() instanceof AssertionFailedError);", "+            assertTrue(be.getCause() instanceof AssertionFailedError);", "-            assertTrue(be.getException() instanceof AssertionFailedError);", "+            assertTrue(be.getCause() instanceof AssertionFailedError);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "358e1acb318b30ff157e5a7b193ce03b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/Base64Converter.java", "commitBeforeChange": "1ff87364e9b5ea9526f9298f245652c87d2bd3d2", "commitAfterChange": "aacfe14361288a9c8d07573784e356b351bc136d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public String encode(byte[] octetString)", "signatureAfterChange": "     public String encode(byte[] octetString)", "diff": ["+        // CheckStyle:MagicNumber OFF", "+        // CheckStyle:MagicNumber ON", "+        // CheckStyle:MagicNumber OFF", "+        // CheckStyle:MagicNumber ON", "-            bits24 = (octetString[i++] & BYTE_MASK) << 16;", "-            bits24 |= (octetString[i++] & BYTE_MASK) << 8;", "+            bits24 = (octetString[i++] & BYTE_MASK) << WORD;", "+            bits24 |= (octetString[i++] & BYTE_MASK) << BYTE;", "-            bits6 = (bits24 & POS_3_MASK) >> 18;", "+            bits6 = (bits24 & POS_3_MASK) >> POS_3_SHIFT;", "-            bits6 = (bits24 & POS_2_MASK) >> 12;", "+            bits6 = (bits24 & POS_2_MASK) >> POS_2_SHIFT;", "-            bits6  = (bits24 & POS_1_MASK) >> 6;", "+            bits6  = (bits24 & POS_1_MASK) >> POS_1_SHIFT;", "-            bits24 = (octetString[i] & BYTE_MASK) << 16;", "-            bits24 |= (octetString[i + 1] & BYTE_MASK) << 8;", "-            bits6 = (bits24 & POS_3_MASK) >> 18;", "+            bits24 = (octetString[i] & BYTE_MASK) << WORD;", "+            bits24 |= (octetString[i + 1] & BYTE_MASK) << BYTE;", "+            bits6 = (bits24 & POS_3_MASK) >> POS_3_SHIFT;", "-            bits6 = (bits24 & POS_2_MASK) >> 12;", "+            bits6 = (bits24 & POS_2_MASK) >> POS_2_SHIFT;", "-            bits6 = (bits24 & POS_1_MASK) >> 6;", "+            bits6 = (bits24 & POS_1_MASK) >> POS_1_SHIFT;", "-            bits24 = (octetString[i] & BYTE_MASK) << 16;", "-            bits6 = (bits24 & POS_3_MASK) >> 18;", "+            bits24 = (octetString[i] & BYTE_MASK) << WORD;", "+            bits6 = (bits24 & POS_3_MASK) >> POS_3_SHIFT;", "-            bits6 = (bits24 & POS_2_MASK) >> 12;", "+            bits6 = (bits24 & POS_2_MASK) >> POS_2_SHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a567e7b8f01bfcd7fbf6b8bc68f58aa", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/taskdefs/vss/MSVSSGET.java", "commitBeforeChange": "beed9501ebdb54251ff8c87d14d9c7bc18fdeabe", "commitAfterChange": "17f7feb790394b20d4849fbe51eab665326c4842", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void execute()         throws TaskException", "signatureAfterChange": "     public void execute()         throws TaskException", "diff": ["-        Commandline commandLine = new Commandline();", "+        Execute exe = new Execute();", "-        commandLine.setExecutable( getSSCommand() );", "-        commandLine.addArgument( COMMAND_GET );", "+        exe.setExecutable( getSSCommand() );", "+        exe.addArgument( COMMAND_GET );", "-        commandLine.addArgument( getVsspath() );", "+        exe.addArgument( getVsspath() );", "-        getLocalpathCommand( commandLine );", "+        getLocalpathCommand( exe );", "-        getAutoresponse( commandLine );", "+        getAutoresponse( exe );", "-        getQuietCommand( commandLine );", "+        getQuietCommand( exe );", "-        getRecursiveCommand( commandLine );", "+        getRecursiveCommand( exe );", "-        getVersionCommand( commandLine );", "+        getVersionCommand( exe );", "-        getWritableCommand( commandLine );", "+        getWritableCommand( exe );", "-        getLoginCommand( commandLine );", "+        getLoginCommand( exe );", "-        run( commandLine );", "+        run( exe );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6648dd90e268cfcac20fd87f3e0d28cc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/taskdefs/vss/MSVSSHISTORY.java", "commitBeforeChange": "beed9501ebdb54251ff8c87d14d9c7bc18fdeabe", "commitAfterChange": "17f7feb790394b20d4849fbe51eab665326c4842", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void execute()         throws TaskException", "signatureAfterChange": "     public void execute()         throws TaskException", "diff": ["-        Commandline commandLine = new Commandline();", "+        Execute exe = new Execute();", "-        commandLine.setExecutable( getSSCommand() );", "-        commandLine.addArgument( COMMAND_HISTORY );", "+        exe.setExecutable( getSSCommand() );", "+        exe.addArgument( COMMAND_HISTORY );", "-        commandLine.addArgument( getVsspath() );", "+        exe.addArgument( getVsspath() );", "-        commandLine.addArgument( \"-I-\" );// ignore all errors", "+        exe.addArgument( \"-I-\" );// ignore all errors", "-        getVersionDateCommand( commandLine );", "-        getVersionLabelCommand( commandLine );", "+        getVersionDateCommand( exe );", "+        getVersionLabelCommand( exe );", "-            commandLine.addArgument( FLAG_RECURSION );", "+            exe.addArgument( FLAG_RECURSION );", "-            commandLine.addArgument( m_Style );", "+            exe.addArgument( m_Style );", "-        getLoginCommand( commandLine );", "+        getLoginCommand( exe );", "-        getOutputCommand( commandLine );", "+        getOutputCommand( exe );", "-        System.out.println( \"***: \" + commandLine );", "-", "-        run( commandLine );", "+        run( exe );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75949a909e789fed0dda0677563668af", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/taskdefs/vss/MSVSSCHECKIN.java", "commitBeforeChange": "beed9501ebdb54251ff8c87d14d9c7bc18fdeabe", "commitAfterChange": "17f7feb790394b20d4849fbe51eab665326c4842", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void execute()         throws TaskException", "signatureAfterChange": "     public void execute()         throws TaskException", "diff": ["-        final Commandline commandLine = new Commandline();", "+        final Execute exe = new Execute();", "-        commandLine.setExecutable( getSSCommand() );", "-        commandLine.addArgument( COMMAND_CHECKIN );", "+        exe.setExecutable( getSSCommand() );", "+        exe.addArgument( COMMAND_CHECKIN );", "-        commandLine.addArgument( vsspath );", "+        exe.addArgument( vsspath );", "-        getLocalpathCommand( commandLine );", "+        getLocalpathCommand( exe );", "-        getAutoresponse( commandLine );", "+        getAutoresponse( exe );", "-        getRecursiveCommand( commandLine );", "+        getRecursiveCommand( exe );", "-        getWritableCommand( commandLine );", "+        getWritableCommand( exe );", "-        getLoginCommand( commandLine );", "+        getLoginCommand( exe );", "-        commandLine.addArgument( \"-C\" + m_comment );", "+        exe.addArgument( \"-C\" + m_comment );", "-        run( commandLine );", "+        run( exe );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f75592c9433500eb6031bb58b3ee45d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipFile.java", "commitBeforeChange": "395ad149e6859f011f96b800a14290b2c292788d", "commitAfterChange": "8d9358d36933cdd6c9a4dfe94cb07513fe846c75", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void populateFromCentralDirectory()         throws IOException", "signatureAfterChange": "     private void populateFromCentralDirectory()         throws IOException", "diff": ["-        byte[] signatureBytes = new byte[4];", "+        byte[] signatureBytes = new byte[WORD];", "-            off += 2;", "+            off += SHORT;", "-            off += 4; // skip version info and general purpose byte", "+            off += WORD; // skip version info and general purpose byte", "-            off += 2;", "+            off += SHORT;", "-            off += 4;", "+            off += WORD;", "-            off += 4;", "+            off += WORD;", "-            off += 4;", "+            off += WORD;", "-            off += 4;", "+            off += WORD;", "-            off += 2;", "+            off += SHORT;", "-            off += 2;", "+            off += SHORT;", "-            off += 2;", "+            off += SHORT;", "-            off += 2; // disk number", "+            off += SHORT; // disk number", "-            off += 2;", "+            off += SHORT;", "-            off += 4;", "+            off += WORD;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ef2374f96e64d182b09cbfc46d813a4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "efc87c4abaf9dbbf0bf021723281d56c21c34345", "commitAfterChange": "ddd5fc4276489cf7fd8c5cefa8e048864fc424b1", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     protected void writeCentralFileHeader(ZipEntry ze) throws IOException", "signatureAfterChange": "     protected void writeCentralFileHeader(ZipEntry ze) throws IOException", "diff": ["-        written += 4;", "+        written += WORD;", "-        written += 2;", "+        written += SHORT;", "-        written += 4;", "+        written += WORD;", "-        written += 2;", "+        written += SHORT;", "-        written += 4;", "+        written += WORD;", "-        written += 2;", "+        written += SHORT;", "-        written += 2;", "+        written += SHORT;", "-        written += 2;", "+        written += SHORT;", "-        written += 2;", "+        written += SHORT;", "-        written += 2;", "+        written += SHORT;", "-        written += 4;", "+        written += WORD;", "-        written += 4;", "+        written += WORD;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a50c935f3347dbfee8112faa9f9d151b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/bootstrap/org/apache/ant/builder/Builder.java", "commitBeforeChange": "85cd57c58e6ef426050ec21bc2e164e8e3c8fd4e", "commitAfterChange": "67a643f69444fecf5734623985c071e1b6d7d1f2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private File[] getAnt1Files()", "signatureAfterChange": "     private File[] getAnt1Files()", "diff": ["-        files.add(new File(PACKAGE_ROOT, \"util/FileNameMapper.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"util/FlatFileNameMapper.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"util/SourceFileScanner.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"util/IdentityMapper.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"util/MergingMapper.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"util/GlobPatternMapper.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"util/regexp/Regexp.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"util/regexp/RegexpMatcher.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"util/regexp/RegexpFactory.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"util/regexp/RegexpMatcherFactory.java\"));", "+        files.add(new File(UTIL_ROOT, \"FileNameMapper.java\"));", "+        files.add(new File(UTIL_ROOT, \"FlatFileNameMapper.java\"));", "+        files.add(new File(UTIL_ROOT, \"SourceFileScanner.java\"));", "+        files.add(new File(UTIL_ROOT, \"IdentityMapper.java\"));", "+        files.add(new File(UTIL_ROOT, \"MergingMapper.java\"));", "+        files.add(new File(UTIL_ROOT, \"GlobPatternMapper.java\"));", "+        files.add(new File(UTIL_ROOT, \"regexp/Regexp.java\"));", "+        files.add(new File(UTIL_ROOT, \"regexp/RegexpMatcher.java\"));", "+        files.add(new File(UTIL_ROOT, \"regexp/RegexpFactory.java\"));", "+        files.add(new File(UTIL_ROOT, \"regexp/RegexpMatcherFactory.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"util/FileUtils.java\"));", "+        files.add(new File(UTIL_ROOT, \"FileUtils.java\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f82164ccb4a942e940fb20b3e560e811", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/depend/constantpool/ConstantPoolEntry.java", "commitBeforeChange": "f9e2c884babcb11e65fdc2317705993ea839c286", "commitAfterChange": "fff434e903ebdcb26009b4f11722e355efcd203c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static ConstantPoolEntry readEntry(DataInputStream cpStream) throws IOException", "signatureAfterChange": "     public static ConstantPoolEntry readEntry(DataInputStream cpStream)          throws IOException", "diff": ["-    public static ConstantPoolEntry readEntry(DataInputStream cpStream) throws IOException {", "+    public static ConstantPoolEntry readEntry(DataInputStream cpStream)", "+         throws IOException {", "-            case CONSTANT_Utf8:", "+            case CONSTANT_UTF8:", "-", "-            case CONSTANT_Integer:", "+            case CONSTANT_INTEGER:", "-", "-            case CONSTANT_Float:", "+            case CONSTANT_FLOAT:", "-", "-            case CONSTANT_Long:", "+            case CONSTANT_LONG:", "-", "-            case CONSTANT_Double:", "+            case CONSTANT_DOUBLE:", "-", "-            case CONSTANT_Class:", "+            case CONSTANT_CLASS:", "-", "-            case CONSTANT_String:", "+            case CONSTANT_STRING:", "-", "-            case CONSTANT_FieldRef:", "+            case CONSTANT_FIELDREF:", "-", "-            case CONSTANT_MethodRef:", "+            case CONSTANT_METHODREF:", "-", "-            case CONSTANT_InterfaceMethodRef:", "+            case CONSTANT_INTERFACEMETHODREF:", "-", "-            case CONSTANT_NameAndType:", "+            case CONSTANT_NAMEANDTYPE:", "-", "-                throw new ClassFormatError(\"Invalid Constant Pool entry Type \" + cpTag);", "+                throw new ClassFormatError(\"Invalid Constant Pool entry Type \"", "+                     + cpTag);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd04dddc955698c2a3f19eadef3e883d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/PropertySet.java", "commitBeforeChange": "94e7786f36caa2224635477133814e8e77d5fd37", "commitAfterChange": "3f31dc8f7a3bfbca7fc1b633742521ce5e4cb6c4", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private void addPropertyNames(Set names, Hashtable properties)", "signatureAfterChange": "     private void addPropertyNames(Set names, Hashtable properties)", "diff": ["-            PropertyRef ref = (PropertyRef) e.nextElement();", "-            if (ref.name != null) {", "-                if (prj != null && prj.getProperty(ref.name) != null) {", "-                    names.add(ref.name);", "+            PropertyRef r = (PropertyRef) e.nextElement();", "+            if (r.name != null) {", "+                if (prj != null && prj.getProperty(r.name) != null) {", "+                    names.add(r.name);", "-            } else if (ref.prefix != null) {", "+            } else if (r.prefix != null) {", "-                    if (name.startsWith(ref.prefix)) {", "+                    if (name.startsWith(r.prefix)) {", "-            } else if (ref.regex != null) {", "+            } else if (r.regex != null) {", "-                matcher.setPattern(ref.regex);", "+                matcher.setPattern(r.regex);", "-            } else if (ref.builtin != null) {", "+            } else if (r.builtin != null) {", "-                if (ref.builtin.equals(BuiltinPropertySetName.ALL)) {", "+                if (r.builtin.equals(BuiltinPropertySetName.ALL)) {", "-                } else if (ref.builtin.equals(BuiltinPropertySetName.SYSTEM)) {", "+                } else if (r.builtin.equals(BuiltinPropertySetName.SYSTEM)) {", "-                } else if (ref.builtin.equals(BuiltinPropertySetName", "+                } else if (r.builtin.equals(BuiltinPropertySetName"]}]}
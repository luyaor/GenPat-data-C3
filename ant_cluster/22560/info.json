{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d78124778338260e518c5965d9707328", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65c08ebfa6210df7f0e938f577e9314c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Rmic.java", "commitBeforeChange": "12a8163d89f051f1950a8e2b136edbe08b6cc711", "commitAfterChange": "5db106732ce0f855fd2b03fd68104a708acf7996", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        RmicAdapter adapter = RmicAdapterFactory.getRmic(compiler, this );", "+        RmicAdapter adapter = RmicAdapterFactory.getRmic(compiler, this);", "-        // scan base dirs to build up compile lists only if a", "-        // specific classname is not given", "-        if (classname == null) {", "-            DirectoryScanner ds = this.getDirectoryScanner(baseDir);", "-            String[] files = ds.getIncludedFiles();", "-            scanDir(baseDir, files, adapter.getMapper());", "-        } else {", "-            // otherwise perform a timestamp comparison - at least", "-            scanDir(baseDir, ", "-                    new String[] {classname.replace('.', File.separatorChar) + \".class\"},", "-                    adapter.getMapper());", "-        }", "-        ", "-        int fileCount = compileList.size();", "-        if (fileCount > 0) {", "-            log(\"RMI Compiling \" + fileCount +", "-                \" class\"+ (fileCount > 1 ? \"es\" : \"\")+\" to \" + baseDir, ", "-                Project.MSG_INFO);", "-", "-            // finally, lets execute the compiler!!", "-            if (!adapter.execute()) {", "-                throw new BuildException(FAIL_MSG, location);", "-            }", "-        }", "-", "-        /* ", "-         * Move the generated source file to the base directory.  If", "-         * base directory and sourcebase are the same, the generated", "-         * sources are already in place.", "-         */", "-        if (null != sourceBase && !baseDir.equals(sourceBase)) {", "-            if (idl) {", "-                log(\"Cannot determine sourcefiles in idl mode, \", ", "-                    Project.MSG_WARN);", "-                log(\"sourcebase attribute will be ignored.\", Project.MSG_WARN);", "+        try {", "+            // scan base dirs to build up compile lists only if a", "+            // specific classname is not given", "+            if (classname == null) {", "+                DirectoryScanner ds = this.getDirectoryScanner(baseDir);", "+                String[] files = ds.getIncludedFiles();", "+                scanDir(baseDir, files, adapter.getMapper());", "-                for (int j = 0; j < fileCount; j++) {", "-                    moveGeneratedFile(baseDir, sourceBase,", "-                                      (String) compileList.elementAt(j),", "-                                      adapter);", "+                // otherwise perform a timestamp comparison - at least", "+                scanDir(baseDir, ", "+                        new String[] {classname.replace('.', ", "+                                                        File.separatorChar)", "+                                          + \".class\"},", "+                        adapter.getMapper());", "+            }", "+            ", "+            int fileCount = compileList.size();", "+            if (fileCount > 0) {", "+                log(\"RMI Compiling \" + fileCount +", "+                    \" class\"+ (fileCount > 1 ? \"es\" : \"\")+\" to \" + baseDir, ", "+                    Project.MSG_INFO);", "+                ", "+                // finally, lets execute the compiler!!", "+                if (!adapter.execute()) {", "+                    throw new BuildException(FAIL_MSG, location);", "+            ", "+            /* ", "+             * Move the generated source file to the base directory.  If", "+             * base directory and sourcebase are the same, the generated", "+             * sources are already in place.", "+             */", "+            if (null != sourceBase && !baseDir.equals(sourceBase) ", "+                && fileCount > 0) {", "+                if (idl) {", "+                    log(\"Cannot determine sourcefiles in idl mode, \", ", "+                        Project.MSG_WARN);", "+                    log(\"sourcebase attribute will be ignored.\", ", "+                        Project.MSG_WARN);", "+                } else {", "+                    for (int j = 0; j < fileCount; j++) {", "+                        moveGeneratedFile(baseDir, sourceBase,", "+                                          (String) compileList.elementAt(j),", "+                                          adapter);", "+                    }", "+                }", "+            }", "+        } finally {", "+            compileList.removeAllElements();", "-        compileList.removeAllElements();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b43472316f57f5a87b04b44bc16a1d25", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Rmic.java", "commitBeforeChange": "4a99751448c8773ce33c3029af60e20db02167f7", "commitAfterChange": "758b225e9a7868aa92992cc2bb27f5036225a1f1", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        File baseDir = project.resolveFile(base);", "-        File sourceBaseFile = null;", "-        if (null != sourceBase) {", "-            sourceBaseFile = project.resolveFile(sourceBase);", "-        }", "+", "+        loader = new AntClassLoader(project, classpath);", "-            scanDir(baseDir, files, verify);", "+            scanDir(baseDir, files);", "+        } else {", "+            // otherwise perform a timestamp comparison - at least", "+            scanDir(baseDir, ", "+                    new String[] {classname.replace('.', File.separatorChar) + \".class\"});", "-        sun.rmi.rmic.Main compiler = new sun.rmi.rmic.Main(System.out, \"rmic\");", "-        int argCount = 5;", "-        int i = 0;", "-        if (null != stubVersion) argCount++;", "-        if (null != sourceBase) argCount++;", "-        if (iiop) {", "-            argCount++;", "-            if( iiopopts != null ) {", "-                argCount++;", "-            }", "-        }", "-        if (idl) {", "-            argCount++;", "-            if( idlopts != null ) {", "-                argCount++;", "-            }", "-        }", "+        OutputStream logstr = new LogOutputStream(this, Project.MSG_WARN);", "+        sun.rmi.rmic.Main compiler = new sun.rmi.rmic.Main(logstr, \"rmic\");", "+        Commandline cmd = new Commandline();", "-        if (compileList.size() > 0) argCount += compileList.size() - 1;", "-        String[] args = new String[argCount];", "-        args[i++] = \"-d\";", "-        args[i++] = baseDir.getAbsolutePath();", "-        args[i++] = \"-classpath\";", "-        args[i++] = classpath.toString();", "+        cmd.createArgument().setValue(\"-d\");", "+        cmd.createArgument().setFile(baseDir);", "+        cmd.createArgument().setValue(\"-classpath\");", "+        cmd.createArgument().setPath(classpath);", "-                args[i++] = \"-v1.1\";", "+                cmd.createArgument().setValue(\"-v1.1\");", "-                args[i++] = \"-v1.2\";", "+                cmd.createArgument().setValue(\"-v1.2\");", "-                args[i++] = \"-vcompat\";", "+                cmd.createArgument().setValue(\"-vcompat\");", "-        if (null != sourceBase) args[i++] = \"-keepgenerated\";", "+        if (null != sourceBase)", "+            cmd.createArgument().setValue(\"-keepgenerated\");", "-             args[i++] = \"-iiop\";", "-             if( iiopopts != null ) ", "-                args[i++] = iiopopts;", "+            cmd.createArgument().setValue(\"-iiop\");", "+            if( iiopopts != null ) ", "+                cmd.createArgument().setValue(iiopopts);", "-             args[i++] = \"-idl\";", "-             if( idlopts != null ) ", "-                args[i++] = idlopts;", "+            cmd.createArgument().setValue(\"-idl\");", "+            if( idlopts != null ) ", "+                cmd.createArgument().setValue(idlopts);", "-", "-        if (classname != null) {", "-            if (shouldCompile(new File(baseDir, classname.replace('.', File.separatorChar) + \".class\"))) {", "-                args[i++] = classname;", "-                compiler.compile(args);", "+        int fileCount = compileList.size();", "+        if (fileCount > 0) {", "+            log(\"RMI Compiling \" + fileCount +", "+                \" class\"+ (fileCount > 1 ? \"es\" : \"\")+\" to \" + baseDir, ", "+                Project.MSG_INFO);", "+            ", "+            for (int j = 0; j < fileCount; j++) {", "+                cmd.createArgument().setValue((String) compileList.elementAt(j));", "-        } else {", "-            if (compileList.size() > 0) {", "-                log(\"RMI Compiling \" + compileList.size() +", "-                    \" classes to \" + baseDir, Project.MSG_INFO);", "-", "-                for (int j = 0; j < compileList.size(); j++) {", "-                    args[i++] = (String) compileList.elementAt(j);", "-                }", "-                compiler.compile(args);", "-            }", "+            log(\"Compilation args: \" + cmd.toString(), Project.MSG_VERBOSE);", "+            compiler.compile(cmd.getArguments());", "-            if (classname != null) {", "-                moveGeneratedFile(baseDir, sourceBaseFile, classname);", "-            } else {", "-                for (int j = 0; j < compileList.size(); j++) {", "-                    moveGeneratedFile(baseDir, sourceBaseFile, (String) compileList.elementAt(j));", "-                }", "+            for (int j = 0; j < fileCount; j++) {", "+                moveGeneratedFile(baseDir, sourceBase, (String) compileList.elementAt(j));", "+        compileList.removeAllElements();"]}]}
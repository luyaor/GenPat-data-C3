{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "608b56e1c9672bdb6632047ce42399ff", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f8857900ba719dd1d813e89e6e1cd11", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/scm/AntStarTeamCheckOut.java", "commitBeforeChange": "e8f24b5abbcc24006eac5cea23cff74791fbea07", "commitAfterChange": "968b951f03e69fe19ec5685fe6f8629d10ef21dc", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private java.io.File getLocalFile(String tgt, String itemname)", "signatureAfterChange": "     private java.io.File calcTargetFolder(View v, Folder rootSourceFolder)", "diff": ["+     */", "+    private java.io.File calcTargetFolder(View v, Folder rootSourceFolder)", "+    {", "+\tjava.io.File root = new java.io.File(getTargetFolder());", "+        if (!getTargetFolderAbsolute())", "+\t{", "+\t    // Create a variable dir that contains the name of", "+\t    // the StarTeam folder that is the root folder in this view.", "+\t    // Get the default path to the current view.", "+            String defaultPath = v.getDefaultPath();", "+", "+\t    // convert whatever separator char is in starteam to that of the target system.", "+\t    defaultPath=defaultPath.replace('/', java.io.File.separatorChar);", "+\t    defaultPath=defaultPath.replace('\\\\', java.io.File.separatorChar);", "+", "+\t    java.io.File dir = new java.io.File(defaultPath);", "+\t    String dirName = dir.getName();", "+", "+            // If it ends with separator then strip it off", "+\t    if (dirName.endsWith(delim))", "+\t    {", "+\t\tdirName = dirName.substring(0, dirName.length()-1);", "+\t    }", "+", "+\t    // Replace the projectName in the file's absolute path to the viewName.", "+\t    // This makes the root target of a checkout operation equal to:", "+\t    // targetFolder + dirName", "+\t    StringTokenizer pathTokenizer = new StringTokenizer(rootSourceFolder.getFolderHierarchy(), delim);", "+\t    String currentToken = null;", "+\t    boolean foundRoot = false;", "+\t    while (pathTokenizer.hasMoreTokens())", "+\t    {", "+\t\tcurrentToken = pathTokenizer.nextToken();", "+\t\tif (currentToken.equals(getProjectName()) && !foundRoot)", "+\t\t{", "+\t\t    currentToken = dirName;", "+\t\t    foundRoot = true;    // only want to do this the first time", "+\t\t}", "+\t\troot = new java.io.File(root, currentToken);", "+\t    }", "+\t}", "+", "+        return root;", "+    }", "-     */", "-    private java.io.File getLocalFile(String tgt, String itemname) {", "-        java.io.File tgtFolder = new java.io.File(tgt);", "-        return new java.io.File(tgtFolder,itemname);", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2f02722612234d53e8d7cd4e21da4f5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XmlProperty.java", "commitBeforeChange": "1c08b74cea26eaef3e19bb6eea9d21b3e5a49c15", "commitAfterChange": "eeab7a1ba3b44e0b03ec1a17a120ca0f9b6ebcb2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public Object processNode (Node node, String prefix, Object container)", "signatureAfterChange": "     public Object processNode (Node node, String prefix, Object container)", "diff": ["+        boolean emptyNode = false;", "+        boolean semanticEmptyOverride = false;", "+        if (node.getNodeType() == Node.ELEMENT_NODE", "+            && semanticAttributes", "+            && node.hasAttributes()", "+            && (node.getAttributes().getNamedItem(VALUE) != null", "+                || node.getAttributes().getNamedItem(LOCATION) != null", "+                || node.getAttributes().getNamedItem(REF_ID) != null", "+                || node.getAttributes().getNamedItem(PATH) != null", "+                || node.getAttributes().getNamedItem(PATHID) != null)) {", "+            semanticEmptyOverride = true;", "+        }", "+            if (\"\".equals(nodeText) && !semanticEmptyOverride) {", "+                emptyNode = true;", "+            }", "-                   && (node.getChildNodes().getLength() == 0)) {", "+                   && (node.getChildNodes().getLength() == 0)", "+                   && !semanticEmptyOverride) {", "+            emptyNode = true;", "+        } else if ((node.getNodeType() == Node.ELEMENT_NODE)", "+                   && (node.getChildNodes().getLength() == 1)", "+                   && (node.getFirstChild().getNodeType() == Node.TEXT_NODE)", "+                   && (\"\".equals(node.getFirstChild().getNodeValue()))", "+                   && !semanticEmptyOverride) {", "+            nodeText = \"\";", "+            emptyNode = true;", "-", "-            addProperty(prefix, nodeText, id);", "+            if (nodeText.trim().length() != 0 || emptyNode) {", "+                addProperty(prefix, nodeText, id);", "+            }"]}]}
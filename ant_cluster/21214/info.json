{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a4dfb757b07e854447016124dc8804b1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32cd6d7c5a1e1c330dd3bf76dae45bfc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/compilers/CompilerAdapterFactory.java", "commitBeforeChange": "de3676088087b4d6fd08c1ce084c6c005eaa0821", "commitAfterChange": "1f611ac0142b8cb9f317198682fc6015c7a9c78f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static CompilerAdapter getCompiler(String compilerType, Task task)          throws BuildException", "signatureAfterChange": "     public static CompilerAdapter getCompiler(String compilerType, Task task)          throws BuildException", "diff": ["-            /* If I've done things right, this should be the extent of the", "-             * conditional statements required.", "-             */", "+            boolean isClassicCompilerSupported=true;", "+            //as new versions of java come out, add them to this test", "+            if(Project.getJavaVersion()==Project.JAVA_1_4) {", "+                 isClassicCompilerSupported=false;", "+             }", "+", "-                return new Javac12();", "+                if(isClassicCompilerSupported) {", "+                    return new Javac12();", "+                }", "+                else {", "+                    throw new BuildException(\"This version of java does \"", "+                                             +\"not support the classic compiler\");", "+                }", "+", "+            //on java<=1.3 the modern falls back to classic if it is not found", "+            //but on java>=1.4 we just bail out early", "-                try {", "-                    Class.forName(\"com.sun.tools.javac.Main\");", "-                } catch (ClassNotFoundException cnfe) {", "-                    task.log(\"Modern compiler is not available - using \"", "-                            + \"classic compiler\", Project.MSG_WARN);", "-                    return new Javac12();", "+                if(doesModernCompilerExist()) {", "+                    return new Javac13();", "+                } else {", "+                    if(isClassicCompilerSupported) {", "+                        task.log(\"Modern compiler not found - looking for \"", "+                                + \"classic compiler\", Project.MSG_WARN);", "+                        return new Javac12();", "+                    }", "+                    else {", "+                        throw new BuildException(\"Unable to find a javac compiler;\\n\"", "+                                                 +\"com.sun.tools.javac.Main is not on the classpath.\\n\"", "+                                                 +\"Perhaps JAVA_HOME does not point to the JDK\");", "+                    }", "-                return new Javac13();", "+                "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed0486fae7a1bdd78f7227a72a75c65f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/compilers/CompilerAdapterFactory.java", "commitBeforeChange": "6a2d05b7a8541f09b4ac41d92d54ce3cc80e2036", "commitAfterChange": "55811ba73b5aed3169e1d003a069a4f83f161d1d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static CompilerAdapter getCompiler(String compilerType, Task task)          throws BuildException", "signatureAfterChange": "     public static CompilerAdapter getCompiler(String compilerType, Task task)          throws BuildException", "diff": ["-            if (Project.getJavaVersion() == Project.JAVA_1_4) {", "-                 isClassicCompilerSupported = false;", "+            if (JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_4)) {", "+                isClassicCompilerSupported = false;", "-                    compilerType.equalsIgnoreCase(\"javac1.1\") ||", "-                    compilerType.equalsIgnoreCase(\"javac1.2\")) {", "+                compilerType.equalsIgnoreCase(\"javac1.1\") ||", "+                compilerType.equalsIgnoreCase(\"javac1.2\")) {", "-                        + \"not support the classic compiler\");", "+                                             + \"not support the classic \"", "+                                             + \"compiler\");", "-                    compilerType.equalsIgnoreCase(\"javac1.3\") ||", "-                    compilerType.equalsIgnoreCase(\"javac1.4\")) {", "+                compilerType.equalsIgnoreCase(\"javac1.3\") ||", "+                compilerType.equalsIgnoreCase(\"javac1.4\")) {", "-                                + \"classic compiler\", Project.MSG_WARN);", "+                                 + \"classic compiler\", Project.MSG_WARN);", "-                            + \"compiler;\\n\"", "-                            + \"com.sun.tools.javac.Main is not on the \" ", "-                            + \"classpath.\\n\"", "-                            + \"Perhaps JAVA_HOME does not point to the JDK\");", "+                                                 + \"compiler;\\n\"", "+                                                 + \"com.sun.tools.javac.Main \"", "+                                                 + \"is not on the \" ", "+                                                 + \"classpath.\\n\"", "+                                                 + \"Perhaps JAVA_HOME does not\"", "+                                                 + \" point to the JDK\");", "-                ", "+", "-                    compilerType.equalsIgnoreCase(\"microsoft\")) {", "+                compilerType.equalsIgnoreCase(\"microsoft\")) {", "-                    compilerType.equalsIgnoreCase(\"symantec\")) {", "+                compilerType.equalsIgnoreCase(\"symantec\")) {"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d0770887daec8a90554aa2152648cf74", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7901d43a1155beb4ad9d4cf4bba2949e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "6ea9dc1024fa547e046417d86c602bed21d64a43", "commitAfterChange": "9bd753321ae84d06e3115d0549c2d7dda7972428", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "     protected URL getResourceURL(File file, String resourceName)", "signatureAfterChange": "     protected URL getResourceURL(File file, String resourceName)", "diff": ["-                        jarFile = new JarFile(file);", "+                        try {", "+                            jarFile = new JarFile(file);", "+                        } catch (ZipException notAJar) {", "+                            // raised if a file that is not a ZIP", "+                            // happens to be part of the classpath -", "+                            // this obviously cannot contain the", "+                            // resource", "+                            String msg = \"CLASSPATH element \" + file", "+                                + \" is not a JAR.\";", "+                            log(msg, Project.MSG_WARN);", "+                            System.err.println(msg);", "+                            return null;", "+                        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfc2a5022221a28369754bc2064b9ef5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Checksum.java", "commitBeforeChange": "aee67d5f1e75c16e6c8dd25507067b30045c802f", "commitAfterChange": "6c29cfdd70102a32f666f0f4525bf48da0613bbb", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private boolean generateChecksums() throws BuildException", "signatureAfterChange": "     private boolean generateChecksums() throws BuildException", "diff": ["-                // File is Comparable, so sorting is trivial", "-                Arrays.sort(keyArray);", "+                // File is Comparable, but sort-order is platform", "+                // dependent (case-insensitive on Windows)", "+                Arrays.sort(keyArray, new Comparator() {", "+                        public int compare(Object o1, Object o2) {", "+                            File f1 = (File) o1;", "+                            File f2 = (File) o2;", "+                            return f1 == null ? (f2 == null ? 0 : -1)", "+                                : (f2 == null ? 1", "+                                   : f1.getName().compareTo(f2.getName())", "+                                   );", "+                        }", "+                    });"]}]}
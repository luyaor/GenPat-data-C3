{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3dd20aef8ba0688c860a9710232be3e8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98edc94dc91312af39ec556026b26990", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/main/org/apache/ant/core/execution/ExecutionFrame.java", "commitBeforeChange": "a48208f6cf8cf80ef1e144305ff8dfe0958599d5", "commitAfterChange": "c2e518039b65dc5b8c9c31f9f78b2d72ea8db2d1", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 23, "signatureBeforeChange": "              private void configureElement(Object element, TaskElement model)          throws ExecutionException, ConfigException", "signatureAfterChange": "        private void configureElement(Object element, TaskElement model)          throws ExecutionException, ConfigException", "diff": ["+     */   ", "-                    ExecutionTask nestedExecutionTask ", "-                        = getConfiguredExecutionTask(nestedElementModel);", "-                        ", "+                    Task nestedTask = configureTask(nestedElementModel);", "-                    container.addExecutionTask(nestedExecutionTask);", "+                    container.addTask(nestedTask);", "+            }", "+            List aspects = getActiveAspects(model);", "+            for (Iterator i = aspects.iterator(); i.hasNext(); ) {", "+                AspectHandler aspectHandler = (AspectHandler)i.next();", "+                aspectHandler.afterConfigElement(element);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf7ac7a104a51b3d29d18c393c81603c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/AbstractJarSignerTask.java", "commitBeforeChange": "b47a31a21065882b7b6279ed634fc340448feeef", "commitAfterChange": "25e6c497c3d1b68f412ad7fc47fad735edee37d7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "     protected void setCommonOptions(final ExecTask cmd)", "signatureAfterChange": "     protected void setCommonOptions(final ExecTask cmd)", "diff": ["-            cmd.createArg().setValue(\"-J-Xmx\" + maxMemory);", "+            addValue(cmd,\"-J-Xmx\" + maxMemory);", "-            cmd.createArg().setValue(\"-verbose\");", "+            addValue(cmd,\"-verbose\");", "+        }", "+        ", "+        //now patch in all system properties", "+        Vector props=sysProperties.getVariablesVector();", "+        Enumeration e=props.elements();", "+        while (e.hasMoreElements()) {", "+            Environment.Variable variable = (Environment.Variable) e.nextElement();", "+            declareSysProperty(cmd,variable);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9721a550c0169e32a45bf9e29332c3e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/Frame.java", "commitBeforeChange": "c0ddb311373dc9fe32a78a15a68c4587bbb7566d", "commitAfterChange": "69d9b9a49622889f44d6792faf00f886857828d6", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 36, "signatureBeforeChange": "     protected void executeTasks(Iterator taskIterator)          throws ExecutionException", "signatureAfterChange": "     protected void executeTasks(Iterator taskIterator)          throws ExecutionException", "diff": ["+        ", "+            List aspects = componentManager.getAspects();", "-", "-                if (component instanceof Task) {", "-                    execService.executeTask((Task) component);", "-                } else {", "-                    String typeId", "-                         = model.getAspectValue(Constants.ANT_ASPECT, \"id\");", "-", "-                    if (typeId != null) {", "-                        setDataValue(typeId, component, true);", "+                for (Iterator i = aspects.iterator(); i.hasNext();) {", "+                    Aspect aspect = (Aspect) i.next();", "+                    Object replacement ", "+                        = aspect.postCreateComponent(component, model);", "+                    if (replacement != null) {", "+                        component = replacement;", "+", "+                if (component instanceof Task) {", "+                    executeTask((Task) component);", "+                } "]}]}
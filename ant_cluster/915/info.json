{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "868d66b63b8866e720d75f3d8f89ad80", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48ac15b72a3462440ff76368cc339d9f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Jar.java", "commitBeforeChange": "fffe72edb5a6a6deb6222d79841a42c1663ccd36", "commitAfterChange": "b74b9067510ce1fd1ce68b465f74c38c81fb7d01", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      protected void initZipOutputStream(ZipOutputStream zOut)         throws IOException, BuildException", "signatureAfterChange": "      protected void initZipOutputStream(ZipOutputStream zOut)         throws IOException, BuildException", "diff": ["-            String s = \"/org/apache/tools/ant/defaultManifest.mf\";", "-            InputStream in = this.getClass().getResourceAsStream(s);", "-            if ( in == null )", "-                throw new BuildException ( \"Could not find: \" + s );", "-            zipDir(null, zOut, \"META-INF/\");", "-            zipFile(in, zOut, \"META-INF/MANIFEST.MF\", System.currentTimeMillis());", "+            execManifest = null;", "-", "+        else {", "+            execManifest = new Manifest();", "+            execManifest.merge(manifest);", "+        }", "+        zipDir(null, zOut, \"META-INF/\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d1da7e3d903944a729dbe8bace989eb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "e362b3b1fc28b4d9b2965708b5d5e457f21b0c9f", "commitAfterChange": "c13dba6d524fe74b1518e3442429ba6e97592edd", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "     private boolean isDeeper(String pattern, String name)", "signatureAfterChange": "     private boolean isDeeper(PathPattern pattern, PathPattern name)", "diff": ["-    private boolean isDeeper(String pattern, String name) {", "-        Vector p = SelectorUtils.tokenizePath(pattern);", "-        if (!p.contains(SelectorUtils.DEEP_TREE_MATCH)) {", "-            Vector n = SelectorUtils.tokenizePath(name);", "-            return p.size() > n.size();", "-        }", "-        return true;", "+    private boolean isDeeper(PathPattern pattern, PathPattern name) {", "+        return pattern.containsPattern(SelectorUtils.DEEP_TREE_MATCH)", "+            || pattern.depth() > name.depth();"]}]}
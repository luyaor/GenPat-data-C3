{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c413e02511700d0ca9c9c0ae04572f11", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1de2287edd4a46710154a21a7126e435", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ComponentManager.java", "commitBeforeChange": "74565feb5380d1b180234375abe807ca302bb2cd", "commitAfterChange": "689db09b317b91287cf3a8569bbf0ef8f8137522", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "     protected Object createComponent(String componentName, BuildElement model)          throws ExecutionException", "signatureAfterChange": "     protected Object createComponent(String componentName, BuildElement model)          throws ExecutionException", "diff": ["+        Location location = Location.UNKNOWN_LOCATION;", "+        if (model != null) {", "+            location = model.getLocation();", "+        }", "-                + componentName + \"> component\");", "+                 + componentName + \"> component\");", "-            ", "+", "+        boolean isTask = definition.getDefinitionType() == AntLibrary.TASKDEF;", "-            Location location = Location.UNKNOWN_LOCATION;", "-            if (model != null) {", "-                location = model.getLocation();", "-            }", "-", "-            Object component", "-                 = libFactory.createComponent(componentClass, localName);", "-", "-            ExecutionComponent execComponent = null;", "-            if (definition.getDefinitionType() == AntLibrary.TASKDEF) {", "-                if (component instanceof Task) {", "-                    execComponent = (Task)component;", "-                } else {", "-                    execComponent = new TaskAdapter(componentName, component);", "-                }", "-            } else if (component instanceof ExecutionComponent) {", "-                execComponent = (ExecutionComponent)component;", "-            }", "-", "-            ExecutionContext context", "-                 = new ExecutionContext(frame, execComponent, location);", "-            context.setClassLoader(componentLoader);", "-            ClassLoader currentLoader", "-                 = LoaderUtils.setContextLoader(componentLoader);", "-            if (execComponent != null) {", "-                execComponent.init(context, componentName);", "-            }", "-            if (model != null) {", "-                configureElement(libFactory, component, model);", "-                if (execComponent != null) {", "-                    execComponent.validateComponent();", "-                }", "-            }", "-            LoaderUtils.setContextLoader(currentLoader);", "-            if (execComponent != null) {", "-                return execComponent;", "-            }", "-", "-            return component;", "+            return createComponent(componentLoader, libFactory, componentClass,", "+                componentName, localName, isTask, model);", "-                model.getLocation());", "+                location);", "-                e, model.getLocation());", "-        } catch (InstantiationException e) {", "-            throw new ExecutionException(\"Unable to instantiate component \"", "-                 + \"class \" + className + \" for component <\" + componentName", "-                 + \">\", e, model.getLocation());", "-        } catch (IllegalAccessException e) {", "-            throw new ExecutionException(\"Unable to access task class \"", "-                 + className + \" for component <\" + componentName + \">\",", "-                e, model.getLocation());", "+                e, location);", "-        } catch (RuntimeException e) {", "-            throw new ExecutionException(e.getClass().getName() + \": \"", "-                 + e.getMessage(), e, model.getLocation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "643b26a5c4c884abfb917fbd1a1fd835", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/XMLValidateTask.java", "commitBeforeChange": "649af7a77f9c8b06e2d92f2e07423cef7b88e400", "commitAfterChange": "2bf735118217ed87488f9e5519c5122da48c5e43", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private void initValidator()", "signatureAfterChange": "     protected void initValidator()", "diff": ["-    private void initValidator() {", "+    protected void initValidator() {", "+        xmlReader=createXmlReader();", "+", "+        xmlReader.setEntityResolver(getEntityResolver());", "+        xmlReader.setErrorHandler(errorHandler);", "+", "+        if (!isSax1Parser()) {", "+            // turn validation on", "+            if (!lenient) {", "+                setFeature(XmlConstants.FEATURE_VALIDATION, true);", "+            }", "+            // set the feature from the attribute list", "+            for (int i = 0; i < attributeList.size(); i++) {", "+                Attribute feature = (Attribute) attributeList.elementAt(i);", "+                setFeature(feature.getName(), feature.getValue());", "+", "+            }", "+", "+            // Sets properties", "+            for (int i = 0; i < propertyList.size(); i++) {", "+                final Property prop = (Property) propertyList.elementAt(i);", "+                setProperty(prop.getName(), prop.getValue());", "+            }", "+        }", "+    }", "-            try {", "-                reader = JAXPUtils.getXMLReader();", "-            } catch (BuildException exc) {", "-                reader = JAXPUtils.getParser();", "-            }", "-            xmlReader = (XMLReader) reader;", "-                xmlReader = new ParserAdapter((Parser) reader);", "-        xmlReader.setEntityResolver(getEntityResolver());", "-        xmlReader.setErrorHandler(errorHandler);", "-", "-        if (!(xmlReader instanceof ParserAdapter)) {", "-            // turn validation on", "-            if (!lenient) {", "-                setFeature(\"http://xml.org/sax/features/validation\", true);", "-            }", "-            // set the feature from the attribute list", "-            for (int i = 0; i < attributeList.size(); i++) {", "-                Attribute feature = (Attribute) attributeList.elementAt(i);", "-                setFeature(feature.getName(), feature.getValue());", "-", "-            }", "-", "-            // Sets properties", "-            for (int i = 0; i < propertyList.size(); i++) {", "-                final Property prop = (Property) propertyList.elementAt(i);", "-                setProperty(prop.getName(), prop.getValue());", "-            }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a1ae7ad54e2357c9b384e856ab13b274", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e330e42888b9fe9e41bba79623f31e2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/XmlPropertyTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private void doTest(String msg, boolean keepRoot, boolean collapse,                         boolean semantic, boolean include, boolean localRoot)", "signatureAfterChange": "     private void doTest(String msg, boolean keepRoot, boolean collapse,                         boolean semantic, boolean include, boolean localRoot) throws IOException", "diff": ["-                        boolean semantic, boolean include, boolean localRoot) {", "+                        boolean semantic, boolean include, boolean localRoot) throws IOException {", "-            try {", "-                File propertyFile = getGoldfile(inputFile, keepRoot, collapse,", "-                                                semantic, include, localRoot);", "-                if (!propertyFile.exists()) {", "+            File propertyFile = getGoldfile(inputFile, keepRoot, collapse,", "+                                            semantic, include, localRoot);", "+            if (!propertyFile.exists()) {", "-                    continue;", "-                }", "-", "-                //                System.out.println(msg + \" (\" + propertyFile.getName() + \") in (\" + workingDir + \")\");", "-", "-                Project p = new Project();", "-", "-                XmlProperty xmlproperty = new XmlProperty();", "-                xmlproperty.setProject(p);", "-                xmlproperty.setFile(inputFile);", "-", "-                xmlproperty.setKeeproot(keepRoot);", "-                xmlproperty.setCollapseAttributes(collapse);", "-                xmlproperty.setSemanticAttributes(semantic);", "-                xmlproperty.setIncludeSemanticAttribute(include);", "-                xmlproperty.setRootDirectory(workingDir);", "-", "-                // Set a property on the project to make sure that loading", "-                // a property with the same name from an xml file will", "-                // *not* change it.", "-                p.setNewProperty(\"override.property.test\", \"foo\");", "-", "-                xmlproperty.execute();", "-", "-                Properties props = new Properties();", "-                props.load(new FileInputStream(propertyFile));", "-", "-                //printProperties(p.getProperties());", "-", "-                ensureProperties(msg, inputFile, workingDir, p, props);", "-                ensureReferences(msg, inputFile, p.getReferences());", "-", "-            } catch (IOException ex) {", "-                fail(ex.toString());", "+                continue;", "+", "+            //                System.out.println(msg + \" (\" + propertyFile.getName() + \") in (\" + workingDir + \")\");", "+", "+            Project p = new Project();", "+", "+            XmlProperty xmlproperty = new XmlProperty();", "+            xmlproperty.setProject(p);", "+            xmlproperty.setFile(inputFile);", "+", "+            xmlproperty.setKeeproot(keepRoot);", "+            xmlproperty.setCollapseAttributes(collapse);", "+            xmlproperty.setSemanticAttributes(semantic);", "+            xmlproperty.setIncludeSemanticAttribute(include);", "+            xmlproperty.setRootDirectory(workingDir);", "+", "+            // Set a property on the project to make sure that loading", "+            // a property with the same name from an xml file will", "+            // *not* change it.", "+            p.setNewProperty(\"override.property.test\", \"foo\");", "+", "+            xmlproperty.execute();", "+", "+            Properties props = new Properties();", "+            props.load(new FileInputStream(propertyFile));", "+", "+            //printProperties(p.getProperties());", "+", "+            ensureProperties(msg, inputFile, workingDir, p, props);", "+            ensureReferences(msg, inputFile, p.getReferences());", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c4a55b7351d03b663987abcc0974694", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecTask.java", "commitBeforeChange": "0022fa2365dff486750da547135c9339b7a67526", "commitAfterChange": "984ad3c0217344ebdeb3b55fe2ba4018384fcfa3", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "     protected ExecuteStreamHandler createHandler() throws BuildException", "signatureAfterChange": "     protected ExecuteStreamHandler createHandler() throws BuildException", "diff": ["-        OutputStream outputStream = null;", "-        OutputStream errorStream = null;", "-        InputStream inputStream = null; ", "-        ", "-        if (out == null && outputprop == null) {", "-            outputStream = new LogOutputStream(this, Project.MSG_INFO);", "-            errorStream = new LogOutputStream(this, Project.MSG_WARN);", "-        } else {", "-            if (out != null)  {", "-                try {", "-                    outputStream ", "-                        = new FileOutputStream(out.getAbsolutePath(), append);", "-                    log(\"Output redirected to \" + out, Project.MSG_VERBOSE);", "-                } catch (FileNotFoundException fne) {", "-                    throw new BuildException(\"Cannot write to \" + out, fne,", "-                                             getLocation());", "-                } catch (IOException ioe) {", "-                    throw new BuildException(\"Cannot write to \" + out, ioe,", "-                                             getLocation());", "-                }", "-            }", "-        ", "-            if (outputprop != null) {", "-                baos = new ByteArrayOutputStream();", "-                log(\"Output redirected to property: \" + outputprop, ", "-                     Project.MSG_VERBOSE);", "-                if (out == null) {", "-                    outputStream = baos;", "-                } else {", "-                    outputStream = new TeeOutputStream(outputStream, baos);", "-                }", "-            } else {", "-                baos = null;", "-            }", "-            ", "-            errorStream = outputStream;", "-        } ", "-", "-        if (logError) {", "-            errorStream = new LogOutputStream(this, Project.MSG_WARN);", "-        }", "-        ", "-        if (error != null)  {", "-            try {", "-                errorStream ", "-                    = new FileOutputStream(error.getAbsolutePath(), append);", "-                log(\"Error redirected to \" + error, Project.MSG_VERBOSE);", "-            } catch (FileNotFoundException fne) {", "-                throw new BuildException(\"Cannot write to \" + error, fne,", "-                                         getLocation());", "-            } catch (IOException ioe) {", "-                throw new BuildException(\"Cannot write to \" + error, ioe,", "-                                         getLocation());", "-            }", "-        }", "-    ", "-        if (errorProperty != null) {", "-            errorBaos = new ByteArrayOutputStream();", "-            log(\"Error redirected to property: \" + errorProperty, ", "-                Project.MSG_VERBOSE);", "-            if (error == null) {", "-                errorStream = errorBaos;", "-            } else {", "-                errorStream = new TeeOutputStream(errorStream, errorBaos);", "-            }", "-        } else {", "-            errorBaos = null;", "-        }", "-", "-        if (input != null) {", "-            try {", "-                inputStream = new FileInputStream(input);", "-            } catch (FileNotFoundException fne) {", "-                throw new BuildException(\"Cannot read from \" + input, fne,", "-                                         getLocation());", "-            }", "-        }", "-        ", "-        return new PumpStreamHandler(outputStream, errorStream, inputStream, ", "-                                     true, true, true);         ", "+        return redirector.createHandler();"]}]}
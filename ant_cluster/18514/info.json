{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "66131e9bf210603ba3498cb28368f4a7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0623dfc0516b341a135d30e44517176", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/wizard/Wizard.java", "commitBeforeChange": "f9ddec7b87382f81161818966776347a4809cd2e", "commitAfterChange": "18931f719f446825f75c6f7572698f0bf26370ce", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public Wizard(ResourceManager resources, Object dataModel)", "signatureAfterChange": "     public Wizard(WizardData data)", "diff": ["-    public Wizard(ResourceManager resources, Object dataModel) {", "+    public Wizard(WizardData data) {", "-        _resources = resources;", "-        _model = dataModel;", "+        _data = data;", "-            _resources.getString(\"progress\")));", "+            _data.getResources().getString(\"progress\")));", "-            _resources.getString(\"help\")));", "+            _data.getResources().getString(\"help\")));", "-        _nav = new ButtonNavigator(_resources);", "+        _nav = new ButtonNavigator(_data.getResources());", "-        String[] steps = _resources.getStringArray(\"steps\");", "+        String[] steps = _data.getResources().getStringArray(\"steps\");", "-                Class type = _resources.getClass(steps[i] + \".editor\");", "+                Class type = _data.getResources().getClass(steps[i] + \".editor\");", "-                step.setResources(_resources);", "+                step.setResources(_data.getResources());", "-                step.setTitle(_resources.getString(steps[i]+ \".title\"));", "+                step.setTitle(", "+                    _data.getResources().getString(steps[i]+ \".title\"));", "-                    _resources.getString(steps[i]+ \".description\"));", "-", "-                String id = _resources.getString(steps[i] + \".next\");", "-                id = (id == null && i < steps.length - 1) ? steps[i + 1] : id;", "-                step.setNext(id);", "-", "-                id = _resources.getString(steps[i] + \".prev\");", "-                id = (id == null && i > 0) ? steps[i - 1] : id;", "-                step.setPrevious(id);", "+                    _data.getResources().getString(steps[i]+ \".description\"));", "-                first.setDataModel(_model);", "+                first.setDataModel(_data);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3e02c6d510520a268f4bbd4a17e812d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SignJar.java", "commitBeforeChange": "7c2876282a38e560ee26eb15cf136629dc672c2e", "commitAfterChange": "c51cce56b802399a1712e67544a3224da62b7c49", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        final boolean hasFileset = filesets.size() > 0;", "-        if (!hasJar && !hasFileset) {", "+        if (!hasJar && !hasResources()) {", "-        if (hasFileset && hasSignedJar) {", "-            throw new BuildException(ERROR_SIGNEDJAR_AND_FILESETS);", "+        if (hasResources() && hasSignedJar) {", "+            throw new BuildException(ERROR_SIGNEDJAR_AND_PATHS);", "-            //a nested fileset with one file", "+            //a nested path with one file", "-            Vector sources = createUnifiedSources();", "+            Path sources = createUnifiedSourcePath();", "-            //at this point the filesets are set up with lists of files,", "+            //at this point the paths are set up with lists of files,", "-            // deal with the filesets", "-            for (int i = 0; i < sources.size(); i++) {", "-                FileSet fs = (FileSet) sources.elementAt(i);", "-                //get all included files in a fileset", "-                DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "-                String[] jarFiles = ds.getIncludedFiles();", "-                File baseDir = fs.getDir(getProject());", "+            // deal with the paths", "+            Iterator iter = sources.iterator();", "+            while (iter.hasNext()) {", "+                FileResource fr = (FileResource) iter.next();", "-                File toDir = hasDestDir ? destDir : baseDir;", "+                File toDir = hasDestDir ? destDir : fr.getBaseDir();", "-                //loop through all jars in the fileset", "-                for (int j = 0; j < jarFiles.length; j++) {", "-                    String jarFile = jarFiles[j];", "-                    //determine the destination filename via the mapper", "-                    String[] destFilenames = destMapper.mapFileName(jarFile);", "-                    if (destFilenames == null || destFilenames.length != 1) {", "-                        //we only like simple mappers.", "-                        throw new BuildException(ERROR_BAD_MAP + jarFile);", "-                    }", "-                    File destFile = new File(toDir, destFilenames[0]);", "-                    File jarSource = new File(baseDir, jarFile);", "-                    signOneJar(jarSource, destFile);", "+                //determine the destination filename via the mapper", "+                String[] destFilenames = destMapper.mapFileName(fr.getName());", "+                if (destFilenames == null || destFilenames.length != 1) {", "+                    //we only like simple mappers.", "+                    throw new BuildException(ERROR_BAD_MAP + fr.getFile());", "+                File destFile = new File(toDir, destFilenames[0]);", "+                signOneJar(fr.getFile(), destFile);"]}]}
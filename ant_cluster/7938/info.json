{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "627015bd1254b04400c513805a09de71", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a5994c73830bcac13ce9a0bc7cbb666", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "6f4f0c60756a92b3a5dbc1c123904be0db030ad3", "commitAfterChange": "8c9b19d0a2849ba712c6859ed7b7d3537cef33fb", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "     private int executeAsForked(JUnitTest test, ExecuteWatchdog watchdog,                                  File casesFile)         throws BuildException", "signatureAfterChange": "     private TestResultHolder executeAsForked(JUnitTest test,                                               ExecuteWatchdog watchdog,                                               File casesFile)         throws BuildException", "diff": ["-    private int executeAsForked(JUnitTest test, ExecuteWatchdog watchdog, ", "-                                File casesFile)", "+    private TestResultHolder executeAsForked(JUnitTest test, ", "+                                             ExecuteWatchdog watchdog, ", "+                                             File casesFile)", "+        File vmWatcher = createTempPropertiesFile(\"junitvmwatcher\");", "+        formatterArg.append(\"formatter=\");", "+        formatterArg.append(ForkedVMWatcher.class.getName());", "+        formatterArg.append(\",\");", "+        formatterArg.append(vmWatcher);", "+        cmd.createArgument().setValue(formatterArg.toString());", "-        int retVal;", "+        TestResultHolder result = new TestResultHolder();", "-            retVal = execute.execute();", "+            result.exitCode = execute.execute();", "+                result.timedOut = true;", "+            } else if (vmWatcher.length() == 0) {", "+                result.crashed = true;", "+                logVmCrash(feArray, test);", "+            vmWatcher.delete();", "-        return retVal;", "+        return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25e9434446b8c506648716564688ff55", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/selectors/FilenameSelectorTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testSelectionBehaviour()", "signatureAfterChange": "     @Test     public void testSelectionBehaviour()", "diff": ["+    @Test", "-        try {", "-            makeBed();", "-            s = (FilenameSelector)getInstance();", "+            s = new FilenameSelector();", "-            results = selectionString(s);", "+            results = selectorRule.selectionString(s);", "-            s = (FilenameSelector)getInstance();", "+            s = new FilenameSelector();", "-            results = selectionString(s);", "+            results = selectorRule.selectionString(s);", "-            s = (FilenameSelector)getInstance();", "+            s = new FilenameSelector();", "-            results = selectionString(s);", "+            results = selectorRule.selectionString(s);", "-            s = (FilenameSelector)getInstance();", "+            s = new FilenameSelector();", "-            results = selectionString(s);", "+            results = selectorRule.selectionString(s);", "-            s = (FilenameSelector)getInstance();", "+            s = new FilenameSelector();", "-            results = selectionString(s);", "+            results = selectorRule.selectionString(s);", "-        }", "-        finally {", "-            cleanupBed();", "-        }", "+        "]}]}
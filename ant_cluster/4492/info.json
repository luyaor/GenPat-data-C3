{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "388b0d6124798030996efd847f2236ea", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e1a417441477410e61013795a35dae4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/XmlLogger.java", "commitBeforeChange": "1657cdb28f05fdd026a2118489be07bd287f734a", "commitAfterChange": "448f5ee22c42b02fb503c012fa81ece4949fba61", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void messageLogged(BuildEvent event)", "signatureAfterChange": "     public void messageLogged(BuildEvent event)", "diff": ["-            parentElement = (TimedElement) tasks.get(task);", "+            parentElement = getTaskElement(task);", "+        /*", "+        */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ff6e8cc44a0b1b4cb394d577e8d0e3a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/common/org/apache/ant/common/model/Project.java", "commitBeforeChange": "f1025dd3c6deebb466ac41a06a42d812cdf4e08d", "commitAfterChange": "c2f14ffad1518f0d1c23c084b7c216d06c5da363", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void fillinDependencyOrder(String globalName, Target target,                                       List dependencyOrder, Set visited,                                       CircularDependencyChecker checker)          throws ModelException", "signatureAfterChange": "     public void fillinDependencyOrder(Target target,                                       List dependencyOrder, Set visited,                                       CircularDependencyChecker checker)          throws ModelException", "diff": ["-     */", "-    public void fillinDependencyOrder(String globalName, Target target,", "-                                      List dependencyOrder, Set visited,", "-                                      CircularDependencyChecker checker)", "-         throws ModelException {", "-        if (visited.contains(target.getName())) {", "-            return;", "-        }", "-", "-        try {", "-            String targetName = target.getName();", "-            String targetGlobalName = targetName;", "-            if (globalName != null) {", "-                targetGlobalName = globalName + REF_DELIMITER + targetName;", "-            }", "-            checker.visitNode(targetGlobalName);", "-            for (Iterator i = target.getDependencies(); i.hasNext();) {", "-                String dependency = (String) i.next();", "-                boolean localTarget = (dependency.indexOf(REF_DELIMITER) == -1);", "-                Target dependencyTarget", "-                     = localTarget ? getTarget(dependency)", "-                     : getRefTarget(dependency);", "-", "-                if (dependencyTarget == null) {", "-                    StringBuffer sb = new StringBuffer(\"Target '\");", "-                    if (globalName != null) {", "-                        sb.append(globalName + REF_DELIMITER);", "-                    }", "-                    sb.append(dependency);", "-                    sb.append(\"' does not exist in this project. \");", "-                    throw new ModelException(new String(sb),", "-                        target.getLocation());", "-                }", "-", "-                if (localTarget) {", "-                    // need to check the targets we depend on", "-                    fillinDependencyOrder(globalName, dependencyTarget,", "-                        dependencyOrder, visited, checker);", "-                }", "-            }", "-", "-            visited.add(targetName);", "-            checker.leaveNode(targetGlobalName);", "-            dependencyOrder.add(targetName);", "-        } catch (CircularDependencyException e) {", "-            throw new ModelException(e.getMessage(),", "-                target.getLocation());", "-        }", "-    }", "+    public void fillinDependencyOrder(Target target,", "+                                      List dependencyOrder, Set visited,", "+                                      CircularDependencyChecker checker)", "+         throws ModelException {", "+        if (visited.contains(target.getName())) {", "+", "+            String targetName = target.getName();", "+            checker.visitNode(targetName);", "+", "+                String dependency = (String) i.next();", "+                boolean localTarget = (dependency.indexOf(REF_DELIMITER) == -1);", "+                if (localTarget) {", "+                    Target dependencyTarget = getTarget(dependency);", "+", "+                    if (dependencyTarget == null) {", "+                        StringBuffer sb = new StringBuffer(\"Target '\");", "+", "+                        sb.append(dependency);", "+                        sb.append(\"' does not exist in this project. \");", "+                        throw new ModelException(new String(sb),", "+                            target.getLocation());", "+                    }", "+", "+                    // need to check the targets we depend on", "+                    fillinDependencyOrder(dependencyTarget,", "+                        dependencyOrder, visited, checker);", "+", "+            visited.add(targetName);", "+            checker.leaveNode(targetName);", "+            dependencyOrder.add(targetName);", "+        } catch (CircularDependencyException e) {", "+            throw new ModelException(e.getMessage(),", "+                target.getLocation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bb31f80928b0a89f8e0e24f834709f2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/Rpm.java", "commitBeforeChange": "44376a8c5d6f2fb64529ca1d6d92c52df0d51775", "commitAfterChange": "aff45f3377e85f974b643b95a2bddef944c61481", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        Execute exe = new Execute(streamhandler, null);", "-", "-        exe.setAntRun(getProject());", "-        if (topDir == null) {", "-            topDir = getProject().getBaseDir();", "-        }", "-        exe.setWorkingDirectory(topDir);", "-", "-        exe.setCommandline(toExecute.getCommandline());", "+        Execute exe = getExecute(toExecute, streamhandler);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e54ec1bef3bfd72ea437fbdf085d90e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ImportTask.java", "commitBeforeChange": "f4f656dffacef65cb5b2a2a779a02e60e821a61e", "commitAfterChange": "6a6bf3879820971393828fcb751be6723d4ad4d2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      private void importResource(ProjectHelper helper,                                 Resource importedResource)", "signatureAfterChange": "      private void importResource(ProjectHelper helper,                                 Resource importedResource)", "diff": ["-        File importedFile = null;", "-        FileProvider fp = importedResource.as(FileProvider.class);", "-        if (fp != null) {", "-            importedFile = fp.getFile();", "-        }", "-", "-            (importStack.contains(importedResource)", "-             || (importedFile != null && importStack.contains(importedFile))", "-             )", "-            ) {", "+            hasAlreadyBeenImported(importedResource, importStack)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7d5486f46d1493702975af92952e462", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/TraXLiaison.java", "commitBeforeChange": "8f70bc2a919459c49c1977d91551f43819063954", "commitAfterChange": "1e8307708de490453db28c89f777eb4a9c08767b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void setStylesheet(File stylesheet) throws Exception", "signatureAfterChange": "      public void setStylesheet(File stylesheet) throws Exception", "diff": ["-        xslStream = new FileInputStream(stylesheet);", "-        StreamSource src = new StreamSource(xslStream);", "-        src.setSystemId(getSystemId(stylesheet));", "-        templates = tfactory.newTemplates(src);", "-        transformer = templates.newTransformer();", "-        transformer.setErrorListener(this);", "+        this.stylesheet = stylesheet;"]}]}
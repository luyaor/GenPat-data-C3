{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6391c71cd113bbe347d2673d18aa91c9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c82c8fefd79e6b1db7f783c5ae1b291", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/net/TelnetTask.java", "commitBeforeChange": "14ce1527da98295378a4539fc827a9e38998ec61", "commitAfterChange": "f735f5f44df9fa52266e7b8b7f2741c2b7560d22", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "         public void waitForString( String s, Integer timeout )", "signatureAfterChange": "      protected void doWaitForString( final InputStream input,                                     final String string,                                     final Integer timeout )         throws TaskException", "diff": ["-         */", "-        public void waitForString( String s, Integer timeout )", "+    protected void doWaitForString( final InputStream input,", "+                                    final String string,", "+                                    final Integer timeout )", "+        throws TaskException", "+    {", "+        try", "-            InputStream is = this.getInputStream();", "-            try", "+            final StringBuffer sb = new StringBuffer();", "+            if( timeout == null || timeout.intValue() == 0 )", "-                StringBuffer sb = new StringBuffer();", "-                if( timeout == null || timeout.intValue() == 0 )", "+                while( sb.toString().indexOf( string ) == -1 )", "-                    while( sb.toString().indexOf( s ) == -1 )", "-                    {", "-                        sb.append( (char)is.read() );", "-                    }", "+                    sb.append( (char)input.read() );", "-                else", "+            }", "+            else", "+            {", "+                final Calendar endTime = Calendar.getInstance();", "+                endTime.add( Calendar.SECOND, timeout.intValue() );", "+                while( sb.toString().indexOf( string ) == -1 )", "-                    Calendar endTime = Calendar.getInstance();", "-                    endTime.add( Calendar.SECOND, timeout.intValue() );", "-                    while( sb.toString().indexOf( s ) == -1 )", "+                    while( Calendar.getInstance().before( endTime ) &&", "+                        input.available() == 0 )", "-                        while( Calendar.getInstance().before( endTime ) &&", "-                            is.available() == 0 )", "-                        {", "-                            Thread.sleep( 250 );", "-                        }", "-                        if( is.available() == 0 )", "-                            throw new TaskException( \"Response Timed-Out\" );", "-                        sb.append( (char)is.read() );", "+                        Thread.sleep( 250 );", "+                    if( input.available() == 0 )", "+                    {", "+                        throw new TaskException( \"Response Timed-Out\" );", "+                    }", "+                    sb.append( (char)input.read() );", "-                getLogger().info( sb.toString() );", "-            catch( TaskException be )", "-            {", "-                throw be;", "-            }", "-            catch( Exception e )", "-            {", "-                throw new TaskException( \"Error\", e );", "-            }", "+            getLogger().info( sb.toString() );", "+        catch( final TaskException te )", "+            throw te;", "+        catch( final Exception e )", "+            throw new TaskException( e.getMessage(), e );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6cf82b46f5294d3a2fd2869a0ee8e365", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/net/TelnetTask.java", "commitBeforeChange": "14ce1527da98295378a4539fc827a9e38998ec61", "commitAfterChange": "f735f5f44df9fa52266e7b8b7f2741c2b7560d22", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "         public void waitForString( String s, Integer timeout )", "signatureAfterChange": "      protected void doWaitForString( final InputStream input,                                     final String string,                                     final Integer timeout )         throws TaskException", "diff": ["-         */", "-        public void waitForString( String s, Integer timeout )", "+    protected void doWaitForString( final InputStream input,", "+                                    final String string,", "+                                    final Integer timeout )", "+        throws TaskException", "+    {", "+        try", "-            InputStream is = this.getInputStream();", "-            try", "+            final StringBuffer sb = new StringBuffer();", "+            if( timeout == null || timeout.intValue() == 0 )", "-                StringBuffer sb = new StringBuffer();", "-                if( timeout == null || timeout.intValue() == 0 )", "+                while( sb.toString().indexOf( string ) == -1 )", "-                    while( sb.toString().indexOf( s ) == -1 )", "-                    {", "-                        sb.append( (char)is.read() );", "-                    }", "+                    sb.append( (char)input.read() );", "-                else", "+            }", "+            else", "+            {", "+                final Calendar endTime = Calendar.getInstance();", "+                endTime.add( Calendar.SECOND, timeout.intValue() );", "+                while( sb.toString().indexOf( string ) == -1 )", "-                    Calendar endTime = Calendar.getInstance();", "-                    endTime.add( Calendar.SECOND, timeout.intValue() );", "-                    while( sb.toString().indexOf( s ) == -1 )", "+                    while( Calendar.getInstance().before( endTime ) &&", "+                        input.available() == 0 )", "-                        while( Calendar.getInstance().before( endTime ) &&", "-                            is.available() == 0 )", "-                        {", "-                            Thread.sleep( 250 );", "-                        }", "-                        if( is.available() == 0 )", "-                            throw new TaskException( \"Response Timed-Out\" );", "-                        sb.append( (char)is.read() );", "+                        Thread.sleep( 250 );", "+                    if( input.available() == 0 )", "+                    {", "+                        throw new TaskException( \"Response Timed-Out\" );", "+                    }", "+                    sb.append( (char)input.read() );", "-                getLogger().info( sb.toString() );", "-            catch( TaskException be )", "-            {", "-                throw be;", "-            }", "-            catch( Exception e )", "-            {", "-                throw new TaskException( \"Error\", e );", "-            }", "+            getLogger().info( sb.toString() );", "+        catch( final TaskException te )", "+            throw te;", "+        catch( final Exception e )", "+            throw new TaskException( e.getMessage(), e );"]}]}
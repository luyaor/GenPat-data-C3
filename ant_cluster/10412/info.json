{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd0e30453cf52670c628492c26408cee", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dacd6595da9b682698787282b26f6c6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteOn.java", "commitBeforeChange": "7f98652146940a5c7714f209979d74fe2092af34", "commitAfterChange": "61320f305f5ccb78963b3a9fe607f3505ec635e4", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      protected void runExec(Execute exe) throws BuildException", "diff": ["-", "-    public void execute() throws BuildException {", "-        if (command.getExecutable() == null) {", "-            throw new BuildException(\"no executable specified\", location);", "-        }", "-", "-        String[] orig = command.getCommandline();", "-        String[] cmd = new String[orig.length+1];", "-        System.arraycopy(orig, 0, cmd, 0, orig.length);", "+    protected void runExec(Execute exe) throws BuildException {", "+        try {", "-        Vector v = new Vector();", "-        for (int i=0; i<filesets.size(); i++) {", "-            FileSet fs = (FileSet) filesets.elementAt(i);", "-            DirectoryScanner ds = fs.getDirectoryScanner(project);", "-            String[] s = ds.getIncludedFiles();", "-            for (int j=0; j<s.length; j++) {", "-                v.addElement(new File(fs.getDir(), s[j]).getAbsolutePath());", "+            Vector v = new Vector();", "+            for (int i=0; i<filesets.size(); i++) {", "+                FileSet fs = (FileSet) filesets.elementAt(i);", "+                DirectoryScanner ds = fs.getDirectoryScanner(project);", "+                String[] s = ds.getIncludedFiles();", "+                for (int j=0; j<s.length; j++) {", "+                    v.addElement(new File(fs.getDir(), s[j]).getAbsolutePath());", "+                }", "-        }", "-        ", "-        String label = command.toString()+\" \";", "-        String[] environment = env.getVariables();", "-        for (int i=0; i<v.size(); i++) {", "-            try {", "-                // show the command", "-                String file = (String) v.elementAt(i);", "-                log(label+file, Project.MSG_VERBOSE);", "-                Execute exe = new Execute(createHandler(), createWatchdog());", "-                cmd[orig.length] = file;", "-                exe.setCommandline(cmd);", "-                exe.setEnvironment(environment);", "-                int err = exe.execute();", "+            String[] s = new String[v.size()];", "+            v.copyInto(s);", "+", "+            int err = -1;", "+            String myos = System.getProperty(\"os.name\");", "+", "+            // antRun.bat currently limits us to directory + executable ", "+            //                                             + 7 args", "+            if (parallel && ", "+                (myos.toLowerCase().indexOf(\"windows\") < 0 || s.length+cmdl.size() <= 8)", "+                ) {", "+                cmdl.addLine(s);", "+                exe.setCommandline(cmdl.getCommandline());", "+                err = exe.execute();", "-                        throw new BuildException(\"Exec returned: \"+err, location);", "+                        throw new BuildException(\"Exec returned: \"+err, ", "+                                                 location);", "-            } catch (IOException e) {", "-                throw new BuildException(\"Execute failed: \" + e, e, location);", "+", "+            } else {", "+                String[] cmd = new String[cmdl.size()+1];", "+                System.arraycopy(cmdl.getCommandline(), 0, cmd, 0, cmdl.size());", "+                for (int i=0; i<s.length; i++) {", "+                    cmd[cmdl.size()] = s[i];", "+                    exe.setCommandline(cmd);", "+                    err = exe.execute();", "+                    if (err != 0) {", "+                        if (failOnError) {", "+                            throw new BuildException(\"Exec returned: \"+err, ", "+                                                     location);", "+                        } else {", "+                            log(\"Result: \" + err, Project.MSG_ERR);", "+                        }", "+                    }", "+                }", "+", "+        } catch (IOException e) {", "+            throw new BuildException(\"Execute failed: \" + e, e, location);", "+        } finally {", "+            // close the output file if required", "+            logFlush();", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9546909820c1c4e3e8baa409ea1daca2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/metamata/MParse.java", "commitBeforeChange": "b5ad58c4d736b7f0a97aaa78b258dcceb9c21c89", "commitAfterChange": "7435b27b914764c3845b4821363ffeb4ddfe89cd", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 11, "signatureBeforeChange": "       public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-", "+    /** execute the command line */", "-", "-        if (target == null || !target.isFile()) {", "-            throw new BuildException(\"Invalid target: \" + target);", "+        try {", "+            setUp();", "+            ExecuteStreamHandler handler = createStreamHandler();", "+            _execute(handler);", "+        } finally {", "+            cleanUp();", "-        final File javaFile = new File(target.toString().substring(0,", "-                                                                   target.toString().indexOf(\".jj\")) + \".java\");", "+    }", "-        cmdl.createArgument().setValue(target.getAbsolutePath());", "-", "-        if (metahome == null || !metahome.isDirectory()) {", "-            throw new BuildException(\"Metamatahome not valid.\");", "-        }", "-        if (metaworkingdir == null || !metaworkingdir.isDirectory()) {", "-            throw new BuildException(\"Workingdir not set.\");", "-        }", "-        if (userclasspath == null) {", "-            throw new BuildException(\"Userclasspath not set.\");", "-        }", "-", "-        final Path classpath = cmdl.createClasspath(project);", "-        classpath.createPathElement().setLocation(new File(metahome.getAbsolutePath() + \"/lib/metamatadebug.jar\"));", "-        classpath.createPathElement().setLocation(new File(metahome.getAbsolutePath() + \"/lib/metamata.jar\"));", "-        classpath.createPathElement().setLocation(new File(metahome.getAbsolutePath() + \"/lib/JavaCC.zip\"));", "-", "-        final Commandline.Argument arg = cmdl.createVmArgument();", "-        arg.setValue(\"-mx140M\");", "-        arg.setValue(\"-Dmwp=\" + metaworkingdir.getAbsolutePath());", "-        arg.setValue(\"-Dmetamata.home=\" + metahome.getAbsolutePath());", "-        arg.setValue(\"-Dmetamata.java=java\");", "-        arg.setValue(\"-Dmetamata.java.options=-mx140M\");", "-        arg.setValue(\"-Dmetamata.java.options.classpath=-classpath\");", "-        arg.setValue(\"-Dmetamata.java.compiler=javac\");", "-        arg.setValue(\"-Dmetamata.java.compiler.options.0=-J-mx64M\");", "-        arg.setValue(\"-Dmetamata.java.compiler.options.classpath=-classpath\");", "-        arg.setValue(\"-Dmetamata.language=en\");", "-        arg.setValue(\"-Dmetamata.country=US\");", "-        arg.setValue(\"-Dmetamata.classpath=\" + userclasspath);", "-", "-        final Execute process = new Execute(new LogStreamHandler(this,", "-                                                                 Project.MSG_INFO,", "-                                                                 Project.MSG_INFO), null);", "-", "-            try {", "-                if (process.execute() != 0) {", "-                    throw new BuildException(\"MParse failed.\");", "-                }", "-            } finally {", "-                if (cleanupHack) {", "-                    final File oo393 = new File(javaFile.getParent(),", "-                                                \"OO393.class\");", "-                    if (oo393.exists()) {", "-                        project.log(\"Removing stale file: \" + oo393.getName());", "-                        oo393.delete();", "-                    }", "-                    final File sunjj = new File(javaFile.getParent(),", "-                                                \"__jj\" + javaFile.getName().substring(0,", "-                                                                                      javaFile.getName().indexOf(\".java\")) + \".sunjj\");", "-                    if (sunjj.exists()) {", "-                        project.log(\"Removing stale file: \" + sunjj.getName());", "-                        sunjj.delete();", "-                    }", "-                }", "-        catch (IOException e) {", "-            throw new BuildException(\"Failed to launch MParse: \" + e);"]}]}
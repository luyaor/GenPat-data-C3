{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5de9100a4e424b1f6416f1b8886f7afe", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b4f8a21890aa0ca0b25d73f034b8152", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "85875db138d8efbc050b5d34dbba19cc9c707db6", "commitAfterChange": "d53f5e961288efbb6a95db34d841b31d9571ea1b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void catFiles(File base, String[] files)", "signatureAfterChange": "     private void catFiles(File base, String[] files)", "diff": ["-        if (destinationFile == null) {", "+        if (encoding == null) {", "+            OutputStream os = null;", "+            InputStream is = null;", "-            // No destination file, dump to stdout via Ant's logging", "-            // interface, which requires that we assume the input data", "-            // is line-oriented. Generally, this is a safe assumption,", "-            // as most users won't (intentionally) attempt to cat", "-            // binary files to the console.", "-            for (int i = 0; i < len; i++) {", "+            try {", "-                BufferedReader reader = null;", "-                try {", "-                    if (encoding == null) {", "-                        // Use default encoding.", "-                        reader = new BufferedReader(", "-                            new FileReader(input[i])", "-                        );", "-                    } else {", "-                        // Use specified encoding.", "-                        reader = new BufferedReader(", "+                if (destinationFile == null) {", "+                    // Log using WARN so it displays in 'quiet' mode.", "+                    os = new LogOutputStream(this, Project.MSG_WARN);", "+                } else {", "+                    os = ", "+                        new FileOutputStream(destinationFile.getAbsolutePath(),", "+                                             append);", "+                    ", "+                    // This flag should only be recognized for the first", "+                    // file. In the context of a single 'cat', we always", "+                    // want to append.", "+                    append = true;", "+                }", "+            ", "+                for (int i = 0; i < len; i++) {", "+", "+                    // Make sure input != output.", "+                    if (destinationFile != null &&", "+                        destinationFile.getAbsolutePath().equals(input[i])) {", "+                        log(destinationFile.getName() + \": input file is \" + ", "+                            \"output file.\", Project.MSG_WARN);", "+                    }", "+", "+                    is = new FileInputStream(input[i]);", "+                    byte[] buffer = new byte[8096];", "+                    while (true) {", "+                        int bytesRead = is.read(buffer);", "+                        if (bytesRead == -1) { // EOF", "+                            break;", "+                        }", "+                        ", "+                        // Write the read data.", "+                        os.write(buffer, 0, bytesRead);", "+                    }", "+                    os.flush();", "+                    is.close();", "+                    is = null;", "+                }", "+            } catch (IOException ioex) {", "+                throw new BuildException(\"Error while concatenating: \"", "+                                         + ioex.getMessage(), ioex);", "+            } finally {", "+                if (is != null) {", "+                    try {", "+                        is.close();", "+                    } catch (Exception ignore) {}", "+                }", "+                if (os != null) {", "+                    try {", "+                        os.close();", "+                    } catch (Exception ignore) {}", "+                }", "+            }", "+", "+        } else { // user specified encoding, assume line oriented input", "+", "+            PrintWriter out = null;", "+            BufferedReader in = null;", "+", "+            try {", "+                OutputStream os = null;", "+                if (destinationFile == null) {", "+                    // Log using WARN so it displays in 'quiet' mode.", "+                    os = new LogOutputStream(this, Project.MSG_WARN);", "+                } else {", "+                    os = ", "+                        new FileOutputStream(destinationFile.getAbsolutePath(),", "+                                             append);", "+                    ", "+                    // This flag should only be recognized for the first", "+                    // file. In the context of a single 'cat', we always", "+                    // want to append.", "+                    append = true;", "+                }", "+                out = new PrintWriter(new OutputStreamWriter(os, encoding));", "+", "+                for (int i = 0; i < len; i++) {", "+                    in = new BufferedReader(", "-                    }", "-                    while ((line = reader.readLine()) != null) {", "+                    while ((line = in.readLine()) != null) {", "-                        log(line, Project.MSG_WARN);", "+                        out.println(line);", "-", "-                } catch (IOException ioe) {", "-                    throw new BuildException(\"Error while concatenating \" + ", "-                                             \"file.\", ioe);", "-                } finally {", "-                    // Close resources.", "-                    if (reader != null) {", "-                        try {", "-                            reader.close();", "-                        } catch (Exception ignore) {}", "-                    }", "+                    in.close();", "+                    in = null;", "-            }", "-", "-        } else {", "-", "-            // Use the provided file, making no assumptions about", "-            // whether or not the file is character or line-oriented.", "-            final int bufferSize = 1024;", "-            OutputStream os = null;", "-            try {", "-                os = new FileOutputStream(destinationFile.getAbsolutePath(), ", "-                                          append);", "-", "-                // This flag should only be recognized for the first", "-                // file. In the context of a single 'cat', we always", "-                // want to append.", "-                append = true;", "-", "-                throw new BuildException(\"Unable to open destination \" + ", "-                                         \"file.\", ioe);", "-            }", "-", "-            // Concatenate the file.", "-            try {", "-", "-                for (int i = 0; i < len; i++) {", "-", "-                    // Make sure input != output.", "-                    if (destinationFile.getAbsolutePath().equals(input[i])) {", "-                        log(destinationFile.getName() + \": input file is \" + ", "-                            \"output file.\", Project.MSG_WARN);", "-                    }", "-", "-                    InputStream is = null;", "-                    try {", "-                        is = new FileInputStream(input[i]);", "-                        byte[] buffer = new byte[bufferSize];", "-                        while (true) {", "-                            int bytesRead = is.read(buffer);", "-                            if (bytesRead == -1) { // EOF", "-                                break;", "-                            }", "-", "-                            // Write the read data.", "-                            os.write(buffer, 0, bytesRead);", "-                        }", "-", "-                        os.flush();", "-", "-                    } catch (IOException ioex) {", "-                        throw new BuildException(\"Error writing file.\", ioex);", "-                    } finally {", "-                        if (is != null) {", "-                            try {", "-                                is.close();", "-                            } catch (Exception ignore) {}", "-                        }", "-                    }", "-                }", "-", "+                throw new BuildException(\"Error while concatenating: \" ", "+                                         + ioe.getMessage(), ioe);", "-                if (os != null) {", "+                // Close resources.", "+                if (in != null) {", "-                        os.close();", "+                        in.close();", "+                    } catch (Exception ignore) {}", "+                }", "+                if (out != null) {", "+                    try {", "+                        out.close();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78e77ec560b45690f43d9dd7fcc79ebf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "96e6561e659a24f1e2122d884e83561327cb0f48", "commitAfterChange": "88dcebf815f27d9b16735745605342963870010e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private void catFiles(File base, String[] files)", "signatureAfterChange": "         public void setFile(File file)", "diff": ["-     */", "-    private void catFiles(File base, String[] files) {", "-", "-        // First, create a list of absolute paths for the input files.", "-        Vector inputFileNames = new Vector();", "-        for (int i = 0; i < files.length; i++) {", "-", "-            File current = new File(base, files[i]);", "-", "-            // Make sure the file exists. This will rarely fail when", "-            // using file sets, but it could be rather common when", "-            // using file lists.", "-            if (!current.exists()) {", "-                // File does not exist, log an error and continue.", "-                log(\"File \" + current + \" does not exist.\", ", "-                    Project.MSG_ERR);", "-", "-            inputFileNames.addElement(current.getAbsolutePath());", "-        final int len = inputFileNames.size();", "-        if (len == 0) {", "-            log(\"Warning: Could not find any of the files specified \" +", "-                \"in concat task.\", Project.MSG_WARN);", "-            return;", "-        }", "-        String[] input = new String[len];", "-        inputFileNames.copyInto(input);", "-        // Next, perform the concatenation.", "-        if (encoding == null) {", "-            OutputStream os = null;", "-            InputStream is = null;", "-            try {", "-                if (destinationFile == null) {", "-                    // Log using WARN so it displays in 'quiet' mode.", "-                    os = new LogOutputStream(this, Project.MSG_WARN);", "-                    os = ", "-                        new FileOutputStream(destinationFile.getAbsolutePath(),", "-                                             append);", "-                    ", "-                    // This flag should only be recognized for the first", "-                    // file. In the context of a single 'cat', we always", "-                    // want to append.", "-                    append = true;", "-                }", "-            ", "-                for (int i = 0; i < len; i++) {", "-", "-                    // Make sure input != output.", "-                    if (destinationFile != null &&", "-                        destinationFile.getAbsolutePath().equals(input[i])) {", "-                        throw new BuildException(\"Input file \\\"\" ", "-                            + destinationFile.getName() ", "-                            + \"\\\" is the same as the output file.\");", "-                    }", "-", "-                    is = new FileInputStream(input[i]);", "-                    byte[] buffer = new byte[8192];", "-                    while (true) {", "-                        int bytesRead = is.read(buffer);", "-                        if (bytesRead == -1) { // EOF", "-                            break;", "-                        }", "-                        ", "-                        // Write the read data.", "-                        os.write(buffer, 0, bytesRead);", "-                    }", "-                    os.flush();", "-                    is.close();", "-                    is = null;", "-                }", "-            } catch (IOException ioex) {", "-                throw new BuildException(\"Error while concatenating: \"", "-                                         + ioex.getMessage(), ioex);", "-            } finally {", "-                if (is != null) {", "-                    try {", "-                        is.close();", "-                    } catch (Exception ignore) {}", "-                }", "-                if (os != null) {", "-                    try {", "-                        os.close();", "-                    } catch (Exception ignore) {}", "-        } else { // user specified encoding", "-            Writer out = null;", "-            BufferedReader in = null;", "-", "-            try {", "-                if (destinationFile == null) {", "-                    // Log using WARN so it displays in 'quiet' mode.", "-                    out = new OutputStreamWriter(", "-                              new LogOutputStream(this, Project.MSG_WARN));", "-                    out = new OutputStreamWriter(", "-                              new FileOutputStream(destinationFile", "-                                                   .getAbsolutePath(),", "-                                                   append),", "-                              encoding);", "-                    ", "-                    // This flag should only be recognized for the first", "-                    // file. In the context of a single 'cat', we always", "-                    // want to append.", "-                    append = true;", "-                for (int i = 0; i < len; i++) {", "-                    in = new BufferedReader(", "-                            new InputStreamReader(new FileInputStream(input[i]), ", "-                                encoding));", "-                    String line;", "-                    char[] buffer = new char[4096];", "-                    while (true) {", "-                        int charsRead = in.read(buffer);", "-                        if (charsRead == -1) { // EOF", "-                            break;", "-                        }", "-                        ", "-                        // Write the read data.", "-                        out.write(buffer, 0, charsRead);", "-                    }", "-                    out.flush();", "-                    in.close();", "-                    in = null;", "-                }", "-            } catch (IOException ioe) {", "-                throw new BuildException(\"Error while concatenating: \" ", "-                                         + ioe.getMessage(), ioe);", "-            } finally {", "-                // Close resources.", "-                if (in != null) {", "-                    try {", "-                        in.close();", "-                    } catch (Exception ignore) {}", "-                }", "-                if (out != null) {", "-                    try {", "-                        out.close();", "-                    } catch (Exception ignore) {}", "-                }", "+         */", "+        public void setFile(File file) {", "+            // non-existing files are not allowed", "+            if (!file.exists()) {", "+                throw new BuildException(\"File \" + file + \" does not exist.\");", "+            }", "+", "+            BufferedReader reader = null;", "+            try {", "+                reader = new BufferedReader(new FileReader(file));", "+                value = fileUtils.readFully(reader);", "+            } catch (IOException ex) {", "+                throw new BuildException(ex);", "+            } finally {", "+                if (reader != null) {", "+                    try {reader.close();} catch (Throwable t) {}", "+                }", "+            }", "+        }"]}]}
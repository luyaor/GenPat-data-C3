{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3c237ccc395937aded0d9455b3a63c4d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08e1c0fa82bcca6c8bacff45b4d44353", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/DOMElementWriter.java", "commitBeforeChange": "a0b111116d82b1ab530e3237b9b1706455052771", "commitAfterChange": "b7b59490a82c8b2df3c580a2f2502cc28b8e75d8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void closeElement(Element element, Writer out, int indent,                              String indentWith, boolean hasChildren)         throws IOException", "signatureAfterChange": "     public void closeElement(Element element, Writer out, int indent,                              String indentWith, boolean hasChildren)         throws IOException", "diff": ["+        if (namespacePolicy.qualifyElements", "+            || namespacePolicy.qualifyAttributes) {", "+            String prefix =", "+                (String) nsPrefixMap.get(element.getNamespaceURI());", "+            if (prefix != null && !\"\".equals(prefix)) {", "+                out.write(prefix);", "+                out.write(\":\");", "+            }", "+            removeNSDefinitions(element);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "368787ca70487593810906e4739f21d1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/depend/Depend.java", "commitBeforeChange": "2bb82ea3965603288bc8defcacdf2dcb1e549fe2", "commitAfterChange": "798eedafd9e38fb45daae1aa139ca40b7b23f493", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 7, "signatureBeforeChange": "               private void deleteAllAffectedFiles()", "signatureAfterChange": "          private int deleteAllAffectedFiles()", "diff": ["-    ", "-    private void deleteAllAffectedFiles() {", "+    private int deleteAllAffectedFiles() {", "+        int count = 0;", "-            deleteAffectedFiles(className);", "-        }            ", "+            count += deleteAffectedFiles(className);", "+            ClassFileInfo classInfo = (ClassFileInfo)classFileInfoMap.get(className);", "+            if (classInfo != null && classInfo.absoluteFile.exists()) {", "+                classInfo.absoluteFile.delete();", "+                count++;", "+            }", "+        }", "+        return count;            "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4ca4f465702b840b19d12c8431f1f07", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/DescriptorHandler.java", "commitBeforeChange": "cea87ef983a6ea3fc23cdd6a0edd3e6f12061e02", "commitAfterChange": "df8f6d006fa97e72701588efbcc89f5964da425f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public InputSource resolveEntity(String publicId, String systemId)         throws SAXException", "signatureAfterChange": "      public InputSource resolveEntity(String publicId, String systemId)         throws SAXException", "diff": ["-            if( is != null ) {", "+            if (is != null) {", "-        ", "+", "+        URL dtdUrl = (URL) urlDTDs.get(publicId);", "+        if ( dtdUrl != null ) {", "+            try {", "+                InputStream is = dtdUrl.openStream();", "+                owningTask.log(\"Resolved \" + publicId + \" to url \" + dtdUrl, Project.MSG_VERBOSE);", "+                return new InputSource(is);", "+            } catch ( IOException ioe) {", "+                //ignore", "+            }            ", "+        } ", "+                "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f36f7d12105c5f88ee9e4590d48501dd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SubAnt.java", "commitBeforeChange": "84bb508794b3d1fad60ad8b3b835b942310eb86d", "commitAfterChange": "ea42c65bec22316c5ba3c3096b8346e4a7eed6b8", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute()                 throws BuildException", "signatureAfterChange": "     public void execute()                 throws BuildException", "diff": ["+            boolean doit=true;", "+            File directory=null;", "-                file = new File(file, antfile);", "+                if (genericantfile != null) {", "+                    directory = file;", "+                    file = genericantfile;", "+                }", "+                else {", "+                    file = new File(file, antfile);", "+                    boolean fileFound=file.exists();", "+                    if(ignoreMissingBuildFile && !fileFound) {", "+                        log(\"Build file '\" + file + \"' not found.\", Project.MSG_INFO);", "+                        doit=false;", "+                    }", "+", "+                }", "-            execute(file);", "+            if (doit) {", "+                execute(file, directory);", "+            }"]}]}
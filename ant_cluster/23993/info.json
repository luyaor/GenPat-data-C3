{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6603ab53bae16ab4c9b2424e3763de3b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46581c3623cd5766d4035a4e0d0d084b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/filterreaders/src/main/org/apache/tools/ant/filters/ClassConstants.java", "commitBeforeChange": "131519b962655478e6cf36802ace9d0f702aa823", "commitAfterChange": "f9bcdd7713370a79393e749e0e55fada438faa4a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public final int read() throws IOException", "signatureAfterChange": "     public final int read() throws IOException", "diff": ["-                final StringBuffer sb = JavaClassHelper.getConstants(bytes);", "-                if (sb.length() > 0) {", "-                    queuedData = sb.toString();", "-                    return read();", "+                try {", "+                    final Class javaClassHelper =", "+                        Class.forName(JAVA_CLASS_HELPER);", "+                    if (javaClassHelper != null) {", "+                        final Class params[] = {", "+                            byte[].class", "+                        };", "+                        final Method getConstants =", "+                            javaClassHelper.getMethod(\"getConstants\", params);", "+                        final Object[] args = {", "+                            bytes", "+                        };", "+                        // getConstants is a staic method, no need to", "+                        // pass in the object", "+                        final StringBuffer sb = (StringBuffer)", "+                                getConstants.invoke(null, args);", "+                        if (sb.length() > 0) {", "+                            queuedData = sb.toString();", "+                            return read();", "+                        }", "+                    }", "+                } catch (ClassNotFoundException cnfe) {", "+                    throw new IOException(cnfe.getMessage());", "+                } catch (NoSuchMethodException nsme) {", "+                    throw new IOException(nsme.getMessage());", "+                } catch (IllegalAccessException iae) {", "+                    throw new IOException(iae.getMessage());", "+                } catch (IllegalArgumentException iarge) {", "+                    throw new IOException(iarge.getMessage());", "+                } catch (InvocationTargetException ite) {", "+                    throw new IOException(ite.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72d1f7cbb9ad8db116ee02a77ed24850", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/antlib/src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "6540a295cd786c80c28c14f6c544aa1d64ab3778", "commitAfterChange": "5cdfabc038e26f67080037ea0c7ad6ab284d821c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      private IntrospectionHelper(final Class bean)", "signatureAfterChange": "     private IntrospectionHelper(final Class bean)", "diff": ["+     */", "-        for (int i=0; i<methods.length; i++) {", "+        for (int i = 0; i < methods.length; i++) {", "-                && args.length == 1 &&", "-                (", "-                 (", "-                  \"setLocation\".equals(name) && org.apache.tools.ant.Location.class.equals(args[0])", "-                  ) || (", "-                   \"setTaskType\".equals(name) && java.lang.String.class.equals(args[0])", "-                  )", "-                 )) {", "+                 && args.length == 1 && isHiddenSetMethod(name, args[0])) {", "-//              if (org.apache.tools.ant.TaskContainer.class.isAssignableFrom(bean)", "-//                  && args.length == 1 && \"addTask\".equals(name)", "-//                  && org.apache.tools.ant.Task.class.equals(args[0])) {", "-//                  continue;", "-//              }", "+            if (org.apache.tools.ant.TaskContainer.class.isAssignableFrom(bean)", "+                && args.length == 1 && \"addTask\".equals(name)", "+                && org.apache.tools.ant.Task.class.equals(args[0])) {", "+                continue;", "+            }", "-                AttributeSetter as = createAttributeSetter(m, args[0]);", "+                AttributeSetter as = createAttributeSetter(m, args[0], propName);", "-                                throws InvocationTargetException, ", "-\t\t\t\t       IllegalAccessException, ", "-\t\t\t\t       InstantiationException {", "+                                throws InvocationTargetException, IllegalAccessException, InstantiationException {", "-                                throws InvocationTargetException, ", "-\t\t\t\t       IllegalAccessException, ", "-\t\t\t\t       InstantiationException {", "+                                throws InvocationTargetException, IllegalAccessException, InstantiationException {", "-                                throws InvocationTargetException, ", "-\t\t\t\t       IllegalAccessException, ", "-\t\t\t\t       InstantiationException {", "+                                throws InvocationTargetException, IllegalAccessException, InstantiationException {"]}]}
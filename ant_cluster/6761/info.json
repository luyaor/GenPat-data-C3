{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4f950681095368f305a18d92e83724c9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60513376bc17ccb6b559eb16b30bae77", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/acs/ACSTreeNodeElement.java", "commitBeforeChange": "a04027cae372928a9f757764f38c28f61e128412", "commitAfterChange": "0c852dba516bf705d62a2d53c47a7b1b1cdd5048", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     private List getCache()", "signatureAfterChange": "     private List getCache()", "diff": ["-            for(int i = 0; i < getLength(); i++) {", "-                if(item(i) instanceof TreeNode) {", "-                    _treeNodeCache.add(item(i));", "+            // XXX this crazy casting is to get around an", "+            // inconsistency between jikes and javac whereby", "+            // the call without this cast when compiled with", "+            // jikes causes an IllegalAccessException", "+            // because the implementation of getLength() and", "+            // item() are actually in a package only class", "+            // in the Sun implementation classes.", "+            int len = ((NodeList)this).getLength();", "+", "+            for(int i = 0; i < len; i++) {", "+                Object n = ((NodeList)this).item(i);", "+", "+                if(n instanceof TreeNode) {", "+                    _treeNodeCache.add(n);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e795475cec838da0a1de7d368010d171", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/GUnzip.java", "commitBeforeChange": "b977b55da647e2c09596065ab1e2b6c7dd2820ef", "commitAfterChange": "30c0d31cc4e6eba6ffc9ead619b6f9f1d5181af3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected void extract()", "signatureAfterChange": "     protected void extract()", "diff": ["-                if (fis != null) {", "-                    try {", "-                        fis.close();", "-                    } catch (IOException ioex) {", "-                        //ignore", "-                    }", "-                }", "-                if (out != null) {", "-                    try {", "-                        out.close();", "-                    } catch (IOException ioex) {", "-                        //ignore", "-                    }", "-                }", "-                if (zIn != null) {", "-                    try {", "-                        zIn.close();", "-                    } catch (IOException ioex) {", "-                        //ignore", "-                    }", "-                }", "+                FileUtils.close(fis);", "+                FileUtils.close(out);", "+                FileUtils.close(zIn);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efea75892a2b420049a903b7aefe6ec6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/Rpm.java", "commitBeforeChange": "bec41871b591248271815886afd1c0a318ee025e", "commitAfterChange": "76cb3597bd22b5ea0907a5851d30dd3cccadd96b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            exe.execute();", "+            int returncode = exe.execute();", "+            if (returncode != 0) {", "+                throw new BuildException(\"'\" +", "+                        toExecute.getExecutable() +", "+                        \"' failed with exit code \"+returncode);", "+            }", "-            if (output != null) {", "-                try {", "-                    outputstream.close();", "-                } catch (IOException e) {", "-                    // ignore any secondary error", "-                }", "-            }", "-            if (error != null) {", "-                try {", "-                    errorstream.close();", "-                } catch (IOException e) {", "-                    // ignore any secondary error", "-                }", "-            }", "+            FileUtils.close(outputstream);", "+            FileUtils.close(errorstream);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe627cbdf1b7069f458973236c2278f9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "00ec1c435af8d15b42cb779373026ceedea92e59", "commitAfterChange": "3a35c7d914d8b5a1f203561ae6f89afb5d2b80ec", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                for (int j = 0 ; j < srcFiles.length ; j++) {", "+                for (int j = 0; j < srcFiles.length; j++) {", "-                    } catch (SQLException ex) {}", "+                    } catch (SQLException ex) {", "+                        // ignore", "+                    }", "-                    } catch (SQLException ex) {}", "+                    } catch (SQLException ex) {", "+                        // ignore", "+                    }", "-                } catch (SQLException e) {}", "+                } catch (SQLException ex) {", "+                    // ignore", "+                }", "-            log(goodSql + \" of \" + totalSql +", "-                \" SQL statements executed successfully\");", "+            log(goodSql + \" of \" + totalSql", "+                + \" SQL statements executed successfully\");"]}]}
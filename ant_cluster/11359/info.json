{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "76889a7e54bc5d89cf9d21d81cdc7f61", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b52e2c3b786a80f0066c06b32e3b617", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/jdepend/JDependTask.java", "commitBeforeChange": "eba9a3c2d98d12180af9eca571480f1d58af6361", "commitAfterChange": "a94ef2aa3bc2c2129b8cbe32eb41ef4f21023284", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     public int executeAsForked(CommandlineJava commandline,                                ExecuteWatchdog watchdog) throws BuildException", "signatureAfterChange": "     public int executeAsForked(CommandlineJava commandline,                                ExecuteWatchdog watchdog) throws BuildException", "diff": ["-        // This is deprecated - use classespath in the future", "-        String[] sourcesPath = getSourcespath().list();", "-        for (int i = 0; i < sourcesPath.length; i++) {", "-            File f = new File(sourcesPath[i]);", "+            // This is deprecated - use classespath in the future", "+            String[] sourcesPath = getSourcespath().list();", "+            for (int i = 0; i < sourcesPath.length; i++) {", "+                File f = new File(sourcesPath[i]);", "-            // not necessary as JDepend would fail, but why loose some time?", "-            if (!f.exists() || !f.isDirectory()) {", "-                throw new BuildException(\"\\\"\" + f.getPath() + \"\\\" does not \"", "-                                         + \"represent a valid directory. JDepend would fail.\");", "+                // not necessary as JDepend would fail, but why loose", "+                // some time?", "+                if (!f.exists() || !f.isDirectory()) {", "+                    throw new BuildException(\"\\\"\" + f.getPath() ", "+                                             + \"\\\" does not represent a valid\"", "+                                             + \" directory. JDepend would\"", "+                                             + \" fail.\");", "+                }", "+                commandline.createArgument().setValue(f.getPath());", "-            commandline.createArgument().setValue(f.getPath());", "-        }", "-        // This is the new way - use classespath - code is the same for now", "-        String[] classesPath = getClassespath().list();", "-        for (int i = 0; i < classesPath.length; i++) {", "-            File f = new File(classesPath[i]);", "-            // not necessary as JDepend would fail, but why loose some time?", "-            if (!f.exists() || !f.isDirectory()) {", "-                throw new BuildException(\"\\\"\" + f.getPath() + \"\\\" does not \"", "-                                         + \"represent a valid directory. JDepend would fail.\");", "+            // This is the new way - use classespath - code is the", "+            // same for now", "+            String[] classesPath = getClassespath().list();", "+            for (int i = 0; i < classesPath.length; i++) {", "+                File f = new File(classesPath[i]);", "+                // not necessary as JDepend would fail, but why loose", "+                // some time?", "+                if (!f.exists() || !f.isDirectory()) {", "+                    throw new BuildException(\"\\\"\" + f.getPath() ", "+                                             + \"\\\" does not represent a valid\"", "+                                             + \" directory. JDepend would\"", "+                                             + \" fail.\");", "+                }", "+                commandline.createArgument().setValue(f.getPath());", "-            commandline.createArgument().setValue(f.getPath());", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "767ab0a27bcbeb06ed237daacf7c670e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/unix/Symlink.java", "commitBeforeChange": "1331049054d53ef94674a4966e7000bbf8baf6be", "commitAfterChange": "472c46251f1e0f3c7e68528f23617f21b80366cb", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public static void deleteSymlink(File linkfil, Task task)         throws IOException", "signatureAfterChange": "     public static void deleteSymlink(File linkfil, Task task)         throws IOException", "diff": ["-        // rename the resource, thus breaking the link:", "-        File temp = FILE_UTILS.createTempFile(\"symlink\", \".tmp\",", "-                                              canfil.getParentFile(), false,", "-                                              false);", "+            // rename the resource, thus breaking the link:", "+            File temp = FILE_UTILS.createTempFile(\"symlink\", \".tmp\",", "+                                                  canfil.getParentFile(), false,", "+                                                  false);", "-        if (FILE_UTILS.isLeadingPath(canfil, linkfil)) {", "-            // link points to a parent directory, renaming the parent", "-            // will rename the file", "-            linkfil = new File(temp,", "-                               FILE_UTILS.removeLeadingPath(canfil, linkfil));", "-        }", "+            if (FILE_UTILS.isLeadingPath(canfil, linkfil)) {", "+                // link points to a parent directory, renaming the parent", "+                // will rename the file", "+                linkfil = new File(temp,", "+                                   FILE_UTILS.removeLeadingPath(canfil,", "+                                                                linkfil));", "+            }", "-        boolean renamedTarget = false;", "-        try {", "+            boolean renamedTarget = false;", "-                FILE_UTILS.rename(canfil, temp);", "-                renamedTarget = true;", "-            } catch (IOException e) {", "-                throw new IOException(", "-                    \"Couldn't rename resource when attempting to delete \"", "-                    + linkfil);", "-            }", "-            // delete the (now) broken link:", "-            if (!linkfil.delete()) {", "-                throw new IOException(\"Couldn't delete symlink: \" + linkfil", "-                    + \" (was it a real file? is this not a UNIX system?)\");", "-            }", "-        } finally {", "-            if (renamedTarget) {", "-                // return the resource to its original name:", "-                    FILE_UTILS.rename(temp, canfil);", "+                    FILE_UTILS.rename(canfil, temp);", "+                    renamedTarget = true;", "-                    throw new IOException(\"Couldn't return resource \" + temp", "-                                          + \" to its original name: \"", "-                                          + canfil.getAbsolutePath()", "-                                          + \"\\n THE RESOURCE'S NAME ON DISK HAS \"", "-                                          + \"BEEN CHANGED BY THIS ERROR!\\n\");", "+                    throw new IOException(\"Couldn't rename resource when \"", "+                                          + \"attempting to delete \" + linkfil);", "+                }", "+                // delete the (now) broken link:", "+                if (!linkfil.delete()) {", "+                    throw new IOException(\"Couldn't delete symlink: \"", "+                                          + linkfil", "+                                          + \" (was it a real file? is this \"", "+                                          + \"not a UNIX system?)\");", "+                }", "+            } finally {", "+                if (renamedTarget) {", "+                    // return the resource to its original name:", "+                    try {", "+                        FILE_UTILS.rename(temp, canfil);", "+                    } catch (IOException e) {", "+                        throw new IOException(\"Couldn't return resource \"", "+                                              + temp", "+                                              + \" to its original name: \"", "+                                              + canfil.getAbsolutePath()", "+                                              + \"\\n THE RESOURCE'S NAME ON DISK\"", "+                                              + \" HAS BEEN CHANGED BY THIS\"", "+                                              + \" ERROR!\\n\");", "+                    }", "-        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7aeb4054e922ddd710cec2c202951bba", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f214b5ca9574af04abad2940536923e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/helper/ProjectHelper2.java", "commitBeforeChange": "8016bd8d2869a25c7736b6e0b93ac9d50376b77b", "commitAfterChange": "13941782fe873cc353e3dd1f25649a401d826952", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void parse(Project project, Object source) throws BuildException", "signatureAfterChange": "     public void parse(Project project, Object source) throws BuildException", "diff": ["+", "+            // resolve extensionOf attributes", "+            for (Iterator i = getExtensionStack().iterator(); i.hasNext(); ) {", "+                String[] extensionInfo = (String[]) i.next();", "+                String tgName = extensionInfo[0];", "+                String name = extensionInfo[1];", "+                Hashtable projectTargets = project.getTargets();", "+                if (!projectTargets.containsKey(tgName)) {", "+                    throw new BuildException(\"can't add target \"", "+                                             + name + \" to extension-point \"", "+                                             + tgName", "+                                             + \" because the extension-point\"", "+                                             + \" is unknown.\");", "+                }", "+                Target t = (Target) projectTargets.get(tgName);", "+                if (!(t instanceof ExtensionPoint)) {", "+                    throw new BuildException(\"referenced target \"", "+                                             + tgName", "+                                             + \" is not an extension-point\");", "+                }", "+                t.addDependency(name);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0866a0c906d6546e2e0f5d27d878891", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XSLTProcess.java", "commitBeforeChange": "dc2e0846ac0b71caf2bfc3e6b24042c87062ebc8", "commitAfterChange": "1e57e83036edb25a9106c8eb30bbb0183a6f44ed", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 18, "signatureBeforeChange": "          protected XSLTLiaison getLiaison()", "signatureAfterChange": "          protected XSLTLiaison getLiaison()", "diff": ["-            try {", "-                setProcessor(\"trax\");", "-            } catch (Throwable e1) {", "+            if (processor != null) {", "-                    setProcessor(\"xslp\");", "-                } catch (Throwable e2) {", "+                    resolveProcessor(processor);", "+                } catch (Exception e) {", "+                    throw new BuildException(e);", "+                }", "+            } else {", "+                try {", "+                    resolveProcessor(\"trax\");", "+                } catch (Throwable e1) {", "-                        setProcessor(\"xalan\");", "-                    } catch (Throwable e3) {", "-                        e2.printStackTrace();", "-                        e3.printStackTrace();", "-                        throw new BuildException(e1);", "+                        resolveProcessor(\"xslp\");", "+                    } catch (Throwable e2) {", "+                        try {", "+                            resolveProcessor(\"xalan\");", "+                        } catch (Throwable e3) {", "+                            e3.printStackTrace();", "+                            e2.printStackTrace();", "+                            throw new BuildException(e1);", "+                        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0e1c1fcbbd18a1f7c988f02f9d56472", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Target.java", "commitBeforeChange": "2077f6716fa502957d606dc27630d3a618362620", "commitAfterChange": "08bdfe8f1b628bdf367a1955f894ec42085de840", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public static List parseDepends(String depends,                                                 String targetName)", "signatureAfterChange": "      public static List parseDepends(String depends,                                                 String targetName,                                                 String attributeName)", "diff": ["-                                                String targetName) {", "+                                                String targetName,", "+                                                String attributeName) {", "-                    throw new BuildException(\"Syntax Error: depends \"", "-                                             + \"attribute of target \\\"\"", "+                    throw new BuildException(\"Syntax Error: \"", "+                                             + attributeName", "+                                             + \" attribute of target \\\"\"", "-                                             + \"\\\" has an empty string as \"", "-                                             + \"dependency.\");", "+                                             + \"\\\" contains an empty string.\");", "-                        throw new BuildException(\"Syntax Error: Depend \"", "-                                                 + \"attribute for target \\\"\"", "+                        throw new BuildException(\"Syntax Error: \"", "+                                                 + attributeName", "+                                                 + \" attribute for target \\\"\""]}]}
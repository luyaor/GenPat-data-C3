{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b39184bcb6918db75cabb60d1e0c567", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c5bc1f8df9850f98c3aea5e8a50026a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/modules/edit/DependentTargetChooser.java", "commitBeforeChange": "2ff201801b557593afe6cf9dcd4d4c4f4da65b39", "commitAfterChange": "cfa93603e73e635d31be01cdb31dc9959a5ea35c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private JPanel getSelectionPanel()", "signatureAfterChange": "         public int getColumnCount()", "diff": ["-     */", "-    private JPanel getSelectionPanel() {", "-        if (_selectionPanel == null) {", "-            _selectionPanel = new JPanel();", "-            _selectionPanel.setLayout(new GridBagLayout());", "-            ", "-            // LEFT Table", "-            JScrollPane srcSP = new JScrollPane();", "-            srcSP.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);", "-            srcSP.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);", "-            _srcTable = createTargetsTable();", "-            srcSP.setViewportView(_srcTable);", "-            ", "-            GridBagConstraints srcSPConstr = new GridBagConstraints();", "-            srcSPConstr.fill = GridBagConstraints.BOTH;", "-            srcSPConstr.anchor = GridBagConstraints.CENTER;", "-            srcSPConstr.gridx = 0; srcSPConstr.gridy = 0; ", "-            srcSPConstr.weightx = 1.0; srcSPConstr.weighty = 2.0; ", "-            srcSPConstr.gridwidth = 1; srcSPConstr.gridheight = 2;", "-            srcSPConstr.insets = new Insets(5,5,0,5);", "-            _selectionPanel.add(srcSP, srcSPConstr);", "-            ", "-            // Append Button", "-            _append = new JButton();", "-            _append.setIcon(new ImageIcon(getClass().getResource(\"/org/apache/tools/ant/gui/resources/enter.gif\")));", "-            _append.setPreferredSize(new Dimension(28, 28));", "-            _append.setMaximumSize(new Dimension(28, 28));", "-            _append.setMinimumSize(new Dimension(28, 28));", "-            _append.addActionListener(_handler);", "-            ", "-            GridBagConstraints appendConstr = new GridBagConstraints();", "-            appendConstr.fill = GridBagConstraints.NONE;", "-            appendConstr.anchor = GridBagConstraints.SOUTH;", "-            appendConstr.gridx = 1; appendConstr.gridy = 0; ", "-            appendConstr.weightx = 0.0; appendConstr.weighty = 1.0; ", "-            appendConstr.gridwidth = 1; appendConstr.gridheight = 1;", "-            appendConstr.insets = new Insets(0,0,2,0);", "-            _selectionPanel.add(_append, appendConstr);", "-", "-            // Remove Button", "-            _remove = new JButton();", "-            _remove.setIcon(new ImageIcon(getClass().getResource(\"/org/apache/tools/ant/gui/resources/exit.gif\")));", "-            _remove.setPreferredSize(new Dimension(28, 28));", "-            _remove.setMaximumSize(new Dimension(28, 28));", "-            _remove.setMinimumSize(new Dimension(28, 28));", "-            _remove.addActionListener(_handler);", "-            GridBagConstraints removeConstr = new GridBagConstraints();", "-            removeConstr.fill = GridBagConstraints.NONE;", "-            removeConstr.anchor = GridBagConstraints.NORTH;", "-            removeConstr.gridx = 1; removeConstr.gridy = 1; ", "-            removeConstr.weightx = 0.0; removeConstr.weighty = 1.0; ", "-            removeConstr.gridwidth = 1; removeConstr.gridheight = 1;", "-            removeConstr.insets = new Insets(3,0,0,0);", "-            _selectionPanel.add(_remove, removeConstr);", "-            ", "-            // RIGHT Table", "-            JScrollPane dstSP = new JScrollPane();", "-            dstSP.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);", "-            dstSP.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);", "-            _dstTable = createTargetsTable();", "-            dstSP.setViewportView(_dstTable);", "-", "-            GridBagConstraints dstSPConstr = new GridBagConstraints();", "-            dstSPConstr.fill = GridBagConstraints.BOTH;", "-            dstSPConstr.anchor = GridBagConstraints.CENTER;", "-            dstSPConstr.gridx = 2; dstSPConstr.gridy = 0; ", "-            dstSPConstr.weightx = 1.0; dstSPConstr.weighty = 2.0; ", "-            dstSPConstr.gridwidth = 1; dstSPConstr.gridheight = 2;", "-            dstSPConstr.insets = new Insets(5,5,0,5);", "-            _selectionPanel.add(dstSP, dstSPConstr);", "-", "-            // Move Up Button", "-            _moveUp = new JButton();", "-            _moveUp.setIcon(new ImageIcon(getClass().getResource(\"/org/apache/tools/ant/gui/resources/up.gif\")));", "-            _moveUp.setPreferredSize(new Dimension(28, 28));", "-            _moveUp.setMaximumSize(new Dimension(28, 28));", "-            _moveUp.setMinimumSize(new Dimension(28, 28));", "-            _moveUp.addActionListener(_handler);", "-            GridBagConstraints moveUpConstr = new GridBagConstraints();", "-            moveUpConstr.fill = GridBagConstraints.NONE;", "-            moveUpConstr.anchor = GridBagConstraints.CENTER;", "-            moveUpConstr.gridx = 3; moveUpConstr.gridy = 0; ", "-            moveUpConstr.weightx = 0.0; moveUpConstr.weighty = 1.0; ", "-            moveUpConstr.gridwidth = 1; moveUpConstr.gridheight = 1;", "-            moveUpConstr.insets = new Insets(0,0,0,5);", "-            _selectionPanel.add(_moveUp, moveUpConstr);", "-", "-            // Move Up Button", "-            _moveDown = new JButton();", "-            _moveDown.setIcon(new ImageIcon(getClass().getResource(\"/org/apache/tools/ant/gui/resources/down.gif\")));", "-            _moveDown.setPreferredSize(new Dimension(28, 28));", "-            _moveDown.setMaximumSize(new Dimension(28, 28));", "-            _moveDown.setMinimumSize(new Dimension(28, 28));", "-            _moveDown.addActionListener(_handler);", "-            GridBagConstraints moveDownConstr = new GridBagConstraints();", "-            moveDownConstr.fill = GridBagConstraints.NONE;", "-            moveDownConstr.anchor = GridBagConstraints.CENTER;", "-            moveDownConstr.gridx = 3; moveDownConstr.gridy = 1; ", "-            moveDownConstr.weightx = 0.0; moveDownConstr.weighty = 1.0; ", "-            moveDownConstr.gridwidth = 1; moveDownConstr.gridheight = 1;", "-            moveDownConstr.insets = new Insets(0,0,0,5);", "-            _selectionPanel.add(_moveDown, moveDownConstr);", "-        }", "-        return _selectionPanel;", "-    }", "+         */", "+        public int getColumnCount() {", "+            return 3;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d6648077d8f963d1715147cc7110944", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ResourceUtils.java", "commitBeforeChange": "f079bd6d5cb0392dc5ff70eed3620e795ef21153", "commitAfterChange": "0e01584f3e42f2e116d8601b3d5198d5ac80c35b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public static void copyResource(Resource source, Resource dest,                             FilterSetCollection filters, Vector filterChains,                             boolean overwrite, boolean preserveLastModified,                                     boolean append,                                     String inputEncoding, String outputEncoding,                                     Project project, boolean force)         throws IOException", "signatureAfterChange": "     public static void copyResource(Resource source, Resource dest,                             FilterSetCollection filters, Vector filterChains,                             boolean overwrite, boolean preserveLastModified,                                     boolean append,                                     String inputEncoding, String outputEncoding,                                     Project project, boolean force)         throws IOException", "diff": ["-             effectiveInputEncoding = ((StringResource) source).getEncoding();", "+            effectiveInputEncoding = ((StringResource) source).getEncoding();", "-            BufferedReader in = null;", "-            BufferedWriter out = null;", "-            try {", "-                InputStreamReader isr = null;", "-                if (effectiveInputEncoding == null) {", "-                    isr = new InputStreamReader(source.getInputStream());", "-                } else {", "-                    isr = new InputStreamReader(source.getInputStream(),", "-                                                effectiveInputEncoding);", "-                }", "-                in = new BufferedReader(isr);", "-                OutputStream os = getOutputStream(dest, append, project);", "-                OutputStreamWriter osw;", "-                if (outputEncoding == null) {", "-                    osw = new OutputStreamWriter(os);", "-                } else {", "-                    osw = new OutputStreamWriter(os, outputEncoding);", "-                }", "-                out = new BufferedWriter(osw);", "-                if (filterChainsAvailable) {", "-                    ChainReaderHelper crh = new ChainReaderHelper();", "-                    crh.setBufferSize(FileUtils.BUF_SIZE);", "-                    crh.setPrimaryReader(in);", "-                    crh.setFilterChains(filterChains);", "-                    crh.setProject(project);", "-                    Reader rdr = crh.getAssembledReader();", "-                    in = new BufferedReader(rdr);", "-                }", "-                LineTokenizer lineTokenizer = new LineTokenizer();", "-                lineTokenizer.setIncludeDelims(true);", "-                String newline = null;", "-                String line = lineTokenizer.getToken(in);", "-                while (line != null) {", "-                    if (line.length() == 0) {", "-                        // this should not happen, because the lines are", "-                        // returned with the end of line delimiter", "-                        out.newLine();", "-                    } else {", "-                        newline = filters.replaceTokens(line);", "-                        out.write(newline);", "-                    }", "-                    line = lineTokenizer.getToken(in);", "-                }", "-            } finally {", "-                FileUtils.close(out);", "-                FileUtils.close(in);", "-            }", "+            copyWithFilterSets(source, dest, filters, filterChains,", "+                               filterChainsAvailable, append,", "+                               effectiveInputEncoding, outputEncoding,", "+                               project);", "-            BufferedReader in = null;", "-            BufferedWriter out = null;", "-            try {", "-                InputStreamReader isr = null;", "-                if (effectiveInputEncoding == null) {", "-                    isr = new InputStreamReader(source.getInputStream());", "-                } else {", "-                    isr = new InputStreamReader(source.getInputStream(),", "-                                                effectiveInputEncoding);", "-                }", "-                in = new BufferedReader(isr);", "-                OutputStream os = getOutputStream(dest, append, project);", "-                OutputStreamWriter osw;", "-                if (outputEncoding == null) {", "-                    osw = new OutputStreamWriter(os);", "-                } else {", "-                    osw = new OutputStreamWriter(os, outputEncoding);", "-                }", "-                out = new BufferedWriter(osw);", "-                if (filterChainsAvailable) {", "-                    ChainReaderHelper crh = new ChainReaderHelper();", "-                    crh.setBufferSize(FileUtils.BUF_SIZE);", "-                    crh.setPrimaryReader(in);", "-                    crh.setFilterChains(filterChains);", "-                    crh.setProject(project);", "-                    Reader rdr = crh.getAssembledReader();", "-                    in = new BufferedReader(rdr);", "-                }", "-                char[] buffer = new char[FileUtils.BUF_SIZE];", "-                while (true) {", "-                    int nRead = in.read(buffer, 0, buffer.length);", "-                    if (nRead == -1) {", "-                        break;", "-                    }", "-                    out.write(buffer, 0, nRead);", "-                }", "-            } finally {", "-                FileUtils.close(out);", "-                FileUtils.close(in);", "-            }", "+            copyWithFilterChainsOrTranscoding(source, dest, filterChains,", "+                                              filterChainsAvailable, append,", "+                                              effectiveInputEncoding,", "+                                              outputEncoding, project);", "-", "-            File parent = destFile.getParentFile();", "-            if (parent != null && !parent.isDirectory()", "-                && !(parent.mkdirs() || parent.isDirectory())) {", "-                throw new IOException(\"failed to create the parent directory\"", "-                                      + \" for \" + destFile);", "-            }", "-", "-            FileInputStream in = null;", "-            FileOutputStream out = null;", "-            FileChannel srcChannel = null;", "-            FileChannel destChannel = null;", "-", "-            try {", "-                in = new FileInputStream(sourceFile);", "-                out = new FileOutputStream(destFile);", "-                    ", "-                srcChannel = in.getChannel();", "-                destChannel = out.getChannel();", "-                ", "-                long position = 0;", "-                long count = srcChannel.size();", "-                while (position < count) {", "-                    long chunk = Math.min(MAX_IO_CHUNK_SIZE, count - position);", "-                    position +=", "-                        destChannel.transferFrom(srcChannel, position, chunk);", "-                }", "-            } finally {", "-                FileUtils.close(srcChannel);", "-                FileUtils.close(destChannel);", "-                FileUtils.close(out);", "-                FileUtils.close(in);", "-            }", "+            copyUsingFileChannels(sourceFile, destFile);", "-            InputStream in = null;", "-            OutputStream out = null;", "-            try {", "-                in = source.getInputStream();", "-                out = getOutputStream(dest, append, project);", "-", "-                byte[] buffer = new byte[FileUtils.BUF_SIZE];", "-                int count = 0;", "-                do {", "-                    out.write(buffer, 0, count);", "-                    count = in.read(buffer, 0, buffer.length);", "-                } while (count != -1);", "-            } finally {", "-                FileUtils.close(out);", "-                FileUtils.close(in);", "-            }", "+            copyUsingStreams(source, dest, append, project);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae0f32e22a0e3ad63bb88bee5493fb25", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ResourceUtils.java", "commitBeforeChange": "c9c4a2ce8d7cd469b1bd82242a2f4443c86745a7", "commitAfterChange": "35e9c976aca460e541e62bd67f88fa8482014f1e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public static void copyResource(Resource source, Resource dest,                             FilterSetCollection filters, Vector filterChains,                             boolean overwrite, boolean preserveLastModified, boolean append,                             String inputEncoding, String outputEncoding,                             Project project)         throws IOException", "signatureAfterChange": "     public static void copyResource(Resource source, Resource dest,                             FilterSetCollection filters, Vector filterChains,                             boolean overwrite, boolean preserveLastModified,                                     boolean append,                             String inputEncoding, String outputEncoding,                             Project project)         throws IOException", "diff": ["-                            boolean overwrite, boolean preserveLastModified, boolean append,", "+                            boolean overwrite, boolean preserveLastModified,", "+                                    boolean append,", "+        throws IOException {", "+        copyResource(source, dest, filters, filterChains, overwrite,", "+                     preserveLastModified, append, inputEncoding,", "+                     outputEncoding, project, /* force: */ false);", "+    }", "-                   && dest.as(FileProvider.class) != null) {", "-            File destFile =", "-                ((FileProvider) dest.as(FileProvider.class)).getFile();"]}]}
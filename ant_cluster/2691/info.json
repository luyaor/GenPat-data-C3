{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e6454d7c4d6069087ea7fa3c453dab28", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68a04a0c30ee53d0db0794de4eb11355", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/cvslib/ChangeLogTask.java", "commitBeforeChange": "49ac8075b87fecb96138ec2fd569af101aa80743", "commitAfterChange": "7eb6ca9aa8b38b24196a2b43bb11429e8e651048", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        validate();", "+        File savedDir = m_dir; // may be altered in validate", "+        try {", "-        final Properties userList = new Properties();", "+            validate();", "-        loadUserlist( userList );", "+            final Properties userList = new Properties();", "+            ", "+            loadUserlist( userList );", "+            ", "+            for( Enumeration e = m_cvsUsers.elements(); ", "+                 e.hasMoreElements(); ) {", "+                final CvsUser user = (CvsUser)e.nextElement();", "+                user.validate();", "+                userList.put( user.getUserID(), user.getDisplayname() );", "+            }", "+            ", "+            final Commandline command = new Commandline();", "+            command.setExecutable( \"cvs\" );", "+            command.createArgument().setValue( \"log\" );", "-        for( Enumeration e = m_cvsUsers.elements(); e.hasMoreElements(); )", "-        {", "-            final CvsUser user = (CvsUser)e.nextElement();", "-            user.validate();", "-            userList.put( user.getUserID(), user.getDisplayname() );", "-        }", "-", "-        final Commandline command = new Commandline();", "-        command.setExecutable( \"cvs\" );", "-        command.createArgument().setValue( \"log\" );", "-", "-        if( null != m_start )", "-        {", "-            final SimpleDateFormat outputDate =", "-                new SimpleDateFormat( \"yyyy-MM-dd\" );", "-", "-            // We want something of the form: -d \">=YYYY-MM-dd\"", "-            final String dateRange = \"-d >=\" + outputDate.format( m_start );", "-            command.createArgument().setValue( dateRange );", "-        }", "+            if( null != m_start ) {", "+                final SimpleDateFormat outputDate =", "+                    new SimpleDateFormat( \"yyyy-MM-dd\" );", "+                ", "+                // We want something of the form: -d \">=YYYY-MM-dd\"", "+                final String dateRange = \"-d >=\" ", "+                    + outputDate.format( m_start );", "+                command.createArgument().setValue( dateRange );", "+            }", "-        // Check if list of files to check has been specified", "-        if( !m_filesets.isEmpty() )", "-        {", "-            final Enumeration e = m_filesets.elements();", "-            while( e.hasMoreElements() )", "-            {", "-                final FileSet fileSet = (FileSet)e.nextElement();", "-                final DirectoryScanner scanner = fileSet.getDirectoryScanner( project );", "-                final String[] files = scanner.getIncludedFiles();", "-                for( int i = 0; i < files.length; i++ )", "-                {", "-                    command.createArgument().setValue( files[ i ] );", "+            // Check if list of files to check has been specified", "+            if( !m_filesets.isEmpty() ) {", "+                final Enumeration e = m_filesets.elements();", "+                while( e.hasMoreElements() ) {", "+                    final FileSet fileSet = (FileSet)e.nextElement();", "+                    final DirectoryScanner scanner = ", "+                        fileSet.getDirectoryScanner( project );", "+                    final String[] files = scanner.getIncludedFiles();", "+                    for( int i = 0; i < files.length; i++ ) {", "+                        command.createArgument().setValue( files[ i ] );", "+                    }", "-        }", "-        final ChangeLogParser parser = new ChangeLogParser( userList );", "-        final RedirectingStreamHandler handler =", "-            new RedirectingStreamHandler( parser );", "+            final ChangeLogParser parser = new ChangeLogParser( userList );", "+            final RedirectingStreamHandler handler =", "+                new RedirectingStreamHandler( parser );", "-        log( \"ChangeLog command: [\" + command.toString() + \"]\", Project.MSG_VERBOSE );", "+            log( \"ChangeLog command: [\" + command.toString() + \"]\", ", "+                 Project.MSG_VERBOSE );", "-        final Execute exe = new Execute( handler );", "-        exe.setWorkingDirectory( m_dir );", "-        exe.setCommandline( command.getCommandline() );", "-        exe.setAntRun( getProject() );", "-        try", "-        {", "-            final int resultCode = exe.execute();", "-            if( 0 != resultCode )", "-            {", "-                throw new BuildException( \"Error running cvs log\" );", "+            final Execute exe = new Execute( handler );", "+            exe.setWorkingDirectory( m_dir );", "+            exe.setCommandline( command.getCommandline() );", "+            exe.setAntRun( getProject() );", "+            try {", "+                final int resultCode = exe.execute();", "+                if( 0 != resultCode ) {", "+                    throw new BuildException( \"Error running cvs log\" );", "+                }", "+            } catch( final IOException ioe ) {", "+                throw new BuildException( ioe.toString() );", "-        }", "-        catch( final IOException ioe )", "-        {", "-            throw new BuildException( ioe.toString() );", "-        }", "-        final String errors = handler.getErrors();", "-        if( null != errors )", "-        {", "-            log( errors, Project.MSG_ERR );", "-        }", "+            final String errors = handler.getErrors();", "+            if( null != errors ) {", "+                log( errors, Project.MSG_ERR );", "+            }", "-        final CVSEntry[] entrySet = parser.getEntrySetAsArray();", "-        final CVSEntry[] filteredEntrySet = filterEntrySet( entrySet );", "-        writeChangeLog( filteredEntrySet );", "+            final CVSEntry[] entrySet = parser.getEntrySetAsArray();", "+            final CVSEntry[] filteredEntrySet = filterEntrySet( entrySet );", "+            writeChangeLog( filteredEntrySet );", "+", "+        } finally {", "+            m_dir = savedDir;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c27cd70f6c851ab120396cedb60192b4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Unpack.java", "commitBeforeChange": "7db8bf5f958197cc9496df4304ad02b00fb784e2", "commitAfterChange": "7c24f9164c6c8c840010e49f7780f9158b2e2e46", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        validate();", "-        extract();", "+        File savedDest = dest; // may be altered in validate", "+        try {", "+            validate();", "+            extract();", "+        } finally {", "+            dest = savedDest;", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d922bb7eb6134355b574cd88b18fd1ed", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a86906c9945c400f5ca76272a449078", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XmlProperty.java", "commitBeforeChange": "2fe8b860c0001d234880e9b27e8f8c7fef14de5c", "commitAfterChange": "64886360cf0d83287454a0b04a6613c3f47c0e7d", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void setSrcResource(Resource src)", "signatureAfterChange": "     public void setSrcResource(Resource src)", "diff": ["-            throw new BuildException(\"Only FileSystem resources are\"", "-                                     + \" supported.\");", "+            throw new BuildException(\"Only FileSystem resources are supported.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4868c74aa8de5637ab3ade7bd5e90986", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XSLTProcess.java", "commitBeforeChange": "2fe8b860c0001d234880e9b27e8f8c7fef14de5c", "commitAfterChange": "64886360cf0d83287454a0b04a6613c3f47c0e7d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void addConfiguredStyle(Resources rc)", "signatureAfterChange": "     public void addConfiguredStyle(Resources rc)", "diff": ["-            throw new BuildException(\"The style element must be specified\"", "-                    + \" with exactly one nested resource.\");", "+            throw new BuildException(", "+                    \"The style element must be specified with exactly one nested resource.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5742ee40e056bf259244faebd247ba32", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XmlProperty.java", "commitBeforeChange": "2fe8b860c0001d234880e9b27e8f8c7fef14de5c", "commitAfterChange": "64886360cf0d83287454a0b04a6613c3f47c0e7d", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void addConfigured(ResourceCollection a)", "signatureAfterChange": "     public void addConfigured(ResourceCollection a)", "diff": ["-            throw new BuildException(\"only single argument resource collections\"", "-                                     + \" are supported as archives\");", "+            throw new BuildException(", "+                    \"only single argument resource collections are supported as archives\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f60b1af4caf8edf3e9c5731915f94ec", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/email/EmailTask.java", "commitBeforeChange": "e7fb9570418c8f963123c259470373667ac8a84e", "commitAfterChange": "f5b5a8b53cad568d5a5ab97ed35c91f698fb1c8e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void addMessage(Message message)          throws BuildException", "signatureAfterChange": "     public void addMessage(Message message) throws BuildException", "diff": ["-    public void addMessage(Message message)", "-         throws BuildException {", "+    public void addMessage(Message message) throws BuildException {", "-            throw new BuildException(\"Only one message can be sent in an \"", "-                 + \"email\");", "+            throw new BuildException(", "+                \"Only one message can be sent in an email\");", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8751a8ac693bd16840350a27c58d621f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "9d48fbb8c3b653f2a3aefae2483e4bcc4bfa75a6", "commitAfterChange": "adbdf5d6c830f14edbfd28f91c2c7b1a14229291", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "          public void startElement(String tag, AttributeList attrs)              throws SAXParseException", "signatureAfterChange": "          public void startElement(String tag, AttributeList attrs) throws SAXParseException", "diff": ["-        public void startElement(String tag, AttributeList attrs) ", "-            throws SAXParseException {", "+        public void startElement(String tag, AttributeList attrs) throws SAXParseException {", "-                throw new SAXParseException(\"Config file is not of \" + ", "-                    \"expected XML type\", locator);", "+                throw new SAXParseException(\"Config file is not of expected XML type\", locator);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc2d17408d44fdcfaf874c47ff66edaf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "7055d10d8daca725b1a26456868263ed4b1e9f9c", "commitAfterChange": "89b81e63432125075513ce6e4b85c399089d2454", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-\tResourceCollection savedRc = null;", "+        ResourceCollection savedRc = null;", "-\t    savedRc = (ResourceCollection) rcs.elementAt(0);", "+            savedRc = (ResourceCollection) rcs.elementAt(0);", "-\t    /* for historical and performance reasons we have to do", "-\t       things in a rather complex way.", "-\t    ", "-\t       (1) Move is optimized to move directories if a fileset", "-\t       has been included completely, therefore FileSets need a", "-\t       special treatment.  This is also required to support", "-\t       the failOnError semantice (skip filesets with broken", "-\t       basedir but handle the remaining collections).", "+        /* for historical and performance reasons we have to do", "+           things in a rather complex way.", "-\t       (2) We carry around a few protected methods that work", "-\t       on basedirs and arrays of names.  To optimize stuff, all", "-\t       resources with the same basedir get collected in", "-\t       separate lists and then each list is handled in one go.", "-\t    */", "+           (1) Move is optimized to move directories if a fileset", "+           has been included completely, therefore FileSets need a", "+           special treatment.  This is also required to support", "+           the failOnError semantice (skip filesets with broken", "+           basedir but handle the remaining collections).", "-\t    HashMap filesByBasedir = new HashMap();", "-\t    HashMap dirsByBasedir = new HashMap();", "-\t    HashSet baseDirs = new HashSet();", "+           (2) We carry around a few protected methods that work", "+           on basedirs and arrays of names.  To optimize stuff, all", "+           resources with the same basedir get collected in", "+           separate lists and then each list is handled in one go.", "+        */", "+", "+            HashMap filesByBasedir = new HashMap();", "+            HashMap dirsByBasedir = new HashMap();", "+            HashSet baseDirs = new HashSet();", "-\t\tResourceCollection rc = (ResourceCollection) rcs.elementAt(i);", "+                ResourceCollection rc = (ResourceCollection) rcs.elementAt(i);", "-\t\tif (rc.isFilesystemOnly()) {", "+                if (rc.isFilesystemOnly()) {", "-\t\t    // Step (1)", "-\t\t    if (rc instanceof FileSet) {", "-\t\t\tFileSet fs = (FileSet) rc;", "-\t\t\tDirectoryScanner ds = null;", "-\t\t\ttry {", "-\t\t\t    ds = fs.getDirectoryScanner(getProject());", "-\t\t\t} catch (BuildException e) {", "-\t\t\t    if (failonerror", "-\t\t\t\t|| !e.getMessage().endsWith(\" not found.\")) {", "-\t\t\t\tthrow e;", "-\t\t\t    } else {", "-\t\t\t\tlog(\"Warning: \" + e.getMessage());", "-\t\t\t\tcontinue;", "-\t\t\t    }", "-\t\t\t}", "-\t\t\tFile fromDir = fs.getDir(getProject());", "+                    // Step (1)", "+                    if (rc instanceof FileSet) {", "+                        FileSet fs = (FileSet) rc;", "+                        DirectoryScanner ds = null;", "+                        try {", "+                            ds = fs.getDirectoryScanner(getProject());", "+                        } catch (BuildException e) {", "+                            if (failonerror", "+                                || !e.getMessage().endsWith(\" not found.\")) {", "+                                throw e;", "+                            } else {", "+                                log(\"Warning: \" + e.getMessage());", "+                                continue;", "+                            }", "+                        }", "+                        File fromDir = fs.getDir(getProject());", "-\t\t\tString[] srcFiles = ds.getIncludedFiles();", "-\t\t\tString[] srcDirs = ds.getIncludedDirectories();", "-\t\t\tif (!flatten && mapperElement == null", "-\t\t\t    && ds.isEverythingIncluded() && !fs.hasPatterns()) {", "-\t\t\t    completeDirMap.put(fromDir, destDir);", "-\t\t\t}", "-\t\t\tadd(fromDir, srcFiles, filesByBasedir);", "-\t\t\tadd(fromDir, srcDirs, dirsByBasedir);", "-\t\t\tbaseDirs.add(fromDir);", "-\t\t    } else { // not a fileset", "+                        String[] srcFiles = ds.getIncludedFiles();", "+                        String[] srcDirs = ds.getIncludedDirectories();", "+                        if (!flatten && mapperElement == null", "+                            && ds.isEverythingIncluded() && !fs.hasPatterns()) {", "+                            completeDirMap.put(fromDir, destDir);", "+                        }", "+                        add(fromDir, srcFiles, filesByBasedir);", "+                        add(fromDir, srcDirs, dirsByBasedir);", "+                        baseDirs.add(fromDir);", "+                    } else { // not a fileset", "-\t\t\tIterator resources = rc.iterator();", "-\t\t\twhile (resources.hasNext()) {", "-\t\t\t    FileResource fr = (FileResource) resources.next();", "-\t\t\t    if (!fr.isExists()) {", "-\t\t\t\tcontinue;", "-\t\t\t    }", "-\t\t\t    File baseDir = getKeyFile(fr.getBaseDir());", "-\t\t\t    add(baseDir, ", "-\t\t\t\tbaseDir == NULL_FILE_PLACEHOLDER", "-\t\t\t\t? fr.getFile().getAbsolutePath() : fr.getName(),", "-\t\t\t\tfr.isDirectory() ? dirsByBasedir ", "-\t\t\t\t                 : filesByBasedir);", "-\t\t\t    baseDirs.add(baseDir);", "-\t\t\t}", "-\t\t    }", "+                        Iterator resources = rc.iterator();", "+                        while (resources.hasNext()) {", "+                            FileResource fr = (FileResource) resources.next();", "+                            if (!fr.isExists()) {", "+                                continue;", "+                            }", "+                            File baseDir = getKeyFile(fr.getBaseDir());", "+                            add(baseDir, baseDir == NULL_FILE_PLACEHOLDER", "+                                ? fr.getFile().getAbsolutePath() : fr.getName(),", "+                                fr.isDirectory() ? dirsByBasedir", "+                                                 : filesByBasedir);", "+                            baseDirs.add(baseDir);", "+                        }", "+                    }", "-\t\t    Iterator iter = baseDirs.iterator();", "-\t\t    while (iter.hasNext()) {", "-\t\t\tFile f = (File) iter.next();", "-\t\t\tList files = (List) filesByBasedir.get(f);", "-\t\t\tList dirs = (List) dirsByBasedir.get(f);", "-", "-\t\t\tString[] srcFiles = new String[0];", "-\t\t\tif (files != null) {", "-\t\t\t    srcFiles = (String[]) files.toArray(srcFiles);", "-\t\t\t}", "-\t\t\tString[] srcDirs = new String[0];", "-\t\t\tif (dirs != null) {", "-\t\t\t    srcDirs = (String[]) dirs.toArray(srcDirs);", "-\t\t\t}", "-\t\t\tscan(f == NULL_FILE_PLACEHOLDER ? null : f, destDir,", "-\t\t\t     srcFiles, srcDirs);", "-\t\t    }", "-\t\t} else { // not a File resource collection", "-\t\t    throw new BuildException(\"Only FileSystem resources are\"", "-\t\t\t\t\t     + \" supported.\");", "-\t\t}", "+                    Iterator iter = baseDirs.iterator();", "+                    while (iter.hasNext()) {", "+                        File f = (File) iter.next();", "+                        List files = (List) filesByBasedir.get(f);", "+                        List dirs = (List) dirsByBasedir.get(f);", "+    ", "+                        String[] srcFiles = new String[0];", "+                        if (files != null) {", "+                            srcFiles = (String[]) files.toArray(srcFiles);", "+                        }", "+                        String[] srcDirs = new String[0];", "+                        if (dirs != null) {", "+                            srcDirs = (String[]) dirs.toArray(srcDirs);", "+                        }", "+                        scan(f == NULL_FILE_PLACEHOLDER ? null : f, destDir,", "+                            srcFiles, srcDirs);", "+                    }", "+                } else { // not a File resource collection", "+                    throw new BuildException(", "+                        \"Only FileSystem resources are supported.\");", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c21030f722191b0e45e8374d3dc6cc10", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "9d48fbb8c3b653f2a3aefae2483e4bcc4bfa75a6", "commitAfterChange": "adbdf5d6c830f14edbfd28f91c2c7b1a14229291", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void parse() throws BuildException", "signatureAfterChange": "     private void parse() throws BuildException", "diff": ["-            throw new BuildException(\"Parser has not been configured \" + ", "-                \"correctly\", exc);", "+            throw new BuildException(\"Parser has not been configured correctly\", exc);", "-                new Location(buildFile.toString(), exc.getLineNumber(), ", "-                    exc.getColumnNumber());", "+                new Location(buildFile.toString(), exc.getLineNumber(), exc.getColumnNumber());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6c51bc50d0971d9a53cc34a7d9bc217", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/LoadProperties.java", "commitBeforeChange": "a2853965df6328e7fe876fc65e4d34e49968795b", "commitAfterChange": "c6753edecbdf78d519c1265040a581c6417d6210", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void addConfigured(ResourceCollection a)", "signatureAfterChange": "     public synchronized void addConfigured(ResourceCollection a)", "diff": ["-    public void addConfigured(ResourceCollection a) {", "+    public synchronized void addConfigured(ResourceCollection a) {", "-            throw new BuildException(\"only single argument resource collections\"", "-                                     + \" are supported\");", "+            throw new BuildException(", "+                    \"only single-element resource collections are supported\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4408ab881ab9fa2fd6258f7dc406761", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Move.java", "commitBeforeChange": "c717727548e7807ced7eeff05871f414a6f57413", "commitAfterChange": "3a896be7fdf1beb063702928ae89b4f7cbe106c2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected void validateAttributes() throws BuildException", "signatureAfterChange": "     protected void validateAttributes() throws BuildException", "diff": ["-                throw new BuildException(\"One and only one of tofile and todir \"", "-                                         + \"must be set.\");", "+                throw new BuildException(\"One and only one of tofile and todir must be set.\");", "-            destFile = (destFile == null)", "-                ? new File(destDir, file.getName()) : destFile;", "-            destDir = (destDir == null)", "-                ? destFile.getParentFile() : destDir;", "+            destFile = destFile == null ? new File(destDir, file.getName()) : destFile;", "+            destDir = destDir == null ? destFile.getParentFile() : destDir;"]}]}
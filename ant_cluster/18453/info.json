{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bb57968af4ffa68c5f7b35382df676cd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0742a899fa0b36fcd6ca089ba11632e6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "23a03fcf16119310506d2e18d585cfdffb550650", "commitAfterChange": "1844a85f5feebe940057df6b041ab2fe095cc43d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 7, "signatureBeforeChange": "          public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["+", "-        project.log(\"Building \" + archiveType + \": \" + zipFile.getAbsolutePath());", "-    ", "+        project.log(\"Building \"+ archiveType +\": \"+ zipFile.getAbsolutePath());", "+", "+        if (baseDir == null) {", "+            throw new BuildException(\"basedir attribute must be set!\");", "+        }", "+        if (!baseDir.exists()) {", "+            throw new BuildException(\"basedir does not exist!\");", "+        }", "+", "+        DirectoryScanner ds = new DirectoryScanner();", "+        ds.setBasedir(baseDir);", "+        ds.setIncludes(includes);", "+        ds.setExcludes(excludes);", "+        if (useDefaultExcludes) {", "+            ds.addDefaultExcludes();", "+        }", "+        ds.scan();", "+", "+        String[] files = ds.getIncludedFiles();", "+        String[] dirs  = ds.getIncludedDirectories();", "+", "-\t    initZipOutputStream(zOut);", "-            ", "-            if ( allItems ) {", "-                String[] lst = baseDir.list();", "-                for (int i=0;i<lst.length;i++) {", "-                    items.addElement(lst[i]);", "-                }", "+            initZipOutputStream(zOut);", "+", "+            for (int i = 0; i < dirs.length; i++) {", "+                File f = new File(baseDir,dirs[i]);", "+                String name = dirs[i].replace(File.separatorChar,'/')+\"/\";", "+                zipDir(f, zOut, name);", "-            // add items", "-            Enumeration e = items.elements();", "-            while (e.hasMoreElements()) {", "-                String s = (String)e.nextElement();", "-                // check to make sure item is not in ignore list", "-                // shouldn't be ignored here, but just want to make sure", "-                if (! ignoreList.contains(s)) {", "-                    File f = new File(baseDir, s);", "-                    if (f.isDirectory()) {", "-                        zipDir(f, zOut, s + \"/\");", "-                    } else {", "-                        zipFile(f, zOut, s);", "-                    }", "-                } else {", "-                    project.log(\"Ignoring: \" + s, Project.MSG_WARN);", "-                }", "+            for (int i = 0; i < files.length; i++) {", "+                File f = new File(baseDir,files[i]);", "+                String name = files[i].replace(File.separatorChar,'/');", "+                zipFile(f, zOut, name);", "-    ", "-            // close up            ", "+", "+            // close up"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d220a95e4e6075410be7e2db55be7537", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/tar/TarUtils.java", "commitBeforeChange": "b43f4224d8fe9d1e7d628e88df394a7dfed46d1b", "commitAfterChange": "2e5b53fa106b848646493cb6f6ea74616973aca0", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public static long parseOctal(byte[] header, int offset, int length)", "signatureAfterChange": "     public static long parseOctal(final byte[] buffer, final int offset, final int length)", "diff": ["-     */", "-    public static long parseOctal(byte[] header, int offset, int length) {", "-        long    result = 0;", "-        boolean stillPadding = true;", "-        int     end = offset + length;", "-        for (int i = offset; i < end; ++i) {", "-            if (header[i] == 0) {", "+     */", "+    public static long parseOctal(final byte[] buffer, final int offset, final int length) {", "+        long    result = 0;", "+        int     end = offset + length;", "+        int     start = offset;", "+", "+        if (length < 2){", "+            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");", "+        }", "+", "+        if (buffer[start] == 0) {", "+            return 0L;", "+        }", "+", "+        // Skip leading spaces", "+        while (start < end){", "+            if (buffer[start] == ' '){", "+                start++;", "+            } else {", "+        }", "-            if (header[i] == (byte) ' ' || header[i] == '0') {", "-                if (stillPadding) {", "-                    continue;", "-                }", "+        // Must have trailing NUL or space", "+        byte trailer;", "+        trailer = buffer[end-1];", "+        if (trailer == 0 || trailer == ' '){", "+            end--;", "+        } else {", "+            throw new IllegalArgumentException(", "+                    exceptionMessage(buffer, offset, length, end-1, trailer));", "+        }", "+        // May have additional NUL or space", "+        trailer = buffer[end-1];", "+        if (trailer == 0 || trailer == ' '){", "+            end--;", "+        }", "-                if (header[i] == (byte) ' ') {", "-                    break;", "-                }", "-            }", "-", "-            stillPadding = false;", "+        for ( ;start < end; start++) {", "+            final byte currentByte = buffer[start];", "-            result = (result << 3) + (header[i] - '0');", "+            if (currentByte < '0' || currentByte > '7'){", "+                throw new IllegalArgumentException(", "+                        exceptionMessage(buffer, offset, length, start, currentByte));", "+            }", "+            result = (result << 3) + (currentByte - '0'); // convert from ASCII"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bb3613b3505f56209ab4333b41237849", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "461cec769f38f54bccbdb4e51b2de3df", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/modules/edit/DependentTargetChooser.java", "commitBeforeChange": "2ff201801b557593afe6cf9dcd4d4c4f4da65b39", "commitAfterChange": "cfa93603e73e635d31be01cdb31dc9959a5ea35c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private List fillDependsList(ACSTargetElement aTarget)", "signatureAfterChange": "         public String[] getSelectedTargetsAsStringArray()", "diff": ["-    private List fillDependsList(ACSTargetElement aTarget) {", "-        List retVal = new ArrayList();", "-            ", "-        String[] dependNames = aTarget.getDepends();", "-        int length = dependNames.length;", "-        ArrayList allTargets = getCoTargets (aTarget);", "-        int allLen = allTargets.size();", "-        ", "-        for (int i = 0; i < length; i++)", "-        {", "-            for (int j = 0; j < allLen; j++) {", "-                ACSTargetElement currentElement = (ACSTargetElement)allTargets.get(j);", "-                if (currentElement.getName().equalsIgnoreCase(dependNames[i].trim())) retVal.add(currentElement);", "-            }", "-        }", "-        return retVal;", "-    }", "+         */", "+        public String[] getSelectedTargetsAsStringArray() {", "+            int length = getRowCount();", "+            String[] retVal = new String[getSelectedTargetCount()];", "+            int i = 0, j = 0;", "+        ", "+            for (i = 0; i < length; i++) {", "+                if (_selected[i]) {", "+                    retVal[j] = getTarget(i).getName();", "+                    j++;", "+                }", "+            }", "+            return retVal;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec1bcc4c0fa36214321b4dfd7236ae0c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Exec.java", "commitBeforeChange": "0218e3ecae8397a700aae864601f963e5771a9a5", "commitAfterChange": "a037ae329b9fa9d94dde3fc7c4346ab77dddfdb9", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private void pipeOutput(InputStream is, String name, PrintWriter fos)          throws IOException", "signatureAfterChange": "  \tpublic void run()", "diff": ["-    private void pipeOutput(InputStream is, String name, PrintWriter fos) ", "-        throws IOException ", "-    {", "-project.log(\"pipeOutput\", name, Project.MSG_INFO);", "-        InputStreamReader isr=new InputStreamReader(is);", "-        BufferedReader din = new BufferedReader(isr);", "-        // pipe output to STDOUT", "-        String line;", "-        while((line = din.readLine()) != null) {", "-        if( fos==null)", "-            project.log(line, name, Project.MSG_INFO);", "-        else", "-            fos.println(line);", "-        }", "+", "+\tpublic void run() {", "+            try {", "+\t        try {", "+\t\t    while (!endOfStream) {", "+\t\t        pumpStream();", "+\t\t        sleep(SLEEP_TIME);", "+\t\t    }", "+\t        } catch (InterruptedException ie) {", "+                }", "+                din.close();", "+\t    } catch (IOException ioe) {", "+\t    }", "+\t}"]}]}
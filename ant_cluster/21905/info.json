{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "17d0c775438b87a7cce89ca0a66abd9c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d86a6c22f66b693f50651886ba1c744", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "84c1b5f0378a357ba9cf75317fa1fa108247bbdf", "commitAfterChange": "e98db2e5116b7e208157f8c8064deb39ae5b583f", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "     private boolean mainSimpleSort(final Data data, final int lo, final int hi,                                    final int d)", "signatureAfterChange": "     private boolean mainSimpleSort(final Data dataShadow, final int lo, final int hi,                                    final int d)", "diff": ["-    private boolean mainSimpleSort(final Data data, final int lo, final int hi,", "+    private boolean mainSimpleSort(final Data dataShadow, final int lo, final int hi,", "-        final int[] fmap            = data.fmap;", "-        final char[] quadrant       = data.quadrant;", "-        final byte[] block          = data.block;", "-        final int last              = this.last;", "-        final int lastPlus1         = last + 1;", "-        final boolean firstAttempt  = this.firstAttempt;", "-        final int workLimit         = this.workLimit;", "-        int workDone                = this.workDone;", "+        final int[] fmap            = dataShadow.fmap;", "+        final char[] quadrant       = dataShadow.quadrant;", "+        final byte[] block          = dataShadow.block;", "+        final int lastShadow              = this.last;", "+        final int lastPlus1         = lastShadow + 1;", "+        final boolean firstAttemptShadow  = this.firstAttempt;", "+        final int workLimitShadow         = this.workLimit;", "+        int workDoneShadow                = this.workDone;", "-                    //                           block, quadrant, last);", "+                    //                           block, quadrant, lastShadow);", "-                                                int x = last;", "+                                                int x = lastShadow;", "-                                                                                    workDone++;", "+                                                                                    workDoneShadow++;", "-                if (firstAttempt && (i <= hi) && (workDone > workLimit)) {", "+                if (firstAttemptShadow && (i <= hi) && (workDoneShadow > workLimitShadow)) {", "-        this.workDone = workDone;", "-        return firstAttempt && (workDone > workLimit);", "+        this.workDone = workDoneShadow;", "+        return firstAttemptShadow && (workDoneShadow > workLimitShadow);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf73fb07f1d2841d5a4231d4f2ccdd5a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "84c1b5f0378a357ba9cf75317fa1fa108247bbdf", "commitAfterChange": "e98db2e5116b7e208157f8c8064deb39ae5b583f", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "      private void mainSort()", "signatureAfterChange": "      private void mainSort()", "diff": ["-        final Data data             = this.data;", "-        final int[] runningOrder    = data.mainSort_runningOrder;", "-        final int[] copy            = data.mainSort_copy;", "-        final boolean[] bigDone     = data.mainSort_bigDone;", "-        final int[] ftab            = data.ftab;", "-        final byte[] block          = data.block;", "-        final int[] fmap            = data.fmap;", "-        final char[] quadrant       = data.quadrant;", "-        final int last              = this.last;", "-        final int workLimit         = this.workLimit;", "-        final boolean firstAttempt  = this.firstAttempt;", "+        final Data dataShadow             = this.data;", "+        final int[] runningOrder    = dataShadow.mainSort_runningOrder;", "+        final int[] copy            = dataShadow.mainSort_copy;", "+        final boolean[] bigDone     = dataShadow.mainSort_bigDone;", "+        final int[] ftab            = dataShadow.ftab;", "+        final byte[] block          = dataShadow.block;", "+        final int[] fmap            = dataShadow.fmap;", "+        final char[] quadrant       = dataShadow.quadrant;", "+        final int lastShadow              = this.last;", "+        final int workLimitShadow         = this.workLimit;", "+        final boolean firstAttemptShadow  = this.firstAttempt;", "-            block[last + i + 2] = block[(i % (last + 1)) + 1];", "+            block[lastShadow + i + 2] = block[(i % (lastShadow + 1)) + 1];", "-        for (int i = last + NUM_OVERSHOOT_BYTES; --i >= 0;) {", "+        for (int i = lastShadow + NUM_OVERSHOOT_BYTES; --i >= 0;) {", "-        block[0] = block[last + 1];", "+        block[0] = block[lastShadow + 1];", "-        for (int i = 0; i <= last; i++) {", "+        for (int i = 0; i <= lastShadow; i++) {", "-        for (int i = 0; i < last; i++) {", "+        for (int i = 0; i < lastShadow; i++) {", "-        fmap[--ftab[((block[last + 1] & 0xff) << 8) + (block[1] & 0xff)]]", "-            = last;", "+        fmap[--ftab[((block[lastShadow + 1] & 0xff) << 8) + (block[1] & 0xff)]]", "+            = lastShadow;", "-                        mainQSort3(data, lo, hi, 2);", "-                        if (firstAttempt && (this.workDone > workLimit)) {", "+                        mainQSort3(dataShadow, lo, hi, 2);", "+                        if (firstAttemptShadow && (this.workDone > workLimitShadow)) {", "-                    fmap[copy[c1]] = (fmap_j == 0) ? last : (fmap_j - 1);", "+                    fmap[copy[c1]] = (fmap_j == 0) ? lastShadow : (fmap_j - 1);", "-                        quadrant[a2update + last + 1] = qVal;", "+                        quadrant[a2update + lastShadow + 1] = qVal;"]}]}
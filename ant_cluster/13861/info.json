{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d72092675ed97e1c0f9cd4914382aa8e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39983d4331c0f3745d24accc2dbeb4f0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/email/EmailTask.java", "commitBeforeChange": "de47901582d1675358fd4b55e68c0fdc241dfd53", "commitAfterChange": "b5b99c769a21d3602ee35948cf004925f03464ba", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public void execute()", "signatureAfterChange": "     public void execute()", "diff": ["+        Message savedMessage = message;", "+        Vector savedFiles = (Vector) files.clone();", "-            if( encoding.equals( MIME ) || ( encoding.equals( AUTO ) && !autoFound ) )", "+            if( encoding.equals( MIME ) ", "+                || ( encoding.equals( AUTO ) && !autoFound ) )", "-                    mailer = (Mailer)Class.forName( \"org.apache.tools.ant.taskdefs.email.MimeMailer\" ).newInstance();", "+                    mailer = ", "+                        (Mailer) Class.forName( \"org.apache.tools.ant.taskdefs.email.MimeMailer\" )", "+                        .newInstance();", "-            if( encoding.equals( UU ) || ( encoding.equals( AUTO ) && !autoFound ) )", "+            if( encoding.equals( UU ) ", "+                || ( encoding.equals( AUTO ) && !autoFound ) )", "-                    mailer = (Mailer)Class.forName( \"org.apache.tools.ant.taskdefs.email.UUMailer\" ).newInstance();", "+                    mailer = ", "+                        (Mailer)Class.forName( \"org.apache.tools.ant.taskdefs.email.UUMailer\" )", "+                        .newInstance();", "-            if( encoding.equals( PLAIN ) || ( encoding.equals( AUTO ) && !autoFound ) )", "+            if( encoding.equals( PLAIN ) ", "+                || ( encoding.equals( AUTO ) && !autoFound ) )", "-                throw new BuildException( \"Failed to initialise encoding: \" + encoding );", "+                throw new BuildException( \"Failed to initialise encoding: \" ", "+                                          + encoding );", "-                throw new BuildException( \"At least one of to,cc or bcc must be supplied\" );", "+                throw new BuildException( \"At least one of to,cc or bcc must \"", "+                                          + \"be supplied\" );", "-                    throw new BuildException( \"The mime type can only be specified in one location\" );", "+                    throw new BuildException( \"The mime type can only be \"", "+                                              + \"specified in one location\" );", "-            log( \"Sent email with \" + count + \" attachment\" + ( count == 1?\"\":\"s\" ), Project.MSG_INFO );", "+            log( \"Sent email with \" + count + \" attachment\" ", "+                 + ( count == 1?\"\":\"s\" ), Project.MSG_INFO );", "+        } finally {", "+            message = savedMessage;", "+            files = savedFiles;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68a6e7d05b32816ca5290a8e66e46ed5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/WaitFor.java", "commitBeforeChange": "2cd5cfabd458ab9d92e045a32d6831f72a4e2940", "commitAfterChange": "b7443f2b77a8daeba5f4b36a14ef34d1fb7fe931", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            throw new BuildException(\"You must not nest more than one condition into <waitfor>\");", "+            throw new BuildException(\"You must not nest more than one \"", "+                                     + \"condition into <waitfor>\");", "-            throw new BuildException(\"You must nest a condition into <waitfor>\");", "+            throw new BuildException(\"You must nest a condition into \"", "+                                     + \"<waitfor>\");", "-        maxWaitMillis *= maxWaitMultiplier;", "-        checkEveryMillis *= checkEveryMultiplier;", "-        long start = System.currentTimeMillis();", "-        long end = start + maxWaitMillis;", "+        long savedMaxWaitMillis = maxWaitMillis;", "+        long savedCheckEveryMillis = checkEveryMillis;", "+        try {", "+            maxWaitMillis *= maxWaitMultiplier;", "+            checkEveryMillis *= checkEveryMultiplier;", "+            long start = System.currentTimeMillis();", "+            long end = start + maxWaitMillis;", "-        while (System.currentTimeMillis() < end) {", "-            if (c.eval()) {", "-                return;", "+            while (System.currentTimeMillis() < end) {", "+                if (c.eval()) {", "+                    return;", "+                }", "+                try {", "+                    Thread.sleep(checkEveryMillis);", "+                } catch (InterruptedException e) {", "+                }", "-            try {", "-                Thread.sleep(checkEveryMillis);", "-            } catch (InterruptedException e) {", "-            }", "-        }", "-        if (timeoutProperty != null) {", "-            project.setNewProperty(timeoutProperty, \"true\");", "+            if (timeoutProperty != null) {", "+                project.setNewProperty(timeoutProperty, \"true\");", "+            }", "+        } finally {", "+            maxWaitMillis = savedMaxWaitMillis;", "+            checkEveryMillis = savedCheckEveryMillis;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f8205a8470b09e4f70665626050d9cef", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d9257e3e35b6090d787faa044a43d38", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/GZip.java", "commitBeforeChange": "cf64423184f84bbcea950e4b34536924cd1a22ff", "commitAfterChange": "c657b5ef73c02bd2d60b146fcf1d80cafa977e62", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "     protected void pack()", "diff": ["-", "-    public void execute() throws BuildException {", "-        if (zipFile == null) {", "-            throw new BuildException(\"zipfile attribute is required\", location);", "-        }", "-", "-        if (source == null) {", "-            throw new BuildException(\"src attribute is required\", location);", "-        }", "-", "-        log(\"Building gzip: \" + zipFile.getAbsolutePath());", "-    ", "+public class GZip extends Pack {", "+    protected void pack() {", "-        ", "-            if (source.isDirectory()) {", "-                log (\"Cannot Gzip a directory!\", Project.MSG_ERR);", "-            } else {", "-                zipFile(source, zOut);", "-            }", "+            zipFile(source, zOut);", "-        }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29ac8d790b94c1a8c18365847d02f94b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "4cbbf3629a15a78615a3ce63ffe6f3fc028b172d", "commitAfterChange": "2c04d7e833b4e5dab1a3c5ddfe14b572aea8c112", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void closeEntry() throws IOException", "signatureAfterChange": "     public void closeEntry() throws IOException", "diff": ["-        if (finished) {", "-            throw new IOException(\"Stream has already been finished\");", "-        }", "-", "-        if (entry == null) {", "-            throw new IOException(\"No current entry to close\");", "-        }", "-", "-        if (!entry.hasWritten) {", "-            write(EMPTY, 0, 0);", "-        }", "+        preClose();", "+        closeEntry(actuallyNeedsZip64);", "+    }"]}]}
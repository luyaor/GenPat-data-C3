{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5f015a886c4613c7c206480dbf5cf16d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "900e8ad7201ae33732e2538a5c10d75b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ManifestClassPath.java", "commitBeforeChange": "65fc13760d14462f153c560c6d41392f63e19de8", "commitAfterChange": "759f97729aa8876433fc8df2cf1d9d0084e62b66", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute()", "signatureAfterChange": "     public void execute()", "diff": ["+        StringBuffer tooLongSb = new StringBuffer();", "+        for (int i = 0; i < maxParentLevels + 1; i++) {", "+            tooLongSb.append(\"../\");", "+        }", "+        final String tooLongPrefix = tooLongSb.toString();", "+", "-", "-        // Create as many directory prefixes as parent levels to traverse,", "-        // in addition to the reference directory itself", "-        File currDir = dir;", "-        String[] dirs = new String[maxParentLevels + 1];", "-        for (int i = 0; i < maxParentLevels + 1; ++i) {", "-            dirs[i] = currDir.getAbsolutePath();", "-            if (!dirs[i].equals(\"\" + File.separatorChar)) {", "-                dirs[i] = dirs[i] + File.separatorChar;", "-            }", "-            currDir = currDir.getParentFile();", "-            if (currDir == null) {", "-                maxParentLevels = i + 1;", "-                break;", "-            }", "-        }", "-            pathEntry = fileUtils.normalize(pathEntry.getAbsolutePath());", "+            pathEntry = fileUtils.normalize(fullPath);", "-            // Find the longest prefix shared by the current file", "-            // and the reference directory.", "-            for (int j = 0; j <= maxParentLevels && j < dirs.length; ++j) {", "-                String dir = dirs[j];", "-                if (!fullPath.startsWith(dir)) {", "-                    continue;", "-                }", "+            String canonicalPath = null;", "+            try {", "+                relPath = FileUtils.getRelativePath(dir, pathEntry);", "-                // We have a match! Add as many ../ as parent", "-                // directory traversed to get the relative path", "-                element.setLength(0);", "-                for (int k = 0; k < j; ++k) {", "-                    element.append(\"..\");", "-                    element.append(File.separatorChar);", "+                canonicalPath = pathEntry.getCanonicalPath();", "+                // getRelativePath always uses '/' as separator, adapt", "+                if (File.separatorChar != '/') {", "+                    canonicalPath =", "+                        canonicalPath.replace(File.separatorChar, '/');", "-                element.append(fullPath.substring(dir.length()));", "-                relPath = element.toString();", "-                break;", "+            } catch (Exception e) {", "+                throw new BuildException(\"error trying to get the relative path\"", "+                                         + \" from \" + dir + \" to \" + fullPath,", "+                                         e);", "-            if (relPath == null) {", "+            if (relPath.equals(canonicalPath)", "+                || relPath.startsWith(tooLongPrefix)) {", "-            // Manifest's ClassPath: attribute always uses forward", "-            // slashes '/', and is space-separated. Ant will properly", "-            // format it on 72 columns with proper line continuation", "-            if (File.separatorChar != '/') {", "-                relPath = relPath.replace(File.separatorChar, '/');", "-            }", "-            if (pathEntry.isDirectory()) {", "+            if (pathEntry.isDirectory() && !relPath.endsWith(\"/\")) {", "+            // Manifest's ClassPath: attribute always uses forward", "+            // slashes '/', and is space-separated. Ant will properly", "+            // format it on 72 columns with proper line continuation"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caa51e43293a4e4edf719944fa7c5a07", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Tar.java", "commitBeforeChange": "1400dc3c1b536c70697f83be990b0725121cba90", "commitAfterChange": "b5fcf10604f56a8061d10f332570342b34cc7a9d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            if (filesets.size() == 0) {", "+            if (filesets.size() == 0 && resourceCollections.size() == 0) {", "-                                         + \"attribute or some nested filesets.\",", "+                                         + \"attribute or some nested resource\"", "+                                         + \" collections.\",", "-                TarFileSet fs = (TarFileSet) e.nextElement();", "-                String[] files = fs.getFiles(getProject());", "-", "-                if (!archiveIsUpToDate(files, fs.getDir(getProject()))) {", "-                    upToDate = false;", "-                }", "-", "-                for (int i = 0; i < files.length; ++i) {", "-                    if (tarFile.equals(new File(fs.getDir(getProject()),", "-                                                files[i]))) {", "-                        throw new BuildException(\"A tar file cannot include \"", "-                                                 + \"itself\", getLocation());", "-                    }", "-                }", "+                upToDate &= check((TarFileSet) e.nextElement());", "+            }", "+            for (Enumeration e = resourceCollections.elements();", "+                 e.hasMoreElements();) {", "+                upToDate &= check((ResourceCollection) e.nextElement());", "-                    TarFileSet fs = (TarFileSet) e.nextElement();", "-                    String[] files = fs.getFiles(getProject());", "-                    if (files.length > 1 && fs.getFullpath().length() > 0) {", "-                        throw new BuildException(\"fullpath attribute may only \"", "-                                                 + \"be specified for \"", "-                                                 + \"filesets that specify a \"", "-                                                 + \"single file.\");", "-                    }", "-                    for (int i = 0; i < files.length; i++) {", "-                        File f = new File(fs.getDir(getProject()), files[i]);", "-                        String name = files[i].replace(File.separatorChar, '/');", "-                        tarFile(f, tOut, name, fs);", "-                    }", "+                    tar((TarFileSet) e.nextElement(), tOut);", "+                }", "+                for (Enumeration e = resourceCollections.elements();", "+                     e.hasMoreElements();) {", "+                    tar((ResourceCollection) e.nextElement(), tOut);"]}]}
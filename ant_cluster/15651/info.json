{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "786a834fd29311d1bfe2362026e954d1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "972012608ae55fda9dfda525bd96578e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/launch/Launcher.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void addPath(String path, boolean getJars, List<URL> libPathURLs)             throws MalformedURLException", "signatureAfterChange": "     private void addPath(final String path, final boolean getJars, final List<URL> libPathURLs)             throws MalformedURLException", "diff": ["-    private void addPath(String path, boolean getJars, List<URL> libPathURLs)", "+    private void addPath(final String path, final boolean getJars, final List<URL> libPathURLs)", "-        StringTokenizer tokenizer = new StringTokenizer(path, File.pathSeparator);", "+        final StringTokenizer tokenizer = new StringTokenizer(path, File.pathSeparator);", "-            String elementName = tokenizer.nextToken();", "-            File element = new File(elementName);", "+            final String elementName = tokenizer.nextToken();", "+            final File element = new File(elementName);", "-                URL[] dirURLs = Locator.getLocationURLs(element);", "+                final URL[] dirURLs = Locator.getLocationURLs(element);", "-            URL url = Locator.fileToURL(element);", "-            if (launchDiag) { System.out.println(\"adding library URL: \" + url) ;}", "+            final URL url = Locator.fileToURL(element);", "+            if (launchDiag) {", "+            \tSystem.out.println(\"adding library URL: \" + url);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c957f6dcd5a7e6f861fcbbed766b55e4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/builder/ConvertingProjectBuilder.java", "commitBeforeChange": "f3bc7772a61e0b51112c1b8840d9485d5442d6ad", "commitAfterChange": "bf9414c704e78eced3232d32434a69ed6f77209c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private Configuration convertTarget( Configuration originalTarget )", "signatureAfterChange": "     private Configuration convertTarget( final Configuration originalTarget )", "diff": ["-    private Configuration convertTarget( Configuration originalTarget )", "+    private Configuration convertTarget( final Configuration originalTarget )", "-        DefaultConfiguration newTarget = copyConfiguration( originalTarget );", "+        final DefaultConfiguration newTarget = copyConfiguration( originalTarget );", "-        Set omitAttributes = new HashSet();", "+        final Set omitAttributes = new HashSet();", "-        String ifAttrib = originalTarget.getAttribute( \"if\", null );", "+        final String ifAttrib = originalTarget.getAttribute( \"if\", null );", "-            DefaultConfiguration ifElement =", "+            final DefaultConfiguration ifElement =", "-        String unlessAttrib = originalTarget.getAttribute( \"unless\", null );", "+        final String unlessAttrib = originalTarget.getAttribute( \"unless\", null );", "-            DefaultConfiguration unlessElement =", "+            final DefaultConfiguration unlessElement =", "-        Configuration[] tasks = originalTarget.getChildren();", "+        final Configuration[] tasks = originalTarget.getChildren();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d181079ad1c015c0dac82f7bdd4c8c65", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "     private static Map<String, Target> removeDuplicateTargets(Map<String, Target> targets)", "signatureAfterChange": "     private static Map<String, Target> removeDuplicateTargets(final Map<String, Target> targets)", "diff": ["-    private static Map<String, Target> removeDuplicateTargets(Map<String, Target> targets) {", "-        Map<Location, Target> locationMap = new HashMap<Location, Target>();", "-        for (Entry<String, Target> entry : targets.entrySet()) {", "-            String name = entry.getKey();", "-            Target target = entry.getValue();", "-            Target otherTarget = locationMap.get(target.getLocation());", "+    private static Map<String, Target> removeDuplicateTargets(final Map<String, Target> targets) {", "+        final Map<Location, Target> locationMap = new HashMap<Location, Target>();", "+        for (final Entry<String, Target> entry : targets.entrySet()) {", "+            final String name = entry.getKey();", "+            final Target target = entry.getValue();", "+            final Target otherTarget = locationMap.get(target.getLocation());", "-        Map<String, Target> ret = new HashMap<String, Target>();", "-        for (Target target : locationMap.values()) {", "+        final Map<String, Target> ret = new HashMap<String, Target>();", "+        for (final Target target : locationMap.values()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8ecbb4334b8e1867c9446c918e7aa49", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "       private void runTestsInThreads(List<List> testList, int numThreads)", "signatureAfterChange": "       private void runTestsInThreads(final List<List> testList, final int numThreads)", "diff": ["-    private void runTestsInThreads(List<List> testList, int numThreads) {", "+    private void runTestsInThreads(final List<List> testList, final int numThreads) {", "-            Thread[] threads = new Thread[numThreads];", "+            final Thread[] threads = new Thread[numThreads];", "-                Iterator<List> i1 = testList.iterator();", "+                final Iterator<List> i1 = testList.iterator();", "-                    List l = i1.next();", "+                    final List l = i1.next();", "-                         Iterator i2 = l.iterator();", "+                         final Iterator i2 = l.iterator();", "-                             List tmpSingleton = new ArrayList();", "+                             final List tmpSingleton = new ArrayList();", "-                } catch (InterruptedException e) {", "+                } catch (final InterruptedException e) {"]}]}
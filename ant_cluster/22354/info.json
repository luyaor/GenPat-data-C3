{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c6e65bc43c0d7b299194c87a053baab", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "020b4e6608864bd96969a78b1190b232", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/Cab.java", "commitBeforeChange": "f1fd5e5e8a65a3463feb6226f4b827fc55417e51", "commitAfterChange": "1e760c7354cf76a820bf05aa29881ca9154757fc", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-                Process p = Execute.launch(getProject(), ", "+                Process p = Execute.launch(getProject(),", "-                ", "+", "-                throw new BuildException(msg);", "+                throw new BuildException(msg, getLocation());", "-                exec.setCommand(createCommand(listFile));", "+                exec.setExecutable(\"cabarc\");", "+                exec.createArg().setValue(\"-r\");", "+                exec.createArg().setValue(\"-p\");", "+", "+                if (!doCompress) {", "+                    exec.createArg().setValue(\"-m\");", "+                    exec.createArg().setValue(\"none\");", "+                }", "+", "+                if (cmdOptions != null) {", "+                    exec.createArg().setLine(cmdOptions);", "+                }", "+", "+                exec.createArg().setValue(\"n\");", "+                exec.createArg().setFile(cabFile);", "+                exec.createArg().setValue(\"@\" + listFile.getAbsolutePath());", "+", "-                throw new BuildException(msg);", "+                throw new BuildException(msg, getLocation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97e003463c6d58625afc4dc28b6f9629", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java", "commitBeforeChange": "0ceef36b9097f2061ce321b85b654eba2bd82e52", "commitAfterChange": "6d9e7cb56e1c3e3ffeedabf92486c9ff25054c9c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     protected Commandline setupModernJavacCommandlineSwitches(Commandline cmd)", "signatureAfterChange": "     protected Commandline setupModernJavacCommandlineSwitches(Commandline cmd)", "diff": ["-        if (attributes.getSource() != null && !assumeJava13()) {", "-            cmd.createArgument().setValue(\"-source\");", "-            String source = attributes.getSource();", "-            cmd.createArgument().setValue(adjustSourceValue(source));", "-        } else if (!assumeJava13() && !assumeJava14()", "-                   && attributes.getTarget() != null) {", "-            String t = attributes.getTarget();", "-            String s = adjustSourceValue(t);", "-            if (mustSetSourceForTarget(t)) {", "-                setImplicitSourceSwitch(cmd, t, s);", "+        if (!assumeJava13()) { // -source added with JDK 1.4", "+            final String t = attributes.getTarget();", "+            if (attributes.getSource() != null) {", "+                cmd.createArgument().setValue(\"-source\");", "+                cmd.createArgument()", "+                    .setValue(adjustSourceValue(attributes.getSource()));", "+", "+            } else if (t != null && mustSetSourceForTarget(t)) {", "+                setImplicitSourceSwitch(cmd, t, adjustSourceValue(t));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad1707db43b37cf1d4e39744693d350d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/BorlandGenerateClient.java", "commitBeforeChange": "270394a09fddda0ea9ffa2330956c5f399ab840f", "commitAfterChange": "6bd8d6e938a45868902ecd1092858e8372933c7c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": "     protected  void executeFork() throws BuildException", "signatureAfterChange": "     protected  void executeForkV4() throws BuildException", "diff": ["-        try {", "-            log(\"mode : fork\");", "-            org.apache.tools.ant.taskdefs.ExecTask execTask = null;                ", "+    /** launch the generate client using system api */", "+    protected  void executeForkV4() throws BuildException {", "+        try {", "+", "+            log(\"mode : fork \"+BorlandDeploymentTool.BAS,Project.MSG_DEBUG);", "+", "+            org.apache.tools.ant.taskdefs.ExecTask execTask = null;", "-                       ", "+", "-                execTask.createArg().setValue(\"-trace\");                ", "-            } // end of if ()", "+                execTask.createArg().setValue(\"-trace\");", "+            }", "-            //", "-            log(\"Calling java2iiop\", Project.MSG_VERBOSE);", "-            execTask.execute();        ", "+            log(\"Calling iastool\", Project.MSG_VERBOSE);", "+            execTask.execute();", "-            String msg = \"Exception while calling generateclient Details: \" ", "+            String msg = \"Exception while calling generateclient Details: \""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "daba150f1f88d6d439bbec631bdac672", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/ImportTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public void testImportError()", "signatureAfterChange": "      @Test     public void testImportError()", "diff": ["+    @Test", "-            configureProject(", "+            buildRule.configureProject(", "+            fail(\"Build exception should have been thrown\");", "-            assertTrue(", "-                \"expected location of build exception to be set\",", "-                (lo != null));", "-            assertTrue(", "-                \"expected location to contain calling file\",", "-                lo.getFileName().indexOf(\"import_bad_import.xml\") != -1);", "-            assertTrue(", "-                \"expected message of ex to contain called file\",", "-                ex.getMessage().indexOf(\"bad.xml\") != -1);", "-            return;", "+            assertNotNull(", "+                \"expected location of build exception to be set\", lo);", "+            assertContains(", "+                \"expected location to contain calling file\", \"import_bad_import.xml\", lo.getFileName());", "+            assertContains(", "+                \"expected message of ex to contain called file\", \"bad.xml\", ex.getMessage());", "-        assertTrue(", "-            \"Did not see build exception\",", "-            false);"]}]}
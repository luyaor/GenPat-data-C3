{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "26e4214a30bafd1120c8c6f341db51a7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "870e930c05cdf4689786351605ca1f3b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "ec980be7345681968c93f0609e9a3fecb39b9753", "commitAfterChange": "fbb9886634198d8377104bef9ec697fadeb134df", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private void checkAndExecute()", "signatureAfterChange": "     private ResourceCollection validate()", "diff": ["-    private void checkAndExecute() {", "+    private ResourceCollection validate() {", "-                    \"DestFile attribute is required for binary concatenation\");", "+                    \"destfile attribute is required for binary concatenation\");", "-", "-", "-", "-        if (sources.size() == 0 && textBuffer == null) {", "+        if (rc == null && textBuffer == null) {", "-                \"At least one file must be provided, or some text.\");", "+                \"At least one resource must be provided, or some text.\");", "-", "-        // If using filesets, disallow inline text. This is similar to", "-        // using GNU 'cat' with file arguments -- stdin is simply", "-        // ignored.", "-        if (sources.size() > 0 && textBuffer != null) {", "-            throw new BuildException(", "-                \"Cannot include inline text when using filesets.\");", "-        }", "-", "-        // Iterate thru the sources - paths, filesets and filelists", "-        for (Enumeration e = sources.elements(); e.hasMoreElements();) {", "-            Object o = e.nextElement();", "-            if (o instanceof Path) {", "-                Path path = (Path) o;", "-                checkAddFiles(null, path.list());", "-", "-            } else if (o instanceof FileSet) {", "-                FileSet fileSet = (FileSet) o;", "-                DirectoryScanner scanner =", "-                    fileSet.getDirectoryScanner(getProject());", "-                checkAddFiles(fileSet.getDir(getProject()),", "-                              scanner.getIncludedFiles());", "-", "-            } else if (o instanceof FileList) {", "-                FileList fileList = (FileList) o;", "-                checkAddFiles(fileList.getDir(getProject()),", "-                              fileList.getFiles(getProject()));", "+        if (rc != null) {", "+            // If using resources, disallow inline text. This is similar to", "+            // using GNU 'cat' with file arguments -- stdin is simply", "+            // ignored.", "+            if (textBuffer != null) {", "+                throw new BuildException(", "+                    \"Cannot include inline text when using resources.\");", "-        }", "-", "-        // check if the files are outofdate", "-        if (destinationFile != null && !forceOverwrite", "-            && (sourceFiles.size() > 0) && destinationFile.exists()) {", "-            boolean outofdate = false;", "-            for (int i = 0; i < sourceFiles.size(); ++i) {", "-                File file = (File) sourceFiles.elementAt(i);", "-                if (file.lastModified() > destinationFile.lastModified()) {", "-                    outofdate = true;", "-                    break;", "+            Restrict noexistRc = new Restrict();", "+            noexistRc.add(NOT_EXISTS);", "+            noexistRc.add(rc);", "+            for (Iterator i = noexistRc.iterator(); i.hasNext();) {", "+                log(i.next() + \" does not exist.\", Project.MSG_ERR);", "+            }", "+            if (destinationFile != null) {", "+                for (Iterator i = rc.iterator(); i.hasNext();) {", "+                    Object o = i.next();", "+                    if (o instanceof FileResource) {", "+                        File f = ((FileResource) o).getFile();", "+                        if (FILE_UTILS.fileNameEquals(f, destinationFile)) {", "+                            throw new BuildException(\"Input file \\\"\"", "+                                + f + \"\\\" is the same as the output file.\");", "+                        }", "+                    }", "+                }", "+            }", "+            Restrict existRc = new Restrict();", "+            existRc.add(EXISTS);", "+            existRc.add(rc);", "+            boolean outofdate = destinationFile == null || forceOverwrite;", "+            if (!outofdate) {", "+                for (Iterator i = existRc.iterator(); !outofdate && i.hasNext();) {", "+                    Resource r = (Resource) i.next();", "-                return; // no need to do anything", "+                return null; // no need to do anything", "+            return existRc;", "+        } else {", "+            StringResource s = new StringResource();", "+            s.setProject(getProject());", "+            s.setValue(textBuffer.toString());", "+            return s;", "+    }", "-        // Do nothing if all the sources are not present", "-        // And textBuffer is null", "-        if (textBuffer == null && sourceFiles.size() == 0", "-            && header == null && footer == null) {", "-            log(\"No existing files and no nested text, doing nothing\",", "-", "-            binaryCat();", "-            cat();", "-        }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98c206894d4773c36ee19a2114f7a7fa", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ide/VAJImport.java", "commitBeforeChange": "6cf09d26ffb60c6d9c780b92203ceb6b98b4182c", "commitAfterChange": "fcd6548344aa3f590435beff55530cfdb6983588", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     protected void importFileset(FileSet fileset)", "signatureAfterChange": " \tprotected void importFileset(FileSet fileset)", "diff": ["+\t */", "+\tprotected void importFileset(FileSet fileset) {", "+\t\tDirectoryScanner ds = fileset.getDirectoryScanner(this.project);", "+\t\tif (ds.getIncludedFiles().length == 0) {", "+\t\t\treturn;", "+\t\t}", "+\t\tString[] includes = null;", "+\t\tString[] excludes = null;", "-     */", "-    protected void importFileset(FileSet fileset) {", "-        DirectoryScanner ds = fileset.getDirectoryScanner(this.project);", "-        if (ds.getIncludedFiles().length == 0) {", "-            return;", "-        }", "+\t\t// Hack to get includes and excludes. We could also use getIncludedFiles,", "+\t\t// but that would result in very long HTTP-requests.", "+\t\t// Therefore we want to send the patterns only to the remote tool server", "+\t\t// and let him figure out the files.", "+\t\ttry {", "+\t\t\tClass directoryScanner = ds.getClass();", "+\t\t", "+\t\t\tField includesField = directoryScanner.getDeclaredField(\"includes\");", "+\t\t\tincludesField.setAccessible(true);", "+\t\t\tincludes = (String[]) includesField.get(ds);", "+\t", "+\t\t\tField excludesField = directoryScanner.getDeclaredField(\"excludes\");", "+\t\t\texcludesField.setAccessible(true);", "+\t\t\texcludes = (String[]) excludesField.get(ds);", "+\t\t} catch (NoSuchFieldException nsfe) {", "+\t\t\tthrow new BuildException(", "+\t\t\t\t\"DirectoryScanner.includes or .excludes missing\" + nsfe.getMessage());", "+\t\t} catch (IllegalAccessException iae) {", "+\t\t\tthrow new BuildException(", "+\t\t\t\t\"Access to DirectoryScanner.includes or .excludes not allowed\");", "+\t\t}", "-        Vector classes = new Vector();", "-        Vector sources = new Vector();", "-        Vector resources = new Vector();", "-", "-        String[] classesArr = null;", "-        String[] sourcesArr = null;", "-        String[] resourcesArr = null;", "-", "-        StringBuffer msg = new StringBuffer();", "-        msg.append(\"Importing \");", "-        String connector = \"\";", "-", "-        ImportCodeSpec importSpec = new ImportCodeSpec();", "-        importSpec.setDefaultProject(vajproject);", "-", "-        scan(", "-             fileset.getDir(this.project), ", "-             ds.getIncludedFiles(), ", "-             classes, ", "-             sources, ", "-             resources); ", "-", "-        if (importClasses) {", "-            classesArr = new String[classes.size()];", "-            classes.copyInto(classesArr);", "-            importSpec.setClassFiles(classesArr);", "-            if (classesArr.length > 0) {", "-                logFiles(classes, \"class\");", "-                msg.append( classesArr.length );", "-                msg.append( \" class \" );", "-                msg.append( classesArr.length > 1 ? \"files\" : \"file\" );", "-                connector = \", \";", "-            }", "-        }", "-", "-        if (importSources) {", "-            sourcesArr = new String[sources.size()];", "-            sources.copyInto(sourcesArr);", "-            importSpec.setJavaFiles(sourcesArr);", "-            if (sourcesArr.length > 0) {", "-                logFiles(sources, \"source\");", "-                msg.append( connector );", "-                msg.append( sourcesArr.length );", "-                msg.append( \" source \" );", "-                msg.append( sourcesArr.length > 1 ? \"files\" : \"file\" );", "-                connector = \", \";", "-            }", "-        }", "-", "-        if (importResources) {", "-            String resourcePath = fileset.getDir(this.project).getAbsolutePath();", "-            resourcesArr = new String[resources.size()];", "-            resources.copyInto(resourcesArr);", "-            importSpec.setResourcePath(resourcePath);", "-            importSpec.setResourceFiles(resourcesArr);", "-            if (resourcesArr.length > 0) {", "-                logFiles(resources, \"resource\");", "-                log( \"  (relative to resource path '\" + resourcePath + \"')\", ", "-                     org.apache.tools.ant.Project.MSG_VERBOSE );", "-", "-                msg.append( connector );", "-                msg.append( resourcesArr.length );", "-                msg.append( \" resource \" );", "-                msg.append( resourcesArr.length > 1 ? \"files\" : \"file\" );", "-            }", "-        }", "-", "-        msg.append( \" into the \" );", "-        msg.append( importProject );", "-        msg.append( \" project.\" );", "-", "-        log(msg.toString());", "-                ", "-        try {", "-            Type[] importedTypes = VAJUtil.getWorkspace().importData(importSpec);", "-            if (importedTypes == null) {", "-                throw new BuildException(\"Unable to import into Workspace!\");", "-            }", "-        } catch (IvjException ivje) {", "-            throw VAJUtil.createBuildException(\"Error while importing into Workspace: \", ivje);", "-        }", "-    }", "+\t\tgetUtil().importFiles( importProject, ds.getBasedir(), ", "+\t\t\t\tincludes, excludes, ", "+\t\t\t\timportClasses, importResources, importSources, ", "+\t\t\t\tuseDefaultExcludes);", "+\t}"]}]}
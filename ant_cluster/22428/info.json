{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e134fb4263a4ea2f25ca553cce378d77", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1437ec9a7a23d8682e529e0be4d7b3a4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/Checksum.java", "commitBeforeChange": "1e745fe39610746a046ce2ea1eef71fa15a6ea8e", "commitAfterChange": "38dce34edfdb4041103530c656e12e6ed61e2bd6", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private boolean validateAndExecute()         throws TaskException", "signatureAfterChange": "     private boolean validateAndExecute()         throws TaskException", "diff": ["-", "-        if( file == null && filesets.size() == 0 )", "+        if( null == m_file && 0 == m_filesets.size() )", "-            throw new TaskException(", "-                \"Specify at least one source - a file or a fileset.\" );", "+            final String message = \"Specify at least one source - a file or a fileset.\";", "+            throw new TaskException( message );", "-        if( file != null && file.exists() && file.isDirectory() )", "+        if( null != m_file && m_file.exists() && m_file.isDirectory() )", "-            throw new TaskException(", "-                \"Checksum cannot be generated for directories\" );", "+            final String message = \"Checksum cannot be generated for directories\";", "+            throw new TaskException( message );", "-        if( property != null && fileext != null )", "+        if( null != m_property && null != m_fileext )", "-            throw new TaskException(", "-                \"Property and FileExt cannot co-exist.\" );", "+            final String message = \"Property and FileExt cannot co-exist.\";", "+            throw new TaskException( message );", "-        if( property != null )", "+        if( m_property != null )", "-            if( forceOverwrite )", "+            if( m_forceOverwrite )", "-                throw new TaskException(", "-                    \"ForceOverwrite cannot be used when Property is specified\" );", "+                final String message =", "+                    \"ForceOverwrite cannot be used when Property is specified\";", "+                throw new TaskException( message );", "-            if( file != null )", "+            if( m_file != null )", "-                if( filesets.size() > 0 )", "+                if( m_filesets.size() > 0 )", "-                    throw new TaskException(", "-                        \"Multiple files cannot be used when Property is specified\" );", "+                    final String message =", "+                        \"Multiple files cannot be used when Property is specified\";", "+                    throw new TaskException( message );", "-                if( filesets.size() > 1 )", "+                if( m_filesets.size() > 1 )", "-                    throw new TaskException(", "-                        \"Multiple files cannot be used when Property is specified\" );", "+                    final String message =", "+                        \"Multiple files cannot be used when Property is specified\";", "+                    throw new TaskException( message );", "-        if( verifyProperty != null )", "+        if( m_verifyProperty != null )", "-            isCondition = true;", "+            m_isCondition = true;", "-        if( verifyProperty != null && forceOverwrite )", "+        if( m_verifyProperty != null && m_forceOverwrite )", "-            throw new TaskException(", "-                \"VerifyProperty and ForceOverwrite cannot co-exist.\" );", "+            final String message = \"VerifyProperty and ForceOverwrite cannot co-exist.\";", "+            throw new TaskException( message );", "-        if( isCondition && forceOverwrite )", "+        if( m_isCondition && m_forceOverwrite )", "-            throw new TaskException(", "-                \"ForceOverwrite cannot be used when conditions are being used.\" );", "+            final String message = \"ForceOverwrite cannot be used when conditions are being used.\";", "+            throw new TaskException( message );", "-        if( fileext == null )", "+        if( m_fileext == null )", "-            fileext = \".\" + algorithm;", "+            m_fileext = \".\" + m_algorithm;", "-        else if( fileext.trim().length() == 0 )", "+        else if( m_fileext.trim().length() == 0 )", "-            throw new TaskException(", "-                \"File extension when specified must not be an empty string\" );", "+            final String message = \"File extension when specified must not be an empty string\";", "+            throw new TaskException( message );", "-        messageDigest = null;", "-        if( provider != null )", "+        setupMessageDigest();", "+", "+        if( m_messageDigest == null )", "+        {", "+            final String message = \"Unable to create Message Digest\";", "+            throw new TaskException( message );", "+        }", "+", "+        addIncludes();", "+", "+        return generateChecksums();", "+    }", "-                messageDigest = MessageDigest.getInstance( algorithm, provider );", "-            catch( NoSuchAlgorithmException noalgo )", "-                throw new TaskException( noalgo.toString(), noalgo );", "-            catch( NoSuchProviderException noprovider )", "-                throw new TaskException( noprovider.toString(), noprovider );", "-                messageDigest = MessageDigest.getInstance( algorithm );", "-            catch( NoSuchAlgorithmException noalgo )", "-                throw new TaskException( noalgo.toString(), noalgo );", "-        if( messageDigest == null )", "-            throw new TaskException( \"Unable to create Message Digest\" );", "-        }", "-", "-        addToIncludeFileMap( file );", "-", "-        int sizeofFileSet = filesets.size();", "-        for( int i = 0; i < sizeofFileSet; i++ )", "-        {", "-            FileSet fs = (FileSet)filesets.get( i );", "-            DirectoryScanner ds = fs.getDirectoryScanner();", "-            String[] srcFiles = ds.getIncludedFiles();", "-                File src = new File( fs.getDir(), srcFiles[ j ] );", "-", "-        return generateChecksums();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "355588afdc92b59448cf3c41bac739c1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/Checksum.java", "commitBeforeChange": "1e745fe39610746a046ce2ea1eef71fa15a6ea8e", "commitAfterChange": "38dce34edfdb4041103530c656e12e6ed61e2bd6", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private boolean validateAndExecute()         throws TaskException", "signatureAfterChange": "     private boolean validateAndExecute()         throws TaskException", "diff": ["-", "-        if( file == null && filesets.size() == 0 )", "+        if( null == m_file && 0 == m_filesets.size() )", "-            throw new TaskException(", "-                \"Specify at least one source - a file or a fileset.\" );", "+            final String message = \"Specify at least one source - a file or a fileset.\";", "+            throw new TaskException( message );", "-        if( file != null && file.exists() && file.isDirectory() )", "+        if( null != m_file && m_file.exists() && m_file.isDirectory() )", "-            throw new TaskException(", "-                \"Checksum cannot be generated for directories\" );", "+            final String message = \"Checksum cannot be generated for directories\";", "+            throw new TaskException( message );", "-        if( property != null && fileext != null )", "+        if( null != m_property && null != m_fileext )", "-            throw new TaskException(", "-                \"Property and FileExt cannot co-exist.\" );", "+            final String message = \"Property and FileExt cannot co-exist.\";", "+            throw new TaskException( message );", "-        if( property != null )", "+        if( m_property != null )", "-            if( forceOverwrite )", "+            if( m_forceOverwrite )", "-                throw new TaskException(", "-                    \"ForceOverwrite cannot be used when Property is specified\" );", "+                final String message =", "+                    \"ForceOverwrite cannot be used when Property is specified\";", "+                throw new TaskException( message );", "-            if( file != null )", "+            if( m_file != null )", "-                if( filesets.size() > 0 )", "+                if( m_filesets.size() > 0 )", "-                    throw new TaskException(", "-                        \"Multiple files cannot be used when Property is specified\" );", "+                    final String message =", "+                        \"Multiple files cannot be used when Property is specified\";", "+                    throw new TaskException( message );", "-                if( filesets.size() > 1 )", "+                if( m_filesets.size() > 1 )", "-                    throw new TaskException(", "-                        \"Multiple files cannot be used when Property is specified\" );", "+                    final String message =", "+                        \"Multiple files cannot be used when Property is specified\";", "+                    throw new TaskException( message );", "-        if( verifyProperty != null )", "+        if( m_verifyProperty != null )", "-            isCondition = true;", "+            m_isCondition = true;", "-        if( verifyProperty != null && forceOverwrite )", "+        if( m_verifyProperty != null && m_forceOverwrite )", "-            throw new TaskException(", "-                \"VerifyProperty and ForceOverwrite cannot co-exist.\" );", "+            final String message = \"VerifyProperty and ForceOverwrite cannot co-exist.\";", "+            throw new TaskException( message );", "-        if( isCondition && forceOverwrite )", "+        if( m_isCondition && m_forceOverwrite )", "-            throw new TaskException(", "-                \"ForceOverwrite cannot be used when conditions are being used.\" );", "+            final String message = \"ForceOverwrite cannot be used when conditions are being used.\";", "+            throw new TaskException( message );", "-        if( fileext == null )", "+        if( m_fileext == null )", "-            fileext = \".\" + algorithm;", "+            m_fileext = \".\" + m_algorithm;", "-        else if( fileext.trim().length() == 0 )", "+        else if( m_fileext.trim().length() == 0 )", "-            throw new TaskException(", "-                \"File extension when specified must not be an empty string\" );", "+            final String message = \"File extension when specified must not be an empty string\";", "+            throw new TaskException( message );", "-        messageDigest = null;", "-        if( provider != null )", "+        setupMessageDigest();", "+", "+        if( m_messageDigest == null )", "+        {", "+            final String message = \"Unable to create Message Digest\";", "+            throw new TaskException( message );", "+        }", "+", "+        addIncludes();", "+", "+        return generateChecksums();", "+    }", "-                messageDigest = MessageDigest.getInstance( algorithm, provider );", "-            catch( NoSuchAlgorithmException noalgo )", "-                throw new TaskException( noalgo.toString(), noalgo );", "-            catch( NoSuchProviderException noprovider )", "-                throw new TaskException( noprovider.toString(), noprovider );", "-                messageDigest = MessageDigest.getInstance( algorithm );", "-            catch( NoSuchAlgorithmException noalgo )", "-                throw new TaskException( noalgo.toString(), noalgo );", "-        if( messageDigest == null )", "-            throw new TaskException( \"Unable to create Message Digest\" );", "-        }", "-", "-        addToIncludeFileMap( file );", "-", "-        int sizeofFileSet = filesets.size();", "-        for( int i = 0; i < sizeofFileSet; i++ )", "-        {", "-            FileSet fs = (FileSet)filesets.get( i );", "-            DirectoryScanner ds = fs.getDirectoryScanner();", "-            String[] srcFiles = ds.getIncludedFiles();", "-                File src = new File( fs.getDir(), srcFiles[ j ] );", "-", "-        return generateChecksums();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "98693e8d88be2a94b05db5a350a093f1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "987619cf2f26fe22d40fa3e3b0892739", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "3477bbf6474cdd2b70b12eb638e64415a4f1c2ec", "commitAfterChange": "134d95afef9b42cf08f2eccb077b97525ac38034", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 40, "signatureBeforeChange": "      private void allocateCompressStructures ()", "signatureAfterChange": "          Data(int blockSize100k)", "diff": ["-", "-    private void allocateCompressStructures () {", "-        int n = baseBlockSize * blockSize100k;", "-        block = new char[(n + 1 + NUM_OVERSHOOT_BYTES)];", "-        quadrant = new int[(n + NUM_OVERSHOOT_BYTES)];", "-        zptr = new int[n];", "-        ftab = new int[65537];", "-", "-        if (block == null || quadrant == null || zptr == null", "-            || ftab == null) {", "-            //int totalDraw = (n + 1 + NUM_OVERSHOOT_BYTES) + (n + NUM_OVERSHOOT_BYTES) + n + 65537;", "-            //compressOutOfMemory ( totalDraw, n );", "-        }", "-", "-        /*", "-          The back end needs a place to store the MTF values", "-          whilst it calculates the coding tables.  We could", "-          put them in the zptr array.  However, these values", "-          will fit in a short, so we overlay szptr at the", "-          start of zptr, in the hope of reducing the number", "-          of cache misses induced by the multiple traversals", "-          of the MTF values when calculating coding tables.", "-          Seems to improve compression speed by about 1%.", "-        */", "-        //    szptr = zptr;", "-", "-", "-        szptr = new short[2 * n];", "+", "+        Data(int blockSize100k) {", "+            super();", "+", "+            final int n = blockSize100k * BZip2Constants.baseBlockSize;", "+            this.block = new byte[(n + 1 + NUM_OVERSHOOT_BYTES)];", "+            this.fmap = new int[n];", "+            this.sfmap = new char[2 * n];", "+            this.quadrant = this.sfmap;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d33a2d60e6f1b70b5ec69f24328b1431", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "228fb9839c21a0a853598e114faca72c8e9340e7", "commitAfterChange": "9922008d657c72235c402343fd88847b044014ad", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 41, "signatureBeforeChange": "      private void allocateCompressStructures ()", "signatureAfterChange": "          Data(int blockSize100k)", "diff": ["-", "-    private void allocateCompressStructures () {", "-        int n = baseBlockSize * blockSize100k;", "-        block = new char[(n + 1 + NUM_OVERSHOOT_BYTES)];", "-        quadrant = new int[(n + NUM_OVERSHOOT_BYTES)];", "-        zptr = new int[n];", "-        ftab = new int[65537];", "-", "-        if (block == null || quadrant == null || zptr == null", "-            || ftab == null) {", "-            //int totalDraw = (n + 1 + NUM_OVERSHOOT_BYTES) + (n + NUM_OVERSHOOT_BYTES) + n + 65537;", "-            //compressOutOfMemory ( totalDraw, n );", "-          The back end needs a place to store the MTF values", "-          whilst it calculates the coding tables.  We could", "-          put them in the zptr array.  However, these values", "-          will fit in a short, so we overlay szptr at the", "-          start of zptr, in the hope of reducing the number", "-          of cache misses induced by the multiple traversals", "-          of the MTF values when calculating coding tables.", "-          Seems to improve compression speed by about 1%.", "-        */", "-        //    szptr = zptr;", "-        szptr = new short[2 * n];", "+", "+        Data(int blockSize100k) {", "+            super();", "+", "+            final int n = blockSize100k * BZip2Constants.baseBlockSize;", "+            this.block = new byte[(n + 1 + NUM_OVERSHOOT_BYTES)];", "+            this.fmap = new int[n];", "+            this.sfmap = new char[2 * n];", "+            this.quadrant = this.sfmap;", "+        }"]}]}
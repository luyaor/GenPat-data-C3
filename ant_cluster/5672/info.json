{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "331c812f7b7e6e779e931bace936da0f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "042bab478faf2b44589d80dab7dbf68c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/metamata/MAuditStreamHandler.java", "commitBeforeChange": "271e0fe6fc223253e2c24c0f0f0c4fc4d9b58410", "commitAfterChange": "8af1905a98b1e04a63ab7473d64a41bfda91f15e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "     protected void processLine(String line)", "signatureAfterChange": "     protected void processLine(String line)", "diff": ["-    protected void processLine(String line){", "+    protected void processLine(String line) {", "-            String file = (String)matches.elementAt(1);", "-            int lineNum = Integer.parseInt((String)matches.elementAt(2));", "-            String msg = (String)matches.elementAt(3);", "-            addViolationEntry(file, MAudit.createViolation(lineNum, msg) );", "+            String file = (String) matches.elementAt(1);", "+            MAudit.Violation violation = new MAudit.Violation();", "+            violation.line = (String) matches.elementAt(2);", "+            violation.error = (String) matches.elementAt(3);", "+            // remove the pathname from any messages and let the classname only.", "+            final int pos = file.lastIndexOf(File.separatorChar);", "+            if ((pos != -1) && (pos != file.length() - 1)) {", "+                String filename = file.substring(pos + 1);", "+                violation.error = StringUtils.replace(violation.error,", "+                        \"file:\" + file, filename);", "+            }", "+            addViolationEntry(file, violation);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae86385ee817b60c64d0de38e9e4d175", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "     protected void zipFile(InputStream in, ZipOutputStream zOut, String vPath,                            long lastModified, File fromArchive, int mode)         throws IOException", "signatureAfterChange": "     protected void zipFile(InputStream in, final ZipOutputStream zOut, final String vPath,                            final long lastModified, final File fromArchive, final int mode)         throws IOException", "diff": ["-    protected void zipFile(InputStream in, ZipOutputStream zOut, String vPath,", "-                           long lastModified, File fromArchive, int mode)", "+    protected void zipFile(InputStream in, final ZipOutputStream zOut, final String vPath,", "+                           final long lastModified, final File fromArchive, final int mode)", "-            ZipEntry ze = new ZipEntry(vPath);", "+            final ZipEntry ze = new ZipEntry(vPath);", "-                CRC32 cal = new CRC32();", "+                final CRC32 cal = new CRC32();", "-                    ByteArrayOutputStream bos = new ByteArrayOutputStream();", "+                    final ByteArrayOutputStream bos = new ByteArrayOutputStream();", "-                    byte[] buffer = new byte[BUFFER_SIZE];", "+                    final byte[] buffer = new byte[BUFFER_SIZE];", "-                    byte[] buffer = new byte[BUFFER_SIZE];", "+                    final byte[] buffer = new byte[BUFFER_SIZE];", "-            ZipExtraField[] extra = getCurrentExtraFields();", "+            final ZipExtraField[] extra = getCurrentExtraFields();", "-            byte[] buffer = new byte[BUFFER_SIZE];", "+            final byte[] buffer = new byte[BUFFER_SIZE];"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2d857cdf5df83893e501178639bb0b67", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74939f094a335b6c59eef5b3a5b223a3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/Sort.java", "commitBeforeChange": "bd7585adb01844d04d23a6b1707427f9f4a490ad", "commitAfterChange": "ea33301047ba2de74fa062155df4d6337e5d1392", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     protected synchronized Collection getCollection()", "signatureAfterChange": "     protected synchronized Collection<Resource> getCollection()", "diff": ["-    protected synchronized Collection getCollection() {", "+    protected synchronized Collection<Resource> getCollection() {", "-        Iterator iter = rc.iterator();", "+        Iterator<Resource> iter = rc.iterator();", "-            return Collections.EMPTY_SET;", "+            return Collections.emptySet();", "-        List result = (List) CollectionUtils.asCollection(iter);", "+        List<Resource> result = (List<Resource>) CollectionUtils.asCollection(iter);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "802163b47c93b40dea63d887888a7bba", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/Tokens.java", "commitBeforeChange": "7829faf36a6f4bc565e0e8b92aa85cc948718176", "commitAfterChange": "9caeed5081071d6a2de28844d0a724918f8c6d86", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     protected synchronized Collection getCollection()", "signatureAfterChange": "     protected synchronized Collection<Resource> getCollection()", "diff": ["-    protected synchronized Collection getCollection() {", "+    protected synchronized Collection<Resource> getCollection() {", "-            return Collections.EMPTY_SET;", "+            return Collections.emptySet();", "-        InputStreamReader rdr = null;", "-        if (encoding == null) {", "-            rdr = new InputStreamReader(cat);", "-        } else {", "-            try {", "-                rdr = new InputStreamReader(cat, encoding);", "-            } catch (UnsupportedEncodingException e) {", "-                throw new BuildException(e);", "-            }", "-        }", "-        ArrayList result = new ArrayList();", "+            InputStreamReader rdr = null;", "+            if (encoding == null) {", "+                rdr = new InputStreamReader(cat);", "+            } else {", "+                try {", "+                    rdr = new InputStreamReader(cat, encoding);", "+                } catch (UnsupportedEncodingException e) {", "+                    throw new BuildException(e);", "+                }", "+            }", "+            ArrayList<Resource> result = new ArrayList<Resource>();", "+            return result;", "+        } finally {", "+            FileUtils.close(cat);", "-        return result;"]}]}
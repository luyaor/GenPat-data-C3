{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "046b1391bdcfc365a9406a30b679e83a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11046367f93bac6404cc437834c7f3b1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/javacc/JavaCC.java", "commitBeforeChange": "a177bc702d6f9cdcd37e0fff65f577e66b297735", "commitAfterChange": "22b84e3a90aa69d0b0de53d108af5b9caf75a59a", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": "     protected static String getMainClass(File home, int type)         throws BuildException", "signatureAfterChange": "     protected static String getMainClass(Path path, int type)         throws BuildException", "diff": ["-        int majorVersion = getMajorVersionNumber(home);", "+     */", "+    protected static String getMainClass(Path path, int type)", "+        throws BuildException {", "-        switch (majorVersion) {", "-        case 1:", "-        case 2:", "+        AntClassLoader l = new AntClassLoader();", "+        l.setClassPath(path.concatSystemClasspath(\"ignore\"));", "+        String javaccClass = COM_PACKAGE + COM_JAVACC_CLASS;", "+        InputStream is = l.getResourceAsStream(javaccClass.replace('.', '/')", "+                                               + \".class\");", "+        if (is != null) {", "-", "-", "-            break;", "-", "-        case 3:", "-            /*", "-             * This is where the fun starts, JavaCC 3.0 uses", "-             * org.netbeans.javacc, 3.1 uses org.javacc - I wonder", "-             * which version is going to use net.java.javacc.", "-             *", "-             * Look into to the archive to pick up the best", "-             * package.", "-             */", "-            ZipFile zf = null;", "-            try {", "-                zf = new ZipFile(getArchiveFile(home));", "-                if (zf.getEntry(ORG_PACKAGE_3_0.replace('.', '/')) != null) {", "+        } else {", "+            javaccClass = ORG_PACKAGE_3_1 + ORG_JAVACC_CLASS;", "+            is = l.getResourceAsStream(javaccClass.replace('.', '/')", "+                                       + \".class\");", "+            if (is != null) {", "+                packagePrefix = ORG_PACKAGE_3_1;", "+            } else {", "+                javaccClass = ORG_PACKAGE_3_0 + ORG_JAVACC_CLASS;", "+                is = l.getResourceAsStream(javaccClass.replace('.', '/')", "+                                           + \".class\");", "+                if (is != null) {", "-                } else {", "-                    packagePrefix = ORG_PACKAGE_3_1;", "-                }", "-            } catch (IOException e) {", "-                throw new BuildException(\"Error reading javacc.jar\", e);", "-            } finally {", "-                if (zf != null) {", "-                    try {", "-                        zf.close();", "-                    } catch (IOException e) {", "-                        throw new BuildException(e);", "-                    }", "-            switch (type) {", "-            case TASKDEF_TYPE_JAVACC:", "-                mainClass = ORG_JAVACC_CLASS;", "-", "+            if (is != null) {", "+                switch (type) {", "+                case TASKDEF_TYPE_JAVACC:", "+                    mainClass = ORG_JAVACC_CLASS;", "+                    ", "+                ", "+                case TASKDEF_TYPE_JJTREE:", "+                    mainClass = ORG_JJTREE_CLASS;", "+                    ", "+                    break;", "-            case TASKDEF_TYPE_JJTREE:", "-                mainClass = ORG_JJTREE_CLASS;", "-", "-                break;", "-", "-            case TASKDEF_TYPE_JJDOC:", "-                mainClass = ORG_JJDOC_CLASS;", "-", "-                break;", "+                case TASKDEF_TYPE_JJDOC:", "+                    mainClass = ORG_JJDOC_CLASS;", "+                    ", "+                    break;", "+                }", "-", "-            break;", "+        if (packagePrefix == null) {", "+            throw new BuildException(\"failed to load JavaCC\");", "+        }", "+        if (mainClass == null) {", "+            throw new BuildException(\"unknown task type \" + type);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c11ab9a3d4a88b2c4c113ee525f8761b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "3ce64dd501a7e5dfd84967399cc4c68c643de810", "commitAfterChange": "b941f2ef443cbbaec2b995b3c34958067c4979c3", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 49, "signatureBeforeChange": "     private void cat(ResourceCollection c)", "signatureAfterChange": "     private void pump(InputStream in, OutputStream out)", "diff": ["-    /** perform the concatenation */", "-    private void cat(ResourceCollection c) {", "-        OutputStream os = null;", "-        char[] buffer = new char[BUFFER_SIZE];", "-", "-        try {", "-            PrintWriter writer = null;", "-", "-            if (outputWriter != null) {", "-                writer = new PrintWriter(outputWriter);", "-            } else {", "-                if (destinationFile == null) {", "-                    // Log using WARN so it displays in 'quiet' mode.", "-                    os = new LogOutputStream(this, Project.MSG_WARN);", "-                } else {", "-                    // ensure that the parent dir of dest file exists", "-                    File parent = destinationFile.getParentFile();", "-                    if (!parent.exists()) {", "-                        parent.mkdirs();", "-                    }", "-                    os = new FileOutputStream(destinationFile.getAbsolutePath(),", "-                                              append);", "-                }", "-                if (outputEncoding == null) {", "-                    writer = new PrintWriter(", "-                        new BufferedWriter(", "-                            new OutputStreamWriter(os)));", "-                } else {", "-                    writer = new PrintWriter(", "-                        new BufferedWriter(", "-                            new OutputStreamWriter(os, outputEncoding)));", "-                }", "-            }", "-            if (header != null) {", "-                if (header.getFiltering()) {", "-                    concatenate(", "-                        buffer, writer, new StringReader(header.getValue()));", "-                } else {", "-                    writer.print(header.getValue());", "-                }", "-            }", "-            if (c.size() > 0) {", "-                concatenate(buffer, writer, new MultiReader(c));", "-            }", "-            if (footer != null) {", "-                if (footer.getFiltering()) {", "-                    concatenate(", "-                        buffer, writer, new StringReader(footer.getValue()));", "-                } else {", "-                    writer.print(footer.getValue());", "-                }", "-            }", "-            writer.flush();", "-            if (os != null) {", "-                os.flush();", "-            }", "-        } catch (IOException ioex) {", "-            throw new BuildException(\"Error while concatenating: \"", "-                                     + ioex.getMessage(), ioex);", "-        } finally {", "-            FileUtils.close(os);", "-        }", "-    }", "+     */", "+    private void pump(InputStream in, OutputStream out) {", "+        Thread t = new Thread(new StreamPumper(in, out));", "+        t.start();", "+        try {", "+            t.join();", "+        } catch (InterruptedException e) {", "+            try {", "+                t.join();", "+            } catch (InterruptedException ee) {", "+                // Empty", "+            }", "+        } finally {", "+            FileUtils.close(in);", "+            FileUtils.close(out);", "+        }", "+    }"]}]}
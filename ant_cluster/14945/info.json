{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4773a641cb2b7aafa3302ee630103796", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df1ac908608e5e96a2aa789ded8e593a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Jar.java", "commitBeforeChange": "6c89d5a7b85b61086692c8037aa544dc85cf2e7e", "commitAfterChange": "20a1e91d17753399f8d18a5123f8e5e35e0409da", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "      protected boolean isUpToDate(FileScanner[] scanners, File zipFile)", "signatureAfterChange": "      protected boolean isUpToDate(FileScanner[] scanners, File zipFile) throws BuildException", "diff": ["-    protected boolean isUpToDate(FileScanner[] scanners, File zipFile)", "+    protected boolean isUpToDate(FileScanner[] scanners, File zipFile) throws BuildException", "-        if (emptyBehavior == null) emptyBehavior = \"create\";", "-        if (files.length == 0) {", "-            if (emptyBehavior.equals(\"skip\")) {", "-                log(\"Warning: skipping JAR archive \" + zipFile +", "-                    \" because no files were included.\", Project.MSG_WARN);", "-                return true;", "-            } else if (emptyBehavior.equals(\"fail\")) {", "-                throw new BuildException(\"Cannot create JAR archive \" + zipFile +", "-                                         \": no files were included.\", location);", "-            } else {", "-                // create", "-                if (!zipFile.exists() ||", "-                    (manifest != null &&", "-                     manifest.lastModified() > zipFile.lastModified()))", "-                    log(\"Note: creating empty JAR archive \" + zipFile, Project.MSG_INFO);", "-                // and continue below...", "-            }", "-        }", "-        if (!zipFile.exists()) return false;", "-\tif (manifest != null && manifest.lastModified() > zipFile.lastModified())", "-\t    return false;", "-        for (int i=0; i<files.length; i++) {", "-            if (files[i].lastModified() > zipFile.lastModified()) {", "-                return false;", "-            }", "-        }", "-        return true;", "-    }", "+        if (manifest != null) {", "+            // just add the manifest file to the mix", "+", "+            DirectoryScanner ds = new DirectoryScanner();", "+            ds.setBasedir(new File(manifest.getParent()));", "+            ds.setIncludes(new String[] {manifest.getName()});", "+            ds.scan();", "+", "+            FileScanner[] myScanners = new FileScanner[scanners.length+1];", "+            System.arraycopy(scanners, 0, myScanners, 0, scanners.length);", "+            myScanners[scanners.length] = ds;", "+", "+            boolean retval = super.isUpToDate(myScanners, zipFile);", "+            if (!retval && files.length == 0) {", "+                log(\"Note: creating empty \"+archiveType+\" archive \" + zipFile, ", "+                    Project.MSG_INFO);", "+            }", "+            return retval;", "+", "+        } else if (emptyBehavior.equals(\"create\") && files.length == 0) {", "+", "+            log(\"Note: creating empty \"+archiveType+\" archive \" + zipFile, ", "+                Project.MSG_INFO);", "+            return false;", "+", "+        } else {", "+            // all other cases are handled correctly by Zip's method", "+            return super.isUpToDate(scanners, zipFile);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8b84d4da443e9cc3b795295ea12e5c4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Cvs.java", "commitBeforeChange": "1c38f4ed52ca23857b7b83ca909cd1748dea88d6", "commitAfterChange": "6035bbf18dc7df5472368d91d69de03b1819c800", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "          public void execute() throws BuildException", "signatureAfterChange": "          public void execute() throws BuildException", "diff": ["+", "+        // We can't do it ourselves as jCVS is GPLed, a third party task ", "+        // outside of jakarta repositories would be possible though (SB).", "-\tStringBuffer sb=new StringBuffer();", "-\tsb.append(\" cvs \");", "+        Commandline toExecute = new Commandline();", "+", "+        toExecute.setExecutable(\"cvs\");", "-            sb.append(\"-d \").append(cvsRoot).append(\" \");", "+            toExecute.addValue(\"-d\");", "+            toExecute.addValue(cvsRoot);", "-", "-        sb.append(noexec ? \"-n \" : \"\")", "-            .append(quiet  ? \"-q \" : \"\")", "-            .append(command).append(\" \");", "-\t\t", "-\tif (tag!=null)", "-            sb.append(\"-r \").append(tag).append(\" \");", "-", "-       if (date!=null)", "-            sb.append(\"-D \").append(date).append(\" \");", "+        if (noexec) {", "+            toExecute.addValue(\"-n\");", "+        }", "+        if (quiet) {", "+            toExecute.addValue(\"-q\");", "+        }", "+        toExecute.addValue(command);", "+        toExecute.addLine(cmd.getCommandline());", "-            sb.append(pack);", "+            toExecute.addValue(pack);", "-        run(sb.toString());", "+        Execute exe = new Execute(new LogStreamHandler(this, Project.MSG_INFO,", "+                                                       Project.MSG_WARN), ", "+                                  null);", "+", "+        exe.setAntRun(project);", "+        if (dest == null) dest = project.getBaseDir();", "+        exe.setWorkingDirectory(dest);", "+", "+        exe.setCommandline(toExecute.getCommandline());", "+        try {", "+            exe.execute();", "+        } catch (IOException e) {", "+            throw new BuildException(e, location);", "+        }"]}]}
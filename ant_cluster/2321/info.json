{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "473269c98776707cb738ea2ec173f2d9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02b3cabcf66edd7956bb3031abbb4610", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/archive/Expand.java", "commitBeforeChange": "6584b1cf3e65148be573d992b00b2f4b1ca46c45", "commitAfterChange": "fa273bcbb416d9048ccbf038eb05379d540f5727", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "      protected void extractFile( File srcF, File dir,                                 InputStream compressedInputStream,                                 String entryName,                                 Date entryDate, boolean isDirectory )         throws IOException, TaskException", "signatureAfterChange": "      protected void extractFile( final File dir,                                 final InputStream input,                                 final String entryName,                                 final Date date,                                 final boolean isDirectory )         throws IOException, TaskException", "diff": ["-    protected void extractFile( File srcF, File dir,", "-                                InputStream compressedInputStream,", "-                                String entryName,", "-                                Date entryDate, boolean isDirectory )", "+    protected void extractFile( final File dir,", "+                                final InputStream input,", "+                                final String entryName,", "+                                final Date date,", "+                                final boolean isDirectory )", "-        if( patternsets != null && patternsets.size() > 0 )", "+        final int size = m_patternsets.size();", "+        if( m_patternsets != null && size > 0 )", "-            String name = entryName;", "-            for( int v = 0; v < patternsets.size(); v++ )", "+            for( int i = 0; i < size; i++ )", "-                PatternSet p = (PatternSet)patternsets.get( v );", "+                PatternSet p = (PatternSet)m_patternsets.get( i );", "-                    for( int w = 0; w < incls.length; w++ )", "+                    for( int j = 0; j < incls.length; j++ )", "-                        boolean isIncl = ScannerUtil.match( incls[ w ], name );", "+                        boolean isIncl = ScannerUtil.match( incls[ j ], entryName );", "-                    for( int w = 0; w < excls.length; w++ )", "+                    for( int j = 0; j < excls.length; j++ )", "-                        boolean isExcl = ScannerUtil.match( excls[ w ], name );", "+                        boolean isExcl = ScannerUtil.match( excls[ j ], entryName );", "+", "-            if( !overwrite && f.exists()", "-                && f.lastModified() >= entryDate.getTime() )", "+            if( !m_overwrite && f.exists()", "+                && f.lastModified() >= date.getTime() )", "-                byte[] buffer = new byte[ 1024 ];", "-                int length = 0;", "-", "-                    while( ( length =", "-                        compressedInputStream.read( buffer ) ) >= 0 )", "-                    {", "-                        fos.write( buffer, 0, length );", "-                    }", "-", "-                    fos.close();", "-                    fos = null;", "+                    IOUtil.copy( input, fos );", "-                    if( fos != null )", "-                    {", "-                        try", "-                        {", "-                            fos.close();", "-                        }", "-                        catch( IOException e )", "-                        {", "-                        }", "-                    }", "+                    IOUtil.shutdownStream( fos );", "-            f.setLastModified( entryDate.getTime() );", "+            f.setLastModified( date.getTime() );", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "345062d8764b4adc2737a37507a24570", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/archive/Expand.java", "commitBeforeChange": "6584b1cf3e65148be573d992b00b2f4b1ca46c45", "commitAfterChange": "fa273bcbb416d9048ccbf038eb05379d540f5727", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "      protected void extractFile( File srcF, File dir,                                 InputStream compressedInputStream,                                 String entryName,                                 Date entryDate, boolean isDirectory )         throws IOException, TaskException", "signatureAfterChange": "      protected void extractFile( final File dir,                                 final InputStream input,                                 final String entryName,                                 final Date date,                                 final boolean isDirectory )         throws IOException, TaskException", "diff": ["-    protected void extractFile( File srcF, File dir,", "-                                InputStream compressedInputStream,", "-                                String entryName,", "-                                Date entryDate, boolean isDirectory )", "+    protected void extractFile( final File dir,", "+                                final InputStream input,", "+                                final String entryName,", "+                                final Date date,", "+                                final boolean isDirectory )", "-        if( patternsets != null && patternsets.size() > 0 )", "+        final int size = m_patternsets.size();", "+        if( m_patternsets != null && size > 0 )", "-            String name = entryName;", "-            for( int v = 0; v < patternsets.size(); v++ )", "+            for( int i = 0; i < size; i++ )", "-                PatternSet p = (PatternSet)patternsets.get( v );", "+                PatternSet p = (PatternSet)m_patternsets.get( i );", "-                    for( int w = 0; w < incls.length; w++ )", "+                    for( int j = 0; j < incls.length; j++ )", "-                        boolean isIncl = ScannerUtil.match( incls[ w ], name );", "+                        boolean isIncl = ScannerUtil.match( incls[ j ], entryName );", "-                    for( int w = 0; w < excls.length; w++ )", "+                    for( int j = 0; j < excls.length; j++ )", "-                        boolean isExcl = ScannerUtil.match( excls[ w ], name );", "+                        boolean isExcl = ScannerUtil.match( excls[ j ], entryName );", "+", "-            if( !overwrite && f.exists()", "-                && f.lastModified() >= entryDate.getTime() )", "+            if( !m_overwrite && f.exists()", "+                && f.lastModified() >= date.getTime() )", "-                byte[] buffer = new byte[ 1024 ];", "-                int length = 0;", "-", "-                    while( ( length =", "-                        compressedInputStream.read( buffer ) ) >= 0 )", "-                    {", "-                        fos.write( buffer, 0, length );", "-                    }", "-", "-                    fos.close();", "-                    fos = null;", "+                    IOUtil.copy( input, fos );", "-                    if( fos != null )", "-                    {", "-                        try", "-                        {", "-                            fos.close();", "-                        }", "-                        catch( IOException e )", "-                        {", "-                        }", "-                    }", "+                    IOUtil.shutdownStream( fos );", "-            f.setLastModified( entryDate.getTime() );", "+            f.setLastModified( date.getTime() );", "-"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e0ee9b199d0220349477d00698278b7d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d48c63c903ab7b7cdc99961a2095aa2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/modules/edit/DependentTargetChooser.java", "commitBeforeChange": "2ff201801b557593afe6cf9dcd4d4c4f4da65b39", "commitAfterChange": "cfa93603e73e635d31be01cdb31dc9959a5ea35c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private boolean checkDepends(String name, ACSTargetElement aTarget)", "signatureAfterChange": "         public void preselectTargets(String[] targetNames)", "diff": ["-    private boolean checkDepends(String name, ACSTargetElement aTarget) {", "-        String[] depend = aTarget.getDepends();", "-        for( int i= 0; i < depend.length; i++) {", "-            if (name.equalsIgnoreCase(depend[i])) return true;", "-        return false;", "+         */", "+        public void preselectTargets(String[] targetNames) {", "+            int i = 0, j = 0;", "+            int iDim = getRowCount();", "+            int jDim = targetNames.length;", "+            for (i = 0; i < iDim; i++) {", "+                String name = getTarget(i).getName();", "+                for( j= 0; j < jDim; j++) {", "+                    if (name.equalsIgnoreCase(targetNames[j])) _selected[i] = true;", "+                }", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f1d05fc89b1cd62dcd5a47f7500ef18", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "ec980be7345681968c93f0609e9a3fecb39b9753", "commitAfterChange": "fbb9886634198d8377104bef9ec697fadeb134df", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 34, "signatureBeforeChange": "     private boolean binaryEquals(File f1, File f2) throws IOException", "signatureAfterChange": "     private int binaryCompare(Resource r1, Resource r2) throws IOException", "diff": ["-    private boolean binaryEquals(File f1, File f2) throws IOException {", "-        if (f1.length() != f2.length()) {", "-            // different size =>false", "-            return false;", "-        }", "-", "+    private int binaryCompare(Resource r1, Resource r2) throws IOException {", "-            in1 = new BufferedInputStream(new FileInputStream(f1));", "-            in2 = new BufferedInputStream(new FileInputStream(f2));", "+            in1 = new BufferedInputStream(r1.getInputStream());", "+            in2 = new BufferedInputStream(r2.getInputStream());", "-            int expectedByte = in1.read();", "-            while (expectedByte != -1) {", "-                if (expectedByte != in2.read()) {", "-                    return false;", "+            for (int b1 = in1.read(); b1 != -1; b1 = in1.read()) {", "+                int b2 = in2.read();", "+                if (b1 != b2) {", "+                    return b1 > b2 ? 1 : -1;", "-                expectedByte = in1.read();", "-            if (in2.read() != -1) {", "-                return false;", "-            }", "-            return true;", "+            return in2.read() == -1 ? 0 : -1;"]}]}
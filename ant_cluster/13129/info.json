{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "38f297463eb74f20fcf573fe2569d312", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19c8d414b0814baf08b31c1d0fa5fcae", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/ManifestClassPathTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "      public void testDifferentWindowsDrive()", "signatureAfterChange": "      @Test     public void testDifferentWindowsDrive()", "diff": ["+    @Test", "-        if (!Os.isFamily(\"windows\")) {", "-            System.out.println(\"Test with drive letters only run on windows\");", "-        } else {", "-            // the lines below try to find a drive name different than the one containing the temp dir", "-            // if the temp dir is C will try to use D", "-            // if the temp dir is on D or other will try to use C", "-            File tmpdir = new File(System.getProperty(\"java.io.tmpdir\"));", "-            String driveLetter = \"C\";", "-            try {", "-                String tmpCanonicalPath = tmpdir.getCanonicalPath();", "-                driveLetter = tmpCanonicalPath.substring(1).toUpperCase();", "-            } catch (IOException ioe) {", "-                System.out.println(\"exception happened getting canonical path of java.io.tmpdir : \" + ioe.getMessage());", "-            }", "-            String altDriveLetter = null;", "-            try {", "-                if (\"C\".equals(driveLetter)) {", "-                    altDriveLetter = \"D\";", "-                } else {", "-                    altDriveLetter = \"C\";", "-                }", "-                new java.io.File(altDriveLetter + \":/foo.txt\").getCanonicalPath();", "-            } catch (java.io.IOException e) {", "-                System.out.println(\"drive \" + altDriveLetter + \": doesn't exist or is not ready,\"", "-                                   + \" skipping test\");", "-                return;", "-            }", "-            project.setProperty(\"altDriveLetter\", altDriveLetter);", "-            expectBuildExceptionContaining(\"testDifferentDrive\",", "-                                           \"different drive\",", "-                                           \"No suitable relative path from \");", "-            assertPropertyUnset(\"cp\");", "+    \tAssume.assumeTrue(\"Test with drive letters only run on windows\", Os.isFamily(\"windows\"));", "+        // the lines below try to find a drive name different than the one containing the temp dir", "+        // if the temp dir is C will try to use D", "+        // if the temp dir is on D or other will try to use C", "+        File tmpdir = new File(System.getProperty(\"java.io.tmpdir\"));", "+        String driveLetter = \"C\";", "+        try {", "+            String tmpCanonicalPath = tmpdir.getCanonicalPath();", "+            driveLetter = tmpCanonicalPath.substring(0, 1).toUpperCase();", "+        } catch (IOException ioe) {", "+            System.out.println(\"exception happened getting canonical path of java.io.tmpdir : \" + ioe.getMessage());", "+        String altDriveLetter = null;", "+        try {", "+            if (\"C\".equals(driveLetter)) {", "+                altDriveLetter = \"D\";", "+            } else {", "+                altDriveLetter = \"C\";", "+            }", "+            new java.io.File(altDriveLetter + \":/foo.txt\").getCanonicalPath();", "+        } catch (java.io.IOException e) {", "+        \tAssume.assumeNoException(\"Drive \" + altDriveLetter + \": doesn't exist or is not ready\", e);", "+        }", "+        buildRule.getProject().setProperty(\"altDriveLetter\", altDriveLetter);", "+        ", "+        try {", "+\t\t\tbuildRule.executeTarget(\"testDifferentDrive\");", "+\t\t\tfail(\"Build exception should have been thrown on no alternative drive\");", "+\t\t} catch (BuildException ex) {", "+\t\t\tassertContains(\"No suitable relative path from \", ex.getMessage());", "+\t\t}", "+        ", "+        assertNull(buildRule.getProject().getProperty(\"cp\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82b683aedea5bcd518b787227d980216", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "     private AttributeSetter createAttributeSetter(final Method m,                                                   Class<?> arg,                                                   final String attrName)", "signatureAfterChange": "     private AttributeSetter createAttributeSetter(final Method m,                                                   final Class<?> arg,                                                   final String attrName)", "diff": ["-                                                  Class<?> arg,", "+                                                  final Class<?> arg,", "-                public void set(Project p, Object parent, String value)", "+                @Override", "+\t\t\t\tpublic void set(final Project p, final Object parent, final String value)", "-                public void set(Project p, Object parent, String value)", "+                @Override", "+\t\t\t\tpublic void set(final Project p, final Object parent, final String value)", "-                public void set(Project p, Object parent, String value)", "+                @Override", "+\t\t\t\tpublic void set(final Project p, final Object parent, final String value)", "-                public void set(Project p, Object parent, String value)", "+                @Override", "+\t\t\t\tpublic void set(final Project p, final Object parent, final String value)", "-                public void set(Project p, Object parent, String value)", "+                @Override", "+\t\t\t\tpublic void set(final Project p, final Object parent, final String value)", "-                    } catch (ClassNotFoundException ce) {", "+                    } catch (final ClassNotFoundException ce) {", "-                public void set(Project p, Object parent, String value)", "+                @Override", "+\t\t\t\tpublic void set(final Project p, final Object parent, final String value)", "-                void set(Project p, Object parent, String value) throws InvocationTargetException,", "+                @Override", "+\t\t\t\tvoid set(final Project p, final Object parent, final String value) throws InvocationTargetException,", "-                    m.invoke(parent, new Object[] { new FileResource(p, p.resolveFile(value)) });", "+                    m.invoke(parent, new Object[] {new FileResource(p, p.resolveFile(value))});", "-                public void set(Project p, Object parent, String value)", "+                @Override", "+\t\t\t\tpublic void set(final Project p, final Object parent, final String value)", "-                        EnumeratedAttribute ea = (EnumeratedAttribute) reflectedArg.newInstance();", "+                        final EnumeratedAttribute ea = (EnumeratedAttribute) reflectedArg.newInstance();", "-                    } catch (InstantiationException ie) {", "+                    } catch (final InstantiationException ie) {", "-        AttributeSetter setter = getEnumSetter(reflectedArg, m, arg);", "+        final AttributeSetter setter = getEnumSetter(reflectedArg, m, arg);", "-                public void set(Project p, Object parent, String value)", "+                @Override", "+\t\t\t\tpublic void set(final Project p, final Object parent, final String value)", "-                    } catch (NumberFormatException e) {", "+                    } catch (final NumberFormatException e) {", "-                    } catch (InvocationTargetException e) {", "+                    } catch (final InvocationTargetException e) {", "-                    } catch (IllegalAccessException e) {", "+                    } catch (final IllegalAccessException e) {", "-                    } catch (Exception e) {", "+                    } catch (final Exception e) {", "-        } catch (NoSuchMethodException nme) {", "+        } catch (final NoSuchMethodException nme) {", "-            } catch (NoSuchMethodException nme2) {", "+            } catch (final NoSuchMethodException nme2) {", "-            public void set(Project p, Object parent, String value)", "+            @Override", "+\t\t\tpublic void set(final Project p, final Object parent, final String value)", "-                    Object[] args = finalIncludeProject", "+                    final Object[] args = finalIncludeProject", "-                    Object attribute = finalConstructor.newInstance(args);", "+                    final Object attribute = finalConstructor.newInstance(args);", "-                } catch (InvocationTargetException e) {", "-                    Throwable cause = e.getCause();", "+                } catch (final InvocationTargetException e) {", "+                    final Throwable cause = e.getCause();", "-                } catch (InstantiationException ie) {", "+                } catch (final InstantiationException ie) {"]}]}
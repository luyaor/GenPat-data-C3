{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "890683f050a495c02767eb1b521e9879", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e7ed0bd08e14eaf4bdc6f35725049a8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Tar.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     protected boolean check(ResourceCollection rc)", "signatureAfterChange": "     protected boolean check(final ResourceCollection rc)", "diff": ["-    protected boolean check(ResourceCollection rc) {", "+    protected boolean check(final ResourceCollection rc) {", "-            FileSet fs = (FileSet) rc;", "+            final FileSet fs = (FileSet) rc;", "-            HashSet basedirs = new HashSet();", "-            HashMap basedirToFilesMap = new HashMap();", "-            for (Resource res : rc) {", "-                FileResource r = ResourceUtils", "+            final Set<File> basedirs = new HashSet<File>();", "+            final Map<File, List<String>> basedirToFilesMap = new HashMap<File, List<String>>();", "+            for (final Resource res : rc) {", "+                final FileResource r = ResourceUtils", "-                Vector files = (Vector) basedirToFilesMap.get(base);", "+                List<String> files = basedirToFilesMap.get(base);", "-                    files = new Vector();", "+                    files = new Vector<String>();", "-            Iterator iter = basedirs.iterator();", "-            while (iter.hasNext()) {", "-                File base = (File) iter.next();", "-                Vector f = (Vector) basedirToFilesMap.get(base);", "-                String[] files = (String[]) f.toArray(new String[f.size()]);", "-                upToDate &=", "-                    check(base == Copy.NULL_FILE_PLACEHOLDER ? null : base,", "-                          files);", "+            for(final File base : basedirs) {", "+            \tfinal File tmpBase = base == Copy.NULL_FILE_PLACEHOLDER ? null : base;", "+                final List<String> files = basedirToFilesMap.get(base);", "+\t\t\t\tcheck(tmpBase, files);", "-            Iterator<Resource> iter = rc.iterator();", "+            final Iterator<Resource> iter = rc.iterator();", "-                Resource r = iter.next();", "+                final Resource r = iter.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "930ae60f04a5802fc2db1dc26562f6d0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "d25488cbbb28cf25e1f91f714c70999fd105432d", "commitAfterChange": "3d706ab8188a674936880b6f4530b0cf3991758b", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "     private static Map removeDuplicateTargets(Map targets)", "signatureAfterChange": "     private static Map<String, Target> removeDuplicateTargets(Map<String, Target> targets)", "diff": ["-    private static Map removeDuplicateTargets(Map targets) {", "-        Map locationMap = new HashMap();", "-        for (Iterator i = targets.entrySet().iterator(); i.hasNext();) {", "-            Map.Entry entry = (Map.Entry) i.next();", "-            String name = (String) entry.getKey();", "-            Target target = (Target) entry.getValue();", "-            Target otherTarget =", "-                (Target) locationMap.get(target.getLocation());", "+    private static Map<String, Target> removeDuplicateTargets(Map<String, Target> targets) {", "+        Map<Location, Target> locationMap = new HashMap<Location, Target>();", "+        for (Entry<String, Target> entry : targets.entrySet()) {", "+            String name = entry.getKey();", "+            Target target = entry.getValue();", "+            Target otherTarget = locationMap.get(target.getLocation());", "-            //  b) location is in map, but it's name is longer", "+            //  b) location is in map, but its name is longer", "-        Map ret = new HashMap();", "-        for (Iterator i = locationMap.values().iterator(); i.hasNext();) {", "-            Target target = (Target) i.next();", "+        Map<String, Target> ret = new HashMap<String, Target>();", "+        for (Target target : locationMap.values()) {"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "42c210e1cf1c555a850886e2e2f1dfb8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a469b129d772ac3ea9a54d0adbcf3d4f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "3477bbf6474cdd2b70b12eb638e64415a4f1c2ec", "commitAfterChange": "134d95afef9b42cf08f2eccb077b97525ac38034", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "      private void endBlock() throws IOException", "signatureAfterChange": "      private void endBlock() throws IOException", "diff": ["-        blockCRC = mCrc.getFinalCRC();", "-        combinedCRC = (combinedCRC << 1) | (combinedCRC >>> 31);", "-        combinedCRC ^= blockCRC;", "+        this.blockCRC = this.crc.getFinalCRC();", "+        this.combinedCRC = (this.combinedCRC << 1) | (this.combinedCRC >>> 31);", "+        this.combinedCRC ^= this.blockCRC;", "+", "+        // empty block at end of file", "+        if (this.last == -1) {", "+            return;", "+        }", "-        doReversibleTransformation();", "+        blockSort();", "-        bsPutUChar(0x31);", "-        bsPutUChar(0x41);", "-        bsPutUChar(0x59);", "-        bsPutUChar(0x26);", "-        bsPutUChar(0x53);", "-        bsPutUChar(0x59);", "+        bsPutUByte(0x31);", "+        bsPutUByte(0x41);", "+        bsPutUByte(0x59);", "+        bsPutUByte(0x26);", "+        bsPutUByte(0x53);", "+        bsPutUByte(0x59);", "-        bsPutint(blockCRC);", "+        bsPutInt(this.blockCRC);", "-        if (blockRandomised) {", "+        if (this.blockRandomised) {", "-            nBlocksRandomised++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b65c97dfb53b1f0f2a5077fc3c7385db", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "228fb9839c21a0a853598e114faca72c8e9340e7", "commitAfterChange": "9922008d657c72235c402343fd88847b044014ad", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      private void endBlock() throws IOException", "signatureAfterChange": "      private void endBlock() throws IOException", "diff": ["-        blockCRC = mCrc.getFinalCRC();", "-        combinedCRC = (combinedCRC << 1) | (combinedCRC >>> 31);", "-        combinedCRC ^= blockCRC;", "+        this.blockCRC = this.crc.getFinalCRC();", "+        this.combinedCRC = (this.combinedCRC << 1) | (this.combinedCRC >>> 31);", "+        this.combinedCRC ^= this.blockCRC;", "-        // If the stream was empty we must skip the rest of this method.", "-        // See bug#32200.", "-        if (last == -1) {", "-\t    return;", "+        // empty block at end of file", "+        if (this.last == -1) {", "+            return;", "-        ", "+", "-        doReversibleTransformation();", "+        blockSort();", "-          A 6-byte block header, the value chosen arbitrarily", "-          as 0x314159265359 :-).  A 32 bit value does not really", "-          give a strong enough guarantee that the value will not", "-          appear by chance in the compressed datastream.  Worst-case", "-          probability of this event, for a 900k block, is about", "-          2.0e-3 for 32 bits, 1.0e-5 for 40 bits and 4.0e-8 for 48 bits.", "-          For a compressed file of size 100Gb -- about 100000 blocks --", "-          only a 48-bit marker will do.  NB: normal compression/", "-          decompression do *not* rely on these statistical properties.", "-          They are only important when trying to recover blocks from", "-          damaged files.", "-        */", "-        bsPutUChar(0x31);", "-        bsPutUChar(0x41);", "-        bsPutUChar(0x59);", "-        bsPutUChar(0x26);", "-        bsPutUChar(0x53);", "-        bsPutUChar(0x59);", "+         * A 6-byte block header, the value chosen arbitrarily as 0x314159265359", "+         * :-). A 32 bit value does not really give a strong enough guarantee", "+         * that the value will not appear by chance in the compressed", "+         * datastream. Worst-case probability of this event, for a 900k block,", "+         * is about 2.0e-3 for 32 bits, 1.0e-5 for 40 bits and 4.0e-8 for 48", "+         * bits. For a compressed file of size 100Gb -- about 100000 blocks --", "+         * only a 48-bit marker will do. NB: normal compression/ decompression", "+         * donot rely on these statistical properties. They are only important", "+         * when trying to recover blocks from damaged files.", "+         */", "+        bsPutUByte(0x31);", "+        bsPutUByte(0x41);", "+        bsPutUByte(0x59);", "+        bsPutUByte(0x26);", "+        bsPutUByte(0x53);", "+        bsPutUByte(0x59);", "-        bsPutint(blockCRC);", "+        bsPutInt(this.blockCRC);", "-        if (blockRandomised) {", "+        if (this.blockRandomised) {", "-            nBlocksRandomised++;"]}]}
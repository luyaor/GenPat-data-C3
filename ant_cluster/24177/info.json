{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a407b64c5a002890f137e76b6660a65b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c61e7666dbeddee0765badc79d9d426a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/SSHExec.java", "commitBeforeChange": "de5ed88e5e59cd9eb7f0c91714b1551635aea835", "commitAfterChange": "cba01025c08dc79ce71c75c884e3837219a070aa", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                    throw new BuildException(e);", "+                    if (getFailonerror()) {", "+                        throw new BuildException(e);", "+                    } else {", "+                        log(\"Caught exception: \" + e.getMessage(),", "+                            Project.MSG_ERR);", "+                    }", "-            throw new BuildException(e);", "+            if (getFailonerror()) {", "+                throw new BuildException(e);", "+            } else {", "+                log(\"Caught exception: \" + e.getMessage(), Project.MSG_ERR);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df5ae7151e075657e3ebbc7c096a0861", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XmlProperty.java", "commitBeforeChange": "d1019d39f4e2987a46f2a43d4306aac00ce56467", "commitAfterChange": "c5fa091ce5dbdf1ddaa2b5f03f9c7ad3c6476535", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void execute()             throws BuildException", "signatureAfterChange": "     public void execute()             throws BuildException", "diff": ["-            configurationStream =", "-                    new BufferedInputStream(new FileInputStream(src));", "+            log(\"Loading \" + src.getAbsolutePath(), Project.MSG_VERBOSE);", "+           ", "+            if (src.exists()) {", "-            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();", "+              configurationStream =", "+                      new BufferedInputStream(new FileInputStream(src));", "-            factory.setValidating(validate);", "-            factory.setNamespaceAware(false);", "+              DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();", "-            Element topElement = factory.newDocumentBuilder().parse(configurationStream).getDocumentElement();", "+              factory.setValidating(validate);", "+              factory.setNamespaceAware(false);", "-            // Keep a hashtable of attributes added by this task.", "-            // This task is allow to override its own properties", "-            // but not other properties.  So we need to keep track", "-            // of which properties we've added.", "-            addedAttributes = new Hashtable();", "+              Element topElement = factory.newDocumentBuilder().parse(configurationStream).getDocumentElement();", "-            if (keepRoot) {", "-                addNodeRecursively(topElement, prefix, null);", "-            } else {", "-                NodeList topChildren = topElement.getChildNodes();", "-                int numChildren = topChildren.getLength();", "-                for (int i = 0; i < numChildren; i++) {", "+              // Keep a hashtable of attributes added by this task.", "+              // This task is allow to override its own properties", "+              // but not other properties.  So we need to keep track", "+              // of which properties we've added.", "+              addedAttributes = new Hashtable();", "+", "+              if (keepRoot) {", "+                  addNodeRecursively(topElement, prefix, null);", "+              } else {", "+                  NodeList topChildren = topElement.getChildNodes();", "+                  int numChildren = topChildren.getLength();", "+                  for (int i = 0; i < numChildren; i++) {", "-                }", "-            }", "+                  }", "+              }", "+            } else {", "+                log(\"Unable to find property file: \" + src.getAbsolutePath(),", "+                    Project.MSG_VERBOSE);", "+            }", "+            "]}]}
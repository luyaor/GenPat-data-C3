{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ab566732b6e6d64eafc0d85398977150", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "101b3b74527e718c295d338f4c0f6780", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "7d7fc053b7a9233664ffc5635354025a41e9cccd", "commitAfterChange": "559fe1af187c27c6253ef3a1b639783f0a372f50", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private Class getClassFromStream(InputStream stream, String classname)                  throws IOException", "signatureAfterChange": "     private Class getClassFromStream(InputStream stream, String classname)                  throws IOException", "diff": ["-        return defineClass(classname, classData, 0, classData.length); ", "+        // Simply put:", "+        // defineClass(classname, classData, 0, classData.length, Project.class.getProtectionDomain());", "+        // Made more elaborate to be 1.1-safe.", "+        if (defineClassProtectionDomain != null) {", "+            try {", "+                Object domain = getProtectionDomain.invoke(Project.class, new Object[0]);", "+                Object[] args = new Object[] {classname, classData, new Integer(0), new Integer(classData.length), domain};", "+                return (Class)defineClassProtectionDomain.invoke(this, args);", "+            }", "+            catch (InvocationTargetException ite) {", "+                Throwable t = ite.getTargetException();", "+                if (t instanceof ClassFormatError) {", "+                    throw (ClassFormatError)t;", "+                }", "+                else {", "+                    throw new IOException(t.toString());", "+                }", "+            }", "+            catch (Exception e) {", "+                throw new IOException(e.toString());", "+            }", "+        }", "+        else {", "+            return defineClass(classname, classData, 0, classData.length); ", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46581c3623cd5766d4035a4e0d0d084b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/filterreaders/src/main/org/apache/tools/ant/filters/ClassConstants.java", "commitBeforeChange": "131519b962655478e6cf36802ace9d0f702aa823", "commitAfterChange": "f9bcdd7713370a79393e749e0e55fada438faa4a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public final int read() throws IOException", "signatureAfterChange": "     public final int read() throws IOException", "diff": ["-                final StringBuffer sb = JavaClassHelper.getConstants(bytes);", "-                if (sb.length() > 0) {", "-                    queuedData = sb.toString();", "-                    return read();", "+                try {", "+                    final Class javaClassHelper =", "+                        Class.forName(JAVA_CLASS_HELPER);", "+                    if (javaClassHelper != null) {", "+                        final Class params[] = {", "+                            byte[].class", "+                        };", "+                        final Method getConstants =", "+                            javaClassHelper.getMethod(\"getConstants\", params);", "+                        final Object[] args = {", "+                            bytes", "+                        };", "+                        // getConstants is a staic method, no need to", "+                        // pass in the object", "+                        final StringBuffer sb = (StringBuffer)", "+                                getConstants.invoke(null, args);", "+                        if (sb.length() > 0) {", "+                            queuedData = sb.toString();", "+                            return read();", "+                        }", "+                    }", "+                } catch (ClassNotFoundException cnfe) {", "+                    throw new IOException(cnfe.getMessage());", "+                } catch (NoSuchMethodException nsme) {", "+                    throw new IOException(nsme.getMessage());", "+                } catch (IllegalAccessException iae) {", "+                    throw new IOException(iae.getMessage());", "+                } catch (IllegalArgumentException iarge) {", "+                    throw new IOException(iarge.getMessage());", "+                } catch (InvocationTargetException ite) {", "+                    throw new IOException(ite.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5da7766abb667a1af57d068614d1d26f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "a15d6eedc866ee94cf4f47222fafee48abbecfcb", "commitAfterChange": "e9f55d77d1044dd0c21dd976b57b6787528202bd", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private static void processNestedProperties(Project project,                                                 Object target,                                                 Element targetElement)         throws BuildException", "signatureAfterChange": "      private static void processNestedProperties(Project project,                                                 Object target,                                                 Element targetElement)         throws BuildException", "diff": ["+", "+            if (node.getNodeType() == Node.TEXT_NODE) {", "+                String text = ((Text)node).getData();", "+                try {", "+                    Method addProp = targetClass.getMethod(", "+                        \"addText\", new Class[]{\"\".getClass()});", "+                    Object child = addProp.invoke(target, new Object[] {text});", "+                } catch (NoSuchMethodException nsme) {", "+                    if (text.trim().length() > 0)", "+                        throw new BuildException(targetClass + ", "+                            \" does not support nested text elements\");", "+                } catch (InvocationTargetException ite) {", "+                    throw new BuildException(ite.getMessage());", "+                } catch (IllegalAccessException iae) {", "+                    throw new BuildException(iae.getMessage());", "+                }", "+            }"]}]}
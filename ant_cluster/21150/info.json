{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "25caf78c5fe258ee56fd9f74f9763815", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22d759917e2ad0d7fdb061576226880a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/HostInfo.java", "commitBeforeChange": "b4877ac5ef09c63fc1055c96b761da4282a17856", "commitAfterChange": "ff51ff34125ef0dcfe67905aecd83de7ee9a615a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private InetAddress selectBestAddress(InetAddress bestSoFar,             InetAddress current)", "signatureAfterChange": "      private InetAddress selectBestAddress(InetAddress bestSoFar,             InetAddress current)", "diff": ["-            if (current.isLoopbackAddress()) {", "+            if (current == null || current.isLoopbackAddress()) {", "-                if (best.isLoopbackAddress() || best.isLinkLocalAddress()) {", "+                // address with hostname resolved considered better than", "+                // address without hostname", "+                if (best.isLoopbackAddress()", "+                        || best.isLinkLocalAddress()", "+                        || !hasHostName(best)) {", "-                // current is a global address, and therefore best (at least", "-                // equally well)", "-                best = current;", "+                // current is a \"Global address\", considered better than ", "+                // site local (and better than link local, loopback)", "+                // address with hostname resolved considered better than", "+                // address without hostname", "+                if (best.isLoopbackAddress()", "+                        || best.isLinkLocalAddress()", "+                        || best.isSiteLocalAddress()", "+                        || !hasHostName(best)) {", "+                    best = current;", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cd76bae0dda7a25f4d2a369bcb96837", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "0efc2f817257f69d7cdc67c016b1caac68465f1d", "commitAfterChange": "939a6bbf2fb97ec29ecf79c86013846656d8751c", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "         public Object create()", "signatureAfterChange": "         public Object create()", "diff": ["-                        \"Not allowed to use the polymorphic form\"", "-                        + \" for this element\");", "+                            \"Not allowed to use the polymorphic form for this element\");", "-                ComponentHelper helper =", "-                    ComponentHelper.getComponentHelper(project);", "+                ComponentHelper helper = ComponentHelper.getComponentHelper(project);", "-                    throw new BuildException(", "-                        \"Unable to create object of type \" + polyType);", "+                    throw new BuildException(\"Unable to create object of type \" + polyType);", "-                nestedObject = nestedCreator.create(", "-                    project, parent, nestedObject);", "+                nestedObject = nestedCreator.create(project, parent, nestedObject);", "-                if (polyType != null) {", "-                    throw new BuildException(", "-                        \"Invalid type used \" + polyType);", "+                if (polyType == null) {", "+                    throw ex;", "-                throw ex;", "+                throw new BuildException(\"Invalid type used \" + polyType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0866a0c906d6546e2e0f5d27d878891", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XSLTProcess.java", "commitBeforeChange": "dc2e0846ac0b71caf2bfc3e6b24042c87062ebc8", "commitAfterChange": "1e57e83036edb25a9106c8eb30bbb0183a6f44ed", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 18, "signatureBeforeChange": "          protected XSLTLiaison getLiaison()", "signatureAfterChange": "          protected XSLTLiaison getLiaison()", "diff": ["-            try {", "-                setProcessor(\"trax\");", "-            } catch (Throwable e1) {", "+            if (processor != null) {", "-                    setProcessor(\"xslp\");", "-                } catch (Throwable e2) {", "+                    resolveProcessor(processor);", "+                } catch (Exception e) {", "+                    throw new BuildException(e);", "+                }", "+            } else {", "+                try {", "+                    resolveProcessor(\"trax\");", "+                } catch (Throwable e1) {", "-                        setProcessor(\"xalan\");", "-                    } catch (Throwable e3) {", "-                        e2.printStackTrace();", "-                        e3.printStackTrace();", "-                        throw new BuildException(e1);", "+                        resolveProcessor(\"xslp\");", "+                    } catch (Throwable e2) {", "+                        try {", "+                            resolveProcessor(\"xalan\");", "+                        } catch (Throwable e3) {", "+                            e3.printStackTrace();", "+                            e2.printStackTrace();", "+                            throw new BuildException(e1);", "+                        }"]}]}
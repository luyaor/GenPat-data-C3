{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "634e203349f9b19bef1e3158109c13fb", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "524d098bc43454b14091340aa5241a8b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/frontends/EmbeddedAnt.java", "commitBeforeChange": "8cab56ee0ec0c658d0dec674d305630eb8e88bf4", "commitAfterChange": "f5ba55efa18fa862c2a4f5762198c2a9481f287e", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private File resolveDirectory( final File baseDir, final String dir, final String name )         throws Exception", "signatureAfterChange": "     private File[] buildPath( final File baseDir,                               final String path,                               final String defaultPath,                               final String name )         throws Exception", "diff": ["-    private File resolveDirectory( final File baseDir, final String dir, final String name )", "+    private File[] buildPath( final File baseDir,", "+                              final String path,", "+                              final String defaultPath,", "+                              final String name )", "-        final File file = FileUtil.resolveFile( baseDir, dir );", "-        checkDirectory( file, name );", "-        return file;", "+        // Build the canonical list of files", "+        final ArrayList files = new ArrayList();", "+", "+        // Add the default path", "+        files.add( FileUtil.resolveFile( baseDir, defaultPath ) );", "+", "+        // Add the additional path", "+        if( path != null )", "+        {", "+            final String[] split = StringUtil.split( path, File.pathSeparator );", "+            for( int i = 0; i < split.length; i++ )", "+            {", "+                final String s = split[ i ];", "+                final File file = new File( s ).getAbsoluteFile();", "+                files.add( file );", "+            }", "+        }", "+", "+        // Check each one", "+        for( int i = 0; i < files.size(); i++ )", "+        {", "+            File file = (File)files.get( i );", "+            checkDirectory( file, name );", "+        }", "+", "+        return (File[])files.toArray( new File[ files.size() ] );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f7f2cc14a7f08714e35a65c97251e80", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/antlib/AntLibManager.java", "commitBeforeChange": "26d9c6536e7e605b92a6e4b20eb0cd25e116a689", "commitAfterChange": "f19f07d6e4c72f241057ecfc32d80be21201bbf7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void addLibPath(String libraryId, URL libPath)          throws AntLibException", "signatureAfterChange": "     public void addLibPath(String libraryId, URL libPath)          throws AntLibException", "diff": ["-        System.out.println(\"Adding path \" + libPath + \" for \" + libraryId);", "-        libPaths.add(libPath);", "+", "+        List newPaths = new ArrayList();", "+        newPaths.add(libPath);", "+        if (libPath.getProtocol().equals(\"file\")) {", "+            File dir = new File(libPath.getFile());", "+            if (dir.isDirectory()) {", "+                try {", "+                    URL[] pathURLs = LoaderUtils.getLocationURLs(libPath,", "+                        null, ANTLIB_EXTENSIONS);", "+                    for (int i = 0; i < pathURLs.length; ++i) {", "+                        newPaths.add(pathURLs[i]);", "+                    }", "+                } catch (MalformedURLException e) {", "+                    // ignore and just use what we were given", "+                }", "+            }", "+        }", "-        if (antLibrary != null) {", "-            antLibrary.addLibraryURL(libPath);", "+        for (Iterator i = newPaths.iterator(); i.hasNext();) {", "+            URL newPath = (URL) i.next();", "+            libPaths.add(newPath);", "+            if (antLibrary != null) {", "+                antLibrary.addLibraryURL(newPath);", "+            }"]}]}
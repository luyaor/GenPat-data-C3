{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "981d53e87c8ba3f61d8e7c1bc39d187d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78e77ec560b45690f43d9dd7fcc79ebf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "96e6561e659a24f1e2122d884e83561327cb0f48", "commitAfterChange": "88dcebf815f27d9b16735745605342963870010e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private void catFiles(File base, String[] files)", "signatureAfterChange": "         public void setFile(File file)", "diff": ["-     */", "-    private void catFiles(File base, String[] files) {", "-", "-        // First, create a list of absolute paths for the input files.", "-        Vector inputFileNames = new Vector();", "-        for (int i = 0; i < files.length; i++) {", "-", "-            File current = new File(base, files[i]);", "-", "-            // Make sure the file exists. This will rarely fail when", "-            // using file sets, but it could be rather common when", "-            // using file lists.", "-            if (!current.exists()) {", "-                // File does not exist, log an error and continue.", "-                log(\"File \" + current + \" does not exist.\", ", "-                    Project.MSG_ERR);", "-", "-            inputFileNames.addElement(current.getAbsolutePath());", "-        final int len = inputFileNames.size();", "-        if (len == 0) {", "-            log(\"Warning: Could not find any of the files specified \" +", "-                \"in concat task.\", Project.MSG_WARN);", "-            return;", "-        }", "-        String[] input = new String[len];", "-        inputFileNames.copyInto(input);", "-        // Next, perform the concatenation.", "-        if (encoding == null) {", "-            OutputStream os = null;", "-            InputStream is = null;", "-            try {", "-                if (destinationFile == null) {", "-                    // Log using WARN so it displays in 'quiet' mode.", "-                    os = new LogOutputStream(this, Project.MSG_WARN);", "-                    os = ", "-                        new FileOutputStream(destinationFile.getAbsolutePath(),", "-                                             append);", "-                    ", "-                    // This flag should only be recognized for the first", "-                    // file. In the context of a single 'cat', we always", "-                    // want to append.", "-                    append = true;", "-                }", "-            ", "-                for (int i = 0; i < len; i++) {", "-", "-                    // Make sure input != output.", "-                    if (destinationFile != null &&", "-                        destinationFile.getAbsolutePath().equals(input[i])) {", "-                        throw new BuildException(\"Input file \\\"\" ", "-                            + destinationFile.getName() ", "-                            + \"\\\" is the same as the output file.\");", "-                    }", "-", "-                    is = new FileInputStream(input[i]);", "-                    byte[] buffer = new byte[8192];", "-                    while (true) {", "-                        int bytesRead = is.read(buffer);", "-                        if (bytesRead == -1) { // EOF", "-                            break;", "-                        }", "-                        ", "-                        // Write the read data.", "-                        os.write(buffer, 0, bytesRead);", "-                    }", "-                    os.flush();", "-                    is.close();", "-                    is = null;", "-                }", "-            } catch (IOException ioex) {", "-                throw new BuildException(\"Error while concatenating: \"", "-                                         + ioex.getMessage(), ioex);", "-            } finally {", "-                if (is != null) {", "-                    try {", "-                        is.close();", "-                    } catch (Exception ignore) {}", "-                }", "-                if (os != null) {", "-                    try {", "-                        os.close();", "-                    } catch (Exception ignore) {}", "-        } else { // user specified encoding", "-            Writer out = null;", "-            BufferedReader in = null;", "-", "-            try {", "-                if (destinationFile == null) {", "-                    // Log using WARN so it displays in 'quiet' mode.", "-                    out = new OutputStreamWriter(", "-                              new LogOutputStream(this, Project.MSG_WARN));", "-                    out = new OutputStreamWriter(", "-                              new FileOutputStream(destinationFile", "-                                                   .getAbsolutePath(),", "-                                                   append),", "-                              encoding);", "-                    ", "-                    // This flag should only be recognized for the first", "-                    // file. In the context of a single 'cat', we always", "-                    // want to append.", "-                    append = true;", "-                for (int i = 0; i < len; i++) {", "-                    in = new BufferedReader(", "-                            new InputStreamReader(new FileInputStream(input[i]), ", "-                                encoding));", "-                    String line;", "-                    char[] buffer = new char[4096];", "-                    while (true) {", "-                        int charsRead = in.read(buffer);", "-                        if (charsRead == -1) { // EOF", "-                            break;", "-                        }", "-                        ", "-                        // Write the read data.", "-                        out.write(buffer, 0, charsRead);", "-                    }", "-                    out.flush();", "-                    in.close();", "-                    in = null;", "-                }", "-            } catch (IOException ioe) {", "-                throw new BuildException(\"Error while concatenating: \" ", "-                                         + ioe.getMessage(), ioe);", "-            } finally {", "-                // Close resources.", "-                if (in != null) {", "-                    try {", "-                        in.close();", "-                    } catch (Exception ignore) {}", "-                }", "-                if (out != null) {", "-                    try {", "-                        out.close();", "-                    } catch (Exception ignore) {}", "-                }", "+         */", "+        public void setFile(File file) {", "+            // non-existing files are not allowed", "+            if (!file.exists()) {", "+                throw new BuildException(\"File \" + file + \" does not exist.\");", "+            }", "+", "+            BufferedReader reader = null;", "+            try {", "+                reader = new BufferedReader(new FileReader(file));", "+                value = fileUtils.readFully(reader);", "+            } catch (IOException ex) {", "+                throw new BuildException(ex);", "+            } finally {", "+                if (reader != null) {", "+                    try {reader.close();} catch (Throwable t) {}", "+                }", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8046a3a97822a47793f51a4db4c31a02", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Tar.java", "commitBeforeChange": "3518a35d4755b8d411ac9b8e54ed5ab43248b2fc", "commitAfterChange": "7efc06af49ac85c35b17dff638c8f28ca73eba78", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        if (baseDir != null) {", "-            if (!baseDir.exists()) {", "-                throw new BuildException(\"basedir does not exist!\", location);", "-            }", "-", "-            // add the main fileset to the list of filesets to process.", "-            TarFileSet mainFileSet = new TarFileSet(fileset);", "-            mainFileSet.setDir(baseDir);", "-            filesets.addElement(mainFileSet);", "-        }", "-", "-        if (filesets.size() == 0) {", "-            throw new BuildException(\"You must supply either a basdir attribute or some nested filesets.\",", "-                                     location);", "-        }", "-", "-        // check if tr is out of date with respect to each", "-        // fileset", "-        boolean upToDate = true;", "-        for (Enumeration e = filesets.elements(); e.hasMoreElements();) {", "-            TarFileSet fs = (TarFileSet)e.nextElement();", "-            String[] files = fs.getFiles(project);", "-", "-            if (!archiveIsUpToDate(files)) {", "-                upToDate = false;", "-            }", "-", "-            for (int i = 0; i < files.length; ++i) {", "-                if (tarFile.equals(new File(fs.getDir(project), files[i]))) {", "-                    throw new BuildException(\"A tar file cannot include itself\", location);", "-                }", "-            }", "-        }", "-", "-        if (upToDate) {", "-            log(\"Nothing to do: \"+tarFile.getAbsolutePath()+\" is up to date.\",", "-                Project.MSG_INFO);", "-            return;", "-        }", "-", "-        log(\"Building tar: \"+ tarFile.getAbsolutePath(), Project.MSG_INFO);", "-", "-        TarOutputStream tOut = null;", "+        Vector savedFileSets = (Vector) filesets.clone();", "-            tOut = new TarOutputStream(new FileOutputStream(tarFile));", "-            tOut.setDebug(true);", "-            if (longFileMode.isTruncateMode()) {", "-                tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);", "-            }", "-            else if (longFileMode.isFailMode() ||", "-                     longFileMode.isOmitMode()) {", "-                tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);", "-            }", "-            else {", "-                // warn or GNU", "-                tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);", "+            if (baseDir != null) {", "+                if (!baseDir.exists()) {", "+                    throw new BuildException(\"basedir does not exist!\", ", "+                                             location);", "+                }", "+", "+                // add the main fileset to the list of filesets to process.", "+                TarFileSet mainFileSet = new TarFileSet(fileset);", "+                mainFileSet.setDir(baseDir);", "+                filesets.addElement(mainFileSet);", "-            longWarningGiven = false;", "+            if (filesets.size() == 0) {", "+                throw new BuildException(\"You must supply either a basedir \"", "+                                         + \"attribute or some nested filesets.\",", "+                                         location);", "+            }", "+            ", "+            // check if tar is out of date with respect to each", "+            // fileset", "+            boolean upToDate = true;", "-                if (files.length > 1 && fs.getFullpath().length() > 0) {", "-                    throw new BuildException(\"fullpath attribute may only be specified for \" +", "-                                             \"filesets that specify a single file.\");", "+", "+                if (!archiveIsUpToDate(files)) {", "+                    upToDate = false;", "-                for (int i = 0; i < files.length; i++) {", "-                    File f = new File(fs.getDir(project), files[i]);", "-                    String name = files[i].replace(File.separatorChar,'/');", "-                    tarFile(f, tOut, name, fs);", "+", "+                for (int i = 0; i < files.length; ++i) {", "+                    if (tarFile.equals(new File(fs.getDir(project), ", "+                                                files[i]))) {", "+                        throw new BuildException(\"A tar file cannot include \"", "+                                                 + \"itself\", location);", "+                    }", "-        } catch (IOException ioe) {", "-            String msg = \"Problem creating TAR: \" + ioe.getMessage();", "-            throw new BuildException(msg, ioe, location);", "+", "+            if (upToDate) {", "+                log(\"Nothing to do: \"+tarFile.getAbsolutePath()", "+                    +\" is up to date.\", Project.MSG_INFO);", "+                return;", "+            }", "+", "+            log(\"Building tar: \"+ tarFile.getAbsolutePath(), Project.MSG_INFO);", "+", "+            TarOutputStream tOut = null;", "+            try {", "+                tOut = new TarOutputStream(new FileOutputStream(tarFile));", "+                tOut.setDebug(true);", "+                if (longFileMode.isTruncateMode()) {", "+                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);", "+                }", "+                else if (longFileMode.isFailMode() ||", "+                         longFileMode.isOmitMode()) {", "+                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);", "+                }", "+                else {", "+                    // warn or GNU", "+                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);", "+                }", "+", "+                longWarningGiven = false;", "+                for (Enumeration e = filesets.elements(); ", "+                     e.hasMoreElements();) {", "+                    TarFileSet fs = (TarFileSet)e.nextElement();", "+                    String[] files = fs.getFiles(project);", "+                    if (files.length > 1 && fs.getFullpath().length() > 0) {", "+                        throw new BuildException(\"fullpath attribute may only \"", "+                                                 + \"be specified for \" ", "+                                                 + \"filesets that specify a \"", "+                                                 + \"single file.\");", "+                    }", "+                    for (int i = 0; i < files.length; i++) {", "+                        File f = new File(fs.getDir(project), files[i]);", "+                        String name = files[i].replace(File.separatorChar,'/');", "+                        tarFile(f, tOut, name, fs);", "+                    }", "+                }", "+            } catch (IOException ioe) {", "+                String msg = \"Problem creating TAR: \" + ioe.getMessage();", "+                throw new BuildException(msg, ioe, location);", "+            } finally {", "+                if (tOut != null) {", "+                    try {", "+                        // close up", "+                        tOut.close();", "+                    }", "+                    catch (IOException e) {}", "+                }", "+            }", "-            if (tOut != null) {", "-                try {", "-                    // close up", "-                    tOut.close();", "-                }", "-                catch (IOException e) {}", "-            }", "+            filesets = savedFileSets;"]}]}
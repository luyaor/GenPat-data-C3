{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6aa405e44632980639db70ece8221c1e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24301b899f0c92fd4fb82997d3f2d185", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/selectors/modifiedselector/ModifiedSelector.java", "commitBeforeChange": "589691afeb04320ae27578385b12b49398c6c146", "commitAfterChange": "93795db6defdb1059c70826f0e7e15773672f36e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public boolean isSelected(File basedir, String filename, File file)", "signatureAfterChange": "     public boolean isSelected(Resource resource)", "diff": ["+     */", "+    public boolean isSelected(Resource resource) {", "+        if (resource.isFilesystemOnly()) {", "+            // We have a 'resourced' file, so reconvert it and use", "+            // the 'old' implementation.", "+            FileResource fileResource = (FileResource) resource;", "+            File file = fileResource.getFile();", "+            String filename = fileResource.getName();", "+            File basedir = fileResource.getBaseDir();", "+            return isSelected(basedir, filename, file);", "+        } else {", "+            try {", "+                // How to handle non-file-Resources? I copy temporarily the", "+                // resource to a file and use the file-implementation.", "+                FileUtils fu = FileUtils.getFileUtils();", "+                File tmpFile = fu.createTempFile(\"modified-\", \".tmp\", null);", "+                Resource tmpResource = new FileResource(tmpFile);", "+                fu.copyResource(resource, tmpResource);", "+                boolean isSelected = isSelected(tmpFile.getParentFile(),", "+                                                tmpFile.getName(),", "+                                                resource.toLongString());", "+                tmpFile.delete();", "+                return isSelected;", "+            } catch (UnsupportedOperationException uoe) {", "+                log(\"The resource '\"", "+                  + resource.getName()", "+                  + \"' does not provide an InputStream, so it is not checked. \"", "+                  + \"Akkording to 'selres' attribute value it is \"", "+                  + ((selectResourcesWithoutInputStream) ? \"\" : \" not\")", "+                  + \"selected.\", Project.MSG_INFO);", "+                return selectResourcesWithoutInputStream;", "+            } catch (Exception e) {", "+                throw new BuildException(e);", "+            }", "+        }", "+    }", "-        String newValue    = algorithm.getValue(f);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d522ecbeca4b7e01f4185dea94c6b6dd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Sync.java", "commitBeforeChange": "32365ed4e0db6ddef7498334a9ca574df66e6726", "commitAfterChange": "b1186f08a39d23367aefcabd37ef446d36a0afb1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private int[] removeOrphanFiles(Hashtable nonOrphans, File file)", "signatureAfterChange": "     private int[] removeOrphanFiles(Set nonOrphans, File toDir)", "diff": ["-    private int[] removeOrphanFiles(Hashtable nonOrphans, File file) {", "-        int[] removedCount = new int[] {0, 0, 0};", "-        if (file.isDirectory()) {", "-            File[] children = file.listFiles();", "-            for (int i = 0; i < children.length; ++i) {", "-                int[] temp = removeOrphanFiles(nonOrphans, children[i]);", "-                removedCount[0] += temp[0];", "-                removedCount[1] += temp[1];", "-                removedCount[2] += temp[2];", "-            }", "-", "-            if (nonOrphans.get(file) == null && removedCount[2] == 0) {", "-                log(\"Removing orphan directory: \" + file, Project.MSG_DEBUG);", "-                file.delete();", "-                ++removedCount[0];", "-            } else {", "-                /*", "-                  Contrary to what is said above, position 2 is not", "-                  meaningless inside the recursion.", "-                  Position 2 is used to carry information back up the", "-                  recursion about whether or not a directory contains", "-                  a directory or file at any depth that is not an", "-                  orphan", "-                  This has to be done, because if you have the", "-                  following directory structure: c:\\src\\a\\file and", "-                  your mapper src files were constructed like so:", "-                  <include name=\"**\\a\\**\\*\"/>", "-                  The folder 'a' will not be in the hashtable of", "-                  nonorphans.  So, before deleting it as an orphan, we", "-                  have to know whether or not any of its children at", "-                  any level are orphans.", "-                  If no, then this folder is also an orphan, and may", "-                  be deleted.  I do this by changing position 2 to a", "-                  '1'.", "-                */", "-                removedCount[2] = 1;", "-            }", "-", "-        } else {", "-            if (nonOrphans.get(file) == null) {", "-                log(\"Removing orphan file: \" + file, Project.MSG_DEBUG);", "-                file.delete();", "-                ++removedCount[1];", "-            } else {", "-                removedCount[2] = 1;", "-            }", "+    private int[] removeOrphanFiles(Set nonOrphans, File toDir) {", "+        int[] removedCount = new int[] {0, 0};", "+        DirectoryScanner ds = new DirectoryScanner();", "+        ds.setBasedir(toDir);", "+        Set s = new HashSet(nonOrphans);", "+        s.add(\"\");", "+        String[] excls = (String[]) s.toArray(new String[s.size()]);", "+        ds.setExcludes(excls);", "+        ds.scan();", "+        String[] files = ds.getIncludedFiles();", "+        for (int i = 0; i < files.length; i++) {", "+            File f = new File(toDir, files[i]);", "+            log(\"Removing orphan file: \" + f, Project.MSG_DEBUG);", "+            f.delete();", "+            ++removedCount[1];", "+        }", "+        String[] dirs = ds.getIncludedDirectories();", "+        for (int i = dirs.length - 1 ; i >= 0 ; --i) {", "+            File f = new File(toDir, dirs[i]);", "+            log(\"Removing orphan directory: \" + f, Project.MSG_DEBUG);", "+            f.delete();", "+            ++removedCount[0];"]}]}
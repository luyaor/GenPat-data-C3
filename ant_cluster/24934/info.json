{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f0471d875acb82a9bed25c70546b7d77", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8194422a1d6f7ac874dfed8d8863e4a1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "403c32e5c5322f65e184f6d21496d0295d74f6e1", "commitAfterChange": "655df7f9e198a141defc9dcfb45f7f14cd7749f8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public Class findClass(String name) throws ClassNotFoundException", "signatureAfterChange": "     public Class findClass(String name) throws ClassNotFoundException", "diff": ["-        if (components == null) {", "-            // we haven't set up the list of directories and jars yet.", "-            setup();", "-        }", "+        project.log(\"Finding class \" + name, Project.MSG_VERBOSE);", "+        try {", "+            return findClass(name, classpath);", "+        }", "+        catch (ClassNotFoundException e) {", "+            throw e;", "+        }", "+    }", "-            for (Enumeration e = components.elements(); e.hasMoreElements() && stream == null; ) {", "-                File pathComponent = (File)e.nextElement();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e777be3edc858a3e0c2361b2b3933bb7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/TraXLiaison.java", "commitBeforeChange": "8f70bc2a919459c49c1977d91551f43819063954", "commitAfterChange": "1e8307708de490453db28c89f777eb4a9c08767b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void transform(File infile, File outfile) throws Exception", "signatureAfterChange": "      public void transform(File infile, File outfile) throws Exception", "diff": ["-        FileInputStream fis = null;", "-        FileOutputStream fos = null;", "+        if (transformer == null) {", "+            transformer = newTransformer();", "+        }", "+", "+        InputStream fis = null;", "+        OutputStream fos = null;", "-            fis = new FileInputStream(infile);", "-            fos = new FileOutputStream(outfile);", "-            // FIXME: need to use a SAXSource as the source for the transform", "-            // so we can plug in our own entity resolver", "-            Source src = null;", "-            if (entityResolver != null) {", "-                if (tfactory.getFeature(SAXSource.FEATURE)) {", "-                    SAXParserFactory spFactory = SAXParserFactory.newInstance();", "-                    spFactory.setNamespaceAware(true);", "-                    XMLReader reader = spFactory.newSAXParser().getXMLReader();", "-                    reader.setEntityResolver(entityResolver);", "-                    src = new SAXSource(reader, new InputSource(fis));", "-                } else {", "-                    throw new IllegalStateException(\"xcatalog specified, but \" +", "-                        \"parser doesn't support SAX\");", "-                }", "-            } else {", "-                src = new StreamSource(fis);", "-            }", "-            src.setSystemId(getSystemId(infile));", "+            fis = new BufferedInputStream(new FileInputStream(infile));", "+            fos = new BufferedOutputStream(new FileOutputStream(outfile));", "-", "-            if (uriResolver != null)", "-                transformer.setURIResolver(uriResolver);", "-", "+            Source src = getSource(fis, infile);", "-                if (xslStream != null){", "-                    xslStream.close();", "-                }", "-            } catch (IOException ignored){}", "-            try {", "-                if (fis != null){", "+                if (fis != null) {", "-            } catch (IOException ignored){}", "+            } catch (IOException ignored) {", "+            }", "-                if (fos != null){", "+                if (fos != null) {", "-            } catch (IOException ignored){}", "+            } catch (IOException ignored) {", "+            }", "+        }", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b6bfad21e43a9f3e86b09427eb9b461d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2111baa5a92673e17d26e96c5bf25275", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/launcher/Main.java", "commitBeforeChange": "321497ad25f76931e5b18e384fbd73ca8d198d92", "commitAfterChange": "ec74722dcd89659e5f1b1241acd59dc3f5978be7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static final void main( final String[] args )         throws Exception", "signatureAfterChange": "     public static final void main( final String[] args )         throws Exception", "diff": ["-            //actually try to discover the install directory based on where", "-            // the myrmidon.jar is", "+            final Map properties = new HashMap();", "+", "+            // Try to discover the install directory based on where the", "+            // launcher Jar is", "-            System.setProperty( \"myrmidon.home\", installDirectory.toString() );", "+            properties.put( \"myrmidon.home\", installDirectory );", "-            final URLClassLoader sharedClassLoader = createSharedClassLoader( installDirectory );", "-            final URLClassLoader classLoader =", "-                createContainerClassLoader( installDirectory, sharedClassLoader );", "+            // Build the shared classloader", "+            final URL[] sharedClassPath = getSharedClassPath( installDirectory );", "+            properties.put( \"myrmidon.shared.classpath\", sharedClassPath );", "+            final URLClassLoader sharedClassLoader = new URLClassLoader( sharedClassPath );", "+            properties.put( \"myrmidon.shared.classloader\", sharedClassLoader );", "-            execMainClass( classLoader, args );", "+            // Build the container classloader", "+            final URL[] containerClassPath = getContainerClassPath( installDirectory );", "+            properties.put( \"myrmidon.container.classpath\", containerClassPath );", "+            final URLClassLoader containerClassLoader = new URLClassLoader( containerClassPath, sharedClassLoader );", "+            properties.put( \"myrmidon.container.classloader\", containerClassLoader );", "+", "+            execMainClass( containerClassLoader, properties, args );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea96c5119a977dcf834750795cbb423d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java", "commitBeforeChange": "0cb9c2b221a6e5e3f9b0f78bb4d9938413fa5a9b", "commitAfterChange": "753b60552e421fb66edf28e0cc458666cbe63181", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected Commandline setupJavacCommand()", "signatureAfterChange": "     protected Commandline setupJavacCommand()", "diff": ["+", "+        // as well as \"bootclasspath\" and \"extdirs\"", "-            cmd.createArgument().setValue(classpath.toString() ", "-                                          + File.pathSeparator ", "-                                          + src.toString());", "+            Path cp = new Path(project);", "+            /*", "+             * XXX - This doesn't mix very well with build.systemclasspath,", "+             */", "+            if (bootclasspath != null) {", "+                cp.append(bootclasspath);", "+            }", "+            if (extdirs != null) {", "+                addExtdirsToClasspath(cp);", "+            }", "+            cp.append(classpath);", "+            cp.append(src);", "+            cmd.createArgument().setPath(cp);", "+            if (bootclasspath != null", "+                && !Project.getJavaVersion().startsWith(\"1.1\")) {", "+                cmd.createArgument().setValue(\"-bootclasspath\");", "+                cmd.createArgument().setPath(bootclasspath);", "+            }", "+            if (extdirs != null) {", "+                cmd.createArgument().setValue(\"-extdirs\");", "+                cmd.createArgument().setPath(extdirs);", "+            }", "+", "-        }", "-        if (bootclasspath != null) {", "-            cmd.createArgument().setValue(\"-bootclasspath\");", "-            cmd.createArgument().setPath(bootclasspath);", "-        }", "-        if (extdirs != null) {", "-            cmd.createArgument().setValue(\"-extdirs\");", "-            cmd.createArgument().setPath(extdirs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1cbe50fd8963aeb61ba7dc7d51a5b65", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/taskdefs/javacc/JavaCC.java", "commitBeforeChange": "7513ab1efa12321b3e2014764bfb23d16b425caf", "commitAfterChange": "299ea801bc1031e308bfe07a22e51edd1b972872", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 23, "signatureBeforeChange": "      public void execute()         throws TaskException", "signatureAfterChange": "      public void execute()         throws TaskException", "diff": ["-", "-        // load command line with optional attributes", "-        Enumeration iter = optionalAttrs.keys();", "-        while( iter.hasMoreElements() )", "-        {", "-            String name = (String)iter.nextElement();", "-            Object value = optionalAttrs.get( name );", "-            cmdl.addArgument( \"-\" + name + \":\" + value.toString() );", "-        }", "-", "-            outputDirectory = new File( target.getParent() );", "+            outputDirectory = target.getParentFile();", "-        else if( !outputDirectory.isDirectory() )", "+        if( !outputDirectory.isDirectory() )", "-        cmdl.addArgument( \"-OUTPUT_DIRECTORY:\" + outputDirectory.getAbsolutePath() );", "+", "+        if( javaccHome == null || !javaccHome.isDirectory() )", "+        {", "+            throw new TaskException( \"Javacchome not set.\" );", "+        }", "-        cmdl.addArgument( target.getAbsolutePath() );", "-        if( javaccHome == null || !javaccHome.isDirectory() )", "+        ExecuteJava exe = new ExecuteJava();", "+        exe.setClassName( \"COM.sun.labs.javacc.Main\" );", "+", "+        // load command line with optional attributes", "+        Enumeration iter = optionalAttrs.keys();", "+        while( iter.hasMoreElements() )", "-            throw new TaskException( \"Javacchome not set.\" );", "+            String name = (String)iter.nextElement();", "+            Object value = optionalAttrs.get( name );", "+            exe.getArguments().addArgument( \"-\" + name + \":\" + value.toString() );", "-        final Path classpath = cmdl.createClasspath();", "+", "+        exe.getArguments().addArgument( \"-OUTPUT_DIRECTORY:\" + outputDirectory.getAbsolutePath() );", "+", "+        exe.getArguments().addArgument( target );", "+", "+        final Path classpath = exe.getClassPath();", "-        cmdl.addVmArgument( \"-mx140M\" );", "-        cmdl.addVmArgument( \"-Dinstall.root=\" + javaccHome.getAbsolutePath() );", "+        exe.setMaxMemory( \"140M\" );", "+        exe.getSysProperties().addVariable( \"install.root\", javaccHome.getAbsolutePath() );", "-        runCommand( cmdl );", "-    }", "+        exe.executeForked( getContext() );"]}]}
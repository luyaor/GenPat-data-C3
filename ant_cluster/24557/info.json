{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c3accae171bfd786674c00327b743967", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "604765fbe3acd805aa2d1a44da64f680", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "b86a0a2830f81aa373a40ca7db51c5308f58550a", "commitAfterChange": "1375d72ba33469d368c812a889ab11e9ffe6200e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     protected void scan(File fromDir, File toDir, String[] files, String[] dirs)", "signatureAfterChange": "     protected void scan(File fromDir, File toDir, String[] files, String[] dirs)", "diff": ["-        for (int i = 0; i < files.length; i++) {", "-            String filename = files[i];", "-            File src = new File(fromDir, filename);", "-            File dest;", "-            if (flatten) {", "-                dest = new File(toDir, new File(filename).getName());", "-            } else {", "-                dest = new File(toDir, filename);", "-            }", "-            if (forceOverwrite ||", "-                (src.lastModified() > dest.lastModified())) {", "-                fileCopyMap.put(src.getAbsolutePath(),", "-                                 dest.getAbsolutePath());", "-            }", "+        FileNameMapper mapper = null;", "+        if (flatten) {", "+            mapper = new FlatFileNameMapper();", "+        } else {", "+            mapper = new IdentityMapper();", "+        buildMap(fromDir, toDir, files, mapper, fileCopyMap);", "+", "-            for (int i = 0; i < dirs.length; i++) {", "-                String dname = dirs[i];", "-                File sd = new File(fromDir, dname);", "-                File dd;", "-                if (flatten) {", "-                    dd = new File(toDir, new File(dname).getName());", "-                } else {", "-                    dd = new File(toDir, dname);", "-                }", "-                if (forceOverwrite || (sd.lastModified() > dd.lastModified())) {", "-                    dirCopyMap.put(sd.getAbsolutePath(), dd.getAbsolutePath());", "-                }", "-            }", "+            buildMap(fromDir, toDir, dirs, mapper, dirCopyMap);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97151cac7361fcac27710dde455570ac", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "10c41029aeaba31241f1a85f9b02591b357e20b6", "commitAfterChange": "818cb969adef1df0f5918ba62f80f62502d5e53e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public JUnitTestRunner(JUnitTest test)", "signatureAfterChange": "      public JUnitTestRunner(JUnitTest test, boolean haltOnError,                            boolean haltOnFailure)", "diff": ["-    public JUnitTestRunner(JUnitTest test) {", "-        junitTest = test;", "+", "+    public JUnitTestRunner(JUnitTest test, boolean haltOnError,", "+                           boolean haltOnFailure) {", "+        this.junitTest = test;", "+        this.haltOnError = haltOnError;", "+        this.haltOnFailure = haltOnFailure;", "+", "-            if (junitTest.getPrintxml()) {", "-                if (test.getOutfile() != null", "-                    && test.getOutfile().length() > 0) {", "-", "-                    addFormatter(new XMLJUnitResultFormatter(", "-                                     new PrintWriter(", "-                                         new FileWriter(test.getOutfile(), false)", "-                                             )", "-                                         )", "-                        );", "-                } else {", "-                    addFormatter(new XMLJUnitResultFormatter(", "-                                     new PrintWriter(", "-                                         new OutputStreamWriter(System.out), true)", "-                                         )", "-                        );", "-                }", "-            }", "-", "-            if (junitTest.getPrintsummary()) {", "-                addFormatter(new SummaryJUnitResultFormatter());", "-            }", "-", "-            Class testClass = Class.forName(junitTest.getName());", "-", "+            Class testClass = Class.forName(test.getName());", "+            ", "-", "+            ", "-", "-            res = new TestResult();", "-            res.addListener(this);", "-            for (int i=0; i < formatters.size(); i++) {", "-                res.addListener((TestListener)formatters.elementAt(i));", "-            }", "-", "+            ", "-            retCode = 2;", "-", "-            fireStartTestSuite();", "-            for (int i=0; i < formatters.size(); i++) {", "-                ((TestListener)formatters.elementAt(i)).addError(null, e);", "-            }", "-            junitTest.setCounts(1, 0, 1);", "-            junitTest.setRunTime(0);", "-            fireEndTestSuite();", "+            retCode = ERRORS;", "+            exception = e;"]}]}
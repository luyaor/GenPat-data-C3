{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb7da23a7a0a78b5066ab676d85653a1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "579a4e095fe929c71d8ba90c150fcf61", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultPropertyConfigurer.java", "commitBeforeChange": "c4dee0afafcc57ede3e3d1e81d2d4a1455c484a4", "commitAfterChange": "f52a170159f6dc5beebe07bfb945cb5b3fa5290b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void setValue( final Object parent, final Object child )         throws ConfigurationException", "signatureAfterChange": "     public void addValue( ConfigurationState state, Object value )         throws ConfigurationException", "diff": ["-    public void setValue( final Object parent, final Object child )", "+    public void addValue( ConfigurationState state, Object value )", "+        final DefaultConfigurationState defState = (DefaultConfigurationState)state;", "+", "+        // Make sure the supplied object is the pending object", "+        final Object pending = defState.getCreatedObject( m_propIndex );", "+        if( pending != null && pending != value )", "+        {", "+        }", "+", "+        // Make sure the creator method was called, if necessary", "+        if( pending == null && m_createMethod != null  )", "+        {", "+            final String message = REZ.getString( \"must-be-element.error\" );", "+            throw new ConfigurationException( message );", "+        }", "+", "+        defState.setCreatedObject( m_propIndex, null );", "+", "+        // Check the property count", "+        if( defState.getPropCount( m_propIndex ) >= m_maxCount )", "+        {", "+            final String message = REZ.getString( \"too-many-values.error\" );", "+            throw new ConfigurationException( message );", "+        }", "+        defState.incPropCount( m_propIndex );", "+", "+            // Add the value", "-                m_addMethod.invoke( parent, new Object[]{child} );", "+                m_addMethod.invoke( defState.getObject(), new Object[]{ value } );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6156a344f0b29635a1404deb0fc0bff", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/embed/ProjectHelperImpl2.java", "commitBeforeChange": "f2d8ae34069b455a64a46431bd44a3b2a208e9d7", "commitAfterChange": "86334974455a492f4b76331b6002a45289874ddf", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 28, "signatureBeforeChange": "         private void handleTaskdef(String name, AttributeList attrs) throws SAXParseException", "signatureAfterChange": "         public void onStartElement(String uri, String propType, String qname,                                    Attributes attrs,                                    AntXmlContext context)             throws SAXParseException", "diff": ["-         */", "-        private void handleTaskdef(String name, AttributeList attrs) throws SAXParseException {", "-            (new TaskHandler(this, null, null, null)).init(name, attrs);", "-        }", "+        public void onStartElement(String uri, String propType, String qname,", "+                                   Attributes attrs,", "+                                   AntXmlContext context)", "+            throws SAXParseException", "+        {", "+                element = context.project.createDataType(qname);", "+                    throw new BuildException(\"Unknown data type \"+qname);", "+                    wrapper = new RuntimeConfigurable(element, qname);", "+                    wrapper.setAttributes(sax1Attributes(attrs));", "+                    ProjectHelper.configure(element, sax1Attributes(attrs), context.project);", "+                    context.configureId(element, attrs);", "+                throw new SAXParseException(exc.getMessage(), context.locator, exc);"]}]}
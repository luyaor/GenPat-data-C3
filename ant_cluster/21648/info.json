{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "886a575f645d8d68e6e0980c78206639", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c580b4dc83eed57941ec77a55361286b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/optional/depend/DependScanner.java", "commitBeforeChange": "c0a3bacdf9d9bcade0cccf86124c1d33360e00ea", "commitAfterChange": "bb34e52397404ec167b21c72a47e4238d19893c2", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void scan() throws IllegalStateException", "signatureAfterChange": "     public void scan() throws IllegalStateException", "diff": ["+        included = new Vector();", "-            analyzer.addRootClass((String)e.nextElement());", "+            String rootClass = (String)e.nextElement();", "+            analyzer.addRootClass(rootClass);", "-        included.removeAllElements();", "+        String[] parentFiles = parentScanner.getIncludedFiles();", "+        Hashtable parentSet = new Hashtable();", "+        for (int i = 0; i < parentFiles.length; ++i) {", "+            parentSet.put(parentFiles[i], parentFiles[i]);", "+        }", "+", "-            included.addElement(e.nextElement());", "+            String classname = (String)e.nextElement();", "+            String filename = classname.replace('.', File.separatorChar);", "+            filename = filename + \".class\";", "+            File depFile = new File(basedir, filename);", "+            if (depFile.exists() && parentSet.containsKey(filename)) {", "+                // This is included", "+                included.addElement(filename);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dde240fb24065829489cef104460f736", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/deployer/ServiceDescriptorBuilder.java", "commitBeforeChange": "56250d886e6efcfa207e9c1f2cd4b00985e259fd", "commitAfterChange": "be938b1e8fe6d68aec358cb6982c7d70fe827886", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public TypelibDescriptor createDescriptor( final Configuration config,                                                final String url )         throws DeploymentException", "signatureAfterChange": "     public TypelibDescriptor createDescriptor( final Configuration config,                                                final String url )         throws DeploymentException", "diff": ["-            // TODO - populate the descriptor", "+            // Build the descriptor", "+            final ServiceDescriptor descriptor = new ServiceDescriptor( url );", "-            return new ServiceDescriptor( url );", "+            // Add the service definitions", "+            final Configuration[] elements = config.getChildren();", "+            for( int i = 0; i < elements.length; i++ )", "+            {", "+                final Configuration element = elements[ i ];", "+                final String roleShorthand = element.getName();", "+                final String factoryClassName = element.getAttribute( \"factory\" );", "+                final ServiceDefinition definition = new ServiceDefinition( roleShorthand, factoryClassName, config );", "+                descriptor.addDefinition( definition );", "+            }", "+", "+            return descriptor;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd09aa0f9a297111fc4acc54a49f09c2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f51b503aa7572ffe0adb9a95fba5a74", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/framework/Condition.java", "commitBeforeChange": "4ab1c363ef3aa8889a3c9bd5653c41ec751e2205", "commitAfterChange": "6ab3e313864e62f2c77a52d8c636daa20a7dfcb8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public boolean evaluate( final TaskContext context )         throws TaskException", "signatureAfterChange": "     boolean evaluate( final TaskContext context )         throws TaskException;", "diff": ["-", "-    public boolean evaluate( final TaskContext context )", "-        throws TaskException", "-    {", "-        boolean result = false;", "-", "-        final Object resolved = context.resolveValue( getCondition() );", "-        if( null != resolved )", "-        {", "-            final Object object = context.getProperty( resolved.toString() );", "-            if( object != null && !object.toString().equals( \"false\" ) )", "-            {", "-                result = true;", "-            }", "-        }", "-", "-        if( !m_isIfCondition )", "-        {", "-            result = !result;", "-        }", "-", "-        return result;", "-    }", "+     */", "+    boolean evaluate( final TaskContext context )", "+        throws TaskException;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "596b90f5756c1e3107a5de8a72f6c9c8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipFile.java", "commitBeforeChange": "aa43e37a025cdf54b8914b8283e57419a253ed59", "commitAfterChange": "dee95e3acc5154aee03ff5f91f9a56426ae79f3f", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 30, "signatureBeforeChange": "     private String getUnicodeStringIfOriginalMatches(AbstractUnicodeExtraField f,                                                      byte[] orig)", "signatureAfterChange": "         public int compare(ZipEntry e1, ZipEntry e2)", "diff": ["-     */", "-    private String getUnicodeStringIfOriginalMatches(AbstractUnicodeExtraField f,", "-                                                     byte[] orig) {", "-        if (f != null) {", "-            CRC32 crc32 = new CRC32();", "-            crc32.update(orig);", "-            long origCRC32 = crc32.getValue();", "-", "-            if (origCRC32 == f.getNameCRC32()) {", "-                try {", "-                    return ZipEncodingHelper", "-                        .UTF8_ZIP_ENCODING.decode(f.getUnicodeName());", "-                } catch (IOException ex) {", "-                    // UTF-8 unsupported?  should be impossible the", "-                    // Unicode*ExtraField must contain some bad bytes", "-", "-                    // TODO log this anywhere?", "-                    return null;", "-                }", "-            }", "-        }", "-        return null;", "-    }", "+        new Comparator<ZipEntry>() {", "+        public int compare(ZipEntry e1, ZipEntry e2) {", "+            if (e1 == e2) {", "+                return 0;", "+            }", "+", "+            OffsetEntry off1 = entries.get(e1);", "+            OffsetEntry off2 = entries.get(e2);", "+            if (off1 == null) {", "+                return 1;", "+            }", "+            if (off2 == null) {", "+                return -1;", "+            }", "+            long val = (off1.headerOffset - off2.headerOffset);", "+            return val == 0 ? 0 : val < 0 ? -1 : +1;", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a9c0c082a615687d12a65fab8aca030", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11931ce4c43b9613d472fd69eba5a1e8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/PathConvert.java", "commitBeforeChange": "e3909b82b15ff754f687e14798725f504f37adfe", "commitAfterChange": "e98e1462b5a05048e3336b230901ea885977f339", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        // If we are a reference, the create a Path from the reference", "+        // If we are a reference, create a Path from the reference", "+            } else if( obj instanceof DirSet ) {", "+                DirSet ds = (DirSet)obj;", "+                path.addDirset( ds );", "+            } else if( obj instanceof FileList ) {", "+                FileList fl = (FileList)obj;", "+                path.addFilelist( fl );", "+                ", "-                throw new BuildException( \"'refid' does not refer to a path or fileset\" );", "+                throw new BuildException( \"'refid' does not refer to a path, fileset, dirset, or filelist.\" );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75d5b8b3364b4fac71bd7e2e9f487d19", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/modules/edit/ElementNavigator.java", "commitBeforeChange": "ffa6e24ba429847c04da9162971b6203151a7ce1", "commitAfterChange": "1056b715f84a4c3b17b7fcdecbaef6eaeb566ea7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "         public boolean eventPosted(EventObject event)", "signatureAfterChange": "         public boolean eventPosted(EventObject event)", "diff": ["-            ProjectProxy project = getContext().getProject();", "+            ACSProjectElement project = null;", "+            if(event instanceof ProjectSelectedEvent) {", "+                ProjectSelectedEvent e = (ProjectSelectedEvent) event;", "+                project = e.getSelectedProject();", "+            }", "+                // Send an empty selection event to notify others that", "+                // nothing is selected.", "+                ElementSelectionEvent.createEvent(getContext(), null);", "-                _tree.setModel(project.getTreeModel());", "-                _tree.setSelectionModel(project.getTreeSelectionModel());", "+                _tree.setModel(new ElementTreeModel(project));", "+                _selections = new ElementTreeSelectionModel();", "+                _selections.addTreeSelectionListener(new SelectionForwarder());", "+                _tree.setSelectionModel(_selections);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd64cb697ad923a6051b540d45d6a7fc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/antlib/src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "6540a295cd786c80c28c14f6c544aa1d64ab3778", "commitAfterChange": "5cdfabc038e26f67080037ea0c7ad6ab284d821c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public Object createElement(Project project, Object element, String elementName)         throws BuildException", "signatureAfterChange": "     public Object createElement(Project project, Object parent,          String elementName) throws BuildException", "diff": ["-    public Object createElement(Project project, Object element, String elementName)", "-        throws BuildException {", "-\t", "+    public Object createElement(Project project, Object parent, ", "+        String elementName) throws BuildException {", "+        NestedCreator nc = (NestedCreator) nestedCreators.get(elementName);", "+        if (nc == null && parent instanceof DynamicConfigurator) {", "+            DynamicConfigurator dc = (DynamicConfigurator) parent;", "+            Object nestedElement = dc.createDynamicElement(elementName);", "+            if (nestedElement != null) {", "+                if (nestedElement instanceof ProjectComponent) {", "+                    ((ProjectComponent) nestedElement).setProject(project);", "+                }", "+                return nestedElement;", "+            }", "+        }", "+        if (nc == null) {", "+            String msg = project.getElementName(parent) +", "+                \" doesn't support the nested \\\"\" + elementName + \"\\\" element.\";", "+            throw new BuildException(msg);", "+        }", "-\t    // First check if there are any roles supported by this class", "-\t    Object nestedElement = project.createInRole(element, elementName);", "-\t    if (nestedElement == null) {", "-\t\tNestedCreator nc = ", "-\t\t    (NestedCreator) nestedCreators.get(elementName);", "-\t\tif (nc == null) {", "-\t\t    String msg = getElementName(project, element) +", "-\t\t\t\" doesn't support the nested \\\"\" + elementName + ", "-\t\t\t\"\\\" element.\";", "-\t\t    throw new BuildException(msg);", "-\t\t}", "-\t\tnestedElement = nc.create(element);", "-\t    }", "+            Object nestedElement = nc.create(parent);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7a2adcf4ff430ad865e646fe4051d797", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a106b9c6b655c09c9410af79e075df5a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SignJar.java", "commitBeforeChange": "7229e5923e3cdbc8bed4d88c96eb90d1134cb379", "commitAfterChange": "450c0f1f2f827f00b7b03bedbede099ae0b3dc43", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        //init processing logic; this is retained through our execution(s)", "-        redirector = createRedirector();", "+        beginExecution();", "-        //special case single jar handling with signedjar attribute set", "-        if (hasJar && hasSignedJar) {", "-            // single jar processing", "-            signOneJar(jar, signedjar);", "-            //return here.", "-            return;", "-        }", "-", "-        //the rest of the method treats single jar like", "-        //a nested fileset with one file", "-", "-        if (hasJar) {", "-            //we create a fileset with the source file.", "-            //this lets us combine our logic for handling output directories,", "-            //mapping etc.", "-            FileSet sourceJar = new FileSet();", "-            sourceJar.setFile(jar);", "-            sourceJar.setDir(jar.getParentFile());", "-            addFileset(sourceJar);", "-        }", "-        //set up our mapping policy", "-        FileNameMapper destMapper;", "-        if (hasMapper) {", "-            destMapper = mapper;", "-        } else {", "-            //no mapper? use the identity policy", "-            destMapper = new IdentityMapper();", "-        }", "-", "-", "-        //at this point the filesets are set up with lists of files,", "-        //and the mapper is ready to map from source dirs to dest files", "-        //now we iterate through every JAR giving source and dest names", "-        // deal with the filesets", "-        for (int i = 0; i < filesets.size(); i++) {", "-            FileSet fs = (FileSet) filesets.elementAt(i);", "-            //get all included files in a fileset", "-            DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "-            String[] jarFiles = ds.getIncludedFiles();", "-            File baseDir = fs.getDir(getProject());", "-", "-            //calculate our destination directory; it is either the destDir", "-            //attribute, or the base dir of the fileset (for in situ updates)", "-            File toDir = hasDestDir ? destDir : baseDir;", "-", "-            //loop through all jars in the fileset", "-            for (int j = 0; j < jarFiles.length; j++) {", "-                String jarFile = jarFiles[j];", "-                //determine the destination filename via the mapper", "-                String[] destFilenames = destMapper.mapFileName(jarFile);", "-                if (destFilenames == null || destFilenames.length != 1) {", "-                    //we only like simple mappers.", "-                    throw new BuildException(ERROR_BAD_MAP + jarFile);", "-                }", "-                File destFile = new File(toDir, destFilenames[0]);", "-                File jarSource = new File(baseDir, jarFile);", "-                signOneJar(jarSource, destFile);", "+        try {", "+            //special case single jar handling with signedjar attribute set", "+            if (hasJar && hasSignedJar) {", "+                // single jar processing", "+                signOneJar(jar, signedjar);", "+                //return here.", "+                return;", "-        }", "-    }", "+            //the rest of the method treats single jar like", "+            //a nested fileset with one file", "+", "+            Vector sources = createUnifiedSources();", "+            //set up our mapping policy", "+            FileNameMapper destMapper;", "+            if (hasMapper) {", "+                destMapper = mapper;", "+            } else {", "+                //no mapper? use the identity policy", "+                destMapper = new IdentityMapper();", "+            }", "+", "+", "+            //at this point the filesets are set up with lists of files,", "+            //and the mapper is ready to map from source dirs to dest files", "+            //now we iterate through every JAR giving source and dest names", "+            // deal with the filesets", "+            for (int i = 0; i < sources.size(); i++) {", "+                FileSet fs = (FileSet) sources.elementAt(i);", "+                //get all included files in a fileset", "+                DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "+                String[] jarFiles = ds.getIncludedFiles();", "+                File baseDir = fs.getDir(getProject());", "+", "+                //calculate our destination directory; it is either the destDir", "+                //attribute, or the base dir of the fileset (for in situ updates)", "+                File toDir = hasDestDir ? destDir : baseDir;", "+", "+                //loop through all jars in the fileset", "+                for (int j = 0; j < jarFiles.length; j++) {", "+                    String jarFile = jarFiles[j];", "+                    //determine the destination filename via the mapper", "+                    String[] destFilenames = destMapper.mapFileName(jarFile);", "+                    if (destFilenames == null || destFilenames.length != 1) {", "+                        //we only like simple mappers.", "+                        throw new BuildException(ERROR_BAD_MAP + jarFile);", "+                    }", "+                    File destFile = new File(toDir, destFilenames[0]);", "+                    File jarSource = new File(baseDir, jarFile);", "+                    signOneJar(jarSource, destFile);", "+                }", "+            }", "+        } finally {", "+            endExecution();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e77de413399edb28e9a7a289b4d012cb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SignJar.java", "commitBeforeChange": "0d4d3af7217eadd1463853997ecc1ed7f6870ddf", "commitAfterChange": "3b2ee536588e043b52f5926cd0d60639dada62aa", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        if (null == jar && filesets.size() == 0) {", "-            throw new BuildException(\"jar must be set through jar attribute \"", "-                                     + \"or nested filesets\");", "+        //validation logic", "+        final boolean hasFileset = filesets.size() > 0;", "+        final boolean hasJar = jar != null;", "+        final boolean hasSignedJar = signedjar != null;", "+        final boolean hasDestDir = destDir != null;", "+        final boolean hasMapper = mapper != null;", "+", "+        if (!hasJar && !hasFileset) {", "+            throw new BuildException(ERROR_NO_SOURCE);", "-            throw new BuildException(\"alias attribute must be set\");", "+            throw new BuildException(ERROR_NO_ALIAS);", "-            throw new BuildException(\"storepass attribute must be set\");", "+            throw new BuildException(ERROR_NO_STOREPASS);", "-        redirector = createRedirector();", "-        if (null != jar) {", "-            if (filesets.size() != 0) {", "-                log(\"nested filesets will be ignored if the jar attribute has\"", "-                    + \" been specified.\", Project.MSG_WARN);", "-            }", "-            doOneJar(jar, signedjar);", "+        if (hasDestDir && hasSignedJar) {", "+            throw new BuildException(ERROR_TODIR_AND_SIGNEDJAR);", "+        }", "+", "+", "+        if (hasFileset && hasSignedJar) {", "+            throw new BuildException(ERROR_SIGNEDJAR_AND_FILESETS);", "+        }", "+", "+        //this isnt strictly needed, but by being fussy now,", "+        //we can change implementation details later", "+        if (!hasDestDir && hasMapper) {", "+            throw new BuildException(ERROR_MAPPER_WITHOUT_DEST);", "+        }", "+", "+        //init processing logic; this is retained through our execution(s)", "+        redirector = createRedirector();", "+", "+", "+        //special case single jar handling with signedjar attribute set", "+        if (hasJar && hasSignedJar) {", "+            // single jar processing", "+            signOneJar(jar, signedjar);", "+            //return here.", "+        }", "+", "+        //the rest of the method treats single jar like", "+        //a nested fileset with one file", "+", "+        if (hasJar) {", "+            //we create a fileset with the source file.", "+            //this lets us combine our logic for handling output directories,", "+            //mapping etc.", "+            FileSet sourceJar = new FileSet();", "+            sourceJar.setFile(jar);", "+            sourceJar.setDir(jar.getParentFile());", "+            addFileset(sourceJar);", "+        }", "+        //set up our mapping policy", "+        FileNameMapper destMapper;", "+        if (hasMapper) {", "+            destMapper = mapper.getImplementation();", "-            // deal with the filesets", "-            for (int i = 0; i < filesets.size(); i++) {", "-                FileSet fs = (FileSet) filesets.elementAt(i);", "-                DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "-                String[] jarFiles = ds.getIncludedFiles();", "-                for (int j = 0; j < jarFiles.length; j++) {", "-                    doOneJar(new File(fs.getDir(getProject()), jarFiles[j]), null);", "+            //no mapper? use the identity policy", "+            destMapper = new IdentityMapper();", "+        }", "+", "+", "+        //at this point the filesets are set up with lists of files,", "+        //and the mapper is ready to map from source dirs to dest files", "+        //now we iterate through every JAR giving source and dest names", "+        // deal with the filesets", "+        for (int i = 0; i < filesets.size(); i++) {", "+            FileSet fs = (FileSet) filesets.elementAt(i);", "+            //get all included files in a fileset", "+            DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "+            String[] jarFiles = ds.getIncludedFiles();", "+            File baseDir = fs.getDir(getProject());", "+", "+            //calculate our destination directory; it is either the destDir", "+            //attribute, or the base dir of the fileset (for in situ updates)", "+            File toDir = hasDestDir ? destDir : baseDir;", "+", "+            //loop through all jars in the fileset", "+            for (int j = 0; j < jarFiles.length; j++) {", "+                String jarFile = jarFiles[j];", "+                //determine the destination filename via the mapper", "+                String[] destFilenames = destMapper.mapFileName(jarFile);", "+                if (destFilenames == null || destFilenames.length != 1) {", "+                    //we only like simple mappers.", "+                    throw new BuildException(ERROR_BAD_MAP + jarFile);", "+                File destFile = new File(toDir, destFilenames[0]);", "+                File jarSource = new File(baseDir, jarFile);", "+                signOneJar(jarSource, destFile);"]}]}
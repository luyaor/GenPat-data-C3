{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "09c44b04252a3cbefc81fe499a6d4f28", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05a5d06739f206e64bf6a4e04717c557", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/anteater/bootstrap/Bootstrap.java", "commitBeforeChange": "d741f56d0b67fa0feb5af74c8e8f5419f980f5d3", "commitAfterChange": "4cd7d60e99d2dbbea019824a0ac731c2ae341d1f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String[] args)", "signatureAfterChange": "     public static void main(String[] args) throws Exception", "diff": ["-    public static void main(String[] args) {", "-    ", "-        // check for secret sugar left by MRJ startup script...", "-    ", "-        if (args.length > 0) {", "-            if (args[0].equals(\"osx\")) {", "-                base = \"\";", "-            }", "-        }", "-    ", "-        long startTime = System.currentTimeMillis();", "-    ", "-        System.out.println(\"Starting Bootstrap....\");", "-", "-        // ------------------------------------------------------------", "-        // first create dirs that we need for strapping", "-        // ------------------------------------------------------------", "-", "-        mkdir(base + \"bootstrap/temp\");", "-        mkdir(base + \"bootstrap/temp/crimson\");", "-        mkdir(base + \"bootstrap/temp/main\");", "-        mkdir(base + \"bootstrap/temp/tasks\");", "-        mkdir(base + \"bootstrap/temp/taskjars\");", "-        ", "-        for (int i = 0; i < modules.length; i++) {", "-            mkdir(base + \"bootstrap/temp/tasks/\" + modules[i]);", "-        }", "+    public static void main(String[] args) throws Exception {", "-        // ------------------------------------------------------------", "-        // build crimson", "-        // ------------------------------------------------------------       ", "-        ", "-        System.out.println(\"CRIMSON: \" + base + crimsonSources);", "-        Vector v1 = getSources(base + crimsonSources);", "-        doCompile(base + \"bootstrap/temp/crimson\", v1);", "-        ", "-        // ------------------------------------------------------------", "-        // build the main thing", "-        // ------------------------------------------------------------        ", "-        ", "-        Vector v2 = getSources(base + \"source/main\");", "-        doCompile(base + \"bootstrap/temp/main\", v2);", "-        ", "-        // ------------------------------------------------------------", "-        // now build each of the needed peices into their", "-        // areas within the strapping area", "-        // ------------------------------------------------------------", "-", "-        for (int i = 0; i < modules.length; i++) {", "-            buildModule(modules[i]);", "-        }", "-", "-        // ------------------------------------------------------------", "-        // now, set classpaths and launch an Ant build to", "-        // have Ant build itself nicely", "-        // ------------------------------------------------------------", "-", "-        System.out.println();", "-        System.out.println(\"-------------------------------------------\");", "-        System.out.println(\"STARTING REAL BUILD\");", "-        System.out.println(\"-------------------------------------------\");", "-        System.out.println();     ", "-        ", "-        String[] cmdarray = new String[9];", "-        cmdarray[0] = \"java\";", "-        cmdarray[1] = \"-cp\";", "-        cmdarray[2] = base + \"bootstrap/temp/main:\" +", "-                      base + \"bootstrap/temp/crimson\";", "-        cmdarray[3] = \"org.apache.ant.cli.Main\";", "-        cmdarray[4] = \"-taskpath\";", "-        cmdarray[5] = base + \"bootstrap/temp/taskjars\";", "-        cmdarray[6] = \"-buildfile\";", "-        cmdarray[7] = base + \"source/main.ant\"; ", "-        cmdarray[8] = \"default\";", "-        ", "+        String[] command;", "+        String classpath = null;", "+      ", "+        // check to see if we have a compiler on the classpath. Right now", "+        // we're just checking for the old compiler, but will want to check", "+        // for the new compiler and use it if it exists. Later.", "-            Runtime runtime = Runtime.getRuntime();", "-            Process process = runtime.exec(cmdarray);", "+            Class clazz = Class.forName(\"sun.tools.javac.Main\");", "+        } catch (ClassNotFoundException cnfe) { ", "+            String javaHome = System.getProperty(\"java.home\");", "+            if (javaHome.endsWith(\"jre\")) {", "+                javaHome = javaHome.substring(0, javaHome.length() - 4);", "+            }", "+            // XXX should check if this exists and bail out if it doesn't", "+            classpath = javaHome + \"/lib/tools.jar\" + File.pathSeparator + \".\";", "+        }", "+        ", "+        // XXX really should check to see if compiling the bootstrap is necessary. :)", "+        ", "+        System.out.println(\"Compiling Bootstrap2\");", "+        if (classpath == null) {", "+            command = new String[] {\"javac\", \"./Bootstrap2.java\"};", "+        } else {", "+            command = new String[] {\"javac\", \"-classpath\", classpath, \"./Bootstrap2.java\"};", "+        }", "+        runCommand(command);", "+        ", "+        System.out.println(\"Running Bootstrap2\");", "+        if (classpath == null) {", "+            command = new String[] {\"java\", \"Bootstrap2\"};", "+        } else {", "+            command = new String[] {\"java\", \"-cp\", classpath, \"Bootstrap2\"};", "+        }", "+        runCommand(command);", "+    }", "-            // echo output from process", "-            InputStream in = process.getInputStream();", "-            byte[] buf = new byte[80];", "-            int count = 0;", "-            ", "-            in = process.getErrorStream();", "-            count = in.read(buf, 0, buf.length);          ", "-            if (count > 0) {", "-                System.out.println();", "-                System.out.println(\"Error Stream Output:\");", "-             ", "-                while (count != -1) {", "-                    System.out.write(buf, 0, count);", "-                    count = in.read(buf, 0, buf.length);", "-                }", "-            }", "-        } catch (Exception e) {", "-            System.out.println(\"OUCHY: \" + e);", "-            return;", "-        }", "-        ", "-        System.out.println();", "-        System.out.println(\"-------------------------------------------\");", "-        System.out.println(\"FINISHED WITH REAL BUILD\");", "-        System.out.println(\"-------------------------------------------\");", "-        System.out.println();", "-        ", "-        // ------------------------------------------------------------", "-        // Remove Temporary classes", "-        // ------------------------------------------------------------", "-", "-        // delete(tempDirName);", "-", "-        // ------------------------------------------------------------", "-        // Print Closer", "-        // ------------------------------------------------------------", "-", "-        long endTime = System.currentTimeMillis();", "-        long elapsd = endTime - startTime;", "-        System.out.println(\"Bootstrap Time: \" + (elapsd/1000) + \".\" + (elapsd%1000) + ", "-                           \" seconds\");", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "934435f00372377f25f59c046a805b96", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/PathConvert.java", "commitBeforeChange": "b5b99c769a21d3602ee35948cf004925f03464ba", "commitAfterChange": "25253f3faa839d0341bdfe9eecb06d8791fcf8ea", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+        Path savedPath = path;", "+        String savedPathSep = pathSep; // may be altered in validateSetup", "+        String savedDirSep = dirSep; // may be altered in validateSetup", "-        // If we are a reference, create a Path from the reference", "-        if( isReference() ) {", "-            path = new Path(getProject()).createPath();", "-", "-            Object obj = refid.getReferencedObject(getProject());", "-", "-            if( obj instanceof Path ) {", "-                path.setRefid(refid);", "-            } else if( obj instanceof FileSet ) {", "-                FileSet fs = (FileSet)obj;", "-                path.addFileset( fs );", "-            } else if( obj instanceof DirSet ) {", "-                DirSet ds = (DirSet)obj;", "-                path.addDirset( ds );", "-            } else if( obj instanceof FileList ) {", "-                FileList fl = (FileList)obj;", "-                path.addFilelist( fl );", "+        try {", "+            // If we are a reference, create a Path from the reference", "+            if( isReference() ) {", "+                path = new Path(getProject()).createPath();", "-            } else {", "-                throw new BuildException( \"'refid' does not refer to a path, fileset, dirset, or filelist.\" );", "-            }", "-        }", "-", "-        validateSetup();                    // validate our setup", "-", "-        // Currently, we deal with only two path formats: Unix and Windows", "-        // And Unix is everything that is not Windows", "-        // (with the exception for NetWare below)", "-", "-        // for NetWare and OS/2, piggy-back on Windows, since here and", "-        // in the apply code, the same assumptions can be made as with", "-        // windows - that \\\\ is an OK separator, and do comparisons", "-        // case-insensitive.", "-        onWindows = Os.isFamily(\"dos\");", "-", "-        String fromDirSep = onWindows ? \"\\\\\" : \"/\";", "-", "-        StringBuffer rslt = new StringBuffer( 100 );", "-", "-        // Get the list of path components in canonical form", "-        String[] elems = path.list();", "-", "-        for( int i=0; i < elems.length; i++ ) {", "-            String elem = elems[i];", "-", "-            elem = mapElement( elem );      // Apply the path prefix map", "-", "-", "-            // Now convert the path and file separator characters from the", "-            // current os to the target os.", "-", "-            if( i != 0 ) {", "-                rslt.append( pathSep );", "-            }", "-", "-            StringTokenizer stDirectory = ", "-                new StringTokenizer(elem, fromDirSep, true);", "-            String token = null;", "-", "-            while ( stDirectory.hasMoreTokens() ) {", "-                token = stDirectory.nextToken();", "-", "-                if (fromDirSep.equals(token)) {", "-                    rslt.append( dirSep ); ", "-                }", "-                else {", "-                    rslt.append( token );", "+                Object obj = refid.getReferencedObject(getProject());", "+                ", "+                if( obj instanceof Path ) {", "+                    path.setRefid(refid);", "+                } else if( obj instanceof FileSet ) {", "+                    FileSet fs = (FileSet)obj;", "+                    path.addFileset( fs );", "+                } else if( obj instanceof DirSet ) {", "+                    DirSet ds = (DirSet)obj;", "+                    path.addDirset( ds );", "+                } else if( obj instanceof FileList ) {", "+                    FileList fl = (FileList)obj;", "+                    path.addFilelist( fl );", "+                    ", "+                } else {", "+                    throw new BuildException( \"'refid' does not refer to a \"", "+                                              + \"path, fileset, dirset, or \"", "+                                              + \"filelist.\" );", "+            ", "+            validateSetup();                    // validate our setup", "+            ", "+            // Currently, we deal with only two path formats: Unix and Windows", "+            // And Unix is everything that is not Windows", "+            // (with the exception for NetWare and OS/2 below)", "+            ", "+            // for NetWare and OS/2, piggy-back on Windows, since here and", "+            // in the apply code, the same assumptions can be made as with", "+            // windows - that \\\\ is an OK separator, and do comparisons", "+            // case-insensitive.", "+            String fromDirSep = onWindows ? \"\\\\\" : \"/\";", "+            ", "+            StringBuffer rslt = new StringBuffer( 100 );", "+            ", "+            // Get the list of path components in canonical form", "+            String[] elems = path.list();", "+            ", "+            for( int i=0; i < elems.length; i++ ) {", "+                String elem = elems[i];", "+                ", "+                elem = mapElement( elem );      // Apply the path prefix map", "+                ", "+                ", "+                // Now convert the path and file separator characters from the", "+                // current os to the target os.", "+                ", "+                if( i != 0 ) {", "+                    rslt.append( pathSep );", "+                }", "+                ", "+                StringTokenizer stDirectory = ", "+                    new StringTokenizer(elem, fromDirSep, true);", "+                String token = null;", "+                ", "+                while ( stDirectory.hasMoreTokens() ) {", "+                    token = stDirectory.nextToken();", "+                    ", "+                    if (fromDirSep.equals(token)) {", "+                        rslt.append( dirSep ); ", "+                    }", "+                    else {", "+                        rslt.append( token );", "+                    }", "+                }", "+            }", "+", "+            // Place the result into the specified property", "+            String value = rslt.toString();", "+            ", "+            log( \"Set property \" + property + \" = \" + value, ", "+                 Project.MSG_VERBOSE );", "+            ", "+            getProject().setNewProperty( property, value );", "+        } finally {", "+            path = savedPath;", "+            dirSep = savedDirSep;", "+            pathSep = savedPathSep;", "-", "-        // Place the result into the specified property", "-        String value = rslt.toString();", "-", "-        log( \"Set property \" + property + \" = \" + value, Project.MSG_VERBOSE );", "-", "-        getProject().setNewProperty( property, value );"]}]}
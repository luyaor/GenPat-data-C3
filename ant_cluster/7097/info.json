{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f5ee961c7c9ac0215b857eca8f7e2402", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00c0611e154914c8e92019208a1135de", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "149ce34431423cd116e5d7175ff281c30565aa6a", "commitAfterChange": "5460755b447223e93e926e11a08e4df4f0e0ddb5", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 60, "signatureBeforeChange": "      private Object createAddTypeElement(         Project project, Object parent, String elementName)", "signatureAfterChange": "     private NestedCreator createAddTypeCreator(         Project project, Object parent, String elementName)         throws BuildException", "diff": ["-    private Object createAddTypeElement(", "-        Project project, Object parent, String elementName) {", "+     */", "+    private NestedCreator createAddTypeCreator(", "+        Project project, Object parent, String elementName)", "+        throws BuildException {", "+        if (addTypeMethods.size() == 0) {", "+            return null;", "+        }", "+", "-", "+        final Method method = addMethod;", "+        final Object nestedObject = addedObject;", "-        try {", "-            addMethod.invoke(parent, new Object[] {addedObject});", "-        } catch (IllegalAccessException ex) {", "-            throw new BuildException(ex);", "-        } catch (InvocationTargetException ex) {", "-            Throwable t = ex.getTargetException();", "-            if (t instanceof BuildException) {", "-                throw (BuildException) t;", "+        return new NestedCreator() {", "+            public boolean isPolyMorphic() {", "+                return false;", "-            throw new BuildException(t);", "-        } catch (Throwable t) {", "-            throw new BuildException(t);", "-        }", "-        return addedObject;", "+", "+            public Class getElementClass() {", "+                return null;", "+            }", "+            public Object create(Project project, Object parent, Object ignore)", "+                throws InvocationTargetException, IllegalAccessException {", "+                if (!method.getName().endsWith(\"Configured\")) {", "+                    method.invoke(parent, new Object[]{nestedObject});", "+                }", "+                return nestedObject;", "+            }", "+            public void store(Object parent, Object child)", "+                throws InvocationTargetException, IllegalAccessException,", "+                InstantiationException {", "+                if (method.getName().endsWith(\"Configured\")) {", "+                    method.invoke(parent, new Object[]{nestedObject});", "+                }", "+            }", "+        };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "015f3895d21c671929582ac1f81dc012", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/DOMElementWriter.java", "commitBeforeChange": "a0b111116d82b1ab530e3237b9b1706455052771", "commitAfterChange": "b7b59490a82c8b2df3c580a2f2502cc28b8e75d8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void openElement(Element element, Writer out, int indent,                             String indentWith, boolean hasChildren)         throws IOException", "signatureAfterChange": "     public void openElement(Element element, Writer out, int indent,                             String indentWith, boolean hasChildren)         throws IOException", "diff": ["+        if (namespacePolicy.qualifyElements) {", "+            String prefix = (String) nsPrefixMap.get(element.getNamespaceURI());", "+            if (prefix == null) {", "+                if (nsPrefixMap.isEmpty()) {", "+                    // steal default namespace", "+                    prefix = \"\";", "+                } else {", "+                    prefix = NS + (nextPrefix++);", "+                }", "+                nsPrefixMap.put(element.getNamespaceURI(), prefix);", "+                addNSDefinition(element, element.getNamespaceURI());", "+            }", "+            if (!\"\".equals(prefix)) {", "+                out.write(prefix);", "+                out.write(\":\");", "+            }", "+        }", "+            if (namespacePolicy.qualifyAttributes) {", "+                String prefix =", "+                    (String) nsPrefixMap.get(attr.getNamespaceURI());", "+                if (prefix == null) {", "+                    prefix = NS + (nextPrefix++);", "+                    nsPrefixMap.put(attr.getNamespaceURI(), prefix);", "+                    addNSDefinition(element, attr.getNamespaceURI());", "+                }", "+                out.write(prefix);", "+                out.write(\":\");", "+            }", "+", "+        // write namespace declarations", "+        ArrayList al = (ArrayList) nsURIByElement.get(element);", "+        if (al != null) {", "+            Iterator iter = al.iterator();", "+            while (iter.hasNext()) {", "+                String uri = (String) iter.next();", "+                String prefix = (String) nsPrefixMap.get(uri);", "+                out.write(\" xmlns\");", "+                if (!\"\".equals(prefix)) {", "+                    out.write(\":\");", "+                    out.write(prefix);", "+                }", "+                out.write(\"=\\\"\");", "+                out.write(uri);", "+                out.write(\"\\\"\");", "+            }", "+        }", "+", "+            removeNSDefinitions(element);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09cb4f9dc4b4259a08979315c2cf2acc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "6b5c48061a0409b564f51bcf0717e946a0a41556", "commitAfterChange": "de06c1b597ffcab2fd85890c0d110873a7e3b738", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void catFiles(File base, String[] files)", "signatureAfterChange": "     private void catFiles(File base, String[] files)", "diff": ["-                    byte[] buffer = new byte[8096];", "+                    byte[] buffer = new byte[8192];", "-        } else { // user specified encoding, assume line oriented input", "+        } else { // user specified encoding", "-            PrintWriter out = null;", "+            Writer out = null;", "-                    out = new PrintWriter(", "-                              new OutputStreamWriter(", "-                                  new LogOutputStream(this, Project.MSG_WARN)));", "+                    out = new OutputStreamWriter(", "+                              new LogOutputStream(this, Project.MSG_WARN));", "-                    out = new PrintWriter(", "-                              new OutputStreamWriter(", "-                                  new FileOutputStream(destinationFile", "-                                                       .getAbsolutePath(),", "-                                                       append),", "-                                  encoding));", "+                    out = new OutputStreamWriter(", "+                              new FileOutputStream(destinationFile", "+                                                   .getAbsolutePath(),", "+                                                   append),", "+                              encoding);", "-                    while ((line = in.readLine()) != null) {", "-                        // Log the line, using WARN so it displays in", "-                        // 'quiet' mode.", "-                        out.println(line);", "+                    char[] buffer = new char[4096];", "+                    while (true) {", "+                        int charsRead = in.read(buffer);", "+                        if (charsRead == -1) { // EOF", "+                            break;", "+                        }", "+                        ", "+                        // Write the read data.", "+                        out.write(buffer, 0, charsRead);", "+                    out.flush();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2112a3689c05f83d47fd209266cf9345", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "d5b535aa9a9f69dcd2d0cada46e88e7f3295c084", "commitAfterChange": "f8e71b50339d8fc15bdf6813eaa91d24096817a7", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "     protected void printResults(ResultSet rs, PrintStream out)         throws SQLException", "signatureAfterChange": "     protected void printResults(ResultSet rs, PrintStream out) throws SQLException", "diff": ["-    protected void printResults(ResultSet rs, PrintStream out)", "-        throws SQLException {", "+    protected void printResults(ResultSet rs, PrintStream out) throws SQLException {", "-            StringBuffer line = new StringBuffer();", "-            if (showheaders) {", "-                for (int col = 1; col < columnCount; col++) {", "-                     line.append(md.getColumnName(col));", "-                     line.append(\",\");", "-                }", "-                line.append(md.getColumnName(columnCount));", "-                out.println(line);", "-                line = new StringBuffer();", "-            }", "-            while (rs.next()) {", "-                boolean first = true;", "-                for (int col = 1; col <= columnCount; col++) {", "-                    String columnValue = rs.getString(col);", "-                    if (columnValue != null) {", "-                        columnValue = columnValue.trim();", "+            if (columnCount > 0) {", "+                if (showheaders) {", "+                    out.print(md.getColumnName(1));", "+                    for (int col = 2; col <= columnCount; col++) {", "+                         out.write(',');", "+                         out.print(md.getColumnName(col));", "-", "-                    if (first) {", "-                        first = false;", "-                    } else {", "-                        line.append(\",\");", "-                    }", "-                    line.append(columnValue);", "+                    out.println();", "-                out.println(line);", "-                line = new StringBuffer();", "+                while (rs.next()) {", "+                    out.print(rs.getString(1));", "+                    for (int col = 2; col <= columnCount; col++) {", "+                        out.write(',');", "+                        out.print(rs.getString(col));", "+                    }", "+                    out.println();", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e1371ad209b1728ae35b5968497640e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/starteam/StarTeamCheckin.java", "commitBeforeChange": "837f7ef785e24137608ba41f850d605b23bccff4", "commitAfterChange": "23e61358c8ed2aa3fe63c1f67082150047f1df9e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private void addUncontrolledItems(Hashtable localFiles, Folder folder)             throws IOException", "signatureAfterChange": "         void processUncontrolledItems() throws BuildException", "diff": ["-    private void addUncontrolledItems(Hashtable localFiles, Folder folder)", "-            throws IOException {", "-        try {", "-            Enumeration e = localFiles.keys();", "-            while (e.hasMoreElements()) {", "-                java.io.File file =", "-                        new java.io.File(e.nextElement().toString());", "-                add(folder, file);", "-        } catch (SecurityException e) {", "-            log(\"Error adding file: \" + e, Project.MSG_ERR);", "+         */", "+        void processUncontrolledItems() throws BuildException {", "+            if (this.isActive()) {", "+                Enumeration e = this.keys();", "+                while (e.hasMoreElements()) {", "+                    java.io.File local = (java.io.File) e.nextElement();", "+                    Item remoteItem = (Item) this.get(local);", "+                    remoteItem.update();", "+    ", "+                    // once we find a folder that isn't in the repository, ", "+                    // we know we can add it.", "+                    if (local.isDirectory()) {", "+                        Folder folder = (Folder) remoteItem;", "+                        log(\"Added uncontrolled folder \" ", "+                            + folder.getFolderHierarchy()", "+                            + \" from \" + local.getAbsoluteFile());", "+                        if (isRecursive()) {", "+                            UnmatchedFileMap submap = ", "+                                new CheckinMap().init(local, folder);", "+                            submap.processUncontrolledItems();", "+                        }", "+                    } else {", "+                        com.starbase.starteam.File remoteFile =", "+                            (com.starbase.starteam.File) remoteItem;", "+                        log(\"Added uncontrolled file \" ", "+                            + TreeBasedTask.getFullRepositoryPath(remoteFile)", "+                            + \" from \" + local.getAbsoluteFile());", "+    ", "+                    }", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2d4a7ccaa3c791f56080f53c10e3420", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "3e919cffbef3ed88a7920a9e79c1b355524b3403", "commitAfterChange": "139cee57f7f134a2ac8b80776790d7129c24685f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 54, "signatureBeforeChange": "                              Object create(                                 Project project, Object parent, Object child)                                 throws InvocationTargetException,                                 IllegalAccessException, InstantiationException", "signatureAfterChange": "          Object create(Project project, Object parent, Object child)                 throws InvocationTargetException,                 IllegalAccessException, InstantiationException", "diff": ["-", "-                            Object create(", "-                                Project project, Object parent, Object child)", "-                                throws InvocationTargetException,", "-                                IllegalAccessException, InstantiationException {", "-                                if (child != null) {", "-                                    // Empty", "-                                } else if (c.getParameterTypes().length == 0) {", "-                                    child = c.newInstance(new Object[] {});", "-                                } else {", "-                                    child = c.newInstance(new Object[] {", "-                                        project});", "-                                }", "-                                if (child instanceof  PreSetDef.PreSetDefinition) {", "-                                    child = ((PreSetDef.PreSetDefinition) child)", "-                                        .createObject(project);", "-                                }", "-                                return child;", "-                            }", "+", "+        Object create(Project project, Object parent, Object child)", "+                throws InvocationTargetException,", "+                IllegalAccessException, InstantiationException {", "+            if (child != null) {", "+                // Empty", "+            } else {", "+                child = constructor.newInstance(", "+                    (constructor.getParameterTypes().length == 0)", "+                    ? new Object[] {} : new Object[] {project});", "+            }", "+            if (child instanceof PreSetDef.PreSetDefinition) {", "+                child = ((PreSetDef.PreSetDefinition) child)", "+                    .createObject(project);", "+            }", "+            if (behavior == ADD) {", "+                istore(parent, child);", "+            }", "+            return child;", "+        }"]}]}
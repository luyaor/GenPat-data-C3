{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "29c39e60193335a002e1b6234cf4a1fa", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "394110626c6eed6fbebcc43790b1b2a3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "32f323668f263fad0bc38a43c6d4e6a1f4579c8a", "commitAfterChange": "a920aa9f305e0f998c908798c99b6d108f5d4a58", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+        checkAttributes();", "+", "+        for (Iterator iter = sources.iterator(); iter.hasNext(); ) {", "+            Resource r = (Resource) iter.next();", "+            URLProvider up = (URLProvider) r.as(URLProvider.class);", "+            URL source = up.getURL();", "+", "+            File dest = destination;", "+            if (destination.isDirectory()) {", "+                if (mapperElement != null) {", "+                    String path = source.getPath();", "+                    if (path.endsWith(\"/\")) {", "+                        path = path.substring(0, path.length() - 1);", "+                    }", "+                    int slash = path.lastIndexOf(\"/\");", "+                    if (slash > -1) {", "+                        path = path.substring(slash + 1);", "+                    }", "+                    dest = new File(destination, path);", "+                } else {", "+                    FileNameMapper mapper = mapperElement.getImplementation();", "+                    String[] d = mapper.mapFileName(r.getName());", "+                    if (d == null || d.length != 1) {", "+                        log(\"skipping \" + r + \" - mapper can't handle it\",", "+                            Project.MSG_WARN);", "+                        continue;", "+                    }", "+                    dest = new File(destination, d[0]);", "+                }", "+            }", "-            doGet(logLevel, progress);", "+            doGet(source, dest, logLevel, progress);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "683e5ed69f4aef805ed2a26871ec8dd1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/PatternSet.java", "commitBeforeChange": "55ed11a225d2a2c7d2cc28a6b07d425a79d3b91a", "commitAfterChange": "c2e92b31856632faa104d9d1a93c7e1480aa8b92", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 25, "signatureBeforeChange": "     private void readFiles(Project p)", "signatureAfterChange": "     private void readFiles(Project p)", "diff": ["-        if (incl != null) {", "-            readPatterns(incl, includeList, p);", "-            incl = null;", "+        if (includesFileList.size() > 0) {", "+            Enumeration e = includesFileList.elements();", "+            while (e.hasMoreElements()) {", "+            \tNameEntry ne = (NameEntry)e.nextElement();", "+            \tString fileName = ne.evalName(p);", "+            \tif (fileName != null) {", "+                    File inclFile = p.resolveFile(fileName);", "+                    if (!inclFile.exists())", "+                        throw new BuildException(\"Includesfile \"", "+                                                 + inclFile.getAbsolutePath()", "+                                                 + \" not found.\");", "+                    readPatterns(inclFile, includeList, p);", "+            \t}", "+            }", "+            includesFileList.clear();", "-        if (excl != null) {", "-            readPatterns(excl, excludeList, p);", "-            excl = null;", "-        }", "-    }", "+        if (excludesFileList.size() > 0) {", "+            Enumeration e = includesFileList.elements();", "+            while (e.hasMoreElements()) {", "+            \tNameEntry ne = (NameEntry)e.nextElement();", "+            \tString fileName = ne.evalName(p);", "+            \tif (fileName != null) {", "+                    File exclFile = p.resolveFile(fileName);", "+                    if (!exclFile.exists())", "+                        throw new BuildException(\"Excludesfile \"", "+                                                 + exclFile.getAbsolutePath()", "+                                                 + \" not found.\");", "+                    readPatterns(exclFile, excludeList, p);", "+            \t}", "+            }", "+            excludesFileList.clear();", "+        }"]}]}
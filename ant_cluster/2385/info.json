{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a5a845d41e3f505f17d297499f7b7ace", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f127583a0848bfef5f835e86c83039b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "6103df477a1462aaa01639cec094e2b53172d711", "commitAfterChange": "2e15020c1e0390dcba2144bf2a66e387edd9f2c8", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     protected void printResults() throws java.sql.SQLException", "signatureAfterChange": "     protected void printResults() throws java.sql.SQLException", "diff": ["-            while ((rs = statement.getResultSet()) != null) {", "-\t\tlog(\"Processing new result set.\", Project.MSG_VERBOSE);", "-                ResultSetMetaData md = rs.getMetaData();", "-                int columnCount = md.getColumnCount();", "-                StringBuffer line = new StringBuffer();", "-                if (showheaders) {", "-                    for (int col = 1; col < columnCount; col++) {", "-                        line.append(md.getColumnName(col));", "-                        line.append(\",\");", "+            do {", "+                rs = statement.getResultSet();", "+                if (rs != null) {", "+        \t    log(\"Processing new result set.\", Project.MSG_VERBOSE);", "+                    ResultSetMetaData md = rs.getMetaData();", "+                    int columnCount = md.getColumnCount();", "+                    StringBuffer line = new StringBuffer();", "+                    if (showheaders) {", "+                        for (int col = 1; col < columnCount; col++) {", "+                            line.append(md.getColumnName(col));", "+                            line.append(\",\");", "+                        }", "+                        line.append(md.getColumnName(columnCount));", "+                        out.println(line);", "+                        line.setLength(0);", "-                    line.append(md.getColumnName(columnCount));", "-                    out.println(line);", "-                    line.setLength(0);", "-                }", "-                while (rs.next()) {", "-                    for (int col = 1; col < columnCount; col++) {", "-                        line.append(rs.getString(col).trim());", "-                        line.append(\",\");", "+                    while (rs.next()) {", "+                        boolean first = true;", "+                        for (int col = 1; col <= columnCount; col++) {", "+                            String columnValue = rs.getString(col);", "+                            if (columnValue != null) {", "+                                columnValue = columnValue.trim();", "+                            }", "+                             ", "+                            if (first) {", "+                                first = false;", "+                            }", "+                            else {", "+                                line.append(\",\");", "+                            }", "+                            line.append(columnValue);", "+                        }", "+                        out.println(line);", "+                        line.setLength(0);", "-                    line.append(rs.getString(columnCount).trim());", "-                    out.println(line);", "-                    line.setLength(0);", "-                statement.getMoreResults();", "+            while (statement.getMoreResults());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87ad662bac9803dac62af53aab91661c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "596d7e465f62f4783ed3ac41870098d56d018322", "commitAfterChange": "f4fc4080573cc5711f0e2b888fe9d0af6720eaca", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     protected void printResults() throws java.sql.SQLException", "signatureAfterChange": "     protected void printResults(PrintStream out) throws java.sql.SQLException", "diff": ["-    protected void printResults() throws java.sql.SQLException {", "+    protected void printResults(PrintStream out) throws java.sql.SQLException {", "-        PrintStream out = System.out;", "-        try {", "-            if (output != null) {", "-\t\tlog(\"Opening PrintStream to output file \" + output, Project.MSG_VERBOSE);", "-                out = new PrintStream(new BufferedOutputStream(new FileOutputStream(output)));", "-            }", "-            do {", "-                rs = statement.getResultSet();", "-                if (rs != null) {", "-        \t    log(\"Processing new result set.\", Project.MSG_VERBOSE);", "-                    ResultSetMetaData md = rs.getMetaData();", "-                    int columnCount = md.getColumnCount();", "-                    StringBuffer line = new StringBuffer();", "-                    if (showheaders) {", "-                        for (int col = 1; col < columnCount; col++) {", "-                            line.append(md.getColumnName(col));", "+        do {", "+            rs = statement.getResultSet();", "+            if (rs != null) {", "+      \t        log(\"Processing new result set.\", Project.MSG_VERBOSE);", "+                ResultSetMetaData md = rs.getMetaData();", "+                int columnCount = md.getColumnCount();", "+                StringBuffer line = new StringBuffer();", "+                if (showheaders) {", "+                    for (int col = 1; col < columnCount; col++) {", "+                         line.append(md.getColumnName(col));", "+                         line.append(\",\");", "+                    }", "+                    line.append(md.getColumnName(columnCount));", "+                    out.println(line);", "+                    line.setLength(0);", "+                }", "+                while (rs.next()) {", "+                    boolean first = true;", "+                    for (int col = 1; col <= columnCount; col++) {", "+                        String columnValue = rs.getString(col);", "+                        if (columnValue != null) {", "+                            columnValue = columnValue.trim();", "+                        }", "+                         ", "+                        if (first) {", "+                            first = false;", "+                        }", "+                        else {", "-                        line.append(md.getColumnName(columnCount));", "-                        out.println(line);", "-                        line.setLength(0);", "+                        line.append(columnValue);", "-                    while (rs.next()) {", "-                        boolean first = true;", "-                        for (int col = 1; col <= columnCount; col++) {", "-                            String columnValue = rs.getString(col);", "-                            if (columnValue != null) {", "-                                columnValue = columnValue.trim();", "-                            }", "-                             ", "-                            if (first) {", "-                                first = false;", "-                            }", "-                            else {", "-                                line.append(\",\");", "-                            }", "-                            line.append(columnValue);", "-                        }", "-                        out.println(line);", "-                        line.setLength(0);", "-                    }", "+                    out.println(line);", "+                    line.setLength(0);", "-            while (statement.getMoreResults());", "-        catch (IOException ioe) {", "-            throw new BuildException(\"Error writing \" + output.getAbsolutePath(), ioe, location);", "-        }", "-        finally {", "-            if (out != null && out != System.out) {", "-                out.close();", "-            }", "-        }", "+        while (statement.getMoreResults());", "+        out.println();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b4b80e53b8d1ea7abcba5c757c4d7db", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/Cab.java", "commitBeforeChange": "08eef4e8a6bbe820b1622250bdc08de9b0d0cb15", "commitAfterChange": "66d9c994937f8b4667773ebad664322a9f0e74c6", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        // we must be on Windows to continue", "-        if (!isWindows)", "-        {", "-            log(\"cannot run on non-Windows platforms: \" + myos,", "-                Project.MSG_VERBOSE);", "-            return;", "-        }", "-        ", "+", "-        ", "+    ", "-        try {", "-            File listFile = createListFile(files);", "-            ExecTask exec = createExec();", "-            File outFile = null;", "+        // we must be on Windows to continue", "+        if (!isWindows) {", "+            log(\"Using listcab/libcabinet\", Project.MSG_VERBOSE);", "-            // die if cabarc fails", "-            exec.setFailonerror(true);", "-            exec.setDir(baseDir);", "+            StringBuffer sb = new StringBuffer();", "-            if (!doVerbose)", "-            {", "-                outFile = createTempFile(\"ant\", null);", "-                exec.setOutput(outFile);", "+            Enumeration fileEnum = files.elements();", "+            ", "+            while (fileEnum.hasMoreElements()) {", "+                sb.append(fileEnum.nextElement()).append(\"\\n\");", "+            sb.append(\"\\n\").append(cabFile.getAbsolutePath()).append(\"\\n\");", "+            ", "+            try {", "+                Process p = Runtime.getRuntime().exec(\"listcab\");", "+                OutputStream out = p.getOutputStream();", "+                out.write(sb.toString().getBytes());", "+                out.flush();", "+                out.close();", "+            } catch (IOException ex) {", "+                String msg = \"Problem creating \" + cabFile + \" \" + ex.getMessage();", "+                throw new BuildException(msg);", "+            }", "+        } else {", "+            try {", "+                File listFile = createListFile(files);", "+                ExecTask exec = createExec();", "+                File outFile = null;", "-            exec.setCommand(createCommand(listFile));", "-            exec.execute();", "-", "-            if (outFile != null)", "-            {", "-                outFile.delete();", "+                // die if cabarc fails", "+                exec.setFailonerror(true);", "+                exec.setDir(baseDir);", "+                ", "+                if (!doVerbose) {", "+                    outFile = createTempFile(\"ant\", null);", "+                    exec.setOutput(outFile);", "+                }", "+                    ", "+                exec.setCommand(createCommand(listFile));", "+                exec.execute();", "+    ", "+                if (outFile != null) {", "+                    outFile.delete();", "+                }", "+                ", "+                listFile.delete();", "+            } catch (IOException ioe) {", "+                String msg = \"Problem creating \" + cabFile + \" \" + ioe.getMessage();", "+                throw new BuildException(msg);", "-            ", "-            listFile.delete();", "-        } catch (IOException ioe) {", "-            String msg = \"Problem creating \" + cabFile + \" \" + ioe.getMessage();", "-            throw new BuildException(msg);"]}]}
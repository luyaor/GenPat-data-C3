{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "de61b8ed4ffca8af42af05f4c688eac8", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ce7fa7e35c4da01e239a9e84cdf5bea", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/modules/core/RegisterConverter.java", "commitBeforeChange": "d23b08a302496937c4d1d08e31431ece313de2b8", "commitAfterChange": "5872737ff5d0006fffd509da87f4bc9115cb5a39", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void execute()         throws TaskException", "signatureAfterChange": "      public void execute()         throws TaskException", "diff": ["-        final URL url = getURL( m_lib );", "-", "+", "+        final File file = getFile( m_lib );", "-        if( !isFullyDefined && null == url )", "+        if( !isFullyDefined && null == file )", "-                m_tskDeployer.deployConverter( m_classname, url.toString(), url );", "+                m_tskDeployer.deployConverter( m_classname, file );", "-                                         \" from \" + url, de );", "+                                         \" from \" + file, de );", "-            m_converterRegistry.registerConverter( m_classname, m_sourceType, m_destinationType );", "+            try", "+            {", "+                m_converterRegistry.registerConverter( m_classname, m_sourceType, m_destinationType );", "-            final DefaultTypeFactory factory = new DefaultTypeFactory( new URL[] { url } );", "-            factory.addNameClassMapping( m_classname, m_classname );", "-", "-            try { m_typeManager.registerType( Converter.ROLE, m_classname, factory ); }", "+                final URL url = file.toURL();", "+                final DefaultTypeFactory factory = new DefaultTypeFactory( new URL[] { url } );", "+                factory.addNameClassMapping( m_classname, m_classname );", "+                ", "+                m_typeManager.registerType( Converter.ROLE, m_classname, factory ); ", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d911b28955c5b33ca140faea8dd76cef", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/modules/core/RegisterConverter.java", "commitBeforeChange": "7b722732fbbdb511be32f94588d43f55b0b51f65", "commitAfterChange": "8d9a74fe25ffb24cb1b8a2c6a191ea3ac7c02b38", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "          public void execute()         throws TaskException", "signatureAfterChange": "      public void execute()         throws TaskException", "diff": ["-    ", "+", "-        ", "+", "-        ", "+", "-                                    \"parameters when supplying a name\" );", "+                                     \"parameters when supplying a name\" );", "-            try ", "-            { ", "-                m_tskDeployer.deployConverter( m_classname, url.toString(), url ); ", "+            try", "+            {", "+                m_tskDeployer.deployConverter( m_classname, url.toString(), url );", "-                throw new TaskException( \"Failed deploying \" + m_classname + ", "-                                        \" from \" + url, de );", "+                throw new TaskException( \"Failed deploying \" + m_classname +", "+                                         \" from \" + url, de );", "-            final DefaultConverterInfo info = ", "-                new DefaultConverterInfo( m_sourceType, m_destinationType );", "-            final DefaultLocator locator = new DefaultLocator( m_classname, url );", "+            final ConverterInfo info = new ConverterInfo( m_sourceType, m_destinationType );", "+            m_converterRegistry.registerConverterInfo( m_classname, info );", "-            try", "+            final DefaultComponentFactory factory =", "+                new DefaultComponentFactory( new URL[] { url } );", "+", "+            factory.addNameClassMapping( m_classname, m_classname );", "+            try { m_typeManager.registerType( Converter.ROLE, m_classname, factory ); }", "+            catch( final Exception e )", "-                m_converterEngine.getInfoRegistry().register( m_classname, info ); ", "-                m_converterEngine.getRegistry().register( m_classname, locator ); ", "-            }", "-            catch( final RegistryException re )", "-            {", "-                throw new TaskException( \"Error registering resource\", re );", "+                throw new TaskException( \"Failed to register converter \" + m_classname, e );"]}]}
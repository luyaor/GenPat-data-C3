{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b23f403eba594f47c70824f6ae2f666", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b34e57b558c8b5fb152cbffbaae85792", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/Permissions.java", "commitBeforeChange": "446a11fca8f834862f54a49010c1551ffa572c0d", "commitAfterChange": "543e74c7843629a29d55ae81068c57385e6b3eab", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "         public void checkPermission(java.security.Permission perm)", "signatureAfterChange": "         public void checkPermission(java.security.Permission perm)", "diff": ["-                if (!granted.implies(perm)) {", "-                    throw new SecurityException(\"Permission \" + perm +\" was not granted.\");", "-                }", "-                for (Iterator i = revokedPermissions.listIterator(); i.hasNext();) {", "-                    if (((Permissions.Permission)i.next()).matches(perm)) {", "-                        throw new SecurityException(\"Permission \" + perm +\" was revoked.\");", "+                if (delegateToOldSM && !perm.getName().equals(\"exitVM\")) {", "+                    boolean permOK = false;", "+                    if (granted.implies(perm)) {", "+                        permOK = true;", "+                    checkRevoked(perm);", "+                    /*", "+                     if the permission was not explicitly granted or revoked", "+                     the original security manager will do its work", "+                    */", "+                    if (!permOK && origSm != null) {", "+                        origSm.checkPermission(perm);", "+                    }", "+                }  else {", "+                    if (!granted.implies(perm)) {", "+                        throw new SecurityException(\"Permission \" + perm + \" was not granted.\");", "+                    }", "+                    checkRevoked(perm);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1f1cfa32a61b10ea90eb59d33147eae", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/embeddor/MyrmidonEmbeddor.java", "commitBeforeChange": "2579eaa04ea64c67c1c19e32b50c63af76ffe9c8", "commitAfterChange": "87711d5afc3fc82ba10ace9fabaf47a47d4e3a59", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private Parameters createDefaultParameters()", "signatureAfterChange": "     private Parameters createDefaultParameters()", "diff": ["-                              \"org.apache.ant.convert.engine.DefaultConverterEngine\" );", "+                               \"org.apache.ant.convert.engine.DefaultConverterEngine\" );", "-                              \"org.apache.ant.tasklet.engine.DefaultDataTypeEngine\" );", "+                               \"org.apache.ant.tasklet.engine.DefaultDataTypeEngine\" );", "-                              \"org.apache.myrmidon.components.executor.DefaultExecutor\" );", "+                               \"org.apache.myrmidon.components.executor.DefaultExecutor\" );", "-                              \"org.apache.ant.project.DefaultProjectEngine\" );", "+                               \"org.apache.ant.project.DefaultProjectEngine\" );", "-                              \"org.apache.ant.project.DefaultProjectBuilder\" );", "+                               \"org.apache.myrmidon.components.builder.DefaultProjectBuilder\" );", "-                              \"org.apache.ant.tasklet.engine.DefaultTskDeployer\" );", "+                               \"org.apache.ant.tasklet.engine.DefaultTskDeployer\" );", "-                              \"org.apache.myrmidon.components.configurer.DefaultConfigurer\" );", "+                               \"org.apache.myrmidon.components.configurer.DefaultConfigurer\" );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d75ddfcb52c15e0a0226d2b7ed534450", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/util/ChainReaderHelper.java", "commitBeforeChange": "1f71acf427e164e75bc4f90b1ddaecd51998709b", "commitAfterChange": "00ec1c435af8d15b42cb779373026ceedea92e59", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public final Reader getAssembledReader() throws BuildException", "signatureAfterChange": "     public final Reader getAssembledReader() throws BuildException", "diff": ["-                                    throw new BuildException(className +", "-                                        \" does not extend java.io.FilterReader\");", "+                                    throw new BuildException(className", "+                                        + \" does not extend java.io.FilterReader\");", "-                                    if (types.length == 1 &&", "-                                        types[0].isAssignableFrom(Reader.class)) {", "+                                    if (types.length == 1", "+                                        && types[0].isAssignableFrom(Reader.class)) {", "-                                if ( !consPresent) {", "-                                    throw new BuildException( className +", "-                                            \" does not define a public constructor\" +", "-                                            \" that takes in a Reader as its single argument.\");", "+                                if (!consPresent) {", "+                                    throw new BuildException(className", "+                                        + \" does not define a public constructor\"", "+                                        + \" that takes in a Reader as its \"", "+                                        + \"single argument.\");"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7803b9f444ab9309538c4f189bf8cdd9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a239cc5f52b85d9b5e7ccd7b8ba82ce", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/DOMElementWriter.java", "commitBeforeChange": "2ce3f173860dbc3d3838855d25bd5be0ab6962eb", "commitAfterChange": "7b8097afa8f7b95a8d6bd098884ae873e8ca25de", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public String encodedata(final String value)", "signatureAfterChange": "     public String encodedata(final String value)", "diff": ["-        return sb.toString();", "+", "+        String result = sb.toString();", "+        int cdEnd = result.indexOf(\"]]>\");", "+        while (cdEnd != -1) {", "+            sb.setLength(cdEnd);", "+            sb.append(\"&x5d;&x5d;&gt;\")", "+                .append(result.substring(cdEnd+3));", "+            result = sb.toString();", "+            cdEnd = result.indexOf(\"]]>\");", "+        }", "+        ", "+        return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "314996d5de7295d3e617851d9d7b3daf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "ee344eb12509b4a69af0d52f285bbd7230f2c556", "commitAfterChange": "29cf33f78f16638f62f3471816c1879e0a8190f2", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "       protected Process exec() throws IOException", "signatureAfterChange": "       protected Process exec() throws IOException", "diff": ["-        return Runtime.getRuntime().exec(getCommandline(), getEnvironment());", "+        String userDir = System.getProperty(\"user.dir\");", "+        try {", "+            if (myos.equals(\"Mac OS\") && workingDirectory != null) {", "+                System.getProperties().put(\"user.dir\", ", "+                                           workingDirectory.getAbsolutePath());", "+            }", "+", "+            return Runtime.getRuntime().exec(getCommandline(), getEnvironment());", "+        } finally {", "+            if (myos.equals(\"Mac OS\") && workingDirectory != null) {", "+                System.getProperties().put(\"user.dir\", userDir);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ed43d9f1ce1a343ad45a531869c7c13", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/Frame.java", "commitBeforeChange": "65b70febb53b077317c4d678291f9af547c3d116", "commitAfterChange": "f9d1c1691c7e9d80b793f5178f6113c949fc2441", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "     protected void setMagicProperties() throws ExecutionException", "signatureAfterChange": "     protected void setMagicProperties() throws AntException", "diff": ["-    protected void setMagicProperties() throws ExecutionException {", "+    protected void setMagicProperties() throws AntException {", "+        // ant.home", "-        setDataValue(MagicProperties.ANT_HOME, antHomeString, true);", "+        setDataValue(MagicProperties.ANT_HOME, antHomeString, false);", "+", "+        // ant.file", "+        URL projectSource = project.getSourceURL();", "+        if (projectSource != null", "+             && projectSource.getProtocol().equals(\"file\")) {", "+            setDataValue(MagicProperties.ANT_FILE, projectSource.getFile(),", "+                true);", "+        }", "+", "+        // basedir", "+        determineBaseDir();", "+", "+        // ant.project.name", "+        String projectName = project.getName();", "+        if (projectName != null) {", "+            setDataValue(MagicProperties.ANT_PROJECT_NAME, projectName, true);", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64b7105f96db807c4d97259ee0059416", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/launch/Locator.java", "commitBeforeChange": "831857b1f342e3cf0f3917e6000ee796fe242cac", "commitAfterChange": "8195ed0fa714966dcfb8ad81fcd6114fa5b85076", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public static String fromURI(String uri)", "signatureAfterChange": "     public static String fromURI(String uri)", "diff": ["+        URL url = null;", "-            URL url = new URL(uri);", "-            if (!(\"file\".equals(url.getProtocol()))) {", "-                throw new IllegalArgumentException(\"Can only handle file: URIs\");", "-            }", "-            StringBuffer buf = new StringBuffer(url.getHost());", "-            if (buf.length() > 0) {", "-                buf.insert(0, \"//\");", "-            }", "-            buf.append(url.getPath());", "-            uri = buf.toString();", "+            url = new URL(uri);", "+        if (url == null || !(\"file\".equals(url.getProtocol()))) {", "+            throw new IllegalArgumentException(\"Can only handle valid file: URIs\");", "+        }", "+        StringBuffer buf = new StringBuffer(url.getHost());", "+        if (buf.length() > 0) {", "+            buf.insert(0, File.separatorChar).insert(0, File.separatorChar);", "+        }", "-        uri = uri.replace('/', File.separatorChar);", "+        String file = url.getFile();", "+        int queryPos = file.indexOf('?');", "+        buf.append((queryPos < 0) ? file : file.substring(0, queryPos));", "+", "+        uri = buf.toString().replace('/', File.separatorChar);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e01dfff6aa793e54d1474a8f2d4398d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "cc432705f28eb85592b6fd077bf95d7c522e3a01", "commitAfterChange": "1c03d4738077efd8b9b09670c26b25430c83af1f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "          protected void scandir(String dir, String vpath, boolean fast)", "signatureAfterChange": "          protected void scandir(String dir, String vpath, boolean fast)", "diff": ["-                    return;    // no files in directory.", "+                    ftp.changeToParentDirectory();", "+                    return;", "-                    String name = vpath + file.getName();", "-                    if (file.isDirectory()) {", "-                        if (isIncluded(name)) {", "-                            if (!isExcluded(name)) {", "-                                dirsIncluded.addElement(name);", "-                                if (fast) {", "-                                    scandir(name, name + File.separator, fast);", "-                                }", "-                            } else {", "-                                dirsExcluded.addElement(name);", "-                            }", "-                        } else {", "-                            dirsNotIncluded.addElement(name);", "-                            if (fast && couldHoldIncluded(name)) {", "-                                scandir(name, name + File.separator, fast);", "-                            }", "-                        }", "-                        if (!fast) {", "-                            scandir(name, name + File.separator, fast);", "-                        }", "-                    } else {", "-                        if (file.isFile()) {", "+                    if (!file.getName().equals(\".\") && !file.getName().equals(\"..\")) {", "+                        if (file.isDirectory()) {", "+                            String name = file.getName();", "-                                    filesIncluded.addElement(name);", "+                                    dirsIncluded.addElement(name);", "+                                    if (fast) {", "+                                        scandir(name, vpath + name + File.separator, fast);", "+                                    }", "-                                    filesExcluded.addElement(name);", "+                                    dirsExcluded.addElement(name);", "-                                filesNotIncluded.addElement(name);", "+                                dirsNotIncluded.addElement(name);", "+                                if (fast && couldHoldIncluded(name)) {", "+                                    scandir(name, vpath + name + File.separator, fast);", "+                                }", "+                            }", "+                            if (!fast) {", "+                                scandir(name, vpath + name + File.separator, fast);", "+                            }", "+                        } else {", "+                            if (file.isFile()) {", "+                                String name = vpath + file.getName();", "+                                if (isIncluded(name)) {", "+                                    if (!isExcluded(name)) {", "+                                        filesIncluded.addElement(name);", "+                                    } else {", "+                                        filesExcluded.addElement(name);", "+                                    }", "+                                } else {", "+                                    filesNotIncluded.addElement(name);", "+                                }", "+                ftp.changeToParentDirectory();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a99f83b3e29abcb828e7b3be3c62566e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/StreamPumper.java", "commitBeforeChange": "ce5e4129647f8418d1ffb870f3bf8031664519bc", "commitAfterChange": "e505c281d0bf63acd3bfc5a10c730d79057605d5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void run()", "signatureAfterChange": "     public void run()", "diff": ["-        finish = false;", "-                if (length <= 0 || finish || Thread.interrupted()) {", "+                if (length <= 0 || Thread.interrupted()) {", "+                }", "+                if (finish) {", "+                \tbreak;", "+                }", "+            }", "+            // On completion, drain any available data (which might be the first data available for quick executions)", "+            if (finish) {", "+                while((length = is.available()) > 0) {", "+                \tif (Thread.interrupted()) {", "+                \t\tbreak;", "+                \t}", "+                    length = is.read(buf, 0, Math.min(length, buf.length));", "+                    if (length <= 0) {", "+                        break;", "+                    }", "+                    os.write(buf, 0, length);", "+            finish = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d11651e72942f8176651769c5cffa616", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java", "commitBeforeChange": "fd5b48fc9a3e61c60e6397a5d012c3fbc6cf4909", "commitAfterChange": "aca65e975be8a5e683f2e75267c336423f1b71be", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     protected Commandline setupModernJavacCommandlineSwitches(Commandline cmd)", "signatureAfterChange": "     protected Commandline setupModernJavacCommandlineSwitches(Commandline cmd)", "diff": ["-            if (assumeJava14()", "-                && (source.equals(\"1.1\") || source.equals(\"1.2\"))) {", "+            if (source.equals(\"1.1\") || source.equals(\"1.2\")) {", "-                // added with JDK 1.4.2", "+                // added with JDK 1.4.2 - and isn't present in 1.5.0 either", "+                String s = t;", "+                if (t.equals(\"1.1\") || t.equals(\"1.2\")) {", "+                    // 1.5.0 doesn't support -source 1.1 or -source 1.2", "+                    s = \"1.3\";", "+                }", "+                attributes.log(\"\", Project.MSG_WARN);", "+                attributes.log(\"          WARNING\", Project.MSG_WARN);", "+                attributes.log(\"\", Project.MSG_WARN);", "-                               + \" you now must also specify -source \" + t", "+                               + \" you now must also specify -source \" + s", "-                attributes.log(\"Ant will implicitly add -source \" + t", "+                attributes.log(\"Ant will implicitly add -source \" + s", "-                cmd.createArgument().setValue(t);", "+                cmd.createArgument().setValue(s);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfc4705f45bbbff313cea71633738e0d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/XmlLogger.java", "commitBeforeChange": "5b42e946eda9500fe6680fa1cdda0c43d6914ea7", "commitAfterChange": "13bdae7c19c9af4d586622a10c4edf8a31fe8580", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void messageLogged(BuildEvent event)", "signatureAfterChange": "     public void messageLogged(BuildEvent event)", "diff": ["+        Throwable ex = event.getException();", "+        if (Project.MSG_DEBUG <= msgOutputLevel && ex != null) {", "+            Text errText = doc.createCDATASection(StringUtils.getStackTrace(ex));", "+            Element stacktrace = doc.createElement(STACKTRACE_TAG);", "+            stacktrace.appendChild(errText);", "+            buildElement.element.appendChild(stacktrace);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0fe11cf18d3d48b892fdc31ebc34465", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "fdde39136d793c06df81c914db2dc9273d1e6c4c", "commitAfterChange": "4ee2e5c268b44ad68c49168457f64b76e4d64a32", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static synchronized Vector getProcEnvironment()", "signatureAfterChange": "     public static synchronized Vector getProcEnvironment()", "diff": ["-            String line;", "+            String var = null;", "+            String line, lineSep = System.getProperty(\"line.separator\");", "-                procEnvironment.addElement(line);", "+                if (line.indexOf('=') == -1) {", "+                    // Chunk part of previous env var (UNIX env vars can", "+                    // contain embedded new lines).", "+                    if (var == null) {", "+                        var = lineSep + line;", "+                    }", "+                    else {", "+                        var += lineSep + line;", "+                    }", "+                }", "+                else {", "+                    // New env var...append the previous one if we have it.", "+                    if (var != null) {", "+                        procEnvironment.addElement(var);", "+                    }", "+                    var = line;", "+                }", "+            // Since we \"look ahead\" before adding, there's one last env var.", "+            procEnvironment.addElement(var);"]}]}
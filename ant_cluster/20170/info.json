{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6a9d6c2c4654bb1f9f80ab3f8d6f1ece", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1239164d9eb2313285c66dc9160bf8c1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/unix/SymlinkTest.java", "commitBeforeChange": "f1d71eaeb8e405cb6da3dad2fe9b8c84a7e9394f", "commitAfterChange": "9f30d0550989766a9ad2032363a5dfdb49ee6932", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void testFileUtilsMethods() throws Exception", "signatureAfterChange": "      public void testSymbolicLinkUtilsMethods() throws Exception", "diff": ["-    public void testFileUtilsMethods() throws Exception {", "+    public void testSymbolicLinkUtilsMethods() throws Exception {", "-            FileUtils fu = FileUtils.getFileUtils();", "+            SymbolicLinkUtils su = SymbolicLinkUtils.getSymbolicLinkUtils();", "-            assertFalse(fu.isSymbolicLink(null, f.getAbsolutePath()));", "-            assertFalse(fu.isSymbolicLink(f.getParentFile(),", "+            assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "+            assertFalse(su.isSymbolicLink(f.getParentFile(),", "-            assertFalse(fu.isDanglingSymbolicLink(null, f.getAbsolutePath()));", "-            assertFalse(fu.isDanglingSymbolicLink(f.getParentFile(),", "+            assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+            assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "-            assertFalse(fu.isSymbolicLink(null, f.getAbsolutePath()));", "-            assertFalse(fu.isSymbolicLink(f.getParentFile(),", "+            assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "+            assertFalse(su.isSymbolicLink(f.getParentFile(),", "-            assertFalse(fu.isDanglingSymbolicLink(null, f.getAbsolutePath()));", "-            assertFalse(fu.isDanglingSymbolicLink(f.getParentFile(),", "+            assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+            assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "-            assertFalse(fu.isSymbolicLink(null, f.getAbsolutePath()));", "-            assertFalse(fu.isSymbolicLink(f.getParentFile(),", "+            assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "+            assertFalse(su.isSymbolicLink(f.getParentFile(),", "-            assertFalse(fu.isDanglingSymbolicLink(null, f.getAbsolutePath()));", "-            assertFalse(fu.isDanglingSymbolicLink(f.getParentFile(),", "+            assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+            assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "-            assertFalse(fu.isSymbolicLink(null, f.getAbsolutePath()));", "-            assertFalse(fu.isSymbolicLink(f.getParentFile(),", "+            assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "+            assertFalse(su.isSymbolicLink(f.getParentFile(),", "-            assertFalse(fu.isDanglingSymbolicLink(null, f.getAbsolutePath()));", "-            assertFalse(fu.isDanglingSymbolicLink(f.getParentFile(),", "+            assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+            assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "-            assertTrue(fu.isSymbolicLink(null, f.getAbsolutePath()));", "-            assertTrue(fu.isSymbolicLink(f.getParentFile(),", "+            assertTrue(su.isSymbolicLink(f.getAbsolutePath()));", "+            assertTrue(su.isSymbolicLink(f.getParentFile(),", "-            assertFalse(fu.isDanglingSymbolicLink(null, f.getAbsolutePath()));", "-            assertFalse(fu.isDanglingSymbolicLink(f.getParentFile(),", "+            assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+            assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "-            assertTrue(fu.isSymbolicLink(null, f.getAbsolutePath()));", "-            assertTrue(fu.isSymbolicLink(f.getParentFile(),", "+            assertTrue(su.isSymbolicLink(f.getAbsolutePath()));", "+            assertTrue(su.isSymbolicLink(f.getParentFile(),", "-            assertFalse(fu.isDanglingSymbolicLink(null, f.getAbsolutePath()));", "-            assertFalse(fu.isDanglingSymbolicLink(f.getParentFile(),", "+            assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+            assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "-            assertFalse(fu.isSymbolicLink(null, f.getAbsolutePath()));", "-            assertFalse(fu.isSymbolicLink(f.getParentFile(),", "+            assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "+            assertFalse(su.isSymbolicLink(f.getParentFile(),", "-            assertTrue(fu.isDanglingSymbolicLink(null, f.getAbsolutePath()));", "-            assertTrue(fu.isDanglingSymbolicLink(f.getParentFile(),", "+            assertTrue(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+            assertTrue(su.isDanglingSymbolicLink(f.getParentFile(),", "-            assertFalse(fu.isSymbolicLink(null, f.getAbsolutePath()));", "-            assertFalse(fu.isSymbolicLink(f.getParentFile(),", "+            assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "+            assertFalse(su.isSymbolicLink(f.getParentFile(),", "-            assertTrue(fu.isDanglingSymbolicLink(null, f.getAbsolutePath()));", "-            assertTrue(fu.isDanglingSymbolicLink(f.getParentFile(),", "+            assertTrue(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+            assertTrue(su.isDanglingSymbolicLink(f.getParentFile(),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "427aeb872b725f5cc9442b8dc7f628a9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javac.java", "commitBeforeChange": "c1a5419faf39033ffc2db1dcf8000f6a796f2dad", "commitAfterChange": "4ca5683c2a54ff4a141ed562a0f3b431b153b2c2", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private boolean doJikesCompile() throws BuildException", "signatureAfterChange": "     public boolean getDeprecation()", "diff": ["+    /** Gets the deprecation flag. */", "+    public boolean getDeprecation() {", "+        return deprecation;", "-     */", "-    private boolean doJikesCompile() throws BuildException {", "-        log(\"Using jikes compiler\", Project.MSG_VERBOSE);", "-", "-        Path classpath = new Path(project);", "-", "-        // Jikes doesn't support bootclasspath dir (-bootclasspath)", "-        // so we'll emulate it for compatibility and convenience.", "-        if (bootclasspath != null) {", "-            classpath.append(bootclasspath);", "-        }", "-", "-        // Jikes doesn't support an extension dir (-extdir)", "-        // so we'll emulate it for compatibility and convenience.", "-        addExtdirsToClasspath(classpath);", "-", "-        classpath.append(getCompileClasspath(true));", "-", "-        // Jikes has no option for source-path so we", "-        // will add it to classpath.", "-        classpath.append(src);", "-", "-        // if the user has set JIKESPATH we should add the contents as well", "-        String jikesPath = System.getProperty(\"jikes.class.path\");", "-        if (jikesPath != null) {", "-            classpath.append(new Path(project, jikesPath));", "-        }", "-        ", "-        Commandline cmd = new Commandline();", "-        cmd.setExecutable(\"jikes\");", "-", "-        if (deprecation == true)", "-            cmd.createArgument().setValue(\"-deprecation\");", "-", "-        if (destDir != null) {", "-            cmd.createArgument().setValue(\"-d\");", "-            cmd.createArgument().setFile(destDir);", "-        }", "-        ", "-        cmd.createArgument().setValue(\"-classpath\");", "-        cmd.createArgument().setPath(classpath);", "-", "-        if (encoding != null) {", "-            cmd.createArgument().setValue(\"-encoding\");", "-            cmd.createArgument().setValue(encoding);", "-        }", "-        if (debug) {", "-            cmd.createArgument().setValue(\"-g\");", "-        }", "-        if (optimize) {", "-            cmd.createArgument().setValue(\"-O\");", "-        }", "-        if (verbose) {", "-            cmd.createArgument().setValue(\"-verbose\");", "-        }", "-        if (depend) {", "-            cmd.createArgument().setValue(\"-depend\");", "-        } ", "-        /**", "-         * XXX", "-         * Perhaps we shouldn't use properties for these", "-         * three options (emacs mode, warnings and pedantic),", "-         * but include it in the javac directive?", "-         */", "-", "-        /**", "-         * Jikes has the nice feature to print error", "-         * messages in a form readable by emacs, so", "-         * that emacs can directly set the cursor", "-         * to the place, where the error occured.", "-         */", "-        String emacsProperty = project.getProperty(\"build.compiler.emacs\");", "-        if (emacsProperty != null && Project.toBoolean(emacsProperty)) {", "-            cmd.createArgument().setValue(\"+E\");", "-        }", "-", "-        /**", "-         * Jikes issues more warnings that javac, for", "-         * example, when you have files in your classpath", "-         * that don't exist. As this is often the case, these", "-         * warning can be pretty annoying.", "-         */", "-        String warningsProperty = project.getProperty(\"build.compiler.warnings\");", "-        if (warningsProperty != null && !Project.toBoolean(warningsProperty)) {", "-            cmd.createArgument().setValue(\"-nowarn\");", "-        }", "-", "-        /**", "-         * Jikes can issue pedantic warnings. ", "-         */", "-        String pedanticProperty = project.getProperty(\"build.compiler.pedantic\");", "-        if (pedanticProperty != null && Project.toBoolean(pedanticProperty)) {", "-            cmd.createArgument().setValue(\"+P\");", "-        }", "- ", "-        /**", "-         * Jikes supports something it calls \"full dependency", "-         * checking\", see the jikes documentation for differences", "-         * between -depend and +F.", "-         */", "-        String fullDependProperty = project.getProperty(\"build.compiler.fulldepend\");", "-        if (fullDependProperty != null && Project.toBoolean(fullDependProperty)) {", "-            cmd.createArgument().setValue(\"+F\");", "-        }", "-", "-        int firstFileName = cmd.size();", "-        logAndAddFilesToCompile(cmd);", "-", "-        return executeExternalCompile(cmd.getCommandline(), firstFileName) == 0;", "-    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec19874b8c79c86e63cefc887e4e7a61", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "992d35eac29d07da8ee68c10ab11f6fd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ExecutionFrame.java", "commitBeforeChange": "1523b24a93d8e4b849afd938ab7eaffcb6031969", "commitAfterChange": "ce1af4647df3f1fab5344250d1751b334e774d77", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 36, "signatureBeforeChange": "     private Object createTypeInstance(Class typeClass, AntLibFactory libFactory,                                       BuildElement model)          throws ExecutionException", "signatureAfterChange": "     private Object createTypeInstance(Class typeClass, AntLibFactory libFactory,                                       BuildElement model)          throws ExecutionException", "diff": ["-            Object typeInstance = null;", "-            if (libFactory == null) {", "-                typeInstance = typeClass.newInstance();", "-            } else {", "-                typeInstance = libFactory.createTypeInstance(typeClass);", "-            }", "+            Object typeInstance = libFactory.createTypeInstance(typeClass);", "-                configureElement(typeInstance, model);", "+                configureElement(libFactory, typeInstance, model);", "-                configureElement(typeInstance, model);", "+                configureElement(libFactory, typeInstance, model);", "+        } catch (RuntimeException e) {", "+            throw new ExecutionException(e.getClass().getName() + \": \"", "+                 + e.getMessage(), e, model.getLocation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efea75892a2b420049a903b7aefe6ec6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/Rpm.java", "commitBeforeChange": "bec41871b591248271815886afd1c0a318ee025e", "commitAfterChange": "76cb3597bd22b5ea0907a5851d30dd3cccadd96b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            exe.execute();", "+            int returncode = exe.execute();", "+            if (returncode != 0) {", "+                throw new BuildException(\"'\" +", "+                        toExecute.getExecutable() +", "+                        \"' failed with exit code \"+returncode);", "+            }", "-            if (output != null) {", "-                try {", "-                    outputstream.close();", "-                } catch (IOException e) {", "-                    // ignore any secondary error", "-                }", "-            }", "-            if (error != null) {", "-                try {", "-                    errorstream.close();", "-                } catch (IOException e) {", "-                    // ignore any secondary error", "-                }", "-            }", "+            FileUtils.close(outputstream);", "+            FileUtils.close(errorstream);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bc67a9f718704158b3d22ad2cc220c20", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bee0d34d7ec0afa0f4399b3f149a258", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "aa43e37a025cdf54b8914b8283e57419a253ed59", "commitAfterChange": "dee95e3acc5154aee03ff5f91f9a56426ae79f3f", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 30, "signatureBeforeChange": "     protected void writeCentralFileHeader(ZipEntry ze) throws IOException", "signatureAfterChange": "     protected void writeCentralFileHeader(ZipEntry ze) throws IOException", "diff": ["+        final long lfhOffset = offsets.get(ze).longValue();", "+        final boolean needsZip64Extra = hasZip64Extra(ze)", "+            || ze.getCompressedSize() >= ZIP64_MAGIC", "+            || ze.getSize() >= ZIP64_MAGIC", "+            || lfhOffset >= ZIP64_MAGIC;", "+", "+        if (needsZip64Extra && zip64Mode == Zip64Mode.Never) {", "+            // must be the offset that is too big, otherwise an", "+            // exception would have been throw in putNextEntry or", "+            // closeEntry", "+            throw new Zip64RequiredException(Zip64RequiredException", "+                                             .ARCHIVE_TOO_BIG_MESSAGE);", "+        }", "+", "+        handleZip64Extra(ze, lfhOffset, needsZip64Extra);", "+", "-        writeOut(ZipShort.getBytes((ze.getPlatform() << 8) | 20));", "+        writeOut(ZipShort.getBytes((ze.getPlatform() << 8) | ", "+                                   (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION", "+                                                  : ZIP64_MIN_VERSION)));", "-                                                         && fallbackToUTF8);", "+                                                         && fallbackToUTF8,", "+                                                         needsZip64Extra);", "-        writeOut(toDosTime(ze.getTime()));", "+        writeOut(ZipUtil.toDosTime(ze.getTime()));", "-        writeOut(ZipLong.getBytes(ze.getCompressedSize()));", "-        writeOut(ZipLong.getBytes(ze.getSize()));", "+        if (ze.getCompressedSize() >= ZIP64_MAGIC", "+            || ze.getSize() >= ZIP64_MAGIC) {", "+            writeOut(ZipLong.ZIP64_MAGIC.getBytes());", "+            writeOut(ZipLong.ZIP64_MAGIC.getBytes());", "+        } else {", "+            writeOut(ZipLong.getBytes(ze.getCompressedSize()));", "+            writeOut(ZipLong.getBytes(ze.getSize()));", "+        }", "-        // file name length", "-        final ZipEncoding entryEncoding;", "-        ", "-        if (!encodable && fallbackToUTF8) {", "-            entryEncoding = ZipEncodingHelper.UTF8_ZIP_ENCODING;", "-        } else {", "-            entryEncoding = zipEncoding;", "-        }", "-        ", "-        ByteBuffer name = entryEncoding.encode(ze.getName());        ", "+        ByteBuffer name = getName(ze);", "-        ", "-        ByteBuffer commentB = entryEncoding.encode(comm);", "-        ", "+", "+        ByteBuffer commentB = getEntryEncoding(ze).encode(comm);", "+", "-        writeOut((byte[]) offsets.get(ze));", "+        writeOut(ZipLong.getBytes(Math.min(lfhOffset, ZIP64_MAGIC)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b1c03aa89aa1f3247f2b1d527196acc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "4cbbf3629a15a78615a3ce63ffe6f3fc028b172d", "commitAfterChange": "2c04d7e833b4e5dab1a3c5ddfe14b572aea8c112", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 39, "signatureBeforeChange": "     protected void writeCentralFileHeader(ZipEntry ze) throws IOException", "signatureAfterChange": "     protected void writeCentralFileHeader(ZipEntry ze) throws IOException", "diff": ["-        writeOut(CFH_SIG);", "-        written += WORD;", "+        byte[] centralFileHeader = createCentralFileHeader(ze);", "+        writeCounted(centralFileHeader);", "+    }", "-        final long lfhOffset = offsets.get(ze).longValue();", "-            || ze.getCompressedSize() >= ZIP64_MAGIC", "-            || ze.getSize() >= ZIP64_MAGIC", "-            || lfhOffset >= ZIP64_MAGIC;", "-            // exception would have been throw in putNextEntry or", "-            // closeEntry", "-                                             .ARCHIVE_TOO_BIG_MESSAGE);", "-        // version made by", "-        // CheckStyle:MagicNumber OFF", "-        writeOut(ZipShort.getBytes((ze.getPlatform() << 8) |", "-                                   (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION", "-                                                  : ZIP64_MIN_VERSION)));", "-        written += SHORT;", "-        final int zipMethod = ze.getMethod();", "-        final boolean encodable = zipEncoding.canEncode(ze.getName());", "-        writeVersionNeededToExtractAndGeneralPurposeBits(zipMethod,", "-                                                         !encodable", "-                                                         && fallbackToUTF8,", "-                                                         needsZip64Extra);", "-        written += WORD;", "-", "-        // compression method", "-        writeOut(ZipShort.getBytes(zipMethod));", "-        written += SHORT;", "-", "-        // last mod. time and date", "-        writeOut(ZipUtil.toDosTime(ze.getTime()));", "-        written += WORD;", "-", "-        // CRC", "-        // compressed length", "-        // uncompressed length", "-        writeOut(ZipLong.getBytes(ze.getCrc()));", "-        if (ze.getCompressedSize() >= ZIP64_MAGIC", "-            || ze.getSize() >= ZIP64_MAGIC) {", "-            writeOut(ZipLong.ZIP64_MAGIC.getBytes());", "-            writeOut(ZipLong.ZIP64_MAGIC.getBytes());", "-        } else {", "-            writeOut(ZipLong.getBytes(ze.getCompressedSize()));", "-            writeOut(ZipLong.getBytes(ze.getSize()));", "-        }", "-        // CheckStyle:MagicNumber OFF", "-        written += 12;", "-        // CheckStyle:MagicNumber ON", "-", "-        ByteBuffer name = getName(ze);", "-", "-        writeOut(ZipShort.getBytes(name.limit()));", "-        written += SHORT;", "-", "-        // extra field length", "-        writeOut(ZipShort.getBytes(extra.length));", "-        written += SHORT;", "-        writeOut(ZipShort.getBytes(commentB.limit()));", "-        written += SHORT;", "-        writeOut(ZERO);", "-        written += SHORT;", "-        writeOut(ZipShort.getBytes(ze.getInternalAttributes()));", "-        written += SHORT;", "-        writeOut(ZipLong.getBytes(ze.getExternalAttributes()));", "-        written += WORD;", "-        writeOut(ZipLong.getBytes(Math.min(lfhOffset, ZIP64_MAGIC)));", "-        written += WORD;", "-        writeOut(name.array(), name.arrayOffset(),", "-                 name.limit() - name.position());", "-        written += name.limit();", "-        // extra field", "-        writeOut(extra);", "-        written += extra.length;", "-        writeOut(commentB.array(), commentB.arrayOffset(),", "-                 commentB.limit() - commentB.position());", "-        written += commentB.limit();"]}]}
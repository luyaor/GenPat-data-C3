{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c9a329bac3db3ad47897afdbb700397", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16943535b5305fbc361ece8176db683a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/xml/XSLTProcess.java", "commitBeforeChange": "030fd751f51bef1c60b27cc4034cf1b013551520", "commitAfterChange": "0deb15031e9e934900b3b41f0d191dabdece8f80", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private Class loadClass( String classname )         throws Exception", "signatureAfterChange": "      private String getSystemId( final File file )         throws IOException", "diff": ["+", "+    private String getSystemId( final File file )", "+        throws IOException", "+    {", "+        return file.getCanonicalFile().toURL().toExternalForm();", "+    }", "-     */", "-    private Class loadClass( String classname )", "-        throws Exception", "-    {", "-        if( m_classpath == null )", "-        {", "-            return Class.forName( classname );", "-        }", "-        else", "-        {", "-            final URL[] urls = PathUtil.toURLs( m_classpath );", "-            final ClassLoader classLoader = new URLClassLoader( urls );", "-            return classLoader.loadClass( classname );", "-        }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3153ecba6885ba2f78f65ec42de0ecfb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/selectors/modifiedselector/ModifiedSelector.java", "commitBeforeChange": "9936be269812cd80ee92432d1ccf3bfb69537e5a", "commitAfterChange": "56e61f039f54d015e60e3e2ecaaeaa8e666d8cef", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     public ClassLoader getClassLoader()", "signatureAfterChange": "     public ClassLoader getClassLoader()", "diff": ["-                          // the usual classloader", "-                          ? getClass().getClassLoader()", "-                          // additional use the provided classpath", "-                          : new org.apache.tools.ant.AntClassLoader(getProject(), classpath);", "+                // the usual classloader", "+                ? getClass().getClassLoader()", "+                // additional use the provided classpath", "+                : getProject().createClassLoader(classpath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a2fa863984e2414093eeb2b3fb8b21b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/taskdefs/Property.java", "commitBeforeChange": "62562693ac733d0697b5a522972f36ea5570225c", "commitAfterChange": "a816a71d9e2587a83890f499dd2cabb7c6e02889", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      protected void loadResource( String name )         throws TaskException", "signatureAfterChange": "      protected void loadResource( String name )         throws TaskException", "diff": ["-            ClassLoader classLoader = null;", "-", "-            if( m_classpath != null )", "-            {", "-                final URL[] urls = PathUtil.toURLs( m_classpath, getContext() );", "-                classLoader = new URLClassLoader( urls );", "-            }", "-            else", "-            {", "-                classLoader = ClassLoader.getSystemClassLoader();", "-            }", "+            final ClassLoader classLoader = PathUtil.createClassLoader( m_classpath, getContext() );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "648c9f1ec05c15da29a2b0efba163487", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/framework/java/ExecuteJava.java", "commitBeforeChange": "62562693ac733d0697b5a522972f36ea5570225c", "commitAfterChange": "a816a71d9e2587a83890f499dd2cabb7c6e02889", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void executeNonForked( final TaskContext context )         throws TaskException", "signatureAfterChange": "     public void executeNonForked( final TaskContext context )         throws TaskException", "diff": ["-            final URL[] urls = PathUtil.toURLs( m_classPath, context );", "-            if( urls.length == 0 )", "-            {", "-                target = Class.forName( m_className );", "-            }", "-            else", "-            {", "-                final URLClassLoader classLoader = new URLClassLoader( urls );", "-                target = classLoader.loadClass( m_className );", "-            }", "+            final ClassLoader classLoader = PathUtil.createClassLoader( m_classPath, context );", "+            target = classLoader.loadClass( m_className );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "699d5f3416190d8f33eb258e92425c77", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/core/AbstractAvailableCondition.java", "commitBeforeChange": "62562693ac733d0697b5a522972f36ea5570225c", "commitAfterChange": "a816a71d9e2587a83890f499dd2cabb7c6e02889", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected ClassLoader buildClassLoader( final TaskContext context ) throws TaskException", "signatureAfterChange": "     protected ClassLoader buildClassLoader( final TaskContext context ) throws TaskException", "diff": ["-        final URL[] urls = PathUtil.toURLs( m_classpath, context );", "-        final ClassLoader classLoader;", "-        if( urls.length > 0 )", "-        {", "-            classLoader = new URLClassLoader( urls );", "-        }", "-        else", "-        {", "-            // TODO - using system classloader is kinda useless now, because", "-            // the system classpath contains almost nothing.  Should be using", "-            // the 'common' classloader instead", "-            classLoader = ClassLoader.getSystemClassLoader();", "-        }", "-        return classLoader;", "+        return PathUtil.createClassLoader( m_classpath, context );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "875818a026a35da04df15e7afc2fe519", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/GenericDeploymentTool.java", "commitBeforeChange": "bd2c472af4fc8428f494cfd929dfd098100ceb41", "commitAfterChange": "64c4989ed4575a005c66a87a194791cf15ce27f4", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 21, "signatureBeforeChange": "      protected ClassLoader getClassLoaderForBuild()", "signatureAfterChange": "      protected ClassLoader getClassLoaderForBuild()", "diff": ["-        // only generate a URLClassLoader if we have a classpath", "-        if (classpath == null) {", "+        Path combinedClasspath = getCombinedClasspath();", "+        ", "+        // only generate a new ClassLoader if we have a classpath", "+        if (combinedClasspath == null) {", "-            classpathLoader = new AntClassLoader(getTask().getProject(), classpath);", "+            classpathLoader = new AntClassLoader(getTask().getProject(), combinedClasspath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a20fb62a5ed7c493d6465264d0d688f9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ClasspathUtils.java", "commitBeforeChange": "0ea31bf5bf6d04b8b916542bf9a3ef0d3d37d56c", "commitAfterChange": "39cc83c340b7843e7b5ae98b0ba3cd48cb8690af", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "         public ClassLoader getClassLoader()", "signatureAfterChange": "         public ClassLoader getClassLoader()", "diff": ["-            return getClassLoaderForPath(", "-                    getContextProject(),", "-                    this.classpath,", "-                    getClassLoadId(),", "-                    this.reverseLoader,", "-                    loaderId != null || isMagicPropertySet(getContextProject()));", "+            return getClassLoaderForPath(getContextProject(), classpath, getClassLoadId(),", "+                    reverseLoader, loaderId != null || isMagicPropertySet(getContextProject()));"]}]}
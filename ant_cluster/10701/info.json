{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d888723f40e64600c5db6ea5cd996bf5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fd1afda04ce365a510e08c6d75d0108", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/GenericDeploymentTool.java", "commitBeforeChange": "e83842ef5b089bc230c52bace1fe744225009899", "commitAfterChange": "16b0304fd18bbda8806ed8daa0eafed283c76927", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     protected String getJarBaseName(String descriptorFileName)", "signatureAfterChange": "     protected String getJarBaseName(String descriptorFileName)", "diff": ["-            int lastSeparatorIndex = descriptorFileName.lastIndexOf(File.separator);", "-            String dirName = descriptorFileName.substring(0, lastSeparatorIndex);", "+            File descriptorFile = new File(config.descriptorDir, descriptorFileName);", "+            String path = descriptorFile.getAbsolutePath();", "+            int lastSeparatorIndex ", "+                = path.lastIndexOf(File.separator);", "+            if (lastSeparatorIndex == -1) {", "+                throw new BuildException(\"Unable to determine directory name holding descriptor\");", "+            }", "+            String dirName = path.substring(0, lastSeparatorIndex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86ea99bd2331dae571039e0e5cad81ee", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/Javah.java", "commitBeforeChange": "5ffacddada00339f7c26549ff306e1d4fa04fc41", "commitAfterChange": "13b07b313fdc7ab2620f71517ab16698be496f24", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 30, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        /* unused.", "-        TODO: If anyone cannot come up with a reason for this, lets delete it", "-", "-        String compiler = getProject().getProperty(\"build.compiler\");", "-        if (compiler == null) {", "-            if (!JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)", "-                && !JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_2)) {", "-                compiler = \"modern\";", "-            } else {", "-                compiler = \"classic\";", "-            }", "-        }", "-        */", "-        doClassicCompile();", "-    }", "+        JavahAdapter ad = ", "+            JavahAdapterFactory.getAdapter(facade.getImplementation(),", "+                                           this);", "+        if (!ad.compile(this)) {", "+            throw new BuildException(\"compilation failed\");"]}]}
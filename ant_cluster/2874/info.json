{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cadad8458b072f1a73db36487e4555f1", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4650224996a386b92e41d65be015f797", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "33c2065ca8b2448823a0118d8cd9ce047f881946", "commitAfterChange": "1fe0291e099e9814a69ed27097477d455e1ec6fe", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "     protected Enumeration findResources(String name) throws IOException", "signatureAfterChange": "     protected Enumeration findResources(String name) throws IOException", "diff": ["-        Enumeration/*<URL>*/ mine = new ResourceEnumeration(name);", "-        Enumeration/*<URL>*/ base;", "-        if (parent != null && parent != getParent()) {", "-            // Delegate to the parent:", "-            base = parent.getResources(name);", "-            // Note: could cause overlaps in case ClassLoader.this.parent has matches.", "-        } else {", "-            // ClassLoader.this.parent is already delegated to from", "-            // ClassLoader.getResources, no need:", "-            base = new CollectionUtils.EmptyEnumeration();", "-        }", "-        if (isParentFirst(name)) {", "-            // Normal case.", "-            return CollectionUtils.append(base, mine);", "-        } else {", "-            // Inverted.", "-            return CollectionUtils.append(mine, base);", "-        }", "+        return new ResourceEnumeration(name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e271c5e81bae5c39bbe0d6bee86910d7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "cc1b02fb9da22e21446492199a34f54250306a85", "commitAfterChange": "8fdf272627418e1e55adcfe8a52feb9125515be0", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "     protected Enumeration findResources(String name) throws IOException", "signatureAfterChange": "     protected Enumeration findResources(String name) throws IOException", "diff": ["-    protected Enumeration findResources(String name) throws IOException {", "-        return new ResourceEnumeration(name);", "+    protected Enumeration/*<URL>*/ findResources(String name) throws IOException {", "+        Enumeration/*<URL>*/ mine = new ResourceEnumeration(name);", "+        Enumeration/*<URL>*/ base;", "+        if (parent != null && parent != getParent()) {", "+            // Delegate to the parent:", "+            base = parent.getResources(name);", "+            // Note: could cause overlaps in case ClassLoader.this.parent has matches.", "+        } else {", "+            // ClassLoader.this.parent is already delegated to from ClassLoader.getResources, no need:", "+            base = new CollectionUtils.EmptyEnumeration();", "+        }", "+        if (isParentFirst(name)) {", "+            // Normal case.", "+            return CollectionUtils.append(base, mine);", "+        } else {", "+            // Inverted.", "+            return CollectionUtils.append(mine, base);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc2d86f4b3682c05b6e109493d39bcc8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "ca38198a6c3919fb271160dd9530c902aa91f804", "commitAfterChange": "f1415bcf0486c18252c3ddf68a867590e9ca7d35", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "     protected Enumeration findResources(String name) throws IOException", "signatureAfterChange": "     protected Enumeration findResources(String name) throws IOException", "diff": ["-        return new ResourceEnumeration(name);", "+        Enumeration/*<URL>*/ mine = new ResourceEnumeration(name);", "+        Enumeration/*<URL>*/ base;", "+        if (parent != null && parent != getParent()) {", "+            // Delegate to the parent:", "+            base = parent.getResources(name);", "+            // Note: could cause overlaps in case ClassLoader.this.parent has matches.", "+        } else {", "+            // ClassLoader.this.parent is already delegated to from", "+            // ClassLoader.getResources, no need:", "+            base = new CollectionUtils.EmptyEnumeration();", "+        }", "+        if (isParentFirst(name)) {", "+            // Normal case.", "+            return CollectionUtils.append(base, mine);", "+        } else if (isolated) {", "+            return mine;", "+        } else {", "+            // Inverted.", "+            return CollectionUtils.append(mine, base);", "+        }"]}]}
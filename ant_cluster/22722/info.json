{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "529d95cbd4fba0b872e0868c7e18d5d8", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e62668ecfed3c581c3e4e9ce1efcdac7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/test/org/apache/myrmidon/components/AbstractComponentTest.java", "commitBeforeChange": "b20531c93c277088ee73f7410025051b383d302e", "commitAfterChange": "7edeb4e678f61ddb643d348cfd8fede79b1cfbe5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected void setUp()         throws Exception", "signatureAfterChange": "     protected void setUp()         throws Exception", "diff": ["-        m_componentManager = new DefaultComponentManager();", "+        m_serviceManager = new DefaultServiceManager();", "-        Component component = new DefaultMasterConverter();", "-        m_componentManager.put( MasterConverter.ROLE, component );", "+        Object component = new DefaultMasterConverter();", "+        m_serviceManager.put( MasterConverter.ROLE, component );", "-        m_componentManager.put( ConverterRegistry.ROLE, component );", "+        m_serviceManager.put( ConverterRegistry.ROLE, component );", "-        m_componentManager.put( TypeManager.ROLE, component );", "+        m_serviceManager.put( TypeManager.ROLE, component );", "-        m_componentManager.put( Configurer.ROLE, component );", "+        m_serviceManager.put( Configurer.ROLE, component );", "-        m_componentManager.put( Deployer.ROLE, component );", "+        m_serviceManager.put( Deployer.ROLE, component );", "-        m_componentManager.put( ClassLoaderManager.ROLE, classLoaderMgr );", "+        m_serviceManager.put( ClassLoaderManager.ROLE, classLoaderMgr );", "-        m_componentManager.put( ExtensionManager.ROLE, component );", "+        m_serviceManager.put( ExtensionManager.ROLE, component );", "-        m_componentManager.put( RoleManager.ROLE, component );", "+        m_serviceManager.put( RoleManager.ROLE, component );", "-        m_componentManager.put( ServiceManager.ROLE, component );", "+        m_serviceManager.put( ServiceManager.ROLE, component );", "-            if( obj instanceof Composable )", "+            if( obj instanceof Serviceable )", "-                final Composable composable = (Composable)obj;", "-                composable.compose( m_componentManager );", "+                final Serviceable serviceable = (Serviceable)obj;", "+                serviceable.service( m_serviceManager );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed9df0bee18daf302d1914b8c44cf078", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/testcases/org/apache/myrmidon/components/AbstractComponentTest.java", "commitBeforeChange": "b20531c93c277088ee73f7410025051b383d302e", "commitAfterChange": "7edeb4e678f61ddb643d348cfd8fede79b1cfbe5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected void setUp()         throws Exception", "signatureAfterChange": "     protected void setUp()         throws Exception", "diff": ["-        m_componentManager = new DefaultComponentManager();", "+        m_serviceManager = new DefaultServiceManager();", "-        Component component = new DefaultMasterConverter();", "-        m_componentManager.put( MasterConverter.ROLE, component );", "+        Object component = new DefaultMasterConverter();", "+        m_serviceManager.put( MasterConverter.ROLE, component );", "-        m_componentManager.put( ConverterRegistry.ROLE, component );", "+        m_serviceManager.put( ConverterRegistry.ROLE, component );", "-        m_componentManager.put( TypeManager.ROLE, component );", "+        m_serviceManager.put( TypeManager.ROLE, component );", "-        m_componentManager.put( Configurer.ROLE, component );", "+        m_serviceManager.put( Configurer.ROLE, component );", "-        m_componentManager.put( Deployer.ROLE, component );", "+        m_serviceManager.put( Deployer.ROLE, component );", "-        m_componentManager.put( ClassLoaderManager.ROLE, classLoaderMgr );", "+        m_serviceManager.put( ClassLoaderManager.ROLE, classLoaderMgr );", "-        m_componentManager.put( ExtensionManager.ROLE, component );", "+        m_serviceManager.put( ExtensionManager.ROLE, component );", "-        m_componentManager.put( RoleManager.ROLE, component );", "+        m_serviceManager.put( RoleManager.ROLE, component );", "-        m_componentManager.put( ServiceManager.ROLE, component );", "+        m_serviceManager.put( ServiceManager.ROLE, component );", "-            if( obj instanceof Composable )", "+            if( obj instanceof Serviceable )", "-                final Composable composable = (Composable)obj;", "-                composable.compose( m_componentManager );", "+                final Serviceable serviceable = (Serviceable)obj;", "+                serviceable.service( m_serviceManager );"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7cbe30cbf3bb5f29be3ce1b4b148fa0a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8dded8fd1b6b8f79be61d52ed09c3f1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "93db46be115205107729104e728d45687d885295", "commitAfterChange": "20ab59bff57796a67e1cdfefbc29826c7d55edba", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 30, "signatureBeforeChange": "      private void sendMTFValues()         throws IOException", "signatureAfterChange": "      private void sendMTFValues()         throws IOException", "diff": ["-        alphaSize = nInUse + 2;", "+        alphaSize = m_nInUse + 2;", "-        if( nMTF <= 0 )", "+        if( m_nMTF <= 0 )", "-        if( nMTF < 200 )", "+        if( m_nMTF < 200 )", "-        else if( nMTF < 600 )", "+        else if( m_nMTF < 600 )", "-        else if( nMTF < 1200 )", "+        else if( m_nMTF < 1200 )", "-        else if( nMTF < 2400 )", "+        else if( m_nMTF < 2400 )", "-            remF = nMTF;", "+            remF = m_nMTF;", "-                    aFreq += mtfFreq[ ge ];", "+                    aFreq += m_mtfFreq[ ge ];", "-                    aFreq -= mtfFreq[ ge ];", "+                    aFreq -= m_mtfFreq[ ge ];", "-                if( gs >= nMTF )", "+                if( gs >= m_nMTF )", "-                if( ge >= nMTF )", "+                if( ge >= m_nMTF )", "-                    ge = nMTF - 1;", "+                    ge = m_nMTF - 1;", "-                        short icv = szptr[ i ];", "+                        short icv = m_szptr[ i ];", "-                        short icv = szptr[ i ];", "+                        short icv = m_szptr[ i ];", "-                selector[ nSelectors ] = (char)bt;", "+                m_selector[ nSelectors ] = (char)bt;", "-                    rfreq[ bt ][ szptr[ i ] ]++;", "+                    rfreq[ bt ][ m_szptr[ i ] ]++;", "-                ll_i = selector[ i ];", "+                ll_i = m_selector[ i ];", "-                selectorMtf[ i ] = (char)j;", "+                m_selectorMtf[ i ] = (char)j;", "-            nBytes = bytesOut;", "+            nBytes = m_bytesOut;", "-        nBytes = bytesOut;", "+        nBytes = m_bytesOut;", "-            for( j = 0; j < selectorMtf[ i ]; j++ )", "+            for( j = 0; j < m_selectorMtf[ i ]; j++ )", "-        nBytes = bytesOut;", "+        nBytes = m_bytesOut;", "-        nBytes = bytesOut;", "+        nBytes = m_bytesOut;", "-            if( gs >= nMTF )", "+            if( gs >= m_nMTF )", "-            if( ge >= nMTF )", "+            if( ge >= m_nMTF )", "-                ge = nMTF - 1;", "+                ge = m_nMTF - 1;", "-                bsW( len[ selector[ selCtr ] ][ szptr[ i ] ],", "-                     code[ selector[ selCtr ] ][ szptr[ i ] ] );", "+                bsW( len[ m_selector[ selCtr ] ][ m_szptr[ i ] ],", "+                     code[ m_selector[ selCtr ] ][ m_szptr[ i ] ] );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f93fb473e9b161563427460944f9b0bc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "93db46be115205107729104e728d45687d885295", "commitAfterChange": "20ab59bff57796a67e1cdfefbc29826c7d55edba", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "      private boolean fullGtU( int i1, int i2 )", "signatureAfterChange": "      private boolean fullGtU( int i1, int i2 )", "diff": ["-        c1 = block[ i1 + 1 ];", "-        c2 = block[ i2 + 1 ];", "+        c1 = m_block[ i1 + 1 ];", "+        c2 = m_block[ i2 + 1 ];", "-        c1 = block[ i1 + 1 ];", "-        c2 = block[ i2 + 1 ];", "+        c1 = m_block[ i1 + 1 ];", "+        c2 = m_block[ i2 + 1 ];", "-        c1 = block[ i1 + 1 ];", "-        c2 = block[ i2 + 1 ];", "+        c1 = m_block[ i1 + 1 ];", "+        c2 = m_block[ i2 + 1 ];", "-        c1 = block[ i1 + 1 ];", "-        c2 = block[ i2 + 1 ];", "+        c1 = m_block[ i1 + 1 ];", "+        c2 = m_block[ i2 + 1 ];", "-        c1 = block[ i1 + 1 ];", "-        c2 = block[ i2 + 1 ];", "+        c1 = m_block[ i1 + 1 ];", "+        c2 = m_block[ i2 + 1 ];", "-        c1 = block[ i1 + 1 ];", "-        c2 = block[ i2 + 1 ];", "+        c1 = m_block[ i1 + 1 ];", "+        c2 = m_block[ i2 + 1 ];", "-        k = last + 1;", "+        k = m_last + 1;", "-            c1 = block[ i1 + 1 ];", "-            c2 = block[ i2 + 1 ];", "+            c1 = m_block[ i1 + 1 ];", "+            c2 = m_block[ i2 + 1 ];", "-            s1 = quadrant[ i1 ];", "-            s2 = quadrant[ i2 ];", "+            s1 = m_quadrant[ i1 ];", "+            s2 = m_quadrant[ i2 ];", "-            c1 = block[ i1 + 1 ];", "-            c2 = block[ i2 + 1 ];", "+            c1 = m_block[ i1 + 1 ];", "+            c2 = m_block[ i2 + 1 ];", "-            s1 = quadrant[ i1 ];", "-            s2 = quadrant[ i2 ];", "+            s1 = m_quadrant[ i1 ];", "+            s2 = m_quadrant[ i2 ];", "-            c1 = block[ i1 + 1 ];", "-            c2 = block[ i2 + 1 ];", "+            c1 = m_block[ i1 + 1 ];", "+            c2 = m_block[ i2 + 1 ];", "-            s1 = quadrant[ i1 ];", "-            s2 = quadrant[ i2 ];", "+            s1 = m_quadrant[ i1 ];", "+            s2 = m_quadrant[ i2 ];", "-            c1 = block[ i1 + 1 ];", "-            c2 = block[ i2 + 1 ];", "+            c1 = m_block[ i1 + 1 ];", "+            c2 = m_block[ i2 + 1 ];", "-            s1 = quadrant[ i1 ];", "-            s2 = quadrant[ i2 ];", "+            s1 = m_quadrant[ i1 ];", "+            s2 = m_quadrant[ i2 ];", "-            if( i1 > last )", "+            if( i1 > m_last )", "-                i1 -= last;", "+                i1 -= m_last;", "-            if( i2 > last )", "+            if( i2 > m_last )", "-                i2 -= last;", "+                i2 -= m_last;", "-            workDone++;", "+            m_workDone++;"]}]}
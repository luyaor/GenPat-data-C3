{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "38526b25d5dcafdaf5f3032087d99a33", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29e25783b5530dfa8e5621bb95122c7b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "ec980be7345681968c93f0609e9a3fecb39b9753", "commitAfterChange": "fbb9886634198d8377104bef9ec697fadeb134df", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 32, "signatureBeforeChange": "     private boolean textEquals(File f1, File f2) throws IOException", "signatureAfterChange": "     public boolean contentEquals(Resource r1, Resource r2, boolean text) throws IOException", "diff": ["+     */", "+    public boolean contentEquals(Resource r1, Resource r2, boolean text) throws IOException {", "+        if (r1.isExists() != r2.isExists()) {", "+            return false;", "+        }", "+        if (!r1.isExists()) {", "+            // two not existing files are equal", "+            return true;", "+        }", "+        // should the following two be switched?  If r1 and r2 refer to the same file,", "+        // isn't their content equal regardless of whether that file is a directory?", "+        if (r1.isDirectory() || r2.isDirectory()) {", "+            // don't want to compare directory contents for now", "+            return false;", "+        }", "+        if (r1.equals(r2)) {", "+            return true;", "+        }", "+        if (!text && r1.getSize() != r2.getSize()) {", "+            return false;", "+        }", "+        return compareContent(r1, r2, text) == 0;", "+    }", "-    private boolean textEquals(File f1, File f2) throws IOException {", "-            in1 = new BufferedReader(new FileReader(f1));", "-            in2 = new BufferedReader(new FileReader(f2));", "-                if (!expected.equals(in2.readLine())) {", "-                    return false;", "-            if (in2.readLine() != null) {", "-                return false;", "-            }", "-            return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a36f3619a1392a425611c41389ffadf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/cvslib/ChangeLogTask.java", "commitBeforeChange": "57248b5dfac3551c05f70d9fbbb3b1b20c53e479", "commitAfterChange": "5ec7e1db1b76797c2513ada02a7cdc4fa23903b4", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-", "-            final Commandline command = new Commandline();", "-            command.setExecutable(\"cvs\");", "-            command.createArgument().setValue(\"log\");", "+            setCommand(\"log\");", "+            if (getTag() != null) {", "+                CvsVersion myCvsVersion = new CvsVersion();", "+                myCvsVersion.setProject(getProject());", "+                myCvsVersion.setTaskName(\"cvsversion\");", "+                myCvsVersion.setCvsRoot(getCvsRoot());", "+                myCvsVersion.setCvsRsh(getCvsRsh());", "+                myCvsVersion.setPassfile(getPassFile());", "+                myCvsVersion.setDest(m_dir);", "+                myCvsVersion.execute();", "+                if (myCvsVersion.supportsCvsLogWithSOption()) {", "+                    addCommandArgument(\"-S\");", "+                }", "+            }", "-                command.createArgument().setValue(\"-d\");", "-                command.createArgument().setValue(dateRange);", "+                addCommandArgument(\"-d\");", "+                addCommandArgument(dateRange);", "-                        command.createArgument().setValue(files[i]);", "+                        addCommandArgument(files[i]);", "-            log(command.describeCommand(), Project.MSG_VERBOSE);", "+            log(getCommand(), Project.MSG_VERBOSE);", "-            final Execute exe = new Execute(handler);", "-", "-            exe.setWorkingDirectory(m_dir);", "-            exe.setCommandline(command.getCommandline());", "-            exe.setAntRun(getProject());", "-            try {", "-                final int resultCode = exe.execute();", "-", "-                if (Execute.isFailure(resultCode)) {", "-                    throw new BuildException(\"Error running cvs log\");", "-                }", "-            } catch (final IOException ioe) {", "-                throw new BuildException(ioe.toString());", "-            }", "-", "+            setDest(m_dir);", "+            setExecuteStreamHandler(handler);", "+            super.execute();"]}]}
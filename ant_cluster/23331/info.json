{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d4ee7f87b37fa5f17a0accf018173d35", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ebf64d9e3edbcf1c40e72bef1d52626", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipEntry.java", "commitBeforeChange": "aa43e37a025cdf54b8914b8283e57419a253ed59", "commitAfterChange": "dee95e3acc5154aee03ff5f91f9a56426ae79f3f", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 43, "signatureBeforeChange": "     public boolean equals(Object o)", "signatureAfterChange": "     @Override     public boolean equals(Object obj)", "diff": ["-    public boolean equals(Object o) {", "-        return (this == o);", "+     */", "+    @Override", "+    public boolean equals(Object obj) {", "+        if (this == obj) {", "+            return true;", "+        }", "+        if (obj == null || getClass() != obj.getClass()) {", "+            return false;", "+        }", "+        ZipEntry other = (ZipEntry) obj;", "+        String myName = getName();", "+        String otherName = other.getName();", "+        if (myName == null) {", "+            if (otherName != null) {", "+                return false;", "+            }", "+        } else if (!myName.equals(otherName)) {", "+            return false;", "+        }", "+        String myComment = getComment();", "+        String otherComment = other.getComment();", "+        if (myComment == null) {", "+            myComment = \"\";", "+        }", "+        if (otherComment == null) {", "+            otherComment = \"\";", "+        }", "+        return getTime() == other.getTime()", "+            && myComment.equals(otherComment)", "+            && getInternalAttributes() == other.getInternalAttributes()", "+            && getPlatform() == other.getPlatform()", "+            && getExternalAttributes() == other.getExternalAttributes()", "+            && getMethod() == other.getMethod()", "+            && getSize() == other.getSize()", "+            && getCrc() == other.getCrc()", "+            && getCompressedSize() == other.getCompressedSize()", "+            && Arrays.equals(getCentralDirectoryExtra(),", "+                             other.getCentralDirectoryExtra())", "+            && Arrays.equals(getLocalFileDataExtra(),", "+                             other.getLocalFileDataExtra())", "+            && gpb.equals(other.gpb);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6405c1bad582f55d8ae163005d4aa64", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/rmic/DefaultRmicAdapter.java", "commitBeforeChange": "aca10a1d12baef5b24d64906202659ffbdcf7e0f", "commitAfterChange": "6440b64b5a526e07d4457be2153642524cecc959", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "          public String[] mapFileName(String name)", "signatureAfterChange": "          public String[] mapFileName(String name)", "diff": ["-            if (!attributes.getIiop()) {", "+            /*", "+             * fallback in case we have trouble loading the class or", "+             * don't know how to handle it (there is no easy way to", "+             * know what IDL mode would generate.", "+             *", "+             * This is supposed to make Ant always recompile the", "+             * class, as a file of that name should not exist.", "+             */", "+            String[] target = new String[] {name+\".tmp.\"+rand.nextLong()};", "+", "+            if (!attributes.getIiop() && !attributes.getIdl()) {", "+                // JRMP with simple naming convention", "-                    return new String[] {", "+                    target = new String[] {", "-                    return new String[] {", "+                    target = new String[] {", "-            } else {", "-                int lastSlash = base.lastIndexOf(\"/\");", "+            } else if (!attributes.getIdl()) {", "+                int lastSlash = base.lastIndexOf(File.separatorChar);", "-                return new String[] {", "-                    dirname + \"_\" + filename + getStubClassSuffix() + \".class\",", "-                    dirname + \"_\" + filename + getTieClassSuffix() + \".class\"", "-                };", "+                try {", "+                    Class c = attributes.getLoader().loadClass(classname);", "+", "+                    if (c.isInterface()) {", "+                        // only stub, no tie", "+                        target = new String[] {", "+                            dirname + \"_\" + filename + getStubClassSuffix() ", "+                            + \".class\"", "+                        };", "+                    } else {", "+                        /*", "+                         * stub is derived from implementation, ", "+                         * tie from interface name.", "+                         */", "+                        Class interf = attributes.getRemoteInterface(c);", "+                        String iName = interf.getName();", "+                        String iDir = \"\";", "+                        int iIndex = -1;", "+                        int lastDot = iName.lastIndexOf(\".\");", "+                        if (lastDot == -1) {", "+                            // no package", "+                            iIndex = 0;", "+                        } else {", "+                            iIndex = lastDot + 1;", "+                            iDir = iName.substring(0, iIndex);", "+                            iDir = iDir.replace('.', File.separatorChar);", "+                        }", "+                        ", "+                        target = new String[] {", "+                            dirname + \"_\" + filename + getTieClassSuffix() ", "+                            + \".class\",", "+                            iDir + \"_\" + iName.substring(iIndex) ", "+                            + getStubClassSuffix() + \".class\"", "+                        };", "+                    }", "+                } catch (ClassNotFoundException e) {", "+                    attributes.log(\"Unable to verify class \" + classname", "+                                   + \". It could not be found.\", ", "+                                   Project.MSG_WARN);", "+                } catch (NoClassDefFoundError e) {", "+                    attributes.log(\"Unable to verify class \" + classname", "+                                   + \". It is not defined.\", Project.MSG_WARN);", "+                } catch (Throwable t) {", "+                    attributes.log(\"Unable to verify class \" + classname", "+                                   + \". Loading caused Exception: \"", "+                                   + t.getMessage(), Project.MSG_WARN);", "+                }", "+            return target;"]}]}
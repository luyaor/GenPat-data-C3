{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "272a476430cd24e7fa4ac20caae2fe44", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "198f8d7734cdd6167bdcea87add5ad87", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/jdepend/JDependTask.java", "commitBeforeChange": "99de043a35f48a0a37ff1ec17e0ad0d2fc9fed5c", "commitAfterChange": "e160d8323df859e424047fd929fa01a3da0340a3", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     public int executeInVM(CommandlineJava commandline) throws BuildException", "signatureAfterChange": "     public int executeInVM(CommandlineJava commandline) throws BuildException", "diff": ["+        FileWriter fw = null;", "-            FileWriter fw;", "-        if (getClassespath() != null) {", "-            // This is the new, better way - use classespath instead", "-            // of sourcespath.  The code is currently the same - you", "-            // need class files in a directory to use this - jar files", "-            // coming soon....", "-            String[] classesPath = getClassespath().list();", "-            for (int i = 0; i < classesPath.length; i++) {", "-                File f = new File(classesPath[i]);", "-                // not necessary as JDepend would fail, but why loose", "-                // some time?", "-                if (!f.exists() || !f.isDirectory()) {", "-                    String msg = \"\\\"\"", "-                        + f.getPath()", "-                        + \"\\\" does not represent a valid\"", "-                        + \" directory. JDepend would fail.\";", "-                    log(msg);", "-                    throw new BuildException(msg);", "+", "+        try {", "+            if (getClassespath() != null) {", "+                // This is the new, better way - use classespath instead", "+                // of sourcespath.  The code is currently the same - you", "+                // need class files in a directory to use this - jar files", "+                // coming soon....", "+                String[] classesPath = getClassespath().list();", "+                for (int i = 0; i < classesPath.length; i++) {", "+                    File f = new File(classesPath[i]);", "+                    // not necessary as JDepend would fail, but why loose", "+                    // some time?", "+                    if (!f.exists() || !f.isDirectory()) {", "+                        String msg = \"\\\"\"", "+                            + f.getPath()", "+                            + \"\\\" does not represent a valid\"", "+                            + \" directory. JDepend would fail.\";", "+                        log(msg);", "+                        throw new BuildException(msg);", "+                    }", "+                    try {", "+                        jdepend.addDirectory(f.getPath());", "+                    } catch (IOException e) {", "+                        String msg =", "+                            \"JDepend Failed when adding a class directory: \"", "+                            + e.getMessage();", "+                        log(msg);", "+                        throw new BuildException(msg);", "+                    }", "-                try {", "-                    jdepend.addDirectory(f.getPath());", "-                } catch (IOException e) {", "-                    String msg =", "-                        \"JDepend Failed when adding a class directory: \"", "-                        + e.getMessage();", "-                    log(msg);", "-                    throw new BuildException(msg);", "+", "+            } else if (getSourcespath() != null) {", "+", "+                // This is the old way and is deprecated - classespath is", "+                // the right way to do this and is above", "+                String[] sourcesPath = getSourcespath().list();", "+                for (int i = 0; i < sourcesPath.length; i++) {", "+                    File f = new File(sourcesPath[i]);", "+", "+                    // not necessary as JDepend would fail, but why loose", "+                    // some time?", "+                    if (!f.exists() || !f.isDirectory()) {", "+                        String msg = \"\\\"\"", "+                            + f.getPath()", "+                            + \"\\\" does not represent a valid\"", "+                            + \" directory. JDepend would fail.\";", "+                        log(msg);", "+                        throw new BuildException(msg);", "+                    }", "+                    try {", "+                        jdepend.addDirectory(f.getPath());", "+                    } catch (IOException e) {", "+                        String msg =", "+                            \"JDepend Failed when adding a source directory: \"", "+                            + e.getMessage();", "+                        log(msg);", "+                        throw new BuildException(msg);", "+                    }", "-        } else if (getSourcespath() != null) {", "-", "-            // This is the old way and is deprecated - classespath is", "-            // the right way to do this and is above", "-            String[] sourcesPath = getSourcespath().list();", "-            for (int i = 0; i < sourcesPath.length; i++) {", "-                File f = new File(sourcesPath[i]);", "-", "-                // not necessary as JDepend would fail, but why loose", "-                // some time?", "-                if (!f.exists() || !f.isDirectory()) {", "-                    String msg = \"\\\"\"", "-                        + f.getPath()", "-                        + \"\\\" does not represent a valid\"", "-                        + \" directory. JDepend would fail.\";", "-                    log(msg);", "-                    throw new BuildException(msg);", "+            // This bit turns <exclude> child tags into patters to ignore", "+            String[] patterns = defaultPatterns.getExcludePatterns(getProject());", "+            if (patterns != null && patterns.length > 0) {", "+                if (setFilter != null) {", "+                    Vector v = new Vector();", "+                    for (int i = 0; i < patterns.length; i++) {", "+                        v.addElement(patterns[i]);", "+                    }", "+                    try {", "+                        Object o = packageFilterC.newInstance(new Object[] {v});", "+                        setFilter.invoke(jdepend, new Object[] {o});", "+                    } catch (Throwable e) {", "+                        log(\"excludes will be ignored as JDepend doesn't like me: \"", "+                            + e.getMessage(), Project.MSG_WARN);", "+                    }", "+                } else {", "+                    log(\"Sorry, your version of JDepend doesn't support excludes\",", "+                        Project.MSG_WARN);", "+            }", "+", "+            jdepend.analyze();", "+        } finally {", "+            if (fw != null) {", "-                    jdepend.addDirectory(f.getPath());", "-                } catch (IOException e) {", "-                    String msg =", "-                        \"JDepend Failed when adding a source directory: \"", "-                        + e.getMessage();", "-                    log(msg);", "-                    throw new BuildException(msg);", "+                    fw.close();", "+                } catch (Throwable t) {", "+                    // Ignore", "-", "-        // This bit turns <exclude> child tags into patters to ignore", "-        String[] patterns = defaultPatterns.getExcludePatterns(getProject());", "-        if (patterns != null && patterns.length > 0) {", "-            if (setFilter != null) {", "-                Vector v = new Vector();", "-                for (int i = 0; i < patterns.length; i++) {", "-                    v.addElement(patterns[i]);", "-                }", "-                try {", "-                    Object o = packageFilterC.newInstance(new Object[] {v});", "-                    setFilter.invoke(jdepend, new Object[] {o});", "-                } catch (Throwable e) {", "-                    log(\"excludes will be ignored as JDepend doesn't like me: \"", "-                        + e.getMessage(), Project.MSG_WARN);", "-                }", "-            } else {", "-                log(\"Sorry, your version of JDepend doesn't support excludes\",", "-                    Project.MSG_WARN);", "-            }", "-        }", "-", "-        jdepend.analyze();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cb784e1df8284e9a696c514723df55f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Redirector.java", "commitBeforeChange": "3732eb195b3d24d6480a2d7edb2818b325a3e199", "commitAfterChange": "b0507d4451b72856ddca45183143a96493e8ef3e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 23, "signatureBeforeChange": "     public void createStreams()", "signatureAfterChange": "     public synchronized void createStreams()", "diff": ["-    public void createStreams() {", "-        if (out == null && outputProperty == null) {", "+    public synchronized void createStreams() {", "+        if ((out == null || out.length == 0) && outputProperty == null) {", "-            errorStream = new LogOutputStream(managingTask, Project.MSG_WARN);", "-            if (out != null)  {", "-                outputStream = new LazyFileOutputStream(out, append, true);", "-                managingTask.log(\"Output redirected to \" + out,", "-                                 Project.MSG_VERBOSE);", "+            if (out != null && out.length > 0) {", "+                String logHead = new StringBuffer(\"Output \").append(", "+                    ((append) ? \"appended\" : \"redirected\")).append(", "+                    \" to \").toString();", "+                outputStream = foldFiles(out, logHead, Project.MSG_VERBOSE);", "-                baos = new ByteArrayOutputStream();", "-                managingTask.log(\"Output redirected to property: \"", "-                    + outputProperty, Project.MSG_VERBOSE);", "-                if (out == null) {", "-                    outputStream = baos;", "+                if (baos == null) {", "+                    baos = new PropertyOutputStream(outputProperty);", "+                    managingTask.log(\"Output redirected to property: \"", "+                        + outputProperty, Project.MSG_VERBOSE);", "+                }", "+                //shield it from being closed by a filtering StreamPumper", "+                OutputStream keepAliveOutput = new KeepAliveOutputStream(baos);", "+                if (outputStream == null) {", "+                    outputStream = keepAliveOutput;", "-                    outputStream = new TeeOutputStream(outputStream, baos);", "+                    outputStream", "+                        = new TeeOutputStream(outputStream, keepAliveOutput);", "-        if (logError) {", "-            errorStream = new LogOutputStream(managingTask, Project.MSG_WARN);", "-        }", "+        if (error != null && error.length > 0) {", "+            String logHead = new StringBuffer(\"Error \").append(", "+                ((append) ? \"appended\" : \"redirected\")).append(", "+                \" to \").toString();", "+            errorStream = foldFiles(error, logHead, Project.MSG_VERBOSE);", "-        if (error != null)  {", "-            errorStream = new LazyFileOutputStream(error, append, true);", "-            managingTask.log(\"Error redirected to \" + error,", "-                             Project.MSG_VERBOSE);", "+        } else if (logError || errorStream == null) {", "+            errorStream = new LogOutputStream(managingTask, Project.MSG_WARN);", "+        } else { //must be errorStream == outputStream", "+            long funnelTimeout = 0L;", "+            OutputStreamFunneler funneler", "+                = new OutputStreamFunneler(outputStream, funnelTimeout);", "+            try {", "+                outputStream = funneler.getFunnelInstance();", "+                errorStream = funneler.getFunnelInstance();", "+            } catch (IOException eyeOhEx) {", "+                throw new BuildException(", "+                    \"error splitting output/error streams\", eyeOhEx);", "+            }", "-            errorBaos = new ByteArrayOutputStream();", "-            managingTask.log(\"Error redirected to property: \" + errorProperty,", "-                Project.MSG_VERBOSE);", "-            if (error == null) {", "-                errorStream = errorBaos;", "-            } else {", "-                errorStream = new TeeOutputStream(errorStream, errorBaos);", "+            if (errorBaos == null) {", "+                errorBaos = new PropertyOutputStream(errorProperty);", "+                managingTask.log(\"Error redirected to property: \" + errorProperty,", "+                    Project.MSG_VERBOSE);", "+            //shield it from being closed by a filtering StreamPumper", "+            OutputStream keepAliveError = new KeepAliveOutputStream(errorBaos);", "+            errorStream = (error == null || error.length == 0) ? keepAliveError", "+                : new TeeOutputStream(errorStream, keepAliveError);", "-        if (input != null && inputString != null) {", "-            throw new BuildException(\"The \\\"input\\\" and \\\"inputstring\\\" \"", "-                + \"attributes cannot both be specified\");", "-        }", "-        if (input != null) {", "+        if ((outputFilterChains != null && outputFilterChains.size() > 0)", "+            || !(outputEncoding.equalsIgnoreCase(inputEncoding))) {", "-                inputStream = new FileInputStream(input);", "-            } catch (FileNotFoundException fne) {", "-                throw new BuildException(\"Cannot read from \" + input, fne);", "+                LeadPipeInputStream snk = new LeadPipeInputStream();", "+                snk.setManagingTask(managingTask);", "+    ", "+                InputStream outPumpIn = snk;", "+", "+                Reader reader = new InputStreamReader(outPumpIn, inputEncoding);", "+", "+                if (outputFilterChains != null && outputFilterChains.size() > 0) {", "+                    ChainReaderHelper helper = new ChainReaderHelper();", "+                    helper.setPrimaryReader(reader);", "+                    helper.setFilterChains(outputFilterChains);", "+                    reader = helper.getAssembledReader();", "+                }", "+                outPumpIn = new ReaderInputStream(reader, outputEncoding);", "+", "+                Thread t = new Thread(threadGroup, new StreamPumper(", "+                    outPumpIn, outputStream, true), \"output pumper\");", "+                t.setPriority(Thread.MAX_PRIORITY);", "+                outputStream = new PipedOutputStream(snk);", "+                t.start();", "+            } catch (IOException eyeOhEx) {", "+                throw new BuildException(", "+                    \"error setting up output stream\", eyeOhEx);", "+        }", "+", "+        if ((errorFilterChains != null && errorFilterChains.size() > 0)", "+            || !(errorEncoding.equalsIgnoreCase(inputEncoding))) {", "+            try {", "+                LeadPipeInputStream snk = new LeadPipeInputStream();", "+                snk.setManagingTask(managingTask);", "+    ", "+                InputStream errPumpIn = snk;", "+", "+                Reader reader = new InputStreamReader(errPumpIn, inputEncoding);", "+", "+                if (errorFilterChains != null && errorFilterChains.size() > 0) {", "+                    ChainReaderHelper helper = new ChainReaderHelper();", "+                    helper.setPrimaryReader(reader);", "+                    helper.setFilterChains(errorFilterChains);", "+                    reader = helper.getAssembledReader();", "+                }", "+                errPumpIn = new ReaderInputStream(reader, errorEncoding);", "+", "+                Thread t = new Thread(threadGroup, new StreamPumper(", "+                    errPumpIn, errorStream, true), \"error pumper\");", "+                t.setPriority(Thread.MAX_PRIORITY);", "+                errorStream = new PipedOutputStream(snk);", "+                t.start();", "+            } catch (IOException eyeOhEx) {", "+                throw new BuildException(", "+                    \"error setting up error stream\", eyeOhEx);", "+            }", "+        }", "+", "+        // if input files are specified, inputString is ignored;", "+        // classes that work with redirector attributes can enforce", "+        // whatever warnings are needed", "+        if (input != null && input.length > 0) {", "+            managingTask.log(\"Redirecting input from file\"", "+                + ((input.length == 1) ? \"\" : \"s\"), Project.MSG_VERBOSE);", "+            try {", "+                inputStream = new ConcatFileInputStream(input);", "+            } catch (IOException eyeOhEx) {", "+                throw new BuildException(eyeOhEx);", "+            }", "+            ((ConcatFileInputStream)inputStream).setManagingTask(managingTask);", "+            managingTask.log(\"Using input \\\"\" + inputString + \"\\\"\",", "+                Project.MSG_VERBOSE);", "-    }", "+        if (inputStream != null", "+            && inputFilterChains != null && inputFilterChains.size() > 0) {", "+            ChainReaderHelper helper = new ChainReaderHelper();", "+            try {", "+                helper.setPrimaryReader(", "+                    new InputStreamReader(inputStream, inputEncoding));", "+            } catch (IOException eyeOhEx) {", "+                throw new BuildException(", "+                    \"error setting up input stream\", eyeOhEx);", "+            }", "+            helper.setFilterChains(inputFilterChains);", "+            inputStream = new ReaderInputStream(", "+                helper.getAssembledReader(), inputEncoding);", "+        }", "+    }"]}]}
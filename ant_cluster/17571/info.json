{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2cb21923a5b31307b37302379ae3d611", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bde16e02bb7664900792170da276abc4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/Main.java", "commitBeforeChange": "d678e492b98fc7a29ed46b3f9d8ffade75c3bb4a", "commitAfterChange": "52418752350fdbbed27fe9c443a077e6b3c61cdf", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected ClassLoader createClassLoader( final File libDir )", "signatureAfterChange": "      private boolean parseCommandLineOptions( final String[] args )", "diff": ["+    private boolean parseCommandLineOptions( final String[] args )", "+            return false;", "+            case HELP_OPT: usage( options ); return false;", "+            case VERSION_OPT: System.out.println( Constants.BUILD_DESCRIPTION ); return false;", "+                m_defines.put( option.getArgument( 0 ), option.getArgument( 1 ) );", "+            case 0: m_targets.add( option.getArgument() ); break;", "+        }", "+", "+        return true;", "+    }", "-     */", "-    protected ClassLoader createClassLoader( final File libDir )", "-    {", "-        final ClassLoader candidate = getClass().getClassLoader();", "-", "-        if( !(candidate instanceof LauncherClassLoader) )", "-        {", "-            getLogger().warn( \"Warning: Unable to add entries from \" +", "-                              \"lib-path to classloader\" );", "-            return candidate;", "-        }", "-", "-        final LauncherClassLoader classLoader = (LauncherClassLoader)candidate;", "-", "-        final ExtensionFileFilter filter =", "-            new ExtensionFileFilter( new String[] { \".jar\", \".zip\" } );", "-", "-        final File[] files = libDir.listFiles( filter );", "-", "-        for( int i = 0; i < files.length; i++ )", "-        {", "-            //except for a few *special* files add all the", "-            //.zip/.jars to classloader", "-            final String name = files[ i ].getName();", "-            if( !name.equals( \"ant.jar\" ) &&", "-                !name.equals( \"myrmidon.jar\" ) &&", "-                !name.equals( \"avalonapi.jar\" ) )", "-            {", "-                try { classLoader.addURL( files[ i ].toURL() ); }", "-                catch( final MalformedURLException mue ) {}", "-            }", "-        }", "-", "-        return classLoader;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd821ed1a89b5d5a647573f5ec50685b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/Main.java", "commitBeforeChange": "685af27ceefe23e6cbaf8e8212805d3850765bdc", "commitAfterChange": "157d8f04d2c676ac93a8cda891f804bddf6f7836", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      protected void execute( final String[] args )         throws Exception", "signatureAfterChange": "      protected void execute( final String[] args )         throws Exception", "diff": ["-        String filename = null;", "-        String listenerName = null;", "-        String logLevel = null;", "-        String homeDir = null;", "-        String taskLibDir = null;", "-        boolean incremental = false;", "-        HashMap defines = new HashMap();", "+        final HashMap defines = new HashMap();", "+", "+        m_parameters.setParameter( \"filename\", \"build.ant\" );", "+        m_parameters.setParameter( \"log.level\", \"WARN\" );", "+        m_parameters.setParameter( \"listener\", \"org.apache.myrmidon.listeners.DefaultProjectListener\" );", "+        m_parameters.setParameter( \"incremental\", \"false\" );", "+", "+        //System property set up by launcher", "+        m_parameters.setParameter( \"myrmidon.home\", System.getProperty( \"myrmidon.home\" ) );", "-            case 0: targets.add( option.getArgument() ); break;", "-            case VERSION_OPT: System.out.println( VERSION ); return;", "-            case FILE_OPT: filename = option.getArgument(); break;", "-            case HOME_DIR_OPT: homeDir = option.getArgument(); break;", "-            case TASKLIB_DIR_OPT: taskLibDir = option.getArgument(); break;", "-            case VERBOSE_OPT: logLevel = \"INFO\"; break;", "-            case QUIET_OPT: logLevel = \"ERROR\"; break;", "-            case LOG_LEVEL_OPT: logLevel = option.getArgument(); break;", "-            case LISTENER_OPT: listenerName = option.getArgument(); break;", "-            case INCREMENTAL_OPT: incremental = true; break;", "+            case VERSION_OPT: System.out.println( Constants.BUILD_DESCRIPTION ); return;", "+", "+            case HOME_DIR_OPT: m_parameters.setParameter( \"myrmidon.home\", option.getArgument() ); break;", "+            case TASKLIB_DIR_OPT: ", "+                m_parameters.setParameter( \"myrmidon.lib.path\", option.getArgument() ); ", "+                break;", "+", "+            case LOG_LEVEL_OPT: m_parameters.setParameter( \"log.level\", option.getArgument() ); break;", "+            case VERBOSE_OPT: m_parameters.setParameter( \"log.level\", \"INFO\" ); break;", "+            case QUIET_OPT: m_parameters.setParameter( \"log.level\", \"ERROR\" ); break;", "+", "+            case INCREMENTAL_OPT: m_parameters.setParameter( \"incremental\", \"true\" ); break;", "+", "+            case FILE_OPT: m_parameters.setParameter( \"filename\", option.getArgument() ); break;", "+            case LISTENER_OPT: m_parameters.setParameter( \"listener\", option.getArgument() ); break;", "+", "+            case 0: targets.add( option.getArgument() ); break;", "-        if( null == logLevel ) logLevel = DEFAULT_LOGLEVEL;", "-        if( null == listenerName ) listenerName = DEFAULT_LISTENER;", "-        if( null == filename ) filename = DEFAULT_FILENAME;", "-", "+        final String logLevel = m_parameters.getParameter( \"log.level\", null );", "-        //if ant home not set then use system property ant.home", "-        //that was set up by launcher.", "-        if( null == homeDir ) homeDir = System.getProperty( \"ant.home\" );", "-", "-        final Parameters parameters = new Parameters();", "-        parameters.setParameter( \"ant.home\", homeDir );", "-", "-        if( null != taskLibDir ) parameters.setParameter( \"ant.path.task-lib\", taskLibDir );", "-", "-        m_homeDir = (new File( homeDir )).getAbsoluteFile();", "-        if( !m_homeDir.isDirectory() )", "+        final String home = m_parameters.getParameter( \"myrmidon.home\", null );", "+        final File homeDir = (new File( home )).getAbsoluteFile();", "+        if( !homeDir.isDirectory() )", "-            throw new TaskException( \"ant-home (\" + m_homeDir + \") is not a directory\" );", "+            throw new TaskException( \"myrmidon-home (\" + homeDir + \") is not a directory\" );", "-        final File libDir = new File( m_homeDir, \"lib\" );", "+        final File libDir = new File( homeDir, \"lib\" );", "+        final String filename = m_parameters.getParameter( \"filename\", null );", "+        final String listenerName = m_parameters.getParameter( \"listener\", null );", "+        final LogTarget target = new LogTargetToListenerAdapter( listener );", "+        getLogger().setLogTargets( new LogTarget[] { target } );", "+", "+", "+", "-        getLogger().info( \"Ant Home Directory: \" + m_homeDir );", "+        getLogger().info( \"Ant Home Directory: \" + homeDir );", "-        embeddor.parameterize( parameters );", "+        embeddor.parameterize( m_parameters );", "+        final boolean incremental = m_parameters.getParameterAsBoolean( \"incremental\", false );", "-            setupContext( context, defines );", "+            ", "+            //Add CLI defines", "+            addToContext( context, defines );", "+", "+            //Add system properties second so that they overide user-defined properties", "+            addToContext( context, System.getProperties() );", "-            //context.setProperty( Project.PROJECT, projectName );", "+            //context.setProperty( Project.PROJECT, project.getName() );"]}]}
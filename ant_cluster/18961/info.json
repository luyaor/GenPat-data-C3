{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7282c042fe089993234db9f2d77f799f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b52e2c3b786a80f0066c06b32e3b617", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/jdepend/JDependTask.java", "commitBeforeChange": "eba9a3c2d98d12180af9eca571480f1d58af6361", "commitAfterChange": "a94ef2aa3bc2c2129b8cbe32eb41ef4f21023284", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     public int executeAsForked(CommandlineJava commandline,                                ExecuteWatchdog watchdog) throws BuildException", "signatureAfterChange": "     public int executeAsForked(CommandlineJava commandline,                                ExecuteWatchdog watchdog) throws BuildException", "diff": ["-        // This is deprecated - use classespath in the future", "-        String[] sourcesPath = getSourcespath().list();", "-        for (int i = 0; i < sourcesPath.length; i++) {", "-            File f = new File(sourcesPath[i]);", "+            // This is deprecated - use classespath in the future", "+            String[] sourcesPath = getSourcespath().list();", "+            for (int i = 0; i < sourcesPath.length; i++) {", "+                File f = new File(sourcesPath[i]);", "-            // not necessary as JDepend would fail, but why loose some time?", "-            if (!f.exists() || !f.isDirectory()) {", "-                throw new BuildException(\"\\\"\" + f.getPath() + \"\\\" does not \"", "-                                         + \"represent a valid directory. JDepend would fail.\");", "+                // not necessary as JDepend would fail, but why loose", "+                // some time?", "+                if (!f.exists() || !f.isDirectory()) {", "+                    throw new BuildException(\"\\\"\" + f.getPath() ", "+                                             + \"\\\" does not represent a valid\"", "+                                             + \" directory. JDepend would\"", "+                                             + \" fail.\");", "+                }", "+                commandline.createArgument().setValue(f.getPath());", "-            commandline.createArgument().setValue(f.getPath());", "-        }", "-        // This is the new way - use classespath - code is the same for now", "-        String[] classesPath = getClassespath().list();", "-        for (int i = 0; i < classesPath.length; i++) {", "-            File f = new File(classesPath[i]);", "-            // not necessary as JDepend would fail, but why loose some time?", "-            if (!f.exists() || !f.isDirectory()) {", "-                throw new BuildException(\"\\\"\" + f.getPath() + \"\\\" does not \"", "-                                         + \"represent a valid directory. JDepend would fail.\");", "+            // This is the new way - use classespath - code is the", "+            // same for now", "+            String[] classesPath = getClassespath().list();", "+            for (int i = 0; i < classesPath.length; i++) {", "+                File f = new File(classesPath[i]);", "+                // not necessary as JDepend would fail, but why loose", "+                // some time?", "+                if (!f.exists() || !f.isDirectory()) {", "+                    throw new BuildException(\"\\\"\" + f.getPath() ", "+                                             + \"\\\" does not represent a valid\"", "+                                             + \" directory. JDepend would\"", "+                                             + \" fail.\");", "+                }", "+                commandline.createArgument().setValue(f.getPath());", "-            commandline.createArgument().setValue(f.getPath());", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a346abc7b2274c04ccc82b76ca62f77", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "196c36bc28dec63b239595132e8b00c55951c860", "commitAfterChange": "689fca41585cc1768a0501fd11c8235b6e4bc481", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 55, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["+", "+", "+        if(maxmemory != null){", "+            if(javadoc1){", "+                argList.addElement(\"-J-mx\" + maxmemory);", "+            }", "+            else{", "+                argList.addElement(\"-J-Xmx\" + maxmemory);", "+            }", "+        }", "+            ", "+            // add the single link arguments", "+            ", "+            // add the links arguments", "+            if (links.size() != 0) {", "+                for (Enumeration e = links.elements(); e.hasMoreElements(); ) {", "+                    LinkArgument la = (LinkArgument)e.nextElement();", "+                ", "+                    if (la.getHref() == null) {", "+                        throw new BuildException(\"Links must provide the RUL to the external class documentation.\");", "+                    }", "+                ", "+                    if (la.isLinkOffline()) {", "+                        String packageListLocation = la.getPackagelistLoc();", "+                        if (packageListLocation == null) {", "+                            throw new BuildException(\"The package list location for link \" + la.getHref() +", "+                                                     \" must be provided because the link is offline\");", "+                        }", "+                        argList.addElement(\"-linkoffline\");", "+                        argList.addElement(la.getHref());", "+                        argList.addElement(packageListLocation);", "+                    }", "+                    else {", "+                        argList.addElement(\"-link\");", "+                        argList.addElement(la.getHref());", "+                    }", "+                }", "+            }                                   ", "+                                                ", "+            // add the single linkoffline arguments", "-", "+            ", "+            // add the single group arguments", "+            ", "+            // add the group arguments", "+            if (groups.size() != 0) {", "+                String title = null;", "+                String packages = null;", "+                GroupArgument ga = null;", "+                for (int i = 0; i < groups.size(); i++) {", "+                    ga = (GroupArgument)groups.get(i);", "+                    if (ga != null) {", "+                        title = ga.getTitle();", "+                        packages = ga.getPackages();", "+                    }", "+                    if (title != null) {", "+                        argList.addElement(\"-group\");", "+                        argList.addElement(title);", "+                        if (packages != null) {", "+                            argList.addElement(packages);", "+                        }", "+                    }", "+                }", "+            }", "+            }", "+            if (additionalParam != null) {", "+                argList.addElement(additionalParam);", "+         if (packageList != null) {", "+            argList.addElement(\"@\" + packageList);", "+        }"]}]}
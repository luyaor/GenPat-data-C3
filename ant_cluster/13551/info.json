{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3b1325e81eeb09aba371924a78f1de81", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d9387bd6576ebbcea9d83eb84a4cad3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antlibs/ant1compat/org/apache/tools/ant/Ant1Factory.java", "commitBeforeChange": "83dc385bd01fbc8ee2fb166b9a5605bdc6958d76", "commitAfterChange": "bf844382c856f7b51c56024189c93f11d34cb720", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public Object createTypeInstance(Class typeClass, String localName)          throws InstantiationException, IllegalAccessException,         ExecutionException", "signatureAfterChange": "     public Object createComponent(Class componentClass, String localName)          throws InstantiationException, IllegalAccessException,         ExecutionException", "diff": ["-    public Object createTypeInstance(Class typeClass, String localName)", "+    public Object createComponent(Class componentClass, String localName)", "-            java.lang.reflect.Constructor ctor = null;", "+            java.lang.reflect.Constructor constructor = null;", "-            Object o = null;", "+            Object component = null;", "-                ctor = typeClass.getConstructor(new Class[0]);", "-                o = ctor.newInstance(new Object[0]);", "+                constructor = componentClass.getConstructor(new Class[0]);", "+                component = constructor.newInstance(new Object[0]);", "-                ctor = typeClass.getConstructor(new Class[]{Project.class});", "-                o = ctor.newInstance(new Object[]{project});", "+                constructor ", "+                    = componentClass.getConstructor(new Class[]{Project.class});", "+                component = constructor.newInstance(new Object[]{project});", "-            if (o instanceof ProjectComponent) {", "-                ((ProjectComponent)o).setProject(project);", "+            if (component instanceof ProjectComponent) {", "+                ((ProjectComponent)component).setProject(project);", "-            return o;", "+            return component;", "-            String msg = \"Could not create datatype of type: \"", "-                 + typeClass.getName() + \" due to \" + t;", "+            String msg = \"Could not create component of type: \"", "+                 + componentClass.getName() + \" due to \" + t;", "-                 + \"constructor for type \" + typeClass.getName(), e);", "+                 + \"constructor for component \" + componentClass.getName(), e);", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f0c2f7b5114d9c2850ef023082c7249", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antlibs/ant1compat/org/apache/tools/ant/Ant1Factory.java", "commitBeforeChange": "c0ddb311373dc9fe32a78a15a68c4587bbb7566d", "commitAfterChange": "69d9b9a49622889f44d6792faf00f886857828d6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public Converter createConverter(Class converterClass)          throws InstantiationException, IllegalAccessException,         ExecutionException", "signatureAfterChange": "     public Object createInstance(Class requiredClass)          throws InstantiationException, IllegalAccessException,         ExecutionException", "diff": ["-    public Converter createConverter(Class converterClass)", "+    public Object createInstance(Class requiredClass)", "-        Converter converter = null;", "+        Object instance = null;", "-                c = converterClass.getConstructor(new Class[0]);", "-                converter = (Converter) c.newInstance(new Object[0]);", "+                c = requiredClass.getConstructor(new Class[0]);", "+                instance = c.newInstance(new Object[0]);", "-                c = converterClass.getConstructor(new Class[]{Project.class});", "-                converter = (Converter) c.newInstance(new Object[]{project});", "+                c = requiredClass.getConstructor(new Class[]{Project.class});", "+                instance = c.newInstance(new Object[]{project});", "-            return converter;", "+            return instance;", "-            String msg = \"Could not create converter of type: \"", "-                 + converterClass.getName() + \" due to \" + t;", "+            String msg = \"Could not create instance of type: \"", "+                 + requiredClass.getName() + \" due to \" + t;", "-                 + \"constructor for converter \" + converterClass.getName(), e);", "+                 + \"constructor for class \" + requiredClass.getName(), e);"]}]}
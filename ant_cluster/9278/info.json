{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d67174367b4275f118959a32bd9f81ce", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b88537fa4a1d6f9a58295117948bd82e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/CopyTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 15, "signatureBeforeChange": "          public void testFileResourcePlain()", "signatureAfterChange": "          @Test     public void testFileResourcePlain()", "diff": ["+    @Test", "-        executeTarget(\"testFileResourcePlain\");", "-        File file1 = new File(getProject().getProperty(\"to.dir\")+\"/file1.txt\");", "-        File file2 = new File(getProject().getProperty(\"to.dir\")+\"/file2.txt\");", "-        File file3 = new File(getProject().getProperty(\"to.dir\")+\"/file3.txt\");", "+        buildRule.executeTarget(\"testFileResourcePlain\");", "+        File file1 = new File(buildRule.getProject().getProperty(\"to.dir\")+\"/file1.txt\");", "+        File file2 = new File(buildRule.getProject().getProperty(\"to.dir\")+\"/file2.txt\");", "+        File file3 = new File(buildRule.getProject().getProperty(\"to.dir\")+\"/file3.txt\");", "+        assertTrue(file1.exists());", "+        assertTrue(file2.exists());", "+        assertTrue(file3.exists());", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cee14d14950bc4aa46ecd6c86af50e02", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/CopyTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": "          public void _testFileResourceWithMapper()", "signatureAfterChange": "      @Ignore(\"Previously ignored by naming convention\")     @Test     public void testFileResourceWithMapper()", "diff": ["+", "+    @Ignore(\"Previously ignored by naming convention\")", "+    @Test", "+    public void testFileResourceWithMapper() {", "+        buildRule.executeTarget(\"testFileResourceWithMapper\");", "+        File file1 = new File(buildRule.getProject().getProperty(\"to.dir\")+\"/file1.txt.bak\");", "+        File file2 = new File(buildRule.getProject().getProperty(\"to.dir\")+\"/file2.txt.bak\");", "+        File file3 = new File(buildRule.getProject().getProperty(\"to.dir\")+\"/file3.txt.bak\");", "-    public void _testFileResourceWithMapper() {", "-        executeTarget(\"testFileResourceWithMapper\");", "-        File file1 = new File(getProject().getProperty(\"to.dir\")+\"/file1.txt.bak\");", "-        File file2 = new File(getProject().getProperty(\"to.dir\")+\"/file2.txt.bak\");", "-        File file3 = new File(getProject().getProperty(\"to.dir\")+\"/file3.txt.bak\");", "-        assertTrue(file1.exists());", "-        assertTrue(file2.exists());", "-        assertTrue(file3.exists());", "-    }"]}]}
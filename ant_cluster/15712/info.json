{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7af7d429f6cc6ebcf4d6d88d7718b03d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62d0d388677ca924505510854fb9bd71", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Redirector.java", "commitBeforeChange": "3732eb195b3d24d6480a2d7edb2818b325a3e199", "commitAfterChange": "b0507d4451b72856ddca45183143a96493e8ef3e", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 33, "signatureBeforeChange": "     public void complete() throws IOException", "signatureAfterChange": "     public synchronized void complete() throws IOException", "diff": ["-    public void complete() throws IOException {", "+    public synchronized void complete() throws IOException {", "+        outputStream.flush();", "-        if (errorStream != outputStream) {", "-            errorStream.close();", "+        errorStream.flush();", "+        errorStream.close();", "+", "+        //wait for the StreamPumpers to finish", "+        while (threadGroup.activeCount() > 0) {", "+            try {", "+                managingTask.log(\"waiting for \" + threadGroup.activeCount()", "+                    + \" Threads:\", Project.MSG_DEBUG);", "+                Thread[] thread = new Thread[threadGroup.activeCount()];", "+                threadGroup.enumerate(thread);", "+                for (int i = 0; i < thread.length && thread[i] != null; i++) {", "+                    try {", "+                        managingTask.log(thread[i].toString(), Project.MSG_DEBUG);", "+                    } catch (NullPointerException enPeaEx) {", "+                    }", "+                }", "+                Thread.sleep(1000);", "+            } catch (InterruptedException eyeEx) {", "+            }", "+        setProperties();", "+", "+        inputStream = null;", "+        outputStream = errorStream = outPrintStream = errorPrintStream = null;", "+   }", "-            setPropertyFromBAOS(baos, outputProperty);", "-            setPropertyFromBAOS(errorBaos, errorProperty);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71243c35bbc8a3b3f3e067e5ad01692e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Touch.java", "commitBeforeChange": "0c4a72a81b5928f9de2829c50b77575ed456a608", "commitAfterChange": "e6e450dc16652de9966256b38be3c2b417f982a9", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "     void touch() throws BuildException", "signatureAfterChange": "     protected void touch() throws BuildException", "diff": ["-    void touch() throws BuildException {", "-        if (!file.exists()) {", "-            log(\"Creating \"+file, Project.MSG_INFO);", "-            try {", "-                FileOutputStream fos = new FileOutputStream(file);", "-                fos.write(new byte[0]);", "-                fos.close();", "-            } catch (IOException ioe) {", "-                throw new BuildException(\"Could not create \"+file, ioe, ", "-                                         location);", "+    protected void touch() throws BuildException {", "+        if (file != null) {", "+            if (!file.exists()) {", "+                log(\"Creating \"+file, Project.MSG_INFO);", "+                try {", "+                    FileOutputStream fos = new FileOutputStream(file);", "+                    fos.write(new byte[0]);", "+                    fos.close();", "+                } catch (IOException ioe) {", "+                    throw new BuildException(\"Could not create \"+file, ioe, ", "+                                             location);", "+                }", "+            touch(file);", "+        if (millis >= 0 && project.getJavaVersion() == Project.JAVA_1_1) {", "+            log(\"modification time of files cannot be set in JDK 1.1\",", "+                Project.MSG_WARN);", "+            return;", "+        }", "+", "+        // deal with the filesets", "+        for (int i=0; i < filesets.size(); i++) {", "+            FileSet fs = (FileSet) filesets.elementAt(i);", "+            DirectoryScanner ds = fs.getDirectoryScanner(project);", "+            File fromDir = fs.getDir(project);", "+", "+            String[] srcFiles = ds.getIncludedFiles();", "+            String[] srcDirs = ds.getIncludedDirectories();", "+", "+            for(int j=0; j < srcFiles.length ; j++) {", "+                touch(new File(fromDir, srcFiles[j]));", "+            }", "+         ", "+            for(int j=0; j < srcDirs.length ; j++) {", "+                touch(new File(fromDir, srcDirs[j]));", "+            }", "+        }", "+    }"]}]}
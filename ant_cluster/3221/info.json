{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d9cbe828f59f7051b8c472496f09bd8d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be48926ea7146f5669af5ecf51b8b1fd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "a9aa3e7efe1a4e4437f575079a89f915936b95dd", "commitAfterChange": "c341e8606d84afbac9fbe08b9814bbb0bf826e3b", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "     protected final void addResources(FileSet fileset, Resource[] resources,                                       ZipOutputStream zOut)         throws IOException", "signatureAfterChange": "     protected final void addResources(FileSet fileset, Resource[] resources,                                       ZipOutputStream zOut)         throws IOException", "diff": ["-                if (resources[i].isDirectory() && !name.endsWith(\"/\")) {", "-                    name = name + \"/\";", "-                }", "-                if (!doFilesonly && !dealingWithFiles", "-                    && resources[i].isDirectory()", "-                    && !zfs.hasDirModeBeenSet()) {", "-                    int nextToLastSlash = name.lastIndexOf(\"/\",", "-                                                           name.length() - 2);", "-                    if (nextToLastSlash != -1) {", "-                        addParentDirs(base, name.substring(0,", "-                                                           nextToLastSlash + 1),", "-                                      zOut, prefix, dirMode);", "+                if (resources[i].isDirectory()) {", "+                    if (doFilesonly) {", "+                        continue;", "-                    if (zf != null) {", "-                        ZipEntry ze = zf.getEntry(resources[i].getName());", "-                        int unixMode = ze.getUnixMode();", "-                        if ((unixMode == 0 || unixMode == UnixStat.DIR_FLAG)", "-                            && !preserve0Permissions) {", "-                            unixMode = dirMode;", "-                        }", "-                        addParentDirs(base, name, zOut, prefix,", "-                                      unixMode);", "-                    } else {", "-                        ArchiveResource tr = (ArchiveResource) resources[i];", "-                        addParentDirs(base, name, zOut, prefix,", "-                                      tr.getMode());", "-                    }", "+                    int thisDirMode = zfs != null && zfs.hasDirModeBeenSet()", "+                        ? dirMode : getUnixMode(resources[i], zf, dirMode);", "+                    addDirectoryResource(resources[i], name, prefix,", "+                                         base, zOut,", "+                                         dirMode, thisDirMode);", "-                } else {", "+                } else { // !isDirectory", "+", "-                }", "-                if (!resources[i].isDirectory() && dealingWithFiles) {", "-                    File f = FILE_UTILS.resolveFile(base,", "-                                                   resources[i].getName());", "-                    zipFile(f, zOut, prefix + name, fileMode);", "-                } else if (!resources[i].isDirectory()) {", "-                    if (zf != null) {", "-                    ZipEntry ze = zf.getEntry(resources[i].getName());", "-", "-                    if (ze != null) {", "-                        boolean oldCompress = doCompress;", "-                        if (keepCompression) {", "-                            doCompress = (ze.getMethod() == ZipEntry.DEFLATED);", "-                        }", "-                        InputStream is = null;", "-                        try {", "-                            is = zf.getInputStream(ze);", "-                            int unixMode = ze.getUnixMode();", "-                            if (zfs.hasFileModeBeenSet()", "-                                || ((unixMode == 0", "-                                     || unixMode == UnixStat.FILE_FLAG)", "-                                    && !preserve0Permissions)) {", "-                                unixMode = fileMode;", "-                            }", "-                            zipFile(is, zOut, prefix + name,", "-                                    ze.getTime(), zfs.getSrc(getProject()),", "-                                    unixMode);", "-                        } finally {", "-                            doCompress = oldCompress;", "-                            FileUtils.close(is);", "-                        }", "-                    }", "+                    if (dealingWithFiles) {", "+                        File f = FILE_UTILS.resolveFile(base,", "+                                                        resources[i].getName());", "+                        zipFile(f, zOut, prefix + name, fileMode);", "-                        ArchiveResource tr = (ArchiveResource) resources[i];", "-                        InputStream is = null;", "-                        try {", "-                            is = tr.getInputStream();", "-                            zipFile(is, zOut, prefix + name,", "-                                    resources[i].getLastModified(),", "-                                    zfs.getSrc(getProject()),", "-                                    zfs.hasFileModeBeenSet() ? fileMode", "-                                    : tr.getMode());", "-                        } finally {", "-                            FileUtils.close(is);", "-                        }", "+                        int thisFileMode =", "+                            zfs != null && zfs.hasFileModeBeenSet()", "+                            ? fileMode : getUnixMode(resources[i], zf,", "+                                                     fileMode);", "+                        addResource(resources[i], name, prefix,", "+                                    zOut, thisFileMode,", "+                                    zf, zfs.getSrc(getProject()));", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbfb4801cd56022a02e610a202f91eb0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "cdb548b3b4d78f378f11293a270aa5a8bb4a913a", "commitAfterChange": "5e01ac3c135e9e7f675ca6dcc66abe9e0d0d6005", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String encoding, Project project)         throws IOException", "signatureAfterChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String encoding, Project project)         throws IOException", "diff": ["-                if (encoding == null) {", "-                    in = new BufferedReader(new FileReader(sourceFile));", "-                    out = new BufferedWriter(new FileWriter(destFile));", "-                } else {", "-                    in = new BufferedReader(new InputStreamReader(", "-                            new FileInputStream(sourceFile), encoding));", "-                    out = new BufferedWriter(new OutputStreamWriter(", "-                            new FileOutputStream(destFile), encoding));", "-                }", "-", "-                if (filterChainsAvailable) {", "-                    ChainReaderHelper crh = new ChainReaderHelper();", "-                    crh.setBufferSize(8192);", "-                    crh.setPrimaryReader(in);", "-                    crh.setFilterChains(filterChains);", "-                    crh.setProject(project);", "-                    Reader rdr = crh.getAssembledReader();", "-                    in = new BufferedReader(rdr);", "-                }", "-", "-                int length;", "-                String newline = null;", "-                String line = in.readLine();", "-                while (line != null) {", "-                    if (line.length() == 0) {", "-                        out.newLine();", "+                try {", "+                    if (encoding == null) {", "+                        in = new BufferedReader(new FileReader(sourceFile));", "+                        out = new BufferedWriter(new FileWriter(destFile));", "-                        if (filterSetsAvailable) {", "-                            newline = filters.replaceTokens(line);", "-                        } else {", "-                            newline = line;", "-                        }", "-                        out.write(newline);", "-                        out.newLine();", "+                        in = ", "+                            new BufferedReader(new InputStreamReader(", "+                                                 new FileInputStream(sourceFile), ", "+                                                 encoding));", "+                        out = ", "+                            new BufferedWriter(new OutputStreamWriter(", "+                                                 new FileOutputStream(destFile), ", "+                                                 encoding));", "-                    line = in.readLine();", "+", "+                    if (filterChainsAvailable) {", "+                        ChainReaderHelper crh = new ChainReaderHelper();", "+                        crh.setBufferSize(8192);", "+                        crh.setPrimaryReader(in);", "+                        crh.setFilterChains(filterChains);", "+                        crh.setProject(project);", "+                        Reader rdr = crh.getAssembledReader();", "+                        in = new BufferedReader(rdr);", "+                    }", "+                    ", "+                    int length;", "+                    String newline = null;", "+                    String line = in.readLine();", "+                    while (line != null) {", "+                        if (line.length() == 0) {", "+                            out.newLine();", "+                        } else {", "+                            if (filterSetsAvailable) {", "+                                newline = filters.replaceTokens(line);", "+                            } else {", "+                                newline = line;", "+                            }", "+                            out.write(newline);", "+                            out.newLine();", "+                        }", "+                        line = in.readLine();", "+                    }", "+                } finally {", "+                    if (out != null) {", "+                        out.close();", "+                    }", "+                    if (in != null) {", "+                        in.close();", "+                    }", "-", "-                out.close();", "-                in.close();", "-                FileInputStream in = new FileInputStream(sourceFile);", "-                FileOutputStream out = new FileOutputStream(destFile);", "+                FileInputStream in = null;", "+                FileOutputStream out = null;", "+                try {", "+                    in = new FileInputStream(sourceFile);", "+                    out = new FileOutputStream(destFile);", "-                byte[] buffer = new byte[8 * 1024];", "-                int count = 0;", "-                do {", "-                    out.write(buffer, 0, count);", "-                    count = in.read(buffer, 0, buffer.length);", "-                } while (count != -1);", "-", "-                in.close();", "-                out.close();", "+                    byte[] buffer = new byte[8 * 1024];", "+                    int count = 0;", "+                    do {", "+                        out.write(buffer, 0, count);", "+                        count = in.read(buffer, 0, buffer.length);", "+                    } while (count != -1);", "+                } finally {", "+                    if (out != null) {", "+                        out.close();", "+                    }", "+                    if (in != null) {", "+                        in.close();", "+                    }", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e849943b0b08a9697c85a85f4a2446a9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "76248d54a131e0eafa34a739f1814ff3e6ae4304", "commitAfterChange": "7ac63c0bc264d9192d38abf2c1f2302c8fdee8f6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["+", "-        if (baseDir == null) {", "-            throw new BuildException(\"basedir attribute must be set!\");", "-        }", "-        if (!baseDir.exists()) {", "-            throw new BuildException(\"basedir does not exist!\");", "-        }", "+        if (baseDir == null && filesets.size() == 0)", "+            throw new BuildException(\"basedir attribute must be set, or at least one fileset must be given!\");", "-        DirectoryScanner ds = super.getDirectoryScanner(baseDir);", "-", "-        String[] files = ds.getIncludedFiles();", "-        String[] dirs  = ds.getIncludedDirectories();", "+        Vector dss = new Vector ();", "+        if (baseDir != null)", "+            dss.addElement(getDirectoryScanner(baseDir));", "+        for (int i=0; i<filesets.size(); i++) {", "+            Object o = filesets.elementAt(i);", "+            FileSet fs;", "+            if (o instanceof FileSet) {", "+                fs = (FileSet) o;", "+            } else {", "+                Reference r = (Reference) o;", "+                o = r.getReferencedObject(project);", "+                if (o instanceof FileSet) {", "+                    fs = (FileSet) o;", "+                } else {", "+                    throw new BuildException(r.getRefId() + \" does not denote a fileset\", location);", "+                }", "+            }", "+            dss.addElement (fs.getDirectoryScanner(project));", "+        }", "+        FileScanner[] scanners = new FileScanner[dss.size()];", "+        dss.copyInto(scanners);", "-        boolean upToDate = true;", "-        for (int i=0; i<files.length && upToDate; i++)", "-            if (new File(baseDir,files[i]).lastModified() > ", "-                zipFile.lastModified())", "-                upToDate = false;", "-        if (upToDate) return;", "+        // can also handle empty archives", "+        if (isUpToDate(scanners, zipFile)) return;", "-        ZipOutputStream zOut = null;", "-        try {", "-            zOut = new ZipOutputStream(new FileOutputStream(zipFile));", "-            if (doCompress) {", "-                zOut.setMethod(ZipOutputStream.DEFLATED);", "-            } else {", "-                zOut.setMethod(ZipOutputStream.STORED);", "-            }", "-            initZipOutputStream(zOut);", "+\ttry {", "+\t    ZipOutputStream zOut = new ZipOutputStream(new FileOutputStream(zipFile));", "+\t    try {", "+\t\tif (doCompress) {", "+\t\t    zOut.setMethod(ZipOutputStream.DEFLATED);", "+\t\t} else {", "+\t\t    zOut.setMethod(ZipOutputStream.STORED);", "+\t\t}", "+\t\tinitZipOutputStream(zOut);", "-            for (int i = 0; i < dirs.length; i++) {", "-                File f = new File(baseDir,dirs[i]);", "-                String name = dirs[i].replace(File.separatorChar,'/')+\"/\";", "-                zipDir(f, zOut, name);", "-            }", "+                // XXX ideally would also enter includedDirectories to the archive", "+\t\tHashtable parentDirs = new Hashtable();", "-            for (int i = 0; i < files.length; i++) {", "-                File f = new File(baseDir,files[i]);", "-                String name = files[i].replace(File.separatorChar,'/');", "-                zipFile(f, zOut, name);", "-            }", "-        } catch (IOException ioe) {", "-            String msg = \"Problem creating \" + archiveType + \" \" + ioe.getMessage();", "+                for (int j = 0; j < scanners.length; j++) {", "+                    String[] files = scanners[j].getIncludedFiles();", "+                    File thisBaseDir = scanners[j].getBasedir();", "+                    for (int i = 0; i < files.length; i++) {", "+                        File f = new File(thisBaseDir,files[i]);", "+                        String name = files[i].replace(File.separatorChar,'/');", "+                        // Look for & create parent dirs as needed.", "+                        int slashPos = -1;", "+                        while ((slashPos = name.indexOf((int)'/', slashPos + 1)) != -1) {", "+                            String dir = name.substring(0, slashPos);", "+                            if (!parentDirs.contains(dir)) {", "+                                parentDirs.put(dir, dir);", "+                                zipDir(new File(thisBaseDir, dir.replace('/', File.separatorChar)),", "+                                       zOut, dir + '/');", "+                            }", "+                        }", "+                        zipFile(f, zOut, name);", "+                    }", "+                }", "+\t    } finally {", "+\t\tzOut.close ();", "+\t    }", "+\t} catch (IOException ioe) {", "+\t    String msg = \"Problem creating \" + archiveType + \": \" + ioe.getMessage();", "-\t    if (zOut != null) {", "-\t        try {", "-\t            zOut.close();", "-                    zOut = null;", "-\t        } catch (IOException e) {}", "-                if (!zipFile.delete()) {", "-                    msg = zipFile + \" is probably corrupt but I could not delete it\";", "-                }", "-            }", "+\t    if (!zipFile.delete()) {", "+\t\tmsg += \" (and the archive is probably corrupt but I could not delete it)\";", "+\t    }", "-\t} finally {", "-\t    if (zOut != null) {", "-\t        try {", "-                    // close up", "-\t            zOut.close();", "-\t        }", "-\t        catch (IOException e) {}", "-\t    }"]}]}
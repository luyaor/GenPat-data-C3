{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "51f349c0223687efeaa692c3e66a2f9f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48331983ada5e7f6e9c161c2c5ae84ef", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/unix/Symlink.java", "commitBeforeChange": "1225a5a849faa66e73a1262180dd002332b162b0", "commitAfterChange": "90a6d8155086ee0d0a1911584a56eb7b33fb3d0f", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 19, "signatureBeforeChange": "      private Vector findLinks(Vector fileSets)", "signatureAfterChange": "     private HashSet findLinks(Vector v)", "diff": ["-", "-    private Vector findLinks(Vector fileSets) {", "-        Vector result = new Vector();", "-", "-        // loop through the supplied file sets:", "-        FSLoop: for (int i = 0; i < fileSets.size(); i++) {", "-            FileSet fsTemp = (FileSet) fileSets.elementAt(i);", "-            String workingDir = null;", "-            Vector links = new Vector();", "-            Vector linksFiles = new Vector();", "-            Enumeration enumLinks;", "-", "-            DirectoryScanner ds;", "-", "-            File tmpfil = null;", "-            try {", "-                tmpfil = fsTemp.getDir(this.getProject());", "-                workingDir = tmpfil.getCanonicalPath();", "-            } catch (IOException ioe) {", "-                handleError(\"Exception caught getting \"", "-                            + \"canonical path of working dir \" + tmpfil", "-                            + \" in a FileSet passed to the symlink \"", "-                            + \"task. Further processing of this \"", "-                            + \"fileset skipped\");", "-                continue FSLoop;", "-            }", "-            // Get a vector of String with file names that match the pattern:", "-            ds = fsTemp.getDirectoryScanner(this.getProject());", "-            links = scanDirsAndFiles(ds);", "-", "-            // Now convert the strings to File Objects", "-            // using the canonical version of the working dir:", "-            enumLinks = links.elements();", "-", "-            while (enumLinks.hasMoreElements()) {", "-                linksFiles.addElement(new File(workingDir", "-                                               + File.separator", "-                                               + (String) enumLinks", "-                                               .nextElement()));", "-            }", "-            // Now loop through and remove the non-links:", "-", "-            enumLinks = linksFiles.elements();", "-", "-            File parentNext, next;", "-            String nameParentNext;", "-            Vector removals = new Vector();", "-            while (enumLinks.hasMoreElements()) {", "-                next = (File) enumLinks.nextElement();", "-                nameParentNext = next.getParent();", "-", "-                parentNext = new File(nameParentNext);", "-                try {", "-                    if (!FILE_UTILS.isSymbolicLink(parentNext, next.getName())) {", "-                        removals.addElement(next);", "+    private HashSet findLinks(Vector v) {", "+        HashSet result = new HashSet();", "+        for (int i = 0; i < v.size(); i++) {", "+            FileSet fs = (FileSet) v.get(i);", "+            DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "+            String[][] fnd = new String[][]", "+                {ds.getIncludedFiles(), ds.getIncludedDirectories()};", "+            File dir = fs.getDir(getProject());", "+            for (int j = 0; j < fnd.length; j++) {", "+                for (int k = 0; k < fnd[j].length; k++) {", "+                    try {", "+                        File f = new File(dir, fnd[j][k]);", "+                        File pf = f.getParentFile();", "+                        String name = f.getName();", "+                        if (FILE_UTILS.isSymbolicLink(pf, name)) {", "+                            result.add(new File(pf.getCanonicalFile(), name));", "+                        }", "+                    } catch (IOException e) {", "+                        handleError(\"IOException: \" + fnd[j][k] + \" omitted\");", "-                } catch (IOException ioe) {", "-                    handleError(\"Failed checking \" + next", "-                                + \" for symbolic link. FileSet skipped.\");", "-                    continue FSLoop;", "-                    // Otherwise this file will be falsely recorded as a link,", "-                    // if failonerror = false, hence the warn and skip.", "-            enumLinks = removals.elements();", "-", "-            while (enumLinks.hasMoreElements()) {", "-                linksFiles.removeElement(enumLinks.nextElement());", "-            }", "-            // Now we have what we want so add it to results, ensuring that", "-            // no link is returned twice and we have a canonical reference", "-            // to the link. (no symlinks in the parent dir)", "-", "-            enumLinks = linksFiles.elements();", "-            while (enumLinks.hasMoreElements()) {", "-                File temp, parent;", "-                next = (File) enumLinks.nextElement();", "-                try {", "-                    parent = new File(next.getParent());", "-                    parent = new File(parent.getCanonicalPath());", "-                    temp = new File(parent, next.getName());", "-                    if (!result.contains(temp)) {", "-                        result.addElement(temp);", "-                    }", "-                } catch (IOException ioe) {", "-                    handleError(\"IOException: \" + next + \" omitted\");", "-                }", "-            }", "-            // Note that these links are now specified with a full", "-            // canonical path irrespective of the working dir of the", "-            // file set so it is ok to mix them in the same vector."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfac148a534c814c62157a855c1acc87", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "9bab4dab1ab3b86354929a1929906fe471d9fa93", "commitAfterChange": "e47b4d5aca65c519f01afabb9479b8443abd2ccf", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 19, "signatureBeforeChange": "       protected Process exec() throws IOException", "signatureAfterChange": "         public Process exec(Project project, String[] cmd, String[] env, File workingDir) throws IOException", "diff": ["-", "-    protected Process exec() throws IOException {", "-\tif (workingDirectory == null) {", "-\t    // Easy.", "-\t    return Runtime.getRuntime().exec(cmdl, getEnvironment());", "-\t} else if (execWithCWD != null) {", "-\t    // The best way to set cwd, if you have JDK 1.3.", "-\t    try {", "-\t\tObject[] arguments = new Object[] {getCommandline(), getEnvironment(), workingDirectory};", "-\t\treturn (Process)execWithCWD.invoke(Runtime.getRuntime(), arguments);", "-            } catch (InvocationTargetException ite) {", "-                Throwable t = ite.getTargetException();", "-                if (t instanceof ThreadDeath) {", "-                    throw (ThreadDeath)t;", "-                } else if (t instanceof IOException) {", "-                    throw (IOException)t;", "-                } else {", "-                    throw new IOException(t.toString());", "-                }", "-\t    } catch (Exception e) {", "-\t\t// IllegalAccess, IllegalArgument, ClassCast", "-\t\tthrow new IOException(e.toString());", "-\t    }", "-\t} else if (myos.equals(\"Mac OS\")) {", "-\t    // Dubious Mac hack.", "-\t    System.getProperties().put(\"user.dir\", ", "-\t\t\t\t       workingDirectory.getAbsolutePath());", "-\t    try {", "-\t\treturn Runtime.getRuntime().exec(cmdl, getEnvironment());", "-\t    } finally {", "-                System.getProperties().put(\"user.dir\", antWorkingDirectory);", "-\t    }", "-\t} else if ((myos.toLowerCase().indexOf(\"windows\") >= 0 &&", "-                       (myos.toLowerCase().indexOf(\"nt\") >= 0 ||", "-                        myos.indexOf(\"2000\") >= 0))", "-                      // cmd /c cd works OK on Windows NT & friends.", "-                   || myos.toLowerCase().indexOf(\"os/2\") >= 0", "-                      // as well as on OS/2", "-                   ) {", "-\t    String[] commandLine = new String[cmdl.length+5];", "-\t    commandLine[0] = \"cmd\";", "-\t    commandLine[1] = \"/c\";", "-\t    commandLine[2] = \"cd\";", "-\t    commandLine[3] = workingDirectory.getAbsolutePath();", "-\t    commandLine[4] = \"&&\";", "-\t    System.arraycopy(cmdl, 0, commandLine, 5, cmdl.length);", "-\t    return Runtime.getRuntime().exec(commandLine, getEnvironment());", "-\t} else {", "-\t    // Fallback to the antRun wrapper script (POSIX, Win95/98, etc.):", "-\t    String[] commandLine = new String[cmdl.length+2];", "-\t    commandLine[0] = antRun;", "-\t    commandLine[1] = workingDirectory.getAbsolutePath();", "-\t    System.arraycopy(cmdl, 0, commandLine, 2, cmdl.length);", "-\t    return Runtime.getRuntime().exec(commandLine, getEnvironment());", "-\t}", "-    }", "+         */", "+        public Process exec(Project project, String[] cmd, String[] env, File workingDir) throws IOException", "+        {", "+ \t    try {", "+\t\tObject[] arguments = { cmd, env, workingDir };", "+\t\treturn (Process)_execWithCWD.invoke(Runtime.getRuntime(), arguments);", "+            } ", "+            catch ( InvocationTargetException exc ) {", "+                Throwable realexc = exc.getTargetException();", "+                if ( realexc instanceof ThreadDeath ) {", "+                    throw (ThreadDeath)realexc;", "+                } ", "+                else if ( realexc instanceof IOException ) {", "+                    throw (IOException)realexc;", "+                } ", "+                else {", "+                    throw new IOException(realexc.getMessage());", "+                }", "+\t    } ", "+            catch ( Exception exc ) {", "+\t\t// IllegalAccess, IllegalArgument, ClassCast", "+\t\tthrow new IOException(exc.getMessage());", "+\t    }", "+        }"]}]}
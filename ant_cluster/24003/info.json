{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c0bba3fa069a00ea603610d7cee68c56", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c4c0464f2e327894439edd803988a6e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "6309813d01620379a35da64c12c4de488efedc2d", "commitAfterChange": "4ab1950bd8ba0bf2335e09b07852d74e1b016f5a", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 27, "signatureBeforeChange": "      protected void zipFile(InputStream in, ZipOutputStream zOut, String vPath,                            long lastModified)         throws IOException", "signatureAfterChange": "      protected void zipFile(InputStream in, ZipOutputStream zOut, String vPath,                            long lastModified, File file)         throws IOException", "diff": ["-                           long lastModified)", "+                           long lastModified, File file)", "+        if (entries.contains(vPath)) {", "+", "+            if (duplicate.equals(\"preserve\"))", "+            {", "+                log(vPath + \" already added, skipping\", Project.MSG_INFO);", "+                return;", "+            }", "+            else if (duplicate.equals(\"fail\"))", "+            {", "+                throw new BuildException(\"Duplicate file \" + vPath + \" was found and the duplicate attribute is 'fail'.\");", "+            }", "+            else", "+            {", "+                // duplicate equal to add, so we continue", "+                log(\"duplicate file \" + vPath + \" found, adding.\", Project.MSG_VERBOSE);", "+            }", "+        }", "+        else", "+        {", "+            log(\"adding entry \" + vPath, Project.MSG_VERBOSE);", "+        }", "+", "+        entries.put(vPath, vPath);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d108db25b1eb1d42a8eaaa6f4491e31", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Tar.java", "commitBeforeChange": "ed654080ab790e351e7d0e43b3e5638541421a6e", "commitAfterChange": "867ec77b0d9efa8819be2ebf82cace4600b929ee", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      protected void tarFile(File file, TarOutputStream tOut, String vPath,                            TarFileSet tarFileSet)         throws IOException", "signatureAfterChange": "      protected void tarFile(File file, TarOutputStream tOut, String vPath,                            TarFileSet tarFileSet)         throws IOException", "diff": ["+            if (vPath.length() >= TarConstants.NAMELEN) {", "+                if (longFileMode.equalsIgnoreCase(TRUNCATE)) {", "+                    log(\"Skipping: \"+ vPath, Project.MSG_INFO);", "+                    return;", "+                } else if (longFileMode.equalsIgnoreCase(WARN)) {", "+                    log(\"Entry: \"+ vPath + \" longer than \" + ", "+                        TarConstants.NAMELEN + \" characters.\", Project.MSG_WARN);", "+                    log(\"Resulting tar file can only be processed successfully\"", "+                        + \" by GNU compatible tar commands\", Project.MSG_WARN);", "+                } else if (longFileMode.equalsIgnoreCase(FAIL)) {", "+                    throw new BuildException(", "+                        \"Entry: \"+ vPath + \" longer than \" + ", "+                        TarConstants.NAMELEN + \"characters.\", location);", "+                }", "+            }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f80df4f6e9846e8da87e83a6bfad86a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/tar/TarOutputStream.java", "commitBeforeChange": "51516f38d58c48f261be98eedf80bf52fafd236b", "commitAfterChange": "6ff2c8367d444eefd444295b032a36805baa617d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void putNextEntry(TarEntry entry) throws IOException", "signatureAfterChange": "     public void putNextEntry(TarEntry entry) throws IOException", "diff": ["+        if (entry.getName().length() > TarConstants.NAMELEN) {", "+", "+            if (longFileMode == LONGFILE_GNU) {", "+                // create a TarEntry for the LongLink, the contents", "+                // of which are the entry's name ", "+                TarEntry longLinkEntry = new TarEntry(TarConstants.GNU_LONGLINK,", "+                                                      TarConstants.LF_GNUTYPE_LONGNAME);", "+                 ", "+                longLinkEntry.setSize(entry.getName().length() + 1);", "+                putNextEntry(longLinkEntry);                                                    ", "+                write(entry.getName().getBytes());", "+                write(0);", "+                closeEntry();", "+            }", "+            else if (longFileMode != LONGFILE_TRUNCATE) {", "+                throw new RuntimeException(\"file name '\" + entry.getName() ", "+                                             + \"' is too long ( > \" ", "+                                             + TarConstants.NAMELEN + \" bytes)\");", "+            }", "+        } ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f88e09b8b2ed5976fa3b95eface7321b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java", "commitBeforeChange": "fca57f83a2f6e6194cf2e223068f7f3bb714a676", "commitAfterChange": "8a21be498479cb838b88fc0f77547e82ed1c5334", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private void buildWeblogicJar(File sourceJar, File destJar)", "signatureAfterChange": "     private void buildWeblogicJar(File sourceJar, File destJar, String publicId)", "diff": ["-    private void buildWeblogicJar(File sourceJar, File destJar) {", "+    private void buildWeblogicJar(File sourceJar, File destJar, String publicId) {", "+        ", "+        String ejbcClassName = ejbcClass;", "-            javaTask.setClassname(\"weblogic.ejbc\");", "+            if (ejbcClassName == null) {", "+                // try to determine it from publicId", "+                if (PUBLICID_EJB11.equals(publicId)) {", "+                    ejbcClassName = COMPILER_EJB11;", "+                }", "+                else if (PUBLICID_EJB20.equals(publicId)) {", "+                    ejbcClassName = COMPILER_EJB20;", "+                }", "+                else {", "+                    log(\"Unrecognized publicId \" + publicId + \" - using EJB 1.1 compiler\", Project.MSG_WARN);", "+                    ejbcClassName = COMPILER_EJB11;", "+                }", "+            }", "+                 ", "+            javaTask.setClassname(ejbcClassName);", "-            log(\"Calling weblogic.ejbc for \" + sourceJar.toString(),", "+            log(\"Calling \" + ejbcClassName + \" for \" + sourceJar.toString(),", "-            String msg = \"Exception while calling ejbc. Details: \" + e.toString();", "+            String msg = \"Exception while calling \" + ejbcClassName + \". Details: \" + e.toString();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ac0fcd5a9f2adc1f26c054e306e0d40", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1de2287edd4a46710154a21a7126e435", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ComponentManager.java", "commitBeforeChange": "74565feb5380d1b180234375abe807ca302bb2cd", "commitAfterChange": "689db09b317b91287cf3a8569bbf0ef8f8137522", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "     protected Object createComponent(String componentName, BuildElement model)          throws ExecutionException", "signatureAfterChange": "     protected Object createComponent(String componentName, BuildElement model)          throws ExecutionException", "diff": ["+        Location location = Location.UNKNOWN_LOCATION;", "+        if (model != null) {", "+            location = model.getLocation();", "+        }", "-                + componentName + \"> component\");", "+                 + componentName + \"> component\");", "-            ", "+", "+        boolean isTask = definition.getDefinitionType() == AntLibrary.TASKDEF;", "-            Location location = Location.UNKNOWN_LOCATION;", "-            if (model != null) {", "-                location = model.getLocation();", "-            }", "-", "-            Object component", "-                 = libFactory.createComponent(componentClass, localName);", "-", "-            ExecutionComponent execComponent = null;", "-            if (definition.getDefinitionType() == AntLibrary.TASKDEF) {", "-                if (component instanceof Task) {", "-                    execComponent = (Task)component;", "-                } else {", "-                    execComponent = new TaskAdapter(componentName, component);", "-                }", "-            } else if (component instanceof ExecutionComponent) {", "-                execComponent = (ExecutionComponent)component;", "-            }", "-", "-            ExecutionContext context", "-                 = new ExecutionContext(frame, execComponent, location);", "-            context.setClassLoader(componentLoader);", "-            ClassLoader currentLoader", "-                 = LoaderUtils.setContextLoader(componentLoader);", "-            if (execComponent != null) {", "-                execComponent.init(context, componentName);", "-            }", "-            if (model != null) {", "-                configureElement(libFactory, component, model);", "-                if (execComponent != null) {", "-                    execComponent.validateComponent();", "-                }", "-            }", "-            LoaderUtils.setContextLoader(currentLoader);", "-            if (execComponent != null) {", "-                return execComponent;", "-            }", "-", "-            return component;", "+            return createComponent(componentLoader, libFactory, componentClass,", "+                componentName, localName, isTask, model);", "-                model.getLocation());", "+                location);", "-                e, model.getLocation());", "-        } catch (InstantiationException e) {", "-            throw new ExecutionException(\"Unable to instantiate component \"", "-                 + \"class \" + className + \" for component <\" + componentName", "-                 + \">\", e, model.getLocation());", "-        } catch (IllegalAccessException e) {", "-            throw new ExecutionException(\"Unable to access task class \"", "-                 + className + \" for component <\" + componentName + \">\",", "-                e, model.getLocation());", "+                e, location);", "-        } catch (RuntimeException e) {", "-            throw new ExecutionException(e.getClass().getName() + \": \"", "-                 + e.getMessage(), e, model.getLocation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72c4aa3e2c288b55bcd569f31e9b8ff9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ComponentManager.java", "commitBeforeChange": "26d9c6536e7e605b92a6e4b20eb0cd25e116a689", "commitAfterChange": "f19f07d6e4c72f241057ecfc32d80be21201bbf7", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private Object createComponentFromDef(String componentName,                                           ComponentLibrary componentLibrary,                                           AntLibDefinition libDefinition,                                           BuildElement model)          throws AntException", "signatureAfterChange": "     private Object createComponentFromDef(String componentName,                                           ComponentLibrary componentLibrary,                                           AntLibDefinition libDefinition,                                           BuildElement model)          throws AntException", "diff": ["-        if (model != null) {", "-            location = model.getLocation();", "-        }", "-", "-        boolean isTask", "-             = libDefinition.getDefinitionType() == AntLibrary.TASKDEF;", "-        String localName = libDefinition.getDefinitionName();", "-        String className = libDefinition.getClassName();", "+        String className = null;", "-            ClassLoader componentLoader = componentLibrary.getClassLoader();", "-            Class componentClass", "-                 = Class.forName(className, true, componentLoader);", "+            boolean isTask", "+                 = libDefinition.getDefinitionType() == AntLibrary.TASKDEF;", "+", "+", "+            Object component = null;", "+            if (model != null) {", "+                location = model.getLocation();", "+                for (Iterator i = aspects.iterator(); i.hasNext();) {", "+                    Aspect aspect = (Aspect) i.next();", "+                    component = aspect.preCreateComponent(component, model);", "+                }", "+            }", "+", "-            // create the component using the factory", "-            Object component", "-                 = libFactory.createComponent(componentClass, localName);", "+            ClassLoader componentLoader = null;", "+            if (component == null) {", "+                String localName = libDefinition.getDefinitionName();", "+                className = libDefinition.getClassName();", "+                componentLoader = componentLibrary.getClassLoader();", "+                Class componentClass", "+                    = Class.forName(className, true, componentLoader);", "+                // create the component using the factory", "+                component", "+                    = libFactory.createComponent(componentClass, localName);", "+            } else {", "+                className = component.getClass().getName();", "+                componentLoader = component.getClass().getClassLoader();", "+            }", "-                ExecutionContext context", "-                     = new ExecutionContext(frame, execComponent, model);", "-                context.setClassLoader(componentLoader);", "-                execComponent.init(context, componentName);", "+                // give it a context unless it already has one", "+                if (execComponent.getAntContext() == null) {", "+                    ExecutionContext context", "+                         = new ExecutionContext(frame, execComponent, model);", "+                    context.setClassLoader(componentLoader);", "+                    execComponent.init(context, componentName);", "+                }", "+                for (Iterator i = aspects.iterator(); i.hasNext();) {", "+                    Aspect aspect = (Aspect) i.next();", "+                    component = aspect.postCreateComponent(component, model);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e657cf22305e9d31fc002238683ba1f5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ComponentManager.java", "commitBeforeChange": "69d9b9a49622889f44d6792faf00f886857828d6", "commitAfterChange": "fcc7e2b47f01468c83803caa09ce8266e56f213c", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private Object createComponent(ClassLoader loader, AntLibFactory factory,                                    Class componentClass, String componentName,                                    String localName, boolean addTaskAdapter,                                    BuildElement model)          throws ExecutionException", "signatureAfterChange": "     public void configureAttributes(Object object, Map attributeValues)          throws ExecutionException", "diff": ["-     */", "-    private Object createComponent(ClassLoader loader, AntLibFactory factory,", "-                                   Class componentClass, String componentName,", "-                                   String localName, boolean addTaskAdapter,", "-                                   BuildElement model)", "-         throws ExecutionException {", "-        // set the location to unknown unless we have a build model to use", "-        Location location = Location.UNKNOWN_LOCATION;", "-        if (model != null) {", "-            location = model.getLocation();", "-        }", "-", "-        try {", "-            // create the component using the factory", "-            Object component", "-                 = factory.createComponent(componentClass, localName);", "-", "-            // wrap the component in an adapter if required.", "-            ExecutionComponent execComponent = null;", "-            if (addTaskAdapter) {", "-                if (component instanceof Task) {", "-                    execComponent = (Task) component;", "-                } else {", "-                    execComponent = new TaskAdapter(componentName, component);", "-                }", "-            } else if (component instanceof ExecutionComponent) {", "-                execComponent = (ExecutionComponent) component;", "-            }", "-", "-            // set the context loader to that for the component", "-            ClassLoader currentLoader", "-                 = LoaderUtils.setContextLoader(loader);", "-", "-            // if the component is an execution component create a context and", "-            // initialise the component with it.", "-            if (execComponent != null) {", "-                ExecutionContext context", "-                     = new ExecutionContext(frame, execComponent, location);", "-                context.setClassLoader(loader);", "-                execComponent.init(context, componentName);", "-            }", "-", "-            // if we have a model, use it to configure the component. Otherwise", "-            // the caller is expected to configure thre object", "-            if (model != null) {", "-                configureElement(factory, component, model);", "-                // if the component is an execution component and we have a", "-                // model, validate it", "-                if (execComponent != null) {", "-                    execComponent.validateComponent();", "-                }", "-            }", "-", "-            // reset the loader", "-            LoaderUtils.setContextLoader(currentLoader);", "-", "-            // if we have an execution component, potentially a wrapper,", "-            // return it otherwise the component directly", "-            if (execComponent != null) {", "-                return execComponent;", "-            } else {", "-                return component;", "-            }", "-        } catch (InstantiationException e) {", "-            throw new ExecutionException(\"Unable to instantiate component \"", "-                 + \"class \" + componentClass.getName() + \" for component <\"", "-                 + componentName + \">\", e, location);", "-        } catch (IllegalAccessException e) {", "-            throw new ExecutionException(\"Unable to access task class \"", "-                 + componentClass.getName() + \" for component <\"", "-                 + componentName + \">\", e, location);", "-        } catch (ExecutionException e) {", "-            e.setLocation(location, false);", "-            throw e;", "-        } catch (RuntimeException e) {", "-            throw new ExecutionException(e, location);", "-        }", "-    }", "+     */", "+    public void configureAttributes(Object object, Map attributeValues)", "+         throws ExecutionException {", "+        Setter setter = getSetter(object.getClass());", "+        for (Iterator i = attributeValues.keySet().iterator(); i.hasNext();) {", "+            String attributeName = (String) i.next();", "+            String attributeValue = (String) attributeValues.get(attributeName);", "+            if (!setter.supportsAttribute(attributeName)) {", "+                throw new ExecutionException(object.getClass().getName()", "+                     + \" does not support the \\\"\" + attributeName", "+                     + \"\\\" attribute\");", "+            }", "+            setter.setAttribute(object, attributeName,", "+                frame.replacePropertyRefs(attributeValue));", "+        }", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "65384306c60f64acb5bde7fb2872b34b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06eaecdc71fa05410ba12b88b660321f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/antlib/src/main/org/apache/tools/ant/types/DataTypeAdapterTask.java", "commitBeforeChange": "8dfa7abd4d64b0cbef6166a28440f39f46d6efd1", "commitAfterChange": "fac77e5b28d862a0ac0278c078c72f169859a23a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-\tif (id != null) {", "-\t    // Need to re-register this reference", "-\t    // The container has register the Adapter instead", "-            project.addReference(id, proxy);\t    ", "-\t}", "-    }", "+\t    ((ProjectComponent)proxy).setProject(project);", "+\t// We are trying to set project even it is was not declared", "+                setProjectM.invoke(proxy, new Object[] {project});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fa72505177634e3f6052d4c0a699ccf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/email/PlainMailer.java", "commitBeforeChange": "b1b76c9c72c63ad046f952916e61b6aa8c1fea94", "commitAfterChange": "1be216b5d5ba9365d09b12c64ad31cd3cc7d5cdd", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void send()", "signatureAfterChange": "     public void send()", "diff": ["+            boolean atLeastOneRcptReached = false;", "-                mailMessage.to(e.nextElement().toString());", "+                String to = e.nextElement().toString();", "+                try {", "+                    mailMessage.to(to);", "+                    atLeastOneRcptReached = true;", "+                } catch (IOException ex) {", "+                    badRecipient(to, ex);", "+                }", "-                mailMessage.cc(e.nextElement().toString());", "+                String to = e.nextElement().toString();", "+                try {", "+                    mailMessage.cc(to);", "+                    atLeastOneRcptReached = true;", "+                } catch (IOException ex) {", "+                    badRecipient(to, ex);", "+                }", "-                mailMessage.bcc(e.nextElement().toString());", "+                String to = e.nextElement().toString();", "+                try {", "+                    mailMessage.bcc(to);", "+                    atLeastOneRcptReached = true;", "+                } catch (IOException ex) {", "+                    badRecipient(to, ex);", "+                }", "+            }", "+            if (!atLeastOneRcptReached) {", "+                throw new BuildException(\"Couldn't reach any recipient\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fed1e88fe5c9d625ef64447fc303b41e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/FormatterElement.java", "commitBeforeChange": "5026f31269c0cf1f709aa6ee9dc775f0e7b74747", "commitAfterChange": "4369f6482672e451edd830277d0f64fcc9c7d10b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "     JUnitTaskMirror.JUnitResultFormatterMirror createFormatter(ClassLoader loader)             throws BuildException", "signatureAfterChange": "     JUnitTaskMirror.JUnitResultFormatterMirror createFormatter(ClassLoader loader)             throws BuildException", "diff": ["-", "+        ", "-", "+        ", "+        ", "+", "+        boolean needToSetProjectReference = true;", "+        try {", "+            Field field = r.getClass().getField(\"project\");", "+            Object value = field.get(r);", "+            if (value instanceof Project) {", "+                // there is already a project reference so dont overwrite this", "+                needToSetProjectReference = false;", "+            }", "+        } catch (Exception e) {", "+            // no field present, so no previous reference exists", "+        }", "+        ", "+        if (needToSetProjectReference) {", "+            Method setter;", "+            try {", "+                setter = r.getClass().getMethod(\"setProject\", new Class[] { Project.class });", "+                setter.invoke(r, new Object[] { project });", "+            } catch (Exception e) {", "+                // no setProject to invoke; just ignore", "+            }", "+        }", "+        "]}]}
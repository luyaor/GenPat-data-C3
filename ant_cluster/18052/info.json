{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "321bcce9c4975588e849cc9112367e2b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07175171fa988cf1c16b3f50308bd570", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/framework/exec/Environment.java", "commitBeforeChange": "4c36f7cb5aca402d90ea046454939860ba5457e8", "commitAfterChange": "4a9c6d79bc91a3a35d222c8f037830feb7de0cfe", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private static String getEnvironmentText()         throws IOException, TaskException", "signatureAfterChange": "     private static String getEnvironmentText()         throws IOException, ExecException", "diff": ["-        throws IOException, TaskException", "+        throws IOException, ExecException", "-        final int retval = exe.execute();", "-        if( retval != 0 )", "+        try", "-            // Just try to use what we got", "+            final int retval = exe.execute();", "+            if( retval != 0 )", "+            {", "+                // Just try to use what we got", "+            }", "+        }", "+        catch( final TaskException te )", "+        {", "+            throw new ExecException( te.getMessage(), te );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1785fd51bd98c7e89379aa2c696cccbd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/exec/Execute.java", "commitBeforeChange": "4c36f7cb5aca402d90ea046454939860ba5457e8", "commitAfterChange": "4a9c6d79bc91a3a35d222c8f037830feb7de0cfe", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public int execute()         throws IOException, TaskException", "signatureAfterChange": "     public int execute()         throws IOException, TaskException", "diff": ["-        final ExecMetaData metaData =", "-            new ExecMetaData( m_command, getNativeEnvironment(),", "-                              m_workingDirectory, false );", "-", "-        final CommandLauncher launcher = getLauncher();", "-        final Process process = launcher.exec( metaData );", "-", "-            m_streamHandler.setProcessInputStream( process.getOutputStream() );", "-            m_streamHandler.setProcessOutputStream( process.getInputStream() );", "-            m_streamHandler.setProcessErrorStream( process.getErrorStream() );", "-        }", "-        catch( final IOException ioe )", "-        {", "-            process.destroy();", "-            throw ioe;", "-        }", "+            final ExecMetaData metaData =", "+                new ExecMetaData( m_command, getNativeEnvironment(),", "+                                  m_workingDirectory, false );", "-        m_streamHandler.start();", "+            final CommandLauncher launcher = getLauncher();", "+            final Process process = launcher.exec( metaData );", "-        // add the process to the list of those to destroy if the VM exits", "-        //", "-        c_processDestroyer.add( process );", "+            try", "+            {", "+                m_streamHandler.setProcessInputStream( process.getOutputStream() );", "+                m_streamHandler.setProcessOutputStream( process.getInputStream() );", "+                m_streamHandler.setProcessErrorStream( process.getErrorStream() );", "+            }", "+            catch( final IOException ioe )", "+            {", "+                process.destroy();", "+                throw ioe;", "+            }", "-        if( m_watchdog != null )", "-        {", "-            m_watchdog.start( process );", "-        }", "-        try", "-        {", "-            process.waitFor();", "-        }", "-        catch( final InterruptedException ie )", "-        {", "-            //shu\\ould never happen", "-        }", "+            m_streamHandler.start();", "-        // remove the process to the list of those to destroy if the VM exits", "-        //", "-        c_processDestroyer.remove( process );", "+            // add the process to the list of those to destroy if the VM exits", "+            //", "+            c_processDestroyer.add( process );", "-        if( m_watchdog != null )", "-        {", "-            m_watchdog.stop();", "+            if( m_watchdog != null )", "+            {", "+                m_watchdog.start( process );", "+            }", "+            try", "+            {", "+                process.waitFor();", "+            }", "+            catch( final InterruptedException ie )", "+            {", "+                //shu\\ould never happen", "+            }", "+", "+            // remove the process to the list of those to destroy if the VM exits", "+            //", "+            c_processDestroyer.remove( process );", "+", "+            if( m_watchdog != null )", "+            {", "+                m_watchdog.stop();", "+            }", "+            m_streamHandler.stop();", "+            if( m_watchdog != null )", "+            {", "+                m_watchdog.checkException();", "+            }", "+            return process.exitValue();", "-        m_streamHandler.stop();", "-        if( m_watchdog != null )", "+        catch( final ExecException ee )", "-            m_watchdog.checkException();", "+            throw new TaskException( ee.getMessage(), ee );", "-        return process.exitValue();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "564a836ea13863645d39003974c1fd1c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/workspace/DefaultWorkspace.java", "commitBeforeChange": "1ef26fe3aca0a1684e48b3dd0a386d3a5dfa9df4", "commitAfterChange": "92712f7da35eb709e299bb107d90a6749c274602", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private void executeTarget( final String name,                                 final Target target,                                 final ExecutionFrame frame )         throws TaskException", "signatureAfterChange": "     private void executeTarget( final String name,                                 final Target target,                                 final ExecutionFrame frame )         throws TaskException", "diff": ["-            if( false == condition.evaluate( frame.getContext() ) )", "+            try", "-                getLogger().debug( \"Skipping target \" + name +", "-                                   \" as it does not satisfy condition\" );", "-                return;", "+                if( false == condition.evaluate( frame.getContext() ) )", "+                {", "+                    getLogger().debug( \"Skipping target \" + name +", "+                                       \" as it does not satisfy condition\" );", "+                    return;", "+                }", "+            }", "+            catch( final ContextException ce )", "+            {", "+                throw new TaskException( \"Error evaluating Condition for target \" + ", "+                                         name, ce );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9969a0be5e132657a3dcdc07f2df6b1b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/exec/Execute.java", "commitBeforeChange": "4c36f7cb5aca402d90ea046454939860ba5457e8", "commitAfterChange": "4a9c6d79bc91a3a35d222c8f037830feb7de0cfe", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public int execute()         throws IOException, TaskException", "signatureAfterChange": "     public int execute()         throws IOException, TaskException", "diff": ["-        final ExecMetaData metaData =", "-            new ExecMetaData( m_command, getNativeEnvironment(),", "-                              m_workingDirectory, false );", "-", "-        final CommandLauncher launcher = getLauncher();", "-        final Process process = launcher.exec( metaData );", "-", "-            m_streamHandler.setProcessInputStream( process.getOutputStream() );", "-            m_streamHandler.setProcessOutputStream( process.getInputStream() );", "-            m_streamHandler.setProcessErrorStream( process.getErrorStream() );", "-        }", "-        catch( final IOException ioe )", "-        {", "-            process.destroy();", "-            throw ioe;", "-        }", "+            final ExecMetaData metaData =", "+                new ExecMetaData( m_command, getNativeEnvironment(),", "+                                  m_workingDirectory, false );", "-        m_streamHandler.start();", "+            final CommandLauncher launcher = getLauncher();", "+            final Process process = launcher.exec( metaData );", "-        // add the process to the list of those to destroy if the VM exits", "-        //", "-        c_processDestroyer.add( process );", "+            try", "+            {", "+                m_streamHandler.setProcessInputStream( process.getOutputStream() );", "+                m_streamHandler.setProcessOutputStream( process.getInputStream() );", "+                m_streamHandler.setProcessErrorStream( process.getErrorStream() );", "+            }", "+            catch( final IOException ioe )", "+            {", "+                process.destroy();", "+                throw ioe;", "+            }", "-        if( m_watchdog != null )", "-        {", "-            m_watchdog.start( process );", "-        }", "-        try", "-        {", "-            process.waitFor();", "-        }", "-        catch( final InterruptedException ie )", "-        {", "-            //shu\\ould never happen", "-        }", "+            m_streamHandler.start();", "-        // remove the process to the list of those to destroy if the VM exits", "-        //", "-        c_processDestroyer.remove( process );", "+            // add the process to the list of those to destroy if the VM exits", "+            //", "+            c_processDestroyer.add( process );", "-        if( m_watchdog != null )", "-        {", "-            m_watchdog.stop();", "+            if( m_watchdog != null )", "+            {", "+                m_watchdog.start( process );", "+            }", "+            try", "+            {", "+                process.waitFor();", "+            }", "+            catch( final InterruptedException ie )", "+            {", "+                //shu\\ould never happen", "+            }", "+", "+            // remove the process to the list of those to destroy if the VM exits", "+            //", "+            c_processDestroyer.remove( process );", "+", "+            if( m_watchdog != null )", "+            {", "+                m_watchdog.stop();", "+            }", "+            m_streamHandler.stop();", "+            if( m_watchdog != null )", "+            {", "+                m_watchdog.checkException();", "+            }", "+            return process.exitValue();", "-        m_streamHandler.stop();", "-        if( m_watchdog != null )", "+        catch( final ExecException ee )", "-            m_watchdog.checkException();", "+            throw new TaskException( ee.getMessage(), ee );", "-        return process.exitValue();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3979d9a0cbabc1af1c8754fc6115176", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipFile.java", "commitBeforeChange": "def28d00cf1f2f0bb0bd90b58e3786511355ee33", "commitAfterChange": "8a183a492de7fee445cada4a051a3d41a85bbdb4", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "     protected String getString(byte[] bytes, String enc)         throws ZipException", "signatureAfterChange": "     protected String getString(byte[] bytes, String enc)         throws ZipException", "diff": ["-                return ZipEncodingHelper.decodeName(bytes, enc);", "+                try {", "+                    return ZipEncodingHelper.decodeName(bytes, enc);", "+                } catch (CharacterCodingException ex) {", "+                    throw new ZipException(ex.getMessage());", "+                }"]}]}
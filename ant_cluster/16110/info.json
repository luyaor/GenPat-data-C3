{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "66478a2636654756481ddcdd21ebd756", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01dc43596fbf99be183b4c4b6dce114c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "     private Class<?> getClassFromStream(InputStream stream, String classname, File container)             throws IOException, SecurityException", "signatureAfterChange": "     private Class<?> getClassFromStream(final InputStream stream, final String classname, final File container)             throws IOException, SecurityException", "diff": ["-    private Class<?> getClassFromStream(InputStream stream, String classname, File container)", "+    private Class<?> getClassFromStream(final InputStream stream, final String classname, final File container)", "-        ByteArrayOutputStream baos = new ByteArrayOutputStream();", "+        final ByteArrayOutputStream baos = new ByteArrayOutputStream();", "-        byte[] buffer = new byte[BUFFER_SIZE];", "+        final byte[] buffer = new byte[BUFFER_SIZE];", "-        byte[] classData = baos.toByteArray();", "+        final byte[] classData = baos.toByteArray();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03914c0e2d75f58888034dc8cdd43cb0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/listener/CommonsLoggingListener.java", "commitBeforeChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "commitAfterChange": "789422e131b6c2c003d94f394169a64297e986c6", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private void realLog(Log log, String message, int priority, Throwable t)", "signatureAfterChange": "      private void realLog(final Log log, final String message, final int priority, final Throwable t)", "diff": ["-    private void realLog(Log log, String message, int priority, Throwable t) {", "-        PrintStream tmpOut = System.out;", "-        PrintStream tmpErr = System.err;", "+    private void realLog(final Log log, final String message, final int priority, final Throwable t) {", "+        final PrintStream tmpOut = System.out;", "+        final PrintStream tmpErr = System.err;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fb4fcf8b58492d712a108ccad864b3b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/Permissions.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private java.security.Permission createPermission(             Permissions.Permission permission)", "signatureAfterChange": "      private java.security.Permission createPermission(             final Permissions.Permission permission)", "diff": ["-            Permissions.Permission permission) {", "+            final Permissions.Permission permission) {", "-            Class<? extends java.security.Permission> clazz = Class.forName(", "+            final Class<? extends java.security.Permission> clazz = Class.forName(", "-            String name = permission.getName();", "-            String actions = permission.getActions();", "-            Constructor<? extends java.security.Permission> ctr = clazz.getConstructor(PARAMS);", "-            return ctr.newInstance(new Object[] { name, actions });", "-        } catch (Exception e) {", "+            final String name = permission.getName();", "+            final String actions = permission.getActions();", "+            final Constructor<? extends java.security.Permission> ctr = clazz.getConstructor(PARAMS);", "+            return ctr.newInstance(new Object[] {name, actions});", "+        } catch (final Exception e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "378c86eb312de683cbe57de12e0ad7c6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public JUnitTestRunner(JUnitTest test, boolean haltOnError,                            boolean filtertrace, boolean haltOnFailure,                            boolean showOutput, boolean logTestListenerEvents)", "signatureAfterChange": "     public JUnitTestRunner(final JUnitTest test, final boolean haltOnError,                            final boolean filtertrace, final boolean haltOnFailure,                            final boolean showOutput, final boolean logTestListenerEvents)", "diff": ["-    public JUnitTestRunner(JUnitTest test, boolean haltOnError,", "-                           boolean filtertrace, boolean haltOnFailure,", "-                           boolean showOutput, boolean logTestListenerEvents) {", "+    public JUnitTestRunner(final JUnitTest test, final boolean haltOnError,", "+                           final boolean filtertrace, final boolean haltOnFailure,", "+                           final boolean showOutput, final boolean logTestListenerEvents) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e119bcd645699b8e14cc2a7c835a1f7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "      private void iterateOverBaseDirs(         HashSet<File> baseDirs, HashMap<File, List<String>> dirsByBasedir, HashMap<File, List<String>> filesByBasedir)", "signatureAfterChange": "      private void iterateOverBaseDirs(         final HashSet<File> baseDirs, final HashMap<File, List<String>> dirsByBasedir, final HashMap<File, List<String>> filesByBasedir)", "diff": ["-        HashSet<File> baseDirs, HashMap<File, List<String>> dirsByBasedir, HashMap<File, List<String>> filesByBasedir) {", "+        final HashSet<File> baseDirs, final HashMap<File, List<String>> dirsByBasedir, final HashMap<File, List<String>> filesByBasedir) {", "-        for (File f : baseDirs) {", "-            List<String> files = filesByBasedir.get(f);", "-            List<String> dirs = dirsByBasedir.get(f);", "+        for (final File f : baseDirs) {", "+            final List<String> files = filesByBasedir.get(f);", "+            final List<String> dirs = dirsByBasedir.get(f);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "448ff5d219d3422ad77508ab5d39bbc7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 143, "methodNumberAfterChange": 143, "signatureBeforeChange": "      private void doGroup(Commandline toExecute)", "signatureAfterChange": "      private void doGroup(final Commandline toExecute)", "diff": ["-    private void doGroup(Commandline toExecute) {", "+    private void doGroup(final Commandline toExecute) {", "-            StringTokenizer tok = new StringTokenizer(group, \",\", false);", "+            final StringTokenizer tok = new StringTokenizer(group, \",\", false);", "-                String grp = tok.nextToken().trim();", "-                int space = grp.indexOf(\" \");", "+                final String grp = tok.nextToken().trim();", "+                final int space = grp.indexOf(\" \");", "-                    String name = grp.substring(0, space);", "-                    String pkgList = grp.substring(space + 1);", "+                    final String name = grp.substring(0, space);", "+                    final String pkgList = grp.substring(space + 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44ddb60c1a85aecbd86bdfe47001ab83", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "      private static JUnitTaskMirror createMirror(JUnitTask task, ClassLoader loader)", "signatureAfterChange": "      private static JUnitTaskMirror createMirror(final JUnitTask task, final ClassLoader loader)", "diff": ["-    private static JUnitTaskMirror createMirror(JUnitTask task, ClassLoader loader) {", "+    private static JUnitTaskMirror createMirror(final JUnitTask task, final ClassLoader loader) {", "-        } catch (ClassNotFoundException e) {", "+        } catch (final ClassNotFoundException e) {", "-            Class c = loader.loadClass(JUnitTaskMirror.class.getName() + \"Impl\");", "+            final Class c = loader.loadClass(JUnitTaskMirror.class.getName() + \"Impl\");", "-            Constructor cons = c.getConstructor(new Class[] {JUnitTask.class});", "+            final Constructor cons = c.getConstructor(new Class[] {JUnitTask.class});", "-        } catch (Exception e) {", "+        } catch (final Exception e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45020ace1f95afaa10bdfa9ba797c01e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": "      private MethodAndObject createTopLevel(         ComponentHelper helper, String elementName, List<Method> methods)", "signatureAfterChange": "      private MethodAndObject createTopLevel(         final ComponentHelper helper, final String elementName, final List<Method> methods)", "diff": ["-        ComponentHelper helper, String elementName, List<Method> methods) {", "-        Class<?> clazz = helper.getComponentClass(elementName);", "+        final ComponentHelper helper, final String elementName, final List<Method> methods) {", "+        final Class<?> clazz = helper.getComponentClass(elementName);", "-        Method addMethod = findMatchingMethod(clazz, addTypeMethods);", "+        final Method addMethod = findMatchingMethod(clazz, addTypeMethods);", "-        Object addedObject = helper.createComponent(elementName);", "+        final Object addedObject = helper.createComponent(elementName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c4c4914e4d0656f51bb686e2b80ea4e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/ScpToMessage.java", "commitBeforeChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "commitAfterChange": "789422e131b6c2c003d94f394169a64297e986c6", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      private void sendDirectory(Directory current,                                InputStream in,                                OutputStream out) throws IOException", "signatureAfterChange": "      private void sendDirectory(final Directory current,                                final InputStream in,                                final OutputStream out) throws IOException", "diff": ["-    private void sendDirectory(Directory current,", "-                               InputStream in,", "-                               OutputStream out) throws IOException {", "-        for (Iterator fileIt = current.filesIterator(); fileIt.hasNext();) {", "+    private void sendDirectory(final Directory current,", "+                               final InputStream in,", "+                               final OutputStream out) throws IOException {", "+        for (final Iterator fileIt = current.filesIterator(); fileIt.hasNext();) {", "-        for (Iterator dirIt = current.directoryIterator(); dirIt.hasNext();) {", "-            Directory dir = (Directory) dirIt.next();", "+        for (final Iterator dirIt = current.directoryIterator(); dirIt.hasNext();) {", "+            final Directory dir = (Directory) dirIt.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e185819ddafbfc475701a30fcc39aab", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "      private Resource[] selectOutOfDateResources(Resource[] initial,                                                 FileNameMapper mapper)", "signatureAfterChange": "      private Resource[] selectOutOfDateResources(final Resource[] initial,                                                 final FileNameMapper mapper)", "diff": ["-    private Resource[] selectOutOfDateResources(Resource[] initial,", "-                                                FileNameMapper mapper) {", "-        Resource[] rs = selectFileResources(initial);", "+    private Resource[] selectOutOfDateResources(final Resource[] initial,", "+                                                final FileNameMapper mapper) {", "+        final Resource[] rs = selectFileResources(initial);", "-            Union u = new Union();", "+            final Union u = new Union();", "-            ResourceCollection rc =", "+            final ResourceCollection rc =", "-                ArrayList<Resource> newer = new ArrayList<Resource>();", "+                final ArrayList<Resource> newer = new ArrayList<Resource>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53e9a123c84e272e904b1c35fb337caf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     protected int executeExternalCompile(String[] args, int firstFileName,                                          boolean quoteFiles)", "signatureAfterChange": "     protected int executeExternalCompile(final String[] args, final int firstFileName,                                          final boolean quoteFiles)", "diff": ["-    protected int executeExternalCompile(String[] args, int firstFileName,", "-                                         boolean quoteFiles) {", "+    protected int executeExternalCompile(final String[] args, final int firstFileName,", "+                                         final boolean quoteFiles) {", "-                } catch (IOException e) {", "+                } catch (final IOException e) {", "-                Execute exe = new Execute(", "+                final Execute exe = new Execute(", "-            } catch (IOException e) {", "+            } catch (final IOException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "549ca99dd5293d3a84a99fd26f5dc5ed", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "     protected final void addResources(FileSet fileset, Resource[] resources,                                       ZipOutputStream zOut)         throws IOException", "signatureAfterChange": "     protected final void addResources(final FileSet fileset, final Resource[] resources,                                       final ZipOutputStream zOut)         throws IOException", "diff": ["-    protected final void addResources(FileSet fileset, Resource[] resources,", "-                                      ZipOutputStream zOut)", "+    protected final void addResources(final FileSet fileset, final Resource[] resources,", "+                                      final ZipOutputStream zOut)", "-                    int thisDirMode = zfs != null && zfs.hasDirModeBeenSet()", "+                    final int thisDirMode = zfs != null && zfs.hasDirModeBeenSet()", "-                        File f = FILE_UTILS.resolveFile(base,", "+                        final File f = FILE_UTILS.resolveFile(base,", "-                        int thisFileMode =", "+                        final int thisFileMode ="]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61edb1a08465fe5690af5b2862b8f43f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/builder/ConvertingProjectBuilder.java", "commitBeforeChange": "f3bc7772a61e0b51112c1b8840d9485d5442d6ad", "commitAfterChange": "bf9414c704e78eced3232d32434a69ed6f77209c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void copyAttributes( Configuration from,                                  DefaultConfiguration to,                                  Set omitAttributes )", "signatureAfterChange": "     private void copyAttributes( final Configuration from,                                  final DefaultConfiguration to,                                  final Set omitAttributes )", "diff": ["-    private void copyAttributes( Configuration from,", "-                                 DefaultConfiguration to,", "-                                 Set omitAttributes )", "+    private void copyAttributes( final Configuration from,", "+                                 final DefaultConfiguration to,", "+                                 final Set omitAttributes )", "-        String[] attribs = from.getAttributeNames();", "+        final String[] attribs = from.getAttributeNames();", "-            String name = attribs[ i ];", "+            final String name = attribs[ i ];", "-            String value = from.getAttribute( name, \"\" );", "+            final String value = from.getAttribute( name, \"\" );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68e88aff7aee54601ae33659ac0d23f0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/ScpFromMessageBySftp.java", "commitBeforeChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "commitAfterChange": "789422e131b6c2c003d94f394169a64297e986c6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public ScpFromMessageBySftp(boolean verbose,                                 Session session,                                 String aRemoteFile,                                 File aLocalFile,                                 boolean recursive,                                 boolean preserveLastModified)", "signatureAfterChange": "     public ScpFromMessageBySftp(final boolean verbose,                                 final Session session,                                 final String aRemoteFile,                                 final File aLocalFile,                                 final boolean recursive,                                 final boolean preserveLastModified)", "diff": ["-    public ScpFromMessageBySftp(boolean verbose,", "-                                Session session,", "-                                String aRemoteFile,", "-                                File aLocalFile,", "-                                boolean recursive,", "-                                boolean preserveLastModified) {", "+    public ScpFromMessageBySftp(final boolean verbose,", "+                                final Session session,", "+                                final String aRemoteFile,", "+                                final File aLocalFile,", "+                                final boolean recursive,", "+                                final boolean preserveLastModified) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "787c244e4debf966beb74699d0a1199e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/types/SourceFileScanner.java", "commitBeforeChange": "bf72fe7cfec560a15271fa4a9dc7cc9e527c0122", "commitAfterChange": "a71d1ee865754a9e5ca029494727c309112c3368", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public File[] restrictAsFiles( String[] files, File srcDir, File destDir,                                    FileNameMapper mapper )         throws TaskException", "signatureAfterChange": "     public File[] restrictAsFiles( final String[] files,                                    final File srcDir,                                    final File destDir,                                    final FileNameMapper mapper )         throws TaskException", "diff": ["-    public File[] restrictAsFiles( String[] files, File srcDir, File destDir,", "-                                   FileNameMapper mapper )", "+    public File[] restrictAsFiles( final String[] files,", "+                                   final File srcDir,", "+                                   final File destDir,", "+                                   final FileNameMapper mapper )", "-        String[] res = restrict( files, srcDir, destDir, mapper );", "-        File[] result = new File[ res.length ];", "+        final String[] res = restrict( files, srcDir, destDir, mapper );", "+        final File[] result = new File[ res.length ];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cdaabd3622090068021c03d30447a30", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "      private void processIncluded(TokenizedPath path,                                  File file, Vector<String> inc, Vector<String> exc,                                  Vector<String> des)", "signatureAfterChange": "      private void processIncluded(final TokenizedPath path,                                  final File file, final Vector<String> inc, final Vector<String> exc,                                  final Vector<String> des)", "diff": ["-    private void processIncluded(TokenizedPath path,", "-                                 File file, Vector<String> inc, Vector<String> exc,", "-                                 Vector<String> des) {", "-        String name = path.toString();", "+    private void processIncluded(final TokenizedPath path,", "+                                 final File file, final Vector<String> inc, final Vector<String> exc,", "+                                 final Vector<String> des) {", "+        final String name = path.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e3988b0838533b75a422acf22b1abee", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "     public static String filterStack(String stack)", "signatureAfterChange": "     public static String filterStack(final String stack)", "diff": ["-    public static String filterStack(String stack) {", "+    public static String filterStack(final String stack) {", "-        StringWriter sw = new StringWriter();", "-        BufferedWriter pw = new BufferedWriter(sw);", "-        StringReader sr = new StringReader(stack);", "-        BufferedReader br = new BufferedReader(sr);", "+        final StringWriter sw = new StringWriter();", "+        final BufferedWriter pw = new BufferedWriter(sw);", "+        final StringReader sr = new StringReader(stack);", "+        final BufferedReader br = new BufferedReader(sr);", "-        } catch (Exception e) {", "+        } catch (final Exception e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "914baf2b34c96539acf522a17b50a797", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/builder/ConvertingProjectBuilder.java", "commitBeforeChange": "f3bc7772a61e0b51112c1b8840d9485d5442d6ad", "commitAfterChange": "bf9414c704e78eced3232d32434a69ed6f77209c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     protected Configuration parseProject( String systemID )         throws ProjectException", "signatureAfterChange": "     protected Configuration parseProject( final String systemID )         throws ProjectException", "diff": ["-    protected Configuration parseProject( String systemID )", "+    protected Configuration parseProject( final String systemID )", "-        Configuration originalConfig = super.parseProject( systemID );", "+        final Configuration originalConfig = super.parseProject( systemID );", "-        DefaultConfiguration newConfig = copyConfiguration( originalConfig );", "+        final DefaultConfiguration newConfig = copyConfiguration( originalConfig );", "-        Set omitAttributes = new HashSet();", "+        final Set omitAttributes = new HashSet();", "-        Configuration[] children = originalConfig.getChildren();", "+        final Configuration[] children = originalConfig.getChildren();", "-            Configuration child = children[ i ];", "+            final Configuration child = children[ i ];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4e49b1bf3b32f82ff4b8f8d7263747e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/types/SourceFileScanner.java", "commitBeforeChange": "bf72fe7cfec560a15271fa4a9dc7cc9e527c0122", "commitAfterChange": "a71d1ee865754a9e5ca029494727c309112c3368", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public File[] restrictAsFiles( String[] files, File srcDir, File destDir,                                    FileNameMapper mapper )         throws TaskException", "signatureAfterChange": "     public File[] restrictAsFiles( final String[] files,                                    final File srcDir,                                    final File destDir,                                    final FileNameMapper mapper )         throws TaskException", "diff": ["-    public File[] restrictAsFiles( String[] files, File srcDir, File destDir,", "-                                   FileNameMapper mapper )", "+    public File[] restrictAsFiles( final String[] files,", "+                                   final File srcDir,", "+                                   final File destDir,", "+                                   final FileNameMapper mapper )", "-        String[] res = restrict( files, srcDir, destDir, mapper );", "-        File[] result = new File[ res.length ];", "+        final String[] res = restrict( files, srcDir, destDir, mapper );", "+        final File[] result = new File[ res.length ];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b72276cb720eedb95abad808ea36f885", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public Creator getElementCreator(         Project project, String parentUri, Object parent, String elementName, UnknownElement ue)", "signatureAfterChange": "     public Creator getElementCreator(         final Project project, final String parentUri, final Object parent, final String elementName, final UnknownElement ue)", "diff": ["-        Project project, String parentUri, Object parent, String elementName, UnknownElement ue) {", "-        NestedCreator nc = getNestedCreator(project, parentUri, parent, elementName, ue);", "+        final Project project, final String parentUri, final Object parent, final String elementName, final UnknownElement ue) {", "+        final NestedCreator nc = getNestedCreator(project, parentUri, parent, elementName, ue);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c322ebea2129189170161a3104746a65", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/builder/ConvertingProjectBuilder.java", "commitBeforeChange": "f3bc7772a61e0b51112c1b8840d9485d5442d6ad", "commitAfterChange": "bf9414c704e78eced3232d32434a69ed6f77209c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private DefaultConfiguration buildIfElement( String ifProperty,                                                  boolean unless,                                                  final String location )", "signatureAfterChange": "     private DefaultConfiguration buildIfElement( final String ifProperty,                                                  final boolean unless,                                                  final String location )", "diff": ["-    private DefaultConfiguration buildIfElement( String ifProperty,", "-                                                 boolean unless,", "+    private DefaultConfiguration buildIfElement( final String ifProperty,", "+                                                 final boolean unless,", "-        DefaultConfiguration isSetElement =", "+        final DefaultConfiguration isSetElement =", "-        DefaultConfiguration conditionElement =", "+        final DefaultConfiguration conditionElement =", "-            DefaultConfiguration notElement =", "+            final DefaultConfiguration notElement =", "-        DefaultConfiguration ifElement =", "+        final DefaultConfiguration ifElement ="]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5ee21eb7a508e0bf9fca0c29dbdda97", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/regexp/JakartaOroRegexp.java", "commitBeforeChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "commitAfterChange": "789422e131b6c2c003d94f394169a64297e986c6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public String substitute(String input, String argument, int options)         throws BuildException", "signatureAfterChange": "     public String substitute(final String input, final String argument, final int options)         throws BuildException", "diff": ["-    public String substitute(String input, String argument, int options)", "+    public String substitute(final String input, final String argument, final int options)", "-        StringBuffer subst = new StringBuffer();", "+        final StringBuffer subst = new StringBuffer();", "-                    int value = Character.digit(c, DECIMAL);", "+                    final int value = Character.digit(c, DECIMAL);", "-        Substitution s =", "+        final Substitution s ="]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6a0fc92670523c92bd6327bd83bbf8f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/AbstractUnicodeExtraField.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected AbstractUnicodeExtraField(String text, byte[] bytes, int off,                                         int len)", "signatureAfterChange": "     protected AbstractUnicodeExtraField(final String text, final byte[] bytes, final int off,                                         final int len)", "diff": ["-    protected AbstractUnicodeExtraField(String text, byte[] bytes, int off,", "-                                        int len) {", "-        CRC32 crc32 = new CRC32();", "+    protected AbstractUnicodeExtraField(final String text, final byte[] bytes, final int off,", "+                                        final int len) {", "+        final CRC32 crc32 = new CRC32();", "-        } catch (UnsupportedEncodingException e) {", "+        } catch (final UnsupportedEncodingException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c79c92da6f3e015aa913735f80f9a00c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public JUnitTestRunner(JUnitTest test, boolean haltOnError,                            boolean filtertrace, boolean haltOnFailure,                            boolean showOutput, ClassLoader loader)", "signatureAfterChange": "     public JUnitTestRunner(final JUnitTest test, final boolean haltOnError,                            final boolean filtertrace, final boolean haltOnFailure,                            final boolean showOutput, final ClassLoader loader)", "diff": ["-    public JUnitTestRunner(JUnitTest test, boolean haltOnError,", "-                           boolean filtertrace, boolean haltOnFailure,", "-                           boolean showOutput, ClassLoader loader) {", "+    public JUnitTestRunner(final JUnitTest test, final boolean haltOnError,", "+                           final boolean filtertrace, final boolean haltOnFailure,", "+                           final boolean showOutput, final ClassLoader loader) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c926793dc7dc77d7991224d2e45aeda5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javac.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": "      private void lookForPackageInfos(File srcDir, File[] newFiles)", "signatureAfterChange": "      private void lookForPackageInfos(final File srcDir, final File[] newFiles)", "diff": ["-    private void lookForPackageInfos(File srcDir, File[] newFiles) {", "+    private void lookForPackageInfos(final File srcDir, final File[] newFiles) {", "-            File f = newFiles[i];", "+            final File f = newFiles[i];", "-            String path = FILE_UTILS.removeLeadingPath(srcDir, f).", "+            final String path = FILE_UTILS.removeLeadingPath(srcDir, f).", "-            String suffix = \"/package-info.java\";", "+            final String suffix = \"/package-info.java\";", "-            String pkg = path.substring(0, path.length() - suffix.length());", "+            final String pkg = path.substring(0, path.length() - suffix.length());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0def00e73f9c9485e07d271cdfe6192", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": "     protected void actOnTestResult(TestResultHolder result, JUnitTest test,                                    String name)", "signatureAfterChange": "     protected void actOnTestResult(final TestResultHolder result, final JUnitTest test,                                    final String name)", "diff": ["-    protected void actOnTestResult(TestResultHolder result, JUnitTest test,", "-                                   String name) {", "+    protected void actOnTestResult(final TestResultHolder result, final JUnitTest test,", "+                                   final String name) {", "-        boolean fatal = result.timedOut || result.crashed;", "-        boolean errorOccurredHere =", "+        final boolean fatal = result.timedOut || result.crashed;", "+        final boolean errorOccurredHere =", "-        boolean failureOccurredHere =", "+        final boolean failureOccurredHere ="]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3a3ab1772705e3e9ad09a076beaef5a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resolver/ApacheCatalog.java", "commitBeforeChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "commitAfterChange": "789422e131b6c2c003d94f394169a64297e986c6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void addEntry(CatalogEntry entry)", "signatureAfterChange": "     public void addEntry(final CatalogEntry entry)", "diff": ["-    public void addEntry(CatalogEntry entry) {", "+    public void addEntry(final CatalogEntry entry) {", "-        int type = entry.getEntryType();", "+        final int type = entry.getEntryType();", "-            String publicid = PublicId.normalize(entry.getEntryArg(0));", "-            String systemid = normalizeURI(entry.getEntryArg(1));", "+            final String publicid = PublicId.normalize(entry.getEntryArg(0));", "+            final String systemid = normalizeURI(entry.getEntryArg(1));", "-            String uri = normalizeURI(entry.getEntryArg(0));", "-            String altURI = normalizeURI(entry.getEntryArg(1));", "+            final String uri = normalizeURI(entry.getEntryArg(0));", "+            final String altURI = normalizeURI(entry.getEntryArg(1));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da510b5f9de32886427de38bb3befd54", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/ScpFromMessageBySftp.java", "commitBeforeChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "commitAfterChange": "789422e131b6c2c003d94f394169a64297e986c6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private void getDir(ChannelSftp channel,                         String remoteFile,                         File localFile) throws IOException, SftpException", "signatureAfterChange": "      private void getDir(final ChannelSftp channel,                         final String remoteFile,                         final File localFile) throws IOException, SftpException", "diff": ["-    private void getDir(ChannelSftp channel,", "-                        String remoteFile,", "-                        File localFile) throws IOException, SftpException {", "+    private void getDir(final ChannelSftp channel,", "+                        final String remoteFile,", "+                        final File localFile) throws IOException, SftpException {", "-        java.util.Vector files = channel.ls(remoteFile);", "+        final java.util.Vector files = channel.ls(remoteFile);", "-            ChannelSftp.LsEntry le = (ChannelSftp.LsEntry) files.elementAt(i);", "-            String name = le.getFilename();", "+            final ChannelSftp.LsEntry le = (ChannelSftp.LsEntry) files.elementAt(i);", "+            final String name = le.getFilename();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f97cc9cf91107ea7f004e4d8c2aed0c6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private Object createDynamicElement(Object parent, String ns,                                         String localName, String qName)", "signatureAfterChange": "     private Object createDynamicElement(final Object parent, final String ns,                                         final String localName, final String qName)", "diff": ["-    private Object createDynamicElement(Object parent, String ns,", "-                                        String localName, String qName) {", "+    private Object createDynamicElement(final Object parent, final String ns,", "+                                        final String localName, final String qName) {", "-            DynamicElementNS dc = (DynamicElementNS) parent;", "+            final DynamicElementNS dc = (DynamicElementNS) parent;", "-            DynamicElement dc = (DynamicElement) parent;", "+            final DynamicElement dc = (DynamicElement) parent;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9db24c3e2757104c4c91354176312b0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XSLTProcess.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "     private Object evaluateParam(Param param) throws XPathExpressionException", "signatureAfterChange": "     private Object evaluateParam(final Param param) throws XPathExpressionException", "diff": ["-    private Object evaluateParam(Param param) throws XPathExpressionException {", "-        String typeName = param.getType();", "-        String expression = param.getExpression();", "+    private Object evaluateParam(final Param param) throws XPathExpressionException {", "+        final String typeName = param.getType();", "+        final String expression = param.getExpression();", "-            } catch (IllegalArgumentException e) {", "+            } catch (final IllegalArgumentException e) {", "-                QName xpathType = ParamType.XPATH_TYPES.get(type);", "+                final QName xpathType = ParamType.XPATH_TYPES.get(type);", "-                    XPathExpression xpe = xpath.compile(expression);", "+                    final XPathExpression xpe = xpath.compile(expression);"]}]}
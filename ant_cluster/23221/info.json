{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "49d4748f42612f3c8be71cd0c969499b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "203e103a240380394c0dc255df2a1f90", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ComponentHelper.java", "commitBeforeChange": "e028c281003e4139ab97bdef658acdc260b4c820", "commitAfterChange": "b912cb97f49f54d02ab97e8d98cfe10c9abc80b3", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": "     private void initTypes()", "signatureAfterChange": "     private void initTypes()", "diff": ["-        ClassLoader classLoader = null;", "-        classLoader = getClassLoader(classLoader);", "-        String dataDefs = MagicNames.TYPEDEFS_PROPERTIES_RESOURCE;", "-", "-        InputStream in = null;", "-        try {", "-            Properties props = new Properties();", "-            in = this.getClass().getResourceAsStream(dataDefs);", "-            if (in == null) {", "-                throw new BuildException(ERROR_NO_TYPE_LIST_LOAD);", "-            }", "-            props.load(in);", "-", "-            Enumeration e = props.propertyNames();", "-            while (e.hasMoreElements()) {", "-                String name = (String) e.nextElement();", "-                String className = props.getProperty(name);", "-                AntTypeDefinition def = new AntTypeDefinition();", "-                def.setName(name);", "-                def.setClassName(className);", "-                def.setClassLoader(classLoader);", "-                antTypeTable.put(name, def);", "-            }", "-        } catch (IOException ex) {", "-            throw new BuildException(ERROR_NO_TYPE_LIST_LOAD);", "-        } finally {", "-            if (in != null) {", "-                try {", "-                    in.close();", "-                } catch (Exception ignore) {", "-                    // ignore", "-                }", "-            }", "+        ClassLoader classLoader = getClassLoader(null);", "+        Properties props = getDefaultDefinitions(true);", "+        Enumeration e = props.propertyNames();", "+        while (e.hasMoreElements()) {", "+            String name = (String) e.nextElement();", "+            String className = props.getProperty(name);", "+            AntTypeDefinition def = new AntTypeDefinition();", "+            def.setName(name);", "+            def.setClassName(className);", "+            def.setClassLoader(classLoader);", "+            antTypeTable.put(name, def);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "242ed1bcb6715e42953c402cdd32ab28", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Diagnostics.java", "commitBeforeChange": "296f7cecd0347b79f837be45c671e0fa9054f402", "commitAfterChange": "9e260d7fa31b28b41ef6061745860550eefb965b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private static String getImplementationVersion(Class clazz)", "signatureAfterChange": "     private static String getImplementationVersion(Class clazz)", "diff": ["-        try {", "-          // Package pkg = clazz.getPackage();", "-          Method method = Class.class.getMethod(\"getPackage\", new Class[0]);", "-          Object pkg = method.invoke(clazz, (Object[]) null);", "-          if (pkg != null) {", "-              // pkg.getImplementationVersion();", "-              method = pkg.getClass().getMethod(\"getImplementationVersion\", new Class[0]);", "-              Object version = method.invoke(pkg, (Object[]) null);", "-              return (String) version;", "-          }", "-        } catch (Exception e) {", "-          // JDK < 1.2 should land here because the methods above don't exist.", "-          return \"?.?\";", "-        }", "-        return null;", "+        Package pkg = clazz.getPackage();", "+        return pkg.getImplementationVersion();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5761ca63790facff451731f80eacf07", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/core/AntTask.java", "commitBeforeChange": "90933557a169db41cbbc635d29d5d68f4a95d94a", "commitAfterChange": "d2c225e3700130775183d20109426819f2b989ce", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void execute()         throws TaskException", "signatureAfterChange": "     protected Project getProject() throws Exception", "diff": ["-     */", "-    public void execute()", "-        throws TaskException", "+    protected Project getProject() throws Exception", "-        final Embeddor embeddor =", "-            (Embeddor)getContext().getService( Embeddor.class );", "-", "-        try", "-        {", "-            final Project project =", "-                embeddor.createProject( m_file.toString(),", "-                                        m_type,", "-                                        new Parameters() );", "-            final Workspace workspace =", "-                embeddor.createWorkspace( buildParameters() );", "-", "-            if( null == m_target )", "-            {", "-                m_target = project.getDefaultTargetName();", "-            }", "-", "-            workspace.executeProject( project, m_target );", "-        }", "-        catch( final Exception e )", "-        {", "-            throw new TaskException( e.toString(), e );", "-        }", "+        final Project project =", "+            getEmbeddor().createProject( m_file.toString(),", "+                                         m_type,", "+                                         new Parameters() );", "+        return project;"]}]}
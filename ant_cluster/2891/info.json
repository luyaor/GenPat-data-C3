{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "312bb3d9076a6f426e42dc26ffe9d444", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8865359e1a8309c1502327471703d464", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "e81aadf85e54189b89dfe3550e8590df75abc0f1", "commitAfterChange": "8f927b8ff527c174d0efe0ded1a1be49f1bb434c", "methodNumberBeforeChange": 120, "methodNumberAfterChange": 122, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                    } else {", "+                    }", "+                    String link = null;", "+                    if (la.shouldResolveLink()) {", "+                        File hrefAsFile = ", "+                            getProject().resolveFile(la.getHref());", "+                        if (hrefAsFile.exists()) {", "+                            try {", "+                                link = FILE_UTILS.getFileURL(hrefAsFile)", "+                                    .toExternalForm();", "+                            } catch (MalformedURLException ex) {", "+                                // should be impossible", "+                                log(\"Warning: link location was invalid \" ", "+                                    + hrefAsFile, Project.MSG_WARN);", "+                            }", "+                        }", "+                    }", "+                    if (link == null) {", "+                            link = la.getHref();", "-                                    .setValue(la.getHref());", "+                                    .setValue(link);", "-                        toExecute.createArgument().setValue(la.getHref());", "+                        toExecute.createArgument().setValue(link);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba6d7c01f6cc42bc1cf20c242e679730", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/selectors/DateSelector.java", "commitBeforeChange": "8ec6497d89bb1cc76c15e2f911a2ded3f8c5fbbc", "commitAfterChange": "e33f1d105f6988df483bc075a630c6aa7a3b536a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void verifySettings()", "signatureAfterChange": "     public void verifySettings()", "diff": ["-        } else if (millis < 0) {", "-            setError(\"Date of \" + dateTime", "-                    + \" results in negative milliseconds value\"", "-                    + \" relative to epoch (January 1, 1970, 00:00:00 GMT).\");", "+        } else if (millis < 0 && dateTime != null) {", "+            // check millis and only set it once.", "+            DateFormat df = ((pattern == null)", "+                ? DateFormat.getDateTimeInstance(", "+                    DateFormat.SHORT, DateFormat.SHORT, Locale.US)", "+                : new SimpleDateFormat(pattern));", "+", "+            try {", "+                setMillis(df.parse(dateTime).getTime());", "+                if (millis < 0) {", "+                    setError(\"Date of \" + dateTime", "+                        + \" results in negative milliseconds value\"", "+                        + \" relative to epoch (January 1, 1970, 00:00:00 GMT).\");", "+                }", "+            } catch (ParseException pe) {", "+                setError(\"Date of \" + dateTime", "+                        + \" Cannot be parsed correctly. It should be in\"", "+                        + ((pattern == null)", "+                        ? \" MM/DD/YYYY HH:MM AM_PM\" : pattern) + \" format.\");", "+            }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2eb74c1d1d9bde67c08127839b35f8fa", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13f271a92737dfc86ecebb8944aa102a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "8b162d567dc13b9ae576422744854684a6c3ceb1", "commitAfterChange": "6c7f485943c930bf2de75288e47c4bf27c63b50a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     public void scan() throws IllegalStateException", "signatureAfterChange": "     public void scan() throws IllegalStateException", "diff": ["-        if (basedir == null) {", "-            throw new IllegalStateException(\"No basedir set\");", "-        }", "-        if (!basedir.exists()) {", "-            throw new IllegalStateException(\"basedir \" + basedir", "-                                            + \" does not exist\");", "-        }", "-        if (!basedir.isDirectory()) {", "-            throw new IllegalStateException(\"basedir \" + basedir", "-                                            + \" is not a directory\");", "-        }", "-", "-        if (includes == null) {", "-            // No includes supplied, so set it to 'matches all'", "-            includes = new String[1];", "-            includes[0] = \"**\";", "-        }", "-        if (excludes == null) {", "-            excludes = new String[0];", "-        }", "-", "-        filesIncluded    = new Vector();", "-        filesNotIncluded = new Vector();", "-        filesExcluded    = new Vector();", "-        filesDeselected  = new Vector();", "-        dirsIncluded     = new Vector();", "-        dirsNotIncluded  = new Vector();", "-        dirsExcluded     = new Vector();", "-        dirsDeselected   = new Vector();", "-", "-        if (isIncluded(\"\")) {", "-            if (!isExcluded(\"\")) {", "-                if (isSelected(\"\", basedir)) {", "-                    dirsIncluded.addElement(\"\");", "-                } else {", "-                    dirsDeselected.addElement(\"\");", "+        synchronized (scanLock) {", "+            if (scanning) {", "+                while (scanning) {", "+                    try {", "+                        scanLock.wait();", "+                    } catch (InterruptedException e) {", "+                        continue;", "+                    }", "-            } else {", "-                dirsExcluded.addElement(\"\");", "+                if (illegal != null) {", "+                    throw illegal;", "+                }", "+                return;", "-        } else {", "-            dirsNotIncluded.addElement(\"\");", "+            scanning = true;", "-        checkIncludePatterns();", "-        clearCaches();", "+        try {", "+            synchronized (this) {", "+                illegal = null;", "+                clearResults();", "+", "+                // set in/excludes to reasonable defaults if needed:", "+                boolean nullIncludes = (includes == null);", "+                includes = nullIncludes ? new String[] {\"**\"} : includes;", "+                boolean nullExcludes = (excludes == null);", "+                excludes = nullExcludes ? new String[0] : excludes;", "+", "+                if (basedir == null) {", "+                    throw new IllegalStateException(\"No basedir set\");", "+                }", "+                if (!basedir.exists()) {", "+                    throw new IllegalStateException(\"basedir \" + basedir", "+                                                    + \" does not exist\");", "+                }", "+                if (!basedir.isDirectory()) {", "+                    throw new IllegalStateException(\"basedir \" + basedir", "+                                                    + \" is not a directory\");", "+                }", "+                if (isIncluded(\"\")) {", "+                    if (!isExcluded(\"\")) {", "+                        if (isSelected(\"\", basedir)) {", "+                            dirsIncluded.addElement(\"\");", "+                        } else {", "+                            dirsDeselected.addElement(\"\");", "+                        }", "+                    } else {", "+                        dirsExcluded.addElement(\"\");", "+                    }", "+                } else {", "+                    dirsNotIncluded.addElement(\"\");", "+                }", "+                checkIncludePatterns();", "+                clearCaches();", "+                includes = nullIncludes ? null : includes;", "+                excludes = nullExcludes ? null : excludes;", "+            }", "+        } finally {", "+            synchronized (scanLock) {", "+                scanning = false;", "+                scanLock.notifyAll();", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1885b621d85311c267bb5e66b2e1dcd3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Delete.java", "commitBeforeChange": "dbf40e84c3662111689611818c57483f16b60c59", "commitAfterChange": "dd6d777fec28c68e88af5345564f70a1f515cc1c", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 43, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        if (file == null && dir == null && filesets.size() == 0 && rcs.size() == 0) {", "+        if (file == null && dir == null && filesets.size() == 0 && rcs == null) {", "-                        String message = \"Unable to delete file \"", "-                            + file.getAbsolutePath();", "-                        if (failonerror) {", "-                            throw new BuildException(message);", "-                        } else {", "-                            log(message, quiet ? Project.MSG_VERBOSE", "-                                               : Project.MSG_WARN);", "-                        }", "+                        handle(\"Unable to delete file \" + file.getAbsolutePath());", "-        Path p = new Path(getProject());", "-        p.addAll(rcs);", "+        Resources resourcesToDelete = new Resources();", "+        resourcesToDelete.setProject(getProject());", "+        Resources filesetDirs = new Resources();", "+        filesetDirs.setProject(getProject());", "+", "-            p.add(includeEmpty ? new BCFileSet(fs) : fs);", "+            resourcesToDelete.add(fs);", "+            if (includeEmpty) {", "+              filesetDirs.add(new ReverseDirs(fs.getDir(),", "+                  fs.getDirectoryScanner().getIncludedDirectories()));", "+            }", "-            p.add(includeEmpty ? new BCFileSet(implicit) : implicit);", "+            resourcesToDelete.add(implicit);", "+            if (includeEmpty) {", "+              filesetDirs.add(new ReverseDirs(dir,", "+                  implicit.getDirectoryScanner().getIncludedDirectories()));", "+            }", "-        Restrict exists = new Restrict();", "-        exists.add(EXISTS);", "-        exists.add(p);", "-        // delete the files in the resource collections; sort to files, then dirs", "-        Sort s = new Sort();", "-        s.add(REVERSE_FILESYSTEM);", "-        s.add(exists);", "-        String errorMessage = null;", "+        resourcesToDelete.add(filesetDirs);", "+        if (rcs != null) {", "+            // sort first to files, then dirs", "+            Restrict exists = new Restrict();", "+            exists.add(EXISTS);", "+            exists.add(rcs);", "+            Sort s = new Sort();", "+            s.add(REVERSE_FILESYSTEM);", "+            s.add(exists);", "+            resourcesToDelete.add(s);", "+        }", "-            for (Iterator iter = s.iterator(); iter.hasNext();) {", "-                FileResource r = (FileResource) iter.next();", "-                if (!(r.isDirectory()) || r.getFile().list().length == 0) {", "-                    log(\"Deleting \" + r, verbosity);", "-                    if (!delete(r.getFile())) {", "-                        errorMessage = \"Unable to delete \"", "-                            + (r.isDirectory() ? \"directory \" : \"file \") + r;", "+            if (resourcesToDelete.isFilesystemOnly()) {", "+                for (Iterator iter = resourcesToDelete.iterator(); iter.hasNext();) {", "+                    FileResource r = (FileResource) iter.next();", "+                    // nonexistent resources could only occur if we already", "+                    // deleted something from a fileset:", "+                    if (!r.isExists()) {", "+                        continue;", "+                    }", "+                    if (!(r.isDirectory()) || r.getFile().list().length == 0) {", "+                        log(\"Deleting \" + r, verbosity);", "+                        if (!delete(r.getFile()) && failonerror) {", "+                            handle(\"Unable to delete \"", "+                                + (r.isDirectory() ? \"directory \" : \"file \") + r);", "+                        }", "+            } else {", "+                 handle(getTaskName() + \" handles only filesystem resources\");", "-            errorMessage = e.getMessage();", "-        }", "-        if (errorMessage != null) {", "-            if (failonerror) {", "-                throw new BuildException(errorMessage);", "-            }", "-            log(errorMessage, quiet ? Project.MSG_VERBOSE : Project.MSG_WARN);", "+            handle(e);"]}]}
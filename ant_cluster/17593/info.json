{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0b2dd8dd08d1fb56479c48d34ac5cf3f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2af04abcedf723f131f1e116c78793b4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/testcases/org/apache/myrmidon/components/AbstractComponentTest.java", "commitBeforeChange": "6e94185c884573a74c64713cd53a94032477580d", "commitAfterChange": "56074611a906b46f7db1a78cb3aba8224aa79582", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected final ServiceManager getServiceManager() throws Exception", "signatureAfterChange": "     protected final ServiceManager getServiceManager() throws Exception", "diff": ["-            Object component = new DefaultMasterConverter();", "+            Object component = createComponent( Converter.ROLE, DefaultMasterConverter.class );", "-            component = new DefaultConverterRegistry();", "+            component = createComponent( ConverterRegistry.ROLE, DefaultConverterRegistry.class );", "-            component = new DefaultTypeManager();", "+            component = createComponent( TypeManager.ROLE, DefaultTypeManager.class );", "-            component = new DefaultConfigurer();", "+            component = createComponent( Configurer.ROLE, DefaultConfigurer.class );", "-            component = new DefaultDeployer();", "+            component = createComponent( Deployer.ROLE, DefaultDeployer.class );", "-            component = new DefaultExecutor();", "+            component = createComponent( Executor.ROLE, DefaultExecutor.class );", "-            component = new DefaultExtensionManager();", "+            component = createComponent( ExtensionManager.ROLE, DefaultExtensionManager.class );", "-            component = new DefaultRoleManager();", "+            component = createComponent( RoleManager.ROLE, DefaultRoleManager.class );", "-            component = new DefaultPropertyResolver();", "+            component = createComponent( PropertyResolver.ROLE, DefaultPropertyResolver.class );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "834a11bd832ea68ea5a828424a9789c5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/test/org/apache/myrmidon/components/AbstractComponentTest.java", "commitBeforeChange": "6e94185c884573a74c64713cd53a94032477580d", "commitAfterChange": "56074611a906b46f7db1a78cb3aba8224aa79582", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected final ServiceManager getServiceManager() throws Exception", "signatureAfterChange": "     protected final ServiceManager getServiceManager() throws Exception", "diff": ["-            Object component = new DefaultMasterConverter();", "+            Object component = createComponent( Converter.ROLE, DefaultMasterConverter.class );", "-            component = new DefaultConverterRegistry();", "+            component = createComponent( ConverterRegistry.ROLE, DefaultConverterRegistry.class );", "-            component = new DefaultTypeManager();", "+            component = createComponent( TypeManager.ROLE, DefaultTypeManager.class );", "-            component = new DefaultConfigurer();", "+            component = createComponent( Configurer.ROLE, DefaultConfigurer.class );", "-            component = new DefaultDeployer();", "+            component = createComponent( Deployer.ROLE, DefaultDeployer.class );", "-            component = new DefaultExecutor();", "+            component = createComponent( Executor.ROLE, DefaultExecutor.class );", "-            component = new DefaultExtensionManager();", "+            component = createComponent( ExtensionManager.ROLE, DefaultExtensionManager.class );", "-            component = new DefaultRoleManager();", "+            component = createComponent( RoleManager.ROLE, DefaultRoleManager.class );", "-            component = new DefaultPropertyResolver();", "+            component = createComponent( PropertyResolver.ROLE, DefaultPropertyResolver.class );"]}]}
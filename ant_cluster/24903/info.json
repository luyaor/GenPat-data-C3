{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9a35312dc64c5a118db4958ba5a45302", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87cdff24bf736a0a3f3778b29cd39a79", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/ImportTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void testImportInTargetNotAllowed()", "signatureAfterChange": "      @Test     public void testImportInTargetNotAllowed()", "diff": ["+    @Test", "-        configureProject(", "+        buildRule.configureProject(", "-        expectBuildExceptionContaining(", "-            \"do-import\", \"not a top level task\",", "-            \"import only allowed as a top-level task\");", "+        try {", "+        \tbuildRule.executeTarget(\"do-import\");", "+        \tfail(\"Build exception should have been thrown as import only allowed in top level task\");", "+        } catch(BuildException ex) {", "+        \tassertContains( \"not a top level task\", \"import only allowed as a top-level task\", ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "927dead89c94cc642639155ff4d09176", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/condition/IsReachableTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": "      public void testBadURL() throws Exception", "signatureAfterChange": "      @Test     public void testBadURL() throws Exception", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testBadURL\",", "-                \"error in URL\",", "-                IsReachable.ERROR_BAD_URL);", "+        try {", "+            buildRule.executeTarget(\"testBadURL\");", "+            fail(\"Build exception expected: error in URL\");", "+        } catch(BuildException ex) {", "+            AntAssert.assertContains(IsReachable.ERROR_BAD_URL, ex.getMessage());", "+        }"]}]}
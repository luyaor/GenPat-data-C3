{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "18f7fdb6f764b6c543a356576611814a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5094c2c978e4dadb7daadf77e76cd8cd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/builder/DefaultProjectBuilder.java", "commitBeforeChange": "b3c44651dba0b0dd33a68baab7afdb4175d6fe93", "commitAfterChange": "f522a0a7baf7e79ed933ed7714e6c6c15c51ac0a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void buildTarget( final DefaultProject project, final Configuration target )         throws Exception", "signatureAfterChange": "     private void buildTarget( final DefaultProject project, final Configuration target )         throws Exception", "diff": ["-            throw new Exception( \"Discovered un-named target at \" +", "-                                 target.getLocation() );", "+            final String message = ", "+                REZ.getString( \"ant.target-noname.error\", target.getLocation() );", "+            throw new Exception( message );", "-            throw new Exception( \"Target with an invalid name at \" +", "-                                 target.getLocation() );", "+            final String message = ", "+                REZ.getString( \"ant.target-bad-name.error\", target.getLocation() );", "+            throw new Exception( message );", "-        getLogger().debug( \"Parsing target: \" + name );", "+        if( getLogger().isDebugEnabled() )", "+        {", "+            final String message = REZ.getString( \"ant.target-parse.notice\", name );", "+            getLogger().debug( message );", "+        }", "-            throw new Exception( \"Discovered invalid target that has both a if and \" +", "-                                    \"unless condition at \" + target.getLocation() );", "+            final String message = ", "+                REZ.getString( \"ant.target-bad-logic.error\", target.getLocation() );", "+            throw new Exception( message );", "-            getLogger().debug( \"Target if condition: \" + ifCondition );", "+            if( getLogger().isDebugEnabled() )", "+            {", "+                final String message = REZ.getString( \"ant.target-if.notice\", ifCondition );", "+                getLogger().debug( message );", "+            }", "-            getLogger().debug( \"Target unless condition: \" + unlessCondition );", "+            if( getLogger().isDebugEnabled() )", "+            {", "+                final String message = REZ.getString( \"ant.target-unless.notice\", unlessCondition );", "+                getLogger().debug( message );", "+            }", "-                    throw new Exception( \"Discovered empty dependency in target \" +", "-                                         target.getName() + \" at \" + target.getLocation() );", "+                    final String message = REZ.getString( \"ant.target-bad-dependency.error\", ", "+                                                          target.getName(), ", "+                                                          target.getLocation() );", "+                    throw new Exception( message );", "-                getLogger().debug( \"Target dependency: \" + dependency );", "+                if( getLogger().isDebugEnabled() )", "+                {", "+                    final String message = REZ.getString( \"ant.target-dependency.notice\", dependency );", "+                    getLogger().debug( message );", "+                }   ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a468c6da0c33f57b7f6208759ffb23d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/frontends/CLIMain.java", "commitBeforeChange": "25c4d95cd51429feee002187eba3dc0acfbb4d3e", "commitAfterChange": "de190c4094ef4f0bb42d710d95b74bcef765aadc", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private void execute( final String[] args )         throws Exception", "signatureAfterChange": "      private void execute( final String[] args )         throws Exception", "diff": ["-        //handle logging...", "-        final String logLevel = m_parameters.getParameter( \"log.level\", null );", "-        enableLogging( new LogKitLogger( createLogger( logLevel ) ) );", "+        prepareLogging();", "-        final String home = m_parameters.getParameter( \"myrmidon.home\", null );", "-        final File homeDir = ( new File( home ) ).getAbsoluteFile();", "-        if( !homeDir.isDirectory() )", "-        {", "-            final String message = REZ.getString( \"home-not-dir.error\", homeDir );", "-            throw new Exception( message );", "-        }", "+        final File homeDir = getHomeDir();", "+        final File buildFile = getBuildFile();", "-        final String filename = m_parameters.getParameter( \"filename\", null );", "-        final File buildFile = ( new File( filename ) ).getCanonicalFile();", "-        if( !buildFile.isFile() )", "-        {", "-            final String message = REZ.getString( \"bad-file.error\", buildFile );", "-            throw new Exception( message );", "-        }", "-", "-        if( getLogger().isInfoEnabled() )", "-        {", "-            final String message = REZ.getString( \"buildfile.notice\", buildFile );", "-            getLogger().info( message );", "-        }", "-", "-        if( getLogger().isInfoEnabled() )", "-        {", "-            final String message = REZ.getString( \"homedir.notice\", homeDir );", "-            getLogger().info( message );", "-        }", "-        final Embeddor embeddor = createEmbeddor();", "-        setupLogger( embeddor );", "-        embeddor.parameterize( m_parameters );", "-        embeddor.initialize();", "-        embeddor.start();", "-", "-        //create the listener", "-        final String listenerName = m_parameters.getParameter( \"listener\", null );", "-        final ProjectListener listener = embeddor.createListener( listenerName );", "+        final Embeddor embeddor = prepareEmbeddor();", "+        final ProjectListener listener = prepareListener( embeddor );", "-        BufferedReader reader = null;", "-", "+        if( !incremental )", "+        {", "+            executeBuild( embeddor, project, listener );", "+        }", "+        else", "+        {", "+            executeIncrementalBuild( embeddor, project, listener );", "+        }", "+", "+        shutdownEmbeddor( embeddor );", "+    }", "-            //actually do the build ...", "-            final Workspace workspace = embeddor.createWorkspace( m_defines );", "-            workspace.addProjectListener( listener );", "-", "-            doBuild( workspace, project, m_targets );", "-", "-            if( !incremental )", "-            {", "-                break;", "-            }"]}]}
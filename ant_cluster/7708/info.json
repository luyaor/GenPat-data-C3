{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a72c40983903d31bdb1d3d2ae421ea6d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ba148d5c508d954a86e574acb4f9251", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ComponentManager.java", "commitBeforeChange": "408a4c09b05e9710ce19870d99a5ef79ea9c82a7", "commitAfterChange": "8e684f3e6e608fb3d36212faea4c1c7ad80f4323", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void defineComponent(int defType, String componentName,                                  Class componentClass)          throws ExecutionException", "signatureAfterChange": "     private void defineComponent(AntLibFactory factory, ClassLoader loader,                                  int defType, String componentName,                                  String className)          throws ExecutionException", "diff": ["-    private void defineComponent(int defType, String componentName,", "-                                 Class componentClass)", "+    private void defineComponent(AntLibFactory factory, ClassLoader loader,", "+                                 int defType, String componentName,", "+                                 String className)", "-        AntLibrary wrapperLibrary", "-             = new AntLibrary(defType, componentName, componentClass);", "-        String libraryId = wrapperLibrary.getLibraryId();", "-        antLibraries.put(libraryId, wrapperLibrary);", "-        importLibrary(libraryId);", "+        DynamicLibrary dynamicLibrary", "+             = new DynamicLibrary(factory, loader);", "+        dynamicLibrary.addComponent(defType, componentName, className);", "+        dynamicLibraries.put(dynamicLibrary.getLibraryId(), dynamicLibrary);", "+        importLibraryDef(dynamicLibrary, componentName, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5a55abeffb4c936607e9b8e5861fe67", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/embeddor/DefaultEmbeddor.java", "commitBeforeChange": "46330b41c1a0cd642c895b8ff39ab295a3519ca4", "commitAfterChange": "f42a96f3046b6a665f9755123c9f7939e53737ba", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private Object createService( final String component, final Class clazz )         throws Exception", "signatureAfterChange": "     private Object createService( final Class roleType, final String defaultImpl )         throws Exception", "diff": ["-    private Object createService( final String component, final Class clazz )", "+    private Object createService( final Class roleType, final String defaultImpl )", "+        final String role = roleType.getName();", "+        final String className = m_parameters.getParameter( role, defaultImpl );", "+", "-            final Object object = Class.forName( component ).newInstance();", "+            final Object object = Class.forName( className ).newInstance();", "-            if( !clazz.isInstance( object ) )", "+            if( !roleType.isInstance( object ) )", "-                final String message = REZ.getString( \"bad-type.error\", component, clazz.getName() );", "+                final String message = REZ.getString( \"bad-type.error\", className, roleType.getName() );", "-            final String message = REZ.getString( \"bad-ctor.error\", clazz.getName(), component );", "+            final String message = REZ.getString( \"bad-ctor.error\", roleType.getName(), className );", "-                REZ.getString( \"no-instantiate.error\", clazz.getName(), component );", "+                REZ.getString( \"no-instantiate.error\", roleType.getName(), className );", "-                REZ.getString( \"no-class.error\", clazz.getName(), component );", "+                REZ.getString( \"no-class.error\", roleType.getName(), className );"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c29b63a305a7ad1448e1fabeacea653", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f3fc56168007776485c32cc80adb845", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "cca008dd0001628eefae7a0ebffba4815a6909f1", "commitAfterChange": "021fdf251c92ecb3981724d83c0265dc770280b3", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 35, "signatureBeforeChange": "     protected void execute(JUnitTest arg) throws BuildException", "signatureAfterChange": "     protected void execute(JUnitTest arg) throws BuildException", "diff": ["-            exitValue = executeAsForked(test, watchdog);", "+            exitValue = executeAsForked(test, watchdog, null);", "+        actOnTestResult(exitValue, wasKilled, test, \"Test \" + test.getName());", "+    }", "-        // if there is an error/failure and that it should halt, stop", "-        // everything otherwise just log a statement", "-        boolean errorOccurredHere =", "-            exitValue == JUnitTestRunner.ERRORS || wasKilled;", "-        boolean failureOccurredHere =", "-            exitValue != JUnitTestRunner.SUCCESS || wasKilled;", "-        if (errorOccurredHere || failureOccurredHere) {", "-            if ((errorOccurredHere && test.getHaltonerror())", "-                || (failureOccurredHere && test.getHaltonfailure())) {", "-                throw new BuildException(\"Test \" + test.getName() + \" failed\"", "-                    + (wasKilled ? \" (timeout)\" : \"\"), getLocation());", "-            } else {", "-                log(\"TEST \" + test.getName() + \" FAILED\"", "-                    + (wasKilled ? \" (timeout)\" : \"\"), Project.MSG_ERR);", "-                if (errorOccurredHere && test.getErrorProperty() != null) {", "-                    getProject().setNewProperty(test.getErrorProperty(), \"true\");", "-                if (failureOccurredHere && test.getFailureProperty() != null) {", "-                    getProject().setNewProperty(test.getFailureProperty(), \"true\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d50a6dae58f51611274725055574b151", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "3ce64dd501a7e5dfd84967399cc4c68c643de810", "commitAfterChange": "b941f2ef443cbbaec2b995b3c34958067c4979c3", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 50, "signatureBeforeChange": "     private void concatenate(char[] buffer, Writer writer, Reader in)         throws IOException", "signatureAfterChange": "      private Reader getFilteredReader(Reader r)", "diff": ["-    /** Concatenate a single reader to the writer using buffer */", "-    private void concatenate(char[] buffer, Writer writer, Reader in)", "-        throws IOException {", "-        if (filterChains != null) {", "-            ChainReaderHelper helper = new ChainReaderHelper();", "-            helper.setBufferSize(BUFFER_SIZE);", "-            helper.setPrimaryReader(in);", "-            helper.setFilterChains(filterChains);", "-            helper.setProject(getProject());", "-            in = new BufferedReader(helper.getAssembledReader());", "-        }", "-        while (true) {", "-            int nRead = in.read(buffer, 0, buffer.length);", "-            if (nRead == -1) {", "-                break;", "-            }", "-            writer.write(buffer, 0, nRead);", "-        }", "-        writer.flush();", "-    }", "+", "+    private Reader getFilteredReader(Reader r) {", "+        if (filterChains == null) {", "+            return r;", "+        }", "+        ChainReaderHelper helper = new ChainReaderHelper();", "+        helper.setBufferSize(BUFFER_SIZE);", "+        helper.setPrimaryReader(r);", "+        helper.setFilterChains(filterChains);", "+        helper.setProject(getProject());", "+        //used to be a BufferedReader here, but we should be buffering lower:", "+        return helper.getAssembledReader();", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "173cd7bf411739a9530b086ba61b9bff", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2581a02a0d2eb2d22b1bd1907dabb832", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/AbstractSshMessage.java", "commitBeforeChange": "db261bb4de9cd85c8b10068e45b91faed50dfba5", "commitAfterChange": "a5ec1501c919f54d9becf781db44e2e529676fd5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      protected void waitForAck(InputStream in) throws IOException", "signatureAfterChange": "     protected void waitForAck(InputStream in)          throws IOException, BuildException", "diff": ["-    protected void waitForAck(InputStream in) throws IOException {", "-        int b = 0;", "-        do {", "-            b = in.read();", "-        } while (b > 0);", "+     */", "+    protected void waitForAck(InputStream in) ", "+        throws IOException, BuildException {", "+        int b = in.read();", "+", "+        // b may be 0 for success,", "+        //          1 for error,", "+        //          2 for fatal error,", "+", "+        if (b == -1) {", "+            // didn't receive any response", "+            throw new BuildException(\"No response from server\");", "+        } else if (b != 0) {", "+            StringBuffer sb = new StringBuffer();", "+", "+            int c = in.read();", "+            while (c > 0 && c != '\\n') {", "+                sb.append((char) c);", "+                c = in.read();", "+            }", "+            ", "+            if (b == 1) {", "+                throw new BuildException(\"server indicated an error: \"", "+                                         + sb.toString());", "+            } else if (b == 2) {", "+                throw new BuildException(\"server indicated a fatal error: \"", "+                                         + sb.toString());", "+            } else {", "+                throw new BuildException(\"unknown response, code \" + b", "+                                         + \" message: \" + sb.toString());", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26edca42e47040490b3e6416ed28600a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/XMLValidateTask.java", "commitBeforeChange": "6650efb105e0cdd4941ffc2c98f2aa8ee6e1dfea", "commitAfterChange": "e42bd46a51dd6347c0961e311bd3717c24d4ea8c", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private boolean setFeature(String feature, boolean value, boolean warn)", "signatureAfterChange": "     private void setFeature(String feature, boolean value)          throws BuildException", "diff": ["-    private boolean setFeature(String feature, boolean value, boolean warn) {", "+    private void setFeature(String feature, boolean value) ", "+        throws BuildException {", "-        boolean  toReturn = false;", "-            toReturn = true;", "-            if (warn) {", "-                log(\"Could not set feature '\"", "-                    + feature", "-                    + \"' because the '\" +", "-                       readerClassName + \"' parser doesn't recognize it\",", "-                    Project.MSG_WARN);", "-            }", "+            throw new BuildException(\"Parser \" + xmlReader.getClass().getName()", "+                                     + \" doesn't recognize feature \"", "+                                     + feature, e, getLocation());", "-            if (warn) {", "-                log(\"Could not set feature '\"", "-                    + feature", "-                    + \"' because the '\" +", "-                        readerClassName + \"' parser doesn't support it\",", "-                    Project.MSG_WARN);", "-            }", "+            throw new BuildException(\"Parser \" + xmlReader.getClass().getName()", "+                                     + \" doesn't support feature \"", "+                                     + feature, e, getLocation());", "-        return toReturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "444de4be481b9ea6c9fd325a2f1ee963", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "e7cca3123ec529a60595f5a8f86d874b52db026a", "commitAfterChange": "9ce98074308e646c89b868a37f5ed90c0ce3396b", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void execute()", "signatureAfterChange": "     public void execute()", "diff": ["+", "+        // if binary check if incompatible attributes are used", "+        if (binary) {", "+            if (destinationFile == null) {", "+                throw new BuildException(", "+                    \"DestFile attribute is required for binary concatenation\");", "+            }", "+", "+            if (textBuffer != null) {", "+                throw new BuildException(", "+                    \"Nested text is incompatible with binary concatenation\");", "+            }", "+            if (encoding != null || outputEncoding != null) {", "+                throw new BuildException(", "+                    \"Seting input or output encoding is incompatible with binary\"", "+                    + \" concatenation\");", "+            }", "+            if (filterChains != null) {", "+                throw new BuildException(", "+                    \"Setting filters is incompatible with binary concatenation\");", "+            }", "+            if (fixLastLine) {", "+                throw new BuildException(", "+                    \"Setting fixlastline is incompatible with binary concatenation\");", "+            }", "+            if (header != null || footer != null) {", "+                throw new BuildException(", "+                    \"Nested header or footer is incompatible with binary concatenation\");", "+            }", "+        }", "-        cat();", "+        if (binary) {", "+            binaryCat();", "+        } else {", "+            cat();", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a09d0d39debeb9fe7dfef64318505f2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "12df7ec426adb3e47cfb0d268d9b646769e38ac7", "commitAfterChange": "152be14c152edab99f90e8c71f589a6bf8087bbe", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "     public void execute()         throws BuildException", "signatureAfterChange": "     public void execute()         throws BuildException", "diff": ["-                throw new BuildException(\"FTP connection failed: \" + ftp.getReplyString());", "+                throw new BuildException(\"FTP connection failed: \" ", "+                                         + ftp.getReplyString());", "-                    throw new BuildException(", "-                                             \"could not set transfer type: \" +", "+                    throw new BuildException(\"could not set transfer type: \" +", "-                    throw new BuildException(", "-                                             \"could not enter into passive mode: \" +", "+                    throw new BuildException(\"could not enter into passive \"", "+                                             + \"mode: \" +", "-               doSiteCommand(ftp,\"umask \" + umask);", "+                doSiteCommand(ftp, \"umask \" + umask);", "-            // If the action is MK_DIR, then the specified remote directory is the", "-            // directory to create.", "+            // If the action is MK_DIR, then the specified remote", "+            // directory is the directory to create.", "-                        throw new BuildException(", "-                                                 \"could not change remote directory: \" +", "+                        throw new BuildException(\"could not change remote \"", "+                                                 + \"directory: \" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b34e57b558c8b5fb152cbffbaae85792", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/Permissions.java", "commitBeforeChange": "446a11fca8f834862f54a49010c1551ffa572c0d", "commitAfterChange": "543e74c7843629a29d55ae81068c57385e6b3eab", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "         public void checkPermission(java.security.Permission perm)", "signatureAfterChange": "         public void checkPermission(java.security.Permission perm)", "diff": ["-                if (!granted.implies(perm)) {", "-                    throw new SecurityException(\"Permission \" + perm +\" was not granted.\");", "-                }", "-                for (Iterator i = revokedPermissions.listIterator(); i.hasNext();) {", "-                    if (((Permissions.Permission)i.next()).matches(perm)) {", "-                        throw new SecurityException(\"Permission \" + perm +\" was revoked.\");", "+                if (delegateToOldSM && !perm.getName().equals(\"exitVM\")) {", "+                    boolean permOK = false;", "+                    if (granted.implies(perm)) {", "+                        permOK = true;", "+                    checkRevoked(perm);", "+                    /*", "+                     if the permission was not explicitly granted or revoked", "+                     the original security manager will do its work", "+                    */", "+                    if (!permOK && origSm != null) {", "+                        origSm.checkPermission(perm);", "+                    }", "+                }  else {", "+                    if (!granted.implies(perm)) {", "+                        throw new SecurityException(\"Permission \" + perm + \" was not granted.\");", "+                    }", "+                    checkRevoked(perm);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d75ddfcb52c15e0a0226d2b7ed534450", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/util/ChainReaderHelper.java", "commitBeforeChange": "1f71acf427e164e75bc4f90b1ddaecd51998709b", "commitAfterChange": "00ec1c435af8d15b42cb779373026ceedea92e59", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public final Reader getAssembledReader() throws BuildException", "signatureAfterChange": "     public final Reader getAssembledReader() throws BuildException", "diff": ["-                                    throw new BuildException(className +", "-                                        \" does not extend java.io.FilterReader\");", "+                                    throw new BuildException(className", "+                                        + \" does not extend java.io.FilterReader\");", "-                                    if (types.length == 1 &&", "-                                        types[0].isAssignableFrom(Reader.class)) {", "+                                    if (types.length == 1", "+                                        && types[0].isAssignableFrom(Reader.class)) {", "-                                if ( !consPresent) {", "-                                    throw new BuildException( className +", "-                                            \" does not define a public constructor\" +", "-                                            \" that takes in a Reader as its single argument.\");", "+                                if (!consPresent) {", "+                                    throw new BuildException(className", "+                                        + \" does not define a public constructor\"", "+                                        + \" that takes in a Reader as its \"", "+                                        + \"single argument.\");"]}]}
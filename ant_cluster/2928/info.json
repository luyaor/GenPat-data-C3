{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ebb67a4c5d1705a03f1e8847fb2dfc05", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4572afbaa09c5b77554eeab4357a4252", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ComponentHelper.java", "commitBeforeChange": "780ad2d725a7f88a26d8ea33a804fa5c8becfc8f", "commitAfterChange": "31deeb980977afb1cfe3234eb17a1360aab49d5e", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 18, "signatureBeforeChange": "     public void addDataTypeDefinition(AntTypeDefinition def)", "signatureAfterChange": "     public void addDataTypeDefinition(AntTypeDefinition def)", "diff": ["-        updateDataTypeDefinition(def);", "+        if (!def.isRestrict()) {", "+           updateDataTypeDefinition(def);", "+        } else {", "+            updateRestrictedDefinition(def);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61af098fd291c500e9c9d353a4a797f6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/TaskAdapter.java", "commitBeforeChange": "2c4b09e15f09ece3d4e8276687a809ddefa9408f", "commitAfterChange": "9f1eefd3a2e6760daa8941c1c69b4825f4c136fa", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void checkTaskClass(final Class taskClass,                                       final Project project)", "signatureAfterChange": "     public static void checkTaskClass(final Class taskClass,                                       final Project project)", "diff": ["-        // don't have to check for interface, since then", "-        // taskClass would be abstract too.", "-        try {", "-            final Method executeM = taskClass.getMethod(\"execute\", null);", "-            // don't have to check for public, since", "-            // getMethod finds public method only.", "-            // don't have to check for abstract, since then", "+        if (!Dispatchable.class.isAssignableFrom(taskClass)) {", "+            // don't have to check for interface, since then", "-            if (!Void.TYPE.equals(executeM.getReturnType())) {", "-                final String message = \"return type of execute() should be \"", "-                    + \"void but was \\\"\" + executeM.getReturnType() + \"\\\" in \"", "-                    + taskClass;", "-                project.log(message, Project.MSG_WARN);", "+            try {", "+                final Method executeM = taskClass.getMethod(\"execute\", null);", "+                // don't have to check for public, since", "+                // getMethod finds public method only.", "+                // don't have to check for abstract, since then", "+                // taskClass would be abstract too.", "+                if (!Void.TYPE.equals(executeM.getReturnType())) {", "+                    final String message = \"return type of execute() should be \"", "+                        + \"void but was \\\"\" + executeM.getReturnType() + \"\\\" in \"", "+                        + taskClass;", "+                    project.log(message, Project.MSG_WARN);", "+                }", "+            } catch (NoSuchMethodException e) {", "+                final String message = \"No public execute() in \" + taskClass;", "+                project.log(message, Project.MSG_ERR);", "+                throw new BuildException(message);", "+            } catch (LinkageError e) {", "+                String message = \"Could not load \" + taskClass + \": \" + e;", "+                project.log(message, Project.MSG_ERR);", "+                throw new BuildException(message, e);", "-        } catch (NoSuchMethodException e) {", "-            final String message = \"No public execute() in \" + taskClass;", "-            project.log(message, Project.MSG_ERR);", "-            throw new BuildException(message);", "-        } catch (LinkageError e) {", "-            String message = \"Could not load \" + taskClass + \": \" + e;", "-            project.log(message, Project.MSG_ERR);", "-            throw new BuildException(message, e);"]}]}
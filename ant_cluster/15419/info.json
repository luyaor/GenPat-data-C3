{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8bdf77585cbbef6b84873830352ddac8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ad28726a8cf17aea47d4ddeb9d515fb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/tar/TarEntry.java", "commitBeforeChange": "b43f4224d8fe9d1e7d628e88df394a7dfed46d1b", "commitAfterChange": "2e5b53fa106b848646493cb6f6ea74616973aca0", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 55, "signatureBeforeChange": "     public void parseTarHeader(byte[] header)", "signatureAfterChange": "     public void parseTarHeader(byte[] header)", "diff": ["+        try {", "+            parseTarHeader(header, TarUtils.DEFAULT_ENCODING);", "+        } catch (IOException ex) {", "+            try {", "+                parseTarHeader(header, TarUtils.DEFAULT_ENCODING, true);", "+            } catch (IOException ex2) {", "+                // not really possible", "+                throw new RuntimeException(ex2);", "+            }", "+        }", "+    }", "-        name = TarUtils.parseName(header, offset, NAMELEN);", "-        mode = (int) TarUtils.parseOctal(header, offset, MODELEN);", "-        userId = (int) TarUtils.parseOctal(header, offset, UIDLEN);", "-        groupId = (int) TarUtils.parseOctal(header, offset, GIDLEN);", "-        size = TarUtils.parseOctal(header, offset, SIZELEN);", "-        modTime = TarUtils.parseOctal(header, offset, MODTIMELEN);", "-        linkName = TarUtils.parseName(header, offset, NAMELEN);", "-        magic = TarUtils.parseName(header, offset, MAGICLEN);", "-        offset += MAGICLEN;", "-        userName = TarUtils.parseName(header, offset, UNAMELEN);", "-        groupName = TarUtils.parseName(header, offset, GNAMELEN);", "-        devMajor = (int) TarUtils.parseOctal(header, offset, DEVLEN);", "-        devMinor = (int) TarUtils.parseOctal(header, offset, DEVLEN);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da60ff53b8f12827f3c30efea2cf4e16", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "aa43e37a025cdf54b8914b8283e57419a253ed59", "commitAfterChange": "dee95e3acc5154aee03ff5f91f9a56426ae79f3f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void closeEntry() throws IOException", "signatureAfterChange": "     public void closeEntry() throws IOException", "diff": ["-        if (entry == null) {", "-            return;", "+        if (finished) {", "+            throw new IOException(\"Stream has already been finished\");", "+        if (entry == null) {", "+            throw new IOException(\"No current entry to close\");", "+        }", "+", "+        if (!entry.hasWritten) {", "+            write(new byte[0], 0, 0);", "+        }", "+", "+        flushDeflater();", "+", "+        final Zip64Mode effectiveMode = getEffectiveZip64Mode(entry.entry);", "+        long bytesWritten = written - entry.dataStart;", "-        if (entry.getMethod() == DEFLATED) {", "-            def.finish();", "-            while (!def.finished()) {", "-                deflate();", "-            }", "+        final boolean actuallyNeedsZip64 =", "+            handleSizesAndCrc(bytesWritten, realCrc, effectiveMode);", "-            entry.setSize(adjustToLong(def.getTotalIn()));", "-            entry.setCompressedSize(adjustToLong(def.getTotalOut()));", "-            entry.setCrc(realCrc);", "-", "-            def.reset();", "-", "-            written += entry.getCompressedSize();", "-        } else if (raf == null) {", "-            if (entry.getCrc() != realCrc) {", "-                throw new ZipException(\"bad CRC checksum for entry \"", "-                                       + entry.getName() + \": \"", "-                                       + Long.toHexString(entry.getCrc())", "-                                       + \" instead of \"", "-                                       + Long.toHexString(realCrc));", "-            }", "-", "-            if (entry.getSize() != written - dataStart) {", "-                throw new ZipException(\"bad size for entry \"", "-                                       + entry.getName() + \": \"", "-                                       + entry.getSize()", "-                                       + \" instead of \"", "-                                       + (written - dataStart));", "-            }", "-        } else { /* method is STORED and we used RandomAccessFile */", "-            long size = written - dataStart;", "-", "-            entry.setSize(size);", "-            entry.setCompressedSize(size);", "-            entry.setCrc(realCrc);", "-        }", "-", "-        // If random access output, write the local file header containing", "-        // the correct CRC and compressed/uncompressed sizes", "-            long save = raf.getFilePointer();", "-", "-            raf.seek(localDataStart);", "-            writeOut(ZipLong.getBytes(entry.getCrc()));", "-            writeOut(ZipLong.getBytes(entry.getCompressedSize()));", "-            writeOut(ZipLong.getBytes(entry.getSize()));", "-            raf.seek(save);", "+            rewriteSizesAndCrc(actuallyNeedsZip64);", "-        writeDataDescriptor(entry);", "+        writeDataDescriptor(entry.entry);"]}]}
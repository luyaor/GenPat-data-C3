{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a33a2f9d0a0ae5a3b424f0ab7b276cef", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f1a4e7a22f3e40fb905bc2bb775e20b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/test/org/apache/myrmidon/AbstractProjectTest.java", "commitBeforeChange": "274da3301287be067b66a5778b27bfa98ef0a662", "commitAfterChange": "b91e4a3c1d8310dea42c2c353ab016d9c5425109", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected void executeTarget( final File projectFile,                                   final String targetName,                                   final ProjectListener listener )         throws Exception", "signatureAfterChange": "     protected void executeTarget( final File projectFile,                                   final String targetName,                                   final ProjectListener listener )         throws Exception", "diff": ["-        final Embeddor embeddor = getEmbeddor();", "-        final Project project = embeddor.createProject( projectFile.getAbsolutePath(), null, null );", "-        final Workspace workspace = embeddor.createWorkspace( new Parameters() );", "+        final EmbeddedAnt embeddor = new EmbeddedAnt();", "+        embeddor.setHomeDirectory( getInstallDirectory() );", "+        embeddor.enableLogging( getLogger() );", "+        embeddor.setSharedClassLoader( getClass().getClassLoader() );", "+        embeddor.setProjectFile( projectFile.getAbsolutePath() );", "+        embeddor.setProjectListener( null );", "-        workspace.addProjectListener( tracker );", "+        embeddor.addProjectListener( tracker );", "-            workspace.addProjectListener( listener );", "+            embeddor.addProjectListener( listener );", "-        workspace.executeProject( project, targetName );", "+        embeddor.executeTargets( new String[] { targetName } );", "+", "+        embeddor.stop();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "837fd6ffd8ed869d1f779e92dfe6347c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/image/ImageTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testOverwriteTrue()", "signatureAfterChange": "      @Test     public void testOverwriteTrue() throws InterruptedException", "diff": ["-    public void testOverwriteTrue() {", "-        expectLogContaining(\"testSimpleScale\", \"Processing File\");", "-        File f = new File(getOutputDir(), LARGEIMAGE);", "+    @Test", "+    public void testOverwriteTrue() throws InterruptedException {", "+        buildRule.executeTarget(\"testSimpleScale\");", "+        AntAssert.assertContains(\"Processing File\", buildRule.getLog());", "+        File f = new File(buildRule.getOutputDir(), LARGEIMAGE);", "+        assumeTrue(\"Could not change file modificaiton date\",", "+                f.setLastModified(f.lastModified() - (FILE_UTILS.getFileTimestampGranularity() * 2)));", "-        try {", "-            Thread.sleep(FILE_UTILS", "-                         .getFileTimestampGranularity());", "-        }", "-        catch (InterruptedException e) {}", "-        expectLogContaining(\"testOverwriteTrue\", \"Processing File\");", "-        f = new File(getOutputDir(), LARGEIMAGE);", "+        buildRule.executeTarget(\"testOverwriteTrue\");", "+        AntAssert.assertContains(\"Processing File\", buildRule.getLog());", "+        f = new File(buildRule.getOutputDir(), LARGEIMAGE);"]}]}
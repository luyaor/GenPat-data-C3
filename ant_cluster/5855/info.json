{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f141becf505da1982dfc50ff2c56a1f9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ad98e6ab18d90cc6f026b93ba683e34", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/RmicAdvancedTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 20, "signatureBeforeChange": "     public void testWrongClass() throws Exception", "signatureAfterChange": "     @Test     public void testWrongClass() throws Exception", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testWrongClass\",", "-                \"class not an RMIC adapter\",", "-                RmicAdapterFactory.ERROR_NOT_RMIC_ADAPTER);", "+        try {", "+            buildRule.executeTarget(\"testWrongClass\");", "+            fail(\"Class not an RMIC adapter\");", "+        } catch (BuildException ex) {", "+            AntAssert.assertContains(RmicAdapterFactory.ERROR_NOT_RMIC_ADAPTER, ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cd781940a6428ad64c96b3830dcebc6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/RmicAdvancedTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 18, "signatureBeforeChange": "     public void testBadName() throws Exception", "signatureAfterChange": "     @Test     public void testBadName() throws Exception", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testBadName\",", "-                \"compiler not known\",", "-                RmicAdapterFactory.ERROR_UNKNOWN_COMPILER);", "+        try {", "+            buildRule.executeTarget(\"testBadName\");", "+            fail(\"Compile not known\");", "+        } catch (BuildException ex) {", "+            AntAssert.assertContains(RmicAdapterFactory.ERROR_UNKNOWN_COMPILER, ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7062a839aee70d70029cd90c4c308c83", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/script/ScriptDefTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public void testDoubleAttribute()", "signatureAfterChange": "      @Test     public void testDoubleAttribute()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"doubleAttributeDef\",", "-            \"Should have detected duplicate attribute definition\",", "-            \"attr1 attribute more than once\");", "+        try {", "+            buildRule.executeTarget(\"doubleAttributeDef\");", "+            fail(\"Should have detected duplicate attirbute definition\");", "+        } catch(BuildException ex) {", "+            AntAssert.assertContains(\"attr1 attribute more than once\", ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76113a0c24f5faf23209ec671d902056", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/SchemaValidateTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void testNoFile() throws Exception", "signatureAfterChange": "      @Test     public void testNoFile() throws Exception", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testNoFile\",", "-                \"no file at file attribute\",", "-                SchemaValidate.SchemaLocation.ERROR_NO_FILE);", "+        try {", "+            buildRule.executeTarget(\"testNoFile\");", "+            fail(\"No file at file attribute\");", "+        } catch (BuildException ex) {", "+            AntAssert.assertContains(SchemaValidate.SchemaLocation.ERROR_NO_FILE,", "+                    ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b82edb9a21f76d6a981003f7f4f01fb4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/RmicAdvancedTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 23, "signatureBeforeChange": "     public void testMagicPropertyOverridesEmptyString() throws Exception", "signatureAfterChange": "     @Test     public void testMagicPropertyOverridesEmptyString() throws Exception", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testMagicPropertyOverridesEmptyString\",", "-                \"magic property not working\",", "-                RmicAdapterFactory.ERROR_UNKNOWN_COMPILER);", "+        try {", "+            buildRule.executeTarget(\"testMagicPropertyOverridesEmptyString\");", "+            fail(\"Magic property not working\");", "+        } catch (BuildException ex) {", "+            AntAssert.assertContains(RmicAdapterFactory.ERROR_UNKNOWN_COMPILER, ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdf558b399cf9e1b239b202ef8141748", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/SchemaValidateTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void testNoDoubleSchemaLocation() throws Exception", "signatureAfterChange": "      @Test     public void testNoDoubleSchemaLocation() throws Exception", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testNoDoubleSchemaLocation\",", "-                \"two locations for schemas\",", "-                SchemaValidate.SchemaLocation.ERROR_TWO_LOCATIONS);", "+        try {", "+            buildRule.executeTarget(\"testNoDoubleSchemaLocation\");", "+            fail(\"Two locations for schemas\");", "+        } catch (BuildException ex) {", "+            AntAssert.assertContains(SchemaValidate.SchemaLocation.ERROR_TWO_LOCATIONS,", "+                    ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c953208d18257090a2cf574cda365ffc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/RmicAdvancedTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public void testMagicProperty() throws Exception", "signatureAfterChange": "     @Test     public void testMagicProperty() throws Exception", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testMagicProperty\",", "-                \"magic property not working\",", "-                RmicAdapterFactory.ERROR_UNKNOWN_COMPILER);", "+        try {", "+            buildRule.executeTarget(\"testMagicProperty\");", "+            fail(\"Magic property not working\");", "+        } catch (BuildException ex) {", "+            AntAssert.assertContains(RmicAdapterFactory.ERROR_UNKNOWN_COMPILER, ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec886c62aa3eeaeb33b3e94ad8fdccd9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/SchemaValidateTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void testNoEmptySchemaLocation() throws Exception", "signatureAfterChange": "      @Test     public void testNoEmptySchemaLocation() throws Exception", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testNoEmptySchemaLocation\",", "-                \"empty schema location\",", "-                SchemaValidate.SchemaLocation.ERROR_NO_LOCATION);", "+        try {", "+            buildRule.executeTarget(\"testNoEmptySchemaLocation\");", "+            fail(\"Empty schema location\");", "+        } catch (BuildException ex) {", "+            AntAssert.assertContains(SchemaValidate.SchemaLocation.ERROR_NO_LOCATION,", "+                    ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef960e76047c6da517d016173b01f920", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/SchemaValidateTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testNoEmptySchemaNamespace() throws Exception", "signatureAfterChange": "      @Test     public void testNoEmptySchemaNamespace() throws Exception", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testNoEmptySchemaNamespace\",", "-                \"empty namespace URI\",SchemaValidate.SchemaLocation.ERROR_NO_URI);", "+        try {", "+            buildRule.executeTarget(\"testNoEmptySchemaNamespace\");", "+            fail(\"Empty namespace URI\");", "+        } catch (BuildException ex) {", "+            AntAssert.assertContains(SchemaValidate.SchemaLocation.ERROR_NO_URI, ex.getMessage());", "+        }"]}]}
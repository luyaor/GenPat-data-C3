{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "331c665044e54849446bba38a6430995", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1239164d9eb2313285c66dc9160bf8c1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/unix/SymlinkTest.java", "commitBeforeChange": "f1d71eaeb8e405cb6da3dad2fe9b8c84a7e9394f", "commitAfterChange": "9f30d0550989766a9ad2032363a5dfdb49ee6932", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void testFileUtilsMethods() throws Exception", "signatureAfterChange": "      public void testSymbolicLinkUtilsMethods() throws Exception", "diff": ["-    public void testFileUtilsMethods() throws Exception {", "+    public void testSymbolicLinkUtilsMethods() throws Exception {", "-            FileUtils fu = FileUtils.getFileUtils();", "+            SymbolicLinkUtils su = SymbolicLinkUtils.getSymbolicLinkUtils();", "-            assertFalse(fu.isSymbolicLink(null, f.getAbsolutePath()));", "-            assertFalse(fu.isSymbolicLink(f.getParentFile(),", "+            assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "+            assertFalse(su.isSymbolicLink(f.getParentFile(),", "-            assertFalse(fu.isDanglingSymbolicLink(null, f.getAbsolutePath()));", "-            assertFalse(fu.isDanglingSymbolicLink(f.getParentFile(),", "+            assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+            assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "-            assertFalse(fu.isSymbolicLink(null, f.getAbsolutePath()));", "-            assertFalse(fu.isSymbolicLink(f.getParentFile(),", "+            assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "+            assertFalse(su.isSymbolicLink(f.getParentFile(),", "-            assertFalse(fu.isDanglingSymbolicLink(null, f.getAbsolutePath()));", "-            assertFalse(fu.isDanglingSymbolicLink(f.getParentFile(),", "+            assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+            assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "-            assertFalse(fu.isSymbolicLink(null, f.getAbsolutePath()));", "-            assertFalse(fu.isSymbolicLink(f.getParentFile(),", "+            assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "+            assertFalse(su.isSymbolicLink(f.getParentFile(),", "-            assertFalse(fu.isDanglingSymbolicLink(null, f.getAbsolutePath()));", "-            assertFalse(fu.isDanglingSymbolicLink(f.getParentFile(),", "+            assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+            assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "-            assertFalse(fu.isSymbolicLink(null, f.getAbsolutePath()));", "-            assertFalse(fu.isSymbolicLink(f.getParentFile(),", "+            assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "+            assertFalse(su.isSymbolicLink(f.getParentFile(),", "-            assertFalse(fu.isDanglingSymbolicLink(null, f.getAbsolutePath()));", "-            assertFalse(fu.isDanglingSymbolicLink(f.getParentFile(),", "+            assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+            assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "-            assertTrue(fu.isSymbolicLink(null, f.getAbsolutePath()));", "-            assertTrue(fu.isSymbolicLink(f.getParentFile(),", "+            assertTrue(su.isSymbolicLink(f.getAbsolutePath()));", "+            assertTrue(su.isSymbolicLink(f.getParentFile(),", "-            assertFalse(fu.isDanglingSymbolicLink(null, f.getAbsolutePath()));", "-            assertFalse(fu.isDanglingSymbolicLink(f.getParentFile(),", "+            assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+            assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "-            assertTrue(fu.isSymbolicLink(null, f.getAbsolutePath()));", "-            assertTrue(fu.isSymbolicLink(f.getParentFile(),", "+            assertTrue(su.isSymbolicLink(f.getAbsolutePath()));", "+            assertTrue(su.isSymbolicLink(f.getParentFile(),", "-            assertFalse(fu.isDanglingSymbolicLink(null, f.getAbsolutePath()));", "-            assertFalse(fu.isDanglingSymbolicLink(f.getParentFile(),", "+            assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+            assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "-            assertFalse(fu.isSymbolicLink(null, f.getAbsolutePath()));", "-            assertFalse(fu.isSymbolicLink(f.getParentFile(),", "+            assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "+            assertFalse(su.isSymbolicLink(f.getParentFile(),", "-            assertTrue(fu.isDanglingSymbolicLink(null, f.getAbsolutePath()));", "-            assertTrue(fu.isDanglingSymbolicLink(f.getParentFile(),", "+            assertTrue(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+            assertTrue(su.isDanglingSymbolicLink(f.getParentFile(),", "-            assertFalse(fu.isSymbolicLink(null, f.getAbsolutePath()));", "-            assertFalse(fu.isSymbolicLink(f.getParentFile(),", "+            assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "+            assertFalse(su.isSymbolicLink(f.getParentFile(),", "-            assertTrue(fu.isDanglingSymbolicLink(null, f.getAbsolutePath()));", "-            assertTrue(fu.isDanglingSymbolicLink(f.getParentFile(),", "+            assertTrue(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+            assertTrue(su.isDanglingSymbolicLink(f.getParentFile(),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ab0bdb57b332211bf56f3ec53cf5a87", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/util/FileUtilsTest.java", "commitBeforeChange": "2d15e8d8b3af5f74bf06989fe1c5cce6e07e3471", "commitAfterChange": "257dadeaf0fb8588b80fa71b24ee3aca38ea19b7", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void testRemoveLeadingPath()", "signatureAfterChange": "     public void testRemoveLeadingPath()", "diff": ["-        assertEquals(\"bar\", fu.removeLeadingPath(new File(\"/foo\"),", "+        assertEquals(\"bar\", FILE_UTILS.removeLeadingPath(new File(\"/foo\"),", "-        assertEquals(\"bar\", fu.removeLeadingPath(new File(\"/foo/\"),", "+        assertEquals(\"bar\", FILE_UTILS.removeLeadingPath(new File(\"/foo/\"),", "-        assertEquals(\"bar\", fu.removeLeadingPath(new File(\"\\\\foo\"),", "+        assertEquals(\"bar\", FILE_UTILS.removeLeadingPath(new File(\"\\\\foo\"),", "-        assertEquals(\"bar\", fu.removeLeadingPath(new File(\"\\\\foo\\\\\"),", "+        assertEquals(\"bar\", FILE_UTILS.removeLeadingPath(new File(\"\\\\foo\\\\\"),", "-        assertEquals(\"bar\", fu.removeLeadingPath(new File(\"c:/foo\"),", "+        assertEquals(\"bar\", FILE_UTILS.removeLeadingPath(new File(\"c:/foo\"),", "-        assertEquals(\"bar\", fu.removeLeadingPath(new File(\"c:/foo/\"),", "+        assertEquals(\"bar\", FILE_UTILS.removeLeadingPath(new File(\"c:/foo/\"),", "-        assertEquals(\"bar\", fu.removeLeadingPath(new File(\"c:\\\\foo\"),", "+        assertEquals(\"bar\", FILE_UTILS.removeLeadingPath(new File(\"c:\\\\foo\"),", "-        assertEquals(\"bar\", fu.removeLeadingPath(new File(\"c:\\\\foo\\\\\"),", "+        assertEquals(\"bar\", FILE_UTILS.removeLeadingPath(new File(\"c:\\\\foo\\\\\"),", "-        assertEqualsIgnoreDriveCase(fu.normalize(\"/bar\").getAbsolutePath(),", "-                     fu.removeLeadingPath(new File(\"/foo\"), new File(\"/bar\")));", "-        assertEqualsIgnoreDriveCase(fu.normalize(\"/foobar\").getAbsolutePath(),", "-                     fu.removeLeadingPath(new File(\"/foo\"), new File(\"/foobar\")));", "+        assertEqualsIgnoreDriveCase(FILE_UTILS.normalize(\"/bar\").getAbsolutePath(),", "+                     FILE_UTILS.removeLeadingPath(new File(\"/foo\"), new File(\"/bar\")));", "+        assertEqualsIgnoreDriveCase(FILE_UTILS.normalize(\"/foobar\").getAbsolutePath(),", "+                     FILE_UTILS.removeLeadingPath(new File(\"/foo\"), new File(\"/foobar\")));", "-        assertEquals(\"\", fu.removeLeadingPath(new File(\"/foo/bar\"),", "+        assertEquals(\"\", FILE_UTILS.removeLeadingPath(new File(\"/foo/bar\"),", "-        assertEquals(\"\", fu.removeLeadingPath(new File(\"/foo/bar\"),", "+        assertEquals(\"\", FILE_UTILS.removeLeadingPath(new File(\"/foo/bar\"),", "-        assertEquals(\"\", fu.removeLeadingPath(new File(\"/foo/bar/\"),", "+        assertEquals(\"\", FILE_UTILS.removeLeadingPath(new File(\"/foo/bar/\"),", "-        assertEquals(\"\", fu.removeLeadingPath(new File(\"/foo/bar/\"),", "+        assertEquals(\"\", FILE_UTILS.removeLeadingPath(new File(\"/foo/bar/\"),", "-        assertEquals(expected, fu.removeLeadingPath(new File(\"/\"),", "+        assertEquals(expected, FILE_UTILS.removeLeadingPath(new File(\"/\"),", "-        assertEquals(expected, fu.removeLeadingPath(new File(\"c:/\"),", "+        assertEquals(expected, FILE_UTILS.removeLeadingPath(new File(\"c:/\"),", "-        assertEquals(expected, fu.removeLeadingPath(new File(\"c:\\\\\"),", "+        assertEquals(expected, FILE_UTILS.removeLeadingPath(new File(\"c:\\\\\"),"]}]}
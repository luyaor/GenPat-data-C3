{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a9b9f6d9a3e0440b9fb036818b5db58", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b2bbea840446bf1aa7745f67ca7f9bd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/common/org/apache/ant/common/util/AntException.java", "commitBeforeChange": "e0fef5cf64773a98734998b9736ded96fc8be2c7", "commitAfterChange": "81c17b6164451315e24ae774f1bed668cbca99ce", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void setLocation(Location location)", "signatureAfterChange": "     public void setLocation(Location newLocation, boolean override)", "diff": ["-    public void setLocation(Location location) {", "-        if (location == null) {", "-            this.location = Location.UNKNOWN_LOCATION;", "-        } else {", "-            this.location = location;", "+    public void setLocation(Location newLocation, boolean override) {", "+        if (override || location == Location.UNKNOWN_LOCATION) {", "+            if (newLocation == null) {", "+                this.location = Location.UNKNOWN_LOCATION;", "+            } else {", "+                this.location = newLocation;", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35d4f6a929c6386fe5b90040f5dfe300", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/AssertionsTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected void expectAssertion(String target)", "signatureAfterChange": "     private void expectAssertion(String target)", "diff": ["-    protected void expectAssertion(String target) {", "-        expectBuildExceptionContaining(target,", "-                \"assertion not thrown in \"+target,", "-                \"Java returned: 1\");", "+    private void expectAssertion(String target) {", "+        try {", "+            buildRule.executeTarget(target);", "+            fail(\"BuildException should have been thrown by assertion fail in task\");", "+        } catch (BuildException ex) {", "+            assertContains(\"assertion not thrown in \"+target, \"Java returned: 1\", ex.getMessage());", "+        }"]}]}
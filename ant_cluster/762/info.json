{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1cb59fd9a2ff83114d9108186dcddad0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47ea6a7ec3544d85907b6b00436fc9e2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Java.java", "commitBeforeChange": "8f4aa8719c4dfd626c0cc8b93fe9c40a8d263bf7", "commitAfterChange": "d1549366e5569d99134b9336b9bf53968ce40aaf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public int executeJava() throws BuildException", "signatureAfterChange": "     public int executeJava() throws BuildException", "diff": ["+", "-            throw new BuildException(\"Cannot execute a jar in non-forked mode. Please set fork='true'. \");", "+            throw new BuildException(\"Cannot execute a jar in non-forked mode.\"", "+                                     + \" Please set fork='true'. \");", "-        ", "-            return run(cmdl.getCommandline());", "-                log(\"JVM args ignored when same JVM is used.\", Project.MSG_WARN);", "+                log(\"JVM args ignored when same JVM is used.\", ", "+                    Project.MSG_WARN);", "-                log(\"Working directory ignored when same JVM is used.\", Project.MSG_WARN);", "+                log(\"Working directory ignored when same JVM is used.\", ", "+                    Project.MSG_WARN);", "-                log(\"Changes to environment variables are ignored when same JVM is used.\", ", "-                    Project.MSG_WARN);", "+                log(\"Changes to environment variables are ignored when same \"", "+                    + \"JVM is used.\", Project.MSG_WARN);", "-            try {", "-                run(cmdl);", "+        }", "+        ", "+        try {", "+            if (fork) {", "+                return run(cmdl.getCommandline());", "+            } else {", "+                try {", "+                    run(cmdl);", "+                    return 0;", "+                } catch (ExitException ex) {", "+                    return ex.getStatus();", "+                }", "+            }", "+        } catch (BuildException e) {", "+            if (failOnError) {", "+                throw e;", "+            } else {", "+                log(e.getMessage(), Project.MSG_ERR);", "-            catch (ExitException ex) {", "-                return ex.getStatus();", "+        } catch (Throwable t) {", "+            if (failOnError) {", "+                throw new BuildException(t);", "+            } else {", "+                log(t.getMessage(), Project.MSG_ERR);", "+                return 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5045fab2cc56e969de690f1d5f6ae8d7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/ProcessDestroyerTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testProcessDestroyer()", "signatureAfterChange": "      @Test     public void testProcessDestroyer() throws IOException", "diff": ["+    @Test", "+    public void testProcessDestroyer() throws IOException {", "+        ProcessDestroyer processDestroyer = new ProcessDestroyer();", "+        Process process =", "+            Runtime.getRuntime().exec(", "+                \"java -cp \"", "+                    + System.getProperty(\"java.class.path\")", "+                    + \" \"", "+                    + getClass().getName());", "-    public void testProcessDestroyer(){", "+        assertFalse(\"Not registered as shutdown hook\",", "+                    processDestroyer.isAddedAsShutdownHook());", "+", "+        processDestroyer.add(process);", "+", "+        assertTrue(\"Registered as shutdown hook\",", "+                   processDestroyer.isAddedAsShutdownHook());", "-            ProcessDestroyer processDestroyer = new ProcessDestroyer();", "-            Process process =", "-                Runtime.getRuntime().exec(", "-                    \"java -cp \"", "-                        + System.getProperty(\"java.class.path\")", "-                        + \" \"", "-                        + getClass().getName());", "-", "-            assertFalse(\"Not registered as shutdown hook\",", "-                        processDestroyer.isAddedAsShutdownHook());", "-", "-            processDestroyer.add(process);", "-", "-            assertTrue(\"Registered as shutdown hook\",", "-                       processDestroyer.isAddedAsShutdownHook());", "-            try {", "-                process.destroy();", "-            } finally {", "-                processDestroyer.remove(process);", "-            }", "-", "-            assertFalse(\"Not registered as shutdown hook\",", "-                        processDestroyer.isAddedAsShutdownHook());", "-        } catch (IOException e) {", "-            e.printStackTrace();", "+            process.destroy();", "+        } finally {", "+            processDestroyer.remove(process);", "+", "+        assertFalse(\"Not registered as shutdown hook\",", "+                    processDestroyer.isAddedAsShutdownHook());", "+"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6b783fdc8e69fb76fbbf256c9a387b12", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2efb73a7e86873d89c7ebf9606c0df4e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/GenericDeploymentTool.java", "commitBeforeChange": "7624036cc03ba31d2199cf340a8d3de09392efc0", "commitAfterChange": "a80cf0dfece4c5bd7a1dd24b05a8d30bf441abf5", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "      public void processDescriptor(String descriptorFileName, SAXParser saxParser)", "signatureAfterChange": "      public void processDescriptor(String descriptorFileName, SAXParser saxParser)", "diff": ["-        FileInputStream descriptorStream = null;", "-        try {", "-            DescriptorHandler handler = getDescriptorHandler(config.srcDir);", "-            ", "-            /* Parse the ejb deployment descriptor.  While it may not", "-             * look like much, we use a SAXParser and an inner class to", "-             * get hold of all the classfile names for the descriptor.", "-             */", "-            descriptorStream = new FileInputStream(new File(config.descriptorDir, descriptorFileName));", "-            saxParser.parse(new InputSource(descriptorStream), handler);", "-                            ", "-            Hashtable ejbFiles = handler.getFiles();", "+\t\tcheckConfiguration(descriptorFileName, saxParser);", "-            // add in support classes if any", "-            Project project = task.getProject();", "-            for (Iterator i = config.supportFileSets.iterator(); i.hasNext();) {", "-                FileSet supportFileSet = (FileSet)i.next();", "-                File supportBaseDir = supportFileSet.getDir(project);", "-                DirectoryScanner supportScanner = supportFileSet.getDirectoryScanner(project);", "-                supportScanner.scan();", "-                String[] supportFiles = supportScanner.getIncludedFiles();", "-                for (int j = 0; j < supportFiles.length; ++j) {", "-                    ejbFiles.put(supportFiles[j], new File(supportBaseDir, supportFiles[j]));", "-                }", "-            }            ", "+        try {", "+\t\t\t// Retrive the files to be added to JAR from EJB descriptor", "+\t\t\tHashtable ejbFiles = parseEjbFiles(descriptorFileName, saxParser);", "-            String baseName = \"\";", "-            ", "-            // Work out what the base name is", "-            if (config.baseJarName != null) {", "-                baseName = config.baseJarName;", "-            } else {", "-                int lastSeparatorIndex = descriptorFileName.lastIndexOf(File.separator);", "-                int endBaseName = -1;", "-                if (lastSeparatorIndex != -1) {", "-                    endBaseName = descriptorFileName.indexOf(config.baseNameTerminator, ", "-                                                             lastSeparatorIndex);", "-                }", "-                else {", "-                    endBaseName = descriptorFileName.indexOf(config.baseNameTerminator);", "-                }", "+\t\t\t// Add any support classes specified in the build file", "+\t\t\taddSupportClasses(ejbFiles);", "-                if (endBaseName != -1) {", "-                    baseName = descriptorFileName.substring(0, endBaseName);", "-                }", "-                baseName = descriptorFileName.substring(0, endBaseName);", "-            }", "+\t\t\t// Determine the JAR filename (without filename extension)", "+\t\t\tString baseName = getJarBaseName(descriptorFileName);", "-            // By default we assume we need to build.", "-            boolean needBuild = true;", "-", "-            if (jarFile.exists()) {", "-                long    lastBuild = jarFile.lastModified();", "-                Iterator fileIter = ejbFiles.values().iterator();", "-                // Set the need build to false until we find out otherwise.", "-                needBuild = false;", "-", "-                // Loop through the files seeing if any has been touched", "-                // more recently than the destination jar.", "-                while( (needBuild == false) && (fileIter.hasNext()) ) {", "-                    File currentFile = (File) fileIter.next();", "-                    needBuild = ( lastBuild < currentFile.lastModified() );", "-                    if (needBuild) {", "-                        log(\"Build needed because \" + currentFile.getPath() + \" is out of date\",", "-                            Project.MSG_VERBOSE);", "-                    }", "-                }", "-            }", "-            // Check to see if we need a build and start", "-            // doing the work!", "-            if (needBuild) {", "+            // Check to see if we need a build and start doing the work!", "+            if (needToRebuild(ejbFiles, jarFile)) {", "-                writeJar(baseName, jarFile, ejbFiles, handler.getPublicId());", "+\t\t\t\tString publicId = getPublicId();", "+                writeJar(baseName, jarFile, ejbFiles, publicId);", "-        finally {", "+    }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "835f785c3a3e9b366646e9296fec0f43", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/DependSet.java", "commitBeforeChange": "3fd5d9ba323b0d4cf83368085be5c9103d97f7f5", "commitAfterChange": "d8a41c88bee05a818356bf6f4f16f31ccc43940e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-", "-        if ((sourceFileSets.size() == 0) && (sourceFileLists.size() == 0)) {", "-          throw new BuildException(\"At least one <srcfileset> or <srcfilelist>\"", "-                                   + \" element must be set\");", "+        if (sources == null) {", "+          throw new BuildException(", "+              \"At least one set of source resources must be specified\");", "-        if ((targetFileSets.size() == 0) && (targetFileLists.size() == 0)) {", "-          throw new BuildException(\"At least one <targetfileset> or\"", "-                                   + \" <targetfilelist> element must be set\");", "+        if (targets == null) {", "+          throw new BuildException(", "+              \"At least one set of target files must be specified\");", "-        long now = (new Date()).getTime();", "-        /*", "-          We have to munge the time to allow for the filesystem time", "-          granularity.", "-        */", "-        now += FILE_UTILS.getFileTimestampGranularity();", "-", "-        // Grab all the target files specified via filesets:", "-        Vector allTargets = new Vector();", "-        long oldestTargetTime = 0;", "-        File oldestTarget = null;", "-        Enumeration enumTargetSets = targetFileSets.elements();", "-        while (enumTargetSets.hasMoreElements()) {", "-", "-           FileSet targetFS          = (FileSet) enumTargetSets.nextElement();", "-           if (!targetFS.getDir(getProject()).exists()) {", "-               // this is the same as if it was empty, no target files found", "-               continue;", "-           }", "-           DirectoryScanner targetDS = targetFS.getDirectoryScanner(getProject());", "-           String[] targetFiles      = targetDS.getIncludedFiles();", "-", "-           for (int i = 0; i < targetFiles.length; i++) {", "-", "-              File dest = new File(targetFS.getDir(getProject()), targetFiles[i]);", "-              allTargets.addElement(dest);", "-", "-              if (dest.lastModified() > now) {", "-                 log(\"Warning: \" + targetFiles[i] + \" modified in the future.\",", "-                     Project.MSG_WARN);", "-              }", "-              if (oldestTarget == null", "-                || dest.lastModified() < oldestTargetTime) {", "-                  oldestTargetTime = dest.lastModified();", "-                  oldestTarget = dest;", "-              }", "-           }", "+        //no sources = nothing to compare; no targets = nothing to delete:", "+        if (sources.size() > 0 && targets.size() > 0 && !uptodate(sources, targets)) {", "+           log(\"Deleting all target files.\", Project.MSG_VERBOSE);", "+           Delete delete = new Delete();", "+           delete.bindToOwner(this);", "+           delete.add(targets);", "+           delete.perform();", "-        // Grab all the target files specified via filelists:", "-        boolean upToDate = true;", "-        Enumeration enumTargetLists = targetFileLists.elements();", "-        while (enumTargetLists.hasMoreElements()) {", "+    }", "-           FileList targetFL    = (FileList) enumTargetLists.nextElement();", "-           String[] targetFiles = targetFL.getFiles(getProject());", "-           for (int i = 0; i < targetFiles.length; i++) {", "-", "-              File dest = new File(targetFL.getDir(getProject()), targetFiles[i]);", "-              if (!dest.exists()) {", "-                 log(targetFiles[i] + \" does not exist.\", Project.MSG_VERBOSE);", "-                 upToDate = false;", "-                 continue;", "-              } else {", "-                 allTargets.addElement(dest);", "-              }", "-              if (dest.lastModified() > now) {", "-                 log(\"Warning: \" + targetFiles[i] + \" modified in the future.\",", "-                     Project.MSG_WARN);", "-              }", "-              if (oldestTarget == null", "-                  || dest.lastModified() < oldestTargetTime) {", "-                  oldestTargetTime = dest.lastModified();", "-                  oldestTarget = dest;", "-              }", "-           }", "-        if (oldestTarget != null) {", "-            log(oldestTarget + \" is oldest target file\", Project.MSG_VERBOSE);", "-        } else {", "-            // no target files, then we cannot remove any target files and", "-            // skip the following tests right away", "-            upToDate = false;", "-        // Check targets vs source files specified via filelists:", "-        if (upToDate) {", "-           Enumeration enumSourceLists = sourceFileLists.elements();", "-           while (upToDate && enumSourceLists.hasMoreElements()) {", "-              FileList sourceFL    = (FileList) enumSourceLists.nextElement();", "-              String[] sourceFiles = sourceFL.getFiles(getProject());", "-", "-              for (int i = 0; upToDate && i < sourceFiles.length; i++) {", "-                 File src = new File(sourceFL.getDir(getProject()), sourceFiles[i]);", "-", "-                 if (src.lastModified() > now) {", "-                    log(\"Warning: \" + sourceFiles[i]", "-                        + \" modified in the future.\", Project.MSG_WARN);", "-                 }", "-                 if (!src.exists()) {", "-                    log(sourceFiles[i] + \" does not exist.\",", "-                        Project.MSG_VERBOSE);", "-                    upToDate = false;", "-                    break;", "-                 }", "-                 if (src.lastModified() > oldestTargetTime) {", "-                    upToDate = false;", "-                    log(oldestTarget + \" is out of date with respect to \"", "-                        + sourceFiles[i], Project.MSG_VERBOSE);", "-                 }", "-              }", "-           }", "-        }", "-        // Check targets vs source files specified via filesets:", "-        if (upToDate) {", "-           Enumeration enumSourceSets = sourceFileSets.elements();", "-           while (upToDate && enumSourceSets.hasMoreElements()) {", "-", "-              FileSet sourceFS          = (FileSet) enumSourceSets.nextElement();", "-              DirectoryScanner sourceDS = sourceFS.getDirectoryScanner(getProject());", "-              String[] sourceFiles      = sourceDS.getIncludedFiles();", "-", "-              for (int i = 0; upToDate && i < sourceFiles.length; i++) {", "-                 File src = new File(sourceFS.getDir(getProject()), sourceFiles[i]);", "-", "-                 if (src.lastModified() > now) {", "-                    log(\"Warning: \" + sourceFiles[i]", "-                        + \" modified in the future.\", Project.MSG_WARN);", "-                 }", "-                 if (src.lastModified() > oldestTargetTime) {", "-                    upToDate = false;", "-                    log(oldestTarget + \" is out of date with respect to \"", "-                        + sourceFiles[i], Project.MSG_VERBOSE);", "-                 }", "-              }", "-           }", "-        }", "-        if (!upToDate) {", "-           log(\"Deleting all target files. \", Project.MSG_VERBOSE);", "-           for (Enumeration e = allTargets.elements(); e.hasMoreElements();) {", "-              File fileToRemove = (File) e.nextElement();", "-              log(\"Deleting file \" + fileToRemove.getAbsolutePath(),", "-                  Project.MSG_VERBOSE);", "-              fileToRemove.delete();", "-           }"]}]}
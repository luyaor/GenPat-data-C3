{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8a9f7cd85067eaa825edce99466c17f0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16943535b5305fbc361ece8176db683a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/xml/XSLTProcess.java", "commitBeforeChange": "030fd751f51bef1c60b27cc4034cf1b013551520", "commitAfterChange": "0deb15031e9e934900b3b41f0d191dabdece8f80", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private Class loadClass( String classname )         throws Exception", "signatureAfterChange": "      private String getSystemId( final File file )         throws IOException", "diff": ["+", "+    private String getSystemId( final File file )", "+        throws IOException", "+    {", "+        return file.getCanonicalFile().toURL().toExternalForm();", "+    }", "-     */", "-    private Class loadClass( String classname )", "-        throws Exception", "-    {", "-        if( m_classpath == null )", "-        {", "-            return Class.forName( classname );", "-        }", "-        else", "-        {", "-            final URL[] urls = PathUtil.toURLs( m_classpath );", "-            final ClassLoader classLoader = new URLClassLoader( urls );", "-            return classLoader.loadClass( classname );", "-        }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7b70a74abac10f92fd424ae9ec3771f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/tar/TarEntry.java", "commitBeforeChange": "d03eda1c3aaa0eacdacd83236bf21a9b9d81cd62", "commitAfterChange": "b6ed0b49348d6e8f820f4e5590bd71782c111976", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public TarEntry( final File file )", "signatureAfterChange": "     public TarEntry( final File file )", "diff": ["-        final String osname = System.getProperty( \"os.name\" );", "-        if( osname != null )", "+        // Strip off drive letters!", "+        if( Os.isFamily( Os.OS_FAMILY_WINDOWS) )", "-            // Strip off drive letters!", "-            // REVIEW Would a better check be \"(File.separator == '\\')\"?", "-            final String win32Prefix = \"Windows\";", "-            final String prefix = osname.substring( 0, win32Prefix.length() );", "-", "-            if( prefix.equalsIgnoreCase( win32Prefix ) )", "+            if( name.length() > 2 )", "-                if( name.length() > 2 )", "-                {", "-                    final char ch1 = name.charAt( 0 );", "-                    final char ch2 = name.charAt( 1 );", "+                final char ch1 = name.charAt( 0 );", "+                final char ch2 = name.charAt( 1 );", "-                    if( ch2 == ':' &&", "-                        ( ( ch1 >= 'a' && ch1 <= 'z' ) ||", "-                        ( ch1 >= 'A' && ch1 <= 'Z' ) ) )", "-                    {", "-                        name = name.substring( 2 );", "-                    }", "+                if( ch2 == ':' &&", "+                    ( ( ch1 >= 'a' && ch1 <= 'z' ) ||", "+                    ( ch1 >= 'A' && ch1 <= 'Z' ) ) )", "+                {", "+                    name = name.substring( 2 );", "-            else if( osname.toLowerCase().indexOf( \"netware\" ) > -1 )", "+        }", "+        else if( Os.isFamily( Os.OS_FAMILY_NETWARE) )", "+        {", "+            final int colon = name.indexOf( ':' );", "+            if( colon != -1 )", "-                final int colon = name.indexOf( ':' );", "-                if( colon != -1 )", "-                {", "-                    name = name.substring( colon + 1 );", "-                }", "+                name = name.substring( colon + 1 );"]}]}
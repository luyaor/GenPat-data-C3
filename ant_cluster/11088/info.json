{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "18b39cfb6c7939911c24860c64778e12", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24301b899f0c92fd4fb82997d3f2d185", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/selectors/modifiedselector/ModifiedSelector.java", "commitBeforeChange": "589691afeb04320ae27578385b12b49398c6c146", "commitAfterChange": "93795db6defdb1059c70826f0e7e15773672f36e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public boolean isSelected(File basedir, String filename, File file)", "signatureAfterChange": "     public boolean isSelected(Resource resource)", "diff": ["+     */", "+    public boolean isSelected(Resource resource) {", "+        if (resource.isFilesystemOnly()) {", "+            // We have a 'resourced' file, so reconvert it and use", "+            // the 'old' implementation.", "+            FileResource fileResource = (FileResource) resource;", "+            File file = fileResource.getFile();", "+            String filename = fileResource.getName();", "+            File basedir = fileResource.getBaseDir();", "+            return isSelected(basedir, filename, file);", "+        } else {", "+            try {", "+                // How to handle non-file-Resources? I copy temporarily the", "+                // resource to a file and use the file-implementation.", "+                FileUtils fu = FileUtils.getFileUtils();", "+                File tmpFile = fu.createTempFile(\"modified-\", \".tmp\", null);", "+                Resource tmpResource = new FileResource(tmpFile);", "+                fu.copyResource(resource, tmpResource);", "+                boolean isSelected = isSelected(tmpFile.getParentFile(),", "+                                                tmpFile.getName(),", "+                                                resource.toLongString());", "+                tmpFile.delete();", "+                return isSelected;", "+            } catch (UnsupportedOperationException uoe) {", "+                log(\"The resource '\"", "+                  + resource.getName()", "+                  + \"' does not provide an InputStream, so it is not checked. \"", "+                  + \"Akkording to 'selres' attribute value it is \"", "+                  + ((selectResourcesWithoutInputStream) ? \"\" : \" not\")", "+                  + \"selected.\", Project.MSG_INFO);", "+                return selectResourcesWithoutInputStream;", "+            } catch (Exception e) {", "+                throw new BuildException(e);", "+            }", "+        }", "+    }", "-        String newValue    = algorithm.getValue(f);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46f4c722c5a625319afd36e34be63f0d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/perforce/SimpleP4OutputHandler.java", "commitBeforeChange": "d74422c5bdb8c7a701452a41335f152e7dbff784", "commitAfterChange": "dace404953ec887dfb7a294442018535b8c6fb1d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void process(String line) throws BuildException", "signatureAfterChange": "     public void process(String line) throws BuildException", "diff": ["-        //p4 -s is unpredicatable. For example a server down", "-        //does not return error: markup", "+        //When a server is down, the code expects :", "+        //Perforce client error:", "+        //Connect to server failed; check $P4PORT.", "+        //TCP connect to localhost:1666 failed.", "+        //connect: localhost:1666: Connection refused", "-        //when running labelsync, if view elements are in sync, Perforce produces a line of output", "-        //looking like this one :", "-        //error: //depot/file2 - label in sync.", "-        if (parent.util.match(\"/error:/\", line) && !parent.util.match(\"/up-to-date/\", line)", "-            && !parent.util.match(\"/label in sync/\", line)) {", "-            throw new BuildException(line);", "-", "+        if (parent.util.match(\"/^error:/\", line)", "+            || parent.util.match(\"/^Perforce client error:/\", line)) {", "+            //when running labelsync, if view elements are in sync,", "+            //Perforce produces a line of output", "+            //looking like this one :", "+            //error: //depot/file2 - label in sync.", "+            if (!parent.util.match(\"/label in sync/\", line)", "+                && !parent.util.match(\"/up-to-date/\", line)) {", "+                parent.setInError(true);", "+            } else {", "+                //sync says \"error:\" when a file is up-to-date", "+                line = parent.util.substitute(\"s/^[^:]*: //\", line);", "+            }", "+        } else if (parent.util.match(\"/^info.*?:/\", line)) {", "+            //sometimes there's \"info1:", "+            line = parent.util.substitute(\"s/^[^:]*: //\", line);", "+        parent.log(line, parent.getInError() ? Project.MSG_ERR : Project.MSG_INFO);", "-        parent.log(parent.util.substitute(\"s/^[^:]*: //\", line), Project.MSG_INFO);", "-", "+        if (parent.getInError()) {", "+            parent.setErrorMessage(parent.getErrorMessage() + line + StringUtils.LINE_SEP);", "+        }"]}]}
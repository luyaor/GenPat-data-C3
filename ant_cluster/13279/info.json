{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d1562604d7ce86998188a9653a48393e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00c0611e154914c8e92019208a1135de", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "149ce34431423cd116e5d7175ff281c30565aa6a", "commitAfterChange": "5460755b447223e93e926e11a08e4df4f0e0ddb5", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 60, "signatureBeforeChange": "      private Object createAddTypeElement(         Project project, Object parent, String elementName)", "signatureAfterChange": "     private NestedCreator createAddTypeCreator(         Project project, Object parent, String elementName)         throws BuildException", "diff": ["-    private Object createAddTypeElement(", "-        Project project, Object parent, String elementName) {", "+     */", "+    private NestedCreator createAddTypeCreator(", "+        Project project, Object parent, String elementName)", "+        throws BuildException {", "+        if (addTypeMethods.size() == 0) {", "+            return null;", "+        }", "+", "-", "+        final Method method = addMethod;", "+        final Object nestedObject = addedObject;", "-        try {", "-            addMethod.invoke(parent, new Object[] {addedObject});", "-        } catch (IllegalAccessException ex) {", "-            throw new BuildException(ex);", "-        } catch (InvocationTargetException ex) {", "-            Throwable t = ex.getTargetException();", "-            if (t instanceof BuildException) {", "-                throw (BuildException) t;", "+        return new NestedCreator() {", "+            public boolean isPolyMorphic() {", "+                return false;", "-            throw new BuildException(t);", "-        } catch (Throwable t) {", "-            throw new BuildException(t);", "-        }", "-        return addedObject;", "+", "+            public Class getElementClass() {", "+                return null;", "+            }", "+            public Object create(Project project, Object parent, Object ignore)", "+                throws InvocationTargetException, IllegalAccessException {", "+                if (!method.getName().endsWith(\"Configured\")) {", "+                    method.invoke(parent, new Object[]{nestedObject});", "+                }", "+                return nestedObject;", "+            }", "+            public void store(Object parent, Object child)", "+                throws InvocationTargetException, IllegalAccessException,", "+                InstantiationException {", "+                if (method.getName().endsWith(\"Configured\")) {", "+                    method.invoke(parent, new Object[]{nestedObject});", "+                }", "+            }", "+        };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "065f3c2a4d90def702776563f2c76290", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "780ad2d725a7f88a26d8ea33a804fa5c8becfc8f", "commitAfterChange": "31deeb980977afb1cfe3234eb17a1360aab49d5e", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "     private NestedCreator createAddTypeCreator(             Project project, Object parent, String elementName) throws BuildException", "signatureAfterChange": "     private NestedCreator createAddTypeCreator(             Project project, Object parent, String elementName) throws BuildException", "diff": ["-        Object addedObject = null;", "-        Method addMethod = null;", "-        Class clazz = helper.getComponentClass(elementName);", "-        if (clazz == null) {", "-            return null;", "-        }", "-        addMethod = findMatchingMethod(clazz, addTypeMethods);", "-        if (addMethod == null) {", "-            return null;", "-        }", "-        addedObject = helper.createComponent(elementName);", "-        if (addedObject == null) {", "-            return null;", "-        }", "-        Object rObject = addedObject;", "-        if (addedObject instanceof PreSetDef.PreSetDefinition) {", "-            rObject = ((PreSetDef.PreSetDefinition) addedObject).createObject(project);", "-        }", "-        final Object nestedObject = addedObject;", "-        final Object realObject = rObject;", "+        MethodAndObject restricted =  createRestricted(", "+            helper, elementName, addTypeMethods);", "+        MethodAndObject topLevel = createTopLevel(", "+            helper, elementName, addTypeMethods);", "-        return new NestedCreator(addMethod) {", "+        if (restricted == null && topLevel == null) {", "+            return null;", "+        }", "+", "+        if (restricted != null && topLevel != null) {", "+            throw new BuildException(", "+                \"ambiguous: type and component definitions for \"", "+                + elementName);", "+        }", "+", "+        MethodAndObject methodAndObject", "+            = restricted != null ? restricted : topLevel;", "+        ", "+        Object rObject = methodAndObject.object;", "+        if (methodAndObject.object instanceof PreSetDef.PreSetDefinition) {", "+            rObject = ((PreSetDef.PreSetDefinition) methodAndObject.object)", "+                .createObject(project);", "+        }", "+        final Object nestedObject = methodAndObject.object;", "+        final Object realObject = rObject;", "+ ", "+        return new NestedCreator(methodAndObject.method) {"]}]}
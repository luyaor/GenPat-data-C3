{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7c6583a4fd92611e88de7da9da8554eb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b80e33be9896f94a9fe35b03e68fb296", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/Parallel.java", "commitBeforeChange": "f73917168fc78f993f09f5f3eccbc4d663018c40", "commitAfterChange": "b8c50342cacdaa5bc7e3e4e72eb8351da5824716", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void execute()         throws BuildException", "signatureAfterChange": "     public void execute()         throws TaskException", "diff": ["-        throws BuildException", "+        throws TaskException", "-        TaskThread[] threads = new TaskThread[nestedTasks.size()];", "+        TaskThread[] threads = new TaskThread[ nestedTasks.size() ];", "-            Task nestedTask = ( Task )e.nextElement();", "-            threads[threadNumber] = new TaskThread( threadNumber, nestedTask );", "+            Task nestedTask = (Task)e.nextElement();", "+            threads[ threadNumber ] = new TaskThread( threadNumber, nestedTask );", "-            threads[i].start();", "+            threads[ i ].start();", "-                threads[i].join();", "+                threads[ i ].join();", "-            Throwable t = threads[i].getException();", "+            Throwable t = threads[ i ].getException();", "-                if( t instanceof BuildException &&", "+                if( t instanceof TaskException &&", "-                    firstLocation = ( ( BuildException )t ).getLocation();", "+                    firstLocation = ( (TaskException)t ).getLocation();", "-            if( firstException instanceof BuildException )", "+            if( firstException instanceof TaskException )", "-                throw ( BuildException )firstException;", "+                throw (TaskException)firstException;", "-                throw new BuildException( \"Error\", firstException );", "+                throw new TaskException( \"Error\", firstException );", "-            throw new BuildException( exceptionMessage.toString() );", "+            throw new TaskException( exceptionMessage.toString() );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de47e42d904f1594574f39894e7d12b8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/Parallel.java", "commitBeforeChange": "f73917168fc78f993f09f5f3eccbc4d663018c40", "commitAfterChange": "b8c50342cacdaa5bc7e3e4e72eb8351da5824716", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void execute()         throws BuildException", "signatureAfterChange": "     public void execute()         throws TaskException", "diff": ["-        throws BuildException", "+        throws TaskException", "-        TaskThread[] threads = new TaskThread[nestedTasks.size()];", "+        TaskThread[] threads = new TaskThread[ nestedTasks.size() ];", "-            Task nestedTask = ( Task )e.nextElement();", "-            threads[threadNumber] = new TaskThread( threadNumber, nestedTask );", "+            Task nestedTask = (Task)e.nextElement();", "+            threads[ threadNumber ] = new TaskThread( threadNumber, nestedTask );", "-            threads[i].start();", "+            threads[ i ].start();", "-                threads[i].join();", "+                threads[ i ].join();", "-            Throwable t = threads[i].getException();", "+            Throwable t = threads[ i ].getException();", "-                if( t instanceof BuildException &&", "+                if( t instanceof TaskException &&", "-                    firstLocation = ( ( BuildException )t ).getLocation();", "+                    firstLocation = ( (TaskException)t ).getLocation();", "-            if( firstException instanceof BuildException )", "+            if( firstException instanceof TaskException )", "-                throw ( BuildException )firstException;", "+                throw (TaskException)firstException;", "-                throw new BuildException( \"Error\", firstException );", "+                throw new TaskException( \"Error\", firstException );", "-            throw new BuildException( exceptionMessage.toString() );", "+            throw new TaskException( exceptionMessage.toString() );"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f2cd450019d5068b1ee68d4942162027", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "003d10628348d97a0c439cec8051a4d6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DefaultLogger.java", "commitBeforeChange": "d7c1a1daa55904f11eb356fe77c85edb07a7c0b0", "commitAfterChange": "d472edbcb0e3613a2574a5715dde99c7c6588f9b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public void messageLogged(BuildEvent event)", "signatureAfterChange": "      public void messageLogged(BuildEvent event)", "diff": ["-", "-        PrintStream logTo = event.getPriority() == Project.MSG_ERR ? err : out;", "-", "+            StringBuffer message = new StringBuffer();", "-                    String msg = \"[\" + name + \"] \";", "-                    for (int i = 0; i < (LEFT_COLUMN_SIZE - msg.length()); i++) {", "-                        logTo.print(\" \");", "+                    String label = \"[\" + name + \"] \";", "+                    for (int i = 0; i < (LEFT_COLUMN_SIZE - label.length()); i++) {", "+                        message.append(\" \");", "-                    logTo.print(msg);", "+                    message.append(label);", "-            // Print the message", "-            printlnAndFlush(logTo, event.getMessage());", "+            message.append(event.getMessage());", "+            String msg = message.toString();", "+            printlnAndFlush(event.getPriority() != Project.MSG_ERR ? out : err,", "+                            msg);", "+            log(msg);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "025d664646aeda89935e4e27232448e6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/main/org/apache/ant/core/xml/XMLProjectParser.java", "commitBeforeChange": "a48208f6cf8cf80ef1e144305ff8dfe0958599d5", "commitAfterChange": "c2e518039b65dc5b8c9c31f9f78b2d72ea8db2d1", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "         public void startElement(String uri, String localName, String qualifiedName,                                  Attributes attributes) throws SAXParseException", "signatureAfterChange": "         public void startElement(String uri, String localName, String qualifiedName,                                  Attributes attributes) throws SAXParseException", "diff": ["-         */", "-        public void startElement(String uri, String localName, String qualifiedName,", "-                                 Attributes attributes) throws SAXParseException {", "-            // everything within a task is a task element", "-            TaskElementHandler taskElementHandler ", "-                = new TaskElementHandler(getXMLReader(), this, getLocator(), ", "-                                         attributes, qualifiedName);", "-            task.addTaskElement(taskElementHandler.getTaskElement());                                         ", "-        }", "+            TaskElementHandler nestedHandler ", "+                                                 attributes, qualifiedName);", "+            taskElement.addTaskElement(nestedHandler.getTaskElement());                                         "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "036132164aaeaeb36a34982033ae4016", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Manifest.java", "commitBeforeChange": "b5b99c769a21d3602ee35948cf004925f03464ba", "commitAfterChange": "25253f3faa839d0341bdfe9eecb06d8791fcf8ea", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                                         + \" is invalid\", m, location);", "+                                           + \" is invalid\", m, location);", "-                                         e, location);", "+                                           e, location);", "-            log(\"Manifest has not changed, do not recreate\", project.MSG_VERBOSE);", "+            log(\"Manifest has not changed, do not recreate\", ", "+                Project.MSG_VERBOSE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04445cf7f2fbdcf4cb2435d5ccdafef5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Definer.java", "commitBeforeChange": "7c20aeab9898341c593fb56f6c3f9646b013d664", "commitAfterChange": "7228bef97c4c12a5012e14e1a059a12069ee4818", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "      private Enumeration resourceToURLs(ClassLoader classLoader)", "signatureAfterChange": "      private Enumeration resourceToURLs(ClassLoader classLoader)", "diff": ["-            if (onError != OnError.IGNORE) {", "-                log(\"Could not load definitions from resource \"", "-                    + resource + \". It could not be found.\",", "-                    Project.MSG_WARN);", "+            String message = \"Could not load definitions from resource \"", "+                + resource + \". It could not be found.\";", "+            switch (onError) {", "+                case OnError.FAIL_ALL:", "+                    throw new BuildException(message);", "+                case OnError.FAIL:", "+                case OnError.REPORT:", "+                    log(message, Project.MSG_WARN);", "+                    break;", "+                case OnError.IGNORE:", "+                    // Fall Through", "+                default:", "+                    // Ignore the problem", "+                    break;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "064a9767e818e92da0e4a187f25429a5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2InputStream.java", "commitBeforeChange": "d1c81b1a62ed4ba76e27dfc92a63e80fb3ac6019", "commitAfterChange": "88799e0669076c9b0cc114a1e191bf3370820984", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "      private int bsR(int n)", "signatureAfterChange": "      private int bsR(int n)", "diff": ["-        {", "-            while (bsLive < n) {", "-                int zzi;", "-                char thech = 0;", "-                try {", "-                    thech = (char) bsStream.read();", "-                } catch (IOException e) {", "-                    compressedStreamEOF();", "-                }", "-                if (thech == -1) {", "-                    compressedStreamEOF();", "-                }", "-                zzi = thech;", "-                bsBuff = (bsBuff << 8) | (zzi & 0xff);", "-                bsLive += 8;", "+        while (bsLive < n) {", "+            int zzi;", "+            char thech = 0;", "+            try {", "+                thech = (char) bsStream.read();", "+            } catch (IOException e) {", "+                compressedStreamEOF();", "+            if (thech == -1) {", "+                compressedStreamEOF();", "+            }", "+            zzi = thech;", "+            bsBuff = (bsBuff << 8) | (zzi & 0xff);", "+            bsLive += 8;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0692acfa3e60b18aa90aa5e80206013d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/i18n/Translate.java", "commitBeforeChange": "14c45a0623d7f87bb7585e802524d36695a1c916", "commitAfterChange": "f21a1750ce8008bd256ff8fd0ba35e97949b2829", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private void translate() throws BuildException", "signatureAfterChange": "     private void translate() throws BuildException", "diff": ["+                        BufferedWriter out = null;", "+                        BufferedReader in = null;", "+                        try {", "-                        BufferedWriter out", "+                            out", "-                        BufferedReader in", "+                            in", "-                        if (in != null) {", "-                            in.close();", "-                        }", "-                        if (out != null) {", "-                            out.close();", "+                        } finally {", "+                            FileUtils.close(in);", "+                            FileUtils.close(out);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06d121e2edf40cac447f074fc1cf247a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ClassIntrospector.java", "commitBeforeChange": "e0fef5cf64773a98734998b9736ded96fc8be2c7", "commitAfterChange": "81c17b6164451315e24ae774f1bed668cbca99ce", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public ClassIntrospector(final Class bean, Map converters)", "signatureAfterChange": "     public ClassIntrospector(final Class bean, Map converters)", "diff": ["-            } else if (name.startsWith(\"add\")", "+            } else if (name.startsWith(\"addConfigured\")", "+                 && name.length() > 13", "+                 && returnType.equals(Void.TYPE)", "+                 && args.length == 1", "+                 && !args[0].equals(String.class)", "+                 && !args[0].isArray()", "+                 && !args[0].isPrimitive()) {", "+                reflector.addElementMethod(m, ", "+                    getPropertyName(name, \"addConfigured\"));", "+             } else if (name.startsWith(\"add\")", "-            } else if (name.startsWith(\"create\")", "+           } else if (name.startsWith(\"create\")"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "070651f678342ec456e2dc8fab4faafa", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/acs/ACSDocumentType.java", "commitBeforeChange": "53ddc59eccb9ca398bcc74db1fc1577bde5b7d45", "commitAfterChange": "4c0c12c0f70aab990d7aefae3ab82d92d24c7cef", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "         public InputSource resolveEntity (             String publicId,             String systemId)             throws SAXException, IOException", "signatureAfterChange": "         public InputSource resolveEntity (             String publicId,             String systemId)             throws SAXException, IOException", "diff": ["-            final String PROJECT = \"project.dtd\";", "-            final String PROJECTEXT = \"project-ext.dtd\";", "-            if (systemId.indexOf(PROJECT) != -1) {", "+            if (systemId.indexOf(DTD_1) != -1) {", "-                    result = getClass().getResourceAsStream(PROJECT);", "+                    result = getClass().getResourceAsStream(DTD_1);", "-            if (systemId.indexOf(PROJECTEXT) != -1) {", "+            if (systemId.indexOf(DTD_2) != -1) {", "-                    result = getClass().getResourceAsStream(PROJECTEXT);", "+                    result = getClass().getResourceAsStream(DTD_2);", "+                } catch (Exception e) {}", "+            }", "+            if (result != null) {", "+                return new InputSource(result);", "+            }", "+            // Is it the share.dtd?", "+            if (systemId.indexOf(DTD_SHARE) != -1) {", "+                try {", "+                    // Look for it as a resource", "+                    result = getClass().getResourceAsStream(DTD_SHARE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09c2e958bf7c314e731ebb165617e758", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/email/MimeMailer.java", "commitBeforeChange": "e7fb9570418c8f963123c259470373667ac8a84e", "commitAfterChange": "f5b5a8b53cad568d5a5ab97ed35c91f698fb1c8e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "       private static InternetAddress[] internetAddresses(Vector list)          throws AddressException, UnsupportedEncodingException", "signatureAfterChange": "      private static InternetAddress[] internetAddresses(Vector list)         throws AddressException, UnsupportedEncodingException", "diff": ["-", "-         throws AddressException, UnsupportedEncodingException {", "+        throws AddressException, UnsupportedEncodingException {", "-            if (addr.getName() == null) {", "-                addrs[i] = new InternetAddress(addr.getAddress());", "-            } else {", "-                addrs[i] = new InternetAddress(addr.getAddress(),", "-                    addr.getName());", "-            }", "+            String name = addr.getName();", "+            addrs[i] = (name == null)", "+                ? new InternetAddress(addr.getAddress())", "+                : new InternetAddress(addr.getAddress(), name);", "-", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ac93d08aa1cacace0d4c46ec8ef8a2c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "0c132498a8026db624c2fcf7026538c52e47b312", "commitAfterChange": "4004834c04e0eec8f0f698435b0c5983751fb593", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "     private void checkIncludePatterns()", "signatureAfterChange": "     private void checkIncludePatterns()", "diff": ["-            String newpattern =", "-                SelectorUtils.rtrimWildcardTokens(includes[icounter]);", "-            newroots.put(newpattern, includes[icounter]);", "+            newroots.put(SelectorUtils.rtrimWildcardTokens(", "+                includes[icounter]), includes[icounter]);", "-", "-", "-", "-", "-", "-                        if (isCaseSensitive()", "-                            && originalpattern.equals(currentelement)) {", "-                            accountForIncludedFile(currentelement, myfile);", "-                        } else if (!isCaseSensitive()", "-                                   && originalpattern", "-                                   .equalsIgnoreCase(currentelement)) {", "+                        boolean included = isCaseSensitive()", "+                            ? originalpattern.equals(currentelement)", "+                            : originalpattern.equalsIgnoreCase(currentelement);", "+                        if (included) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0dc2e6c75bc5546ff1ed25b2c3569509", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/XMLValidateTask.java", "commitBeforeChange": "b0e60527f14be8d2cbdb7c9c4e24f0782a5bb712", "commitAfterChange": "5cf848fdb5a0402838c570e91dacdcca3536fdbc", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "          private String getMessage(SAXParseException e)", "signatureAfterChange": "          private String getMessage(SAXParseException e)", "diff": ["-                try {", "-                    int line = e.getLineNumber();", "-                    int col = e.getColumnNumber();", "-                    return new URL(sysID).getFile()", "-                        + (line == -1", "-                            ? \"\"", "-                            : (\":\" + line + (col == -1 ? \"\" : (\":\" + col))))", "-                        + \": \"", "-                        + e.getMessage();", "-                } catch (MalformedURLException mfue) {", "-                    // ignore and just return exception message", "+                String name = sysID;", "+                if (sysID.startsWith(\"file:\")) {", "+                    try {", "+                        name = FILE_UTILS.fromURI(sysID);", "+                    } catch (Exception ex) {", "+                        // if this is not a valid file: just use the uri", "+                    }", "+                int line = e.getLineNumber();", "+                int col = e.getColumnNumber();", "+                return  name", "+                    + (line == -1", "+                       ? \"\"", "+                       : (\":\" + line + (col == -1 ? \"\" : (\":\" + col))))", "+                    + \": \"", "+                    + e.getMessage();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f1e28e898f79e8da1c9df2b2dc07b19", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SendEmail.java", "commitBeforeChange": "dfb50d12f7f0d605cf65dfcdb394d50ebebc52b0", "commitAfterChange": "3858aba32eef9d054653cbeb2c781e0bf595c8fb", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void execute()", "signatureAfterChange": "     public void execute()", "diff": ["-                        BufferedInputStream in = new BufferedInputStream(", "-                            new FileInputStream(file), bufsize);", "-", "-                        while ((length = in.read(buf, 0, bufsize)) != -1) {", "-                            out.write(buf, 0, length);", "+                        BufferedInputStream in = null;", "+                        try {", "+                            in = new BufferedInputStream(", "+                                new FileInputStream(file), bufsize);", "+    ", "+                            while ((length = in.read(buf, 0, bufsize)) != -1) {", "+                                out.write(buf, 0, length);", "+                            }", "+                        } finally {", "+                            if (in != null) {", "+                                in.close();", "+                            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ff8b943046ac245894ade133659ea4b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/jsp/WLJspc.java", "commitBeforeChange": "967ec861a2a70977f434a391d5c70f477e4722b0", "commitAfterChange": "6650efb105e0cdd4941ffc2c98f2aa8ee6e1dfea", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "          public void execute() throws BuildException", "signatureAfterChange": "          public void execute() throws BuildException", "diff": ["-            jspFile = new File((String) filesToDo.elementAt(i));", "+            String filename = (String) filesToDo.elementAt(i);", "+            jspFile = new File(filename);", "-            args[j + 2] =  sourceDirectory + File.separator ", "-                + (String) filesToDo.elementAt(i);", "-            arg = \"\";", "+            args[j + 2] =  sourceDirectory + File.separator + filename;", "+            helperTask.clearArgs();", "-            for (int x = 0; x < 12; x++) {", "-                arg += \" \" + args[x];", "+            for (int x = 0; x < j + 3; x++) {", "+                helperTask.createArg().setValue(args[x]);", "-            System.out.println(\"arg = \" + arg);", "-            ", "-            helperTask.clearArgs();", "-            helperTask.setArgs(arg);", "-                log(files[i] + \" failed to compile\", Project.MSG_WARN);", "+                log(filename + \" failed to compile\", Project.MSG_WARN);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1063c58d5d5fb7ecf3fa24e8015973c4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/selectors/SelectorUtils.java", "commitBeforeChange": "b374c9f8a0a98f6127e1c226da0c68ad159e37e9", "commitAfterChange": "4dbe4dd92b5ec3dad9b357bffba330ad79d3895b", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public static boolean isOutOfDate(Resource src, Resource target,                                       long granularity)", "signatureAfterChange": "     public static boolean isOutOfDate(Resource src, Resource target, long granularity)", "diff": ["-    public static boolean isOutOfDate(Resource src, Resource target,", "-                                      long granularity) {", "+    public static boolean isOutOfDate(Resource src, Resource target, long granularity) {", "-        // Check if source exists - use sourceLastModified for file resources", "-        // as it is quicker than checking exists() again, however string resources", "-        // have a last modified time of 0", "-        boolean sourceExists = (src instanceof FileResource)", "-            ? sourceLastModified != 0L : src.isExists();", "-", "-        if (targetLastModified == 0L) {", "-            return true;", "-        }", "-        return (sourceLastModified - granularity) > targetLastModified;", "+        return src.isExists()", "+                && (sourceLastModified == Resource.UNKNOWN_DATETIME", "+                        || targetLastModified == Resource.UNKNOWN_DATETIME", "+                                || (sourceLastModified - granularity) > targetLastModified);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10744966102132e9fdf22b5cbf0f2249", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/FixCRLF.java", "commitBeforeChange": "ac1664c3fdae2848480acfb061ab8413daa00923", "commitAfterChange": "70b420621ba892d07049960e4cc4ac34c58549f6", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      private void processFile(String file) throws BuildException", "signatureAfterChange": "      private void processFile(String file) throws BuildException", "diff": ["-\tFile srcFile = new File(srcDir, file);", "-\tFile tmpFile = null;", "+        File srcFile = new File(srcDir, file);", "+        File tmpFile = null;", "-\t// read the contents of the file", "+        // read the contents of the file", "+", "+            try {                                            ", "+                lines.close();", "+                lines = null;", "+            }", "+            catch (IOException e) {", "+                throw new BuildException(\"Unable to close source file \" + srcFile);", "+            }", "+                                     ", "+            if (destFile.exists()) {", "+                if (!destFile.delete()) {", "+                    throw new BuildException(\"Unable to delete \" + destFile);", "+                }", "+            }", "+                                     ", "-                                         + \". Couldn't rename temporary file.\");", "+                                         + \". Couldn't rename temporary file: \" + tmpFile);", "-                lines.close();", "+                if (lines != null) {", "+                    lines.close();", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "130856cb280b95e9938c751620183a01", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/UnknownElement.java", "commitBeforeChange": "1ef4674dd9b17dedc19624ec84b87e1d20b96c6e", "commitAfterChange": "c2e2310e718f046b21292a187713d838b4dd6249", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     protected void handleChildren(Object parent,                                   RuntimeConfigurable parentWrapper)         throws BuildException", "signatureAfterChange": "     protected void handleChildren(Object parent,                                   RuntimeConfigurable parentWrapper)         throws BuildException", "diff": ["-", "-            if (handleChild(ih, parent, child, ", "-                            child.getTag().toLowerCase(Locale.US), ", "-                            childWrapper)) {", "-            } else if (!(parent instanceof TaskContainer)) {", "-                ih.throwNotSupported(getProject(), parent, child.getTag());", "-            } else {", "-                if (!handleChild(ih, parent, child, child.getTag(), ", "-                                 childWrapper)) {", "+            ", "+            // backwards compatibility - element names of nested", "+            // elements have been all lower-case in Ant, except for", "+            // TaskContainers", "+            if (!handleChild(ih, parent, child, ", "+                             child.getTag().toLowerCase(Locale.US), ", "+                             childWrapper)) {", "+                if (!(parent instanceof TaskContainer)) {", "+                    ih.throwNotSupported(getProject(), parent, child.getTag());", "+                } else {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14a900be0b81518e2edf1dbb4885522b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "435e9dc9b6090394172bf029f106b42b2db55a1d", "commitAfterChange": "a9cc5fd794d793374e83ef922a0d32b3a9d5afdb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      protected Main(String[] args) throws BuildException", "signatureAfterChange": "      protected Main(String[] args) throws BuildException", "diff": ["+        String searchForThis = null;", "+", "-                } else if (i < args.length)", "+                } else if (i < args.length-1)", "+            } else if (arg.equals(\"-find\")) {", "+                // eat up next arg if present, default to build.xml", "+                if (i < args.length-1) {", "+                    searchForThis = args[++i];", "+                } else {", "+                    searchForThis = DEFAULT_BUILD_FILENAME;", "+                }", "-        // then search for it", "-            buildFile = findBuildFile(DEFAULT_BUILD_FILENAME);", "+            // but -find then search for it", "+            if (searchForThis != null) {", "+                buildFile = findBuildFile(\".\", searchForThis);", "+            } else {", "+                buildFile = new File(DEFAULT_BUILD_FILENAME);", "+            }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17b491507515e2a47a27be035f12436e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/cvslib/ChangeLogTask.java", "commitBeforeChange": "a603964d0e47e977ecfb361ec75ec17603752c58", "commitAfterChange": "08f7f02ab32e3605b614545855381a0f0e1d0392", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private CVSEntry[] filterEntrySet(final CVSEntry[] entrySet)", "signatureAfterChange": "     private CVSEntry[] filterEntrySet(final CVSEntry[] entrySet)", "diff": ["-", "+            ", "+            //bug#30471", "+            //this is caused by Date.after throwing a NullPointerException", "+            //for some reason there's no date set in the CVSEntry", "+            //Java 1.3.1 API", "+            //http://java.sun.com/j2se/1.3/docs/api/java/util/Date.html#after(java.util.Date)", "+            //doesn't throw NullPointerException", "+            //Java 1.4.2 + 1.5 API", "+            //http://java.sun.com/j2se/1.4.2/docs/api/java/util/Date.html#after(java.util.Date)", "+            //according to the docs it doesn't throw, according to the bug report it does", "+            //http://java.sun.com/j2se/1.5.0/docs/api/java/util/Date.html#after(java.util.Date)", "+            //according to the docs it does throw", "+            ", "+            //for now skip entries which are missing a date", "+            if (null == date) {", "+                continue;", "+            }", "+            "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19364f7c8aeeec8f27c746592b15ece5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Available.java", "commitBeforeChange": "2bc2f8e4fa99ff51eaec0156d0a7a97bad5eab53", "commitAfterChange": "b971cbef85dab5b0bf2a3c9624bc2f94db9dee8b", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private boolean checkFile()", "signatureAfterChange": "     private boolean checkFile()", "diff": ["-                if (parent != null && parent.exists() && searchParents) {", "+                while (searchParents && parent != null && parent.exists()) {", "-                }", "-                // **   simple name specified   == parent of parent dir + name", "-                if (parent != null && searchParents) {", "-                    File grandParent = parent.getParentFile();", "-                    if (grandParent != null && grandParent.exists()) {", "-                        if (checkFile(new File(grandParent, filename),", "-                                      filename + \" in \" + grandParent)) {", "-                            return true;", "-                        }", "-                    }", "+                    parent = parent.getParentFile();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a1844d0c23204d5999e9bbf64bef71f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/AbstractCvsTask.java", "commitBeforeChange": "4783bc46159826bc33858cfc9145c4be93dfe755", "commitAfterChange": "2a291dca9249d6a4958d9898282fa67343bf59b7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     protected void runCommand(Commandline toExecute) throws BuildException", "signatureAfterChange": "     protected void runCommand(Commandline toExecute) throws BuildException", "diff": ["-                                         + actualCommandLine + \"]\", getLocation());", "+                                         + actualCommandLine + \"]\",", "+                                         getLocation());", "-            } else {", "-                log(\"Caught exception: \" + e.getMessage(), Project.MSG_WARN);", "+            log(\"Caught exception: \" + e.getMessage(), Project.MSG_WARN);", "-            if (failOnError) {", "-                throw(e);", "-            } else {", "+                if (failOnError) {", "+                        throw(e);", "+                }", "-                    t = e;", "+                        t = e;", "-            }", "-            if (failOnError) {", "-                throw new BuildException(e, getLocation());", "-            } else {", "+                if (failOnError) {", "+                        throw new BuildException(e, getLocation());", "+                }", "-            }", "+                "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e6412491c2a8da5e3808829b11e4b71", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "46534f2b3d9b703e570c263eaeabf4f874513abf", "commitAfterChange": "b139901cab374b10e2f73a58769fb4ef1c2837bd", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public static void main(String[] args)", "signatureAfterChange": "      public static void main(String[] args)", "diff": ["-                 * uses -Dname=value. However, the JDK goes ahead", "-                 * and parses this out to args {\"-Dname\", \"value\"}", "+                 * uses -Dname=value. However, in some cases, the JDK", "+                 * goes ahead * and parses this out to args ", "+                 *   {\"-Dname\", \"value\"}", "+                 *", "+                 * I don't know how to predict when the JDK is going", "+                 * to help or not, so we simply look for the equals sign.", "-                String value = args[++i];", "+                String value = null;", "+                int posEq = name.indexOf(\"=\");", "+                if (posEq > 0) {", "+                    value = name.substring(posEq+1);", "+                    name = name.substring(0, posEq);", "+                } else if (i < args.length)", "+                    value = args[++i];", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "231599fec7df7e3e801dc53356e50325", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/PropertyFile.java", "commitBeforeChange": "59fcd9ab821784fbf7d5ccee60b4f63c0f9b7735", "commitAfterChange": "09a7def3cd210a903db5fa8969a5292b93cb8192", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "         private void executeString(String oldValue) throws BuildException", "signatureAfterChange": "         private void executeString(String oldValue) throws BuildException", "diff": ["+            // the order of events is, of course, very important here", "+            // default initially to the old value", "+            if (oldValue != null) {", "+                value = oldValue;", "+            }", "+            // but if a value is specified, use it", "-            if (oldValue != null) {", "-                newValue = oldValue;", "+            // even if value is specified, ignore it and set to the default", "+            // value if it is specified and there is no previous value", "+            if (m_default != null && oldValue == null) {", "+                value = m_default;", "-            else if (m_default != null) {", "-                newValue = m_default;", "-            }", "-", "+            "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29967d7b83eeac3d13d25023dab548e6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "270394a09fddda0ea9ffa2330956c5f399ab840f", "commitAfterChange": "6bd8d6e938a45868902ecd1092858e8372933c7c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected Main(String[] args) throws BuildException", "signatureAfterChange": "     protected Main(String[] args) throws BuildException", "diff": ["+        PrintStream logTo = null;", "-                    out = new PrintStream(new FileOutputStream(logFile));", "-                    err = out;", "-                    System.setOut(out);", "-                    System.setErr(out);", "+                    logTo = new PrintStream(new FileOutputStream(logFile));", "-                if (fis != null){", "+                if (fis != null) {", "+                    }", "-              }", "+        if (msgOutputLevel >= Project.MSG_INFO) {", "+            System.out.println(\"Buildfile: \" + buildFile);", "+        }", "+", "+        if (logTo != null) {", "+            out = err = logTo;", "+            System.setOut(out);", "+            System.setErr(out);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a815a8b6de55a765a9054211357192f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/AggregateTransformer.java", "commitBeforeChange": "37e1a669340af86ea163020ac3cec13cbd881b29", "commitAfterChange": "ce8272e144b8168b864015d2dd304410ebb236fc", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public void transform() throws BuildException", "signatureAfterChange": "      public void transform() throws BuildException", "diff": ["-                        ", "-            if (NOFRAMES.equals(format)) {", "-                //createCascadingStyleSheet();", "-                createSinglePageSummary(root);", "-            } else {", "-                createFrameStructure();", "-                createCascadingStyleSheet();", "-                createPackageList(root);", "-                createClassList(root);", "-                createPackageOverview(root);", "-                createAllTestSuiteDetails(root);", "-                createAllPackageDetails(root);", "-            }", "+            XalanExecutor executor = XalanExecutor.newInstance(this);", "+            executor.execute();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bb8fe93fc5ad1823d6911958c2fe1d9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/unix/Symlink.java", "commitBeforeChange": "1ecdefae95b15e2ed1c1978465ae6589c2eb1e5d", "commitAfterChange": "81ae3f744741f4e58135f7add16c1f732685d6f5", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private void doLink(String res, String lnk) throws BuildException", "signatureAfterChange": "     private void doLink(String res, String lnk) throws BuildException", "diff": ["-        if (overwrite && linkfil.exists()) {", "-            try {", "-                deleteSymlink(linkfil);", "-            } catch (FileNotFoundException fnfe) {", "-                handleError(\"Symlink disappeared before it was deleted: \" + lnk);", "-            } catch (IOException ioe) {", "-                handleError(\"Unable to overwrite preexisting link: \" + lnk);", "+        String options = \"-s\";", "+        if (overwrite) {", "+            options += \"f\";", "+            if (linkfil.exists()) {", "+                try {", "+                    deleteSymlink(linkfil);", "+                } catch (FileNotFoundException fnfe) {", "+                    log(\"Symlink disappeared before it was deleted: \" + lnk);", "+                } catch (IOException ioe) {", "+                    log(\"Unable to overwrite preexisting link or file: \" + lnk,ioe, Project.MSG_INFO);", "+                }", "-        String[] cmd = new String[] {\"ln\", \"-s\", res, lnk};", "-        log(Commandline.toString(cmd));", "+        String[] cmd = new String[] {\"ln\", options, res, lnk};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c4c0464f2e327894439edd803988a6e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "6309813d01620379a35da64c12c4de488efedc2d", "commitAfterChange": "4ab1950bd8ba0bf2335e09b07852d74e1b016f5a", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 27, "signatureBeforeChange": "      protected void zipFile(InputStream in, ZipOutputStream zOut, String vPath,                            long lastModified)         throws IOException", "signatureAfterChange": "      protected void zipFile(InputStream in, ZipOutputStream zOut, String vPath,                            long lastModified, File file)         throws IOException", "diff": ["-                           long lastModified)", "+                           long lastModified, File file)", "+        if (entries.contains(vPath)) {", "+", "+            if (duplicate.equals(\"preserve\"))", "+            {", "+                log(vPath + \" already added, skipping\", Project.MSG_INFO);", "+                return;", "+            }", "+            else if (duplicate.equals(\"fail\"))", "+            {", "+                throw new BuildException(\"Duplicate file \" + vPath + \" was found and the duplicate attribute is 'fail'.\");", "+            }", "+            else", "+            {", "+                // duplicate equal to add, so we continue", "+                log(\"duplicate file \" + vPath + \" found, adding.\", Project.MSG_VERBOSE);", "+            }", "+        }", "+        else", "+        {", "+            log(\"adding entry \" + vPath, Project.MSG_VERBOSE);", "+        }", "+", "+        entries.put(vPath, vPath);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ef7aa48aeb25e4ea2f584760587305e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/Archives.java", "commitBeforeChange": "bd7585adb01844d04d23a6b1707427f9f4a490ad", "commitAfterChange": "ea33301047ba2de74fa062155df4d6337e5d1392", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     protected Iterator grabArchives()", "signatureAfterChange": "     protected Iterator<ArchiveFileSet> grabArchives()", "diff": ["-    protected Iterator/*<ArchiveFileset>*/ grabArchives() {", "-        List l = new LinkedList();", "-        for (Iterator iter = zips.iterator(); iter.hasNext(); ) {", "-            l.add(configureArchive(new ZipFileSet(),", "-                                   (Resource) iter.next()));", "+    protected Iterator<ArchiveFileSet> grabArchives() {", "+        List<ArchiveFileSet> l = new LinkedList<ArchiveFileSet>();", "+        for (Resource r : zips) {", "+            l.add(configureArchive(new ZipFileSet(), r));", "-        for (Iterator iter = tars.iterator(); iter.hasNext(); ) {", "-            l.add(configureArchive(new TarFileSet(),", "-                                   (Resource) iter.next()));", "+        for (Resource r : tars) {", "+            l.add(configureArchive(new TarFileSet(), r));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f3d545d7c1089c3706ccdc4092990ea", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/SetProxy.java", "commitBeforeChange": "d1aa81e442aebdc396f67d3e8f3d20032956ddf1", "commitAfterChange": "cb5b4ae2bbb04d49f763e8348c89e16345046179", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public void applyWebProxySettings()", "signatureAfterChange": "      public void applyWebProxySettings()", "diff": ["+                    sysprops.put(\"https.nonProxyHosts\", nonProxyHosts);", "-                }                    ", "+                }", "+                if(proxyUser!=null) {", "+                    sysprops.put(\"http.proxyUser\", proxyUser);", "+                    sysprops.put(\"http.proxyPassword\", proxyPassword);", "+                }", "+                sysprops.remove(\"http.proxyHost\");", "+                sysprops.remove(\"http.proxyUser\");", "+                sysprops.remove(\"http.proxyPassword\");", "+                if (proxyUser != null) {", "+                    //this may be a java1.4 thingy only", "+                    sysprops.put(\"java.net.socks.username\", proxyUser);", "+                    sysprops.put(\"java.net.socks.password\", proxyPassword);", "+                }", "+", "+                sysprops.remove(\"java.net.socks.username\");", "+                sysprops.remove(\"java.net.socks.password\");", "-        ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "361b05a347b6bbb6cbd0e212af71edca", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/sound/SoundTask.java", "commitBeforeChange": "932dee230660188053b053ffa0c4f310e90bb010", "commitAfterChange": "41607341ae5329086cd459c53714ae14a59a4b3e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "         public File getSource()", "signatureAfterChange": "         public File getSource()", "diff": ["-                    File[] files = source.listFiles() ; ", "-                    int numfiles = files.length ;", "+                    String[] entries = source.list() ;", "+                    Vector files = new Vector() ;", "+                    for (int i=0 ; i < entries.length ; i++) {", "+                        File f = new File(source, entries[i]) ;", "+                        if (f.isFile()) {", "+                            files.addElement(f) ;", "+                        }", "+                    }", "+                    if ( files.size() < 1 ) {", "+                        throw new BuildException(\"No files found in directory \" + source);", "+                    }", "+                    int numfiles = files.size() ;", "-                    int i = rn.nextInt(numfiles) ;", "+                    int x = rn.nextInt(numfiles) ;", "-                    this.source = files[i] ;", "+                    this.source = (File)files.elementAt(x) ;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "363da6db73e8a470ee41d360d72d3d5c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Touch.java", "commitBeforeChange": "861a4490644853d4b9bff9b0d0b871d7e88b0784", "commitAfterChange": "3af551b1bbd21e0ff6d8bb1453dac216ce89e9da", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "     protected void touch() throws BuildException", "signatureAfterChange": "     protected void touch() throws BuildException", "diff": ["-            touch(file.getParentFile(), file.getName(), defaultTimestamp);", "+            touch(new FileResource(file.getParentFile(), file.getName()),", "+                  defaultTimestamp);", "-        // deal with the filesets", "+        // deal with the resource collections", "+        Iterator iter = resources.iterator();", "+        while (iter.hasNext()) {", "+            Resource r = (Resource) iter.next();", "+            if (!(r instanceof Touchable)) {", "+                throw new BuildException(\"Can't touch \" + r);", "+            }", "+            touch(r, defaultTimestamp);", "+        }", "+", "+        // deal with filesets in a special way since the task", "+        // originally also used the directories and Union won't return", "+        // them.", "-            String[] srcFiles = ds.getIncludedFiles();", "-            for (int j = 0; j < srcFiles.length; j++) {", "-                touch(fromDir, srcFiles[j], defaultTimestamp);", "-            }", "-                touch(fromDir, srcDirs[j], defaultTimestamp);", "-            }", "-        }", "-        // deal with the filelists", "-        for (int i = 0; i < filelists.size(); i++) {", "-            FileList fl = (FileList) filelists.elementAt(i);", "-            File fromDir = fl.getDir(getProject());", "-", "-            String[] srcFiles = fl.getFiles(getProject());", "-", "-            for (int j = 0; j < srcFiles.length; j++) {", "-                touch(fromDir, srcFiles[j], defaultTimestamp);", "+                touch(new FileResource(fromDir, srcDirs[j]), defaultTimestamp);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "390ab74a205f2c9fcc2240310943f155", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecTask.java", "commitBeforeChange": "7d7fa63c26bd2b7ebf1f42c6ba09c49f52e58b2a", "commitAfterChange": "6fd0ddc8b843c2f0348fc51f680d465b89046fe7", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "     protected String resolveExecutable(String exec, boolean searchPath)", "signatureAfterChange": "     protected String resolveExecutable(String exec, boolean searchPath)", "diff": ["+            Path p = null;", "+            String[] environment = env.getVariables();", "+            if (environment != null) {", "+                for (int i = 0; i < environment.length; i++) {", "+                    if (isPath(environment[i])) {", "+                        p = new Path(getProject(), ", "+                                     environment[i].substring(5));", "+                        break;", "+                    }", "+                }", "+            }", "+", "+            if (p == null) {", "-            Path p = null;", "-                if (line.startsWith(\"PATH=\") || line.startsWith(\"Path=\")) {", "+                if (isPath(line)) {", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "392757f6ae128738ed56f60c2f1f98bd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/frontend/org/apache/ant/cli/Commandline.java", "commitBeforeChange": "b83132393de1bdee68b42caea0604469c85d0306", "commitAfterChange": "af074bc65d9fdde7982618162dfdab2dfae06e5f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void process(String[] args, InitConfig initConfig)", "signatureAfterChange": "     private void process(String[] args, AntEnvironment antEnv)", "diff": ["-    private void process(String[] args, InitConfig initConfig) {", "-        this.initConfig = initConfig;", "+    private void process(String[] args, AntEnvironment antEnv) {", "+        this.antEnv = antEnv;", "-                FrontendUtils.getAntConfig(initConfig.getUserConfigArea());", "+                FrontendUtils.getAntConfig(antEnv.getUserConfigArea());", "-                 = FrontendUtils.getAntConfig(initConfig.getSystemConfigArea());", "+                 = FrontendUtils.getAntConfig(antEnv.getSystemConfigArea());", "-            mainFrame = new Frame(initConfig, config);", "+            mainFrame = new Frame(antEnv, config);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39785645271c777707f13584290606e4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/depend/Depend.java", "commitBeforeChange": "e0459e7ba70ebf4f9031e638018a0c52f054ba2a", "commitAfterChange": "50ab3762949b456ef74fcde982f16fc4922897f6", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void determineDependencies() throws IOException", "signatureAfterChange": "     private void determineDependencies() throws IOException", "diff": ["-                // try to read the dependency info from the map if it is ", "+                // try to read the dependency info from the map if it is", "-                if (cacheFileExists ", "+                if (cacheFileExists", "-                Hashtable affectedClasses ", "+                Hashtable affectedClasses", "-            AntClassLoader loader ", "-                = new AntClassLoader(getProject(), checkPath);", "+            AntClassLoader loader = getProject().createClassLoader(checkPath);", "-                    Object classpathFileObject ", "+                    Object classpathFileObject", "-                        if (!dependency.startsWith(\"java.\") ", "+                        if (!dependency.startsWith(\"java.\")"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ade18f1be30bdec3c4b1f274a24cbfd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "b839a3ed0f3a0ad050579c33f2ede3e8b8542fea", "commitAfterChange": "f1bfa329163db7a4992c25741e2d2db243a69fa0", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     private URL getResourceURL(File file, String resourceName)", "signatureAfterChange": "     private URL getResourceURL(File file, String resourceName)", "diff": ["-                ZipFile zipFile = null;", "-                try {", "+                ZipFile zipFile = (ZipFile)zipFiles.get(file);", "+                if (zipFile == null) {", "-", "-                    ZipEntry entry = zipFile.getEntry(resourceName);", "-                    if (entry != null) {", "-                        try {", "-                            return new URL(\"jar:file:\"+file.toString()+\"!/\"+entry);", "-                        } catch (MalformedURLException ex) {", "-                            return null;", "-                        }", "-                    }", "+                    zipFiles.put(file, zipFile);                    ", "-                finally {", "-                    if (zipFile != null) {", "-                        zipFile.close();", "+", "+                ZipEntry entry = zipFile.getEntry(resourceName);", "+                if (entry != null) {", "+                    try {", "+                        return new URL(\"jar:file:\"+file.toString()+\"!/\"+entry);", "+                    } catch (MalformedURLException ex) {", "+                        return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b7e310cf2c97df751b8f0c56fc559dc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "ec980be7345681968c93f0609e9a3fecb39b9753", "commitAfterChange": "fbb9886634198d8377104bef9ec697fadeb134df", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "     private void cat()", "signatureAfterChange": "     private void cat(ResourceCollection c)", "diff": ["-    private void cat() {", "+    private void cat(ResourceCollection c) {", "-        Reader       reader = null;", "-        char[]       buffer = new char[BUFFER_SIZE];", "+        char[] buffer = new char[BUFFER_SIZE];", "-", "-", "-", "-", "-", "-            if (textBuffer != null) {", "-                reader = new StringReader(", "-                    getProject().replaceProperties(textBuffer.substring(0)));", "-            } else {", "-                reader =  new MultiReader();", "+            if (c.size() > 0) {", "+                concatenate(buffer, writer, new MultiReader(c));", "-", "-            concatenate(buffer, writer, reader);", "-", "-", "-", "-            if (reader != null) {", "-                try {", "-                    reader.close();", "-                } catch (IOException ignore) {", "-                    // ignore", "-                }", "-            }", "-            if (os != null) {", "-                try {", "-                    os.close();", "-                } catch (IOException ignore) {", "-                    // ignore", "-                }", "-            }", "+            FILE_UTILS.close(os);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c2bca650975a76ad45b94501e236e8b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/Frame.java", "commitBeforeChange": "752f49d5b18f9743f8e4a6dbdc8065d240d9c97a", "commitAfterChange": "da4e1a3aa99899d6aecc6d14c2a7498fa51647aa", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 19, "signatureBeforeChange": "     protected void createProjectReference(String name, Project project,                                           Map initialData)         throws AntException", "signatureAfterChange": "     protected void createProjectReference(String name, Project project,                                           Map initialData)         throws AntException", "diff": ["-       Frame referencedFrame = createFrame(project);", "-       addListeners(referencedFrame);", "+        Frame referencedFrame = createFrame(project);", "+        addListeners(referencedFrame);", "-       referencedFrame.initialize(initialData);", "-       // does the frame have any overrides?", "-       Map initialProperties = (Map) overrides.get(name);", "-       referencedFrame.initialize(initialProperties);", "-       overrides.remove(name);", "+        Map overrideProperties = dataService.getOverrides(name);", "+        Map values = new HashMap();", "+        dataService.mergeDataValues(values, initialData);", "+        dataService.mergeDataValues(values, overrideProperties);", "+        referencedFrame.initialize(values);", "+        dataService.removeOverrides(name);", "-       referencedFrames.put(name, referencedFrame);", "-       referencedFrame.importStandardComponents();", "-       referencedFrame.runGlobalTasks();", "+        referencedFrames.put(name, referencedFrame);", "+        referencedFrame.importStandardComponents();", "+        referencedFrame.runGlobalTasks();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c680074e8f08afc82ebbb10db386a37", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Available.java", "commitBeforeChange": "8a7fce7e2e6db1d736542cfb5a117223fc3b8f14", "commitAfterChange": "e503ebd4c7a3603efb6119fec72b3bbe3e9a4f58", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "      private boolean checkFile()", "signatureAfterChange": "      private boolean checkFile()", "diff": ["-                /* ", "+                /*", "-                    } else if (type.equalsIgnoreCase(\"dir\") ", "+                    } else if (type.isDir()", "-                    } else if (type.equalsIgnoreCase(\"file\") ", "+                    } else if (type.isFile()", "-                ", "+", "-                if (parent != null && parent.exists() ", "+                if (parent != null && parent.exists()", "-                    } else if (type.equalsIgnoreCase(\"dir\")) {", "+                    } else if (type.isDir()) {", "-                    if (checkFile(new File(path, file), ", "+                    if (checkFile(new File(path, file),", "-                ", "+", "-                    if (checkFile(new File(parent, file), ", "+                    if (checkFile(new File(parent, file),", "-                ", "+", "-                        if (checkFile(new File(grandParent, file), ", "+                        if (checkFile(new File(grandParent, file),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e3902d55c02a10d859dc675c2629db9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "c9c4a2ce8d7cd469b1bd82242a2f4443c86745a7", "commitAfterChange": "35e9c976aca460e541e62bd67f88fa8482014f1e", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 39, "signatureBeforeChange": "     protected void doFileOperations()", "signatureAfterChange": "     protected void doFileOperations()", "diff": ["-                        fileUtils.copyFile(fromFile, toFile, executionFilters,", "+                        fileUtils.copyFile(new File(fromFile), new File(toFile),", "+                                           executionFilters,", "-                                           preserveLastModified, inputEncoding,", "-                                           outputEncoding, getProject());", "+                                           preserveLastModified,", "+                                           /* append: */ false, inputEncoding,", "+                                           outputEncoding, getProject(),", "+                                           force);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ea46730877a396543ba8e7196de4f75", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/modules/console/BuildConsole.java", "commitBeforeChange": "37b3d25cc8c65444ab2cbb5c0ff153dccf56c789", "commitAfterChange": "2d4bfedfb63f054542debd85410e53916fa502f3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void contextualize(AppContext context)", "signatureAfterChange": "     public void contextualize(AppContext context)", "diff": ["-        ", "+", "+        /** Anonymous class to respond to resize envents and", "+         * post <code>ConsoleNotVisibleEvent</code> or", "+         * <code>ConsoleVisibleEvent</code> events.", "+         */", "+        addComponentListener(new ComponentAdapter() {", "+            public void componentResized(ComponentEvent e) {", "+                AppContext c = BuildConsole.this.getContext();", "+                if (BuildConsole.this.getHeight() == 0) {", "+                    c.getEventBus().postEvent(new ConsoleNotVisibleEvent(c));", "+                } else {", "+                    c.getEventBus().postEvent(new ConsoleVisibleEvent(c));", "+                }", "+            }", "+            public void componentHidden(ComponentEvent e) {}", "+            public void componentMoved(ComponentEvent e) {}", "+            public void componentShown(ComponentEvent e) {}", "+        });", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f7610934ff89cc794c84ee0f68e513c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/filterreaders/src/main/org/apache/tools/ant/filters/PrefixLines.java", "commitBeforeChange": "7b8d582ad0c4a47e17fbb73773788608fddef0a0", "commitAfterChange": "87f806d3e4aba137d933f31a902197a19f96b7c4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public final int read() throws IOException", "signatureAfterChange": "     public final int read() throws IOException", "diff": ["-            ch = in.read();", "-            while (ch != -1) {", "-                if (queuedData == null) {", "-                    if (prefix != null) {", "-                        queuedData = prefix;", "-                    } else {", "-                        queuedData = \"\";", "-                    }", "+            queuedData = readLine();", "+            if (queuedData == null) {", "+                ch = -1;", "+            } else {", "+                if (prefix != null) {", "+                    queuedData = prefix + queuedData;", "-                queuedData += (char) ch;", "-                if (ch == '\\n') {", "-                    break;", "-                }", "-                ch = in.read();", "-            }", "-            if (queuedData != null) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4308a4c576e96336999ca4f6657c01f5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "da4aeef1c3a7217efcdf679bccff3d5af3ec874e", "commitAfterChange": "923140f496d57209baedf1b1921d0a2cb30f5e54", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void processArgs(String[] args)", "signatureAfterChange": "     private void processArgs(String[] args)", "diff": ["+            } else if (arg.equals(\"-cp\") || arg.equals(\"-lib\")) {", "+                //catch script/ant mismatch with a meaningful message", "+                //we could ignore it, but there are likely to be other", "+                //version problems, so we stamp down on the configuration now", "+                String msg = \"Ant's Main method is being handed \"", "+                        + \"an option \"+arg+\" that is only for the launcher class.\"", "+                        + \"\\nThis can be caused by a version mismatch between \"", "+                        + \"the ant script/.bat file and Ant itself.\";", "+                throw new BuildException(msg);", "-                if (fis != null) {", "-                    try {", "-                        fis.close();", "-                    } catch (IOException e) {", "-                        // ignore", "-                    }", "-                }", "+                FileUtils.close(fis);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "433c01ec07fe6534445667f5167622c4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Tar.java", "commitBeforeChange": "12e8a63e2f797fdfb28e9f30761669465cb033ee", "commitAfterChange": "f9121ee81e58e6cb4369a4e043e0a88cbfe3e503", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                                     location);", "+                                     getLocation());", "-                                     location);", "+                                     getLocation());", "-                                     location);", "+                                     getLocation());", "-                                             location);", "+                                             getLocation());", "-                                         location);", "+                                         getLocation());", "-                                                 + \"itself\", location);", "+                                                 + \"itself\", getLocation());", "-                throw new BuildException(msg, ioe, location);", "+                throw new BuildException(msg, ioe, getLocation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44036e3a5f818f1c6192b7b457f4c45e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/junit/src/main/org/apache/tools/ant/taskdefs/optional/junit/remote/TestRunner.java", "commitBeforeChange": "a8965dadded68e9618a8421f64433745011fc62d", "commitAfterChange": "cbf1a178e3f594dd79291e6de776141e55fc3eb7", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private void runTests() throws Exception", "signatureAfterChange": "     private void runTests() throws Exception", "diff": ["-        writer.notifyTestRunStarted(count);", "-", "-        // send system properties to know for the JVM status", "-        writer.notifySystemProperties();", "+        fireEvent(new TestRunEvent(id, TestRunEvent.RUN_STARTED));", "+            String name = suites[i].getClass().getName();", "-                suites[i] = new TestSuite(suites[i].getClass().getName());", "+                suites[i] = new TestSuite(name);", "+            fireEvent(new TestRunEvent(id, TestRunEvent.SUITE_STARTED, name));", "+            fireEvent(new TestRunEvent(id, TestRunEvent.SUITE_ENDED, name));", "-            writer.notifyTestRunStopped(elapsedTime);", "+            fireEvent(new TestRunEvent(id, TestRunEvent.RUN_STOPPED, System.getProperties()));", "-            writer.notifyTestRunEnded(elapsedTime);", "+            fireEvent(new TestRunEvent(id, TestRunEvent.RUN_ENDED, System.getProperties()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "478f0a704549e98ef58a0ba1935d8898", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ResourceUtils.java", "commitBeforeChange": "6f3185926cb4b1fa7f76c0541f2cba0eb5085c79", "commitAfterChange": "dc37a17ff84af8e9c7fec2aa93d7b2b989fb304c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public static void copyResource(final Resource source, final Resource dest,                             final FilterSetCollection filters, final Vector filterChains,                             final boolean overwrite, final boolean preserveLastModified,                                     final boolean append,                                     final String inputEncoding, final String outputEncoding,                                     final Project project, final boolean force)         throws IOException", "signatureAfterChange": "     public static void copyResource(final Resource source, final Resource dest,                             final FilterSetCollection filters, final Vector filterChains,                             final boolean overwrite, final boolean preserveLastModified,                                     final boolean append,                                     final String inputEncoding, final String outputEncoding,                                     final Project project, final boolean force)         throws IOException", "diff": ["-                    project.log(\"Attempt to copy \" + sourceFile", "-                                + \" to \" + destFile + \" using NIO Channels\"", "-                                + \" failed due to '\" + ex.getMessage()", "-                                + \"'.  Falling back to streams.\",", "-                                Project.MSG_WARN);", "+                    String msg = \"Attempt to copy \" + sourceFile", "+                        + \" to \" + destFile + \" using NIO Channels\"", "+                        + \" failed due to '\" + ex.getMessage()", "+                        + \"'.  Falling back to streams.\";", "+                    if (project != null) {", "+                        project.log(msg, Project.MSG_WARN);", "+                    } else {", "+                        System.err.println(msg);", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48a9e0ff5396ce87c89ec2c2c36966e0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "4260131ac7bddf9fcbe2531c6c2e8fa5f2ef80e0", "commitAfterChange": "63c5a21f1ff9c6c3a63d96d308dd2f1d62bf5a64", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     private IntrospectionHelper(final Class bean)", "signatureAfterChange": "     private IntrospectionHelper(final Class bean)", "diff": ["-", "-", "+                    if (org.apache.tools.ant.Location.class.equals(args[0])) {", "+                        /*", "+                          Ignore setLocation(Location) (normally from", "+                          ProjectComponent.setLocation(Location) in honour", "+                          of setLocation(Some other class)", "+                        */", "+                        continue;", "+                    }", "-                        If the argument is not a String, and if there", "+                        If the argument is not a String or Location,", "+                        and if there"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48bc0f71bc9643e8fcedc89b5c88ac42", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Expand.java", "commitBeforeChange": "55641903fb9a4b029554bed4e14b7544d0829f5a", "commitAfterChange": "608424c6506d921af836902200b6b14dc8272493", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      protected void extractFile(FileUtils fileUtils, File srcF, File dir,                                InputStream compressedInputStream,                                String entryName,                                Date entryDate, boolean isDirectory)                                throws IOException", "signatureAfterChange": "      protected void extractFile(FileUtils fileUtils, File srcF, File dir,                                InputStream compressedInputStream,                                String entryName,                                Date entryDate, boolean isDirectory)                                throws IOException", "diff": ["-                included = true;", "-                if (incls != null) {", "-                    for (int w = 0; w < incls.length; w++) {", "-                        included = DirectoryScanner.match(incls[w], name);", "-                        if (included) {", "-                            break;", "-                        }", "+                if (incls == null || incls.length == 0) {", "+                    // no include pattern implicitly means includes=\"**\"", "+                    incls = new String[] {\"**\"};", "+                }", "+                    ", "+                for (int w = 0; w < incls.length; w++) {", "+                    included = DirectoryScanner.match(incls[w], name);", "+                    if (included) {", "+                        break;", "+                ", "+                if (!included) {", "+                    break;", "+                }", "+                ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bc51ee23c8e73ee87188204635ffffc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "cd3b91417cc5df60f464ffbef57f4f8d3188e194", "commitAfterChange": "309943afdb49fc7afe59d46a9035f73d2611a09e", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 32, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                            log(\"Warning: \" + getMessage(e), Project.MSG_ERR);", "+                            if (!quiet) {", "+                                log(\"Warning: \" + getMessage(e), Project.MSG_ERR);", "+                            }", "-                                log(message, Project.MSG_ERR);", "+                                if (!quiet) {", "+                                    log(message, Project.MSG_ERR);", "+                                }", "-                    log(\"Warning: \" + getMessage(e), Project.MSG_ERR);", "+                    if (!quiet) {", "+                        log(\"Warning: \" + getMessage(e), Project.MSG_ERR);", "+                    }", "-                        log(\"Warning: \" + getMessage(e), Project.MSG_ERR);", "+                        if (!quiet) {", "+                            log(\"Warning: \" + getMessage(e), Project.MSG_ERR);", "+                        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bf1248c70e9692d0878b77b44ac1f01", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Taskdef.java", "commitBeforeChange": "4fbcfdedafc75b08541c4ad4d54b75d35300d4e7", "commitAfterChange": "8c59db789549a81eb86b2d1161a9b8294da2da17", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-\t\tClass taskClass = Class.forName(value);", "-\t\t\tproject.addTaskDefinition(name, taskClass);", "+                ClassLoader loader = null;", "+                if (classpath != null) {", "+                    loader = new AntClassLoader(project, classpath, false);", "+                } else {", "+                    loader = this.getClass().getClassLoader();", "+                }", "+", "+                Class taskClass = null;", "+                if (loader != null) {", "+                    taskClass = loader.loadClass(value);", "+                } else {", "+                    taskClass = Class.forName(value);", "+                }", "+                project.addTaskDefinition(name, taskClass);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f9f4013c6dd748107ca3902e1c07bd6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "c5fa091ce5dbdf1ddaa2b5f03f9c7ad3c6476535", "commitAfterChange": "feb447ccc19eb3a5059fb0e421190b8799b57e87", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                    sun.misc.BASE64Encoder encoder =", "-                        (sun.misc.BASE64Encoder)", "-                        Class.forName(\"sun.misc.BASE64Encoder\").newInstance();", "-                    encoding = encoder.encode (up.getBytes());", "+                    Object encoder =", "+                            Class.forName(\"sun.misc.BASE64Encoder\").newInstance();", "+                    encoding = (String) ", "+                            encoder.getClass().getMethod(\"encode\", new Class[] {byte[].class})", "+                            .invoke(encoder, new Object[] {up.getBytes()});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ffa3d06825f9a84a5d6c105c1098ae5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "5971a069cf9cb4f14d0dac60d150eb952065f38a", "commitAfterChange": "1e65e7f37f2cfae8632629e2b52440a827bb1c76", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        boolean reallyDoUpdate = false;", "-        if (doUpdate && zipFile.exists())", "+        doUpdate = doUpdate && zipFile.exists();", "+        if (doUpdate)", "-            reallyDoUpdate = true;", "-", "-            int i;", "-            for (i=0; i < 1000; i++)", "-            {", "-                renamedFile = new File(zipFile.getParent(), \"tmp.\"+i);", "-", "-                if (!renamedFile.exists()) {", "-                    break;", "-                }", "-            }", "-            if (i == 1000) {", "-                throw new BuildException(\"Can't find available temporary filename to which to rename old file.\");", "-            }", "+            FileUtils fileUtils = FileUtils.newFileUtils();", "+            renamedFile = fileUtils.createTempFile(\"zip\", \".tmp\",", "+                                                   fileUtils.getParentFile(zipFile));", "-        String action = reallyDoUpdate ? \"Updating \" : \"Building \";", "+        String action = doUpdate ? \"Updating \" : \"Building \";", "-                if (reallyDoUpdate) {", "+                if (doUpdate) {", "-            if (reallyDoUpdate) {", "+            if (doUpdate) {", "-        if (success && reallyDoUpdate) {", "+        if (success && doUpdate) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52567a7c75c2eb36315210ebcfacac5c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/UnknownElement.java", "commitBeforeChange": "149ce34431423cd116e5d7175ff281c30565aa6a", "commitAfterChange": "5460755b447223e93e926e11a08e4df4f0e0ddb5", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private boolean handleChild(IntrospectionHelper ih,                                 Object parent, UnknownElement child,                                 String childTag,                                 RuntimeConfigurable childWrapper)", "signatureAfterChange": "     private boolean handleChild(IntrospectionHelper ih,                                 Object parent, UnknownElement child,                                 RuntimeConfigurable childWrapper)", "diff": ["-                                String childTag,", "-        if (ih.supportsNestedElement(childTag)) {", "-            Object realChild", "-                = ih.createElement(getProject(), parent, childTag);", "+        // backwards compatibility - element names of nested", "+        // elements have been all lower-case in Ant, except for", "+        // TaskContainers", "+        String childName = child.getTag().toLowerCase(Locale.US);", "+        if (ih.supportsNestedElement(childName)) {", "+            IntrospectionHelper.Creator creator =", "+                ih.getElementCreator(getProject(), parent, childName);", "+            creator.setPolyType(childWrapper.getPolyType());", "+            Object realChild=creator.create();", "+            childWrapper.setCreator(creator);", "-                childTask.setTaskName(childTag);", "-                childTask.setTaskType(childTag);", "+                childTask.setTaskName(childName);", "+                childTask.setTaskType(childName);", "+                childTask.setLocation(child.getLocation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "531f14730160ca248fa20b243bcf7cc2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ReplaceRegExp.java", "commitBeforeChange": "7171341fc60cfd4d7cd4f92bda0778bf98c17094", "commitAfterChange": "1bae2089f57cca232ec1e2d96473391c6ad1385b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        if (file != null && filesets.size() > 0) {", "+        if (file != null && resources != null) {", "-                                     + \"and filesets at the same time.\");", "+                                     + \"and resource collections at the same \"", "+                                     + \"time.\");", "-        int sz = filesets.size();", "-", "-        for (int i = 0; i < sz; i++) {", "-            FileSet fs = (FileSet) (filesets.elementAt(i));", "-            DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "-", "-            String[] files = ds.getIncludedFiles();", "-", "-            for (int j = 0; j < files.length; j++) {", "-                File f = new File(fs.getDir(getProject()), files[j]);", "+        if (resources != null) {", "+            for (Iterator i = resources.iterator(); i.hasNext(); ) {", "+                FileProvider fp =", "+                    (FileProvider) ((Resource) i.next()).as(FileProvider.class);", "+                File f = fp.getFile();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "534e32f033a2e1bf6e84d364dbe152b5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/email/EmailTask.java", "commitBeforeChange": "e7fb9570418c8f963123c259470373667ac8a84e", "commitAfterChange": "f5b5a8b53cad568d5a5ab97ed35c91f698fb1c8e", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": "     public void execute()", "signatureAfterChange": "     public void execute()", "diff": ["-    /** Sends an email  */", "+     */", "-                    mailer =", "-                        (Mailer) Class.forName(\"org.apache.tools.ant.taskdefs.email.MimeMailer\")", "+                    mailer = (Mailer) Class.forName(", "+                        \"org.apache.tools.ant.taskdefs.email.MimeMailer\")", "-", "-", "-", "-", "-", "-", "-", "-                throw new BuildException(\"At least one of to,cc or bcc must \"", "+                throw new BuildException(\"At least one of to, cc or bcc must \"", "-", "-                } else {", "-                    message.setMimeType(messageMimeType);", "+                message.setMimeType(messageMimeType);", "-                } else {", "-                    message.setCharset(charset);", "+                message.setCharset(charset);", "-", "-                    File file = new File(baseDir, includedFiles[j]);", "-", "-                    files.addElement(file);", "+                    files.addElement(new File(baseDir, includedFiles[j]));", "-", "+            mailer.setHeaders(headers);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53a3e82000702c231ca27878fddb49dd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/GenericDeploymentTool.java", "commitBeforeChange": "f19f07d6e4c72f241057ecfc32d80be21201bbf7", "commitAfterChange": "ca91f8cb7e4f2bfe1a191dea6126a32649af9565", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 29, "signatureBeforeChange": "     protected void writeJar(String baseName, File jarfile, Hashtable files,                             String publicId) throws BuildException", "signatureAfterChange": "     protected void writeJar(String baseName, File jarfile, Hashtable files,                             String publicId) throws BuildException", "diff": ["-                File manifestFile = new File(getConfig().descriptorDir, baseName + \"-manifest.mf\");", "-                if (manifestFile.exists()) {", "+                File manifestFile = (File) files.get(MANIFEST);", "+                if (manifestFile != null && manifestFile.exists()) {", "-                } else if (config.manifest != null) {", "-                    in = new FileInputStream(config.manifest);", "-                    if (in == null) {", "-                        throw new BuildException(\"Could not find manifest file: \" + config.manifest,", "-                                                  getLocation());", "-                    }", "+                if (entryName.equals(MANIFEST)) {", "+                    continue;", "+                }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5404993a3f1723108fa02cb6a06c5079", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/i18n/Translate.java", "commitBeforeChange": "12e8a63e2f797fdfb28e9f30761669465cb033ee", "commitAfterChange": "f9121ee81e58e6cb4369a4e043e0a88cbfe3e503", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                                     location);", "+                                     getLocation());", "-                                     location);", "+                                     getLocation());", "-                                         location);", "+                getLocation());", "-                                     location);", "+                                     getLocation());", "-                                         location);", "+                getLocation());", "-                                     location);", "+                                     getLocation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "542aa0f9ab147af1278bfc3f8e449d3a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/PathConvert.java", "commitBeforeChange": "cd8ef18058976a150028b5f88a409cdfaf279dc2", "commitAfterChange": "e2ca50cce1c1d277d17d23a0d4682e48310ded10", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        char fromDirSep = onWindows ? '\\\\' : '/';", "-        char toDirSep   = dirSep.charAt(0);", "+//        char fromDirSep = onWindows ? '\\\\' : '/';", "+//        char toDirSep   = dirSep.charAt(0);", "+", "+        String fromDirSep = onWindows ? \"\\\\\" : \"/\";", "+", "-            elem = elem.replace( fromDirSep, toDirSep );", "+//            elem = elem.replace( fromDirSep, toDirSep );", "-            rslt.append( elem );", "+//            rslt.append( elem );", "+", "+            StringTokenizer stDirectory = new StringTokenizer(elem, fromDirSep, true);", "+            String token = null;", "+", "+            while ( stDirectory.hasMoreTokens() ) {", "+              token = stDirectory.nextToken();", "+", "+              if (fromDirSep.equals(token)) {", "+                rslt.append( dirSep ); ", "+              }", "+              else {", "+                rslt.append( token );", "+              }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "562223124976f15872f473ab3d4801c8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/unix/Symlink.java", "commitBeforeChange": "1225a5a849faa66e73a1262180dd002332b162b0", "commitAfterChange": "90a6d8155086ee0d0a1911584a56eb7b33fb3d0f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 18, "signatureBeforeChange": "      private void doLink(String resource, String link) throws BuildException", "signatureAfterChange": "     private void doLink(String res, String lnk) throws BuildException", "diff": ["-", "-    private void doLink(String resource, String link) throws BuildException {", "-", "-        if (resource == null) {", "-            handleError(\"Must define the resource to symlink to!\");", "-            return;", "-        }", "-        if (link == null) {", "-            handleError(\"Must define the link name for symlink!\");", "-            return;", "-        }", "-        File linkfil = new File(link);", "-", "-        String[] cmd = new String[] {\"ln\", \"-s\", resource, link};", "-", "-        try {", "-            if (overwrite && linkfil.exists()) {", "+    private void doLink(String res, String lnk) throws BuildException {", "+        File linkfil = new File(lnk);", "+        if (overwrite && linkfil.exists()) {", "+            try {", "+            } catch (FileNotFoundException fnfe) {", "+                handleError(\"Symlink disappeared before it was deleted: \" + lnk);", "+            } catch (IOException ioe) {", "+                handleError(\"Unable to overwrite preexisting link: \" + lnk);", "-        } catch (FileNotFoundException fnfe) {", "-            handleError(\"Symlink disappeared before it was deleted: \" + link);", "-        } catch (IOException ioe) {", "-            handleError(\"Unable to overwrite preexisting link: \" + link);", "-        log(cmd[0] + \" \" + cmd[1] + \" \" + cmd[2] + \" \" + cmd[3]);", "+        String[] cmd = new String[] {\"ln\", \"-s\", res, lnk};", "+        log(Commandline.toString(cmd));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b58d2e0f56301f50741d68c2000718b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "cc911f59921cda9a230eebd58c4ab6d9e292d5e9", "commitAfterChange": "693d7c89066c2913bd08ca5cefb022de793f118e", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        if (srcFile == null && sqlCommand.length() == 0) { ", "+        if (srcFile == null && sqlCommand.length()==0 && filesets.isEmpty()) { ", "-                throw new BuildException(\"Source file, transactions or sql statement must be set!\", location);", "+                throw new BuildException(\"Source file or fileset, transactions or sql statement must be set!\", location);", "-        } else {", "+        } else { ", "+            // deal with the filesets", "+            for (int i=0; i<filesets.size(); i++) {", "+                FileSet fs = (FileSet) filesets.elementAt(i);", "+                DirectoryScanner ds = fs.getDirectoryScanner(project);", "+                File srcDir = fs.getDir(project);", "+", "+                String[] srcFiles = ds.getIncludedFiles();", "+", "+                // Make a transaction for each file", "+                for ( int j=0 ; j<srcFiles.length ; j++ ) {", "+                    Transaction t = createTransaction();", "+                    t.setSrc(new File(srcDir, srcFiles[j]));", "+                }", "+            }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60513376bc17ccb6b559eb16b30bae77", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/acs/ACSTreeNodeElement.java", "commitBeforeChange": "a04027cae372928a9f757764f38c28f61e128412", "commitAfterChange": "0c852dba516bf705d62a2d53c47a7b1b1cdd5048", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     private List getCache()", "signatureAfterChange": "     private List getCache()", "diff": ["-            for(int i = 0; i < getLength(); i++) {", "-                if(item(i) instanceof TreeNode) {", "-                    _treeNodeCache.add(item(i));", "+            // XXX this crazy casting is to get around an", "+            // inconsistency between jikes and javac whereby", "+            // the call without this cast when compiled with", "+            // jikes causes an IllegalAccessException", "+            // because the implementation of getLength() and", "+            // item() are actually in a package only class", "+            // in the Sun implementation classes.", "+            int len = ((NodeList)this).getLength();", "+", "+            for(int i = 0; i < len; i++) {", "+                Object n = ((NodeList)this).item(i);", "+", "+                if(n instanceof TreeNode) {", "+                    _treeNodeCache.add(n);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61ca8635613c7d87072ba86d3e888681", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/configuration/DefaultConfigurer.java", "commitBeforeChange": "c6a798ef68e969311121bbe219367ffcc01bc621", "commitAfterChange": "bba92ec2234c85ea1ff3ec3e4e2bb45adaaf3197", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "      protected boolean setValue( final Object object,                                  Object value,                                  final Method method,                                 final Class sourceClass,                                 final String source )         throws ConfigurationException", "signatureAfterChange": "      protected boolean setValue( final Object object,                                  Object value,                                  final Method method,                                 final Class sourceClass,                                 final String source )         throws ConfigurationException", "diff": ["-        if( !parameterType.isAssignableFrom( sourceClass ) )", "+        try", "-            try", "+            value = m_converter.convert( parameterType, value );", "+        }", "+        catch( final ConverterException ce )", "+        {", "+            if( DEBUG )", "-                value = m_converter.convert( parameterType, object );", "+                m_logger.debug( \"Failed to find converter \", ce );", "-            catch( final ConverterException ce )", "-            {", "-                return false;", "-            }", "-            catch( final Exception e )", "-            {", "-                throw new ConfigurationException( \"Error converting attribute for \" + ", "-                                                  method.getName(),", "-                                                  e );", "-            }", "+", "+            return false;", "+        }", "+        catch( final Exception e )", "+        {", "+            throw new ConfigurationException( \"Error converting attribute for \" + ", "+                                              method.getName(),", "+                                              e );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62007ba5526f6fc1e5308cfd695a9f87", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Redirector.java", "commitBeforeChange": "e1dba00d6fba1e923723c523e5aed501dc5ab84b", "commitAfterChange": "3ade0b6e769ba60594a31515f5ba7e3e0054810a", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "     public synchronized void setProperties()", "signatureAfterChange": "     public void setProperties()", "diff": ["-    public synchronized void setProperties() {", "-        if (baos != null) {", "-            try {", "-                baos.close();", "-            } catch (IOException eyeOhEx) {", "-                // Ignore exception", "+    public void setProperties() {", "+        synchronized (outMutex) {", "+            if (baos != null) {", "+                try {", "+                    baos.close();", "+                } catch (IOException eyeOhEx) {", "+                    // Ignore exception", "+                }", "-        if (errorBaos != null) {", "-            try {", "-                errorBaos.close();", "-            } catch (IOException eyeOhEx) {", "-                // Ignore exception", "+        synchronized (errMutex) {", "+            if (errorBaos != null) {", "+                try {", "+                    errorBaos.close();", "+                } catch (IOException eyeOhEx) {", "+                    // Ignore exception", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "621d423a6eb11d0eb67786dbba2a5a41", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Checksum.java", "commitBeforeChange": "d9d5e24a7170e76635a86b274bf424557ce9dfe2", "commitAfterChange": "b7cfa6d516bfc843b3157cd0e15df3e93128ee72", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private boolean generateChecksums() throws BuildException", "signatureAfterChange": "     private boolean generateChecksums() throws BuildException", "diff": ["-                            DataInputStream edis = new DataInputStream(fis);", "-                            String suppliedChecksum = \"\";", "-                            if (edis.available() > 0) {", "-                                suppliedChecksum = edis.readLine();", "-                            }", "+                            InputStreamReader isr = new InputStreamReader(fis);", "+                            BufferedReader br = new BufferedReader(isr);", "+                            String suppliedChecksum = br.readLine();", "-                            edis.close();", "-                            checksumMatches = ", "+                            br.close();", "+                            isr.close();", "+                            checksumMatches =", "+                        fos.close();", "+                        fos = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63824f3221642a224c9d24595689e828", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/Frame.java", "commitBeforeChange": "65b70febb53b077317c4d678291f9af547c3d116", "commitAfterChange": "f9d1c1691c7e9d80b793f5178f6113c949fc2441", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 26, "signatureBeforeChange": "     protected void createProjectReference(String name, Project project,                                           Map initialData)          throws ExecutionException", "signatureAfterChange": "     protected void createProjectReference(String name, Project project,                                           Map initialData)         throws AntException", "diff": ["-                                          Map initialData) ", "-        throws ExecutionException {", "+                                          Map initialData)", "+        throws AntException {", "+       addListeners(referencedFrame);", "-       if (initialData != null) {", "-           referencedFrame.setInitialProperties(initialData);", "-       }", "-       ", "+       referencedFrame.initialize(initialData);", "+", "-       if (initialProperties != null) {", "-           referencedFrame.setInitialProperties(initialProperties);", "-           overrides.remove(name);", "-       }", "-        ", "+       referencedFrame.initialize(initialProperties);", "+       overrides.remove(name);", "+", "-       referencedFrame.initialize();", "+       referencedFrame.importStandardComponents();", "+       referencedFrame.runGlobalTasks();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64ab6d35fc3bf155b5099d43d1950804", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/LoadProperties.java", "commitBeforeChange": "43a69a7b6e52e95a4d65390f603e1fbe4ca8fcb9", "commitAfterChange": "3742656f6d8175a8004cfc7187801e84e2f7172d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public final void execute() throws BuildException", "signatureAfterChange": "     public final void execute() throws BuildException", "diff": ["+        ByteArrayInputStream tis = null;", "-                ByteArrayInputStream tis = null;", "-                final Enumeration e = props.keys();", "-                while (e.hasMoreElements()) {", "-                    final String key = (String) e.nextElement();", "-                    final String value = props.getProperty(key);", "-                    if (key != null && value != null", "-                            && value.trim().length() > 0) {", "-                        getProject().setNewProperty(key, value);", "-                    }", "-                }", "-                tis.close();", "+", "+                Property propertyTask = ", "+                    (Property) getProject().createTask(\"property\");", "+                propertyTask.setTaskName(getTaskName());", "+                propertyTask.addProperties(props);", "+            try {", "+                if (tis != null) {", "+                    tis.close();", "+                }", "+            } catch (IOException ioex) {", "+                //ignore", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65d61828db44628e34947a644e3dc2f8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/ExpandProperties.java", "commitBeforeChange": "4b329724cccfa43eeb36cdbd81184bc7b1afa906", "commitAfterChange": "314d4d7ba7942ae0427800f340ff045f9f0b084e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public int read() throws IOException", "signatureAfterChange": "     public int read() throws IOException", "diff": ["-                queuedData = project.replaceProperties(queuedData);", "+                GetProperty getProperty;", "+                if (propertySet == null) {", "+                    getProperty = PropertyHelper.getPropertyHelper(project);", "+                } else {", "+                    final Properties props = propertySet.getProperties();", "+                    getProperty = new GetProperty() {", "+                        ", "+                        public Object getProperty(String name) {", "+                            return props.getProperty(name);", "+                        }", "+                    };", "+                }", "+                queuedData = new ParseProperties(project, PropertyHelper.getPropertyHelper(project)", "+                        .getExpanders(), getProperty).parseProperties(queuedData).toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "660aad3923cc7db4765091fe2fc40c2d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ccm/CCMCheck.java", "commitBeforeChange": "d794c8efabe57b118c8b46c820d7b9244c73c5b3", "commitAfterChange": "98a9c95a45f2d1cf952691150a32422e7ef1ea67", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+", "+        if (file == null && filesets.size() == 0) {", "+            throw new BuildException(", "+                \"Specify at least one source - a file or a fileset.\");", "+        }", "+", "+        if (file != null && file.exists() && file.isDirectory()) {", "+            throw new BuildException(\"CCMCheck cannot be generated for directories\");", "+        }", "+        ", "+        if (file != null  && filesets.size() > 0) {", "+            throw new BuildException(\"Choose between file and fileset !\");", "+        }", "+", "+        if ( getFile() !=null ) {", "+            doit();", "+            return ;", "+        }", "+                        ", "+        int sizeofFileSet = filesets.size();", "+        for (int i = 0; i < sizeofFileSet; i++) {", "+            FileSet fs = (FileSet) filesets.elementAt(i);", "+            DirectoryScanner ds = fs.getDirectoryScanner(project);", "+            String[] srcFiles = ds.getIncludedFiles();", "+            for (int j = 0; j < srcFiles.length; j++) {", "+                File src = new File(fs.getDir(project), srcFiles[j]);", "+                setFile(src);", "+                doit();", "+            }", "+        }", "+    }", "-        int result = 0;", "-        // as specified in the CLEARTOOL.EXE help", "-", "-", "-        result = run(commandLine);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "684ae7bdc979352093238bc71831ec18", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteOn.java", "commitBeforeChange": "a39aaa86b6d9e6312ebb683ee3b92610908f044a", "commitAfterChange": "e4f004d939e26bd63906121996b3dd5d50d76734", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "      protected void runExec(Execute exe) throws BuildException", "signatureAfterChange": "      protected void runExec(Execute exe) throws BuildException", "diff": ["-                FileSet fs = (FileSet) filesets.elementAt(i);", "+                String currentType = type;", "+                AbstractFileSet fs = (AbstractFileSet) filesets.elementAt(i);", "+                if (fs instanceof DirSet) {", "+                    if (!\"dir\".equals(type)) {", "+                        log(\"Found a nested dirset but type is \" + type + \". \" ", "+                            + \"Temporarily switching to type=\\\"dir\\\" on the\" +", "+                            \" assumption that you really did mean\" +", "+                            \" <dirset> not <fileset>.\", Project.MSG_DEBUG);", "+                        currentType = \"dir\";", "+                    }", "+                }", "-                if (!\"dir\".equals(type)) {", "+                if (!\"dir\".equals(currentType)) {", "-                if (!\"file\".equals(type)) {", "+                if (!\"file\".equals(currentType)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "695768ac34665d8b52324fef8649c7af", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/tar/TarEntry.java", "commitBeforeChange": "99cdb67df9d2ec13a938a635fed1f01109fcf945", "commitAfterChange": "12d6c01879b76774bb1cb969f3081301b96dab32", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public TarEntry(File file)", "signatureAfterChange": "     public TarEntry(File file)", "diff": ["-     */ ", "+     */", "-        ", "+", "-        ", "+", "-        ", "+", "-        ", "+", "-        ", "+", "-        ", "-                    if (ch2 == ':' ", "-                            && ((ch1 >= 'a' && ch1 <= 'z') ", "+", "+                    if (ch2 == ':'", "+                            && ((ch1 >= 'a' && ch1 <= 'z')", "-                    } ", "-                } ", "+                    }", "+                }", "-        } ", "-        ", "+        }", "+", "-        ", "+", "-        ", "+", "-        ", "+", "-            this.mode = 040755;", "+            this.mode = DEFAULT_DIR_MODE;", "-        ", "+", "-            } ", "+            }", "-            this.mode = 0100644;", "+            this.mode = DEFAULT_FILE_MODE;", "-        } ", "-        ", "+        }", "+", "-        this.modTime = file.lastModified() / 1000;", "+        this.modTime = file.lastModified() / MILLIS_PER_SECOND;", "-    }   ", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ae2a0f964ce762f68fdc7e311183520", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "0f3d4a58ff810fe461345dc833a8dabbff97c9a5", "commitAfterChange": "4ae976759285d73d6994b282ee195fa50e860143", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String inputEncoding, String outputEncoding,                          Project project)         throws IOException", "signatureAfterChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String inputEncoding, String outputEncoding,                          Project project)         throws IOException", "diff": ["+                    TokenFilter.LineTokenizer lineTokenizer = new TokenFilter.LineTokenizer();", "+                    lineTokenizer.setIncludeDelims(true);", "-                    String line = in.readLine();", "+                    String line = lineTokenizer.getToken(in);", "+                            // this should not happen, because the lines are returned with the end of line delimiter", "-                            if (filterSetsAvailable) {", "-                                newline = filters.replaceTokens(line);", "-                            } else {", "-                                newline = line;", "-                            }", "+                            newline = filters.replaceTokens(line);", "-                            out.newLine();", "-                        line = in.readLine();", "+                        line = lineTokenizer.getToken(in);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bd84281046bd06bf2c717da188f5c27", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ReplaceRegExp.java", "commitBeforeChange": "8d4985ca744bd0925d812835615bb991b16e1db2", "commitAfterChange": "f62d563414e6848898008af84073651eb83a7959", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     protected void doReplace(File f, int options)          throws IOException", "signatureAfterChange": "     protected void doReplace(File f, int options)          throws IOException", "diff": ["-            PrintWriter pw = new PrintWriter(bw);", "-                            pw.print(res);", "-                            pw.print('\\r');", "+                            bw.write(res);", "+                            bw.write('\\r');", "-                        pw.print(res);", "+                        bw.write(res);", "-                            pw.print('\\r');", "+                            bw.write('\\r');", "-                        pw.print('\\n');", "+                        bw.write('\\n');", "-                            pw.print(res);", "+                            bw.write(res);", "-                                pw.print('\\r');", "+                                bw.write('\\r');", "-                pw.flush();", "+                bw.flush();", "-                pw.print(res);", "-                pw.flush();", "+                bw.write(res);", "+                bw.flush();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d75a8f2e985e1ef73c54050ed0a2225", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/vfile/ListFileSetTask.java", "commitBeforeChange": "5b87919be6a8db15efe30f2de6e617aba31ef619", "commitAfterChange": "52926715b4f4f53da4b63cf660a14f357d7a9b6e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void execute()         throws TaskException", "signatureAfterChange": "     public void execute()         throws TaskException", "diff": ["-        FileSetResult result = m_fileSet.getResult( getContext() );", "-        final FileObject[] files = result.getFiles();", "-        final String[] paths = result.getPaths();", "-        for( int i = 0; i < files.length; i++ )", "+        final int count = m_fileSets.size();", "+        for( int i = 0; i < count; i++ )", "-            final FileObject file = files[ i ];", "-            final String path = paths[ i ];", "-            getLogger().info( path + \" = \" + file );", "+            final FileSet fileSet = (FileSet)m_fileSets.get(i );", "+            FileSetResult result = fileSet.getResult( getContext() );", "+            final FileObject[] files = result.getFiles();", "+            final String[] paths = result.getPaths();", "+            for( int j = 0; j < files.length; j++ )", "+            {", "+                final FileObject file = files[ j ];", "+                final String path = paths[ j ];", "+                getLogger().info( path + \" = \" + file );", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d8cfa6cf125165a00e53a952ae0ad42", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "956f4eec6cac8bce92f4c1585829d4c4ff5e31e1", "commitAfterChange": "1af1e04eefdc1cd751ef1286fb680420f6131d19", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "          public int read() throws IOException", "signatureAfterChange": "          public int read() throws IOException", "diff": ["-                if (c == '*') {", "+                if (c == '/') {", "+                    while (c != '\\n') c = in.read();", "+                } else if (c == '*') {", "-                                c = in.read();", "+                                c = read();", "+            if (c == '\"') {", "+                while (true) {", "+                    c = in.read();", "+                    if (c == '\\\\') c = in.read();", "+                    if (c == '\"') {", "+                        c = read();", "+                        break;", "+                    }", "+                }", "+            }", "+            if (c == '\\'') {", "+                c = in.read();", "+                if (c == '\\\\') c = in.read();", "+                c = in.read();", "+                c = read();", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6de11927f3918d1967831e2e4c37f0aa", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "930f2f2030a279a8565becb92ecf5407d5972589", "commitAfterChange": "8585763d2022bbdda30bb6a7e2d523fbea25542a", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private void checkIncludePatterns()", "signatureAfterChange": "     private void checkIncludePatterns()", "diff": ["+            // we need to call getCanonicalFile here for DOS systems", "+            // the reason being that otherwise File will be influenced", "+            // by the case of currentelement, which we want to avoid", "+            if (Os.isFamily(\"dos\") && myfile.exists()) {", "+                try {", "+                    // getAbsoluteFile() is not enough here unfortunately", "+                    myfile = myfile.getCanonicalFile();", "+                }", "+                catch (Exception ex) {", "+                    throw new BuildException(ex);", "+                }", "+                // the variable currentelement is actually telling what", "+                // the scan results will contain", "+                currentelement = fileUtils.removeLeadingPath(basedir,", "+                                                             myfile);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ef35897882a8a977e65839670137b3e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/Native2Ascii.java", "commitBeforeChange": "d2eddd7e4d3a7509fbebf87e11c1186073316be6", "commitAfterChange": "34c0080c09ba7c72241296abc4eb83e2ed9fd569", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["+", "-        if (srcDir.equals(destDir) && (extension == null)){", "-            throw new BuildException(\"The ext attribut must be set if\"", "+        if (srcDir.equals(destDir) && extension == null && mapper == null){", "+            throw new BuildException(\"The ext attribute or a mapper must be set if\"", "+        FileNameMapper m = null;", "+        if (mapper == null) {", "+            if (extension == null) {", "+                m = new IdentityMapper();", "+            } else {", "+                m = new ExtMapper();", "+            }", "+        } else {", "+            m = mapper.getImplementation();", "+        }", "+        ", "-        log(\"Converting files from \" + srcDir + \" to \" + destDir);", "+        SourceFileScanner sfs = new SourceFileScanner(this);", "+        files = sfs.restrict(files, srcDir, destDir, m);", "+        int count = files.length;", "+        if (count == 0) {", "+            return;", "+        }", "+        String message = \"Converting \"+ count + \" file\"", "+            + (count != 1 ? \"s\" : \"\") + \" from \";", "+        log(message + srcDir + \" to \" + destDir);", "-            convert(files[i]);", "+            convert(files[i], m.mapFileName(files[i])[0]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f38b5d2192a4d1222c03f4e7753938f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/XMLValidateTask.java", "commitBeforeChange": "6650efb105e0cdd4941ffc2c98f2aa8ee6e1dfea", "commitAfterChange": "e42bd46a51dd6347c0961e311bd3717c24d4ea8c", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private void initValidator()", "signatureAfterChange": "     private void initValidator()", "diff": ["-                throw new BuildException(INIT_FAILED_MSG + readerClassName", "+                throw new BuildException(INIT_FAILED_MSG ", "+                                         + reader.getClass().getName()", "-                boolean ok = setFeature(\"http://xml.org/sax/features/validation\", true, true);", "-                if (!ok) {", "-                    throw new BuildException(INIT_FAILED_MSG", "-                                             + readerClassName", "-                                             + \" doesn't provide validation\");", "-                }", "+                setFeature(\"http://xml.org/sax/features/validation\", true);", "-                setFeature(feature.getName(),", "-                           feature.getValue(),", "-                           true);", "+                setFeature(feature.getName(), feature.getValue());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fd5573362841a6f183e04ce4a9374f9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/cvslib/ChangeLogParser.java", "commitBeforeChange": "6c310a371f0d7bfd4dbf4eee70693689164e9b74", "commitAfterChange": "a0ba302efe9a84e4735f08c631e01209496fe522", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void processComment(final String line)", "signatureAfterChange": "     private void processComment(final String line)", "diff": ["-        if (line.equals(\"=============================================================================\")) {", "+        if (line.equals(", "+                \"=============================================================================\")) {", "-                = m_comment.length() - lineSeparator.length(); //was -1", "-            m_comment = m_comment.substring(0, end);", "+                = comment.length() - lineSeparator.length(); //was -1", "+            comment = comment.substring(0, end);", "-            m_status = GET_FILE;", "+            status = GET_FILE;", "-                = m_comment.length() - lineSeparator.length(); //was -1", "-            m_comment = m_comment.substring(0, end);", "-            m_status = GET_PREVIOUS_REV;", "+                = comment.length() - lineSeparator.length(); //was -1", "+            comment = comment.substring(0, end);", "+            status = GET_PREVIOUS_REV;", "-            m_comment += line + lineSeparator;", "+            comment += line + lineSeparator;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "701f49dc895a6bac88be3e360638431a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "519b97d7cf70e486ddcc74dc70285642320ef109", "commitAfterChange": "49727a3da8d30bd6abcb219f140097f4a3b6fe95", "methodNumberBeforeChange": 124, "methodNumberAfterChange": 127, "signatureBeforeChange": "     private void addFileSets(Vector sf)", "signatureAfterChange": "     private void addSourceFiles(Vector sf)", "diff": ["-    private void addFileSets(Vector sf) {", "-        Enumeration e = fileSets.elements();", "-        while (e.hasMoreElements()) {", "-            FileSet fs = (FileSet) e.nextElement();", "+    private void addSourceFiles(Vector sf) {", "+        Iterator e = nestedSourceFiles.iterator();", "+        while (e.hasNext()) {", "+            ResourceCollection rc = (ResourceCollection) e.next();", "+            if (!rc.isFilesystemOnly()) {", "+                throw new BuildException(\"only file system based resources are\"", "+                                         + \" supported by javadoc\");", "+            }", "+            if (rc instanceof FileSet) {", "+                FileSet fs = (FileSet) rc;", "-            File baseDir = fs.getDir(getProject());", "-            DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "-            String[] files = ds.getIncludedFiles();", "-            for (int i = 0; i < files.length; i++) {", "-                sf.addElement(new SourceFile(new File(baseDir, files[i])));", "+            }", "+            Iterator iter = rc.iterator();", "+            while (iter.hasNext()) {", "+                sf.addElement(new SourceFile(((FileResource) iter.next())", "+                                             .getFile()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7169c77c0e853ccce7a3951c6917fc65", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultObjectConfigurer.java", "commitBeforeChange": "99a9f194032b4185fc017d9bfe31e0419cc51f02", "commitAfterChange": "ced321c00be004a78c335295701169edf0dcb55f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void enableElements()         throws ConfigurationException", "signatureAfterChange": "     public void enableAdders()         throws ConfigurationException", "diff": ["-     */", "-    public void enableElements()", "+    public void enableAdders()", "-            final String elemName = (String)iterator.next();", "-            final Method createMethod = (Method)creators.get( elemName );", "-            final Method addMethod = (Method)adders.get( elemName );", "+            final String propName = (String)iterator.next();", "+            final Method createMethod = (Method)creators.get( propName );", "+            final Method addMethod = (Method)adders.get( propName );", "-                                       elemName,", "+                                       propName,", "-            final DefaultElementConfigurer configurer =", "-                new DefaultElementConfigurer( type, createMethod, addMethod );", "-            m_elements.put( elemName, configurer );", "+            final DefaultPropertyConfigurer configurer =", "+                new DefaultPropertyConfigurer( type, createMethod, addMethod );", "+            m_props.put( propName, configurer );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "718c03c4b1668960543656c5876b367c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/BorlandDeploymentTool.java", "commitBeforeChange": "16218478e15fb5e9c80609e50190afcc0bbc83ed", "commitAfterChange": "edd396be180db9bf362a71771449b6daff0cf53c", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private void buildBorlandStubs(Iterator ithomes,Hashtable files )", "signatureAfterChange": "     private void buildBorlandStubs(Iterator ithomes,Hashtable files )", "diff": ["-    private void buildBorlandStubs(Iterator ithomes,Hashtable files )", "-    {", "+    private void buildBorlandStubs(Iterator ithomes,Hashtable files ) {", "-        File java2iiopOut = new File(\"java2iiop.log\");", "-        try ", "-        {", "+        //File java2iiopOut = new File(\"java2iiop.log\");", "+        File java2iiopOut = null;", "+        try {", "+            java2iiopOut = File.createTempFile(\"java2iiop\",\"log\");", "+            log(\" iiop log file : \"+ java2iiopOut ,Project.MSG_DEBUG);", "+", "-            if ( java2iiopdebug ) ", "-            {", "+            if ( java2iiopdebug ) {", "+            //no TIE classes", "+            execTask.createArg().setValue(\"-no_tie\");", "-            while ( ithomes.hasNext()) ", "-            {", "+            while ( ithomes.hasNext()) {", "-        try", "-        {", "+        try {", "-            while ( ( javafile = lnr.readLine()) != null) ", "-            {", "-                if ( javafile.endsWith(\".java\") )", "-                {", "+            while ( ( javafile = lnr.readLine()) != null) {", "+                if ( javafile.endsWith(\".java\") ) {", "-        catch(Exception e)", "-        {", "+        catch(Exception e) {", "+", "+        //delete the output , only if all is succesfull", "+        java2iiopOut.delete();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "767b26298ec48190d107dbcd4e08277c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "a1d12934e3aae0967e603dfad26253dab108be77", "commitAfterChange": "6af38183767fe6db8bcada1ad9d50a5f571c82f7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void run()", "signatureAfterChange": "     public void run()", "diff": ["+                    Class junit4TestAdapterCacheClass = null;", "+                        junit4TestAdapterCacheClass = Class.forName(\"org.apache.tools.ant.taskdefs.optional.junit.CustomJUnit4TestAdapterCache\");", "-                            formalParams = new Class[] {Class.class, JUnit4TestAdapterCache.class};", "-                            actualParams = new Object[] {testClass, CustomJUnit4TestAdapterCache.getInstance()};", "+                            formalParams = new Class[] {Class.class, Class.forName(\"junit.framework.JUnit4TestAdapterCache\")};", "+                            actualParams = new Object[] {testClass, junit4TestAdapterCacheClass.getMethod(\"getInstance\").invoke(null)};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76b68bd41181c4f94b7eb7a85d1d6edb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "795c7c88da1e29ec6f17b63f2e4fa396b27fabda", "commitAfterChange": "602c461fed47f591c6a79feadc6edcf0c9b6b54d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void runBuild(ClassLoader coreLoader) throws BuildException", "signatureAfterChange": "     private void runBuild(ClassLoader coreLoader) throws BuildException", "diff": ["-        ", "+", "-                project.fireBuildStarted();", "+", "+                if (!projectHelp) {", "+                    project.fireBuildStarted();", "+                }", "+", "+                if (projectHelp) {", "+                    printDescription(project);", "+                    printTargets(project, msgOutputLevel > Project.MSG_INFO );", "+                    return;", "+                }", "-                if (!projectHelp) {", "-                    project.executeTargets(targets);", "-                }", "+                project.executeTargets(targets);", "-            }", "-            if (projectHelp) {", "-                printDescription(project);", "-                printTargets(project);", "-            project.fireBuildFinished(error);", "+            if (!projectHelp) {", "+                project.fireBuildFinished(error);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77902736f79e11759c7529623bc84706", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "e2aa7c41ea6b92db4fdb91c61f97ad09b4a25940", "commitAfterChange": "8edaa455e6de687be40590a6a74f166098e20340", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected Main(String[] args) throws BuildException", "signatureAfterChange": "     protected Main(String[] args) throws BuildException", "diff": ["+                    isLogFileUsed = true;", "-                    String msg = \"Cannot write on the specified log file. \" ", "-                        + \"Make sure the path exists and you have write \" ", "+                    String msg = \"Cannot write on the specified log file. \"", "+                        + \"Make sure the path exists and you have write \"", "-            } else if (arg.equals(\"-buildfile\") || arg.equals(\"-file\") ", "+            } else if (arg.equals(\"-buildfile\") || arg.equals(\"-file\")", "-                    System.out.println(\"Only one logger class may \" ", "+                    System.out.println(\"Only one logger class may \"", "-                } ", "+                }", "-        ", "+", "-                buildFile = findBuildFile(System.getProperty(\"user.dir\"), ", "+                buildFile = findBuildFile(System.getProperty(\"user.dir\"),", "-            String filename ", "+            String filename", "-            ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "794248a3423ad45a591e31d6f4e01708", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "6309813d01620379a35da64c12c4de488efedc2d", "commitAfterChange": "4ab1950bd8ba0bf2335e09b07852d74e1b016f5a", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 15, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        if (baseDir == null && filesets.size() == 0 && \"zip\".equals(archiveType)) {", "+        if (baseDir == null && filesets.size() == 0", "+                && groupfilesets.size() == 0 && \"zip\".equals(archiveType)) {", "+            }", "+        }", "+", "+        // Add the files found in groupfileset to fileset", "+        for (int i=0; i<groupfilesets.size(); i++) {", "+", "+            log(\"Processing groupfileset \", Project.MSG_VERBOSE);", "+            FileSet fs = (FileSet) groupfilesets.elementAt(i);", "+            FileScanner scanner = fs.getDirectoryScanner(project);", "+            String[] files = scanner.getIncludedFiles();", "+            File basedir = scanner.getBasedir();", "+            for (int j=0; j<files.length; j++) {", "+", "+                log(\"Adding file \" + files[j] + \" to fileset\", Project.MSG_VERBOSE);", "+                ZipFileSet zf = new ZipFileSet();", "+                zf.setSrc(new File(basedir, files[j]));", "+                filesets.add(zf);", "-                ", "+", "-        } catch (Throwable t) {", "-            String msg = \"Problem creating \" + archiveType + \": \" + t.getMessage();", "+        } catch (IOException ioe) {", "+            String msg = \"Problem creating \" + archiveType + \": \" + ioe.getMessage();", "-            throw new BuildException(msg, t, location);", "+            throw new BuildException(msg, ioe, location);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b2037dd00edc34e6fc2b28c0cbd35ca", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/JavaResource.java", "commitBeforeChange": "0d89047e67e3e5d4c8354b2a6a4421532a8a7d4c", "commitAfterChange": "437d53cbd2bf3d9dbaea55981914f59b772a71cf", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public InputStream getInputStream() throws IOException", "signatureAfterChange": "     protected InputStream openInputStream(ClassLoader cl) throws IOException", "diff": ["-    public InputStream getInputStream() throws IOException {", "-        if (isReference()) {", "-            return ((Resource) getCheckedRef()).getInputStream();", "-        }", "-        ClassLoader cl = null;", "-        if (loader != null) {", "-            cl = (ClassLoader) loader.getReferencedObject();", "-        }", "-        if (cl == null) {", "-            if (getClasspath() != null) {", "-                cl = getProject().createClassLoader(classpath);", "-            } else {", "-                cl = JavaResource.class.getClassLoader();", "-            }", "-            if (loader != null && cl != null) {", "-                getProject().addReference(loader.getRefId(), cl);", "-            }", "-        }", "-", "+    protected InputStream openInputStream(ClassLoader cl) throws IOException {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bd543ccc9fb68237143038de357129d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/Reflector.java", "commitBeforeChange": "2cf032e2ec39726aed4c77622b59eadd3828072e", "commitAfterChange": "2e31f97888f11646bebb8939fed00c37c4c863e2", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 12, "signatureBeforeChange": "                     public void set(Object parent, String value)                          throws InvocationTargetException,                         IllegalAccessException", "signatureAfterChange": "     private void addAttributeSetter(String attributeName,                                      AttributeSetter setter)", "diff": ["+     */", "+    private void addAttributeSetter(String attributeName, ", "+                                    AttributeSetter setter) {", "+        String name = attributeName.toLowerCase();", "+        AttributeSetter currentSetter ", "+            = (AttributeSetter)attributeSetters.get(name);", "+        if (currentSetter != null) {", "+            // there is a setter, is it lower down in the class hierarchy", "+            int currentDepth = currentSetter.getDepth();", "+            if (currentDepth < setter.getDepth()) {", "+                return;", "+            } else if (currentDepth == setter.getDepth()) {", "+                // now check the types", "+                Class currentType = currentSetter.getType();", "+                if (currentType != String.class) {", "+                    return;", "+                }", "+            }", "+        }                                         ", "+        attributeSetters.put(name, setter);", "+    }", "-                new AttributeSetter() {", "-                    public void set(Object parent, String value)", "-                         throws InvocationTargetException,", "-                        IllegalAccessException {", "-                        m.invoke(parent, new String[]{value});", "-                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c8ba4e58c14414ebd6bd30c2805e7c7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "80c2d3216de28719be98a066a9d96872e89ffc0b", "commitAfterChange": "72621f72077df4b67c31e5b6cae759a8e49c2fed", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "     private void checkIncludePatterns()", "signatureAfterChange": "     private void checkIncludePatterns()", "diff": ["-                        String path = fileUtils.removeLeadingPath(canonBase,", "+                        String path = FILE_UTILS.removeLeadingPath(canonBase,", "-                                    fileUtils.removeLeadingPath(basedir,", "-                                                                myfile);", "+                                    FILE_UTILS.removeLeadingPath(basedir,", "+                                                                 myfile);", "-                        currentelement = fileUtils.removeLeadingPath(basedir,", "+                        currentelement = FILE_UTILS.removeLeadingPath(basedir,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d4c62dc1f7960bfa8cc06165bdc190c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Delete.java", "commitBeforeChange": "f2b07b0ac2024ad12ebcd012dffc74a82cc77d06", "commitAfterChange": "00829ad00c50d5d4cff7c5f9b52bedc00225dfb4", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                    FileResource r = (FileResource) iter.next();", "-                    if (!r.isExists()) {", "+                    File f = ((FileProvider) iter.next()).getFile();", "+                    if (!f.exists()) {", "-                    if (!(r.isDirectory()) || r.getFile().list().length == 0) {", "-                        log(\"Deleting \" + r, verbosity);", "-                        if (!delete(r.getFile()) && failonerror) {", "+                    if (!(f.isDirectory()) || f.list().length == 0) {", "+                        log(\"Deleting \" + f, verbosity);", "+                        if (!delete(f) && failonerror) {", "-                                + (r.isDirectory() ? \"directory \" : \"file \") + r);", "+                                + (f.isDirectory() ? \"directory \" : \"file \") + f);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e47796c5ab7e4a4027bdd7025baae18", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "f19f07d6e4c72f241057ecfc32d80be21201bbf7", "commitAfterChange": "ca91f8cb7e4f2bfe1a191dea6126a32649af9565", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     protected void createParents(FTPClient ftp, String filename)          throws IOException, BuildException", "signatureAfterChange": "     protected void createParents(FTPClient ftp, String filename)          throws IOException, BuildException", "diff": ["-                ftp.makeDirectory(resolveFile(dir.getPath()));", "-                // Both codes 550 and 553 can be produced by FTP Servers", "-                //  to indicate that an attempt to create a directory has", "-                //  failed because the directory already exists.", "-                int result = ftp.getReplyCode();", "-", "-                if (!FTPReply.isPositiveCompletion(result) &&", "-                    (result != 550) && (result != 553) &&", "-                    !ignoreNoncriticalErrors) {", "-                    throw new BuildException(\"could not create directory: \" +", "-                        ftp.getReplyString());", "+                if(!ftp.makeDirectory(resolveFile(dir.getPath()))) {", "+                    handleMkDirFailure(ftp);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fa8333be4c2f21a68099d5403b4283a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/starteam/StarTeamCheckout.java", "commitBeforeChange": "837f7ef785e24137608ba41f850d605b23bccff4", "commitAfterChange": "23e61358c8ed2aa3fe63c1f67082150047f1df9e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private boolean delete(java.io.File file)", "signatureAfterChange": "         void delete(java.io.File local)", "diff": ["-    private boolean delete(java.io.File file) {", "-        // If the current file is a Directory, we need to delete all", "-        // of its children as well.", "-        if (file.isDirectory()) {", "-            java.io.File[] children = file.listFiles();", "-            for (int i = 0; i < children.length; i++) {", "-                delete(children[i]);", "-            }", "-        log(\"Deleting: \" + file.getAbsolutePath(), Project.MSG_INFO);", "-        return file.delete();", "+         */", "+        void delete(java.io.File local) {", "+            // once we find a folder that isn't in the repository, ", "+            // anything below it can be deleted.", "+            if (local.isDirectory() && isRecursive()) {", "+                String[] contents = local.list();", "+                for (int i=0; i< contents.length; i++) {", "+                    java.io.File file = new java.io.File(local, contents[i]);", "+                    delete(file);", "+                }", "+            } ", "+            local.delete();", "+            log(\"Deleted uncontrolled item \" + local.getAbsolutePath());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "805488a3e1bddb3f366ca89da8fd8656", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Manifest.java", "commitBeforeChange": "3e1cde904eca74dd23da0102f7a68ecc0cd1aa62", "commitAfterChange": "176b11946b0fd2fdc0f5f06d676aba72fc4fce98", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "         private void writeValue(PrintWriter writer, String value)              throws IOException", "signatureAfterChange": "         private void writeValue(PrintWriter writer, String value)              throws IOException", "diff": ["-            String line = name + \": \" + value;", "-            while (line.getBytes().length > MAX_LINE_LENGTH) {", "+            String line = null;", "+            int nameLength = name.getBytes(JAR_ENCODING).length;", "+            if (nameLength > MAX_NAME_VALUE_LENGTH)", "+            {", "+                if (nameLength > MAX_NAME_LENGTH)", "+                {", "+                    throw new IOException(\"Unable to write manifest line \"", "+                            + name + \": \" + value);", "+                }", "+                writer.print(name + \": \" + EOL);", "+                line = \" \" + value;", "+            }", "+            else", "+            {", "+                line = name + \": \" + value;", "+            }", "+            while (line.getBytes(JAR_ENCODING).length > MAX_SECTION_LENGTH) {", "+                if (breakIndex >= line.length())", "+                {", "+                    breakIndex = line.length() - 1;", "+                }", "-                while (section.getBytes().length > MAX_SECTION_LENGTH", "+                while (section.getBytes(JAR_ENCODING).length > MAX_SECTION_LENGTH"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80c62b62f701a061cd32ef0b333d5610", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/XMLCatalog.java", "commitBeforeChange": "d9c45b7a34a73bf4f4fcb6af80821eb8f8175765", "commitAfterChange": "299a7d5929bc956bf865bb1c86e5bfce49ca7df1", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private InputSource filesystemLookup(ResourceLocation matchingEntry)", "signatureAfterChange": "     private InputSource filesystemLookup(ResourceLocation matchingEntry)", "diff": ["+        // the following line seems to be necessary on Windows under JDK 1.2", "+        uri = uri.replace(File.separatorChar, '/');", "-", "-            // ignore", "+            // this processing is useful under Windows when the location of the DTD has been given as an absolute path", "+            // see Bugzilla Report 23913", "+            File testFile = new File(uri);", "+            if (testFile.exists() && testFile.canRead()) {", "+                log(\"uri : '\"", "+                    + uri + \"' matches a readable file\", Project.MSG_DEBUG);", "+                try {", "+                    url = fileUtils.getFileURL(testFile);", "+                } catch (MalformedURLException ex1) {", "+                    throw new BuildException(\"could not find an URL for :\" + testFile.getAbsolutePath());", "+                }", "+            } else {", "+                log(\"uri : '\"", "+                    + uri + \"' does not match a readable file\", Project.MSG_DEBUG);", "+", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "823a7c0793a61c6cb96c28270e3d6383", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/MacroInstance.java", "commitBeforeChange": "9ca90c8d554c625344a9ce361de4eeae69e1259f", "commitAfterChange": "c7e4640df951e885a5552ee0ebc11e56e67fb003", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      private UnknownElement copy(UnknownElement ue)", "signatureAfterChange": "      private UnknownElement copy(UnknownElement ue, boolean nested)", "diff": ["-    private UnknownElement copy(UnknownElement ue) {", "+    private UnknownElement copy(UnknownElement ue, boolean nested) {", "-            if (templateElement == null) {", "-                UnknownElement child = copy(unknownElement);", "+            if (templateElement == null || nested) {", "+                UnknownElement child = copy(unknownElement, nested);", "-                    UnknownElement child = copy((UnknownElement) i.next());", "+                    UnknownElement child", "+                        = copy((UnknownElement) i.next(), true);", "-                        UnknownElement child = copy((UnknownElement) i.next());", "+                        UnknownElement child", "+                            = copy((UnknownElement) i.next(), true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "838112d250a6a9ece07f2c5d7adba8b2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/RuntimeConfigurable.java", "commitBeforeChange": "d884406a09baca6c865a5281f08bb92000928541", "commitAfterChange": "84abb27b2f8c970557388bb60f09f1c3409d8f75", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public synchronized void maybeConfigure(Project p, boolean configureChildren)         throws BuildException", "signatureAfterChange": "     public synchronized void maybeConfigure(Project p, boolean configureChildren)         throws BuildException", "diff": ["-                Object attrValue = null;", "+                Object attrValue = PropertyHelper.getPropertyHelper(p).parseProperties(value);", "-                    attrValue = value;", "-                } else {", "-                    attrValue = PropertyHelper.getPropertyHelper(p).parseProperties(value);", "+                    for (Iterator attrs = ((MacroInstance) target).getMacroDef().getAttributes().iterator(); attrs.hasNext();) {", "+                        MacroDef.Attribute attr = (MacroDef.Attribute) attrs.next();", "+                        if (attr.getName().equals(name)) {", "+                            if (!attr.isDoubleExpanding()) {", "+                                attrValue = value;", "+                            }", "+                            break;", "+                        }", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "859f36d4850375714a0fbb3c303b6ccd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XSLTProcess.java", "commitBeforeChange": "733f95fdf2959897b5226252914c05bdc1e5b333", "commitAfterChange": "19b4f6ae8909922bc99b9309bdc7f0617abc23f3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+            Resource styleResource;", "-                baseDir = getProject().resolveFile(\".\");", "+                baseDir = getProject().getBaseDir();", "-                xslResource = fr;", "+                styleResource = fr;", "+            } else {", "+                styleResource = xslResource;", "-                process(inFile, outFile, xslResource);", "+                process(inFile, outFile, styleResource);", "-                    process(baseDir, list[i], destDir, xslResource);", "+                    process(baseDir, list[i], destDir, styleResource);", "-                                    xslResource);", "+                                    styleResource);", "-            processResources(xslResource);", "+            processResources(styleResource);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86ea99bd2331dae571039e0e5cad81ee", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/Javah.java", "commitBeforeChange": "5ffacddada00339f7c26549ff306e1d4fa04fc41", "commitAfterChange": "13b07b313fdc7ab2620f71517ab16698be496f24", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 30, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        /* unused.", "-        TODO: If anyone cannot come up with a reason for this, lets delete it", "-", "-        String compiler = getProject().getProperty(\"build.compiler\");", "-        if (compiler == null) {", "-            if (!JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)", "-                && !JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_2)) {", "-                compiler = \"modern\";", "-            } else {", "-                compiler = \"classic\";", "-            }", "-        }", "-        */", "-        doClassicCompile();", "-    }", "+        JavahAdapter ad = ", "+            JavahAdapterFactory.getAdapter(facade.getImplementation(),", "+                                           this);", "+        if (!ad.compile(this)) {", "+            throw new BuildException(\"compilation failed\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8736f05789089dd3748726a9efc3d342", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Replace.java", "commitBeforeChange": "948ce9bca757a323b0e07ce25a10a76f759898ba", "commitAfterChange": "003b013e23a3ddefa411b4340f52f43df5ea0870", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+        if (token == null) {", "+            throw new BuildException(\"replace token must not be null\");", "+        }", "+", "+        if (src == null && dir == null) {", "+            throw new BuildException(\"Either the file or the dir attribute must be specified\");", "+        }", "+        ", "-        ", "-        if (src == null || token == null ) {", "-            project.log(\"File and token must not be null\");", "-            return;            ", "+", "+        if (src != null) {", "+            processFile(src);", "-        if (dest == null) {", "-            throw new BuildException(\"Error creating temp file.\");", "+        if (dir != null) {", "+\t    DirectoryScanner ds = super.getDirectoryScanner(dir);", "+            String[] srcs = ds.getIncludedFiles();", "+", "+            for(int i=0; i<srcs.length; i++) {", "+                File file = new File(dir,srcs[i]); ", "+                processFile(file);", "+            }", "-                ", "+    }", "-            BufferedWriter bw = new BufferedWriter(new FileWriter(dest));", "-            dest.renameTo(src);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "873961c8adc0ab14a7375a3ab734a246", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/cvslib/CvsVersion.java", "commitBeforeChange": "c0fab21f2d3c48ef2874c8ddd925d676bda1e9ef", "commitAfterChange": "8983c83c513818f041f772ca83d095d5637fecda", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void execute()", "signatureAfterChange": "     public void execute()", "diff": ["-        boolean cvs = false;", "+        String cvs = null;", "-            } else if (currentToken.equals(\"(CVS)\")) {", "-                cvs = true;", "+            } else if (currentToken.startsWith(\"(CVS\")", "+                       && currentToken.endsWith(\")\")) {", "+                cvs = currentToken.length() == 5 ? \"\" : \" \" + currentToken;", "-            if (client && cvs) {", "+            if (client && cvs != null) {", "-                    clientVersion = st.nextToken();", "+                    clientVersion = st.nextToken() + cvs;", "-                cvs = false;", "-            } else if (server && cvs) {", "+                cvs = null;", "+            } else if (server && cvs != null) {", "-                    serverVersion = st.nextToken();", "+                    serverVersion = st.nextToken() + cvs;", "-                cvs = false;", "+                cvs = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87bb3a78cd25bb681f55138dae0e4113", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultObjectConfigurer.java", "commitBeforeChange": "8af1905a98b1e04a63ab7473d64a41bfda91f15e", "commitAfterChange": "7a5c30f33c46dec3fb201dac6878a09c4cfcaf2c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void enableAdders()         throws ConfigurationException", "signatureAfterChange": "     private void enableProperties()         throws ConfigurationException", "diff": ["-    public void enableAdders()", "+    private void enableProperties()", "+            final boolean isTypedProp = (propName.length() == 0);", "+            if( isTypedProp && !type.isInterface() )", "+            {", "+                final String message =", "+                    REZ.getString( \"typed-adder-non-interface.error\",", "+                                   m_class.getName(),", "+                                   type.getName() );", "+                throw new ConfigurationException( message );", "+            }", "+", "-            m_props.put( propName, configurer );", "+            if( isTypedProp )", "+            {", "+                m_typedPropConfigurer = configurer;", "+            }", "+            else", "+            {", "+                m_props.put( propName, configurer );", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88c9f961a728236d2b3aaab8019cbb10", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Replace.java", "commitBeforeChange": "822028744ff977b3588dcc54bafdc1e9e8f98375", "commitAfterChange": "b641968fade3f4f16c1676f2b5f06c6b4344ab08", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        ", "-        if (token == null) {", "-            throw new BuildException(\"replace token must not be null\", location);", "+        validateAttributes();", "+", "+        if (propertyFile != null) {", "+            properties = getProperties(propertyFile);", "-        if (token.getText().equals(\"\")) {", "-            throw new BuildException(\"replace token must not be empty\", location);", "-        }", "-", "-        if (src == null && dir == null) {", "-            throw new BuildException(\"Either the file or the dir attribute must be specified\", location);", "-        }", "-        ", "-        log(\"Replacing \" + token.getText() + \" --> \" + value.getText());", "+        validateReplacefilters();", "-        ", "+", "-            DirectoryScanner ds = super.getDirectoryScanner(dir);", "+        DirectoryScanner ds = super.getDirectoryScanner(dir);", "-                File file = new File(dir,srcs[i]); ", "+                File file = new File(dir,srcs[i]);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88ed04718a68c4f4162e6560b0b75dde", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/FixCRLF.java", "commitBeforeChange": "e75231b54caea20b8fa2ded6f40fa2ab335989f6", "commitAfterChange": "ab202c98abdb86255e80d286acee3b8c6960cab2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                        if (addtab == 0) outdata[o++]=indata[k];", "+                        if (addtab == 0) outdata[o++]=(byte)' ';", "-                            outdata[o++]=indata[k];", "+                            outdata[o++]=(byte)'\\t';", "-                            outdata[o++]=indata[k];", "+                            outdata[o++]=(byte)'\\r';", "-                        if (addcr == +1) outdata[o++]='\\r';", "-                        outdata[o++]='\\n';", "+                        if (addcr == +1) outdata[o++]=(byte)'\\r';", "+                        outdata[o++]=(byte)'\\n';", "-                                outdata[o++]='\\t';", "+                                outdata[o++]=(byte)'\\t';", "-                        while (o<line+col) outdata[o++]=' ';", "+                        while (o<line+col) outdata[o++]=(byte)' ';"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ba6b5d43fe46f32c022188fcd5cb68b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/BindTargets.java", "commitBeforeChange": "568f81e94792020b987abea1f2bc136a0d6764ec", "commitAfterChange": "70abcb7f5d2128f7af46b37ca416d2859a77d8e6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-            onMissingExtensionPoint = ProjectHelper.MISSING_EP_FAIL;", "-        }", "-        if (!onMissingExtensionPoint.equals(ProjectHelper.MISSING_EP_FAIL)", "-                && !onMissingExtensionPoint", "-                        .equals(ProjectHelper.MISSING_EP_IGNORE)", "-                && !onMissingExtensionPoint", "-                        .equals(ProjectHelper.MISSING_EP_WARN)) {", "-            throw new BuildException(\"onMissingExtensionPoint\"", "-                    + \" attribute can only be '\"", "-                    + ProjectHelper.MISSING_EP_FAIL + \"', '\"", "-                    + ProjectHelper.MISSING_EP_WARN + \"' or '\"", "-                    + ProjectHelper.MISSING_EP_IGNORE + \"'\", getLocation());", "+            onMissingExtensionPoint = OnMissingExtensionPoint.FAIL;", "-                                            onMissingExtensionPoint });", "+                                            onMissingExtensionPoint.name() });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bc22fbc8272ac9c0015cac7868bfd32", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/dotnet/CSharp.java", "commitBeforeChange": "b4c9277617ab9ad1d56a9e1f87d5fdeffa07758b", "commitAfterChange": "826cc88ca90d863d5ad09f4e11cde87b28aecb53", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 61, "signatureBeforeChange": "     public void execute()              throws BuildException", "signatureAfterChange": "     public void execute()              throws BuildException", "diff": ["+        validate();", "+        long outputTimestamp;", "+        if(outputFile.exists()) {", "+            outputTimestamp = outputFile.lastModified();", "+        } else {", "+            outputTimestamp = 0;", "+        }", "+        int filesOutOfDate=0;", "+        File base=scanner.getBasedir();", "-            String targetFile = dependencies[i];", "-            targetFile = baseDir + File.separator + targetFile;", "-            command.addArgument(targetFile);", "+            File targetFile = new File(base,dependencies[i]);", "+            command.addArgument(targetFile.toString());", "+            if(targetFile.lastModified()>outputTimestamp) {", "+                filesOutOfDate++;", "+                log(\"Source file \"+targetFile.toString()+\" is out of date\");", "+            }", "-        command.runCommand();", "+        if(filesOutOfDate>0) {", "+            command.runCommand();", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e02a639f0236a4149716e46e22d467a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "37e97ef42d47f59a277025d51b1d13719a9e616a", "commitAfterChange": "b92e6b644f97b87083602a8ce4029cce01725674", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     public void scan() throws IllegalStateException", "signatureAfterChange": "     public void scan() throws IllegalStateException", "diff": ["-                    illegal = new IllegalStateException(\"No basedir set\");", "+                    // if no basedir and no includes, nothing to do:", "+                    if (nullIncludes) {", "+                        return;", "+                    }", "-                                                        + \" does not exist\");", "+                                                            + \" does not exist\");", "-                                                        + \" is not a directory\");", "+                                                            + \" is not a directory\");", "-                }", "-                if (illegal != null) {", "-                    throw illegal;", "+                    if (illegal != null) {", "+                        throw illegal;", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f75592c9433500eb6031bb58b3ee45d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipFile.java", "commitBeforeChange": "395ad149e6859f011f96b800a14290b2c292788d", "commitAfterChange": "8d9358d36933cdd6c9a4dfe94cb07513fe846c75", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void populateFromCentralDirectory()         throws IOException", "signatureAfterChange": "     private void populateFromCentralDirectory()         throws IOException", "diff": ["-        byte[] signatureBytes = new byte[4];", "+        byte[] signatureBytes = new byte[WORD];", "-            off += 2;", "+            off += SHORT;", "-            off += 4; // skip version info and general purpose byte", "+            off += WORD; // skip version info and general purpose byte", "-            off += 2;", "+            off += SHORT;", "-            off += 4;", "+            off += WORD;", "-            off += 4;", "+            off += WORD;", "-            off += 4;", "+            off += WORD;", "-            off += 4;", "+            off += WORD;", "-            off += 2;", "+            off += SHORT;", "-            off += 2;", "+            off += SHORT;", "-            off += 2;", "+            off += SHORT;", "-            off += 2; // disk number", "+            off += SHORT; // disk number", "-            off += 2;", "+            off += SHORT;", "-            off += 4;", "+            off += WORD;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f7ba1ca66fb098546c9011cd47da2c1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteJava.java", "commitBeforeChange": "5e898465ac1ab3d90fdc26dc34a2b87a2ea9be35", "commitAfterChange": "c5faebbd854cf6f4363402c2cd2a54749b4eeb61", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute(Project project) throws BuildException", "diff": ["-    public void execute() throws BuildException{", "+", "+    public void execute(Project project) throws BuildException{", "-        final Class[] param = { argument[0].getClass() };", "-            final Class target = Class.forName(classname);", "+            final Class[] param = { Class.forName(\"[Ljava.lang.String;\") };", "+            Class target = null;", "+            if (classpath == null) {", "+                target = Class.forName(classname);", "+            } else {", "+                AntClassLoader loader = new AntClassLoader(project, classpath);", "+                target = loader.forceLoadClass(classname);", "+            }", "-                throw new BuildException(t.toString());", "+                throw new BuildException(t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ff304db68d5929959b603cf38dcce12", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/cvslib/CvsVersion.java", "commitBeforeChange": "2a77a7377909e28c2f58374c57ea0e2b77c2ed2b", "commitAfterChange": "d302bf91179d5fc190dd3f2b8e2d41112b45cdfb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void execute()", "signatureAfterChange": "     public void execute()", "diff": ["+        log(\"Received version response \\\"\" + output + \"\\\"\",", "+            Project.MSG_DEBUG);", "-        while (st.hasMoreTokens()) {", "-            String currentToken = st.nextToken();", "+        String cachedVersion = null;", "+        boolean haveReadAhead = false;", "+        while (haveReadAhead || st.hasMoreTokens()) {", "+            String currentToken = haveReadAhead ? cachedVersion : st.nextToken();", "+            haveReadAhead = false;", "-            if (client && cvs != null) {", "+            if (!client && !server && cvs != null", "+                && cachedVersion == null && st.hasMoreTokens()) {", "+                cachedVersion = st.nextToken();", "+                haveReadAhead = true;", "+            } else if (client && cvs != null) {", "+            } else if (currentToken.equals(\"(client/server)\")", "+                       && cvs != null && cachedVersion != null", "+                       && !client && !server) {", "+                client = server = true;", "+                clientVersion = serverVersion = cachedVersion + cvs;", "+                cachedVersion = cvs = null;", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "908debe1051586e151b4d2d3fc0fb73b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "aae6a87238f255f5599bd1a559c1da34767e8716", "commitAfterChange": "296f7cecd0347b79f837be45c671e0fa9054f402", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 50, "signatureBeforeChange": "         public Process exec(Project project, String[] cmd, String[] env)              throws IOException", "signatureAfterChange": "          private void deleteAfter(final File f, final Process p)", "diff": ["-         */", "-        public Process exec(Project project, String[] cmd, String[] env)", "-             throws IOException {", "-            // Need to quote arguments with spaces, and to escape", "-            // quote characters", "-            String[] newcmd = new String[cmd.length];", "-            for (int i = 0; i < cmd.length; i++) {", "-                newcmd[i] = Commandline.quoteArgument(cmd[i]);", "-            }", "-            if (project != null) {", "-                project.log(\"Execute:Java11CommandLauncher: \"", "-                    + Commandline.describeCommand(newcmd), Project.MSG_DEBUG);", "-            }", "-            return Runtime.getRuntime().exec(newcmd, env);", "-        }", "+        private void deleteAfter(final File f, final Process p) {", "+            new Thread() {", "+                public void run() {", "+                    try {", "+                        p.waitFor();", "+                    }", "+                    catch (InterruptedException e) {", "+                        //ignore", "+                    }", "+                    FILE_UTILS.delete(f);", "+                }", "+            }.start();", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90eb7f9a234c221297e695a8a85964fc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/URLResource.java", "commitBeforeChange": "1499e60f514e7d866dd519719cf7b6f08ad613b3", "commitAfterChange": "54be7a626d4bc7f577c57455b634a6b61da8f352", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public synchronized URL getURL()", "signatureAfterChange": "     public synchronized URL getURL()", "diff": ["-        }", "-        if (url == null && javaResource != null) {", "-            ClassLoader cl = null;", "-            AntClassLoader acl = null;", "-            if (classpath != null) {", "-                acl = getProject().createClassLoader(classpath);", "-                cl = acl;", "-            } else {", "-                cl = getClass().getClassLoader();", "-                if (cl == null) {", "-                    cl = ClassLoader.getSystemClassLoader();", "-                }", "-            }", "-            if (cl != null) {", "-                setURL(cl.getResource(javaResource));", "-                if (acl != null) {", "-                    acl.cleanup();", "-                }", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "910709f837ede0eae866f078493e966d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/ZipScanner.java", "commitBeforeChange": "ec980be7345681968c93f0609e9a3fecb39b9753", "commitAfterChange": "fbb9886634198d8377104bef9ec697fadeb134df", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void scanme()", "signatureAfterChange": "     private void scanme()", "diff": ["+        //do not use a FileResource b/c it pulls File info from the filesystem:", "-", "-", "+        init();", "-        myentries = new Hashtable();", "+", "+        fileEntries.clear();", "+        dirEntries.clear();", "+        matchFileEntries.clear();", "+        matchDirEntries.clear();", "+", "-", "-                myentries.put(new String(entry.getName()),", "-                              new Resource(entry.getName(), true,", "-                                           entry.getTime(),", "-                                           entry.isDirectory(),", "-                                           entry.getSize()));", "+                Resource r = new ZipResource(srcFile, encoding, entry);", "+                String name = entry.getName();", "+                if (entry.isDirectory()) {", "+                    name = trimSeparator(name);", "+                    dirEntries.put(name, r);", "+                    if (match(name)) {", "+                        matchDirEntries.put(name, r);", "+                    }", "+                } else {", "+                    fileEntries.put(name, r);", "+                    if (match(name)) {", "+                        matchFileEntries.put(name, r);", "+                    }", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "947c901009f1a533c7c12abfa824502e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/Path.java", "commitBeforeChange": "b0229b06879897829bf7daaad44f3193cdbdccb3", "commitAfterChange": "f544eb807ac9cd1f28bf1a894ad33519b7119771", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public String[] list()", "signatureAfterChange": "     public String[] list()", "diff": ["-                DirectoryScanner ds = dset.getDirectoryScanner(getProject());", "-                String[] s = ds.getIncludedDirectories();", "-                File dir = dset.getDir(getProject());", "-                addUnlessPresent(result, dir, s);", "+                addUnlessPresent(result, dset.getDir(getProject()),", "+                    dset.getDirectoryScanner(getProject()).getIncludedDirectories());", "-                String[] s = ds.getIncludedFiles();", "-                addUnlessPresent(result, dir, s);", "+                addUnlessPresent(result, dir, ds.getIncludedFiles());", "-                String[] s = fl.getFiles(getProject());", "-                File dir = fl.getDir(getProject());", "-                addUnlessPresent(result, dir, s);", "+                addUnlessPresent(result,", "+                    fl.getDir(getProject()), fl.getFiles(getProject()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94820cf143bc6ed596114c4be525d330", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "6e72d89be84e4a3b021e1d59f14a97d2f4959adc", "commitAfterChange": "82372e064bb10559e8845e30f0dd1d1cefdf1811", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            if (srcFile == null && sqlCommand.length() == 0", "-                && resources.size() == 0) {", "+            if (srcFile == null && sqlCommand.length() == 0 && resources == null) {", "-            // deal with the resources", "-            Iterator iter = resources.iterator();", "-            while (iter.hasNext()) {", "-                Resource r = (Resource) iter.next();", "-                // Make a transaction for each resource", "-                Transaction t = createTransaction();", "-                t.setSrcResource(r);", "+            if (resources != null) {", "+                // deal with the resources", "+                Iterator iter = resources.iterator();", "+                while (iter.hasNext()) {", "+                    Resource r = (Resource) iter.next();", "+                    // Make a transaction for each resource", "+                    Transaction t = createTransaction();", "+                    t.setSrcResource(r);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94fe097ac7551ba57487c2ed1d480826", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/FixCRLF.java", "commitBeforeChange": "dd7b8f662346496d52028cb3cdac3b8e3d28aae9", "commitAfterChange": "2c873f525b1a2073ac41dbe080edd2f5b8232337", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            \" eof=\" + (ctrlz==-1 ? \"add\" : ctrlz==0 ? \"asis\" : \"remove\"),", "+            \" eof=\" + (ctrlz==-1 ? \"add\" : ctrlz==0 ? \"asis\" : \"remove\") +", "+            \" tablength=\" + tablength,", "-            if (addtab == -1) outsize+=tab*7;", "+            if (addtab == -1) outsize+=tab*(tablength-1);", "-                            col = (col|7)+1;", "+                            col = (col|(tablength-1))+1;", "-                            while ((diff|7)<col) {", "+                            while ((diff|(tablength-1))<col) {", "-                                line-=7-(diff&7);", "+                                line-=(tablength-1)-(diff&(tablength-1));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a527f3178e5c27398ecc98c9aac063e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "535d3552ca0e5fe56d44a97f8bb15d58412b578f", "commitAfterChange": "72e471f0b44df72d79e8481ae11768c141089569", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            conn = getConnection();", "-            if (!isValidRdbms(conn)) {", "-                return;", "-            }", "-            try {", "-                statement = conn.createStatement();", "-                statement.setEscapeProcessing(escapeProcessing);", "+            try {", "-                            conn.commit();", "+                            getConnection().commit();", "-                    if (statement != null) {", "-                        statement.close();", "+                    if (getStatement() != null) {", "+                        getStatement().close();", "-                    if (conn != null) {", "-                        conn.close();", "+                    if (getConnection() != null) {", "+                        getConnection().close();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b007c1044cec0894cbe2da376ebbf2f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SendEmail.java", "commitBeforeChange": "e1ac74c48c3c0d38350e4a3b139aa80d917b93d5", "commitAfterChange": "eed192aac14501428bfd040caf532b532c535dbc", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-", "+                        if (includefilenames) {", "+                            String filename = file.getName();", "+                            int filenamelength = filename.length();", "+                            out.println(filename);", "+                            for (int star=0; star < filenamelength; star++) {", "+                                out.print('=');", "+                            }", "+                            out.println();", "+                        }", "-    ", "+                            if (includefilenames) {", "+                                out.println();", "+                            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b042679aef7096ca3aa2dcec57cfe41", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Move.java", "commitBeforeChange": "c9f232a4f9ea0279af2798189b90177cfc600ba4", "commitAfterChange": "f24b9340dd85400d0bbe3d4bfda9f2fbb85e3a09", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      protected void doFileOperations()", "signatureAfterChange": "      protected void doFileOperations()", "diff": ["-            Enumeration e = dirCopyMap.elements();", "+            Enumeration e = dirCopyMap.keys();", "-                File d = new File((String) e.nextElement());", "-                if (!d.exists()) {", "-                    if (!d.mkdirs()) {", "+                String fromDirName = (String) e.nextElement();", "+                String toDirName = (String) dirCopyMap.get(fromDirName);", "+                File fromDir = new File(fromDirName);", "+                File toDir = new File(toDirName);", "+                if (!toDir.exists()) {", "+                    if (!toDir.mkdirs()) {", "-                            + d.getAbsolutePath(), Project.MSG_ERR);", "+                            + toDirName, Project.MSG_ERR);", "+                }", "+                if (okToDelete(fromDir)) {", "+                    deleteDir(fromDir);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b16c736f6fb3ead65727d1bbe0dd598", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Touch.java", "commitBeforeChange": "636efd4eb0a49b85b020aa22982f32e8958db9c0", "commitAfterChange": "5086d936941d88eb84fbe326c8982bff92887237", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "     protected void touch() throws BuildException", "signatureAfterChange": "     protected void touch() throws BuildException", "diff": ["-        if (file != null) {", "-            if (!file.exists()) {", "-                log(\"Creating \" + file, Project.MSG_INFO);", "-                try {", "-                    fileUtils.createNewFile(file);", "-                } catch (IOException ioe) {", "-                    throw new BuildException(\"Could not create \" + file, ioe,", "-                                             getLocation());", "-                }", "-            }", "-        }", "-", "-        if (millis >= 0 && JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)) {", "-            log(\"modification time of files cannot be set in JDK 1.1\",", "-                Project.MSG_WARN);", "-            return;", "-        }", "+        // deal with the filelists", "+        for (int i = 0; i < filelists.size(); i++) {", "+            FileList fl = (FileList) filelists.elementAt(i);", "+            File fromDir = fl.getDir(getProject());", "+", "+            String[] srcFiles = fl.getFiles(getProject());", "+", "+            for (int j = 0; j < srcFiles.length; j++) {", "+                touch(new File(fromDir, srcFiles[j]));", "+            }", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b19ac6303804acbb70a29c5c7dddf27", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Rmic.java", "commitBeforeChange": "48c3492303350febdfc637a4c4a2e681f15f1867", "commitAfterChange": "cafa34ca0878175f8c8ab1bf7fcfaba70c2b1368", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                scanDir(baseDir, new String[] {", "-                        classname.replace('.', File.separatorChar)", "-                        + \".class\" }, adapter.getMapper());", "+                String path = classname.replace('.', File.separatorChar) + \".class\";", "+                File f = new File(baseDir, path);", "+                if (f.isFile()) {", "+                    scanDir(baseDir, new String[] { path }, adapter.getMapper());", "+                } else {", "+                    // Does not exist, so checking whether it is up to date makes no sense.", "+                    // Compilation will fail later anyway, but tests expect a certain output.", "+                    compileList.add(classname);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c767a6e38ad19589262aa4ffca04f26", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/XmlLogger.java", "commitBeforeChange": "a67f5b98b5a5f57f105269882800666bfc4d74b5", "commitAfterChange": "c4b5bdd374681d596ca0793c46701736892a258b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void buildFinished(BuildEvent event)", "signatureAfterChange": "      public void buildFinished(BuildEvent event)", "diff": ["-                Writer out = new FileWriter(\"log.xml\");", "-                out.write(\"<?xml:stylesheet type=\\\"text/xsl\\\" href=\\\"log.xsl\\\"?>\\n\\n\");", "-                write(buildElement, out, 0);", "-                out.flush();", "-                out.close();", "+            String outFilename = ", "+                event.getProject().getProperty(\"XmlLogger.file\");", "-        }", "-        catch(IOException exc) {", "+            if (outFilename == null) {", "+                outFilename = \"log.xml\";", "+            }", "+", "+            Writer out = new FileWriter(outFilename);", "+            out.write(\"<?xml:stylesheet type=\\\"text/xsl\\\" href=\\\"log.xsl\\\"?>\\n\\n\");", "+            write(buildElement, out, 0);", "+            out.flush();", "+            out.close();", "+            ", "+        } catch(IOException exc) {", "+        buildElement = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d91b10d5f2a1ace41bbd119e6e30482", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/Path.java", "commitBeforeChange": "ec980be7345681968c93f0609e9a3fecb39b9753", "commitAfterChange": "fbb9886634198d8377104bef9ec697fadeb134df", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected void dieOnCircularReference(Stack stk, Project p)         throws BuildException", "signatureAfterChange": "              public boolean isFilesystemOnly()", "diff": ["+    ", "+        public boolean isFilesystemOnly() {", "+            return true;", "+        }", "-     */", "-    protected void dieOnCircularReference(Stack stk, Project p)", "-        throws BuildException {", "-", "-        if (isChecked()) {", "-            return;", "-        }", "-", "-        Enumeration e = elements.elements();", "-        while (e.hasMoreElements()) {", "-            Object o = e.nextElement();", "-            if (o instanceof Reference) {", "-                o = ((Reference) o).getReferencedObject(p);", "-            }", "-", "-            if (o instanceof DataType) {", "-                if (stk.contains(o)) {", "-                    throw circularReference();", "-                } else {", "-                    stk.push(o);", "-                    ((DataType) o).dieOnCircularReference(stk, p);", "-                    stk.pop();", "-                }", "-            }", "-        }", "-        setChecked(true);", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0e7b5293bf427a21d8df1282a87c611", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ImportTask.java", "commitBeforeChange": "27b0172aac056d0a4710e82e259bd31a24841b16", "commitAfterChange": "6b2378c2e6dfde13698cbe45bf633854c817bbd6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void execute()", "signatureAfterChange": "      public void execute()", "diff": ["+", "+        String oldSep = ProjectHelper.getCurrentPrefixSeparator();", "-            ProjectHelper.setCurrentTargetPrefix(targetPrefix);", "-            ProjectHelper.setInIncludeMode(isInIncludeMode());", "+            String prefix = targetPrefix;", "+            if (isInIncludeMode() && oldPrefix != null", "+                && targetPrefix != null) {", "+                prefix = oldPrefix + oldSep + targetPrefix;", "+            }", "+            setProjectHelperProps(prefix, prefixSeparator,", "+                                  isInIncludeMode());", "+", "-            ProjectHelper.setCurrentTargetPrefix(oldPrefix);", "-            ProjectHelper.setInIncludeMode(oldIncludeMode);", "+            setProjectHelperProps(oldPrefix, oldSep, oldIncludeMode);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1392cdc7ddbc17005d4d187cd0a5070", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ResourceUtils.java", "commitBeforeChange": "efa433f65ff68b646d9b7232f0968a9b697c5cc2", "commitAfterChange": "bc28d31407036126e05e4d64f2b138af69603c7a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public static ResourceCollection selectOutOfDateSources(ProjectComponent logTo,                                                             ResourceCollection source,                                                             FileNameMapper mapper,                                                             ResourceFactory targets,                                                             long granularity)", "signatureAfterChange": "     public static ResourceCollection selectOutOfDateSources(ProjectComponent logTo,                                                             ResourceCollection source,                                                             FileNameMapper mapper,                                                             ResourceFactory targets,                                                             long granularity)", "diff": ["-            String[] targetnames = mapper.mapFileName(", "-                sr.getName().replace('/', File.separatorChar));", "+            String srName = sr.getName();", "+            srName = srName == null", "+                ? srName : srName.replace('/', File.separatorChar);", "+            String[] targetnames = null;", "+            try {", "+                targetnames = mapper.mapFileName(srName);", "+            } catch (Exception e) {", "+\t\tlogTo.log(\"Caught \" + e + \" mapping resource \" + sr,", "+                    Project.MSG_VERBOSE);", "+            }", "-                logTo.log(sr.getName()", "-                      + \" skipped - don\\'t know how to handle it\",", "+                logTo.log(sr + \" skipped - don\\'t know how to handle it\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1c9f100f554d6e46af971317e332bd2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "c51cce56b802399a1712e67544a3224da62b7c49", "commitAfterChange": "36e5ac64fd1e76c49877ce8bb5596589a2c55ddf", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                && filesets.isEmpty()) {", "+                && resources.size() == 0) {", "-                    throw new BuildException(\"Source file or fileset, \"", "+                    throw new BuildException(\"Source file or resource \"", "+                                             + \"collection, \"", "-            // deal with the filesets", "-            for (int i = 0; i < filesets.size(); i++) {", "-                FileSet fs = (FileSet) filesets.elementAt(i);", "-                DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "-                File srcDir = fs.getDir(getProject());", "-", "-                String[] srcFiles = ds.getIncludedFiles();", "-", "-                // Make a transaction for each file", "-                for (int j = 0; j < srcFiles.length; j++) {", "-                    Transaction t = createTransaction();", "-                    t.setSrc(new File(srcDir, srcFiles[j]));", "-                }", "+            // deal with the resources", "+            Iterator iter = resources.iterator();", "+            while (iter.hasNext()) {", "+                Resource r = (Resource) iter.next();", "+                // Make a transaction for each resource", "+                Transaction t = createTransaction();", "+                t.setSrcResource(r);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4d0dc4d2ce4da9ab5368f3339d88c4a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Exec.java", "commitBeforeChange": "46534f2b3d9b703e570c263eaeabf4f874513abf", "commitAfterChange": "b139901cab374b10e2f73a58769fb4ef1c2837bd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      protected void run(String command) throws BuildException", "signatureAfterChange": "      protected void run(String command) throws BuildException", "diff": ["-            ", "-            // get process response", "-            BufferedReader din = new BufferedReader(new InputStreamReader(proc.getInputStream()));", "-            // if \"out\" attribute is present, redirect to it", "-            PrintWriter fos = null;", "-            if (out != null)  {", "-                fos = new PrintWriter(new FileWriter(out));", "+            PrintWriter fos=null;", "+            if( out!=null )  {", "+                fos=new PrintWriter( new FileWriter( out ) );", "+            pipeOutput(proc.getInputStream(), \"exec\", fos);", "+            pipeOutput(proc.getErrorStream(), \"error\", fos);", "+            if (null != fos)", "+        \tfos.close();", "-", "-            // pipe the process output", "-            String line;", "-            while((line = din.readLine()) != null) {", "-                if (fos == null) {", "-                    project.log(line, \"exec\", Project.MSG_INFO);", "-                } else {", "-                    fos.println(line);", "-                }", "-            }", "-", "-            // wait until the process is finished"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a57f757ba24e6258f16851db32f364d8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "7fb63d79c61b77630a246e973d11904d331672e5", "commitAfterChange": "8b8cea1e308142afdc5e18146f768cb01a2a21d6", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "     private boolean isMorePowerfulThanExcludes(String name, String includepattern)", "signatureAfterChange": "     private boolean isMorePowerfulThanExcludes(String name, String includepattern)", "diff": ["-        String shortpattern = SelectorUtils.rtrimWildcardTokens(includepattern);", "+        String soughtexclude = name + File.separator + \"**\";", "-            String shortexclude = SelectorUtils.rtrimWildcardTokens(excludes[counter]);", "-            // here we are checking that the trimmed exclude pattern is not a plain directory", "-            // <exclude name=\"foo\"/> means exclude only the directory foo, but not its subdirs", "-            if (shortexclude.length() < excludes[counter].length()) {", "-                if (excludes[counter].charAt(shortexclude.length()) == File.separatorChar) {", "-                    if (matchPath(shortexclude, name, isCaseSensitive)) {", "-                        if (shortexclude.length() > shortpattern.length()) {", "-                            return false;", "-                        }", "-                    }", "-                }", "+            if (excludes[counter].equals(soughtexclude))  {", "+                return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a612005b5753447c2dd5f01d68fe4f45", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "cc432705f28eb85592b6fd077bf95d7c522e3a01", "commitAfterChange": "1c03d4738077efd8b9b09670c26b25430c83af1f", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     public void execute()         throws BuildException", "signatureAfterChange": "     public void execute()         throws BuildException", "diff": ["-            /*", "-              if (ftp != null && ftp.isConnected())", "-              {", "-              try", "-              {", "-              // this hangs - I don't know why.", "-              ftp.disconnect();", "-              }", "-              catch(IOException ex)", "-              {", "-              // ignore it", "-              }", "-              }", "-            */", "+            if (ftp != null && ftp.isConnected())", "+            {", "+                try", "+                {", "+                    log(\"disconnecting\", Project.MSG_VERBOSE);", "+                    ftp.logout();", "+                    ftp.disconnect();", "+                }", "+                catch(IOException ex)", "+                {", "+                    // ignore it", "+                }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a665f59e48c32c1342077582b09dfe2b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "51e2cc543512d445e415bc5b7c2a42f98ddf8446", "commitAfterChange": "8e955e3a2e84e093d19f8053f610c479a3f27478", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        if (baseDir == null && filesets.size() == 0 && ", "-            locFileSets.size() == 0 && \"zip\".equals(archiveType)) {", "+        if (baseDir == null && filesets.size() == 0 && \"zip\".equals(archiveType)) {", "+        // Create the scanners to pass to isUpToDate().", "-        FileScanner[] scanners = new FileScanner[dssSize + locFileSets.size()];", "+        FileScanner[] scanners = new FileScanner[dssSize];", "-", "-        addScanners(scanners, dssSize, locFileSets);", "-                addPrefixedFiles(locFileSets, zOut);", "-            ", "-                for (int j = 0; j < dssSize; j++) {", "-                    addFiles(scanners[j], zOut, \"\");", "- ", "+                // Add the implicit fileset to the archive.", "+                if (baseDir != null)", "+                    addFiles(getDirectoryScanner(baseDir), zOut, \"\", \"\");", "+                // Add the explicit filesets to the archive.", "+                addFiles(filesets, zOut);", "-                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a722050641c59599628ce475a62023d6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Definer.java", "commitBeforeChange": "e0459e7ba70ebf4f9031e638018a0c52f054ba2a", "commitAfterChange": "50ab3762949b456ef74fcde982f16fc4922897f6", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private ClassLoader createLoader()", "signatureAfterChange": "     private ClassLoader createLoader()", "diff": ["-            al = new AntClassLoader(getProject(), classpath, !reverseLoader);", "+            AntClassLoader acl = getProject().createClassLoader(classpath);", "+            if (reverseLoader) {", "+                acl.setParentFirst(false);", "+                acl.addJavaLibraries();", "+            }", "+            al = acl;", "-            al = new AntClassLoader(getProject(), Path.systemClasspath,", "-                    !reverseLoader);", "+            AntClassLoader acl", "+                = getProject().createClassLoader(Path.systemClasspath);", "+            if (reverseLoader) {", "+                acl.setParentFirst(false);", "+                acl.addJavaLibraries();", "+            }", "+            al = acl;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a99f83b3e29abcb828e7b3be3c62566e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/StreamPumper.java", "commitBeforeChange": "ce5e4129647f8418d1ffb870f3bf8031664519bc", "commitAfterChange": "e505c281d0bf63acd3bfc5a10c730d79057605d5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void run()", "signatureAfterChange": "     public void run()", "diff": ["-        finish = false;", "-                if (length <= 0 || finish || Thread.interrupted()) {", "+                if (length <= 0 || Thread.interrupted()) {", "+                }", "+                if (finish) {", "+                \tbreak;", "+                }", "+            }", "+            // On completion, drain any available data (which might be the first data available for quick executions)", "+            if (finish) {", "+                while((length = is.available()) > 0) {", "+                \tif (Thread.interrupted()) {", "+                \t\tbreak;", "+                \t}", "+                    length = is.read(buf, 0, Math.min(length, buf.length));", "+                    if (length <= 0) {", "+                        break;", "+                    }", "+                    os.write(buf, 0, length);", "+            finish = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa1831b106e4a76016ec23a1bb80c16d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelperRepository.java", "commitBeforeChange": "5edb2be598591d8335727a751f4b457f1026bf2c", "commitAfterChange": "d6b9d9ccd3f9966f41414c4af4534eaeb7b35c65", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public ProjectHelper getProjectHelper(File buildFile) throws BuildException", "signatureAfterChange": "     public ProjectHelper getProjectHelper(File buildFile) throws BuildException", "diff": ["-                            + helper.getClass().getName() + \" selected for the file \"", "-                            + buildFile);", "+                                       + helper.getClass().getName()", "+                                       + \" selected for the file \"", "+                                       + buildFile);", "-        throw new RuntimeException(\"BUG: at least the ProjectHelper2 should have supported the file \" + buildFile);", "+        throw new RuntimeException(\"BUG: at least the ProjectHelper2 should \"", "+                                   + \"have supported the file \" + buildFile);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa6978608b97081646a680770b2c73af", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/javah/SunJavah.java", "commitBeforeChange": "90c28ffdf98130bfe0c147e5485b60a77dfac02b", "commitAfterChange": "45655beb8963d4baaa2c9a521623cc3ec7fef0bb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public boolean compile(Javah javah) throws BuildException", "signatureAfterChange": "     public boolean compile(Javah javah) throws BuildException", "diff": ["-", "+        Class c = null;", "-                Class.forName(\"com.sun.tools.javah.oldjavah.Main\");", "-                cmd.setExecutable(\"com.sun.tools.javah.oldjavah.Main\");", "+                c = Class.forName(\"com.sun.tools.javah.oldjavah.Main\");", "-                Class.forName(\"com.sun.tools.javah.Main\");", "-                cmd.setExecutable(\"com.sun.tools.javah.Main\");", "+                c = Class.forName(\"com.sun.tools.javah.Main\");", "+        cmd.setExecutable(c.getName());", "+        File f = Locator.getClassSource(c);", "+        if (f != null) {", "+            ej.setClasspath(new Path(javah.getProject(), f.getPath()));", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acbe6f20cb9158ac29616519a5175ce7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XSLTProcess.java", "commitBeforeChange": "6d5ce5b54d4424f74298d7aac6778539e286b8f4", "commitAfterChange": "44735223d94bae810d33e7f820d587bfb49728fd", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-", "+        ", "-", "+        ", "-", "+        ", "-", "+        ", "-        if(liaison instanceof XSLTLoggerAware) {", "+        if (liaison instanceof XSLTLoggerAware) {", "-", "-        log(\"Using \"+liaison.getClass().toString(), Project.MSG_VERBOSE);", "-", "+        ", "+        log(\"Using \" + liaison.getClass().toString(), Project.MSG_VERBOSE);", "+        ", "-                log(\"DEPRECATED - the style attribute should be relative to the project\\'s\");", "+                log(\"DEPRECATED - the style attribute should be relative \" ", "+                    + \"to the project\\'s\");", "-", "+        ", "-", "+        ", "-", "+        ", "-        log(\"Transforming into \"+destDir, Project.MSG_INFO);", "-", "+        log(\"Transforming into \" + destDir, Project.MSG_INFO);", "+        ", "-        for (int i = 0;i < list.length; ++i) {", "+        for (int i = 0; i < list.length; ++i) {", "-", "-            for (int j = 0;j < dirs.length;++j){", "-                list=new File(baseDir,dirs[j]).list();", "-                for (int i = 0;i < list.length;++i) {", "+            for (int j = 0; j < dirs.length; ++j){", "+                list = new File(baseDir, dirs[j]).list();", "+                for (int i = 0; i < list.length; ++i) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae0773f48331d65e7ca79472145e0694", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "51fe5cb2d9c5c0aae9a528b1af992bcf1d407b1a", "commitAfterChange": "3849918afcc50b3f87292c7a9f3ef2bbb73fd4bc", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "     private static void printTargets(Project project, Vector names,                                      Vector descriptions, String heading,                                      int maxlen)", "signatureAfterChange": "     private static void printTargets(Project project, Vector names,                                      Vector descriptions, Vector dependencies,                                      String heading,                                      int maxlen)", "diff": ["-                                     Vector descriptions, String heading,", "+                                     Vector descriptions, Vector dependencies,", "+                                     String heading,", "+            if (!dependencies.isEmpty()) {", "+                Enumeration deps = (Enumeration) dependencies.elementAt(i);", "+                if (deps.hasMoreElements()) {", "+                    msg.append(\"   depends of: \");", "+                    while (deps.hasMoreElements()) {", "+                        msg.append(deps.nextElement());", "+                        if (deps.hasMoreElements()) {", "+                            msg.append(\", \");", "+                        }", "+                    }", "+                    msg.append(lSep);                ", "+                }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae4e90d21fe4a929ceb79d51e0dfde82", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/email/EmailTask.java", "commitBeforeChange": "3af551b1bbd21e0ff6d8bb1453dac216ce89e9da", "commitAfterChange": "7c2876282a38e560ee26eb15cf136629dc672c2e", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 29, "signatureBeforeChange": "     public void execute()", "signatureAfterChange": "     public void execute()", "diff": ["-        Vector savedFiles = (Vector) files.clone();", "+", "-            Enumeration e = filesets.elements();", "+            Vector files = new Vector();", "+            if (attachments != null) {", "+                Iterator iter = attachments.iterator();", "-            while (e.hasMoreElements()) {", "-                FileSet fs = (FileSet) e.nextElement();", "-", "-                DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "-                String[] includedFiles = ds.getIncludedFiles();", "-                File baseDir = ds.getBasedir();", "-", "-                for (int j = 0; j < includedFiles.length; ++j) {", "-                    files.addElement(new File(baseDir, includedFiles[j]));", "+                while (iter.hasNext()) {", "+                    FileResource fr = (FileResource) iter.next();", "+                    files.addElement(fr.getFile());", "-            files = savedFiles;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aeed9c7cea7b1a7b82e11e29f6fdb48c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/VerifyJar.java", "commitBeforeChange": "d99445bb67a0feecbc78238c54ff468fc72d2315", "commitAfterChange": "4cf9ef09a97e2c53eacb9e629d8470ab856acc2c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        final boolean hasFileset = filesets.size() > 0;", "-        if (!hasJar && !hasFileset) {", "+        if (!hasJar && !hasResources()) {", "-            Vector sources = createUnifiedSources();", "-            for (int i = 0; i < sources.size(); i++) {", "-                FileSet fs = (FileSet) sources.elementAt(i);", "-                //get all included files in a fileset", "-                DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "-                String[] jarFiles = ds.getIncludedFiles();", "-                File baseDir = fs.getDir(getProject());", "-", "-                //loop through all jars in the fileset", "-                for (int j = 0; j < jarFiles.length; j++) {", "-                    String jarFile = jarFiles[j];", "-                    File jarSource = new File(baseDir, jarFile);", "-                    verifyOneJar(jarSource);", "-                }", "+            Path sources = createUnifiedSourcePath();", "+            Iterator iter = sources.iterator();", "+            while (iter.hasNext()) {", "+                FileResource fr = (FileResource) iter.next();", "+                verifyOneJar(fr.getFile());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2c536f442d4e25136d2f7ac12fe4b8d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/init/org/apache/ant/init/LoaderUtils.java", "commitBeforeChange": "7499c443d67445ea8fd0b8f4bd56c72251b18bf4", "commitAfterChange": "b7e43ad8c5906ae2b6d6b42f8b2715dc7d2e7a16", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public static URL[] getLoaderURLs(URL baseURL, String defaultFile,                                       String[] extensions)          throws MalformedURLException", "signatureAfterChange": "     private static URL[] getLocalURLs(File location,                                       final String[] extensions)          throws MalformedURLException", "diff": ["-    public static URL[] getLoaderURLs(URL baseURL, String defaultFile,", "-                                      String[] extensions)", "-        if (baseURL.getProtocol().equals(\"file\")) {", "-            urls = getDirectoryURLs(new File(baseURL.getFile()), extensions);", "-            URL jarListURL = new URL(baseURL, LIST_FILE);", "-                            jarList.add(new URL(baseURL, line));", "-                    urls = new URL[]{new URL(baseURL, defaultFile)};", "+    private static URL[] getLocalURLs(File location,", "+                                      final String[] extensions)", "+        if (!location.exists()) {", "+        if (!location.isDirectory()) {", "+            String path = location.getPath();", "+            for (int i = 0; i < extensions.length; ++i) {", "+                if (path.endsWith(extensions[i])) {", "+                    urls[0] = InitUtils.getFileURL(location);", "+                    break;", "+                }", "+            }", "+            return urls;", "+        }", "+", "+        File[] jars = location.listFiles("]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5d657a4c6e58adbe9799ac248e630ff", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/WLStop.java", "commitBeforeChange": "efa9cca0e47e4576cebdb04eac431845a522b1f1", "commitAfterChange": "950556fcd5896a0cd7145591aa791c5e10e3a952", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            ", "+", "-        ", "-        Java weblogicAdmin = (Java)project.createTask(\"java\");", "+", "+        Java weblogicAdmin = (Java) project.createTask(\"java\");", "-        ", "+", "+        } else {", "+            args = \" -url \" + serverURL +", "+                    \" -username \" + username +", "+                    \" -password \" + password +", "+                    \" SHUTDOWN \" + \" \" + delay;", "-        else {", "-            args = \" -url \" + serverURL + ", "-                   \" -username \" + username +", "-                   \" -password \" + password +", "-                   \" SHUTDOWN \" + \" \" + delay;", "-        }            ", "-        weblogicAdmin.setArgs(args);", "-        weblogicAdmin.setClasspath(classpath);                         ", "+        weblogicAdmin.createArg().setLine(args);", "+        weblogicAdmin.setClasspath(classpath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6586043c32220e39867b7fbae9ceec3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Replace.java", "commitBeforeChange": "fd3ea490305970d8594f45a45f617ebe011ca885", "commitAfterChange": "6b2e7156fce5c379bb51f9aad53a90bad9e719ce", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                Enumeration e = props.keys();", "-                while (e.hasMoreElements()) {", "-                    String tok =  e.nextElement().toString();", "+                Iterator e = props.keySet().iterator();", "+                while (e.hasNext()) {", "+                    String tok =  e.next().toString();", "-            if (src != null) {", "-                processFile(src);", "+            if (sourceFile != null) {", "+                processFile(sourceFile);", "+                }", "+            }", "+", "+            if (resources != null) {", "+                for (Iterator i = resources.iterator(); i.hasNext(); ) {", "+                    FileProvider fp =", "+                        (FileProvider) ((Resource) i.next())", "+                        .as(FileProvider.class);", "+                    processFile(fp.getFile());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b674365c688f1eaa1b7942643aaf6bd5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/TelnetTask.java", "commitBeforeChange": "e64c186c50b3ef61f4fce8cbc9a9e9c169c84e19", "commitAfterChange": "d4be9171f872a91dda1f3fd2dcf9249f6ee2fa88", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 19, "signatureBeforeChange": "       public void waitForString(String s)", "signatureAfterChange": "       public void waitForString(String s, Integer timeout)", "diff": ["+       */", "+      public void waitForString(String s, Integer timeout)", "-          while (sb.toString().indexOf(s) == -1)", "+          if (timeout == null || timeout.intValue() == 0)", "-              while (is.available() == 0);", "-              int iC = is.read();", "-              Character c = new Character((char)iC);", "-              sb.append(c);", "+              while (sb.toString().indexOf(s) == -1)", "+                  {", "+                      sb.append((char) is.read());", "+                  }", "+          }", "+          else", "+          {", "+              Calendar endTime = Calendar.getInstance(); ", "+              endTime.add(Calendar.SECOND,timeout.intValue());", "+              while ( sb.toString().indexOf(s) == -1)", "+              {", "+                  while (Calendar.getInstance().before(endTime) &&", "+                         is.available() == 0) {", "+                      Thread.sleep(250);", "+                  }", "+                  if (is.available() == 0)", "+                      throw new BuildException(\"Response Timed-Out\", getLocation());", "+                  sb.append((char) is.read());", "+              }", "+        } catch (BuildException be)", "+        { ", "+            throw be;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7f72cd00f2c70db897b38594a65d4f1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/selectors/ExtendSelector.java", "commitBeforeChange": "f19f07d6e4c72f241057ecfc32d80be21201bbf7", "commitAfterChange": "ca91f8cb7e4f2bfe1a191dea6126a32649af9565", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void selectorCreate()", "signatureAfterChange": "     public void selectorCreate()", "diff": ["-                dynselector = (ExtendFileSelector)", "-                        Class.forName(classname).newInstance();", "+                Class c = null;", "+                if (classpath == null) {", "+                    c = Class.forName(classname);", "+                } else {", "+                    AntClassLoader al = new AntClassLoader(getProject(),", "+                                                           classpath);", "+                    c = al.loadClass(classname);", "+                    AntClassLoader.initializeClass(c);", "+                }", "+                dynselector = (FileSelector) c.newInstance();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b85c59b2ccd94d72c54a48f165111b67", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/FilterSet.java", "commitBeforeChange": "940895930e4b7aa5ee2618e984cfa9b1a2e3117f", "commitAfterChange": "3d8e3a89d4098dca994cd5590e78794be11894e8", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "     private synchronized String iReplaceTokens(String line)", "signatureAfterChange": "     private synchronized String iReplaceTokens(String line)", "diff": ["-                        // just append beginToken and search further", "-                        b.append(beginToken);", "-                        i = index + beginToken.length();", "+                        // just append first character of beginToken", "+                        // and search further", "+                        // we can't skip the complete beginToken since", "+                        // it may contain the start of another", "+                        // candidate begin token (Bugzilla 45094)", "+                        b.append(beginToken.charAt(0));", "+                        i = index + 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b87514cf5b060c6efc831dee38f8fc96", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "ffeb30bccea8adf4b543ae90b214734bdcb95ced", "commitAfterChange": "02fce032edbad3f50cb317f7cefc8987f2876040", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "             public FTPFile getFile(FTPFile[] theFiles, String lastpathelement)", "signatureAfterChange": "             public FTPFile getFile(FTPFile[] theFiles, String lastpathelement)", "diff": ["-                     if (theFiles[fcount].getName().equals(lastpathelement)) {", "-                         return theFiles[fcount];", "-                     } else if (!isCaseSensitive()", "-                         && theFiles[fcount].getName().equalsIgnoreCase(lastpathelement)) {", "-                         return theFiles[fcount];", "-                     }", "+                    if (theFiles[fcount] != null) {", "+                        if (theFiles[fcount].getName().equals(lastpathelement)) {", "+                            return theFiles[fcount];", "+                        } else if (!isCaseSensitive()", "+                                && theFiles[fcount].getName().equalsIgnoreCase(", "+                                        lastpathelement)) {", "+                            return theFiles[fcount];", "+                        }", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9eb050afa3cde0027efb0362696cac7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/jdepend/JDependTask.java", "commitBeforeChange": "a88ec34a6e9d217e6848041f6b02c236dd0fad70", "commitAfterChange": "0396f77f9942b5be913d74a5c9dec3250f3f7572", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     public int executeInVM(CommandlineJava commandline) throws BuildException", "signatureAfterChange": "     public int executeInVM(CommandlineJava commandline) throws BuildException", "diff": ["-            Vector v = new Vector();", "-            for (int i = 0; i < patterns.length; i++) {", "-                v.addElement(patterns[i]);", "+            if (setFilter != null) {", "+                Vector v = new Vector();", "+                for (int i = 0; i < patterns.length; i++) {", "+                    v.addElement(patterns[i]);", "+                }", "+                try {", "+                    Object o = packageFilterC.newInstance(new Object[] {v});", "+                    setFilter.invoke(jdepend, new Object[] {o});", "+                } catch (Throwable e) {", "+                    log(\"excludes will be ignored as JDepend doesn't like me: \"", "+                        + e.getMessage(), Project.MSG_WARN);", "+                }", "+            } else {", "+                log(\"Sorry, your version of JDepend doesn't support excludes\",", "+                    Project.MSG_WARN);", "-            jdepend.setFilter(new jdepend.framework.PackageFilter(v));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba50ad6b5c47c155a45e26df0ec72469", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "0a679803f04b2e3e9d63c5f6b46677b0cf713d6b", "commitAfterChange": "a4e5c13b86391f9b7ad23e326fe3d2bb66a16cc7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 16, "signatureBeforeChange": "         protected void scandir(String dir, String vpath, boolean fast)", "signatureAfterChange": "         protected void scandir(String dir, String vpath, boolean fast)", "diff": ["-                            && !file.getName().equals(\".\")", "-                            && !file.getName().equals(\"..\")) {", "+                        && !file.getName().equals(\".\")", "+                        && !file.getName().equals(\"..\")) {", "+                        String name = vpath + file.getName();", "+                        scannedDirs.put(name, new FTPFileProxy(file));", "-                            String name = vpath + file.getName();", "-                                    new AntFTPFile(ftp, file, completePath) , fast);", "+                                                      new AntFTPFile(ftp, file, completePath) , fast);", "-                            String name = vpath + file.getName();", "-                     + \"server: \", e);", "+                                         + \"server: \", e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc7136885e8c138f5a6628f632c20092", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Replace.java", "commitBeforeChange": "4be4d85ae2fec0a438fa952f96b8987cb34fa70a", "commitAfterChange": "77959a23ae933d353a9c9e4996ec0c86927892e1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void processFile(File src) throws BuildException", "signatureAfterChange": "     private void processFile(File src) throws BuildException", "diff": ["-            // for each found token, replace with value and write to the", "-            // output file", "-            buf = stringReplace(buf, tok, val);", "-            bw.write(buf,0,buf.length());", "-            bw.flush();", "+            // for each found token, replace with value", "+            String  newString = stringReplace(buf, tok, val);", "+            boolean changes   = !newString.equals(buf);", "+", "+            if (changes) {", "+                bw.write(newString,0,newString.length());", "+                bw.flush();", "+            }", "-            src.delete();", "-            temp.renameTo(src);", "+", "+            // If there were changes, move the new one to the old one, otherwise, delete the new one", "+            if (changes) {", "+                src.delete();", "+                temp.renameTo(src);", "+            } else {", "+                temp.delete();", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd9f07aad48b76be61986b7ab580d797", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/event/EventBus.java", "commitBeforeChange": "1375d72ba33469d368c812a889ab11e9ffe6200e", "commitAfterChange": "6a47866639db820ecfad912519d57c76ab8c994b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "         public void run()", "signatureAfterChange": "         public void run()", "diff": ["+              outerLoop:", "-                            next.eventPosted(_event);", "+                            // If false then callee canceled the event", "+                            // propogation.", "+                            if(!next.eventPosted(_event)) {", "+                                break outerLoop;", "+                            }", "-                        // Check to see if the member cancelled the event. If so", "-                        // then don't send it on to the other members.", "-                        if(_event instanceof AntEvent &&", "-                           ((AntEvent)_event).isCancelled()) break;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "beac22a31ca820d41d308f6df7c3cc66", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultObjectConfigurer.java", "commitBeforeChange": "c4dee0afafcc57ede3e3d1e81d2d4a1455c484a4", "commitAfterChange": "f52a170159f6dc5beebe07bfb945cb5b3fa5290b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void enableAdders()         throws ConfigurationException", "signatureAfterChange": "     public void enableAdders()         throws ConfigurationException", "diff": ["-                                       propName,", "-                                       m_class.getName() );", "+                                       m_class.getName(),", "+                                       propName );", "+            // Determine the max count for the property", "+            int maxCount = Integer.MAX_VALUE;", "+            if( addMethod != null && addMethod.getName().startsWith( \"set\" ) )", "+            {", "+                maxCount = 1;", "+            }", "+", "-                new DefaultPropertyConfigurer( type, createMethod, addMethod );", "+                new DefaultPropertyConfigurer( m_allProps.size(),", "+                                               type,", "+                                               createMethod,", "+                                               addMethod,", "+                                               maxCount );", "+            m_allProps.add( configurer );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0b1923e6ae4b87ab74e79e965cf8deb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/Archives.java", "commitBeforeChange": "450b3ce6a4b325635e38b544890eee9985e087b6", "commitAfterChange": "020546329950689f337c188a4a80e7a40e8b6fb9", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "     protected List grabResources()", "signatureAfterChange": "     protected ArchiveFileSet configureArchive(ArchiveFileSet afs,                                               Resource src)", "diff": ["-    protected List grabResources() {", "-            ZipFileSet zfs = new ZipFileSet();", "-            zfs.setProject(getProject());", "-            zfs.setSrcResource((Resource) iter.next());", "-            l.addAll(CollectionUtils.asCollection(zfs.iterator()));", "-            TarFileSet tfs = new TarFileSet();", "-            tfs.setProject(getProject());", "-            tfs.setSrcResource((Resource) iter.next());", "-            l.addAll(CollectionUtils.asCollection(tfs.iterator()));", "-        return l;", "+     */", "+    protected ArchiveFileSet configureArchive(ArchiveFileSet afs,", "+                                              Resource src) {", "+        afs.setProject(getProject());", "+        afs.setSrcResource(src);", "+        return afs;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c159470149c881081b9fbdb100630838", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "7fb467a74ddff0c39412e3dd1e789edd15341e99", "commitAfterChange": "bca3e675c3bb2dedb5b3f0bae20a816f12187e32", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        if (baseDir == null && filesets.size() == 0 && \"zip\".equals(archiveType))", "+        if (baseDir == null && filesets.size() == 0 && ", "+            locFileSets.size() == 0 && \"zip\".equals(archiveType)) {", "-                                      \"one fileset must be given!\" );", "+                                      \"one fileset or prefixedfileset must be given!\" );", "+        }", "+            boolean success = false;", "+ ", "+                success = true;", "-                zOut.close ();", "+                // Close the output stream.", "+                try {", "+                    if (zOut != null)", "+                        zOut.close ();", "+                } catch(IOException ex) {", "+                    // If we're in this finally clause because of an exception, we don't ", "+                    // really care if there's an exception when closing the stream. E.g. if it", "+                    // throws \"ZIP file must have at least one entry\", because an exception happened", "+                    // before we added any files, then we must swallow this exception. Otherwise,", "+                    // the error that's reported will be the close() error, which is not the real ", "+                    // cause of the problem.", "+                    if (success)", "+                        throw ex;", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3c794c5411292700b90917be84b27c5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteWatchdog.java", "commitBeforeChange": "58d96d54fb9bfabc28e6daf9a4bc138dfbddd81b", "commitAfterChange": "a6c64aa1669d5158395cc1f2f4954e91307e316f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public synchronized void run()", "signatureAfterChange": "     public synchronized void run()", "diff": ["-            // if we are here, either someone stopped the watchdog or we are on timeout", "-            // if watch is true, it means its a timeout", "-            if (watch) {", "-                killedProcess = true;", "-                process.destroy();", "+", "+            // if we are here, either someone stopped the watchdog,", "+            // we are on timeout and the process must be killed, or", "+            // we are on timeout and the process has already stopped.", "+            try {", "+                // We must check if the process was not stopped", "+                // before being here", "+                process.exitValue();", "+            } catch (IllegalThreadStateException e){", "+                // the process is not terminated, if this is really", "+                // a timeout and not a manual stop then kill it.", "+                if (watch){", "+                    killedProcess = true;", "+                    process.destroy();", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5c25a026b301fa948491371d066f94e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/WLRun.java", "commitBeforeChange": "2deeb0512d5eb2cf2dd9d35490a0469d2a111d02", "commitAfterChange": "a58b5083c49b0e8f202d6843d65ff9b4a6ce2c78", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        String execClassPath = project.translatePath(classpath);", "-            ", "+        weblogicServer.setTaskName(getTaskName());", "-        weblogicServer.setClassname(\"weblogic.Server\");", "+        weblogicServer.setClassname(weblogicMainClass);", "+", "+        ", "-            jvmArgs += \"-Dweblogic.class.path=\" + project.translatePath(weblogicClasspath);", "+            jvmArgs += \" -Dweblogic.class.path=\" + weblogicClasspath;", "+        jvmArgs += \" \" + additionalJvmArgs;", "-        weblogicServer.setJvmargs(jvmArgs);", "-        weblogicServer.setClasspath(new Path(project, execClassPath));                         ", "+        weblogicServer.createJvmarg().setLine(jvmArgs);", "+        weblogicServer.createArg().setLine(additionalArgs);", "+        ", "+        weblogicServer.setClasspath(classpath);                         "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c619ae350c3812e5e13efba6a59b51f3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "a62ba1d05053e3853403029fd25183181971e018", "commitAfterChange": "1740fe9a0bf8a5a141483f4f538252d535a965b8", "methodNumberBeforeChange": 125, "methodNumberAfterChange": 125, "signatureBeforeChange": "     private void parsePackages(Vector pn, Path sp)", "signatureAfterChange": "     private void parsePackages(Vector pn, Path sp)", "diff": ["-                DirSet ds = new DirSet();", "-                ds.setDefaultexcludes(useDefaultExcludes);", "-                ds.setDir(new File(pathElements[i]));", "-                ds.createPatternSet().addConfiguredPatternset(ps);", "-                dirSets.addElement(ds);", "+                File dir = new File(pathElements[i]);", "+                if (dir.isDirectory()) {", "+                    DirSet ds = new DirSet();", "+                    ds.setDefaultexcludes(useDefaultExcludes);", "+                    ds.setDir(dir);", "+                    ds.createPatternSet().addConfiguredPatternset(ps);", "+                    dirSets.addElement(ds);", "+                } else {", "+                    log(\"Skipping \" + pathElements[i]", "+                        + \" since it is no directory.\", Project.MSG_WARN);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c751bbf19e128a5e3374d913ec8de287", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "9c8768b75b9fc59bbf87125a4d1a31a6b9253daa", "commitAfterChange": "677491b9276e57da76218487af18cfda70aa28af", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String inputEncoding, String outputEncoding,                          Project project)         throws IOException", "signatureAfterChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String inputEncoding, String outputEncoding,                          Project project)         throws IOException", "diff": ["-                    if (out != null) {", "-                        out.close();", "-                    }", "-                    if (in != null) {", "-                        in.close();", "-                    }", "+                    close(out);", "+                    close(in);", "-                      if (out != null) {", "-                         out.close();", "-                     }", "-                     if (in != null) {", "-                         in.close();", "-                     }", "+                      close(out);", "+                      close(in);", "-                    if (out != null) {", "-                        out.close();", "-                    }", "-                    if (in != null) {", "-                        in.close();", "-                    }", "+                    close(out);", "+                    close(in);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca072b1b009e8746de3bb020ebce5e5b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "12e8a63e2f797fdfb28e9f30761669465cb033ee", "commitAfterChange": "f9121ee81e58e6cb4369a4e043e0a88cbfe3e503", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            throw new BuildException(\"src attribute is required\", location);", "+            throw new BuildException(\"src attribute is required\", getLocation());", "-            throw new BuildException(\"dest attribute is required\", location);", "+            throw new BuildException(\"dest attribute is required\", getLocation());", "-                                     location);", "+                                     getLocation());", "-                                     location);", "+                                     getLocation());", "-                                          location);", "+                                         getLocation());", "-            throw new BuildException(ioe, location);", "+            throw new BuildException(ioe, getLocation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb263fbacf890b6febd9411f2d32d8de", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/filterreaders/src/main/org/apache/tools/ant/filters/ReplaceTokens.java", "commitBeforeChange": "439fe1882bb11a5c318bac07451ab5325755876f", "commitAfterChange": "3ca907710e149dcb83209271754ce53266f7de21", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public final int read() throws IOException", "signatureAfterChange": "     public final int read() throws IOException", "diff": ["-        if (storedData != null && storedData.length() > 0) {", "-            int ch = storedData.charAt(0);", "-            if (storedData.length() > 1) {", "-                storedData = storedData.substring(1);", "+        if (queuedData != null && queuedData.length() > 0) {", "+            final int ch = queuedData.charAt(0);", "+            if (queuedData.length() > 1) {", "+                queuedData = queuedData.substring(1);", "-                storedData = null;", "+                queuedData = null;", "-            StringBuffer key = new StringBuffer(\"\");", "+            final StringBuffer key = new StringBuffer(\"\");", "-                storedData = beginToken + key.toString();", "+                queuedData = beginToken + key.toString();", "-                    storedData = replaceWith;", "+                    queuedData = replaceWith;", "-                    storedData = beginToken + key.toString() + endToken;", "+                    queuedData = beginToken + key.toString() + endToken;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cff785b4ba5f86a69ff40484258799b7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/sound/SoundTask.java", "commitBeforeChange": "ba37bf7991e099b567f8cd5a09178893ff55bb9c", "commitAfterChange": "784d54ca4803b0c8fcb6cd4753cc56f0822a1643", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": "         public File getSource()", "signatureAfterChange": "         public File getSource()", "diff": ["-            return this.file;", "+            File nofile = null ;", "+            // Check if source is a directory", "+            if( source.exists() ) {", "+                if( source.isDirectory() ) {", "+                    // get the list of files in the dir", "+                    File[] files = source.listFiles() ; ", "+                    int numfiles = files.length ;", "+                    // get a random number between 0 and the number of files", "+                    Random rn = new Random() ;", "+                    int i = rn.nextInt(numfiles) ;", "+                    // set the source to the file at that location", "+                    this.source = files[i] ;", "+                }", "+            } else {", "+                log(source + \": invalid path.\", Project.MSG_WARN) ;", "+                this.source = nofile ;", "+            }", "+            return this.source ;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0f3c0931ec4bd736d60d64ceacda673", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/tar/TarInputStream.java", "commitBeforeChange": "34fdc2f62a8e282875c134c78aaf14105af92cf9", "commitAfterChange": "8819ee167bec189fb17e8d25ae3aca5268e0ec23", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "      Map<String, String> parsePaxHeaders(InputStream i) throws IOException", "signatureAfterChange": "      Map<String, String> parsePaxHeaders(InputStream i) throws IOException", "diff": ["-                            byte[] rest = new byte[len - read];", "-                            int got = i.read(rest);", "-                            if (got != len - read){", "+                            final int restLen = len - read;", "+                            byte[] rest = new byte[restLen];", "+                            int got = 0;", "+                            while (got < restLen && (ch = i.read()) != -1) {", "+                                rest[got++] = (byte) ch;", "+                            }", "+                            if (got != restLen) {", "-                                                      + (len - read)", "+                                                      + restLen", "-                                                      len - read - 1, \"UTF-8\");", "+                                                      restLen - 1, \"UTF-8\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2aaf78bdfd73c4358d5477e93d409a7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/pvcs/Pvcs.java", "commitBeforeChange": "9dfd03133bf2e960f2eedf76f8292e1c7ba6bdfb", "commitAfterChange": "36012960a97b8415ce6bc7e03a4cb64ffabc4d68", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void createFolders(File file) throws IOException, ParseException", "signatureAfterChange": "     private void createFolders(File file) throws IOException, ParseException", "diff": ["-                if (line.startsWith(\"\\\"\\\\\")", "-                    || line.startsWith(\"\\\"/\")", "-                    || (line.length() > 3 && line.startsWith(\"\\\"\")", "-                        && Character.isLetter(line.charAt(1))", "-                        && String.valueOf(line.charAt(2)).equals(\":\")", "-                        && String.valueOf(line.charAt(3)).equals(\"\\\\\"))) {", "+                if (line.startsWith(\"\\\"\\\\\")    // Checking for \"\\", "+                    || line.startsWith(\"\\\"/\")  // or           \"/", "+                                               // or           \"X:\\...", "+                   || (line.length() > POS_3 && line.startsWith(\"\\\"\")", "+                        && Character.isLetter(line.charAt(POS_1))", "+                        && String.valueOf(line.charAt(POS_2)).equals(\":\")", "+                        && String.valueOf(line.charAt(POS_3)).equals(\"\\\\\"))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5d27068fb849122917e1dd76d8b5017", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ANTLR.java", "commitBeforeChange": "4c30847da6c777e84a8bdce102ba4142e71a8343", "commitAfterChange": "13355064e679198a0b8212779599eb888739a9bd", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        if (target.lastModified() > generatedFile.lastModified()) {", "-            log(\"Compiling \" + target + \" as it is newer than \" ", "-                + generatedFile, Project.MSG_VERBOSE);", "-", "+        boolean targetIsOutOfDate = ", "+            target.lastModified() > generatedFile.lastModified();", "+        boolean superGrammarIsOutOfDate = superGrammar != null &&", "+            (new File(superGrammar).lastModified() > generatedFile.lastModified());", "+        if (targetIsOutOfDate || superGrammarIsOutOfDate) {", "+            if (targetIsOutOfDate) {", "+                log(\"Compiling \" + target + \" as it is newer than \" ", "+                    + generatedFile, Project.MSG_VERBOSE);", "+            } else if (superGrammarIsOutOfDate) {", "+                log(\"Compiling \" + target + \" as \" + superGrammar", "+                    + \" is newer than \" + generatedFile, Project.MSG_VERBOSE);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6ad4b9a16350fd3153be60d1a1b39f1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/junit/src/main/org/apache/tools/ant/taskdefs/optional/junit/remote/MessageWriter.java", "commitBeforeChange": "48a9017850dc1a302304a057ad05640175a2dd15", "commitAfterChange": "626c685b1dd04334dcdebcdaa39f5f438a51be2e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "      public void notifySystemProperties()", "signatureAfterChange": "      public void notifySystemProperties()", "diff": ["-            ByteArrayOutputStream out = new ByteArrayOutputStream();", "-            ObjectOutputStream oos = new ObjectOutputStream(out);", "-            oos.writeObject(System.getProperties());", "-            oos.close();", "-            String msg = new String(Base64.encode(out.toByteArray()));", "-            sendMessage(MessageIds.PROPS_START + msg + MessageIds.PROPS_END);", "-        } catch (IOException e){", "+            StringBuffer msg = new StringBuffer(512);", "+            msg.append(MessageIds.PROPS_START);", "+            byte[] data = SocketUtil.serialize(System.getProperties());", "+            msg.append(Base64.encode(data));", "+            msg.append(MessageIds.PROPS_END);", "+            sendMessage(msg.toString());", "+        } catch (Exception e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9cc8f4c7ffd6f37569672ccbac93447", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/rmic/WLRmic.java", "commitBeforeChange": "0067aa3103344571126200fc6c2c966889959a6b", "commitAfterChange": "01acc18c4e2d73d13a23c4f602219d5bfe2a04ba", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public boolean execute() throws BuildException", "signatureAfterChange": "      public boolean execute() throws BuildException", "diff": ["+        AntClassLoader loader = null;", "-            Class c = Class.forName(\"weblogic.rmic\");", "+            Class c = null;", "+            if (getRmic().getClasspath() == null) {", "+                c = Class.forName(\"weblogic.rmic\");", "+            } else {", "+                loader = new AntClassLoader(getRmic().getProject(), ", "+                                            getRmic().getClasspath());", "+                c = loader.loadClass(\"weblogic.rmic\");", "+                AntClassLoader.initializeClass(c);", "+            }", "+        } finally {", "+            if (loader != null) {", "+                loader.cleanup();", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da3295f0429bcaa1729e20aeba5c9a0c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteWatchdog.java", "commitBeforeChange": "6258074cd0faeb8fdcb91aeb55e7229f2ecce650", "commitAfterChange": "0d7515e6c3a1a1e3b78946c2b60f2d8963e44700", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public synchronized void run()", "signatureAfterChange": "     public void timeoutOccured(Watchdog w)", "diff": ["-    public synchronized void run() {", "+    public void timeoutOccured(Watchdog w) {", "-            // This isn't a Task, don't have a Project object to log.", "-            // project.log(\"ExecuteWatchdog: timeout = \"+timeout+\" msec\",  Project.MSG_VERBOSE);", "-            final long until = System.currentTimeMillis() + timeout;", "-            long now;", "-            while (watch && until > (now = System.currentTimeMillis())) {", "-                try {", "-                    wait(until - now);", "-                } catch (InterruptedException e) {}", "-            }", "-", "-            // if we are here, either someone stopped the watchdog,", "-            // we are on timeout and the process must be killed, or", "-            // we are on timeout and the process has already stopped.", "-            } catch (IllegalThreadStateException e){", "+            } catch (IllegalThreadStateException itse){", "-        } catch(Exception e) {", "+        } catch (Exception e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da56e6eaea8996039f71d902a8a44df4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/BuildEventSupport.java", "commitBeforeChange": "c17d143ac35a1c63d807f578f508aef13b101e95", "commitAfterChange": "7be61ff46cba15020a14a9d8c83236e929bb5a31", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void threadOutput(String line, boolean isError)", "signatureAfterChange": "     public void threadOutput(String line, boolean isError)", "diff": ["-        if (task == null) {", "-            fireMessageLogged(this, line, ", "-                isError ? MessageLevel.MSG_ERR : MessageLevel.MSG_INFO);", "-        } else {", "-            if (isError) {", "-                task.handleSystemErr(line);", "-            } else {", "-                task.handleSystemOut(line);", "+        if (task != null) {", "+            try {", "+                if (isError) {", "+                    task.handleSystemErr(line);", "+                } else {", "+                    task.handleSystemOut(line);", "+                }", "+                return;", "+            } catch (ExecutionException e) {", "+                // ignore just log normally", "+        fireMessageLogged(this, line, ", "+            isError ? MessageLevel.MSG_ERR : MessageLevel.MSG_INFO);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbe732094c565fd819a3ada8bd8d959b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Ant.java", "commitBeforeChange": "e525cc2182c2063633c1b3201638aba845d41b1b", "commitAfterChange": "d189eb07a36c0b366a63f7e36f9a202656871e52", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                if (savedDir != null) { // has been set explicitly", "+                if (savedDir != null) {", "+                    // has been set explicitly", "-                    + \" in build file \" +  antFile.toString(),", "-                    Project.MSG_VERBOSE);", "+                    + \" in build file \" +  antFile, Project.MSG_VERBOSE);", "-            if (target != null) {", "-                if (!\"\".equals(target)) {", "+            if (target != null && !\"\".equals(target)) {", "+                try {", "+                    log(\"Entering \" + antFile + \"...\");", "+                } finally {", "+                    log(\"Exiting \" + antFile + \".\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dde240fb24065829489cef104460f736", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/deployer/ServiceDescriptorBuilder.java", "commitBeforeChange": "56250d886e6efcfa207e9c1f2cd4b00985e259fd", "commitAfterChange": "be938b1e8fe6d68aec358cb6982c7d70fe827886", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public TypelibDescriptor createDescriptor( final Configuration config,                                                final String url )         throws DeploymentException", "signatureAfterChange": "     public TypelibDescriptor createDescriptor( final Configuration config,                                                final String url )         throws DeploymentException", "diff": ["-            // TODO - populate the descriptor", "+            // Build the descriptor", "+            final ServiceDescriptor descriptor = new ServiceDescriptor( url );", "-            return new ServiceDescriptor( url );", "+            // Add the service definitions", "+            final Configuration[] elements = config.getChildren();", "+            for( int i = 0; i < elements.length; i++ )", "+            {", "+                final Configuration element = elements[ i ];", "+                final String roleShorthand = element.getName();", "+                final String factoryClassName = element.getAttribute( \"factory\" );", "+                final ServiceDefinition definition = new ServiceDefinition( roleShorthand, factoryClassName, config );", "+                descriptor.addDefinition( definition );", "+            }", "+", "+            return descriptor;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df6cbb14082e8041575fdfe28a478433", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "0c2d03d031ecacd79ea8d77cd88b8428e84a3c7c", "commitAfterChange": "44ecc125fa2df70025e742ba113dd793c0e27580", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "     private TestResultHolder executeAsForked(JUnitTest test,                                              ExecuteWatchdog watchdog,                                              File casesFile)         throws BuildException", "signatureAfterChange": "     private TestResultHolder executeAsForked(JUnitTest test,                                              ExecuteWatchdog watchdog,                                              File casesFile)         throws BuildException", "diff": ["-        formatterArg.append(\"nocrashfile=\");", "+        formatterArg.append(\"crashfile=\");", "+            String vmCrashString = \"unknown\";", "+            try {", "+                BufferedReader br = new BufferedReader(new FileReader(vmWatcher));", "+                vmCrashString = br.readLine();", "+            } catch (Exception e) {", "+                e.printStackTrace();", "+                // ignored.", "+            }", "-                logTimeout(feArray, test);", "-            } else if (vmWatcher.length() == 0) {", "+                logTimeout(feArray, test, vmCrashString);", "+            } else if (!\"terminated successfully\".equals(vmCrashString)) {", "-                logVmCrash(feArray, test);", "+                logVmCrash(feArray, test, vmCrashString);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e131cab9a5ce7289f2dadf18e0f1b590", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/PatternSet.java", "commitBeforeChange": "f18d3adfa8305e32fe9af31480247eec7e73e857", "commitAfterChange": "7da091a46f02f686fb6c2f960b2f6c261a7fbdf2", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "     private void readPatterns(File patternfile, Vector patternlist, Project p)         throws BuildException", "signatureAfterChange": "     private void readPatterns(File patternfile, Vector patternlist, Project p)             throws BuildException", "diff": ["-        throws BuildException {", "+            throws BuildException {", "-            patternReader =", "-                new BufferedReader(new FileReader(patternfile));", "+            patternReader = new BufferedReader(new FileReader(patternfile));", "-            String msg = \"An error occurred while reading from pattern file: \"", "-                + patternfile;", "-            throw new BuildException(msg, ioe);", "+            throw new BuildException(\"An error occurred while reading from pattern file: \"", "+                    + patternfile, ioe);", "-            if (null != patternReader) {", "-                try {", "-                    patternReader.close();", "-                } catch (IOException ioe) {", "-                    //Ignore exception", "-                }", "-            }", "+            FileUtils.close(patternReader);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e31429ca180e1fa9c599d1df41b54aed", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "cca008dd0001628eefae7a0ebffba4815a6909f1", "commitAfterChange": "021fdf251c92ecb3981724d83c0265dc770280b3", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        Enumeration list = getIndividualTests();", "-        while (list.hasMoreElements()) {", "-            JUnitTest test = (JUnitTest) list.nextElement();", "-            if (test.shouldRun(getProject())) {", "-                execute(test);", "+        List testLists = new ArrayList();", "+", "+        boolean forkPerTest = forkStyle.getValue().equals(ForkStyle.PER_TEST);", "+        if (forkPerTest || forkStyle.getValue().equals(ForkStyle.ONCE)) {", "+            testLists.addAll(executeOrQueue(getIndividualTests(),", "+                                            forkPerTest));", "+        } else { /* forkStyle.getValue().equals(ForkStyle.PER_BATCH) */", "+            final int count = batchTests.size();", "+            for (int i = 0; i < count; i++) {", "+                BatchTest batchtest = (BatchTest) batchTests.elementAt(i);", "+                testLists.addAll(executeOrQueue(batchtest.elements(), false));", "+            testLists.addAll(executeOrQueue(tests.elements(), forkPerTest));", "+        }", "+", "+        Iterator iter = testLists.iterator();", "+        while (iter.hasNext()) {", "+            List l = (List) iter.next();", "+            if (l.size() == 1) {", "+                execute((JUnitTest) l.get(0));", "+            } else {", "+                execute(l);", "+            }            "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3e063c71f1437210e2e1f54bf1af847", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ManifestTask.java", "commitBeforeChange": "12e8a63e2f797fdfb28e9f30761669465cb033ee", "commitAfterChange": "f9121ee81e58e6cb4369a4e043e0a88cbfe3e503", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                                           + \" is invalid\", m, location);", "+                                           + \" is invalid\", m, getLocation());", "-                                           e, location);", "+                                           e, getLocation());", "-            throw new BuildException(\"Manifest is invalid\", m, location);", "+            throw new BuildException(\"Manifest is invalid\", m, getLocation());", "-                                     e, location);", "+                                     e, getLocation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e40dfd27c5ff2c2de2561bf27a505bac", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/UnknownElement.java", "commitBeforeChange": "8f488f0872a795638f9ebbc51517f85d801c1b67", "commitAfterChange": "28447bc7c09eb2a7210a267ca7a6fb2e54ee488f", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     private boolean handleChild(         String parentUri,         IntrospectionHelper ih,         Object parent, UnknownElement child,         RuntimeConfigurable childWrapper)", "signatureAfterChange": "     private boolean handleChild(         String parentUri,         IntrospectionHelper ih,         Object parent, UnknownElement child,         RuntimeConfigurable childWrapper)", "diff": ["-        if (ih.supportsNestedElement(parentUri, childName,", "-                                     getProject(), parent, child.getQName())) {", "-            IntrospectionHelper.Creator creator =", "-                ih.getElementCreator(", "-                    getProject(), parentUri, parent, childName, child);", "+        if (ih.supportsNestedElement(parentUri, childName, getProject(),", "+                                     parent)) {", "+            IntrospectionHelper.Creator creator = null;", "+            try {", "+                creator = ih.getElementCreator(getProject(), parentUri,", "+                                               parent, childName, child);", "+            } catch (UnsupportedElementException use) {", "+                if (!ih.isDynamic()) {", "+                    throw use;", "+                }", "+                // can't trust supportsNestedElement for dynamic elements", "+                return false;", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5767cc0654a3148f1b8b56a7a229c48", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "4cf9ef09a97e2c53eacb9e629d8470ab856acc2c", "commitAfterChange": "ef830de68e452f5673aefdcd49f7de071a12e11a", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 26, "signatureBeforeChange": "     public void executeMain() throws BuildException", "signatureAfterChange": "     public void executeMain() throws BuildException", "diff": ["-        if (baseDir == null && filesets.size() == 0", "+        if (baseDir == null & resources.size() == 0", "-                                     + \"or at least \"", "-                                     + \"one fileset must be given!\");", "+                                     + \"or at least one \"", "+                                     + \"resource collection must be given!\");", "+        addingNewFiles = true;", "+", "-", "-        addingNewFiles = true;", "-                filesets.addElement(zf);", "+                add(zf);", "-        for (int i = 0; i < filesets.size(); i++) {", "-            FileSet fs = (FileSet) filesets.elementAt(i);", "-            vfss.addElement(fs);", "+        for (int i = 0; i < resources.size(); i++) {", "+            ResourceCollection rc = (ResourceCollection) resources.elementAt(i);", "+            vfss.addElement(rc);", "-        FileSet[] fss = new FileSet[vfss.size()];", "+        ResourceCollection[] fss = new ResourceCollection[vfss.size()];", "-                                             zipFile.getParentFile());", "+                                              zipFile.getParentFile());", "-                // Add the explicit filesets to the archive.", "+                // Add the explicit resource collections to the archive."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e66ff6cb43bf161c4e63f813de2f3b17", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/BUnzip2.java", "commitBeforeChange": "b977b55da647e2c09596065ab1e2b6c7dd2820ef", "commitAfterChange": "30c0d31cc4e6eba6ffc9ead619b6f9f1d5181af3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected void extract()", "signatureAfterChange": "     protected void extract()", "diff": ["-                if (bis != null) {", "-                    try {", "-                        bis.close();", "-                    } catch (IOException ioex) {", "-                        // ignore", "-                    }", "-                }", "-                if (fis != null) {", "-                    try {", "-                        fis.close();", "-                    } catch (IOException ioex) {", "-                        // ignore", "-                    }", "-                }", "-                if (out != null) {", "-                    try {", "-                        out.close();", "-                    } catch (IOException ioex) {", "-                        // ignore", "-                    }", "-                }", "-                if (zIn != null) {", "-                    try {", "-                        zIn.close();", "-                    } catch (IOException ioex) {", "-                        // ignore", "-                    }", "-                }", "+                FileUtils.close(bis);", "+                FileUtils.close(fis);", "+                FileUtils.close(out);", "+                FileUtils.close(zIn);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e795475cec838da0a1de7d368010d171", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/GUnzip.java", "commitBeforeChange": "b977b55da647e2c09596065ab1e2b6c7dd2820ef", "commitAfterChange": "30c0d31cc4e6eba6ffc9ead619b6f9f1d5181af3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected void extract()", "signatureAfterChange": "     protected void extract()", "diff": ["-                if (fis != null) {", "-                    try {", "-                        fis.close();", "-                    } catch (IOException ioex) {", "-                        //ignore", "-                    }", "-                }", "-                if (out != null) {", "-                    try {", "-                        out.close();", "-                    } catch (IOException ioex) {", "-                        //ignore", "-                    }", "-                }", "-                if (zIn != null) {", "-                    try {", "-                        zIn.close();", "-                    } catch (IOException ioex) {", "-                        //ignore", "-                    }", "-                }", "+                FileUtils.close(fis);", "+                FileUtils.close(out);", "+                FileUtils.close(zIn);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e81ad6d3d94b8aa7fba342a7766dbb13", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Expand.java", "commitBeforeChange": "a7d38cf2639a85056062bdc2c3da1067cb84644a", "commitAfterChange": "f027ced8e7799c021f5678ba73fba07faca9de8f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        if (source == null && filesets.size() == 0) {", "-            throw new BuildException(\"src attribute and/or filesets must be \"", "+        if (source == null && resources.size() == 0) {", "+            throw new BuildException(\"src attribute and/or resources must be \"", "-        if (filesets.size() > 0) {", "-            for (int j = 0, size = filesets.size(); j < size; j++) {", "-                FileSet fs = (FileSet) filesets.elementAt(j);", "-                DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "-                File fromDir = fs.getDir(getProject());", "+\tIterator iter = resources.iterator();", "+\twhile (iter.hasNext()) {", "+\t    Resource r = (Resource) iter.next();", "+\t    if (!r.isExists()) {", "+\t\tcontinue;", "+\t    }", "-                String[] files = ds.getIncludedFiles();", "-                for (int i = 0; i < files.length; ++i) {", "-                    File file = new File(fromDir, files[i]);", "-                    expandFile(FILE_UTILS, file, dest);", "-                }", "-            }", "-        }", "+\t    if (r instanceof FileResource) {", "+\t\texpandFile(FILE_UTILS, ((FileResource) r).getFile(), dest);", "+\t    } else {", "+\t\texpandResource(r, dest);", "+\t    }", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e954eb61a6368a76dda13e87c962c26a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/helper/ProjectHelper2.java", "commitBeforeChange": "3267eeb3160fa391d6f568303aaab98a8d99002f", "commitAfterChange": "5184f14831e2987c93d2cbbf5da2318ca5c00241", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void parse(Project project, Object source, RootHandler handler)             throws BuildException", "signatureAfterChange": "     public void parse(Project project, Object source, RootHandler handler) throws BuildException", "diff": ["-    public void parse(Project project, Object source, RootHandler handler)", "-            throws BuildException {", "+    public void parse(Project project, Object source, RootHandler handler) throws BuildException {", "-", "-            } else if (t == null) {", "-                t = exc;", "-", "-            throw new BuildException(exc.getMessage(), t, location);", "+            throw new BuildException(exc.getMessage(), t == null ? exc : t, location);", "-            } else if (t == null) {", "-                t = exc;", "-            throw new BuildException(exc.getMessage(), t);", "+            throw new BuildException(exc.getMessage(), t == null ? exc : t);", "-                                       + buildFileName + \" is invalid.\",", "-                                       exc);", "+                                       + buildFileName + \" is invalid.\", exc);", "-                                     + buildFileName + \": \" + exc.getMessage(),", "-                                     exc);", "+                                     + buildFileName + \": \" + exc.getMessage(), exc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea4638f27fa3251c715765da8798a2c6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/ActionManager.java", "commitBeforeChange": "8355b21de23f92a94bd569b71ec6c69e437ac5ab", "commitAfterChange": "71cd7defed7816e61f8779e3605e5e808933475d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public JMenuBar createMenuBar()", "signatureAfterChange": "     public JMenuBar createMenuBar()", "diff": ["-                JMenuItem item = menu.add(action);", "-                item.setAccelerator(action.getAccelerator());", "-                addNiceStuff(item, action);", "+", "+                if(!action.isToggle()) {", "+                    JMenuItem item = menu.add(action);", "+                    item.setAccelerator(action.getAccelerator());", "+                    addNiceStuff(item, action);", "+                }", "+                else {", "+                    JCheckBoxMenuItem b = ", "+                        new JCheckBoxMenuItem(action.getName());", "+                    b.setActionCommand(action.getID());", "+                    b.addActionListener(action);", "+                    b.setAction(action);", "+                    addNiceStuff(b, action);", "+                    menu.add(b);", "+                }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec020fceadc76fceb19c24fb2c133344", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "7e7fa2f905e691ba00568bc670cc80060c224fd4", "commitAfterChange": "590936af269c77bda5fb410fd81e19958062efe6", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "     protected boolean isUpToDate(FileScanner[] scanners, File zipFile) throws BuildException", "signatureAfterChange": "     protected boolean isUpToDate(FileScanner[] scanners, File zipFile) throws BuildException", "diff": ["-                if (zipFile.exists()) return true;", "-                // In this case using java.util.zip will not work", "-                // because it does not permit a zero-entry archive.", "-                // Must create it manually.", "-                log(\"Note: creating empty \"+archiveType+\" archive \" + zipFile, Project.MSG_INFO);", "-                try {", "-                    OutputStream os = new FileOutputStream(zipFile);", "-                    try {", "-                        // Cf. PKZIP specification.", "-                        byte[] empty = new byte[22];", "-                        empty[0] = 80; // P", "-                        empty[1] = 75; // K", "-                        empty[2] = 5;", "-                        empty[3] = 6;", "-                        // remainder zeros", "-                        os.write(empty);", "-                    } finally {", "-                        os.close();", "-                    }", "-                } catch (IOException ioe) {", "-                    throw new BuildException(\"Could not create empty ZIP archive\", ioe, location);", "-                }", "-                return true;", "+                return createEmptyZip(zipFile);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec9028df0b6d6faed25989baa33bfd65", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XmlProperty.java", "commitBeforeChange": "f3eed91811c13007966599e1511dd57f2252ccff", "commitAfterChange": "86ffd422467bec1d81ff85e58eb75d1e589cc95c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void execute()             throws BuildException", "signatureAfterChange": "     public void execute()             throws BuildException", "diff": ["-        if (getFile() == null) {", "-            String msg = \"XmlProperty task requires a file attribute\";", "+        Resource r = getResource();", "+", "+        if (r == null) {", "+            String msg = \"XmlProperty task requires a source resource\";", "-            log(\"Loading \" + src.getAbsolutePath(), Project.MSG_VERBOSE);", "+            log(\"Loading \" + src, Project.MSG_VERBOSE);", "-            if (src.exists()) {", "+            if (r.isExists()) {", "-              Document document = builder.parse(src);", "+              Document document = null;", "+              if (src instanceof FileResource) {", "+                  document = builder.parse(((FileResource) src).getFile());", "+              } else {", "+                  document = builder.parse(src.getInputStream());", "+              }", "-                log(\"Unable to find property file: \" + src.getAbsolutePath(),", "+                log(\"Unable to find property resource: \" + r,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ece44e33826b86c8217e90819bd9f513", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/MacroInstance.java", "commitBeforeChange": "7e562b5843d700d5363a676d34e5d9afe1801a11", "commitAfterChange": "bbd6a3bd9ee40032440b606ccf590641f804fc35", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private String macroSubs(String s, Map macroMapping)", "signatureAfterChange": "      private String macroSubs(String s, Map macroMapping)", "diff": ["-                        state = STATE_EXPECT_EXCAPE;", "+                        state = STATE_NORMAL;", "+                        ret.append('@');", "-                case STATE_EXPECT_EXCAPE:", "-                    state = STATE_NORMAL;", "-                    if (ch == '{') {", "-                        ret.append(\"@\");", "-                    } else {", "-                        ret.append(\"@@\");", "-                    }", "-                    ret.append(ch);", "-                    break;", "-                break;", "-            case STATE_EXPECT_EXCAPE:", "-                ret.append(\"@@\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed51e714b72fcc1bc78226f66c6aab8c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipFile.java", "commitBeforeChange": "d25f4c40213afd5342ccfb444b37b22523a46be2", "commitAfterChange": "7d02a9f6cf8ffa3710f69d9a9041a3bc78aa21b2", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private void positionAtCentralDirectory()         throws IOException", "signatureAfterChange": "     private void positionAtCentralDirectory()         throws IOException", "diff": ["-        long stopSearching = Math.max(0L, archive.length() - MAX_EOCD_SIZE);", "+        final long stopSearching =", "+            Math.max(0L, archive.length() - MAX_EOCD_SIZE);", "-            archive.seek(off);", "-            byte[] sig = ZipOutputStream.EOCD_SIG;", "-            int curr = archive.read();", "-            while (off >= stopSearching && curr != -1) {", "+            final byte[] sig = ZipOutputStream.EOCD_SIG;", "+            for (; off >= stopSearching; off--) {", "+                archive.seek(off);", "+                int curr = archive.read();", "+                if (curr == -1) {", "+                    break;", "+                }", "-                archive.seek(--off);", "-                curr = archive.read();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edb775713c09762a729d3d0abb0d1986", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Property.java", "commitBeforeChange": "a34bbd1562b14eec78e12a4ec2e1cd6ecdcf7758", "commitAfterChange": "25116b2c5baf6eab123a386882e12679f0734eff", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "      private void resolveAllProperties(Properties props) throws BuildException", "signatureAfterChange": "      private void resolveAllProperties(Properties props) throws BuildException", "diff": ["-                            if (props.containsKey(propertyName)) {", "-                                fragment = props.getProperty(propertyName);", "-                                resolved = false;", "-                            }", "-                            else {", "-                                fragment = \"${\" + propertyName + \"}\";", "+                            fragment = getProject().getProperty(propertyName);", "+                            if (fragment == null) {", "+                                if (props.containsKey(propertyName)) {", "+                                    fragment = props.getProperty(propertyName);", "+                                    resolved = false;", "+                                }", "+                                else {", "+                                    fragment = \"${\" + propertyName + \"}\";", "+                                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efea75892a2b420049a903b7aefe6ec6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/Rpm.java", "commitBeforeChange": "bec41871b591248271815886afd1c0a318ee025e", "commitAfterChange": "76cb3597bd22b5ea0907a5851d30dd3cccadd96b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            exe.execute();", "+            int returncode = exe.execute();", "+            if (returncode != 0) {", "+                throw new BuildException(\"'\" +", "+                        toExecute.getExecutable() +", "+                        \"' failed with exit code \"+returncode);", "+            }", "-            if (output != null) {", "-                try {", "-                    outputstream.close();", "-                } catch (IOException e) {", "-                    // ignore any secondary error", "-                }", "-            }", "-            if (error != null) {", "-                try {", "-                    errorstream.close();", "-                } catch (IOException e) {", "-                    // ignore any secondary error", "-                }", "-            }", "+            FileUtils.close(outputstream);", "+            FileUtils.close(errorstream);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f05066800fa3f0024521ddbf3232fe71", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "a3bbe9f596f9a8e29f8971b7276a4f4f2d2d037b", "commitAfterChange": "0282d8fe2ef1441598d9a1032e7708bf0b7b8ca5", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "     protected final void addResources(ResourceCollection rc,                                       Resource[] resources,                                       ZipOutputStream zOut)         throws IOException", "signatureAfterChange": "     protected final void addResources(ResourceCollection rc,                                       Resource[] resources,                                       ZipOutputStream zOut)         throws IOException", "diff": ["-            String name = resources[i].getName().replace(File.separatorChar,", "-                                                         '/');", "+            final Resource resource = resources[i];", "+            String name = resource.getName();", "+            if (name == null) {", "+                continue;", "+            }", "+            name = name.replace(File.separatorChar, '/');", "+", "-            if (resources[i].isDirectory() && doFilesonly) {", "+            if (resource.isDirectory() && doFilesonly) {", "-            FileProvider fp = resources[i].as(FileProvider.class);", "+            FileProvider fp = resource.as(FileProvider.class);", "-            if (resources[i].isDirectory()) {", "-                addDirectoryResource(resources[i], name, \"\", base, zOut,", "+            if (resource.isDirectory()) {", "+                addDirectoryResource(resource, name, \"\", base, zOut,", "-                    addResource(resources[i], name, \"\", zOut,", "+                    addResource(resource, name, \"\", zOut,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1f4e292380e8fb97f59ff95aa4c54a8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ReplaceRegExp.java", "commitBeforeChange": "f19f07d6e4c72f241057ecfc32d80be21201bbf7", "commitAfterChange": "ca91f8cb7e4f2bfe1a191dea6126a32649af9565", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     protected void doReplace(File f, int options)          throws IOException", "signatureAfterChange": "     protected void doReplace(File f, int options)          throws IOException", "diff": ["-        File parentDir = new File(new File(f.getAbsolutePath()).getParent());", "+        File parentDir = fileUtils.getParentFile(f);", "-            log(\"Replacing pattern '\" + regex.getPattern(project) + \"' with '\" + subs.getExpression(project) +", "+            log(\"Replacing pattern '\" + regex.getPattern(project) + ", "+                \"' with '\" + subs.getExpression(project) +", "-                Project.MSG_WARN);", "+                Project.MSG_VERBOSE);", "-                f.delete();", "-                temp.renameTo(f);", "-            } else {", "-                temp.delete();", "+                if (!f.delete()) {", "+                    throw new BuildException(\"Couldn't delete \" + f,", "+                                             getLocation());", "+                }", "+                if (!temp.renameTo(f)) {", "+                    throw new BuildException(\"Couldn't rename temporary file \" ", "+                                             + temp, getLocation());", "+                }", "+                temp = null;", "-            ;", "-                    r.close();", "+                    w.close();", "-            ;", "+            if (temp != null) {", "+                temp.delete();", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f36f7d12105c5f88ee9e4590d48501dd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SubAnt.java", "commitBeforeChange": "84bb508794b3d1fad60ad8b3b835b942310eb86d", "commitAfterChange": "ea42c65bec22316c5ba3c3096b8346e4a7eed6b8", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute()                 throws BuildException", "signatureAfterChange": "     public void execute()                 throws BuildException", "diff": ["+            boolean doit=true;", "+            File directory=null;", "-                file = new File(file, antfile);", "+                if (genericantfile != null) {", "+                    directory = file;", "+                    file = genericantfile;", "+                }", "+                else {", "+                    file = new File(file, antfile);", "+                    boolean fileFound=file.exists();", "+                    if(ignoreMissingBuildFile && !fileFound) {", "+                        log(\"Build file '\" + file + \"' not found.\", Project.MSG_INFO);", "+                        doit=false;", "+                    }", "+", "+                }", "-            execute(file);", "+            if (doit) {", "+                execute(file, directory);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4a78aa707e78c1471e4911924021a6f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/acs/ACSProjectElementBeanInfo.java", "commitBeforeChange": "8170daae431ee785c4c5fe5b924ab200f077ab3a", "commitAfterChange": "6a6e0bd2647db6ae35dcfa3e9f81e306a64b7cc4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public PropertyDescriptor[] getPropertyDescriptors()", "signatureAfterChange": "     public PropertyDescriptor[] getPropertyDescriptors()", "diff": ["+                                       ACSProjectElement.class),", "+                new PropertyDescriptor(ACSProjectElement.DEFAULT, ", "+                                       ACSProjectElement.class),", "+                new PropertyDescriptor(ACSProjectElement.BASEDIR, ", "+            retval[0].setDisplayName(getResources().getString(", "+                getClass(),ACSProjectElement.NAME));", "+            retval[1].setDisplayName(getResources().getString(", "+                getClass(),ACSProjectElement.DESCRIPTION));", "+            retval[2].setDisplayName(getResources().getString(", "+                getClass(),ACSProjectElement.DEFAULT));", "+            retval[3].setDisplayName(getResources().getString(", "+                getClass(),ACSProjectElement.BASEDIR));", "+", "+            setSortingOrder(retval);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8492a4b88fa14c95b52c33f4f8d485f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/cli/org/apache/ant/cli/Commandline.java", "commitBeforeChange": "7e6ed5c57f2d59a4ef3089d3f66863441a296e54", "commitAfterChange": "984e12200a21e70c9ec9086f8c69e86aaa0d7de9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void process(String[] args, InitConfig initConfig)", "signatureAfterChange": "     private void process(String[] args, InitConfig initConfig)", "diff": ["-        this.config = initConfig;", "+        this.initConfig = initConfig;", "+            AntConfig config = new AntConfig();", "-            AntConfig config = systemConfig;", "-            if (config == null) {", "-                config = userConfig;", "-            } else if (userConfig != null) {", "+            if (systemConfig != null) {", "+                config.merge(systemConfig);", "+            }", "+            if (userConfig != null) {", "+            }", "+", "+            for (Iterator i = configFiles.iterator(); i.hasNext(); ) {", "+                File configFile = (File)i.next();", "+                AntConfig runConfig = getAntConfigFile(configFile);", "+                config.merge(runConfig);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f89d7dc1f9621f91d97a9d92c0214df0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/LoadProperties.java", "commitBeforeChange": "03b6e25418f4b94cbb94e191d23d8ab0ba7b8f6e", "commitAfterChange": "fc6a4383fa7cee5fe2534dc9edc9d8a4eb5c254f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public final void execute() throws BuildException", "signatureAfterChange": "     public final void execute() throws BuildException", "diff": ["-            instream = new InputStreamReader(bis);", "+            if (encoding == null) {", "+                instream = new InputStreamReader(bis);", "+            } else {", "+                instream = new InputStreamReader(bis, encoding);", "+            }", "-                final StringInputStream sis = new StringInputStream(text);", "+                ByteArrayInputStream tis = null;", "+                if ( encoding == null ) {", "+                    tis = new ByteArrayInputStream(text.getBytes());", "+                } else {", "+                    tis = new ByteArrayInputStream(text.getBytes(encoding));", "+                }", "-                props.load(sis);", "+                props.load(tis);", "-                sis.close();", "+                tis.close();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8f63e997d37ace27ebad23b6097b415", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/sitraka/Coverage.java", "commitBeforeChange": "9c51b355f7e7c16c5466e43b59019cad49a1fe56", "commitAfterChange": "b001eb2bcb618ad963c862bf203df3c0a302bd99", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 25, "signatureBeforeChange": "     protected void checkOptions() throws BuildException", "signatureAfterChange": "     protected void checkOptions() throws BuildException", "diff": ["-        if (home == null || !home.isDirectory()) {", "+        if (getHome() == null || !getHome().isDirectory()) {", "-        home = new File(home, \"coverage\");", "-        File jar = new File(home, \"coverage.jar\");", "+        File jar = findJar(\"coverage/coverage.jar\");", "-            throw new BuildException(\"Cannot find Coverage directory: \" + home);", "+            throw new BuildException(\"Cannot find Coverage directory: \" + getHome());", "-            String version = System.getProperty(\"java.version\");", "-            // make we are using 1.2+, if it is, then do your best to", "-            // get a javaexe", "-            if (!version.startsWith(\"1.1\")) {", "+            if (!JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)) {", "-                // if we are here obviously it is java2", "-                String home = System.getProperty(\"java.home\");", "-                boolean isUnix = File.separatorChar == '/';", "-                javaExe = isUnix ? new File(home, \"bin/java\") : new File(home, \"/bin/java.exe\");", "+                javaExe = new File(JavaEnvUtils.getJreExecutable(\"java\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9721a550c0169e32a45bf9e29332c3e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/Frame.java", "commitBeforeChange": "c0ddb311373dc9fe32a78a15a68c4587bbb7566d", "commitAfterChange": "69d9b9a49622889f44d6792faf00f886857828d6", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 36, "signatureBeforeChange": "     protected void executeTasks(Iterator taskIterator)          throws ExecutionException", "signatureAfterChange": "     protected void executeTasks(Iterator taskIterator)          throws ExecutionException", "diff": ["+        ", "+            List aspects = componentManager.getAspects();", "-", "-                if (component instanceof Task) {", "-                    execService.executeTask((Task) component);", "-                } else {", "-                    String typeId", "-                         = model.getAspectValue(Constants.ANT_ASPECT, \"id\");", "-", "-                    if (typeId != null) {", "-                        setDataValue(typeId, component, true);", "+                for (Iterator i = aspects.iterator(); i.hasNext();) {", "+                    Aspect aspect = (Aspect) i.next();", "+                    Object replacement ", "+                        = aspect.postCreateComponent(component, model);", "+                    if (replacement != null) {", "+                        component = replacement;", "+", "+                if (component instanceof Task) {", "+                    executeTask((Task) component);", "+                } "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa99167765964d3cef6d1ebdf88c9a8f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Jar.java", "commitBeforeChange": "5d1bf326375bc9968e1f54502c0ad8895617ac86", "commitAfterChange": "282291fb51250021150ac1548fbe8f20044c1302", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "      private Resource[][] grabManifests(ResourceCollection[] rcs)", "signatureAfterChange": "      private Resource[][] grabManifests(ResourceCollection[] rcs)", "diff": ["+                if (rcs[i] instanceof ArchiveFileSet) {", "+                    ArchiveFileSet afs = (ArchiveFileSet) rcs[i];", "+                    if (!\"\".equals(afs.getFullpath(getProject()))) {", "+                        name = afs.getFullpath(getProject());", "+                    } else if (!\"\".equals(afs.getPrefix(getProject()))) {", "+                        String prefix = afs.getPrefix(getProject());", "+                        if (!prefix.endsWith(\"/\") && !prefix.endsWith(\"\\\\\")) {", "+                            prefix += \"/\";", "+                        }", "+                        name = prefix + name;", "+                    }", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd9be7319cc63c6f364dec3ba004bf32", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/util/ChainReaderHelper.java", "commitBeforeChange": "f3e9ec622f89b35e9ccfb3fcfa30ab010381bc0f", "commitAfterChange": "c4fc48f69dc1a3abe436e42c103e6b53eb92d918", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public final Reader getAssembledReader() throws BuildException", "signatureAfterChange": "     public final Reader getAssembledReader() throws BuildException", "diff": ["-                                if (project != null &&", "-                                        instream instanceof BaseFilterReader) {", "-                                    ((BaseFilterReader)", "-                                        instream).setProject(project);", "-                                }", "+                                setProjectOnObject(instream);", "-                } else if (o instanceof ChainableReader &&", "-                           o instanceof Reader) {", "-                    if (project != null && o instanceof BaseFilterReader) {", "-                        ((BaseFilterReader) o).setProject(project);", "-                    }", "+                } else if (o instanceof ChainableReader) {", "+                    setProjectOnObject(o);", "+                    setProjectOnObject(instream);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe627cbdf1b7069f458973236c2278f9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "00ec1c435af8d15b42cb779373026ceedea92e59", "commitAfterChange": "3a35c7d914d8b5a1f203561ae6f89afb5d2b80ec", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                for (int j = 0 ; j < srcFiles.length ; j++) {", "+                for (int j = 0; j < srcFiles.length; j++) {", "-                    } catch (SQLException ex) {}", "+                    } catch (SQLException ex) {", "+                        // ignore", "+                    }", "-                    } catch (SQLException ex) {}", "+                    } catch (SQLException ex) {", "+                        // ignore", "+                    }", "-                } catch (SQLException e) {}", "+                } catch (SQLException ex) {", "+                    // ignore", "+                }", "-            log(goodSql + \" of \" + totalSql +", "-                \" SQL statements executed successfully\");", "+            log(goodSql + \" of \" + totalSql", "+                + \" SQL statements executed successfully\");"]}]}
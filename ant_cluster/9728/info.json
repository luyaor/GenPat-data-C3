{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6f87d5383a9acbdd006d80d3cd3274ad", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "288e84d47a8831d222e108248e634bef", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/FilterSetTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": "          public void testNestedFilterSets()", "signatureAfterChange": "          @Test     public void testNestedFilterSets()", "diff": ["+    @Test", "-        executeTarget(\"test-nested-filtersets\");", "+        buildRule.executeTarget(\"test-nested-filtersets\");", "-        FilterSet fs = (FilterSet) getProject().getReference(\"1\");", "+        FilterSet fs = (FilterSet) buildRule.getProject().getReference(\"1\");", "-        fs = (FilterSet) getProject().getReference(\"2\");", "+        fs = (FilterSet) buildRule.getProject().getReference(\"2\");", "-        fs = (FilterSet) getProject().getReference(\"3\");", "+        fs = (FilterSet) buildRule.getProject().getReference(\"3\");", "-        fs = (FilterSet) getProject().getReference(\"5\");", "+        fs = (FilterSet) buildRule.getProject().getReference(\"5\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b6bac6f37deed7b913cf922f0070615", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/StyleTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 19, "signatureBeforeChange": "      public void testFilenameAndFiledirAsParam() throws Exception", "signatureAfterChange": "      @Test     public void testFilenameAndFiledirAsParam() throws Exception", "diff": ["+    @Test", "-        executeTarget(\"testFilenameAndFiledirAsParam\");", "-        assertFileContains(getOutputDir().getAbsoluteFile() + \"/one.txt\",      \"filename='one.xml'\");", "-        assertFileContains(getOutputDir().getAbsoluteFile() + \"/one.txt\",      \"filedir ='.'\");", "-        assertFileContains(getOutputDir().getAbsoluteFile() + \"/dir/four.txt\", \"filename='four.xml'\");", "-        assertFileContains(getOutputDir().getAbsoluteFile() + \"/dir/four.txt\", \"filedir ='dir'\");", "+        buildRule.executeTarget(\"testFilenameAndFiledirAsParam\");", "+        assertFileContains(buildRule.getOutputDir().getAbsoluteFile() + \"/one.txt\",      \"filename='one.xml'\");", "+        assertFileContains(buildRule.getOutputDir().getAbsoluteFile() + \"/one.txt\",      \"filedir ='.'\");", "+        assertFileContains(buildRule.getOutputDir().getAbsoluteFile() + \"/dir/four.txt\", \"filename='four.xml'\");", "+        assertFileContains(buildRule.getOutputDir().getAbsoluteFile() + \"/dir/four.txt\", \"filedir ='dir'\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f71f362cffd95146d094df9f757f6788", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/AggregateTransformer.java", "commitBeforeChange": "867ec77b0d9efa8819be2ebf82cace4600b929ee", "commitAfterChange": "5337488612953eb072e38cb99e6b5d60999297da", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     protected void transform(Node root, String xslname, String htmlname) throws TransformerException", "signatureAfterChange": "     protected void transform(Node root, String xslname, String htmlname) throws SAXException", "diff": ["-    protected void transform(Node root, String xslname, String htmlname) throws TransformerException {", "+    protected void transform(Node root, String xslname, String htmlname) throws SAXException {", "-            StreamSource xsl_source = getXSLStreamSource(xslname);", "-            Transformer transformer = tfactory.newTransformer(xsl_source);", "+            XSLTInputSource xsl_source = getXSLStreamSource(xslname);", "+            XSLTProcessor processor = XSLTProcessorFactory.getProcessor();", "-            transformer.transform( new DOMSource(root), new StreamResult(htmlfile));", "+            processor.process( new XSLTInputSource(root), xsl_source, new XSLTResultTarget(htmlfile.getAbsolutePath()) );", "-            task.log(\"Transform time: \" + dt + \"ms\");", "+            task.log(\"Transform time for \" + xslname + \": \" + dt + \"ms\");", "-            throw new TransformerException(e.getMessage());", "+            throw new SAXException(e.getMessage());"]}]}
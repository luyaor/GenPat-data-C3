{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f580d729c23da5e0b0922531258e28c5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01d2241c844c5f02bb6b80130e72bd4d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/LoadFile.java", "commitBeforeChange": "a89ffe281a56c3c51e376d8927fe300423b43bc7", "commitAfterChange": "f9c551b16e64afb9541e8e5507b9ac1a8c2eb436", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 5, "signatureBeforeChange": "     protected String stripLineBreaks(String source)", "signatureAfterChange": "     public final void addFilterChain(FilterChain filter)", "diff": ["-    protected String stripLineBreaks(String source) {", "-        //Linebreaks. What do to on funny IBM mainframes with odd line endings?", "-        String linebreaks=\"\\r\\n\";", "-        int len=source.length();", "-", "-        StringBuffer dest=new StringBuffer(len);", "-        for(int i=0;i<len;++i) {", "-            char ch=source.charAt(i);", "-            if(linebreaks.indexOf(ch)==-1) {", "-                dest.append(ch);", "-            }", "-        }", "-        return new String(dest);", "-", "+    public final void addFilterChain(FilterChain filter) {", "+        filterChains.addElement(filter);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90f7ff8bc148a86e566e531276e93f32", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/embed/src/java/org/apache/tools/ant/helper/TaskAdapter2.java", "commitBeforeChange": "0124baebe268d181280e0777008d644f32dbdf6c", "commitAfterChange": "0c9788b8a7fc7ac0827a4a8dfff988deb8ccfc20", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public static void checkTaskClass(final Class taskClass, final Project project)", "signatureAfterChange": "      public void setDynamicAttribute(String name, String value)             throws BuildException", "diff": ["-     */", "-    public static void checkTaskClass(final Class taskClass, final Project project) {", "-        // Any task can be used via adapter. If it doesn't have any execute()", "-        // method, no problem - it will do nothing, but still get an 'id'", "-        // and be registered in the project reference table and useable by other", "-        // tasks.", "-        ", "-        if( true )", "-            return;", "-", "-        // don't have to check for interface, since then", "-        // taskClass would be abstract too.", "-        try {", "-            final Method executeM = taskClass.getMethod( \"execute\", null );", "-            // don't have to check for public, since", "-            // getMethod finds public method only.", "-            // don't have to check for abstract, since then", "-            // taskClass would be abstract too.", "-            if(!Void.TYPE.equals(executeM.getReturnType())) {", "-                final String message =", "-                    \"return type of execute() should be void but was \\\"\"+", "-                    executeM.getReturnType()+\"\\\" in \" + taskClass;", "-                project.log(message, Project.MSG_WARN);", "-            }", "-        } catch(NoSuchMethodException e) {", "-            final String message = \"No public execute() in \" + taskClass;", "-            project.log(message, Project.MSG_ERR);", "-            throw new BuildException(message);", "-        }", "-    }", "+", "+    public void setDynamicAttribute(String name, String value)", "+            throws BuildException", "+    {", "+        setAttribute( name, value );", "+    }"]}]}
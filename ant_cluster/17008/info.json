{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "00da49d8e90b96d612b8b6d3aa0e0bf6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22abec8c7860ec3db500590a95d984a1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "403c32e5c5322f65e184f6d21496d0295d74f6e1", "commitAfterChange": "655df7f9e198a141defc9dcfb45f7f14cd7749f8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 8, "signatureBeforeChange": "     protected Class loadClass(String classname, boolean resolve) throws ClassNotFoundException", "signatureAfterChange": "     protected Class loadClass(String classname, boolean resolve) throws ClassNotFoundException", "diff": ["-        ", "+", "+        // default to the global setting and then see", "+        // if this class belongs to a package which has been", "+        // designated to use a specific loader first (this one or the system one)", "+        boolean useSystemFirst = systemFirst; ", "+", "+        for (Enumeration e = systemPackages.elements(); e.hasMoreElements();) {", "+            String packageName = (String)e.nextElement();", "+            if (classname.startsWith(packageName)) {", "+                useSystemFirst = true;", "+                break;", "+            }", "+        }", "+", "+        for (Enumeration e = loaderPackages.elements(); e.hasMoreElements();) {", "+            String packageName = (String)e.nextElement();", "+            if (classname.startsWith(packageName)) {", "+                useSystemFirst = false;", "+                break;", "+            }", "+        }", "+", "-            try {", "-                theClass = findSystemClass(classname);", "+            if (useSystemFirst) {", "+                try {", "+                    theClass = findSystemClass(classname);", "+                    project.log(\"Class \" + classname + \" loaded from system loader\", Project.MSG_VERBOSE);", "+                }", "+                catch (ClassNotFoundException cnfe) {", "+                    theClass = findClass(classname);", "+                    project.log(\"Class \" + classname + \" loaded from ant loader\", Project.MSG_VERBOSE);", "+                }", "-            catch (ClassNotFoundException cnfe) {", "-                theClass = findClass(classname);", "+            else {", "+                try {", "+                    theClass = findClass(classname);", "+                    project.log(\"Class \" + classname + \" loaded from ant loader\", Project.MSG_VERBOSE);", "+                }", "+                catch (ClassNotFoundException cnfe) {", "+                    theClass = findSystemClass(classname);", "+                    project.log(\"Class \" + classname + \" loaded from system loader\", Project.MSG_VERBOSE);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95e1757a82fa80fcd1b9080ebb46173e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Project.java", "commitBeforeChange": "9d009f659f2d444ff28c16ec9636cb3062760bac", "commitAfterChange": "284174e86e92dbaeb24202065bcc92157100989d", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "     public void executeTargets(Vector targetNames) throws BuildException", "signatureAfterChange": "     public void executeTargets(Vector targetNames) throws BuildException", "diff": ["-        BuildException thrownException = null;", "-        for (int i = 0; i < targetNames.size(); i++) {", "+        Object o = getReference(\"ant.executor\");", "+        if (o == null) {", "+            String classname = getProperty(\"ant.executor.class\");", "+            if (classname == null) {", "+                classname = (keepGoingMode)", "+                    ? KeepGoingExecutor.class.getName()", "+                    : DefaultExecutor.class.getName();", "+            }", "+            log(\"Attempting to create object of type \" + classname, MSG_DEBUG);", "-                executeTarget((String) targetNames.elementAt(i));", "-            } catch (BuildException ex) {", "-                if (!(keepGoingMode)) {", "-                    throw ex; // Throw further", "+                o = Class.forName(classname, true, coreLoader).newInstance();", "+            } catch (ClassNotFoundException seaEnEfEx) {", "+                //try the current classloader", "+                try {", "+                    o = Class.forName(classname).newInstance();", "+                } catch (Exception ex) {", "+                    log(ex.toString(), MSG_ERR);", "-                thrownException = ex;", "+            } catch (Exception ex) {", "+                log(ex.toString(), MSG_ERR);", "+            }", "+            if (o != null) {", "+                addReference(\"ant.executor\", o);", "-        if (thrownException != null) {", "-            throw thrownException;", "+", "+        if (o == null) {", "+            throw new BuildException(\"Unable to obtain a Target Executor instance.\");", "+        } else {", "+            String[] targetNameArray = (String[])(targetNames.toArray(", "+                new String[targetNames.size()]));", "+            ((Executor)o).executeTargets(this, targetNameArray);"]}]}
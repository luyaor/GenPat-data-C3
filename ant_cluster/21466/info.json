{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0486ba2d51eee6308d58e23b2317198f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59b8192586f6cf281215139b29866332", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/types/PatternSet.java", "commitBeforeChange": "1829060b863bcb631e251a2a58b7a752d60ddddb", "commitAfterChange": "432a0ae47a43a7e8c6a8c2678289b88b8aa18960", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void setIncludes( String includes )", "signatureAfterChange": "     public void setIncludes( final String includes )", "diff": ["-    public void setIncludes( String includes )", "+    public void setIncludes( final String includes )", "-        if( includes != null && includes.length() > 0 )", "+        final Pattern[] patterns = parsePatterns( includes );", "+        for( int i = 0; i < patterns.length; i++ )", "-            StringTokenizer tok = new StringTokenizer( includes, \", \", false );", "-            while( tok.hasMoreTokens() )", "-            {", "-                createInclude().setName( tok.nextToken() );", "-            }", "+            addInclude( patterns[ i ] );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6bee952acef950a182f91d4c6027dae", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/types/PatternSet.java", "commitBeforeChange": "1829060b863bcb631e251a2a58b7a752d60ddddb", "commitAfterChange": "432a0ae47a43a7e8c6a8c2678289b88b8aa18960", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void setIncludes( String includes )", "signatureAfterChange": "     public void setIncludes( final String includes )", "diff": ["-    public void setIncludes( String includes )", "+    public void setIncludes( final String includes )", "-        if( includes != null && includes.length() > 0 )", "+        final Pattern[] patterns = parsePatterns( includes );", "+        for( int i = 0; i < patterns.length; i++ )", "-            StringTokenizer tok = new StringTokenizer( includes, \", \", false );", "-            while( tok.hasMoreTokens() )", "-            {", "-                createInclude().setName( tok.nextToken() );", "-            }", "+            addInclude( patterns[ i ] );"]}]}
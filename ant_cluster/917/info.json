{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "00b3bfdb9f0dc46a739395e66124a549", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07184fbb9658b2016968b7dd9bf1cb81", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "e79bd24e1ace7034b743df1046eb355c8cdd3162", "commitAfterChange": "962c579f1d04d9d2264bb4757f3c01ac4e7d5f83", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private BuildListener createDefaultBuildListener()", "signatureAfterChange": "     private BuildLogger createLogger()", "diff": ["-    private BuildListener createDefaultBuildListener() {", "-        return new DefaultLogger(out, msgOutputLevel);", "+    private BuildLogger createLogger() {", "+        BuildLogger logger = null;", "+        if (loggerClassname != null) {", "+            try {", "+                logger = (BuildLogger)(Class.forName(loggerClassname).newInstance());", "+            }", "+            catch (ClassCastException e) {", "+                System.err.println(\"The specified logger class \" + loggerClassname + ", "+                                         \" does not implement the BuildLogger interface\");", "+                throw new RuntimeException();", "+            }", "+            catch (Exception e) {", "+                System.err.println(\"Unable to instantiate specified logger class \" + ", "+                                           loggerClassname + \" : \" + e.getClass().getName());", "+                throw new RuntimeException();", "+            }", "+        }", "+        else {", "+            logger = new DefaultLogger();", "+        }", "+        ", "+        logger.setMessageOutputLevel(msgOutputLevel);", "+        logger.setOutputPrintStream(out);", "+        logger.setEmacsMode(emacsMode);", "+        ", "+        return logger;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a7cbe18264e287377c3d1cb3baca3af", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "af007ba13234afc51a113ee612e6abad4642cad1", "commitAfterChange": "81b65c0eaa7fff0b658e28269907a36c3a83fc6b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     protected void addBuildListeners(Project project)", "signatureAfterChange": "     protected void addBuildListeners(Project project)", "diff": ["-            try {", "-                BuildListener listener =", "-                    (BuildListener) Class.forName(className).newInstance();", "-                if (project != null) {", "-                    project.setProjectReference(listener);", "-                }", "-                project.addBuildListener(listener);", "-            } catch (Throwable exc) {", "-                throw new BuildException(\"Unable to instantiate listener \"", "-                    + className, exc);", "+            BuildListener listener =", "+                    (BuildListener) ClasspathUtils.newInstance(className,", "+                            Main.class.getClassLoader(), BuildListener.class);", "+            if (project != null) {", "+                project.setProjectReference(listener);", "+            project.addBuildListener(listener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c6686f33323321c86020d28fe364c42", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/input/src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "e7de779f7c1e189f3d1528d0b26b5af5613648c0", "commitAfterChange": "944aa460d4c23ae00ef6ead10666d67b9db82a6c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private BuildLogger createLogger()", "signatureAfterChange": "     private BuildLogger createLogger()", "diff": ["-                logger = (BuildLogger)(Class.forName(loggerClassname).newInstance());", "-            }", "-            catch (ClassCastException e) {", "-                System.err.println(\"The specified logger class \" + loggerClassname +", "-                                         \" does not implement the BuildLogger interface\");", "+                logger = (BuildLogger) (Class.forName(loggerClassname).newInstance());", "+            } catch (ClassCastException e) {", "+                System.err.println(\"The specified logger class \"", "+                    + loggerClassname", "+                    + \" does not implement the BuildLogger interface\");", "+                throw new RuntimeException();", "+            } catch (Exception e) {", "+                System.err.println(\"Unable to instantiate specified logger \"", "+                    + \"class \" + loggerClassname + \" : \" ", "+                    + e.getClass().getName());", "-            catch (Exception e) {", "-                System.err.println(\"Unable to instantiate specified logger class \" +", "-                                           loggerClassname + \" : \" + e.getClass().getName());", "-                throw new RuntimeException();", "-            }", "-        }", "-        else {", "+        } else {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e57d07f31b96753c1233b9d32b9961fc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "af007ba13234afc51a113ee612e6abad4642cad1", "commitAfterChange": "81b65c0eaa7fff0b658e28269907a36c3a83fc6b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void addInputHandler(Project project) throws BuildException", "signatureAfterChange": "     private void addInputHandler(Project project) throws BuildException", "diff": ["-            try {", "-                handler = (InputHandler)", "-                    (Class.forName(inputHandlerClassname).newInstance());", "-                if (project != null) {", "-                    project.setProjectReference(handler);", "-                }", "-            } catch (ClassCastException e) {", "-                String msg = \"The specified input handler class \"", "-                    + inputHandlerClassname", "-                    + \" does not implement the InputHandler interface\";", "-                throw new BuildException(msg);", "-            } catch (Exception e) {", "-                String msg = \"Unable to instantiate specified input handler \"", "-                    + \"class \" + inputHandlerClassname + \" : \"", "-                    + e.getClass().getName();", "-                throw new BuildException(msg);", "+            handler = (InputHandler) ClasspathUtils.newInstance(", "+                    inputHandlerClassname, Main.class.getClassLoader(),", "+                    InputHandler.class);", "+            if (project != null) {", "+                project.setProjectReference(handler);"]}]}
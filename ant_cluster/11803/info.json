{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e3a7846cff1f51564147c852ff3a09a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89863f68441ac81d6b4e270954ba9da7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/tar/TarOutputStream.java", "commitBeforeChange": "23bbf085727756cfbad92aaa345e10c7370d3486", "commitAfterChange": "75110026aa35fe98da6c696598361977c3c46c48", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException", "signatureAfterChange": "     public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException", "diff": ["-        if ((this.currBytes + numToWrite) > this.currSize) {", "+        if ((currBytes + numToWrite) > currSize) {", "-                                  + this.currSize + \"' bytes for entry '\"", "+                                  + currSize + \"' bytes for entry '\"", "-        if (this.assemLen > 0) {", "-            if ((this.assemLen + numToWrite) >= this.recordBuf.length) {", "-                int aLen = this.recordBuf.length - this.assemLen;", "+        if (assemLen > 0) {", "+            if ((assemLen + numToWrite) >= recordBuf.length) {", "+                int aLen = recordBuf.length - assemLen;", "-                System.arraycopy(this.assemBuf, 0, this.recordBuf, 0,", "-                                 this.assemLen);", "-                System.arraycopy(wBuf, wOffset, this.recordBuf,", "-                                 this.assemLen, aLen);", "-                this.buffer.writeRecord(this.recordBuf);", "+                System.arraycopy(assemBuf, 0, recordBuf, 0,", "+                                 assemLen);", "+                System.arraycopy(wBuf, wOffset, recordBuf,", "+                                 assemLen, aLen);", "+                buffer.writeRecord(recordBuf);", "-                this.currBytes += this.recordBuf.length;", "+                currBytes += recordBuf.length;", "-                this.assemLen = 0;", "+                assemLen = 0;", "-                System.arraycopy(wBuf, wOffset, this.assemBuf, this.assemLen,", "+                System.arraycopy(wBuf, wOffset, assemBuf, assemLen,", "-                this.assemLen += numToWrite;", "+                assemLen += numToWrite;", "-            if (numToWrite < this.recordBuf.length) {", "-                System.arraycopy(wBuf, wOffset, this.assemBuf, this.assemLen,", "+            if (numToWrite < recordBuf.length) {", "+                System.arraycopy(wBuf, wOffset, assemBuf, assemLen,", "-                this.assemLen += numToWrite;", "+                assemLen += numToWrite;", "-            this.buffer.writeRecord(wBuf, wOffset);", "+            buffer.writeRecord(wBuf, wOffset);", "-            int num = this.recordBuf.length;", "+            int num = recordBuf.length;", "-            this.currBytes += num;", "+            currBytes += num;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4ca77ae4acc8800fdfd7793253f0491", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/selectors/SelectorUtils.java", "commitBeforeChange": "f292daba99b3d3955a157d1c43b7053e74df13da", "commitAfterChange": "1c3f4b1664951bb5e4c28de46b01dc50b0ee74bd", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public static boolean matchPath(String pattern, String str,             boolean isCaseSensitive)", "signatureAfterChange": "     public static boolean matchPath(String pattern, String str,             boolean isCaseSensitive)", "diff": ["-        Vector patDirs = tokenizePath (pattern);", "-        Vector strDirs = tokenizePath (str);", "+        String[] patDirs = tokenizePathAsArray(pattern);", "+        String[] strDirs = tokenizePathAsArray(str);", "-        int patIdxEnd   = patDirs.size()-1;", "+        int patIdxEnd   = patDirs.length-1;", "-        int strIdxEnd   = strDirs.size()-1;", "+        int strIdxEnd   = strDirs.length-1;", "-            String patDir = (String)patDirs.elementAt(patIdxStart);", "+            String patDir = patDirs[patIdxStart];", "-            if (!match(patDir,(String)strDirs.elementAt(strIdxStart),", "+            if (!match(patDir,strDirs[strIdxStart],", "-                if (!patDirs.elementAt(i).equals(\"**\")) {", "+                if (!patDirs[i].equals(\"**\")) {", "-            String patDir = (String)patDirs.elementAt(patIdxEnd);", "+            String patDir = patDirs[patIdxEnd];", "-            if (!match(patDir,(String)strDirs.elementAt(strIdxEnd),", "+            if (!match(patDir,strDirs[strIdxEnd],", "-                if (!patDirs.elementAt(i).equals(\"**\")) {", "+                if (!patDirs[i].equals(\"**\")) {", "-                if (patDirs.elementAt(i).equals(\"**\")) {", "+                if (patDirs[i].equals(\"**\")) {", "-                    String subPat = (String)patDirs.elementAt(patIdxStart+j+1);", "-                    String subStr = (String)strDirs.elementAt(strIdxStart+i+j);", "+                    String subPat = patDirs[patIdxStart+j+1];", "+                    String subStr = strDirs[strIdxStart+i+j];", "-            if (!patDirs.elementAt(i).equals(\"**\")) {", "+            if (!patDirs[i].equals(\"**\")) {"]}]}
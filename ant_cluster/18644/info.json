{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "840efec5abd13ea8a7924789b2003e92", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6ea44ca06ab43f03190f72fd430a5db", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/ClassConstants.java", "commitBeforeChange": "01416df30317628b3eda7a26958cce0c2f987b26", "commitAfterChange": "d9d9e2f86fb156cc6e69af999f3ece4c10cbd2e0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public int read() throws IOException", "signatureAfterChange": "     public int read() throws IOException", "diff": ["-                final byte[] bytes = clazz.getBytes();", "+                final byte[] bytes = clazz.getBytes(\"ISO-8859-1\");", "-                } catch (ClassNotFoundException cnfe) {", "-                    throw new IOException(cnfe.getMessage());", "-                } catch (NoSuchMethodException nsme) {", "-                    throw new IOException(nsme.getMessage());", "-                } catch (IllegalAccessException iae) {", "-                    throw new IOException(iae.getMessage());", "-                } catch (IllegalArgumentException iarge) {", "-                    throw new IOException(iarge.getMessage());", "-                } catch (InvocationTargetException ite) {", "-                    throw new IOException(ite.getMessage());", "+                } catch (NoClassDefFoundError ex) {", "+                    throw ex;", "+                } catch (RuntimeException ex) {", "+                    throw ex;", "+                } catch (InvocationTargetException ex) {", "+                    Throwable t = ex.getTargetException();", "+                    if (t instanceof NoClassDefFoundError) {", "+                        throw (NoClassDefFoundError) t;", "+                    }", "+                    if (t instanceof RuntimeException) {", "+                        throw (RuntimeException) t;", "+                    }", "+                    throw new BuildException(t);", "+                } catch (Exception ex) {", "+                    throw new BuildException(ex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8f638f1151b5d545cbacd026918060b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Manifest.java", "commitBeforeChange": "299ea801bc1031e308bfe07a22e51edd1b972872", "commitAfterChange": "eca5133693881d72fbd157619b03647e7e255789", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 26, "signatureBeforeChange": "         public String addAttributeAndCheck(Attribute attribute) throws ManifestException", "signatureAfterChange": "         public String addAttributeAndCheck(Attribute attribute)               throws ManifestException", "diff": ["-        public String addAttributeAndCheck(Attribute attribute) throws ManifestException {", "+        public String addAttributeAndCheck(Attribute attribute) ", "+             throws ManifestException {", "-            if (attribute.getName().equalsIgnoreCase(ATTRIBUTE_NAME)) {", "-                warnings.addElement(\"\\\"\" + ATTRIBUTE_NAME + \"\\\" attributes should not occur in the \" +", "-                                    \"main section and must be the first element in all \" +", "-                                    \"other sections: \\\"\" +attribute.getName() + \": \" + attribute.getValue() + \"\\\"\");", "+            if (attribute.getKey().equalsIgnoreCase(ATTRIBUTE_NAME)) {", "+                warnings.addElement(\"\\\"\" + ATTRIBUTE_NAME + \"\\\" attributes \" ", "+                    + \"should not occur in the main section and must be the \"", "+                    + \"first element in all other sections: \\\"\" ", "+                    + attribute.getName() + \": \" + attribute.getValue() + \"\\\"\");", "-            if (attribute.getName().toLowerCase().startsWith(ATTRIBUTE_FROM.toLowerCase())) {", "-                warnings.addElement(\"Manifest attributes should not start with \\\"\" +", "-                                    ATTRIBUTE_FROM + \"\\\" in \\\"\" +attribute.getName() + \": \" + attribute.getValue() + \"\\\"\");", "-            }", "-            else {", "+            if (attribute.getKey().startsWith(ATTRIBUTE_FROM.toLowerCase())) {", "+                warnings.addElement(\"Manifest attributes should not start \" ", "+                    + \"with \\\"\" + ATTRIBUTE_FROM + \"\\\" in \\\"\" ", "+                    + attribute.getName() + \": \" + attribute.getValue() + \"\\\"\");", "+            } else {", "-                String attributeName = attribute.getName().toLowerCase();", "-                if (attributeName.equals(ATTRIBUTE_CLASSPATH)) {", "-                    Vector classpathAttrs = (Vector)attributes.get(attributeName);", "-                    if (classpathAttrs == null) {", "-                        classpathAttrs = new Vector();", "-                        attributes.put(attributeName, classpathAttrs);", "+                String attributeKey = attribute.getKey();", "+                if (attributeKey.equals(ATTRIBUTE_CLASSPATH)) {", "+                    Attribute classpathAttribute = ", "+                        (Attribute)attributes.get(attributeKey);", "+                    ", "+                    if (classpathAttribute == null) {", "+                        storeAttribute(attribute);", "+                    } else {", "+                        Enumeration e = attribute.getValues();", "+                        while (e.hasMoreElements()) {", "+                            String value = (String)e.nextElement();", "+                            classpathAttribute.addValue(value);", "+                        }", "-                    classpathAttrs.addElement(attribute);", "-                }", "-                else if (attributes.containsKey(attributeName)) {", "-                    throw new ManifestException(\"The attribute \\\"\" + attribute.getName() + \"\\\" may not \" +", "-                                                \"occur more than once in the same section\");", "-                }", "-                else {", "-                    attributes.put(attributeName, attribute);", "+                } else if (attributes.containsKey(attributeKey)) {", "+                    throw new ManifestException(\"The attribute \\\"\" ", "+                        + attribute.getName() + \"\\\" may not occur more \" ", "+                        + \"than once in the same section\");", "+                } else {", "+                    storeAttribute(attribute);"]}]}
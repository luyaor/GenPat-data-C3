{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1441fe7af07e2b102cefa2788cd1d492", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "198f8d7734cdd6167bdcea87add5ad87", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/jdepend/JDependTask.java", "commitBeforeChange": "99de043a35f48a0a37ff1ec17e0ad0d2fc9fed5c", "commitAfterChange": "e160d8323df859e424047fd929fa01a3da0340a3", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     public int executeInVM(CommandlineJava commandline) throws BuildException", "signatureAfterChange": "     public int executeInVM(CommandlineJava commandline) throws BuildException", "diff": ["+        FileWriter fw = null;", "-            FileWriter fw;", "-        if (getClassespath() != null) {", "-            // This is the new, better way - use classespath instead", "-            // of sourcespath.  The code is currently the same - you", "-            // need class files in a directory to use this - jar files", "-            // coming soon....", "-            String[] classesPath = getClassespath().list();", "-            for (int i = 0; i < classesPath.length; i++) {", "-                File f = new File(classesPath[i]);", "-                // not necessary as JDepend would fail, but why loose", "-                // some time?", "-                if (!f.exists() || !f.isDirectory()) {", "-                    String msg = \"\\\"\"", "-                        + f.getPath()", "-                        + \"\\\" does not represent a valid\"", "-                        + \" directory. JDepend would fail.\";", "-                    log(msg);", "-                    throw new BuildException(msg);", "+", "+        try {", "+            if (getClassespath() != null) {", "+                // This is the new, better way - use classespath instead", "+                // of sourcespath.  The code is currently the same - you", "+                // need class files in a directory to use this - jar files", "+                // coming soon....", "+                String[] classesPath = getClassespath().list();", "+                for (int i = 0; i < classesPath.length; i++) {", "+                    File f = new File(classesPath[i]);", "+                    // not necessary as JDepend would fail, but why loose", "+                    // some time?", "+                    if (!f.exists() || !f.isDirectory()) {", "+                        String msg = \"\\\"\"", "+                            + f.getPath()", "+                            + \"\\\" does not represent a valid\"", "+                            + \" directory. JDepend would fail.\";", "+                        log(msg);", "+                        throw new BuildException(msg);", "+                    }", "+                    try {", "+                        jdepend.addDirectory(f.getPath());", "+                    } catch (IOException e) {", "+                        String msg =", "+                            \"JDepend Failed when adding a class directory: \"", "+                            + e.getMessage();", "+                        log(msg);", "+                        throw new BuildException(msg);", "+                    }", "-                try {", "-                    jdepend.addDirectory(f.getPath());", "-                } catch (IOException e) {", "-                    String msg =", "-                        \"JDepend Failed when adding a class directory: \"", "-                        + e.getMessage();", "-                    log(msg);", "-                    throw new BuildException(msg);", "+", "+            } else if (getSourcespath() != null) {", "+", "+                // This is the old way and is deprecated - classespath is", "+                // the right way to do this and is above", "+                String[] sourcesPath = getSourcespath().list();", "+                for (int i = 0; i < sourcesPath.length; i++) {", "+                    File f = new File(sourcesPath[i]);", "+", "+                    // not necessary as JDepend would fail, but why loose", "+                    // some time?", "+                    if (!f.exists() || !f.isDirectory()) {", "+                        String msg = \"\\\"\"", "+                            + f.getPath()", "+                            + \"\\\" does not represent a valid\"", "+                            + \" directory. JDepend would fail.\";", "+                        log(msg);", "+                        throw new BuildException(msg);", "+                    }", "+                    try {", "+                        jdepend.addDirectory(f.getPath());", "+                    } catch (IOException e) {", "+                        String msg =", "+                            \"JDepend Failed when adding a source directory: \"", "+                            + e.getMessage();", "+                        log(msg);", "+                        throw new BuildException(msg);", "+                    }", "-        } else if (getSourcespath() != null) {", "-", "-            // This is the old way and is deprecated - classespath is", "-            // the right way to do this and is above", "-            String[] sourcesPath = getSourcespath().list();", "-            for (int i = 0; i < sourcesPath.length; i++) {", "-                File f = new File(sourcesPath[i]);", "-", "-                // not necessary as JDepend would fail, but why loose", "-                // some time?", "-                if (!f.exists() || !f.isDirectory()) {", "-                    String msg = \"\\\"\"", "-                        + f.getPath()", "-                        + \"\\\" does not represent a valid\"", "-                        + \" directory. JDepend would fail.\";", "-                    log(msg);", "-                    throw new BuildException(msg);", "+            // This bit turns <exclude> child tags into patters to ignore", "+            String[] patterns = defaultPatterns.getExcludePatterns(getProject());", "+            if (patterns != null && patterns.length > 0) {", "+                if (setFilter != null) {", "+                    Vector v = new Vector();", "+                    for (int i = 0; i < patterns.length; i++) {", "+                        v.addElement(patterns[i]);", "+                    }", "+                    try {", "+                        Object o = packageFilterC.newInstance(new Object[] {v});", "+                        setFilter.invoke(jdepend, new Object[] {o});", "+                    } catch (Throwable e) {", "+                        log(\"excludes will be ignored as JDepend doesn't like me: \"", "+                            + e.getMessage(), Project.MSG_WARN);", "+                    }", "+                } else {", "+                    log(\"Sorry, your version of JDepend doesn't support excludes\",", "+                        Project.MSG_WARN);", "+            }", "+", "+            jdepend.analyze();", "+        } finally {", "+            if (fw != null) {", "-                    jdepend.addDirectory(f.getPath());", "-                } catch (IOException e) {", "-                    String msg =", "-                        \"JDepend Failed when adding a source directory: \"", "-                        + e.getMessage();", "-                    log(msg);", "-                    throw new BuildException(msg);", "+                    fw.close();", "+                } catch (Throwable t) {", "+                    // Ignore", "-", "-        // This bit turns <exclude> child tags into patters to ignore", "-        String[] patterns = defaultPatterns.getExcludePatterns(getProject());", "-        if (patterns != null && patterns.length > 0) {", "-            if (setFilter != null) {", "-                Vector v = new Vector();", "-                for (int i = 0; i < patterns.length; i++) {", "-                    v.addElement(patterns[i]);", "-                }", "-                try {", "-                    Object o = packageFilterC.newInstance(new Object[] {v});", "-                    setFilter.invoke(jdepend, new Object[] {o});", "-                } catch (Throwable e) {", "-                    log(\"excludes will be ignored as JDepend doesn't like me: \"", "-                        + e.getMessage(), Project.MSG_WARN);", "-                }", "-            } else {", "-                log(\"Sorry, your version of JDepend doesn't support excludes\",", "-                    Project.MSG_WARN);", "-            }", "-        }", "-", "-        jdepend.analyze();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6059b1fd4cda2c686a59534cc0284244", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Ant.java", "commitBeforeChange": "e2aa7c41ea6b92db4fdb91c61f97ad09b4a25940", "commitAfterChange": "8edaa455e6de687be40590a6a74f166098e20340", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        ", "+", "-            ", "+", "-            ", "+", "-                target.equals(this.getOwningTarget().getName())) { ", "+                target.equals(this.getOwningTarget().getName())) {", "+            if (output != null && out != null) {", "+                try {", "+                    out.close();", "+                } catch (final Exception e) {", "+                    //ignore", "+                }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd115a3923c027a5733c21226cabc77e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Property.java", "commitBeforeChange": "25253f3faa839d0341bdfe9eecb06d8791fcf8ea", "commitAfterChange": "925e23a2861ea0dd5605a31b21ce85e72d32238c", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "      protected void loadResource(String name)", "signatureAfterChange": "      protected void loadResource(String name)", "diff": ["+        InputStream is = null;", "-            InputStream is = null;", "+        } finally {", "+            if (is != null) {", "+                try {", "+                    is.close();", "+                } catch (IOException e) {}", "+            }", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7b5dab48bd660acf7535ddafa37ff6c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "e16cf630bd1d1de5b306cf859ab72d8b1138ec6d", "commitAfterChange": "3a912beff76f60fca0e92f3c9a2170c1bd5da28a", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            if (nonFileResources.size() > 0) {", "+            if (nonFileResources.size() > 0 || singleResource != null) {", "+                if (singleResource != null) {", "+                    map.put(singleResource,", "+                            new String[] { destFile.getAbsolutePath() });", "+                }", "+            singleResource = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdab7edf7baed12c7d3e4cbfc069033b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Definer.java", "commitBeforeChange": "17279312b558faecefb7527401824068e77fbda9", "commitAfterChange": "2cd5cfabd458ab9d92e045a32d6831f72a4e2940", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["+            InputStream is=null;", "-                    String msg = \"You must not specify both, file and resource.\";", "+                    String msg = \"You must not specify both, file and \"", "+                        + \"resource.\";", "-                InputStream is=null;", "+            } finally {", "+                if (is != null) {", "+                    try {", "+                        is.close();", "+                    } catch (IOException e) {}", "+                }"]}]}
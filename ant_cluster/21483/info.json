{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da71d5f4fb98d7f41a565518f2bc9cf7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "026d58495f41f7052e9fd64fddda7fbf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/taskdefs/StyleTest.java", "commitBeforeChange": "b73592bce8beff19b140ae9013b8a5682b20c848", "commitAfterChange": "f5ef6126913903a96329c0b64dee07fc7d406fcb", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public void testNewerStylesheet() throws Exception", "signatureAfterChange": "      public void testNewerStylesheet() throws Exception", "diff": ["-        File xmlFile = new File(\"testNewerStylesheet.xml\");", "-        File xslFile = new File(\"testNewerStylesheet.xsl\");", "-        File outFile = new File(\"testNewerStylesheet.out\");", "-", "-        // create the first version of xml and xsl", "-        String xml = \"<data/>\";", "-        StringBuffer xslHeader = new StringBuffer();", "-        StringBuffer xslFooter = new StringBuffer();", "-        xslHeader.append(\"<?xml version=\\\"1.0\\\"?>\");", "-        xslHeader.append(\"<xsl:stylesheet\");", "-        xslHeader.append(\"  version=\\\"1.0\\\"\");", "-        xslHeader.append(\"  xmlns:xsl=\\\"http://www.w3.org/1999/XSL/Transform\\\">\");", "-        xslHeader.append(\"<xsl:template match=\\\"/\\\">\");", "-        xslFooter.append(\"</xsl:template>\");", "-        xslFooter.append(\"</xsl:stylesheet>\");", "-", "-        FileWriter xmlWriter = new FileWriter(xmlFile);", "-        xmlWriter.write(xml);", "-        xmlWriter.close();", "-", "-        FileWriter xslWriter = new FileWriter(xslFile);", "-        xslWriter.write(xslHeader.toString());", "-        xslWriter.write(\"old-string\");", "-        xslWriter.write(xslFooter.toString());", "-        xslWriter.close();", "-", "-        // make the first transformation", "-        XSLTProcess xslt = new XSLTProcess();", "-        xslt.setProject(getProject());", "-        System.out.println(\"Project : \" + getProject());", "-        xslt.setBasedir(getProject().getBaseDir());", "-        xslt.setStyle(xslFile.toString());", "-        xslt.setOut(outFile);", "-        xslt.setIn(xmlFile);", "-        xslt.execute();", "-", "-        // modify the xsl", "-        xslWriter = new FileWriter(xslFile);", "-        xslWriter.write(xslHeader.toString());", "-        xslWriter.write(\"new-string\");", "-        xslWriter.write(xslFooter.toString());", "-        xslWriter.close();", "-        xslt.perform();", "-", "-        // make the second transformation", "-", "-", "-        // test for 2nd transformation", "-        xmlFile.delete();", "-        xslFile.delete();", "-        outFile.delete();", "+        expectFileContains(\"testNewerStylesheet\",", "+                           \"out/out.xml\",", "+                           \"new-value\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b1bce5f740dbc8711116eec32214732", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/types/DirSetTest.java", "commitBeforeChange": "af0dbb6ef20efb56df867fa8025d13b0319383e6", "commitAfterChange": "98d509c6f8d7774190e9c8579510f34df1c4ac2a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testCircularReferenceCheck()", "signatureAfterChange": "      protected FileSet getInstance()", "diff": ["-", "-    public void testCircularReferenceCheck() {", "-        DirSet f = new DirSet();", "-        project.addReference(\"dummy\", f);", "-        f.setRefid(new Reference(\"dummy\"));", "-        try {", "-            f.getDir(project);", "-            fail(\"Can make DirSet a Reference to itself.\");", "-        } catch (BuildException be) {", "-            assertEquals(\"This data type contains a circular reference.\",", "-                         be.getMessage());", "-        }", "-        try {", "-            f.getDirectoryScanner(project);", "-            fail(\"Can make DirSet a Reference to itself.\");", "-        } catch (BuildException be) {", "-            assertEquals(\"This data type contains a circular reference.\",", "-                         be.getMessage());", "-        }", "-", "-        // dummy1 --> dummy2 --> dummy3 --> dummy1", "-        DirSet f1 = new DirSet();", "-        project.addReference(\"dummy1\", f1);", "-        f1.setRefid(new Reference(\"dummy2\"));", "-        DirSet f2 = new DirSet();", "-        project.addReference(\"dummy2\", f2);", "-        f2.setRefid(new Reference(\"dummy3\"));", "-        DirSet f3 = new DirSet();", "-        project.addReference(\"dummy3\", f3);", "-        f3.setRefid(new Reference(\"dummy1\"));", "-        try {", "-            f1.getDir(project);", "-            fail(\"Can make circular reference.\");", "-        } catch (BuildException be) {", "-            assertEquals(\"This data type contains a circular reference.\",", "-                         be.getMessage());", "-        }", "-        try {", "-            f1.getDirectoryScanner(project);", "-            fail(\"Can make circular reference.\");", "-        } catch (BuildException be) {", "-            assertEquals(\"This data type contains a circular reference.\",", "-                         be.getMessage());", "-        }", "-", "-        // dummy1 --> dummy2 --> dummy3 ", "-        // (which has the Project's basedir as root).", "-        f1 = new DirSet();", "-        project.addReference(\"dummy1\", f1);", "-        f1.setRefid(new Reference(\"dummy2\"));", "-        f2 = new DirSet();", "-        project.addReference(\"dummy2\", f2);", "-        f2.setRefid(new Reference(\"dummy3\"));", "-        f3 = new DirSet();", "-        project.addReference(\"dummy3\", f3);", "-        f3.setDir(project.resolveFile(\".\"));", "-        File dir = f1.getDir(project);", "-        assertEquals(\"Dir is basedir\", dir, project.getBaseDir());", "+    protected FileSet getInstance() {", "+        return new DirSet();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70a342af4d34994d0b3ae00736160ae6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/launch/Locator.java", "commitBeforeChange": "a500ff1e5013cbbb7830d5b47fa24dc4db1bc400", "commitAfterChange": "bcf84f5f14a9f80df80ca5836fc5b08d8be7c295", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public static String fromURI(String uri)", "signatureAfterChange": "     public static String fromURI(String uri)", "diff": ["-                    throw (IllegalArgumentException) e2;", "+                    throw new IllegalArgumentException(\"Bad URI \"+uri+ \":\"+e2.getMessage(),e2);", "+        return fromURIJava13(uri);", "+    }", "-            throw new IllegalArgumentException(\"Can only handle valid file: URIs\");", "-            throw new IllegalStateException(\"Could not convert URI to path: \""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec79c995d16648bcb686c502d0880432", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "3ce64dd501a7e5dfd84967399cc4c68c643de810", "commitAfterChange": "b941f2ef443cbbaec2b995b3c34958067c4979c3", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 45, "signatureBeforeChange": "     private ResourceCollection validate()", "signatureAfterChange": "     private void validate()", "diff": ["-     */", "-    private ResourceCollection validate() {", "-", "-        // treat empty nested text as no text", "-        sanitizeText();", "-", "-        // if binary check if incompatible attributes are used", "-        if (binary) {", "-            if (destinationFile == null) {", "-                throw new BuildException(", "-                    \"destfile attribute is required for binary concatenation\");", "-            }", "-            if (textBuffer != null) {", "-                throw new BuildException(", "-                    \"Nested text is incompatible with binary concatenation\");", "-            }", "-            if (encoding != null || outputEncoding != null) {", "-                throw new BuildException(", "-                    \"Seting input or output encoding is incompatible with binary\"", "-                    + \" concatenation\");", "-            }", "-            if (filterChains != null) {", "-                throw new BuildException(", "-                    \"Setting filters is incompatible with binary concatenation\");", "-            }", "-            if (fixLastLine) {", "-                throw new BuildException(", "-                    \"Setting fixlastline is incompatible with binary concatenation\");", "-            }", "-            if (header != null || footer != null) {", "-                throw new BuildException(", "-                    \"Nested header or footer is incompatible with binary concatenation\");", "-            }", "-        }", "-        if (destinationFile != null && outputWriter != null) {", "-            throw new BuildException(", "-                \"Cannot specify both a destination file and an output writer\");", "-        }", "-        // Sanity check our inputs.", "-        if (rc == null && textBuffer == null) {", "-            // Nothing to concatenate!", "-            throw new BuildException(", "-                \"At least one resource must be provided, or some text.\");", "-        }", "-        if (rc != null) {", "-            // If using resources, disallow inline text. This is similar to", "-            // using GNU 'cat' with file arguments -- stdin is simply", "-            // ignored.", "-            if (textBuffer != null) {", "-                throw new BuildException(", "-                    \"Cannot include inline text when using resources.\");", "-            }", "-            Restrict noexistRc = new Restrict();", "-            noexistRc.add(NOT_EXISTS);", "-            noexistRc.add(rc);", "-            for (Iterator i = noexistRc.iterator(); i.hasNext();) {", "-                log(i.next() + \" does not exist.\", Project.MSG_ERR);", "-            }", "-            if (destinationFile != null) {", "-                for (Iterator i = rc.iterator(); i.hasNext();) {", "-                    Object o = i.next();", "-                    if (o instanceof FileResource) {", "-                        File f = ((FileResource) o).getFile();", "-                        if (FILE_UTILS.fileNameEquals(f, destinationFile)) {", "-                            throw new BuildException(\"Input file \\\"\"", "-                                + f + \"\\\" is the same as the output file.\");", "-                        }", "-                    }", "-                }", "-            }", "-            Restrict existRc = new Restrict();", "-            existRc.add(EXISTS);", "-            existRc.add(rc);", "-            boolean outofdate = destinationFile == null || forceOverwrite;", "-            if (!outofdate) {", "-                for (Iterator i = existRc.iterator(); !outofdate && i.hasNext();) {", "-                    Resource r = (Resource) i.next();", "-                    outofdate =", "-                        (r.getLastModified() == 0L", "-                         || r.getLastModified() > destinationFile.lastModified());", "-                }", "-            }", "-            if (!outofdate) {", "-                log(destinationFile + \" is up-to-date.\", Project.MSG_VERBOSE);", "-                return null; // no need to do anything", "-            }", "-            return existRc;", "-        } else {", "-            StringResource s = new StringResource();", "-            s.setProject(getProject());", "-            s.setValue(textBuffer.toString());", "-            return s;", "-        }", "-    }", "+     */", "+    private void validate() {", "+", "+        // treat empty nested text as no text", "+        sanitizeText();", "+", "+        // if binary check if incompatible attributes are used", "+        if (binary) {", "+            if (textBuffer != null) {", "+                throw new BuildException(", "+                    \"Nested text is incompatible with binary concatenation\");", "+            }", "+            if (encoding != null || outputEncoding != null) {", "+                throw new BuildException(", "+                    \"Setting input or output encoding is incompatible with binary\"", "+                    + \" concatenation\");", "+            }", "+            if (filterChains != null) {", "+                throw new BuildException(", "+                    \"Setting filters is incompatible with binary concatenation\");", "+            }", "+            if (fixLastLine) {", "+                throw new BuildException(", "+                    \"Setting fixlastline is incompatible with binary concatenation\");", "+            }", "+            if (header != null || footer != null) {", "+                throw new BuildException(", "+                    \"Nested header or footer is incompatible with binary concatenation\");", "+            }", "+        }", "+        if (destinationFile != null && outputWriter != null) {", "+            throw new BuildException(", "+                \"Cannot specify both a destination file and an output writer\");", "+        }", "+        // Sanity check our inputs.", "+        if (rc == null && textBuffer == null) {", "+            // Nothing to concatenate!", "+            throw new BuildException(", "+                \"At least one resource must be provided, or some text.\");", "+        }", "+        if (rc != null && textBuffer != null) {", "+            // If using resources, disallow inline text. This is similar to", "+            // using GNU 'cat' with file arguments--stdin is simply ignored.", "+            throw new BuildException(", "+                \"Cannot include inline text when using resources.\");", "+        }", "+    }"]}]}
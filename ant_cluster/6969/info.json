{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eb5ab4e0115697d0334e2d6de6363070", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "391316f9fc13f131d5e15e8c49582d7b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/embed/ProjectHelperImpl2.java", "commitBeforeChange": "af97c64cb1b6bea8dd0d7aa333a51c7613cbe5e9", "commitAfterChange": "3256156dcc13ead3eba8a9ea02b23ce7f7be8eb2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "       public void parse(Project project, Object source) throws BuildException", "signatureAfterChange": "           public void parse(Project project, Object source) throws BuildException", "diff": ["-", "-    public void parse(Project project, Object source) throws BuildException {", "-        // Hook our internal tasks. XXX refactor ", "-        AntXmlContext context=new AntXmlContext(this);", "-        AntXmlContext.resetImports();", "+", "+    public void parse(Project project, Object source) throws BuildException {", "+        hookSpecialTasks(project);", "+        AntXmlContext context=new AntXmlContext(project, this);", "+", "+", "+        // XXX How to deal with description ??"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60974ff39136e24330d78671be9632a4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/filterreaders/src/main/org/apache/tools/ant/types/AntFilterReader.java", "commitBeforeChange": "0012fd272339fc0306a14bfe8b06bd632b8c501b", "commitAfterChange": "de1a987f23e027a486e6b07ddc8ab2edecd7dd3a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public final void setClassName(final String className)", "signatureAfterChange": "      public final void setClassName(final String className)", "diff": ["+", "-        try {", "-            final Class c = Class.forName(className);", "-            if (FilterReader.class.isAssignableFrom(c)) {", "-                this.className = className;", "-            } else {", "-                throw new BuildException(className +", "-                    \" does not extend java.io.FilterReader\");", "-            }", "-        } catch (final ClassNotFoundException cnfe) {", "-            throw new BuildException(cnfe);", "-        }", "+        this.className = className;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72b0c4cf62bc4237fb581d35103a678c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/rmic/RmicAdapterFactory.java", "commitBeforeChange": "9d16acee8e2a3efe496ca84770b0af5f66f81c28", "commitAfterChange": "e79b77b82bf060be1189b42e7ade80735101570e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static RmicAdapter getRmic(String rmicType, Task task)          throws BuildException", "signatureAfterChange": "     public static RmicAdapter getRmic(String rmicType, Task task)          throws BuildException", "diff": ["-        if (rmicType == null) {", "-            /* ", "-             * When not specified rmicType, search SUN's rmic and", "-             * Kaffe's rmic.", "-             */", "-            try {", "-                Class.forName(\"sun.rmi.rmic.Main\");", "-                rmicType = \"sun\";", "-            } catch (ClassNotFoundException cnfe) {", "-                try {", "-                    Class.forName(\"kaffe.rmi.rmic.RMIC\");", "-                    Class.forName(\"kaffe.tools.compiler.Compiler\");", "-                    rmicType = \"kaffe\";", "-                } catch (ClassNotFoundException cnfk) {", "-                    throw new BuildException(\"Couldn\\'t guess rmic \"", "-                                             + \"implementation\");", "-                }", "-            }", "-        }", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c568ddbd5e26a2cdf45aaeef3a3fc839", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/util/FileUtilsTest.java", "commitBeforeChange": "f8c1bb00f245b6d96ee71deb589d3f4e5d5bef8d", "commitAfterChange": "122c6ddd9ee015a8638b9143815d3289badfdf04", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testSetLastModified() throws IOException", "signatureAfterChange": "     public void testSetLastModified() throws IOException", "diff": ["+     */", "-            Thread.currentThread().sleep(5000);", "+            Thread.sleep(5000);", "-        try {", "-            Class.forName(\"java.lang.ThreadLocal\");", "-            assertTrue(secondModTime > modTime);", "-        } catch (ClassNotFoundException e) {", "-            // JDK 1.1", "-            assertEquals(modTime, secondModTime);", "-        }", "+        assertTrue(secondModTime > modTime);", "-        try {", "-            Class.forName(\"java.lang.ThreadLocal\");", "-            /*", "-             * I would love to compare this with 123456, but depending on", "-             * the filesystems granularity it can take an arbitrary value.", "-             *", "-             * Just assert the time has changed.", "-             */", "-            assertTrue(thirdModTime != secondModTime);", "-        } catch (ClassNotFoundException e) {", "-            // JDK 1.1", "-            assertEquals(modTime, thirdModTime);", "-        }", "+        /*", "+         * I would love to compare this with 123456, but depending on", "+         * the filesystems granularity it can take an arbitrary value.", "+         *", "+         * Just assert the time has changed.", "+         */", "+        assertTrue(thirdModTime != secondModTime);"]}]}
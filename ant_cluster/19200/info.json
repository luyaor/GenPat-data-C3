{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f562d056c8104c7c999f919f8754de6b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11a1e4ee8356689af4e508cb95d6ff54", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Tar.java", "commitBeforeChange": "1400dc3c1b536c70697f83be990b0725121cba90", "commitAfterChange": "b5fcf10604f56a8061d10f332570342b34cc7a9d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": "         public String getUserName()", "signatureAfterChange": "     protected boolean check(File basedir, String[] files)", "diff": ["+     */", "+    protected boolean check(File basedir, String[] files) {", "+        boolean upToDate = true;", "+        if (!archiveIsUpToDate(files, basedir)) {", "+            upToDate = false;", "+        }", "+", "+        for (int i = 0; i < files.length; ++i) {", "+            if (tarFile.equals(new File(basedir, files[i]))) {", "+                throw new BuildException(\"A tar file cannot include \"", "+                                         + \"itself\", getLocation());", "+            }", "+        }", "+        return upToDate;", "+    }", "-         */", "-        public String getUserName() {", "-            return userName;", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "447d444f8d59ef288fea98f170349b67", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecTask.java", "commitBeforeChange": "ab271c2c606105627480b9abc937c25e5b3822fe", "commitAfterChange": "55641903fb9a4b029554bed4e14b7544d0829f5a", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 30, "signatureBeforeChange": "     protected ExecuteStreamHandler createHandler() throws BuildException", "signatureAfterChange": "     protected ExecuteStreamHandler createHandler() throws BuildException", "diff": ["+        InputStream inputStream = null; ", "+", "+        if (input != null) {", "+            try {", "+                inputStream = new FileInputStream(input);", "+            } catch (FileNotFoundException fne) {", "+                throw new BuildException(\"Cannot read from \" + input, fne,", "+                                         getLocation());", "+            }", "+        }", "-        return new PumpStreamHandler(outputStream, errorStream, true, true);         ", "+        return new PumpStreamHandler(outputStream, errorStream, inputStream, ", "+                                     true, true, true);         "]}]}
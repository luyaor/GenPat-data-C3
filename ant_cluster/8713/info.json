{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a91bd3bf2fbd3255a6229411c8ce7fa7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84ab8ef6ed9ec3bf357c51721d88e443", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/PropertyFile.java", "commitBeforeChange": "62f2142b3431002933bf1281d244c164ed962890", "commitAfterChange": "6cbeee38fa5502baa5d75036ad2c0418cf808d56", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "         private void executeInteger(String oldValue) throws BuildException", "signatureAfterChange": "         private void executeInteger(String oldValue) throws BuildException", "diff": ["-            int value = 0;          // the value given in the 'value' attr", "-            int newValue  = 0;      // the new value, after the operation", "-            int oldIntValue  = 0;   // the old value from the prop file", "+            int currentValue = DEFAULT_INT_VALUE;", "+            int newValue  = DEFAULT_INT_VALUE;", "-            DecimalFormat fmt = (m_pattern != null) ? new DecimalFormat(m_pattern)", "+", "+            DecimalFormat fmt = (pattern != null) ? new DecimalFormat(pattern)", "-", "-            if (oldValue != null) {", "-                try {", "-                    oldIntValue = fmt.parse(oldValue).intValue();", "-                }", "-                catch (NumberFormatException nfe) { /* swollow */ }", "-                catch (ParseException pe)  { /* swollow */ }", "+            try {", "+                currentValue = fmt.parse(getCurrentValue(oldValue)).intValue();", "-            if (m_value != null) {", "-                try {", "-                    value = fmt.parse(m_value).intValue();", "-                }", "-                catch (NumberFormatException nfe) { /* swollow */ }", "-                catch (ParseException pe)  { /* swollow */ }", "+            catch (NumberFormatException nfe) { /* swollow */ }", "+            catch (ParseException pe)  { /* swollow */ }", "+            ", "+            if (operation == Operation.EQUALS_OPER) {", "+                newValue = currentValue;", "-            if (m_default != null && oldValue == null) {", "+            else {", "+                int operationValue = 1;", "-                    oldIntValue = fmt.parse(m_default).intValue();", "+                    operationValue = fmt.parse(value).intValue();", "+                ", "+                if (operation == Operation.INCREMENT_OPER) {", "+                    newValue = currentValue + operationValue;", "+                }", "+                else if (operation == Operation.DECREMENT_OPER) {", "+                    newValue = currentValue - operationValue;", "+                }", "-            if (m_operation == Operation.EQUALS_OPER) {", "-                newValue = oldIntValue;", "-            }", "-            else if (m_operation == Operation.INCREMENT_OPER) {", "-                if (m_value == \"\") {", "-                    // No value attr was given, so just increment the", "-                    // old value from the prop file (0 by assignment above,", "-                    // if none).", "-                    newValue = ++oldIntValue;", "-                } else {", "-                    // A value attr was given, so add the old value from", "-                    // the prop file (0, if none) to the specified value.", "-                    newValue = (oldIntValue + value) ;", "-                }", "-            }", "-            else if (m_operation == Operation.DECREMENT_OPER) {", "-                if (m_value == \"\") {", "-                    // No value attr was given, so just decrement the", "-                    // old value from the prop file (0 by assignment above,", "-                    // if none).", "-                    newValue = --oldIntValue;", "-                } else {", "-                    // A value attr was given, so subtract from the", "-                    // old value from the prop file (0, if none) the", "-                    // specified value.", "-                    newValue = (oldIntValue - value);", "-                }", "-            }", "-            m_value = fmt.format(newValue);", "+            value = fmt.format(newValue);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdfa444405ff4c1227ad4ede9d97147e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/Native2Ascii.java", "commitBeforeChange": "f8ab615aea394cd89a8190fa4aa43124030c0c39", "commitAfterChange": "9bed3906ffbdca75b6414a193f2c13f1028fcaf7", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void execute()         throws TaskException", "signatureAfterChange": "      public void execute()         throws TaskException", "diff": ["+        validate();", "-        Commandline baseCmd = null;// the common portion of our cmd line", "-        DirectoryScanner scanner = null;// Scanner to find our inputs", "-        String[] files;// list of files to process", "+        final DirectoryScanner scanner = getDirectoryScanner( m_srcDir );", "+        String[] files = scanner.getIncludedFiles();", "-        // default srcDir to basedir", "-        if( srcDir == null )", "+        final SourceFileScanner sfs = new SourceFileScanner( this );", "+        final FileNameMapper mapper = buildMapper();", "+        files = sfs.restrict( files, m_srcDir, m_destDir, mapper );", "+        int count = files.length;", "+        if( count == 0 )", "-            srcDir = getBaseDirectory();", "+            return;", "+        final String message = \"Converting \" + count + \" file\" +", "+            ( count != 1 ? \"s\" : \"\" ) + \" from \" + m_srcDir + \" to \" +", "+            m_destDir;", "+        getLogger().info( message );", "+", "+        for( int i = 0; i < files.length; i++ )", "+        {", "+            final String name = mapper.mapFileName( files[ i ] )[ 0 ];", "+            convert( files[ i ], name );", "+        }", "+    }", "-        if( destDir == null )", "-        if( srcDir.equals( destDir ) && extension == null && mapper == null )", "-            throw new TaskException( \"The ext attribute or a mapper must be set if\"", "-                                     + \" src and dest dirs are the same.\" );", "-        FileNameMapper m = null;", "-        if( mapper == null )", "-            if( extension == null )", "-            {", "-                m = new IdentityMapper();", "-            }", "-            else", "-            {", "-                m = new ExtMapper();", "-            }", "-        }", "-        else", "-        {", "-            m = mapper.getImplementation();", "-        }", "-", "-        scanner = getDirectoryScanner( srcDir );", "-        files = scanner.getIncludedFiles();", "-        SourceFileScanner sfs = new SourceFileScanner( this );", "-        files = sfs.restrict( files, srcDir, destDir, m );", "-        int count = files.length;", "-        if( count == 0 )", "-        {", "-            return;", "-        }", "-        String message = \"Converting \" + count + \" file\"", "-            + ( count != 1 ? \"s\" : \"\" ) + \" from \";", "-        getLogger().info( message + srcDir + \" to \" + destDir );", "-        for( int i = 0; i < files.length; i++ )", "-        {", "-            convert( files[ i ], m.mapFileName( files[ i ] )[ 0 ] );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1a9f3e7a11493feb578ad8482498c83", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/Native2Ascii.java", "commitBeforeChange": "f8ab615aea394cd89a8190fa4aa43124030c0c39", "commitAfterChange": "9bed3906ffbdca75b6414a193f2c13f1028fcaf7", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void execute()         throws TaskException", "signatureAfterChange": "      public void execute()         throws TaskException", "diff": ["+        validate();", "-        Commandline baseCmd = null;// the common portion of our cmd line", "-        DirectoryScanner scanner = null;// Scanner to find our inputs", "-        String[] files;// list of files to process", "+        final DirectoryScanner scanner = getDirectoryScanner( m_srcDir );", "+        String[] files = scanner.getIncludedFiles();", "-        // default srcDir to basedir", "-        if( srcDir == null )", "+        final SourceFileScanner sfs = new SourceFileScanner( this );", "+        final FileNameMapper mapper = buildMapper();", "+        files = sfs.restrict( files, m_srcDir, m_destDir, mapper );", "+        int count = files.length;", "+        if( count == 0 )", "-            srcDir = getBaseDirectory();", "+            return;", "+        final String message = \"Converting \" + count + \" file\" +", "+            ( count != 1 ? \"s\" : \"\" ) + \" from \" + m_srcDir + \" to \" +", "+            m_destDir;", "+        getLogger().info( message );", "+", "+        for( int i = 0; i < files.length; i++ )", "+        {", "+            final String name = mapper.mapFileName( files[ i ] )[ 0 ];", "+            convert( files[ i ], name );", "+        }", "+    }", "-        if( destDir == null )", "-        if( srcDir.equals( destDir ) && extension == null && mapper == null )", "-            throw new TaskException( \"The ext attribute or a mapper must be set if\"", "-                                     + \" src and dest dirs are the same.\" );", "-        FileNameMapper m = null;", "-        if( mapper == null )", "-            if( extension == null )", "-            {", "-                m = new IdentityMapper();", "-            }", "-            else", "-            {", "-                m = new ExtMapper();", "-            }", "-        }", "-        else", "-        {", "-            m = mapper.getImplementation();", "-        }", "-", "-        scanner = getDirectoryScanner( srcDir );", "-        files = scanner.getIncludedFiles();", "-        SourceFileScanner sfs = new SourceFileScanner( this );", "-        files = sfs.restrict( files, srcDir, destDir, m );", "-        int count = files.length;", "-        if( count == 0 )", "-        {", "-            return;", "-        }", "-        String message = \"Converting \" + count + \" file\"", "-            + ( count != 1 ? \"s\" : \"\" ) + \" from \";", "-        getLogger().info( message + srcDir + \" to \" + destDir );", "-        for( int i = 0; i < files.length; i++ )", "-        {", "-            convert( files[ i ], m.mapFileName( files[ i ] )[ 0 ] );"]}]}
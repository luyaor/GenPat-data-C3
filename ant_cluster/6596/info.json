{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4ed8a0263f36b7854177b2ff4341e5ff", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50318bff7073981a382fdeb230a8e527", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/DestDir.java", "commitBeforeChange": "4ae3c9e3c43f579a31d15416eb044b64a297369f", "commitAfterChange": "f1b558502467dcc137e7d886fb1fd663b31215e5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected final boolean isValid()", "signatureAfterChange": "     protected final boolean isValid()", "diff": ["+        //If DestDir does not exist, make sure it is well formed.", "+        if (!f.exists()) {", "+            File tmp = f;", "+            while (tmp.getParent() != null) {", "+                File parent = new File(tmp.getParent());", "+                if (parent.exists()) {", "+                    if (!parent.isDirectory()) {", "+                        message = \"DestDir \" + f + \" contains the path \"", "+                                  + parent + \" that is not a directory.\";", "+                        return false;", "+                    }", "+                    break;", "+                }", "+                tmp = parent;", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "655cd47cc7f2776120e30ad035d3afdf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/DestFile.java", "commitBeforeChange": "4ae3c9e3c43f579a31d15416eb044b64a297369f", "commitAfterChange": "f1b558502467dcc137e7d886fb1fd663b31215e5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected final boolean isValid()", "signatureAfterChange": "     protected final boolean isValid()", "diff": ["+        //If DestFile does not exist, make sure it is well formed.", "+        if (!f.exists()) {", "+            File tmp = f;", "+            while (tmp.getParent() != null) {", "+                File parent = new File(tmp.getParent());", "+                if (parent.exists()) {", "+                    if (!parent.isDirectory()) {", "+                        message = \"DestFile \" + f + \" contains the path \"", "+                                  + parent + \" that is not a directory.\";", "+                        return false;", "+                    }", "+                    break;", "+                }", "+                tmp = parent;", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88ac989f87bed644a87bf958d6831bf4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ExtraFieldUtils.java", "commitBeforeChange": "6c0ab4d9acff26999595b59c4e710ed235e8fefd", "commitAfterChange": "6cd0de1022faed419783119405f458e44a1ac663", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public static ZipExtraField[] parse(byte[] data) throws ZipException", "signatureAfterChange": "     public static ZipExtraField[] parse(byte[] data, boolean local)         throws ZipException", "diff": ["-    public static ZipExtraField[] parse(byte[] data) throws ZipException {", "+    public static ZipExtraField[] parse(byte[] data, boolean local)", "+        throws ZipException {", "-                ze.parseFromLocalFileData(data, start + WORD, length);", "+                if (local", "+                    || !(ze instanceof CentralDirectoryParsingZipExtraField)) {", "+                    ze.parseFromLocalFileData(data, start + WORD, length);", "+                } else {", "+                    ((CentralDirectoryParsingZipExtraField) ze)", "+                        .parseFromCentralDirectoryData(data, start + WORD,", "+                                                       length);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd558dbbee7f0020221e95354f12636e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "e074b294911e39877ee9a480e44979f16b9a4882", "commitAfterChange": "cfb1f629ca2975be2292b593c049d04f2531d4a1", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     protected void createParents(FTPClient ftp, String filename)          throws IOException, BuildException", "signatureAfterChange": "     protected void createParents(FTPClient ftp, String filename)          throws IOException, BuildException", "diff": ["-        String cwd = ftp.printWorkingDirectory();", "+        File dir = new File(filename);", "+        if (dirCache.contains(dir)) {", "+            return;", "+        }", "+", "-        File dir = new File(filename);", "-            dir = new File(dirname);", "+            File checkDir = new File(dirname);", "+            if (dirCache.contains(checkDir)) {", "+                break;", "+            }", "+            dir = checkDir;", "-        while (i >= 0) {", "-            dir = (File) parents.elementAt(i);", "-            if (!dirCache.contains(dir)) {", "-                break;", "-            }", "-            i--;", "-        }", "+            String cwd = ftp.printWorkingDirectory();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f51ee5867175a86eb61c371bfa6748d8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "37e97ef42d47f59a277025d51b1d13719a9e616a", "commitAfterChange": "b92e6b644f97b87083602a8ce4029cce01725674", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": "     private File findFile(File base, String path, boolean cs)", "signatureAfterChange": "     private File findFile(File base, String path, boolean cs)", "diff": ["+        if (FileUtils.isAbsolutePath(path)) {", "+            if (base == null) {", "+                String[] s = FILE_UTILS.dissect(path);", "+                base = new File(s[0]);", "+                path = s[1];", "+            } else {", "+                File f = FILE_UTILS.normalize(path);", "+                String s = FILE_UTILS.removeLeadingPath(base, f);", "+                if (s.equals(f.getAbsolutePath())) {", "+                    //removing base from path yields no change; path not child of base", "+                    return null;", "+                }", "+                path = s;", "+            }", "+        }"]}]}
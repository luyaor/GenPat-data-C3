{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2e0b36f32b90a140783b2b10b504a15f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06c2ad6255c9f0f640b3332b20f6eda8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ComponentManager.java", "commitBeforeChange": "fcc7e2b47f01468c83803caa09ce8266e56f213c", "commitAfterChange": "d571dff958cd85b5083a2a829f84e35b4abe4434", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     protected Object createComponent(String componentName, BuildElement model)          throws ExecutionException", "signatureAfterChange": "     private Object createComponent(String componentName, BuildElement model)          throws ExecutionException", "diff": ["-    protected Object createComponent(String componentName, BuildElement model)", "+    private Object createComponent(String componentName, BuildElement model)", "-        ImportInfo importInfo = getImport(componentName);", "-        if (importInfo == null) {", "-            throw new ExecutionException(\"There is no definition of the <\"", "-                 + componentName + \"> component\");", "+        Object component = null;", "+        if (model != null) {             ", "+            for (Iterator i = aspects.iterator(); i.hasNext();) {", "+                Aspect aspect = (Aspect) i.next();", "+                component = aspect.preCreateComponent(component, model);", "+            }", "-        String className = importInfo.getClassName();", "-", "-        ComponentLibrary componentLibrary", "-             = importInfo.getComponentLibrary();", "-", "-        return createComponentFromDef(componentName, componentLibrary,", "-            importInfo.getDefinition(), model);", "+        ", "+        if (component == null) {", "+            ImportInfo importInfo = getImport(componentName);", "+            if (importInfo == null) {", "+                throw new ExecutionException(\"There is no definition of the <\"", "+                + componentName + \"> component\");", "+            }", "+            String className = importInfo.getClassName();", "+            ", "+            ComponentLibrary componentLibrary", "+            = importInfo.getComponentLibrary();", "+            ", "+            component = createComponentFromDef(componentName, componentLibrary,", "+                importInfo.getDefinition(), model);", "+        }", "+        ", "+        if (model != null) {", "+            for (Iterator i = aspects.iterator(); i.hasNext();) {", "+                Aspect aspect = (Aspect) i.next();", "+                component = aspect.postCreateComponent(component, model);", "+            }", "+        }", "+        ", "+        return component;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72c4aa3e2c288b55bcd569f31e9b8ff9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ComponentManager.java", "commitBeforeChange": "26d9c6536e7e605b92a6e4b20eb0cd25e116a689", "commitAfterChange": "f19f07d6e4c72f241057ecfc32d80be21201bbf7", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private Object createComponentFromDef(String componentName,                                           ComponentLibrary componentLibrary,                                           AntLibDefinition libDefinition,                                           BuildElement model)          throws AntException", "signatureAfterChange": "     private Object createComponentFromDef(String componentName,                                           ComponentLibrary componentLibrary,                                           AntLibDefinition libDefinition,                                           BuildElement model)          throws AntException", "diff": ["-        if (model != null) {", "-            location = model.getLocation();", "-        }", "-", "-        boolean isTask", "-             = libDefinition.getDefinitionType() == AntLibrary.TASKDEF;", "-        String localName = libDefinition.getDefinitionName();", "-        String className = libDefinition.getClassName();", "+        String className = null;", "-            ClassLoader componentLoader = componentLibrary.getClassLoader();", "-            Class componentClass", "-                 = Class.forName(className, true, componentLoader);", "+            boolean isTask", "+                 = libDefinition.getDefinitionType() == AntLibrary.TASKDEF;", "+", "+", "+            Object component = null;", "+            if (model != null) {", "+                location = model.getLocation();", "+                for (Iterator i = aspects.iterator(); i.hasNext();) {", "+                    Aspect aspect = (Aspect) i.next();", "+                    component = aspect.preCreateComponent(component, model);", "+                }", "+            }", "+", "-            // create the component using the factory", "-            Object component", "-                 = libFactory.createComponent(componentClass, localName);", "+            ClassLoader componentLoader = null;", "+            if (component == null) {", "+                String localName = libDefinition.getDefinitionName();", "+                className = libDefinition.getClassName();", "+                componentLoader = componentLibrary.getClassLoader();", "+                Class componentClass", "+                    = Class.forName(className, true, componentLoader);", "+                // create the component using the factory", "+                component", "+                    = libFactory.createComponent(componentClass, localName);", "+            } else {", "+                className = component.getClass().getName();", "+                componentLoader = component.getClass().getClassLoader();", "+            }", "-                ExecutionContext context", "-                     = new ExecutionContext(frame, execComponent, model);", "-                context.setClassLoader(componentLoader);", "-                execComponent.init(context, componentName);", "+                // give it a context unless it already has one", "+                if (execComponent.getAntContext() == null) {", "+                    ExecutionContext context", "+                         = new ExecutionContext(frame, execComponent, model);", "+                    context.setClassLoader(componentLoader);", "+                    execComponent.init(context, componentName);", "+                }", "+                for (Iterator i = aspects.iterator(); i.hasNext();) {", "+                    Aspect aspect = (Aspect) i.next();", "+                    component = aspect.postCreateComponent(component, model);", "+                }"]}]}
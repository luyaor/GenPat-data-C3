{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fec4821c2dd190d89fdf8f36c33bc912", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b657eea2aaa6237cd13e3b7988ceb46", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/i18n/Translate.java", "commitBeforeChange": "f21a1750ce8008bd256ff8fd0ba35e97949b2829", "commitAfterChange": "74f04b527f206f00581cd8c5727cc5ff0b0476a6", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private void translate() throws BuildException", "signatureAfterChange": "     private void translate() throws BuildException", "diff": ["-                        BufferedWriter out = null;", "-                        BufferedReader in = null;", "-                        try {", "-                        FileOutputStream fos = new FileOutputStream(dest);", "-                            out", "-                            = new BufferedWriter(new OutputStreamWriter(fos, destEncoding));", "-                        FileInputStream fis = new FileInputStream(src);", "-                            in", "-                            = new BufferedReader(new InputStreamReader(fis, srcEncoding));", "-                        String line;", "-                        LineTokenizer lineTokenizer = new LineTokenizer();", "-                        lineTokenizer.setIncludeDelims(true);", "-                        line = lineTokenizer.getToken(in);", "-                        while ((line) != null) {", "-                            // 2003-02-21 new replace algorithm by tbee (tbee@tbee.org)", "-                            // because it wasn't able to replace something like \"@aaa;@bbb;\"", "-", "-                            // is there a startToken", "-                            // and there is still stuff following the startToken", "-                            int startIndex = line.indexOf(startToken);", "-                            while (startIndex >= 0", "-                                && (startIndex + startToken.length()) <= line.length()) {", "-                                // the new value, this needs to be here", "-                                // because it is required to calculate the next position to", "-                                // search from at the end of the loop", "-                                String replace = null;", "-", "-                                // we found a starttoken, is there an endtoken following?", "-                                // start at token+tokenlength because start and end", "-                                // token may be indentical", "-                                int endIndex = line.indexOf(", "-                                    endToken, startIndex + startToken.length());", "-                                if (endIndex < 0) {", "-                                    startIndex += 1;", "-                                } else {", "-                                    // grab the token", "-                                    String token = line.substring(", "-                                        startIndex + startToken.length(), endIndex);", "-", "-                                    // If there is a white space or = or :, then", "-                                    // it isn't to be treated as a valid key.", "-                                    boolean validToken = true;", "-                                    for (int k = 0; k < token.length() && validToken; k++) {", "-                                        char c = token.charAt(k);", "-                                        if (c == ':' || c == '='", "-                                            || Character.isSpaceChar(c)) {", "-                                            validToken = false;", "-                                        }", "-                                    }", "-                                    if (!validToken) {", "-                                        startIndex += 1;", "-                                    } else {", "-                                        // find the replace string", "-                                        if (resourceMap.containsKey(token)) {", "-                                            replace = (String) resourceMap.get(token);", "-                                        } else {", "-                                            log(\"Replacement string missing for: \"", "-                                                + token, Project.MSG_VERBOSE);", "-                                            replace = startToken + token + endToken;", "-                                        }", "-", "-", "-                                        // generate the new line", "-                                        line = line.substring(0, startIndex)", "-                                             + replace", "-                                             + line.substring(endIndex + endToken.length());", "-", "-                                        // set start position for next search", "-                                        startIndex += replace.length();", "-                                    }", "-                                }", "-", "-                                // find next starttoken", "-                                startIndex = line.indexOf(startToken, startIndex);", "-                            }", "-                            out.write(line);", "-                            line = lineTokenizer.getToken(in);", "-                        }", "-                        } finally {", "-                            FileUtils.close(in);", "-                            FileUtils.close(out);", "-                        }", "+                        translateOneFile(src, dest);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bebfc0fea49ac30514e95f419b99f6e3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "b04c338caa73cc14ad6e8b258280426c3522de38", "commitAfterChange": "4c83562c6c9f681cdcd17c86f5e3c68c910dd5f8", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public File normalize(String path)", "signatureAfterChange": "     public File normalize(final String path)", "diff": ["-    public File normalize(String path) {", "-        String orig = path;", "-", "-        path = path.replace('/', File.separatorChar)", "-            .replace('\\\\', File.separatorChar);", "-", "-        // make sure we are dealing with an absolute path", "-        int colon = path.indexOf(\":\");", "-", "-        if (!isAbsolutePath(path)) {", "-            String msg = path + \" is not an absolute path\";", "-            throw new BuildException(msg);", "-        }", "-        boolean dosWithDrive = false;", "-        String root = null;", "-        // Eliminate consecutive slashes after the drive spec", "-        if ((onDos && path.length() >= 2", "-                && Character.isLetter(path.charAt(0))", "-                && path.charAt(1) == ':')", "-            || (onNetWare && colon > -1)) {", "-", "-            dosWithDrive = true;", "-", "-            char[] ca = path.replace('/', '\\\\').toCharArray();", "-            StringBuffer sbRoot = new StringBuffer();", "-            for (int i = 0; i < colon; i++) {", "-                sbRoot.append(Character.toUpperCase(ca[i]));", "-            }", "-            sbRoot.append(':');", "-            if (colon + 1 < path.length()) {", "-                sbRoot.append(File.separatorChar);", "-            }", "-            root = sbRoot.toString();", "-", "-            // Eliminate consecutive slashes after the drive spec", "-            StringBuffer sbPath = new StringBuffer();", "-            for (int i = colon + 1; i < ca.length; i++) {", "-                if ((ca[i] != '\\\\')", "-                    || (ca[i] == '\\\\' && ca[i - 1] != '\\\\')) {", "-                    sbPath.append(ca[i]);", "-                }", "-            }", "-            path = sbPath.toString().replace('\\\\', File.separatorChar);", "-        } else {", "-            if (path.length() == 1) {", "-                root = File.separator;", "-                path = \"\";", "-            } else if (path.charAt(1) == File.separatorChar) {", "-                // UNC drive", "-                root = File.separator + File.separator;", "-                path = path.substring(2);", "-            } else {", "-                root = File.separator;", "-                path = path.substring(1);", "-            }", "-        }", "+    public File normalize(final String path) {", "-        s.push(root);", "-        StringTokenizer tok = new StringTokenizer(path, File.separator);", "+        String[] dissect = dissect(path);", "+        s.push(dissect[0]);", "+", "+        StringTokenizer tok = new StringTokenizer(dissect[1], File.separator);", "-                    throw new BuildException(\"Cannot resolve path \" + orig);", "-                } else {", "-                    s.pop();", "+                    throw new BuildException(\"Cannot resolve path \" + path);", "+                s.pop();", "-        path = sb.toString();", "-        if (dosWithDrive) {", "-            path = path.replace('/', '\\\\');", "+        return new File(sb.toString());", "+    }", "-        return new File(path);"]}]}
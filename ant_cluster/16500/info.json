{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0fe387e7b18dfa44b8de02659f3d1802", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8379508ae3a7bf6a5153c12ddb4d88b4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/Javah.java", "commitBeforeChange": "5ffacddada00339f7c26549ff306e1d4fa04fc41", "commitAfterChange": "13b07b313fdc7ab2620f71517ab16698be496f24", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 32, "signatureBeforeChange": "     protected void logAndAddFilesToCompile(Commandline cmd)", "signatureAfterChange": "     protected void logAndAddFilesToCompile(Commandline cmd)", "diff": ["-        int n = 0;", "-        if (cls != null) {", "-            StringTokenizer tok = new StringTokenizer(cls, \",\", false);", "-            while (tok.hasMoreTokens()) {", "-                String aClass = tok.nextToken().trim();", "-                cmd.createArgument().setValue(aClass);", "-                niceClassList.append(\"    \" + aClass + lSep);", "-                n++;", "-            }", "-        }", "-", "-        Enumeration e = classes.elements();", "-        while (e.hasMoreElements()) {", "-            ClassArgument arg = (ClassArgument) e.nextElement();", "-            String aClass = arg.getName();", "-            cmd.createArgument().setValue(aClass);", "-            niceClassList.append(\"    \" + aClass + lSep);", "-            n++;", "+        String[] c = getClasses();", "+        for (int i = 0; i < c.length; i++) {", "+            cmd.createArgument().setValue(c[i]);", "+            niceClassList.append(\"    \" + c[i] + lSep);", "-        if (n > 1) {", "+        if (c.length > 1) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a60bf1cceb3ace596ef5d183bc389581", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/cvslib/CvsTagDiff.java", "commitBeforeChange": "a1853e2770a23f6ec76fd0c3ed2c0ea428ae40c6", "commitAfterChange": "70f35e75416468e31f537f33b248caaae29ee587", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private static String removePackageName(String line, List packageNames)", "signatureAfterChange": "     private static String removePackageName(String line,                                             String[] packagePrefixes,                                             int[] prefixLengths)", "diff": ["-    private static String removePackageName(String line, List packageNames) {", "+    private static String removePackageName(String line,", "+                                            String[] packagePrefixes,", "+                                            int[] prefixLengths) {", "+        if (line.length() < FILE_STRING_LENGTH) {", "+            return null;", "+        }", "-        for (Iterator iter = packageNames.iterator(); iter.hasNext(); ) {", "-            String toBeRemoved = FILE_STRING + iter.next() + \"/\";", "-            int len = toBeRemoved.length();", "-            if (line.length() > len) {", "-                if (line.startsWith(toBeRemoved)) {", "-                    matched = true;", "-                    line = line.substring(len);", "-                    break;", "-                }", "+        for (int i = 0; i < packagePrefixes.length; i++) {", "+            if (line.startsWith(packagePrefixes[i])) {", "+                matched = true;", "+                line = line.substring(prefixLengths[i]);", "+                break;", "-        if (!matched && line.length() > FILE_STRING.length()) {", "-            line = line.substring(FILE_STRING.length());", "-            matched = true;", "+        if (!matched) {", "+            line = line.substring(FILE_STRING_LENGTH);", "-        return !matched ? null : line;", "+        return line;"]}]}
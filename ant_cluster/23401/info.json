{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "18798b042e570e065f74dcaa68b5600b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a55c255cf681939f06254f9623703a8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/Union.java", "commitBeforeChange": "7829faf36a6f4bc565e0e8b92aa85cc948718176", "commitAfterChange": "9caeed5081071d6a2de28844d0a724918f8c6d86", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     protected Collection getCollection(boolean asString)", "signatureAfterChange": "     @Deprecated     @SuppressWarnings(\"unchecked\")     protected <T> Collection<T> getCollection(boolean asString)", "diff": ["-    protected Collection getCollection(boolean asString) { // XXX untypable", "-        List rc = getResourceCollections();", "-        if (rc.isEmpty()) {", "-            return Collections.EMPTY_LIST;", "-        }", "-        LinkedHashSet set = new LinkedHashSet(rc.size() * 2);", "-        for (Iterator rcIter = rc.iterator(); rcIter.hasNext();) {", "-            for (Iterator r = nextRC(rcIter).iterator(); r.hasNext();) {", "-                Object o = r.next();", "-                if (asString) {", "-                    o = o.toString();", "-                }", "-                set.add(o);", "-            }", "-        }", "-        return set;", "+    @Deprecated", "+    @SuppressWarnings(\"unchecked\")", "+    protected <T> Collection<T> getCollection(boolean asString) { // XXX untypable", "+        return asString ? (Collection<T>) getAllToStrings() : (Collection<T>) getAllResources();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a64e300685af92da360db4d5060aa78", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/Path.java", "commitBeforeChange": "0a41a60d0fece26541adf1cb8cfd22a5f8a3f5a7", "commitAfterChange": "157e6f3305b448bee38aae65e6fcfaff4c7e11d0", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 22, "signatureBeforeChange": "     protected Collection getCollection()", "signatureAfterChange": "     public String toString()", "diff": ["-    protected Collection getCollection() {", "-        for (Iterator i = getResourceCollections().iterator(); i.hasNext();) {", "-            ResourceCollection rc = (ResourceCollection) i.next();", "-            if (!(rc.isFilesystemOnly())) {", "-                throw new BuildException(getDataTypeName()", "-                    + \" allows only filesystem resources.\");", "-            }", "-            if (rc instanceof PathElement", "-                && ((PathElement) rc).getParts() == null) {", "-                throw new BuildException(", "-                    \"Either location or path must be set on a pathelement.\");", "-            } else if (rc instanceof Path) {", "-                Path p = (Path) rc;", "-                if (p.getProject() == null) {", "-                    p.setProject(getProject());", "-                }", "-            }", "-        return super.getCollection();", "+     */", "+    public String toString() {", "+        return isReference() ? getCheckedRef().toString() :", "+            union == null ? \"\" : union.toString();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca817bd2cd4fb39d45d9b7ee2ca18dad", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29848f3b5417daa02eadb227de30c5b9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteJava.java", "commitBeforeChange": "87c740f8a7024d16874ec4f65ccd688a77320724", "commitAfterChange": "761201eca25ffe38373a5b37d7747f6ff3d759f9", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void execute(Project project) throws BuildException", "signatureAfterChange": "     public void execute(Project project) throws BuildException", "diff": ["-            if (classpath == null) {", "-                target = Class.forName(classname);", "-            } else {", "-                loader = project.createClassLoader(classpath);", "-                loader.setParent(project.getCoreLoader());", "-                loader.setParentFirst(false);", "-                loader.addJavaLibraries();", "-                loader.setIsolated(true);", "-                loader.setThreadContextLoader();", "-                loader.forceLoadClass(classname);", "-                target = Class.forName(classname, true, loader);", "+            try {", "+                if (classpath == null) {", "+                    target = Class.forName(classname);", "+                } else {", "+                    loader = project.createClassLoader(classpath);", "+                    loader.setParent(project.getCoreLoader());", "+                    loader.setParentFirst(false);", "+                    loader.addJavaLibraries();", "+                    loader.setIsolated(true);", "+                    loader.setThreadContextLoader();", "+                    loader.forceLoadClass(classname);", "+                    target = Class.forName(classname, true, loader);", "+                }", "+            } catch (ClassNotFoundException e) {", "+                throw new BuildException(\"Could not find \" + classname + \".\"", "+                                         + \" Make sure you have it in your\"", "+                                         + \" classpath\");", "-        } catch (ClassNotFoundException e) {", "-            throw new BuildException(\"Could not find \" + classname + \".\"", "-                                     + \" Make sure you have it in your\"", "-                                     + \" classpath\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87d44690b3439d83522905f7eef954e9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteOn.java", "commitBeforeChange": "9ff2d6a1ab17e51f25cadf8de2a1b7ada8c15490", "commitAfterChange": "eefa2aba55ad71e6c5ee6e54748b1dc76025c7ac", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 9, "signatureBeforeChange": "      protected void runExec(Execute exe) throws BuildException", "signatureAfterChange": "      protected void runExec(Execute exe) throws BuildException", "diff": ["+            Vector fileNames = new Vector();", "+            Vector baseDirs = new Vector();", "-                Vector v = new Vector();", "-                        v.addElement(s[j]);", "+                        fileNames.addElement(s[j]);", "+                        baseDirs.addElement(base);", "-                        v.addElement(s[j]);", "+                        fileNames.addElement(s[j]);", "+                        baseDirs.addElement(base);", "-                if (v.size() == 0 && skipEmpty) {", "+                if (fileNames.size() == 0 && skipEmpty) {", "-                String[] s = new String[v.size()];", "-                v.copyInto(s);", "-", "-                int err = -1;", "-                ", "-                if (parallel) {", "-                    String[] command = getCommandline(s, base);", "-                    log(\"Executing \" + Commandline.toString(command), ", "-                        Project.MSG_VERBOSE);", "-                    exe.setCommandline(command);", "-                    runExecute(exe);", "-", "-                } else {", "+                if (!parallel) {", "+                    String[] s = new String[fileNames.size()];", "+                    fileNames.copyInto(s);", "+                    fileNames.removeAllElements();", "+                    baseDirs.removeAllElements();", "+            }", "+", "+            if (parallel) {", "+                String[] s = new String[fileNames.size()];", "+                fileNames.copyInto(s);", "+                File[] b = new File[baseDirs.size()];", "+                baseDirs.copyInto(b);", "+                String[] command = getCommandline(s, b);", "+                log(\"Executing \" + Commandline.toString(command), ", "+                    Project.MSG_VERBOSE);", "+                exe.setCommandline(command);", "+                runExecute(exe);"]}]}
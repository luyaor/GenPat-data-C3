{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "27e74c468b1a9f4be44be27f175c3454", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f97e4d4927ad7fa0782e9c2f4ac08ef", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/javacc/JJTree.java", "commitBeforeChange": "f987ed2417d66f6e74eb0b78cc290ca3f3ee3863", "commitAfterChange": "2366612c9c9ca8e538fd8faaec24184bc5b96c73", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["+        ", "+        if (outputFile != null) {", "+            cmdl.createArgument().setValue(\"-\" + OUTPUT_FILE + \":\" ", "+                                           + outputFile.replace('\\\\', '/'));", "+        }", "+", "+        File javaFile = null;", "-            outputDirectory = new File(target.getParent());", "+            javaFile = new File(createOutputFileName(target, outputFile, ", "+                                                     null));", "+        } else {", "+            if (!outputDirectory.isDirectory()) {", "+                throw new BuildException(\"'outputdirectory' \" + outputDirectory", "+                                         + \" is not a directory.\");", "+            }", "+ ", "+            // convert backslashes to slashes, otherwise jjtree will", "+            // put this as comments and this seems to confuse javacc", "+            cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\"", "+                                           + outputDirectory.getAbsolutePath()", "+                                             .replace('\\\\', '/'));", "+ ", "+            javaFile = new File(createOutputFileName(target, outputFile, ", "+                                                     outputDirectory", "+                                                     .getPath()));", "-        if (!outputDirectory.isDirectory()) {", "-            throw new BuildException(\"'outputdirectory' \" + outputDirectory", "-                + \" is not a directory.\");", "-        }", "-        // convert backslashes to slashes, otherwise jjtree will put this as", "-        // comments and this seems to confuse javacc", "-        cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\"", "-            + outputDirectory.getAbsolutePath().replace('\\\\', '/'));", "-        String targetName = target.getName();", "-        final File javaFile = new File(outputDirectory,", "-            targetName.substring(0, targetName.indexOf(\".jjt\")) + \".jj\");", "-             && target.lastModified() < javaFile.lastModified()) {", "+            && target.lastModified() < javaFile.lastModified()) {", "-        cmdl.setClassname(JavaCC.getMainClass(javaccHome,", "+        cmdl.setClassname(JavaCC.getMainClass(javaccHome, "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ead382a56cea17e4c083453da551091c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/frontends/CLIMain.java", "commitBeforeChange": "37c58ae8ccb6542d350567e49d7458a4da3e054a", "commitAfterChange": "6a27d81a9fbed47b98678a84a9cb19448f2ded8d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private Priority mapLogLevel( final String logLevel ) throws Exception", "signatureAfterChange": "     private int mapLogLevel( final String logLevel )         throws Exception", "diff": ["-    private Priority mapLogLevel( final String logLevel ) throws Exception", "+    private int mapLogLevel( final String logLevel )", "+        throws Exception", "-        final Priority priority = Priority.getPriorityForName( logLevelCapitalized );", "-        if( !priority.getName().equals( logLevelCapitalized ) )", "+        if( \"DEBUG\".equals( logLevelCapitalized ) )", "+        {", "+            return BasicLogger.LEVEL_DEBUG;", "+        }", "+        else if( \"INFO\".equals( logLevelCapitalized ) )", "+        {", "+            return BasicLogger.LEVEL_INFO;", "+        }", "+        else if( \"WARN\".equals( logLevelCapitalized ) )", "+        {", "+            return BasicLogger.LEVEL_WARN;", "+        }", "+        else if( \"ERROR\".equals( logLevelCapitalized ) )", "+        {", "+            return BasicLogger.LEVEL_ERROR;", "+        }", "+        else", "-        return priority;", "-    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6708153bd72f89b2543197978cb0ee0b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4de2f2dc8185534e42769af6d02c486", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Redirector.java", "commitBeforeChange": "e1dba00d6fba1e923723c523e5aed501dc5ab84b", "commitAfterChange": "3ade0b6e769ba60594a31515f5ba7e3e0054810a", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "     public synchronized void complete() throws IOException", "signatureAfterChange": "     public void complete() throws IOException", "diff": ["-    public synchronized void complete() throws IOException {", "+    public void complete() throws IOException {", "-        if (inputStream != null) {", "-            inputStream.close();", "+        synchronized (inMutex) {", "+            if (inputStream != null) {", "+                inputStream.close();", "+            }", "-        outputStream.flush();", "-        outputStream.close();", "+        synchronized (outMutex) {", "+            outputStream.flush();", "+            outputStream.close();", "+        }", "-        errorStream.flush();", "-        errorStream.close();", "+        synchronized (errMutex) {", "+            errorStream.flush();", "+            errorStream.close();", "+        }", "-        //wait for the StreamPumpers to finish", "-        while (threadGroup.activeCount() > 0) {", "-            try {", "-                managingTask.log(\"waiting for \" + threadGroup.activeCount()", "-                    + \" Threads:\", Project.MSG_DEBUG);", "-                Thread[] thread = new Thread[threadGroup.activeCount()];", "-                threadGroup.enumerate(thread);", "-                for (int i = 0; i < thread.length && thread[i] != null; i++) {", "-                    try {", "-                        managingTask.log(thread[i].toString(), Project.MSG_DEBUG);", "-                    } catch (NullPointerException enPeaEx) {", "-                        // Ignore exception", "+        // wait for the StreamPumpers to finish", "+        synchronized (this) {", "+            while (threadGroup.activeCount() > 0) {", "+                try {", "+                    managingTask.log(\"waiting for \" + threadGroup.activeCount()", "+                            + \" Threads:\", Project.MSG_DEBUG);", "+                    Thread[] thread = new Thread[threadGroup.activeCount()];", "+                    threadGroup.enumerate(thread);", "+                    for (int i = 0; i < thread.length && thread[i] != null; i++) {", "+                        try {", "+                            managingTask.log(thread[i].toString(),", "+                                    Project.MSG_DEBUG);", "+                        } catch (NullPointerException enPeaEx) {", "+                            // Ignore exception", "+                        }", "-                }", "-                wait(STREAMPUMPER_WAIT_INTERVAL);", "-            } catch (InterruptedException eyeEx) {", "-                Thread[] thread = new Thread[threadGroup.activeCount()];", "-                threadGroup.enumerate(thread);", "-                for (int i = 0; i < thread.length && thread[i] != null; i++) {", "-                    thread[i].interrupt();", "+                    wait(STREAMPUMPER_WAIT_INTERVAL);", "+                } catch (InterruptedException eyeEx) {", "+                    Thread[] thread = new Thread[threadGroup.activeCount()];", "+                    threadGroup.enumerate(thread);", "+                    for (int i = 0; i < thread.length && thread[i] != null; i++) {", "+                        thread[i].interrupt();", "+                    }", "-        inputStream = null;", "-        outputStream = null;", "-        errorStream = null;", "-        outPrintStream = null;", "-        errorPrintStream = null;", "-   }", "+        synchronized (inMutex) {", "+            inputStream = null;", "+        }", "+        synchronized (outMutex) {", "+            outputStream = null;", "+            outPrintStream = null;", "+        }", "+        synchronized (errMutex) {", "+            errorStream = null;", "+            errorPrintStream = null;", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd154ec67472068569e3e18b33a8fdbe", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Redirector.java", "commitBeforeChange": "e1dba00d6fba1e923723c523e5aed501dc5ab84b", "commitAfterChange": "3ade0b6e769ba60594a31515f5ba7e3e0054810a", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     public synchronized void createStreams()", "signatureAfterChange": "     public void createStreams()", "diff": ["-    public synchronized void createStreams() {", "-        outStreams();", "-        errorStreams();", "-        if (alwaysLog || outputStream == null) {", "-            OutputStream outputLog", "-                = new LogOutputStream(managingTask, Project.MSG_INFO);", "-            outputStream = (outputStream == null)", "-                ? outputLog : new TeeOutputStream(outputLog, outputStream);", "-        }", "-        if (alwaysLog || errorStream == null) {", "-            OutputStream errorLog", "-                = new LogOutputStream(managingTask, Project.MSG_WARN);", "-            errorStream = (errorStream == null)", "-                ? errorLog : new TeeOutputStream(errorLog, errorStream);", "-        }", "-        if ((outputFilterChains != null && outputFilterChains.size() > 0)", "-            || !(outputEncoding.equalsIgnoreCase(inputEncoding))) {", "-            try {", "-                LeadPipeInputStream snk = new LeadPipeInputStream();", "-                snk.setManagingComponent(managingTask);", "+    public void createStreams() {", "-                InputStream outPumpIn = snk;", "+        synchronized (outMutex) {", "+            outStreams();", "+            if (alwaysLogOut || outputStream == null) {", "+                OutputStream outputLog = new LogOutputStream(managingTask,", "+                        Project.MSG_INFO);", "+                outputStream = (outputStream == null) ? outputLog", "+                        : new TeeOutputStream(outputLog, outputStream);", "+            }", "-                Reader reader = new InputStreamReader(outPumpIn, inputEncoding);", "+            if ((outputFilterChains != null && outputFilterChains.size() > 0)", "+                    || !(outputEncoding.equalsIgnoreCase(inputEncoding))) {", "+                try {", "+                    LeadPipeInputStream snk = new LeadPipeInputStream();", "+                    snk.setManagingComponent(managingTask);", "-                if (outputFilterChains != null && outputFilterChains.size() > 0) {", "-                    ChainReaderHelper helper = new ChainReaderHelper();", "-                    helper.setProject(managingTask.getProject());", "-                    helper.setPrimaryReader(reader);", "-                    helper.setFilterChains(outputFilterChains);", "-                    reader = helper.getAssembledReader();", "+                    InputStream outPumpIn = snk;", "+", "+                    Reader reader = new InputStreamReader(outPumpIn,", "+                            inputEncoding);", "+", "+                    if (outputFilterChains != null", "+                            && outputFilterChains.size() > 0) {", "+                        ChainReaderHelper helper = new ChainReaderHelper();", "+                        helper.setProject(managingTask.getProject());", "+                        helper.setPrimaryReader(reader);", "+                        helper.setFilterChains(outputFilterChains);", "+                        reader = helper.getAssembledReader();", "+                    }", "+                    outPumpIn = new ReaderInputStream(reader, outputEncoding);", "+", "+                    Thread t = new Thread(threadGroup, new StreamPumper(", "+                            outPumpIn, outputStream, true), \"output pumper\");", "+                    t.setPriority(Thread.MAX_PRIORITY);", "+                    outputStream = new PipedOutputStream(snk);", "+                    t.start();", "+                } catch (IOException eyeOhEx) {", "+                    throw new BuildException(\"error setting up output stream\",", "+                            eyeOhEx);", "-                outPumpIn = new ReaderInputStream(reader, outputEncoding);", "-", "-                Thread t = new Thread(threadGroup, new StreamPumper(", "-                    outPumpIn, outputStream, true), \"output pumper\");", "-                t.setPriority(Thread.MAX_PRIORITY);", "-                outputStream = new PipedOutputStream(snk);", "-                t.start();", "-            } catch (IOException eyeOhEx) {", "-                throw new BuildException(", "-                    \"error setting up output stream\", eyeOhEx);", "-        if ((errorFilterChains != null && errorFilterChains.size() > 0)", "-            || !(errorEncoding.equalsIgnoreCase(inputEncoding))) {", "-            try {", "-                LeadPipeInputStream snk = new LeadPipeInputStream();", "-                snk.setManagingComponent(managingTask);", "+        synchronized (errMutex) {", "+            errorStreams();", "+            if (alwaysLogErr || errorStream == null) {", "+                OutputStream errorLog = new LogOutputStream(managingTask,", "+                        Project.MSG_WARN);", "+                errorStream = (errorStream == null) ? errorLog", "+                        : new TeeOutputStream(errorLog, errorStream);", "+            }", "-                InputStream errPumpIn = snk;", "+            if ((errorFilterChains != null && errorFilterChains.size() > 0)", "+                    || !(errorEncoding.equalsIgnoreCase(inputEncoding))) {", "+                try {", "+                    LeadPipeInputStream snk = new LeadPipeInputStream();", "+                    snk.setManagingComponent(managingTask);", "-                Reader reader = new InputStreamReader(errPumpIn, inputEncoding);", "+                    InputStream errPumpIn = snk;", "-                if (errorFilterChains != null && errorFilterChains.size() > 0) {", "-                    ChainReaderHelper helper = new ChainReaderHelper();", "-                    helper.setProject(managingTask.getProject());", "-                    helper.setPrimaryReader(reader);", "-                    helper.setFilterChains(errorFilterChains);", "-                    reader = helper.getAssembledReader();", "+                    Reader reader = new InputStreamReader(errPumpIn,", "+                            inputEncoding);", "+", "+                    if (errorFilterChains != null", "+                            && errorFilterChains.size() > 0) {", "+                        ChainReaderHelper helper = new ChainReaderHelper();", "+                        helper.setProject(managingTask.getProject());", "+                        helper.setPrimaryReader(reader);", "+                        helper.setFilterChains(errorFilterChains);", "+                        reader = helper.getAssembledReader();", "+                    }", "+                    errPumpIn = new ReaderInputStream(reader, errorEncoding);", "+", "+                    Thread t = new Thread(threadGroup, new StreamPumper(", "+                            errPumpIn, errorStream, true), \"error pumper\");", "+                    t.setPriority(Thread.MAX_PRIORITY);", "+                    errorStream = new PipedOutputStream(snk);", "+                    t.start();", "+                } catch (IOException eyeOhEx) {", "+                    throw new BuildException(\"error setting up error stream\",", "+                            eyeOhEx);", "-                errPumpIn = new ReaderInputStream(reader, errorEncoding);", "-", "-                Thread t = new Thread(threadGroup, new StreamPumper(", "-                    errPumpIn, errorStream, true), \"error pumper\");", "-                t.setPriority(Thread.MAX_PRIORITY);", "-                errorStream = new PipedOutputStream(snk);", "-                t.start();", "-            } catch (IOException eyeOhEx) {", "-                throw new BuildException(", "-                    \"error setting up error stream\", eyeOhEx);", "-        // if input files are specified, inputString and inputStream are ignored;", "-        // classes that work with redirector attributes can enforce", "-        // whatever warnings are needed", "-        if (input != null && input.length > 0) {", "-            managingTask.log(\"Redirecting input from file\"", "-                + ((input.length == 1) ? \"\" : \"s\"), Project.MSG_VERBOSE);", "-            try {", "-                inputStream = new ConcatFileInputStream(input);", "-            } catch (IOException eyeOhEx) {", "-                throw new BuildException(eyeOhEx);", "+        synchronized (inMutex) {", "+            // if input files are specified, inputString and inputStream are", "+            // ignored;", "+            // classes that work with redirector attributes can enforce", "+            // whatever warnings are needed", "+            if (input != null && input.length > 0) {", "+                managingTask", "+                        .log(\"Redirecting input from file\"", "+                                + ((input.length == 1) ? \"\" : \"s\"),", "+                                Project.MSG_VERBOSE);", "+                try {", "+                    inputStream = new ConcatFileInputStream(input);", "+                } catch (IOException eyeOhEx) {", "+                    throw new BuildException(eyeOhEx);", "+                }", "+                ((ConcatFileInputStream) inputStream)", "+                        .setManagingComponent(managingTask);", "+            } else if (inputString != null) {", "+                StringBuffer buf = new StringBuffer(\"Using input \");", "+                if (logInputString) {", "+                    buf.append('\"').append(inputString).append('\"');", "+                } else {", "+                    buf.append(\"string\");", "+                }", "+                managingTask.log(buf.toString(), Project.MSG_VERBOSE);", "+                inputStream = new ByteArrayInputStream(inputString.getBytes());", "-            ((ConcatFileInputStream) inputStream).setManagingComponent(managingTask);", "-        } else if (inputString != null) {", "-            StringBuffer buf = new StringBuffer(\"Using input \");", "-            if (logInputString) {", "-                buf.append('\"').append(inputString).append('\"');", "-            } else {", "-                buf.append(\"string\");", "-            }", "-            managingTask.log(buf.toString(), Project.MSG_VERBOSE);", "-            inputStream = new ByteArrayInputStream(inputString.getBytes());", "-        }", "-        if (inputStream != null", "-            && inputFilterChains != null && inputFilterChains.size() > 0) {", "-            ChainReaderHelper helper = new ChainReaderHelper();", "-            helper.setProject(managingTask.getProject());", "-            try {", "-                helper.setPrimaryReader(", "-                    new InputStreamReader(inputStream, inputEncoding));", "-            } catch (IOException eyeOhEx) {", "-                throw new BuildException(", "-                    \"error setting up input stream\", eyeOhEx);", "+            if (inputStream != null && inputFilterChains != null", "+                    && inputFilterChains.size() > 0) {", "+                ChainReaderHelper helper = new ChainReaderHelper();", "+                helper.setProject(managingTask.getProject());", "+                try {", "+                    helper.setPrimaryReader(new InputStreamReader(inputStream,", "+                            inputEncoding));", "+                } catch (IOException eyeOhEx) {", "+                    throw new BuildException(\"error setting up input stream\",", "+                            eyeOhEx);", "+                }", "+                helper.setFilterChains(inputFilterChains);", "+                inputStream = new ReaderInputStream(", "+                        helper.getAssembledReader(), inputEncoding);", "-            helper.setFilterChains(inputFilterChains);", "-            inputStream = new ReaderInputStream(", "-                helper.getAssembledReader(), inputEncoding);"]}]}
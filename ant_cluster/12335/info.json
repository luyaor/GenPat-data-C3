{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d251b14f4a46aacaeb79b52e1939492b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01469ebd254f0447b9594ddc0aa2481c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Expand.java", "commitBeforeChange": "470a4695e947c43343806a5a8ec79f1e4b4a9321", "commitAfterChange": "29c20176679062f1345b7edc0aa3fe1b5810c858", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-    // XXX move it to util or tools", "-        Touch touch = (Touch) project.createTask(\"touch\");", "-        touch.setOwningTarget(target);", "-        touch.setTaskName(getTaskName());", "-        touch.setLocation(getLocation());", "+        FileUtils fileUtils = FileUtils.newFileUtils();", "-                    expandFile(touch, file, dest);", "+                    expandFile(fileUtils, file, dest);", "-                expandFile(touch, source, dest);", "+                expandFile(fileUtils, source, dest);", "-                    expandFile(touch, file, dest);", "+                    expandFile(fileUtils, file, dest);", "-        try {", "-            if (pw != null) {", "-                pw.close();", "-            }", "-            if (bw != null) {", "+        if (pw != null) {", "+            pw.close();", "+        }", "+        if (bw != null) {", "+            try {", "-            }", "-            if (fw != null) {", "+            } catch (IOException ioe1) {}", "+        }", "+        if (fw != null) {", "+            try {", "+            } catch (IOException ioe1) {", "+                //Oh, well!  We did our best", "-        } catch (IOException ioe1) {", "-            //Oh, well!  We did our best"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbff460fbf378b0d6a4ffc05278974e4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/IContract.java", "commitBeforeChange": "7f76769aba1d44cd44eb56ebadbbbe9068859c68", "commitAfterChange": "0ae47a0947c94f5e56a518702e90355fe23bf1ff", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            args.append( \"@\" ).append( targets.getName() );", "+            args.append( \"@\" ).append( targets.getAbsolutePath() );", "+", "+            // update iControlProperties if it's set.", "+            if( updateIcontrol ) {", "+                Properties iControlProps = new Properties();", "+                try { // to read existing propertiesfile", "+                    iControlProps.load( new FileInputStream( \"icontrol.properties\" ) );", "+                } catch( IOException e ) {", "+                    log( \"File icontrol.properties not found. That's ok. Writing a default one.\" );", "+                }", "+                iControlProps.setProperty( \"classRoot\", srcDir.getAbsolutePath() );", "+                iControlProps.setProperty( \"classpath\", iContractClasspath.toString() );", "+                iControlProps.setProperty( \"controlFile\", \"control\" );", "+", "+                try { // to read existing propertiesfile", "+                    iControlProps.store( new FileOutputStream( \"icontrol.properties\" ), \"Edit the classRoot and controlfile properties if you like\" );", "+                    log( \"Updated file icontrol.properties.\" );", "+                } catch( IOException e ) {", "+                    log( \"Couldn't write icontrol.properties.\" );", "+                }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0c1654ac4b7261c635b883de21193fd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/depend/Depend.java", "commitBeforeChange": "87bf01f5de873b8eb5a25c2c62acbd7c9d1e92b1", "commitAfterChange": "28c35b84c4dbe9d338734c38d5ca8fc0d2f75cfc", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void determineDependencies() throws IOException", "signatureAfterChange": "     private void determineDependencies() throws IOException", "diff": ["-                FileInputStream inFileStream = null;", "-                try {", "-                    inFileStream = new FileInputStream(info.absoluteFile);", "-                    ClassFile classFile = new ClassFile();", "-                    classFile.read(inFileStream);", "-", "-                    dependencyList = classFile.getClassRefs();", "-                    if (dependencyList != null) {", "-                        cacheDirty = true;", "-                        dependencyMap.put(info.className, dependencyList);", "-                    }", "-                } finally {", "-                    if (inFileStream != null) {", "-                        inFileStream.close();", "-                    }", "+                DependencyAnalyzer analyzer = new AntAnalyzer();", "+                analyzer.addRootClass(info.className);", "+                analyzer.addClassPath(destPath);", "+                analyzer.setClosure(false);", "+                dependencyList = new Vector();", "+                Enumeration depEnum = analyzer.getClassDependencies();", "+                while (depEnum.hasMoreElements()) {", "+                    dependencyList.addElement(depEnum.nextElement());", "+                }", "+                if (dependencyList != null) {", "+                    cacheDirty = true;", "+                    dependencyMap.put(info.className, dependencyList);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c105a7550e8df5e11776983aa50b1bd3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/SSHExec.java", "commitBeforeChange": "1d600fe6da225ed331cf90bfcf836da4c90fecc8", "commitAfterChange": "7171341fc60cfd4d7cd4f92bda0778bf98c17094", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-", "+        StringBuffer output = new StringBuffer();", "-                ByteArrayOutputStream out = executeCommand(session, command);", "-                if (outputProperty != null) {", "-                    //#bugzilla 43437", "-                    getProject().setNewProperty(outputProperty, command + \" : \" + out);", "-                }", "+                output.append(command).append(\" : \");", "+                executeCommand(session, command, output);", "-                    String output = \"\";", "-                        ByteArrayOutputStream out = executeCommand(session, cmd);", "-                        output += cmd + \" : \" + out + \"\\n\";", "-                    }", "-                    if (outputProperty != null) {", "-                        //#bugzilla 43437", "-                        getProject().setNewProperty(outputProperty, output);", "+                        output.append(cmd).append(\" : \");", "+                        executeCommand(session, cmd, output);", "+                        output.append(\"\\n\");", "+            if (outputProperty != null) {", "+                getProject().setNewProperty(outputProperty, output.toString());", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d33fb1822c6c308d916017083d328f4e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/anteater/bootstrap/Bootstrap2.java", "commitBeforeChange": "9b36df2db1d2c72d0b8712357612829ce54da3a5", "commitAfterChange": "e9211a1fb8fa0ce4abd0b966fc81c7cd1ae75531", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "          private static void jarDir(File dir, String prefix, ZipOutputStream zos) throws          IOException", "signatureAfterChange": "          private static void jarDir(File dir, String prefix, JarOutputStream jos) throws          IOException", "diff": ["-    private static void jarDir(File dir, String prefix, ZipOutputStream zos) throws ", "+    private static void jarDir(File dir, String prefix, JarOutputStream jos) throws ", "-                jarDir(f, prefix + \"/\" + files[i], zos);", "+                String zipEntryName;", "+                if (!prefix.equals(\"\")) {", "+                    zipEntryName = prefix + \"/\" + files[i];", "+                } else {", "+                    zipEntryName = files[i];", "+                }", "+                ZipEntry ze = new ZipEntry(zipEntryName);", "+                jos.putNextEntry(ze);", "+                jarDir(f, zipEntryName, jos);", "-                ZipEntry ze = new ZipEntry(prefix + \"/\" + files[i]);", "-                zos.putNextEntry(ze);", "+                String zipEntryName;", "+                if (!prefix.equals(\"\")) {", "+                    zipEntryName = prefix + \"/\" + files[i];", "+                } else {", "+                    zipEntryName = files[i];", "+                }", "+                ZipEntry ze = new ZipEntry(zipEntryName);", "+                jos.putNextEntry(ze);", "-                    zos.write(buf, 0, count);", "+                    jos.write(buf, 0, count);"]}]}
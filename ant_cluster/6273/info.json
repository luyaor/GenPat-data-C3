{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "50dfc2c81bf452af3b5d4a69e4b0e9bb", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14dd2b2f6088f7bb3dfba855bb3fcac4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/LoadFile.java", "commitBeforeChange": "a89ffe281a56c3c51e376d8927fe300423b43bc7", "commitAfterChange": "f9c551b16e64afb9541e8e5507b9ac1a8c2eb436", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void execute()         throws BuildException", "signatureAfterChange": "     public final void execute()         throws BuildException", "diff": ["-    public void execute()", "+    public final void execute()", "-            long len = srcFile.length();", "+            final long len = srcFile.length();", "-            if (len > Integer.MAX_VALUE) {", "-                log(\"this file is far to big to load completely\");", "-            }", "-            int size=(int) len;", "-            char[] buffer = new char[size];", "+            final int size=(int) len;", "-            instream.read(buffer);", "-            String text = new String(buffer);", "-            if (makeOneLine) {", "-                text=stripLineBreaks(text);", "-            }", "-            if(evaluateProperties) {", "-                text = project.replaceProperties(text);", "-            }", "-            project.setNewProperty(property, text);", "-            log(\"loaded \"+buffer.length+\" characters\",Project.MSG_VERBOSE);", "-            log(property+\" := \"+text,Project.MSG_DEBUG);", "-        } catch (IOException ioe) {", "-            String message = \"Unable to load file: \" + ioe.toString();", "+            ChainReaderHelper crh = new ChainReaderHelper();", "+            crh.setBufferSize(size);", "+            crh.setPrimaryReader(instream);", "+            crh.setFilterChains(filterChains);", "+            crh.setProject(project);", "+            instream = crh.getAssembledReader();", "+", "+            String text = crh.readFully(instream);", "+", "+            if (text != null) {", "+                project.setNewProperty(property, text);", "+                log(\"loaded \" + text.length() + \" characters\",Project.MSG_VERBOSE);", "+                log(property+\" := \"+text,Project.MSG_DEBUG);", "+            }", "+", "+        } catch (final IOException ioe) {", "+            final String message = \"Unable to load file: \" + ioe.toString();", "+            }", "+        } catch (final BuildException be) {", "+            if (failOnError) {", "+                throw be;", "+            }", "+            else {", "+                log(be.getMessage(), Project.MSG_ERR);", "+                //ignore"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "871e4b0b3e3cddc421f09c449691f6b8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/filterreaders/src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "9a5aa0943a1a457adb8cf6425a9f1732e4a8e051", "commitAfterChange": "6885f5ccadd471cc33c19bdcca4271aa3086d3ca", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, boolean overwrite,                          boolean preserveLastModified, String encoding)         throws IOException", "signatureAfterChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String encoding, Project project)         throws IOException", "diff": ["+     */", "+    public void copyFile(File sourceFile, File destFile,", "+                         FilterSetCollection filters, Vector filterChains,", "+                         boolean overwrite, boolean preserveLastModified,", "+                         String encoding, Project project)", "+        throws IOException {", "-            if (filters != null && filters.hasFilters()) {", "+            final boolean filterSetsAvailable = (filters != null", "+                                                 && filters.hasFilters());", "+            final boolean filterChainsAvailable = (filterChains != null", "+                                                   && filterChains.size() > 0);", "+", "+            if (filterSetsAvailable || filterChainsAvailable) {", "-                    in = new BufferedReader(new InputStreamReader(new FileInputStream(sourceFile), encoding));", "-                    out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(destFile), encoding));", "+                    in = new BufferedReader(new InputStreamReader(", "+                            new FileInputStream(sourceFile), encoding));", "+                    out = new BufferedWriter(new OutputStreamWriter(", "+                            new FileOutputStream(destFile), encoding));", "+                }", "+", "+                if (filterChainsAvailable) {", "+                    ChainReaderHelper crh = new ChainReaderHelper();", "+                    crh.setBufferSize(8192);", "+                    crh.setPrimaryReader(in);", "+                    crh.setFilterChains(filterChains);", "+                    crh.setProject(project);", "+                    Reader rdr = crh.getAssembledReader();", "+                    in = new BufferedReader(rdr);", "-                        newline = filters.replaceTokens(line);", "+                        if (filterSetsAvailable) {", "+                            newline = filters.replaceTokens(line);", "+                        } else {", "+                            newline = line;", "+                        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa1633f0d1c6e4fa6a58af67d4e82297", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Redirector.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "     public void createStreams()", "signatureAfterChange": "     public void createStreams()", "diff": ["-                OutputStream outputLog = new LogOutputStream(managingTask,", "+                final OutputStream outputLog = new LogOutputStream(managingTask,", "-                    LeadPipeInputStream snk = new LeadPipeInputStream();", "+                    final LeadPipeInputStream snk = new LeadPipeInputStream();", "-                        ChainReaderHelper helper = new ChainReaderHelper();", "+                        final ChainReaderHelper helper = new ChainReaderHelper();", "-                    Thread t = new Thread(threadGroup, new StreamPumper(", "+                    final Thread t = new Thread(threadGroup, new StreamPumper(", "-                } catch (IOException eyeOhEx) {", "+                } catch (final IOException eyeOhEx) {", "-                OutputStream errorLog = new LogOutputStream(managingTask,", "+                final OutputStream errorLog = new LogOutputStream(managingTask,", "-                    LeadPipeInputStream snk = new LeadPipeInputStream();", "+                    final LeadPipeInputStream snk = new LeadPipeInputStream();", "-                        ChainReaderHelper helper = new ChainReaderHelper();", "+                        final ChainReaderHelper helper = new ChainReaderHelper();", "-                    Thread t = new Thread(threadGroup, new StreamPumper(", "+                    final Thread t = new Thread(threadGroup, new StreamPumper(", "-                } catch (IOException eyeOhEx) {", "+                } catch (final IOException eyeOhEx) {", "-                } catch (IOException eyeOhEx) {", "+                } catch (final IOException eyeOhEx) {", "-                StringBuffer buf = new StringBuffer(\"Using input \");", "+                final StringBuffer buf = new StringBuffer(\"Using input \");", "-                ChainReaderHelper helper = new ChainReaderHelper();", "+                final ChainReaderHelper helper = new ChainReaderHelper();", "-                } catch (IOException eyeOhEx) {", "+                } catch (final IOException eyeOhEx) {"]}]}
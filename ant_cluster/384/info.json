{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b05efef28a10ec44edd389ad77afe57b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8db3a01d729ec8417788ddd3d9323ea8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/rmic/KaffeRmic.java", "commitBeforeChange": "12a8163d89f051f1950a8e2b136edbe08b6cc711", "commitAfterChange": "5db106732ce0f855fd2b03fd68104a708acf7996", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public boolean execute() throws BuildException", "signatureAfterChange": "      public boolean execute() throws BuildException", "diff": ["-            throw new BuildException(\"Cannot use Kaffe rmic, as it is not available\"+", "-                                     \" A common solution is to set the environment variable\"+", "-                                     \" JAVA_HOME or CLASSPATH.\", getRmic().getLocation() );", "-        }", "-        catch (Exception ex) {", "+            throw new BuildException(\"Cannot use Kaffe rmic, as it is not \"", "+                                     + \"available.  A common solution is to \"", "+                                     + \"set the environment variable \"", "+                                     + \"JAVA_HOME or CLASSPATH.\", ", "+                                     getRmic().getLocation() );", "+        } catch (Exception ex) {", "-                throw new BuildException(\"Error starting Kaffe rmic: \", ex, getRmic().getLocation());", "+                throw new BuildException(\"Error starting Kaffe rmic: \", ", "+                                         ex, getRmic().getLocation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "daf426996399a4b72ee06682a2e66d1d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/compilers/Kjc.java", "commitBeforeChange": "d91fdceaa60b70502667049c3156197ab14908f0", "commitAfterChange": "d95bfb6e605b1eefc16889b9dfdf081072c82e51", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public boolean execute() throws BuildException", "signatureAfterChange": "      public boolean execute() throws BuildException", "diff": ["-            Boolean ok = (Boolean)compile.invoke(null,", "-                                                 new Object[] {cmd.getArguments()});", "+            Boolean ok = ", "+                (Boolean)compile.invoke(null, ", "+                                        new Object[] {cmd.getArguments()});", "-            throw new BuildException(\"Cannot use kjc compiler, as it is not available\"+", "-                                     \" A common solution is to set the environment variable\"+", "-                                     \" CLASSPATH to your kjc archive (kjc.jar).\", location);", "+            throw new BuildException(\"Cannot use kjc compiler, as it is not \"", "+                                     + \"available. A common solution is to \"", "+                                     + \"set the environment variable CLASSPATH \"", "+                                     + \"to your kjc archive (kjc.jar).\", ", "+                                     location);", "-                throw new BuildException(\"Error starting kjc compiler: \", ex, location);", "+                throw new BuildException(\"Error starting kjc compiler: \", ", "+                                         ex, location);"]}]}
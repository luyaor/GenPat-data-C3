{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b6125fae9b2b4706ed632cbb1225e90e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4094abc8fd14bbc356c94c8b93a318c5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/ExecTaskTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testspawn()", "signatureAfterChange": "      @Test     public void testspawn() throws InterruptedException", "diff": ["-    public void testspawn() {", "-        project.executeTarget(\"setUp\");", "-        if (project.getProperty(\"test.can.run\") == null) {", "-            return;", "-        }", "+    @Test", "+    public void testspawn() throws InterruptedException {", "+        buildRule.getProject().executeTarget(\"setUp\");", "+        Assume.assumeNotNull(buildRule.getProject().getProperty(\"test.can.run\"));", "-        logFile = FILE_UTILS.createTempFile(\"spawn\", \"log\", getOutputDir(), false, false);", "+        logFile = FILE_UTILS.createTempFile(\"spawn\", \"log\", new File(buildRule.getProject().getProperty(\"output\")),", "+                false, false);", "-            try {", "-                Thread.sleep(10);", "-            } catch (InterruptedException e) {", "-                System.out.println(\"my sleep was interrupted\");", "-            }", "+            Thread.sleep(10);", "-        try {", "-            Thread.sleep((TIME_TO_WAIT) * 1000 + SECURITY_MARGIN);", "-        } catch (InterruptedException e) {", "-            System.out.println(\"my sleep was interrupted\");", "-        }", "+        Thread.sleep((TIME_TO_WAIT) * 1000 + SECURITY_MARGIN);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e47090d9a903746acb93dd17b12326db", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/XMLCatalogTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 13, "signatureBeforeChange": "      public void testClasspath()", "signatureAfterChange": "      @Test     public void testClasspath() throws IOException, TransformerException, SAXException", "diff": ["-    public void testClasspath() {", "+    @Test", "+    public void testClasspath() throws IOException, TransformerException, SAXException {", "-        try {", "-            InputSource result = catalog.resolveEntity(publicId,", "-                                                       \"nap:chemical+brothers\");", "-            assertNotNull(result);", "-            String resultStr = new URL(result.getSystemId()).getFile();", "-            assertTrue(toURLString(dtdFile).endsWith(resultStr));", "-        } catch (Exception e) {", "-            fail(\"resolveEntity() failed!\" + e.toString());", "-        }", "+        InputSource isResult = catalog.resolveEntity(publicId,", "+                                                   \"nap:chemical+brothers\");", "+        assertNotNull(isResult);", "+        String resultStr1 = new URL(isResult.getSystemId()).getFile();", "+        assertTrue(toURLString(dtdFile).endsWith(resultStr1));", "-        try {", "-            Source result = catalog.resolve(uri, null);", "-            assertNotNull(result);", "-            String resultStr = new URL(result.getSystemId()).getFile();", "-            assertTrue(toURLString(xmlFile).endsWith(resultStr));", "-        } catch (Exception e) {", "-            fail(\"resolve() failed!\" + e.toString());", "-        }", "+        Source result = catalog.resolve(uri, null);", "+        assertNotNull(result);", "+        String resultStr = new URL(result.getSystemId()).getFile();", "+        assertTrue(toURLString(xmlFile).endsWith(resultStr));", "+"]}]}
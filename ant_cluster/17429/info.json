{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d4a05718c68f73c40f273c50b84695cd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92055a4fa553703aae9830cd9b6bb283", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Replace.java", "commitBeforeChange": "4b56e099f28c2e7d47cf2408b07f97e6ede696fa", "commitAfterChange": "f8f5fb01a4adbd7eabedad2c9e06fc5ce6c4525f", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private void processFile(File src) throws BuildException", "signatureAfterChange": "     private void processFile(File src) throws BuildException", "diff": ["-            int fileLength = (int)(src.length());", "-            char[] tmpBuf = new char[fileLength];", "-            int numread = 0;", "+            //   size of work buffer may be bigger than needed", "+            //   when multibyte characters exist in the source file", "+            int fileLengthInBytes = (int)(src.length());", "+            char[] tmpBuf = new char[fileLengthInBytes];", "+            int readChar = 0;", "-            while (numread != -1 && totread < fileLength) {", "-                numread = br.read(tmpBuf,totread,fileLength);", "-                totread += numread;", "+            while (true) {", "+                readChar = br.read();", "+                if (readChar < 0) { break; }", "+                tmpBuf[totread] = (char)readChar;", "+                totread++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf67eabff50e02f7ecfcc6d31f4e3560", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/Frame.java", "commitBeforeChange": "65b70febb53b077317c4d678291f9af547c3d116", "commitAfterChange": "f9d1c1691c7e9d80b793f5178f6113c949fc2441", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 48, "signatureBeforeChange": "     private void determineBaseDir() throws ExecutionException", "signatureAfterChange": "     private void determineBaseDir() throws AntException", "diff": ["-    private void determineBaseDir() throws ExecutionException {", "+    private void determineBaseDir() throws AntException {", "-            baseDir", "-                 = new File(getDataValue(MagicProperties.BASEDIR).toString());", "+            String baseDirString", "+                = getDataValue(MagicProperties.BASEDIR).toString();", "+            setBaseDir(new File(baseDirString));", "-                    baseDir = projectFileParent;", "+                    setBaseDir(projectFileParent);", "-                    baseDir = fileUtils.resolveFile(projectFileParent, base);", "+                    setBaseDir(fileUtils.resolveFile(projectFileParent, base));", "-                baseDir = new File(\".\");", "+                setBaseDir(new File(\".\"));", "-        setDataValue(MagicProperties.BASEDIR, baseDir.getAbsolutePath(), true);"]}]}
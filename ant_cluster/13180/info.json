{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "184787f786ec61e82cfe01a3136f7c3a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9ba3fd41b89c27f8c2ac9ab4c081b53", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Untar.java", "commitBeforeChange": "2c8c53f98ad69042c3ecb1dbbb6844c8a7cc4020", "commitAfterChange": "0fce1960afecacee4b489ab8c403653e3171ac01", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+", "+        Method setLastModified = null;", "+        Long[] times = null;", "+        // 1.0 is ruled out anyway, so this ensures 1.2 or above", "+        if (project.getJavaVersion() != Project.JAVA_1_1) {", "+            try {", "+                setLastModified = ", "+                    java.io.File.class.getMethod(\"setLastModified\", ", "+                                                 new Class[] {Long.TYPE});", "+", "+                times = new Long[1];", "+            } catch (Exception e) {", "+                project.log(\"File.setLastModified(long) not found\",", "+                            Project.MSG_VERBOSE);", "+            }", "+        }", "+                    ", "-                } catch( FileNotFoundException ex ) {", "-                    System.out.println(\"FileNotFoundException: \" +  te.getName()  );", "+", "+                    if (setLastModified != null) {", "+                        times[0] = new Long(te.getModTime().getTime());", "+                        try {", "+                            setLastModified.invoke(f, times);", "+                        } catch (Exception e) {", "+                            project.log(\"cannot invoke File.setLastModified(long)\",", "+                                        Project.MSG_VERBOSE);", "+                            setLastModified = null;", "+                        }", "+                    }", "+", "+                } catch(FileNotFoundException ex) {", "+                    project.log(\"FileNotFoundException: \" + te.getName(),", "+                                Project.MSG_WARN);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7dcd522419951368fedb4fae44f82ac", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "616fc9850d475bb426b01f957e9559c000c619e6", "commitAfterChange": "f2078ba20bea6666d82c9572e1626b55fdd55426", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "          public void run()", "signatureAfterChange": "          public void run()", "diff": ["-        res.addListener(this);", "+        res.addListener(wrapListener(this));", "-            res.addListener((TestListener) formatters.elementAt(i));", "+            res.addListener(wrapListener((TestListener) formatters.elementAt(i)));", "+                Class junit4TestAdapterClass = null;", "+                // Note that checking for JDK 5 directly won't work; under JDK 4, this will already have failed.", "+                try {", "+                    if (loader == null) {", "+                        junit4TestAdapterClass = Class.forName(\"junit.framework.JUnit4TestAdapter\");", "+                    } else {", "+                        junit4TestAdapterClass = Class.forName(\"junit.framework.JUnit4TestAdapter\", true, loader);", "+                    }", "+                } catch (ClassNotFoundException e) {", "+                    // OK, fall back to JUnit 3.", "+                }", "+                junit4 = junit4TestAdapterClass != null;", "+", "-                Method suiteMethod = null;", "-                try {", "-                    // check if there is a suite method", "-                    suiteMethod = testClass.getMethod(\"suite\", new Class[0]);", "-                } catch (NoSuchMethodException e) {", "-                    // no appropriate suite method found. We don't report any", "-                    // error here since it might be perfectly normal.", "-                }", "-                if (suiteMethod != null) {", "-                    // if there is a suite method available, then try", "-                    // to extract the suite from it. If there is an error", "-                    // here it will be caught below and reported.", "-                    suite = (Test) suiteMethod.invoke(null, new Class[0]);", "+                if (junit4) {", "+                    // Let's use it!", "+                    suite = (Test) junit4TestAdapterClass.getConstructor(new Class[] {Class.class}).", "+                            newInstance(new Object[] {testClass});", "-                    // try to extract a test suite automatically this", "-                    // will generate warnings if the class is no", "-                    // suitable Test", "-                    suite = new TestSuite(testClass);", "+                    // Use JUnit 3.", "+", "+                    Method suiteMethod = null;", "+                    try {", "+                        // check if there is a suite method", "+                        suiteMethod = testClass.getMethod(\"suite\", new Class[0]);", "+                    } catch (NoSuchMethodException e) {", "+                        // no appropriate suite method found. We don't report any", "+                        // error here since it might be perfectly normal.", "+                    }", "+                    if (suiteMethod != null) {", "+                        // if there is a suite method available, then try", "+                        // to extract the suite from it. If there is an error", "+                        // here it will be caught below and reported.", "+                        suite = (Test) suiteMethod.invoke(null, new Class[0]);", "+                    } else {", "+                        // try to extract a test suite automatically this", "+                        // will generate warnings if the class is no", "+                        // suitable Test", "+                        suite = new TestSuite(testClass);", "+                    }", "+", "-                    junitTest.setCounts(res.runCount(), res.failureCount(),", "-                                        res.errorCount());", "+                    if (junit4) {", "+                        int[] cnts = findJUnit4FailureErrorCount(res);", "+                        junitTest.setCounts(res.runCount(), cnts[0], cnts[1]);", "+                    } else {", "+                        junitTest.setCounts(res.runCount(), res.failureCount(),", "+                                res.errorCount());", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfc23296b0980c1e527465e1fa7b5981", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "89531ee35458b1c34de19d32cde979948ec4c70b", "commitAfterChange": "66676d22f4163163a8f7b567577705159d7d4d60", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void run()", "signatureAfterChange": "      public void run()", "diff": ["-        long start = System.currentTimeMillis();", "+        ByteArrayOutputStream errStrm = new ByteArrayOutputStream();", "+        systemError = new PrintStream(errStrm);", "-        fireStartTestSuite();", "-        if (exception != null) { // had an exception in the constructor", "-            for (int i = 0; i < formatters.size(); i++) {", "-                ((TestListener) formatters.elementAt(i)).addError(null,", "-                                                                  exception);", "-            }", "-            junitTest.setCounts(1, 0, 1);", "-            junitTest.setRunTime(0);", "-        } else {", "+        ByteArrayOutputStream outStrm = new ByteArrayOutputStream();", "+        systemOut = new PrintStream(outStrm);", "+        PrintStream savedOut = null;", "+        PrintStream savedErr = null;", "-            ByteArrayOutputStream errStrm = new ByteArrayOutputStream();", "-            systemError = new PrintStream(errStrm);", "-", "-            ByteArrayOutputStream outStrm = new ByteArrayOutputStream();", "-            systemOut = new PrintStream(outStrm);", "-", "-            PrintStream savedOut = null;", "-            PrintStream savedErr = null;", "-", "-            if (forked) {", "-                savedOut = System.out;", "-                savedErr = System.err;", "-                if (!showOutput) {", "-                    System.setOut(systemOut);", "-                    System.setErr(systemError);", "-                } else {", "-                    System.setOut(new PrintStream(", "-                                      new TeeOutputStream(savedOut, systemOut)", "-                                      )", "-                                  );", "-                    System.setErr(new PrintStream(", "-                                      new TeeOutputStream(savedErr,", "-                                                          systemError)", "-                                      )", "-                                  );", "-                }", "-                perm = null;", "+        if (forked) {", "+            savedOut = System.out;", "+            savedErr = System.err;", "+            if (!showOutput) {", "+                System.setOut(systemOut);", "+                System.setErr(systemError);", "-                if (perm != null) {", "-                    perm.setSecurityManager();", "-                }", "+                System.setOut(new PrintStream(", "+                                       new TeeOutputStream(savedOut, systemOut)", "+                                       )", "+                              );", "+                System.setErr(new PrintStream(", "+                                       new TeeOutputStream(savedErr,", "+                                                           systemError)", "+                                       )", "+                              );", "+            perm = null;", "+        } else {", "+            if (perm != null) {", "+                perm.setSecurityManager();", "+            }", "+        }", "+        Test suite = null;", "+        Exception exception = null;", "+", "+        try {", "-                suite.run(res);", "-            } finally {", "-                if (perm != null) {", "-                    perm.restoreSecurityManager();", "-                }", "-                if (savedOut != null) {", "-                    System.setOut(savedOut);", "-                }", "-                if (savedErr != null) {", "-                    System.setErr(savedErr);", "+                Class testClass = null;", "+                if (loader == null) {", "+                    testClass = Class.forName(junitTest.getName());", "+                } else {", "+                    testClass = Class.forName(junitTest.getName(), true, ", "+                                              loader);", "-                systemError.close();", "-                systemError = null;", "-                systemOut.close();", "-                systemOut = null;", "-                sendOutAndErr(new String(outStrm.toByteArray()),", "-                              new String(errStrm.toByteArray()));", "+                Method suiteMethod = null;", "+                try {", "+                    // check if there is a suite method", "+                    suiteMethod = testClass.getMethod(\"suite\", new Class[0]);", "+                } catch (NoSuchMethodException e) {", "+                    // no appropriate suite method found. We don't report any", "+                    // error here since it might be perfectly normal.", "+                }", "+                if (suiteMethod != null) {", "+                    // if there is a suite method available, then try", "+                    // to extract the suite from it. If there is an error", "+                    // here it will be caught below and reported.", "+                    suite = (Test) suiteMethod.invoke(null, new Class[0]);", "+                } else {", "+                    // try to extract a test suite automatically this", "+                    // will generate warnings if the class is no", "+                    // suitable Test", "+                    suite = new TestSuite(testClass);", "+                }", "-                junitTest.setCounts(res.runCount(), res.failureCount(),", "-                                    res.errorCount());", "-                junitTest.setRunTime(System.currentTimeMillis() - start);", "+            } catch (Exception e) {", "+                retCode = ERRORS;", "+                exception = e;", "+", "+            long start = System.currentTimeMillis();", "+", "+            fireStartTestSuite();", "+            if (exception != null) { // had an exception constructing suite", "+                for (int i = 0; i < formatters.size(); i++) {", "+                    ((TestListener) formatters.elementAt(i))", "+                        .addError(null, exception);", "+                }", "+                junitTest.setCounts(1, 0, 1);", "+                junitTest.setRunTime(0);", "+            } else {", "+                try {", "+                    suite.run(res);", "+                } finally {", "+                    junitTest.setCounts(res.runCount(), res.failureCount(),", "+                                        res.errorCount());", "+                    junitTest.setRunTime(System.currentTimeMillis() - start);", "+                }", "+            }", "+        } finally {", "+            if (perm != null) {", "+                perm.restoreSecurityManager();", "+            }", "+            if (savedOut != null) {", "+                System.setOut(savedOut);", "+            }", "+            if (savedErr != null) {", "+                System.setErr(savedErr);", "+            }", "+", "+            systemError.close();", "+            systemError = null;", "+            systemOut.close();", "+            systemOut = null;", "+            sendOutAndErr(new String(outStrm.toByteArray()),", "+                          new String(errStrm.toByteArray()));"]}]}
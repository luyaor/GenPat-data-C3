{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "11b64347f4488a380a4e66cb20655977", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9080f80e568a341cc76259eae50b96f8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/types/PatternSet.java", "commitBeforeChange": "1829060b863bcb631e251a2a58b7a752d60ddddb", "commitAfterChange": "432a0ae47a43a7e8c6a8c2678289b88b8aa18960", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void setExcludes( String excludes )", "signatureAfterChange": "     public void setExcludes( final String excludes )", "diff": ["-    public void setExcludes( String excludes )", "+    public void setExcludes( final String excludes )", "-        if( excludes != null && excludes.length() > 0 )", "+        final Pattern[] patterns = parsePatterns( excludes );", "+        for( int i = 0; i < patterns.length; i++ )", "-            StringTokenizer tok = new StringTokenizer( excludes, \", \", false );", "-            while( tok.hasMoreTokens() )", "-            {", "-                createExclude().setName( tok.nextToken() );", "-            }", "+            addExclude( patterns[ i ] );", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5266c88fe4d52beb3cd93ce09b630b5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/types/PatternSet.java", "commitBeforeChange": "1829060b863bcb631e251a2a58b7a752d60ddddb", "commitAfterChange": "432a0ae47a43a7e8c6a8c2678289b88b8aa18960", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void setExcludes( String excludes )", "signatureAfterChange": "     public void setExcludes( final String excludes )", "diff": ["-    public void setExcludes( String excludes )", "+    public void setExcludes( final String excludes )", "-        if( excludes != null && excludes.length() > 0 )", "+        final Pattern[] patterns = parsePatterns( excludes );", "+        for( int i = 0; i < patterns.length; i++ )", "-            StringTokenizer tok = new StringTokenizer( excludes, \", \", false );", "-            while( tok.hasMoreTokens() )", "-            {", "-                createExclude().setName( tok.nextToken() );", "-            }", "+            addExclude( patterns[ i ] );", "-    }"]}]}
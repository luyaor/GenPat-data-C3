{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "114d81297ec22c894537637338c707d4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ae7fd9c18ec2a0f2d881e7766078292", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "587a3c4f5ef9a0effe4e1065ac7500e1e6987018", "commitAfterChange": "f504cf793e6d72308577e1dc86c7bed47d65de12", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 93, "signatureBeforeChange": "          public long skip(long n) throws IOException", "signatureAfterChange": "      protected void scan(File srcDir, String vpath, Vector pkgs)", "diff": ["-", "-        public long skip(long n) throws IOException {", "-            for (long i = 0; i < n; i++) {", "-                if (in.read() == -1) return i;", "-            }", "-            return n;", "-        }", "+    protected void scan(File srcDir, String vpath, Vector pkgs) {", "+    \tfoundJavaFile = false;", "+    \tFile dir = new File(srcDir, vpath);", "+    \t", "+    \tif (!dir.isDirectory()) {", "+    \t\treturn;", "+    \t}", "+    ", "+    \tString[] files = dir.list(new FilenameFilter () {", "+    \t\t\tpublic boolean accept(File dir, String name) {", "+    \t\t\t\tif (name.endsWith(\".java\")) {", "+    \t\t\t\t\tfoundJavaFile = true;", "+    \t\t\t\t\treturn false;", "+    \t\t\t\t}", "+    \t\t\t\tFile d = new File(dir, name);", "+    \t\t\t\tif (d.isDirectory()) {", "+    \t\t\t\t\treturn true;", "+    \t\t\t\t}", "+    \t\t\t\treturn false;", "+    \t\t\t}", "+    \t\t});", "+    ", "+    \tif (foundJavaFile) {", "+    \t\tString newPkg = vpath.substring(1).replace(File.separatorChar, '.');", "+    \t\tif (!pkgs.contains(newPkg)) {", "+    \t\t\tpkgs.add(newPkg);", "+    \t\t}", "+    \t}", "+    \t", "+    \tfor (int i=0; i<files.length; i++) {", "+    \t\tscan(srcDir, vpath + File.separator + files[i], pkgs);", "+    \t}", "+    \treturn;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64ebe05413460d81a2d96b45545dae74", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "fd2eebcccff567bb945e4712e990a06c36478ccf", "commitAfterChange": "af102bbd3d062facf9d1b393aefbc7e2c49f25a1", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 84, "signatureBeforeChange": "     private void evaluatePackages(Commandline toExecute, Path sourcePath,                                    Vector packages)", "signatureAfterChange": "     private void evaluatePackages(Commandline toExecute, Path sourcePath,                                    Vector packages)", "diff": ["+        FileSet fs = new FileSet();", "+        fs.setDefaultexcludes(useDefaultExcludes);", "+", "+        Enumeration e = packages.elements();", "+        while (e.hasMoreElements()) {", "+            String pkg = (String)e.nextElement();", "+            pkg = pkg.replace('.','/');", "+            if (pkg.endsWith(\"*\")) {", "+                pkg += \"*\";", "+            }", "+", "+            fs.createInclude().setName(pkg);", "+        } // while", "+", "-            Vector foundPackages = findPackages(source);", "+            fs.setDir(source);", "-            Enumeration e = foundPackages.elements();", "-            while (e.hasMoreElements()) {", "-                String pack = (String) e.nextElement();", "-                for (int i = 0; i < packages.size(); i++) {", "-                    if (matches(pack, (String) packages.elementAt(i))) {", "-                        if (!addedPackages.contains(pack)) {", "-                            toExecute.createArgument().setValue(pack);", "-                            addedPackages.addElement(pack);", "+            DirectoryScanner ds = fs.getDirectoryScanner(project);", "+            String[] packageDirs = ds.getIncludedDirectories();", "+", "+            for (int i=0; i<packageDirs.length; i++) {", "+                File pd = new File(source, packageDirs[i]);", "+                String[] files = pd.list(new FilenameFilter () {", "+                    public boolean accept(File dir1, String name) {", "+                        if (name.endsWith(\".java\")) {", "+                            return true;", "-                        break;", "+                        return false;\t// ignore dirs", "+                    }", "+                });", "+", "+                if (files.length > 0) {", "+                    String pkgDir = packageDirs[i].replace('/','.').replace('\\\\','.');", "+                    if (!addedPackages.contains(pkgDir)) {", "+                        toExecute.createArgument().setValue(pkgDir);", "+                        addedPackages.addElement(pkgDir);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ead6616c093b6737ae697fb134eae128", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "cb2df57502298cff2dc5355d58e529e8afcb4796", "commitAfterChange": "df121a6cf559a17a573a5795d7c7daa0cd37be37", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void processArgs(String[] args)", "signatureAfterChange": "     private void processArgs(String[] args)", "diff": ["+        boolean searchForFile = false;", "+                searchForFile = true;", "-                } else {", "-                    searchForThis = DEFAULT_BUILD_FILENAME;", "-            if (searchForThis != null) {", "-                buildFile = findBuildFile(System.getProperty(\"user.dir\"),", "-                                          searchForThis);", "+            if (searchForFile) {", "+                if (searchForThis != null) {", "+                    buildFile = findBuildFile(System.getProperty(\"user.dir\"), searchForThis);", "+                    if (buildFile == null) {", "+                        throw new BuildException(\"Could not locate a build file!\");", "+                    }", "+                } else {", "+                    // no search file specified: so search an existing default file", "+                    Iterator it = ProjectHelperRepository.getInstance().getHelpers();", "+                    do {", "+                        ProjectHelper helper = (ProjectHelper) it.next();", "+                        searchForThis = helper.getDefaultBuildFile();", "+                        if (msgOutputLevel >= Project.MSG_VERBOSE) {", "+                            System.out.println(\"Searching the default build file: \" + searchForThis);", "+                        }", "+                        buildFile = findBuildFile(System.getProperty(\"user.dir\"), searchForThis);", "+                    } while (buildFile == null && it.hasNext());", "+                    if (buildFile == null) {", "+                        throw new BuildException(\"Could not locate a build file!\");", "+                    }", "+                }", "-                buildFile = new File(DEFAULT_BUILD_FILENAME);", "+                // no build file specified: so search an existing default file", "+                Iterator it = ProjectHelperRepository.getInstance().getHelpers();", "+                do {", "+                    ProjectHelper helper = (ProjectHelper) it.next();", "+                    buildFile = new File(helper.getDefaultBuildFile());", "+                    if (msgOutputLevel >= Project.MSG_VERBOSE) {", "+                        System.out.println(\"Trying the default build file: \" + buildFile);", "+                    }", "+                } while (!buildFile.exists() && it.hasNext());"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "82578a2a00c99e2d73796cf37bc55ba1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "244729996ef05c6c9fdaa6bd5c01047c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/builder/DefaultProjectBuilder.java", "commitBeforeChange": "e2cc34fa963ffa74a7e6dc7fa60d8ba32042b83c", "commitAfterChange": "7b867a10d26f96911855430e79c668df0e053cef", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected void buildTopLevelProject( final DefaultProject project,                                          final Configuration configuration )         throws Exception", "signatureAfterChange": "     private void buildTopLevelProject( final DefaultProject project,                                        final Configuration configuration,                                        final HashMap projects )         throws Exception", "diff": ["-    protected void buildTopLevelProject( final DefaultProject project,", "-                                         final Configuration configuration )", "+    private void buildTopLevelProject( final DefaultProject project,", "+                                       final Configuration configuration,", "+                                       final HashMap projects )", "+        final ArrayList implicitTaskList = new ArrayList();", "+", "+        int state = PROJECT_REFERENCES;", "-            //handle individual elements", "+            if( PROJECT_REFERENCES == state )", "+            {", "+                if( name.equals( \"projectref\" ) )", "+                {", "+                    buildProjectRef( project, element, projects );", "+                    continue;", "+                }", "+                else", "+                {", "+                    state = LIBRARY_IMPORTS;", "+                }", "+            }", "+", "+            if( LIBRARY_IMPORTS == state )", "+            {", "+                if( name.equals( \"import\" ) )", "+                {", "+                    buildImport( project, element );", "+                    continue;", "+                }", "+                else", "+                {", "+                    state = IMPLICIT_TASKS;", "+                }", "+            }", "+", "+            if( IMPLICIT_TASKS == state )", "+            {", "+                //Check for any implicit tasks here", "+                if( !name.equals( \"target\" ) )", "+                {", "+                    implicitTaskList.add( element );", "+                    continue;", "+                }", "+                else", "+                {", "+                    state = TARGETS;", "+                }", "+            }", "+", "-            else if( name.equals( \"property\" ) ) buildImplicitTask( project, element );", "-                                        \" at \" + element.getLocation() );", "+                                     \" at \" + element.getLocation() +", "+                                     \". Expecting target\" );", "+", "+        final Configuration[] implicitTasks =", "+            (Configuration[])implicitTaskList.toArray( new Configuration[ 0 ] );", "+", "+        final Target implicitTarget = new Target( null, implicitTasks, null );", "+        project.setImplicitTarget( implicitTarget );", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c3d853f7f909a1faf2f905a48176cfa", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Touch.java", "commitBeforeChange": "af90534b7bdb9ebae1b379b7f8e8971bca89ad13", "commitAfterChange": "ab8b8ef56641361215a1e445917ac8a4345a556d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+                /*", "+                 * The initial version used DateFormat.SHORT for the", "+                 * time format, which ignores seconds.  If we want", "+                 * seconds as well, we need DateFormat.MEDIUM, which", "+                 * in turn would break all old build files.", "+                 *", "+                 * First try to parse with DateFormat.SHORT and if", "+                 * that fails with MEDIUM - throw an exception if both", "+                 * fail.", "+                 */", "-                    if (millis < 0) {", "-                        throw new BuildException(\"Date of \" + dateTime", "-                                                 + \" results in negative \"", "-                                                 + \"milliseconds value \"", "-                                                 + \"relative to epoch \"", "-                                                 + \"(January 1, 1970, \"", "-                                                 + \"00:00:00 GMT).\");", "-                    }", "-                    throw new BuildException(pe.getMessage(), pe, getLocation());", "+                    df = ", "+                        DateFormat.getDateTimeInstance(DateFormat.SHORT,", "+                                                       DateFormat.MEDIUM,", "+                                                       Locale.US);", "+                    try {", "+                        setMillis(df.parse(dateTime).getTime());", "+                    } catch (ParseException pe2) {", "+                        throw new BuildException(pe2.getMessage(), pe, ", "+                                                 getLocation());", "+                    }", "+                }", "+", "+                if (millis < 0) {", "+                    throw new BuildException(\"Date of \" + dateTime", "+                                             + \" results in negative \"", "+                                             + \"milliseconds value \"", "+                                             + \"relative to epoch \"", "+                                             + \"(January 1, 1970, \"", "+                                             + \"00:00:00 GMT).\");"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c7bd148a48965049c6b3898cbf42842a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5184585bf364ed8b8390a32746a57c78", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/antlib/src/main/org/apache/tools/ant/taskdefs/Antlib.java", "commitBeforeChange": "1d2784e6d5429505b3b420e342992c22cd5373a6", "commitAfterChange": "6252354506953777f5b921b8746a54e7d317475a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 33, "signatureBeforeChange": "  \tprivate Class loadClass(String className) \t    throws SAXParseException", "signatureAfterChange": "          private Class loadClass(String className)             throws SAXParseException", "diff": ["-", "-\tprivate Class loadClass(String className)", "-\t    throws SAXParseException {", "-\t    try {", "-\t\t//load the named class", "-\t\tClass cls;", "-\t\tif(classloader==null) {", "-\t\t    cls=Class.forName(className);", "-\t\t}", "-\t\telse {", "-\t\t    cls=classloader.loadClass(className);", "-\t\t}", "-\t\treturn cls;", "-\t    }", "-\t    catch (ClassNotFoundException cnfe) {", "-\t\tString msg = \"Class \" + className +", "-\t\t    \" cannot be found\";", "-\t\tthrow new SAXParseException(msg, locator, cnfe);", "-\t    }", "-\t    catch (NoClassDefFoundError ncdfe) {", "-\t\tString msg = \"Class \" + className +", "-\t\t    \" cannot be found\";", "-\t\tthrow new SAXParseException(msg, locator);", "-\t    }", "-\t}", "+        private Class loadClass(String className)", "+            throws SAXParseException {", "+            String msg = null;", "+            try {", "+                //load the named class", "+                Class cls;", "+                if(classloader==null) {", "+                    cls=Class.forName(className);", "+                }", "+                else {", "+                    cls=classloader.loadClass(className);", "+                }", "+                return cls;", "+            }", "+            catch (ClassNotFoundException cnfe) {", "+                msg = \"Class \" + className + \" cannot be found\";", "+                if (onerror.getIndex() == FAIL)", "+                    throw new SAXParseException(msg, locator, cnfe);", "+            }", "+            catch (NoClassDefFoundError ncdfe) {", "+                msg = \"Class \" + className + \" cannot be loaded\";", "+                if (onerror.getIndex() == FAIL)", "+                    throw new SAXParseException(msg, locator);", "+            }", "+", "+            if (onerror.getIndex() == REPORT) {", "+                project.log(msg, project.MSG_WARN);", "+            }", "+            else {", "+                project.log(msg, project.MSG_DEBUG);", "+            }", "+            return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82a083de9a5ab400ec3123b85c2f27f9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "2e6482b287ca240581633145f270a8706b82c34e", "commitAfterChange": "57f5357a1ca7f0208c1e7a2ee791e837935d6645", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private void checkIncludePatterns()", "signatureAfterChange": "     private void checkIncludePatterns()", "diff": ["-            boolean hasParent=false;", "+            boolean hasParent = false;", "+            // logically, there should be at most one child pattern present", "+            // let's use a vector though to be sure", "+            Vector vdelete = new Vector();", "-                String existingpattern= (String) myenum.nextElement();", "+                String existingpattern = (String) myenum.nextElement();", "+                // check whether the existing pattern is a child of the new pattern", "+                if (existingpattern.length() >= newpattern.length()) {", "+                    if (existingpattern.indexOf(newpattern) == 0) {", "+                        vdelete.add(existingpattern);", "+                    }", "+                }", "+                // check whether the new pattern is a child of the existing pattern", "-                    if (newpattern.indexOf(existingpattern)==0) {", "-                        hasParent=true;", "+                    if (newpattern.indexOf(existingpattern) == 0) {", "+                        hasParent = true;", "+                        break;", "+            // add the new pattern if does not have parents", "-                newroots.put(newpattern,includes[icounter]);", "+                newroots.put(newpattern, includes[icounter]);", "+                // remove child patterns", "+                for (int icounter2 = 0; icounter2 < vdelete.size(); icounter2++) {", "+                    newroots.remove(vdelete.elementAt(icounter2));", "+                }", "-            File myfile=new File(basedir, currentelement);", "+            File myfile = new File(basedir, currentelement);", "-                    if (isIncluded(currentelement) ", "-                        && currentelement.length()>0) {", "-                        accountForIncludedDir(currentelement,myfile,true);", "+                    if (isIncluded(currentelement)", "+                        && currentelement.length() > 0) {", "+                        accountForIncludedDir(currentelement, myfile, true);", "-                            if (currentelement.charAt(currentelement.length()", "-                                                      -1 ) ", "+                            if (currentelement.charAt(currentelement.length()-1)", "-                    String originalpattern= ", "+                    String originalpattern =", "-                        accountForIncludedFile(currentelement,myfile);", "+                        accountForIncludedFile(currentelement, myfile);"]}]}
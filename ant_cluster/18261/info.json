{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0644b18936d98c1f18c7e15d1194a46f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "345cf743609ef6197e51b76856233386", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/cli/org/apache/ant/cli/DefaultLogger.java", "commitBeforeChange": "e0fef5cf64773a98734998b9736ded96fc8be2c7", "commitAfterChange": "81c17b6164451315e24ae774f1bed668cbca99ce", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void processBuildEvent(BuildEvent event)", "signatureAfterChange": "     public void messageLogged(BuildEvent event)", "diff": ["-    public void processBuildEvent(BuildEvent event) {", "-        switch (event.getEventType()) {", "-            case BuildEvent.BUILD_STARTED:", "-                startTime = System.currentTimeMillis();", "-                break;", "-            case BuildEvent.BUILD_FINISHED:", "-                Throwable cause = event.getCause();", "-                if (cause == null) {", "-                    out.println(lSep + \"BUILD SUCCESSFUL\");", "-                } else {", "-                    err.println(lSep + \"BUILD FAILED\" + lSep);", "-                    reportException(cause);", "-                }", "-                out.println(lSep + \"Total time: \"", "-                     + formatTime(System.currentTimeMillis() - startTime));", "-                break;", "-            case BuildEvent.TARGET_STARTED:", "-                if (MessageLevel.MSG_INFO <= messageOutputLevel) {", "-                    Target target = (Target)event.getSource();", "-                    out.println(lSep + target.getName() + \":\");", "-                }", "-                break;", "-            case BuildEvent.TARGET_FINISHED:", "-                break;", "-            case BuildEvent.TASK_STARTED:", "-                break;", "-            case BuildEvent.TASK_FINISHED:", "-                break;", "-            case BuildEvent.MESSAGE:", "-                PrintStream logTo", "-                     = event.getPriority() == MessageLevel.MSG_ERR ? err : out;", "-                // Filter out messages based on priority", "-                if (event.getPriority() <= messageOutputLevel", "-                     && event.getSource() instanceof BuildElement) {", "-                    // Print out the name of the task if we're in one", "-                    BuildElement buildElement", "-                         = (BuildElement)event.getSource();", "-                    String name = buildElement.getType();", "-                    if (!emacsMode) {", "-                        String msg = \"[\" + name + \"] \";", "-                        int indentSize = LEFT_COLUMN_SIZE - msg.length();", "-                        for (int i = 0; i < indentSize; i++) {", "-                            logTo.print(\" \");", "-                        }", "-                        logTo.print(msg);", "-                    }", "-", "-                    // Print the message", "-                    logTo.println(event.getMessage());", "-                }", "-                break;", "-            default:", "-                err.println(\"Unrecognized event type = \" +", "-                    event.getEventType());", "-                break;", "+     */", "+    public void messageLogged(BuildEvent event) {", "+        PrintStream logTo", "+             = event.getPriority() == MessageLevel.MSG_ERR ? err : out;", "+", "+        // Filter out messages based on priority", "+        if (event.getPriority() <= messageOutputLevel ", "+            && event.getModelElement() instanceof BuildElement) {", "+            // Print out the name of the task if we're in one", "+            BuildElement buildElement", "+                 = (BuildElement)event.getModelElement();", "+            String name = buildElement.getType();", "+", "+            if (!emacsMode) {", "+                String msg = \"[\" + name + \"] \";", "+                int indentSize = LEFT_COLUMN_SIZE - msg.length();", "+                for (int i = 0; i < indentSize; i++) {", "+                    logTo.print(\" \");", "+                }", "+                logTo.print(msg);", "+            }", "+", "+            // Print the message", "+            logTo.println(event.getMessage());", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cbc20070baf17927a0cb1f90167010c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/compilers/Jikes.java", "commitBeforeChange": "1266e53bd199e68ea11ce1bcf38b58d8fc1ea0a1", "commitAfterChange": "3ef74849efee36e856e6a1a37199a13ee15499a6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public boolean execute() throws BuildException", "signatureAfterChange": "     public boolean execute() throws BuildException", "diff": ["+        addPropertyParams(cmd);", "+", "+        if (attributes.getSource() != null) {", "+            cmd.createArgument().setValue(\"-source\");", "+            String source = attributes.getSource();", "+            if (source.equals(\"1.1\") || source.equals(\"1.2\")) {", "+                // support for -source 1.1 and -source 1.2 has been", "+                // added with JDK 1.4.2, Jikes doesn't like it", "+                attributes.log(\"Jikes doesn't support '-source \" + source", "+                        + \"', will use '-source 1.3' instead\");", "+                cmd.createArgument().setValue(\"1.3\");", "+            } else {", "+                cmd.createArgument().setValue(source);", "+            }", "+        }", "+        addCurrentCompilerArgs(cmd);", "+", "+        int firstFileName = cmd.size();", "+", "+        Path boot = getBootClassPath();", "+        if (boot.size() > 0) {", "+            cmd.createArgument().setValue(\"-bootclasspath\");", "+            cmd.createArgument().setPath(boot);", "+        }", "+        logAndAddFilesToCompile(cmd);", "+", "+        return executeExternalCompile(cmd.getCommandline(), firstFileName) == 0;", "+    }", "-", "-        if (attributes.getSource() != null) {", "-            cmd.createArgument().setValue(\"-source\");", "-            String source = attributes.getSource();", "-            if (source.equals(\"1.1\") || source.equals(\"1.2\")) {", "-                // support for -source 1.1 and -source 1.2 has been", "-                // added with JDK 1.4.2, Jikes doesn't like it", "-                attributes.log(\"Jikes doesn't support '-source \" + source", "-                        + \"', will use '-source 1.3' instead\");", "-                cmd.createArgument().setValue(\"1.3\");", "-            } else {", "-                cmd.createArgument().setValue(source);", "-            }", "-        }", "-        addCurrentCompilerArgs(cmd);", "-", "-        int firstFileName = cmd.size();", "-", "-        Path boot = getBootClassPath();", "-        if (boot.size() > 0) {", "-            cmd.createArgument().setValue(\"-bootclasspath\");", "-            cmd.createArgument().setPath(boot);", "-        }", "-        logAndAddFilesToCompile(cmd);", "-", "-        return executeExternalCompile(cmd.getCommandline(), firstFileName) == 0;"]}]}
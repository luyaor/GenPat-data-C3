{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "703ae307c1322059f6637fcbce7d9564", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6446362d6e928111e937e589ba4767fc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/starteam/StarTeamCheckout.java", "commitBeforeChange": "08084b4e5c26211fb4fb4335d175f1e9c33be1bf", "commitAfterChange": "2f7478b5c436752b32f6f6ad1e3eefefd9018149", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": "     protected void testPreconditions() throws BuildException", "signatureAfterChange": "     protected void testPreconditions() throws BuildException", "diff": ["-        if (lockStatus != Item.LockType.UNCHANGED && null != getLabel()) {", "-            log(\"Neither locked nor unlocked may be true when checking out a labeled version.\", ", "-                Project.MSG_ERR);", "-            throw new BuildException(\"Lock status may not be changed when checking out a non-current version.\");", "+        if (lockStatus != Item.LockType.UNCHANGED) {", "+            boolean lockStatusBad = false;", "+            if (null != getLabel()) {", "+                log(\"Neither locked nor unlocked may be true\"", "+                    + \" when checking out a labeled version.\", ", "+                    Project.MSG_ERR);", "+                lockStatusBad = true;", "+            } else if (null != getAsOfDate()) {", "+                log(\"Neither locked nor unlocked may be true\"", "+                    + \" when checking out by date.\", ", "+                    Project.MSG_ERR);", "+                lockStatusBad = true;", "+            }", "+            if (lockStatusBad) {", "+                throw new BuildException(", "+                    \"Lock status may not be changed\"", "+                    + \" when checking out a non-current version.\");", "+            }", "+        if (null != getLabel() && null != getAsOfDate()) {", "+            throw new BuildException(", "+                \"Both label and asOfDate specified.  \"", "+                + \"Unable to process request.\");", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e817b5f458f7b5b2045d0faa6ea19330", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Java.java", "commitBeforeChange": "39e82431e7d1e46a8b4d7f8b20babddcc53281db", "commitAfterChange": "3b3a4cd29fa515153b8ed025398ccb6da474257e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public int executeJava() throws BuildException", "signatureAfterChange": "     public int executeJava() throws BuildException", "diff": ["-", "+        if (spawn && !fork) {", "+            throw new BuildException(\"Cannot spawn a java process in non-forked mode.\"", "+                                     + \" Please set fork='true'. \");", "+        }", "+        if (spawn && incompatibleWithSpawn) {", "+            getProject().log(\"spawn does not allow attributes related to input, \"", "+            + \"output, error, result\", Project.MSG_ERR);", "+            getProject().log(\"spawn does not also not allow timeout\", Project.MSG_ERR);", "+            throw new BuildException(\"You have used an attribute which is \"", "+            + \"not compatible with spawn\");", "+        }", "-                return run(cmdl.getCommandline());", "+                if (!spawn) {", "+                    return run(cmdl.getCommandline());", "+                } else {", "+                    spawn(cmdl.getCommandline());", "+                    return 0;", "+                }", "+    }"]}]}
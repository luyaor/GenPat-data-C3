{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f6b3882d2a368bb69c1c2d083836d0e2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56957a3550b5d3bda6d180cc48da1be1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/XmlLogger.java", "commitBeforeChange": "0ea3777ec4ae3e34aff17dfb05d1e6c818eb5bc0", "commitAfterChange": "bdd7cc0e9751c1a7378bc59a9825e6fb5b169c71", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void targetFinished(BuildEvent event)", "signatureAfterChange": "      public void targetFinished(BuildEvent event)", "diff": ["-        long totalTime = System.currentTimeMillis() - targetStartTime;", "-        targetElement.setAttribute(TIME_ATTR, DefaultLogger.formatTime(totalTime));", "-        if (taskElement == null) {", "-            buildElement.appendChild(targetElement);", "-        } else {", "-            taskElement.appendChild(targetElement);", "-        }", "+        Target target = event.getTarget();", "+        TimedElement targetElement = (TimedElement)targets.get(target);", "+        if (targetElement != null) {", "+            long totalTime = System.currentTimeMillis() - targetElement.startTime;", "+            targetElement.element.setAttribute(TIME_ATTR, DefaultLogger.formatTime(totalTime));", "-        targetElement = null;", "-", "-        if (!targetStack.isEmpty()) {", "-            targetStartTime = ((Long) targetTimeStack.pop()).longValue();", "-            targetElement = (Element) targetStack.pop();", "+            TimedElement parentElement = null;            ", "+            Stack threadStack = getStack();", "+            if (!threadStack.empty()) {", "+                TimedElement poppedStack = (TimedElement)threadStack.pop();", "+                if (poppedStack != targetElement) {", "+                    throw new RuntimeException(\"Mismatch - popped element = \" + poppedStack.element +", "+                    \" finished task element = \" + targetElement.element);", "+                }                                           ", "+                if (!threadStack.empty()) {", "+                    parentElement = (TimedElement)threadStack.peek();", "+                }", "+            }", "+            if (parentElement == null) {", "+                buildElement.element.appendChild(targetElement.element);", "+            }", "+            else {                ", "+                parentElement.element.appendChild(targetElement.element);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7021e831d474ebdfde6d41e9a190d76", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/XmlLogger.java", "commitBeforeChange": "0ea3777ec4ae3e34aff17dfb05d1e6c818eb5bc0", "commitAfterChange": "bdd7cc0e9751c1a7378bc59a9825e6fb5b169c71", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public void taskFinished(BuildEvent event)", "signatureAfterChange": "      public void taskFinished(BuildEvent event)", "diff": ["-        long totalTime = System.currentTimeMillis() - taskStartTime;", "-        taskElement.setAttribute(TIME_ATTR, DefaultLogger.formatTime(totalTime));", "-        targetElement.appendChild(taskElement);", "-", "-        taskElement = null;", "-        if (!taskStack.isEmpty()) {", "-            taskStartTime = ((Long) taskTimeStack.pop()).longValue();", "-            taskElement = (Element) taskStack.pop();", "+        Task task = event.getTask();", "+        TimedElement taskElement = (TimedElement)tasks.get(task);", "+        if (taskElement != null) {", "+            long totalTime = System.currentTimeMillis() - taskElement.startTime;", "+            taskElement.element.setAttribute(TIME_ATTR, DefaultLogger.formatTime(totalTime));", "+            Target target = task.getOwningTarget();", "+            TimedElement targetElement = (TimedElement)targets.get(target);", "+            if (targetElement == null) {", "+                buildElement.element.appendChild(taskElement.element);", "+            }", "+            else {", "+                targetElement.element.appendChild(taskElement.element);", "+            }", "+            Stack threadStack = getStack();", "+            if (!threadStack.empty()) {", "+                TimedElement poppedStack = (TimedElement)threadStack.pop();", "+                if (poppedStack != taskElement) {", "+                    throw new RuntimeException(\"Mismatch - popped element = \" + poppedStack.element +", "+                    \" finished task element = \" + taskElement.element);", "+                }                                           ", "+            }"]}]}
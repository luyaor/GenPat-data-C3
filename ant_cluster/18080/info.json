{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "874ad821283cda92f065dd0561177b6f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1abe8150933b30a6e222d4b4f87afe0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/image/Image.java", "commitBeforeChange": "26839fdb3234b8344a313d1bee71aff8494b3842", "commitAfterChange": "541157c5de95bf1cb2ff9f47b8aadac0b3ee98e1", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            DirectoryScanner ds = null;", "-            String[] files = null;", "-            ArrayList filesList = new ArrayList();", "+            File dest = destDir != null ? destDir : srcDir;", "+", "+            int writeCount = 0;", "+", "+            // build mapper", "+            final FileNameMapper mapper;", "+            if (mapperElement==null){", "+                mapper = new IdentityMapper();", "+            } else {", "+                mapper = mapperElement.getImplementation();", "+            }", "-                ds = super.getDirectoryScanner(srcDir);", "+                final DirectoryScanner ds = super.getDirectoryScanner(srcDir);", "-                files = ds.getIncludedFiles();", "-                for (int i = 0; i < files.length; i++) {", "-                    filesList.add(new File(srcDir, files[i]));", "-                }", "+                final String[] files = ds.getIncludedFiles();", "+                writeCount += processDir(srcDir, files, dest, mapper);", "-                FileSet fs = (FileSet) filesets.elementAt(i);", "-                ds = fs.getDirectoryScanner(getProject());", "-                files = ds.getIncludedFiles();", "-                File fromDir = fs.getDir(getProject());", "-                for (int j = 0; j < files.length; j++) {", "-                    filesList.add(new File(fromDir, files[j]));", "-                }", "+                final FileSet fs = (FileSet) filesets.elementAt(i);", "+                final DirectoryScanner ds =", "+                    fs.getDirectoryScanner(getProject());", "+                final String[] files = ds.getIncludedFiles();", "+                final File fromDir = fs.getDir(getProject());", "+                writeCount += processDir(fromDir, files, dest, mapper);", "-            if (!overwrite) {", "-                // remove any files that shouldn't be overwritten.", "-                ArrayList filesToRemove = new ArrayList();", "-                for (Iterator i = filesList.iterator(); i.hasNext();) {", "-                    File f = (File) i.next();", "-                    File newFile = new File(destDir, f.getName());", "-                    if (newFile.exists()) {", "-                        filesToRemove.add(f);", "-                    }", "-                }", "-                filesList.removeAll(filesToRemove);", "-            }", "-            // iterator through all the files and process them.", "-            for (Iterator i = filesList.iterator(); i.hasNext();) {", "-                File file = (File) i.next();", "-                processFile(file);", "-                if (garbage_collect) {", "-                    System.gc();", "-                }", "+            if (writeCount>0){", "+                log(\"Processed \" + writeCount +", "+                    (writeCount == 1 ? \" image.\" : \" images.\"));", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe3073ac267aa6c0eff2a53888fdcb42", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ExecutionManager.java", "commitBeforeChange": "7499c443d67445ea8fd0b8f4bd56c72251b18bf4", "commitAfterChange": "b7e43ad8c5906ae2b6d6b42f8b2715dc7d2e7a16", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public ExecutionManager(InitConfig initConfig)          throws ConfigException", "signatureAfterChange": "     public ExecutionManager(InitConfig initConfig, AntConfig config)          throws ConfigException", "diff": ["-    public ExecutionManager(InitConfig initConfig)", "+    public ExecutionManager(InitConfig initConfig, AntConfig config)", "-        Map librarySpecs = new HashMap();", "+        this.config = config;", "+        this.initConfig = initConfig;", "-        AntConfig userConfig = getAntConfig(initConfig.getUserConfigArea());", "-        AntConfig systemConfig = getAntConfig(initConfig.getSystemConfigArea());", "-", "-        AntConfig config = systemConfig;", "-        if (config == null) {", "-            config = userConfig;", "-        } else if (userConfig != null) {", "-            config.merge(userConfig);", "-        }", "-", "+        Map librarySpecs = new HashMap(10);", "-            URL taskBaseURL = new URL(initConfig.getLibraryURL(), \"antlibs\");", "-            addAntLibraries(librarySpecs, taskBaseURL);", "+            URL standardLibsURL", "+                 = new URL(initConfig.getLibraryURL(), \"antlibs/\");", "+            AntLibManager libManager", "+                 = new AntLibManager(config.isRemoteLibAllowed());", "+", "+            libManager.addAntLibraries(librarySpecs, standardLibsURL);", "+            libManager.configLibraries(initConfig, librarySpecs, antLibraries);", "+", "+            librarySpecs.clear();", "+            // add any additional libraries.", "-                // Now add in any found in the dirs specified in", "-                // the config files", "-                for (Iterator i = config.getTaskDirLocations(); i.hasNext(); ) {", "+                for (Iterator i = config.getLibraryLocations(); i.hasNext(); ) {", "-                    String taskDirString = (String)i.next();", "-                    File taskDir = new File(taskDirString);", "-                    if (!taskDir.exists()) {", "-                        URL taskDirURL = new URL(taskDirString);", "-                        addAntLibraries(librarySpecs, taskDirURL);", "-                    } else {", "-                        addAntLibraries(librarySpecs,", "-                            InitUtils.getFileURL(taskDir));", "-                    }", "+                    String libLocation = (String)i.next();", "+                    libManager.loadLib(librarySpecs, libLocation);", "+            libManager.configLibraries(initConfig, librarySpecs, antLibraries);", "-            configLibraries(initConfig, librarySpecs);", "+            addConfigLibPaths();", "-            if (config != null) {", "-                // now add any additional library Paths specified by the config", "-                for (Iterator i = config.getLibraryIds(); i.hasNext(); ) {", "-                    String libraryId = (String)i.next();", "-                    if (antLibraries.containsKey(libraryId)) {", "-                        AntLibrary antLib ", "-                            = (AntLibrary)antLibraries.get(libraryId);", "-                        List pathList = config.getLibraryPathList(libraryId);", "-                        for (Iterator j = pathList.iterator(); j.hasNext(); ) {", "-                            URL pathElementURL = (URL)j.next();", "-                            antLib.addLibraryURL(pathElementURL);", "-                        }", "-                    }", "-                }", "-            }", "-", "-            mainFrame = new ExecutionFrame(antLibraries);", "+            mainFrame = new ExecutionFrame(antLibraries, initConfig, config);"]}]}
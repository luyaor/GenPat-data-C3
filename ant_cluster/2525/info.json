{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1d41a3f323a6f7cd026d4bea6e812616", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2112a3689c05f83d47fd209266cf9345", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "d5b535aa9a9f69dcd2d0cada46e88e7f3295c084", "commitAfterChange": "f8e71b50339d8fc15bdf6813eaa91d24096817a7", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "     protected void printResults(ResultSet rs, PrintStream out)         throws SQLException", "signatureAfterChange": "     protected void printResults(ResultSet rs, PrintStream out) throws SQLException", "diff": ["-    protected void printResults(ResultSet rs, PrintStream out)", "-        throws SQLException {", "+    protected void printResults(ResultSet rs, PrintStream out) throws SQLException {", "-            StringBuffer line = new StringBuffer();", "-            if (showheaders) {", "-                for (int col = 1; col < columnCount; col++) {", "-                     line.append(md.getColumnName(col));", "-                     line.append(\",\");", "-                }", "-                line.append(md.getColumnName(columnCount));", "-                out.println(line);", "-                line = new StringBuffer();", "-            }", "-            while (rs.next()) {", "-                boolean first = true;", "-                for (int col = 1; col <= columnCount; col++) {", "-                    String columnValue = rs.getString(col);", "-                    if (columnValue != null) {", "-                        columnValue = columnValue.trim();", "+            if (columnCount > 0) {", "+                if (showheaders) {", "+                    out.print(md.getColumnName(1));", "+                    for (int col = 2; col <= columnCount; col++) {", "+                         out.write(',');", "+                         out.print(md.getColumnName(col));", "-", "-                    if (first) {", "-                        first = false;", "-                    } else {", "-                        line.append(\",\");", "-                    }", "-                    line.append(columnValue);", "+                    out.println();", "-                out.println(line);", "-                line = new StringBuffer();", "+                while (rs.next()) {", "+                    out.print(rs.getString(1));", "+                    for (int col = 2; col <= columnCount; col++) {", "+                        out.write(',');", "+                        out.print(rs.getString(col));", "+                    }", "+                    out.println();", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2d4a7ccaa3c791f56080f53c10e3420", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "3e919cffbef3ed88a7920a9e79c1b355524b3403", "commitAfterChange": "139cee57f7f134a2ac8b80776790d7129c24685f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 54, "signatureBeforeChange": "                              Object create(                                 Project project, Object parent, Object child)                                 throws InvocationTargetException,                                 IllegalAccessException, InstantiationException", "signatureAfterChange": "          Object create(Project project, Object parent, Object child)                 throws InvocationTargetException,                 IllegalAccessException, InstantiationException", "diff": ["-", "-                            Object create(", "-                                Project project, Object parent, Object child)", "-                                throws InvocationTargetException,", "-                                IllegalAccessException, InstantiationException {", "-                                if (child != null) {", "-                                    // Empty", "-                                } else if (c.getParameterTypes().length == 0) {", "-                                    child = c.newInstance(new Object[] {});", "-                                } else {", "-                                    child = c.newInstance(new Object[] {", "-                                        project});", "-                                }", "-                                if (child instanceof  PreSetDef.PreSetDefinition) {", "-                                    child = ((PreSetDef.PreSetDefinition) child)", "-                                        .createObject(project);", "-                                }", "-                                return child;", "-                            }", "+", "+        Object create(Project project, Object parent, Object child)", "+                throws InvocationTargetException,", "+                IllegalAccessException, InstantiationException {", "+            if (child != null) {", "+                // Empty", "+            } else {", "+                child = constructor.newInstance(", "+                    (constructor.getParameterTypes().length == 0)", "+                    ? new Object[] {} : new Object[] {project});", "+            }", "+            if (child instanceof PreSetDef.PreSetDefinition) {", "+                child = ((PreSetDef.PreSetDefinition) child)", "+                    .createObject(project);", "+            }", "+            if (behavior == ADD) {", "+                istore(parent, child);", "+            }", "+            return child;", "+        }"]}]}
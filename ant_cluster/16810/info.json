{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "264f636a67b9b0f359a128fd8bfb335b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0eae8c0e75b0fb37ef1b0983b1c1ba37", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/junit/src/main/org/apache/tools/ant/taskdefs/optional/junit/formatter/XMLFormatter.java", "commitBeforeChange": "a8965dadded68e9618a8421f64433745011fc62d", "commitAfterChange": "cbf1a178e3f594dd79291e6de776141e55fc3eb7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void onTestFailed(int status, String testname, String trace)", "signatureAfterChange": "      public void onTestFailure(TestRunEvent evt)", "diff": ["-    public void onTestFailed(int status, String testname, String trace) {", "-        if (testname != null) {", "-            onTestEnded(testname);", "-        }", "-        String type = status == STATUS_FAILURE ? FAILURE : ERROR;", "+    public void onTestFailure(TestRunEvent evt) {", "+        String type = evt == evt.getType() == TestRunEvent.TEST_FAILURE ? FAILURE : ERROR;", "-        Element currentTest = null;", "-        if (testname != null) {", "-            currentTest = (Element) testElements.get(testname);", "-        } else {", "-            currentTest = rootElement;", "-        }", "-", "+        Element currentTest = (Element) testElements.get(evt.getName());", "-        String[] args = parseFirstLine(trace);", "+        String[] args = parseFirstLine(evt.getStackTrace());", "-        Text text = doc.createTextNode(trace);", "+        Text text = doc.createTextNode(evt.getStackTrace());", "-        super.onTestFailed(status, testname, trace);", "+        super.onTestFailure(evt);", "+        removeEvent(evt);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b8023ab757a3c6134dc1c45d049103d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/listener/MailLogger.java", "commitBeforeChange": "8f4a67608a919e16059f3a74cf08a940d4a2f085", "commitAfterChange": "04340a9cb3fc58edcb167ec7fc3a7c8da2a8bb8c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void buildFinished(BuildEvent event)", "signatureAfterChange": "     public void buildFinished(BuildEvent event)", "diff": ["-", "-            String mailhost = getValue(properties, \"mailhost\", \"localhost\");", "-            int port = Integer.parseInt(getValue(properties, \"port\",", "-                                        String.valueOf(MailMessage.DEFAULT_PORT)));", "-            String user = getValue(properties, \"user\", \"\");", "-            String password = getValue(properties, \"password\", \"\");", "-            boolean ssl = Project.toBoolean(getValue(properties,", "-                     \"ssl\", \"off\"));", "-            String from = getValue(properties, \"from\", null);", "-            String replytoList = getValue(properties, \"replyto\", \"\");", "-            String toList = getValue(properties, prefix + \".to\", null);", "-            String subject = getValue(properties, prefix + \".subject\",", "-                    (success) ? \"Build Success\" : \"Build Failure\");", "-            if (user.equals(\"\") && password.equals(\"\") && !ssl) {", "-                sendMail(mailhost, port,  from, replytoList, toList,", "-                         subject, buffer.substring(0));", "+            Values values = new Values()", "+                .mailhost(getValue(properties, \"mailhost\", \"localhost\"))", "+                .port(Integer.parseInt(", "+                          getValue(", "+                              properties, \"port\",", "+                              String.valueOf(MailMessage.DEFAULT_PORT))))", "+                .user(getValue(properties, \"user\", \"\"))", "+                .password(getValue(properties, \"password\", \"\"))", "+                .ssl(Project.toBoolean(getValue(properties,", "+                                                \"ssl\", \"off\")))", "+                .from(getValue(properties, \"from\", null))", "+                .replytoList(getValue(properties, \"replyto\", \"\"))", "+                .toList(getValue(properties, prefix + \".to\", null))", "+                .subject(getValue(", "+                             properties, prefix + \".subject\",", "+                             (success) ? \"Build Success\" : \"Build Failure\"));", "+            if (values.user().equals(\"\")", "+                && values.password().equals(\"\")", "+                && !values.ssl()) {", "+                sendMail(values, buffer.substring(0));", "-                sendMimeMail(event.getProject(), mailhost, port, user,", "-                             password, ssl, from, replytoList, toList,", "-                             subject, buffer.substring(0));", "+                sendMimeMail(", "+                    event.getProject(), values, buffer.substring(0));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb3506ee206d6a0233f307c349251713", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/listener/MailLogger.java", "commitBeforeChange": "8f4a67608a919e16059f3a74cf08a940d4a2f085", "commitAfterChange": "04340a9cb3fc58edcb167ec7fc3a7c8da2a8bb8c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private void sendMail(String mailhost, int port, String from, String replyToList, String toList,                           String subject, String message) throws IOException", "signatureAfterChange": "     private void sendMail(Values values, String message) throws IOException", "diff": ["-    private void sendMail(String mailhost, int port, String from, String replyToList, String toList,", "-                          String subject, String message) throws IOException {", "-        MailMessage mailMessage = new MailMessage(mailhost, port);", "+    private void sendMail(Values values, String message) throws IOException {", "+        MailMessage mailMessage = new MailMessage(", "+            values.mailhost(), values.port());", "-        mailMessage.from(from);", "-        if (!replyToList.equals(\"\")) {", "-            StringTokenizer t = new StringTokenizer(replyToList, \", \", false);", "+        mailMessage.from(values.from());", "+        if (!values.replytoList().equals(\"\")) {", "+            StringTokenizer t = new StringTokenizer(", "+                values.replytoList(), \", \", false);", "-        StringTokenizer t = new StringTokenizer(toList, \", \", false);", "+        StringTokenizer t = new StringTokenizer(values.toList(), \", \", false);", "-        mailMessage.setSubject(subject);", "+        mailMessage.setSubject(values.subject());"]}]}
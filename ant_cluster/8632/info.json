{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "39823e32cc087b8071781c575b347fe9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8bc211dae3fc6aa777e12bb167516db", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/deployer/DefaultDeployer.java", "commitBeforeChange": "e7ab62bc9179b392804835d02155e43d3d2cf5d6", "commitAfterChange": "2e6e170fb375181f4438e1de44808c7adab508a2", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": "      private URL[] buildClasspath( final File file, final File[] dependencies )         throws MalformedURLException", "signatureAfterChange": "     private String getRoleForName( final String name )         throws DeploymentException", "diff": ["-    private URL[] buildClasspath( final File file, final File[] dependencies )", "-        throws MalformedURLException", "-        final URL[] urls = new URL[ dependencies.length + 1 ];", "-", "-        for( int i = 0; i < dependencies.length; i++ )", "-            urls[ i ] = dependencies[ i ].toURL();", "-", "-        urls[ dependencies.length ] = file.toURL();", "-", "-        return urls;", "+     */", "+    private String getRoleForName( final String name )", "+        throws DeploymentException", "+    {", "+        final String role = m_roleManager.getRoleForName( name );", "+", "+        if( null == role )", "+        {", "+            final String message = REZ.getString( \"unknown-role4name.error\", name );", "+", "+        return role;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb09cd6707c9308e0e0ef7490cc0225b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/taskdefs/javac/DefaultCompilerAdapter.java", "commitBeforeChange": "bd92e4de44f659770bc30e39f352dcc8446a1e9a", "commitAfterChange": "248269dea49bf84d7f1a87d23906854c519b9f70", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     protected int executeExternalCompile( String[] args, int firstFileName )         throws TaskException", "signatureAfterChange": "     protected boolean executeExternalCompile( final Commandline cmd )         throws TaskException", "diff": ["-    protected int executeExternalCompile( String[] args, int firstFileName )", "+    protected boolean executeExternalCompile( final Commandline cmd )", "-        String[] commandArray = null;", "+        logFilesToCompile( cmd );", "+", "-             * file if the total length of the command line exceeds this limit.", "+             * file.", "-            if( StringUtil.join( args, \" \" ).length() > 4096 )", "+            try", "-                PrintWriter out = null;", "+                tmpFile = File.createTempFile( \"javac\", \"\", new File( \".\" ) );", "+                final FileWriter fout = new FileWriter( tmpFile );", "-                    tmpFile = File.createTempFile( \"jikes\", \"\", new File( \".\" ) );", "-                    out = new PrintWriter( new FileWriter( tmpFile ) );", "-                    for( int i = firstFileName; i < args.length; i++ )", "+                    final PrintWriter out = new PrintWriter( fout );", "+                    for( int i = 0; i < m_compileList.length; i++ )", "-                        out.println( args[ i ] );", "+                        File file = m_compileList[i ];", "+                        out.println( file.getAbsolutePath() );", "-                    out.flush();", "-                    commandArray = new String[ firstFileName + 1 ];", "-                    System.arraycopy( args, 0, commandArray, 0, firstFileName );", "-                    commandArray[ firstFileName ] = \"@\" + tmpFile.getAbsolutePath();", "-                }", "-                catch( final IOException ioe )", "-                {", "-                    throw new TaskException( \"Error creating temporary file\", ioe );", "+                    out.close();", "-                    IOUtil.shutdownWriter( out );", "+                    IOUtil.shutdownWriter( fout );", "-            else", "+            catch( final IOException ioe )", "-                commandArray = args;", "+                throw new TaskException( \"Error creating temporary file\", ioe );", "+", "+            cmd.addArgument( \"@\" + tmpFile.getAbsolutePath() );", "-            final String[] commandline = commandArray;", "-            exe.setCommandline( new Commandline( commandline ) );", "-            return exe.execute( getTaskContext() );", "+            exe.setCommandline( cmd );", "+            return exe.execute( getTaskContext() ) == 0;"]}]}
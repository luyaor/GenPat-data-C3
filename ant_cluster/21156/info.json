{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6af6ea6c0108821904442be0e7169383", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cdd40206acb685ec4e35c5020a318cb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/selectors/modifiedselector/HashvalueAlgorithm.java", "commitBeforeChange": "bb9fcbf172c3b1656a17b2968c0ebff85037e205", "commitAfterChange": "d1e9fb46083b84b3277bdf8d4e23e05ffc19fbd7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public String getValue(File file)", "signatureAfterChange": "     public String getValue(File file)", "diff": ["-            byte[] content = new byte[fis.available()];", "-            fis.read(content);", "+            StringBuffer content = new StringBuffer();", "+            byte[] buffer = new byte[256];            ", "+            int len = 0;", "+            while ((len = fis.read(buffer, 0, len)) != -1) {", "+                content.append(new String(buffer, 0, len));", "+            }", "-            String s = new String(content);", "-            int hash = s.hashCode();", "+            int hash = content.toString().hashCode();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0f3c0931ec4bd736d60d64ceacda673", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/tar/TarInputStream.java", "commitBeforeChange": "34fdc2f62a8e282875c134c78aaf14105af92cf9", "commitAfterChange": "8819ee167bec189fb17e8d25ae3aca5268e0ec23", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "      Map<String, String> parsePaxHeaders(InputStream i) throws IOException", "signatureAfterChange": "      Map<String, String> parsePaxHeaders(InputStream i) throws IOException", "diff": ["-                            byte[] rest = new byte[len - read];", "-                            int got = i.read(rest);", "-                            if (got != len - read){", "+                            final int restLen = len - read;", "+                            byte[] rest = new byte[restLen];", "+                            int got = 0;", "+                            while (got < restLen && (ch = i.read()) != -1) {", "+                                rest[got++] = (byte) ch;", "+                            }", "+                            if (got != restLen) {", "-                                                      + (len - read)", "+                                                      + restLen", "-                                                      len - read - 1, \"UTF-8\");", "+                                                      restLen - 1, \"UTF-8\");"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fbc84af22e34968ce294eb3e14dcddba", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "991d6ffb426226b9381e0b95681a802c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/workspace/DefaultWorkspace.java", "commitBeforeChange": "be938b1e8fe6d68aec358cb6982c7d70fe827886", "commitAfterChange": "ef420c53bf5756a4e14afb47a54cef25e01017a9", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      private ProjectEntry getProjectEntry( final Project project )         throws TaskException", "signatureAfterChange": "      private ProjectEntry getProjectEntry( final Project project )         throws TaskException", "diff": ["-            final ExecutionFrame frame = createExecutionFrame( project );", "-            entry = new ProjectEntry( project, frame );", "-            m_entrys.put( project, entry );", "+            try", "+            {", "+                final ExecutionFrame frame = createExecutionFrame( project );", "+                entry = new ProjectEntry( project, frame );", "+                m_entrys.put( project, entry );", "+            }", "+            catch( Exception e )", "+            {", "+                final String message = REZ.getString( \"bad-frame.error\" );", "+                throw new TaskException( message, e );", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f22c62d25909884730cd59570e0f86e3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/type/DefaultTypeManager.java", "commitBeforeChange": "8d226e312c364e3465737658341d24cf795c3393", "commitAfterChange": "bc34bb06ca8b29568e31990be726d04559ca2972", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private MultiSourceTypeFactory createFactory( final String role )         throws TypeException", "signatureAfterChange": "     private MultiSourceTypeFactory createFactory( final Class role )         throws TypeException", "diff": ["-    private MultiSourceTypeFactory createFactory( final String role )", "+    private MultiSourceTypeFactory createFactory( final Class role )", "-            try", "-            {", "-                //TODO: Should we use ContextClassLoader here ??? Or perhaps try that on failure??", "-                final Class clazz = Class.forName( role );", "-                factory = new MultiSourceTypeFactory( clazz );", "-            }", "-            catch( final Exception e )", "-            {", "-                final String message = REZ.getString( \"no-work-interface.error\", role );", "-                throw new TypeException( message );", "-            }", "+            factory = new MultiSourceTypeFactory( role );"]}]}
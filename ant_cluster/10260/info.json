{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e70594f5f223c9e286c4206257752dd6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "042bab478faf2b44589d80dab7dbf68c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/metamata/MAuditStreamHandler.java", "commitBeforeChange": "271e0fe6fc223253e2c24c0f0f0c4fc4d9b58410", "commitAfterChange": "8af1905a98b1e04a63ab7473d64a41bfda91f15e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "     protected void processLine(String line)", "signatureAfterChange": "     protected void processLine(String line)", "diff": ["-    protected void processLine(String line){", "+    protected void processLine(String line) {", "-            String file = (String)matches.elementAt(1);", "-            int lineNum = Integer.parseInt((String)matches.elementAt(2));", "-            String msg = (String)matches.elementAt(3);", "-            addViolationEntry(file, MAudit.createViolation(lineNum, msg) );", "+            String file = (String) matches.elementAt(1);", "+            MAudit.Violation violation = new MAudit.Violation();", "+            violation.line = (String) matches.elementAt(2);", "+            violation.error = (String) matches.elementAt(3);", "+            // remove the pathname from any messages and let the classname only.", "+            final int pos = file.lastIndexOf(File.separatorChar);", "+            if ((pos != -1) && (pos != file.length() - 1)) {", "+                String filename = file.substring(pos + 1);", "+                violation.error = StringUtils.replace(violation.error,", "+                        \"file:\" + file, filename);", "+            }", "+            addViolationEntry(file, violation);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17c74c729a022d5ad46a1ac073a1e9cf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/modules/edit/ElementNavigator.java", "commitBeforeChange": "df3ce6106dd8870ddbbb29b89426526409c97556", "commitAfterChange": "237bbc895936f5236884d0083d7f9f967875fd09", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "         public boolean eventPosted(EventObject event)", "signatureAfterChange": "         public boolean eventPosted(EventObject event)", "diff": ["+            ElementTreeModel model = (ElementTreeModel)_tree.getModel();", "+            // XXX This crap needs cleaning up. Type switching is lazy...", "-// XXX This won't work until ACSTreeNodeElement.getParent() is fixed", "-//                ElementTreeModel model = (ElementTreeModel)_tree.getModel();", "-//                model.nodeChanged((TreeNode)model.getRoot());", "-                ", "+                model.fireNodeChanged((ACSElement)event.getSource());", "+            }", "+            else if(event instanceof NewElementEvent && model != null) {", "+                ACSElement element = ((NewElementEvent)event).getNewElement();", "+                model.fireNodeAdded(element);", "+                TreePath path = new TreePath(model.getPathToRoot(element));", "+                _selections.setSelectionPath(path);", "+                _tree.scrollPathToVisible(path);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80d2df09474a8b5ecf912a4d47fd21fd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/PropertySet.java", "commitBeforeChange": "ce89090b466c00d8a218ff572a4cfe92eebc9d96", "commitAfterChange": "996e16066a9450f18df34582a163957d365bcee1", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "      public Properties getProperties()", "signatureAfterChange": "      public Properties getProperties()", "diff": ["-        Vector names = null;", "+        Set names = null;", "-            names = new Vector(); // :TODO: should be a Set!", "+            names = new HashSet();", "-", "+            // Add this PropertySet's nested PropertySets' property names.", "+            for (Enumeration e = setRefs.elements(); e.hasMoreElements();) {", "+                PropertySet set = (PropertySet) e.nextElement();", "+                names.addAll(set.getProperties().keySet());", "+            }", "+            if (negate) {", "+                //make a copy...", "+                HashSet complement = new HashSet(props.keySet());", "+                complement.removeAll(names);", "+                names = complement;", "+            }", "-        for (Enumeration e = names.elements(); e.hasMoreElements();) {", "-            String name = (String) e.nextElement();", "+        for (Iterator iter = names.iterator(); iter.hasNext();) {", "+            String name = (String) iter.next();"]}]}
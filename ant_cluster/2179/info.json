{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d16074c2b7fb4b3e194fffd3f07ffa1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "098c31fab36b4b6b08c65a4b54091ad7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/bootstrap/org/apache/ant/builder/Builder.java", "commitBeforeChange": "5e93b0b89f8ecfdf99eeed637b5a3d0773000cea", "commitAfterChange": "56c025c6797ffab89724ef0cfeb3aedd253877dc", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private File[] getAnt1Files()", "signatureAfterChange": "     private File[] getAnt1Files()", "diff": ["-        files.add(new File(TYPES_ROOT, \"EnumeratedAttribute.java\"));", "-        files.add(new File(TYPES_ROOT, \"Path.java\"));", "-        files.add(new File(TYPES_ROOT, \"FileSet.java\"));", "-        files.add(new File(TYPES_ROOT, \"PatternSet.java\"));", "-        files.add(new File(TYPES_ROOT, \"Reference.java\"));", "-        files.add(new File(TYPES_ROOT, \"FilterSet.java\"));", "-        files.add(new File(TYPES_ROOT, \"FilterSetCollection.java\"));", "-        files.add(new File(TYPES_ROOT, \"Mapper.java\"));", "-        files.add(new File(TYPES_ROOT, \"ZipFileSet.java\"));", "-        files.add(new File(TYPES_ROOT, \"ZipScanner.java\"));", "-        files.add(new File(TYPES_ROOT, \"FilterChain.java\"));", "-        files.add(new File(TYPES_ROOT, \"Parameter.java\"));", "-        files.add(new File(TYPES_ROOT, \"Parameterizable.java\"));", "-        files.add(new File(TYPES_ROOT, \"RegularExpression.java\"));", "-        files.add(new File(UTIL_ROOT, \"FileNameMapper.java\"));", "-        files.add(new File(UTIL_ROOT, \"FlatFileNameMapper.java\"));", "-        files.add(new File(UTIL_ROOT, \"SourceFileScanner.java\"));", "-        files.add(new File(UTIL_ROOT, \"IdentityMapper.java\"));", "-        files.add(new File(UTIL_ROOT, \"MergingMapper.java\"));", "-        files.add(new File(UTIL_ROOT, \"GlobPatternMapper.java\"));", "-        files.add(new File(UTIL_ROOT, \"LoaderUtils.java\"));", "-        files.add(new File(UTIL_ROOT, \"regexp/Regexp.java\"));", "-        files.add(new File(UTIL_ROOT, \"regexp/RegexpMatcher.java\"));", "-        files.add(new File(UTIL_ROOT, \"regexp/RegexpFactory.java\"));", "-        files.add(new File(UTIL_ROOT, \"regexp/RegexpMatcherFactory.java\"));", "-        files.add(new File(TYPES_ROOT, \"Commandline.java\"));", "-        files.add(new File(UTIL_ROOT, \"JavaEnvUtils.java\"));", "+        addJavaFiles(files, TASKDEFS_ROOT);", "+        addJavaFiles(files, new File(TASKDEFS_ROOT, \"compilers\"));", "+        addJavaFiles(files, new File(TASKDEFS_ROOT, \"condition\"));", "+        addJavaFiles(files, DEPEND_ROOT);", "+        addJavaFiles(files, new File(DEPEND_ROOT, \"constantpool\"));", "+        addJavaFiles(files, TYPES_ROOT);", "+        addJavaFiles(files, FILTERS_ROOT);", "+        addJavaFiles(files, UTIL_ROOT);", "+        addJavaFiles(files, ZIP_ROOT);", "+", "-        files.add(new File(UTIL_ROOT, \"FileUtils.java\"));", "+        ", "-        files.add(new File(TASKDEFS_ROOT, \"Property.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"Execute.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"ExecuteStreamHandler.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"ExecuteWatchdog.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"ProcessDestroyer.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"PumpStreamHandler.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"StreamPumper.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"LogStreamHandler.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"LogOutputStream.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"condition/Os.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"condition/Contains.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"condition/Condition.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"Available.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"Mkdir.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"Copy.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"Echo.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"MatchingTask.java\"));", "-        files.add(new File(DEPEND_ROOT, \"Depend.java\"));", "-        files.add(new File(DEPEND_ROOT, \"ClassFile.java\"));", "-        files.add(new File(DEPEND_ROOT, \"ClassFileUtils.java\"));", "-        files.add(new File(DEPEND_ROOT, \"constantpool/ClassCPInfo.java\"));", "-        files.add(new File(DEPEND_ROOT, \"constantpool/ConstantPool.java\"));", "-        files.add(new File(DEPEND_ROOT, \"constantpool/ConstantPoolEntry.java\"));", "-        files.add(new File(DEPEND_ROOT, \"constantpool/Utf8CPInfo.java\"));", "-        files.add(new File(DEPEND_ROOT, \"constantpool/ConstantCPInfo.java\"));", "-        files.add(new File(DEPEND_ROOT, \"constantpool/MethodRefCPInfo.java\"));", "-        files.add(new File(DEPEND_ROOT,", "-            \"constantpool/InterfaceMethodRefCPInfo.java\"));", "-        files.add(new File(DEPEND_ROOT, \"constantpool/FieldRefCPInfo.java\"));", "-        files.add(new File(DEPEND_ROOT, \"constantpool/NameAndTypeCPInfo.java\"));", "-        files.add(new File(DEPEND_ROOT, \"constantpool/IntegerCPInfo.java\"));", "-        files.add(new File(DEPEND_ROOT, \"constantpool/FloatCPInfo.java\"));", "-        files.add(new File(DEPEND_ROOT, \"constantpool/LongCPInfo.java\"));", "-        files.add(new File(DEPEND_ROOT, \"constantpool/StringCPInfo.java\"));", "-        files.add(new File(DEPEND_ROOT, \"constantpool/DoubleCPInfo.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"Javac.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"compilers/CompilerAdapter.java\"));", "-        files.add(new File(TASKDEFS_ROOT,", "-            \"compilers/DefaultCompilerAdapter.java\"));", "-        files.add(new File(TASKDEFS_ROOT,", "-            \"compilers/CompilerAdapterFactory.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"compilers/Jikes.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"compilers/JavacExternal.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"compilers/Javac12.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"compilers/Javac13.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"compilers/Kjc.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"compilers/Gcj.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"compilers/Jvc.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"compilers/Sj.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"Jar.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"Zip.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"Manifest.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"ManifestException.java\"));", "-        files.add(new File(ZIP_ROOT, \"ZipOutputStream.java\"));", "-        files.add(new File(ZIP_ROOT, \"ZipOutputStream.java\"));", "-        files.add(new File(ZIP_ROOT, \"ZipEntry.java\"));", "-        files.add(new File(ZIP_ROOT, \"ZipLong.java\"));", "-        files.add(new File(ZIP_ROOT, \"ZipShort.java\"));", "-        files.add(new File(ZIP_ROOT, \"ZipExtraField.java\"));", "-        files.add(new File(ZIP_ROOT, \"ExtraFieldUtils.java\"));", "-        files.add(new File(ZIP_ROOT, \"AsiExtraField.java\"));", "-        files.add(new File(ZIP_ROOT, \"UnrecognizedExtraField.java\"));", "-        files.add(new File(ZIP_ROOT, \"UnixStat.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"ConditionTask.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"condition/ConditionBase.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"Checksum.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"UpToDate.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"condition/Not.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"condition/And.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"condition/Equals.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"condition/Or.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"condition/IsSet.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"condition/Http.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"condition/Socket.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"condition/FilesMatch.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"Taskdef.java\"));", "-        files.add(new File(TASKDEFS_ROOT, \"Definer.java\"));", "-        ", "+", "+        files.add(new File(UTIL_ROOT, \"regexp/Regexp.java\"));", "+        files.add(new File(UTIL_ROOT, \"regexp/RegexpMatcher.java\"));", "+        files.add(new File(UTIL_ROOT, \"regexp/RegexpFactory.java\"));", "+        files.add(new File(UTIL_ROOT, \"regexp/RegexpMatcherFactory.java\"));", "-        files.add(new File(FILTERS_ROOT, \"ClassConstants.java\"));", "-        files.add(new File(FILTERS_ROOT, \"ExpandProperties.java\"));", "-        files.add(new File(FILTERS_ROOT, \"HeadFilter.java\"));", "-        files.add(new File(FILTERS_ROOT, \"LineContains.java\"));", "-        files.add(new File(FILTERS_ROOT, \"LineContainsRegExp.java\"));", "-        files.add(new File(FILTERS_ROOT, \"PrefixLines.java\"));", "-        files.add(new File(FILTERS_ROOT, \"ReplaceTokens.java\"));", "-        files.add(new File(FILTERS_ROOT, \"StripJavaComments.java\"));", "-        files.add(new File(FILTERS_ROOT, \"StripLineBreaks.java\"));", "-        files.add(new File(FILTERS_ROOT, \"StripLineComments.java\"));", "-        files.add(new File(FILTERS_ROOT, \"TabsToSpaces.java\"));", "-        files.add(new File(FILTERS_ROOT, \"TailFilter.java\"));", "-        files.add(new File(FILTERS_ROOT, \"BaseFilterReader.java\"));", "-        files.add(new File(FILTERS_ROOT, \"ChainableReader.java\"));", "-        files.add(new File(TYPES_ROOT, \"AntFilterReader.java\"));", "-        files.add(new File(FILTERS_ROOT, \"BaseParamFilterReader.java\"));", "-        files.add(new File(FILTERS_ROOT, \".java\"));", "+        ", "+        // these shouyld not be included", "+        files.remove(new File(TYPES_ROOT, \"DataType.java\"));", "+        files.remove(new File(TASKDEFS_ROOT, \"Ant.java\"));", "+        files.remove(new File(TASKDEFS_ROOT, \"CallTarget.java\"));", "+        files.remove(new File(TASKDEFS_ROOT, \"AntStructure.java\"));", "+        files.remove(new File(TASKDEFS_ROOT, \"Recorder.java\"));", "+        files.remove(new File(TASKDEFS_ROOT, \"RecorderEntry.java\"));", "+        ", "+        // not needed for bootstrap", "+        files.remove(new File(TASKDEFS_ROOT, \"Java.java\"));", "+        files.remove(new File(TASKDEFS_ROOT, \"Tar.java\"));", "+        files.remove(new File(TASKDEFS_ROOT, \"Untar.java\"));", "+        files.remove(new File(TASKDEFS_ROOT, \"BZip2.java\"));", "+        files.remove(new File(TASKDEFS_ROOT, \"BUnzip2.java\"));", "+        files.remove(new File(TASKDEFS_ROOT, \"Rmic.java\"));", "+        files.remove(new File(TASKDEFS_ROOT, \"SendEmail.java\"));", "+        ", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39c0160753781f7ff7bb39ecee7883b2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/unix/SymlinkTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void testSymbolicLinkUtilsMethods() throws Exception", "signatureAfterChange": "      @Test     public void testSymbolicLinkUtilsMethods() throws Exception", "diff": ["+    @Test", "-        if (supportsSymlinks) {", "-            executeTarget(\"test-fileutils\");", "-            SymbolicLinkUtils su = SymbolicLinkUtils.getSymbolicLinkUtils();", "-            java.io.File f = new File(getOutputDir(), \"file1\");", "-            assertTrue(f.exists());", "-            assertFalse(f.isDirectory());", "-            assertTrue(f.isFile());", "-            assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isSymbolicLink(f.getParentFile(),", "-                                          f.getName()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "-                                                  f.getName()));", "+        buildRule.executeTarget(\"test-fileutils\");", "+        SymbolicLinkUtils su = SymbolicLinkUtils.getSymbolicLinkUtils();", "-            f = new File(getOutputDir(), \"dir1\");", "-            assertTrue(f.exists());", "-            assertTrue(f.isDirectory());", "-            assertFalse(f.isFile());", "-            assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isSymbolicLink(f.getParentFile(),", "-                                          f.getName()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "-                                                  f.getName()));", "+        java.io.File f = new File(buildRule.getOutputDir(), \"file1\");", "+        assertTrue(f.exists());", "+        assertFalse(f.isDirectory());", "+        assertTrue(f.isFile());", "+        assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "+        assertFalse(su.isSymbolicLink(f.getParentFile(),", "+                                      f.getName()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "+                                              f.getName()));", "-            f = new File(getOutputDir(), \"file2\");", "-            assertFalse(f.exists());", "-            assertFalse(f.isDirectory());", "-            assertFalse(f.isFile());", "-            assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isSymbolicLink(f.getParentFile(),", "-                                          f.getName()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "-                                                  f.getName()));", "+        f = new File(buildRule.getOutputDir(), \"dir1\");", "+        assertTrue(f.exists());", "+        assertTrue(f.isDirectory());", "+        assertFalse(f.isFile());", "+        assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "+        assertFalse(su.isSymbolicLink(f.getParentFile(),", "+                                      f.getName()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "+                                              f.getName()));", "-            f = new File(getOutputDir(), \"dir2\");", "-            assertFalse(f.exists());", "-            assertFalse(f.isDirectory());", "-            assertFalse(f.isFile());", "-            assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isSymbolicLink(f.getParentFile(),", "-                                          f.getName()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "-                                                  f.getName()));", "+        f = new File(buildRule.getOutputDir(), \"file2\");", "+        assertFalse(f.exists());", "+        assertFalse(f.isDirectory());", "+        assertFalse(f.isFile());", "+        assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "+        assertFalse(su.isSymbolicLink(f.getParentFile(),", "+                                      f.getName()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "+                                              f.getName()));", "+", "+        f = new File(buildRule.getOutputDir(), \"dir2\");", "+        assertFalse(f.exists());", "+        assertFalse(f.isDirectory());", "+        assertFalse(f.isFile());", "+        assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "+        assertFalse(su.isSymbolicLink(f.getParentFile(),", "+                                      f.getName()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "+                                              f.getName()));", "-            f = new File(getOutputDir(), \"file.there\");", "-            assertTrue(f.exists());", "-            assertFalse(f.isDirectory());", "-            assertTrue(f.isFile());", "-            assertTrue(su.isSymbolicLink(f.getAbsolutePath()));", "-            assertTrue(su.isSymbolicLink(f.getParentFile(),", "-                                         f.getName()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "-                                                  f.getName()));", "+        f = new File(buildRule.getOutputDir(), \"file.there\");", "+        assertTrue(f.exists());", "+        assertFalse(f.isDirectory());", "+        assertTrue(f.isFile());", "+        assertTrue(su.isSymbolicLink(f.getAbsolutePath()));", "+        assertTrue(su.isSymbolicLink(f.getParentFile(),", "+                                     f.getName()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "+                                              f.getName()));", "-            f = new File(getOutputDir(), \"dir.there\");", "-            assertTrue(f.exists());", "-            assertTrue(f.isDirectory());", "-            assertFalse(f.isFile());", "-            assertTrue(su.isSymbolicLink(f.getAbsolutePath()));", "-            assertTrue(su.isSymbolicLink(f.getParentFile(),", "-                                         f.getName()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "-                                                  f.getName()));", "+        f = new File(buildRule.getOutputDir(), \"dir.there\");", "+        assertTrue(f.exists());", "+        assertTrue(f.isDirectory());", "+        assertFalse(f.isFile());", "+        assertTrue(su.isSymbolicLink(f.getAbsolutePath()));", "+        assertTrue(su.isSymbolicLink(f.getParentFile(),", "+                                     f.getName()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "+                                              f.getName()));", "-            // it is not possible to find out that symbolic links pointing", "-            // to inexistent files or directories are symbolic links", "-            // it used to be possible to detect this on Mac", "-            // this is not true under Snow Leopard and JDK 1.5", "-            // Removing special handling of MacOS until someone shouts", "-            // Antoine", "-            f = new File(getOutputDir(), \"file.notthere\");", "-            assertFalse(f.exists());", "-            assertFalse(f.isDirectory());", "-            assertFalse(f.isFile());", "-            assertTrue(su.isSymbolicLink(f.getAbsolutePath()) == false);", "-            assertTrue(su.isSymbolicLink(f.getParentFile(), f.getName()) == false);", "-            assertTrue(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "-            assertTrue(su.isDanglingSymbolicLink(f.getParentFile(),", "-                                                 f.getName()));", "+        // it is not possible to find out that symbolic links pointing", "+        // to inexistent files or directories are symbolic links", "+        // it used to be possible to detect this on Mac", "+        // this is not true under Snow Leopard and JDK 1.5", "+        // Removing special handling of MacOS until someone shouts", "+        // Antoine", "+        f = new File(buildRule.getOutputDir(), \"file.notthere\");", "+        assertFalse(f.exists());", "+        assertFalse(f.isDirectory());", "+        assertFalse(f.isFile());", "+        assertTrue(su.isSymbolicLink(f.getAbsolutePath()) == false);", "+        assertTrue(su.isSymbolicLink(f.getParentFile(), f.getName()) == false);", "+        assertTrue(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+        assertTrue(su.isDanglingSymbolicLink(f.getParentFile(),", "+                                             f.getName()));", "-            f = new File(getOutputDir(), \"dir.notthere\");", "-            assertFalse(f.exists());", "-            assertFalse(f.isDirectory());", "-            assertFalse(f.isFile());", "-            assertTrue(su.isSymbolicLink(f.getAbsolutePath()) == false);", "-            assertTrue(su.isSymbolicLink(f.getParentFile(), f.getName()) == false);", "-            assertTrue(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "-            assertTrue(su.isDanglingSymbolicLink(f.getParentFile(),", "-                                                 f.getName()));", "+        f = new File(buildRule.getOutputDir(), \"dir.notthere\");", "+        assertFalse(f.exists());", "+        assertFalse(f.isDirectory());", "+        assertFalse(f.isFile());", "+        assertTrue(su.isSymbolicLink(f.getAbsolutePath()) == false);", "+        assertTrue(su.isSymbolicLink(f.getParentFile(), f.getName()) == false);", "+        assertTrue(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+        assertTrue(su.isDanglingSymbolicLink(f.getParentFile(),", "+                                             f.getName()));", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e7fe4e02552bcf417b4a138fce585dc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "9174fbde3b63fde69fee83a681d22301f7aa7a02", "commitAfterChange": "c2077d52ddbe15f9357e4609f78f6cd8187b0365", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 77, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        boolean javadoc1 = (Project.getJavaVersion() == Project.JAVA_1_1);", "-", "-", "-        Vector argList = new Vector();", "-        if(maxmemory != null){", "-            if(javadoc1){", "-                argList.addElement(\"-J-mx\" + maxmemory);", "-            }", "-            else{", "-                argList.addElement(\"-J-Xmx\" + maxmemory);", "-            }", "-        }", "-", "-            argList.addElement(\"-classpath\");", "-            argList.addElement(classpath.toString());", "+            cmd.createArgument().setValue(\"-classpath\");", "+            cmd.createArgument().setValue(classpath.toString());", "-                argList.addElement(\"-sourcepath\");", "-                argList.addElement(sourcePath.toString());", "+                cmd.createArgument().setValue(\"-sourcepath\");", "+                cmd.createArgument().setValue(sourcePath.toString());", "-            argList.addElement(\"-classpath\");", "-            argList.addElement(sourcePath.toString() +", "+            cmd.createArgument().setValue(\"-classpath\");", "+            cmd.createArgument().setValue(sourcePath.toString() +", "-        if (destDir != null) {", "-            argList.addElement(\"-d\");", "-            argList.addElement(destDir.getAbsolutePath());", "-        }", "-            argList.addElement (\"-version\");", "-        if (nodeprecated)", "-            argList.addElement (\"-nodeprecated\");", "+            cmd.createArgument().setValue(\"-version\");", "-            argList.addElement (\"-author\");", "-        if (noindex)", "-            argList.addElement (\"-noindex\");", "-        if (notree)", "-            argList.addElement (\"-notree\");", "-        if (pub)", "-            argList.addElement (\"-public\");", "-        if (prot)", "-            argList.addElement (\"-protected\");", "-        if (pack)", "-            argList.addElement (\"-package\");", "-        if (priv)", "-            argList.addElement (\"-private\");", "-        if (encoding != null) {", "-            argList.addElement(\"-encoding\");", "-            argList.addElement(encoding);", "-        }", "-        if (docencoding != null) {", "-            argList.addElement(\"-docencoding\");", "-            argList.addElement(docencoding);", "-        }", "+            cmd.createArgument().setValue(\"-author\");", "-            if (overviewFile != null) {", "-                argList.addElement(\"-overview\");", "-                argList.addElement(overviewFile.getAbsolutePath());", "-            }", "-            if (old)", "-                argList.addElement(\"-1.1\");", "-            if (verbose)", "-                argList.addElement(\"-verbose\");", "-            if (use)", "-                argList.addElement(\"-use\");", "-            if (splitindex)", "-                argList.addElement(\"-splitindex\");", "-            if (nodeprecatedlist)", "-                argList.addElement(\"-nodeprecatedlist\");", "-            if (nohelp)", "-                argList.addElement(\"-nohelp\");", "-            if (nonavbar)", "-                argList.addElement(\"-nonavbar\");", "-            if (serialwarn)                     ", "-                argList.addElement(\"-serialwarn\");", "-                    throw new BuildException(\"The doclet name must be specified.\");", "+                    throw new BuildException(\"The doclet name must be specified.\", location);", "-                    argList.addElement(\"-doclet\");", "-                    argList.addElement(doclet.getName());", "+                    cmd.createArgument().setValue(\"-doclet\");", "+                    cmd.createArgument().setValue(doclet.getName());", "-                        argList.addElement(\"-docletpath\");", "-                        argList.addElement(doclet.getPath().toString());", "+                        cmd.createArgument().setValue(\"-docletpath\");", "+                        cmd.createArgument().setValue(doclet.getPath().toString());", "-                        argList.addElement(param.getName());", "+                        cmd.createArgument().setValue(param.getName());", "-                            argList.addElement(param.getValue());", "+                            cmd.createArgument().setValue(param.getValue());", "-                argList.addElement(\"-bootclasspath\");", "-                argList.addElement(bootclasspath.toString());", "-            }", "-            if (extdirs != null) {", "-                argList.addElement(\"-extdirs\");", "-                argList.addElement(extdirs);", "-            }", "-            if (locale != null) {", "-                argList.addElement(\"-locale\");", "-                argList.addElement(locale);", "-            }", "-            if (encoding != null) {", "-                argList.addElement(\"-encoding\");", "-                argList.addElement(encoding);", "-            }", "-            if (windowtitle != null) {", "-                argList.addElement(\"-windowtitle\");", "-                argList.addElement(windowtitle);", "-            }", "-            if (doctitle != null) {", "-                argList.addElement(\"-doctitle\");", "-                argList.addElement(doctitle);", "-            }", "-            if (header != null) {", "-                argList.addElement(\"-header\");", "-                argList.addElement(header);", "-            }", "-            if (footer != null) {", "-                argList.addElement(\"-footer\");", "-                argList.addElement(footer);", "-            }", "-            if (bottom != null) {", "-                argList.addElement(\"-bottom\");", "-                argList.addElement(bottom);", "-            }", "-            ", "-            // add the single link arguments", "-            if (link != null) {", "-                argList.addElement(\"-link\");", "-                argList.addElement(link);", "+                cmd.createArgument().setValue(\"-bootclasspath\");", "+                cmd.createArgument().setValue(bootclasspath.toString());", "-                        argList.addElement(\"-linkoffline\");", "-                        argList.addElement(la.getHref());", "-                        argList.addElement(packageListLocation);", "+                        cmd.createArgument().setValue(\"-linkoffline\");", "+                        cmd.createArgument().setValue(la.getHref());", "+                        cmd.createArgument().setValue(packageListLocation);", "-                        argList.addElement(\"-link\");", "-                        argList.addElement(la.getHref());", "+                        cmd.createArgument().setValue(\"-link\");", "+                        cmd.createArgument().setValue(la.getHref());", "-            // add the single linkoffline arguments", "-            if (linkoffline != null) {", "-                argList.addElement(\"-linkoffline\");", "-                argList.addElement(linkoffline);", "-            }", "-            ", "-                    argList.addElement(\"-group\");", "-                    argList.addElement(name);", "-                    argList.addElement(pkgList);", "+                    cmd.createArgument().setValue(\"-group\");", "+                    cmd.createArgument().setValue(name);", "+                    cmd.createArgument().setValue(pkgList);", "-                    argList.addElement(\"-group\");", "-                    argList.addElement(title);", "-                    argList.addElement(packages);", "+                    cmd.createArgument().setValue(\"-group\");", "+                    cmd.createArgument().setValue(title);", "+                    cmd.createArgument().setValue(packages);", "-            if (stylesheetfile != null) {", "-                argList.addElement(\"-stylesheetfile\");", "-                argList.addElement(stylesheetfile.getAbsolutePath());", "-            }", "-            if (helpfile != null) {", "-                argList.addElement(\"-helpfile\");", "-                argList.addElement(helpfile.getAbsolutePath());", "-            }", "-            if (charset != null) {", "-                argList.addElement(\"-charset\");", "-                argList.addElement(charset);", "-            }", "-            if (additionalParam != null) {", "-                argList.addElement(additionalParam);", "-            }", "-                    argList.addElement(name);", "+                    cmd.createArgument().setValue(name);", "-                evaluatePackages(sourcePath, packages, argList);", "+                evaluatePackages(sourcePath, packages);", "-                argList.addElement(tok.nextToken().trim());", "+                cmd.createArgument().setValue(tok.nextToken().trim());", "-            argList.addElement(\"@\" + packageList);", "+            cmd.createArgument().setValue(\"@\" + packageList);", "-        log(\"Javadoc args: \" + argList.toString(), Project.MSG_VERBOSE);", "+        log(\"Javadoc args: \" + cmd.getArguments(), Project.MSG_VERBOSE);", "-        StringBuffer b = new StringBuffer();", "-        b.append(\"javadoc \");", "-", "-        Enumeration e = argList.elements();", "-        while (e.hasMoreElements()) {", "-            String arg = (String) e.nextElement();", "-            if (!arg.startsWith(\"-\")) {", "-                b.append(\"\\\"\");", "-                b.append(arg);", "-                b.append(\"\\\"\");", "-            } else {", "-                b.append(arg);", "-            }", "-            if (e.hasMoreElements()) b.append(\" \");", "+        JavadocOutputStream out = new JavadocOutputStream(Project.MSG_INFO);", "+        JavadocOutputStream err = new JavadocOutputStream(Project.MSG_WARN);", "+        Execute exe = new Execute(new PumpStreamHandler(out, err));", "+        exe.setAntRun(project);", "+        exe.setWorkingDirectory(project.getBaseDir());", "+        try {", "+            exe.setCommandline(cmd.getCommandline());", "+            exe.execute();", "+        } catch (IOException e) {", "+            throw new BuildException(\"Execute failed: \" + e, e, location);", "+        } finally {", "+            out.logFlush();", "+            err.logFlush();", "+            try {", "+                out.close();", "+                err.close();", "+            } catch (IOException e) {}", "-", "-        run(b.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e5548d30e798c51e673e1b2c424e339", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/IContract.java", "commitBeforeChange": "7cce31d892daee83fd1e49e322af3ef20605c221", "commitAfterChange": "1f71acf427e164e75bc4f90b1ddaecd51998709b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            // We want to be notified if iContract jar is missing. This makes life easier for the user", "-            // who didn't understand that iContract is a separate library (duh!)", "+            // We want to be notified if iContract jar is missing.", "+            // This makes life easier for the user who didn't understand", "+            // that iContract is a separate library (duh!)", "-            // Prepare the directories for iContract. iContract will make them if they", "-            // don't exist, but for some reason I don't know, it will complain about the REP files", "-            // afterwards", "+            // Prepare the directories for iContract. iContract will make", "+            // them if they don't exist, but for some reason I don't know,", "+            // it will complain about the REP files afterwards", "-            // Might need to add the core classes if we're not using Sun's Javac (like Jikes)", "+            // Might need to add the core classes if we're not using", "+            // Sun's Javac (like Jikes)", "-            // Create the classpath required to compile the sourcefiles BEFORE instrumentation", "+            // Create the classpath required to compile the sourcefiles", "+            // BEFORE instrumentation", "-            // Create the classpath required to compile the sourcefiles AFTER instrumentation", "+            // Create the classpath required to compile the sourcefiles", "+            // AFTER instrumentation", "-            afterInstrumentationClasspath.append(new Path(getProject(), instrumentDir.getAbsolutePath()));", "-            afterInstrumentationClasspath.append(new Path(getProject(), repositoryDir.getAbsolutePath()));", "-            afterInstrumentationClasspath.append(new Path(getProject(), srcDir.getAbsolutePath()));", "-            afterInstrumentationClasspath.append(new Path(getProject(), buildDir.getAbsolutePath()));", "+            afterInstrumentationClasspath.append(new Path(getProject(),", "+                instrumentDir.getAbsolutePath()));", "+            afterInstrumentationClasspath.append(new Path(getProject(),", "+                repositoryDir.getAbsolutePath()));", "+            afterInstrumentationClasspath.append(new Path(getProject(),", "+                srcDir.getAbsolutePath()));", "+            afterInstrumentationClasspath.append(new Path(getProject(),", "+                buildDir.getAbsolutePath()));", "-            // Create the classpath required to automatically compile the repository files", "+            // Create the classpath required to automatically compile the", "+            // repository files", "-            repositoryClasspath.append(new Path(getProject(), instrumentDir.getAbsolutePath()));", "-            repositoryClasspath.append(new Path(getProject(), srcDir.getAbsolutePath()));", "-            repositoryClasspath.append(new Path(getProject(), repositoryDir.getAbsolutePath()));", "-            repositoryClasspath.append(new Path(getProject(), buildDir.getAbsolutePath()));", "+            repositoryClasspath.append(new Path(getProject(),", "+                instrumentDir.getAbsolutePath()));", "+            repositoryClasspath.append(new Path(getProject(),", "+                srcDir.getAbsolutePath()));", "+            repositoryClasspath.append(new Path(getProject(),", "+                repositoryDir.getAbsolutePath()));", "+            repositoryClasspath.append(new Path(getProject(),", "+                buildDir.getAbsolutePath()));", "-            iContractClasspath.append(new Path(getProject(), System.getProperty(\"java.home\") + File.separator + \"..\" + File.separator + \"lib\" + File.separator + \"tools.jar\"));", "-            iContractClasspath.append(new Path(getProject(), srcDir.getAbsolutePath()));", "-            iContractClasspath.append(new Path(getProject(), repositoryDir.getAbsolutePath()));", "-            iContractClasspath.append(new Path(getProject(), instrumentDir.getAbsolutePath()));", "-            iContractClasspath.append(new Path(getProject(), buildDir.getAbsolutePath()));", "+            iContractClasspath.append(new Path(getProject(),", "+                System.getProperty(\"java.home\") + File.separator + \"..\"", "+                    + File.separator + \"lib\" + File.separator + \"tools.jar\"));", "+            iContractClasspath.append(new Path(getProject(),", "+                srcDir.getAbsolutePath()));", "+            iContractClasspath.append(new Path(getProject(),", "+                repositoryDir.getAbsolutePath()));", "+            iContractClasspath.append(new Path(getProject(),", "+                instrumentDir.getAbsolutePath()));", "+            iContractClasspath.append(new Path(getProject(),", "+                buildDir.getAbsolutePath()));", "-            args.append(\"-b\").append(\"\\\"\").append(icCompiler).append(\" -classpath \").append(beforeInstrumentationClasspath).append(\"\\\" \");", "-            args.append(\"-c\").append(\"\\\"\").append(icCompiler).append(\" -classpath \").append(afterInstrumentationClasspath).append(\" -d \").append(buildDir).append(\"\\\" \");", "-            args.append(\"-n\").append(\"\\\"\").append(icCompiler).append(\" -classpath \").append(repositoryClasspath).append(\"\\\" \");", "+", "+            args.append(\"-b\").append(\"\\\"\").append(icCompiler);", "+            args.append(\" -classpath \").append(beforeInstrumentationClasspath);", "+            args.append(\"\\\" \");", "+", "+            args.append(\"-c\").append(\"\\\"\").append(icCompiler);", "+            args.append(\" -classpath \").append(afterInstrumentationClasspath);", "+            args.append(\" -d \").append(buildDir).append(\"\\\" \");", "+", "+            args.append(\"-n\").append(\"\\\"\").append(icCompiler);", "+            args.append(\" -classpath \").append(repositoryClasspath);", "+            args.append(\"\\\" \");", "+", "-            args.append(\"-o\").append(instrumentDir).append(File.separator).append(\"@p\").append(File.separator).append(\"@f.@e \");", "-            args.append(\"-k\").append(repositoryDir).append(File.separator).append(\"@p \");", "+", "+            args.append(\"-o\").append(instrumentDir).append(File.separator);", "+            args.append(\"@p\").append(File.separator).append(\"@f.@e \");", "+", "+            args.append(\"-k\").append(repositoryDir).append(File.separator);", "+            args.append(\"@p \");", "+", "-            args.append(instrumentall ? \"-a \" : \"\");// reinstrument everything if controlFile exists and is newer than any class", "+            // reinstrument everything if controlFile exists and is newer", "+            // than any class", "+            args.append(instrumentall ? \"-a \" : \"\");", "-//System.out.println( \"JAVA -classpath \" + iContractClasspath + \" com.reliablesystems.iContract.Tool \" + args.toString() );", "+            //System.out.println( \"JAVA -classpath \" + iContractClasspath", "+            //    + \" com.reliablesystems.iContract.Tool \" + args.toString() );", "-                    log(\"File icontrol.properties not found. That's ok. Writing a default one.\");", "+                    log(\"File icontrol.properties not found. That's ok. \"", "+                        + \"Writing a default one.\");", "-                iControlProps.setProperty(\"sourceRoot\", srcDir.getAbsolutePath());", "-                iControlProps.setProperty(\"classRoot\", classDir.getAbsolutePath());", "-                iControlProps.setProperty(\"classpath\", afterInstrumentationClasspath.toString());", "-                iControlProps.setProperty(\"controlFile\", controlFile.getAbsolutePath());", "-                iControlProps.setProperty(\"targetsFile\", targets.getAbsolutePath());", "+                iControlProps.setProperty(\"sourceRoot\",", "+                    srcDir.getAbsolutePath());", "+                iControlProps.setProperty(\"classRoot\",", "+                    classDir.getAbsolutePath());", "+                iControlProps.setProperty(\"classpath\",", "+                    afterInstrumentationClasspath.toString());", "+                iControlProps.setProperty(\"controlFile\",", "+                    controlFile.getAbsolutePath());", "+                iControlProps.setProperty(\"targetsFile\",", "+                    targets.getAbsolutePath());", "-                    iControlProps.store(new FileOutputStream(\"icontrol.properties\"), ICONTROL_PROPERTIES_HEADER);", "+                    iControlProps.store(new FileOutputStream(\"icontrol.properties\"),", "+                        ICONTROL_PROPERTIES_HEADER);", "-                    log(\"iContract can't be found on your classpath. Your classpath is:\");", "+                    log(\"iContract can't be found on your classpath. \"", "+                        + \"Your classpath is:\");", "-                    log(\"If you don't have the iContract jar, go get it at http://www.reliable-systems.com/tools/\");", "+                    log(\"If you don't have the iContract jar, go get it at \"", "+                        + \"http://www.reliable-systems.com/tools/\");", "-                throw new BuildException(\"iContract instrumentation failed. Code=\" + result);", "+                throw new BuildException(\"iContract instrumentation failed. \"", "+                    + \"Code = \" + result);"]}]}
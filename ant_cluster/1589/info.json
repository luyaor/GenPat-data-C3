{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "797b58d6014eb733a0a0fef501c241c9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "675a8ccd46fac2e710a5180e2b301602", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "3477bbf6474cdd2b70b12eb638e64415a4f1c2ec", "commitAfterChange": "134d95afef9b42cf08f2eccb077b97525ac38034", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 39, "signatureBeforeChange": "      private void generateMTFValues()", "signatureAfterChange": "      private void generateMTFValues()", "diff": ["-        char[] yy = new char[256];", "-        int  i, j;", "-        char tmp;", "-        char tmp2;", "-        int zPend;", "-        int wr;", "-        int EOB;", "+        final int last          = this.last;", "+        final Data data         = this.data;", "+        final boolean[] inUse   = data.inUse;", "+        final byte[] block      = data.block;", "+        final int[] fmap        = data.fmap;", "+        final char[] sfmap      = data.sfmap;", "+        final int[] mtfFreq     = data.mtfFreq;", "+        final byte[] unseqToSeq = data.unseqToSeq;", "+        final byte[] yy         = data.generateMTFValues_yy;", "-        makeMaps();", "-        EOB = nInUse + 1;", "+        // make maps", "+        int nInUse = 0;", "+        for (int i = 0; i < 256; i++) {", "+            if (inUse[i]) {", "+                unseqToSeq[i] = (byte) nInUse;", "+                nInUse++;", "+            }", "+        }", "+        this.nInUse = nInUse;", "-        for (i = 0; i <= EOB; i++) {", "+        final int eob = nInUse + 1;", "+", "+        for (int i = eob; i >= 0; i--) {", "-        wr = 0;", "-        zPend = 0;", "-        for (i = 0; i < nInUse; i++) {", "-            yy[i] = (char) i;", "+        for (int i = nInUse; --i >= 0;) {", "+            yy[i] = (byte) i;", "+        int wr = 0;", "+        int zPend = 0;", "-        for (i = 0; i <= last; i++) {", "-            char ll_i;", "+        for (int i = 0; i <= last; i++) {", "+            final byte ll_i = unseqToSeq[block[fmap[i]] & 0xff];", "+            byte tmp = yy[0];", "+            int j = 0;", "-            ll_i = unseqToSeq[block[zptr[i]]];", "-", "-            j = 0;", "-            tmp = yy[j];", "-                tmp2 = tmp;", "+                byte tmp2 = tmp;", "-            };", "+            }", "-                        switch (zPend % 2) {", "-                        case 0:", "-                            szptr[wr] = (short) RUNA;", "+                        if ((zPend & 1) == 0) {", "+                            sfmap[wr] = RUNA;", "-                            break;", "-                        case 1:", "-                            szptr[wr] = (short) RUNB;", "+                        } else {", "+                            sfmap[wr] = RUNB;", "-                            break;", "-                        };", "-                        if (zPend < 2) {", "+                        }", "+", "+                        if (zPend >= 2) {", "+                            zPend = (zPend - 2) >> 1;", "+                        } else {", "-                        zPend = (zPend - 2) / 2;", "-                    };", "+                    }", "-                szptr[wr] = (short) (j + 1);", "+                sfmap[wr] = (char) (j + 1);", "-                switch (zPend % 2) {", "-                case 0:", "-                    szptr[wr] = (short) RUNA;", "+                if ((zPend & 1) == 0) {", "+                    sfmap[wr] = RUNA;", "-                    break;", "-                case 1:", "-                    szptr[wr] = (short) RUNB;", "+                } else {", "+                    sfmap[wr] = RUNB;", "+                }", "+", "+                if (zPend >= 2) {", "+                    zPend = (zPend - 2) >> 1;", "+                } else {", "-                if (zPend < 2) {", "-                    break;", "-                }", "-                zPend = (zPend - 2) / 2;", "-        szptr[wr] = (short) EOB;", "-        wr++;", "-        mtfFreq[EOB]++;", "-", "-        nMTF = wr;", "+        sfmap[wr] = (char) eob;", "+        mtfFreq[eob]++;", "+        this.nMTF = wr + 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afe646174478d5338b7ff712ce2602ff", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "228fb9839c21a0a853598e114faca72c8e9340e7", "commitAfterChange": "9922008d657c72235c402343fd88847b044014ad", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 40, "signatureBeforeChange": "      private void generateMTFValues()", "signatureAfterChange": "      private void generateMTFValues()", "diff": ["-        char[] yy = new char[256];", "-        int  i, j;", "-        char tmp;", "-        char tmp2;", "-        int zPend;", "-        int wr;", "-        int EOB;", "+        final int lastShadow = this.last;", "+        final Data dataShadow = this.data;", "+        final boolean[] inUse = dataShadow.inUse;", "+        final byte[] block = dataShadow.block;", "+        final int[] fmap = dataShadow.fmap;", "+        final char[] sfmap = dataShadow.sfmap;", "+        final int[] mtfFreq = dataShadow.mtfFreq;", "+        final byte[] unseqToSeq = dataShadow.unseqToSeq;", "+        final byte[] yy = dataShadow.generateMTFValues_yy;", "-        makeMaps();", "-        EOB = nInUse + 1;", "+        // make maps", "+        int nInUseShadow = 0;", "+        for (int i = 0; i < 256; i++) {", "+            if (inUse[i]) {", "+                unseqToSeq[i] = (byte) nInUseShadow;", "+                nInUseShadow++;", "+            }", "+        }", "+        this.nInUse = nInUseShadow;", "-        for (i = 0; i <= EOB; i++) {", "+        final int eob = nInUseShadow + 1;", "+", "+        for (int i = eob; i >= 0; i--) {", "-        wr = 0;", "-        zPend = 0;", "-        for (i = 0; i < nInUse; i++) {", "-            yy[i] = (char) i;", "+        for (int i = nInUseShadow; --i >= 0;) {", "+            yy[i] = (byte) i;", "+        int wr = 0;", "+        int zPend = 0;", "-        for (i = 0; i <= last; i++) {", "-            char ll_i;", "+        for (int i = 0; i <= lastShadow; i++) {", "+            final byte ll_i = unseqToSeq[block[fmap[i]] & 0xff];", "+            byte tmp = yy[0];", "+            int j = 0;", "-            ll_i = unseqToSeq[block[zptr[i]]];", "-", "-            j = 0;", "-            tmp = yy[j];", "-                tmp2 = tmp;", "+                byte tmp2 = tmp;", "-                        switch (zPend % 2) {", "-                        case 0:", "-                            szptr[wr] = (short) RUNA;", "+                        if ((zPend & 1) == 0) {", "+                            sfmap[wr] = RUNA;", "-                            break;", "-                        case 1:", "-                            szptr[wr] = (short) RUNB;", "+                        } else {", "+                            sfmap[wr] = RUNB;", "+                        }", "+", "+                        if (zPend >= 2) {", "+                            zPend = (zPend - 2) >> 1;", "+                        } else {", "-                        if (zPend < 2) {", "-                            break;", "-                        }", "-                        zPend = (zPend - 2) / 2;", "-                szptr[wr] = (short) (j + 1);", "+                sfmap[wr] = (char) (j + 1);", "-                switch (zPend % 2) {", "-                case 0:", "-                    szptr[wr] = (short) RUNA;", "+                if ((zPend & 1) == 0) {", "+                    sfmap[wr] = RUNA;", "-                    break;", "-                case 1:", "-                    szptr[wr] = (short) RUNB;", "+                } else {", "+                    sfmap[wr] = RUNB;", "+                }", "+", "+                if (zPend >= 2) {", "+                    zPend = (zPend - 2) >> 1;", "+                } else {", "-                if (zPend < 2) {", "-                    break;", "-                }", "-                zPend = (zPend - 2) / 2;", "-        szptr[wr] = (short) EOB;", "-        wr++;", "-        mtfFreq[EOB]++;", "-", "-        nMTF = wr;", "+        sfmap[wr] = (char) eob;", "+        mtfFreq[eob]++;", "+        this.nMTF = wr + 1;"]}]}
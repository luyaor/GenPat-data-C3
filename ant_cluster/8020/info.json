{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "78dc8b25a3972dd66f3e35e85b6712e3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "015f3895d21c671929582ac1f81dc012", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/DOMElementWriter.java", "commitBeforeChange": "a0b111116d82b1ab530e3237b9b1706455052771", "commitAfterChange": "b7b59490a82c8b2df3c580a2f2502cc28b8e75d8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void openElement(Element element, Writer out, int indent,                             String indentWith, boolean hasChildren)         throws IOException", "signatureAfterChange": "     public void openElement(Element element, Writer out, int indent,                             String indentWith, boolean hasChildren)         throws IOException", "diff": ["+        if (namespacePolicy.qualifyElements) {", "+            String prefix = (String) nsPrefixMap.get(element.getNamespaceURI());", "+            if (prefix == null) {", "+                if (nsPrefixMap.isEmpty()) {", "+                    // steal default namespace", "+                    prefix = \"\";", "+                } else {", "+                    prefix = NS + (nextPrefix++);", "+                }", "+                nsPrefixMap.put(element.getNamespaceURI(), prefix);", "+                addNSDefinition(element, element.getNamespaceURI());", "+            }", "+            if (!\"\".equals(prefix)) {", "+                out.write(prefix);", "+                out.write(\":\");", "+            }", "+        }", "+            if (namespacePolicy.qualifyAttributes) {", "+                String prefix =", "+                    (String) nsPrefixMap.get(attr.getNamespaceURI());", "+                if (prefix == null) {", "+                    prefix = NS + (nextPrefix++);", "+                    nsPrefixMap.put(attr.getNamespaceURI(), prefix);", "+                    addNSDefinition(element, attr.getNamespaceURI());", "+                }", "+                out.write(prefix);", "+                out.write(\":\");", "+            }", "+", "+        // write namespace declarations", "+        ArrayList al = (ArrayList) nsURIByElement.get(element);", "+        if (al != null) {", "+            Iterator iter = al.iterator();", "+            while (iter.hasNext()) {", "+                String uri = (String) iter.next();", "+                String prefix = (String) nsPrefixMap.get(uri);", "+                out.write(\" xmlns\");", "+                if (!\"\".equals(prefix)) {", "+                    out.write(\":\");", "+                    out.write(prefix);", "+                }", "+                out.write(\"=\\\"\");", "+                out.write(uri);", "+                out.write(\"\\\"\");", "+            }", "+        }", "+", "+            removeNSDefinitions(element);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "316287d3966f1c0a5340d2b0fa0de356", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "47a487c0dd073ced71720ad46588eeb38e12e47c", "commitAfterChange": "67c71a89e9e02b6e4841f748c79350b7ca190a00", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     protected void addPathFile(File pathComponent) throws IOException", "signatureAfterChange": "     protected void addPathFile(File pathComponent) throws IOException", "diff": ["+        if (pathComponent.isDirectory()) {", "+            return;", "+        }", "+", "+        String absPathPlusTimeAndLength =", "+            pathComponent.getAbsolutePath() + pathComponent.lastModified() + \"-\"", "+            + pathComponent.length();", "+        String classpath = (String) pathMap.get(absPathPlusTimeAndLength);", "+        if (classpath == null) {", "+            ZipFile jarFile = null;", "+            InputStream manifestStream = null;", "+            try {", "+                jarFile = new ZipFile(pathComponent);", "+                manifestStream", "+                    = jarFile.getInputStream(new ZipEntry(\"META-INF/MANIFEST.MF\"));", "+", "+                if (manifestStream == null) {", "+                    return;", "+                }", "+                Reader manifestReader", "+                    = new InputStreamReader(manifestStream, \"UTF-8\");", "+                org.apache.tools.ant.taskdefs.Manifest manifest", "+                    = new org.apache.tools.ant.taskdefs.Manifest(manifestReader);", "+                classpath", "+                    = manifest.getMainSection().getAttributeValue(\"Class-Path\");", "+", "+            } catch (org.apache.tools.ant.taskdefs.ManifestException e) {", "+                // ignore", "+            } finally {", "+                if (manifestStream != null) {", "+                    manifestStream.close();", "+                }", "+                if (jarFile != null) {", "+                    jarFile.close();", "+                }", "+            }", "+            if (classpath == null) {", "+                classpath = \"\";", "+            }", "+            pathMap.put(absPathPlusTimeAndLength, classpath);", "+        }", "+", "+        if (!\"\".equals(classpath)) {", "+            URL baseURL = FILE_UTILS.getFileURL(pathComponent);", "+            StringTokenizer st = new StringTokenizer(classpath);", "+            while (st.hasMoreTokens()) {", "+                String classpathElement = st.nextToken();", "+                URL libraryURL = new URL(baseURL, classpathElement);", "+                if (!libraryURL.getProtocol().equals(\"file\")) {", "+                    log(\"Skipping jar library \" + classpathElement", "+                        + \" since only relative URLs are supported by this\"", "+                        + \" loader\", Project.MSG_VERBOSE);", "+                    continue;", "+                }", "+                File libraryFile = new File(libraryURL.getFile());", "+                if (libraryFile.exists() && !isInPath(libraryFile)) {", "+                    addPathFile(libraryFile);", "+                }", "+            }", "+        }"]}]}
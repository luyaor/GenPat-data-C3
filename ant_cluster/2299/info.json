{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "633fea55f7c158990e0901aa555f5988", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51d43433083d8edc21aff7b8a40c036b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Expand.java", "commitBeforeChange": "e22d7c50937ee1d155f91bfd635673bd41017e76", "commitAfterChange": "95fa304e14c4cc49d84e089ea13107a35b68f8d5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        if (dest == null && outFile == null) {", "+        if (dest == null) {", "-                \"Dest and/or the OutFile attribute \" +", "-                \"must be specified\");", "+                \"Dest attribute must be specified\");", "-        if (dest != null && dest.exists() && !dest.isDirectory()) {", "+        if (dest.exists() && !dest.isDirectory()) {", "-        }", "-", "-        if (verbose && outFile == null) {", "-            throw new BuildException(", "-                \"Verbose can be set only when OutFile is \" +", "-                \"specified\");", "-        try {", "-            if (outFile != null) {", "-                if (outFile.isDirectory()) {", "-                    throw new BuildException(\"Outfile \" + outFile", "-                        + \" must not be a directory.\");", "-                }", "-                if (!outFile.exists()) {", "-                    File parent = new File(outFile.getParent());", "-                    if (!parent.exists()) {", "-                        if (!parent.mkdirs()) {", "-                            throw new BuildException(\"Unable to create \"", "-                                + outFile);", "-                        }", "-                    }", "-                }", "-                fw = new FileWriter(outFile);", "-                bw = new BufferedWriter(fw);", "-                pw = new PrintWriter(bw, true);", "-            }", "-        } catch (IOException ioe) {", "-            throw new BuildException(ioe.getMessage(), location);", "-        }", "-                // get all the files in the descriptor directory", "-                DirectoryScanner ds = super.getDirectoryScanner(source);", "-", "-                String[] files = ds.getIncludedFiles();", "-                for (int i = 0; i < files.length; ++i) {", "-                    File file = new File(source, files[i]);", "-                    expandFile(fileUtils, file, dest);", "-                }", "-            }", "-            else {", "+                throw new BuildException(\"Src must not be a directory.\" +", "+                    \" Use nested filesets instead.\", location);", "+            } else {", "-        if (pw != null) {", "-            pw.close();", "-        }", "-        if (bw != null) {", "-            try {", "-                bw.close();", "-            } catch (IOException ioe1) {}", "-        }", "-        if (fw != null) {", "-            try {", "-                fw.close();", "-            } catch (IOException ioe1) {", "-                //Oh, well!  We did our best", "-            }", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d30158eb3c3c7e6ac6b368786ca89660", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "49f0cadf53584f85d31718f3413ea2c8fbf77274", "commitAfterChange": "94e18bdaaa70e6e4f333cae68ee7721e062b9807", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            if (file != null) {", "-                if (file.exists()) {", "-                    if (destFile == null) {", "-                        destFile = new File(destDir, file.getName());", "-                    }", "-                    if (forceOverwrite || !destFile.exists()", "-                        || (file.lastModified() - granularity", "-                                > destFile.lastModified())) {", "-                        fileCopyMap.put(file.getAbsolutePath(),", "-                                        new String[] {destFile.getAbsolutePath()});", "-                    } else {", "-                        log(file + \" omitted as \" + destFile", "-                            + \" is up to date.\", Project.MSG_VERBOSE);", "-                    }", "-                } else {", "-                    String message = \"Warning: Could not find file \"", "-                        + file.getAbsolutePath() + \" to copy.\";", "-                    if (!failonerror) {", "-                        log(message, Project.MSG_ERR);", "-                    } else {", "-                        throw new BuildException(message);", "-                    }", "-                }", "-            }", "+            copySingleFile();", "+", "-            Iterator iter = baseDirs.iterator();", "-            while (iter.hasNext()) {", "-                File f = (File) iter.next();", "-                List files = (List) filesByBasedir.get(f);", "-                List dirs = (List) dirsByBasedir.get(f);", "-", "-                String[] srcFiles = new String[0];", "-                if (files != null) {", "-                    srcFiles = (String[]) files.toArray(srcFiles);", "-                }", "-                String[] srcDirs = new String[0];", "-                if (dirs != null) {", "-                    srcDirs = (String[]) dirs.toArray(srcDirs);", "-                }", "-                scan(f == NULL_FILE_PLACEHOLDER ? null : f, destDir, srcFiles,", "-                     srcDirs);", "-            }", "+            iterateOverBaseDirs(baseDirs, dirsByBasedir, filesByBasedir);"]}]}
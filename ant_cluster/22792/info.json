{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c865aec845e3c92cef2d0bbc2b63cbd0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b96dc376b67f08ed043d29f06f1467d4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "3c7ae9e72597eae42af15839f7d0b3ea87cfdb30", "commitAfterChange": "5976d0048ddc66f2b695ba2c41c1a3ed3b08424d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      protected static void hbMakeCodeLengths(char[] len, int[] freq,                                             int alphaSize, int maxLen)", "signatureAfterChange": "      protected static void hbMakeCodeLengths(char[] len, int[] freq,                                             int alphaSize, int maxLen)", "diff": ["-        int heap[] = new int[MAX_ALPHA_SIZE + 2];", "-        int weight[] = new int[MAX_ALPHA_SIZE * 2];", "-        int parent[] = new int[MAX_ALPHA_SIZE * 2];", "+        int[] heap = new int[MAX_ALPHA_SIZE + 2];", "+        int[] weight = new int[MAX_ALPHA_SIZE * 2];", "+        int[] parent = new int[MAX_ALPHA_SIZE * 2];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8c96273163396cfc1bd6ffc1c64d63d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "ad91082694f9344ae3020e16cf9351e48b751b0b", "commitAfterChange": "bab9e2d799ee887bc0a404b4acdec0366234eafe", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      protected static void hbMakeCodeLengths( char[] len, int[] freq,                                              int alphaSize, int maxLen )", "signatureAfterChange": "      protected static void hbMakeCodeLengths( char[] len, int[] freq,                                              int alphaSize, int maxLen )", "diff": ["-        int heap[] = new int[ MAX_ALPHA_SIZE + 2 ];", "-        int weight[] = new int[ MAX_ALPHA_SIZE * 2 ];", "-        int parent[] = new int[ MAX_ALPHA_SIZE * 2 ];", "+        int[] heap = new int[ MAX_ALPHA_SIZE + 2 ];", "+        int[] weight = new int[ MAX_ALPHA_SIZE * 2 ];", "+        int[] parent = new int[ MAX_ALPHA_SIZE * 2 ];", "-        for( i = 0; i < alphaSize; i++ ) {", "+        for( i = 0; i < alphaSize; i++ )", "+        {", "-            if( !( nHeap < ( MAX_ALPHA_SIZE + 2 ) ) ) {", "+            if( !( nHeap < ( MAX_ALPHA_SIZE + 2 ) ) )", "+            {", "-                        if( yy > nHeap ) {", "+                        if( yy > nHeap )", "+                        {", "-                            weight[ heap[ yy + 1 ] ] < weight[ heap[ yy ] ] ) {", "+                            weight[ heap[ yy + 1 ] ] < weight[ heap[ yy ] ] )", "+                        {", "-                        if( weight[ tmp ] < weight[ heap[ yy ] ] ) {", "+                        if( weight[ tmp ] < weight[ heap[ yy ] ] )", "+                        {", "-                        if( yy > nHeap ) {", "+                        if( yy > nHeap )", "+                        {", "-                            weight[ heap[ yy + 1 ] ] < weight[ heap[ yy ] ] ) {", "+                            weight[ heap[ yy + 1 ] ] < weight[ heap[ yy ] ] )", "+                        {", "-                        if( weight[ tmp ] < weight[ heap[ yy ] ] ) {", "+                        if( weight[ tmp ] < weight[ heap[ yy ] ] )", "+                        {", "-            if( !( nNodes < ( MAX_ALPHA_SIZE * 2 ) ) ) {", "+            if( !( nNodes < ( MAX_ALPHA_SIZE * 2 ) ) )", "+            {", "-                if( j > maxLen ) {", "+                if( j > maxLen )", "+                {", "-            if( !tooLong ) {", "+            if( !tooLong )", "+            {"]}]}
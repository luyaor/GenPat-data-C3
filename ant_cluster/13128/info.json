{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "44dd0b9df8c445e3d2d59413c1815e49", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c02103b70f3531a6987765403f302171", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/modules/core/RegisterTasklet.java", "commitBeforeChange": "b689612fa923ba74b5c89dc891aeff801799e555", "commitAfterChange": "6b4ce7ff5608d4faf76cf400854db8126b946fbb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     protected void registerResource( final String name,                                       final String classname,                                       final URL url )         throws TaskException, RegistryException", "signatureAfterChange": "     protected void registerResource( final String name,                                      final String className,                                      final URL url )         throws TaskException", "diff": ["-    protected void registerResource( final String name, ", "-                                     final String classname, ", "+    protected void registerResource( final String name,", "+                                     final String className,", "-        throws TaskException, RegistryException ", "+        throws TaskException", "-        if( null == classname )", "+        if( null == className )", "-            try { m_tskDeployer.deployTask( name, url.toString(), url ); }", "+            try { getDeployer().deployTask( name, url.toString(), url ); }", "-            final DefaultLocator locator = new DefaultLocator( classname, url );", "-            m_engine.getRegistry().register( name, locator ); ", "+            final DefaultComponentFactory factory = ", "+                new DefaultComponentFactory( new URL[] { url } );", "+            factory.addNameClassMapping( name, className );", "+            try { getTypeManager().registerType( Task.ROLE, name, factory ); }", "+            catch( final Exception e )", "+            {", "+                throw new TaskException( \"Failed registering \" + name + \" from \" + url, e );", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec75f1c503cce4482143a2fd21c801e6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/modules/core/RegisterDataType.java", "commitBeforeChange": "b689612fa923ba74b5c89dc891aeff801799e555", "commitAfterChange": "6b4ce7ff5608d4faf76cf400854db8126b946fbb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     protected void registerResource( final String name,                                      final String classname,                                      final URL url )         throws TaskException, RegistryException", "signatureAfterChange": "     protected void registerResource( final String name,                                      final String className,                                      final URL url )         throws TaskException", "diff": ["-                                     final String classname,", "+                                     final String className,", "-        throws TaskException, RegistryException", "+        throws TaskException", "-        if( null == classname )", "+        if( null == className )", "-            try { m_tskDeployer.deployDataType( name, url.toString(), url ); }", "+            try { getDeployer().deployDataType( name, url.toString(), url ); }", "-            final DefaultLocator locator = new DefaultLocator( classname, url );", "-            m_dataTypeEngine.getRegistry().register( name, locator );", "+            final DefaultComponentFactory factory = ", "+                new DefaultComponentFactory( new URL[] { url } );", "+            factory.addNameClassMapping( name, className );", "+            try { getTypeManager().registerType( \"org.apache.ant.tasklet.DataType\", name, factory ); }", "+            catch( final Exception e )", "+            {", "+                throw new TaskException( \"Failed registering \" + name + \" from \" + url, e );", "+            }"]}]}
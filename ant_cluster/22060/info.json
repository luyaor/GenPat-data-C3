{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "32a4e00800715eefe30a5ebf72361ad1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "020b4e6608864bd96969a78b1190b232", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/Cab.java", "commitBeforeChange": "f1fd5e5e8a65a3463feb6226f4b827fc55417e51", "commitAfterChange": "1e760c7354cf76a820bf05aa29881ca9154757fc", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-                Process p = Execute.launch(getProject(), ", "+                Process p = Execute.launch(getProject(),", "-                ", "+", "-                throw new BuildException(msg);", "+                throw new BuildException(msg, getLocation());", "-                exec.setCommand(createCommand(listFile));", "+                exec.setExecutable(\"cabarc\");", "+                exec.createArg().setValue(\"-r\");", "+                exec.createArg().setValue(\"-p\");", "+", "+                if (!doCompress) {", "+                    exec.createArg().setValue(\"-m\");", "+                    exec.createArg().setValue(\"none\");", "+                }", "+", "+                if (cmdOptions != null) {", "+                    exec.createArg().setLine(cmdOptions);", "+                }", "+", "+                exec.createArg().setValue(\"n\");", "+                exec.createArg().setFile(cabFile);", "+                exec.createArg().setValue(\"@\" + listFile.getAbsolutePath());", "+", "-                throw new BuildException(msg);", "+                throw new BuildException(msg, getLocation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e942739a63d0f56b759116a47d83a41b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Length.java", "commitBeforeChange": "60a709d594d002a017dddb2d2cd9c141f250de94", "commitAfterChange": "4122b8a95fe61f58e29b2ddcf1c8ee39ccd0a4f6", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private void handleFilesets(Handler h)", "signatureAfterChange": "      private void handleFilesets(Handler h)", "diff": ["-        HashSet included = new HashSet(filesets.size() * 10);", "+        HashSet included = new HashSet(filesets.size());", "-            File basedir = fs.getDir(getProject());", "-                File file = FileUtils.getFileUtils().resolveFile(basedir, f[j]);", "-                if (included.add(file)) {", "-                    h.handle(file);", "+                Resource r = ds.getResource(f[j]);", "+                if (!r.isExists()) {", "+                    log(r.getName() + \" does not exist\", Project.MSG_ERR);", "+                } else if (r.isDirectory()) {", "+                    log(r.getName() + \" is a directory; length unspecified\",", "+                        Project.MSG_ERR);", "+                } else {", "+                    //clone the Resource and alter path", "+                    File basedir = ds.getBasedir();", "+                    if (basedir != null) {", "+                        r = (Resource) (r.clone());", "+                        r.setName(FileUtils.getFileUtils().resolveFile(", "+                            basedir, r.getName()).getAbsolutePath());", "+                    }", "+                    if (included.add(r.getName())) {", "+                        h.handle(r);", "+                    }", "-    }"]}]}
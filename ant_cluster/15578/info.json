{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b2b9012718609f01732fe6b97a7db75d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04831766d358f8e1dcb4234b74769efa", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ComponentManager.java", "commitBeforeChange": "26d9c6536e7e605b92a6e4b20eb0cd25e116a689", "commitAfterChange": "f19f07d6e4c72f241057ecfc32d80be21201bbf7", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private Object createComponent(String componentName, BuildElement model)          throws AntException", "signatureAfterChange": "     private Object createComponent(String componentName, BuildElement model)          throws AntException", "diff": ["-        Object component = null;", "-        if (model != null) {", "-            for (Iterator i = aspects.iterator(); i.hasNext();) {", "-                Aspect aspect = (Aspect) i.next();", "-                component = aspect.preCreateComponent(component, model);", "-            }", "+        ImportInfo importInfo = getImport(componentName);", "+        if (importInfo == null) {", "+            throw new ExecutionException(\"There is no definition of the <\"", "+            + componentName + \"> component\");", "+        String className = importInfo.getClassName();", "-        if (component == null) {", "-            ImportInfo importInfo = getImport(componentName);", "-            if (importInfo == null) {", "-                throw new ExecutionException(\"There is no definition of the <\"", "-                + componentName + \"> component\");", "-            }", "-            String className = importInfo.getClassName();", "-", "-            ComponentLibrary componentLibrary", "+        ComponentLibrary componentLibrary", "-            component = createComponentFromDef(componentName, componentLibrary,", "-                importInfo.getDefinition(), model);", "-        }", "-", "-        if (model != null) {", "-            for (Iterator i = aspects.iterator(); i.hasNext();) {", "-                Aspect aspect = (Aspect) i.next();", "-                component = aspect.postCreateComponent(component, model);", "-            }", "-        }", "-", "-        return component;", "+        return createComponentFromDef(componentName, componentLibrary,", "+            importInfo.getDefinition(), model);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06c2ad6255c9f0f640b3332b20f6eda8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ComponentManager.java", "commitBeforeChange": "fcc7e2b47f01468c83803caa09ce8266e56f213c", "commitAfterChange": "d571dff958cd85b5083a2a829f84e35b4abe4434", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     protected Object createComponent(String componentName, BuildElement model)          throws ExecutionException", "signatureAfterChange": "     private Object createComponent(String componentName, BuildElement model)          throws ExecutionException", "diff": ["-    protected Object createComponent(String componentName, BuildElement model)", "+    private Object createComponent(String componentName, BuildElement model)", "-        ImportInfo importInfo = getImport(componentName);", "-        if (importInfo == null) {", "-            throw new ExecutionException(\"There is no definition of the <\"", "-                 + componentName + \"> component\");", "+        Object component = null;", "+        if (model != null) {             ", "+            for (Iterator i = aspects.iterator(); i.hasNext();) {", "+                Aspect aspect = (Aspect) i.next();", "+                component = aspect.preCreateComponent(component, model);", "+            }", "-        String className = importInfo.getClassName();", "-", "-        ComponentLibrary componentLibrary", "-             = importInfo.getComponentLibrary();", "-", "-        return createComponentFromDef(componentName, componentLibrary,", "-            importInfo.getDefinition(), model);", "+        ", "+        if (component == null) {", "+            ImportInfo importInfo = getImport(componentName);", "+            if (importInfo == null) {", "+                throw new ExecutionException(\"There is no definition of the <\"", "+                + componentName + \"> component\");", "+            }", "+            String className = importInfo.getClassName();", "+            ", "+            ComponentLibrary componentLibrary", "+            = importInfo.getComponentLibrary();", "+            ", "+            component = createComponentFromDef(componentName, componentLibrary,", "+                importInfo.getDefinition(), model);", "+        }", "+        ", "+        if (model != null) {", "+            for (Iterator i = aspects.iterator(); i.hasNext();) {", "+                Aspect aspect = (Aspect) i.next();", "+                component = aspect.postCreateComponent(component, model);", "+            }", "+        }", "+        ", "+        return component;"]}]}
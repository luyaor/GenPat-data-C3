{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a33971b176ddf405b1933ac852e5df9", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3484abc7c5038753bde79ae4ab034ebe", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Delete.java", "commitBeforeChange": "d762cc911fe0a5b4e2b5a0dca6767152a4bba9c7", "commitAfterChange": "9aa711ca63ee79293281dce79933672280519137", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 38, "signatureBeforeChange": "     private boolean delete(File f)", "signatureAfterChange": "     private boolean delete(File f)", "diff": ["-                return f.delete();", "-                return f.delete();", "+                // Ignore Exception", "+            }", "+            if (!f.delete()) {", "+                if (deleteOnExit) {", "+                    int level = quiet ? Project.MSG_VERBOSE : Project.MSG_INFO;", "+                    log(\"Failed to delete \" + f + \", calling deleteOnExit\" + f, level);", "+                    f.deleteOnExit();", "+                    return true;", "+                }", "+                return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "840216debc67dbf604f6139d6d9e905b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "919e3d3e56ed1089f0807f5e05f1384ad1bccfef", "commitAfterChange": "3988c2b07fd29655c037192292c37094651864bd", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     public boolean createNewFile(File f) throws IOException", "signatureAfterChange": "     public boolean createNewFile(File f) throws IOException", "diff": ["-        if (f != null) {", "-            if (f.exists()) {", "-                return false;", "-            }", "-", "-            FileOutputStream fos = null;", "-            try {", "-                fos = new FileOutputStream(f);", "-                fos.write(new byte[0]);", "-            } finally {", "-                if (fos != null) {", "-                    fos.close();", "-                }", "-            }", "-", "-            return true;", "-        }", "-        return false;", "+        return f.createNewFile();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad10a751cd36abd97d4dcaba870c17d4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ReplaceRegExp.java", "commitBeforeChange": "7717aa2b685d16b86151c2d921d9a861a258361d", "commitAfterChange": "c3a903876567116c619bad264e20e31851d70c28", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     protected void doReplace(File f, int options)          throws IOException", "signatureAfterChange": "     protected void doReplace(File f, int options)          throws IOException", "diff": ["-                int flen = (int) f.length();", "-                char tmpBuf[] = new char[flen];", "-                int numread = 0;", "-                int totread = 0;", "-", "-                while (numread != -1 && totread < flen) {", "-                    numread = br.read(tmpBuf, totread, flen);", "-                    totread += numread;", "-                }", "-", "-                String buf = new String(tmpBuf);", "+                String buf = fileUtils.readFully(br);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e326b0e12bfc9f222d27b1034f58bf0b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/CollectionUtils.java", "commitBeforeChange": "d51249cf5c5453c8ddfe829ee608f7a9e7d87be0", "commitAfterChange": "72b6e42daea6a4d6b055b9ba6a3638b5ed90107a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static boolean equals(Vector v1, Vector v2)", "signatureAfterChange": "     public static boolean equals(Vector v1, Vector v2)", "diff": ["-        if (v1.size() != v2.size()) {", "-            return false;", "-        }", "-", "-        Enumeration e1 = v1.elements();", "-        Enumeration e2 = v2.elements();", "-        while (e1.hasMoreElements()) {", "-            if (!e1.nextElement().equals(e2.nextElement())) {", "-                return false;", "-            }", "-        }", "-", "-        // don't need to check e2.hasMoreElements as the Vectors have", "-        // same size.", "-", "-        return true;", "+        return v1.equals(v2);"]}]}
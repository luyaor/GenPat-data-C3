{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d26468a1d86cbddbbe96730f6ed8b40c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c2d4952a5d477d429a30ce2e86521ff", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/cvslib/CvsTagDiff.java", "commitBeforeChange": "a1853e2770a23f6ec76fd0c3ed2c0ea428ae40c6", "commitAfterChange": "70f35e75416468e31f537f33b248caaae29ee587", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            if (mypackage != null) {", "-                // support multiple packages", "-                StringTokenizer myTokenizer = new StringTokenizer(mypackage);", "-                while (myTokenizer.hasMoreTokens()) {", "-                    String pack = myTokenizer.nextToken();", "-                    packageNames.add(pack);", "-                    addCommandArgument(pack);", "-                }", "-            }", "-            for (Iterator iter = getModules().iterator(); iter.hasNext();) {", "-                AbstractCvsTask.Module m = (AbstractCvsTask.Module) iter.next();", "-                packageNames.add(m.getName());", "-                // will be added to command line in super.execute()", "-            }", "+            handlePackageNames();", "+            packageNamePrefixes = null;", "+            packageNamePrefixLengths = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a57f757ba24e6258f16851db32f364d8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "7fb63d79c61b77630a246e973d11904d331672e5", "commitAfterChange": "8b8cea1e308142afdc5e18146f768cb01a2a21d6", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "     private boolean isMorePowerfulThanExcludes(String name, String includepattern)", "signatureAfterChange": "     private boolean isMorePowerfulThanExcludes(String name, String includepattern)", "diff": ["-        String shortpattern = SelectorUtils.rtrimWildcardTokens(includepattern);", "+        String soughtexclude = name + File.separator + \"**\";", "-            String shortexclude = SelectorUtils.rtrimWildcardTokens(excludes[counter]);", "-            // here we are checking that the trimmed exclude pattern is not a plain directory", "-            // <exclude name=\"foo\"/> means exclude only the directory foo, but not its subdirs", "-            if (shortexclude.length() < excludes[counter].length()) {", "-                if (excludes[counter].charAt(shortexclude.length()) == File.separatorChar) {", "-                    if (matchPath(shortexclude, name, isCaseSensitive)) {", "-                        if (shortexclude.length() > shortpattern.length()) {", "-                            return false;", "-                        }", "-                    }", "-                }", "+            if (excludes[counter].equals(soughtexclude))  {", "+                return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5f0dc8591da65cb00da26cce1b3f4c7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/tasklet/engine/DefaultTaskletConfigurer.java", "commitBeforeChange": "66c74a2fceee359d38138fb601c1b639e99fb17d", "commitAfterChange": "19600e6d005c8bebbf6697bd00516e843f0a34f4", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      protected boolean setValue( final Object object,                                  Object value,                                  final Method method,                                 final Class sourceClass,                                 final String source )         throws ConfigurationException", "signatureAfterChange": "      protected boolean setValue( final Object object,                                  Object value,                                  final Method method,                                 final Class sourceClass,                                 final String source )         throws ConfigurationException", "diff": ["-            final String destination = parameterType.getName();", "-            ", "-                final ConverterInfo info = m_converterRegistry.", "-                    getConverterInfo( source, destination );", "-                ", "-                if( null == info ) return false;", "-              ", "-                final ConverterEntry entry = m_converterFactory.create( info );", "-                final Converter converter = entry.getConverter();", "-                value = converter.convert( parameterType, value );", "+                value = m_converter.convert( parameterType, object );", "-            catch( final FactoryException fe )", "+            catch( final ConverterException ce )", "-                throw new ConfigurationException( \"Badly configured ConverterFactory \",", "-                                                  fe );", "+                return false;"]}]}
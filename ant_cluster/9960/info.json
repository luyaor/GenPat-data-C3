{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7244258c940efe2ae8626ba79220721b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8de9f1a8694879e2e1b0ee3813cd08d1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/JavaTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void testJarNoFork()", "signatureAfterChange": "      @Test     public void testJarNoFork()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testJarNoFork\",", "-            \"parameter validation\",", "-            \"Cannot execute a jar in non-forked mode. \"", "-                + \"Please set fork='true'. \");", "+        try {", "+            buildRule.executeTarget(\"testJarNoFork\");", "+            fail(\"Build exception should have been thrown - parameter validation\");", "+        } catch (BuildException ex) {", "+            assertContains(\"Cannot execute a jar in non-forked mode. Please set fork='true'. \", ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d81a41c8fb4cb39da90bdf685d666acc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/JavaTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testNoJarNoClassname()", "signatureAfterChange": "      @Test     public void testNoJarNoClassname()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testNoJarNoClassname\",", "-            \"parameter validation\",", "-            \"Classname must not be null.\");", "+        try {", "+            buildRule.executeTarget(\"testNoJarNoClassname\");", "+            fail(\"Build exception should have been thrown - parameter validation\");", "+        } catch (BuildException ex) {", "+            assertContains(\"Classname must not be null.\", ex.getMessage());", "+        }"]}]}
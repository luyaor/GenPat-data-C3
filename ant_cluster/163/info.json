{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "efedbabe8ff48b297b72479c737d0f0e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43110368f8a7ffba986c5f03a8693ae6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Java.java", "commitBeforeChange": "5e898465ac1ab3d90fdc26dc34a2b87a2ea9be35", "commitAfterChange": "c5faebbd854cf6f4363402c2cd2a54749b4eeb61", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 14, "signatureBeforeChange": "     protected void run(String classname, Vector args) throws BuildException", "signatureAfterChange": "     protected void run(String classname, Vector args) throws BuildException", "diff": ["-        try {", "-            Class c = null;", "-            if (classpath == null) {", "-                c = Class.forName(classname);", "-            } ", "-            else {", "-                AntClassLoader loader = new AntClassLoader(project, classpath);", "-                c = loader.forceLoadClass(classname);", "-            }", "-        ", "-            Class[] param = { Class.forName(\"[Ljava.lang.String;\") };", "-            Method main = c.getMethod(\"main\", param);", "-            Object[] a = { array(args) };", "-            main.invoke(null, a);", "-        } catch (NullPointerException e) {", "-            throw new BuildException(\"Could not find main() method in \" + classname);", "-        } catch (ClassNotFoundException e) {", "-            throw new BuildException(\"Could not find \" + classname + \". Make sure you have it in your classpath\");", "-        } catch (InvocationTargetException e) {", "-            Throwable t = e.getTargetException();", "-            if (!(t instanceof SecurityException)) {", "-                throw new BuildException(t.toString());", "-            }", "-            // else ignore because the security exception is thrown", "-            // if the invoked application tried to call System.exit()", "-        } catch (Exception e) {", "-            throw new BuildException(e.toString());", "+        CommandlineJava cmdj = new CommandlineJava();", "+        cmdj.setClassname(classname);", "+        for (int i=0; i<args.size(); i++) {", "+            cmdj.createArgument().setValue((String) args.elementAt(i));", "+        if (cmdl.getClasspath() != null) {", "+            cmdj.createClasspath(project).append(cmdl.getClasspath());", "+        }", "+        run(cmdj);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97f077dce8d65b296394c75afeacd5c3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntTypeDefinition.java", "commitBeforeChange": "1296855c2f3fd08f04ccf92c0cbe45a9f2319b5c", "commitAfterChange": "b0003afe366c593c70d5af9b037ae55dee28df1e", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private Object createAndSet(Project project, Class c)", "signatureAfterChange": "     private Object createAndSet(Project project, Class c)", "diff": ["-            java.lang.reflect.Constructor ctor = null;", "-            boolean noArg = false;", "-            // DataType can have a \"no arg\" constructor or take a single", "-            // Project argument.", "-            try {", "-                ctor = c.getConstructor(new Class[0]);", "-                noArg = true;", "-            } catch (NoSuchMethodException nse) {", "-                ctor = c.getConstructor(new Class[] {Project.class});", "-                noArg = false;", "-            }", "-            Object o = ctor.newInstance(", "-                ((noArg) ? new Object[0] : new Object[] {project}));", "-", "-            project.setProjectReference(o);", "+            Object o = innerCreateAndSet(c, project);", "-        } catch (java.lang.reflect.InvocationTargetException ex) {", "+        } catch (InvocationTargetException ex) {", "-       } catch (Throwable t) {", "+        } catch (NoSuchMethodException nsme) {", "+            throw new BuildException(\"Could not create type \" + name", "+                    + \" as the class \" + c +\" has no compatible constructor\" );", "+        } catch (InstantiationException nsme) {", "+            throw new BuildException(\"Could not create type \" +", "+                    name", "+                    + \" as the class \" + c + \" is abstract\");", "+        } catch(IllegalAccessException e) {", "+            throw new BuildException(\"Could not create type \" +", "+                    name", "+                    + \" as the constructor \" + c + \" is not accessible\");", "+        } catch (Throwable t) {"]}]}
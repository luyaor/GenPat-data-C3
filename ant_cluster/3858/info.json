{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c5cc067bebffacb79c785a9c0d7138b8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecd5ea499f1c888dddc0fceeef2b1811", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/PropertyHelper.java", "commitBeforeChange": "c00d3f670bf0ede36467d3409170346af1a535d9", "commitAfterChange": "65b09851fd5134ce0a66954485bdff2db5783e40", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "     public synchronized void add(Delegate delegate)", "signatureAfterChange": "     public void add(Delegate delegate)", "diff": ["-    public synchronized void add(Delegate delegate) {", "-        for (Iterator iter = getDelegateInterfaces(delegate).iterator(); iter.hasNext();) {", "-            Object key = iter.next();", "-            List list = (List) delegates.get(key);", "-            if (list == null) {", "-                list = new ArrayList();", "-                delegates.put(key, list);", "+    public void add(Delegate delegate) {", "+        synchronized (Delegate.class) {", "+            Hashtable newDelegates = (Hashtable) delegates.clone();", "+            for (Iterator iter = getDelegateInterfaces(delegate).iterator(); iter.hasNext();) {", "+                Object key = iter.next();", "+                List list = (List) newDelegates.get(key);", "+                if (list == null) {", "+                    list = new ArrayList();", "+                    newDelegates.put(key, list);", "+                }", "+                if (list.contains(delegate)) {", "+                    list.remove(delegate);", "+                }", "+                list.add(0, delegate);", "-            if (list.contains(delegate)) {", "-                list.remove(delegate);", "-            }", "-            list.add(0, delegate);", "+            delegates = newDelegates;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f40ee6d13f7fe09bdb07b9665a718872", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/extension/JarLibDisplayTask.java", "commitBeforeChange": "f83f5c68c975f31a384cc24e94be4e5ebfa2da4d", "commitAfterChange": "f463bd2cab8b132695d8bf60c889212628eba281", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void execute()         throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-    public void execute()", "-        throws BuildException", "-    {", "+     */", "+    public void execute() throws BuildException {", "-        if( !m_filesets.isEmpty() )", "-        {", "-            final Iterator iterator = m_filesets.iterator();", "-            while( iterator.hasNext() )", "-            {", "-                final FileSet fileSet = (FileSet)iterator.next();", "-                final DirectoryScanner scanner = fileSet.getDirectoryScanner( getProject() );", "+        if (!libraryFileSets.isEmpty()) {", "+            final Iterator iterator = libraryFileSets.iterator();", "+            while (iterator.hasNext()) {", "+                final FileSet fileSet = (FileSet) iterator.next();", "+                final DirectoryScanner scanner", "+                    = fileSet.getDirectoryScanner(getProject());", "-                for( int i = 0; i < files.length; i++ )", "-                {", "-                    final File file = new File( basedir, files[ i ] );", "-                    displayer.displayLibrary( file );", "+                for (int i = 0; i < files.length; i++) {", "+                    final File file = new File(basedir, files[ i ]);", "+                    displayer.displayLibrary(file);", "-        }", "-        else", "-        {", "-            displayer.displayLibrary( m_file );", "+        } else {", "+            displayer.displayLibrary(libraryFile);"]}]}
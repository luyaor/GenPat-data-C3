{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b61f4e93152cb39b0910c115f27c4d5b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51eefeb380b56e92e5f76b5ce5561abf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ComponentHelper.java", "commitBeforeChange": "c569344ce1b0fcac34c21d79c03704ccadcb9af3", "commitAfterChange": "527056c9efc3468a3b3c2bd0aba9c3b249474eb4", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "          public boolean contains(Object clazz)", "signatureAfterChange": "          public boolean contains(Object clazz)", "diff": ["-            for (Iterator i = values().iterator(); i.hasNext();) {", "-                AntTypeDefinition def = (AntTypeDefinition) i.next();", "-                Class c = def.getExposedClass(project);", "-                if (c == clazz) {", "-                    return true;", "+            boolean found = false;", "+            if (clazz instanceof Class) {", "+                for (Iterator i = values().iterator(); i.hasNext() && !found;) {", "+                    found |= (((AntTypeDefinition)(i.next())).getExposedClass(", "+                        project) == clazz);", "-            return false;", "+            return found;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baef1afedbd2e44a5df89a9a206d21a8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/PropertyHelper.java", "commitBeforeChange": "d25488cbbb28cf25e1f91f714c70999fd105432d", "commitAfterChange": "3d706ab8188a674936880b6f4530b0cf3991758b", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "     public Object getProperty(String name)", "signatureAfterChange": "     public Object getProperty(String name)", "diff": ["-        for (Iterator iter = getDelegates(PropertyEvaluator.class).iterator(); iter.hasNext();) {", "-            Object o = ((PropertyEvaluator) iter.next()).evaluate(name, this);", "-            if (o != null) {", "-                if (o instanceof NullReturn) {", "-                    return null;", "-                }", "-                return o;", "+        for (PropertyEvaluator evaluator : getDelegates(PropertyEvaluator.class)) {", "+            final Object o = evaluator.evaluate(name, this);", "+            if (o == null) {", "+                continue;", "+            return o instanceof NullReturn ? null : o;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f6c259df4be3f92f89bf2b8d9246dab8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f328aa345bd20e20ed4ccaa4d7c8d14", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/JavaTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 28, "signatureBeforeChange": "      public void testFlushedInput() throws Exception", "signatureAfterChange": "      @Test     public void testFlushedInput() throws Exception", "diff": ["+    @Test", "-        project.setInputHandler(new DefaultInputHandler() {", "+        buildRule.getProject().setInputHandler(new DefaultInputHandler() {", "-        project.setDefaultInputStream(in);", "+        buildRule.getProject().setDefaultInputStream(in);", "-                    // don't care", "+                    throw new AssumptionViolatedException(\"Thread interrupted\", e);", "-        executeTarget(\"flushedInput\");", "+        buildRule.executeTarget(\"flushedInput\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa218a3ad0498a43a3405d62fc7073f8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/ReplaceRegExpTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testReplace() throws IOException", "signatureAfterChange": "      @Test     public void testReplace() throws IOException", "diff": ["+    @Test", "-            propsFile = new FileInputStream(new File(project.getBaseDir() + \"/replaceregexp.properties\"));", "+            propsFile = new FileInputStream(new File(buildRule.getProject().getBaseDir() + \"/replaceregexp.properties\"));", "-        executeTarget(\"testReplace\");", "+        buildRule.executeTarget(\"testReplace\");", "-            propsFile = new FileInputStream(new File(getOutputDir(), \"test.properties\"));", "+            propsFile = new FileInputStream(new File(buildRule.getOutputDir(), \"test.properties\"));", "-                propsFile = null;"]}]}
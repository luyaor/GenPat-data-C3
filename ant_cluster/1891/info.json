{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "522330fbbf6399129dbf0649cbddf691", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ac0e5cfa887f17525ce95f8cd797d52", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/junit/JUnitReportTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void testStackTraceLineBreaks() throws Exception", "signatureAfterChange": "     @Test     public void testStackTraceLineBreaks() throws Exception", "diff": ["+    @Test", "-        expectReportWithText(\"testStackTraceLineBreaks\", null);", "+        buildRule.executeTarget(\"testStackTraceLineBreaks\");", "+        assertIndexCreated();", "-            r = new FileReader(new File(getOutputDir(), \"html/sampleproject/coins/0_CoinTest.html\"));", "+            r = new FileReader(new File(buildRule.getOutputDir(), \"html/sampleproject/coins/0_CoinTest.html\"));", "-            assertTrue(\"output must contain <br>:\\n\" + report,", "-                       report.indexOf(\"junit.framework.AssertionFailedError: DOEG<br>\")", "-                   > -1);", "-            assertTrue(\"#51049: output must translate line breaks:\\n\" + report,", "-                       report.indexOf(\"cur['line.separator'] = '\\\\r\\\\n';\")", "-                   > -1);", "+            assertContains(\"output must contain <br>:\\n\" + report, \"junit.framework.AssertionFailedError: DOEG<br>\", report);", "+            assertContains(\"#51049: output must translate line breaks:\\n\" + report, \"cur['line.separator'] = '\\\\r\\\\n';\", report);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "daba150f1f88d6d439bbec631bdac672", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/ImportTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public void testImportError()", "signatureAfterChange": "      @Test     public void testImportError()", "diff": ["+    @Test", "-            configureProject(", "+            buildRule.configureProject(", "+            fail(\"Build exception should have been thrown\");", "-            assertTrue(", "-                \"expected location of build exception to be set\",", "-                (lo != null));", "-            assertTrue(", "-                \"expected location to contain calling file\",", "-                lo.getFileName().indexOf(\"import_bad_import.xml\") != -1);", "-            assertTrue(", "-                \"expected message of ex to contain called file\",", "-                ex.getMessage().indexOf(\"bad.xml\") != -1);", "-            return;", "+            assertNotNull(", "+                \"expected location of build exception to be set\", lo);", "+            assertContains(", "+                \"expected location to contain calling file\", \"import_bad_import.xml\", lo.getFileName());", "+            assertContains(", "+                \"expected message of ex to contain called file\", \"bad.xml\", ex.getMessage());", "-        assertTrue(", "-            \"Did not see build exception\",", "-            false);"]}]}
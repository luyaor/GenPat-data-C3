{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1bbae911bdcb40af9d4299f68d9bb6b8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b52e2c3b786a80f0066c06b32e3b617", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/jdepend/JDependTask.java", "commitBeforeChange": "eba9a3c2d98d12180af9eca571480f1d58af6361", "commitAfterChange": "a94ef2aa3bc2c2129b8cbe32eb41ef4f21023284", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     public int executeAsForked(CommandlineJava commandline,                                ExecuteWatchdog watchdog) throws BuildException", "signatureAfterChange": "     public int executeAsForked(CommandlineJava commandline,                                ExecuteWatchdog watchdog) throws BuildException", "diff": ["-        // This is deprecated - use classespath in the future", "-        String[] sourcesPath = getSourcespath().list();", "-        for (int i = 0; i < sourcesPath.length; i++) {", "-            File f = new File(sourcesPath[i]);", "+            // This is deprecated - use classespath in the future", "+            String[] sourcesPath = getSourcespath().list();", "+            for (int i = 0; i < sourcesPath.length; i++) {", "+                File f = new File(sourcesPath[i]);", "-            // not necessary as JDepend would fail, but why loose some time?", "-            if (!f.exists() || !f.isDirectory()) {", "-                throw new BuildException(\"\\\"\" + f.getPath() + \"\\\" does not \"", "-                                         + \"represent a valid directory. JDepend would fail.\");", "+                // not necessary as JDepend would fail, but why loose", "+                // some time?", "+                if (!f.exists() || !f.isDirectory()) {", "+                    throw new BuildException(\"\\\"\" + f.getPath() ", "+                                             + \"\\\" does not represent a valid\"", "+                                             + \" directory. JDepend would\"", "+                                             + \" fail.\");", "+                }", "+                commandline.createArgument().setValue(f.getPath());", "-            commandline.createArgument().setValue(f.getPath());", "-        }", "-        // This is the new way - use classespath - code is the same for now", "-        String[] classesPath = getClassespath().list();", "-        for (int i = 0; i < classesPath.length; i++) {", "-            File f = new File(classesPath[i]);", "-            // not necessary as JDepend would fail, but why loose some time?", "-            if (!f.exists() || !f.isDirectory()) {", "-                throw new BuildException(\"\\\"\" + f.getPath() + \"\\\" does not \"", "-                                         + \"represent a valid directory. JDepend would fail.\");", "+            // This is the new way - use classespath - code is the", "+            // same for now", "+            String[] classesPath = getClassespath().list();", "+            for (int i = 0; i < classesPath.length; i++) {", "+                File f = new File(classesPath[i]);", "+                // not necessary as JDepend would fail, but why loose", "+                // some time?", "+                if (!f.exists() || !f.isDirectory()) {", "+                    throw new BuildException(\"\\\"\" + f.getPath() ", "+                                             + \"\\\" does not represent a valid\"", "+                                             + \" directory. JDepend would\"", "+                                             + \" fail.\");", "+                }", "+                commandline.createArgument().setValue(f.getPath());", "-            commandline.createArgument().setValue(f.getPath());", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cbb85dd61df15cd614e728187b829d3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/Native2Ascii.java", "commitBeforeChange": "d2eddd7e4d3a7509fbebf87e11c1186073316be6", "commitAfterChange": "34c0080c09ba7c72241296abc4eb83e2ed9fd569", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void convert(String fileName) throws BuildException", "signatureAfterChange": "     private void convert(String srcName, String destName) throws BuildException", "diff": ["-    private void convert(String fileName) throws BuildException {", "+    private void convert(String srcName, String destName) throws BuildException {", "-        // Build the full file names, substuting the extension on the", "-        // destination file if needed.", "-        srcFile = new File(srcDir, fileName);", "+        // Build the full file names", "+        srcFile = new File(srcDir, srcName);", "+        destFile = new File(destDir, destName);", "-        if (extension != null){", "-            destFile", "-                = new File(destDir,", "-                           fileName.substring(0, fileName.lastIndexOf('.'))", "-                           + extension);", "-        }else{", "-            destFile = new File(destDir, fileName);", "-        }", "-        ", "+        // Make sure we're not about to clobber something", "+        if (srcFile.equals(destFile)){", "+            throw new BuildException(\"file \" + srcFile ", "+                                     + \" would overwrite its self\");", "+        }", "-        // Only process if dest not newer than src", "-        if (! destFile.exists()", "-            || (destFile.lastModified() < srcFile.lastModified())){", "-", "-            // Make sure we're not about to clobber something", "-            if (srcFile.equals(destFile)){", "-                throw new BuildException(\"file \" + srcFile ", "-                                         + \" would overwrite its self\");", "+        // Make intermediate directories if needed", "+        // XXX JDK 1.1 dosen't have File.getParentFile,", "+        String parentName = destFile.getParent();", "+        if (parentName != null){", "+            File parentFile = new File(parentName);", "+            ", "+            if ((! parentFile.exists()) && ( ! parentFile.mkdirs())){", "+                throw new BuildException(\"cannot create parent directory \"", "+                                         + parentName);", "-", "-            // Make intermediate directories if needed", "-            // XXX JDK 1.1 dosen't have File.getParentFile,", "-            String parentName = destFile.getParent();", "-            if (parentName != null){", "-                File parentFile = new File(parentName);", "-             ", "-                if ((! parentFile.exists()) && ( ! parentFile.mkdirs())){", "-                    throw new BuildException(\"cannot create parent directory \"", "-                                             + parentName);", "-                }", "-            }", "+        }", "-            log(\"converting \" + fileName, Project.MSG_VERBOSE);", "-            sun.tools.native2ascii.Main n2a", "-                = new sun.tools.native2ascii.Main();", "-            if(! n2a.convert(cmd.getArguments())){", "-                throw new BuildException(\"conversion failed\");", "+        log(\"converting \" + srcName, Project.MSG_VERBOSE);", "+        sun.tools.native2ascii.Main n2a", "+            = new sun.tools.native2ascii.Main();", "+        if(! n2a.convert(cmd.getArguments())){", "+            throw new BuildException(\"conversion failed\");", "+        }", "+    }"]}]}
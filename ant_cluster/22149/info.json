{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "98ba194d9ef305359bf43cb688d6faaf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4140ac16b051cdf77e8ef4506135e38f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "e13d922745cda9a00544c2010e21cafce218e709", "commitAfterChange": "fd507cf2d23a705cb42d8870b483ee3f65d0bc8f", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "      protected void doFileOperations()", "signatureAfterChange": "     protected void doFileOperations()", "diff": ["+     */", "+", "+        if (includeEmpty) {", "+            Enumeration e = dirCopyMap.elements();", "+            int count = 0;", "+            while (e.hasMoreElements()) {", "+                File d = new File((String)e.nextElement());", "+                if (!d.exists()) {", "+                    if (!d.mkdirs()) {", "+                        log(\"Unable to create directory \" + d.getAbsolutePath(), Project.MSG_ERR);", "+                    } else {", "+                        count++;", "+                    }", "+                }", "+            }", "+", "+            if (count > 0) {", "+                log(\"Copied \" + count + \" empty directories to \" + destDir.getAbsolutePath());", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94bd6e4e5bfeb9ed2423783ef3b17436", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Jar.java", "commitBeforeChange": "1fa5ccf5682707c6b5e33482b641009e48190013", "commitAfterChange": "bec2a0777e910345fa7877d5aaa209ddde0937e3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      protected void initZipOutputStream(ZipOutputStream zOut)         throws IOException, BuildException", "signatureAfterChange": "      protected void initZipOutputStream(ZipOutputStream zOut)         throws IOException, BuildException", "diff": ["-            // If no manifest is specified, add the default one.", "-            if (manifest == null) {", "-                execManifest = null;", "-            }", "-            else {", "-                execManifest = new Manifest();", "+            execManifest = getDefaultManifest();", "+", "+            if (manifest != null) {", "+            for (Enumeration e = execManifest.getWarnings(); e.hasMoreElements(); ) {", "+                log(\"Manifest warning: \" + (String)e.nextElement(), Project.MSG_WARN);", "+            }", "+        ", "+            // time to write the manifest", "+            ByteArrayOutputStream baos = new ByteArrayOutputStream();", "+            PrintWriter writer = new PrintWriter(baos);", "+            execManifest.write(writer);", "+            writer.flush();", "+        ", "+            ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());", "+            super.zipFile(bais, zOut, \"META-INF/MANIFEST.MF\", System.currentTimeMillis());", "-                log(\"Manifest is invalid: \" + e.getMessage(), Project.MSG_ERR);", "-                throw new BuildException(\"Invalid Manifest\", e, getLocation());", "+            log(\"Manifest is invalid: \" + e.getMessage(), Project.MSG_ERR);", "+            throw new BuildException(\"Invalid Manifest\", e, getLocation());"]}]}
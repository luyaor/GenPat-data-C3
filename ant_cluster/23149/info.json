{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "944557b5ffc89783f802a06332f58cd1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fcd49bce0527e34bbad926e6e62498a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/FixCRLF.java", "commitBeforeChange": "af7fb0127af235ba48a1e9ada6f7fc45847e53fa", "commitAfterChange": "a794b2b204995a03c2e3c117ff2c4749710e6840", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            \" cr=\" + (addcr==1 ? \"add\" : addcr==0 ? \"asis\" : \"remove\") +", "-            \" tab=\" + (addtab==1 ? \"add\" : addtab==0 ? \"asis\" : \"remove\") +", "-            \" eof=\" + (ctrlz==1 ? \"add\" : ctrlz==0 ? \"asis\" : \"remove\") +", "+            \" eol=\" +", "+\t    (eol==ASIS ? \"asis\" : eol==CR ? \"cr\" : eol==LF ? \"lf\" : \"crlf\") +", "+            \" tab=\" + (tabs==TABS ? \"add\" : tabs==ASIS ? \"asis\" : \"remove\") +", "+            \" eof=\" + (ctrlz==ADD ? \"add\" : ctrlz==ASIS ? \"asis\" : \"remove\") +", "-            File srcFile = new File(srcDir, files[i]);", "+\t    processFile(files[i]);", "+        }", "+    }", "-            // read the contents of the file", "-            int count = (int)srcFile.length();", "-            byte indata[] = new byte[count];", "-                FileInputStream inStream = new FileInputStream(srcFile);", "-                inStream.read(indata);", "-                inStream.close();", "-            // count the number of cr, lf,  and tab characters", "-            int cr = 0;", "-            int lf = 0;", "-            int tab = 0;", "-", "-            for (int k=0; k<count; k++) {", "-                byte c = indata[k];", "-                if (c == '\\r') cr++;", "-                if (c == '\\n') lf++;", "-                if (c == '\\t') tab++;", "-            }", "-", "-            // check for trailing eof", "-            boolean eof = ((count>0) && (indata[count-1] == 0x1A));", "-", "-            // log stats (before fixes)", "-            log(srcFile + \": size=\" + count + \" cr=\" + cr +", "-                        \" lf=\" + lf + \" tab=\" + tab + \" eof=\" + eof,", "-                        Project.MSG_VERBOSE);", "-", "-            // determine the output buffer size (slightly pessimisticly)", "-            int outsize = count;", "-            if (addcr  !=  0) outsize-=cr;", "-            if (addcr  == +1) outsize+=lf;", "-            if (addtab == -1) outsize+=tab*(tablength-1);", "-            if (ctrlz  == +1) outsize+=1;", "-", "-            // copy the data", "-            byte outdata[] = new byte[outsize];", "-            int o = 0;    // output offset", "-            int line = o; // beginning of line", "-            int col = 0;  // desired column", "-", "-            for (int k=0; k<count; k++) {", "-                switch (indata[k]) {", "-                    case (byte)' ':", "-                        // advance column", "-                        if (addtab == 0) outdata[o++]=(byte)' ';", "-                        col++;", "-                        break;", "-", "-                    case (byte)'\\t':", "-                        if (addtab == 0) {", "-                            // treat like any other character", "-                            outdata[o++]=(byte)'\\t';", "-                            col++;", "-                        } else {", "-                            // advance column to next tab stop", "-                            col = (col|(tablength-1))+1;", "-                        }", "-                        break;", "-", "-                    case (byte)'\\r':", "-                        if (addcr == 0) {", "-                            // treat like any other character", "-                            outdata[o++]=(byte)'\\r';", "-                            col++;", "-                        }", "-                        break;", "-", "-                    case (byte)'\\n':", "-                        // start a new line (optional CR followed by LF)", "-                        if (addcr == +1) outdata[o++]=(byte)'\\r';", "-                        outdata[o++]=(byte)'\\n';", "-                        line=o;", "-                        col=0;", "-                        break;", "-", "-                    default:", "-                        // add tabs if two or more spaces are required", "-                        if (addtab>0 && o+1<line+col) {", "-                            // determine logical column", "-                            int diff=o-line;", "-", "-                            // add tabs until this column would be passed", "-                            // note: the start of line is adjusted to match", "-                            while ((diff|(tablength-1))<col) {", "-                                outdata[o++]=(byte)'\\t';", "-                                line-=(tablength-1)-(diff&(tablength-1));", "-                                diff=o-line;", "-                            };", "-                        };", "-", "-                        // space out to desired column", "-                        while (o<line+col) outdata[o++]=(byte)' ';", "-", "-                        // append desired character", "-                        outdata[o++]=indata[k];", "-                        col++;", "-            }", "-            // add or remove an eof character as required", "-            if (ctrlz == +1) {", "-                if (outdata[o-1]!=0x1A) outdata[o++]=0x1A;", "-            } else if (ctrlz == -1) {", "-                if (o>2 && outdata[o-1]==0x0A && outdata[o-2]==0x1A) o--;", "-                if (o>1 && outdata[o-1]==0x1A) o--;", "-            }", "-            // output the data", "-            try {", "-                // Determine whether it should be written,", "-                // that is if it is different than the potentially already existing file", "-                boolean write = false;", "-                byte[] existingdata = indata;", "-                File destFile = srcFile;", "-                if (destDir != null) {", "-                    destFile = new File(destDir, files[i]);", "-                    if(destFile.isFile()) {", "-                        int len = (int)destFile.length();", "-                        if(len != o) {", "-                            write = true;", "-                        } else {", "-                            existingdata = new byte[len];", "-                                FileInputStream in = new FileInputStream(destFile);", "-                                in.read(existingdata);", "-                                in.close();", "-                        }", "-                    } else {", "-                        write = true;", "-                    }", "-                }", "-                if(!write) {", "-                    if(existingdata.length != o) {", "-                        write = true;", "-                    } else {", "-                        for(int j = 0; j < o; ++j) {", "-                            if(existingdata[j] != outdata[j]) {", "-                                write = true;", "-                                break;", "-                            }", "-                        }", "-                    }", "-", "-                if(write) {", "-                    log(destFile + \" is being written\", Project.MSG_VERBOSE);", "-                    FileOutputStream outStream = new FileOutputStream(destFile);", "-                    outStream.write(outdata,0,o);", "-                    outStream.close();", "-                } else {", "-                    log(destFile + \" is not written, as the contents are identical\",", "-                        Project.MSG_VERBOSE);", "-                }", "-        } /* end for */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70811a840b283d72cb0ff7586f2f9e3f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "380870c2b26a9f3289569dc2451178df3f05613e", "commitAfterChange": "ad9edf5f5ea4a8f2a974726eeb8e656c177357df", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 23, "signatureBeforeChange": "     private boolean mainSimpleSort(final Data dataShadow, final int lo, final int hi,                                    final int d)", "signatureAfterChange": "      private void simpleSort(int lo, int hi, int d)", "diff": ["-     */", "-    private boolean mainSimpleSort(final Data dataShadow, final int lo, final int hi,", "-                                   final int d) {", "-        final int bigN = hi - lo + 1;", "+", "+    private void simpleSort(int lo, int hi, int d) {", "+        int i, j, h, bigN, hp;", "+        int v;", "+", "+        bigN = hi - lo + 1;", "-            return this.firstAttempt && (this.workDone > this.workLimit);", "+            return;", "-        int hp = 0;", "-        while (INCS[hp] < bigN) {", "+        hp = 0;", "+        while (incs[hp] < bigN) {", "+        hp--;", "-        final int[] fmap            = dataShadow.fmap;", "-        final char[] quadrant       = dataShadow.quadrant;", "-        final byte[] block          = dataShadow.block;", "-        final int lastShadow              = this.last;", "-        final int lastPlus1         = lastShadow + 1;", "-        final boolean firstAttemptShadow  = this.firstAttempt;", "-        final int workLimitShadow         = this.workLimit;", "-        int workDoneShadow                = this.workDone;", "+        for (; hp >= 0; hp--) {", "+            h = incs[hp];", "-        // Following block contains unrolled code which could be shortened by", "-        // coding it in additional loops.", "-", "-        HP: while (--hp >= 0) {", "-            final int h = INCS[hp];", "-            final int mj = lo + h - 1;", "-", "-            for (int i = lo + h; i <= hi;) {", "-                // copy", "-                for (int k = 3; (i <= hi) && (--k >= 0); i++) {", "-                    final int v = fmap[i];", "-                    final int vd = v + d;", "-                    int j = i;", "-", "-                    //  for (int a;", "-                    //       (j > mj) && mainGtU((a = fmap[j - h]) + d, vd,", "-                    //                           block, quadrant, lastShadow);", "-                    //       j -= h) {", "-                    //      fmap[j] = a;", "-                    //  }", "-                    //", "-                    // unrolled version:", "-", "-                    // start inline mainGTU", "-                    boolean onceRunned = false;", "-                    int a = 0;", "-", "-                    HAMMER: while (true) {", "-                        if (onceRunned) {", "-                            fmap[j] = a;", "-                            if ((j -= h) <= mj) {", "-                                break HAMMER;", "-                            }", "-                        } else {", "-                            onceRunned = true;", "-                        }", "-", "-                        a = fmap[j - h];", "-                        int i1 = a + d;", "-                        int i2 = vd;", "-", "-                        // following could be done in a loop, but", "-                        // unrolled it for performance:", "-                        if (block[i1 + 1] == block[i2 + 1]) {", "-                            if (block[i1 + 2] == block[i2 + 2]) {", "-                                if (block[i1 + 3] == block[i2 + 3]) {", "-                                    if (block[i1 + 4] == block[i2 + 4]) {", "-                                        if (block[i1 + 5] == block[i2 + 5]) {", "-                                            if (block[(i1 += 6)]", "-                                                == block[(i2 += 6)]) {", "-                                                int x = lastShadow;", "-                                                X: while (x > 0) {", "-                                                    x -= 4;", "-", "-                                                    if (block[i1 + 1]", "-                                                        == block[i2 + 1]) {", "-                                                        if (quadrant[i1]", "-                                                            == quadrant[i2]) {", "-                                                            if (block[i1 + 2] == block[i2 + 2]) {", "-                                                                if (quadrant[i1 + 1] == quadrant[i2 + 1]) {", "-                                                                    if (block[i1 + 3] == block[i2 + 3]) {", "-                                                                        if (quadrant[i1 + 2] == quadrant[i2 + 2]) {", "-                                                                            if (block[i1 + 4] == block[i2 + 4]) {", "-                                                                                if (quadrant[i1 + 3] == quadrant[i2 + 3]) {", "-                                                                                    if ((i1 += 4) >= lastPlus1) {", "-                                                                                        i1 -= lastPlus1;", "-                                                                                    }", "-                                                                                    if ((i2 += 4) >= lastPlus1) {", "-                                                                                        i2 -= lastPlus1;", "-                                                                                    }", "-                                                                                    workDoneShadow++;", "-                                                                                    continue X;", "-                                                                                } else if ((quadrant[i1 + 3] > quadrant[i2 + 3])) {", "-                                                                                    continue HAMMER;", "-                                                                                } else {", "-                                                                                    break HAMMER;", "-                                                                                }", "-                                                                            } else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff)) {", "-                                                                                continue HAMMER;", "-                                                                            } else {", "-                                                                                break HAMMER;", "-                                                                            }", "-                                                                        } else if ((quadrant[i1 + 2] > quadrant[i2 + 2])) {", "-                                                                            continue HAMMER;", "-                                                                        } else {", "-                                                                            break HAMMER;", "-                                                                        }", "-                                                                    } else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff)) {", "-                                                                        continue HAMMER;", "-                                                                    } else {", "-                                                                        break HAMMER;", "-                                                                    }", "-                                                                } else if ((quadrant[i1 + 1] > quadrant[i2 + 1])) {", "-                                                                    continue HAMMER;", "-                                                                } else {", "-                                                                    break HAMMER;", "-                                                                }", "-                                                            } else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff)) {", "-                                                                continue HAMMER;", "-                                                            } else {", "-                                                                break HAMMER;", "-                                                            }", "-                                                        } else if ((quadrant[i1] > quadrant[i2])) {", "-                                                            continue HAMMER;", "-                                                        } else {", "-                                                            break HAMMER;", "-                                                        }", "-                                                    } else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff)) {", "-                                                        continue HAMMER;", "-                                                    } else {", "-                                                        break HAMMER;", "-                                                    }", "-", "-                                                }", "-                                                break HAMMER;", "-                                            } // while x > 0", "-                                            else {", "-                                                if ((block[i1] & 0xff)", "-                                                    > (block[i2] & 0xff)) {", "-                                                    continue HAMMER;", "-                                                } else {", "-                                                    break HAMMER;", "-                                                }", "-                                            }", "-                                        } else if ((block[i1 + 5] & 0xff)", "-                                                   > (block[i2 + 5] & 0xff)) {", "-                                            continue HAMMER;", "-                                        } else {", "-                                            break HAMMER;", "-                                        }", "-                                    } else if ((block[i1 + 4] & 0xff)", "-                                               > (block[i2 + 4] & 0xff)) {", "-                                        continue HAMMER;", "-                                    } else {", "-                                        break HAMMER;", "-                                    }", "-                                } else if ((block[i1 + 3] & 0xff)", "-                                           > (block[i2 + 3] & 0xff)) {", "-                                    continue HAMMER;", "-                                } else {", "-                                    break HAMMER;", "-                                }", "-                            } else if ((block[i1 + 2] & 0xff)", "-                                       > (block[i2 + 2] & 0xff)) {", "-                                continue HAMMER;", "-                            } else {", "-                                break HAMMER;", "-                            }", "-                        } else if ((block[i1 + 1] & 0xff)", "-                                   > (block[i2 + 1] & 0xff)) {", "-                            continue HAMMER;", "-                        } else {", "-                            break HAMMER;", "-                        }", "-", "-                    } // HAMMER", "-                    // end inline mainGTU", "-", "-                    fmap[j] = v;", "+            i = lo + h;", "+            while (true) {", "+                /* copy 1 */", "+                if (i > hi) {", "+                    break;", "-", "-                if (firstAttemptShadow && (i <= hi) && (workDoneShadow > workLimitShadow)) {", "-                    break HP;", "-                }", "-            }", "-        }", "-", "-        this.workDone = workDoneShadow;", "-        return firstAttemptShadow && (workDoneShadow > workLimitShadow);", "-    }", "+                v = zptr[i];", "+                j = i;", "+                while (fullGtU(zptr[j - h] + d, v + d)) {", "+                    zptr[j] = zptr[j - h];", "+                    j = j - h;", "+                    if (j <= (lo + h - 1)) {", "+                zptr[j] = v;", "+                i++;", "+                /* copy 2 */", "+                if (i > hi) {", "+                    break;", "+                }", "+                v = zptr[i];", "+                j = i;", "+                while (fullGtU(zptr[j - h] + d, v + d)) {", "+                    zptr[j] = zptr[j - h];", "+                    j = j - h;", "+                    if (j <= (lo + h - 1)) {", "+                        break;", "+                    }", "+                }", "+                zptr[j] = v;", "+                i++;", "+                /* copy 3 */", "+                if (i > hi) {", "+                    break;", "+                }", "+                v = zptr[i];", "+                j = i;", "+                while (fullGtU(zptr[j - h] + d, v + d)) {", "+                    zptr[j] = zptr[j - h];", "+                    j = j - h;", "+                    if (j <= (lo + h - 1)) {", "+                        break;", "+                    }", "+                }", "+                zptr[j] = v;", "+                i++;", "+                if (workDone > workLimit && firstAttempt) {", "+                    return;", "+        }", "+    }"]}]}
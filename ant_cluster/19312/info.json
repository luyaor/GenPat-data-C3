{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a1acd74156f72e52e54f5c3da2ac3732", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ae2a0f964ce762f68fdc7e311183520", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "0f3d4a58ff810fe461345dc833a8dabbff97c9a5", "commitAfterChange": "4ae976759285d73d6994b282ee195fa50e860143", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String inputEncoding, String outputEncoding,                          Project project)         throws IOException", "signatureAfterChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String inputEncoding, String outputEncoding,                          Project project)         throws IOException", "diff": ["+                    TokenFilter.LineTokenizer lineTokenizer = new TokenFilter.LineTokenizer();", "+                    lineTokenizer.setIncludeDelims(true);", "-                    String line = in.readLine();", "+                    String line = lineTokenizer.getToken(in);", "+                            // this should not happen, because the lines are returned with the end of line delimiter", "-                            if (filterSetsAvailable) {", "-                                newline = filters.replaceTokens(line);", "-                            } else {", "-                                newline = line;", "-                            }", "+                            newline = filters.replaceTokens(line);", "-                            out.newLine();", "-                        line = in.readLine();", "+                        line = lineTokenizer.getToken(in);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2aaf78bdfd73c4358d5477e93d409a7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/pvcs/Pvcs.java", "commitBeforeChange": "9dfd03133bf2e960f2eedf76f8292e1c7ba6bdfb", "commitAfterChange": "36012960a97b8415ce6bc7e03a4cb64ffabc4d68", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void createFolders(File file) throws IOException, ParseException", "signatureAfterChange": "     private void createFolders(File file) throws IOException, ParseException", "diff": ["-                if (line.startsWith(\"\\\"\\\\\")", "-                    || line.startsWith(\"\\\"/\")", "-                    || (line.length() > 3 && line.startsWith(\"\\\"\")", "-                        && Character.isLetter(line.charAt(1))", "-                        && String.valueOf(line.charAt(2)).equals(\":\")", "-                        && String.valueOf(line.charAt(3)).equals(\"\\\\\"))) {", "+                if (line.startsWith(\"\\\"\\\\\")    // Checking for \"\\", "+                    || line.startsWith(\"\\\"/\")  // or           \"/", "+                                               // or           \"X:\\...", "+                   || (line.length() > POS_3 && line.startsWith(\"\\\"\")", "+                        && Character.isLetter(line.charAt(POS_1))", "+                        && String.valueOf(line.charAt(POS_2)).equals(\":\")", "+                        && String.valueOf(line.charAt(POS_3)).equals(\"\\\\\"))) {"]}]}
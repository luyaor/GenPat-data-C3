{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "86b1d3e8b57b0dd3ab3a629e1338f965", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a5581e285af909043bb9fe30299bcb5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/libs/selftest/ConfigurationTest.java", "commitBeforeChange": "cbbb531caa5c893db781195998da3373a8816987", "commitAfterChange": "47e31ec91976431d9103a818237ea7f246d632d3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void configure( final Configuration configuration )         throws ConfigurationException", "signatureAfterChange": "      public void configure( final Configuration configuration )         throws ConfigurationException", "diff": ["-        String message = configuration.getAttribute( \"message\" );", "-", "-        Object object = null;", "-", "-        try { object = getContext().resolveValue( message ); }", "-        catch( final TaskException ae )", "-        {", "-            throw new ConfigurationException( \"Error resolving : \" + message, ae );", "-        }", "+        final String message = configuration.getAttribute( \"message\" );", "+        final Object object = resolve( message );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "498af33afaa42b998435d2685d827456", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/MakeUrl.java", "commitBeforeChange": "fce0b0c9d0c8db530d1838c7db5a78e08df7e49b", "commitAfterChange": "491f9f2e9cd11b9ea4069c08b866f587d6ac6df8", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private String toURL(File fileToConvert)", "signatureAfterChange": "     private String toURL(File fileToConvert)", "diff": ["-        try {", "-            //create the URL", "-            url = fileToConvert.toURI().toURL().toExternalForm();", "-            //set the property", "-        } catch (MalformedURLException e) {", "-            throw new BuildException(\"Could not convert \" + fileToConvert, e);", "-        }", "+        //create the URL", "+        //ant equivalent of  fileToConvert.toURI().toURL().toExternalForm();", "+        url = FileUtils.getFileUtils().toURI(fileToConvert.getAbsolutePath());", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c09257ad5d1e9a95793c3cc96d2ab122", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "cdce6d461862ce412141720750bf69724fdc5e08", "commitAfterChange": "6a7128309916100dc611f641797b7793ab087a3d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     protected void addPathFile(File pathComponent) throws IOException", "signatureAfterChange": "     protected void addPathFile(File pathComponent) throws IOException", "diff": ["-                String decodedPath = null;", "-                // try catch block required because URLDecoder.decode throws", "-                // exception on JDK 1.2", "-                try {", "-                    decodedPath = URLDecoder.decode(libraryURL.getFile());", "-                } catch (Exception exc) {", "-                    throw new BuildException(exc);", "-                }", "+                String decodedPath = Locator.decodeUri(libraryURL.getFile());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f84c4f8e4a2766dccf40ba16b362cb44", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "2091b2c9a5af65d5c46ec058ce02382a6cc0fe8f", "commitAfterChange": "7002aa3c760699ccac9f90d63fbbbf912a033b0b", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "     private TestResultHolder executeAsForked(JUnitTest test,                                              ExecuteWatchdog watchdog,                                              File casesFile)         throws BuildException", "signatureAfterChange": "     private TestResultHolder executeAsForked(JUnitTest test,                                              ExecuteWatchdog watchdog,                                              File casesFile)         throws BuildException", "diff": ["-        CommandlineJava cmd = null;", "-        try {", "-            cmd = (CommandlineJava) (getCommandline().clone());", "-        } catch (CloneNotSupportedException e) {", "-            throw new BuildException(\"This shouldn't happen\", e, getLocation());", "-        }", "+        CommandlineJava cmd = (CommandlineJava) (getCommandline().clone());"]}]}
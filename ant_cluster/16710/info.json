{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "453db95b55a0437bb00d63c9ab42fd71", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7421a6fd7b2d34650882f74e29efed72", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/svn/src/main/org/apache/tools/ant/taskdefs/svn/AbstractSvnTask.java", "commitBeforeChange": "53cde27dd34a3c692aea2ca0649324937a6202ca", "commitAfterChange": "daf1c91d108e2a14bed6c6a845e19a9e2b4b0969", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 35, "signatureBeforeChange": "     protected void configureCommandline(Commandline c)", "signatureAfterChange": "     protected void configureCommandline(Commandline c)", "diff": ["+        if (file != null) {", "+            c.createArgument(true).setValue(\"--file\");", "+            c.createArgument(true).setFile(file);", "+        }", "+        if (force) {", "+            c.createArgument(true).setValue(\"--force\");", "+        }", "+        if (recursive != null) {", "+            if (recursive.booleanValue()) {", "+                c.createArgument(true).setValue(\"--recursive\");", "+            } else {", "+                c.createArgument(true).setValue(\"--non-recursive\");", "+            }", "+        }", "+        if (targets != null) {", "+            c.createArgument(true).setValue(\"--targets\");", "+            c.createArgument(true).setFile(targets);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b79063a45647ab3183fb0305647e8fd1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "c35a248ef870c9f98b7eda39ba9e3653775aea82", "commitAfterChange": "4653e638dd921ac96a2e8583851b121e46477ae9", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void closeEntry() throws IOException", "signatureAfterChange": "     public void closeEntry() throws IOException", "diff": ["-        } else {", "+        } else if (raf == null) {", "+        } else { /* method is STORED and we used RandomAccessFile */", "+            long size = written - dataStart;", "+            entry.setSize(size);", "+            entry.setComprSize(size);", "+            entry.setCrc(realCrc);", "+        }", "+", "+        // If random access output, write the local file header containing", "+        // the correct CRC and compressed/uncompressed sizes", "+        if (raf != null) {", "+            long save = raf.getFilePointer();", "+", "+            raf.seek(localDataStart);", "+            writeOut((new ZipLong(entry.getCrc())).getBytes());", "+            writeOut((new ZipLong(entry.getCompressedSize())).getBytes());", "+            writeOut((new ZipLong(entry.getSize())).getBytes());", "+            raf.seek(save);", "-   }", "+    }"]}]}
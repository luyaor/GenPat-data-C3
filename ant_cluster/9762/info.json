{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cf5ec944d3758945920a44b3c6c76675", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02d08523bcee643a1df9534d0ca53d62", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/script/ScriptDef.java", "commitBeforeChange": "af007ba13234afc51a113ee612e6abad4642cad1", "commitAfterChange": "81b65c0eaa7fff0b658e28269907a36c3a83fc6b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public Object createNestedElement(String elementName)", "signatureAfterChange": "     public Object createNestedElement(String elementName)", "diff": ["-            Class instanceClass = null;", "-            try {", "-                instanceClass = Class.forName(classname, true, loader);", "-            } catch (Throwable e) {", "-                // try normal method", "-                try {", "-                    instanceClass = Class.forName(classname);", "-                } catch (Throwable e2) {", "-                    throw new BuildException(\"scriptdef: Unable to load \"", "-                        + \"class \" + classname + \" for nested element <\"", "-                        + elementName + \">\", e2);", "-                }", "+            try", "+            {", "+                instance = ClasspathUtils.newInstance(classname, loader);", "+            } catch (BuildException e) {", "+                instance = ClasspathUtils.newInstance(classname, ScriptDef.class.getClassLoader());", "-            try {", "-                instance = instanceClass.newInstance();", "-            } catch (Throwable e) {", "-                throw new BuildException(\"scriptdef: Unable to create \"", "-                    + \"element of class \" + classname + \" for nested \"", "-                    + \"element <\" + elementName + \">\", e);", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "354e340717fe75f8335f1c8b6b18438c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/deployer/DefaultTskDeployer.java", "commitBeforeChange": "7b722732fbbdb511be32f94588d43f55b0b51f65", "commitAfterChange": "8d9a74fe25ffb24cb1b8a2c6a191ea3ac7c02b38", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      private void handleConverter( final Configuration converter, final URL url )         throws DeploymentException, ConfigurationException", "signatureAfterChange": "      private void handleConverter( final Configuration converter,                                   final URL url,                                   final DefaultComponentFactory factory )         throws Exception", "diff": ["-    private void handleConverter( final Configuration converter, final URL url )", "-        throws DeploymentException, ConfigurationException", "+    private void handleConverter( final Configuration converter,", "+                                  final URL url,", "+                                  final DefaultComponentFactory factory )", "+        throws Exception", "-        final DefaultConverterInfo info = new DefaultConverterInfo( source, destination );", "+        final ConverterInfo info = new ConverterInfo( source, destination );", "+        m_converterInfoRegistry.registerConverterInfo( name, info );", "-        try { m_converterInfoRegistry.register( name, info ); }", "-        catch( final RegistryException re )", "-        {", "-            throw new DeploymentException( \"Error registering converter info \" +", "-                                           name + \" due to \" + re,", "-                                           re );", "-        }", "-", "-        final DefaultLocator locator = new DefaultLocator( name, url );", "-", "-        try { m_converterRegistry.register( name, locator ); }", "-        catch( final RegistryException re )", "-        {", "-            throw new DeploymentException( \"Error registering converter locator \" +", "-                                           name + \" due to \" + re,", "-                                           re );", "-        }", "+        factory.addNameClassMapping( name, name );", "+        m_typeManager.registerType( Converter.ROLE, name, factory );"]}]}
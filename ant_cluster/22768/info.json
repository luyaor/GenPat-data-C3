{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a990c31726cc5b890029d89d49ccdddf", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72a0407a7d733046dad965200a6d01df", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/Union.java", "commitBeforeChange": "b17f72b88269697a5ebe0731a49a37ca3f1d18ba", "commitAfterChange": "d754a20c3fb29379494a2411bbd69ed876fb9e7a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     protected Collection getCollection(boolean asString)", "signatureAfterChange": "     protected Collection getCollection(boolean asString)", "diff": ["-        //preserve order-encountered using a list; enforce set logic manually:", "-        // (LinkedHashSet better, but JDK 1.4+)", "-        ArrayList union = new ArrayList(rc.size() * 2);", "-        // Use a set as list.contains() can be expensive for lots of resources", "-        Set set = new HashSet(rc.size() * 2);", "+        LinkedHashSet set = new LinkedHashSet(rc.size() * 2);", "-                if (set.add(o)) {", "-                    union.add(o);", "-                }", "+                set.add(o);", "-        return union;", "+        return set;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99293eaa1cc556423accc3bc36d69583", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/nativelib/LoadEnvironment.java", "commitBeforeChange": "bbf5ec8b4491c5579e05094382117ce98205bc96", "commitAfterChange": "0dcd7b3f686790a9f7e5e85ffa6d588854641bb2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private Properties loadNativeEnvironment()         throws TaskException", "signatureAfterChange": "     private Properties loadNativeEnvironment()         throws TaskException", "diff": ["-            final ExecManagerFactory factory = new ExecManagerFactory();", "-            final ExecManager manager = (ExecManager)factory.createService();", "-", "+            final ExecManager manager = (ExecManager)getService( ExecManager.class );", "-        }", "-        catch( final ServiceException se )", "-        {", "-            throw new TaskException( se.getMessage(), se );"]}]}
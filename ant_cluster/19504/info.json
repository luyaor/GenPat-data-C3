{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd5a2feff2f8c34a799a0e4233d07a1b", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62e7b22c3c77389e00461857af1900e4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/regexp/Jdk14RegexpRegexp.java", "commitBeforeChange": "dfc1957328247cc79d3df7eb6f6c113e58c1dc31", "commitAfterChange": "be53ecfdc2ff0f8e955eada253ea8d3db38addeb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public String substitute(String input, String argument, int options)         throws BuildException", "signatureAfterChange": "      public String substitute(String input, String argument, int options)         throws BuildException", "diff": ["+        // translate \\1 to $(1) so that the Matcher will work", "+        StringBuffer subst = new StringBuffer();", "+        for (int i=0; i<argument.length(); i++) {", "+            char c = argument.charAt(i);", "+            if (c == '\\\\') {", "+                if (++i < argument.length()) {", "+                    c = argument.charAt(i);", "+                    int value = Character.digit(c, 10);", "+                    if (value > -1) {", "+                        subst.append(\"$(\").append(value).append(\")\");", "+                    } else {", "+                        subst.append(c);", "+                    }", "+                } else {", "+                    // XXX - should throw an exception instead?", "+                    subst.append('\\\\');", "+                }", "+            } else {", "+                subst.append(c);", "+            }", "+        }", "+        argument = subst.toString();", "+        ", "-            if (res)", "+            if (res) {", "-            else", "+                m.appendTail(sb);", "+            } else {", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a34549c4c441db5ed4937856aff67c03", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/regexp/JakartaRegexpRegexp.java", "commitBeforeChange": "dfc1957328247cc79d3df7eb6f6c113e58c1dc31", "commitAfterChange": "be53ecfdc2ff0f8e955eada253ea8d3db38addeb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public String substitute(String input, String argument, int options)         throws BuildException", "signatureAfterChange": "      public String substitute(String input, String argument, int options)         throws BuildException", "diff": ["-        int sOptions = getSubsOptions(options);", "+        Vector v = getGroups(input, options);", "+", "+        // replace \\1 with the corresponding group", "+        StringBuffer result = new StringBuffer();", "+        for (int i=0; i<argument.length(); i++) {", "+            char c = argument.charAt(i);", "+            if (c == '\\\\') {", "+                if (++i < argument.length()) {", "+                    c = argument.charAt(i);", "+                    int value = Character.digit(c, 10);", "+                    if (value > -1) {", "+                        result.append((String) v.elementAt(value));", "+                    } else {", "+                        result.append(c);", "+                    }", "+                } else {", "+                    // XXX - should throw an exception instead?", "+                    result.append('\\\\');", "+                }", "+            } else {", "+                result.append(c);", "+            }", "+        }", "+        argument = result.toString();", "+", "+        int sOptions = getSubsOptions(options);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9195e98534f10a655925b25978d65d2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/regexp/JakartaOroRegexp.java", "commitBeforeChange": "dfc1957328247cc79d3df7eb6f6c113e58c1dc31", "commitAfterChange": "be53ecfdc2ff0f8e955eada253ea8d3db38addeb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public String substitute(String input, String argument, int options)         throws BuildException", "signatureAfterChange": "      public String substitute(String input, String argument, int options)         throws BuildException", "diff": ["-        // Determine replacement Type", "-        int sOptions = getSubsOptions(options);", "+        // translate \\1 to $1 so that the Perl5Substitution will work", "+        StringBuffer subst = new StringBuffer();", "+        for (int i=0; i<argument.length(); i++) {", "+            char c = argument.charAt(i);", "+            if (c == '\\\\') {", "+                if (++i < argument.length()) {", "+                    c = argument.charAt(i);", "+                    int value = Character.digit(c, 10);", "+                    if (value > -1) {", "+                        subst.append(\"$\").append(value);", "+                    } else {", "+                        subst.append(c);", "+                    }", "+                } else {", "+                    // XXX - should throw an exception instead?", "+                    subst.append('\\\\');", "+                }", "+            } else {", "+                subst.append(c);", "+            }", "+        }", "+        ", "-        Substitution s = new Perl5Substitution(argument, sOptions);", "+        Substitution s = ", "+            new Perl5Substitution(subst.toString(), ", "+                                  Perl5Substitution.INTERPOLATE_ALL);", "-                               input);", "+                               input,", "+                               getSubsOptions(options));"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b3452bee5ede40e2f8981e8942194460", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aff094430257642040ab660c9bb89857", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/PropertyHelper.java", "commitBeforeChange": "23a58df47dca238cc3a25e99845e14584c68d686", "commitAfterChange": "7517bc70580950fd744751a673d7c9b77ca06d94", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public Hashtable getProperties()", "signatureAfterChange": "     public Hashtable getProperties()", "diff": ["-        return new Hashtable(properties);", "+        System.out.println(\"GetProperties called\");", "+        Hashtable ret = new Hashtable(properties);", "+        Map locals = threadLocalProperties.getProps();", "+        for (Iterator i = locals.entrySet().iterator(); i.hasNext();) {", "+            Map.Entry e = (Map.Entry) i.next();", "+            List l = (List) e.getValue();", "+            if (l != null && l.size() > 0) {", "+                LocalProperty p = (LocalProperty) l.get(l.size() - 1);", "+                if (p.getValue() == null) {", "+                    if (ret.get(e.getKey()) != null) {", "+                        ret.remove(e.getKey());", "+                    }", "+                } else {", "+                    ret.put(e.getKey(), p.getValue());", "+                }", "+            }", "+        }", "+        return ret;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d741678d07c1c09c8426d045f43a1948", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/TraXLiaison.java", "commitBeforeChange": "a738000acab66d8d7ce5cf563f6dd96d9c7024fb", "commitAfterChange": "53db3a2602bcc7a0b357dbb3cc02b6e254960a7e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void createTransformer() throws Exception", "signatureAfterChange": "     private void createTransformer() throws Exception", "diff": ["+        }", "+", "+        if (traceConfiguration != null) {", "+            if (\"org.apache.xalan.transformer.TransformerImpl\"", "+                .equals(transformer.getClass().getName())) {", "+                try {", "+                    Class traceSupport =", "+                        Class.forName(\"org.apache.tools.ant.taskdefs.optional.\"", "+                                      + \"Xalan2TraceSupport\", true,", "+                                      Thread.currentThread()", "+                                      .getContextClassLoader());", "+                    XSLTTraceSupport ts =", "+                        (XSLTTraceSupport) traceSupport.newInstance();", "+                    ts.configureTrace(transformer, traceConfiguration);", "+                } catch (Exception e) {", "+                    String msg = \"Failed to enable tracing because of \" + e;", "+                    if (project != null) {", "+                        project.log(msg, Project.MSG_WARN);", "+                    } else {", "+                        System.err.println(msg);", "+                    }", "+                }", "+            } else {", "+                String msg = \"Not enabling trace support for transformer\"", "+                    + \" implementation\" + transformer.getClass().getName();", "+                if (project != null) {", "+                    project.log(msg, Project.MSG_WARN);", "+                } else {", "+                    System.err.println(msg);", "+                }", "+            }"]}]}
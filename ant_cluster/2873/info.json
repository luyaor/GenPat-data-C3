{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a8d557c6f771910b70c1f97752bc2f80", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a4b395cc7051ecf6c4e524e33504e08", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2InputStream.java", "commitBeforeChange": "3477bbf6474cdd2b70b12eb638e64415a4f1c2ec", "commitAfterChange": "134d95afef9b42cf08f2eccb077b97525ac38034", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 28, "signatureBeforeChange": "      private int bsGetIntVS(int numBits)", "signatureAfterChange": "         final int[] initTT(int length)", "diff": ["-    private int bsGetIntVS(int numBits) {", "-        return (int) bsR(numBits);", "-    }", "+         */", "+        final int[] initTT(int length) {", "+            int[] tt = this.tt;", "+", "+            // tt.length should always be >= length, but theoretically", "+            // it can happen, if the compressor mixed small and large", "+            // blocks.  Normally only the last block will be smaller", "+            // than others.", "+            if ((tt == null) || (tt.length < length)) {", "+                this.tt = tt = new int[length];", "+            }", "+", "+            return tt;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce11ba5064a2eda7f31bc917cc482798", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/AbstractUnicodeExtraField.java", "commitBeforeChange": "aa43e37a025cdf54b8914b8283e57419a253ed59", "commitAfterChange": "dee95e3acc5154aee03ff5f91f9a56426ae79f3f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public byte[] getUnicodeName()", "signatureAfterChange": "     public byte[] getUnicodeName()", "diff": ["-        return unicodeName;", "+        byte[] b = null;", "+        if (unicodeName != null) {", "+            b = new byte[unicodeName.length];", "+            System.arraycopy(unicodeName, 0, b, 0, b.length);", "+        }", "+        return b;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2040f214ddd2222116f27ec7b89babc2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "019ef6b2753a6643c5309a5265ca50d9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "196c36bc28dec63b239595132e8b00c55951c860", "commitAfterChange": "689fca41585cc1768a0501fd11c8235b6e4bc481", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 56, "signatureBeforeChange": "     private void evaluatePackages(String source, Vector packages, Vector argList)", "signatureAfterChange": "     private void evaluatePackages(String sourcePath, Vector packages, Vector argList)", "diff": ["-    private void evaluatePackages(String source, Vector packages, Vector argList) {", "+    private void evaluatePackages(String sourcePath, Vector packages, Vector argList) {", "-        project.log(\"Source dir = \" + source, project.MSG_VERBOSE);", "+        project.log(\"Source path = \" + sourcePath, project.MSG_VERBOSE);", "-        Hashtable map = mapClasses(new File(source));", "+        Vector addedPackages = new Vector();", "+        PathTokenizer tokenizer = new PathTokenizer(sourcePath);", "+        while (tokenizer.hasMoreTokens()) {", "+            File source = new File(project.translatePath(tokenizer.nextToken()));", "+            ", "+            Hashtable map = mapClasses(source);", "-        Enumeration e = map.keys();", "-        while (e.hasMoreElements()) {", "-            String pack = (String) e.nextElement();", "-            for (int i = 0; i < packages.size(); i++) {", "-                if (matches(pack, (String) packages.elementAt(i))) {", "-                    argList.addElement(pack);", "-                    break;", "+            Enumeration e = map.keys();", "+            while (e.hasMoreElements()) {", "+                String pack = (String) e.nextElement();", "+                for (int i = 0; i < packages.size(); i++) {", "+                    if (matches(pack, (String) packages.elementAt(i))) {", "+                        if (!addedPackages.contains(pack)) {", "+                            argList.addElement(pack);", "+                            addedPackages.addElement(pack);", "+                        }", "+                        break;", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "172a7ee4c232f49a495f81150b9c4995", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/wizard/build/ProjectSetupStep.java", "commitBeforeChange": "18184c33cff3e9a204788571fce084520f064678", "commitAfterChange": "cf483b905df8ff9f06826b8ec81c592314914e6b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     protected void init()", "signatureAfterChange": "     protected void init()", "diff": ["-        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));", "+        LabelFieldGBC gbc = new LabelFieldGBC();", "+        JPanel p = new JPanel(new GridBagLayout());", "+        _fileEditor = new FilePropertyEditor();", "+        p.add(new JLabel(", "+            getResources().getString(getID() + \".fileLabel\")), gbc.forLabel());", "+        p.add(_fileEditor.getCustomEditor(), gbc.forField());", "+", "-        p.add(new JLabel(getResources().getString(getID() + \".nameLabel\")));", "-        p.add(_name);", "+        p.add(new JLabel(", "+            getResources().getString(getID() + \".nameLabel\")), gbc.forLabel());", "+        p.add(_name, gbc.forField());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18337a4f6b5ca7a7c9c9b5e51d9d33aa", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipEntry.java", "commitBeforeChange": "4cbbf3629a15a78615a3ce63ffe6f3fc028b172d", "commitAfterChange": "2c04d7e833b4e5dab1a3c5ddfe14b572aea8c112", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 28, "signatureBeforeChange": "     public void removeExtraField(final ZipShort type)", "signatureAfterChange": "     public void removeExtraField(final ZipShort type)", "diff": ["-        if (extraFields.remove(type) == null) {", "+        List<ZipExtraField> newResult = new ArrayList<ZipExtraField>();", "+        for (ZipExtraField extraField : extraFields) {", "+            if (!type.equals(extraField.getHeaderId())){", "+                newResult.add(extraField);", "+            }", "+        }", "+        if (extraFields.length == newResult.size()) {", "+        extraFields = newResult.toArray(new ZipExtraField[newResult.size()]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "236c9640b256008dbdadebc06887b945", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Replace.java", "commitBeforeChange": "822028744ff977b3588dcc54bafdc1e9e8f98375", "commitAfterChange": "b641968fade3f4f16c1676f2b5f06c6b4344ab08", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private void processFile(File src) throws BuildException", "signatureAfterChange": "     private void processFile(File src) throws BuildException", "diff": ["-        if (!src.exists()) { ", "+        if (!src.exists()) {", "-            // line separators in values and tokens are \"\\n\"", "-            // in order to compare with the file contents, replace them", "-            // as needed", "-            String linesep = System.getProperty(\"line.separator\");", "-            String val = stringReplace(value.getText(), \"\\n\", linesep);", "-            String tok = stringReplace(token.getText(), \"\\n\", linesep);", "+            //Preserve original string (buf) so we can compare the result", "+            String newString = new String(buf);", "-            // for each found token, replace with value", "-            String  newString = stringReplace(buf, tok, val);", "-            boolean changes   = !newString.equals(buf);", "+            if (token != null)", "+            {", "+                // line separators in values and tokens are \"\\n\"", "+                // in order to compare with the file contents, replace them", "+                // as needed", "+                String linesep = System.getProperty(\"line.separator\");", "+                String val = stringReplace(value.getText(), \"\\n\", linesep);", "+                String tok = stringReplace(token.getText(), \"\\n\", linesep);", "+                // for each found token, replace with value", "+                log(\"Replacing in \" + src.getPath() + \": \" + token.getText() + \" --> \" + value.getText(), Project.MSG_VERBOSE);", "+                newString = stringReplace(newString, tok, val);", "+            }", "+", "+            if (replacefilters.size() > 0) {", "+                newString = processReplacefilters(newString, src.getPath());", "+            }", "+", "+            boolean changes = !newString.equals(buf);", "-            ", "+", "-            // If there were changes, move the new one to the old one, otherwise, delete the new one", "+            // If there were changes, move the new one to the old one;", "+            // otherwise, delete the new one", "-        }       ", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "399697789b3b31bb6f8d3b7b9c0083ba", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "3eea43f1a5e140f831623d4ebf15e177fa807263", "commitAfterChange": "dec8af009abc97d5488fab3ff35eec7fb5dbed83", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private void checkIncludePatterns()", "signatureAfterChange": "     private void checkIncludePatterns()", "diff": ["+            String originalpattern = (String) newroots.get(currentelement);", "+            if (!myfile.exists() && !isCaseSensitive) {", "+                File f = findFileCaseInsensitive(basedir, currentelement);", "+                if (f.exists()) {", "+                    // adapt currentelement to the case we've actually found", "+                    currentelement = fileUtils.removeLeadingPath(basedir,", "+                                                                 f);", "+                    myfile = f;", "+                }", "+            }", "+", "-                            if (currentelement.charAt(currentelement.length()-1)", "+                            if (currentelement.charAt(currentelement.length()", "+                                                      - 1) ", "-                    String originalpattern =", "-                        (String) newroots.get(currentelement);", "-                    if (originalpattern.equals(currentelement)) {", "+                    if (isCaseSensitive ", "+                        && originalpattern.equals(currentelement)) {", "+                        accountForIncludedFile(currentelement, myfile);", "+                    } else if (!isCaseSensitive ", "+                        && originalpattern.equalsIgnoreCase(currentelement)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a2771151b70a8bde670358db7dd7b8d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/About.java", "commitBeforeChange": "bd8fc7d5c8f4bf00a3272db3ec0e00096d16eed0", "commitAfterChange": "435e9dc9b6090394172bf029f106b42b2db55a1d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic About(AppContext context)", "signatureAfterChange": " \tpublic About(AppContext context)", "diff": ["+        StringBuffer buf = new StringBuffer();", "+        StringTokenizer tok = new StringTokenizer(contributors, \",\");", "+        while(tok.hasMoreTokens()) {", "+            String name = tok.nextToken();", "+            buf.append(name);", "+            buf.append(\"<BR>\\n\");", "+        }", "+", "-\t\t\tnew Object[] { version, date, contributors });", "+\t\t\tnew Object[] { version, date, buf.toString() });", "+        getRootPane().setDefaultButton(ok);", "+", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48fee14b06640cfcb3295521ae1644fb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "cca008dd0001628eefae7a0ebffba4815a6909f1", "commitAfterChange": "021fdf251c92ecb3981724d83c0265dc770280b3", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "      private static void transferFormatters(JUnitTestRunner runner)", "signatureAfterChange": "      private static void transferFormatters(JUnitTestRunner runner,                                            JUnitTest test)", "diff": ["-    private static void transferFormatters(JUnitTestRunner runner) {", "+    private static void transferFormatters(JUnitTestRunner runner,", "+                                           JUnitTest test) {", "-            runner.addFormatter((JUnitResultFormatter) fromCmdLine", "-                                .elementAt(i));", "+            FormatterElement fe = (FormatterElement) fromCmdLine.elementAt(i);", "+            if (multipleTests && fe.getUseFile()) {", "+                File destFile = ", "+                    new File(test.getTodir(), ", "+                             test.getOutfile() + fe.getExtension());", "+                fe.setOutfile(destFile);", "+            }", "+            runner.addFormatter(fe.createFormatter());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c90d02cb7bf179dc285f3ff5894a882", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "76248d54a131e0eafa34a739f1814ff3e6ae4304", "commitAfterChange": "7ac63c0bc264d9192d38abf2c1f2302c8fdee8f6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 10, "signatureBeforeChange": "      protected void zipDir(File dir, ZipOutputStream zOut, String vPath)         throws IOException", "signatureAfterChange": "      protected void zipDir(File dir, ZipOutputStream zOut, String vPath)         throws IOException", "diff": ["+", "+\tZipEntry ze = new ZipEntry (vPath);", "+\tif (dir != null) ze.setTime (dir.lastModified ());", "+\tze.setSize (0);", "+\tze.setMethod (ZipEntry.STORED);", "+\t// This is faintly ridiculous:", "+\tze.setCrc (emptyCrc);", "+\tzOut.putNextEntry (ze);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f06c27c2a2e5d5bd68e2680bb3eaefb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antlibs/ant1compat/org/apache/tools/ant/Task.java", "commitBeforeChange": "32452cc99f5c05c8796b142c4f4d2ec5e94eb91d", "commitAfterChange": "422ca8ee1e22130fc63be365497ffc07be74fe58", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void init(AntContext context, String componentType)          throws ExecutionException", "signatureAfterChange": "     public void init(AntContext context, String componentType)          throws ExecutionException", "diff": ["+        ", "+        org.apache.ant.common.util.Location contextLocation", "+             = context.getLocation();", "+", "+        if (contextLocation", "+             == org.apache.ant.common.util.Location.UNKNOWN_LOCATION) {", "+            location = Location.UNKNOWN_LOCATION;", "+        } else {", "+            location = new Location(contextLocation.getSource(),", "+                contextLocation.getLineNumber(),", "+                contextLocation.getColumnNumber());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cf03ef49a337de32ca8d47d7c6b4c3a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "225b9fd6f9a79cb911291774832c150523387e01", "commitAfterChange": "e9d8b2247fa54e4c33027f1140a7a3c3ff046cac", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "         protected void scandir(String dir, String vpath, boolean fast)", "signatureAfterChange": "         protected void scandir(String dir, String vpath, boolean fast)", "diff": ["-", "-                        if (file.isDirectory()) {", "+                        if (isFunctioningAsDirectory(ftp, dir, file)) {", "-                            if (isIncluded(name)) {", "+                            boolean slowScanAllowed = true;", "+                            if (!isFollowSymlinks() && file.isSymbolicLink()) {", "+                                dirsExcluded.addElement(name);", "+                                slowScanAllowed = false;", "+                            } else if (isIncluded(name)) {", "-                                        scandir(file.getName(),", "+                                        if (file.isSymbolicLink()) {", "+                                            scandir(file.getLink(),", "+                                        } else {", "+                                            scandir(file.getName(),", "+                                                name + File.separator, fast);", "+                                        }", "-                            if (!fast) {", "+                            if (!fast && slowScanAllowed) {", "-                            if (file.isFile()) {", "+                            if (isFunctioningAsFile(ftp, dir, file)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0d2977f3c9fb52fbf6fc7d0e130ca7d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antlibs/ant1compat/org/apache/tools/ant/ProjectComponent.java", "commitBeforeChange": "32452cc99f5c05c8796b142c4f4d2ec5e94eb91d", "commitAfterChange": "422ca8ee1e22130fc63be365497ffc07be74fe58", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void init(AntContext context, String componentType)              throws ExecutionException", "signatureAfterChange": "     public void init(AntContext context, String componentType)              throws ExecutionException", "diff": ["-        org.apache.ant.common.util.Location contextLocation", "-             = context.getLocation();", "-", "-        if (contextLocation", "-             == org.apache.ant.common.util.Location.UNKNOWN_LOCATION) {", "-            location = Location.UNKNOWN_LOCATION;", "-        } else {", "-            location = new Location(contextLocation.getSource(),", "-                contextLocation.getLineNumber(),", "-                contextLocation.getColumnNumber());", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5382f64d80b64ae8f418fb94d87959d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "ed1abbaa01fd034c3d4d9a61f8a2bfc268ea74e6", "commitAfterChange": "f61c1bcd3a4a540bac7ae97559f37c49bfee75d8", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "     protected void scandir(File dir, String vpath, boolean fast)", "signatureAfterChange": "     protected void scandir(File dir, String vpath, boolean fast)", "diff": ["-                        dirsIncluded.addElement(name);", "-                        if (fast) {", "-                            scandir(file, name + File.separator, fast);", "+                        if (isSelected(name,file)) {", "+                            dirsIncluded.addElement(name);", "+                            if (fast) {", "+                                scandir(file, name + File.separator, fast);", "+                            }", "+                        } else {", "+                            everythingIncluded = false;", "+                            dirsDeselected.addElement(name);", "+                            if (fast && couldHoldIncluded(name)) {", "+                                scandir(file, name + File.separator, fast);", "+                            }", "+", "-                        filesIncluded.addElement(name);", "+                        if (isSelected(name,file)) {", "+                            filesIncluded.addElement(name);", "+                        } else {", "+                            everythingIncluded = false;", "+                            filesDeselected.addElement(name);", "+                        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c485bfb6455c116c295fd253c038883d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/AbstractCvsTask.java", "commitBeforeChange": "f19f07d6e4c72f241057ecfc32d80be21201bbf7", "commitAfterChange": "ca91f8cb7e4f2bfe1a191dea6126a32649af9565", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     protected void runCommand(Commandline toExecute) throws BuildException", "signatureAfterChange": "     protected void runCommand(Commandline toExecute) throws BuildException", "diff": ["-        /* But currently we cannot because 'cvs log' is not working", "-         * with a pass file.", "-        if(passFile == null){", "+        if(passFile == null) {", "-            File defaultPassFile = new File(System.getProperty(\"user.home\") ", "+            File defaultPassFile = new File(", "+                System.getProperty(\"cygwin.user.home\",", "+                    System.getProperty(\"user.home\")) ", "-         */", "+        if (!dest.exists()) {", "+            dest.mkdirs();", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb75a5f888e728c6bfed9b6a9591b46e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/NetRexxC.java", "commitBeforeChange": "ef2d4639325a9580d6357793271ae32a0a919542", "commitAfterChange": "a40f5fbc661d21426b9e147021c9bff6af807813", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 40, "signatureBeforeChange": "     private void scanDir(File srcDir, File destDir, String[] files)", "signatureAfterChange": "     private void scanDir(File srcDir, File destDir, String[] files)", "diff": ["+                File javaFile =", "+                    new File(destDir,", "+                    filename.substring(0, filename.lastIndexOf('.'))", "+                    + (removeKeepExtension ? \".java\" : \".java.keep\"));", "-                if (!compile || srcFile.lastModified() > classFile.lastModified()) {", "+                // nocompile case tests against .java[.keep] file", "+                if (!compile && srcFile.lastModified() > javaFile.lastModified()) {", "+                    filecopyList.put(srcFile.getAbsolutePath(), destFile.getAbsolutePath());", "+                    compileList.addElement(destFile.getAbsolutePath());", "+                }", "+                // compile case tests against .class file", "+                else if (compile && srcFile.lastModified() > classFile.lastModified()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0e73f9058ccb34afb7eb5036a8f7ce2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/ScpToMessage.java", "commitBeforeChange": "9de4ec709caa882bbeceacf4f6868646869ccbf1", "commitAfterChange": "881a0ff79e095227ce00c7deefc8054f60fefa2f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": "      private void sendFileToRemote(final File localFile,                                    final InputStream in,                                    final OutputStream out) throws IOException", "signatureAfterChange": "      private void sendFileToRemote(final File localFile,                                    final InputStream in,                                    final OutputStream out) throws IOException", "diff": ["+", "+        if (getPreserveLastModified()) {", "+            String command = \"T\" + (localFile.lastModified() / 1000) + \" 0\";", "+            command += \" \" + (localFile.lastModified() / 1000) + \" 0\\n\";", "+            out.write(command.getBytes());", "+            out.flush();", "+", "+            waitForAck(in);", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "deebe269e0e608b37d2bd826568af44b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Expand.java", "commitBeforeChange": "559859ef43a7d03b5f17ff1121f9d3e7a5c79656", "commitAfterChange": "1f4fe213e2f3268419fb74d79bfb3ff4a3de77fe", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+        Touch touch = new Touch();", "+        touch.setProject(project);", "+        touch.setTarget(target);", "+                    ", "+", "+                    if (project.getJavaVersion() != Project.JAVA_1_1) {", "+                        touch.setFile(f.getAbsolutePath());", "+                        touch.setMillis(ze.getTime());", "+                        touch.touch();", "+                    }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea4638f27fa3251c715765da8798a2c6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/ActionManager.java", "commitBeforeChange": "8355b21de23f92a94bd569b71ec6c69e437ac5ab", "commitAfterChange": "71cd7defed7816e61f8779e3605e5e808933475d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public JMenuBar createMenuBar()", "signatureAfterChange": "     public JMenuBar createMenuBar()", "diff": ["-                JMenuItem item = menu.add(action);", "-                item.setAccelerator(action.getAccelerator());", "-                addNiceStuff(item, action);", "+", "+                if(!action.isToggle()) {", "+                    JMenuItem item = menu.add(action);", "+                    item.setAccelerator(action.getAccelerator());", "+                    addNiceStuff(item, action);", "+                }", "+                else {", "+                    JCheckBoxMenuItem b = ", "+                        new JCheckBoxMenuItem(action.getName());", "+                    b.setActionCommand(action.getID());", "+                    b.addActionListener(action);", "+                    b.setAction(action);", "+                    addNiceStuff(b, action);", "+                    menu.add(b);", "+                }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb8543eba9e67194a5c3ff0ad4617b44", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "0dd985bc2a3584f478eebc7c1a25f24aa559f1ac", "commitAfterChange": "4f10a1e3b23a3eca01801f07d95b6a320e163a33", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private void scandir(File dir, String vpath)", "signatureAfterChange": "     private void scandir(File dir, String vpath, boolean fast)", "diff": ["-    private void scandir(File dir, String vpath) {", "+    private void scandir(File dir, String vpath, boolean fast) {", "+                        if (fast) {", "+                            scandir(file, name+File.separator, fast);", "+                        }", "+                    if (fast && couldHoldIncluded(name)) {", "+                        scandir(file, name+File.separator, fast);", "+                    }", "-                scandir(file, name+File.separator);", "+                if (!fast) {", "+                    scandir(file, name+File.separator, fast);", "+                }"]}]}
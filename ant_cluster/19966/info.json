{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf3e9584c5f23f5799368c4609adedad", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2793184438011f6de4b02fa000d4e04f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/optional/depend/DependScanner.java", "commitBeforeChange": "24bb66e6547c68c19855f363e211606e03eeb17f", "commitAfterChange": "792642344dd1e5f6135f2b96020b1dd2cfe47bcf", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void scan()", "signatureAfterChange": "     public void scan() throws IllegalStateException", "diff": ["-    public void scan() {", "-        Dependencies visitor = new Dependencies();", "-        ", "-        Set set = new TreeSet();", "-", "-        final String base;", "+    public void scan() throws IllegalStateException {", "+        String analyzerClassName = DEFAULT_ANALYZER_CLASS;", "+        DependencyAnalyzer analyzer = null;", "-            base = basedir.getCanonicalPath() + File.separator;", "+            Class analyzerClass = Class.forName(analyzerClassName);", "+            analyzer = (DependencyAnalyzer)analyzerClass.newInstance();", "+        } catch (Exception e) {", "+            throw new BuildException(\"Unable to load dependency analyzer: \" ", "+                + analyzerClassName, e);", "-        catch (Exception e) {", "-            throw new IllegalArgumentException(e.getMessage());", "-        }", "-", "-        for (Iterator rootClassIterator = rootClasses.iterator(); rootClassIterator.hasNext();) {", "-            Set newSet = new HashSet();", "-            String start = (String)rootClassIterator.next();", "-            start = start.replace('.', '/');", "-", "-            newSet.add(start);", "-            set.add(start);", "-            ", "-            do {", "-                Iterator i = newSet.iterator();", "-                while (i.hasNext()) {", "-                    String fileName = base + ((String)i.next()).replace('/', File.separatorChar) + \".class\";", "-                    ", "-                    try {", "-                        JavaClass javaClass = new ClassParser(fileName).parse();", "-                        javaClass.accept(visitor);", "-                    }", "-                    catch (IOException e) {", "-                        System.err.println(\"exception: \" +  e.getMessage());", "-                    }", "-                }", "-                newSet.clear();", "-                newSet.addAll(visitor.getDependencies());", "-                visitor.clearDependencies();", "-                ", "-                Dependencies.applyFilter(newSet, new Filter() {", "-                    public boolean accept(Object object) {", "-                        String fileName = base + ((String)object).replace('/', File.separatorChar) + \".class\";", "-                        return new File(fileName).exists();", "-                    }", "-                });", "-                newSet.removeAll(set);", "-                set.addAll(newSet);", "-            }", "-            while (newSet.size() > 0);", "-        }", "+        analyzer.addClassPath(new Path(null, basedir.getPath()));", "-        included.clear();", "-        included.addAll(set);", "+        for (Enumeration e = rootClasses.elements(); e.hasMoreElements(); ) {", "+            analyzer.addRootClass((String)e.nextElement());", "+        }", "+", "+        Enumeration e = analyzer.getClassDependencies();", "+", "+        included.removeAllElements();", "+        while (e.hasMoreElements()) {", "+            included.addElement(e.nextElement());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3df4cb33029e72d378623dbf42b46f68", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/GenericDeploymentTool.java", "commitBeforeChange": "24bb66e6547c68c19855f363e211606e03eeb17f", "commitAfterChange": "792642344dd1e5f6135f2b96020b1dd2cfe47bcf", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": "     protected void checkAndAddDependants(Hashtable checkEntries)         throws BuildException", "signatureAfterChange": "     protected void checkAndAddDependants(Hashtable checkEntries)         throws BuildException", "diff": ["-        throws BuildException", "-    {", "-        Dependencies visitor = new Dependencies();", "-        Set set = new TreeSet();", "-        Set newSet = new HashSet();", "-        final String base = config.srcDir.getAbsolutePath() + File.separator;", "+        throws BuildException {", "+        dependencyAnalyzer.reset();", "+        ", "-                newSet.add(entryName.substring(0, entryName.length() - \".class\".length()).replace(File.separatorChar, '/'));", "+                String className = entryName.substring(0, ", "+                    entryName.length() - \".class\".length());", "+                className = className.replace(File.separatorChar, '/');", "+                className = className.replace('/', '.');", "+                    ", "+                dependencyAnalyzer.addRootClass(className);               ", "-        set.addAll(newSet);", "-", "-        do {", "-            i = newSet.iterator();", "-            while (i.hasNext()) {", "-                String fileName = base + ((String)i.next()).replace('/', File.separatorChar) + \".class\";", "-", "-                try {", "-                    JavaClass javaClass = new ClassParser(fileName).parse();", "-                    javaClass.accept(visitor);", "-                }", "-                catch (IOException e) {", "-                    log(\"exception: \" +  e.getMessage(), Project.MSG_INFO);", "-                }", "+        ", "+        Enumeration e = dependencyAnalyzer.getClassDependencies();", "+        ", "+        while (e.hasMoreElements()) {", "+            String classname = (String)e.nextElement();", "+            String location ", "+                = classname.replace('.', File.separatorChar) + \".class\";", "+            File classFile = new File(config.srcDir, location);", "+            if (classFile.exists()) {", "+                checkEntries.put(location, classFile);", "+                log(\"dependent class: \" + classname + \" - \" + classFile, ", "+                    Project.MSG_VERBOSE);", "-            newSet.clear();", "-            newSet.addAll(visitor.getDependencies());", "-            visitor.clearDependencies();", "-", "-            Dependencies.applyFilter(newSet, new Filter() {", "-                    public boolean accept(Object object) {", "-                        String fileName = base + ((String)object).replace('/', File.separatorChar) + \".class\";", "-                        return new File(fileName).exists();", "-                    }", "-                });", "-            newSet.removeAll(set);", "-            set.addAll(newSet);", "-        }", "-        while (newSet.size() > 0);", "-", "-        i = set.iterator();", "-        while (i.hasNext()) {", "-            String next = ((String)i.next()).replace('/', File.separatorChar);", "-            checkEntries.put(next + \".class\", new File(base + next + \".class\"));", "-            log(\"dependent class: \" + next + \".class\" + \" - \" + base + next + \".class\", Project.MSG_VERBOSE);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "739dd0e35c9328d5509e2af0cb10ec89", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09e1fef93524684359f2139b0f0ff695", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/extension/ExtensionUtil.java", "commitBeforeChange": "97150b670e83bc62caac34ee6db7231c6532203d", "commitAfterChange": "8c08f38c4f011cc029b2c45724948479b35c0c42", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private static Extension[] getExtensions(final Project project,                                               final ArrayList librarys)         throws BuildException", "signatureAfterChange": "     private static Extension[] getExtensions(final Project project,                                               final List libraries)         throws BuildException", "diff": ["-                                              final ArrayList librarys)", "+                                              final List libraries)", "-        final Iterator iterator = librarys.iterator();", "+        final Iterator iterator = libraries.iterator();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "127c8ca10e324dfe12dffbc3e6fb4eb2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antlibs/ant1compat/org/apache/tools/ant/Ant1Converter.java", "commitBeforeChange": "65b70febb53b077317c4d678291f9af547c3d116", "commitAfterChange": "f9d1c1691c7e9d80b793f5178f6113c949fc2441", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public Object convert(String value, Class type) throws ExecutionException", "signatureAfterChange": "     public Object convert(String value, Class type) throws ConverterException", "diff": ["-    public Object convert(String value, Class type) throws ExecutionException {", "+    public Object convert(String value, Class type) throws ConverterException {", "-                throw new ExecutionException(e);", "+                throw new ConverterException(e);", "-                throw new ExecutionException(e);", "+                throw new ConverterException(e);", "-            throw new ExecutionException(\"This converter does not handle \"", "+            throw new ConverterException(\"This converter does not handle \""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b14a73ff3efd04adf35eb4f955253fb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/antlib/AntLibManager.java", "commitBeforeChange": "b83132393de1bdee68b42caea0604469c85d0306", "commitAfterChange": "af074bc65d9fdde7982618162dfdab2dfae06e5f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void configLibrary(Map librarySpecs, String libraryId,                                CircularDependencyChecker configuring,                                Map newLibraries)          throws AntLibException", "signatureAfterChange": "     private void configLibrary(Map librarySpecs, String libraryId,                                CircularDependencyChecker configuring,                                Map newLibraries)          throws AntLibException", "diff": ["-                 && initConfig.getToolsJarURL() != null) {", "-                urlsList.add(initConfig.getToolsJarURL());", "+                 && antEnv.getToolsJarURL() != null) {", "+                urlsList.add(antEnv.getToolsJarURL());", "-                URL[] parserURLs = initConfig.getParserURLs();", "+                URL[] parserURLs = antEnv.getParserURLs();", "-            antLibrary.setParentLoader(initConfig.getCommonLoader());", "+            antLibrary.setParentLoader(antEnv.getCommonLoader());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59b4549a08d1bef72209c2a8fe2143f0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/tar/TarInputStream.java", "commitBeforeChange": "8a8ebf595eb8a868cf9d5ac8d5ce9845d72fd419", "commitAfterChange": "ef6cad6a16581080ea8ea0e191dab031cd46bfa2", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "      private void applyPaxHeadersToCurrentEntry(Map<String, String> headers)", "signatureAfterChange": "      private void applyPaxHeadersToCurrentEntry(Map<String, String> headers)", "diff": ["-                currEntry.setGroupId(Integer.parseInt(val));", "+                currEntry.setGroupId(Long.parseLong(val));", "-                currEntry.setUserId(Integer.parseInt(val));", "+                currEntry.setUserId(Long.parseLong(val));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a3acd04af7554f93edc8a537d794a3d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/SSHExec.java", "commitBeforeChange": "feb7ea550f616abf040604172390fa25b8046e4f", "commitAfterChange": "36d84a61dc70dd6bbc8ee25d5261de5f2874e837", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        if (getUserInfo().getKeyfile() == null ", "+        if (getUserInfo().getKeyfile() == null", "-            final ChannelExec channel=(ChannelExec) session.openChannel(\"exec\");", "+            final ChannelExec channel = (ChannelExec) session.openChannel(\"exec\");", "-                    ", "+", "-            ", "+", "-                if (output_property != null) {", "-                    getProject().setProperty(output_property, out.toString());", "+                if (outputProperty != null) {", "+                    getProject().setProperty(outputProperty, out.toString());", "-                if (output_file != null) {", "-                    writeToFile(out.toString(), append, output_file);", "+                if (outputFile != null) {", "+                    writeToFile(out.toString(), append, outputFile);", "-        } catch(Exception e){", "+        } catch (Exception e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae567bd675c250001e9fcb47a0a4af2d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/junit/src/main/org/apache/tools/ant/taskdefs/optional/rjunit/remote/TestRunEvent.java", "commitBeforeChange": "5c43f6c93edfa3d34075b59a4ae199eb7257dab9", "commitAfterChange": "778a6800cfdfe174d4e21108400d4827124dadac", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "      public boolean equals(Object o)", "signatureAfterChange": "      public boolean equals(Object o)", "diff": ["-                    ( stacktrace == null ? other.stacktrace == null : stacktrace.equals(other.stacktrace) ) &&", "+                    ( error == null ? other.error == null : error.equals(other.error) ) &&"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce972451f4c48ba501a79a5f2e4c1283", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/builder/DefaultProjectBuilder.java", "commitBeforeChange": "6f3f9cca3e46d9b295f612635ddc47d887d760ce", "commitAfterChange": "d32c26fc168f32a03444486b5b2b23b19564bb9b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected void buildTarget( final DefaultProject project, final Configuration target )         throws AntException", "signatureAfterChange": "     protected void buildTarget( final DefaultProject project, final Configuration target )         throws Exception", "diff": ["-        throws AntException", "+        throws Exception", "-            throw new AntException( \"Discovered un-named target at \" +", "+            throw new Exception( \"Discovered un-named target at \" +", "-            throw new AntException( \"Discovered invalid target that has both a if and \" +", "+            throw new Exception( \"Discovered invalid target that has both a if and \" +", "-                    throw new AntException( \"Discovered empty dependency in target \" +", "-                                            target.getName() + \" at \" + target.getLocation() );", "+                    throw new Exception( \"Discovered empty dependency in target \" +", "+                                         target.getName() + \" at \" + target.getLocation() );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd81d22c2821d7a9e43fd3a0a6b6897d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ManifestTask.java", "commitBeforeChange": "b8bdf2149a8b9c12a3d97f5598bfa660b25950ba", "commitAfterChange": "c7f7d99c3d53fbd9c018a8513532faec64a61f2e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void checkAttribute(Manifest.Attribute attribute) throws ManifestException", "signatureAfterChange": "     private void checkAttribute(Manifest.Attribute attribute) throws BuildException", "diff": ["-    private void checkAttribute(Manifest.Attribute attribute) throws ManifestException {", "+    private void checkAttribute(Manifest.Attribute attribute) throws BuildException {", "-            throw new ManifestException(\"Manifest attribute names must not contain '\" + ch + \"'\");", "+            throw new BuildException(\"Manifest attribute names must not contain '\" + ch + \"' at the begin.\");", "-                throw new ManifestException(\"Manifest attribute names must not contain '\" + ch + \"'\");", "+                throw new BuildException(\"Manifest attribute names must not contain '\" + ch + \"'\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efa7da58b5df9644de9e694c5231d47f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/ConcatFilter.java", "commitBeforeChange": "71be9bc2d672d09173a5d47a4acd18c18186ac37", "commitAfterChange": "d1bc937f76bfe650c3c2a530e848140cadedd785", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public Reader chain(final Reader rdr)", "signatureAfterChange": "     public Reader chain(final Reader rdr)", "diff": ["-        newFilter.setBefore(getBefore());", "-        newFilter.setAfter(getAfter());", "+        newFilter.setPrepend(getPrepend());", "+        newFilter.setAppend(getAppend());", "-        // Because the before and after readers have to be instantiated", "+        // Because the prepend and append readers have to be instantiated"]}]}
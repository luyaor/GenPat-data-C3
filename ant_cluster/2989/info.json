{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7e97e769c0cd5451cfb9497dfc66e722", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03edb58457b249ee79bfd19625c2a60a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/util/FileUtilsTest.java", "commitBeforeChange": "b04c338caa73cc14ad6e8b258280426c3522de38", "commitAfterChange": "4c83562c6c9f681cdcd17c86f5e3c68c910dd5f8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void testNormalize()", "signatureAfterChange": "      public void testNormalize()", "diff": ["-        /*", "-         * Start with simple absolute file names.", "-         */", "-        assertEquals(File.separator,", "-                     FILE_UTILS.normalize(\"/\").getPath());", "-        assertEquals(File.separator,", "-                     FILE_UTILS.normalize(\"\\\\\").getPath());", "+        if (!(Os.isFamily(\"dos\") || Os.isFamily(\"netware\"))) {", "+            /*", "+             * Start with simple absolute file names.", "+             */", "+            assertEquals(File.separator,", "+                         FILE_UTILS.normalize(\"/\").getPath());", "+            assertEquals(File.separator,", "+                         FILE_UTILS.normalize(\"\\\\\").getPath());", "+        } else {", "+            try {", "+                 FILE_UTILS.normalize(\"/\").getPath();", "+                 fail(\"normalized \\\"/\\\" on dos or netware\");", "+            } catch (Exception e) {", "+            }", "+            try {", "+                 FILE_UTILS.normalize(\"\\\\\").getPath();", "+                 fail(\"normalized \\\"\\\\\\\" on dos or netware\");", "+            } catch (Exception e) {", "+            }", "+        }", "-            assertEquals(driveSpec,", "-                         FILE_UTILS.normalize(driveSpec).getPath());", "+            try {", "+                 FILE_UTILS.normalize(driveSpec).getPath();", "+                 fail(driveSpec + \" is not an absolute path\");", "+            } catch (Exception e) {", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d8c1669fb15b22d957059068a0cf558", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/util/FileUtilsTest.java", "commitBeforeChange": "ef606c34138dc742a6c3e2f1322a1ab89f21044a", "commitAfterChange": "f334365459cf908a8d2fa4ba634a670f1568486c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void testNormalize()", "signatureAfterChange": "      public void testNormalize()", "diff": ["-        /*", "-         * throw in drive letters", "-         */", "-        String driveSpec = \"C:\";", "-        assertEquals(driveSpec,", "-                     FILE_UTILS.normalize(driveSpec).getPath());", "-        assertEquals(driveSpec + \"\\\\\",", "-                     FILE_UTILS.normalize(driveSpec + \"/\").getPath());", "-        assertEquals(driveSpec + \"\\\\\",", "-                     FILE_UTILS.normalize(driveSpec + \"\\\\\").getPath());", "-        String driveSpecLower = \"c:\";", "-        assertEquals(driveSpec + \"\\\\\",", "-                     FILE_UTILS.normalize(driveSpecLower + \"/\").getPath());", "-        assertEquals(driveSpec + \"\\\\\",", "-                     FILE_UTILS.normalize(driveSpecLower + \"\\\\\").getPath());", "-        /*", "-         * promised to eliminate consecutive slashes after drive letter.", "-         */", "-        assertEquals(driveSpec + \"\\\\\",", "-                     FILE_UTILS.normalize(driveSpec + \"/////\").getPath());", "-        assertEquals(driveSpec + \"\\\\\",", "-                     FILE_UTILS.normalize(driveSpec + \"\\\\\\\\\\\\\\\\\\\\\\\\\").getPath());", "-", "-        if (Os.isFamily(\"netware\")) {", "+        if (Os.isFamily(\"dos\")) {", "+            /*", "+             * throw in drive letters", "+             */", "+            String driveSpec = \"C:\";", "+            assertEquals(driveSpec,", "+                         FILE_UTILS.normalize(driveSpec).getPath());", "+            assertEquals(driveSpec + \"\\\\\",", "+                         FILE_UTILS.normalize(driveSpec + \"/\").getPath());", "+            assertEquals(driveSpec + \"\\\\\",", "+                         FILE_UTILS.normalize(driveSpec + \"\\\\\").getPath());", "+            String driveSpecLower = \"c:\";", "+            assertEquals(driveSpec + \"\\\\\",", "+                         FILE_UTILS.normalize(driveSpecLower + \"/\").getPath());", "+            assertEquals(driveSpec + \"\\\\\",", "+                         FILE_UTILS.normalize(driveSpecLower + \"\\\\\").getPath());", "+            /*", "+             * promised to eliminate consecutive slashes after drive letter.", "+             */", "+            assertEquals(driveSpec + \"\\\\\",", "+                         FILE_UTILS.normalize(driveSpec + \"/////\").getPath());", "+            assertEquals(driveSpec + \"\\\\\",", "+                         FILE_UTILS.normalize(driveSpec + \"\\\\\\\\\\\\\\\\\\\\\\\\\").getPath());", "+        } else if (Os.isFamily(\"netware\")) {", "-            driveSpec = \"SYS:\";", "+            String driveSpec = \"SYS:\";", "-            driveSpecLower = \"sys:\";", "+            String driveSpecLower = \"sys:\";", "+        } else {", "+            try {", "+                String driveSpec = \"C:\";", "+                assertEquals(driveSpec,", "+                             FILE_UTILS.normalize(driveSpec).getPath());", "+                fail(\"Expected failure, C: isn't an absolute path on other os's\");", "+            } catch (BuildException e) {", "+                // Passed test ", "+            }"]}]}
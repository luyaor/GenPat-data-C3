{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fba4ed2843e822bcdf26e3be537c5758", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0beec3243ea982503e23e4d989f1faad", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/PropertyFile.java", "commitBeforeChange": "4d8702d1f414ef88110183568a3aa502d18e06f1", "commitAfterChange": "47f04e469cac0e3b728ac34f35ea263717d91745", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "         private void executeInteger(String oldValue) throws BuildException", "signatureAfterChange": "         private void executeInteger(String oldValue) throws BuildException", "diff": ["+            int oldIntValue  = 0;", "+                    oldIntValue = fmt.parse(oldValue).intValue();", "-                newValue = ++value;", "+                if (this.m_value == \"\") {", "+                    // No value attr was given, so just increment \"value\"", "+                    // (which is the old value from the prop file, 0 by", "+                    // assignment above, if none) by 1.", "+                    newValue = ++value;", "+                } else {", "+                    // A value attr was given, so add it to \"value\", which", "+                    // is the old value from the prop file (0, if none).", "+                    newValue = (oldIntValue + value) ;", "+                }", "-                newValue = --value;", "+                if (this.m_value == \"\") {", "+                    // No value attr was given, so just decrement \"value\"", "+                    // (which is the old value from the prop file, 0 by", "+                    // assignment above, if none) by 1.", "+                    newValue = --value;", "+                } else {", "+                    // A value attr was given, so subtract from it \"value\",", "+                    // which is the old value from the prop file (0, if none).", "+                    newValue = (oldIntValue - value);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cc0a51830171c3782214666abfda82d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "bab68a759807a7eb1a16d0447e1356119333ca9a", "commitAfterChange": "f20a1d1c4d3e97928d721c7e1f1546b10cc900b4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void setFile(File file)", "signatureAfterChange": "     public void setFile(File file)", "diff": ["-        log(\"DEPRECATED - The file attribute has been renamed destfile.\"", "-            +\" This attribute will be unsupported before Ant1.5 is released\",", "+        log(\"DEPRECATED - The file attribute has been renamed destfile.\",", "+        log(\"This attribute will be unsupported before Ant1.5 is released.\",", "+            Project.MSG_ERR);", "+", "+        log(\"Be aware that the effect of using the file attribute depends on\",", "+            Project.MSG_ERR);", "+        log(\"the phase of the moon.\", Project.MSG_WARN);", "+        int phase = DateUtils.getPhaseOfMoon(Calendar.getInstance());", "+        if (phase == 4) {", "+            log(\"You are lucky!  Full moon tonight.\");", "+        } else if (phase == 0) {", "+            log(\"Be careful!  New moon tonight.\", Project.MSG_WARN);", "+        }", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a0958b0483ae6872b64f3b827af0289", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "8793957204b1e3607d35150f6631ccadc786c52c", "commitAfterChange": "7030e8de61dc33cedbcff46a1438b62fc1da5f9d", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "     private void logVmExit(FormatterElement[] feArray, JUnitTest test,                            String message)", "signatureAfterChange": "     private void logVmExit(FormatterElement[] feArray, JUnitTest test,                            String message)", "diff": ["-        createClassLoader();", "-        test.setCounts(1, 0, 1);", "-        test.setProperties(getProject().getProperties());", "-        for (int i = 0; i < feArray.length; i++) {", "-            FormatterElement fe = feArray[i];", "-            File outFile = getOutput(fe, test);", "-            JUnitTaskMirror.JUnitResultFormatterMirror formatter = fe.createFormatter(classLoader);", "-            if (outFile != null && formatter != null) {", "-                try {", "-                    OutputStream out = new FileOutputStream(outFile);", "-                    addVmExit(test, formatter, out, message);", "-                } catch (IOException e) {", "-                    // ignore", "+        try {", "+            log(\"Using System properties \" + System.getProperties(),", "+                Project.MSG_VERBOSE);", "+            if (splitJunit) {", "+                classLoader = (AntClassLoader) delegate.getClass().getClassLoader();", "+            } else {", "+                createClassLoader();", "+            }", "+            if (classLoader != null) {", "+                classLoader.setThreadContextLoader();", "+            }", "+", "+            test.setCounts(1, 0, 1);", "+            test.setProperties(getProject().getProperties());", "+            for (int i = 0; i < feArray.length; i++) {", "+                FormatterElement fe = feArray[i];", "+                File outFile = getOutput(fe, test);", "+                JUnitTaskMirror.JUnitResultFormatterMirror formatter = ", "+                    fe.createFormatter(classLoader);", "+                if (outFile != null && formatter != null) {", "+                    try {", "+                        OutputStream out = new FileOutputStream(outFile);", "+                        addVmExit(test, formatter, out, message);", "+                    } catch (IOException e) {", "+                        // ignore", "+                    }", "-        }", "-        if (summary) {", "-            JUnitTaskMirror.SummaryJUnitResultFormatterMirror f = delegate.newSummaryJUnitResultFormatter();", "-            f.setWithOutAndErr(\"withoutanderr\".equalsIgnoreCase(summaryValue));", "-            addVmExit(test, f, getDefaultOutput(), message);", "+            if (summary) {", "+                JUnitTaskMirror.SummaryJUnitResultFormatterMirror f = ", "+                    delegate.newSummaryJUnitResultFormatter();", "+                f.setWithOutAndErr(\"withoutanderr\".equalsIgnoreCase(summaryValue));", "+                addVmExit(test, f, getDefaultOutput(), message);", "+            }", "+        } finally {", "+            if (classLoader != null) {", "+                classLoader.resetThreadContextLoader();", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "872dfb909fc28738e599518eb044d37c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/jsp/JspC.java", "commitBeforeChange": "45463e16cc6d33e37b34603bed90fee3fddc2773", "commitAfterChange": "8deee6eda1e7908cda05f5cbb702f050153cfa28", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "     public void execute()         throws BuildException", "signatureAfterChange": "     public void execute()         throws BuildException", "diff": ["+\t\tint filecount=0;", "-", "+\t\t\tfilecount=files.length;", "+\t\tlog(\"compiling \"+compileList.size()+\" files\",Project.MSG_VERBOSE);", "+\t\telse {", "+\t\t\tif(filecount==0) {", "+\t\t\t\tlog(\"there were no files to compile\",Project.MSG_INFO);", "+\t\t\t}", "+\t\t\telse {", "+\t\t\t\tlog(\"all files are up to date\",Project.MSG_VERBOSE);", "+\t\t\t}", "+\t\t}"]}]}
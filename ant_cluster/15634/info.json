{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4b2c225829f22668fba0111481b32072", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72e05271085922acef796b9b42125462", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/unix/Symlink.java", "commitBeforeChange": "1225a5a849faa66e73a1262180dd002332b162b0", "commitAfterChange": "90a6d8155086ee0d0a1911584a56eb7b33fb3d0f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public synchronized void execute() throws BuildException", "diff": ["-    public void execute() throws BuildException {", "+    public synchronized void execute() throws BuildException {", "+        if (executing) {", "+            throw new BuildException(", "+                \"Infinite recursion detected in Symlink.execute()\");", "+        }", "-            if (action.equals(\"single\")) {", "-                doLink(resource, link);", "-            } else if (action.equals(\"delete\")) {", "-                try {", "-                    log(\"Removing symlink: \" + link);", "-                    Symlink.deleteSymlink(link);", "-                } catch (FileNotFoundException fnfe) {", "-                    handleError(fnfe.toString());", "-                } catch (IOException ioe) {", "-                    handleError(ioe.toString());", "-                }", "-            } else if (action.equals(\"recreate\")) {", "-                Properties listOfLinks;", "-                Enumeration keys;", "-", "-                if (fileSets.size() == 0) {", "-                    handleError(\"File set identifying link file(s) \"", "-                                + \"required for action recreate\");", "-                    return;", "-                }", "-                listOfLinks = loadLinks(fileSets);", "-", "-                keys = listOfLinks.keys();", "-", "-                while (keys.hasMoreElements()) {", "-                    link = (String) keys.nextElement();", "-                    resource = listOfLinks.getProperty(link);", "-                    // handle the case where the link exists", "-                    // and points to a directory (bug 25181)", "-                    try {", "-                        File test = new File(link);", "-                        File testRes = new File(resource);", "-                        if (!FILE_UTILS.isSymbolicLink(test.getParentFile(),", "-                                               test.getName())) {", "-                            doLink(resource, link);", "-                        } else {", "-                            if (!test.getCanonicalPath().", "-                                equals(testRes.getCanonicalPath())) {", "-                                Symlink.deleteSymlink(link);", "-                                doLink(resource, link);", "-                            } // else the link exists, do nothing", "-                        }", "-                    } catch (IOException ioe) {", "-                        handleError(\"IO exception while creating \"", "-                                    + \"link\");", "-                    }", "-                }", "-            } else if (action.equals(\"record\")) {", "-                Vector vectOfLinks;", "-                Hashtable byDir = new Hashtable();", "-                Enumeration links, dirs;", "-", "-                if (fileSets.size() == 0) {", "-                    handleError(\"Fileset identifying links to \"", "-                                + \"record required\");", "-                    return;", "-                }", "-                if (linkFileName == null) {", "-                    handleError(\"Name of file to record links in \"", "-                                + \"required\");", "-                    return;", "-                }", "-                // fill our vector with file objects representing", "-                // links (canonical)", "-                vectOfLinks = findLinks(fileSets);", "-", "-                // create a hashtable to group them by parent directory", "-                links = vectOfLinks.elements();", "-                while (links.hasMoreElements()) {", "-                    File thisLink = (File) links.nextElement();", "-                    String parent = thisLink.getParent();", "-                    if (byDir.containsKey(parent)) {", "-                        ((Vector) byDir.get(parent)).addElement(thisLink);", "-                    } else {", "-                        byDir.put(parent, new Vector());", "-                        ((Vector) byDir.get(parent)).addElement(thisLink);", "-                    }", "-                }", "-                // write a Properties file in each directory", "-                dirs = byDir.keys();", "-                while (dirs.hasMoreElements()) {", "-                    String dir = (String) dirs.nextElement();", "-                    Vector linksInDir = (Vector) byDir.get(dir);", "-                    Properties linksToStore = new Properties();", "-                    Enumeration eachlink = linksInDir.elements();", "-                    File writeTo;", "-", "-                    // fill up a Properties object with link and resource", "-                    // names", "-                    while (eachlink.hasMoreElements()) {", "-                        File alink = (File) eachlink.nextElement();", "-                        try {", "-                            linksToStore.put(alink.getName(),", "-                                             alink.getCanonicalPath());", "-                        } catch (IOException ioe) {", "-                            handleError(\"Couldn't get canonical \"", "-                                        + \"name of a parent link\");", "-                        }", "-                    }", "-                    // Get a place to record what we are about to write", "-                    writeTo = new File(dir + File.separator", "-                                       + linkFileName);", "-", "-                    writePropertyFile(linksToStore, writeTo,", "-                                      \"Symlinks from \" + writeTo.getParent());", "-                }", "-            } else {", "-                handleError(\"Invalid action specified in symlink\");", "-            }", "+            executing = true;", "+            DispatchUtils.execute(this);", "-            // return all variables to their default state,", "-            // ready for the next invocation.", "-            resource = null;", "-            link = null;", "-            action = \"single\";", "-            fileSets = new Vector();", "-            linkFileName = null;", "-            overwrite = false;", "-            failonerror = true;", "+            executing = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e18c20d41f478be890b71e8e8cdd497b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Available.java", "commitBeforeChange": "b6e535486e4b58d1ae642fa6e7ea1e3e45bc24e2", "commitAfterChange": "8a676908c40081a254a7af5955d7e2065ecffbd1", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      private boolean checkFile()", "signatureAfterChange": "      private boolean checkFile()", "diff": ["-            return checkFile(file);", "+            return checkFile(project.resolveFile(file), file);", "-                String dirname = path.getParent();", "-                if (type != null) {", "-                    if (type.equalsIgnoreCase(\"dir\")) {", "-                        if (path.isFile()) {", "-                            // full-pathname specified", "-                            if (dirname.equals(path.toString())) {", "-                                log(\"Found directory: \" + path, Project.MSG_VERBOSE);", "-                                return true;", "-                            // simple name specified", "-                            } else if(new File(dirname, file).isDirectory()) {", "-                                log(\"Found directory: \" + dirname + File.separator + file, Project.MSG_VERBOSE);", "-                                return true;", "-                            }", "-                        // full-pathname specified", "-                        } else if (path.toString().equals(new File(file).toString()) && path.isDirectory()) {", "-                                log(\"Found directory: \" + path, Project.MSG_VERBOSE);", "-                                return true;", "-                        // simple name specified", "-                        } else if (new File(path, file).isDirectory()) {", "-                                log(\"Found directory: \" + path + File.separator + file, Project.MSG_VERBOSE);", "-                                return true;", "-                        }", "-                    /* end check for type dir */", "-                    } else {", "-                        if (path.toString().equals(new File(file).toString()) && path.isFile()) {", "-                                log(\"Found file: \" + path, Project.MSG_VERBOSE);", "-                                return true;", "-                        } else if (new File(path, file).isFile()) {", "-                            log(\"Found file: \" + path + File.separator + file, Project.MSG_VERBOSE);", "-                            return true;", "-                        } else if (new File(dirname, file).isFile()) {", "-                            log(\"Found file: \" + dirname + File.separator + file, Project.MSG_VERBOSE);", "-                            return true;", "-                        }", "-                    }", "-                /* end check for specified type */", "-                } else {", "-                    if (path.toString().equals(new File(file).toString())) {", "+", "+                // **   full-pathname specified == path in list", "+                // **   simple name specified   == path in list", "+                if (path.exists() && file.equals(paths[i])) {", "+                    if (type == null) {", "-                    } else if (new File(path, file).exists()) {", "-                        log(\"Found: \" + path + File.separator + file, Project.MSG_VERBOSE);", "+                    } else if (type.equalsIgnoreCase(\"dir\") ", "+                               && path.isDirectory()) {", "+                        log(\"Found directory: \" + path, Project.MSG_VERBOSE);", "-                    } else if (new File(dirname, file).exists()) {", "-                        log(\"Found: \" + dirname + File.separator + file, Project.MSG_VERBOSE);", "+                    } else if (type.equalsIgnoreCase(\"file\") ", "+                               && path.isFile()) {", "+                        log(\"Found file: \" + path, Project.MSG_VERBOSE);", "-                    } else {", "-                        File dir = new File(dirname);", "-                        dirname = dir.getParent();", "-                        if (new File(dirname, file).exists()) {", "-                            log(\"Found: \" + dirname + File.separator + file, Project.MSG_VERBOSE);", "+                    }", "+                    // not the requested type", "+                    return false;", "+                }", "+                ", "+                FileUtils fileUtils = FileUtils.newFileUtils();", "+                File parent = fileUtils.getParentFile(path);", "+                // **   full-pathname specified == parent dir of path in list", "+                if (parent != null && parent.exists() ", "+                    && file.equals(parent.getAbsolutePath())) {", "+                    if (type == null) {", "+                        log(\"Found: \" + parent, Project.MSG_VERBOSE);", "+                        return true;", "+                    } else if (type.equalsIgnoreCase(\"dir\")) {", "+                        log(\"Found directory: \" + parent, Project.MSG_VERBOSE);", "+                        return true;", "+                    }", "+                    // not the requested type", "+                    return false;", "+                }", "+", "+                // **   simple name specified   == path in list + name", "+                if (path.exists() && path.isDirectory()) {", "+                    if (checkFile(new File(path, file), ", "+                                  file + \" in \" + path)) {", "+                        return true;", "+                    }", "+                }", "+                ", "+                // **   simple name specified   == parent dir + name", "+                if (parent != null && parent.exists()) {", "+                    if (checkFile(new File(parent, file), ", "+                                  file + \" in \" + parent)) {", "+                        return true;", "+                    }", "+                }", "+                ", "+                // **   simple name specified   == parent of parent dir + name", "+                if (parent != null) {", "+                    File grandParent = fileUtils.getParentFile(parent);", "+                    if (grandParent != null && grandParent.exists()) {", "+                        if (checkFile(new File(grandParent, file), ", "+                                      file + \" in \" + grandParent)) {"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b38627b4ecccca2d30c9c147bda28983", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24301b899f0c92fd4fb82997d3f2d185", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/selectors/modifiedselector/ModifiedSelector.java", "commitBeforeChange": "589691afeb04320ae27578385b12b49398c6c146", "commitAfterChange": "93795db6defdb1059c70826f0e7e15773672f36e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public boolean isSelected(File basedir, String filename, File file)", "signatureAfterChange": "     public boolean isSelected(Resource resource)", "diff": ["+     */", "+    public boolean isSelected(Resource resource) {", "+        if (resource.isFilesystemOnly()) {", "+            // We have a 'resourced' file, so reconvert it and use", "+            // the 'old' implementation.", "+            FileResource fileResource = (FileResource) resource;", "+            File file = fileResource.getFile();", "+            String filename = fileResource.getName();", "+            File basedir = fileResource.getBaseDir();", "+            return isSelected(basedir, filename, file);", "+        } else {", "+            try {", "+                // How to handle non-file-Resources? I copy temporarily the", "+                // resource to a file and use the file-implementation.", "+                FileUtils fu = FileUtils.getFileUtils();", "+                File tmpFile = fu.createTempFile(\"modified-\", \".tmp\", null);", "+                Resource tmpResource = new FileResource(tmpFile);", "+                fu.copyResource(resource, tmpResource);", "+                boolean isSelected = isSelected(tmpFile.getParentFile(),", "+                                                tmpFile.getName(),", "+                                                resource.toLongString());", "+                tmpFile.delete();", "+                return isSelected;", "+            } catch (UnsupportedOperationException uoe) {", "+                log(\"The resource '\"", "+                  + resource.getName()", "+                  + \"' does not provide an InputStream, so it is not checked. \"", "+                  + \"Akkording to 'selres' attribute value it is \"", "+                  + ((selectResourcesWithoutInputStream) ? \"\" : \" not\")", "+                  + \"selected.\", Project.MSG_INFO);", "+                return selectResourcesWithoutInputStream;", "+            } catch (Exception e) {", "+                throw new BuildException(e);", "+            }", "+        }", "+    }", "-        String newValue    = algorithm.getValue(f);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3402a2809fadfc549e1cbf8f3c5d4238", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "cbd20a77eba224b21654251583971e054729f006", "commitAfterChange": "752d64fa43db2172327771ba4d36bee3f2d3b49a", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     protected void writeLocalFileHeader(ZipEntry ze) throws IOException", "signatureAfterChange": "     protected void writeLocalFileHeader(ZipEntry ze) throws IOException", "diff": ["-        byte[] name = getBytes(ze.getName());", "+        boolean encodable = this.zipEncoding.canEncode(ze.getName());", "+        ByteBuffer name = this.zipEncoding.encode(ze.getName());", "+", "-            ze.addExtraField(new UnicodePathExtraField(ze.getName(), name));", "+", "+            /*            if (!encodable) { -- FIXME decide what to*/", "+                ze.addExtraField(new UnicodePathExtraField(ze.getName(),", "+                                                           name.array(),", "+                                                           name.arrayOffset(),", "+                                                           name.limit()));", "+            /* } */", "+", "-                byte[] commentB = getBytes(comm);", "-                ze.addExtraField(new UnicodeCommentExtraField(comm, commentB));", "+", "+                boolean commentEncodable = this.zipEncoding.canEncode(comm);", "+", "+                /*            if (!commentEncodable) { -- FIXME decide what to*/", "+                    ByteBuffer commentB = this.zipEncoding.encode(comm);", "+                    ze.addExtraField(new UnicodeCommentExtraField(comm,", "+                                                                  commentB.array(),", "+                                                                  commentB.arrayOffset(),", "+                                                                  commentB.limit())", "+                                     );", "+                /* } */", "-        writeOut(ZipShort.getBytes(name.length));", "+        writeOut(ZipShort.getBytes(name.limit()));", "-        writeOut(name);", "-        written += name.length;", "+        writeOut(name.array(), name.arrayOffset(), name.limit());", "+        written += name.limit();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5005e73cf09b2c2793da328c28ca56bc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ResourceUtils.java", "commitBeforeChange": "f7cec58a607900954a1686009fb5ebe4ea6ddea6", "commitAfterChange": "3ae69e82c33e0e03941387a3506561accc2697d3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public static void copyResource(Resource source, Resource dest,                              FilterSetCollection filters, Vector filterChains,                              boolean overwrite, boolean preserveLastModified,                              String inputEncoding, String outputEncoding,                              Project project)         throws IOException", "signatureAfterChange": "     public static void copyResource(Resource source, Resource dest,                             FilterSetCollection filters, Vector filterChains,                             boolean overwrite, boolean preserveLastModified, boolean append,                             String inputEncoding, String outputEncoding,                             Project project)         throws IOException", "diff": ["-        if (!overwrite) {", "-            long slm = source.getLastModified();", "-            if (dest.isExists() && slm != 0", "-                && dest.getLastModified() > slm) {", "-                return;", "-            }", "+     */", "+    public static void copyResource(Resource source, Resource dest,", "+                            FilterSetCollection filters, Vector filterChains,", "+                            boolean overwrite, boolean preserveLastModified, boolean append,", "+                            String inputEncoding, String outputEncoding,", "+                            Project project)", "+        throws IOException {", "+        if (!(overwrite || SelectorUtils.isOutOfDate(source, dest, FileUtils.getFileUtils()", "+                .getFileTimestampGranularity()))) {", "+            return;", "-                OutputStreamWriter osw = null;", "+                OutputStream os = getOutputStream(dest, append, project);", "+                OutputStreamWriter osw;", "-                    osw = new OutputStreamWriter(dest.getOutputStream());", "+                    osw = new OutputStreamWriter(os);", "-                    osw = new OutputStreamWriter(dest.getOutputStream(),", "-                                                 outputEncoding);", "+                    osw = new OutputStreamWriter(os, outputEncoding);", "-                OutputStreamWriter osw = null;", "+                OutputStream os = getOutputStream(dest, append, project);", "+                OutputStreamWriter osw;", "-                    osw = new OutputStreamWriter(dest.getOutputStream());", "+                    osw = new OutputStreamWriter(os);", "-                    osw = new OutputStreamWriter(dest.getOutputStream(),", "-                                                 outputEncoding);", "+                    osw = new OutputStreamWriter(os, outputEncoding);", "-                out = dest.getOutputStream();", "+                out = getOutputStream(dest, append, project);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9263a09f33ac29321ed56b0376acbbab", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "f83f5c68c975f31a384cc24e94be4e5ebfa2da4d", "commitAfterChange": "f463bd2cab8b132695d8bf60c889212628eba281", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String inputEncoding, String outputEncoding,                          Project project)         throws IOException", "signatureAfterChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String inputEncoding, String outputEncoding,                          Project project)         throws IOException", "diff": ["-        if (overwrite || !destFile.exists() ||", "-            destFile.lastModified() < sourceFile.lastModified()) {", "+        if (overwrite || !destFile.exists()", "+            || destFile.lastModified() < sourceFile.lastModified()) {", "-                        in =", "-                            new BufferedReader(new InputStreamReader(", "-                                                                     new FileInputStream(sourceFile),", "-                                                                     inputEncoding));", "+                        InputStreamReader isr", "+                            = new InputStreamReader(new FileInputStream(sourceFile),", "+                                                    inputEncoding);", "+                        in = new BufferedReader(isr);", "-                        out =", "-                            new BufferedWriter(new OutputStreamWriter(", "-                                                                      new FileOutputStream(destFile),", "-                                                                      outputEncoding));", "+                        OutputStreamWriter osw", "+                            = new OutputStreamWriter(new FileOutputStream(destFile),", "+                                                     outputEncoding);", "+                        out = new BufferedWriter(osw);", "-                            // this should not happen, because the lines are returned with the end of line delimiter", "+                            // this should not happen, because the lines are", "+                            // returned with the end of line delimiter", "-                     char buffer[] = new char[1024*8];", "+                     char[] buffer = new char[1024 * 8];"]}]}
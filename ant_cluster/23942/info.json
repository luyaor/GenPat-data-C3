{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "995b77f159dae815367790c93febd29a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad55036b572183823570a4535876ee3f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "91d793f241c599ce33f64498e502e7e19eda7e6b", "commitAfterChange": "be09d4522b2728d1a2a32286bee75a14b2952fc5", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "     private boolean causesIllegalSymlinkLoop(String dirName, File parent,                                              LinkedList directoryNamesFollowed)", "signatureAfterChange": "     private boolean causesIllegalSymlinkLoop(String dirName, File parent,                                              LinkedList directoryNamesFollowed)", "diff": ["-            if (CollectionUtils.frequency(directoryNamesFollowed, dirName)", "+            if (directoryNamesFollowed.size() >= maxLevelsOfSymlinks", "+                && CollectionUtils.frequency(directoryNamesFollowed, dirName)", "-                LinkedList s = (LinkedList) directoryNamesFollowed.clone();", "-                while (s.size() > 0) {", "+                for (Iterator i = directoryNamesFollowed.iterator();", "+                     i.hasNext(); ) {", "-                    String dir = (String) s.removeFirst();", "+                    String dir = (String) i.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f84888db3a66706281cd983fe138319a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "d0f8c8f0a08f929b79b2a5f4870816597fbd214a", "commitAfterChange": "fbec743802e72b68f8b558c70d564ce653e43621", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private static void printTargets(Project project, boolean printSubTargets)", "signatureAfterChange": "     private static void printTargets(Project project, boolean printSubTargets)", "diff": ["-        Enumeration ptargets = project.getTargets().elements();", "+        Map ptargets = removeDuplicateTargets(project.getTargets());", "-        while (ptargets.hasMoreElements()) {", "-            currentTarget = (Target) ptargets.nextElement();", "+        for (Iterator i = ptargets.values().iterator(); i.hasNext();) {", "+            currentTarget = (Target) i.next();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b99b6bb5a0c512ae4a5afa9d3843da88", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39b60ee0d50bb2838c91d7863897d20d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/tar/TarInputStream.java", "commitBeforeChange": "b43f4224d8fe9d1e7d628e88df394a7dfed46d1b", "commitAfterChange": "2e5b53fa106b848646493cb6f6ea74616973aca0", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public TarEntry getNextEntry() throws IOException", "signatureAfterChange": "     public TarEntry getNextEntry() throws IOException", "diff": ["-        byte[] headerBuf = buffer.readRecord();", "-", "-        if (headerBuf == null) {", "-            if (debug) {", "-                System.err.println(\"READ NULL RECORD\");", "-            }", "-            hasHitEOF = true;", "-        } else if (buffer.isEOFRecord(headerBuf)) {", "-            if (debug) {", "-                System.err.println(\"READ EOF RECORD\");", "-            }", "-            hasHitEOF = true;", "-        }", "+        byte[] headerBuf = getRecord();", "-        } else {", "-            currEntry = new TarEntry(headerBuf);", "-", "-            if (debug) {", "-                System.err.println(\"TarInputStream: SET CURRENTRY '\"", "-                        + currEntry.getName()", "-                        + \"' size = \"", "-                        + currEntry.getSize());", "-            }", "-", "-            entryOffset = 0;", "-", "-            entrySize = currEntry.getSize();", "+            return null;", "-        if (currEntry != null && currEntry.isGNULongNameEntry()) {", "+        try {", "+            currEntry = new TarEntry(headerBuf, encoding);", "+        } catch (IllegalArgumentException e) {", "+            IOException ioe = new IOException(\"Error detected parsing the header\");", "+            ioe.initCause(e);", "+            throw ioe;", "+        }", "+        if (debug) {", "+            System.err.println(\"TarInputStream: SET CURRENTRY '\"", "+                               + currEntry.getName()", "+                               + \"' size = \"", "+                               + currEntry.getSize());", "+        }", "+", "+        entryOffset = 0;", "+        entrySize = currEntry.getSize();", "+", "+        if (currEntry.isGNULongNameEntry()) {", "-                longName.append(new String(buf, 0, length));", "+                longName.append(new String(buf, 0, length)); // TODO default charset?", "+        if (currEntry.isPaxHeader()){ // Process Pax headers", "+            paxHeaders();", "+        }", "+", "+        if (currEntry.isGNUSparse()){ // Process sparse files", "+            readGNUSparse();", "+        }", "+", "+        // If the size of the next element in the archive has changed", "+        // due to a new size being reported in the posix header", "+        // information, we update entrySize here so that it contains", "+        // the correct value.", "+        entrySize = currEntry.getSize();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eda1fb9d8c8bcca81320260731707efd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/tar/TarInputStream.java", "commitBeforeChange": "23bbf085727756cfbad92aaa345e10c7370d3486", "commitAfterChange": "75110026aa35fe98da6c696598361977c3c46c48", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public TarEntry getNextEntry() throws IOException", "signatureAfterChange": "     public TarEntry getNextEntry() throws IOException", "diff": ["-        if (this.hasHitEOF) {", "+        if (hasHitEOF) {", "-        if (this.currEntry != null) {", "-            long numToSkip = this.entrySize - this.entryOffset;", "+        if (currEntry != null) {", "+            long numToSkip = entrySize - entryOffset;", "-            if (this.debug) {", "+            if (debug) {", "-                        + this.currEntry.getName() + \"' SZ \"", "-                        + this.entrySize + \" OFF \"", "-                        + this.entryOffset + \"  skipping \"", "+                        + currEntry.getName() + \"' SZ \"", "+                        + entrySize + \" OFF \"", "+                        + entryOffset + \"  skipping \"", "-                this.skip(numToSkip);", "+                skip(numToSkip);", "-            this.readBuf = null;", "+            readBuf = null;", "-        byte[] headerBuf = this.buffer.readRecord();", "+        byte[] headerBuf = buffer.readRecord();", "-            if (this.debug) {", "+            if (debug) {", "-            this.hasHitEOF = true;", "-        } else if (this.buffer.isEOFRecord(headerBuf)) {", "-            if (this.debug) {", "+            hasHitEOF = true;", "+        } else if (buffer.isEOFRecord(headerBuf)) {", "+            if (debug) {", "-            this.hasHitEOF = true;", "+            hasHitEOF = true;", "-        if (this.hasHitEOF) {", "-            this.currEntry = null;", "+        if (hasHitEOF) {", "+            currEntry = null;", "-            this.currEntry = new TarEntry(headerBuf);", "+            currEntry = new TarEntry(headerBuf);", "-            if (this.debug) {", "+            if (debug) {", "-                        + this.currEntry.getName()", "+                        + currEntry.getName()", "-                        + this.currEntry.getSize());", "+                        + currEntry.getSize());", "-            this.entryOffset = 0;", "+            entryOffset = 0;", "-            this.entrySize = this.currEntry.getSize();", "+            entrySize = currEntry.getSize();", "-        if (this.currEntry != null && this.currEntry.isGNULongNameEntry()) {", "+        if (currEntry != null && currEntry.isGNULongNameEntry()) {", "-            if (this.currEntry == null) {", "+            if (currEntry == null) {", "-            this.currEntry.setName(longName.toString());", "+            currEntry.setName(longName.toString());", "-        return this.currEntry;", "+        return currEntry;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "51292e7037e038195bbe220b35a45cca", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cbe66f6efd218cfd27be1e62284bb3e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/perforce/P4Label.java", "commitBeforeChange": "52579e96823f78d8588c70e92d5cded416cbeb9a", "commitAfterChange": "c3633d1c5a471deebcca60685fe7ebec2e55cf52", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "          public void execute() throws BuildException", "signatureAfterChange": "              public void execute() throws BuildException", "diff": ["-    ", "+        ", "-", "+\t\tif(lock != null && !lock.equalsIgnoreCase(\"locked\")) {", "+        \tlog(\"lock attribute invalid - ignoring\",Project.MSG_WARN);", "+\t\t}", "+        ", "+        //We have to create a unlocked label first", "+", "+        //Now lock if required", "+        if (lock != null && lock.equalsIgnoreCase(\"locked\"))  {", "+        ", "+        \tlog(\"Modifying lock status to 'locked'\",Project.MSG_INFO);", "+", "+        \tfinal StringBuffer labelSpec = new StringBuffer();", "+            ", "+\t\t\t//Read back the label spec from perforce, ", "+            //Replace Options", "+            //Submit back to Perforce", "+            ", "+        \thandler = new P4HandlerAdapter()  {", "+           \t\tpublic void process(String line)  {", "+                \tlog(line, Project.MSG_VERBOSE);", "+                    ", "+\t\t\t\t\tif(util.match(\"/^Options:/\",line)) {", "+   \t                \tline = \"Options: \"+lock;", "+\t\t\t\t\t}", "+                    ", "+                    labelSpec.append(line+\"\\n\");", "+           \t\t}", "+        \t};", "+        ", "+        \t", "+            ", "+\t\t\texecP4Command(\"label -o \"+name, handler);", "+            log(labelSpec.toString(),Project.MSG_DEBUG);", "+", "+            log(\"Now locking label...\",Project.MSG_VERBOSE);", "+\t\t\thandler = new P4HandlerAdapter() {", "+\t\t\t\tpublic void process(String line) {", "+\t\t\t\t\tlog(line, Project.MSG_VERBOSE);", "+\t\t\t\t}", "+        \t};", "+", "+            handler.setOutput(labelSpec.toString());", "+\t\t\texecP4Command(\"label -i\", handler);", "+        }", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5acd4ea26341e8626814f1170cbfaca", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "6ecbe242189a8d7feba3d56c8ec89582e77b1b29", "commitAfterChange": "409b0917b6f737faf5c8b804fdbec8bd1f7f5274", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+            ", "+            System.err.println(test.getFork());", "+", "-                    fe.setOutfile(project.resolveFile(test.getOutfile()", "-                                                      +fe.getExtension()));", "+                    if (fe.getUseFile()) {", "+                        fe.setOutfile(project.resolveFile(test.getOutfile()", "+                                                          +fe.getExtension()));", "+                    } else {", "+                        fe.setOutput(new LogOutputStream(this, Project.MSG_INFO));", "+                    }", "-                    add[i].setOutfile(project.resolveFile(test.getOutfile()", "-                                                          +add[i].getExtension()));", "+                    if (add[i].getUseFile()) {", "+                        add[i].setOutfile(project.resolveFile(test.getOutfile()", "+                                                              +add[i].getExtension()));", "+                    } else {", "+                        add[i].setOutput(new LogOutputStream(this, Project.MSG_INFO));", "+                    }", "+                StringBuffer formatterArg = new StringBuffer();", "-                    cmd.createArgument().setValue(\"formatter=\" +", "-                                                  fe.getClassname() + \",\"", "-                                                  + project.resolveFile(test.getOutfile()", "-                                                                               +fe.getExtension()).getAbsolutePath());", "+                    formatterArg.append(\"formatter=\");", "+                    formatterArg.append(fe.getClassname());", "+                    if (fe.getUseFile()) {", "+                        formatterArg.append(\",\");", "+                        formatterArg.append(project.resolveFile(test.getOutfile()", "+                                                                +fe.getExtension())", "+                                            .getAbsolutePath());", "+                    }", "+                    cmd.createArgument().setValue(formatterArg.toString());", "+                    formatterArg.setLength(0);", "-                    cmd.createArgument().setValue(\"formatter=\" +", "-                                                  add[i].getClassname() + \",\"", "-                                                  + project.resolveFile(test.getOutfile()", "-                                                                               +add[i].getExtension()).getAbsolutePath());", "+                    formatterArg.append(\"formatter=\");", "+                    formatterArg.append(add[i].getClassname());", "+                    if (add[i].getUseFile()) {", "+                        formatterArg.append(\",\");", "+                        formatterArg.append(project.resolveFile(test.getOutfile()", "+                                                                +add[i].getExtension())", "+                                            .getAbsolutePath());", "+                    }", "+                    cmd.createArgument().setValue(formatterArg.toString());", "+                    formatterArg.setLength(0);", "+                log(\"Executing: \"+cmd.toString(), Project.MSG_VERBOSE);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7e623191a0820c7ca5790b4306c05619", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97117026fda7a0dc49160737ab59d54a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "4d082edbbdb380b7d718db1bf4322dcdc3f49281", "commitAfterChange": "f40249fb493adae86ba37ff25192164188f6eb32", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "     private AttributeSetter createAttributeSetter(final Method m,                                                   Class arg,                                                   final String attrName)", "signatureAfterChange": "     private AttributeSetter createAttributeSetter(final Method m,                                                   Class arg,                                                   final String attrName)", "diff": ["+        } else if (reflectedArg.getSuperclass() != null && reflectedArg.getSuperclass().getName().equals(\"java.lang.Enum\")) {", "+            return new AttributeSetter(m) {", "+                public void set(Project p, Object parent, String value)", "+                        throws InvocationTargetException, IllegalAccessException, BuildException {", "+                    try {", "+                        m.invoke(parent, new Object[] {", "+                            reflectedArg.getMethod(\"valueOf\", new Class[] {String.class}).", "+                                    invoke(null, new Object[] {value})});", "+                    } catch (InvocationTargetException x) {", "+                        if (x.getTargetException() instanceof IllegalArgumentException) {", "+                            throw new BuildException(\"'\" + value + \"' is not a permitted value for \" + reflectedArg.getName());", "+                        } else {", "+                            throw new BuildException(x.getTargetException());", "+                        }", "+                    } catch (Exception x) {", "+                        throw new BuildException(x);", "+                    }", "+                }", "+            };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8f025a66e6ac8127b7534858b52c95c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "d25488cbbb28cf25e1f91f714c70999fd105432d", "commitAfterChange": "3d706ab8188a674936880b6f4530b0cf3991758b", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "      private AttributeSetter getEnumSetter(         final Class reflectedArg, final Method m, Class arg)", "signatureAfterChange": "      private AttributeSetter getEnumSetter(         final Class<?> reflectedArg, final Method m, Class<?> arg)", "diff": ["-        final Class reflectedArg, final Method m, Class arg) {", "-        Class enumClass = null;", "-        try {", "-            enumClass = Class.forName(\"java.lang.Enum\");", "-        } catch (ClassNotFoundException e) {", "-            //ignore", "-        }", "-        if (enumClass != null && enumClass.isAssignableFrom(reflectedArg)) {", "+        final Class<?> reflectedArg, final Method m, Class<?> arg) {", "+        if (reflectedArg.isEnum()) {", "+                    Enum<?> setValue;", "-                        m.invoke(", "-                            parent, new Object[] {", "-                                reflectedArg.getMethod(", "-                                    \"valueOf\", new Class[] {String.class}).", "-                                invoke(null, new Object[] {value})});", "-                    } catch (InvocationTargetException x) {", "+                        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })", "+                        Enum<?> enumValue = Enum.valueOf((Class<? extends Enum>) reflectedArg,", "+                                value);", "+                        setValue = enumValue;", "+                    } catch (IllegalArgumentException e) {", "-                        if (x.getTargetException() instanceof IllegalArgumentException) {", "-                            throw new BuildException(", "-                                \"'\" + value + \"' is not a permitted value for \"", "+                        throw new BuildException(\"'\" + value + \"' is not a permitted value for \"", "-                        }", "-                        //only if the exception is not an IllegalArgument do we", "-                        // request the", "-                        //BuildException via extractBuildException():", "-                        throw extractBuildException(x);", "-                    } catch (Exception x) {", "-                        //any other failure of invoke() to work.", "-                        throw new BuildException(x);", "+                    m.invoke(parent, setValue);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7720035759e9b29806925f502d5e9997", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13e90a7f55324830a41b9d4ba2845e9d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "795504806c2498feccbb9b3fafe76078091de6fd", "commitAfterChange": "b16652b4516ee8e3e5e8d4c52577c2164ee78f1d", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void write(byte[] b, int offset, int length) throws IOException", "signatureAfterChange": "     public void write(byte[] b, int offset, int length) throws IOException", "diff": ["-                    def.setInput(b, offset, length);", "-                    while (!def.needsInput()) {", "-                        deflate();", "+                    if (length <= DEFLATER_BLOCK_SIZE) {", "+                        def.setInput(b, offset, length);", "+                        deflateUntilInputIsNeeded();", "+                    } else {", "+                        final int fullblocks = length / DEFLATER_BLOCK_SIZE;", "+                        for (int i = 0; i < fullblocks; i++) {", "+                            def.setInput(b, offset + i * DEFLATER_BLOCK_SIZE,", "+                                         DEFLATER_BLOCK_SIZE);", "+                            deflateUntilInputIsNeeded();", "+                        }", "+                        final int done = fullblocks * DEFLATER_BLOCK_SIZE;", "+                        if (done < length) {", "+                            def.setInput(b, offset + done, length - done);", "+                            deflateUntilInputIsNeeded();", "+                        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2834865718a9e22d675ef290a9a99993", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/TailFilter.java", "commitBeforeChange": "87241e9658b99f80933db976b7e099e08ffc2de0", "commitAfterChange": "f87fdc99c7f6796711f3b1f1efd9add14cb58129", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public final int read() throws IOException", "signatureAfterChange": "     public final int read() throws IOException", "diff": ["-                if (ch == '\\n' || ch == -1) {", "-                    ++linesRead;", "+                if (lines > 0) {", "+                    if (ch == '\\n' || ch == -1) {", "+                        ++linesRead;", "-                    if (linesRead == lines) {", "-                        int i = 0;", "-                        for (i = returnedCharPos + 1;", "-                            buffer[i] != 0 && buffer[i] != '\\n'; i++) {", "+                        if ((linesRead == lines + skip)) {", "+                            int i = 0;", "+                            for (i = returnedCharPos + 1;", "+                                buffer[i] != 0 && buffer[i] != '\\n'; i++) {", "+                            }", "+                            returnedCharPos = i;", "+                            --linesRead;", "-                        returnedCharPos = i;", "-                        --linesRead;", "+        // Because the complete stream is read into the buffer I can delete", "+        // the \"skip lines\" from back to the beginning.", "+        if (skip > 0) {", "+            // searching...", "+            int i;", "+            for (i = buffer.length - 1; skip > 0; i--) {", "+                if (buffer[i]=='\\n') {", "+                    skip--;", "+                }", "+            }", "+", "+           // cut the buffer to the new length", "+           char[] newBuffer = new char[i];", "+           System.arraycopy(buffer, 0, newBuffer, 0, i);", "+           buffer = newBuffer;", "+", "+           // don\ufffdt forget to set the \"lastposition\" new", "+           bufferPos = i;", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b876d3cce5259f4b6513ccfaf67a7cc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/StringInputStream.java", "commitBeforeChange": "03b6e25418f4b94cbb94e191d23d8ab0ba7b8f6e", "commitAfterChange": "fc6a4383fa7cee5fe2534dc9edc9d8a4eb5c254f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public int read() throws IOException", "signatureAfterChange": "     public synchronized int read() throws IOException", "diff": ["-    public int read() throws IOException {", "-        return in.read();", "+    public synchronized int read() throws IOException {", "+        if (in == null) {", "+            throw new IOException(\"Stream Closed\");", "+        }", "+", "+        byte result;", "+        if (slack != null && begin < slack.length) {", "+            result = slack[begin];", "+            if (++begin == slack.length) {", "+                slack = null;", "+            }", "+        } else {", "+            byte[] buf = new byte[1];", "+            if (read(buf, 0, 1) <= 0) {", "+                return -1;", "+            }", "+            result = buf[0];", "+        }", "+        if (result < 0) {", "+            return 256 + result;", "+        } else {", "+            return result;", "+        }", "+    }"]}]}
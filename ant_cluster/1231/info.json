{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "28fb447d41c9ba6604e038ff2bb9232d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb09cd6707c9308e0e0ef7490cc0225b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/taskdefs/javac/DefaultCompilerAdapter.java", "commitBeforeChange": "bd92e4de44f659770bc30e39f352dcc8446a1e9a", "commitAfterChange": "248269dea49bf84d7f1a87d23906854c519b9f70", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     protected int executeExternalCompile( String[] args, int firstFileName )         throws TaskException", "signatureAfterChange": "     protected boolean executeExternalCompile( final Commandline cmd )         throws TaskException", "diff": ["-    protected int executeExternalCompile( String[] args, int firstFileName )", "+    protected boolean executeExternalCompile( final Commandline cmd )", "-        String[] commandArray = null;", "+        logFilesToCompile( cmd );", "+", "-             * file if the total length of the command line exceeds this limit.", "+             * file.", "-            if( StringUtil.join( args, \" \" ).length() > 4096 )", "+            try", "-                PrintWriter out = null;", "+                tmpFile = File.createTempFile( \"javac\", \"\", new File( \".\" ) );", "+                final FileWriter fout = new FileWriter( tmpFile );", "-                    tmpFile = File.createTempFile( \"jikes\", \"\", new File( \".\" ) );", "-                    out = new PrintWriter( new FileWriter( tmpFile ) );", "-                    for( int i = firstFileName; i < args.length; i++ )", "+                    final PrintWriter out = new PrintWriter( fout );", "+                    for( int i = 0; i < m_compileList.length; i++ )", "-                        out.println( args[ i ] );", "+                        File file = m_compileList[i ];", "+                        out.println( file.getAbsolutePath() );", "-                    out.flush();", "-                    commandArray = new String[ firstFileName + 1 ];", "-                    System.arraycopy( args, 0, commandArray, 0, firstFileName );", "-                    commandArray[ firstFileName ] = \"@\" + tmpFile.getAbsolutePath();", "-                }", "-                catch( final IOException ioe )", "-                {", "-                    throw new TaskException( \"Error creating temporary file\", ioe );", "+                    out.close();", "-                    IOUtil.shutdownWriter( out );", "+                    IOUtil.shutdownWriter( fout );", "-            else", "+            catch( final IOException ioe )", "-                commandArray = args;", "+                throw new TaskException( \"Error creating temporary file\", ioe );", "+", "+            cmd.addArgument( \"@\" + tmpFile.getAbsolutePath() );", "-            final String[] commandline = commandArray;", "-            exe.setCommandline( new Commandline( commandline ) );", "-            return exe.execute( getTaskContext() );", "+            exe.setCommandline( cmd );", "+            return exe.execute( getTaskContext() ) == 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e86e8a08bc443ca76827cb19c0496b67", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/embed/src/java/org/apache/tools/ant/helper/ProjectHelperImpl2.java", "commitBeforeChange": "0c9788b8a7fc7ac0827a4a8dfff988deb8ccfc20", "commitAfterChange": "b723ad53e0a48377edac1fd4e449520b737a8dde", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 30, "signatureBeforeChange": "         public void onStartElement(String uri, String tag, String qname,                                    Attributes attrs,                                    AntXmlContext context)             throws SAXParseException", "signatureAfterChange": "         public void onStartElement(String uri, String tag, String qname,                                    Attributes attrs,                                    AntXmlContext context)             throws SAXParseException", "diff": ["-            if (context.getProject().getDataTypeDefinitions().get(qname) != null) {", "+            if (false && context.getProject().getDataTypeDefinitions().get(qname) != null) {", "+/*", "+  UnknownElement should work for data types as well. ", "+                // We should eliminate the special treatement of data type.", "-                    wrapper = new RuntimeConfigurable2(element, qname);", "+                    wrapper = new RuntimeConfigurable2(context.getProject(), null, element, qname);", "+*/", "+                /*", "+                // Don't try to create the task now - for consistency and to", "+                // simplify the model it is better to keep everything lazy", "+", "+                // The consequence of lazy eval - UnknownElement must deal with", "+                // TaskContainer case.", "+                */", "+", "-                    task = new UnknownElement(qname);", "+                    task = new UnknownElement2(qname);", "-                task.setLocation(new Location(context.locator.getSystemId(),", "-                                              context.locator.getLineNumber(),", "-                                              context.locator.getColumnNumber()));", "+                Location location=new Location(context.locator.getSystemId(),", "+                                               context.locator.getLineNumber(),", "+                                               context.locator.getColumnNumber());", "+                task.setLocation(location);", "+                // With lazy eval, parent will also be UnknwonElement ( even if the task", "+                // is a TaskContainer ). It is UnknownElement who must check this.", "+                    System.err.println(\"Shouldn't happen \");", "+                    /*DEBUG*/ try {throw new Exception(); } catch(Exception ex) {ex.printStackTrace();}", "-                wrapper=new RuntimeConfigurable2(task, task.getTaskName());", "+                wrapper=new RuntimeConfigurable2(context.getProject(), location, task, task.getTaskName());"]}]}
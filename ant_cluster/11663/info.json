{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf050ecd4c97ad9d7dbd8de8e9091e1a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1de3df46624f68cf310355ed85f3b2cd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/antlib/AntLibManager.java", "commitBeforeChange": "9ec9a279f5b0d54e1d1362475edc52717b2197ab", "commitAfterChange": "4d8702d1f414ef88110183568a3aa502d18e06f1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void loadLibs(Map librarySpecs, String libLocationString)          throws ExecutionException, MalformedURLException", "signatureAfterChange": "     public void loadLibs(Map librarySpecs, URL libLocationURL)          throws ExecutionException, MalformedURLException", "diff": ["+     */", "+    public void loadLibs(Map librarySpecs, URL libLocationURL)", "+         throws ExecutionException, MalformedURLException {", "+        if (!libLocationURL.getProtocol().equals(\"file\")", "+             && !remoteAllowed) {", "+            throw new ExecutionException(\"The config library \"", "+                 + \"location \\\"\" + libLocationURL", "+                 + \"\\\" cannot be used because config does \"", "+                 + \"not allow remote libraries\");", "+        }", "+        addAntLibraries(librarySpecs, libLocationURL);", "+    }", "-                URL libLocationURL = new URL(libLocationString);", "-                if (!libLocationURL.getProtocol().equals(\"file\")", "-                     && !remoteAllowed) {", "-                    throw new ExecutionException(\"The config library \"", "-                         + \"location \\\"\" + libLocationString", "-                         + \"\\\" cannot be used because config does \"", "-                         + \"not allow remote libraries\");", "-                }", "-                addAntLibraries(librarySpecs, libLocationURL);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fec574b765144b27e1e4a7d3b3c8e9e9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/antlib/AntLibManager.java", "commitBeforeChange": "65b70febb53b077317c4d678291f9af547c3d116", "commitAfterChange": "f9d1c1691c7e9d80b793f5178f6113c949fc2441", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void addLibPath(AntLibrary antLibrary, URL path)          throws ExecutionException", "signatureAfterChange": "     public void addLibPath(String libraryId, URL libPath)          throws AntLibException", "diff": ["-    public void addLibPath(AntLibrary antLibrary, URL path)", "-         throws ExecutionException {", "-        if (!path.getProtocol().equals(\"file\")", "+    public void addLibPath(String libraryId, URL libPath)", "+         throws AntLibException {", "+        System.out.println(\"Adding path \" + libPath + \" for \" + libraryId);", "+        if (!libPath.getProtocol().equals(\"file\")", "-            throw new ExecutionException(\"Remote libpaths are not\"", "-                 + \" allowed: \" + path);", "+            throw new AntLibException(\"Remote libpaths are not\"", "+                 + \" allowed: \" + libPath);", "-        antLibrary.addLibraryURL(path);", "+", "+        List libPaths = (List) libPathsMap.get(libraryId);", "+        if (libPaths == null) {", "+            libPaths = new ArrayList();", "+            libPathsMap.put(libraryId, libPaths);", "+        }", "+        libPaths.add(libPath);", "+", "+        AntLibrary antLibrary = getLibrary(libraryId);", "+        if (antLibrary != null) {", "+            antLibrary.addLibraryURL(libPath);", "+        }"]}]}
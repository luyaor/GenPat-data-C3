{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "82fcea4c931189103c58eb2be604d282", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0742a899fa0b36fcd6ca089ba11632e6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "23a03fcf16119310506d2e18d585cfdffb550650", "commitAfterChange": "1844a85f5feebe940057df6b041ab2fe095cc43d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 7, "signatureBeforeChange": "          public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["+", "-        project.log(\"Building \" + archiveType + \": \" + zipFile.getAbsolutePath());", "-    ", "+        project.log(\"Building \"+ archiveType +\": \"+ zipFile.getAbsolutePath());", "+", "+        if (baseDir == null) {", "+            throw new BuildException(\"basedir attribute must be set!\");", "+        }", "+        if (!baseDir.exists()) {", "+            throw new BuildException(\"basedir does not exist!\");", "+        }", "+", "+        DirectoryScanner ds = new DirectoryScanner();", "+        ds.setBasedir(baseDir);", "+        ds.setIncludes(includes);", "+        ds.setExcludes(excludes);", "+        if (useDefaultExcludes) {", "+            ds.addDefaultExcludes();", "+        }", "+        ds.scan();", "+", "+        String[] files = ds.getIncludedFiles();", "+        String[] dirs  = ds.getIncludedDirectories();", "+", "-\t    initZipOutputStream(zOut);", "-            ", "-            if ( allItems ) {", "-                String[] lst = baseDir.list();", "-                for (int i=0;i<lst.length;i++) {", "-                    items.addElement(lst[i]);", "-                }", "+            initZipOutputStream(zOut);", "+", "+            for (int i = 0; i < dirs.length; i++) {", "+                File f = new File(baseDir,dirs[i]);", "+                String name = dirs[i].replace(File.separatorChar,'/')+\"/\";", "+                zipDir(f, zOut, name);", "-            // add items", "-            Enumeration e = items.elements();", "-            while (e.hasMoreElements()) {", "-                String s = (String)e.nextElement();", "-                // check to make sure item is not in ignore list", "-                // shouldn't be ignored here, but just want to make sure", "-                if (! ignoreList.contains(s)) {", "-                    File f = new File(baseDir, s);", "-                    if (f.isDirectory()) {", "-                        zipDir(f, zOut, s + \"/\");", "-                    } else {", "-                        zipFile(f, zOut, s);", "-                    }", "-                } else {", "-                    project.log(\"Ignoring: \" + s, Project.MSG_WARN);", "-                }", "+            for (int i = 0; i < files.length; i++) {", "+                File f = new File(baseDir,files[i]);", "+                String name = files[i].replace(File.separatorChar,'/');", "+                zipFile(f, zOut, name);", "-    ", "-            // close up            ", "+", "+            // close up"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e01dfff6aa793e54d1474a8f2d4398d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "cc432705f28eb85592b6fd077bf95d7c522e3a01", "commitAfterChange": "1c03d4738077efd8b9b09670c26b25430c83af1f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "          protected void scandir(String dir, String vpath, boolean fast)", "signatureAfterChange": "          protected void scandir(String dir, String vpath, boolean fast)", "diff": ["-                    return;    // no files in directory.", "+                    ftp.changeToParentDirectory();", "+                    return;", "-                    String name = vpath + file.getName();", "-                    if (file.isDirectory()) {", "-                        if (isIncluded(name)) {", "-                            if (!isExcluded(name)) {", "-                                dirsIncluded.addElement(name);", "-                                if (fast) {", "-                                    scandir(name, name + File.separator, fast);", "-                                }", "-                            } else {", "-                                dirsExcluded.addElement(name);", "-                            }", "-                        } else {", "-                            dirsNotIncluded.addElement(name);", "-                            if (fast && couldHoldIncluded(name)) {", "-                                scandir(name, name + File.separator, fast);", "-                            }", "-                        }", "-                        if (!fast) {", "-                            scandir(name, name + File.separator, fast);", "-                        }", "-                    } else {", "-                        if (file.isFile()) {", "+                    if (!file.getName().equals(\".\") && !file.getName().equals(\"..\")) {", "+                        if (file.isDirectory()) {", "+                            String name = file.getName();", "-                                    filesIncluded.addElement(name);", "+                                    dirsIncluded.addElement(name);", "+                                    if (fast) {", "+                                        scandir(name, vpath + name + File.separator, fast);", "+                                    }", "-                                    filesExcluded.addElement(name);", "+                                    dirsExcluded.addElement(name);", "-                                filesNotIncluded.addElement(name);", "+                                dirsNotIncluded.addElement(name);", "+                                if (fast && couldHoldIncluded(name)) {", "+                                    scandir(name, vpath + name + File.separator, fast);", "+                                }", "+                            }", "+                            if (!fast) {", "+                                scandir(name, vpath + name + File.separator, fast);", "+                            }", "+                        } else {", "+                            if (file.isFile()) {", "+                                String name = vpath + file.getName();", "+                                if (isIncluded(name)) {", "+                                    if (!isExcluded(name)) {", "+                                        filesIncluded.addElement(name);", "+                                    } else {", "+                                        filesExcluded.addElement(name);", "+                                    }", "+                                } else {", "+                                    filesNotIncluded.addElement(name);", "+                                }", "+                ftp.changeToParentDirectory();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81cc7405639923635ab1b8f2f66ebf7b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/command/SaveAsCmd.java", "commitBeforeChange": "ffa6e24ba429847c04da9162971b6203151a7ce1", "commitAfterChange": "1056b715f84a4c3b17b7fcdecbaef6eaeb566ea7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void run()", "signatureAfterChange": "     public void run()", "diff": ["-        ProjectProxy project = getContext().getProject();", "-        if(project != null) {", "-            if(_file == null) {", "-                // XXX code here to select a file to save to.", "+        if(_project == null) {", "+            _project = getContext().getSelectionManager().getSelectedProject();", "+        }", "+", "+        if(_project != null) {", "+            // If no location is specified, then this truly is a SaveAs ", "+            // command. Provide the user the UI to select the output.", "+            if(_location == null) {", "-                    _file = chooser.getSelectedFile();", "-                    if(_file.exists()) {", "+                    File file = chooser.getSelectedFile();", "+                    if(file.exists()) {", "-                                       new Object[] {_file.toString()});", "+                                       new Object[] { file.toString()});", "-                        if(val != JOptionPane.YES_OPTION) {", "-                            _file = null;", "+                        if(val == JOptionPane.YES_OPTION) {", "+                            try {", "+                                _location = new URL(", "+                                    \"file\", null, file.getAbsolutePath());", "+                            }", "+                            catch(MalformedURLException ex) {", "+                                // Shouldn't happen. Save will just not", "+                                // happen.", "+                                ex.printStackTrace();", "+                            }", "-            if(_file != null) {", "-                project.setFile(_file);", "-                FileWriter out = null;", "+            // If a location is now available, do the save operation.", "+            if(_location != null) {", "-                    out = new FileWriter(_file);", "-                    project.write(out);", "+                    getContext().getProjectManager().saveAs(", "+                        _project, _location);", "-                        new Object[] { _file.toString() });", "+                        new Object[] { _location.toString() });", "-                }", "-                finally {", "-                    if (out != null) {", "-                        try {", "-                            out.flush();", "-                            out.close();", "-                        }", "-                        catch(IOException ex) {", "-                            // Intentionally ignored.", "-                        }", "-                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a2856542a6f80ca61edb177fe40332d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "3f78457877d6713f35dc7b5d2838f4818f4f16dc", "commitAfterChange": "9a7f8d24f541c554cedaf2d7c947cdb2828b6609", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "         protected void scandir(String dir, String vpath, boolean fast)", "signatureAfterChange": "         protected void scandir(String dir, String vpath, boolean fast)", "diff": ["+            // avoid double scanning of directories, can only happen in fast mode", "+            if (fast && hasBeenScanned(vpath)) {", "+                return;", "+            }", "-", "-                FTPFile[] newfiles = ftp.listFiles();", "+                String completePath = null;", "+                if (!vpath.equals(\"\")) {", "+                    completePath = rootPath + remoteFileSep", "+                        + vpath.replace(File.separatorChar, remoteFileSep.charAt(0));", "+                } else {", "+                    completePath = rootPath;", "+                }", "+                FTPFile[] newfiles = listFiles(completePath, false);", "-                                if (!isExcluded(name)) {", "-                                    if (fast) {", "-                                        if (file.isSymbolicLink()) {", "-                                            scandir(file.getLink(),", "-                                                name + File.separator, fast);", "-                                        } else {", "-                                            scandir(file.getName(),", "-                                                name + File.separator, fast);", "-                                        }", "-                                    }", "-                                    dirsIncluded.addElement(name);", "-                                } else {", "-                                    dirsExcluded.addElement(name);", "-                                    if (fast && couldHoldIncluded(name)) {", "-                                        scandir(file.getName(),", "-                                                name + File.separator, fast);", "-                                    }", "-                                }", "+                                accountForIncludedDir(name,", "+                                    new AntFTPFile(ftp, file, completePath) , fast);", "-                                if (isIncluded(name)) {", "-                                    if (!isExcluded(name)) {", "-                                        filesIncluded.addElement(name);", "-                                    } else {", "-                                        filesExcluded.addElement(name);", "-                                    }", "-                                } else {", "-                                    filesNotIncluded.addElement(name);", "-                                }", "+                                accountForIncludedFile(name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6405c1bad582f55d8ae163005d4aa64", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/rmic/DefaultRmicAdapter.java", "commitBeforeChange": "aca10a1d12baef5b24d64906202659ffbdcf7e0f", "commitAfterChange": "6440b64b5a526e07d4457be2153642524cecc959", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "          public String[] mapFileName(String name)", "signatureAfterChange": "          public String[] mapFileName(String name)", "diff": ["-            if (!attributes.getIiop()) {", "+            /*", "+             * fallback in case we have trouble loading the class or", "+             * don't know how to handle it (there is no easy way to", "+             * know what IDL mode would generate.", "+             *", "+             * This is supposed to make Ant always recompile the", "+             * class, as a file of that name should not exist.", "+             */", "+            String[] target = new String[] {name+\".tmp.\"+rand.nextLong()};", "+", "+            if (!attributes.getIiop() && !attributes.getIdl()) {", "+                // JRMP with simple naming convention", "-                    return new String[] {", "+                    target = new String[] {", "-                    return new String[] {", "+                    target = new String[] {", "-            } else {", "-                int lastSlash = base.lastIndexOf(\"/\");", "+            } else if (!attributes.getIdl()) {", "+                int lastSlash = base.lastIndexOf(File.separatorChar);", "-                return new String[] {", "-                    dirname + \"_\" + filename + getStubClassSuffix() + \".class\",", "-                    dirname + \"_\" + filename + getTieClassSuffix() + \".class\"", "-                };", "+                try {", "+                    Class c = attributes.getLoader().loadClass(classname);", "+", "+                    if (c.isInterface()) {", "+                        // only stub, no tie", "+                        target = new String[] {", "+                            dirname + \"_\" + filename + getStubClassSuffix() ", "+                            + \".class\"", "+                        };", "+                    } else {", "+                        /*", "+                         * stub is derived from implementation, ", "+                         * tie from interface name.", "+                         */", "+                        Class interf = attributes.getRemoteInterface(c);", "+                        String iName = interf.getName();", "+                        String iDir = \"\";", "+                        int iIndex = -1;", "+                        int lastDot = iName.lastIndexOf(\".\");", "+                        if (lastDot == -1) {", "+                            // no package", "+                            iIndex = 0;", "+                        } else {", "+                            iIndex = lastDot + 1;", "+                            iDir = iName.substring(0, iIndex);", "+                            iDir = iDir.replace('.', File.separatorChar);", "+                        }", "+                        ", "+                        target = new String[] {", "+                            dirname + \"_\" + filename + getTieClassSuffix() ", "+                            + \".class\",", "+                            iDir + \"_\" + iName.substring(iIndex) ", "+                            + getStubClassSuffix() + \".class\"", "+                        };", "+                    }", "+                } catch (ClassNotFoundException e) {", "+                    attributes.log(\"Unable to verify class \" + classname", "+                                   + \". It could not be found.\", ", "+                                   Project.MSG_WARN);", "+                } catch (NoClassDefFoundError e) {", "+                    attributes.log(\"Unable to verify class \" + classname", "+                                   + \". It is not defined.\", Project.MSG_WARN);", "+                } catch (Throwable t) {", "+                    attributes.log(\"Unable to verify class \" + classname", "+                                   + \". Loading caused Exception: \"", "+                                   + t.getMessage(), Project.MSG_WARN);", "+                }", "+            return target;"]}]}
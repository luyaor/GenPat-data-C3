{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ddfbd4045e3cd922bf1c986db87c584b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "164a63c8605dd98bb473bfbe82c35cba", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/main/org/apache/ant/core/model/BuildElement.java", "commitBeforeChange": "a48208f6cf8cf80ef1e144305ff8dfe0958599d5", "commitAfterChange": "c2e518039b65dc5b8c9c31f9f78b2d72ea8db2d1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void setAspects(Map aspects)", "signatureAfterChange": "     public void setAspects(Map aspects)", "diff": ["-        this.aspects = aspects;", "+        aspectMaps = new HashMap();", "+        for (Iterator i = aspects.keySet().iterator(); i.hasNext(); ) {", "+            String aspectName = (String)i.next();", "+            int separator = aspectName.indexOf(\":\");", "+            if (separator != -1) {", "+                String prefix = aspectName.substring(0, separator);", "+                String name = aspectName.substring(separator + 1);", "+                if (prefix.length() != 0 && name.length() != 0) {", "+                    Map prefixMap = (Map)aspectMaps.get(prefix);", "+                    if (prefixMap == null) {", "+                        prefixMap = new HashMap();", "+                        aspectMaps.put(prefix, prefixMap);", "+                    }", "+                    prefixMap.put(name, aspects.get(aspectName));", "+                }", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aff094430257642040ab660c9bb89857", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/PropertyHelper.java", "commitBeforeChange": "23a58df47dca238cc3a25e99845e14584c68d686", "commitAfterChange": "7517bc70580950fd744751a673d7c9b77ca06d94", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public Hashtable getProperties()", "signatureAfterChange": "     public Hashtable getProperties()", "diff": ["-        return new Hashtable(properties);", "+        System.out.println(\"GetProperties called\");", "+        Hashtable ret = new Hashtable(properties);", "+        Map locals = threadLocalProperties.getProps();", "+        for (Iterator i = locals.entrySet().iterator(); i.hasNext();) {", "+            Map.Entry e = (Map.Entry) i.next();", "+            List l = (List) e.getValue();", "+            if (l != null && l.size() > 0) {", "+                LocalProperty p = (LocalProperty) l.get(l.size() - 1);", "+                if (p.getValue() == null) {", "+                    if (ret.get(e.getKey()) != null) {", "+                        ret.remove(e.getKey());", "+                    }", "+                } else {", "+                    ret.put(e.getKey(), p.getValue());", "+                }", "+            }", "+        }", "+        return ret;", "+"]}]}
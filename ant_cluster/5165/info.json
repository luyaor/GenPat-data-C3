{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1fb04e1150248b4dd4b78cde38832042", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15cdd007b0e7d4b5132382cd58a72690", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/SSHExec.java", "commitBeforeChange": "99905c75ac5271a7eb5c1cabd0493b25e11cdc2d", "commitAfterChange": "e601be9dd7423c9000e6913ce2f5a785c7881b89", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            throw new BuildException(\"Host is null.\");", "+            throw new BuildException(\"Host is required.\");", "-            throw new BuildException(\"Username is null.\");", "+            throw new BuildException(\"Username is required.\");", "-            throw new BuildException(\"Password and Keyfile are null.\");", "+            throw new BuildException(\"Password or Keyfile is required.\");", "-            throw new BuildException(\"Command is null.\");", "+            throw new BuildException(\"Command is required.\");", "+        ByteArrayOutputStream out = new ByteArrayOutputStream();", "+        Tee tee = new Tee(out, System.out);", "+", "+            // execute the command", "-            ChannelExec channel=(ChannelExec) session.openChannel(\"exec\");", "+            session.setTimeout(maxwait);", "+            final ChannelExec channel=(ChannelExec) session.openChannel(\"exec\");", "-            channel.setInputStream(System.in);", "-            channel.setOutputStream(System.out);", "+            channel.setOutputStream(tee);", "+", "+            // wait for it to finish", "+            thread =", "+                new Thread() {", "+                    public void run() {", "+                        while (!channel.isEOF()) {", "+                            if (thread == null) {", "+                                return;", "+                            }", "+                            try {", "+                                sleep(500);", "+                            } catch (Exception e) {", "+                                // ignored", "+                            }", "+                        }", "+                    }", "+                };", "+                    ", "+            thread.start();", "+            thread.join(maxwait);", "+            ", "+            if (thread.isAlive()) {", "+                // ran out of time", "+                thread = null;", "+                log(\"Timeout period exceeded, connection dropped.\");", "+            } else {", "+                // completed successfully", "+                if (output_property != null) {", "+                    getProject().setProperty(output_property, out.toString());", "+                }", "+                if (output_file != null) {", "+                    writeToFile(out.toString(), append, output_file);", "+                }", "+            }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a046f71ed8eb40663caa6e3cc6b336bc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/taskdefs/ExecTaskTest.java", "commitBeforeChange": "f0724e7b098588dd0742d5dd4adef7fef13e7eb2", "commitAfterChange": "7aff2d5b921ab730204dba2e47d936ce53c0c129", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testspawn()", "signatureAfterChange": "      public void testspawn()", "diff": ["+        GregorianCalendar startwait = new GregorianCalendar();", "+        while (!buildFinished) {", "+            try {", "+                Thread.sleep(10);", "+            } catch (InterruptedException e) {", "+                System.out.println(\"my sleep was interrupted\");", "+            }", "+            GregorianCalendar now = new GregorianCalendar();", "+            // security", "+            if (now.getTimeInMillis() - startwait.getTimeInMillis() > MAX_BUILD_TIME) {", "+                break;", "+            }", "+        }", "+        try {", "+            Thread.sleep((TIME_TO_WAIT) * 1000 + SECURITY_MARGIN);", "+        } catch (InterruptedException e) {", "+            System.out.println(\"my sleep was interrupted\");", "+        }", "+        // time of the build in milli seconds", "+        long elapsed = myBuild.getTimeElapsed();", "+        assertTrue(\"we waited more than the process lasted\", TIME_TO_WAIT * 1000 > elapsed);", "+        logFile = new File(logFile.getAbsolutePath());", "+        System.out.println(\"log file exists \"+ logFile.exists());", "+        assertTrue(\"log file found after spawn\", logFile.exists());"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "779c9f3169d19daabd3c1de2670b78b2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58b9d39237c4718e614cf9ebfce8e1cd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/antlib/src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "6540a295cd786c80c28c14f6c544aa1d64ab3778", "commitAfterChange": "5cdfabc038e26f67080037ea0c7ad6ab284d821c", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 7, "signatureBeforeChange": "                     public void set(Project p, Object parent, String value)                         throws InvocationTargetException, IllegalAccessException", "signatureAfterChange": "     public static synchronized IntrospectionHelper getHelper(Project p, Class c)", "diff": ["+     */", "+    public static synchronized IntrospectionHelper getHelper(Project p, Class c)", "+    {", "+        IntrospectionHelper ih = (IntrospectionHelper) helpers.get(c);", "+        if (ih == null) {", "+            ih = new IntrospectionHelper(c);", "+            helpers.put(c, ih);", "+            // Cleanup at end of project", "+            p.addBuildListener(ih);", "+        }", "+        return ih;", "+    }", "-            return new AttributeSetter() {", "-                    public void set(Project p, Object parent, String value)", "-                        throws InvocationTargetException, IllegalAccessException {", "-                        m.invoke(parent, new Byte[] {new Byte(value)});", "-                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfc2a5022221a28369754bc2064b9ef5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Checksum.java", "commitBeforeChange": "aee67d5f1e75c16e6c8dd25507067b30045c802f", "commitAfterChange": "6c29cfdd70102a32f666f0f4525bf48da0613bbb", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private boolean generateChecksums() throws BuildException", "signatureAfterChange": "     private boolean generateChecksums() throws BuildException", "diff": ["-                // File is Comparable, so sorting is trivial", "-                Arrays.sort(keyArray);", "+                // File is Comparable, but sort-order is platform", "+                // dependent (case-insensitive on Windows)", "+                Arrays.sort(keyArray, new Comparator() {", "+                        public int compare(Object o1, Object o2) {", "+                            File f1 = (File) o1;", "+                            File f2 = (File) o2;", "+                            return f1 == null ? (f2 == null ? 0 : -1)", "+                                : (f2 == null ? 1", "+                                   : f1.getName().compareTo(f2.getName())", "+                                   );", "+                        }", "+                    });"]}]}
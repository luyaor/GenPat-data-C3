{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4810e21141398b2df7a734b348587459", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56541f5a3e8d560f0c294d2917f1a60c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/init/org/apache/ant/init/AntEnvironment.java", "commitBeforeChange": "752f49d5b18f9743f8e4a6dbdc8065d240d9c97a", "commitAfterChange": "da4e1a3aa99899d6aecc6d14c2a7498fa51647aa", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public AntEnvironment(Class libraryClass) throws InitException", "signatureAfterChange": "     public AntEnvironment(Class coreClass) throws InitException", "diff": ["-    public AntEnvironment(Class libraryClass) throws InitException {", "+    public AntEnvironment(Class coreClass) throws InitException {", "-            URL antLibURL = getAntLibURL(libraryClass);", "-            setLibraryURL(antLibURL);", "+            // is Ant Home set?", "+            String antHomeProperty = System.getProperty(ANTHOME_PROPERTY);", "+            if (antHomeProperty == null) {", "+                URL classURL = getAntLibURL(coreClass);", "+                antHome = new URL(classURL, CORECLASS_TO_ANTHOME);", "+            } else {", "+                try {", "+                    antHome = new URL(antHomeProperty);", "+                } catch (MalformedURLException e) {", "+                    // try as a file", "+                    File antHomeDir = new File(antHomeProperty);", "+                    if (!antHomeDir.exists()) {", "+                        throw new InitException(\"ant.home value \\\"\"", "+                             + antHomeProperty + \"\\\" is not valid.\");", "+                    }", "+                    antHome = InitUtils.getFileURL(antHomeDir);", "+                }", "+            }", "-            URL antHome = new URL(antLibURL, \"..\");", "-            setAntHome(antHome);", "+            setLibraryURL(new URL(antHome, LIB_DIR));", "+", "-                File systemConfigArea = new File(antHome.getFile(), \"conf\");", "+                File systemConfigArea", "+                     = new File(antHome.getFile(), SYSTEM_CONFDIR);", "-                 = new File(System.getProperty(\"user.home\"), \".ant/conf\");", "+                 = new File(System.getProperty(\"user.home\"), USER_CONFDIR);", "-            URL commonJarLib = new URL(libraryURL, \"common/\");", "+            URL commonJarLib = new URL(libraryURL, COMMON_DIR);", "-            URL parserBase = new URL(libraryURL, \"parser/\");", "+            URL parserBase = new URL(libraryURL, PARSER_DIR);", "+            URL antcoreBase = new URL(libraryURL, ANTCORE_DIR);", "-                 = LoaderUtils.getLocationURLs(new URL(libraryURL, \"antcore/\"),", "-                \"antcore.jar\");", "+                 = LoaderUtils.getLocationURLs(antcoreBase, \"antcore.jar\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d694ac61c35d73e1f073c35142c5e2ef", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "cfd119edd23f56c4aa458d892285c6b038820ce2", "commitAfterChange": "ac6f3addd34489d7a91f3fd79a9fd0b1b524f5ce", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public static String getAntVersion() throws BuildException", "signatureAfterChange": "      public synchronized static String getAntVersion() throws BuildException", "diff": ["-    public static String getAntVersion() throws BuildException {", "-        try {", "-            Properties props = new Properties();", "-            InputStream in =", "-                Main.class.getResourceAsStream(\"/org/apache/tools/ant/version.txt\");", "-            props.load(in);", "-            in.close();", "-            String lSep = System.getProperty(\"line.separator\");", "-            StringBuffer msg = new StringBuffer();", "-            msg.append(\"Ant version \");", "-            msg.append(props.getProperty(\"VERSION\"));", "-            msg.append(\" compiled on \");", "-            msg.append(props.getProperty(\"DATE\"));", "-            return msg.toString();", "-        } catch (IOException ioe) {", "-            throw new BuildException(\"Could not load the version information:\"", "-                                     + ioe.getMessage());", "-        } catch (NullPointerException npe) {", "-            throw new BuildException(\"Could not load the version information.\");", "+    public synchronized static String getAntVersion() throws BuildException {", "+        if (antVersion == null) {", "+            try {", "+                Properties props = new Properties();", "+                InputStream in =", "+                    Main.class.getResourceAsStream(\"/org/apache/tools/ant/version.txt\");", "+                props.load(in);", "+                in.close();", "+                ", "+                String lSep = System.getProperty(\"line.separator\");", "+                StringBuffer msg = new StringBuffer();", "+                msg.append(\"Ant version \");", "+                msg.append(props.getProperty(\"VERSION\"));", "+                msg.append(\" compiled on \");", "+                msg.append(props.getProperty(\"DATE\"));", "+                antVersion = msg.toString();", "+            } catch (IOException ioe) {", "+                throw new BuildException(\"Could not load the version information:\"", "+                                         + ioe.getMessage());", "+            } catch (NullPointerException npe) {", "+                throw new BuildException(\"Could not load the version information.\");", "+            }", "+        return antVersion;"]}]}
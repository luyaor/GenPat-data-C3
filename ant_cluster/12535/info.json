{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d56bb6bb3a6637ab5dbaeb70fc9d8868", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05b2349730345a246662ae176a539538", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/jsp/JspC.java", "commitBeforeChange": "3e35ab334b7e5ecd691960f61b58069130c4a2b0", "commitAfterChange": "6acb5be183f9d189628089d186ede0caf887cf0c", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 32, "signatureBeforeChange": "     protected void scanDir(File srcDir, File destDir, String files[])", "signatureAfterChange": "     protected void scanDir(File srcDir, File destDir, String files[])", "diff": ["-            File srcFile = new File(srcDir, files[i]);", "-            if (files[i].endsWith(\".jsp\")) {", "-                // drop leading path (if any)", "-                int fileStart =", "-                    files[i].lastIndexOf(File.separatorChar) + 1;", "-                File javaFile = new File(destDir, files[i].substring(fileStart,", "-                                                                     files[i].indexOf(\".jsp\")) + \".java\");", "+            String filename=files[i];", "+            File srcFile = new File(srcDir, filename);", "+            File javaFile=mapToJavaFile(srcFile);", "-                if (srcFile.lastModified() > now) {", "-                    log(\"Warning: file modified in the future: \" +", "-                        files[i], Project.MSG_WARN);", "-                }", "+            if (srcFile.lastModified() > now) {", "+                    log(\"Warning: file modified in the future: \" +filename,", "+                            Project.MSG_WARN);", "+            }", "+            boolean shouldCompile=false;", "-                if (!javaFile.exists() ||", "-                    srcFile.lastModified() > javaFile.lastModified())", "-                    {", "-                        if (!javaFile.exists()) {", "-                            log(\"Compiling \" + srcFile.getPath() +", "-                                \" because java file \"", "-                                + javaFile.getPath() + \" does not exist\",", "-                                Project.MSG_DEBUG);", "-                        } else {", "-                            log(\"Compiling \" + srcFile.getPath() +", "-                                \" because it is out of date with respect to \"", "-                                + javaFile.getPath(), Project.MSG_DEBUG);", "-                        }", "-                        compileList.addElement(srcFile.getAbsolutePath());", "+            if (!javaFile.exists()) {", "+                shouldCompile=true;", "+                log(\"Compiling \" + srcFile.getPath() +", "+                        \" because java file \"+ javaFile.getPath() + \" does not exist\",", "+                        Project.MSG_DEBUG);", "+                } else {", "+                    if( srcFile.lastModified() > javaFile.lastModified()) {", "+                        shouldCompile=true;", "+                        log(\"Compiling \" + srcFile.getPath() +", "+                            \" because it is out of date with respect to \" + javaFile.getPath(),", "+                            Project.MSG_DEBUG);", "+            }", "+            if(shouldCompile) {", "+                compileList.addElement(srcFile.getAbsolutePath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df1ac908608e5e96a2aa789ded8e593a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Jar.java", "commitBeforeChange": "6c89d5a7b85b61086692c8037aa544dc85cf2e7e", "commitAfterChange": "20a1e91d17753399f8d18a5123f8e5e35e0409da", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "      protected boolean isUpToDate(FileScanner[] scanners, File zipFile)", "signatureAfterChange": "      protected boolean isUpToDate(FileScanner[] scanners, File zipFile) throws BuildException", "diff": ["-    protected boolean isUpToDate(FileScanner[] scanners, File zipFile)", "+    protected boolean isUpToDate(FileScanner[] scanners, File zipFile) throws BuildException", "-        if (emptyBehavior == null) emptyBehavior = \"create\";", "-        if (files.length == 0) {", "-            if (emptyBehavior.equals(\"skip\")) {", "-                log(\"Warning: skipping JAR archive \" + zipFile +", "-                    \" because no files were included.\", Project.MSG_WARN);", "-                return true;", "-            } else if (emptyBehavior.equals(\"fail\")) {", "-                throw new BuildException(\"Cannot create JAR archive \" + zipFile +", "-                                         \": no files were included.\", location);", "-            } else {", "-                // create", "-                if (!zipFile.exists() ||", "-                    (manifest != null &&", "-                     manifest.lastModified() > zipFile.lastModified()))", "-                    log(\"Note: creating empty JAR archive \" + zipFile, Project.MSG_INFO);", "-                // and continue below...", "-            }", "-        }", "-        if (!zipFile.exists()) return false;", "-\tif (manifest != null && manifest.lastModified() > zipFile.lastModified())", "-\t    return false;", "-        for (int i=0; i<files.length; i++) {", "-            if (files[i].lastModified() > zipFile.lastModified()) {", "-                return false;", "-            }", "-        }", "-        return true;", "-    }", "+        if (manifest != null) {", "+            // just add the manifest file to the mix", "+", "+            DirectoryScanner ds = new DirectoryScanner();", "+            ds.setBasedir(new File(manifest.getParent()));", "+            ds.setIncludes(new String[] {manifest.getName()});", "+            ds.scan();", "+", "+            FileScanner[] myScanners = new FileScanner[scanners.length+1];", "+            System.arraycopy(scanners, 0, myScanners, 0, scanners.length);", "+            myScanners[scanners.length] = ds;", "+", "+            boolean retval = super.isUpToDate(myScanners, zipFile);", "+            if (!retval && files.length == 0) {", "+                log(\"Note: creating empty \"+archiveType+\" archive \" + zipFile, ", "+                    Project.MSG_INFO);", "+            }", "+            return retval;", "+", "+        } else if (emptyBehavior.equals(\"create\") && files.length == 0) {", "+", "+            log(\"Note: creating empty \"+archiveType+\" archive \" + zipFile, ", "+                Project.MSG_INFO);", "+            return false;", "+", "+        } else {", "+            // all other cases are handled correctly by Zip's method", "+            return super.isUpToDate(scanners, zipFile);"]}]}
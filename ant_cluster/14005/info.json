{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "063a2ba5021384f7f37b663e5365cc2e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44b0270c245474949c658f4a1873d872", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/image/Image.java", "commitBeforeChange": "e0c04a3b27b8a6637bb1af562df9b38644ee89b2", "commitAfterChange": "1f2eea24cabc5464b0d95392996cfd997cd8a2bc", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void execute()", "signatureAfterChange": "     public void execute()", "diff": ["-        try {", "-            DirectoryScanner ds = super.getDirectoryScanner(srcDir);", "-            String[] files = ds.getIncludedFiles();", "-            for (int i = 0; i < files.length; i++) {", "-                processFile(new File(srcDir.getAbsolutePath() + File.separator + files[i]));", "-                if (garbage_collect) {", "-                    System.gc();", "+        validateAttributes();", "+", "+        try {", "+            DirectoryScanner ds = null;", "+            String [] files =null;", "+            ArrayList filesList = new ArrayList();", "+", "+", "+            // deal with specified srcDir", "+            if (srcDir != null){", "+              ds = super.getDirectoryScanner(srcDir);", "+", "+              files = ds.getIncludedFiles();", "+              for (int i = 0; i < files.length; i++){", "+                filesList.add(new File(srcDir.getAbsolutePath() + File.separator + files[i]));", "+              }", "+            }", "+            // deal with the filesets", "+            for (int i = 0; i < filesets.size(); i++) {", "+                FileSet fs = (FileSet) filesets.elementAt(i);", "+                ds = fs.getDirectoryScanner(getProject());", "+                files =ds.getIncludedFiles();", "+                File fromDir = fs.getDir(getProject());", "+                for (int j = 0; j < files.length; j++){", "+                  filesList.add(new File(fromDir.getAbsolutePath() + File.separator + files[j]));", "+            // iterator through all the files and process them.", "+            for (Iterator i = filesList.iterator();i.hasNext();){", "+              File file = (File)i.next();", "+", "+              processFile(file);", "+              if (garbage_collect) {", "+                  System.gc();", "+              }", "+            }", "+", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "489020e7936cd3fcaa5eae59e90a92ea", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/dotnet/DotnetCompile.java", "commitBeforeChange": "cbc4de47ebaa1710dbbf8d73efff8ccc8aeb26c4", "commitAfterChange": "362a940807ba311bb1ae34d77bbace30aa932a3b", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 57, "signatureBeforeChange": "         public String getValue(Task owner) throws BuildException", "signatureAfterChange": "      protected int addReferenceFilesets(NetCommand command, long outputTimestamp)", "diff": ["+", "+    protected int addReferenceFilesets(NetCommand command, long outputTimestamp) {", "+        int filesOutOfDate = 0;", "+        Hashtable filesToBuild=new Hashtable();", "+        for (int i = 0; i < referenceFilesets.size(); i++) {", "+            FileSet fs = (FileSet) referenceFilesets.elementAt(i);", "+            filesOutOfDate += command.scanOneFileset(", "+                    fs.getDirectoryScanner(getProject()),", "+                    filesToBuild,", "+                    outputTimestamp);", "+        }", "+        //bail out early if there were no files", "+        if(filesToBuild.size()==0) {", "+            return 0;", "+        }", "+        StringBuffer referenceList= new StringBuffer(REFERENCE_OPTION);", "+        //now scan the hashtable and add the files", "+        Enumeration files = filesToBuild.elements();", "+        while (files.hasMoreElements()) {", "+            File file = (File) files.nextElement();", "+            if(isFileManagedBinary(file)) {", "+                referenceList.append(file.toString());", "+                referenceList.append(getReferenceDelimiter());", "+            } else {", "+                log(\"ignoring \"+file+\" as it is not a managed executable\",", "+                        Project.MSG_VERBOSE);", "+            }", "+", "+        }", "+        //add it all to an argument", "+        command.addArgument(referenceList.toString());", "+        return filesOutOfDate;", "+    }", "-         */", "-        public String getValue(Task owner) throws BuildException {", "-            if(name==null) {", "-                throw new BuildException(\"No name provided for the define element\",", "-                    owner.getLocation());", "-            }", "-            if(!isSet(owner)) {", "-                return null;", "-            }", "-            return name;", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e31429ca180e1fa9c599d1df41b54aed", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "cca008dd0001628eefae7a0ebffba4815a6909f1", "commitAfterChange": "021fdf251c92ecb3981724d83c0265dc770280b3", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        Enumeration list = getIndividualTests();", "-        while (list.hasMoreElements()) {", "-            JUnitTest test = (JUnitTest) list.nextElement();", "-            if (test.shouldRun(getProject())) {", "-                execute(test);", "+        List testLists = new ArrayList();", "+", "+        boolean forkPerTest = forkStyle.getValue().equals(ForkStyle.PER_TEST);", "+        if (forkPerTest || forkStyle.getValue().equals(ForkStyle.ONCE)) {", "+            testLists.addAll(executeOrQueue(getIndividualTests(),", "+                                            forkPerTest));", "+        } else { /* forkStyle.getValue().equals(ForkStyle.PER_BATCH) */", "+            final int count = batchTests.size();", "+            for (int i = 0; i < count; i++) {", "+                BatchTest batchtest = (BatchTest) batchTests.elementAt(i);", "+                testLists.addAll(executeOrQueue(batchtest.elements(), false));", "+            testLists.addAll(executeOrQueue(tests.elements(), forkPerTest));", "+        }", "+", "+        Iterator iter = testLists.iterator();", "+        while (iter.hasNext()) {", "+            List l = (List) iter.next();", "+            if (l.size() == 1) {", "+                execute((JUnitTest) l.get(0));", "+            } else {", "+                execute(l);", "+            }            "]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ffbaa18502a89ac8789645b480c08d4a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "308f50a45c38db629ff250288516553c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Replace.java", "commitBeforeChange": "2b0ab1d4d074dc81257d811ec216e81d902e069e", "commitAfterChange": "304895ce6242327f04dd3b96e7f6d99cd5fdd191", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private void processFile(File src) throws BuildException", "signatureAfterChange": "     private void processFile(File src) throws BuildException", "diff": ["-            BufferedReader br = new BufferedReader(new FileReader(src));", "-            BufferedWriter bw = new BufferedWriter(new FileWriter(temp));", "+            Reader fileReader = encoding == null ? new FileReader(src)", "+                                                 : new InputStreamReader(new FileInputStream(src), encoding);", "+            Writer fileWriter = encoding == null ? new FileWriter(src)", "+                                                 : new OutputStreamWriter(new FileOutputStream(src), encoding);", "+            ", "+            BufferedReader br = new BufferedReader(fileReader);", "+            BufferedWriter bw = new BufferedWriter(fileWriter);", "-            ioe.printStackTrace();", "-            throw new BuildException(ioe, location);", "+            throw new BuildException(\"IOException in \" + src + \" - \" + ", "+                                     ioe.getClass().getName() + \":\" + ioe.getMessage(), ioe, location);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62b32a6f80ee24f71c0d08be2f9031de", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java", "commitBeforeChange": "a8d43912400fdf1627f23abcfb1c27879c5e8153", "commitAfterChange": "df14132289636640ade9cc52ecf8bfdc4ba52433", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected Commandline setupJavacCommandlineSwitches(Commandline cmd)", "signatureAfterChange": "     protected Commandline setupJavacCommandlineSwitches(Commandline cmd)", "diff": ["+        // we cannot be using Java 1.0 when forking, so we only have to", "+        // distinguish between Java 1.1, and Java 1.2 and higher, as Java 1.1", "+        // has its own parameter format", "+        boolean usingJava1_1 = Project.getJavaVersion().equals(Project.JAVA_1_1);", "+        String memoryParameterPrefix = usingJava1_1 ? \"-J-\" : \"-J-X\";", "+        if (memoryInitialSize != null) {", "+            cmd.createArgument().setValue(memoryParameterPrefix+\"ms\"+memoryInitialSize);", "+        }", "+", "+        if (memoryMaximumSize != null) {", "+            cmd.createArgument().setValue(memoryParameterPrefix+\"mx\"+memoryMaximumSize);", "+        }", "+", "-        ", "+", "-        ", "+"]}]}
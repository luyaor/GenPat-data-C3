{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c542c7309ed38c21f5da080bf09f9842", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bd4b448822a7f8a8dcc9a0f5c4aab98", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "380870c2b26a9f3289569dc2451178df3f05613e", "commitAfterChange": "ad9edf5f5ea4a8f2a974726eeb8e656c177357df", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 32, "signatureBeforeChange": "      private void generateMTFValues()", "signatureAfterChange": "      private void generateMTFValues()", "diff": ["-        final int lastShadow          = this.last;", "-        final Data dataShadow         = this.data;", "-        final boolean[] inUse   = dataShadow.inUse;", "-        final byte[] block      = dataShadow.block;", "-        final int[] fmap        = dataShadow.fmap;", "-        final char[] sfmap      = dataShadow.sfmap;", "-        final int[] mtfFreq     = dataShadow.mtfFreq;", "-        final byte[] unseqToSeq = dataShadow.unseqToSeq;", "-        final byte[] yy         = dataShadow.generateMTFValues_yy;", "+        char[] yy = new char[256];", "+        int  i, j;", "+        char tmp;", "+        char tmp2;", "+        int zPend;", "+        int wr;", "+        int EOB;", "-        // make maps", "-        int nInUseShadow = 0;", "-        for (int i = 0; i < 256; i++) {", "-            if (inUse[i]) {", "-                unseqToSeq[i] = (byte) nInUseShadow;", "-                nInUseShadow++;", "-            }", "-        }", "-        this.nInUse = nInUseShadow;", "+        makeMaps();", "+        EOB = nInUse + 1;", "-        final int eob = nInUseShadow + 1;", "-", "-        for (int i = eob; i >= 0; i--) {", "+        for (i = 0; i <= EOB; i++) {", "-        for (int i = nInUseShadow; --i >= 0;) {", "-            yy[i] = (byte) i;", "+        wr = 0;", "+        zPend = 0;", "+        for (i = 0; i < nInUse; i++) {", "+            yy[i] = (char) i;", "-        int wr = 0;", "-        int zPend = 0;", "-        for (int i = 0; i <= lastShadow; i++) {", "-            final byte ll_i = unseqToSeq[block[fmap[i]] & 0xff];", "-            byte tmp = yy[0];", "-            int j = 0;", "+        for (i = 0; i <= last; i++) {", "+            char ll_i;", "+            ll_i = unseqToSeq[block[zptr[i]]];", "+", "+            j = 0;", "+            tmp = yy[j];", "-                byte tmp2 = tmp;", "+                tmp2 = tmp;", "-            }", "+            };", "-                        if ((zPend & 1) == 0) {", "-                            sfmap[wr] = RUNA;", "+                        switch (zPend % 2) {", "+                        case 0:", "+                            szptr[wr] = (short) RUNA;", "-                        } else {", "-                            sfmap[wr] = RUNB;", "+                            break;", "+                        case 1:", "+                            szptr[wr] = (short) RUNB;", "-                        }", "-", "-                        if (zPend >= 2) {", "-                            zPend = (zPend - 2) >> 1;", "-                        } else {", "+                            break;", "+                        };", "+                        if (zPend < 2) {", "-                    }", "+                        zPend = (zPend - 2) / 2;", "+                    };", "-                sfmap[wr] = (char) (j + 1);", "+                szptr[wr] = (short) (j + 1);", "-                if ((zPend & 1) == 0) {", "-                    sfmap[wr] = RUNA;", "+                switch (zPend % 2) {", "+                case 0:", "+                    szptr[wr] = (short) RUNA;", "-                } else {", "-                    sfmap[wr] = RUNB;", "+                    break;", "+                case 1:", "+                    szptr[wr] = (short) RUNB;", "-                }", "-", "-                if (zPend >= 2) {", "-                    zPend = (zPend - 2) >> 1;", "-                } else {", "+                if (zPend < 2) {", "+                    break;", "+                }", "+                zPend = (zPend - 2) / 2;", "-        sfmap[wr] = (char) eob;", "-        mtfFreq[eob]++;", "-        this.nMTF = wr + 1;", "+        szptr[wr] = (short) EOB;", "+        wr++;", "+        mtfFreq[EOB]++;", "+", "+        nMTF = wr;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f062c4c395e57867c25114ff233bd0b4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "380870c2b26a9f3289569dc2451178df3f05613e", "commitAfterChange": "ad9edf5f5ea4a8f2a974726eeb8e656c177357df", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private void writeRun() throws IOException", "signatureAfterChange": "      private void writeRun() throws IOException", "diff": ["-        final int lastShadow = this.last;", "-", "-        if (lastShadow < this.allowableBlockSize) {", "-            final int currentCharShadow = this.currentChar;", "-            final Data dataShadow = this.data;", "-            dataShadow.inUse[currentCharShadow] = true;", "-            final byte ch = (byte) currentCharShadow;", "-", "-            int runLengthShadow = this.runLength;", "-            this.crc.updateCRC(currentCharShadow, runLengthShadow);", "-", "-            switch (runLengthShadow) {", "+        if (last < allowableBlockSize) {", "+            inUse[currentChar] = true;", "+            for (int i = 0; i < runLength; i++) {", "+                mCrc.updateCRC((char) currentChar);", "+            }", "+            switch (runLength) {", "-                dataShadow.block[lastShadow + 2] = ch;", "-                this.last = lastShadow + 1;", "+                last++;", "+                block[last + 1] = (char) currentChar;", "-", "-                dataShadow.block[lastShadow + 2] = ch;", "-                dataShadow.block[lastShadow + 3] = ch;", "-                this.last = lastShadow + 2;", "+                last++;", "+                block[last + 1] = (char) currentChar;", "+                last++;", "+                block[last + 1] = (char) currentChar;", "-", "-                {", "-                    final byte[] block = dataShadow.block;", "-                    block[lastShadow + 2] = ch;", "-                    block[lastShadow + 3] = ch;", "-                    block[lastShadow + 4] = ch;", "-                    this.last = lastShadow + 3;", "-                }", "+                last++;", "+                block[last + 1] = (char) currentChar;", "+                last++;", "+                block[last + 1] = (char) currentChar;", "+                last++;", "+                block[last + 1] = (char) currentChar;", "-", "-                {", "-                    runLengthShadow -= 4;", "-                    dataShadow.inUse[runLengthShadow] = true;", "-                    final byte[] block = dataShadow.block;", "-                    block[lastShadow + 2] = ch;", "-                    block[lastShadow + 3] = ch;", "-                    block[lastShadow + 4] = ch;", "-                    block[lastShadow + 5] = ch;", "-                    block[lastShadow + 6] = (byte) runLengthShadow;", "-                    this.last = lastShadow + 5;", "-                }", "+                inUse[runLength - 4] = true;", "+                last++;", "+                block[last + 1] = (char) currentChar;", "+                last++;", "+                block[last + 1] = (char) currentChar;", "+                last++;", "+                block[last + 1] = (char) currentChar;", "+                last++;", "+                block[last + 1] = (char) currentChar;", "+                last++;", "+                block[last + 1] = (char) (runLength - 4);", "-"]}]}
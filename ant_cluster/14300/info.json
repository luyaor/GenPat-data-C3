{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "16c8e131414fc61ed80ce0a2d67421cd", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d389e249e161f7659b1014ad883cc0da", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/condition/IsSigned.java", "commitBeforeChange": "4783bc46159826bc33858cfc9145c4be93dfe755", "commitAfterChange": "2a291dca9249d6a4958d9898282fa67343bf59b7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public static boolean isSigned(File zipFile, String name)         throws IOException", "signatureAfterChange": "     public static boolean isSigned(File zipFile, String name)         throws IOException", "diff": ["-            } else {", "-                boolean shortSig = jarFile.getEntry(SIG_START", "-                                                    + name.toUpperCase()", "-                                                    + SIG_END) != null;", "-                boolean longSig = false;", "-                if (name.length() > 8) {", "-                    longSig =", "+            } ", "+            boolean shortSig = jarFile.getEntry(SIG_START", "+                        + name.toUpperCase()", "+                        + SIG_END) != null;", "+            boolean longSig = false;", "+            if (name.length() > 8) {", "+                longSig =", "-                                         + name.substring(0, 8).toUpperCase()", "-                                         + SIG_END) != null;", "-                }", "-", "-                return shortSig || longSig;", "+                                        + name.substring(0, 8).toUpperCase()", "+                                        + SIG_END) != null;", "+            ", "+            return shortSig || longSig;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f73a741a699df5bb2939de74e3f1920e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "0efc2f817257f69d7cdc67c016b1caac68465f1d", "commitAfterChange": "939a6bbf2fb97ec29ecf79c86013846656d8751c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void setAttribute(Project p, Object element, String attributeName,                              String value) throws BuildException", "signatureAfterChange": "     public void setAttribute(Project p, Object element, String attributeName,                              String value) throws BuildException", "diff": ["-        AttributeSetter as", "-            = (AttributeSetter) attributeSetters.get(", "+        AttributeSetter as = (AttributeSetter) attributeSetters.get(", "-                String uriPlusPrefix =", "-                    ProjectHelper.extractUriFromComponentName(attributeName);", "-                String uri =", "-                    ProjectHelper.extractUriFromComponentName(uriPlusPrefix);", "-                String localName =", "-                    ProjectHelper.extractNameFromComponentName(attributeName);", "-                String qName = (\"\".equals(uri)", "-                                ? localName : (uri + \":\" + localName));", "-", "+                String uriPlusPrefix = ProjectHelper.extractUriFromComponentName(attributeName);", "+                String uri = ProjectHelper.extractUriFromComponentName(uriPlusPrefix);", "+                String localName = ProjectHelper.extractNameFromComponentName(attributeName);", "+                String qName = \"\".equals(uri) ? localName : uri + \":\" + localName;", "-            } else if (element instanceof DynamicAttribute) {", "+            }", "+            if (element instanceof DynamicAttribute) {", "-            } else {", "-                if (attributeName.indexOf(':') != -1) {", "-                    return; // Ignore attribute from unknown uri's", "-                }", "-                String msg = getElementName(p, element)", "-                    + \" doesn't support the \\\"\" + attributeName", "-                    + \"\\\" attribute.\";", "-                throw new UnsupportedAttributeException(msg, attributeName);", "+            if (attributeName.indexOf(':') != -1) {", "+                return; // Ignore attribute from unknown uri's", "+            }", "+            String msg = getElementName(p, element)", "+                    + \" doesn't support the \\\"\" + attributeName + \"\\\" attribute.\";", "+            throw new UnsupportedAttributeException(msg, attributeName);"]}]}
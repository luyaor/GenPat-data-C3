{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e8fdf929a884061c68c9442247c7b04", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71153dec64c7f616678f058f4c12ab74", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/starteam/StarTeamCheckout.java", "commitBeforeChange": "6e6abf78f4cbabecf38ed8b9664b5bef88915742", "commitAfterChange": "f87b5ed7757c30daca5cf875c95520a00dce2269", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected void visit(Folder starteamFolder, java.io.File targetFolder )  \tthrows BuildException", "signatureAfterChange": "     protected void visit(Folder starteamFolder, java.io.File targetFolder)             throws BuildException", "diff": ["-    protected void visit(Folder starteamFolder, java.io.File targetFolder ) ", "-\tthrows BuildException ", "-    {", "-\ttry {", "-\t    Hashtable localFiles = getLocalFiles(targetFolder);", "-\t    // If we have been told to create the working folders", "-\t    if (createDirs) {", "-\t\t// Create if it doesn't exist", "-\t\tif (!targetFolder.exists()) {", "-\t\t    targetFolder.mkdir();", "-\t\t}", "-\t    }", "-\t    // For all Files in this folder, we need to check ", "-\t    // if there have been modifications.", "-\t    Item[] files = starteamFolder.getItems(\"File\");", "-\t    for (int i = 0; i < files.length; i++) {", "-\t\tFile eachFile = (File) files[i];", "-\t\tString filename = eachFile.getName();", "-\t\tjava.io.File localFile = new java.io.File(targetFolder, filename);", "-\t\tlocalFiles.remove(localFile.toString());", "-\t\t", "-\t\tint fileStatus = (eachFile.getStatus());", "-", "-\t\t// We try to update the status once to give StarTeam another chance.", "-\t\tif (fileStatus == Status.MERGE || fileStatus == Status.UNKNOWN) {", "-\t\t    eachFile.updateStatus(true, true);", "-\t\t}", "-", "-\t\t// If the file is current then skip it.", "-\t\t// If the file doesn't pass the include/exclude tests, skip it. ", "-\t\tif (fileStatus == Status.CURRENT || !shouldProcess(filename)) {", "-\t\t    continue;", "-\t\t}", "-", "-\t\t// Check out anything else.", "-\t\t// Just a note: StarTeam has a status for NEW which implies that there ", "-\t\t// is an item  on your local machine that is not in the repository. ", "-\t\t// These are the items that show up as NOT IN VIEW in the Starteam GUI.", "-\t\t// One would think that we would want to perhaps checkin the NEW items", "-\t\t// (not in all cases! - Steve Cohen 15 Dec 2001)", "-\t\t// Unfortunately, the sdk doesn't really work, and we can't actually see", "-\t\t// anything with a status of NEW. That is why we can just check out ", "-\t\t// everything here without worrying about losing anything.", "-", "-\t\tlog(\"Checking Out: \" + (localFile.toString()), Project.MSG_INFO);", "-\t\teachFile.checkoutTo(localFile, Item.LockType.", "-\t\t\t\t    UNCHANGED, true, true, true);", "-\t    }", "-", "-\t    // Now we recursively call this method on all sub folders in this folder.", "-\t    Folder[] subFolders = starteamFolder.getSubFolders();", "-\t    for (int i = 0; i < subFolders.length; i++) {", "-\t\tlocalFiles.remove(subFolders[i].getPath());", "-\t\tvisit(subFolders[i], ", "-\t\t      new java.io.File(targetFolder, subFolders[i].getName()));", "-\t    }", "-", "-\t    // Delete all folders or files that are not in Starteam.", "-\t    if (this.deleteUncontrolled && !localFiles.isEmpty()) {", "-\t\tdelete(localFiles);", "-\t    }", "-\t} catch (IOException e) {", "-\t    throw new BuildException(e);", "-\t}", "+    protected void visit(Folder starteamFolder, java.io.File targetFolder)", "+            throws BuildException {", "+            listLocalFiles(targetFolder);", "+            // If we have been told to create the working folders", "+            if (createDirs) {", "+                // Create if it doesn't exist", "+                if (!targetFolder.exists()) {", "+                    targetFolder.mkdir();", "+                }", "+            }", "+            // For all Files in this folder, we need to check", "+            // if there have been modifications.", "+", "+            Item[] files = starteamFolder.getItems(\"File\");", "+            for (int i = 0; i < files.length; i++) {", "+                File eachFile = (File) files[i];", "+                String filename = eachFile.getName();", "+                java.io.File localFile =", "+                        new java.io.File(targetFolder, filename);", "+", "+                delistLocalFile(localFile);", "+", "+                // If the file doesn't pass the include/exclude tests, skip it.", "+                if (!shouldProcess(filename)) {", "+                    log(\"Skipping \" + eachFile.toString(), Project.MSG_INFO);", "+                    continue;", "+                }", "+", "+", "+                // If forced is not set then we may save ourselves some work by", "+                // looking at the status flag.", "+                // Otherwise, we care nothing about these statuses.", "+", "+                if (!isForced()) {", "+                    int fileStatus = (eachFile.getStatus());", "+", "+                    // We try to update the status once to give StarTeam", "+                    // another chance.", "+                    if (fileStatus == Status.MERGE || fileStatus == Status.UNKNOWN) {", "+                        eachFile.updateStatus(true, true);", "+                        fileStatus = (eachFile.getStatus());", "+                    }", "+                    if (fileStatus == Status.CURRENT) {", "+                        log(\"Not processing \" + eachFile.toString()", "+                                + \" as it is current.\",", "+                                Project.MSG_INFO);", "+                        continue;", "+                    }", "+                }", "+", "+", "+                // Check out anything else.", "+                // Just a note: StarTeam has a status for NEW which implies", "+                // that there is an item  on your local machine that is not", "+                // in the repository.  These are the items that show up as", "+                // NOT IN VIEW in the Starteam GUI.", "+                // One would think that we would want to perhaps checkin the", "+                // NEW items (not in all cases! - Steve Cohen 15 Dec 2001)", "+                // Unfortunately, the sdk doesn't really work, and we can't", "+                // actually see  anything with a status of NEW. That is why", "+                // we can just check out  everything here without worrying", "+                // about losing anything.", "+", "+                log(\"Checking Out: \" + (localFile.toString()), Project.MSG_INFO);", "+                eachFile.checkoutTo(localFile, Item.LockType.UNCHANGED,", "+                        true, true, true);", "+            // Now we recursively call this method on all sub folders in this", "+            // folder unless recursive attribute is off.", "+            Folder[] subFolders = starteamFolder.getSubFolders();", "+            for (int i = 0; i < subFolders.length; i++) {", "+                java.io.File targetSubfolder =", "+                        new java.io.File(targetFolder, subFolders[i].getName());", "+                delistLocalFile(targetSubfolder);", "+                if (isRecursive()) {", "+                    visit(subFolders[i], targetSubfolder);", "+                }", "+            }", "+", "+            if (this.deleteUncontrolled) {", "+                deleteUncontrolledItems();", "+            }", "+", "+        } catch (IOException e) {", "+            throw new BuildException(e);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b5168f10f91a5ce515eb3442ff81807", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Replace.java", "commitBeforeChange": "4db248f63f4583aff79dc9d43cb64d84d4e33eb9", "commitAfterChange": "150b0c8bbac0cf9dae143bfebcf5772a6efa99a0", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private void processFile(File src) throws BuildException", "signatureAfterChange": "     private void processFile(File src) throws BuildException", "diff": ["-        File temp = new File(src.getPath() + \".temp\");", "+        File temp = fileUtils.createTempFile(\"rep\", \".tmp\", ", "+                                             fileUtils.getParentFile(src));", "-        if (temp.exists()) {", "-            throw new BuildException(\"Replace: temporary file \" + temp.getPath() + \" already exists\", location);", "-        }", "-", "+        Reader reader = null;", "+        Writer writer = null;", "-            Reader fileReader = encoding == null ? new FileReader(src)", "-                                                 : new InputStreamReader(new FileInputStream(src), encoding);", "-            Writer fileWriter = encoding == null ? new FileWriter(temp)", "-                                                 : new OutputStreamWriter(new FileOutputStream(temp), encoding);", "+            reader = encoding == null ? new FileReader(src)", "+                : new InputStreamReader(new FileInputStream(src), encoding);", "+            writer = encoding == null ? new FileWriter(temp)", "+                : new OutputStreamWriter(new FileOutputStream(temp), encoding);", "-            BufferedReader br = new BufferedReader(fileReader);", "-            BufferedWriter bw = new BufferedWriter(fileWriter);", "+            BufferedReader br = new BufferedReader(reader);", "+            BufferedWriter bw = new BufferedWriter(writer);", "+            writer = null;", "+            reader = null;", "-            } else {", "-                temp.delete();", "+                temp = null;", "+        } finally {", "+            if (reader != null) {", "+                try {", "+                    reader.close();", "+                } catch (IOException e) {}", "+            }", "+            if (writer != null) {", "+                try {", "+                    writer.close();", "+                } catch (IOException e) {}", "+            }", "+            if (temp != null) {", "+                temp.delete();", "+            }", "+        "]}]}
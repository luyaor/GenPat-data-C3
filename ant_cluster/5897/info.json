{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5bbdfc29e2d6e7543e73c01dd7004aae", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e7fe4e02552bcf417b4a138fce585dc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "9174fbde3b63fde69fee83a681d22301f7aa7a02", "commitAfterChange": "c2077d52ddbe15f9357e4609f78f6cd8187b0365", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 77, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        boolean javadoc1 = (Project.getJavaVersion() == Project.JAVA_1_1);", "-", "-", "-        Vector argList = new Vector();", "-        if(maxmemory != null){", "-            if(javadoc1){", "-                argList.addElement(\"-J-mx\" + maxmemory);", "-            }", "-            else{", "-                argList.addElement(\"-J-Xmx\" + maxmemory);", "-            }", "-        }", "-", "-            argList.addElement(\"-classpath\");", "-            argList.addElement(classpath.toString());", "+            cmd.createArgument().setValue(\"-classpath\");", "+            cmd.createArgument().setValue(classpath.toString());", "-                argList.addElement(\"-sourcepath\");", "-                argList.addElement(sourcePath.toString());", "+                cmd.createArgument().setValue(\"-sourcepath\");", "+                cmd.createArgument().setValue(sourcePath.toString());", "-            argList.addElement(\"-classpath\");", "-            argList.addElement(sourcePath.toString() +", "+            cmd.createArgument().setValue(\"-classpath\");", "+            cmd.createArgument().setValue(sourcePath.toString() +", "-        if (destDir != null) {", "-            argList.addElement(\"-d\");", "-            argList.addElement(destDir.getAbsolutePath());", "-        }", "-            argList.addElement (\"-version\");", "-        if (nodeprecated)", "-            argList.addElement (\"-nodeprecated\");", "+            cmd.createArgument().setValue(\"-version\");", "-            argList.addElement (\"-author\");", "-        if (noindex)", "-            argList.addElement (\"-noindex\");", "-        if (notree)", "-            argList.addElement (\"-notree\");", "-        if (pub)", "-            argList.addElement (\"-public\");", "-        if (prot)", "-            argList.addElement (\"-protected\");", "-        if (pack)", "-            argList.addElement (\"-package\");", "-        if (priv)", "-            argList.addElement (\"-private\");", "-        if (encoding != null) {", "-            argList.addElement(\"-encoding\");", "-            argList.addElement(encoding);", "-        }", "-        if (docencoding != null) {", "-            argList.addElement(\"-docencoding\");", "-            argList.addElement(docencoding);", "-        }", "+            cmd.createArgument().setValue(\"-author\");", "-            if (overviewFile != null) {", "-                argList.addElement(\"-overview\");", "-                argList.addElement(overviewFile.getAbsolutePath());", "-            }", "-            if (old)", "-                argList.addElement(\"-1.1\");", "-            if (verbose)", "-                argList.addElement(\"-verbose\");", "-            if (use)", "-                argList.addElement(\"-use\");", "-            if (splitindex)", "-                argList.addElement(\"-splitindex\");", "-            if (nodeprecatedlist)", "-                argList.addElement(\"-nodeprecatedlist\");", "-            if (nohelp)", "-                argList.addElement(\"-nohelp\");", "-            if (nonavbar)", "-                argList.addElement(\"-nonavbar\");", "-            if (serialwarn)                     ", "-                argList.addElement(\"-serialwarn\");", "-                    throw new BuildException(\"The doclet name must be specified.\");", "+                    throw new BuildException(\"The doclet name must be specified.\", location);", "-                    argList.addElement(\"-doclet\");", "-                    argList.addElement(doclet.getName());", "+                    cmd.createArgument().setValue(\"-doclet\");", "+                    cmd.createArgument().setValue(doclet.getName());", "-                        argList.addElement(\"-docletpath\");", "-                        argList.addElement(doclet.getPath().toString());", "+                        cmd.createArgument().setValue(\"-docletpath\");", "+                        cmd.createArgument().setValue(doclet.getPath().toString());", "-                        argList.addElement(param.getName());", "+                        cmd.createArgument().setValue(param.getName());", "-                            argList.addElement(param.getValue());", "+                            cmd.createArgument().setValue(param.getValue());", "-                argList.addElement(\"-bootclasspath\");", "-                argList.addElement(bootclasspath.toString());", "-            }", "-            if (extdirs != null) {", "-                argList.addElement(\"-extdirs\");", "-                argList.addElement(extdirs);", "-            }", "-            if (locale != null) {", "-                argList.addElement(\"-locale\");", "-                argList.addElement(locale);", "-            }", "-            if (encoding != null) {", "-                argList.addElement(\"-encoding\");", "-                argList.addElement(encoding);", "-            }", "-            if (windowtitle != null) {", "-                argList.addElement(\"-windowtitle\");", "-                argList.addElement(windowtitle);", "-            }", "-            if (doctitle != null) {", "-                argList.addElement(\"-doctitle\");", "-                argList.addElement(doctitle);", "-            }", "-            if (header != null) {", "-                argList.addElement(\"-header\");", "-                argList.addElement(header);", "-            }", "-            if (footer != null) {", "-                argList.addElement(\"-footer\");", "-                argList.addElement(footer);", "-            }", "-            if (bottom != null) {", "-                argList.addElement(\"-bottom\");", "-                argList.addElement(bottom);", "-            }", "-            ", "-            // add the single link arguments", "-            if (link != null) {", "-                argList.addElement(\"-link\");", "-                argList.addElement(link);", "+                cmd.createArgument().setValue(\"-bootclasspath\");", "+                cmd.createArgument().setValue(bootclasspath.toString());", "-                        argList.addElement(\"-linkoffline\");", "-                        argList.addElement(la.getHref());", "-                        argList.addElement(packageListLocation);", "+                        cmd.createArgument().setValue(\"-linkoffline\");", "+                        cmd.createArgument().setValue(la.getHref());", "+                        cmd.createArgument().setValue(packageListLocation);", "-                        argList.addElement(\"-link\");", "-                        argList.addElement(la.getHref());", "+                        cmd.createArgument().setValue(\"-link\");", "+                        cmd.createArgument().setValue(la.getHref());", "-            // add the single linkoffline arguments", "-            if (linkoffline != null) {", "-                argList.addElement(\"-linkoffline\");", "-                argList.addElement(linkoffline);", "-            }", "-            ", "-                    argList.addElement(\"-group\");", "-                    argList.addElement(name);", "-                    argList.addElement(pkgList);", "+                    cmd.createArgument().setValue(\"-group\");", "+                    cmd.createArgument().setValue(name);", "+                    cmd.createArgument().setValue(pkgList);", "-                    argList.addElement(\"-group\");", "-                    argList.addElement(title);", "-                    argList.addElement(packages);", "+                    cmd.createArgument().setValue(\"-group\");", "+                    cmd.createArgument().setValue(title);", "+                    cmd.createArgument().setValue(packages);", "-            if (stylesheetfile != null) {", "-                argList.addElement(\"-stylesheetfile\");", "-                argList.addElement(stylesheetfile.getAbsolutePath());", "-            }", "-            if (helpfile != null) {", "-                argList.addElement(\"-helpfile\");", "-                argList.addElement(helpfile.getAbsolutePath());", "-            }", "-            if (charset != null) {", "-                argList.addElement(\"-charset\");", "-                argList.addElement(charset);", "-            }", "-            if (additionalParam != null) {", "-                argList.addElement(additionalParam);", "-            }", "-                    argList.addElement(name);", "+                    cmd.createArgument().setValue(name);", "-                evaluatePackages(sourcePath, packages, argList);", "+                evaluatePackages(sourcePath, packages);", "-                argList.addElement(tok.nextToken().trim());", "+                cmd.createArgument().setValue(tok.nextToken().trim());", "-            argList.addElement(\"@\" + packageList);", "+            cmd.createArgument().setValue(\"@\" + packageList);", "-        log(\"Javadoc args: \" + argList.toString(), Project.MSG_VERBOSE);", "+        log(\"Javadoc args: \" + cmd.getArguments(), Project.MSG_VERBOSE);", "-        StringBuffer b = new StringBuffer();", "-        b.append(\"javadoc \");", "-", "-        Enumeration e = argList.elements();", "-        while (e.hasMoreElements()) {", "-            String arg = (String) e.nextElement();", "-            if (!arg.startsWith(\"-\")) {", "-                b.append(\"\\\"\");", "-                b.append(arg);", "-                b.append(\"\\\"\");", "-            } else {", "-                b.append(arg);", "-            }", "-            if (e.hasMoreElements()) b.append(\" \");", "+        JavadocOutputStream out = new JavadocOutputStream(Project.MSG_INFO);", "+        JavadocOutputStream err = new JavadocOutputStream(Project.MSG_WARN);", "+        Execute exe = new Execute(new PumpStreamHandler(out, err));", "+        exe.setAntRun(project);", "+        exe.setWorkingDirectory(project.getBaseDir());", "+        try {", "+            exe.setCommandline(cmd.getCommandline());", "+            exe.execute();", "+        } catch (IOException e) {", "+            throw new BuildException(\"Execute failed: \" + e, e, location);", "+        } finally {", "+            out.logFlush();", "+            err.logFlush();", "+            try {", "+                out.close();", "+                err.close();", "+            } catch (IOException e) {}", "-", "-        run(b.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70811a840b283d72cb0ff7586f2f9e3f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "380870c2b26a9f3289569dc2451178df3f05613e", "commitAfterChange": "ad9edf5f5ea4a8f2a974726eeb8e656c177357df", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 23, "signatureBeforeChange": "     private boolean mainSimpleSort(final Data dataShadow, final int lo, final int hi,                                    final int d)", "signatureAfterChange": "      private void simpleSort(int lo, int hi, int d)", "diff": ["-     */", "-    private boolean mainSimpleSort(final Data dataShadow, final int lo, final int hi,", "-                                   final int d) {", "-        final int bigN = hi - lo + 1;", "+", "+    private void simpleSort(int lo, int hi, int d) {", "+        int i, j, h, bigN, hp;", "+        int v;", "+", "+        bigN = hi - lo + 1;", "-            return this.firstAttempt && (this.workDone > this.workLimit);", "+            return;", "-        int hp = 0;", "-        while (INCS[hp] < bigN) {", "+        hp = 0;", "+        while (incs[hp] < bigN) {", "+        hp--;", "-        final int[] fmap            = dataShadow.fmap;", "-        final char[] quadrant       = dataShadow.quadrant;", "-        final byte[] block          = dataShadow.block;", "-        final int lastShadow              = this.last;", "-        final int lastPlus1         = lastShadow + 1;", "-        final boolean firstAttemptShadow  = this.firstAttempt;", "-        final int workLimitShadow         = this.workLimit;", "-        int workDoneShadow                = this.workDone;", "+        for (; hp >= 0; hp--) {", "+            h = incs[hp];", "-        // Following block contains unrolled code which could be shortened by", "-        // coding it in additional loops.", "-", "-        HP: while (--hp >= 0) {", "-            final int h = INCS[hp];", "-            final int mj = lo + h - 1;", "-", "-            for (int i = lo + h; i <= hi;) {", "-                // copy", "-                for (int k = 3; (i <= hi) && (--k >= 0); i++) {", "-                    final int v = fmap[i];", "-                    final int vd = v + d;", "-                    int j = i;", "-", "-                    //  for (int a;", "-                    //       (j > mj) && mainGtU((a = fmap[j - h]) + d, vd,", "-                    //                           block, quadrant, lastShadow);", "-                    //       j -= h) {", "-                    //      fmap[j] = a;", "-                    //  }", "-                    //", "-                    // unrolled version:", "-", "-                    // start inline mainGTU", "-                    boolean onceRunned = false;", "-                    int a = 0;", "-", "-                    HAMMER: while (true) {", "-                        if (onceRunned) {", "-                            fmap[j] = a;", "-                            if ((j -= h) <= mj) {", "-                                break HAMMER;", "-                            }", "-                        } else {", "-                            onceRunned = true;", "-                        }", "-", "-                        a = fmap[j - h];", "-                        int i1 = a + d;", "-                        int i2 = vd;", "-", "-                        // following could be done in a loop, but", "-                        // unrolled it for performance:", "-                        if (block[i1 + 1] == block[i2 + 1]) {", "-                            if (block[i1 + 2] == block[i2 + 2]) {", "-                                if (block[i1 + 3] == block[i2 + 3]) {", "-                                    if (block[i1 + 4] == block[i2 + 4]) {", "-                                        if (block[i1 + 5] == block[i2 + 5]) {", "-                                            if (block[(i1 += 6)]", "-                                                == block[(i2 += 6)]) {", "-                                                int x = lastShadow;", "-                                                X: while (x > 0) {", "-                                                    x -= 4;", "-", "-                                                    if (block[i1 + 1]", "-                                                        == block[i2 + 1]) {", "-                                                        if (quadrant[i1]", "-                                                            == quadrant[i2]) {", "-                                                            if (block[i1 + 2] == block[i2 + 2]) {", "-                                                                if (quadrant[i1 + 1] == quadrant[i2 + 1]) {", "-                                                                    if (block[i1 + 3] == block[i2 + 3]) {", "-                                                                        if (quadrant[i1 + 2] == quadrant[i2 + 2]) {", "-                                                                            if (block[i1 + 4] == block[i2 + 4]) {", "-                                                                                if (quadrant[i1 + 3] == quadrant[i2 + 3]) {", "-                                                                                    if ((i1 += 4) >= lastPlus1) {", "-                                                                                        i1 -= lastPlus1;", "-                                                                                    }", "-                                                                                    if ((i2 += 4) >= lastPlus1) {", "-                                                                                        i2 -= lastPlus1;", "-                                                                                    }", "-                                                                                    workDoneShadow++;", "-                                                                                    continue X;", "-                                                                                } else if ((quadrant[i1 + 3] > quadrant[i2 + 3])) {", "-                                                                                    continue HAMMER;", "-                                                                                } else {", "-                                                                                    break HAMMER;", "-                                                                                }", "-                                                                            } else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff)) {", "-                                                                                continue HAMMER;", "-                                                                            } else {", "-                                                                                break HAMMER;", "-                                                                            }", "-                                                                        } else if ((quadrant[i1 + 2] > quadrant[i2 + 2])) {", "-                                                                            continue HAMMER;", "-                                                                        } else {", "-                                                                            break HAMMER;", "-                                                                        }", "-                                                                    } else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff)) {", "-                                                                        continue HAMMER;", "-                                                                    } else {", "-                                                                        break HAMMER;", "-                                                                    }", "-                                                                } else if ((quadrant[i1 + 1] > quadrant[i2 + 1])) {", "-                                                                    continue HAMMER;", "-                                                                } else {", "-                                                                    break HAMMER;", "-                                                                }", "-                                                            } else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff)) {", "-                                                                continue HAMMER;", "-                                                            } else {", "-                                                                break HAMMER;", "-                                                            }", "-                                                        } else if ((quadrant[i1] > quadrant[i2])) {", "-                                                            continue HAMMER;", "-                                                        } else {", "-                                                            break HAMMER;", "-                                                        }", "-                                                    } else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff)) {", "-                                                        continue HAMMER;", "-                                                    } else {", "-                                                        break HAMMER;", "-                                                    }", "-", "-                                                }", "-                                                break HAMMER;", "-                                            } // while x > 0", "-                                            else {", "-                                                if ((block[i1] & 0xff)", "-                                                    > (block[i2] & 0xff)) {", "-                                                    continue HAMMER;", "-                                                } else {", "-                                                    break HAMMER;", "-                                                }", "-                                            }", "-                                        } else if ((block[i1 + 5] & 0xff)", "-                                                   > (block[i2 + 5] & 0xff)) {", "-                                            continue HAMMER;", "-                                        } else {", "-                                            break HAMMER;", "-                                        }", "-                                    } else if ((block[i1 + 4] & 0xff)", "-                                               > (block[i2 + 4] & 0xff)) {", "-                                        continue HAMMER;", "-                                    } else {", "-                                        break HAMMER;", "-                                    }", "-                                } else if ((block[i1 + 3] & 0xff)", "-                                           > (block[i2 + 3] & 0xff)) {", "-                                    continue HAMMER;", "-                                } else {", "-                                    break HAMMER;", "-                                }", "-                            } else if ((block[i1 + 2] & 0xff)", "-                                       > (block[i2 + 2] & 0xff)) {", "-                                continue HAMMER;", "-                            } else {", "-                                break HAMMER;", "-                            }", "-                        } else if ((block[i1 + 1] & 0xff)", "-                                   > (block[i2 + 1] & 0xff)) {", "-                            continue HAMMER;", "-                        } else {", "-                            break HAMMER;", "-                        }", "-", "-                    } // HAMMER", "-                    // end inline mainGTU", "-", "-                    fmap[j] = v;", "+            i = lo + h;", "+            while (true) {", "+                /* copy 1 */", "+                if (i > hi) {", "+                    break;", "-", "-                if (firstAttemptShadow && (i <= hi) && (workDoneShadow > workLimitShadow)) {", "-                    break HP;", "-                }", "-            }", "-        }", "-", "-        this.workDone = workDoneShadow;", "-        return firstAttemptShadow && (workDoneShadow > workLimitShadow);", "-    }", "+                v = zptr[i];", "+                j = i;", "+                while (fullGtU(zptr[j - h] + d, v + d)) {", "+                    zptr[j] = zptr[j - h];", "+                    j = j - h;", "+                    if (j <= (lo + h - 1)) {", "+                zptr[j] = v;", "+                i++;", "+                /* copy 2 */", "+                if (i > hi) {", "+                    break;", "+                }", "+                v = zptr[i];", "+                j = i;", "+                while (fullGtU(zptr[j - h] + d, v + d)) {", "+                    zptr[j] = zptr[j - h];", "+                    j = j - h;", "+                    if (j <= (lo + h - 1)) {", "+                        break;", "+                    }", "+                }", "+                zptr[j] = v;", "+                i++;", "+                /* copy 3 */", "+                if (i > hi) {", "+                    break;", "+                }", "+                v = zptr[i];", "+                j = i;", "+                while (fullGtU(zptr[j - h] + d, v + d)) {", "+                    zptr[j] = zptr[j - h];", "+                    j = j - h;", "+                    if (j <= (lo + h - 1)) {", "+                        break;", "+                    }", "+                }", "+                zptr[j] = v;", "+                i++;", "+                if (workDone > workLimit && firstAttempt) {", "+                    return;", "+        }", "+    }"]}]}
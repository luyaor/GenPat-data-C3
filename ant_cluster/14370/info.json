{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "63e591348180deaf8b186310ee4873d0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0917c582ace63ac036230b9f26c56dba", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/condition/TypeFound.java", "commitBeforeChange": "01cd62036e33d99e98a2d0a039d8aa8f1246a2ed", "commitAfterChange": "a44afbeef74753208e8f526cde2f2024ae177d76", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected boolean doesTypeExist(String typename)", "signatureAfterChange": "     protected boolean doesTypeExist(String typename)", "diff": ["-        AntTypeDefinition def = helper.getDefinition(", "-            ProjectHelper.genComponentName(uri, typename));", "+        String componentName = ProjectHelper.genComponentName(uri, typename);", "+        AntTypeDefinition def = helper.getDefinition(componentName);", "-        return def.getExposedClass(getProject()) != null;", "+        boolean found = def.getExposedClass(getProject()) != null;", "+        if(!found) {", "+            String text= helper.diagnoseCreationFailure(componentName,\"type\");", "+            log(text, Project.MSG_VERBOSE);", "+        }", "+        return found;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c317f754689c2df216506faeb2473eaa", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/PropertyHelper.java", "commitBeforeChange": "f9de93c35b4a4327c0cf29afd25ecf9c486f7647", "commitAfterChange": "902b72ec83e985a35e2e9fc26e41e2319cc7ea1e", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 15, "signatureBeforeChange": "      private String parsePropertyName(String value, ParsePosition pos)", "signatureAfterChange": "     public Collection getExpanders()", "diff": ["+     */", "+    public Collection getExpanders() {", "+        return getDelegates(PropertyExpander.class);", "+    }", "-", "-    private String parsePropertyName(String value, ParsePosition pos) {", "-        for (Iterator iter = getDelegates(PropertyExpander.class).iterator();", "-             iter.hasNext();) {", "-            String propertyName = ((PropertyExpander) iter.next())", "-                .parsePropertyName(value, pos, this);", "-            if (propertyName == null) {", "-                continue;", "-            }", "-            return propertyName;", "-        }", "-        return null;"]}]}
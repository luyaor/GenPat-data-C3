{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e333ba0bf9bff9cc89ecbc135faa55e8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "316287d3966f1c0a5340d2b0fa0de356", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "47a487c0dd073ced71720ad46588eeb38e12e47c", "commitAfterChange": "67c71a89e9e02b6e4841f748c79350b7ca190a00", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     protected void addPathFile(File pathComponent) throws IOException", "signatureAfterChange": "     protected void addPathFile(File pathComponent) throws IOException", "diff": ["+        if (pathComponent.isDirectory()) {", "+            return;", "+        }", "+", "+        String absPathPlusTimeAndLength =", "+            pathComponent.getAbsolutePath() + pathComponent.lastModified() + \"-\"", "+            + pathComponent.length();", "+        String classpath = (String) pathMap.get(absPathPlusTimeAndLength);", "+        if (classpath == null) {", "+            ZipFile jarFile = null;", "+            InputStream manifestStream = null;", "+            try {", "+                jarFile = new ZipFile(pathComponent);", "+                manifestStream", "+                    = jarFile.getInputStream(new ZipEntry(\"META-INF/MANIFEST.MF\"));", "+", "+                if (manifestStream == null) {", "+                    return;", "+                }", "+                Reader manifestReader", "+                    = new InputStreamReader(manifestStream, \"UTF-8\");", "+                org.apache.tools.ant.taskdefs.Manifest manifest", "+                    = new org.apache.tools.ant.taskdefs.Manifest(manifestReader);", "+                classpath", "+                    = manifest.getMainSection().getAttributeValue(\"Class-Path\");", "+", "+            } catch (org.apache.tools.ant.taskdefs.ManifestException e) {", "+                // ignore", "+            } finally {", "+                if (manifestStream != null) {", "+                    manifestStream.close();", "+                }", "+                if (jarFile != null) {", "+                    jarFile.close();", "+                }", "+            }", "+            if (classpath == null) {", "+                classpath = \"\";", "+            }", "+            pathMap.put(absPathPlusTimeAndLength, classpath);", "+        }", "+", "+        if (!\"\".equals(classpath)) {", "+            URL baseURL = FILE_UTILS.getFileURL(pathComponent);", "+            StringTokenizer st = new StringTokenizer(classpath);", "+            while (st.hasMoreTokens()) {", "+                String classpathElement = st.nextToken();", "+                URL libraryURL = new URL(baseURL, classpathElement);", "+                if (!libraryURL.getProtocol().equals(\"file\")) {", "+                    log(\"Skipping jar library \" + classpathElement", "+                        + \" since only relative URLs are supported by this\"", "+                        + \" loader\", Project.MSG_VERBOSE);", "+                    continue;", "+                }", "+                File libraryFile = new File(libraryURL.getFile());", "+                if (libraryFile.exists() && !isInPath(libraryFile)) {", "+                    addPathFile(libraryFile);", "+                }", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f5312b44bcfd13acf6f2d316362a721", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/loader/AntClassLoader2.java", "commitBeforeChange": "eb5088c22612cc2565d9f723f333bf4ae90e304e", "commitAfterChange": "00727cc999e07f967431a7faf1cb13f545e705a3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     protected void addPathFile(File pathComponent) throws IOException", "signatureAfterChange": "     protected void addPathFile(File pathComponent) throws IOException", "diff": ["-        String classpath = null;", "-        ZipFile jarFile = null;", "-        InputStream manifestStream = null;", "-        try {", "-            jarFile = new ZipFile(pathComponent);", "-            manifestStream", "-                = jarFile.getInputStream(new ZipEntry(\"META-INF/MANIFEST.MF\"));", "+        String absPathPlusTimeAndLength =", "+            pathComponent.getAbsolutePath() + pathComponent.lastModified() + \"-\"", "+            + pathComponent.length();", "+        String classpath = (String) pathMap.get(absPathPlusTimeAndLength);", "+        if (classpath == null) {", "+            ZipFile jarFile = null;", "+            InputStream manifestStream = null;", "+            try {", "+                jarFile = new ZipFile(pathComponent);", "+                manifestStream", "+                    = jarFile.getInputStream(new ZipEntry(\"META-INF/MANIFEST.MF\"));", "-            if (manifestStream == null) {", "-                return;", "-            }", "-            Reader manifestReader", "-                = new InputStreamReader(manifestStream, \"UTF-8\");", "-            org.apache.tools.ant.taskdefs.Manifest manifest", "-                = new org.apache.tools.ant.taskdefs.Manifest(manifestReader);", "-            classpath", "-                = manifest.getMainSection().getAttributeValue(\"Class-Path\");", "+                if (manifestStream == null) {", "+                    return;", "+                }", "+                Reader manifestReader", "+                    = new InputStreamReader(manifestStream, \"UTF-8\");", "+                org.apache.tools.ant.taskdefs.Manifest manifest", "+                    = new org.apache.tools.ant.taskdefs.Manifest(manifestReader);", "+                classpath", "+                    = manifest.getMainSection().getAttributeValue(\"Class-Path\");", "-        } catch (org.apache.tools.ant.taskdefs.ManifestException e) {", "-            // ignore", "-        } finally {", "-            if (manifestStream != null) {", "-                manifestStream.close();", "+            } catch (org.apache.tools.ant.taskdefs.ManifestException e) {", "+                // ignore", "+            } finally {", "+                if (manifestStream != null) {", "+                    manifestStream.close();", "+                }", "+                if (jarFile != null) {", "+                    jarFile.close();", "+                }", "-            if (jarFile != null) {", "-                jarFile.close();", "+            if (classpath == null) {", "+                classpath = \"\";", "+            pathMap.put(absPathPlusTimeAndLength, classpath);", "-        if (classpath != null) {", "+        if (!\"\".equals(classpath)) {"]}]}
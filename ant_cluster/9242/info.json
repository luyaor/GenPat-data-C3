{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4e548fdb6a2154915ca23fec8da8709a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c506cda450f8efdc9563e91199779786", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/condition/IsSigned.java", "commitBeforeChange": "81d29e52f1d4715920d593792f56adf5e71faf03", "commitAfterChange": "0adae3872fabb89ded584e82546ed9b6f357e18c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public boolean eval()", "signatureAfterChange": "     public boolean eval()", "diff": ["-    public boolean eval() {", "-        if (file == null) {", "-            throw new BuildException(\"The file attribute must be set.\");", "-        }", "-        if (file != null && !file.exists()) {", "-            log(\"The file \\\"\" + file.getAbsolutePath()", "-                    + \"\\\" does not exist.\", Project.MSG_VERBOSE);", "-            return false;", "-        }", "-", "-            jarFile = new ZipFile(file);", "-                    String name = ((ZipEntry) entries.nextElement()).getName();", "-                    if (name.startsWith(SIG_START) && name.endsWith(SIG_END)) {", "-                        log(\"File \\\"\" + file.getAbsolutePath()", "-                            + \"\\\" is signed.\", Project.MSG_VERBOSE);", "-                                    + name.toUpperCase()", "-                                    + SIG_END) != null;", "-                boolean longSig  = jarFile.getEntry(SIG_START", "-                                    + name.substring(0, 8).toUpperCase()", "-                                    + SIG_END) != null;", "-                if (shortSig || longSig) {", "-                    log(\"File \\\"\" + file.getAbsolutePath()", "-                        + \"\\\" is signed.\", Project.MSG_VERBOSE);", "-                    return true;", "-                } else {", "-                    return false;", "-        } catch (IOException e) {", "-            log(\"Got IOException reading file \\\"\" + file.getAbsolutePath()", "-                + \"\\\"\" + e, Project.MSG_VERBOSE);", "-            return false;", "+     */", "+    public boolean eval() {", "+        if (file == null) {", "+            throw new BuildException(\"The file attribute must be set.\");", "+        }", "+        if (file != null && !file.exists()) {", "+            log(\"The file \\\"\" + file.getAbsolutePath()", "+                + \"\\\" does not exist.\", Project.MSG_VERBOSE);", "+            return false;", "+        }", "+", "+        boolean r = false;", "+        try {", "+            r = isSigned(file, name);", "+        } catch (IOException e) {", "+            log(\"Got IOException reading file \\\"\" + file.getAbsolutePath()", "+                + \"\\\"\" + e, Project.MSG_WARN);", "+        }", "+", "+        if (r) {", "+            log(\"File \\\"\" + file.getAbsolutePath() + \"\\\" is signed.\",", "+                Project.MSG_VERBOSE);", "+        }", "+        return r;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca0eac1e0802947468b0096ad7d42524", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Cvs.java", "commitBeforeChange": "db6f84aa2239450cdbbb81a6e3b67513fab389c8", "commitAfterChange": "37ed344b385cde54ee62f2e66d347cb243dd6708", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "          public void execute() throws BuildException", "signatureAfterChange": "       public void execute() throws BuildException", "diff": ["+", "-\t// XXX: we should use JCVS (www.ice.com/JCVS) instead of command line", "-\t// execution so that we don't rely on having native CVS stuff around (SM)", "+        // XXX: we should use JCVS (www.ice.com/JCVS) instead of command line", "+        // execution so that we don't rely on having native CVS stuff around (SM)", "-\t", "+    ", "-\tif (pack != null) {", "+        if (pack != null) {", "-\t}", "+        }", "-        Execute exe = new Execute(new LogStreamHandler(this, Project.MSG_INFO,", "-                                                       Project.MSG_WARN), ", "+        ExecuteStreamHandler streamhandler = null;", "+        OutputStream outputstream = null;", "+        OutputStream errorstream = null; ", "+        if (error == null && output == null) {", "+            streamhandler = new LogStreamHandler(this, Project.MSG_INFO,", "+                                                 Project.MSG_WARN);", "+        }", "+        else {", "+            if (output != null) {", "+                try {", "+                    outputstream = new PrintStream(new BufferedOutputStream(new FileOutputStream(output)));", "+                } catch (IOException e) {", "+                    throw new BuildException(e, location);", "+                }", "+            }", "+            else {", "+                outputstream = new LogOutputStream(this, Project.MSG_INFO);", "+            }", "+            if (error != null) {", "+                try {", "+                    errorstream = new PrintStream(new BufferedOutputStream(new FileOutputStream(error)));", "+                } catch (IOException e) {", "+                    throw new BuildException(e, location);", "+                }", "+            }", "+            else {", "+                errorstream = new LogOutputStream(this, Project.MSG_WARN);", "+            }", "+            streamhandler = new PumpStreamHandler(outputstream, errorstream);", "+        }", "+", "+        Execute exe = new Execute(streamhandler, ", "+        } finally {", "+            if (output != null) {", "+                try {", "+                    outputstream.close();", "+                } catch (IOException e) {}", "+            }", "+            if (error != null) {", "+                try {", "+                    errorstream.close();", "+                } catch (IOException e) {}", "+            }"]}]}
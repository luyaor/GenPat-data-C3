{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "352bc96659658aa09c43889d1540684d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "192b549af2bf3afed01af6d81289dae3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/optional/ScriptRunner.java", "commitBeforeChange": "ebefa298a138aaf7088ad1af981a392b895eff85", "commitAfterChange": "c0b535098106a3b4549151960da251a6e78e627e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void executeScript(String execName) throws BuildException", "signatureAfterChange": "     public void executeScript(String execName) throws BuildException", "diff": ["-        if (language == null) {", "-            throw new BuildException(\"script language must be specified\");", "-        }", "-", "-        ClassLoader origContextClassLoader =", "-            Thread.currentThread().getContextClassLoader();", "-        ClassLoader scriptLoader = getClass().getClassLoader();", "-        if (classpath != null && project != null) {", "-            scriptLoader = project.createClassLoader(", "-                scriptLoader, classpath);", "-        }", "+        checkLanguage();", "+        ClassLoader origLoader = replaceContextLoader();", "-            Thread.currentThread().setContextClassLoader(scriptLoader);", "-            BSFManager manager = new BSFManager ();", "-            manager.setClassLoader(scriptLoader);", "-", "-            for (Iterator i = beans.keySet().iterator(); i.hasNext();) {", "-                String key = (String) i.next();", "-                Object value = beans.get(key);", "-                if (value != null) {", "-                    manager.declareBean(key, value, value.getClass());", "-                } else {", "-                    // BSF uses a hashtable to store values", "-                    // so cannot declareBean with a null value", "-                    // So need to remove any bean of this name as", "-                    // that bean should not be visible", "-                    manager.undeclareBean(key);", "-                }", "-            }", "-", "+            BSFManager m = createManager();", "+            declareBeans(m);", "-            manager.exec(language, execName, 0, 0, script);", "-        } catch (BSFException be) {", "-            Throwable t = be;", "-            Throwable te = be.getTargetException();", "-            if (te != null) {", "-                if  (te instanceof BuildException) {", "-                    throw (BuildException) te;", "-                } else {", "-                    t = te;", "-                }", "+            if (engine == null) {", "+                m.exec(getLanguage(), execName, 0, 0, getScript());", "+            } else {", "+                engine.exec(execName, 0, 0, getScript());", "-            throw new BuildException(t);", "+        } catch (BSFException be) {", "+            throwBuildException(be);", "-             Thread.currentThread().setContextClassLoader(", "-                 origContextClassLoader);", "+            restoreContextLoader(origLoader);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99b602cd7916d9d8b19893856097f7ea", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/RExecTask.java", "commitBeforeChange": "befcdc72067b9a6018e163337b95e4877762be24", "commitAfterChange": "8fac17d331ce4c61907a29471f1febd5730c4d95", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        rexec = new AntRExecClient();", "+        AntRExecClient rexec = null;", "-            rexec.connect(server, port);", "-        } catch (IOException e) {", "-            throw new BuildException(\"Can't connect to \" + server);", "-        }", "-        /**  Login if userid and password were specified */", "-        if (userid != null && password != null) {", "-            login();", "-        }", "-        /**  Process each sub command */", "-        Enumeration tasksToRun = rexecTasks.elements();", "-        while (tasksToRun != null && tasksToRun.hasMoreElements()) {", "-            RExecSubTask task = (RExecSubTask) tasksToRun.nextElement();", "-            if (task instanceof RExecRead && defaultTimeout != null) {", "-                ((RExecRead) task).setDefaultTimeout(defaultTimeout);", "+            rexec = new AntRExecClient();", "+            try {", "+                rexec.connect(server, port);", "+            } catch (IOException e) {", "+                throw new BuildException(\"Can't connect to \" + server);", "-            task.execute(rexec);", "-        }", "+            /**  Login if userid and password were specified */", "+            if (userid != null && password != null) {", "+                login(rexec);", "+            }", "+            /**  Process each sub command */", "+            Enumeration tasksToRun = rexecTasks.elements();", "+            while (tasksToRun != null && tasksToRun.hasMoreElements()) {", "+                RExecSubTask task = (RExecSubTask) tasksToRun.nextElement();", "+                if (task instanceof RExecRead && defaultTimeout != null) {", "+                    ((RExecRead) task).setDefaultTimeout(defaultTimeout);", "+                }", "+                task.execute(rexec);", "+            }", "-        /** Keep reading input stream until end of it or time-out */", "-        rexec.waitForEOF(defaultTimeout);", "+            /** Keep reading input stream until end of it or time-out */", "+            rexec.waitForEOF(defaultTimeout);", "+       } finally {", "+           if (rexec != null) {", "+               try {", "+                   rexec.disconnect();", "+               } catch (IOException e) {", "+                   throw new BuildException(\"Error disconnecting from \" ", "+                                            + server);", "+               }", "+           }", "+       }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce6e767852415275e673a158f74135a0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/PropertyHelper.java", "commitBeforeChange": "c00d3f670bf0ede36467d3409170346af1a535d9", "commitAfterChange": "65b09851fd5134ce0a66954485bdff2db5783e40", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     public synchronized boolean setProperty(String name, Object value, boolean verbose)", "signatureAfterChange": "     public boolean setProperty(String name, Object value, boolean verbose)", "diff": ["-    public synchronized boolean setProperty(String name, Object value, boolean verbose) {", "-        for (Iterator iter = getDelegates(PropertySetter.class).iterator();", "-             iter.hasNext();) {", "+    public boolean setProperty(String name, Object value, boolean verbose) {", "+        for (Iterator iter = getDelegates(PropertySetter.class).iterator(); iter.hasNext();) {", "-        // user (CLI) properties take precedence", "-        if (null != userProperties.get(name)) {", "-            if (verbose) {", "-                project.log(\"Override ignored for user property \\\"\" + name", "-                        + \"\\\"\", Project.MSG_VERBOSE);", "+        synchronized (this) {", "+            // user (CLI) properties take precedence", "+            if (userProperties.containsKey(name)) {", "+                if (verbose) {", "+                    project.log(\"Override ignored for user property \\\"\" + name + \"\\\"\",", "+                            Project.MSG_VERBOSE);", "+                }", "+                return false;", "-            return false;", "+            if (verbose) {", "+                if (properties.containsKey(name)) {", "+                    project.log(\"Overriding previous definition of property \\\"\" + name + \"\\\"\",", "+                            Project.MSG_VERBOSE);", "+                }", "+                project.log(\"Setting project property: \" + name + \" -> \" + value, Project.MSG_DEBUG);", "+            }", "+            if (name != null && value != null) {", "+                properties.put(name, value);", "+            }", "+            return true;", "-", "-//        boolean done = setPropertyHook(ns, name, value, false, false, false);", "-//        if (done) {", "-//            return true;", "-//        }", "-", "-        if (null != properties.get(name) && verbose) {", "-            project.log(\"Overriding previous definition of property \\\"\" + name", "-                    + \"\\\"\", Project.MSG_VERBOSE);", "-        }", "-", "-        if (verbose) {", "-            project.log(\"Setting project property: \" + name + \" -> \"", "-                    + value, Project.MSG_DEBUG);", "-        }", "-        if (name != null && value != null) {", "-            properties.put(name, value);", "-        }", "-        return true;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "69852d818857024492ecfef792f98198", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e88a534de63a8bcaa2ebd7a1e64469f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/ZipScanner.java", "commitBeforeChange": "8c9105e494edd2480f81d5a3e69fc9e3e8918149", "commitAfterChange": "88f6a102293dc1fe277ec2fc50761b798101fc3b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void scanme()", "signatureAfterChange": "     private void scanme()", "diff": ["-        if (task != null) {", "-            task.log(\"checking zip entries: \" + srcFile, Project.MSG_VERBOSE);", "-        }", "-", "-                if (task != null) {", "-                    task.log(\"opening input stream from \" + srcFile,", "-                             Project.MSG_DEBUG);", "-                }", "-                // XXX - throw a BuildException instead ??", "-                if (task != null) {", "-                    task.log(\"problem opening \"+srcFile,Project.MSG_ERR);", "-                }", "+                throw new BuildException(\"problem opening \" + srcFile, ex);", "-                    if (task != null) {", "-                        task.log(\"adding entry \" + entry.getName() + \" from \"", "-                                 + srcFile, Project.MSG_DEBUG);", "-                    }", "-", "-                    // XXX - throw a BuildException instead ??", "-                    if (task != null ) {", "-                        task.log(\"problem reading \" + srcFile,", "-                                 Project.MSG_ERR);", "-                    }", "-", "+                    throw new BuildException(\"problem reading \" + srcFile,", "+                                             ex);", "-                    // XXX - throw a BuildException instead ??", "-                    if (task != null) {", "-                        task.log(\"problem reading zip entry from \" + srcFile,", "-                                 Project.MSG_ERR);", "-                    }", "+                    throw new BuildException(\"problem reading zip entry from \" ", "+                                             + srcFile, e);", "-                    if (task != null) {", "-                        task.log(\"closing input stream from \" + srcFile,", "-                                 Project.MSG_DEBUG);", "-                    }", "-                    if (task != null) {", "-                        task.log(\"problem closing input stream from \"", "-                                 + srcFile, Project.MSG_ERR);", "-                    }", "+                    // swallow"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ff7914ab322886cbcd616fb912ffca0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/cli/org/apache/ant/cli/Commandline.java", "commitBeforeChange": "7e6ed5c57f2d59a4ef3089d3f66863441a296e54", "commitAfterChange": "984e12200a21e70c9ec9086f8c69e86aaa0d7de9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void parseArguments(String[] args)          throws ConfigException", "signatureAfterChange": "     private void parseArguments(String[] args)          throws ConfigException", "diff": ["-                    String url = args[i++];", "+                    String url = getOption(args, i++, arg);", "-                } catch (ArrayIndexOutOfBoundsException e) {", "-                    System.err.println(\"You must specify a buildfile when \" +", "-                        \"using the -buildfile argument\");", "-                    return;", "-                    File logFile = new File(args[i++]);", "+                    File logFile = new File(getOption(args, i++, arg));", "-                    return;", "-                } catch (ArrayIndexOutOfBoundsException aioobe) {", "-                    System.err.println(\"You must specify a log file when \" +", "-                        \"using the -log argument\");", "+            } else if (arg.equals(\"-config\") || arg.equals(\"-c\")) {", "+                configFiles.add(new File(getOption(args, i++, arg)));", "-                try {", "-                    listeners.add(args[i++]);", "-                } catch (ArrayIndexOutOfBoundsException aioobe) {", "-                    System.err.println(\"You must specify a classname when \" +", "-                        \"using the -listener argument\");", "-                    return;", "-                }", "+                listeners.add(getOption(args, i++, arg));", "-                try {", "-                    loggerClassname = args[i++];", "-                } catch (ArrayIndexOutOfBoundsException aioobe) {", "-                    System.err.println(\"You must specify a classname when \" +", "-                        \"using the -logger argument\");", "-                    return;", "-                }", "+                loggerClassname = getOption(args, i++, arg);", "-                } else if (i < args.length - 1) {", "-                    value = args[++i];", "+                } else {", "+                    value = getOption(args, i++, arg);", "-                File ant1BuildFile =  new File(DEFAULT_ANT1_FILENAME);", "+                File ant1BuildFile = new File(DEFAULT_ANT1_FILENAME);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b88e27d8184f6b2cb1d1445d0abfd1a0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "a30889de71888bc66c4c484cfbbefa994590c383", "commitAfterChange": "83edbb7a85886207a528219f32cc598e4ea1eeff", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected Main(String[] args) throws BuildException", "signatureAfterChange": "     protected Main(String[] args) throws BuildException", "diff": ["-                    System.out.println(msg);", "-                    return;", "+                    throw new BuildException(msg);", "-                    System.out.println(msg);", "-                    return;", "+                    throw new BuildException(msg);", "-                    System.out.println(msg);", "-                    return;", "+                    throw new BuildException(msg);", "-                    System.out.println(msg);", "-                    return;", "+                    throw new BuildException(msg);", "-                       }", "+                }", "-                    System.out.println(\"Only one logger class may \"", "+                    throw new BuildException(\"Only one logger class may \"", "-                    return;", "-                    System.out.println(\"You must specify a classname when \" +", "-                                       \"using the -logger argument\");", "-                    return;", "+                    throw new BuildException(\"You must specify a classname when\"", "+                                             + \" using the -logger argument\");", "-                    System.out.println(\"Only one input handler class may \" +", "-                                       \"be specified.\");", "-                    return;", "+                    throw new BuildException(\"Only one input handler class may \"", "+                                             + \"be specified.\");", "-                    System.out.println(\"You must specify a classname when \" +", "-                                       \"using the -inputhandler argument\");", "-                    return;", "+                    throw new BuildException(\"You must specify a classname when\"", "+                                             + \" using the -inputhandler\"", "+                                             + \" argument\");", "-                    System.out.println(msg);", "-                    return;", "+                    throw new BuildException(msg);", "-                return;", "+                throw new BuildException(\"\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d30158eb3c3c7e6ac6b368786ca89660", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "49f0cadf53584f85d31718f3413ea2c8fbf77274", "commitAfterChange": "94e18bdaaa70e6e4f333cae68ee7721e062b9807", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            if (file != null) {", "-                if (file.exists()) {", "-                    if (destFile == null) {", "-                        destFile = new File(destDir, file.getName());", "-                    }", "-                    if (forceOverwrite || !destFile.exists()", "-                        || (file.lastModified() - granularity", "-                                > destFile.lastModified())) {", "-                        fileCopyMap.put(file.getAbsolutePath(),", "-                                        new String[] {destFile.getAbsolutePath()});", "-                    } else {", "-                        log(file + \" omitted as \" + destFile", "-                            + \" is up to date.\", Project.MSG_VERBOSE);", "-                    }", "-                } else {", "-                    String message = \"Warning: Could not find file \"", "-                        + file.getAbsolutePath() + \" to copy.\";", "-                    if (!failonerror) {", "-                        log(message, Project.MSG_ERR);", "-                    } else {", "-                        throw new BuildException(message);", "-                    }", "-                }", "-            }", "+            copySingleFile();", "+", "-            Iterator iter = baseDirs.iterator();", "-            while (iter.hasNext()) {", "-                File f = (File) iter.next();", "-                List files = (List) filesByBasedir.get(f);", "-                List dirs = (List) dirsByBasedir.get(f);", "-", "-                String[] srcFiles = new String[0];", "-                if (files != null) {", "-                    srcFiles = (String[]) files.toArray(srcFiles);", "-                }", "-                String[] srcDirs = new String[0];", "-                if (dirs != null) {", "-                    srcDirs = (String[]) dirs.toArray(srcDirs);", "-                }", "-                scan(f == NULL_FILE_PLACEHOLDER ? null : f, destDir, srcFiles,", "-                     srcDirs);", "-            }", "+            iterateOverBaseDirs(baseDirs, dirsByBasedir, filesByBasedir);"]}]}
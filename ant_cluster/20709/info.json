{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8a15a3ed1d37a216e1e1dd46750d9963", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b9a11d5dfbfb1cba3863b8bda5d9f2e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "7cd7c4e5f82cbe8a3fe5d03b7c8ea871a523fdd1", "commitAfterChange": "f1bc629e34874c4d641b159e31a55ed2cab6ca20", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 34, "signatureBeforeChange": "     public void addDefaultExcludes()", "signatureAfterChange": "     public void addDefaultExcludes()", "diff": ["-        newExcludes = new String[excludesLength + DEFAULTEXCLUDES.length];", "+        newExcludes = new String[excludesLength + defaultExcludes.size()];", "-        for (int i = 0; i < DEFAULTEXCLUDES.length; i++) {", "-            newExcludes[i + excludesLength] = DEFAULTEXCLUDES[i].replace('/',", "-                    File.separatorChar).replace('\\\\', File.separatorChar);", "+        String[] defaultExcludesTemp = getDefaultExcludes();", "+        for (int i = 0; i < defaultExcludesTemp.length; i++) {", "+            newExcludes[i + excludesLength] = defaultExcludesTemp[i].", "+                replace('/', File.separatorChar).", "+                replace('\\\\', File.separatorChar);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79c8dcfae08324235fd8a0b46d181ab6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/junit/src/main/org/apache/tools/ant/taskdefs/optional/rjunit/formatter/XMLFormatter.java", "commitBeforeChange": "30b81779b563d12a1e28bebf934d5a5626da57ce", "commitAfterChange": "8c68d4864950b4f5fa519753d19301cf84bf91bd", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void onTestStarted(TestRunEvent evt)", "signatureAfterChange": "      public void onTestStarted(TestRunEvent evt)", "diff": ["-        if ( !suiteName.equals(lastSuiteElement.getAttribute(\"name\")) ){", "+        String lastSuiteName = lastSuiteElement.getAttribute(ATTR_PACKAGE)", "+                + \".\" + lastSuiteElement.getAttribute(ATTR_NAME);", "+        if ( !suiteName.equals(lastSuiteName) ){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a481afbe1159f6377bd627c65ddfe43", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/tar/TarEntry.java", "commitBeforeChange": "06bdb4521d318d621d46259c34ee30ff4e4f33e7", "commitAfterChange": "71715055cd0a9a993d91159d0aa49e5eee13d935", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public TarEntry(File file, String fileName)", "signatureAfterChange": "     public TarEntry(File file, String fileName)", "diff": ["+        String normalizedName = normalizeFileName(fileName, false);", "-            int nameLength = fileName.length();", "-            if (nameLength == 0 || fileName.charAt(nameLength - 1) != '/') {", "-                this.name = fileName + \"/\";", "+            int nameLength = normalizedName.length();", "+            if (nameLength == 0 || normalizedName.charAt(nameLength - 1) != '/') {", "+                this.name = normalizedName + \"/\";", "-                this.name = fileName;", "+                this.name = normalizedName;", "-            this.name = fileName;", "+            this.name = normalizedName;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a8b31b6b26d660cf03870c5676d18c9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/launch/Locator.java", "commitBeforeChange": "a500ff1e5013cbbb7830d5b47fa24dc4db1bc400", "commitAfterChange": "bcf84f5f14a9f80df80ca5836fc5b08d8be7c295", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public static File getToolsJar()", "signatureAfterChange": "     public static File getToolsJar()", "diff": ["+        String libToolsJar= File.separator + \"lib\" + File.separator + \"tools.jar\";", "-        File toolsJar = new File(javaHome + \"/lib/tools.jar\");", "+        File toolsJar = new File(javaHome + libToolsJar);", "-            toolsJar = new File(javaHome + \"/lib/tools.jar\");", "+            toolsJar = new File(javaHome + libToolsJar );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa1636df3fdfcc6815e6153d26c6ce99", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/TaskAdapter.java", "commitBeforeChange": "2c4b09e15f09ece3d4e8276687a809ddefa9408f", "commitAfterChange": "9f1eefd3a2e6760daa8941c1c69b4825f4c136fa", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            executeM = c.getMethod(\"execute\", new Class[0]);", "+            final String methodName = getExecuteMethodName();", "+            executeM = c.getMethod(methodName, new Class[0]);", "-                log(\"No public execute() in \" + proxy.getClass(),", "+                log(\"No public \" + methodName + \" in \" + proxy.getClass(),", "-                throw new BuildException(\"No public execute() in \"", "+                throw new BuildException(\"No public \" + methodName + \"() in \""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa2c2a6375e119ef045d83e143605aed", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/FixCRLF.java", "commitBeforeChange": "a6e9a55f6531fd09bea8b85fde951833505dbe62", "commitAfterChange": "8d20a46835846d0ff4bf0bf2244c7d809832aa03", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+        String enc = encoding == null ? \"default\" : encoding;", "-            + \" encoding=\" + (encoding == null ? \"default\" : encoding),", "+            + \" encoding=\" + enc", "+            + \" outputencoding=\"", "+            + (outputEncoding == null ? enc : outputEncoding),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2a49529cf1a9a85373ec2d250f01ef2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/test/org/apache/myrmidon/components/property/test/AbstractPropertyResolverTestCase.java", "commitBeforeChange": "e06736172f4319d8d75ef9c4cd2fd6322ab44b4e", "commitAfterChange": "0f1259d2f38c0a759f6d1cc89605baba43c5838f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void testInvalidTypeDeclarations() throws Exception", "signatureAfterChange": "     public void testInvalidTypeDeclarations() throws Exception", "diff": ["-", "+        final Resources rez = getResourcesForTested( DefaultPropertyResolver.class );", "-                       REZ.getString( \"prop.mismatched-braces.error\" ),", "-                       m_context );", "+                       rez.getString( \"prop.mismatched-braces.error\" ),", "+                       m_store );", "-                       REZ.getString( \"prop.mismatched-braces.error\" ),", "-                       m_context );", "+                       rez.getString( \"prop.mismatched-braces.error\" ),", "+                       m_store );"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ae2ef19e9a2c88e04ef13f5bec9b5aa9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18793eaf48a2ba52c71501bd2eed0208", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "78ba5f07530c5aaf81dfd8f7643180af7359effd", "commitAfterChange": "0a679803f04b2e3e9d63c5f6b46677b0cf713d6b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public boolean doGet(int logLevel, DownloadProgress progress)             throws IOException", "signatureAfterChange": "     public boolean doGet(int logLevel, DownloadProgress progress)             throws IOException", "diff": ["-        //set up the URL connection", "-        URLConnection connection = source.openConnection();", "-        //modify the headers", "-        //NB: things like user authentication could go in here too.", "-        if (hasTimestamp) {", "-            connection.setIfModifiedSince(timestamp);", "-        }", "-        // prepare Java 1.1 style credentials", "-        if (uname != null || pword != null) {", "-            String up = uname + \":\" + pword;", "-            String encoding;", "-            //we do not use the sun impl for portability,", "-            //and always use our own implementation for consistent", "-            //testing", "-            Base64Converter encoder = new Base64Converter();", "-            encoding = encoder.encode(up.getBytes());", "-            connection.setRequestProperty (\"Authorization\",", "-                    \"Basic \" + encoding);", "-        }", "-", "-        //connect to the remote site (may take some time)", "-        connection.connect();", "-        //next test for a 304 result (HTTP only)", "-        if (connection instanceof HttpURLConnection) {", "-            HttpURLConnection httpConnection", "-                    = (HttpURLConnection) connection;", "-            long lastModified = httpConnection.getLastModified();", "-            if (httpConnection.getResponseCode()", "-                    == HttpURLConnection.HTTP_NOT_MODIFIED", "-                || (lastModified != 0 && hasTimestamp", "-                && timestamp >= lastModified)) {", "-                //not modified so no file download. just return", "-                //instead and trace out something so the user", "-                //doesn't think that the download happened when it", "-                //didn't", "-                log(\"Not modified - so not downloaded\", logLevel);", "-                return false;", "-            }", "-            // test for 401 result (HTTP only)", "-            if (httpConnection.getResponseCode()", "-                    == HttpURLConnection.HTTP_UNAUTHORIZED)  {", "-                String message = \"HTTP Authorization failure\";", "-                if (ignoreErrors) {", "-                    log(message, logLevel);", "-                    return false;", "-                } else {", "-                    throw new BuildException(message);", "-                }", "-            }", "-", "-        }", "-", "-        //REVISIT: at this point even non HTTP connections may", "-        //support the if-modified-since behaviour -we just check", "-        //the date of the content and skip the write if it is not", "-        //newer. Some protocols (FTP) don't include dates, of", "-        //course.", "-", "-        InputStream is = null;", "-        for (int i = 0; i < NUMBER_RETRIES; i++) {", "-            //this three attempt trick is to get round quirks in different", "-            //Java implementations. Some of them take a few goes to bind", "-            //property; we ignore the first couple of such failures.", "-            try {", "-                is = connection.getInputStream();", "-                break;", "-            } catch (IOException ex) {", "-                log(\"Error opening connection \" + ex, logLevel);", "-            }", "-        }", "-        if (is == null) {", "-            log(\"Can't get \" + source + \" to \" + dest, logLevel);", "-            if (ignoreErrors) {", "-                return false;", "-            }", "-            throw new BuildException(\"Can't get \" + source + \" to \" + dest,", "-                    getLocation());", "-        }", "-", "-        FileOutputStream fos = new FileOutputStream(dest);", "-        progress.beginDownload();", "-        boolean finished = false;", "+        GetThread getThread = new GetThread(hasTimestamp, timestamp, progress,", "+                                            logLevel);", "+        getThread.setDaemon(true);", "+        getProject().registerThreadTask(getThread, this);", "+        getThread.start();", "-            byte[] buffer = new byte[BIG_BUFFER_SIZE];", "-            int length;", "-            while ((length = is.read(buffer)) >= 0) {", "-                fos.write(buffer, 0, length);", "-                progress.onTick();", "-            }", "-            finished = true;", "-        } finally {", "-            FileUtils.close(fos);", "-            FileUtils.close(is);", "-", "-            // we have started to (over)write dest, but failed.", "-            // Try to delete the garbage we'd otherwise leave", "-            // behind.", "-            if (!finished) {", "-                dest.delete();", "-            }", "-        }", "-        progress.endDownload();", "-", "-        //if (and only if) the use file time option is set, then", "-        //the saved file now has its timestamp set to that of the", "-        //downloaded file", "-        if (useTimestamp)  {", "-            long remoteTimestamp = connection.getLastModified();", "-            if (verbose)  {", "-                Date t = new Date(remoteTimestamp);", "-                log(\"last modified = \" + t.toString()", "-                        + ((remoteTimestamp == 0)", "-                        ? \" - using current time instead\"", "-                        : \"\"), logLevel);", "-            }", "-            if (remoteTimestamp != 0) {", "-                FILE_UTILS.setFileLastModified(dest, remoteTimestamp);", "-            }", "+            getThread.join(maxTime * 1000);", "+        } catch (InterruptedException ie) {", "+            log(\"interrupted waiting for GET to finish\",", "+                Project.MSG_VERBOSE);", "-        //successful download", "-        return true;", "+        if (getThread.isAlive()) {", "+            String msg = \"The GET operation took longer than \" + maxTime", "+                + \" seconds, stopping it.\";", "+            if (ignoreErrors) {", "+                log(msg);", "+            }", "+            getThread.closeStreams();", "+            if (!ignoreErrors) {", "+                throw new BuildException(msg);", "+            }", "+            return false;", "+        }", "+", "+        return getThread.wasSuccessful();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee8aa699aaab3ce2353d912a9890b2bc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "c8203de650acea3fa8e0e1a6acce7425f5bbe322", "commitAfterChange": "7651d02856325bec057619d215ee30c4c605ee80", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+", "+        //set up logging", "+        int logLevel = Project.MSG_INFO;", "+        DownloadProgress progress=null;", "+        if (verbose) {", "+            progress = new VerboseProgress(System.out);", "+        }", "+", "+        //execute the get", "+        try {", "+            doGet(logLevel, progress);", "+        } catch (IOException ioe) {", "+            log(\"Error getting \" + source + \" to \" + dest);", "+            if (!ignoreErrors) {", "+                throw new BuildException(ioe, getLocation());", "+            }", "+        }", "+    }", "-                                     getLocation());", "-                                     getLocation());", "-        try {", "-            log(\"Getting: \" + source);", "-", "-            //set the timestamp to the file date.", "-            long timestamp = 0;", "-", "-            boolean hasTimestamp = false;", "-            if (useTimestamp && dest.exists()) {", "-                timestamp = dest.lastModified();", "-                if (verbose) {", "-                    Date t = new Date(timestamp);", "-                    log(\"local file date : \" + t.toString());", "-                }", "-", "-                hasTimestamp = true;", "-            }", "-", "-            //set up the URL connection", "-            URLConnection connection = source.openConnection();", "-            //modify the headers", "-            //NB: things like user authentication could go in here too.", "-            if (useTimestamp && hasTimestamp) {", "-                connection.setIfModifiedSince(timestamp);", "-            }", "-            // prepare Java 1.1 style credentials", "-            if (uname != null || pword != null) {", "-                String up = uname + \":\" + pword;", "-                String encoding;", "-                // check to see if sun's Base64 encoder is available.", "-                try {", "-                    Object encoder =", "-                            Class.forName(\"sun.misc.BASE64Encoder\").newInstance();", "-                    encoding = (String)", "-                            encoder.getClass().getMethod(\"encode\", new Class[] {byte[].class})", "-                            .invoke(encoder, new Object[] {up.getBytes()});", "-", "-                } catch (Exception ex) { // sun's base64 encoder isn't available", "-                    Base64Converter encoder = new Base64Converter();", "-                    encoding = encoder.encode(up.getBytes());", "-                }", "-                connection.setRequestProperty (\"Authorization\",", "-                                               \"Basic \" + encoding);", "-            }", "-", "-            //connect to the remote site (may take some time)", "-            connection.connect();", "-            //next test for a 304 result (HTTP only)", "-            if (connection instanceof HttpURLConnection) {", "-                HttpURLConnection httpConnection", "-                if (httpConnection.getResponseCode()", "-                    //not modified so no file download. just return", "-                    //instead and trace out something so the user", "-                    //doesn't think that the download happened when it", "-                    //didn't", "-                    log(\"Not modified - so not downloaded\");", "-                    return;", "-                }", "-                // test for 401 result (HTTP only)", "-                if (httpConnection.getResponseCode()", "-                    String message = \"HTTP Authorization failure\";", "-                    if (ignoreErrors) {", "-                        log(message, Project.MSG_WARN);", "-                        return;", "-                    } else {", "-                        throw new BuildException(message);", "-                    }", "-                }", "-", "-            }", "-", "-            //REVISIT: at this point even non HTTP connections may", "-            //support the if-modified-since behaviour -we just check", "-            //the date of the content and skip the write if it is not", "-            //newer. Some protocols (FTP) don't include dates, of", "-            //course.", "-", "-            InputStream is = null;", "-            for (int i = 0; i < 3; i++) {", "-                try {", "-                    is = connection.getInputStream();", "-                    break;", "-                } catch (IOException ex) {", "-                    log(\"Error opening connection \" + ex);", "-                }", "-            }", "-            if (is == null) {", "-                log(\"Can't get \" + source + \" to \" + dest);", "-                    return;", "-                }", "-                throw new BuildException(\"Can't get \" + source + \" to \" + dest,", "-                                         getLocation());", "-            }", "-", "-            FileOutputStream fos = new FileOutputStream(dest);", "-            boolean finished = false;", "-            try {", "-                byte[] buffer = new byte[100 * 1024];", "-                int length;", "-                int dots = 0;", "-", "-                while ((length = is.read(buffer)) >= 0) {", "-                    fos.write(buffer, 0, length);", "-                    if (verbose) {", "-                        System.out.print(\".\");", "-                        if (dots++ > 50) {", "-                            System.out.flush();", "-                            dots = 0;", "-                        }", "-                    }", "-                }", "-                if (verbose) {", "-                    System.out.println();", "-                }", "-                finished = true;", "-            } finally {", "-                if (fos != null) {", "-                    fos.close();", "-                }", "-                is.close();", "-                // we have started to (over)write dest, but failed.", "-                // Try to delete the garbage we'd otherwise leave", "-                // behind.", "-                if (!finished) {", "-                    dest.delete();", "-            //if (and only if) the use file time option is set, then", "-            //the saved file now has its timestamp set to that of the", "-            //downloaded file", "-            if (useTimestamp)  {", "-                long remoteTimestamp = connection.getLastModified();", "-                if (verbose)  {", "-                    Date t = new Date(remoteTimestamp);", "-                    log(\"last modified = \" + t.toString()", "-                        + ((remoteTimestamp == 0)", "-                          ? \" - using current time instead\"", "-                          : \"\"));", "-                }", "-                if (remoteTimestamp != 0) {", "-                    FileUtils.newFileUtils()", "-                        .setFileLastModified(dest, remoteTimestamp);", "-                }", "-            }", "-        } catch (IOException ioe) {", "-            log(\"Error getting \" + source + \" to \" + dest);", "-            if (ignoreErrors) {", "-                return;", "-            }", "-            throw new BuildException(ioe, getLocation());"]}]}
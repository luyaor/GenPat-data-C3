{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "000103d1d1dfadf08b73fb1495c68e36", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15dd1c8e089812206c4d71ba4cbe0b09", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "32f323668f263fad0bc38a43c6d4e6a1f4579c8a", "commitAfterChange": "a920aa9f305e0f998c908798c99b6d108f5d4a58", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void checkAttributes()", "signatureAfterChange": "     private void checkAttributes()", "diff": ["-        if (source == null) {", "-            throw new BuildException(\"src attribute is required\", getLocation());", "+        if (sources.size() == 0) {", "+            throw new BuildException(\"at least one source is required\",", "+                                     getLocation());", "+        }", "+        for (Iterator iter = sources.iterator(); iter.hasNext(); ) {", "+            Object up = ((Resource) iter.next()).as(URLProvider.class);", "+            if (up == null) {", "+                throw new BuildException(\"Only URLProvider resources are\"", "+                                         + \" supported\", getLocation());", "+            }", "-        if (dest == null) {", "+        if (destination == null) {", "-        if (dest.exists() && dest.isDirectory()) {", "-            throw new BuildException(\"The specified destination is a directory\",", "-                    getLocation());", "+        if (destination.exists() && sources.size() > 1", "+            && !destination.isDirectory()) {", "+            throw new BuildException(\"The specified destination is not a\"", "+                                     + \" directory\",", "+                                     getLocation());", "-        if (dest.exists() && !dest.canWrite()) {", "-            throw new BuildException(\"Can't write to \" + dest.getAbsolutePath(),", "-                    getLocation());", "+        if (destination.exists() && !destination.canWrite()) {", "+            throw new BuildException(\"Can't write to \"", "+                                     + destination.getAbsolutePath(),", "+                                     getLocation());", "+        }", "+", "+        if (sources.size() > 1 && !destination.exists()) {", "+            destination.mkdirs();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38076ecebba08e91f575c4c00ff17a6c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "37ed344b385cde54ee62f2e66d347cb243dd6708", "commitAfterChange": "33107ab10098823c23924741100a6c3faf9fd267", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        if (srcFile == null && sqlCommand.length() == 0) {", "-            throw new BuildException(\"Source file or sql statement must be set!\", location);", "+        if (srcFile == null && sqlCommand.length() == 0) { ", "+            if (transactions.size() == 0) {", "+                throw new BuildException(\"Source file, transactions or sql statement must be set!\", location);", "+            }", "+        } else {", "+            // Make a transaction group for the outer command", "+            Transaction t = createTransaction();", "+            t.setSrc(srcFile);", "+            t.addText(sqlCommand);", "+", "+            if (!isValidRdbms(conn)) return;", "+", "-            if (sqlCommand.length() != 0) {", "-                runStatements(new StringReader(sqlCommand));", "-            }", "-            ", "-            if (srcFile != null) {", "-                runStatements(new FileReader(srcFile));", "-            }", "-", "-            if (!autocommit) {", "-                conn.commit();", "+            // Process all transactions", "+            for (Enumeration e = transactions.elements(); ", "+                 e.hasMoreElements();) {", "+                ((Transaction) e.nextElement()).runTransaction();", "+                if (!autocommit) {", "+                    log(\"Commiting transaction\", Project.MSG_VERBOSE);", "+                    conn.commit();", "+                }", "-            if (!autocommit && conn != null) {", "+            if (!autocommit && conn != null && onError.equals(\"abort\")) {", "-            if (!autocommit && conn != null) {", "+            if (!autocommit && conn != null && onError.equals(\"abort\")) {", "-        log(\"SQL statements executed successfully\", Project.MSG_VERBOSE);", "+        log(goodSql + \" of \" + totalSql + ", "+            \" SQL statements executed successfully\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72c4aa3e2c288b55bcd569f31e9b8ff9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ComponentManager.java", "commitBeforeChange": "26d9c6536e7e605b92a6e4b20eb0cd25e116a689", "commitAfterChange": "f19f07d6e4c72f241057ecfc32d80be21201bbf7", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private Object createComponentFromDef(String componentName,                                           ComponentLibrary componentLibrary,                                           AntLibDefinition libDefinition,                                           BuildElement model)          throws AntException", "signatureAfterChange": "     private Object createComponentFromDef(String componentName,                                           ComponentLibrary componentLibrary,                                           AntLibDefinition libDefinition,                                           BuildElement model)          throws AntException", "diff": ["-        if (model != null) {", "-            location = model.getLocation();", "-        }", "-", "-        boolean isTask", "-             = libDefinition.getDefinitionType() == AntLibrary.TASKDEF;", "-        String localName = libDefinition.getDefinitionName();", "-        String className = libDefinition.getClassName();", "+        String className = null;", "-            ClassLoader componentLoader = componentLibrary.getClassLoader();", "-            Class componentClass", "-                 = Class.forName(className, true, componentLoader);", "+            boolean isTask", "+                 = libDefinition.getDefinitionType() == AntLibrary.TASKDEF;", "+", "+", "+            Object component = null;", "+            if (model != null) {", "+                location = model.getLocation();", "+                for (Iterator i = aspects.iterator(); i.hasNext();) {", "+                    Aspect aspect = (Aspect) i.next();", "+                    component = aspect.preCreateComponent(component, model);", "+                }", "+            }", "+", "-            // create the component using the factory", "-            Object component", "-                 = libFactory.createComponent(componentClass, localName);", "+            ClassLoader componentLoader = null;", "+            if (component == null) {", "+                String localName = libDefinition.getDefinitionName();", "+                className = libDefinition.getClassName();", "+                componentLoader = componentLibrary.getClassLoader();", "+                Class componentClass", "+                    = Class.forName(className, true, componentLoader);", "+                // create the component using the factory", "+                component", "+                    = libFactory.createComponent(componentClass, localName);", "+            } else {", "+                className = component.getClass().getName();", "+                componentLoader = component.getClass().getClassLoader();", "+            }", "-                ExecutionContext context", "-                     = new ExecutionContext(frame, execComponent, model);", "-                context.setClassLoader(componentLoader);", "-                execComponent.init(context, componentName);", "+                // give it a context unless it already has one", "+                if (execComponent.getAntContext() == null) {", "+                    ExecutionContext context", "+                         = new ExecutionContext(frame, execComponent, model);", "+                    context.setClassLoader(componentLoader);", "+                    execComponent.init(context, componentName);", "+                }", "+                for (Iterator i = aspects.iterator(); i.hasNext();) {", "+                    Aspect aspect = (Aspect) i.next();", "+                    component = aspect.postCreateComponent(component, model);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2960580ac2dd58cd5ef3857b3bf3d25", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/test/org/apache/myrmidon/components/AbstractComponentTest.java", "commitBeforeChange": "274da3301287be067b66a5778b27bfa98ef0a662", "commitAfterChange": "b91e4a3c1d8310dea42c2c353ab016d9c5425109", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected final ServiceManager getServiceManager() throws Exception", "signatureAfterChange": "     protected final ServiceManager getServiceManager() throws Exception", "diff": ["-            final DefaultClassLoaderManager classLoaderMgr = new DefaultClassLoaderManager();", "-            classLoaderMgr.setCommonClassLoader( getClass().getClassLoader() );", "-            m_serviceManager.put( ClassLoaderManager.ROLE, classLoaderMgr );", "-            components.add( classLoaderMgr );", "+            component = createComponent( ClassLoaderManager.ROLE, DefaultClassLoaderManager.class );", "+            m_serviceManager.put( ClassLoaderManager.ROLE, component );", "+            components.add( component );", "+            // Parameterise the components", "+            final Parameters parameters = getParameters();", "+            for( Iterator iterator = components.iterator(); iterator.hasNext(); )", "+            {", "+                Object obj = iterator.next();", "+                if( obj instanceof Parameterizable )", "+                {", "+                    final Parameterizable parameterizable = (Parameterizable)obj;", "+                    parameterizable.parameterize( parameters );", "+                }", "+            }", "+", "+            // Initialise the components", "+            for( Iterator iterator = components.iterator(); iterator.hasNext(); )", "+            {", "+                Object obj = iterator.next();", "+                if( obj instanceof Initializable )", "+                {", "+                    final Initializable initializable = (Initializable)obj;", "+                    initializable.initialize();", "+                }", "+            }", "+"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5eb886f7e1bb48d035dfaf1808047e06", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0afba19811a370c7e28c6abcb464ef8f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/GenericDeploymentTool.java", "commitBeforeChange": "1cd764447cbd26e40fb0b78aaa4b4cf3398d2a9a", "commitAfterChange": "a50b60cdd9337ee2978a7f1522cf4963785f7aa9", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     protected void writeJar(String baseName, File jarfile, Hashtable files,                              String publicId) throws BuildException", "signatureAfterChange": "     protected void writeJar(String baseName, File jarfile, Hashtable files,                              String publicId) throws BuildException", "diff": ["-            String defaultManifest = \"/org/apache/tools/ant/defaultManifest.mf\";", "-            InputStream in = this.getClass().getResourceAsStream(defaultManifest);", "-            if ( in == null ) {", "-                throw new BuildException ( \"Could not find: \" + defaultManifest );", "+            InputStream in = null;", "+            Manifest manifest = null;", "+            try {", "+                if (config.manifest != null) {", "+                    in = new FileInputStream(config.manifest);", "+                    if ( in == null ) {", "+                        throw new BuildException(\"Could not find manifest file: \" + config.manifest, ", "+                                                  getLocation());", "+                    }", "+                }", "+                else {", "+                    String defaultManifest = \"/org/apache/tools/ant/defaultManifest.mf\";", "+                    in = this.getClass().getResourceAsStream(defaultManifest);", "+                    if ( in == null ) {", "+                        throw new BuildException(\"Could not find default manifest: \" + defaultManifest,", "+                                                  getLocation());", "+                    }", "+                }", "+                            ", "+                manifest = new Manifest(in);", "+            }", "+            catch (IOException e) {", "+                throw new BuildException (\"Unable to read manifest\", e, getLocation());", "+            }", "+            finally {", "+                if (in != null) {", "+                    in.close();", "+                }", "-            Manifest manifest = new Manifest(in);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d8335e34f654d0ca3a9a5ee2593c459", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/xml/XSLTProcess.java", "commitBeforeChange": "030fd751f51bef1c60b27cc4034cf1b013551520", "commitAfterChange": "0deb15031e9e934900b3b41f0d191dabdece8f80", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 16, "signatureBeforeChange": "     protected void configureLiaison( File stylesheet )         throws TaskException", "signatureAfterChange": "      private void specifyParams() throws TaskException", "diff": ["-    protected void configureLiaison( File stylesheet )", "-        if( m_stylesheetLoaded )", "-        m_stylesheetLoaded = true;", "-            getLogger().info( \"Loading stylesheet \" + stylesheet );", "-            m_liaison.setStylesheet( stylesheet );", "-            final Iterator params = m_params.iterator();", "-            while( params.hasNext() )", "-            {", "-                final XSLTParam param = (XSLTParam)params.next();", "-", "-                final String expression = param.getExpression();", "-                if( expression == null )", "-                {", "-                    throw new TaskException( \"Expression attribute is missing.\" );", "-                }", "-", "-                final String name = param.getName();", "-                if( name == null )", "-                {", "-                    throw new TaskException( \"Name attribute is missing.\" );", "-                }", "-", "-                m_liaison.addParam( name, expression );", "-            }", "-            getLogger().info( \"Failed to read stylesheet \" + stylesheet );", "+", "+    private void specifyParams() throws TaskException", "+    {", "+        final Iterator params = m_params.iterator();", "+        while( params.hasNext() )", "+        {", "+            final XSLTParam param = (XSLTParam)params.next();", "+", "+            final String expression = param.getExpression();", "+            if( expression == null )", "+            {", "+                throw new TaskException( \"Expression attribute is missing.\" );", "+            }", "+", "+            final String name = param.getName();", "+            if( name == null )", "+            {", "+                throw new TaskException( \"Name attribute is missing.\" );", "+            }", "+", "+            m_transformer.setParameter( name, expression );", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "143204ddf0634777bae15a1af032242f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/common/org/apache/ant/common/model/Project.java", "commitBeforeChange": "5168496109edbff91558a4d654082a36a1f74a69", "commitAfterChange": "1dcdf4c05f0685b9cac061c9ea9d7f5b6822cde3", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "     private void flattenDependency(List flattenedList, String fullTargetName)          throws ConfigException", "signatureAfterChange": "     private void flattenDependency(List flattenedList, String fullTargetName)          throws ConfigException", "diff": ["-        String fullProjectName = getFullProjectName(fullTargetName);", "-        Target target = getRefTarget(fullTargetName);", "-        if (target == null) {", "-            throw new ConfigException(\"Target \" + fullTargetName", "-                 + \" does not exist\");", "-        }", "-        for (Iterator i = target.getDependencies(); i.hasNext(); ) {", "-            String localDependencyName = (String)i.next();", "-            String fullDependencyName", "-                 = fullProjectName == null ? localDependencyName", "-                 : fullProjectName + REF_DELIMITER + localDependencyName;", "-            flattenDependency(flattenedList, fullDependencyName);", "-            flattenedList.add(fullDependencyName);", "+        try {", "+            String fullProjectName = getFullProjectName(fullTargetName);", "+            Target target = getRefTarget(fullTargetName);", "+            if (target == null) {", "+                throw new ConfigException(\"Target \" + fullTargetName", "+                     + \" does not exist\");", "+            }", "+            for (Iterator i = target.getDependencies(); i.hasNext(); ) {", "+                String localDependencyName = (String)i.next();", "+                String fullDependencyName", "+                     = fullProjectName == null ? localDependencyName", "+                     : fullProjectName + REF_DELIMITER + localDependencyName;", "+                flattenDependency(flattenedList, fullDependencyName);", "+                flattenedList.add(fullDependencyName);", "+            }", "+        } catch (ModelException e) {", "+            throw new ConfigException(e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "461cec769f38f54bccbdb4e51b2de3df", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/modules/edit/DependentTargetChooser.java", "commitBeforeChange": "2ff201801b557593afe6cf9dcd4d4c4f4da65b39", "commitAfterChange": "cfa93603e73e635d31be01cdb31dc9959a5ea35c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private List fillDependsList(ACSTargetElement aTarget)", "signatureAfterChange": "         public String[] getSelectedTargetsAsStringArray()", "diff": ["-    private List fillDependsList(ACSTargetElement aTarget) {", "-        List retVal = new ArrayList();", "-            ", "-        String[] dependNames = aTarget.getDepends();", "-        int length = dependNames.length;", "-        ArrayList allTargets = getCoTargets (aTarget);", "-        int allLen = allTargets.size();", "-        ", "-        for (int i = 0; i < length; i++)", "-        {", "-            for (int j = 0; j < allLen; j++) {", "-                ACSTargetElement currentElement = (ACSTargetElement)allTargets.get(j);", "-                if (currentElement.getName().equalsIgnoreCase(dependNames[i].trim())) retVal.add(currentElement);", "-            }", "-        }", "-        return retVal;", "-    }", "+         */", "+        public String[] getSelectedTargetsAsStringArray() {", "+            int length = getRowCount();", "+            String[] retVal = new String[getSelectedTargetCount()];", "+            int i = 0, j = 0;", "+        ", "+            for (i = 0; i < length; i++) {", "+                if (_selected[i]) {", "+                    retVal[j] = getTarget(i).getName();", "+                    j++;", "+                }", "+            }", "+            return retVal;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47c13b6a5bfe9ae40943c8ca6e084590", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ResourceUtils.java", "commitBeforeChange": "e580392c2d28c2a3530ebe0e1005bae0d45c5b8b", "commitAfterChange": "6c0b17e148b34774bbfffa826d1d0485fafa40ab", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static Resource[] selectOutOfDateSources(ProjectComponent logTo,                                                     Resource[] source,                                                     FileNameMapper mapper,                                                     ResourceFactory targets)", "signatureAfterChange": "     public static Resource[] selectOutOfDateSources(ProjectComponent logTo,                                                     Resource[] source,                                                     FileNameMapper mapper,                                                     ResourceFactory targets)", "diff": ["-                logTo.log(\"Warning: \" + source[counter].getName() ", "-                         + \" modified in the future.\", ", "+                logTo.log(\"Warning: \" + source[counter].getName()", "+                         + \" modified in the future.\",", "-            String[] targetnames = ", "+            String[] targetnames =", "-                for (int ctarget = 0; !added && ctarget < targetnames.length; ", "+                for (int ctarget = 0; !added && ctarget < targetnames.length;", "-                    Resource atarget = ", "+                    Resource atarget =", "-                        logTo.log(source[counter].getName() + \" added as \" ", "+                        logTo.log(source[counter].getName() + \" added as \"", "-                    } else if (atarget.getLastModified() ", "+                    } else if (!atarget.isDirectory() && atarget.getLastModified()", "-                        logTo.log(source[counter].getName() + \" added as \" ", "+                        logTo.log(source[counter].getName() + \" added as \"", "-                    logTo.log(source[counter].getName() ", "+                    logTo.log(source[counter].getName()", "-                logTo.log(source[counter].getName() ", "+                logTo.log(source[counter].getName()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ebed87aff1c1ae878c3092fd5f57e2a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/ReplaceTokens.java", "commitBeforeChange": "ca4d619112299ab28dd289a2e0e407ddebc6340c", "commitAfterChange": "6e88f92ead6a5f67935055661a9e8041f5ed8bae", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private void initialize()", "signatureAfterChange": "     private void initialize()", "diff": ["-            for (int i = 0; i < params.length; i++) {", "-                if (params[i] != null) {", "-                    final String type = params[i].getType();", "+            for (Parameter param : params) {", "+                if (param != null) {", "+                    final String type = param.getType();", "-                        final String name = params[i].getName();", "-                        String value = params[i].getValue();", "+                        final String name = param.getName();", "-                            if (value.length() == 0) {", "-                                throw new BuildException(\"Begin token cannot \"", "-                                    + \"be empty\");", "-                            }", "-                            beginToken = params[i].getValue().charAt(0);", "+                            beginToken = param.getValue();", "-                            if (value.length() == 0) {", "-                                throw new BuildException(\"End token cannot \"", "-                                    + \"be empty\");", "-                            }", "-                            endToken = params[i].getValue().charAt(0);", "+                            endToken = param.getValue();", "-                        final String name = params[i].getName();", "-                        final String value = params[i].getValue();", "+                        final String name = param.getName();", "+                        final String value = param.getValue();", "-                            new FileResource(new File(params[i].getValue())));", "+                                new FileResource(new File(param.getValue())));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ebf64d9e3edbcf1c40e72bef1d52626", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipEntry.java", "commitBeforeChange": "aa43e37a025cdf54b8914b8283e57419a253ed59", "commitAfterChange": "dee95e3acc5154aee03ff5f91f9a56426ae79f3f", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 43, "signatureBeforeChange": "     public boolean equals(Object o)", "signatureAfterChange": "     @Override     public boolean equals(Object obj)", "diff": ["-    public boolean equals(Object o) {", "-        return (this == o);", "+     */", "+    @Override", "+    public boolean equals(Object obj) {", "+        if (this == obj) {", "+            return true;", "+        }", "+        if (obj == null || getClass() != obj.getClass()) {", "+            return false;", "+        }", "+        ZipEntry other = (ZipEntry) obj;", "+        String myName = getName();", "+        String otherName = other.getName();", "+        if (myName == null) {", "+            if (otherName != null) {", "+                return false;", "+            }", "+        } else if (!myName.equals(otherName)) {", "+            return false;", "+        }", "+        String myComment = getComment();", "+        String otherComment = other.getComment();", "+        if (myComment == null) {", "+            myComment = \"\";", "+        }", "+        if (otherComment == null) {", "+            otherComment = \"\";", "+        }", "+        return getTime() == other.getTime()", "+            && myComment.equals(otherComment)", "+            && getInternalAttributes() == other.getInternalAttributes()", "+            && getPlatform() == other.getPlatform()", "+            && getExternalAttributes() == other.getExternalAttributes()", "+            && getMethod() == other.getMethod()", "+            && getSize() == other.getSize()", "+            && getCrc() == other.getCrc()", "+            && getCompressedSize() == other.getCompressedSize()", "+            && Arrays.equals(getCentralDirectoryExtra(),", "+                             other.getCentralDirectoryExtra())", "+            && Arrays.equals(getLocalFileDataExtra(),", "+                             other.getLocalFileDataExtra())", "+            && gpb.equals(other.gpb);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6232a5911255919d5fb8833df89b24c9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/ScpToMessageBySftp.java", "commitBeforeChange": "9ffa99a029f6a0d02374c8705d2db32b23731779", "commitAfterChange": "fd126ea83074cffca634b5e6ef2ae80844ff7695", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      private void doMultipleTransfer() throws IOException, JSchException", "signatureAfterChange": "      private void doMultipleTransfer() throws IOException, JSchException", "diff": ["+                try {", "+                    channel.stat(remotePath);", "+                } catch (SftpException e) {", "+                    if (e.id == ChannelSftp.SSH_FX_NO_SUCH_FILE) {", "+                        // dir does not exist.", "+                        channel.mkdir(remotePath);", "+                    } else {", "+                        throw new JSchException(\"failed to access remote dir '\"", "+                                                + remotePath + \"'\", e);", "+                    }", "+                }", "-                JSchException schException = new JSchException(\"Could not CD to '\" + remotePath + \"' - \" + e.toString());", "-                schException.initCause(e);", "-                throw schException;", "+                throw new JSchException(\"Could not CD to '\" + remotePath", "+                                        + \"' - \" + e.toString(), e);", "+            Directory current = null;", "-                    Directory current = (Directory) i.next();", "-                    if(getVerbose()) {", "+                    current = (Directory) i.next();", "+                    if (getVerbose()) {", "-                JSchException schException = new JSchException(e.toString());", "-                schException.initCause(e);", "-                throw schException;", "+                String msg = \"Error sending directory\";", "+                if (current != null && current.getDirectory() != null) {", "+                    msg += \" '\" + current.getDirectory().getName() + \"'\";", "+                }", "+                throw new JSchException(msg, e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d61838e9240acb8f1dc75d0e82f2702", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ManifestTask.java", "commitBeforeChange": "4462d806089e69c25b2a09fa31060915d3fef1da", "commitAfterChange": "b8bdf2149a8b9c12a3d97f5598bfa660b25950ba", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private void checkAttribute(Manifest.Attribute attribute) throws ManifestException", "signatureAfterChange": "     private void checkAttribute(Manifest.Attribute attribute) throws ManifestException", "diff": ["+     */", "-        /*", "-         * Jar-Specification \"Name-Value pairs and Sections\":", "-         *   name:       alphanum *headerchar ", "-         *   alphanum:   {A-Z} | {a-z} | {0-9} ", "-         *   headerchar: alphanum | - | _", "-         * ", "-         * So the resulting regexp would be [A-Za-z0-9][A-Za-z0-9-_]*", "-         */", "-        String namePattern = \"[A-Za-z0-9][A-Za-z0-9-_]*\";", "-", "+        char ch = name.charAt(0);", "-        /* FIXME Does not work for me :-( ", "-        RegexpMatcherFactory factory = new RegexpMatcherFactory();", "-        RegexpMatcher regexpMatcher = factory.newRegexpMatcher(getProject());", "-        regexpMatcher.setPattern(namePattern);", "-        if (!regexpMatcher.matches(name)) {", "-            throw new ManifestException(", "-                  \"Attribute name is not valid according to the specification. \"", "-                + \"(which means regexp: \" + namePattern + \")\" ", "-            );", "+        if (ch == '-' || ch == '_') {", "+            throw new ManifestException(\"Manifest attribute names must not contain '\" + ch + \"'\");", "-        */", "-        /* Works, but not JDK 1.2 compliant ", "-        if (!name.matches(namePattern)) {", "-            throw new ManifestException(\"Attribute name is not valid according to the specification.\");", "+        for (int i = 0; i < name.length(); i++) {", "+            ch = name.charAt(i);", "+            if (VALID_ATTRIBUTE_CHARS.indexOf(ch) < 0) {", "+                throw new ManifestException(\"Manifest attribute names must not contain '\" + ch + \"'\");", "+            }", "-        */", "-        /* */", "-        if (attribute.getName().indexOf(' ') >- 1) {", "-            throw new ManifestException(\"Manifest attribute name must not contain spaces.\");", "-        }", "-        /* */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94dc14c4610b9155ca3518445ef9351d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Available.java", "commitBeforeChange": "3f37290d4ae3797033fd3dc89cada6b329753eff", "commitAfterChange": "cad841b38aec395f91809031598a293237bc8665", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      private boolean checkFile()", "signatureAfterChange": "      private boolean checkFile()", "diff": ["-                log(\"Searching \" + paths[i], Project.MSG_VERBOSE);", "-                if(new File(paths[i], file.getName()).isFile()) {", "-                    return true;", "+                log(\"Searching \" + paths[i], Project.MSG_DEBUG);", "+                File filename = new File(paths[i]);", "+                if (type != null) {", "+                    if (type.equalsIgnoreCase(\"dir\")) {", "+                        String dir = filename.getParent();", "+                        if(dir != null) {", "+                            int index = dir.lastIndexOf(File.separator);", "+                            String dirname = dir.substring(index + 1);", "+                            if(dirname.equals(file.getName())) {", "+                                log(\"Found directory: \" + dir, Project.MSG_VERBOSE);", "+                                return true;", "+                            }", "+                        }", "+                    } else if (type.equalsIgnoreCase(\"file\")) {", "+                        if(filename.isFile()) {", "+                            if(filename.getName().equals(file.getName())) {", "+                                log(\"Found file: \" + filename, Project.MSG_VERBOSE);", "+                                return true;", "+                            }", "+                        }", "+                    }", "+                } else if(filename.isFile()) {", "+                    if(filename.getName().equals(file.getName())) {", "+                        log(\"Found file: \" + filename, Project.MSG_VERBOSE);", "+                        return true;", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95e1757a82fa80fcd1b9080ebb46173e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Project.java", "commitBeforeChange": "9d009f659f2d444ff28c16ec9636cb3062760bac", "commitAfterChange": "284174e86e92dbaeb24202065bcc92157100989d", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "     public void executeTargets(Vector targetNames) throws BuildException", "signatureAfterChange": "     public void executeTargets(Vector targetNames) throws BuildException", "diff": ["-        BuildException thrownException = null;", "-        for (int i = 0; i < targetNames.size(); i++) {", "+        Object o = getReference(\"ant.executor\");", "+        if (o == null) {", "+            String classname = getProperty(\"ant.executor.class\");", "+            if (classname == null) {", "+                classname = (keepGoingMode)", "+                    ? KeepGoingExecutor.class.getName()", "+                    : DefaultExecutor.class.getName();", "+            }", "+            log(\"Attempting to create object of type \" + classname, MSG_DEBUG);", "-                executeTarget((String) targetNames.elementAt(i));", "-            } catch (BuildException ex) {", "-                if (!(keepGoingMode)) {", "-                    throw ex; // Throw further", "+                o = Class.forName(classname, true, coreLoader).newInstance();", "+            } catch (ClassNotFoundException seaEnEfEx) {", "+                //try the current classloader", "+                try {", "+                    o = Class.forName(classname).newInstance();", "+                } catch (Exception ex) {", "+                    log(ex.toString(), MSG_ERR);", "-                thrownException = ex;", "+            } catch (Exception ex) {", "+                log(ex.toString(), MSG_ERR);", "+            }", "+            if (o != null) {", "+                addReference(\"ant.executor\", o);", "-        if (thrownException != null) {", "-            throw thrownException;", "+", "+        if (o == null) {", "+            throw new BuildException(\"Unable to obtain a Target Executor instance.\");", "+        } else {", "+            String[] targetNameArray = (String[])(targetNames.toArray(", "+                new String[targetNames.size()]));", "+            ((Executor)o).executeTargets(this, targetNameArray);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfd8b4238b34eaed0dfc9d81bf3f072e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "d25488cbbb28cf25e1f91f714c70999fd105432d", "commitAfterChange": "3d706ab8188a674936880b6f4530b0cf3991758b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     private IntrospectionHelper(final Class bean)", "signatureAfterChange": "     private IntrospectionHelper(final Class<?> bean)", "diff": ["-    private IntrospectionHelper(final Class bean) {", "+    private IntrospectionHelper(final Class<?> bean) {", "-            Class returnType = m.getReturnType();", "-            Class[] args = m.getParameterTypes();", "+            Class<?> returnType = m.getReturnType();", "+            Class<?>[] args = m.getParameterTypes();", "-                    Constructor constructor = null;", "+                    Constructor<?> constructor = null;", "-                        constructor = args[0].getConstructor(new Class[] {});", "+                        constructor = args[0].getConstructor();", "-                        constructor = args[0].getConstructor(new Class[] {Project.class});", "+                        constructor = args[0].getConstructor(Project.class);", "-                    Constructor constructor = null;", "+                    Constructor<?> constructor = null;", "-                        constructor = args[0].getConstructor(new Class[] {});", "+                        constructor = args[0].getConstructor();", "-                        constructor = args[0].getConstructor(new Class[] {Project.class});", "+                        constructor = args[0].getConstructor(Project.class);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d33eb192693a14117abf95a6893d86cc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/filterreaders/src/main/org/apache/tools/ant/filters/ReplaceTokens.java", "commitBeforeChange": "7b8d582ad0c4a47e17fbb73773788608fddef0a0", "commitAfterChange": "87f806d3e4aba137d933f31a902197a19f96b7c4", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private final void initialize()", "signatureAfterChange": "     private final void initialize()", "diff": ["-        if (parameters != null) {", "-            for (int i = 0; i < parameters.length; i++) {", "-                if (parameters[i] != null) {", "-                    final String type = parameters[i].getType();", "+        Parameter[] params = getParameters();", "+        if (params != null) {", "+            for (int i = 0; i < params.length; i++) {", "+                if (params[i] != null) {", "+                    final String type = params[i].getType();", "-                        final String name = parameters[i].getName();", "+                        final String name = params[i].getName();", "-                            beginToken = parameters[i].getValue().charAt(0);", "+                            beginToken = params[i].getValue().charAt(0);", "-                            endToken = parameters[i].getValue().charAt(0);", "+                            endToken = params[i].getValue().charAt(0);", "-                        final String name = parameters[i].getName();", "-                        final String value = parameters[i].getValue();", "+                        final String name = params[i].getName();", "+                        final String value = params[i].getValue();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db196a7e0835480362dc60c0a42c214d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "2a816a5361ec39c8693a6a4bbac559ffe5948c6e", "commitAfterChange": "f2d32ac66d804c5dfeb14adcfa0ab31ff8f648e8", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 95, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+            ", "+            // If an initial command was configured then send it.", "+            // Some FTP servers offer different modes of operation,", "+            // E.G. switching between a UNIX file system mode and", "+            // a legacy file system.", "+            if (this.initialSiteCommand != null) {", "+                RetryHandler h = new RetryHandler(this.retriesAllowed, this);", "+                final FTPClient lftp = ftp;", "+                executeRetryable(h, new Retryable() {", "+                    public void execute() throws IOException {", "+                        doSiteCommand(lftp, FTP.this.initialSiteCommand);", "+                    }", "+                }, \"initial site command: \"+ this.initialSiteCommand);", "+            }", "+", "-                doSiteCommand(ftp, \"umask \" + umask);", "+                RetryHandler h = new RetryHandler(this.retriesAllowed, this);", "+                final FTPClient lftp = ftp;", "+                executeRetryable(h, new Retryable() {", "+                    public void execute() throws IOException {", "+                        doSiteCommand(lftp, \"umask \" + umask);", "+                    }", "+                }, \"umask \" + umask);", "+            } else if (action == SITE_CMD) {", "+                    RetryHandler h = new RetryHandler(this.retriesAllowed, this);", "+                    final FTPClient lftp = ftp;", "+                    executeRetryable(h, new Retryable() {", "+                        public void execute() throws IOException {", "+                            doSiteCommand(lftp, FTP.this.siteCommand);", "+                        }", "+                    }, \"Site Command: \" + this.siteCommand);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dce970a1a8651ed15601720ab7b036dc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java", "commitBeforeChange": "9016f410697a0d613609a17549fdb69a482caaab", "commitAfterChange": "40e298139fafbe0b8a5694c0175d6e43b254acf8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     protected Commandline setupModernJavacCommandlineSwitches(Commandline cmd)", "signatureAfterChange": "     protected Commandline setupModernJavacCommandlineSwitches(Commandline cmd)", "diff": ["-                // added with JDK 1.4.2 - and isn't present in 1.5.0", "-                // or 1.6.0 either", "+                // added with JDK 1.4.2 - and isn't present in 1.5.0+", "-        } else if ((assumeJava15() || assumeJava16())", "+        } else if ((assumeJava15() || assumeJava16() || assumeJava17())", "-                attributes.log(\"\", Project.MSG_WARN);", "-                attributes.log(\"          WARNING\", Project.MSG_WARN);", "-                attributes.log(\"\", Project.MSG_WARN);", "-                attributes.log(\"The -source switch defaults to 1.5 in JDK 1.5 and 1.6.\",", "-                               Project.MSG_WARN);", "-                attributes.log(\"If you specify -target \" + t", "-                               + \" you now must also specify -source \" + s", "-                               + \".\", Project.MSG_WARN);", "-                attributes.log(\"Ant will implicitly add -source \" + s", "-                               + \" for you.  Please change your build file.\",", "-                               Project.MSG_WARN);", "-                cmd.createArgument().setValue(\"-source\");", "-                cmd.createArgument().setValue(s);", "+                setImplicitSourceSwitch((assumeJava15() || assumeJava16())", "+                                        ? \"1.5 in JDK 1.5 and 1.6\"", "+                                        : \"1.7 in JDK 1.7\",", "+                                        cmd, s, t);", "+            } else if (assumeJava17() && (t.equals(\"1.5\") || t.equals(\"1.6\"))) {", "+                setImplicitSourceSwitch(\"1.7 in JDK 1.7\", cmd, t, t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e05a13d5df4a496ef0ce09d0d833ea3c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/Frame.java", "commitBeforeChange": "83dc385bd01fbc8ee2fb166b9a5605bdc6958d76", "commitAfterChange": "bf844382c856f7b51c56024189c93f11d34cb720", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     protected void executeTasks(Iterator taskIterator)          throws ExecutionException", "signatureAfterChange": "     protected void executeTasks(Iterator taskIterator)          throws ExecutionException", "diff": ["-            Throwable failureCause = null;", "-            ImportInfo importInfo", "-                 = componentManager.getDefinition(model.getType());", "-            if (importInfo == null) {", "-                throw new ExecutionException(\"There is no definition for the <\"", "-                     + model.getType() + \"> element\", model.getLocation());", "-            }", "-", "-                if (importInfo.getDefinitionType() == AntLibrary.TASKDEF) {", "-                    TaskContext taskContext = configureTask(model);", "-                    eventSupport.fireTaskStarted(model);", "-", "-                    ClassLoader currentLoader", "-                         = setContextLoader(taskContext.getLoader());", "-                    taskContext.execute();", "-                    setContextLoader(currentLoader);", "-                    taskContext.destroy();", "+                Object component = componentManager.createComponent(model);", "+                if (component instanceof Task) {", "+                    execService.executeTask((Task)component);", "-                    // typedef", "-                    String typeId = model.getAspectValue(ANT_ASPECT, \"id\");", "-                    Object typeInstance = configureType(model.getType(), model);", "+                    String typeId ", "+                        = model.getAspectValue(Constants.ANT_ASPECT, \"id\");", "-                        setDataValue(typeId, typeInstance, true);", "+                        setDataValue(typeId, component, true);", "-                failureCause = e;", "-                failureCause = ee;", "-            } finally {", "-                eventSupport.fireTaskFinished(model, failureCause);"]}]}
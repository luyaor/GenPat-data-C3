{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "98535504cba60000e342a2c4cebfb4fd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cabe3125aa8c4745585f658fb3a2cfc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "0c132498a8026db624c2fcf7026538c52e47b312", "commitAfterChange": "4004834c04e0eec8f0f698435b0c5983751fb593", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "     private File findFile(File base, Vector pathElements)", "signatureAfterChange": "     private File findFile(File base, Vector pathElements)", "diff": ["-        } else {", "-            if (!base.isDirectory()) {", "-                return null;", "-            }", "-            String[] files = list(base);", "-            if (files == null) {", "-                throw new BuildException(\"IO error scanning directory \"", "-                                         + base.getAbsolutePath());", "-            }", "-            String current = (String) pathElements.remove(0);", "-            for (int i = 0; i < files.length; i++) {", "-                if (files[i].equals(current)) {", "-                    base = new File(base, files[i]);", "-                    return findFile(base, pathElements);", "-                }", "+        }", "+        if (!base.isDirectory()) {", "+            return null;", "+        }", "+        String[] files = list(base);", "+        if (files == null) {", "+            throw new BuildException(\"IO error scanning directory \"", "+                                     + base.getAbsolutePath());", "+        }", "+        String current = (String) pathElements.remove(0);", "+        for (int i = 0; i < files.length; i++) {", "+            if (files[i].equals(current)) {", "+                base = new File(base, files[i]);", "+                return findFile(base, pathElements);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89e73ce2c17e99b325d665ca7d5019a3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ANTLR.java", "commitBeforeChange": "0d470a57301439a5e5ba2a3cd4f7740f797c0aa9", "commitAfterChange": "488529801c60c755eba1f76182b314c7f4b99541", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-", "-            if (fork) {", "-                log(\"Forking \" + commandline.toString(), Project.MSG_VERBOSE);", "-                int err = run(commandline.getCommandline());", "-                if (err == 1) {", "-                    throw new BuildException(\"ANTLR returned: \"+err, location);", "-                }", "-            } else {", "-                ExecuteJava exe = new ExecuteJava();", "-                exe.setJavaCommand(commandline.getJavaCommand());", "-                exe.setClasspath(commandline.getClasspath());", "-                try {", "-                    exe.execute(project);", "-                } catch (ExitException e){", "-                    if ( e.getStatus() != 0 ){", "-                        throw new BuildException(\"ANTLR returned: \" + e.getStatus(), location);", "-                    }", "-                }", "+            log(\"Forking \" + commandline.toString(), Project.MSG_VERBOSE);", "+            int err = run(commandline.getCommandline());", "+            if (err == 1) {", "+                throw new BuildException(\"ANTLR returned: \"+err, location);", "+        } else {", "+            log(\"Skipped grammar file. Generated file is newer.\", Project.MSG_VERBOSE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d15ba080a16e31ddb6ef986427c8c4a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Sync.java", "commitBeforeChange": "32365ed4e0db6ddef7498334a9ca574df66e6726", "commitAfterChange": "b1186f08a39d23367aefcabd37ef446d36a0afb1", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "          protected void buildMap(File fromDir, File toDir, String[] names,                                 FileNameMapper mapper, Hashtable map)", "signatureAfterChange": "          protected void scan(File fromDir, File toDir, String[] files,                             String[] dirs)", "diff": ["-        protected void buildMap(File fromDir, File toDir, String[] names,", "-                                FileNameMapper mapper, Hashtable map) {", "-            assertTrue(\"No mapper\", mapper instanceof IdentityMapper);", "+        protected void scan(File fromDir, File toDir, String[] files,", "+                            String[] dirs) {", "+            assertTrue(\"No mapper\", mapperElement == null);", "-            super.buildMap(fromDir, toDir, names, mapper, map);", "+            super.scan(fromDir, toDir, files, dirs);", "-            for (int i = 0; i < names.length; ++i) {", "-                String name = names[i];", "-                File dest = new File(toDir, name);", "-                // No need to instantiate the src file, as we use the", "-                // table as a set (to remain Java 1.1 compatible!!!).", "-                //File src = new File(fromDir, name);", "-                //_dest2src.put(dest, src);", "-                _dest2src.put(dest, fromDir);", "+            for (int i = 0; i < files.length; ++i) {", "+                nonOrphans.add(files[i]);", "+            }", "+            for (int i = 0; i < dirs.length; ++i) {", "+                nonOrphans.add(dirs[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b56b6d01c7b8085f33598b2b20c35a71", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/JonasDeploymentTool.java", "commitBeforeChange": "270394a09fddda0ea9ffa2330956c5f399ab840f", "commitAfterChange": "6bd8d6e938a45868902ecd1092858e8372933c7c", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 26, "signatureBeforeChange": "     private void addAllFiles(final File anOutputDir, String aCurrentDirOrFile, Hashtable someFiles)", "signatureAfterChange": "     private void addAllFiles(File file, String rootDir, Hashtable hashtable)", "diff": ["-     */", "-    private void addAllFiles(final File anOutputDir, String aCurrentDirOrFile, Hashtable someFiles) {", "-        File aFile = new File(anOutputDir, aCurrentDirOrFile);", "-        if (aFile.isDirectory()) {", "-            String aCurrentDir = \"\";", "-            if (aCurrentDirOrFile.length() > 0) {", "-                aCurrentDir = aCurrentDirOrFile + '/';", "-            }", "-            File theFiles[] = aFile.listFiles();", "-            for (int i = 0; i < theFiles.length; i++) {", "-                addAllFiles(anOutputDir, aCurrentDir + theFiles[i].getName(), someFiles);", "-            }", "-        } else {", "-            // is a file", "-            someFiles.put(aCurrentDirOrFile, aFile);", "-        }", "+    private void addAllFiles(File file, String rootDir, Hashtable hashtable) {", "+        if ( !file.exists() ) {", "+\t    throw new IllegalArgumentException();", "+\t}", "+\t", "+\tString newRootDir;", "+        if ( file.isDirectory() ) {", "+\t    File files[] = file.listFiles();\t", "+\t    for (int i = 0; i < files.length; i++) {", "+\t\tif ( rootDir.length() > 0 ) {", "+\t\t    newRootDir = rootDir + File.separator + files[i].getName();", "+\t\t} else {", "+\t\t    newRootDir = files[i].getName();\t\t     ", "+\t\t}", "+\t\taddAllFiles(files[i], newRootDir, hashtable);", "+\t    }", "+        } else {", "+            hashtable.put(rootDir, file);"]}]}
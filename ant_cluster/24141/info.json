{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a0f0d4dfc03e6178ae11da69050955d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89863f68441ac81d6b4e270954ba9da7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/tar/TarOutputStream.java", "commitBeforeChange": "23bbf085727756cfbad92aaa345e10c7370d3486", "commitAfterChange": "75110026aa35fe98da6c696598361977c3c46c48", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException", "signatureAfterChange": "     public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException", "diff": ["-        if ((this.currBytes + numToWrite) > this.currSize) {", "+        if ((currBytes + numToWrite) > currSize) {", "-                                  + this.currSize + \"' bytes for entry '\"", "+                                  + currSize + \"' bytes for entry '\"", "-        if (this.assemLen > 0) {", "-            if ((this.assemLen + numToWrite) >= this.recordBuf.length) {", "-                int aLen = this.recordBuf.length - this.assemLen;", "+        if (assemLen > 0) {", "+            if ((assemLen + numToWrite) >= recordBuf.length) {", "+                int aLen = recordBuf.length - assemLen;", "-                System.arraycopy(this.assemBuf, 0, this.recordBuf, 0,", "-                                 this.assemLen);", "-                System.arraycopy(wBuf, wOffset, this.recordBuf,", "-                                 this.assemLen, aLen);", "-                this.buffer.writeRecord(this.recordBuf);", "+                System.arraycopy(assemBuf, 0, recordBuf, 0,", "+                                 assemLen);", "+                System.arraycopy(wBuf, wOffset, recordBuf,", "+                                 assemLen, aLen);", "+                buffer.writeRecord(recordBuf);", "-                this.currBytes += this.recordBuf.length;", "+                currBytes += recordBuf.length;", "-                this.assemLen = 0;", "+                assemLen = 0;", "-                System.arraycopy(wBuf, wOffset, this.assemBuf, this.assemLen,", "+                System.arraycopy(wBuf, wOffset, assemBuf, assemLen,", "-                this.assemLen += numToWrite;", "+                assemLen += numToWrite;", "-            if (numToWrite < this.recordBuf.length) {", "-                System.arraycopy(wBuf, wOffset, this.assemBuf, this.assemLen,", "+            if (numToWrite < recordBuf.length) {", "+                System.arraycopy(wBuf, wOffset, assemBuf, assemLen,", "-                this.assemLen += numToWrite;", "+                assemLen += numToWrite;", "-            this.buffer.writeRecord(wBuf, wOffset);", "+            buffer.writeRecord(wBuf, wOffset);", "-            int num = this.recordBuf.length;", "+            int num = recordBuf.length;", "-            this.currBytes += num;", "+            currBytes += num;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eda1fb9d8c8bcca81320260731707efd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/tar/TarInputStream.java", "commitBeforeChange": "23bbf085727756cfbad92aaa345e10c7370d3486", "commitAfterChange": "75110026aa35fe98da6c696598361977c3c46c48", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public TarEntry getNextEntry() throws IOException", "signatureAfterChange": "     public TarEntry getNextEntry() throws IOException", "diff": ["-        if (this.hasHitEOF) {", "+        if (hasHitEOF) {", "-        if (this.currEntry != null) {", "-            long numToSkip = this.entrySize - this.entryOffset;", "+        if (currEntry != null) {", "+            long numToSkip = entrySize - entryOffset;", "-            if (this.debug) {", "+            if (debug) {", "-                        + this.currEntry.getName() + \"' SZ \"", "-                        + this.entrySize + \" OFF \"", "-                        + this.entryOffset + \"  skipping \"", "+                        + currEntry.getName() + \"' SZ \"", "+                        + entrySize + \" OFF \"", "+                        + entryOffset + \"  skipping \"", "-                this.skip(numToSkip);", "+                skip(numToSkip);", "-            this.readBuf = null;", "+            readBuf = null;", "-        byte[] headerBuf = this.buffer.readRecord();", "+        byte[] headerBuf = buffer.readRecord();", "-            if (this.debug) {", "+            if (debug) {", "-            this.hasHitEOF = true;", "-        } else if (this.buffer.isEOFRecord(headerBuf)) {", "-            if (this.debug) {", "+            hasHitEOF = true;", "+        } else if (buffer.isEOFRecord(headerBuf)) {", "+            if (debug) {", "-            this.hasHitEOF = true;", "+            hasHitEOF = true;", "-        if (this.hasHitEOF) {", "-            this.currEntry = null;", "+        if (hasHitEOF) {", "+            currEntry = null;", "-            this.currEntry = new TarEntry(headerBuf);", "+            currEntry = new TarEntry(headerBuf);", "-            if (this.debug) {", "+            if (debug) {", "-                        + this.currEntry.getName()", "+                        + currEntry.getName()", "-                        + this.currEntry.getSize());", "+                        + currEntry.getSize());", "-            this.entryOffset = 0;", "+            entryOffset = 0;", "-            this.entrySize = this.currEntry.getSize();", "+            entrySize = currEntry.getSize();", "-        if (this.currEntry != null && this.currEntry.isGNULongNameEntry()) {", "+        if (currEntry != null && currEntry.isGNULongNameEntry()) {", "-            if (this.currEntry == null) {", "+            if (currEntry == null) {", "-            this.currEntry.setName(longName.toString());", "+            currEntry.setName(longName.toString());", "-        return this.currEntry;", "+        return currEntry;"]}]}
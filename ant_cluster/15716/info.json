{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d653b382f580e7a7da09d989e834a48", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "711c1e2678c6f7b56f54f6a2f858fb31", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "43f3df1bca1b297ad7db39237ae8978c0ceee182", "commitAfterChange": "c35f045b9055bb478a9ccdb8189af883adce0ee8", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        // make sure we don't have an illegal set of options", "-        validateAttributes();", "+        // make sure we don't have an illegal set of options", "+            try {", "+        validateAttributes();", "+            } catch (BuildException e) {", "+                if (failonerror", "+                    || !getMessage(e)", "+                    .equals(MSG_WHEN_COPYING_EMPTY_RC_TO_FILE)) {", "+                    throw e;", "+                } else {", "+                    log(\"Warning: \" + getMessage(e), Project.MSG_ERR);", "+                    return;", "+                }", "+            }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87a00cc9cbdbbbb26554d45e03ae2203", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "37ed344b385cde54ee62f2e66d347cb243dd6708", "commitAfterChange": "33107ab10098823c23924741100a6c3faf9fd267", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 20, "signatureBeforeChange": "     protected void execSQL(String sql) throws SQLException", "signatureAfterChange": "     protected void execSQL(String sql) throws SQLException", "diff": ["-        if (!statement.execute(sql)) {", "-            log(statement.getUpdateCount()+\" rows affected\", ", "-                Project.MSG_VERBOSE);", "+        try {  ", "+            totalSql++;", "+            if (!statement.execute(sql)) {", "+                log(statement.getUpdateCount()+\" rows affected\", ", "+                    Project.MSG_VERBOSE);", "+            }", "+            ", "+            if (print) {", "+                printResults();", "+            }", "+            ", "+            SQLWarning warning = conn.getWarnings();", "+            while(warning!=null){", "+                log(warning + \" sql warning\", Project.MSG_VERBOSE);", "+                warning=warning.getNextWarning();", "+            }", "+            conn.clearWarnings();", "+            goodSql++;", "-", "-        if (print) {", "-            printResults();", "+        catch (SQLException e) {", "+            log(\"Failed to execute: \" + sql, Project.MSG_ERR);", "+            if (!onError.equals(\"continue\")) throw e;", "+            log(e.toString(), Project.MSG_ERR);", "-", "-        SQLWarning warning = conn.getWarnings();", "-        while(warning!=null){", "-            log(warning + \" sql warning\", Project.MSG_VERBOSE);", "-            warning=warning.getNextWarning();", "-        }", "-        conn.clearWarnings();"]}]}
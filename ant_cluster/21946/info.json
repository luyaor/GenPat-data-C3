{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "626e84bb9858b23438db566ad1b88eb3", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00a8145191f45e088e356c88314f360c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2InputStream.java", "commitBeforeChange": "3477bbf6474cdd2b70b12eb638e64415a4f1c2ec", "commitAfterChange": "134d95afef9b42cf08f2eccb077b97525ac38034", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 14, "signatureBeforeChange": "      private int bsGetint()", "signatureAfterChange": "      private int bsGetInt() throws IOException", "diff": ["-    private int bsGetint() {", "-        int u = 0;", "-        u = (u << 8) | bsR(8);", "-        u = (u << 8) | bsR(8);", "-        u = (u << 8) | bsR(8);", "-        u = (u << 8) | bsR(8);", "-        return u;", "+    private int bsGetInt() throws IOException {", "+        return (((((bsR(8) << 8) | bsR(8)) << 8) | bsR(8)) << 8) | bsR(8);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc13fe7d590bb788e3c9878dccfa3fb9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/cvslib/RedirectingStreamHandler.java", "commitBeforeChange": "5b95034bfc65304cba6fcabf40141d731165cf33", "commitAfterChange": "0e481b8463a698cc76b183b097eaa08db32fa6e4", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void run()", "signatureAfterChange": "       public void stop()", "diff": ["+    public void stop() ", "-     */", "-    public void run()", "-    {", "-        // Read the error stream so that it does not block !", "-        // We cannot use a BufferedReader as the ready() method is bugged!", "-        // (see Bug 4329985, which is supposed to be fixed in JDK1.4 :", "-        //http://developer.java.sun.com/developer/bugParade/bugs/4329985.html)", "+        super.stop();", "-            while( m_error.ready() )", "-            {", "-                final int value = m_error.read();", "-                if( -1 != value )", "-                {", "-                    m_errors.append( (char)value );", "-                }", "-            }", "-        }", "-        catch( final IOException ioe )", "+            getErr().close();", "+            getOut().close();", "+        } ", "+        catch( final IOException e )", "-            //ignore --> Means stderror has been shutdown", "+            // plain impossible", "+            throw new BuildException( e );", "-    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bc674dbdc5564e64b26be8675d3c3f52", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d98d1c518ee49b8baf0f9ad763b5bd8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/util/LayoutPreservingPropertiesTest.java", "commitBeforeChange": "75704aff0122e03f5bcd7a543c26ca4421332645", "commitAfterChange": "0fccd329c1708c897df58685de0d5eea8cce801c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void testEscaping() throws Exception", "signatureAfterChange": "     public void testEscaping() throws Exception", "diff": ["-        ", "+", "-        ", "+", "-        ", "+", "-        ", "-        assertTrue(s.indexOf(\"\\\\ prop\\\\ one\\\\ =\\\\ \\\\ leading and trailing spaces \") > -1);", "+", "+        assertTrue(s.indexOf(\"\\\\ prop\\\\ one\\\\ =\\\\ \\\\ leading and trailing\"", "+                             + \" spaces \") > -1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d67dc25a553c3fb321ea50a0559f6ee", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "4783bc46159826bc33858cfc9145c4be93dfe755", "commitAfterChange": "2a291dca9249d6a4958d9898282fa67343bf59b7", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     public void spawn() throws IOException", "signatureAfterChange": "     public void spawn() throws IOException", "diff": ["-                project.log(\"interruption in the sleep after having spawned a process\",", "-                    Project.MSG_VERBOSE);", "+                project.log(\"interruption in the sleep after having spawned a\"", "+                            + \" process\", Project.MSG_VERBOSE);", "-        project.log(\"spawned process \" + process.toString(), Project.MSG_VERBOSE);", "+        project.log(\"spawned process \" + process.toString(),", "+                    Project.MSG_VERBOSE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a02cd90a496e48b85657b54f8fe3f069", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/WebsphereDeploymentTool.java", "commitBeforeChange": "3a35c7d914d8b5a1f203561ae6f89afb5d2b80ec", "commitAfterChange": "24eb5693d6b7363262ea941cac63d15230aa1aab", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "     protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile)", "signatureAfterChange": "     protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile)", "diff": ["-            log(\"Checking if websphere Jar needs to be rebuilt for jar \" + websphereJarFile.getName(),", "-                Project.MSG_VERBOSE);", "+            log(\"Checking if websphere Jar needs to be rebuilt for jar \"", "+                + websphereJarFile.getName(), Project.MSG_VERBOSE);", "-                        if ((genericEntry.getCrc() != wasEntry.getCrc()) ||", "-                            (genericEntry.getSize() != wasEntry.getSize())) {", "+                        if ((genericEntry.getCrc() != wasEntry.getCrc())", "+                            || (genericEntry.getSize() != wasEntry.getSize())) {", "-                                String classname = genericEntry.getName().replace(File.separatorChar, '.');", "+                                String classname", "+                                    = genericEntry.getName().replace(File.separatorChar, '.');", "-                                    log(\"Interface \" + genclass.getName() + \" has changed\", Project.MSG_VERBOSE);", "+                                    log(\"Interface \" + genclass.getName()", "+                                        + \" has changed\", Project.MSG_VERBOSE);", "-                                    log(\"Non class file \" + genericEntry.getName() + \" has changed\", Project.MSG_VERBOSE);", "+                                    log(\"Non class file \" + genericEntry.getName()", "+                                        + \" has changed\", Project.MSG_VERBOSE);", "-                        log(\"File \" + filepath + \" not present in websphere jar\", Project.MSG_VERBOSE);", "+                        log(\"File \" + filepath + \" not present in websphere jar\",", "+                            Project.MSG_VERBOSE);", "-                        if (je.getCompressedSize() == -1 ||", "-                            je.getCompressedSize() == je.getSize()) {", "+                        if (je.getCompressedSize() == -1", "+                            || je.getCompressedSize() == je.getSize()) {", "-                    log(\"websphere Jar rebuild needed due to changed interface or XML\", Project.MSG_VERBOSE);", "+                    log(\"websphere Jar rebuild needed due to changed \"", "+                        + \"interface or XML\", Project.MSG_VERBOSE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9faa176c4de4588c20b1a1be1bebb9e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/dotnet/Ilasm.java", "commitBeforeChange": "1f71acf427e164e75bc4f90b1ddaecd51998709b", "commitAfterChange": "00ec1c435af8d15b42cb779373026ceedea92e59", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void setOwner(String s)", "signatureAfterChange": "     public void setOwner(String s)", "diff": ["-        log(\"This option is not supported by ILASM as of Beta-2, and will be ignored\", Project.MSG_WARN);", "+        log(\"This option is not supported by ILASM as of Beta-2, \"", "+            + \"and will be ignored\", Project.MSG_WARN);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbd7080aeb48a0b41ebe40083009a5fe", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java", "commitBeforeChange": "d60b6ca1eea0a3372c99965f3c15466328659908", "commitAfterChange": "c6c232893c39257745a8f7a618bcdb5c59791cae", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile)", "signatureAfterChange": "     protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile)", "diff": ["-    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile)", "-    {", "+    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {", "-        try", "-        {", "+        try {", "-                && weblogicJarFile.exists() && weblogicJarFile.isFile())", "-            {", "+                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {", "-                for (Enumeration e = genericJar.entries(); e.hasMoreElements();)", "-                {", "-                    JarEntry je = (JarEntry)e.nextElement();", "+                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {", "+                    JarEntry je = (JarEntry) e.nextElement();", "+", "-                for (Enumeration e = wlJar.entries() ; e.hasMoreElements();)", "-                {", "-                    JarEntry je = (JarEntry)e.nextElement();", "+                for (Enumeration e = wlJar.entries(); e.hasMoreElements();) {", "+                    JarEntry je = (JarEntry) e.nextElement();", "+", "-                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();)", "-                {", "-                    String filepath = (String)e.nextElement();", "-                    if (wlEntries.containsKey(filepath))    // File name/path match", "-                    {", "+", "+                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {", "+                    String filepath = (String) e.nextElement();", "+", "+                    if (wlEntries.containsKey(filepath)) {// File name/path match", "+", "-                        JarEntry genericEntry = (JarEntry)genericEntries.get(filepath);", "-                        JarEntry wlEntry = (JarEntry)wlEntries.get(filepath);", "-                        if ((genericEntry.getCrc() !=  wlEntry.getCrc())  || // Crc's Match", "-                            (genericEntry.getSize() != wlEntry.getSize()) ) // Size Match", "-                        {", "-                            if (genericEntry.getName().endsWith(\".class\"))", "-                            {", "+                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);", "+                        JarEntry wlEntry = (JarEntry) wlEntries.get(filepath);", "+", "+                        if ((genericEntry.getCrc() != wlEntry.getCrc()) || // Crc's Match", "+                        (genericEntry.getSize() != wlEntry.getSize())) {// Size Match", "+", "+                            if (genericEntry.getName().endsWith(\".class\")) {", "-                                String classname = genericEntry.getName().replace(File.separatorChar,'.');", "-                                classname = classname.substring(0,classname.lastIndexOf(\".class\"));", "+                                String classname = genericEntry.getName().replace(File.separatorChar, '.');", "+", "+                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));", "+", "-                                if (genclass.isInterface())", "-                                {", "+", "+                                if (genclass.isInterface()) {", "-                                    log(\"Interface \" + genclass.getName() + \" has changed\",Project.MSG_VERBOSE);", "+                                    log(\"Interface \" + genclass.getName() + \" has changed\", Project.MSG_VERBOSE);", "-                                }", "-                                else", "-                                {", "+                                } else {", "-                            }", "-                            else", "-                            {", "+                            } else {", "-                                    log(\"Non class file \" + genericEntry.getName() + \" has changed\",Project.MSG_VERBOSE);", "+                                    log(\"Non class file \" + genericEntry.getName() + \" has changed\", Project.MSG_VERBOSE);", "-                    }", "-                    else // a file doesnt exist rebuild", "-                    {", "-                        log(\"File \" + filepath + \" not present in weblogic jar\",Project.MSG_VERBOSE);", "-                        rebuild =  true;", "+                    } else {// a file doesnt exist rebuild", "+", "+                        log(\"File \" + filepath + \" not present in weblogic jar\", Project.MSG_VERBOSE);", "+                        rebuild = true;", "-                if (!rebuild)", "-                {", "-                    log(\"No rebuild needed - updating jar\",Project.MSG_VERBOSE);", "+                if (!rebuild) {", "+                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);", "-                    for (Enumeration e = wlEntries.elements() ; e.hasMoreElements();)", "-                    {", "+                    for (Enumeration e = wlEntries.elements(); e.hasMoreElements();) {", "-                        JarEntry je = (JarEntry)e.nextElement();", "+                        JarEntry je = (JarEntry) e.nextElement();", "+", "-                                je.getCompressedSize() == je.getSize()) {", "+                            je.getCompressedSize() == je.getSize()) {", "-                        }", "-                        else {", "+                        } else {", "-                        if (replaceEntries.containsKey(je.getName()))", "-                        {", "-                            log(\"Updating Bean class from generic Jar \" + je.getName(),Project.MSG_VERBOSE);", "+                        if (replaceEntries.containsKey(je.getName())) {", "+                            log(\"Updating Bean class from generic Jar \" + je.getName(), Project.MSG_VERBOSE);", "-                            je = (JarEntry)replaceEntries.get(je.getName());", "+                            je = (JarEntry) replaceEntries.get(je.getName());", "-                        }", "-                        else  //use fle from original weblogic jar", "-                        {", "+                        } else {//use fle from original weblogic jar", "+", "-                        while ((bytesRead = is.read(buffer)) != -1)", "-                        {", "-                            newJarStream.write(buffer,0,bytesRead);", "+                        while ((bytesRead = is.read(buffer)) != -1) {", "+                            newJarStream.write(buffer, 0, bytesRead);", "+                } else {", "+                    log(\"Weblogic Jar rebuild needed due to changed \"", "+                         + \"interface or XML\", Project.MSG_VERBOSE);", "-                else", "-                {", "-                    log(\"Weblogic Jar rebuild needed due to changed interface or XML\",Project.MSG_VERBOSE);", "-                }", "-            }", "-            else", "-            {", "+            } else {", "-        }", "-        catch(ClassNotFoundException cnfe)", "-        {", "+        } catch (ClassNotFoundException cnfe) {", "-                + \". Details: \"", "-                + cnfe.getMessage();", "+                 + \". Details: \"", "+                 + cnfe.getMessage();", "+", "-        }", "-        catch(IOException ioe) {", "+        } catch (IOException ioe) {", "-                + \". Details: \"", "-                + ioe.getMessage();", "+                 + \". Details: \"", "+                 + ioe.getMessage();", "+", "-        }", "-        finally {", "+        } finally {", "+                } catch (IOException closeException) {", "-                catch (IOException closeException) {}", "+                } catch (IOException closeException) {", "-                catch (IOException closeException) {}", "+                } catch (IOException closeException) {", "-                catch (IOException closeException) {}"]}]}
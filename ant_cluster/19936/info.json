{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a30d1abf69f55b1e28acadc8a8b6c5b0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e95d57d7b1bfeb1928380af9d740d31", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/TaskAdapter.java", "commitBeforeChange": "6454a8ffac2091edc8f849725916f1300d157abd", "commitAfterChange": "0c253dc762efa243956ee90970e13fae9aec4d2f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void checkTaskClass(final Class taskClass, final Project project)", "signatureAfterChange": "     public static void checkTaskClass(final Class taskClass,                                        final Project project)", "diff": ["-    public static void checkTaskClass(final Class taskClass, final Project project) {", "+    public static void checkTaskClass(final Class taskClass, ", "+                                      final Project project) {", "-            final Method executeM = taskClass.getMethod( \"execute\", null );", "+            final Method executeM = taskClass.getMethod(\"execute\", null);", "-            if(!Void.TYPE.equals(executeM.getReturnType())) {", "-                final String message = \"return type of execute() should be void but was \\\"\"+executeM.getReturnType()+\"\\\" in \" + taskClass;", "+            if (!Void.TYPE.equals(executeM.getReturnType())) {", "+                final String message = \"return type of execute() should be \" ", "+                    + \"void but was \\\"\" + executeM.getReturnType() + \"\\\" in \" ", "+                    + taskClass;", "-        } catch(NoSuchMethodException e) {", "+        } catch (NoSuchMethodException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "390c2dba3ad5f5a5f3ee337bfc881960", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Manifest.java", "commitBeforeChange": "299ea801bc1031e308bfe07a22e51edd1b972872", "commitAfterChange": "eca5133693881d72fbd157619b03647e7e255789", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 32, "signatureBeforeChange": "     public Manifest(Reader r) throws ManifestException, IOException", "signatureAfterChange": "     public Manifest(Reader r) throws ManifestException, IOException", "diff": ["-        String readManifestVersion = mainSection.getAttributeValue(ATTRIBUTE_MANIFEST_VERSION);", "+        String readManifestVersion ", "+            = mainSection.getAttributeValue(ATTRIBUTE_MANIFEST_VERSION);", "-                    throw new ManifestException(\"Manifest sections should start with a \\\"\" + ATTRIBUTE_NAME +", "-                                                \"\\\" attribute and not \\\"\" + sectionName.getName() + \"\\\"\");", "+                    throw new ManifestException(\"Manifest sections should \" ", "+                        + \"start with a \\\"\" + ATTRIBUTE_NAME ", "+                        + \"\\\" attribute and not \\\"\" ", "+                        + sectionName.getName() + \"\\\"\");", "-            }", "-            else {", "+            } else {", "-                // this line is the first attribute. set it and then let the normal", "-                // read handle the rest", "+                // this line is the first attribute. set it and then ", "+                // let the normal read handle the rest"]}]}
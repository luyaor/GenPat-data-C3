{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0be47e6d9b068d95db794c6b28e7324f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a148732458480f850492917b179e921", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultObjectConfigurer.java", "commitBeforeChange": "ba1f6f147af327833c018a27a46347cbd46625f3", "commitAfterChange": "a989b254f04d33e5bc2370b62121bd56830ac2f1", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private void findMethodsWithPrefix( final String prefix, final Collection matches )", "signatureAfterChange": "     private List findMethodsWithPrefix( final String prefix,                                         final boolean exactMatch )", "diff": ["-    private void findMethodsWithPrefix( final String prefix, final Collection matches )", "+    private List findMethodsWithPrefix( final String prefix,", "+                                        final boolean exactMatch )", "+        final ArrayList matches = new ArrayList();", "-            if( Modifier.isStatic( method.getModifiers() ) ||", "-                methodName.length() < prefixLen ||", "-                !methodName.startsWith( prefix ) )", "+            if( Modifier.isStatic( method.getModifiers() ) )", "+            {", "+                continue;", "+            }", "+            if( methodName.length() < prefixLen || !methodName.startsWith( prefix ) )", "+            {", "+                continue;", "+            }", "+            if( exactMatch && methodName.length() != prefixLen )", "+        return matches;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2a4df6e4c90f735e07050df9cfae9c3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "c4dee0afafcc57ede3e3d1e81d2d4a1455c484a4", "commitAfterChange": "f52a170159f6dc5beebe07bfb945cb5b3fa5290b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void configureElement( final ObjectConfigurer configurer,                                    final Object object,                                    final Configuration element,                                    final Context context )         throws ConfigurationException", "signatureAfterChange": "     private void configureElement( final ConfigurationState state,                                    final Configuration element,                                    final Context context )         throws CascadingException, InvocationTargetException", "diff": ["-    private void configureElement( final ObjectConfigurer configurer,", "-                                   final Object object,", "+    private void configureElement( final ConfigurationState state,", "-        throws ConfigurationException", "+        throws CascadingException, InvocationTargetException", "-", "-        if( DEBUG )", "-        {", "-            final String message =", "-                REZ.getString( \"configure-subelement.notice\", elementName );", "-            getLogger().debug( message );", "-        }", "-", "-        if( elementName.endsWith( \"-ref\" ) )", "+        if( elementName.toLowerCase().endsWith( \"-ref\" ) )", "-            configureReference( configurer, object, element, context );", "+            configureReference( state, element, context );", "-            configureInline( configurer, object, element, context );", "+            configureInline( state, element, context );"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f8a3ac4573b02f7a41d604f5f18300b0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41771c755ed329e3f7166f066502e539", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTest.java", "commitBeforeChange": "163f90f6bcad4bf68de340e19e17b8469db905da", "commitAfterChange": "fa67ab4990484bbb112ea3f2fd8c350c7046a99b", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     public boolean shouldRun(Project p)", "signatureAfterChange": "     public boolean shouldRun(Project p)", "diff": ["-        if (ifProperty != null && p.getProperty(ifProperty) == null) {", "-            return false;", "-        } else if (unlessProperty != null", "-                    && p.getProperty(unlessProperty) != null) {", "-            return false;", "-        }", "-", "-        return true;", "+        PropertyHelper ph = PropertyHelper.getPropertyHelper(p);", "+        return ph.testIfCondition(getIfCondition())", "+            && ph.testUnlessCondition(getUnlessCondition());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d1da7e3d903944a729dbe8bace989eb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "e362b3b1fc28b4d9b2965708b5d5e457f21b0c9f", "commitAfterChange": "c13dba6d524fe74b1518e3442429ba6e97592edd", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "     private boolean isDeeper(String pattern, String name)", "signatureAfterChange": "     private boolean isDeeper(PathPattern pattern, PathPattern name)", "diff": ["-    private boolean isDeeper(String pattern, String name) {", "-        Vector p = SelectorUtils.tokenizePath(pattern);", "-        if (!p.contains(SelectorUtils.DEEP_TREE_MATCH)) {", "-            Vector n = SelectorUtils.tokenizePath(name);", "-            return p.size() > n.size();", "-        }", "-        return true;", "+    private boolean isDeeper(PathPattern pattern, PathPattern name) {", "+        return pattern.containsPattern(SelectorUtils.DEEP_TREE_MATCH)", "+            || pattern.depth() > name.depth();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcd752e7540d264452950e9d076bb35e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Target.java", "commitBeforeChange": "e30f1cdbcc2a30a4012e2cf2219f3c8140420d5b", "commitAfterChange": "c692a67a30db602f835f31f127862ed581779f5e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public boolean dependsOn(String other)", "signatureAfterChange": "     public boolean dependsOn(String other)", "diff": ["-        if (getProject() != null) {", "-            List l = getProject().topoSort(getName(),", "-                                           getProject().getTargets());", "-            int myIdx = l.indexOf(this);", "-            int otherIdx = l.indexOf(getProject().getTargets().get(other));", "-            return myIdx >= otherIdx;", "-        }", "-        return false;", "+        Project p = getProject();", "+        Hashtable t = (p == null) ? null : p.getTargets();", "+        return (p != null && p.topoSort(getName(), t, false).contains(t.get(other)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce87187ff5a9348533fd63135d655819", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/selectors/SelectSelector.java", "commitBeforeChange": "b71fd5ddcba8aff698e5ab8df375f60f232ac899", "commitAfterChange": "73c0030ac60560e2e1fb64d94396c5e630028141", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public boolean passesConditions()", "signatureAfterChange": "     public boolean passesConditions()", "diff": ["-        if (ifProperty != null", "-            && getProject().getProperty(ifProperty) == null) {", "-            return false;", "-        } else if (unlessProperty != null", "-            && getProject().getProperty(unlessProperty) != null) {", "-            return false;", "-        }", "-        return true;", "+        PropertyHelper ph = PropertyHelper.getPropertyHelper(getProject());", "+        return ph.testIfCondition(ifCondition)", "+            && ph.testUnlessCondition(unlessCondition);"]}]}
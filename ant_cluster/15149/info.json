{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d93267eac563e5a5c801b63fa25517b2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37c86bc2c2fead7c7fdb3d08b0a741a2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/XMLFragment.java", "commitBeforeChange": "476678d4a660bd6077ae4a8389cc29f42fbde0c9", "commitAfterChange": "69cd05e0f91f554bc045a9f9d6549c70dd5f27c1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "         public Object createDynamicElement(String uri, String name, String qName)", "signatureAfterChange": "         public Object createDynamicElement(String name)", "diff": ["-        public Object createDynamicElement(String uri, String name, String qName) {", "-            Element e2 = null;", "-            if (uri.equals(\"\")) {", "-                e2 = doc.createElement(name);", "-            } else {", "-                e2 = doc.createElementNS(uri, qName);", "-            }", "+//            }", "+        public Object createDynamicElement(String name) {", "+            Element e2 = doc", "+                .createElementNS(ProjectHelper", "+                                 .extractUriFromComponentName(name),", "+                                 ProjectHelper", "+                                 .extractNameFromComponentName(name));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7bd08f7b196c238478ee467612c07d3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/workspace/DefaultWorkspace.java", "commitBeforeChange": "8d226e312c364e3465737658341d24cf795c3393", "commitAfterChange": "bc34bb06ca8b29568e31990be726d04559ca2972", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private ExecutionFrame createExecutionFrame( final Project project )         throws TaskException", "signatureAfterChange": "      private ExecutionFrame createExecutionFrame( final Project project )         throws TaskException", "diff": ["+        //try", "+        //{", "+        //    //Add VFS manager", "+        //    // TODO - need to drive this from a typelib descriptor, plus", "+        //    // should be adding services to the root frame, rather than here", "+        //    final DefaultFileSystemManager vfsManager = new DefaultFileSystemManager();", "+        //    vfsManager.setBaseFile( project.getBaseDirectory() );", "+        //    componentManager.put( FileSystemManager.ROLE, vfsManager );", "+        //}", "+        //catch( Exception e )", "+        //{", "+        //    throw new TaskException( e.getMessage(), e );", "+        //}", "+", "-        final DefaultDeployer deployer = new DefaultDeployer();", "-        deployer.enableLogging( getLogger() );", "-", "+        final Deployer deployer;", "-            deployer.compose( componentManager );", "+            deployer = m_deployer.createChildDeployer( componentManager );", "+            componentManager.put( Deployer.ROLE, deployer );", "-        catch( final ComponentException ce )", "+        catch( ComponentException e )", "-            final String message = REZ.getString( \"bad-deployer-config.error\" );", "-            throw new TaskException( message, ce );", "+            throw new TaskException( e.getMessage(), e );", "-        //HACK: Didn't call initialize because Deployer contained in Embeddor", "-        // Already initialized and this would be reduendent", "-        //deployer.initialize();", "-", "-        componentManager.put( Deployer.ROLE, deployer );", "-", "+        // Deploy the imported typelibs"]}]}
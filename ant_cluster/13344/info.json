{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f6f560918b535e5ce5f630d7dea85c85", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16e01aa5ad075afb5ab49807adc07b7a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Taskdef.java", "commitBeforeChange": "67eceb37c112af708ea06bf95fbd158770250078", "commitAfterChange": "dddcf551a908df7a6f9ccb7db4b49ce441844375", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-                    loader = new AntClassLoader(project, classpath, false);", "+                    AntClassLoader al = new AntClassLoader(project, classpath,", "+                                                           false);", "+                    al.addSystemPackageRoot(\"org.apache.tools.ant\");", "+                    if (project.getJavaVersion().startsWith(\"1.1\")) {", "+                        // JDK > 1.1 adds these by default", "+                        al.addSystemPackageRoot(\"java\");", "+                    }", "+                    loader = al;", "-\t\tthrow new BuildException(msg, location);", "+\t\tthrow new BuildException(msg, cnfe, location);", "+\t    } catch (NoClassDefFoundError ncdfe) {", "+\t\tString msg = \"taskdef class \" + value +", "+\t\t    \" cannot be found\";", "+\t\tthrow new BuildException(msg, ncdfe, location);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f38d49c27f322af3b31d627c2b94648", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Rmic.java", "commitBeforeChange": "af56e7c4911a5dea0b326997d127d6380bbe93a2", "commitAfterChange": "818ddcf1837e09566976e01e2b718b1995f6e5f2", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 46, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        if (baseDir == null) {", "+        File outputDir = getOutputDir();", "+        if (outputDir == null) {", "-        if (!baseDir.exists()) {", "-            throw new BuildException(ERROR_NO_BASE_EXISTS + baseDir, getLocation());", "+        if (!outputDir.exists()) {", "+            throw new BuildException(ERROR_NO_BASE_EXISTS + outputDir, getLocation());", "-        if (!baseDir.isDirectory()) {", "-            throw new BuildException(ERROR_NOT_A_DIR + baseDir, getLocation());", "+        if (!outputDir.isDirectory()) {", "+            throw new BuildException(ERROR_NOT_A_DIR + outputDir, getLocation());", "-                        + baseDir, Project.MSG_INFO);", "+                        + outputDir, Project.MSG_INFO);", "-            if (null != sourceBase && !baseDir.equals(sourceBase)", "+            if (null != sourceBase && !outputDir.equals(sourceBase)", "-                        moveGeneratedFile(baseDir, sourceBase, (String) compileList.elementAt(j),", "+                        moveGeneratedFile(outputDir, sourceBase, (String) compileList.elementAt(j),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f51b503aa7572ffe0adb9a95fba5a74", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/framework/Condition.java", "commitBeforeChange": "4ab1c363ef3aa8889a3c9bd5653c41ec751e2205", "commitAfterChange": "6ab3e313864e62f2c77a52d8c636daa20a7dfcb8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public boolean evaluate( final TaskContext context )         throws TaskException", "signatureAfterChange": "     boolean evaluate( final TaskContext context )         throws TaskException;", "diff": ["-", "-    public boolean evaluate( final TaskContext context )", "-        throws TaskException", "-    {", "-        boolean result = false;", "-", "-        final Object resolved = context.resolveValue( getCondition() );", "-        if( null != resolved )", "-        {", "-            final Object object = context.getProperty( resolved.toString() );", "-            if( object != null && !object.toString().equals( \"false\" ) )", "-            {", "-                result = true;", "-            }", "-        }", "-", "-        if( !m_isIfCondition )", "-        {", "-            result = !result;", "-        }", "-", "-        return result;", "-    }", "+     */", "+    boolean evaluate( final TaskContext context )", "+        throws TaskException;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4662f074e8b85f97a8c3c906c02d62d6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Available.java", "commitBeforeChange": "f19f07d6e4c72f241057ecfc32d80be21201bbf7", "commitAfterChange": "ca91f8cb7e4f2bfe1a191dea6126a32649af9565", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private boolean checkClass(String classname)", "signatureAfterChange": "     private boolean checkClass(String classname)", "diff": ["-                loader = new AntClassLoader(null, getProject(), ", "-                    classpath, false);", "+                loader = new AntClassLoader(null, getProject(), classpath, ", "+                                            false);", "-                        loader.findClass(classname);", "+                        requiredClass = loader.findClass(classname);", "-                        // class found but restricted name; this is actually", "-                        // the case we're looking for, so catch the exception", "-                        // and return", "+                        // class found but restricted name; this is", "+                        // actually the case we're looking for in JDK 1.3+,", "+                        // so catch the exception and return", "+                } else {", "+                    return false;", "-                return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48402086f171850c05053c60730fc385", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteJava.java", "commitBeforeChange": "e0459e7ba70ebf4f9031e638018a0c52f054ba2a", "commitAfterChange": "50ab3762949b456ef74fcde982f16fc4922897f6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void execute(Project project) throws BuildException", "signatureAfterChange": "      public void execute(Project project) throws BuildException", "diff": ["-        AntClassLoader loader = null; ", "+        AntClassLoader loader = null;", "-                loader = new AntClassLoader(project.getCoreLoader(), project, ", "-                                            classpath, false);", "+                loader = project.createClassLoader(classpath);", "+                loader.setParent(project.getCoreLoader());", "+                loader.setParentFirst(false);", "+                loader.addJavaLibraries();", "-                throw new BuildException(\"Could not find main() method in \" ", "+                throw new BuildException(\"Could not find main() method in \"", "-                Task currentThreadTask ", "+                Task currentThreadTask", "-                                    Project.MSG_WARN); ", "+                                    Project.MSG_WARN);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51087ef29a9f4b6794d70ba5c5c9433e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/ProjectTest.java", "commitBeforeChange": "33832587a4070693dd77d6e08fcf4e7d0d9a2b99", "commitAfterChange": "126daf8b31f6c01d1c6891581195db9956142970", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public void testAddTaskDefinition()", "signatureAfterChange": "      public void testAddTaskDefinition()", "diff": ["-        try {", "-            assertTaskDefFails(DummyTaskProtected.class,", "-                               DummyTaskProtected.class + \" is not public\");", "-        } catch (AssertionFailedError e) {", "-            /*", "-             * I don't understand this, but this is what happens with", "-             * > java -fullversion", "-             * java full version \"Linux_JDK_1.1.8_v3_green_threads\"", "-             * from time to time", "-             */", "-            assertTrue(JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1));", "-            assertTaskDefFails(DummyTaskProtected.class,", "-                               \"No public no-arg constructor in \"", "-                               + DummyTaskProtected.class);", "-        }", "+        assertTaskDefFails(DummyTaskProtected.class,", "+                           DummyTaskProtected.class + \" is not public\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "676d63e15a03c94ac3b7c09c3f92d91e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Available.java", "commitBeforeChange": "bc47be3b7622cf0b1ba1099469bc19b8485f9636", "commitAfterChange": "37cd9404c739254d3ef459f80549e30fddf526cf", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "      private boolean checkClass(String classname)", "signatureAfterChange": "      private boolean checkClass(String classname)", "diff": ["+            if( ignoreSystemclasses ) {", "+                loader = new AntClassLoader(null,getProject(),classpath,false);", "+                    try {", "+                        loader.findClass(classname);", "+                    }", "+                    catch( SecurityException se ) {", "+            // class found but restricted name; this is actually", "+            // the case we're looking for, so catch the exception", "+            // and return", "+                        return true;", "+            }", "+                }", "+                return false;", "+            }", "+            else if (loader != null) {", "-            log(\"class \\\"\" + classname + \"\\\" was not found\", ", "+            log(\"class \\\"\" + classname + \"\\\" was not found\",", "-            log(\"Could not load dependent class \\\"\" + e.getMessage() ", "-                + \"\\\" for class \\\"\" + classname + \"\\\"\", ", "+            log(\"Could not load dependent class \\\"\" + e.getMessage()", "+                + \"\\\" for class \\\"\" + classname + \"\\\"\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a04f53fc3880eecc7c321c1ccfc051e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/util/Condition.java", "commitBeforeChange": "c31e31c52a1f624e72be505d788db9be42b87e5d", "commitAfterChange": "48c54a521235f746024ae8facc272e049d0e1cf5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "          public boolean evaluate( final Context context )", "signatureAfterChange": "          public boolean evaluate( final Context context )", "diff": ["+        boolean result = false;", "+", "-                PropertyUtil.resolveProperty( m_condition, context, false ); ", "-", "-            boolean result = false;", "+                PropertyUtil.resolveProperty( getCondition(), context, false ); ", "-                result = ( null != context.get( resolved ) );", "+                final Object object = context.get( resolved );", "+                //TODO: Do more than just check for presence????????????", "+                ", "+                //true as object present", "+                result = true;", "-", "-            if( !m_isIfCondition )", "-            {", "-                result = !result;", "-            }", "-", "-            return result;", "+        }", "+        catch( final ContextException ce )", "+        {", "+            result = false;", "+", "+        if( !m_isIfCondition )", "+        {", "+            result = !result;", "+        }", "+", "+        return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70252098e6c795a7461b3540597d0995", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Rmic.java", "commitBeforeChange": "e0459e7ba70ebf4f9031e638018a0c52f054ba2a", "commitAfterChange": "50ab3762949b456ef74fcde982f16fc4922897f6", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            ", "+", "-        loader = new AntClassLoader(getProject(), classpath);", "+        loader = getProject().createClassLoader(classpath);", "-                scanDir(baseDir, ", "-                        new String[] {classname.replace('.', ", "+                scanDir(baseDir,", "+                        new String[] {classname.replace('.',", "-            ", "+", "-                    \" class\" + (fileCount > 1 ? \"es\" : \"\") + \" to \" + baseDir, ", "+                    \" class\" + (fileCount > 1 ? \"es\" : \"\") + \" to \" + baseDir,", "-                ", "+", "-            ", "-            /* ", "+", "+            /*", "-            if (null != sourceBase && !baseDir.equals(sourceBase) ", "+            if (null != sourceBase && !baseDir.equals(sourceBase)", "-                    log(\"Cannot determine sourcefiles in idl mode, \", ", "+                    log(\"Cannot determine sourcefiles in idl mode, \",", "-                    log(\"sourcebase attribute will be ignored.\", ", "+                    log(\"sourcebase attribute will be ignored.\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "834949e1cb716e9b23afed13961d48b2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Available.java", "commitBeforeChange": "538257ea859749802694e257143fce9d6efbd1b4", "commitAfterChange": "d605afdd5122d55bb5f39829944acbc2271f8474", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private boolean checkClass(String classname)", "signatureAfterChange": "     private boolean checkClass(String classname)", "diff": ["-                if (loader != null) {", "-                    try {", "-                        loader.findClass(classname);", "-                    } catch (SecurityException se) {", "-                        // class found but restricted name; this is", "-                        // actually the case we're looking for in JDK 1.3+,", "-                        // so catch the exception and return", "-                        return true;", "-                    }", "-                } else {", "-                    return false;", "+                try {", "+                    loader.findClass(classname);", "+                } catch (SecurityException se) {", "+                    // class found but restricted name; this is", "+                    // actually the case we're looking for in JDK 1.3+,", "+                    // so catch the exception and return", "+                    return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f55a57162ce5567c50a7fcb7c46befd1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/types/Path.java", "commitBeforeChange": "6a20789293e6588a94560a11697fb59dd0d9338c", "commitAfterChange": "d319ab594b9d0b5a3a2ee264845172ca590496f3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void append( final Path other )         throws TaskException", "signatureAfterChange": "     public void addPath( final String path )", "diff": ["-    public void append( final Path other )", "-        throws TaskException", "-        if( null == other )", "-        {", "-            throw new NullPointerException( \"other\" );", "-        }", "-        final String[] list = other.list();", "-        for( int i = 0; i < list.length; i++ )", "-        {", "-            final String file = list[ i ];", "-            if( m_elements.contains( file ) )", "-            {", "-                m_elements.add( file );", "-            }", "-        }", "+     */", "+    public void addPath( final String path )", "+    {", "+        final PathElement pathElement = new PathElement();", "+        m_elements.add( pathElement );", "+        pathElement.setPath( path );"]}]}
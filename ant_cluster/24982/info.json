{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8581848ea62ae72f98420c0bb22462c1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3845ce92ddce727e3f39cf8ca8c7f06a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Definer.java", "commitBeforeChange": "efe6a8f90982754250f1ca93b5bffe24b468284d", "commitAfterChange": "218ad5fc4d8c225edfb15dfd536904c6ec3fd8a3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["+            AntClassLoader al = null;", "-                AntClassLoader al = new AntClassLoader(project, classpath,", "-                                                       false);", "-                // need to load Task via system classloader or the new", "-                // task we want to define will never be a Task but always", "-                // be wrapped into a TaskAdapter.", "-                al.addSystemPackageRoot(\"org.apache.tools.ant\");", "-                loader = al;", "+                al = new AntClassLoader(project, classpath, false);", "-                loader = this.getClass().getClassLoader();", "+                al = new AntClassLoader(project, Path.systemClasspath, false);", "+            // need to load Task via system classloader or the new", "+            // task we want to define will never be a Task but always", "+            // be wrapped into a TaskAdapter.", "+            al.addSystemPackageRoot(\"org.apache.tools.ant\");", "+            loader = al;", "-            Class c = null;", "-            if (loader != null) {", "-                c = loader.loadClass(value);", "-                AntClassLoader.initializeClass(c);", "-            } else {", "-                c = Class.forName(value);", "-            }", "+            Class c = loader.loadClass(value);", "+            AntClassLoader.initializeClass(c);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9a606d32b5eab6e0451bf3838e359e6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntTypeDefinition.java", "commitBeforeChange": "cd8a8e0cc286ceb9111845fbd0606efb25669ef8", "commitAfterChange": "960cd2a7117d0fa96b4247c3081da7b5363ba0d8", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public boolean similarDefinition(AntTypeDefinition other, Project project)", "signatureAfterChange": "     public boolean similarDefinition(AntTypeDefinition other, Project project)", "diff": ["-        if (other == null) {", "-            return false;", "-        }", "-        if (getClass() != other.getClass()) {", "-            return false;", "-        }", "-        if (!getClassName().equals(other.getClassName())) {", "-            return false;", "-        }", "-        if (!extractClassname(adapterClass).equals(", "-                extractClassname(other.adapterClass))) {", "-            return false;", "-        }", "-        if (!extractClassname(adaptToClass).equals(", "-                extractClassname(other.adaptToClass))) {", "+        if (other == null", "+            || getClass() != other.getClass()", "+            || !getClassName().equals(other.getClassName())", "+            || !extractClassname(adapterClass).equals(", "+            extractClassname(other.adapterClass))", "+            || !extractClassname(adaptToClass).equals(", "+            extractClassname(other.adaptToClass))) {", "-        ClassLoader newLoader = this.getClassLoader();", "-        if (oldLoader == newLoader) {", "-            return true;", "-        }", "-        return", "-            newLoader != null", "-            && oldLoader != null", "-            && oldLoader instanceof AntClassLoader", "+        ClassLoader newLoader = getClassLoader();", "+        return oldLoader == newLoader", "+            || (oldLoader instanceof AntClassLoader", "-            .equals(((AntClassLoader) newLoader).getClasspath());", "+            .equals(((AntClassLoader) newLoader).getClasspath()));"]}]}
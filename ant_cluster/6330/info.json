{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "15b79f2d83abf890842dbf12580f5ee7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d8335e34f654d0ca3a9a5ee2593c459", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/xml/XSLTProcess.java", "commitBeforeChange": "030fd751f51bef1c60b27cc4034cf1b013551520", "commitAfterChange": "0deb15031e9e934900b3b41f0d191dabdece8f80", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 16, "signatureBeforeChange": "     protected void configureLiaison( File stylesheet )         throws TaskException", "signatureAfterChange": "      private void specifyParams() throws TaskException", "diff": ["-    protected void configureLiaison( File stylesheet )", "-        if( m_stylesheetLoaded )", "-        m_stylesheetLoaded = true;", "-            getLogger().info( \"Loading stylesheet \" + stylesheet );", "-            m_liaison.setStylesheet( stylesheet );", "-            final Iterator params = m_params.iterator();", "-            while( params.hasNext() )", "-            {", "-                final XSLTParam param = (XSLTParam)params.next();", "-", "-                final String expression = param.getExpression();", "-                if( expression == null )", "-                {", "-                    throw new TaskException( \"Expression attribute is missing.\" );", "-                }", "-", "-                final String name = param.getName();", "-                if( name == null )", "-                {", "-                    throw new TaskException( \"Name attribute is missing.\" );", "-                }", "-", "-                m_liaison.addParam( name, expression );", "-            }", "-            getLogger().info( \"Failed to read stylesheet \" + stylesheet );", "+", "+    private void specifyParams() throws TaskException", "+    {", "+        final Iterator params = m_params.iterator();", "+        while( params.hasNext() )", "+        {", "+            final XSLTParam param = (XSLTParam)params.next();", "+", "+            final String expression = param.getExpression();", "+            if( expression == null )", "+            {", "+                throw new TaskException( \"Expression attribute is missing.\" );", "+            }", "+", "+            final String name = param.getName();", "+            if( name == null )", "+            {", "+                throw new TaskException( \"Name attribute is missing.\" );", "+            }", "+", "+            m_transformer.setParameter( name, expression );", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f3b1ad1c5414257b827c4022a286c65", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/modelparser/ProjectHandler.java", "commitBeforeChange": "f1025dd3c6deebb466ac41a06a42d812cdf4e08d", "commitAfterChange": "c2f14ffad1518f0d1c23c084b7c216d06c5da363", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void startElement(String uri, String localName, String qualifiedName,                              Attributes attributes)          throws SAXParseException", "signatureAfterChange": "     public void startElement(String uri, String localName, String qualifiedName,                              Attributes attributes)          throws SAXParseException", "diff": ["-        if (qualifiedName.equals(REF_ELEMENT)) {", "-            RefHandler refHandler = new RefHandler();", "-            refHandler.start(getParseContext(), getXMLReader(), this,", "-                getLocator(), attributes, getElementSource(),", "-                qualifiedName);", "-            try {", "-                project.referenceProject(refHandler.getRefName(),", "-                    refHandler.getReferencedProject());", "-            } catch (ModelException e) {", "-                throw new SAXParseException(e.getMessage(), getLocator(), e);", "-            }", "-        } else if (qualifiedName.equals(INCLUDE_ELEMENT)) {", "+        if (qualifiedName.equals(INCLUDE_ELEMENT)) {", "-          throw new SAXParseException(\"Only the \\\"ant\\\" namespace is \"", "+          throw new SAXParseException(\"namespace support is not \""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "484bc5655ddb325409dafeaed037dca1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/javacc/JavaCC.java", "commitBeforeChange": "e47b4d5aca65c519f01afabb9479b8443abd2ccf", "commitAfterChange": "63a3e9609b4913d540ead325004f919e9a87c4b9", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        // load command line with required attributes", "-        if (outputDirectory != null) {", "-            if (!outputDirectory.isDirectory()) {", "-                throw new BuildException(\"Outputdir not a directory.\");", "-            }", "-            cmdl.createArgument().setValue(", "-                \"-OUTPUT_DIRECTORY:\"+outputDirectory.getAbsolutePath());", "-        }", "-", "+        // check the target is a file", "+        // use the directory containing the target as the output directory", "+        if (outputDirectory == null) {", "+            outputDirectory = new File(target.getParent());", "+        }", "+        else if (!outputDirectory.isDirectory()) {", "+            throw new BuildException(\"Outputdir not a directory.\");", "+        }", "+        cmdl.createArgument().setValue(", "+            \"-OUTPUT_DIRECTORY:\"+outputDirectory.getAbsolutePath());", "+", "-            project.log(\"Target is already built - skipping (\" + target + \")\");", "+            log(\"Target is already built - skipping (\" + target + \")\", Project.MSG_VERBOSE);", "-        final Execute process =", "-            new Execute(new LogStreamHandler(this,", "-                                             Project.MSG_INFO,", "-                                             Project.MSG_INFO),", "-                        null);", "-        log(cmdl.toString(), Project.MSG_VERBOSE);", "-        process.setCommandline(cmdl.getCommandline());", "-", "-        try {", "-            if (process.execute() != 0) {", "-                throw new BuildException(\"JavaCC failed.\");", "-            }", "-        }", "-        catch (IOException e) {", "-            throw new BuildException(\"Failed to launch JavaCC: \" + e);", "-        }", "+        Execute.runCommand(this, cmdl.getCommandline());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89e73ce2c17e99b325d665ca7d5019a3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ANTLR.java", "commitBeforeChange": "0d470a57301439a5e5ba2a3cd4f7740f797c0aa9", "commitAfterChange": "488529801c60c755eba1f76182b314c7f4b99541", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-", "-            if (fork) {", "-                log(\"Forking \" + commandline.toString(), Project.MSG_VERBOSE);", "-                int err = run(commandline.getCommandline());", "-                if (err == 1) {", "-                    throw new BuildException(\"ANTLR returned: \"+err, location);", "-                }", "-            } else {", "-                ExecuteJava exe = new ExecuteJava();", "-                exe.setJavaCommand(commandline.getJavaCommand());", "-                exe.setClasspath(commandline.getClasspath());", "-                try {", "-                    exe.execute(project);", "-                } catch (ExitException e){", "-                    if ( e.getStatus() != 0 ){", "-                        throw new BuildException(\"ANTLR returned: \" + e.getStatus(), location);", "-                    }", "-                }", "+            log(\"Forking \" + commandline.toString(), Project.MSG_VERBOSE);", "+            int err = run(commandline.getCommandline());", "+            if (err == 1) {", "+                throw new BuildException(\"ANTLR returned: \"+err, location);", "+        } else {", "+            log(\"Skipped grammar file. Generated file is newer.\", Project.MSG_VERBOSE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2d3f239e7fc12e359d7b4c40b60b349", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/selectors/DateSelector.java", "commitBeforeChange": "8ec6497d89bb1cc76c15e2f911a2ded3f8c5fbbc", "commitAfterChange": "e33f1d105f6988df483bc075a630c6aa7a3b536a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void setDatetime(String dateTime)", "signatureAfterChange": "     public void setDatetime(String dateTime)", "diff": ["-        if (dateTime != null) {", "-            DateFormat df = DateFormat.getDateTimeInstance(", "-                    DateFormat.SHORT,", "-                    DateFormat.SHORT,", "-                    Locale.US);", "-            try {", "-                setMillis(df.parse(dateTime).getTime());", "-                if (millis < 0) {", "-                    setError(\"Date of \" + dateTime", "-                            + \" results in negative milliseconds value relative\"", "-                            + \" to epoch (January 1, 1970, 00:00:00 GMT).\");", "-                }", "-            } catch (ParseException pe) {", "-                setError(\"Date of \" + dateTime", "-                        + \" Cannot be parsed correctly. It should be in\"", "-                        + \" MM/DD/YYYY HH:MM AM_PM format.\");", "-            }", "-        }"]}]}
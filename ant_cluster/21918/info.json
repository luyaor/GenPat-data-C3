{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b8716d8f5106bf93091fa86f8839e1e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8233b7510f1a4a1c9e2ce3ea85167a36", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Basename.java", "commitBeforeChange": "5fa2b3cd6484967339e8bd85e3b180117cf4cff3", "commitAfterChange": "4ce5b624e12892157d668fecdcd7ee51b229b7c9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void execute() throws BuildException", "signatureAfterChange": "   public void execute() throws BuildException", "diff": ["-      String value;", "-      } else {", "-        value = file.getName();", "-        if (suffix != null && value.endsWith(suffix)) {", "-            int pos = value.indexOf('.');", "-            value = value.substring(0, pos);", "-        }", "-        getProject().setNewProperty(property, value);", "+      String value = file.getName();", "+      if (suffix != null && value.endsWith(suffix)) {", "+          // if the suffix does not starts with a '.' and the", "+          // char preceding the suffix is a '.', we assume the user", "+          // wants to remove the '.' as well (see docs)", "+          int pos = value.length() - suffix.length();", "+          if (pos > 0 && suffix.charAt(0) != '.' ", "+              && value.charAt(pos - 1) == '.') {", "+              pos--;", "+          }", "+          value = value.substring(0, pos);", "+      }", "+      getProject().setNewProperty(property, value);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d84df2507bc601c193fb6112d41cf7e1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/PropertyHelper.java", "commitBeforeChange": "e76559e2f3bc99467718b186f5d5d89315b70777", "commitAfterChange": "b2b649d12de2918643d1aa910f194df3be345df9", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 37, "signatureBeforeChange": "          public LocalProperties shallowCopy()", "signatureAfterChange": "          private void shallowCopyParent()", "diff": ["-        public LocalProperties shallowCopy() {", "-            LocalPropertyStack copy = new LocalPropertyStack();", "-            copy.stack = new ArrayList();", "-            copy.level = level;", "-            for (int i = 0; i < stack.size(); ++i) {", "-                copy.stack.add(((ArrayList) stack.get(i)).clone());", "+        private void shallowCopyParent() {", "+            if (stack != null) {", "+                return;", "-            copy.props = new HashMap();", "-            for (Iterator i = props.entrySet().iterator(); i.hasNext();) {", "+            stack = new ArrayList();", "+            level = owner.level;", "+            for (int i = 0; i < stack.size(); ++i) {", "+                stack.add(((ArrayList) owner.stack.get(i)).clone());", "+            }", "+            props = new HashMap();", "+            for (Iterator i = owner.props.entrySet().iterator(); i.hasNext();) {", "-                copy.props.put(entry.getKey(), l2);", "+                props.put(entry.getKey(), l2);", "-            return copy;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "33e97b54cd733236522d4a489fac5171", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fb33da1b9b31e72eddc6d0a59fb605d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipFile.java", "commitBeforeChange": "1fe6b17d5fbbf0f70c13def785498d87e7d3c685", "commitAfterChange": "98f306fa8431c78926e42cec5801c752747e016e", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private void positionAtCentralDirectory64()         throws IOException", "signatureAfterChange": "     private void positionAtCentralDirectory64()         throws IOException", "diff": ["-        byte[] zip64EocdOffset = new byte[DWORD];", "-        archive.readFully(zip64EocdOffset);", "-        archive.seek(ZipEightByteInteger.getLongValue(zip64EocdOffset));", "-        byte[] sig = new byte[WORD];", "-        archive.readFully(sig);", "-        if (sig[POS_0] != ZipOutputStream.ZIP64_EOCD_SIG[POS_0]", "-            || sig[POS_1] != ZipOutputStream.ZIP64_EOCD_SIG[POS_1]", "-            || sig[POS_2] != ZipOutputStream.ZIP64_EOCD_SIG[POS_2]", "-            || sig[POS_3] != ZipOutputStream.ZIP64_EOCD_SIG[POS_3]", "-            ) {", "+        archive.readFully(DWORD_BUF);", "+        archive.seek(ZipEightByteInteger.getLongValue(DWORD_BUF));", "+        archive.readFully(WORD_BUF);", "+        if (!Arrays.equals(WORD_BUF, ZipOutputStream.ZIP64_EOCD_SIG)) {", "-        byte[] cfdOffset = new byte[DWORD];", "-        archive.readFully(cfdOffset);", "-        archive.seek(ZipEightByteInteger.getLongValue(cfdOffset));", "+        archive.readFully(DWORD_BUF);", "+        archive.seek(ZipEightByteInteger.getLongValue(DWORD_BUF));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2cab3fef0dbe17a8dd681495a20256b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipFile.java", "commitBeforeChange": "aa43e37a025cdf54b8914b8283e57419a253ed59", "commitAfterChange": "dee95e3acc5154aee03ff5f91f9a56426ae79f3f", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 19, "signatureBeforeChange": "     protected String getString(byte[] bytes) throws ZipException", "signatureAfterChange": "     private void positionAtCentralDirectory64()         throws IOException", "diff": ["+     */", "+    private void positionAtCentralDirectory64()", "+        throws IOException {", "+        skipBytes(ZIP64_EOCDL_LOCATOR_OFFSET);", "+        byte[] zip64EocdOffset = new byte[DWORD];", "+        archive.readFully(zip64EocdOffset);", "+        archive.seek(ZipEightByteInteger.getLongValue(zip64EocdOffset));", "+        byte[] sig = new byte[WORD];", "+        archive.readFully(sig);", "+        if (sig[POS_0] != ZipOutputStream.ZIP64_EOCD_SIG[POS_0]", "+            || sig[POS_1] != ZipOutputStream.ZIP64_EOCD_SIG[POS_1]", "+            || sig[POS_2] != ZipOutputStream.ZIP64_EOCD_SIG[POS_2]", "+            || sig[POS_3] != ZipOutputStream.ZIP64_EOCD_SIG[POS_3]", "+            ) {", "+            throw new ZipException(\"archive's ZIP64 end of central \"", "+                                   + \"directory locator is corrupt.\");", "+        }", "+        skipBytes(ZIP64_EOCD_CFD_LOCATOR_OFFSET", "+                  - WORD /* signature has already been read */);", "+        byte[] cfdOffset = new byte[DWORD];", "+        archive.readFully(cfdOffset);", "+        archive.seek(ZipEightByteInteger.getLongValue(cfdOffset));", "+    }", "-     */", "-    protected String getString(byte[] bytes) throws ZipException {", "-        try {", "-            return ZipEncodingHelper.getZipEncoding(encoding).decode(bytes);", "-        } catch (IOException ex) {", "-            throw new ZipException(\"Failed to decode name: \" + ex.getMessage());"]}]}
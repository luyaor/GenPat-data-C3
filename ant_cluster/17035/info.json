{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e6bdbb5ad450b11c2851da0189efb353", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b24bbc7fde9db78833e60ae954aabc6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/IContract.java", "commitBeforeChange": "215ff90feefbbb5916572f2ebdafa885fa0acd17", "commitAfterChange": "ee5b9c7e25776b05f051515e1d801ff3c9a9dc38", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     public void execute()         throws TaskException", "signatureAfterChange": "     public void execute()         throws TaskException", "diff": ["-            beforeInstrumentationClasspath.append( new Path( getProject(), srcDir.getAbsolutePath() ) );", "+            beforeInstrumentationClasspath.append( new Path( srcDir.getAbsolutePath() ) );", "-            afterInstrumentationClasspath.append( new Path( getProject(), instrumentDir.getAbsolutePath() ) );", "-            afterInstrumentationClasspath.append( new Path( getProject(), repositoryDir.getAbsolutePath() ) );", "-            afterInstrumentationClasspath.append( new Path( getProject(), srcDir.getAbsolutePath() ) );", "-            afterInstrumentationClasspath.append( new Path( getProject(), buildDir.getAbsolutePath() ) );", "+            afterInstrumentationClasspath.append( new Path( instrumentDir.getAbsolutePath() ) );", "+            afterInstrumentationClasspath.append( new Path( repositoryDir.getAbsolutePath() ) );", "+            afterInstrumentationClasspath.append( new Path( srcDir.getAbsolutePath() ) );", "+            afterInstrumentationClasspath.append( new Path( buildDir.getAbsolutePath() ) );", "-            repositoryClasspath.append( new Path( getProject(), instrumentDir.getAbsolutePath() ) );", "-            repositoryClasspath.append( new Path( getProject(), srcDir.getAbsolutePath() ) );", "-            repositoryClasspath.append( new Path( getProject(), repositoryDir.getAbsolutePath() ) );", "-            repositoryClasspath.append( new Path( getProject(), buildDir.getAbsolutePath() ) );", "+            repositoryClasspath.append( new Path( instrumentDir.getAbsolutePath() ) );", "+            repositoryClasspath.append( new Path( srcDir.getAbsolutePath() ) );", "+            repositoryClasspath.append( new Path( repositoryDir.getAbsolutePath() ) );", "+            repositoryClasspath.append( new Path( buildDir.getAbsolutePath() ) );", "-            iContractClasspath.append( new Path( getProject(), System.getProperty( \"java.home\" ) + File.separator + \"..\" + File.separator + \"lib\" + File.separator + \"tools.jar\" ) );", "-            iContractClasspath.append( new Path( getProject(), srcDir.getAbsolutePath() ) );", "-            iContractClasspath.append( new Path( getProject(), repositoryDir.getAbsolutePath() ) );", "-            iContractClasspath.append( new Path( getProject(), instrumentDir.getAbsolutePath() ) );", "-            iContractClasspath.append( new Path( getProject(), buildDir.getAbsolutePath() ) );", "+            iContractClasspath.append( new Path( System.getProperty( \"java.home\" ) + File.separator + \"..\" + File.separator + \"lib\" + File.separator + \"tools.jar\" ) );", "+            iContractClasspath.append( new Path( srcDir.getAbsolutePath() ) );", "+            iContractClasspath.append( new Path( repositoryDir.getAbsolutePath() ) );", "+            iContractClasspath.append( new Path( instrumentDir.getAbsolutePath() ) );", "+            iContractClasspath.append( new Path( buildDir.getAbsolutePath() ) );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e055a3f52d05ba01ea51f5d6186f9c00", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/junit/JUnitTaskTest.java", "commitBeforeChange": "5026f31269c0cf1f709aa6ee9dc775f0e7b74747", "commitAfterChange": "4369f6482672e451edd830277d0f64fcc9c7d10b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void _testFailureRecorder()", "signatureAfterChange": "     public void testFailureRecorder()", "diff": ["-    //     See the _run.bat attachement of the bug.", "-    public void _testFailureRecorder() {", "+    //     But running the JUnit testcase fails in 4th run.", "+    public void testFailureRecorder() {", "-", "+        ", "-        assertFalse(\"Test directory must not exist before the test preparation.\", ", "+        assertFalse(\"Test directory '\" + testDir.getAbsolutePath() + \"' must not exist before the test preparation.\", ", "-        assertFalse(\"The collector file must not exist before the test preparation.\", ", "+        assertFalse(\"The collector file '\" + collectorFile.getAbsolutePath() + \"'must not exist before the test preparation.\", ", "+        ", "-        assertTrue(\"Test directory was not created.\", testDir.exists());", "+        assertTrue(\"Test directory '\" + testDir.getAbsolutePath() + \"' was not created.\", testDir.exists());", "-        assertFalse(\"The collector file \" + collectorFile.getAbsolutePath() ", "-                + \" should not exist before the 1st run.\", collectorFile.exists());", "-", "+        assertFalse(\"The collector file '\" + collectorFile.getAbsolutePath() ", "+                + \"' should not exist before the 1st run.\", collectorFile.exists());", "+        ", "+        ", "-        assertTrue(\"The collector file \" + collectorFile.getAbsolutePath() ", "-                + \" should exist after the 1st run.\", collectorFile.exists());", "+        assertTrue(\"The collector file '\" + collectorFile.getAbsolutePath() ", "+                + \"' should exist after the 1st run.\", collectorFile.exists());", "+        ", "-        assertTrue(\"The collector file \" + collectorFile.getAbsolutePath() ", "-                + \" should exist after the 2nd run.\", collectorFile.exists());", "+        assertTrue(\"The collector file '\" + collectorFile.getAbsolutePath() ", "+                + \"' should exist after the 2nd run.\", collectorFile.exists());", "+        ", "-        assertTrue(\"The collector file \" + collectorFile.getAbsolutePath() ", "-                + \" should exist after the 3rd run.\", collectorFile.exists());", "+        assertTrue(\"The collector file '\" + collectorFile.getAbsolutePath() ", "+                + \"' should exist after the 3rd run.\", collectorFile.exists());", "+        ", "-        assertTrue(\"The collector file \" + collectorFile.getAbsolutePath() ", "-                + \" should exist after the 4th run.\", collectorFile.exists());", "-        assertOutputNotContaining(\"4th run: should not run A.test02\", \"A.test02\");", "-        assertOutputNotContaining(\"4th run: should not run A.test03\", \"A.test03\");", "+        assertTrue(\"The collector file '\" + collectorFile.getAbsolutePath() ", "+                + \"' should exist after the 4th run.\", collectorFile.exists());", "+        //TODO: these two statements fail", "+        //assertOutputNotContaining(\"4th run: should not run A.test02\", \"A.test02\");", "+        //assertOutputNotContaining(\"4th run: should not run A.test03\", \"A.test03\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e77e2836ef158ec4d49358ef02ed4c92", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/IContract.java", "commitBeforeChange": "215ff90feefbbb5916572f2ebdafa885fa0acd17", "commitAfterChange": "ee5b9c7e25776b05f051515e1d801ff3c9a9dc38", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     public void execute()         throws TaskException", "signatureAfterChange": "     public void execute()         throws TaskException", "diff": ["-            beforeInstrumentationClasspath.append( new Path( getProject(), srcDir.getAbsolutePath() ) );", "+            beforeInstrumentationClasspath.append( new Path( srcDir.getAbsolutePath() ) );", "-            afterInstrumentationClasspath.append( new Path( getProject(), instrumentDir.getAbsolutePath() ) );", "-            afterInstrumentationClasspath.append( new Path( getProject(), repositoryDir.getAbsolutePath() ) );", "-            afterInstrumentationClasspath.append( new Path( getProject(), srcDir.getAbsolutePath() ) );", "-            afterInstrumentationClasspath.append( new Path( getProject(), buildDir.getAbsolutePath() ) );", "+            afterInstrumentationClasspath.append( new Path( instrumentDir.getAbsolutePath() ) );", "+            afterInstrumentationClasspath.append( new Path( repositoryDir.getAbsolutePath() ) );", "+            afterInstrumentationClasspath.append( new Path( srcDir.getAbsolutePath() ) );", "+            afterInstrumentationClasspath.append( new Path( buildDir.getAbsolutePath() ) );", "-            repositoryClasspath.append( new Path( getProject(), instrumentDir.getAbsolutePath() ) );", "-            repositoryClasspath.append( new Path( getProject(), srcDir.getAbsolutePath() ) );", "-            repositoryClasspath.append( new Path( getProject(), repositoryDir.getAbsolutePath() ) );", "-            repositoryClasspath.append( new Path( getProject(), buildDir.getAbsolutePath() ) );", "+            repositoryClasspath.append( new Path( instrumentDir.getAbsolutePath() ) );", "+            repositoryClasspath.append( new Path( srcDir.getAbsolutePath() ) );", "+            repositoryClasspath.append( new Path( repositoryDir.getAbsolutePath() ) );", "+            repositoryClasspath.append( new Path( buildDir.getAbsolutePath() ) );", "-            iContractClasspath.append( new Path( getProject(), System.getProperty( \"java.home\" ) + File.separator + \"..\" + File.separator + \"lib\" + File.separator + \"tools.jar\" ) );", "-            iContractClasspath.append( new Path( getProject(), srcDir.getAbsolutePath() ) );", "-            iContractClasspath.append( new Path( getProject(), repositoryDir.getAbsolutePath() ) );", "-            iContractClasspath.append( new Path( getProject(), instrumentDir.getAbsolutePath() ) );", "-            iContractClasspath.append( new Path( getProject(), buildDir.getAbsolutePath() ) );", "+            iContractClasspath.append( new Path( System.getProperty( \"java.home\" ) + File.separator + \"..\" + File.separator + \"lib\" + File.separator + \"tools.jar\" ) );", "+            iContractClasspath.append( new Path( srcDir.getAbsolutePath() ) );", "+            iContractClasspath.append( new Path( repositoryDir.getAbsolutePath() ) );", "+            iContractClasspath.append( new Path( instrumentDir.getAbsolutePath() ) );", "+            iContractClasspath.append( new Path( buildDir.getAbsolutePath() ) );"]}]}
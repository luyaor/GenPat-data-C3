{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7c3d9bdfd7d87e026b420b8b9ff7b883", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cadd5229b1fa6e3455692010885b43e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/pvcs/Pvcs.java", "commitBeforeChange": "a2c15cb080a27a1535b6770628ac0a19655d1885", "commitAfterChange": "0f1c5dd88eba7cb386d894c0bf8aa34c883b4051", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private void massagePCLI( File in, File out )         throws FileNotFoundException, IOException", "signatureAfterChange": "     private void massagePCLI( final File in, final File out )         throws FileNotFoundException, IOException", "diff": ["-    private void massagePCLI( File in, File out )", "+    private void massagePCLI( final File in, final File out )", "-        BufferedReader inReader = new BufferedReader( new FileReader( in ) );", "-        BufferedWriter outWriter = new BufferedWriter( new FileWriter( out ) );", "+        final BufferedReader inReader = new BufferedReader( new FileReader( in ) );", "+        final BufferedWriter outWriter = new BufferedWriter( new FileWriter( out ) );", "-            String sNormal = s.replace( '\\\\', '/' );", "+            final String sNormal = s.replace( '\\\\', '/' );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee86400c650bccb64aac908e1b94eec7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Redirector.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "      private void errorStreams()", "signatureAfterChange": "      private void errorStreams()", "diff": ["-            String logHead = new StringBuffer(\"Error \").append(", "+            final String logHead = new StringBuffer(\"Error \").append(", "-            long funnelTimeout = 0L;", "-            OutputStreamFunneler funneler = new OutputStreamFunneler(", "+            final long funnelTimeout = 0L;", "+            final OutputStreamFunneler funneler = new OutputStreamFunneler(", "-            } catch (IOException eyeOhEx) {", "+            } catch (final IOException eyeOhEx) {", "-            OutputStream keepAliveError = new KeepAliveOutputStream(errorBaos);", "+            final OutputStream keepAliveError = new KeepAliveOutputStream(errorBaos);"]}]}
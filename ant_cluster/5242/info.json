{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9731948ca58410942d662a8ef5b152cc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b0d3a5da6d4136f2efa3f0625afc080", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/cli/org/apache/ant/cli/Commandline.java", "commitBeforeChange": "7e6ed5c57f2d59a4ef3089d3f66863441a296e54", "commitAfterChange": "984e12200a21e70c9ec9086f8c69e86aaa0d7de9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private AntConfig getAntConfig(File configArea) throws ConfigException", "signatureAfterChange": "     private AntConfig getAntConfig(File configArea) throws ConfigException", "diff": ["+        File configFile = new File(configArea, \"antconfig.xml\");", "-            File configFile = new File(configArea, \"antconfig.xml\");", "+            return getAntConfigFile(configFile);", "+        } catch (FileNotFoundException e) {", "+            // ignore if files are not present", "+            return null;", "+        }", "+    }", "-                 + configArea, e);", "-            if (!(e.getCause() instanceof FileNotFoundException)) {", "-                throw new ConfigException(\"Unable to parse config file from \"", "-                     + configArea, e);", "-            // ignore missing config files", "-            return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b672a28c1ba2e28e1ce78b9fe188ad0a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/modules/basic/Property.java", "commitBeforeChange": "5872737ff5d0006fffd509da87f4bc9115cb5a39", "commitAfterChange": "2a9f49ba6cde3f1bdf4a1234a4e4f14773c34736", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void configure( final Configuration configuration )         throws ConfigurationException", "signatureAfterChange": "      public void configure( final Configuration configuration )         throws ConfigurationException", "diff": ["-", "-            Object object = null;", "-", "-            try { object = getContext().resolveValue( value ); }", "-            catch( final TaskException te )", "-            {", "-                throw new ConfigurationException( \"Error resolving value: \" + value, te );", "-            }", "-", "-            if( null == object )", "-            {", "-                throw new ConfigurationException( \"Value for attribute \" + name + \"resolved to null\" );", "-            }", "+            final Object object = resolve( value );", "-                try", "-                {", "-                    final String convertedValue =", "-                        (String)m_converter.convert( String.class, object, getContext() );", "-                    setName( convertedValue );", "-                }", "-                catch( final Exception e )", "-                {", "-                    throw new ConfigurationException( \"Error converting value\", e );", "-                }", "+                final String convertedValue = (String)convert( String.class, object );", "+                setName( convertedValue );", "-                try", "-                {", "-                    final Boolean localScope =", "-                        (Boolean)m_converter.convert( Boolean.class, object, getContext() );", "-                    setLocalScope( Boolean.TRUE == localScope );", "-                }", "-                catch( final Exception e )", "-                {", "-                    throw new ConfigurationException( \"Error converting value\", e );", "-                }", "+                final Boolean localScope = (Boolean)convert( Boolean.class, object );", "+                setLocalScope( Boolean.TRUE == localScope );", "+                configure( value, child );", "-                m_configurer.configure( value, child, getContext() );"]}]}
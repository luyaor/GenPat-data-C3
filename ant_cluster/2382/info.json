{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9af2f3e53bdfc42afcbe56ea56da2557", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10912bee96b357ad2169d83d23473d5e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/embeddor/DefaultEmbeddor.java", "commitBeforeChange": "e7ab62bc9179b392804835d02155e43d3d2cf5d6", "commitAfterChange": "2e6e170fb375181f4438e1de44808c7adab508a2", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private void setupComponents()         throws Exception", "signatureAfterChange": "     private void setupComponents()         throws Exception", "diff": ["-        setupComponent( m_extensionManager );", "-        setupComponent( m_roleManager );", "-        setupComponent( m_aspectManager );", "-        setupComponent( m_converterRegistry );", "-        setupComponent( m_converter );", "-        setupComponent( m_executor );", "-        setupComponent( m_deployer );", "-        setupComponent( m_configurer );", "-    }", "+        for( Iterator iterator = m_components.iterator(); iterator.hasNext(); )", "+            final Component component = (Component)iterator.next();", "+            setupObject( component, m_parameters );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acf458eb6ce2d12b137800cbd5063b3e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/embeddor/DefaultEmbeddor.java", "commitBeforeChange": "e7ab62bc9179b392804835d02155e43d3d2cf5d6", "commitAfterChange": "2e6e170fb375181f4438e1de44808c7adab508a2", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void dispose()", "signatureAfterChange": "     public void dispose()", "diff": ["-        m_extensionManager = null;", "-        m_aspectManager = null;", "-        m_roleManager = null;", "-        m_converterRegistry = null;", "-        m_converter = null;", "-        m_executor = null;", "+        // Dispose any disposable components", "+        for( Iterator iterator = m_components.iterator(); iterator.hasNext(); )", "+        {", "+            Component component = (Component)iterator.next();", "+            if( component instanceof Disposable )", "+            {", "+                ( (Disposable)component ).dispose();", "+            }", "+        }", "+", "+        // Ditch everything", "+        m_components = null;", "-        m_configurer = null;", "-        m_binDir = null;", "-        m_libDir = null;"]}]}
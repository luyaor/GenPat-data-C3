{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d45c65085647bbddcba8f1fa43e6e61e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a89c3969a599fcb99ca812c0c278a5a9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "716e0cac2c969f99ad5c0f394fa176b73faced34", "commitAfterChange": "c4ad42ed39b270e1752007d643aa4499ed437ef2", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "     public String toURI(String path)", "signatureAfterChange": "     public String toURI(String path)", "diff": ["+        int len = path.length(), ch;", "-        CharacterIterator iter = new StringCharacterIterator(path);", "-        for (char c = iter.first(); c != CharacterIterator.DONE;", "-             c = iter.next()) {", "-            if (c < 256 && isSpecial[c]) {", "+        int i = 0;", "+        for (; i < len; i++) {", "+            ch = path.charAt(i);", "+            // if it's not an ASCII character, break here, and use UTF-8 encoding", "+            if (ch >= 128)", "+                break;", "+            if (gNeedEscaping[ch]) {", "-                sb.append(escapedChar1[c]);", "-                sb.append(escapedChar2[c]);", "-            } else {", "-                sb.append(c);", "+                sb.append(gAfterEscaping1[ch]);", "+                sb.append(gAfterEscaping2[ch]);", "+                // record the fact that it's escaped", "+            }", "+            else {", "+                sb.append((char)ch);", "+", "+        // we saw some non-ascii character", "+        if (i < len) {", "+            // get UTF-8 bytes for the remaining sub-string", "+            byte[] bytes = null;", "+            byte b;", "+            try {", "+                bytes = path.substring(i).getBytes(\"UTF-8\");", "+            } catch (java.io.UnsupportedEncodingException e) {", "+                // should never happen", "+                throw new BuildException(e);", "+            }", "+            len = bytes.length;", "+", "+            // for each byte", "+            for (i = 0; i < len; i++) {", "+                b = bytes[i];", "+                // for non-ascii character: make it positive, then escape", "+                if (b < 0) {", "+                    ch = b + 256;", "+                    sb.append('%');", "+                    sb.append(gHexChs[ch >> 4]);", "+                    sb.append(gHexChs[ch & 0xf]);", "+                }", "+                else if (gNeedEscaping[b]) {", "+                    sb.append('%');", "+                    sb.append(gAfterEscaping1[b]);", "+                    sb.append(gAfterEscaping2[b]);", "+                }", "+                else {", "+                    sb.append((char)b);", "+                }", "+            }", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e88f1fde7de8dac304cb97d00aaea066", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "c4782a847fbe7aacd68eca6fb71bff313e94e645", "commitAfterChange": "551b204c245d4861589a0be50f453507e3c72e81", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "     public String toURI(String path)", "signatureAfterChange": "     public String toURI(String path)", "diff": ["-", "-        int i = 0;", "-        for (; i < len; i++) {", "-            ch = path.charAt(i);", "-            // if it's not an ASCII character, break here, and use UTF-8 encoding", "-            if (ch >= 128)", "-                break;", "-            if (gNeedEscaping[ch]) {", "-                sb.append('%');", "-                sb.append(gAfterEscaping1[ch]);", "-                sb.append(gAfterEscaping2[ch]);", "-                // record the fact that it's escaped", "-            }", "-            else {", "-                sb.append((char)ch);", "-            }", "+        try {", "+            sb.append(Locator.encodeUri(path));", "+        } catch (UnsupportedEncodingException exc) {", "+            throw new BuildException(exc);", "-", "-        // we saw some non-ascii character", "-        if (i < len) {", "-            // get UTF-8 bytes for the remaining sub-string", "-            byte[] bytes = null;", "-            byte b;", "-            try {", "-                bytes = path.substring(i).getBytes(Locator.URI_ENCODING);", "-            } catch (java.io.UnsupportedEncodingException e) {", "-                // should never happen", "-                throw new BuildException(e);", "-            }", "-            len = bytes.length;", "-", "-            // for each byte", "-            for (i = 0; i < len; i++) {", "-                b = bytes[i];", "-                // for non-ascii character: make it positive, then escape", "-                if (b < 0) {", "-                    ch = b + 256;", "-                    sb.append('%');", "-                    sb.append(gHexChs[ch >> 4]);", "-                    sb.append(gHexChs[ch & 0xf]);", "-                }", "-                else if (gNeedEscaping[b]) {", "-                    sb.append('%');", "-                    sb.append(gAfterEscaping1[b]);", "-                    sb.append(gAfterEscaping2[b]);", "-                }", "-                else {", "-                    sb.append((char)b);", "-                }", "-            }", "-        }", "-"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5446edf2ef3ea3c80d487b67f2f86282", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a43273baae99b81aed84c5539826096", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultObjectConfigurer.java", "commitBeforeChange": "02a2cffe8f27603fdd8c7c83cc415170496a6fe1", "commitAfterChange": "9c6515959f5bf9016b0dd8c12691e1e7549b2dd0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void enableProperties()         throws ConfigurationException", "signatureAfterChange": "     private void enableProperties()         throws ConfigurationException", "diff": ["-        final Map adders = findAdders();", "+        final Map configurers = findPropertyConfigurers();", "-        final Iterator iterator = adders.keySet().iterator();", "+        final Iterator iterator = configurers.keySet().iterator();", "-            final String propName = (String)iterator.next();", "-            final Method addMethod = (Method)adders.get( propName );", "+            final String name = (String)iterator.next();", "+            final Method method = (Method)configurers.get( name );", "+            final boolean isSetter = method.getName().startsWith( \"set\" );", "-            final Class type = addMethod.getParameterTypes()[ 0 ];", "-            final boolean isTypedProp = ( propName.length() == 0 );", "+            final Class type = method.getParameterTypes()[ 0 ];", "+            final boolean isTypedProp = ( name.length() == 0 );", "-", "-            // Determine the max count for the property", "-            int maxCount = Integer.MAX_VALUE;", "-            if( addMethod != null && addMethod.getName().startsWith( \"set\" ) )", "+            else if( isTypedProp && isSetter )", "-                maxCount = 1;", "+                final String message =", "+                    REZ.getString( \"typed-setter-not-allowed.error\",", "+                                   m_class.getName(),", "+                                   type.getName() );", "+                throw new ConfigurationException( message );", "+            }", "+            else if( isTypedProp && null != m_typedPropertyConfigurer )", "+            {", "+                final String message =", "+                    REZ.getString( \"typed-adder-duplicates.error\",", "+                                   m_class.getName(),", "+                                   type.getName() );", "+                throw new ConfigurationException( message );", "-            final DefaultPropertyConfigurer configurer =", "-                new DefaultPropertyConfigurer( m_allProps.size(),", "-                                               type,", "-                                               addMethod,", "-                                               maxCount );", "-            m_allProps.add( configurer );", "-            if( isTypedProp )", "+            // Determine the max count for the property", "+            if( isSetter )", "-                m_typedPropConfigurer = configurer;", "+                final DefaultPropertyConfigurer setter =", "+                    new DefaultPropertyConfigurer( getPropertyCount(),", "+                                                   type,", "+                                                   method,", "+                                                   1 );", "+                m_setters.put( name, setter );", "-                m_props.put( propName, configurer );", "+                final DefaultPropertyConfigurer configurer =", "+                    new DefaultPropertyConfigurer( getPropertyCount(),", "+                                                   type,", "+                                                   method,", "+                                                   Integer.MAX_VALUE );", "+                if( isTypedProp )", "+                {", "+                    m_typedPropertyConfigurer = configurer;", "+                }", "+                else", "+                {", "+                    m_adders.put( name, configurer );", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc9dbdb04ff0df398fb3d2ec67866445", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultObjectConfigurer.java", "commitBeforeChange": "ba1f6f147af327833c018a27a46347cbd46625f3", "commitAfterChange": "a989b254f04d33e5bc2370b62121bd56830ac2f1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void enableProperties()         throws ConfigurationException", "signatureAfterChange": "     private void enableTypedAdder()         throws ConfigurationException", "diff": ["-    private void enableProperties()", "-        final Map configurers = findPropertyConfigurers();", "-        // Add the elements", "-", "-        final Iterator iterator = configurers.keySet().iterator();", "-            final String name = (String)iterator.next();", "-            final Method method = (Method)configurers.get( name );", "-            final boolean isSetter = method.getName().startsWith( \"set\" );", "-            // Determine and check the return type", "-            final boolean isTypedProp = ( name.length() == 0 );", "-            if( isTypedProp && !type.isInterface() )", "-            {", "-                final String message =", "-                    REZ.getString( \"typed-adder-non-interface.error\",", "-                                   m_class.getName(),", "-                                   type.getName() );", "-                throw new ConfigurationException( message );", "-            }", "-            else if( isTypedProp && isSetter )", "-            {", "-                final String message =", "-                    REZ.getString( \"typed-setter-not-allowed.error\",", "-                                   m_class.getName(),", "-                                   type.getName() );", "-                throw new ConfigurationException( message );", "-            }", "-            else if( isTypedProp && null != m_typedPropertyConfigurer )", "-            {", "-                final String message =", "-                    REZ.getString( \"typed-adder-duplicates.error\",", "-                                   m_class.getName(),", "-                                   type.getName() );", "-                throw new ConfigurationException( message );", "-            }", "-            // Determine the max count for the property", "-            if( isSetter )", "-            {", "-                final DefaultPropertyConfigurer setter =", "-                    new DefaultPropertyConfigurer( getPropertyCount(),", "-                                                   type,", "-                                                   method,", "-                                                   1 );", "-                m_setters.put( name, setter );", "-            }", "-            else", "-            {", "-                final DefaultPropertyConfigurer configurer =", "-                    new DefaultPropertyConfigurer( getPropertyCount(),", "-                                                   type,", "-                                                   method,", "-                                                   Integer.MAX_VALUE );", "-                if( isTypedProp )", "-                {", "-                    m_typedPropertyConfigurer = configurer;", "-                }", "-                else", "-                {", "-                    m_adders.put( name, configurer );", "-                }", "-            }", "+    private void enableTypedAdder()", "+        final Collection methods = findMethods( \"add\", true );", "+        if( methods.size() == 0 )", "+        {", "+            return;", "+        }", "+        final Method method = (Method)methods.iterator().next();", "+        final Class type = method.getParameterTypes()[ 0 ];", "+", "+        // TODO - this isn't necessary", "+        if( !type.isInterface() )", "+        {", "+            final String message =", "+                REZ.getString( \"typed-adder-non-interface.error\",", "+                               m_class.getName(),", "+                               type.getName() );", "+            throw new ConfigurationException( message );", "+        }", "+", "+        m_typedPropertyConfigurer", "+            = new DefaultPropertyConfigurer( getPropertyCount(),", "+                                             type,", "+                                             method,", "+                                             Integer.MAX_VALUE );", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d72fb7f7739977dfe425337b616c5e98", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83783d62084504c947f7493bb476189c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/RuntimeConfigurable.java", "commitBeforeChange": "261050f72e9a86e4249c9ee91495ec796f3c382b", "commitAfterChange": "e5f3393251f3b7b8b8df1e5300559828bc73d8f0", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public synchronized void maybeConfigure(Project p, boolean configureChildren)         throws BuildException", "signatureAfterChange": "     public synchronized void maybeConfigure(Project p, boolean configureChildren)         throws BuildException", "diff": ["-            for (Iterator iter = attributeMap.entrySet().iterator(); iter.hasNext();) {", "-                Map.Entry entry = (Map.Entry) iter.next();", "-                String name = (String) entry.getKey();", "-                String value = (String) entry.getValue();", "+            for (Entry<String, Object> entry : attributeMap.entrySet()) {", "+                String name = entry.getKey();", "+                Object value = entry.getValue();", "-                Object attrValue = PropertyHelper.getPropertyHelper(p).parseProperties(value);", "+                Object attrValue;", "+                if (value instanceof Evaluable) {", "+                    attrValue = ((Evaluable) value).eval();", "+                } else {", "+                    attrValue = PropertyHelper.getPropertyHelper(p).parseProperties(value.toString());", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec9028df0b6d6faed25989baa33bfd65", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XmlProperty.java", "commitBeforeChange": "f3eed91811c13007966599e1511dd57f2252ccff", "commitAfterChange": "86ffd422467bec1d81ff85e58eb75d1e589cc95c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void execute()             throws BuildException", "signatureAfterChange": "     public void execute()             throws BuildException", "diff": ["-        if (getFile() == null) {", "-            String msg = \"XmlProperty task requires a file attribute\";", "+        Resource r = getResource();", "+", "+        if (r == null) {", "+            String msg = \"XmlProperty task requires a source resource\";", "-            log(\"Loading \" + src.getAbsolutePath(), Project.MSG_VERBOSE);", "+            log(\"Loading \" + src, Project.MSG_VERBOSE);", "-            if (src.exists()) {", "+            if (r.isExists()) {", "-              Document document = builder.parse(src);", "+              Document document = null;", "+              if (src instanceof FileResource) {", "+                  document = builder.parse(((FileResource) src).getFile());", "+              } else {", "+                  document = builder.parse(src.getInputStream());", "+              }", "-                log(\"Unable to find property file: \" + src.getAbsolutePath(),", "+                log(\"Unable to find property resource: \" + r,"]}]}
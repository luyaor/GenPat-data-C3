{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e43494217d7bcd508736df0152aeba96", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c4f7d6f1c10d56696371f9a318aceb5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/SSHExec.java", "commitBeforeChange": "f3709b2e5b64d2d62ec339119d59109da61fc32e", "commitAfterChange": "eb4293a5c60d218c2410b4a03bfb90b29fd7cf52", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-", "-        /* called once */", "-        if (command != null) {", "-            log(\"cmd : \" + command, Project.MSG_INFO);", "-            executeCommand(command);", "-        } else { // read command resource and execute for each command", "-            try {", "-                BufferedReader br = new BufferedReader(", "-                    new InputStreamReader(commandResource.getInputStream()));", "-                String cmd;", "-                while ((cmd = br.readLine()) != null) {", "-                    log(\"cmd : \" + cmd, Project.MSG_INFO);", "-                    executeCommand(cmd);", "+        ", "+        Session session = null;", "+        ", "+        try {", "+            session = openSession();", "+            /* called once */", "+            if (command != null) {", "+                log(\"cmd : \" + command, Project.MSG_INFO);", "+                ByteArrayOutputStream out = executeCommand(session, command);", "+                if(outputProperty != null) {", "+                    //#bugzilla 43437", "+                    getProject().setNewProperty(outputProperty, command + \" : \" + out);", "-                FileUtils.close(br);", "-            } catch (IOException e) {", "-                throw new BuildException(e);", "+            } else { // read command resource and execute for each command", "+                try {", "+                    BufferedReader br = new BufferedReader(", "+                            new InputStreamReader(commandResource.getInputStream()));", "+                    String cmd;", "+                    String output = \"\";", "+                    while ((cmd = br.readLine()) != null) {", "+                        log(\"cmd : \" + cmd, Project.MSG_INFO);", "+                        ByteArrayOutputStream out = executeCommand(session, cmd);", "+                        output += cmd + \" : \" + out + \"\\n\";", "+                    }", "+                    if(outputProperty != null) {", "+                        //#bugzilla 43437", "+                        getProject().setNewProperty(outputProperty, output);", "+                    }", "+                    FileUtils.close(br);", "+                } catch (IOException e) {", "+                    throw new BuildException(e);", "+                }", "+            }", "+        } catch(JSchException e) {", "+            throw new BuildException(e);", "+        } finally {", "+            if (session != null && session.isConnected()) {", "+                session.disconnect();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0d9524954b976e510dc0d3bd7a31772", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/SSHExec.java", "commitBeforeChange": "41373655c7e93243aa140ab41cfc2fbf680b6dc6", "commitAfterChange": "d796e53fea54cad6b5c2dfb6f892d704504b09f4", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": "      private ByteArrayOutputStream executeCommand(Session session, String cmd)         throws BuildException", "signatureAfterChange": "      private ByteArrayOutputStream executeCommand(Session session, String cmd)         throws BuildException", "diff": ["+        InputStream istream = null ;", "+        if (inputFile != null) {", "+            try {", "+                istream = new FileInputStream(inputFile) ;", "+            } catch (IOException e) {", "+                // because we checked the existence before, this one", "+                // shouldn't happen What if the file exists, but there", "+                // are no read permissions?", "+                log(\"Failed to read \" + inputFile + \" because of: \"", "+                    + e.getMessage(), Project.MSG_WARN);", "+            }", "+        }", "+        if (inputProperty != null) {", "+            String inputData = getProject().getProperty(inputProperty) ;", "+            if (inputData != null) {", "+                istream = new ByteArrayInputStream(inputData.getBytes()) ;", "+            }        \t", "+        }", "+", "+            if (istream != null) {", "+                channel.setInputStream(istream);", "+            }", "+        } finally {", "+            FileUtils.close(istream);", "+"]}]}
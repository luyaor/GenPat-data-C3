{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c7bc3cd7aa394d9533792d26b8fc43cd", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e60aa47af6e6764f7c28c1974c1d4f59", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/AggregateTransformer.java", "commitBeforeChange": "37e1a669340af86ea163020ac3cec13cbd881b29", "commitAfterChange": "ce8272e144b8168b864015d2dd304410ebb236fc", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": "      protected void createCascadingStyleSheet() throws IOException, SAXException", "signatureAfterChange": "     static XalanExecutor newInstance(AggregateTransformer caller) throws BuildException", "diff": ["-", "-    protected void createCascadingStyleSheet() throws IOException, SAXException {", "-        InputStream in = null;", "-        if (styleDir == null) {", "-            in = getResourceAsStream(\"html/stylesheet.css\");", "-        } else {", "-            in = new FileInputStream(new File(styleDir, \"stylesheet.css\"));", "-        }", "-        OutputStream out = new FileOutputStream( new File(toDir, \"stylesheet.css\"));", "-        copy(in, out);", "-    }", "+    static XalanExecutor newInstance(AggregateTransformer caller) throws BuildException {", "+        Class procVersion = null;", "+        XalanExecutor executor = null;", "+        try {", "+            procVersion = Class.forName(\"org.apache.xalan.processor.XSLProcessorVersion\");", "+            executor = new Xalan2Executor();", "+        } catch (Exception xalan2missing){", "+            try {", "+                procVersion = Class.forName(\"org.apache.xalan.xslt.XSLProcessorVersion\");", "+                executor = new Xalan1Executor();", "+            } catch (Exception xalan1missing){", "+                throw new BuildException(\"Could not find xalan2 nor xalan1 in the classpath. Check http://xml.apache.org/xalan-j\");", "+            }", "+        }", "+        String version = getXalanVersion(procVersion);", "+        caller.task.log(\"Using Xalan version: \" + version);", "+        executor.setCaller(caller);", "+        return executor;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb3270ffba8d319794d601d2e2f3243f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/antlib/src/main/org/apache/tools/ant/taskdefs/Antlib.java", "commitBeforeChange": "1d2784e6d5429505b3b420e342992c22cd5373a6", "commitAfterChange": "6252354506953777f5b921b8746a54e7d317475a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private InputStream getDescriptor(File file)         throws BuildException", "signatureAfterChange": "         private URL getDescriptorURL(File file, String resourceName)", "diff": ["+         */", "+        private URL getDescriptorURL(File file, String resourceName) {", "+            try {", "+                if (!file.exists()) {", "+                    return null;", "+                }", "+", "+                if (file.isDirectory()) {", "+                    File resource = new File(file, resourceName);", "+", "+                    if (resource.exists()) {", "+                        try {", "+                            return new URL(\"file:\"+resource.toString());", "+                        } catch (MalformedURLException ex) {", "+                            return null;", "+                        }", "+                    }", "+                }", "+                else {", "+                    ZipFile zipFile = new ZipFile(file);", "+                    try {", "+                        ZipEntry entry = zipFile.getEntry(resourceName);", "+                        if (entry != null) {", "+                            try {", "+                                return new URL(\"jar:file:\"+file.toString()+\"!/\"+entry);", "+                            } catch (MalformedURLException ex) {", "+                                return null;", "+                            }", "+                        }", "+                    }", "+                    finally {", "+                        zipFile.close();", "+                    }", "+                }", "+            }", "+            catch (Exception e) {", "+                e.printStackTrace();", "+            }", "+", "+            return null;", "+        }", "-    private InputStream getDescriptor(File file)", "-        throws BuildException {", "-        try {", "-            final ZipFile zipfile = new ZipFile(file);", "-            ZipEntry entry = zipfile.getEntry(ANT_DESCRIPTOR);", "-            if (entry == null) {", "-                return null;", "-            }", "-", "-            // Guarantee that when Entry is closed so does the zipfile instance.", "-            return", "-                new FilterInputStream(zipfile.getInputStream(entry)) {", "-                    public void close()", "-                        throws IOException {", "-                        super.close();", "-                        zipfile.close();", "-                    }", "-                };", "-        }", "-        catch (ZipException ze) {", "-            throw new BuildException(\"Not a library file.\", ze, location);", "-        }", "-        catch (IOException ioe) {", "-            throw new BuildException(\"Cannot read library content.\",", "-                    ioe, location);", "-        }"]}]}
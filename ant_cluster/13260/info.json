{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f8f5cc1155abf7600c8501710a663037", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b18dbb1ed20b8ef67b3d0f5bba6e8c6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "93db46be115205107729104e728d45687d885295", "commitAfterChange": "20ab59bff57796a67e1cdfefbc29826c7d55edba", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": "      private void qSort3( int loSt, int hiSt, int dSt )", "signatureAfterChange": "      private void qSort3( int loSt, int hiSt, int dSt )", "diff": ["-                if( workDone > workLimit && firstAttempt )", "+                if( m_workDone > m_workLimit && m_firstAttempt )", "-            med = med3( block[ zptr[ lo ] + d + 1 ],", "-                        block[ zptr[ hi ] + d + 1 ],", "-                        block[ zptr[ ( lo + hi ) >> 1 ] + d + 1 ] );", "+            med = med3( m_block[ m_zptr[ lo ] + d + 1 ],", "+                        m_block[ m_zptr[ hi ] + d + 1 ],", "+                        m_block[ m_zptr[ ( lo + hi ) >> 1 ] + d + 1 ] );", "-                    n = ( (int)block[ zptr[ unLo ] + d + 1 ] ) - med;", "+                    n = ( (int)m_block[ m_zptr[ unLo ] + d + 1 ] ) - med;", "-                        temp = zptr[ unLo ];", "-                        zptr[ unLo ] = zptr[ ltLo ];", "-                        zptr[ ltLo ] = temp;", "+                        temp = m_zptr[ unLo ];", "+                        m_zptr[ unLo ] = m_zptr[ ltLo ];", "+                        m_zptr[ ltLo ] = temp;", "-                    n = ( (int)block[ zptr[ unHi ] + d + 1 ] ) - med;", "+                    n = ( (int)m_block[ m_zptr[ unHi ] + d + 1 ] ) - med;", "-                        temp = zptr[ unHi ];", "-                        zptr[ unHi ] = zptr[ gtHi ];", "-                        zptr[ gtHi ] = temp;", "+                        temp = m_zptr[ unHi ];", "+                        m_zptr[ unHi ] = m_zptr[ gtHi ];", "+                        m_zptr[ gtHi ] = temp;", "-                temp = zptr[ unLo ];", "-                zptr[ unLo ] = zptr[ unHi ];", "-                zptr[ unHi ] = temp;", "+                temp = m_zptr[ unLo ];", "+                m_zptr[ unLo ] = m_zptr[ unHi ];", "+                m_zptr[ unHi ] = temp;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe9ecfcb32bd2672c6854535384c7275", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "93db46be115205107729104e728d45687d885295", "commitAfterChange": "20ab59bff57796a67e1cdfefbc29826c7d55edba", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "      private void generateMTFValues()", "signatureAfterChange": "      private void generateMTFValues()", "diff": ["-        EOB = nInUse + 1;", "+        EOB = m_nInUse + 1;", "-            mtfFreq[ i ] = 0;", "+            m_mtfFreq[ i ] = 0;", "-        for( i = 0; i < nInUse; i++ )", "+        for( i = 0; i < m_nInUse; i++ )", "-        for( i = 0; i <= last; i++ )", "+        for( i = 0; i <= m_last; i++ )", "-            ll_i = unseqToSeq[ block[ zptr[ i ] ] ];", "+            ll_i = m_unseqToSeq[ m_block[ m_zptr[ i ] ] ];", "-                                szptr[ wr ] = (short)RUNA;", "+                                m_szptr[ wr ] = (short)RUNA;", "-                                mtfFreq[ RUNA ]++;", "+                                m_mtfFreq[ RUNA ]++;", "-                                szptr[ wr ] = (short)RUNB;", "+                                m_szptr[ wr ] = (short)RUNB;", "-                                mtfFreq[ RUNB ]++;", "+                                m_mtfFreq[ RUNB ]++;", "-                szptr[ wr ] = (short)( j + 1 );", "+                m_szptr[ wr ] = (short)( j + 1 );", "-                mtfFreq[ j + 1 ]++;", "+                m_mtfFreq[ j + 1 ]++;", "-                        szptr[ wr ] = (short)RUNA;", "+                        m_szptr[ wr ] = (short)RUNA;", "-                        mtfFreq[ RUNA ]++;", "+                        m_mtfFreq[ RUNA ]++;", "-                        szptr[ wr ] = (short)RUNB;", "+                        m_szptr[ wr ] = (short)RUNB;", "-                        mtfFreq[ RUNB ]++;", "+                        m_mtfFreq[ RUNB ]++;", "-        szptr[ wr ] = (short)EOB;", "+        m_szptr[ wr ] = (short)EOB;", "-        mtfFreq[ EOB ]++;", "+        m_mtfFreq[ EOB ]++;", "-        nMTF = wr;", "+        m_nMTF = wr;"]}]}
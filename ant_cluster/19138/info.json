{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac77eae40a2770f8aef4e427d15e91ab", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76813486bf72bcf8c954093815af9a0a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/dotnet/Ilasm.java", "commitBeforeChange": "919e3c42b4f5fe58f906c93171d446e5cda882e0", "commitAfterChange": "9e8e57522752c19d172b764350480e0d7b69c112", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void executeOneFile( String targetFile )         throws TaskException", "signatureAfterChange": "     public void executeOneFile( final String targetFile )         throws TaskException", "diff": ["-    public void executeOneFile( String targetFile )", "+    public void executeOneFile( final String targetFile )", "-        NetCommand command = new NetCommand( this, exe_title, exe_name );", "-        command.setFailOnError( getFailFailOnError() );", "-        //DEBUG helper", "-        command.setTraceCommandLine( true );", "-        //fill in args", "-        command.addArgument( getDebugParameter() );", "-        command.addArgument( getTargetTypeParameter() );", "-        command.addArgument( getListingParameter() );", "-        command.addArgument( getOutputFileParameter() );", "-        command.addArgument( getResourceFileParameter() );", "-        command.addArgument( getVerboseParameter() );", "-        command.addArgument( getKeyfileParameter() );", "-        command.addArgument( getExtraOptionsParameter() );", "+        final ExecManager execManager = (ExecManager)getService( ExecManager.class );", "+        final Execute exe = new Execute( execManager );", "+        exe.setReturnCode( 0 );", "-        /*", "-         * space for more argumentativeness", "-         * command.addArgument();", "-         * command.addArgument();", "-         */", "-        command.addArgument( targetFile );", "-        //now run the command of exe + settings + file", "-        command.runCommand();", "+        final Commandline cmd = exe.getCommandline();", "+        cmd.setExecutable( EXE_NAME );", "+        addArgument( cmd, getDebugParameter() );", "+        addArgument( cmd, getTargetTypeParameter() );", "+        addArgument( cmd, getListingParameter() );", "+        addArgument( cmd, getOutputFileParameter() );", "+        addArgument( cmd, getResourceFileParameter() );", "+        addArgument( cmd, getVerboseParameter() );", "+        addArgument( cmd, getKeyfileParameter() );", "+        addArgument( cmd, getExtraOptionsParameter() );", "+        addArgument( cmd, targetFile );", "+        exe.execute();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5292a2ba0f519b829569f54111b2fc4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/dotnet/Ilasm.java", "commitBeforeChange": "919e3c42b4f5fe58f906c93171d446e5cda882e0", "commitAfterChange": "9e8e57522752c19d172b764350480e0d7b69c112", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void executeOneFile( String targetFile )         throws TaskException", "signatureAfterChange": "     public void executeOneFile( final String targetFile )         throws TaskException", "diff": ["-    public void executeOneFile( String targetFile )", "+    public void executeOneFile( final String targetFile )", "-        NetCommand command = new NetCommand( this, exe_title, exe_name );", "-        command.setFailOnError( getFailFailOnError() );", "-        //DEBUG helper", "-        command.setTraceCommandLine( true );", "-        //fill in args", "-        command.addArgument( getDebugParameter() );", "-        command.addArgument( getTargetTypeParameter() );", "-        command.addArgument( getListingParameter() );", "-        command.addArgument( getOutputFileParameter() );", "-        command.addArgument( getResourceFileParameter() );", "-        command.addArgument( getVerboseParameter() );", "-        command.addArgument( getKeyfileParameter() );", "-        command.addArgument( getExtraOptionsParameter() );", "+        final ExecManager execManager = (ExecManager)getService( ExecManager.class );", "+        final Execute exe = new Execute( execManager );", "+        exe.setReturnCode( 0 );", "-        /*", "-         * space for more argumentativeness", "-         * command.addArgument();", "-         * command.addArgument();", "-         */", "-        command.addArgument( targetFile );", "-        //now run the command of exe + settings + file", "-        command.runCommand();", "+        final Commandline cmd = exe.getCommandline();", "+        cmd.setExecutable( EXE_NAME );", "+        addArgument( cmd, getDebugParameter() );", "+        addArgument( cmd, getTargetTypeParameter() );", "+        addArgument( cmd, getListingParameter() );", "+        addArgument( cmd, getOutputFileParameter() );", "+        addArgument( cmd, getResourceFileParameter() );", "+        addArgument( cmd, getVerboseParameter() );", "+        addArgument( cmd, getKeyfileParameter() );", "+        addArgument( cmd, getExtraOptionsParameter() );", "+        addArgument( cmd, targetFile );", "+        exe.execute();", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ff695a0bb1351e108b832730a4b8ba8c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3510a9e216d8f4e92f552e13fd30be51", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/junit/XMLResultAggregatorTest.java", "commitBeforeChange": "cd69b894b2a5a02c6cc32c8caa4d7e949074eb9e", "commitAfterChange": "735f3fca3e3ce3a6b44109a44836d8ab64215e75", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testFrames() throws Exception", "signatureAfterChange": "      public void testFrames() throws Exception", "diff": ["+        // For now, skip this test on JDK 6 (and below); see below for why:", "+        try {", "+            Class.forName(\"java.nio.file.Files\");", "+        } catch (ClassNotFoundException x) {", "+            return;", "+        }", "-        PrintWriter pw = new PrintWriter(xml);", "+        PrintWriter pw = new PrintWriter(new FileOutputStream(xml));", "+        /* getResourceAsStream override unnecessary on JDK 7. Ought to work around JAXP #6723276 in JDK 6, but causes a TypeCheckError in FunctionCall for reasons TBD:", "+        Thread.currentThread().setContextClassLoader(new ClassLoader(ClassLoader.getSystemClassLoader().getParent()) {", "+            public InputStream getResourceAsStream(String name) {", "+                if (name.startsWith(\"META-INF/services/\")) {", "+                    return new ByteArrayInputStream(new byte[0]);", "+                }", "+                return super.getResourceAsStream(name);", "+            }", "+        });", "+        */", "+        // Use the JRE's Xerces, not lib/optional/xerces.jar:", "+        Thread.currentThread().setContextClassLoader(ClassLoader.getSystemClassLoader().getParent());", "+        // Tickle #51668:", "+        System.setSecurityManager(new SecurityManager() {public void checkPermission(Permission perm) {}});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37dde47c91e56ee4e54ceeeae481c0d0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/taskdefs/optional/XmlValidateTest.java", "commitBeforeChange": "6650efb105e0cdd4941ffc2c98f2aa8ee6e1dfea", "commitAfterChange": "e42bd46a51dd6347c0961e311bd3717c24d4ea8c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void testXmlSchemaBad()", "signatureAfterChange": "     public void testXmlSchemaBad()", "diff": ["-        expectBuildExceptionContaining(", "-                \"testSchemaBad\",", "-                \"Bad Schema Validation\", \"not a valid XML document\");", "+        try {", "+            executeTarget(\"testSchemaBad\");", "+            fail(\"Should throw BuildException because 'Bad Schema Validation'\");", "+            expectBuildExceptionContaining(\"testSchemaBad\",", "+                                           \"Bad Schema Validation\", ", "+                                           \"not a valid XML document\");", "+        } catch (BuildException e) {", "+            if (e.getMessage()", "+                .endsWith(\" doesn't recognize feature http://apache.org/xml/features/validation/schema\") ||", "+                e.getMessage()", "+                .endsWith(\" doesn't support feature http://apache.org/xml/features/validation/schema\")) {", "+                System.err.println(\" skipped, parser doesn't support schema\");", "+            } else {", "+                assertTrue(e.getMessage()", "+                           .indexOf(\"not a valid XML document\") > -1);", "+            }", "+        }"]}]}
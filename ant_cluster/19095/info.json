{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f81fc7e4f9b133f30047e900540a53dc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ecafcb0e4ddc3135f096c99ebdcdaff", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "16bab4de70072d2c7fbcc17609068ed036e17ecf", "commitAfterChange": "77ebd3353d2adddf3021e6a2b1e99d0d0ee81c54", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "     private AttributeSetter createAttributeSetter(final Method m,                                                   Class arg,                                                   final String attrName)", "signatureAfterChange": "     private AttributeSetter createAttributeSetter(final Method m,                                                   Class arg,                                                   final String attrName)", "diff": ["+        } else if (java.lang.Long.class.equals(reflectedArg)) {", "+            return new AttributeSetter(m) {", "+                public void set(Project p, Object parent, String value)", "+                        throws InvocationTargetException, IllegalAccessException, BuildException {", "+                    long ell;", "+                    try {", "+                        ell = StringUtils.parseHumanSizes(value);", "+                    } catch (Exception e) {", "+                        throw new BuildException(e);", "+                    }", "+                    m.invoke(parent, new Object[] { new Long(ell) });", "+                }", "+            };", "+        } else {", "-        // char and boolean", "-        } else {", "+        // char, boolean, and long."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d8108bcf55f49f6ed278dbf21419d3f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "58cde0d26ddac7ad67880de2131fb9b90548fbe8", "commitAfterChange": "084609e5ef285ee28ab65f11f0ec423a1526f1d6", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private AttributeSetter createAttributeSetter(final Method m,                                                   final Class arg)", "signatureAfterChange": "     private AttributeSetter createAttributeSetter(final Method m,                                                   final Class arg)", "diff": ["+        // EnumeratedAttributes have their own helper class", "+        } else if (org.apache.tools.ant.EnumeratedAttribute.class.isAssignableFrom(arg)) {", "+            return new AttributeSetter() {", "+                    public void set(Project p, Object parent, String value) ", "+                        throws InvocationTargetException, IllegalAccessException, BuildException {", "+                        try {", "+                            EnumeratedAttribute ea = ", "+                                (EnumeratedAttribute)arg.newInstance();", "+                            ea.setValue(value);", "+                            m.invoke(parent, new EnumeratedAttribute[] {ea});", "+                        } catch (InstantiationException ie) {", "+                            throw new BuildException(ie);", "+                        }", "+                    }", "+                };", "+        ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef7ba0fc1a38944c8afb27e33b460f77", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "60f48875263c0b85f9eab0d94454e3ce3efce5c2", "commitAfterChange": "f3399d56432f61a4125c74cf734f4114f5f8ab72", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private AttributeSetter createAttributeSetter(final Method m,                                                   Class arg,                                                   final String attrName)", "signatureAfterChange": "     private AttributeSetter createAttributeSetter(final Method m,                                                   Class arg,                                                   final String attrName)", "diff": ["-        } else if (org.apache.tools.ant.types.EnumeratedAttribute.class.isAssignableFrom(reflectedArg)) {", "+        } else if (EnumeratedAttribute.class.isAssignableFrom(reflectedArg)) {", "-                            org.apache.tools.ant.types.EnumeratedAttribute ea =", "-                                (org.apache.tools.ant.types.EnumeratedAttribute) reflectedArg.newInstance();", "+                            EnumeratedAttribute ea =", "+                                (EnumeratedAttribute) reflectedArg.newInstance();", "-                                if ( p != null ) {", "-                                    p.setProjectReference( attribute );", "+                                if (p != null) {", "+                                    p.setProjectReference(attribute);", "+                // ignore"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bba13d1be2388a9b4d83e0c4b8be80ec", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "442f228f2fd38bdec874d2b9838e6fdc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/extensions/JarLibManifestTask.java", "commitBeforeChange": "0e481b8463a698cc76b183b097eaa08db32fa6e4", "commitAfterChange": "c66d1357e4ef1e3e9b56512ab6b63784fc47220b", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private String[] getNames( final Extension[] extensions )", "signatureAfterChange": "     private static ArrayList toExtensions( final ArrayList adapters )         throws TaskException", "diff": ["-     */", "-    private String[] getNames( final Extension[] extensions )", "-    {", "-        final String[] results = new String[ extensions.length ];", "-        for( int i = 0; i < results.length; i++ )", "-        {", "-            //Perhaps generate mangled names based on extension in future", "-            results[ i ] = \"lib\" + i;", "-        }", "-", "-        return results;", "+    private static ArrayList toExtensions( final ArrayList adapters )", "+        throws TaskException", "+        final ArrayList results = new ArrayList();", "+", "+        final int size = adapters.size();", "+        for( int i = 0; i < size; i++ )", "+            final ExtensionAdapter adapter =", "+                (ExtensionAdapter)adapters.get( i );", "+            final Extension extension = adapter.toExtension();", "+            results.add( extension );", "+", "+        return results;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "908debe1051586e151b4d2d3fc0fb73b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "aae6a87238f255f5599bd1a559c1da34767e8716", "commitAfterChange": "296f7cecd0347b79f837be45c671e0fa9054f402", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 50, "signatureBeforeChange": "         public Process exec(Project project, String[] cmd, String[] env)              throws IOException", "signatureAfterChange": "          private void deleteAfter(final File f, final Process p)", "diff": ["-         */", "-        public Process exec(Project project, String[] cmd, String[] env)", "-             throws IOException {", "-            // Need to quote arguments with spaces, and to escape", "-            // quote characters", "-            String[] newcmd = new String[cmd.length];", "-            for (int i = 0; i < cmd.length; i++) {", "-                newcmd[i] = Commandline.quoteArgument(cmd[i]);", "-            }", "-            if (project != null) {", "-                project.log(\"Execute:Java11CommandLauncher: \"", "-                    + Commandline.describeCommand(newcmd), Project.MSG_DEBUG);", "-            }", "-            return Runtime.getRuntime().exec(newcmd, env);", "-        }", "+        private void deleteAfter(final File f, final Process p) {", "+            new Thread() {", "+                public void run() {", "+                    try {", "+                        p.waitFor();", "+                    }", "+                    catch (InterruptedException e) {", "+                        //ignore", "+                    }", "+                    FILE_UTILS.delete(f);", "+                }", "+            }.start();", "+        }"]}]}
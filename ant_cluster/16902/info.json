{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d8045b97ebaebdfc7a44c5ace46e3d80", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e5cd904e862c4557be8993cd31bb488", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/test/org/apache/myrmidon/components/configurer/test/DefaultConfigurerTestCase.java", "commitBeforeChange": "ba1f6f147af327833c018a27a46347cbd46625f3", "commitAfterChange": "a989b254f04d33e5bc2370b62121bd56830ac2f1", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "     public void testIgnoreStringMethods()         throws Exception", "signatureAfterChange": "     public void testIgnoreStringMethods()         throws Exception", "diff": ["-        DefaultConfiguration elem = new DefaultConfiguration( \"prop1\", \"test\" );", "+        config.setAttribute( \"prop1\", \"some-value\" );", "+        config.setValue( \"99\" );", "+        DefaultConfiguration elem = new DefaultConfiguration( \"prop2\", \"test\" );", "-        elem = new DefaultConfiguration( \"prop2\", \"test\" );", "+        elem = new DefaultConfiguration( \"my-type1\", \"test\" );", "+", "+        registerConverter( ObjectToMyRole1Converter.class, String.class, MyRole1.class );", "+        registerConverter( StringToIntegerConverter.class, String.class, Integer.class );", "+        registerType( DataType.ROLE, \"my-type1\", MyType1.class );", "-        expected.addProp1( new ConfigTestIgnoreStringMethods() );", "+        expected.setProp1( new MyRole1Adaptor( \"some-value\" ) );", "+        expected.add( new MyType1() );", "+        expected.addContent( 99 );", "+        assertEquals( expected, test );", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5946a35e1dfd38531c29b1a77342420f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/testcases/org/apache/myrmidon/components/configurer/test/DefaultConfigurerTestCase.java", "commitBeforeChange": "ba1f6f147af327833c018a27a46347cbd46625f3", "commitAfterChange": "a989b254f04d33e5bc2370b62121bd56830ac2f1", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "     public void testIgnoreStringMethods()         throws Exception", "signatureAfterChange": "     public void testIgnoreStringMethods()         throws Exception", "diff": ["-        DefaultConfiguration elem = new DefaultConfiguration( \"prop1\", \"test\" );", "+        config.setAttribute( \"prop1\", \"some-value\" );", "+        config.setValue( \"99\" );", "+        DefaultConfiguration elem = new DefaultConfiguration( \"prop2\", \"test\" );", "-        elem = new DefaultConfiguration( \"prop2\", \"test\" );", "+        elem = new DefaultConfiguration( \"my-type1\", \"test\" );", "+", "+        registerConverter( ObjectToMyRole1Converter.class, String.class, MyRole1.class );", "+        registerConverter( StringToIntegerConverter.class, String.class, Integer.class );", "+        registerType( DataType.ROLE, \"my-type1\", MyType1.class );", "-        expected.addProp1( new ConfigTestIgnoreStringMethods() );", "+        expected.setProp1( new MyRole1Adaptor( \"some-value\" ) );", "+        expected.add( new MyType1() );", "+        expected.addContent( 99 );", "+        assertEquals( expected, test );", "+    }"]}]}
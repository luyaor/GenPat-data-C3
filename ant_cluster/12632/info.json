{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f3191904dcaee5440bd3e34b835f9d48", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ecafcb0e4ddc3135f096c99ebdcdaff", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "16bab4de70072d2c7fbcc17609068ed036e17ecf", "commitAfterChange": "77ebd3353d2adddf3021e6a2b1e99d0d0ee81c54", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "     private AttributeSetter createAttributeSetter(final Method m,                                                   Class arg,                                                   final String attrName)", "signatureAfterChange": "     private AttributeSetter createAttributeSetter(final Method m,                                                   Class arg,                                                   final String attrName)", "diff": ["+        } else if (java.lang.Long.class.equals(reflectedArg)) {", "+            return new AttributeSetter(m) {", "+                public void set(Project p, Object parent, String value)", "+                        throws InvocationTargetException, IllegalAccessException, BuildException {", "+                    long ell;", "+                    try {", "+                        ell = StringUtils.parseHumanSizes(value);", "+                    } catch (Exception e) {", "+                        throw new BuildException(e);", "+                    }", "+                    m.invoke(parent, new Object[] { new Long(ell) });", "+                }", "+            };", "+        } else {", "-        // char and boolean", "-        } else {", "+        // char, boolean, and long."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2d4a7ccaa3c791f56080f53c10e3420", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "3e919cffbef3ed88a7920a9e79c1b355524b3403", "commitAfterChange": "139cee57f7f134a2ac8b80776790d7129c24685f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 54, "signatureBeforeChange": "                              Object create(                                 Project project, Object parent, Object child)                                 throws InvocationTargetException,                                 IllegalAccessException, InstantiationException", "signatureAfterChange": "          Object create(Project project, Object parent, Object child)                 throws InvocationTargetException,                 IllegalAccessException, InstantiationException", "diff": ["-", "-                            Object create(", "-                                Project project, Object parent, Object child)", "-                                throws InvocationTargetException,", "-                                IllegalAccessException, InstantiationException {", "-                                if (child != null) {", "-                                    // Empty", "-                                } else if (c.getParameterTypes().length == 0) {", "-                                    child = c.newInstance(new Object[] {});", "-                                } else {", "-                                    child = c.newInstance(new Object[] {", "-                                        project});", "-                                }", "-                                if (child instanceof  PreSetDef.PreSetDefinition) {", "-                                    child = ((PreSetDef.PreSetDefinition) child)", "-                                        .createObject(project);", "-                                }", "-                                return child;", "-                            }", "+", "+        Object create(Project project, Object parent, Object child)", "+                throws InvocationTargetException,", "+                IllegalAccessException, InstantiationException {", "+            if (child != null) {", "+                // Empty", "+            } else {", "+                child = constructor.newInstance(", "+                    (constructor.getParameterTypes().length == 0)", "+                    ? new Object[] {} : new Object[] {project});", "+            }", "+            if (child instanceof PreSetDef.PreSetDefinition) {", "+                child = ((PreSetDef.PreSetDefinition) child)", "+                    .createObject(project);", "+            }", "+            if (behavior == ADD) {", "+                istore(parent, child);", "+            }", "+            return child;", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5ac9e8eb2c325d55632f3ef899881b98", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b1d233e70386ba0dd59ae53318aa543", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/filterreaders/src/main/org/apache/tools/ant/filters/ClassConstants.java", "commitBeforeChange": "a172bceca6b32c0fca99f651053e0805bc50c5c3", "commitAfterChange": "ce2a2bc4bcd641a5feb7e435783a4473e4d0b659", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public final int read() throws IOException", "signatureAfterChange": "     public final int read() throws IOException", "diff": ["-                final StringBuffer sb = new StringBuffer();", "-                final ByteArrayInputStream bis = new ByteArrayInputStream(bytes);", "-                final ClassParser parser = new ClassParser(bis, \"\");", "-                final JavaClass javaClass = parser.parse();", "-                final Field[] fields = javaClass.getFields();", "-                for (int i = 0; i < fields.length; i++) {", "-                    final Field field = fields[i];", "-                    if (field != null) {", "-                        final ConstantValue cv = field.getConstantValue();", "-                        if (cv != null) {", "-                            String cvs = cv.toString();", "-                            //Remove start and end quotes if field is a String", "-                            if (cvs.startsWith(\"\\\"\") && cvs.endsWith(\"\\\"\")) {", "-                                cvs = cvs.substring(1, cvs.length() - 1);", "-                            }", "-                            sb.append(field.getName());", "-                            sb.append('=');", "-                            sb.append(cvs);", "-                            sb.append(LS);", "-                        }", "-                    }", "-                }", "-", "+                final StringBuffer sb = JavaClassHelper.getConstants(bytes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66910b2da91a80cf8bbe7ff1a0c8515c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "6c89d5a7b85b61086692c8037aa544dc85cf2e7e", "commitAfterChange": "20a1e91d17753399f8d18a5123f8e5e35e0409da", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-", "-                // XXX ideally would also enter includedDirectories to the archive", "-\t\tHashtable parentDirs = new Hashtable();", "-", "+                                ", "-                    String[] files = scanners[j].getIncludedFiles();", "-                    File thisBaseDir = scanners[j].getBasedir();", "-                    for (int i = 0; i < files.length; i++) {", "-                        File f = new File(thisBaseDir,files[i]);", "-                        String name = files[i].replace(File.separatorChar,'/');", "-                        // Look for & create parent dirs as needed.", "-                        int slashPos = -1;", "-                        while ((slashPos = name.indexOf((int)'/', slashPos + 1)) != -1) {", "-                            String dir = name.substring(0, slashPos);", "-                            if (!parentDirs.contains(dir)) {", "-                                parentDirs.put(dir, dir);", "-                                zipDir(new File(thisBaseDir, dir.replace('/', File.separatorChar)),", "-                                       zOut, dir + '/');", "-                            }", "-                        }", "-                        zipFile(f, zOut, name);", "-                    }", "+                    addFiles(scanners[j], zOut, \"\");", "+        }", "+    }"]}]}
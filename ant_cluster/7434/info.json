{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "63c6405df8132ff753f542b4c4e1b65e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "394110626c6eed6fbebcc43790b1b2a3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "32f323668f263fad0bc38a43c6d4e6a1f4579c8a", "commitAfterChange": "a920aa9f305e0f998c908798c99b6d108f5d4a58", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+        checkAttributes();", "+", "+        for (Iterator iter = sources.iterator(); iter.hasNext(); ) {", "+            Resource r = (Resource) iter.next();", "+            URLProvider up = (URLProvider) r.as(URLProvider.class);", "+            URL source = up.getURL();", "+", "+            File dest = destination;", "+            if (destination.isDirectory()) {", "+                if (mapperElement != null) {", "+                    String path = source.getPath();", "+                    if (path.endsWith(\"/\")) {", "+                        path = path.substring(0, path.length() - 1);", "+                    }", "+                    int slash = path.lastIndexOf(\"/\");", "+                    if (slash > -1) {", "+                        path = path.substring(slash + 1);", "+                    }", "+                    dest = new File(destination, path);", "+                } else {", "+                    FileNameMapper mapper = mapperElement.getImplementation();", "+                    String[] d = mapper.mapFileName(r.getName());", "+                    if (d == null || d.length != 1) {", "+                        log(\"skipping \" + r + \" - mapper can't handle it\",", "+                            Project.MSG_WARN);", "+                        continue;", "+                    }", "+                    dest = new File(destination, d[0]);", "+                }", "+            }", "-            doGet(logLevel, progress);", "+            doGet(source, dest, logLevel, progress);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74f4fdf6d584a8eed312557212d88526", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "cf16fb5f634301ce5f7818c3b709677da5b3aac7", "commitAfterChange": "2ef29682402005b032a35068643e520194049c69", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": "     private void logVmExit(FormatterElement[] feArray, JUnitTest test,                            String message, String testCase)", "signatureAfterChange": "     private void logVmExit(FormatterElement[] feArray, JUnitTest test,                            String message, String testCase)", "diff": ["-                File outFile = getOutput(fe, test);", "-                JUnitTaskMirror.JUnitResultFormatterMirror formatter =", "-                    fe.createFormatter(classLoader);", "-                if (outFile != null && formatter != null) {", "-                    try {", "-                        OutputStream out = new FileOutputStream(outFile);", "-                        delegate.addVmExit(test, formatter, out, message, testCase);", "-                    } catch (IOException e) {", "-                        // ignore", "+                if (fe.shouldUse(this)) {", "+                    JUnitTaskMirror.JUnitResultFormatterMirror formatter =", "+                        fe.createFormatter(classLoader);", "+                    if (formatter != null) {", "+                        OutputStream out = null;", "+                        File outFile = getOutput(fe, test);", "+                        if (outFile != null) {", "+                            try {", "+                                out = new FileOutputStream(outFile);", "+                            } catch (IOException e) {", "+                                // ignore", "+                            }", "+                        }", "+                        if (out == null) {", "+                            out = getDefaultOutput();", "+                        }", "+                        delegate.addVmExit(test, formatter, out, message,", "+                                           testCase);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8d0b20b2d45843da2ebc68c15d492e9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "30b8b73ffa9bac34e10528dc5bd7376887617435", "commitAfterChange": "e5fcb123200cbdf1faccaf2a57fdf8c1e272d8bb", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "     protected void addParentDirs(File baseDir, String entry,                                  ZipOutputStream zOut, String prefix)         throws IOException", "signatureAfterChange": "     protected void addParentDirs(File baseDir, String entry,                                  ZipOutputStream zOut, String prefix)         throws IOException", "diff": ["-", "-        Stack directories = new Stack();", "-        int slashPos = entry.length();", "-", "-        while ((slashPos = entry.lastIndexOf((int)'/', slashPos-1)) != -1) {", "-            String dir = entry.substring(0, slashPos+1);", "-            if (addedDirs.get(prefix+dir) != null) {", "-                break;", "+        if( !doFilesonly ) {", "+            Stack directories = new Stack();", "+            int slashPos = entry.length();", "+            ", "+            while ((slashPos = entry.lastIndexOf((int)'/', slashPos-1)) != -1) {", "+                String dir = entry.substring(0, slashPos+1);", "+                if (addedDirs.get(prefix+dir) != null) {", "+                    break;", "+                }", "+                directories.push(dir);", "-            directories.push(dir);", "-        }", "-", "-        while (!directories.isEmpty()) {", "-            String dir = (String) directories.pop();", "-            File f = null;", "-            if (baseDir != null) {", "-                f = new File(baseDir, dir);", "-            } else {", "-                f = new File(dir);", "+            ", "+            while (!directories.isEmpty()) {", "+                String dir = (String) directories.pop();", "+                File f = null;", "+                if (baseDir != null) {", "+                    f = new File(baseDir, dir);", "+                } else {", "+                    f = new File(dir);", "+                }", "+                zipDir(f, zOut, prefix+dir);", "-            zipDir(f, zOut, prefix+dir);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2f02722612234d53e8d7cd4e21da4f5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XmlProperty.java", "commitBeforeChange": "1c08b74cea26eaef3e19bb6eea9d21b3e5a49c15", "commitAfterChange": "eeab7a1ba3b44e0b03ec1a17a120ca0f9b6ebcb2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public Object processNode (Node node, String prefix, Object container)", "signatureAfterChange": "     public Object processNode (Node node, String prefix, Object container)", "diff": ["+        boolean emptyNode = false;", "+        boolean semanticEmptyOverride = false;", "+        if (node.getNodeType() == Node.ELEMENT_NODE", "+            && semanticAttributes", "+            && node.hasAttributes()", "+            && (node.getAttributes().getNamedItem(VALUE) != null", "+                || node.getAttributes().getNamedItem(LOCATION) != null", "+                || node.getAttributes().getNamedItem(REF_ID) != null", "+                || node.getAttributes().getNamedItem(PATH) != null", "+                || node.getAttributes().getNamedItem(PATHID) != null)) {", "+            semanticEmptyOverride = true;", "+        }", "+            if (\"\".equals(nodeText) && !semanticEmptyOverride) {", "+                emptyNode = true;", "+            }", "-                   && (node.getChildNodes().getLength() == 0)) {", "+                   && (node.getChildNodes().getLength() == 0)", "+                   && !semanticEmptyOverride) {", "+            emptyNode = true;", "+        } else if ((node.getNodeType() == Node.ELEMENT_NODE)", "+                   && (node.getChildNodes().getLength() == 1)", "+                   && (node.getFirstChild().getNodeType() == Node.TEXT_NODE)", "+                   && (\"\".equals(node.getFirstChild().getNodeValue()))", "+                   && !semanticEmptyOverride) {", "+            nodeText = \"\";", "+            emptyNode = true;", "-", "-            addProperty(prefix, nodeText, id);", "+            if (nodeText.trim().length() != 0 || emptyNode) {", "+                addProperty(prefix, nodeText, id);", "+            }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "90a087f57d1efb15f19523b05c407416", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b0166dddc8004c354053cffb6fe2103", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Project.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": "     public final Vector<Target> topoSort(String[] root, Hashtable<String, Target> targetTable,                                  boolean returnAll) throws BuildException", "signatureAfterChange": "     public final Vector<Target> topoSort(final String[] root, final Hashtable<String, Target> targetTable,                                  final boolean returnAll) throws BuildException", "diff": ["-    public final Vector<Target> topoSort(String[] root, Hashtable<String, Target> targetTable,", "-                                 boolean returnAll) throws BuildException {", "-        Vector<Target> ret = new VectorSet<Target>();", "-        Hashtable<String, String> state = new Hashtable<String, String>();", "-        Stack<String> visiting = new Stack<String>();", "+    public final Vector<Target> topoSort(final String[] root, final Hashtable<String, Target> targetTable,", "+                                 final boolean returnAll) throws BuildException {", "+        final Vector<Target> ret = new VectorSet<Target>();", "+        final Hashtable<String, String> state = new Hashtable<String, String>();", "+        final Stack<String> visiting = new Stack<String>();", "-            String st = (String) (state.get(root[i]));", "+            final String st = (state.get(root[i]));", "-        StringBuffer buf = new StringBuffer(\"Build sequence for target(s)\");", "+        final StringBuffer buf = new StringBuffer(\"Build sequence for target(s)\");", "-        Vector<Target> complete = (returnAll) ? ret : new Vector<Target>(ret);", "-        for (Enumeration<String> en = targetTable.keys(); en.hasMoreElements();) {", "-            String curTarget = en.nextElement();", "-            String st = state.get(curTarget);", "+        final Vector<Target> complete = (returnAll) ? ret : new Vector<Target>(ret);", "+        for (final Enumeration<String> en = targetTable.keys(); en.hasMoreElements();) {", "+            final String curTarget = en.nextElement();", "+            final String st = state.get(curTarget);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e48da6091d05b888621eae7c1d09a57", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     public void storeElement(Project project, Object parent, Object child,         String elementName) throws BuildException", "signatureAfterChange": "     public void storeElement(final Project project, final Object parent, final Object child,         final String elementName) throws BuildException", "diff": ["-    public void storeElement(Project project, Object parent, Object child,", "-        String elementName) throws BuildException {", "+    public void storeElement(final Project project, final Object parent, final Object child,", "+        final String elementName) throws BuildException {", "-        NestedCreator ns = (NestedCreator) nestedCreators.get(elementName.toLowerCase(Locale.ENGLISH));", "+        final NestedCreator ns = nestedCreators.get(elementName.toLowerCase(Locale.ENGLISH));", "-        } catch (IllegalAccessException ie) {", "+        } catch (final IllegalAccessException ie) {", "-        } catch (InstantiationException ine) {", "+        } catch (final InstantiationException ine) {", "-        } catch (InvocationTargetException ite) {", "+        } catch (final InvocationTargetException ite) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6912c483c61f246ce17c3b51e8926fe3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     protected void addPathFile(File pathComponent) throws IOException", "signatureAfterChange": "     protected void addPathFile(final File pathComponent) throws IOException", "diff": ["-    protected void addPathFile(File pathComponent) throws IOException {", "+    protected void addPathFile(final File pathComponent) throws IOException {", "-        String absPathPlusTimeAndLength = pathComponent.getAbsolutePath()", "+        final String absPathPlusTimeAndLength = pathComponent.getAbsolutePath()", "-        String classpath = (String) pathMap.get(absPathPlusTimeAndLength);", "+        String classpath = pathMap.get(absPathPlusTimeAndLength);", "-                Manifest manifest = jarFile.getManifest();", "+                final Manifest manifest = jarFile.getManifest();", "-            URL baseURL = FILE_UTILS.getFileURL(pathComponent);", "-            StringTokenizer st = new StringTokenizer(classpath);", "+            final URL baseURL = FILE_UTILS.getFileURL(pathComponent);", "+            final StringTokenizer st = new StringTokenizer(classpath);", "-                String classpathElement = st.nextToken();", "-                URL libraryURL = new URL(baseURL, classpathElement);", "+                final String classpathElement = st.nextToken();", "+                final URL libraryURL = new URL(baseURL, classpathElement);", "-                String decodedPath = Locator.decodeUri(libraryURL.getFile());", "-                File libraryFile = new File(decodedPath);", "+                final String decodedPath = Locator.decodeUri(libraryURL.getFile());", "+                final File libraryFile = new File(decodedPath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a040971255c695862aecd14c85fb484", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     private IntrospectionHelper(final Class<?> bean)", "signatureAfterChange": "     private IntrospectionHelper(final Class<?> bean)", "diff": ["-        Method[] methods = bean.getMethods();", "+        final Method[] methods = bean.getMethods();", "-            Class<?> returnType = m.getReturnType();", "-            Class<?>[] args = m.getParameterTypes();", "+            final Class<?> returnType = m.getReturnType();", "+            final Class<?>[] args = m.getParameterTypes();", "-                String propName = getPropertyName(name, \"set\");", "-                AttributeSetter as = (AttributeSetter) attributeSetters.get(propName);", "+                final String propName = getPropertyName(name, \"set\");", "+                AttributeSetter as = attributeSetters.get(propName);", "-                String propName = getPropertyName(name, \"create\");", "+                final String propName = getPropertyName(name, \"create\");", "-                    } catch (NoSuchMethodException ex) {", "+                    } catch (final NoSuchMethodException ex) {", "-                    String propName = getPropertyName(name, \"addConfigured\");", "+                    final String propName = getPropertyName(name, \"addConfigured\");", "-                } catch (NoSuchMethodException nse) {", "+                } catch (final NoSuchMethodException nse) {", "-                    } catch (NoSuchMethodException ex) {", "+                    } catch (final NoSuchMethodException ex) {", "-                    String propName = getPropertyName(name, \"add\");", "+                    final String propName = getPropertyName(name, \"add\");", "-                } catch (NoSuchMethodException nse) {", "+                } catch (final NoSuchMethodException nse) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d16b189281533d7b78d672b4c4abdc0c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "     private Class<?> findClassInComponents(String name)         throws ClassNotFoundException", "signatureAfterChange": "     private Class<?> findClassInComponents(final String name)         throws ClassNotFoundException", "diff": ["-    private Class<?> findClassInComponents(String name)", "+    private Class<?> findClassInComponents(final String name)", "-        String classFilename = getClassFilename(name);", "-        Enumeration<File> e = pathComponents.elements();", "+        final String classFilename = getClassFilename(name);", "+        final Enumeration<File> e = pathComponents.elements();", "-            File pathComponent = (File) e.nextElement();", "+            final File pathComponent = e.nextElement();", "-            } catch (SecurityException se) {", "+            } catch (final SecurityException se) {", "-            } catch (IOException ioe) {", "+            } catch (final IOException ioe) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7da6e7542117b27e1bf018eea799368", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void setAttribute(Project p, Object element, String attributeName,             Object value) throws BuildException", "signatureAfterChange": "     public void setAttribute(final Project p, final Object element, final String attributeName,             final Object value) throws BuildException", "diff": ["-    public void setAttribute(Project p, Object element, String attributeName,", "-            Object value) throws BuildException {", "-        AttributeSetter as = (AttributeSetter) attributeSetters.get(", "+    public void setAttribute(final Project p, final Object element, final String attributeName,", "+            final Object value) throws BuildException {", "+        final AttributeSetter as = attributeSetters.get(", "-                DynamicAttributeNS dc = (DynamicAttributeNS) element;", "-                String uriPlusPrefix = ProjectHelper.extractUriFromComponentName(attributeName);", "-                String uri = ProjectHelper.extractUriFromComponentName(uriPlusPrefix);", "-                String localName = ProjectHelper.extractNameFromComponentName(attributeName);", "-                String qName = \"\".equals(uri) ? localName : uri + \":\" + localName;", "+                final DynamicAttributeNS dc = (DynamicAttributeNS) element;", "+                final String uriPlusPrefix = ProjectHelper.extractUriFromComponentName(attributeName);", "+                final String uri = ProjectHelper.extractUriFromComponentName(uriPlusPrefix);", "+                final String localName = ProjectHelper.extractNameFromComponentName(attributeName);", "+                final String qName = \"\".equals(uri) ? localName : uri + \":\" + localName;", "-                DynamicObjectAttribute dc = (DynamicObjectAttribute) element;", "+                final DynamicObjectAttribute dc = (DynamicObjectAttribute) element;", "-                DynamicAttribute dc = (DynamicAttribute) element;", "+                final DynamicAttribute dc = (DynamicAttribute) element;", "-            String msg = getElementName(p, element)", "+            final String msg = getElementName(p, element)", "-        } catch (IllegalAccessException ie) {", "+        } catch (final IllegalAccessException ie) {", "-        } catch (InvocationTargetException ite) {", "+        } catch (final InvocationTargetException ite) {"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f0d333e81fb8354fa5e3aab812a0728d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cf188656d2edf6cf1947169c0dd2951", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "5a497d7dc79f7b6eda0770262f8d92d099c502c5", "commitAfterChange": "8ce1de2178a0422105fa437c327b49fb5637ff28", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      protected static void hbMakeCodeLengths( char[] len, int[] freq,                                              int alphaSize, int maxLen )", "signatureAfterChange": "      protected static void hbMakeCodeLengths( char[] len, int[] freq,                                              int alphaSize, int maxLen )", "diff": ["-        for( i = 0; i < alphaSize; i++ )", "+        for( i = 0; i < alphaSize; i++ ) {", "+        }", "-            if( !( nHeap < ( MAX_ALPHA_SIZE + 2 ) ) )", "+            if( !( nHeap < ( MAX_ALPHA_SIZE + 2 ) ) ) {", "+            }", "-                        if( yy > nHeap )", "+                        if( yy > nHeap ) {", "+                        }", "-                            weight[ heap[ yy + 1 ] ] < weight[ heap[ yy ] ] )", "+                            weight[ heap[ yy + 1 ] ] < weight[ heap[ yy ] ] ) {", "-                        if( weight[ tmp ] < weight[ heap[ yy ] ] )", "+                        }", "+                        if( weight[ tmp ] < weight[ heap[ yy ] ] ) {", "+                        }", "-                        if( yy > nHeap )", "+                        if( yy > nHeap ) {", "+                        }", "-                            weight[ heap[ yy + 1 ] ] < weight[ heap[ yy ] ] )", "+                            weight[ heap[ yy + 1 ] ] < weight[ heap[ yy ] ] ) {", "-                        if( weight[ tmp ] < weight[ heap[ yy ] ] )", "+                        }", "+                        if( weight[ tmp ] < weight[ heap[ yy ] ] ) {", "+                        }", "-            if( !( nNodes < ( MAX_ALPHA_SIZE * 2 ) ) )", "+            if( !( nNodes < ( MAX_ALPHA_SIZE * 2 ) ) ) {", "+            }", "-                if( j > maxLen )", "+                if( j > maxLen ) {", "+                }", "-            if( !tooLong )", "+            if( !tooLong ) {", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8c96273163396cfc1bd6ffc1c64d63d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "ad91082694f9344ae3020e16cf9351e48b751b0b", "commitAfterChange": "bab9e2d799ee887bc0a404b4acdec0366234eafe", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      protected static void hbMakeCodeLengths( char[] len, int[] freq,                                              int alphaSize, int maxLen )", "signatureAfterChange": "      protected static void hbMakeCodeLengths( char[] len, int[] freq,                                              int alphaSize, int maxLen )", "diff": ["-        int heap[] = new int[ MAX_ALPHA_SIZE + 2 ];", "-        int weight[] = new int[ MAX_ALPHA_SIZE * 2 ];", "-        int parent[] = new int[ MAX_ALPHA_SIZE * 2 ];", "+        int[] heap = new int[ MAX_ALPHA_SIZE + 2 ];", "+        int[] weight = new int[ MAX_ALPHA_SIZE * 2 ];", "+        int[] parent = new int[ MAX_ALPHA_SIZE * 2 ];", "-        for( i = 0; i < alphaSize; i++ ) {", "+        for( i = 0; i < alphaSize; i++ )", "+        {", "-            if( !( nHeap < ( MAX_ALPHA_SIZE + 2 ) ) ) {", "+            if( !( nHeap < ( MAX_ALPHA_SIZE + 2 ) ) )", "+            {", "-                        if( yy > nHeap ) {", "+                        if( yy > nHeap )", "+                        {", "-                            weight[ heap[ yy + 1 ] ] < weight[ heap[ yy ] ] ) {", "+                            weight[ heap[ yy + 1 ] ] < weight[ heap[ yy ] ] )", "+                        {", "-                        if( weight[ tmp ] < weight[ heap[ yy ] ] ) {", "+                        if( weight[ tmp ] < weight[ heap[ yy ] ] )", "+                        {", "-                        if( yy > nHeap ) {", "+                        if( yy > nHeap )", "+                        {", "-                            weight[ heap[ yy + 1 ] ] < weight[ heap[ yy ] ] ) {", "+                            weight[ heap[ yy + 1 ] ] < weight[ heap[ yy ] ] )", "+                        {", "-                        if( weight[ tmp ] < weight[ heap[ yy ] ] ) {", "+                        if( weight[ tmp ] < weight[ heap[ yy ] ] )", "+                        {", "-            if( !( nNodes < ( MAX_ALPHA_SIZE * 2 ) ) ) {", "+            if( !( nNodes < ( MAX_ALPHA_SIZE * 2 ) ) )", "+            {", "-                if( j > maxLen ) {", "+                if( j > maxLen )", "+                {", "-            if( !tooLong ) {", "+            if( !tooLong )", "+            {"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "65ad66a828a9cf6218288654b2230295", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ea27a2fd693d766e955e39aa62e4796", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultObjectConfigurer.java", "commitBeforeChange": "1a02a5f570c6b91a6efc7233b47ad45feeee8b75", "commitAfterChange": "e0bed0aa143b567e005e51e811e5622e5103eacd", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void enableProperties()         throws ConfigurationException", "signatureAfterChange": "     private void enableProperties()         throws ConfigurationException", "diff": ["-        final Map creators = findCreators();", "-        final Set elemNames = new HashSet();", "-        elemNames.addAll( creators.keySet() );", "-        elemNames.addAll( adders.keySet() );", "-        final Iterator iterator = elemNames.iterator();", "+        final Iterator iterator = adders.keySet().iterator();", "-            final Method createMethod = (Method)creators.get( propName );", "-            Class type;", "-            if( createMethod != null && addMethod != null )", "-            {", "-                // Make sure the add method is more general than the create", "-                // method", "-                type = createMethod.getReturnType();", "-                final Class addType = addMethod.getParameterTypes()[ 0 ];", "-                if( !addType.isAssignableFrom( type ) )", "-                {", "-                    final String message =", "-                        REZ.getString( \"incompatible-element-types.error\",", "-                                       m_class.getName(),", "-                                       propName );", "-                    throw new ConfigurationException( message );", "-                }", "-            }", "-            else if( createMethod != null )", "-            {", "-                type = createMethod.getReturnType();", "-            }", "-            else", "-            {", "-                type = addMethod.getParameterTypes()[ 0 ];", "-            }", "-", "+            final Class type = addMethod.getParameterTypes()[ 0 ];", "-                                               createMethod,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fec9f2e6e8115d2116713ea52e57cddc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/PropertyHelper.java", "commitBeforeChange": "b2b649d12de2918643d1aa910f194df3be345df9", "commitAfterChange": "781a2ed11e930ead82864bf494d4d3c0b3e945f8", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 15, "signatureBeforeChange": "     public Hashtable getProperties()", "signatureAfterChange": "     public Hashtable getProperties()", "diff": ["-        Hashtable ret = new Hashtable(properties);", "-        Map locals = threadLocalProperties.getProps();", "-        for (Iterator i = locals.entrySet().iterator(); i.hasNext();) {", "-            Map.Entry e = (Map.Entry) i.next();", "-            List l = (List) e.getValue();", "-            if (l != null && l.size() > 0) {", "-                LocalProperty p = (LocalProperty) l.get(l.size() - 1);", "-                if (p.getValue() == null) {", "-                    if (ret.get(e.getKey()) != null) {", "-                        ret.remove(e.getKey());", "-                    }", "-                } else {", "-                    ret.put(e.getKey(), p.getValue());", "-                }", "-            }", "-        }", "-        return ret;", "-", "+        return new Hashtable(properties);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f3262274c7d768896961aaef5ca56306", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f7da7b5645f51f01abe9586ea21873a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XSLTProcess.java", "commitBeforeChange": "dc2e0846ac0b71caf2bfc3e6b24042c87062ebc8", "commitAfterChange": "1e57e83036edb25a9106c8eb30bbb0183a6f44ed", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public void setProcessor(String processor) throws Exception", "signatureAfterChange": "       public void setProcessor(String processor)", "diff": ["-    public void setProcessor(String processor) throws Exception {", "-        if (processor.equals(\"trax\")) {", "+", "+    public void setProcessor(String processor) {", "+        this.processor = processor;", "+    }", "-                Class.forName(\"org.apache.tools.ant.taskdefs.optional.TraXLiaison\");", "-        } else if (processor.equals(\"xslp\")) {", "-                Class.forName(\"org.apache.tools.ant.taskdefs.optional.XslpLiaison\");", "-        } else if (processor.equals(\"xalan\")) {", "-                Class.forName(\"org.apache.tools.ant.taskdefs.optional.XalanLiaison\");", "-            liaison = (XSLTLiaison) Class.forName(processor).newInstance();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d8eacdc9f33b89a6e187b3b5f137abf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ide/VAJImport.java", "commitBeforeChange": "adb10aa72e51f837386530781d2845cdcba3f799", "commitAfterChange": "7cd7c4e5f82cbe8a3fe5d03b7c8ea871a523fdd1", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": "     protected void importFileset(FileSet fileset)", "signatureAfterChange": "     protected void importFileset(FileSet fileset)", "diff": ["-        DirectoryScanner ds = fileset.getDirectoryScanner(this.getProject());", "+        LocalDirectoryScanner ds = new LocalDirectoryScanner();", "+        fileset.setupDirectoryScanner(ds, this.getProject());", "-        String[] includes = null;", "-        String[] excludes = null;", "-", "-        // Hack to get includes and excludes. We could also use getIncludedFiles,", "-        // but that would result in very long HTTP-requests.", "-        // Therefore we want to send the patterns only to the remote tool server", "-        // and let him figure out the files.", "-        try {", "-            Class directoryScanner = ds.getClass();", "-", "-            Field includesField = directoryScanner.getDeclaredField(\"includes\");", "-            includesField.setAccessible(true);", "-            includes = (String[]) includesField.get(ds);", "-", "-            Field excludesField = directoryScanner.getDeclaredField(\"excludes\");", "-            excludesField.setAccessible(true);", "-            excludes = (String[]) excludesField.get(ds);", "-        } catch (NoSuchFieldException nsfe) {", "-            throw new BuildException(", "-                \"DirectoryScanner.includes or .excludes missing\" + nsfe.getMessage());", "-        } catch (IllegalAccessException iae) {", "-            throw new BuildException(", "-                \"Access to DirectoryScanner.includes or .excludes not allowed\");", "-        }", "+        String[] includes = ds.getIncludes();", "+        String[] excludes = ds.getExcludes();"]}]}
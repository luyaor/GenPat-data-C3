{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9fa47e3a6ae9302f1a896705dd3f8076", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d538765b99a9329fb4f811de3b0473a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/HeadFilter.java", "commitBeforeChange": "51fa6c6e412765a4540fd0d597b4b1805d189376", "commitAfterChange": "e596d350ae9efa7d0aaf51d8f988be6ea3909078", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public final int read() throws IOException", "signatureAfterChange": "     public final int read() throws IOException", "diff": ["-        int ch = -1;", "-", "-        // skip the lines (if set)", "-        while (skip > 0) {", "-            for (int tmp = in.read(); tmp != '\\n'; tmp = in.read());", "-            skip--;", "+        while (line == null || line.length() == 0) {", "+            line = lineTokenizer.getToken(in);", "+            if (line == null)", "+                return -1;", "+            line = headFilter(line);", "+            linePos = 0;", "-        if ( (linesRead < lines) || (lines < 0) ){", "-", "-            ch = in.read();", "-", "-            if (ch == '\\n') {", "-                linesRead++;", "-            }", "-        }", "-", "+        int ch = line.charAt(linePos);", "+        linePos++;", "+        if (linePos == line.length())", "+            line = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8b7c2563b95549f81daa35728138491", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2InputStream.java", "commitBeforeChange": "3477bbf6474cdd2b70b12eb638e64415a4f1c2ec", "commitAfterChange": "134d95afef9b42cf08f2eccb077b97525ac38034", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 15, "signatureBeforeChange": "      private void hbCreateDecodeTables(int[] limit, int[] base,                                       int[] perm, char[] length,                                       int minLen, int maxLen, int alphaSize)", "signatureAfterChange": "     private static void hbCreateDecodeTables(final int[] limit,                                              final int[] base,                                              final int[] perm,                                              final char[] length,                                              final int minLen,                                              final int maxLen,                                              final int alphaSize)", "diff": ["-", "-    private void hbCreateDecodeTables(int[] limit, int[] base,", "-                                      int[] perm, char[] length,", "-                                      int minLen, int maxLen, int alphaSize) {", "-        int pp, i, j, vec;", "-", "-        pp = 0;", "-        for (i = minLen; i <= maxLen; i++) {", "-            for (j = 0; j < alphaSize; j++) {", "+     */", "+    private static void hbCreateDecodeTables(final int[] limit,", "+                                             final int[] base,", "+                                             final int[] perm,", "+                                             final char[] length,", "+                                             final int minLen,", "+                                             final int maxLen,", "+                                             final int alphaSize) {", "+        for (int i = minLen, pp = 0; i <= maxLen; i++) {", "+            for (int j = 0; j < alphaSize; j++) {", "-                    perm[pp] = j;", "-                    pp++;", "+                    perm[pp++] = j;", "-        for (i = 0; i < MAX_CODE_LEN; i++) {", "+        for (int i = MAX_CODE_LEN; --i > 0;) {", "+            limit[i] = 0;", "-        for (i = 0; i < alphaSize; i++) {", "+", "+        for (int i = 0; i < alphaSize; i++) {", "-        for (i = 1; i < MAX_CODE_LEN; i++) {", "-            base[i] += base[i - 1];", "+        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {", "+            b += base[i];", "+            base[i] = b;", "-        for (i = 0; i < MAX_CODE_LEN; i++) {", "-            limit[i] = 0;", "-        }", "-        vec = 0;", "-", "-        for (i = minLen; i <= maxLen; i++) {", "-            vec += (base[i + 1] - base[i]);", "+        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {", "+            final int nb = base[i + 1];", "+            vec += nb - b;", "+            b = nb;", "-        for (i = minLen + 1; i <= maxLen; i++) {", "+", "+        for (int i = minLen + 1; i <= maxLen; i++) {"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b58b5e418f59ae9bda83f84472382ed2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7db46ec7cd51b38f26fa82bdccdaf324", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/RedirectorElement.java", "commitBeforeChange": "7829faf36a6f4bc565e0e8b92aa85cc948718176", "commitAfterChange": "9caeed5081071d6a2de28844d0a724918f8c6d86", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "     protected void dieOnCircularReference(Stack stk, Project p)         throws BuildException", "signatureAfterChange": "     protected void dieOnCircularReference(Stack<Object> stk, Project p)         throws BuildException", "diff": ["-    protected void dieOnCircularReference(Stack stk, Project p)", "+    protected void dieOnCircularReference(Stack<Object> stk, Project p)", "-            Vector[] v = new Vector[]", "-                {inputFilterChains, outputFilterChains, errorFilterChains};", "-            for (int i = 0; i < v.length; i++) {", "-                if (v[i] != null) {", "-                    for (Iterator fci = v[i].iterator(); fci.hasNext();) {", "-                        FilterChain fc = (FilterChain) fci.next();", "+            @SuppressWarnings(\"unchecked\")", "+            final List<? extends List<FilterChain>> filterChainLists = Arrays", "+                    .<List<FilterChain>> asList(inputFilterChains, outputFilterChains,", "+                            errorFilterChains);", "+            for (List<FilterChain> filterChains : filterChainLists) {", "+                if (filterChains != null) {", "+                    for (FilterChain fc : filterChains) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc71ecf80a05c454933b4699a1116a51", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/ResourceList.java", "commitBeforeChange": "7829faf36a6f4bc565e0e8b92aa85cc948718176", "commitAfterChange": "9caeed5081071d6a2de28844d0a724918f8c6d86", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     protected synchronized void dieOnCircularReference(Stack stk, Project p)         throws BuildException", "signatureAfterChange": "     protected synchronized void dieOnCircularReference(Stack<Object> stk, Project p)         throws BuildException", "diff": ["-    protected synchronized void dieOnCircularReference(Stack stk, Project p)", "+    protected synchronized void dieOnCircularReference(Stack<Object> stk, Project p)", "-            for (Iterator iter = textDocuments.iterator(); iter.hasNext(); ) {", "-                Object o = (Object) iter.next();", "-                if (o instanceof DataType) {", "-                    pushAndInvokeCircularReferenceCheck((DataType) o, stk, p);", "+            for (ResourceCollection resourceCollection : textDocuments) {", "+                if (resourceCollection instanceof DataType) {", "+                    pushAndInvokeCircularReferenceCheck((DataType) resourceCollection, stk, p);", "-            for (Iterator iter = filterChains.iterator(); iter.hasNext(); ) {", "-                FilterChain fc = (FilterChain) iter.next();", "-                pushAndInvokeCircularReferenceCheck(fc, stk, p);", "+            for (FilterChain filterChain : filterChains) {", "+                pushAndInvokeCircularReferenceCheck(filterChain, stk, p);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4dbda786190bd5ccde37c9ab43f2bc3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/Resources.java", "commitBeforeChange": "0f3a4ae2e2f52ddb7ea22dc8da6fd1b9e4ccbb20", "commitAfterChange": "ac27a40d3fd155a39880ed7bc9b1dfa044000e7f", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "     protected void dieOnCircularReference(Stack stk, Project p)         throws BuildException", "signatureAfterChange": "     protected void dieOnCircularReference(Stack stk, Project p)         throws BuildException", "diff": ["-     */", "-    protected void dieOnCircularReference(Stack stk, Project p)", "-        throws BuildException {", "-        if (isChecked()) {", "-            return;", "-        }", "-        if (isReference()) {", "-            super.dieOnCircularReference(stk, p);", "-        } else {", "-            for (Iterator i = rc.iterator(); i.hasNext();) {", "-                Object o = i.next();", "-                if (o instanceof DataType) {", "-                    invokeCircularReferenceCheck((DataType) o, stk, p);", "-                }", "-            }", "-            setChecked(true);", "-        }", "-    }", "+     */", "+    protected void dieOnCircularReference(Stack stk, Project p)", "+        throws BuildException {", "+        if (isChecked()) {", "+            return;", "+        }", "+        if (isReference()) {", "+            super.dieOnCircularReference(stk, p);", "+        } else {", "+            for (Iterator i = getNested().iterator(); i.hasNext();) {", "+                Object o = i.next();", "+                if (o instanceof DataType) {", "+                    invokeCircularReferenceCheck((DataType) o, stk, p);", "+                }", "+            }", "+            setChecked(true);", "+        }", "+    }"]}]}
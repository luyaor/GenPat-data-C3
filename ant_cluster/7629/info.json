{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a5496a39b175bc9fb1b19a2da9f6cfd", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b72fedb5407f3d1c5019070772091417", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/core/Fail.java", "commitBeforeChange": "304246c96873572205cefe74b7ab9e23fbc829bc", "commitAfterChange": "9fcace6e3a391dda5a49f6fd06a6eb6ec0bbaba8", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void execute()         throws TaskException", "signatureAfterChange": "      public void execute()         throws TaskException", "diff": ["-        try", "+        boolean failed = true;", "+", "+        if( null != m_condition )", "-            boolean failed = true;", "-", "-            if( null != m_condition )", "-            {", "-                failed = m_condition.evaluate( getContext() );", "-            }", "-", "-            if( failed )", "-            {", "-                if( null != m_message )", "-                {", "-                    throw new TaskException( m_message );", "-                }", "-                else", "-                {", "-                    throw new TaskException();", "-                }", "-            }", "+            failed = m_condition.evaluate( getContext() );", "-        catch( final ContextException ce )", "+", "+        if( failed )", "-            throw new TaskException( ce.toString(), ce );", "+            if( null != m_message )", "+            {", "+                throw new TaskException( m_message );", "+            }", "+            else", "+            {", "+                throw new TaskException();", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc13fe7d590bb788e3c9878dccfa3fb9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/cvslib/RedirectingStreamHandler.java", "commitBeforeChange": "5b95034bfc65304cba6fcabf40141d731165cf33", "commitAfterChange": "0e481b8463a698cc76b183b097eaa08db32fa6e4", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void run()", "signatureAfterChange": "       public void stop()", "diff": ["+    public void stop() ", "-     */", "-    public void run()", "-    {", "-        // Read the error stream so that it does not block !", "-        // We cannot use a BufferedReader as the ready() method is bugged!", "-        // (see Bug 4329985, which is supposed to be fixed in JDK1.4 :", "-        //http://developer.java.sun.com/developer/bugParade/bugs/4329985.html)", "+        super.stop();", "-            while( m_error.ready() )", "-            {", "-                final int value = m_error.read();", "-                if( -1 != value )", "-                {", "-                    m_errors.append( (char)value );", "-                }", "-            }", "-        }", "-        catch( final IOException ioe )", "+            getErr().close();", "+            getOut().close();", "+        } ", "+        catch( final IOException e )", "-            //ignore --> Means stderror has been shutdown", "+            // plain impossible", "+            throw new BuildException( e );", "-    }"]}]}
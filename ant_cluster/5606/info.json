{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dbbb9a87bde30ac2f5779f05ace4c1a4", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b093897d5c7aba32b471dff2b18c62c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/filterreaders/src/main/org/apache/tools/ant/filters/util/ChainReaderHelper.java", "commitBeforeChange": "faf931435ae1a10101f8d0d3a62b47042ad30211", "commitAfterChange": "4a5b5fd1eab32cc1cd411ce8adbe76292040b039", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public final String processStream()         throws BuildException, IOException", "signatureAfterChange": "     public final String readFully(Reader rdr)         throws IOException", "diff": ["-    public final String processStream()", "-        throws BuildException, IOException {", "-", "-        final char[] buffer = new char[bufferSize];", "+     */", "+    public final String readFully(Reader rdr)", "+        throws IOException {", "+", "+        final char[] buffer = new char[bufferSize];", "-            bufferLength = instream.read(buffer);", "+            bufferLength = rdr.read(buffer);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d27cebdc16f702b8c148712add8c95a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/util/ChainReaderHelper.java", "commitBeforeChange": "26a42bd2034a7ecb1e5bd0f0dfbd179a2185502a", "commitAfterChange": "63eeac0b800f6797dd406a1ef109b2eacf804e1a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public Reader getAssembledReader() throws BuildException", "signatureAfterChange": "     public Reader getAssembledReader() throws BuildException", "diff": ["-                    final AntFilterReader filter", "-                        = (AntFilterReader) finalFilters.elementAt(i);", "-                    final String className = filter.getClassName();", "-                    final Path classpath = filter.getClasspath();", "-                    final Project pro = filter.getProject();", "-                    if (className != null) {", "-                        try {", "-                            Class clazz = null;", "-                            if (classpath == null) {", "-                                clazz = Class.forName(className);", "-                            } else {", "-                                AntClassLoader al", "-                                    = pro.createClassLoader(classpath);", "-                                classLoadersToCleanUp.add(al);", "-                                clazz = Class.forName(className, true, al);", "-                            }", "-                            if (clazz != null) {", "-                                if (!FilterReader.class.isAssignableFrom(clazz)) {", "-                                    throw new BuildException(className", "-                                        + \" does not extend java.io.FilterReader\");", "-                                }", "-                                final Constructor[] constructors =", "-                                    clazz.getConstructors();", "-                                int j = 0;", "-                                boolean consPresent = false;", "-                                for (; j < constructors.length; j++) {", "-                                    Class[] types = constructors[j]", "-                                                      .getParameterTypes();", "-                                    if (types.length == 1", "-                                        && types[0].isAssignableFrom(Reader.class)) {", "-                                        consPresent = true;", "-                                        break;", "-                                    }", "-                                }", "-                                if (!consPresent) {", "-                                    throw new BuildException(className", "-                                        + \" does not define a public constructor\"", "-                                        + \" that takes in a Reader as its \"", "-                                        + \"single argument.\");", "-                                }", "-                                final Reader[] rdr = {instream};", "-                                instream =", "-                                    (Reader) constructors[j].newInstance((Object[]) rdr);", "-                                setProjectOnObject(instream);", "-                                if (Parameterizable.class.isAssignableFrom(clazz)) {", "-                                    final Parameter[] params = filter.getParams();", "-                                    ((Parameterizable)", "-                                        instream).setParameters(params);", "-                                }", "-                            }", "-                        } catch (final ClassNotFoundException cnfe) {", "-                            throw new BuildException(cnfe);", "-                        } catch (final InstantiationException ie) {", "-                            throw new BuildException(ie);", "-                        } catch (final IllegalAccessException iae) {", "-                            throw new BuildException(iae);", "-                        } catch (final InvocationTargetException ite) {", "-                            throw new BuildException(ite);", "-                        }", "-                    }", "+                    instream =", "+                        expandReader((AntFilterReader) finalFilters.elementAt(i),", "+                                     instream, classLoadersToCleanUp);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b09f344533cf3a1a4301fcd5f6b7dd4a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e396bbaf9e714c2c1ed863f23fd68dc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/EjbJar.java", "commitBeforeChange": "4290fbcebd30e74f23b80bba986857b7b35d6035", "commitAfterChange": "cf07b113a08332dc4a79528f75c570ee96d89bc7", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        boolean          needBuild  = true;", "-        DirectoryScanner ds         = null;", "-        String[]         files      = null;", "-        int              index      = 0;", "-        File             weblogicDD = null;", "-        File             jarfile    = null;", "-        File             wlJarfile  = null;", "-        File             jarToCheck = null;", "-        DescriptorHandler handler   = null;", "-        Hashtable        ejbFiles   = null;", "-        String           baseName   = null;", "+        if (srcdir == null) {", "+            throw new BuildException(\"The srcdir attribute must be specified\");", "+        }", "+        ", "+        if (deploymentTools.size() == 0) {", "+            GenericDeploymentTool genericTool = new GenericDeploymentTool();", "+            genericTool.setDestdir(destdir);", "+            genericTool.setTask(this);", "+            genericTool.setGenericjarsuffix(genericjarsuffix);", "-        // Lets do a little asserting to make sure we have all the", "-        // required attributes from the task processor", "-        StringBuffer sb = new StringBuffer();", "-        boolean die = false;", "-        sb.append(\"Processing ejbjar - the following attributes \");", "-        sb.append(\"must be specified: \");", "-        if (this.srcdir     == null) { sb.append(\"srcdir \");     die = true; }", "-        if (this.destdir    == null) { sb.append(\"destdir\");     die = true; }", "-        if ( die ) throw new BuildException(sb.toString());", "-", "+            deploymentTools.add(genericTool);", "+        }", "+        ", "+        for (Iterator i = deploymentTools.iterator(); i.hasNext(); ) {", "+            EJBDeploymentTool tool = (EJBDeploymentTool)i.next();", "+            tool.configure(basenameTerminator, flatdestdir);", "+            tool.validateConfigured();", "+        }", "+        ", "-            saxParserFactory.setValidating(false);", "+            saxParserFactory.setValidating(true);", "-", "-            ds = this.getDirectoryScanner(this.srcdir);", "+    ", "+            DirectoryScanner ds = getDirectoryScanner(srcdir);", "-            files = ds.getIncludedFiles();", "-", "-            this.log(files.length + \" deployment descriptors located.\",", "-                     Project.MSG_VERBOSE);", "-", "+            String[] files = ds.getIncludedFiles();", "+    ", "+            log(files.length + \" deployment descriptors located.\",", "+                Project.MSG_VERBOSE);", "+            ", "+                            ", "-            for (index=0; index < files.length; ++index) {", "-", "-                // By default we assume we need to build.", "-                needBuild = true;", "-", "-                // Work out what the base name is", "-                int endBaseName = ", "-                    files[index].indexOf(basenameterminator,", "-                                         files[index].lastIndexOf(File.separator));", "-                baseName = files[index].substring(0, endBaseName);", "-", "-                /* Parse the ejb deployment descriptor.  While it may not", "-                 * look like much, we use a SAXParser and an inner class to", "-                 * get hold of all the classfile names for the descriptor.", "-                 */", "-                handler = new DescriptorHandler();", "-                saxParser.parse(new InputSource", "-                                (new FileInputStream", "-                                 (new File(this.srcdir, files[index]))),", "-                                handler);", "-", "-                ejbFiles = handler.getFiles();", "-        ", "-                /* Now try to locate all of the deployment descriptors for the", "-                 * jar, and if they exist, add them to the list of files.", "-                 */", "-", "-                // First the regular deployment descriptor", "-                ejbFiles.put(EjbJar.META_DIR + EjbJar.EJB_DD,", "-                             new File(this.srcdir, files[index]));", "-", "-                // Then the weblogic deployment descriptor", "-                weblogicDD = new File(this.srcdir,", "-                                      baseName ", "-                                      + this.basenameterminator", "-                                      + EjbJar.WL_DD);", "-", "-                if (weblogicDD.exists()) {", "-                    ejbFiles.put(EjbJar.META_DIR + EjbJar.WL_DD,", "-                                 weblogicDD);", "+            for (int index = 0; index < files.length; ++index) {", "+                // process the deployment descriptor in each tool", "+                for (Iterator i = deploymentTools.iterator(); i.hasNext(); ) {", "+                    EJBDeploymentTool tool = (EJBDeploymentTool)i.next();", "+                    processDescriptor(files[index], saxParser, tool);", "-", "-                // The the weblogic cmp deployment descriptor", "-                weblogicDD = new File(this.srcdir,", "-                                      baseName", "-                                      + this.basenameterminator ", "-                                      + EjbJar.WL_CMP_DD);", "-", "-                if (weblogicDD.exists()) {", "-                    ejbFiles.put(EjbJar.META_DIR + EjbJar.WL_CMP_DD,", "-                                 weblogicDD);", "-                }", "-", "-                // Lastly create File object for the Jar files. If we are using", "-                // a flat destination dir, then we need to redefine baseName!", "-                if (this.flatdestdir) {", "-                    int startName = baseName.lastIndexOf(File.separator);", "-                    int endName   = baseName.length();", "-                    baseName = baseName.substring(startName, endName);", "-                }", "-", "-                jarfile = new File(this.destdir,", "-                                   baseName", "-                                   + this.genericjarsuffix);", "-                ", "-                wlJarfile = new File(this.destdir,", "-                                     baseName", "-                                     + this.weblogicjarsuffix);", "-                ", "-                /* Check to see if the jar file is already up to date. ", "-                 * Unfortunately we have to parse the descriptor just to do", "-                 * that, but it's still a saving over re-constructing the jar", "-                 * file each time. Tertiary is used to determine which jarfile", "-                 * we should check times against...think about it.", "-                 */", "-                jarToCheck = this.generateweblogic ? wlJarfile : jarfile;", "-                ", "-                if (jarToCheck.exists()) {", "-                    long    lastBuild = jarToCheck.lastModified();", "-                    Iterator fileIter = ejbFiles.values().iterator();", "-                    File currentFile  = null;", "-                    ", "-                    // Set the need build to false until we find out otherwise.", "-                    needBuild = false;", "-", "-                    // Loop through the files seeing if any has been touched", "-                    // more recently than the destination jar.", "-                    while( (needBuild == false) && (fileIter.hasNext()) ) {", "-                        currentFile = (File) fileIter.next();", "-                        needBuild = ( lastBuild < currentFile.lastModified() );", "-                    }", "-                }", "-                ", "-                // Check to see if we need a build and start", "-                // doing the work!", "-                if (needBuild) {", "-                    // Log that we are going to build...", "-                    this.log( \"building \"", "-                              + jarfile.getName()", "-                              + \" with \"", "-                              + String.valueOf(ejbFiles.size())", "-                              + \" total files\",", "-                              Project.MSG_INFO);", "-", "-                    // Use helper method to write the jarfile", "-                    this.writeJar(jarfile, ejbFiles);", "-", "-                    // Generate weblogic jar if requested", "-                    if (this.generateweblogic) {", "-                        this.buildWeblogicJar(jarfile, wlJarfile);", "-                    }", "-", "-                    // Delete the original jar if we weren't asked to keep it.", "-                    if (!this.keepgeneric) {", "-                        this.log(\"deleting jar \" + jarfile.toString(),", "-                                 Project.MSG_INFO);", "-                        jarfile.delete();", "-                    }", "-                }", "-                else {", "-                    // Log that the file is up to date...", "-                    this.log(jarfile.toString() + \" is up to date.\",", "-                             Project.MSG_INFO);", "-                }", "-            }", "+            }    ", "-            String msg = \"SAXException while parsing '\"", "-                + files[index].toString()", "-                + \"'. This probably indicates badly-formed XML.\"", "+            String msg = \"SAXException while creating parser.\"", "-        catch (IOException ioe) {", "-            String msg = \"IOException while parsing'\"", "-                + files[index].toString()", "-                + \"'.  This probably indicates that the descriptor\"", "-                + \" doesn't exist. Details:\"", "-                + ioe.getMessage();", "-            throw new BuildException(msg, ioe);", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84215b2176d15f4ef14f5d60290f2bb5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/pvcs/Pvcs.java", "commitBeforeChange": "a2c15cb080a27a1535b6770628ac0a19655d1885", "commitAfterChange": "0f1c5dd88eba7cb386d894c0bf8aa34c883b4051", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void execute()         throws TaskException", "signatureAfterChange": "      public void execute()         throws TaskException", "diff": ["-     */", "-        if( repository == null || repository.trim().equals( \"\" ) )", "-            throw new TaskException( \"Required argument repository not specified\" );", "+        validate();", "+        final File filelist = getFileList();", "+", "+        final Commandline cmd = buildGetCommand( filelist );", "+        getLogger().info( \"Getting files\" );", "+        getLogger().debug( \"Executing \" + cmd.toString() );", "+        try", "+        {", "+            final Execute2 exe = new Execute2();", "+            setupLogger( exe );", "+            exe.setWorkingDirectory( getBaseDirectory() );", "+            exe.setCommandline( cmd.getCommandline() );", "+            result = exe.execute();", "+            checkResultCode( result, cmd );", "+        }", "+        catch( IOException e )", "+        {", "+            String msg = \"Failed executing: \" + cmd.toString() + \". Exception: \" + e.getMessage();", "+            throw new TaskException( msg );", "+        }", "+        finally", "+        {", "+            if( filelist != null )", "+            {", "+                filelist.delete();", "+            }", "+        }", "+    }", "-        Commandline commandLine = new Commandline();", "-        commandLine.setExecutable( getExecutable( PCLI_EXE ) );", "-", "-        commandLine.createArgument().setValue( \"lvf\" );", "-        commandLine.createArgument().setValue( \"-z\" );", "-        commandLine.createArgument().setValue( \"-aw\" );", "-        if( getWorkspace() != null )", "-            commandLine.createArgument().setValue( \"-sp\" + getWorkspace() );", "-        commandLine.createArgument().setValue( \"-pr\" + getRepository() );", "-", "-        // default pvcs project is \"/\"", "-        if( getPvcsproject() == null && getPvcsprojects().isEmpty() )", "-            pvcsProject = \"/\";", "-", "-        if( getPvcsproject() != null )", "-            commandLine.createArgument().setValue( getPvcsproject() );", "-        if( !getPvcsprojects().isEmpty() )", "-        {", "-            Iterator e = getPvcsprojects().iterator();", "-            while( e.hasNext() )", "-            {", "-                String projectName = ( (PvcsProject)e.next() ).getName();", "-                if( projectName == null || ( projectName.trim() ).equals( \"\" ) )", "-                    throw new TaskException( \"name is a required attribute of pvcsproject\" );", "-                commandLine.createArgument().setValue( projectName );", "-            }", "-        }", "-        File tmp2 = null;", "-            Random rand = new Random( System.currentTimeMillis() );", "-            tmp = new File( \"pvcs_ant_\" + rand.nextLong() + \".log\" );", "-            tmp2 = new File( \"pvcs_ant_\" + rand.nextLong() + \".log\" );", "-            getLogger().debug( \"Executing \" + commandLine.toString() );", "-            result = runCmd( commandLine, new FileOutputStream( tmp ),", "-                             new LogOutputStream( getLogger(), true ) );", "-            if( result != 0 && !ignorerc )", "-            {", "-                String msg = \"Failed executing: \" + commandLine.toString();", "-                throw new TaskException( msg );", "-            }", "-                throw new TaskException( \"Communication between ant and pvcs failed. No output generated from executing PVCS commandline interface \\\"pcli\\\" and \\\"get\\\"\" );", "-            massagePCLI( tmp, tmp2 );", "-", "-            // Launch get on output captured from PCLI lvf", "-            commandLine.clearArgs();", "-            commandLine.setExecutable( getExecutable( GET_EXE ) );", "-", "-            if( getForce() != null && getForce().equals( \"yes\" ) )", "-                commandLine.createArgument().setValue( \"-Y\" );", "-            else", "-                commandLine.createArgument().setValue( \"-N\" );", "-", "-            if( getPromotiongroup() != null )", "-                commandLine.createArgument().setValue( \"-G\" + getPromotiongroup() );", "-            else", "-            {", "-                if( getLabel() != null )", "-                    commandLine.createArgument().setValue( \"-r\" + getLabel() );", "-            }", "-", "-            if( updateOnly )", "-            {", "-                commandLine.createArgument().setValue( \"-U\" );", "-            }", "-", "-            commandLine.createArgument().setValue( \"@\" + tmp2.getAbsolutePath() );", "-            getLogger().info( \"Getting files\" );", "-            getLogger().debug( \"Executing \" + commandLine.toString() );", "-            final LogOutputStream output = new LogOutputStream( getLogger(), false );", "-            final LogOutputStream error = new LogOutputStream( getLogger(), true );", "-            result = runCmd( commandLine, output, error );", "-", "-            if( result != 0 && !ignorerc )", "-            {", "-                String msg = \"Failed executing: \" + commandLine.toString() + \". Return code was \" + result;", "-                throw new TaskException( msg );", "-            }", "-", "-        catch( FileNotFoundException e )", "-            String msg = \"Failed executing: \" + commandLine.toString() + \". Exception: \" + e.getMessage();", "-            throw new TaskException( msg );", "-        catch( IOException e )", "-            String msg = \"Failed executing: \" + commandLine.toString() + \". Exception: \" + e.getMessage();", "-            throw new TaskException( msg );", "-        }", "-        catch( ParseException e )", "-        {", "-            String msg = \"Failed executing: \" + commandLine.toString() + \". Exception: \" + e.getMessage();", "-            throw new TaskException( msg );", "-            if( tmp != null )", "-            if( tmp2 != null )", "-            {", "-                tmp2.delete();", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efbb608351b4f43c26deb1d255f99b78", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/pvcs/Pvcs.java", "commitBeforeChange": "a2c15cb080a27a1535b6770628ac0a19655d1885", "commitAfterChange": "0f1c5dd88eba7cb386d894c0bf8aa34c883b4051", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void execute()         throws TaskException", "signatureAfterChange": "      public void execute()         throws TaskException", "diff": ["-     */", "-        if( repository == null || repository.trim().equals( \"\" ) )", "-            throw new TaskException( \"Required argument repository not specified\" );", "+        validate();", "+        final File filelist = getFileList();", "+", "+        final Commandline cmd = buildGetCommand( filelist );", "+        getLogger().info( \"Getting files\" );", "+        getLogger().debug( \"Executing \" + cmd.toString() );", "+        try", "+        {", "+            final Execute2 exe = new Execute2();", "+            setupLogger( exe );", "+            exe.setWorkingDirectory( getBaseDirectory() );", "+            exe.setCommandline( cmd.getCommandline() );", "+            result = exe.execute();", "+            checkResultCode( result, cmd );", "+        }", "+        catch( IOException e )", "+        {", "+            String msg = \"Failed executing: \" + cmd.toString() + \". Exception: \" + e.getMessage();", "+            throw new TaskException( msg );", "+        }", "+        finally", "+        {", "+            if( filelist != null )", "+            {", "+                filelist.delete();", "+            }", "+        }", "+    }", "-        Commandline commandLine = new Commandline();", "-        commandLine.setExecutable( getExecutable( PCLI_EXE ) );", "-", "-        commandLine.createArgument().setValue( \"lvf\" );", "-        commandLine.createArgument().setValue( \"-z\" );", "-        commandLine.createArgument().setValue( \"-aw\" );", "-        if( getWorkspace() != null )", "-            commandLine.createArgument().setValue( \"-sp\" + getWorkspace() );", "-        commandLine.createArgument().setValue( \"-pr\" + getRepository() );", "-", "-        // default pvcs project is \"/\"", "-        if( getPvcsproject() == null && getPvcsprojects().isEmpty() )", "-            pvcsProject = \"/\";", "-", "-        if( getPvcsproject() != null )", "-            commandLine.createArgument().setValue( getPvcsproject() );", "-        if( !getPvcsprojects().isEmpty() )", "-        {", "-            Iterator e = getPvcsprojects().iterator();", "-            while( e.hasNext() )", "-            {", "-                String projectName = ( (PvcsProject)e.next() ).getName();", "-                if( projectName == null || ( projectName.trim() ).equals( \"\" ) )", "-                    throw new TaskException( \"name is a required attribute of pvcsproject\" );", "-                commandLine.createArgument().setValue( projectName );", "-            }", "-        }", "-        File tmp2 = null;", "-            Random rand = new Random( System.currentTimeMillis() );", "-            tmp = new File( \"pvcs_ant_\" + rand.nextLong() + \".log\" );", "-            tmp2 = new File( \"pvcs_ant_\" + rand.nextLong() + \".log\" );", "-            getLogger().debug( \"Executing \" + commandLine.toString() );", "-            result = runCmd( commandLine, new FileOutputStream( tmp ),", "-                             new LogOutputStream( getLogger(), true ) );", "-            if( result != 0 && !ignorerc )", "-            {", "-                String msg = \"Failed executing: \" + commandLine.toString();", "-                throw new TaskException( msg );", "-            }", "-                throw new TaskException( \"Communication between ant and pvcs failed. No output generated from executing PVCS commandline interface \\\"pcli\\\" and \\\"get\\\"\" );", "-            massagePCLI( tmp, tmp2 );", "-", "-            // Launch get on output captured from PCLI lvf", "-            commandLine.clearArgs();", "-            commandLine.setExecutable( getExecutable( GET_EXE ) );", "-", "-            if( getForce() != null && getForce().equals( \"yes\" ) )", "-                commandLine.createArgument().setValue( \"-Y\" );", "-            else", "-                commandLine.createArgument().setValue( \"-N\" );", "-", "-            if( getPromotiongroup() != null )", "-                commandLine.createArgument().setValue( \"-G\" + getPromotiongroup() );", "-            else", "-            {", "-                if( getLabel() != null )", "-                    commandLine.createArgument().setValue( \"-r\" + getLabel() );", "-            }", "-", "-            if( updateOnly )", "-            {", "-                commandLine.createArgument().setValue( \"-U\" );", "-            }", "-", "-            commandLine.createArgument().setValue( \"@\" + tmp2.getAbsolutePath() );", "-            getLogger().info( \"Getting files\" );", "-            getLogger().debug( \"Executing \" + commandLine.toString() );", "-            final LogOutputStream output = new LogOutputStream( getLogger(), false );", "-            final LogOutputStream error = new LogOutputStream( getLogger(), true );", "-            result = runCmd( commandLine, output, error );", "-", "-            if( result != 0 && !ignorerc )", "-            {", "-                String msg = \"Failed executing: \" + commandLine.toString() + \". Return code was \" + result;", "-                throw new TaskException( msg );", "-            }", "-", "-        catch( FileNotFoundException e )", "-            String msg = \"Failed executing: \" + commandLine.toString() + \". Exception: \" + e.getMessage();", "-            throw new TaskException( msg );", "-        catch( IOException e )", "-            String msg = \"Failed executing: \" + commandLine.toString() + \". Exception: \" + e.getMessage();", "-            throw new TaskException( msg );", "-        }", "-        catch( ParseException e )", "-        {", "-            String msg = \"Failed executing: \" + commandLine.toString() + \". Exception: \" + e.getMessage();", "-            throw new TaskException( msg );", "-            if( tmp != null )", "-            if( tmp2 != null )", "-            {", "-                tmp2.delete();", "-            }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d6c1245b9df1c215cede2de7e8c2cd2b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2361576d49bbe454c366c0c7af3e9376", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/listener/MailLogger.java", "commitBeforeChange": "8d0a7dc50ac5f28978517eb289457e26b4b40c44", "commitAfterChange": "27b9f24bf23dcd72f13756dd74984dd2432c39c0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void sendMail(String mailhost, int port, String from, String toList,                           String subject, String message) throws IOException", "signatureAfterChange": "     private void sendMail(String mailhost, int port, String from, String replyToList, String toList,                           String subject, String message) throws IOException", "diff": ["-    private void sendMail(String mailhost, int port, String from, String toList,", "+    private void sendMail(String mailhost, int port, String from, String replyToList, String toList,", "-", "+        if (!replyToList.equals(\"\")) {", "+            StringTokenizer t = new StringTokenizer(replyToList, \", \", false);", "+            while (t.hasMoreTokens()) {", "+                mailMessage.replyto(t.nextToken());", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cf336718acb19f947a4c583effbfa9c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "867ec77b0d9efa8819be2ebf82cace4600b929ee", "commitAfterChange": "5337488612953eb072e38cb99e6b5d60999297da", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 84, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["+", "+\t\t\tVector excludePackages = new Vector();", "+\t\t\tif ((excludePackageNames != null) && (excludePackageNames.length() > 0)) {", "+\t\t\t\tStringTokenizer exTok = new StringTokenizer(excludePackageNames, \",\", false);", "+\t\t\t\twhile (exTok.hasMoreTokens()) {", "+\t\t\t\t\texcludePackages.addElement(exTok.nextToken().trim());", "+\t\t\t\t}", "+\t\t\t}", "-                evaluatePackages(toExecute, sourcePath, packages);", "+                evaluatePackages(toExecute, sourcePath, packages, excludePackages);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b494efe02e0049b1ab10914d2034975e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ef686e41dd62afd187eeedc35478e11", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/depend/Depend.java", "commitBeforeChange": "85344c438efab87f56ca5f4b179752852ec0aa86", "commitAfterChange": "f66cab0ea7689df54fe51f64018cd3ef8b05cd3d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private Vector readDependencyList(File depFile) throws IOException", "signatureAfterChange": "     private Hashtable readCachedDependencies() throws IOException", "diff": ["-", "-    private Vector readDependencyList(File depFile) throws IOException {", "-        Vector dependencyList = null;", "-        BufferedReader in = null;", "-        try {", "-            in = new BufferedReader(new FileReader(depFile));", "-            String line = null;", "-            dependencyList = new Vector();", "-            while ((line = in.readLine()) != null) {", "-                dependencyList.addElement(line);", "-            }", "-        }", "-        finally {", "-            if (in != null) { ", "-                in.close();", "+     */", "+    private Hashtable readCachedDependencies() throws IOException{", "+        Hashtable dependencyMap = new Hashtable();", "+        ", "+        if (cache != null) {", "+            File depFile = new File(cache, CACHE_FILE_NAME);", "+            BufferedReader in = null;", "+            if (depFile.exists()) {", "+                try {", "+                    in = new BufferedReader(new FileReader(depFile));", "+                    String line = null;", "+                    Vector dependencyList = null;", "+                    String className = null;", "+                    int prependLength = CLASSNAME_PREPEND.length();", "+                    while ((line = in.readLine()) != null) {", "+                        if (line.startsWith(CLASSNAME_PREPEND)) {", "+                            dependencyList = new Vector();", "+                            className = line.substring(prependLength);", "+                            dependencyMap.put(className, dependencyList);", "+                        }", "+                        else {", "+                            dependencyList.addElement(line);", "+                        }", "+                    }", "+                }", "+                finally {", "+                    if (in != null) { ", "+                        in.close();", "+                    }", "+                }", "-        return dependencyList;", "+        return dependencyMap;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "676f58b91e623201523ec20b5f2728cb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/depend/Depend.java", "commitBeforeChange": "85344c438efab87f56ca5f4b179752852ec0aa86", "commitAfterChange": "f66cab0ea7689df54fe51f64018cd3ef8b05cd3d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "          private void writeDependencyList(File depFile, Vector dependencyList) throws IOException", "signatureAfterChange": "     private void writeCachedDependencies(Hashtable dependencyMap) throws IOException", "diff": ["-    ", "-    private void writeDependencyList(File depFile, Vector dependencyList) throws IOException {", "-        // new dependencies so need to write them out to the cache", "-        PrintWriter pw = null;", "-        try {", "-            String parent = depFile.getParent();", "-            if (parent != null) {", "-                new File(parent).mkdirs(); ", "-            }", "-            ", "-            pw = new PrintWriter(new FileWriter(depFile));", "-            for (Enumeration deps = dependencyList.elements(); deps.hasMoreElements();) {", "-                pw.println(deps.nextElement());", "-            }", "-        }", "-        finally {", "-            if (pw != null) { ", "-                pw.close();", "-            }", "-        }", "-    }", "+     */", "+    private void writeCachedDependencies(Hashtable dependencyMap) throws IOException{", "+        if (cache != null) {", "+            PrintWriter pw = null;", "+            try {", "+                cache.mkdirs(); ", "+                File depFile = new File(cache, CACHE_FILE_NAME);", "+                ", "+                pw = new PrintWriter(new FileWriter(depFile));", "+                for (Enumeration deps = dependencyMap.keys(); deps.hasMoreElements();) {", "+                    String className = (String)deps.nextElement();", "+                    ", "+                    pw.println(CLASSNAME_PREPEND + className);", "+                    ", "+                    Vector dependencyList = (Vector)dependencyMap.get(className);", "+                    int size = dependencyList.size();", "+                    for (int x = 0; x < size; x++) {", "+                        pw.println(dependencyList.elementAt(x));", "+                    }", "+                }", "+            }", "+            finally {", "+                if (pw != null) { ", "+                    pw.close();", "+                }", "+            }", "+        }"]}]}
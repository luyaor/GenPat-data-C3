{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "94b6257e34ed1151bcdf8b4747cd0eda", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70231a17989ac22a179506b3c1b5c9ea", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "c35a248ef870c9f98b7eda39ba9e3653775aea82", "commitAfterChange": "4653e638dd921ac96a2e8583851b121e46477ae9", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 17, "signatureBeforeChange": "     protected void writeCentralFileHeader(ZipEntry ze) throws IOException", "signatureAfterChange": "     protected void writeCentralFileHeader(ZipEntry ze) throws IOException", "diff": ["-        out.write(CFH_SIG.getBytes());", "+        writeOut(CFH_SIG.getBytes());", "-        out.write((new ZipShort((ze.getPlatform() << 8) | 20)).getBytes());", "+        writeOut((new ZipShort((ze.getPlatform() << 8) | 20)).getBytes());", "-        if (ze.getMethod() == DEFLATED) {", "+        if (ze.getMethod() == DEFLATED && raf == null) {", "-            out.write((new ZipShort(20)).getBytes());", "+            writeOut((new ZipShort(20)).getBytes());", "-            out.write((new ZipShort(8)).getBytes());", "+            writeOut((new ZipShort(8)).getBytes());", "-            out.write((new ZipShort(10)).getBytes());", "-            out.write(ZERO);", "+            writeOut((new ZipShort(10)).getBytes());", "+            writeOut(ZERO);", "-        out.write((new ZipShort(ze.getMethod())).getBytes());", "+        writeOut((new ZipShort(ze.getMethod())).getBytes());", "-        out.write(toDosTime(new Date(ze.getTime())).getBytes());", "+        writeOut(toDosTime(new Date(ze.getTime())).getBytes());", "-        out.write((new ZipLong(ze.getCrc())).getBytes());", "-        out.write((new ZipLong(ze.getCompressedSize())).getBytes());", "-        out.write((new ZipLong(ze.getSize())).getBytes());", "+        writeOut((new ZipLong(ze.getCrc())).getBytes());", "+        writeOut((new ZipLong(ze.getCompressedSize())).getBytes());", "+        writeOut((new ZipLong(ze.getSize())).getBytes());", "-        out.write((new ZipShort(name.length)).getBytes());", "+        writeOut((new ZipShort(name.length)).getBytes());", "-        out.write((new ZipShort(extra.length)).getBytes());", "+        writeOut((new ZipShort(extra.length)).getBytes());", "-        out.write((new ZipShort(comment.length)).getBytes());", "+        writeOut((new ZipShort(comment.length)).getBytes());", "-        out.write(ZERO);", "+        writeOut(ZERO);", "-        out.write((new ZipShort(ze.getInternalAttributes())).getBytes());", "+        writeOut((new ZipShort(ze.getInternalAttributes())).getBytes());", "-        out.write((new ZipLong(ze.getExternalAttributes())).getBytes());", "+        writeOut((new ZipLong(ze.getExternalAttributes())).getBytes());", "-        out.write(((ZipLong) offsets.get(ze)).getBytes());", "+        writeOut(((ZipLong) offsets.get(ze)).getBytes());", "-        out.write(name);", "+        writeOut(name);", "-        out.write(extra);", "+        writeOut(extra);", "-        out.write(comment);", "+        writeOut(comment);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eda1fb9d8c8bcca81320260731707efd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/tar/TarInputStream.java", "commitBeforeChange": "23bbf085727756cfbad92aaa345e10c7370d3486", "commitAfterChange": "75110026aa35fe98da6c696598361977c3c46c48", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public TarEntry getNextEntry() throws IOException", "signatureAfterChange": "     public TarEntry getNextEntry() throws IOException", "diff": ["-        if (this.hasHitEOF) {", "+        if (hasHitEOF) {", "-        if (this.currEntry != null) {", "-            long numToSkip = this.entrySize - this.entryOffset;", "+        if (currEntry != null) {", "+            long numToSkip = entrySize - entryOffset;", "-            if (this.debug) {", "+            if (debug) {", "-                        + this.currEntry.getName() + \"' SZ \"", "-                        + this.entrySize + \" OFF \"", "-                        + this.entryOffset + \"  skipping \"", "+                        + currEntry.getName() + \"' SZ \"", "+                        + entrySize + \" OFF \"", "+                        + entryOffset + \"  skipping \"", "-                this.skip(numToSkip);", "+                skip(numToSkip);", "-            this.readBuf = null;", "+            readBuf = null;", "-        byte[] headerBuf = this.buffer.readRecord();", "+        byte[] headerBuf = buffer.readRecord();", "-            if (this.debug) {", "+            if (debug) {", "-            this.hasHitEOF = true;", "-        } else if (this.buffer.isEOFRecord(headerBuf)) {", "-            if (this.debug) {", "+            hasHitEOF = true;", "+        } else if (buffer.isEOFRecord(headerBuf)) {", "+            if (debug) {", "-            this.hasHitEOF = true;", "+            hasHitEOF = true;", "-        if (this.hasHitEOF) {", "-            this.currEntry = null;", "+        if (hasHitEOF) {", "+            currEntry = null;", "-            this.currEntry = new TarEntry(headerBuf);", "+            currEntry = new TarEntry(headerBuf);", "-            if (this.debug) {", "+            if (debug) {", "-                        + this.currEntry.getName()", "+                        + currEntry.getName()", "-                        + this.currEntry.getSize());", "+                        + currEntry.getSize());", "-            this.entryOffset = 0;", "+            entryOffset = 0;", "-            this.entrySize = this.currEntry.getSize();", "+            entrySize = currEntry.getSize();", "-        if (this.currEntry != null && this.currEntry.isGNULongNameEntry()) {", "+        if (currEntry != null && currEntry.isGNULongNameEntry()) {", "-            if (this.currEntry == null) {", "+            if (currEntry == null) {", "-            this.currEntry.setName(longName.toString());", "+            currEntry.setName(longName.toString());", "-        return this.currEntry;", "+        return currEntry;"]}]}
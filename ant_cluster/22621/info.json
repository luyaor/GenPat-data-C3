{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "616c06e42274d3947b2bc25e2fd65d60", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a0d7b0c93f10fee66c28a5e2418b26f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "     private TestResultHolder executeAsForked(JUnitTest test,                                              ExecuteWatchdog watchdog,                                              File casesFile)         throws BuildException", "signatureAfterChange": "     private TestResultHolder executeAsForked(JUnitTest test,                                              final ExecuteWatchdog watchdog,                                              final File casesFile)         throws BuildException", "diff": ["-                                             ExecuteWatchdog watchdog,", "-                                             File casesFile)", "+                                             final ExecuteWatchdog watchdog,", "+                                             final File casesFile)", "-        } catch (CloneNotSupportedException e) {", "+        } catch (final CloneNotSupportedException e) {", "-            FormatterElement fe = feArray[i];", "+            final FormatterElement fe = feArray[i];", "-                File outFile = getOutput(fe, test);", "+                final File outFile = getOutput(fe, test);", "-        File vmWatcher = createTempPropertiesFile(\"junitvmwatcher\");", "+        final File vmWatcher = createTempPropertiesFile(\"junitvmwatcher\");", "-        File propsFile = createTempPropertiesFile(\"junit\");", "+        final File propsFile = createTempPropertiesFile(\"junit\");", "-        Hashtable p = getProject().getProperties();", "-        Properties props = new Properties();", "-        for (Enumeration e = p.keys(); e.hasMoreElements();) {", "-            Object key = e.nextElement();", "+        final Hashtable p = getProject().getProperties();", "+        final Properties props = new Properties();", "+        for (final Enumeration e = p.keys(); e.hasMoreElements();) {", "+            final Object key = e.nextElement();", "-            FileOutputStream outstream = new FileOutputStream(propsFile);", "+            final FileOutputStream outstream = new FileOutputStream(propsFile);", "-        } catch (java.io.IOException e) {", "+        } catch (final java.io.IOException e) {", "-        Execute execute = new Execute(", "+        final Execute execute = new Execute(", "-        String[] environment = env.getVariables();", "+        final String[] environment = env.getVariables();", "-        TestResultHolder result = new TestResultHolder();", "+        final TestResultHolder result = new TestResultHolder();", "-        } catch (IOException e) {", "+        } catch (final IOException e) {", "-            } catch (Exception e) {", "+            } catch (final Exception e) {", "-            boolean crash = (watchdog != null && watchdog.killedProcess())", "+            final boolean crash = (watchdog != null && watchdog.killedProcess())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57336d5e4cafc4fddc763fd0042b8f21", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "     public void executeMain() throws BuildException", "signatureAfterChange": "     public void executeMain() throws BuildException", "diff": ["-        Vector<ResourceCollection> vfss = new Vector<ResourceCollection>();", "+        final Vector<ResourceCollection> vfss = new Vector<ResourceCollection>();", "-            FileSet fs = (FileSet) getImplicitFileSet().clone();", "+            final FileSet fs = (FileSet) getImplicitFileSet().clone();", "-            ResourceCollection rc = resources.elementAt(i);", "+            final ResourceCollection rc = resources.elementAt(i);", "-        ResourceCollection[] fss = new ResourceCollection[vfss.size()];", "+        final ResourceCollection[] fss = new ResourceCollection[vfss.size()];", "-            ArchiveState state = getResourcesToAdd(fss, zipFile, false);", "+            final ArchiveState state = getResourcesToAdd(fss, zipFile, false);", "-            File parent = zipFile.getParentFile();", "+            final File parent = zipFile.getParentFile();", "-            Resource[][] addThem = state.getResourcesToAdd();", "+            final Resource[][] addThem = state.getResourcesToAdd();", "-            String action = doUpdate ? \"Updating \" : \"Building \";", "+            final String action = doUpdate ? \"Updating \" : \"Building \";", "-                    ZipFileSet oldFiles = new ZipFileSet();", "+                    final ZipFileSet oldFiles = new ZipFileSet();", "-                        PatternSet.NameEntry ne = oldFiles.createExclude();", "+                        final PatternSet.NameEntry ne = oldFiles.createExclude();", "-                    DirectoryScanner ds =", "+                    final DirectoryScanner ds =", "-                    String[] f = ds.getIncludedFiles();", "+                    final String[] f = ds.getIncludedFiles();", "-                        String[] d = ds.getIncludedDirectories();", "-                        Resource[] dr = new Resource[d.length];", "+                        final String[] d = ds.getIncludedDirectories();", "+                        final Resource[] dr = new Resource[d.length];", "-                        Resource[] tmp = r;", "+                        final Resource[] tmp = r;", "-        } catch (IOException ioe) {", "+        } catch (final IOException ioe) {", "-                } catch (IOException e) {", "+                } catch (final IOException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68e98b431252935f576eee9fbd747a44", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "     public static void main(String[] args) throws IOException", "signatureAfterChange": "     public static void main(final String[] args) throws IOException", "diff": ["-    public static void main(String[] args) throws IOException {", "+    public static void main(final String[] args) throws IOException {", "-        Properties props = new Properties();", "+        final Properties props = new Properties();", "-                    String methodsList = args[i].substring(Constants.METHOD_NAMES.length());", "+                    final String methodsList = args[i].substring(Constants.METHOD_NAMES.length());", "-                } catch (IllegalArgumentException ex) {", "+                } catch (final IllegalArgumentException ex) {", "-                } catch (BuildException be) {", "+                } catch (final BuildException be) {", "-                FileInputStream in = new FileInputStream(args[i]", "+                final FileInputStream in = new FileInputStream(args[i]", "-                antThreadID = Integer.parseInt( args[i].substring(Constants.THREADID.length()) );", "+                antThreadID = Integer.parseInt(args[i].substring(Constants.THREADID.length()));", "-        Hashtable p = System.getProperties();", "-        for (Enumeration e = p.keys(); e.hasMoreElements();) {", "-            Object key = e.nextElement();", "+        final Hashtable p = System.getProperties();", "+        for (final Enumeration e = p.keys(); e.hasMoreElements();) {", "+            final Object key = e.nextElement();", "-                java.io.BufferedReader reader =", "+                final java.io.BufferedReader reader =", "-                    StringTokenizer st = new StringTokenizer(line, \",\");", "-                    String testListSpec = st.nextToken();", "-                    int colonIndex = testListSpec.indexOf(':');", "+                    final StringTokenizer st = new StringTokenizer(line, \",\");", "+                    final String testListSpec = st.nextToken();", "+                    final int colonIndex = testListSpec.indexOf(':');", "-                    JUnitTest t = new JUnitTest(testCaseName);", "+                    final JUnitTest t = new JUnitTest(testCaseName);", "-            } catch (IOException e) {", "+            } catch (final IOException e) {", "-            JUnitTest t = new JUnitTest(args[0]);", "+            final JUnitTest t = new JUnitTest(args[0]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cb3beb361685157519893ecbbad3b31", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/email/MimeMailer.java", "commitBeforeChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "commitAfterChange": "789422e131b6c2c003d94f394169a64297e986c6", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void send()", "signatureAfterChange": "     public void send()", "diff": ["-            Properties props = new Properties();", "+            final Properties props = new Properties();", "-                    Provider p = (Provider) Class.forName(", "+                    final Provider p = (Provider) Class.forName(", "-                } catch (Exception e) {", "+                } catch (final Exception e) {", "-            MimeMessage msg = new MimeMessage(sesh);", "-            MimeMultipart attachments = new MimeMultipart();", "+            final MimeMessage msg = new MimeMessage(sesh);", "+            final MimeMultipart attachments = new MimeMultipart();", "-            StringDataSource sds = new StringDataSource();", "+            final StringDataSource sds = new StringDataSource();", "-                for (Iterator iter = headers.iterator(); iter.hasNext();) {", "-                    Header h = (Header) iter.next();", "+                for (final Iterator iter = headers.iterator(); iter.hasNext();) {", "+                    final Header h = (Header) iter.next();", "-            PrintStream out = new PrintStream(sds.getOutputStream());", "+            final PrintStream out = new PrintStream(sds.getOutputStream());", "-            MimeBodyPart textbody = new MimeBodyPart();", "+            final MimeBodyPart textbody = new MimeBodyPart();", "-            Enumeration e = files.elements();", "+            final Enumeration e = files.elements();", "-                File file = (File) e.nextElement();", "+                final File file = (File) e.nextElement();", "-                FileDataSource fileData = new FileDataSource(file);", "-                DataHandler fileDataHandler = new DataHandler(fileData);", "+                final FileDataSource fileData = new FileDataSource(file);", "+                final DataHandler fileDataHandler = new DataHandler(fileData);", "-                Transport transport = sesh.getTransport(SSL ? \"smtps\" : \"smtp\");", "+                final Transport transport = sesh.getTransport(SSL ? \"smtps\" : \"smtp\");", "-            } catch (SendFailedException sfe) {", "+            } catch (final SendFailedException sfe) {", "-        } catch (MessagingException e) {", "+        } catch (final MessagingException e) {", "-        } catch (IOException e) {", "+        } catch (final IOException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1529fc0efaf3b77eff53d0acaee522a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 152, "methodNumberAfterChange": 152, "signatureBeforeChange": "     private void parsePackages(Vector<String> pn, Path sp)", "signatureAfterChange": "     private void parsePackages(final Vector<String> pn, final Path sp)", "diff": ["-    private void parsePackages(Vector<String> pn, Path sp) {", "-        HashSet<String> addedPackages = new HashSet<String>();", "+    private void parsePackages(final Vector<String> pn, final Path sp) {", "+        final HashSet<String> addedPackages = new HashSet<String>();", "+\t\tfinal", "-            PatternSet ps = new PatternSet();", "+            final PatternSet ps = new PatternSet();", "-                Enumeration<PackageName> e = packageNames.elements();", "+                final Enumeration<PackageName> e = packageNames.elements();", "-                    PackageName p = e.nextElement();", "+                    final PackageName p = e.nextElement();", "-            Enumeration<PackageName> e = excludePackageNames.elements();", "+            final Enumeration<PackageName> e = excludePackageNames.elements();", "-                PackageName p = e.nextElement();", "+                final PackageName p = e.nextElement();", "-            String[] pathElements = sourcePath.list();", "+            final String[] pathElements = sourcePath.list();", "-                File dir = new File(pathElements[i]);", "+                final File dir = new File(pathElements[i]);", "-                    DirSet ds = new DirSet();", "+                    final DirSet ds = new DirSet();", "-        Enumeration<DirSet> e = dirSets.elements();", "+        final Enumeration<DirSet> e = dirSets.elements();", "-            DirSet ds = e.nextElement();", "-            File baseDir = ds.getDir(getProject());", "+            final DirSet ds = e.nextElement();", "+            final File baseDir = ds.getDir(getProject());", "-            DirectoryScanner dsc = ds.getDirectoryScanner(getProject());", "-            String[] dirs = dsc.getIncludedDirectories();", "+            final DirectoryScanner dsc = ds.getDirectoryScanner(getProject());", "+            final String[] dirs = dsc.getIncludedDirectories();", "-                File pd = new File(baseDir, dirs[i]);", "-                String[] files = pd.list(new FilenameFilter () {", "-                        @Override", "-\t\t\t\t\t\tpublic boolean accept(File dir1, String name) {", "+                final File pd = new File(baseDir, dirs[i]);", "+                final String[] files = pd.list(new FilenameFilter () {", "+\t\t\t\t\t\tpublic boolean accept(final File dir1, final String name) {", "-                        String packageName =", "+                        final String packageName ="]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "76347cbb0526bad79265b13804690ced", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59c9f49d0a07389e198dc82c73483740", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/Main.java", "commitBeforeChange": "c31e31c52a1f624e72be505d788db9be42b87e5d", "commitAfterChange": "48c54a521235f746024ae8facc272e049d0e1cf5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "     protected ProjectListener createListener( final String listenerName )         throws AntException", "signatureAfterChange": "     protected ProjectListener createListener( final String listenerName )         throws AntException", "diff": ["-        try { result = (ProjectListener)ObjectUtil.createObject( listenerName ); }", "+        try { result = (ProjectListener)Class.forName( listenerName ).newInstance(); }", "-            throw new AntException( \"Error creating the listener \" + listenerName + ", "-                                    \" due to \" + StringUtil.printStackTrace( t, 5, true ), ", "+            throw new AntException( \"Error creating the listener \" + listenerName +", "+                                    \" due to \" + ExceptionUtil.printStackTrace( t, 5, true ),", "-        getLogger().addLogTarget( new LogTargetToListenerAdapter( result ) );", "+        final LogTarget target = new LogTargetToListenerAdapter( result );", "+", "+        getLogger().setLogTargets( new LogTarget[] { target } );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd5948fde1989182eb3257ef9da26b3e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipEntry.java", "commitBeforeChange": "4cbbf3629a15a78615a3ce63ffe6f3fc028b172d", "commitAfterChange": "2c04d7e833b4e5dab1a3c5ddfe14b572aea8c112", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void setExtraFields(final ZipExtraField[] fields)", "signatureAfterChange": "     public void setExtraFields(final ZipExtraField[] fields)", "diff": ["-        extraFields = new LinkedHashMap<ZipShort, ZipExtraField>();", "-        for (final ZipExtraField field : fields) {", "+        List<ZipExtraField> newFields = new ArrayList<ZipExtraField>();", "+        for (ZipExtraField field : fields) {", "-                extraFields.put(field.getHeaderId(), field);", "+                newFields.add( field);", "+        extraFields = newFields.toArray(new ZipExtraField[newFields.size()]);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c3ad5041443686c3f399baf3edb155b5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "291747a8372d78b230f88798b751bfe8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "51fa6c6e412765a4540fd0d597b4b1805d189376", "commitAfterChange": "e596d350ae9efa7d0aaf51d8f988be6ea3909078", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String inputEncoding, String outputEncoding,                          Project project)         throws IOException", "signatureAfterChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String inputEncoding, String outputEncoding,                          Project project)         throws IOException", "diff": ["-            if (filterSetsAvailable || filterChainsAvailable", "-                || (inputEncoding != null ", "-                    && !inputEncoding.equals(outputEncoding))", "-                || (inputEncoding == null && outputEncoding != null)) {", "+            if (filterSetsAvailable) {", "+            } else if (filterChainsAvailable", "+                       || (inputEncoding != null ", "+                           && !inputEncoding.equals(outputEncoding))", "+                       || (inputEncoding == null && outputEncoding != null)) {", "+                BufferedReader in = null;", "+                BufferedWriter out = null;", "+ ", "+                 try {", "+                     if (inputEncoding == null) {", "+                         in = new BufferedReader(new FileReader(sourceFile));", "+                     } else {", "+                         in =", "+                             new BufferedReader(", "+                                 new InputStreamReader(", "+                                     new FileInputStream(sourceFile),", "+                                     inputEncoding));", "+                     }", "+ ", "+                     if (outputEncoding == null) {", "+                         out = new BufferedWriter(new FileWriter(destFile));", "+                     } else {", "+                         out =", "+                             new BufferedWriter(", "+                                 new OutputStreamWriter(", "+                                     new FileOutputStream(destFile),", "+                                     outputEncoding));", "+                     }", "+ ", "+                     if (filterChainsAvailable) {", "+                         ChainReaderHelper crh = new ChainReaderHelper();", "+                         crh.setBufferSize(8192);", "+                         crh.setPrimaryReader(in);", "+                         crh.setFilterChains(filterChains);", "+                         crh.setProject(project);", "+                         Reader rdr = crh.getAssembledReader();", "+                         in = new BufferedReader(rdr);", "+                     }", "+                     char buffer[] = new char[1024*8];", "+                     while (true) {", "+                         int nRead = in.read(buffer, 0, buffer.length);", "+                         if (nRead == -1) {", "+                             break;", "+                         }", "+                         out.write(buffer, 0, nRead);", "+                      }", "+                  } finally {", "+                      if (out != null) {", "+                         out.close();", "+                     }", "+                     if (in != null) {", "+                         in.close();", "+                     }", "+                 }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1ab042161fbf3303bebb2d295091080", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/FixCRLF.java", "commitBeforeChange": "14d7f3c9152c8c52501a5624e361a588f9e56367", "commitAfterChange": "6231c77d24ce79d308b50e46097851fa8dc63e93", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            \" cr=\" + (addcr==-1 ? \"add\" : addcr==0 ? \"asis\" : \"remove\") +", "-            \" tab=\" + (addtab==-1 ? \"add\" : addtab==0 ? \"asis\" : \"remove\") +", "-            \" eof=\" + (ctrlz==-1 ? \"add\" : ctrlz==0 ? \"asis\" : \"remove\") +", "+            \" cr=\" + (addcr==1 ? \"add\" : addcr==0 ? \"asis\" : \"remove\") +", "+            \" tab=\" + (addtab==1 ? \"add\" : addtab==0 ? \"asis\" : \"remove\") +", "+            \" eof=\" + (ctrlz==1 ? \"add\" : ctrlz==0 ? \"asis\" : \"remove\") +", "+                // Determine whether it should be written,", "+                // that is if it is different than the potentially already existing file", "+                boolean write = false;", "+                byte[] existingdata = indata;", "-                if (destDir != null) destFile = new File(destDir, files[i]);", "-                FileOutputStream outStream = new FileOutputStream(destFile);", "-                outStream.write(outdata,0,o);", "-                outStream.close();", "+                if (destDir != null) {", "+                    destFile = new File(destDir, files[i]);", "+                    if(destFile.isFile()) {", "+                        int len = (int)destFile.length();", "+                        if(len != o) {", "+                            write = true;", "+                        } else {", "+                            existingdata = new byte[len];", "+                            try {", "+                                FileInputStream in = new FileInputStream(destFile);", "+                                in.read(existingdata);", "+                                in.close();", "+                            } catch (IOException e) {", "+                                throw new BuildException(e);", "+                            }", "+                        }", "+                    } else {", "+                        write = true;", "+                    }", "+                }", "+", "+                if(!write) {", "+                    if(existingdata.length != o) {", "+                        write = true;", "+                    } else {", "+                        for(int j = 0; j < o; ++j) {", "+                            if(existingdata[j] != outdata[j]) {", "+                                write = true;", "+                                break;", "+                            }", "+                        }", "+                    }", "+                }", "+", "+                if(write) {", "+                    log(destFile + \" is being written\", Project.MSG_VERBOSE);", "+                    FileOutputStream outStream = new FileOutputStream(destFile);", "+                    outStream.write(outdata,0,o);", "+                    outStream.close();", "+                } else {", "+                    log(destFile + \" is not written, as the contents are identical\",", "+                        Project.MSG_VERBOSE);", "+                }"]}]}
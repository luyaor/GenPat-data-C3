{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e5998f56946696108b0dd163fb409a3b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04831766d358f8e1dcb4234b74769efa", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ComponentManager.java", "commitBeforeChange": "26d9c6536e7e605b92a6e4b20eb0cd25e116a689", "commitAfterChange": "f19f07d6e4c72f241057ecfc32d80be21201bbf7", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private Object createComponent(String componentName, BuildElement model)          throws AntException", "signatureAfterChange": "     private Object createComponent(String componentName, BuildElement model)          throws AntException", "diff": ["-        Object component = null;", "-        if (model != null) {", "-            for (Iterator i = aspects.iterator(); i.hasNext();) {", "-                Aspect aspect = (Aspect) i.next();", "-                component = aspect.preCreateComponent(component, model);", "-            }", "+        ImportInfo importInfo = getImport(componentName);", "+        if (importInfo == null) {", "+            throw new ExecutionException(\"There is no definition of the <\"", "+            + componentName + \"> component\");", "+        String className = importInfo.getClassName();", "-        if (component == null) {", "-            ImportInfo importInfo = getImport(componentName);", "-            if (importInfo == null) {", "-                throw new ExecutionException(\"There is no definition of the <\"", "-                + componentName + \"> component\");", "-            }", "-            String className = importInfo.getClassName();", "-", "-            ComponentLibrary componentLibrary", "+        ComponentLibrary componentLibrary", "-            component = createComponentFromDef(componentName, componentLibrary,", "-                importInfo.getDefinition(), model);", "-        }", "-", "-        if (model != null) {", "-            for (Iterator i = aspects.iterator(); i.hasNext();) {", "-                Aspect aspect = (Aspect) i.next();", "-                component = aspect.postCreateComponent(component, model);", "-            }", "-        }", "-", "-        return component;", "+        return createComponentFromDef(componentName, componentLibrary,", "+            importInfo.getDefinition(), model);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e19a052876005bea60266f457189c86", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "ad4c56763e91150e9a6cadce4e62f50e7276311e", "commitAfterChange": "b31472d21fcd29fc5104562036e9dd98da76f9de", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 12, "signatureBeforeChange": "     protected Class loadClass(String classname, boolean resolve) throws ClassNotFoundException", "signatureAfterChange": "     protected Class loadClass(String classname, boolean resolve) throws ClassNotFoundException", "diff": ["-        // default to the global setting and then see", "-        // if this class belongs to a package which has been", "-        // designated to use a specific loader first (this one or the system one)", "-        boolean useSystemFirst = systemFirst; ", "-", "-        for (Enumeration e = systemPackages.elements(); e.hasMoreElements();) {", "-            String packageName = (String)e.nextElement();", "-            if (classname.startsWith(packageName)) {", "-                useSystemFirst = true;", "-                break;", "-            }", "-        }", "-", "-        for (Enumeration e = loaderPackages.elements(); e.hasMoreElements();) {", "-            String packageName = (String)e.nextElement();", "-            if (classname.startsWith(packageName)) {", "-                useSystemFirst = false;", "-                break;", "-            }", "-        }", "-", "-        if (theClass == null) {", "-            if (useSystemFirst) {", "-                try {", "-                    theClass = findBaseClass(classname);", "-                    project.log(\"Class \" + classname + \" loaded from system loader\", Project.MSG_DEBUG);", "-                }", "-                catch (ClassNotFoundException cnfe) {", "-                    theClass = findClass(classname);", "-                    project.log(\"Class \" + classname + \" loaded from ant loader\", Project.MSG_DEBUG);", "-                }", "+        if (theClass != null) {", "+            return theClass;", "+        }", "+        ", "+        if (isSystemFirst(classname)) {", "+            try {", "+                theClass = findBaseClass(classname);", "+                project.log(\"Class \" + classname + \" loaded from system loader\", Project.MSG_DEBUG);", "-            else {", "-                try {", "-                    theClass = findClass(classname);", "-                    project.log(\"Class \" + classname + \" loaded from ant loader\", Project.MSG_DEBUG);", "+            catch (ClassNotFoundException cnfe) {", "+                theClass = findClass(classname);", "+                project.log(\"Class \" + classname + \" loaded from ant loader\", Project.MSG_DEBUG);", "+            }", "+        }", "+        else {", "+            try {", "+                theClass = findClass(classname);", "+                project.log(\"Class \" + classname + \" loaded from ant loader\", Project.MSG_DEBUG);", "+            }", "+            catch (ClassNotFoundException cnfe) {", "+                if (ignoreBase) {", "+                    throw cnfe;", "-                catch (ClassNotFoundException cnfe) {", "-                    if (ignoreBase) {", "-                        throw cnfe;", "-                    }", "-                    theClass = findBaseClass(classname);", "-                    project.log(\"Class \" + classname + \" loaded from system loader\", Project.MSG_DEBUG);", "-                }", "+                theClass = findBaseClass(classname);", "+                project.log(\"Class \" + classname + \" loaded from system loader\", Project.MSG_DEBUG);"]}]}
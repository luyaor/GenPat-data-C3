{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "79a6bf1db1bc9366a64e6401f2f503e7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1af5b27b7cf246367c9fe952b87cce6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/property/ClassicPropertyResolver.java", "commitBeforeChange": "6638f2ac2b2d797fe2789ea7cbcf235b7cf4ea5a", "commitAfterChange": "7eb8a34e54e5c7ff3241f4414e04cf3b623c3e07", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     protected Object getPropertyValue( final String propertyName,                                        final PropertyStore properties )         throws TaskException", "signatureAfterChange": "     protected Object getPropertyValue( final String propertyName,                                        final TaskContext context )         throws TaskException", "diff": ["-                                       final PropertyStore properties )", "+                                       final TaskContext context )", "-        if( ! properties.isPropertySet( propertyName ) )", "+        final Object value = context.getProperty( propertyName );", "+        if( value != null )", "+        {", "+            return value;", "+        }", "+        else", "-        return properties.getProperty( propertyName );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfb2cc6090d9cb4e10d46b237ca9a8ce", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/property/LocalPropertyStack.java", "commitBeforeChange": "33d20f43659475bf234aa1c22ca9bbbd2a3b9d1e", "commitAfterChange": "1388e372a9eb6cc6c463fbda928a10afd17b6d0a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void addLocal(String property)", "signatureAfterChange": "     public void addLocal(String property)", "diff": ["-        if (!stack.isEmpty()) {", "-            stack.getFirst().put(property, NullReturn.NULL);", "+        synchronized (LOCK) {", "+            Map<String, Object> map = stack.peek();", "+            if (map != null) {", "+                map.put(property, NullReturn.NULL);", "+            }"]}]}
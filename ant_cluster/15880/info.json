{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1cb75b42ceef8380cb0dec74a2adec17", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7da53ef940563338f566e2422adf6c8b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/AssertionsTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": "      public void testMultipleAssertions()", "signatureAfterChange": "      @Test     public void testMultipleAssertions()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"test-multiple-assertions\",", "-                \"multiple assertions rejected\",", "-                \"Only one assertion declaration is allowed\");", "-    }", "+        try {", "+            buildRule.executeTarget(\"test-multiple-assertions\");", "+            fail(\"BuildException should have been thrown by assertion fail in task\");", "+        } catch (BuildException ex) {", "+            assertContains(\"multiple assertions rejected\", \"Only one assertion declaration is allowed\", ex.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87cdff24bf736a0a3f3778b29cd39a79", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/ImportTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void testImportInTargetNotAllowed()", "signatureAfterChange": "      @Test     public void testImportInTargetNotAllowed()", "diff": ["+    @Test", "-        configureProject(", "+        buildRule.configureProject(", "-        expectBuildExceptionContaining(", "-            \"do-import\", \"not a top level task\",", "-            \"import only allowed as a top-level task\");", "+        try {", "+        \tbuildRule.executeTarget(\"do-import\");", "+        \tfail(\"Build exception should have been thrown as import only allowed in top level task\");", "+        } catch(BuildException ex) {", "+        \tassertContains( \"not a top level task\", \"import only allowed as a top-level task\", ex.getMessage());", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d51dcdb712837602061e962ab333e2de", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0629e69a15e1c92843c1cec66828198e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/frontends/CLIMain.java", "commitBeforeChange": "321497ad25f76931e5b18e384fbd73ca8d198d92", "commitAfterChange": "ec74722dcd89659e5f1b1241acd59dc3f5978be7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private void execute( final String[] args )         throws Exception", "signatureAfterChange": "      private void execute( final Map properties, final String[] args )         throws Exception", "diff": ["-", "-    private void execute( final String[] args )", "+    private void execute( final Map properties, final String[] args )", "-        setupDefaultParameters();", "-", "-        if( !parseCommandLineOptions( args ) )", "-        {", "-            return;", "-        }", "-", "-        prepareLogging();", "-", "-        checkHomeDir();", "-        final File buildFile = getBuildFile();", "-", "-        //getLogger().debug( \"Ant Bin Directory: \" + m_binDir );", "-        //getLogger().debug( \"Ant Lib Directory: \" + m_libDir );", "-        //getLogger().debug( \"Ant Task Lib Directory: \" + m_taskLibDir );", "-", "-        if( m_dryRun )", "-        {", "-            m_parameters.setParameter( Executor.ROLE,", "-                                       \"org.apache.myrmidon.components.executor.PrintingExecutor\" );", "-        }", "-", "-        final Embeddor embeddor = prepareEmbeddor();", "-", "-            final ProjectListener listener = prepareListener( embeddor );", "+            // Set system properties set up by launcher", "+            m_embedded.setEmbeddorProperty( \"myrmidon.home\", properties.get( \"myrmidon.home\" ) );", "-            //create the project", "-            final Project project =", "-                embeddor.createProject( buildFile.toString(), null, m_builderParameters );", "+            // Command line", "+            if( !parseCommandLineOptions( args ) )", "+            {", "+                return;", "+            }", "+", "+            // Setup logging", "+            final BasicLogger logger = new BasicLogger( \"[myrmidon] \", m_priority );", "+            m_embedded.setLogger( logger );", "+", "+            if( m_dryRun )", "+            {", "+                m_embedded.setEmbeddorProperty( Executor.ROLE,", "+                                                \"org.apache.myrmidon.components.executor.PrintingExecutor\" );", "+            }", "+", "+            // Set the common classloader", "+            final ClassLoader sharedClassLoader = (ClassLoader)properties.get( \"myrmidon.shared.classloader\" );", "+            m_embedded.setSharedClassLoader( sharedClassLoader );", "-            final boolean incremental = m_parameters.getParameterAsBoolean( \"incremental\", false );", "-            if( !incremental )", "+            if( !m_incremental )", "-                executeBuild( embeddor, project, listener );", "+                executeBuild();", "-                executeIncrementalBuild( embeddor, project, listener );", "+                executeIncrementalBuild();", "-            shutdownEmbeddor( embeddor );", "+            m_embedded.stop();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c0f87e157bc44edf7b100336e25acb9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/Main.java", "commitBeforeChange": "d678e492b98fc7a29ed46b3f9d8ffade75c3bb4a", "commitAfterChange": "52418752350fdbbed27fe9c443a077e6b3c61cdf", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "      protected void execute( final String[] args )         throws Exception", "signatureAfterChange": "      private void execute( final String[] args )         throws Exception", "diff": ["-    protected void execute( final String[] args )", "-        throws Exception", "-            return;", "-        final ArrayList targets = new ArrayList();", "-        final HashMap defines = new HashMap();", "-", "-        m_parameters.setParameter( \"filename\", \"build.ant\" );", "-        m_parameters.setParameter( \"log.level\", \"WARN\" );", "-        m_parameters.setParameter( \"listener\", \"org.apache.myrmidon.listeners.DefaultProjectListener\" );", "-        m_parameters.setParameter( \"incremental\", \"false\" );", "-", "-        //System property set up by launcher", "-        m_parameters.setParameter( \"myrmidon.home\", System.getProperty( \"myrmidon.home\" ) );", "-            case HELP_OPT: usage( options ); return;", "-            case VERSION_OPT: System.out.println( Constants.BUILD_DESCRIPTION ); return;", "-                defines.put( option.getArgument( 0 ), option.getArgument( 1 ) );", "-            case 0: targets.add( option.getArgument() ); break;", "+", "+    private void execute( final String[] args )", "+        throws Exception", "+    {", "+        setupDefaultParameters();", "+", "+        if( !parseCommandLineOptions( args ) )", "+        {", "+            return;", "-            throw new TaskException( \"myrmidon-home (\" + homeDir + \") is not a directory\" );", "+            throw new Exception( \"myrmidon-home (\" + homeDir + \") is not a directory\" );", "-            throw new TaskException( \"File \" + buildFile + \" is not a file or doesn't exist\" );", "+            throw new Exception( \"File \" + buildFile + \" is not a file or doesn't exist\" );", "-", "-        //setup classloader so that it will correctly load", "-        //the Project/ProjectBuilder/ProjectManager and all dependencies", "-        //FIXEME: Use separate classloader instead of injecting", "-        final ClassLoader classLoader = createClassLoader( libDir );", "-        Thread.currentThread().setContextClassLoader( classLoader );", "-", "-", "-            //Add CLI defines", "-            addToContext( context, defines );", "+            //Add CLI m_defines", "+            addToContext( context, m_defines );", "-            doBuild( manager, project, context, targets );", "+            doBuild( manager, project, context, m_targets );"]}]}
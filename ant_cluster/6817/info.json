{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3db6cd6a79b98f73b48120df05e43894", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cebe6e4db27f73cae9b910e2d23225c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/unix/Rpm.java", "commitBeforeChange": "e0f26fe26017eedcc317a8259d73db75f860927d", "commitAfterChange": "ceaf662ffb39a0a16066240d1d27da3563de9ec0", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void execute()         throws TaskException", "signatureAfterChange": "      public void execute()         throws TaskException", "diff": ["+        final Commandline cmd = createCommand();", "+        final Execute2 exe = new Execute2();", "+        setupLogger( exe );", "-        Commandline toExecute = new Commandline();", "+        if( m_topDir == null ) m_topDir = getBaseDirectory();", "+        exe.setWorkingDirectory( m_topDir );", "-        toExecute.setExecutable( \"rpm\" );", "-        if( topDir != null )", "-        {", "-            toExecute.createArgument().setValue( \"--define\" );", "-            toExecute.createArgument().setValue( \"_topdir\" + topDir );", "-        }", "-", "-        toExecute.createArgument().setLine( command );", "-", "-        if( cleanBuildDir )", "-        {", "-            toExecute.createArgument().setValue( \"--clean\" );", "-        }", "-        if( removeSpec )", "-        {", "-            toExecute.createArgument().setValue( \"--rmspec\" );", "-        }", "-        if( removeSource )", "-        {", "-            toExecute.createArgument().setValue( \"--rmsource\" );", "-        }", "-", "-        toExecute.createArgument().setValue( \"SPECS/\" + specFile );", "-", "-        OutputStream outputstream = null;", "-        OutputStream errorstream = null;", "-", "-        if( error == null && output == null )", "-        {", "-            outputstream = new LogOutputStream( getLogger(), false );", "-            errorstream = new LogOutputStream( getLogger(), true );", "-        }", "-        else", "-        {", "-            if( output != null )", "-            {", "-                try", "-                {", "-                    outputstream = new PrintStream( new BufferedOutputStream( new FileOutputStream( output ) ) );", "-                }", "-                catch( IOException e )", "-                {", "-                    throw new TaskException( \"Error\", e );", "-                }", "-            }", "-            else", "-            {", "-                outputstream = new LogOutputStream( getLogger(), false );", "-            }", "-            if( error != null )", "-            {", "-                try", "-                {", "-                    errorstream = new PrintStream( new BufferedOutputStream( new FileOutputStream( error ) ) );", "-                }", "-                catch( IOException e )", "-                {", "-                    throw new TaskException( \"Error\", e );", "-                }", "-            }", "-            else", "-            {", "-                errorstream = new LogOutputStream( getLogger(), true );", "-            }", "-        }", "-", "-        Execute exe = new Execute();", "-        exe.setOutput( outputstream );", "-        exe.setError( errorstream );", "-", "-        if( topDir == null ) topDir = getBaseDirectory();", "-        exe.setWorkingDirectory( topDir );", "-", "-        exe.setCommandline( toExecute.getCommandline() );", "+        exe.setCommandline( cmd.getCommandline() );", "-            exe.execute();", "-            getLogger().info( \"Building the RPM based on the \" + specFile + \" file\" );", "+            final String message = \"Building the RPM based on the \" + m_specFile + \" file\";", "+            getLogger().info( message );", "+", "+            if( 0 != exe.execute() )", "+            {", "+                throw new TaskException( \"Failed to execute rpm\" );", "+            }", "-        finally", "+    }", "-            if( output != null )", "-            {", "-                try", "-                {", "-                    outputstream.close();", "-                }", "-                catch( IOException e )", "-                {", "-                }", "-            }", "-            if( error != null )", "-            {", "-                try", "-                {", "-                    errorstream.close();", "-                }", "-                catch( IOException e )", "-                {", "-                }", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4623aaff8174f41406e452744bf0105", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/unix/Rpm.java", "commitBeforeChange": "e0f26fe26017eedcc317a8259d73db75f860927d", "commitAfterChange": "ceaf662ffb39a0a16066240d1d27da3563de9ec0", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void execute()         throws TaskException", "signatureAfterChange": "      public void execute()         throws TaskException", "diff": ["+        final Commandline cmd = createCommand();", "+        final Execute2 exe = new Execute2();", "+        setupLogger( exe );", "-        Commandline toExecute = new Commandline();", "+        if( m_topDir == null ) m_topDir = getBaseDirectory();", "+        exe.setWorkingDirectory( m_topDir );", "-        toExecute.setExecutable( \"rpm\" );", "-        if( topDir != null )", "-        {", "-            toExecute.createArgument().setValue( \"--define\" );", "-            toExecute.createArgument().setValue( \"_topdir\" + topDir );", "-        }", "-", "-        toExecute.createArgument().setLine( command );", "-", "-        if( cleanBuildDir )", "-        {", "-            toExecute.createArgument().setValue( \"--clean\" );", "-        }", "-        if( removeSpec )", "-        {", "-            toExecute.createArgument().setValue( \"--rmspec\" );", "-        }", "-        if( removeSource )", "-        {", "-            toExecute.createArgument().setValue( \"--rmsource\" );", "-        }", "-", "-        toExecute.createArgument().setValue( \"SPECS/\" + specFile );", "-", "-        OutputStream outputstream = null;", "-        OutputStream errorstream = null;", "-", "-        if( error == null && output == null )", "-        {", "-            outputstream = new LogOutputStream( getLogger(), false );", "-            errorstream = new LogOutputStream( getLogger(), true );", "-        }", "-        else", "-        {", "-            if( output != null )", "-            {", "-                try", "-                {", "-                    outputstream = new PrintStream( new BufferedOutputStream( new FileOutputStream( output ) ) );", "-                }", "-                catch( IOException e )", "-                {", "-                    throw new TaskException( \"Error\", e );", "-                }", "-            }", "-            else", "-            {", "-                outputstream = new LogOutputStream( getLogger(), false );", "-            }", "-            if( error != null )", "-            {", "-                try", "-                {", "-                    errorstream = new PrintStream( new BufferedOutputStream( new FileOutputStream( error ) ) );", "-                }", "-                catch( IOException e )", "-                {", "-                    throw new TaskException( \"Error\", e );", "-                }", "-            }", "-            else", "-            {", "-                errorstream = new LogOutputStream( getLogger(), true );", "-            }", "-        }", "-", "-        Execute exe = new Execute();", "-        exe.setOutput( outputstream );", "-        exe.setError( errorstream );", "-", "-        if( topDir == null ) topDir = getBaseDirectory();", "-        exe.setWorkingDirectory( topDir );", "-", "-        exe.setCommandline( toExecute.getCommandline() );", "+        exe.setCommandline( cmd.getCommandline() );", "-            exe.execute();", "-            getLogger().info( \"Building the RPM based on the \" + specFile + \" file\" );", "+            final String message = \"Building the RPM based on the \" + m_specFile + \" file\";", "+            getLogger().info( message );", "+", "+            if( 0 != exe.execute() )", "+            {", "+                throw new TaskException( \"Failed to execute rpm\" );", "+            }", "-        finally", "+    }", "-            if( output != null )", "-            {", "-                try", "-                {", "-                    outputstream.close();", "-                }", "-                catch( IOException e )", "-                {", "-                }", "-            }", "-            if( error != null )", "-            {", "-                try", "-                {", "-                    errorstream.close();", "-                }", "-                catch( IOException e )", "-                {", "-                }", "-            }"]}]}
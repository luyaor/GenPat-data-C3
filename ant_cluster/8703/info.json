{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c628b4b3af9c937531afb5e1c074ced", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "903a68992d42a6e26e710ec2b98e03fb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/modules/edit/ElementNavigator.java", "commitBeforeChange": "113069f80d96fff735116abb27b70951799106fc", "commitAfterChange": "9996345251656eb38c5326fa7e5f394bc5f43882", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "         private void handle(MouseEvent e)", "signatureAfterChange": "         private void handle(MouseEvent e)", "diff": ["-                ActionManager mgr = getContext().getActions();", "-                JPopupMenu menu = mgr.createPopup(", "-                    getContext().getResources().getStringArray(", "-                        ElementNavigator.class, \"popupActions\"));", "-                menu.show((JComponent)e.getSource(), e.getX(), e.getY());", "+                Object source = e.getSource();", "+                String[] menuStr = null;", "+                JTree tree = (JTree) source;", "+                ", "+                // Find the selected path.", "+                TreePath selPath = tree.getPathForLocation(", "+                    e.getX(), e.getY());", "+                if (selPath == null) {", "+                    return;", "+                }", "+", "+                // Update the selection. ", "+                tree.setSelectionPath(selPath);", "+", "+                // Find the selected object.", "+                Object selObj = selPath.getLastPathComponent();", "+", "+                String defaultID = null;", "+                ", "+                // Does the item provide its own menu?", "+                if (selObj instanceof ACSInfoProvider) {", "+                    ACSInfoProvider ip = (ACSInfoProvider) selObj;", "+                    menuStr = ip.getMenuString();", "+                    defaultID = ip.getDefaultActionID();", "+                } else {", "+                    // Get the menu from the prop file.", "+                    menuStr = getContext().getResources().getStringArray(", "+                        ElementNavigator.class, defaultID);", "+                }", "+", "+                // Should we create a menu?", "+                if (menuStr != null && menuStr.length != 0) {", "+                    ActionManager mgr = getContext().getActions();", "+                    JPopupMenu menu = mgr.createPopup(menuStr, defaultID);", "+                    menu.show((JComponent)e.getSource(), e.getX(), e.getY());", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a13ff41e24d551e9cba509a33dde6af8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ComponentHelper.java", "commitBeforeChange": "bf283617dbb972d27c295814d9bdce53886c621d", "commitAfterChange": "b2db0ad0877fcd69ad3ddb91b0e4eac55b377321", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "     private void printUnknownDefinition(         PrintWriter out, String componentName, String dirListing)", "signatureAfterChange": "     private void printUnknownDefinition(         PrintWriter out, String componentName, String dirListing)", "diff": ["+        String uri=ProjectHelper.extractUriFromComponentName(componentName);", "-        if (isAntlib) {", "-            out.println();", "-            out.println(\"This appears to be an antlib declaration. \");", "-            out.println(\"Action: Check that the implementing library exists in one of:\");", "-            out.println(dirListing);", "+        if(uri.length()>0) {", "+            List matches = antTypeTable.findMatches(uri);", "+            if(matches.size()>0) {", "+                out.println();", "+                out.println(\"The definitions in the namespace \"+uri+\" are:\");", "+                for(Iterator it=matches.iterator();it.hasNext();) {", "+                    AntTypeDefinition def=(AntTypeDefinition) it.next();", "+                    String local = ProjectHelper.extractNameFromComponentName(def.getName());", "+                    out.println(\"    \"+local);", "+                }", "+            } else {", "+                out.println(\"No types or tasks have been defined in this namespace yet\");", "+                if (isAntlib) {", "+                    out.println();", "+                    out.println(\"This appears to be an antlib declaration. \");", "+                    out.println(\"Action: Check that the implementing library exists in one of:\");", "+                    out.println(dirListing);", "+                }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d93518e0eb27d8ff106bed45382cf89f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultObjectConfigurer.java", "commitBeforeChange": "2efc45999181f493c8438ae9a50b9d61ae085f8f", "commitAfterChange": "ff8b6709bcf07f12efecc3625f5e1665e7ddf34d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private Map findAdders()         throws ConfigurationException", "signatureAfterChange": "     private Map findAdders()         throws ConfigurationException", "diff": ["-            if( method.getReturnType() != Void.TYPE", "-                || method.getParameterTypes().length != 1 )", "+            if( Void.TYPE != method.getReturnType() ||", "+                1 != method.getParameterTypes().length )", "+            }", "+", "+            final boolean isTypedAdder = methodName.equals( \"add\" );", "+", "+            final Class paramType = method.getParameterTypes()[ 0 ];", "+            if( isTypedAdder && !paramType.isInterface() )", "+            {", "+                final String message =", "+                    REZ.getString( \"typed-adder-non-interface.error\",", "+                                   m_class.getName(),", "+                                   paramType.getName() );", "+                throw new ConfigurationException( message );", "-            final Class type = method.getParameterTypes()[ 0 ];", "+            final Class type = paramType;", "-                final Class currentType = ( (Method)adders.get( propName ) ).getParameterTypes()[ 0 ];", "+                final Method candidate = (Method)adders.get( propName );", "+                final Class currentType = candidate.getParameterTypes()[ 0 ];", "-                if( currentType != String.class || type == String.class )", "+                else if( currentType != String.class || type == String.class )", "+                    throw new ConfigurationException( message );", "+                }", "+                else if( isTypedAdder )", "+                {", "+                    // Both are string, or both are not string", "+                    final String message =", "+                        REZ.getString( \"multiple-typed-adder-methods-for-element.error\",", "+                                       m_class.getName(),", "+                                       type.getName(),", "+                                       currentType.getName() );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df65e166f1cb4d2eb3e57ac79db317ee", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Diagnostics.java", "commitBeforeChange": "948e2c6f0d0673bd81e77bdca01fb0bef73d3863", "commitAfterChange": "6cc29239b3603a513225c5709d0fb6b73ebe2271", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "     private static void doReportTempDir(PrintStream out)", "signatureAfterChange": "     private static void doReportTempDir(PrintStream out)", "diff": ["+        FileInputStream filein = null;", "+", "+            // read to make sure the file has been written completely", "+            Thread.sleep(1000);", "+            filein = new FileInputStream(tempFile);", "+            int total = 0;", "+            int read = 0;", "+            while ((read = filein.read(buffer, 0, KILOBYTE)) > 0) {", "+                total += read;", "+            }", "+            filein.close();", "+            filein = null;", "+", "-            tempFile.delete();", "-            out.println(\"Temp dir is writeable\");", "+            tempFile.delete();", "+", "+            out.print(\"Temp dir is writeable\");", "+            if (total != TEST_FILE_SIZE * KILOBYTE) {", "+                out.println(\", but seems to be full.  Wrote \"", "+                            + (TEST_FILE_SIZE * KILOBYTE)", "+                            + \"but could only read \" + total + \" bytes.\");", "+            } else {", "+                out.println();", "+            }", "+", "+        } catch (InterruptedException e) {", "+            ignoreThrowable(e);", "+            out.println(\"Failed to check whether tempdir is writable\");", "+            FileUtils.close(filein);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1788fbdedc14a5119ff0011fe89846e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Exec.java", "commitBeforeChange": "b0bde5550598d2f86534bc0e599c0326caba90bd", "commitAfterChange": "d904d0c097e16f9f0e9ebc9f90a3a9391fb57f7b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      protected void run(String command) throws BuildException", "signatureAfterChange": "      protected void run(String command) throws BuildException", "diff": ["+", "+    protected void run(String command) throws BuildException {", "+", "-", "-    protected void run(String command) throws BuildException {"]}]}
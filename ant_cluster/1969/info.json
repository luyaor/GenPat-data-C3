{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "18ce4281dd287a28b4d03106b6db8e4e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09958fd49f1b55d74c25b62942386068", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/Resources.java", "commitBeforeChange": "bb05312e66a2403d2405988dbaf0830cde65df7c", "commitAfterChange": "da5f3bfd256e383926c6ece58dba15a7d4bd5761", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     protected void dieOnCircularReference(Stack stk, Project p)         throws BuildException", "signatureAfterChange": "     protected void dieOnCircularReference(Stack<Object> stk, Project p)         throws BuildException", "diff": ["-    protected void dieOnCircularReference(Stack stk, Project p)", "+    protected void dieOnCircularReference(Stack<Object> stk, Project p)", "-            for (Iterator i = getNested().iterator(); i.hasNext();) {", "-                Object o = i.next();", "-                if (o instanceof DataType) {", "-                    pushAndInvokeCircularReferenceCheck((DataType) o, stk, p);", "+            for (ResourceCollection resourceCollection : getNested()) {", "+                if (resourceCollection instanceof DataType) {", "+                    pushAndInvokeCircularReferenceCheck((DataType) resourceCollection, stk, p);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6f417d16b548273956a38ae1e5f9b69", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/BaseResourceCollectionContainer.java", "commitBeforeChange": "7829faf36a6f4bc565e0e8b92aa85cc948718176", "commitAfterChange": "9caeed5081071d6a2de28844d0a724918f8c6d86", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     protected synchronized void dieOnCircularReference(Stack stk, Project p)         throws BuildException", "signatureAfterChange": "     protected synchronized void dieOnCircularReference(Stack<Object> stk, Project p)         throws BuildException", "diff": ["-    protected synchronized void dieOnCircularReference(Stack stk, Project p)", "+    protected synchronized void dieOnCircularReference(Stack<Object> stk, Project p)", "-            for (Iterator i = rc.iterator(); i.hasNext();) {", "-                Object o = i.next();", "-                if (o instanceof DataType) {", "-                    pushAndInvokeCircularReferenceCheck((DataType) o, stk, p);", "+            for (ResourceCollection resourceCollection : rc) {", "+                if (resourceCollection instanceof DataType) {", "+                    pushAndInvokeCircularReferenceCheck((DataType) resourceCollection, stk, p);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bae58c2985b8d4207784da64e2da9251", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "337ec4e6acc4a595e0db9e6b069eec42", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/TraXLiaison.java", "commitBeforeChange": "bf5fd7938002272a1857de51dbe181ea5257c265", "commitAfterChange": "58069d34783fb894cc384be621f2867fb935f474", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private TransformerFactory getFactory() throws BuildException", "signatureAfterChange": "     private TransformerFactory getFactory() throws BuildException", "diff": ["-                Class clazz = Class.forName(factoryName);", "+                Class clazz = null;", "+                try {", "+                    clazz =", "+                        Class.forName(factoryName, true,", "+                                      Thread.currentThread()", "+                                      .getContextClassLoader());", "+                } catch (ClassNotFoundException cnfe) {", "+                    String msg = \"Failed to load \" + factoryName", "+                        + \" via the configured classpath, will try\"", "+                        + \" Ant's classpath instead.\";", "+                    if (logger != null) {", "+                        logger.log(msg);", "+                    } else if (project != null) {", "+                        project.log(msg, Project.MSG_WARN);", "+                    } else {", "+                        System.err.println(msg);", "+                    }", "+                }", "+", "+                if (clazz == null) {", "+                    clazz = Class.forName(factoryName);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a05c3d8c5b4b041ca454af83abe8ffe", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "d5103ff56cf6470a214f082e89364f783d0504e8", "commitAfterChange": "b10fa1121fe1819c79ab5c2dd8bbdd990db7fe17", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                        OutputStream os;", "+                        OutputStream os = null;", "-                            // TODO use Appendable", "-                            os = output.getOutputStream();", "-                                log(\"Ignoring append=true for non-file resource \" + output, Project.MSG_WARN);", "+                                Appendable a =", "+                                    (Appendable) output.as(Appendable.class);", "+                                if (a != null) {", "+                                    os = a.getAppendOutputStream();", "+                                }", "+                            }", "+                            if (os == null) {", "+                                os = output.getOutputStream();", "+                                if (append) {", "+                                    log(\"Ignoring append=true for non-appendable\"", "+                                        + \" resource \" + output,", "+                                        Project.MSG_WARN);", "+                                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "577a895b5bc252c0c2e5b5ef2ef24fd2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/helper/ProjectHelper2.java", "commitBeforeChange": "aeee70243a354c5951ec655556f8a1530e7713eb", "commitAfterChange": "ca5799fd8c1780abcc25f63745faf95bd2cdb06a", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 25, "signatureBeforeChange": "         public void onStartElement(String uri, String tag, String qname,                                    Attributes attrs,                                    AntXMLContext context)             throws SAXParseException", "signatureAfterChange": "         public void onStartElement(String uri, String tag, String qname,                                    Attributes attrs,                                    AntXMLContext context)             throws SAXParseException", "diff": ["-", "+            task.setQName(qname);", "-                wrapper.setAttribute(attrs.getQName(i),", "-                        attrs.getValue(i));", "+                String name = attrs.getLocalName(i);", "+                String value = attrs.getValue(i);", "+                // PR: Hack for ant-type value", "+                //  an ant-type is a component name which can", "+                // be namespaced, need to extract the name", "+                // and convert from qualifed name to uri/name", "+                if (name.equals(\"ant-type\")) {", "+                    int index = value.indexOf(\":\");", "+                    if (index != -1) {", "+                        String prefix = value.substring(0, index);", "+                        String mappedUri = context.getPrefixMapping(prefix);", "+                        if (mappedUri == null) {", "+                            throw new BuildException(", "+                                \"Unable to find XML NS prefix \" + prefix);", "+                        }", "+                        value = ProjectHelper.genComponentName(", "+                            mappedUri, value.substring(index + 1));", "+                    }", "+                }", "+                wrapper.setAttribute(name, value);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6dc74fd06d5fa51907ed0c230fe937ab", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ResourceUtils.java", "commitBeforeChange": "a5ad127be2cc2c71abdbf4f10c474d5ab6fd55c6", "commitAfterChange": "0c41850a5477f82db678bbc85e6fccc04f66e661", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public static void copyResource(Resource source, Resource dest,                             FilterSetCollection filters, Vector filterChains,                             boolean overwrite, boolean preserveLastModified,                                     boolean append,                                     String inputEncoding, String outputEncoding,                                     Project project, boolean force)         throws IOException", "signatureAfterChange": "     public static void copyResource(Resource source, Resource dest,                             FilterSetCollection filters, Vector filterChains,                             boolean overwrite, boolean preserveLastModified,                                     boolean append,                                     String inputEncoding, String outputEncoding,                                     Project project, boolean force)         throws IOException", "diff": ["-        } else if (source.as(FileProvider.class) != null", "-                   && destFile != null && !append) {", "-            File sourceFile =", "-                source.as(FileProvider.class).getFile();", "-            copyUsingFileChannels(sourceFile, destFile);", "-            copyUsingStreams(source, dest, append, project);", "+            boolean copied = false;", "+            if (source.as(FileProvider.class) != null", "+                && destFile != null && !append) {", "+                File sourceFile =", "+                    source.as(FileProvider.class).getFile();", "+                try {", "+                    copyUsingFileChannels(sourceFile, destFile);", "+                    copied = true;", "+                } catch (IOException ex) {", "+                    project.log(\"Attempt to copy \" + sourceFile", "+                                + \" to \" + destFile + \" using NIO Channels\"", "+                                + \" failed due to '\" + ex.getMessage()", "+                                + \"'.  Falling back to streams.\",", "+                                Project.MSG_WARN);", "+                }", "+            }", "+            if (!copied) {", "+                copyUsingStreams(source, dest, append, project);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73fa00812bc05ac6e9f5c2bf131340df", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/ContentTransformingResource.java", "commitBeforeChange": "0da719e8f5610a4adf656aee25d38776ce60d3f4", "commitAfterChange": "ade0b033e372b018de5ed333904223d4a8e0ef80", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public Object as(Class clazz)", "signatureAfterChange": "     public Object as(Class clazz)", "diff": ["-            final Appendable a =", "-                (Appendable) getResource().as(Appendable.class);", "-            if (a != null) {", "-                return new Appendable() {", "-                    public OutputStream getAppendOutputStream()", "-                        throws IOException {", "-                        OutputStream out = a.getAppendOutputStream();", "-                        if (out != null) {", "-                            out = wrapStream(out);", "+            if (isAppendSupported()) {", "+                final Appendable a =", "+                    (Appendable) getResource().as(Appendable.class);", "+                if (a != null) {", "+                    return new Appendable() {", "+                        public OutputStream getAppendOutputStream()", "+                            throws IOException {", "+                            OutputStream out = a.getAppendOutputStream();", "+                            if (out != null) {", "+                                out = wrapStream(out);", "+                            }", "+                            return out;", "-                        return out;", "-                    }", "-                };", "+                    };", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "758ffab357dc24f858d4d1b55829235e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "f587706860d8dbeea5521a18041a7b7acdf4c1f7", "commitAfterChange": "37820a501815a54bd1bb393d1cd1ea0bf2f6c273", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 26, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                        log(\"Opening PrintStream to output file \" + output, Project.MSG_VERBOSE);", "-                        out = new PrintStream(new BufferedOutputStream(", "-                                new FileOutputStream(output.getAbsolutePath(), append)));", "+                        log(\"Opening PrintStream to output Resource \" + output, Project.MSG_VERBOSE);", "+                        OutputStream os;", "+                        if (output instanceof FileProvider) {", "+                            os = new FileOutputStream(((FileProvider) output).getFile(), append);", "+                        } else {", "+                            os = output.getOutputStream();", "+                            if (append) {", "+                                log(\"Ignoring append=true for non-file resource \" + output, Project.MSG_WARN);", "+                            }", "+                        }", "+                        out = new PrintStream(new BufferedOutputStream(os));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9f7f74a42ae05f0acbb27e26a03438e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "bbc333a9beba4f07085696e59587bcab4ee8faf5", "commitAfterChange": "7585dbdb2172fba650850c170b6bcf8a1a10dc23", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void catFiles(File base, String[] files)", "signatureAfterChange": "     private void catFiles(File base, String[] files)", "diff": ["-                OutputStream os = null;", "-                    os = new LogOutputStream(this, Project.MSG_WARN);", "+                    out = new PrintWriter(", "+                              new OutputStreamWriter(", "+                                  new LogOutputStream(this, Project.MSG_WARN)", "+                                  )", "+                              );", "-                    os = ", "-                        new FileOutputStream(destinationFile.getAbsolutePath(),", "-                                             append);", "+                    out = new PrintWriter(", "+                              new OutputStreamWriter(", "+                                  new FileOutputStream(destinationFile", "+                                                       .getAbsolutePath(),", "+                                                       append),", "+                                  encoding)", "+                              );", "-                out = new PrintWriter(new OutputStreamWriter(os, encoding));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d389e249e161f7659b1014ad883cc0da", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/condition/IsSigned.java", "commitBeforeChange": "4783bc46159826bc33858cfc9145c4be93dfe755", "commitAfterChange": "2a291dca9249d6a4958d9898282fa67343bf59b7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public static boolean isSigned(File zipFile, String name)         throws IOException", "signatureAfterChange": "     public static boolean isSigned(File zipFile, String name)         throws IOException", "diff": ["-            } else {", "-                boolean shortSig = jarFile.getEntry(SIG_START", "-                                                    + name.toUpperCase()", "-                                                    + SIG_END) != null;", "-                boolean longSig = false;", "-                if (name.length() > 8) {", "-                    longSig =", "+            } ", "+            boolean shortSig = jarFile.getEntry(SIG_START", "+                        + name.toUpperCase()", "+                        + SIG_END) != null;", "+            boolean longSig = false;", "+            if (name.length() > 8) {", "+                longSig =", "-                                         + name.substring(0, 8).toUpperCase()", "-                                         + SIG_END) != null;", "-                }", "-", "-                return shortSig || longSig;", "+                                        + name.substring(0, 8).toUpperCase()", "+                                        + SIG_END) != null;", "+            ", "+            return shortSig || longSig;"]}]}
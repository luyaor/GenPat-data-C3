{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c87cf3f2362a2d70874d51c6fd76c63", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "192b549af2bf3afed01af6d81289dae3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/optional/ScriptRunner.java", "commitBeforeChange": "ebefa298a138aaf7088ad1af981a392b895eff85", "commitAfterChange": "c0b535098106a3b4549151960da251a6e78e627e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void executeScript(String execName) throws BuildException", "signatureAfterChange": "     public void executeScript(String execName) throws BuildException", "diff": ["-        if (language == null) {", "-            throw new BuildException(\"script language must be specified\");", "-        }", "-", "-        ClassLoader origContextClassLoader =", "-            Thread.currentThread().getContextClassLoader();", "-        ClassLoader scriptLoader = getClass().getClassLoader();", "-        if (classpath != null && project != null) {", "-            scriptLoader = project.createClassLoader(", "-                scriptLoader, classpath);", "-        }", "+        checkLanguage();", "+        ClassLoader origLoader = replaceContextLoader();", "-            Thread.currentThread().setContextClassLoader(scriptLoader);", "-            BSFManager manager = new BSFManager ();", "-            manager.setClassLoader(scriptLoader);", "-", "-            for (Iterator i = beans.keySet().iterator(); i.hasNext();) {", "-                String key = (String) i.next();", "-                Object value = beans.get(key);", "-                if (value != null) {", "-                    manager.declareBean(key, value, value.getClass());", "-                } else {", "-                    // BSF uses a hashtable to store values", "-                    // so cannot declareBean with a null value", "-                    // So need to remove any bean of this name as", "-                    // that bean should not be visible", "-                    manager.undeclareBean(key);", "-                }", "-            }", "-", "+            BSFManager m = createManager();", "+            declareBeans(m);", "-            manager.exec(language, execName, 0, 0, script);", "-        } catch (BSFException be) {", "-            Throwable t = be;", "-            Throwable te = be.getTargetException();", "-            if (te != null) {", "-                if  (te instanceof BuildException) {", "-                    throw (BuildException) te;", "-                } else {", "-                    t = te;", "-                }", "+            if (engine == null) {", "+                m.exec(getLanguage(), execName, 0, 0, getScript());", "+            } else {", "+                engine.exec(execName, 0, 0, getScript());", "-            throw new BuildException(t);", "+        } catch (BSFException be) {", "+            throwBuildException(be);", "-             Thread.currentThread().setContextClassLoader(", "-                 origContextClassLoader);", "+            restoreContextLoader(origLoader);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a681ce1856a63f0937db34ab1ce18320", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ImportTask.java", "commitBeforeChange": "3a39ebed995578e9b6b14fb02724ddd2c4c3a516", "commitAfterChange": "a5da600a7a23e415a3028787e9b06fbc0dd27f74", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void execute()", "signatureAfterChange": "      public void execute()", "diff": ["-        if (file == null && resource == null) {", "+        if (file == null && resources.size() == 0) {", "-                                     + \" nested resource\");", "+                                     + \" at least one nested resource\");", "-        Resource importedResource = resource;", "-        File importedFile = null;", "-        if (resource == null) {", "+        Union resourcesToImport = new Union(getProject(), resources);", "+        if (file != null) {", "-        File buildFile = new File(getLocation().getFileName()).getAbsoluteFile();", "+            File buildFile =", "+                new File(getLocation().getFileName()).getAbsoluteFile();", "-        // Paths are relative to the build file they're imported from,", "-        // *not* the current directory (same as entity includes).", "+            // Paths are relative to the build file they're imported from,", "+            // *not* the current directory (same as entity includes).", "-        File buildFileParent = new File(buildFile.getParent());", "-            importedFile = FILE_UTILS.resolveFile(buildFileParent, file);", "-            importedResource = new FileResource(importedFile);", "+            File buildFileParent = new File(buildFile.getParent());", "+            File importedFile = FILE_UTILS.resolveFile(buildFileParent, file);", "+            resources.add(new FileResource(importedFile));", "+        for (Iterator i = resourcesToImport.iterator(); i.hasNext(); ) {", "+            importResource(helper, (Resource) i.next());", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afbb4d70ef5f6836bdacc816bb633f6d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/selectors/SelectorUtils.java", "commitBeforeChange": "cde826c2b0d226773ff00407365ac581b3e7c9e0", "commitAfterChange": "48c3492303350febdfc637a4c4a2e681f15f1867", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public static boolean match(String pattern, String str,                                 boolean isCaseSensitive)", "signatureAfterChange": "     public static boolean match(String pattern, String str,                                 boolean caseSensitive)", "diff": ["-                                boolean isCaseSensitive) {", "+                                boolean caseSensitive) {", "-                    if (isCaseSensitive && ch != strArr[i]) {", "+                    if (different(caseSensitive, ch, strArr[i])) {", "-                    }", "-                    if (!isCaseSensitive && Character.toUpperCase(ch)", "-                            != Character.toUpperCase(strArr[i])) {", "-                        return false;  // Character mismatch", "-        while ((ch = patArr[patIdxStart]) != '*' && strIdxStart <= strIdxEnd) {", "+        while (true) {", "+            ch = patArr[patIdxStart];", "+            if (ch == '*' || strIdxStart > strIdxEnd) {", "+                break;", "+            }", "-                if (isCaseSensitive && ch != strArr[strIdxStart]) {", "-                    return false; // Character mismatch", "-                }", "-                if (!isCaseSensitive && Character.toUpperCase(ch)", "-                        != Character.toUpperCase(strArr[strIdxStart])) {", "+                if (different(caseSensitive, ch, strArr[strIdxStart])) {", "-            for (int i = patIdxStart; i <= patIdxEnd; i++) {", "-                if (patArr[i] != '*') {", "-                    return false;", "-                }", "-            }", "-            return true;", "+            return allStars(patArr, patIdxStart, patIdxEnd);", "-        while ((ch = patArr[patIdxEnd]) != '*' && strIdxStart <= strIdxEnd) {", "+        while (true) {", "+            ch = patArr[patIdxEnd];", "+            if (ch == '*' || strIdxStart > strIdxEnd) {", "+                break;", "+            }", "-                if (isCaseSensitive && ch != strArr[strIdxEnd]) {", "-                    return false; // Character mismatch", "-                }", "-                if (!isCaseSensitive && Character.toUpperCase(ch)", "-                        != Character.toUpperCase(strArr[strIdxEnd])) {", "+                if (different(caseSensitive, ch, strArr[strIdxEnd])) {", "-            for (int i = patIdxStart; i <= patIdxEnd; i++) {", "-                if (patArr[i] != '*') {", "-                    return false;", "-                }", "-            }", "-            return true;", "+            return allStars(patArr, patIdxStart, patIdxEnd);", "-                        if (isCaseSensitive && ch != strArr[strIdxStart + i", "-                                + j]) {", "-                            continue strLoop;", "-                        }", "-                        if (!isCaseSensitive", "-                            && Character.toUpperCase(ch)", "-                                != Character.toUpperCase(strArr[strIdxStart + i + j])) {", "+                        if (different(caseSensitive, ch,", "+                                      strArr[strIdxStart + i + j])) {", "-        for (int i = patIdxStart; i <= patIdxEnd; i++) {", "-            if (patArr[i] != '*') {", "+        return allStars(patArr, patIdxStart, patIdxEnd);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f77b3d8977cf7c57b14b8c6959b227da", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "32f323668f263fad0bc38a43c6d4e6a1f4579c8a", "commitAfterChange": "a920aa9f305e0f998c908798c99b6d108f5d4a58", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public boolean doGet(int logLevel, DownloadProgress progress)             throws IOException", "signatureAfterChange": "     public boolean doGet(int logLevel, DownloadProgress progress)             throws IOException", "diff": ["+        for (Iterator iter = sources.iterator(); iter.hasNext(); ) {", "+            Resource r = (Resource) iter.next();", "+            URLProvider up = (URLProvider) r.as(URLProvider.class);", "+            URL source = up.getURL();", "+            return doGet(source, destination, logLevel, progress);", "+        }", "+        /*NOTREACHED*/", "+        return false;", "+    }", "-        GetThread getThread = new GetThread(hasTimestamp, timestamp, progress,"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "55872af02544f9aa503f798f0e6121e3", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "092bfe03c9b1863e13c4ad61d5532964", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/config/AntConfigHandler.java", "commitBeforeChange": "58257e4ff6cc42fbd00bdf71cb1ecce4b1e117cc", "commitAfterChange": "cba254e641320b3864c7d81345b5c1d1f8fe79dc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void startElement(String uri, String localName, String qualifiedName,                              Attributes attributes)          throws SAXParseException", "signatureAfterChange": "     public void startElement(String uri, String localName, String qualifiedName,                              Attributes attributes)          throws SAXParseException", "diff": ["-        try {", "-            if (qualifiedName.equals(\"loadlib\")) {", "-                LoadLibHandler loadlibHandler", "-                     = new LoadLibHandler();", "-                loadlibHandler.start(getParseContext(), getXMLReader(),", "-                    this, getLocator(), attributes, getElementSource(),", "-                    qualifiedName);", "-                config.addAntLibraryLocation(loadlibHandler.getLibLocation());", "-            } else if (qualifiedName.equals(\"libpath\")) {", "-                LibPathHandler libPathHandler", "-                     = new LibPathHandler();", "-                libPathHandler.start(getParseContext(), getXMLReader(),", "-                    this, getLocator(), attributes, getElementSource(),", "-                    qualifiedName);", "-", "-                if (libPathHandler.getLibraryPath() != null) {", "-                    config.addLibPath(libPathHandler.getLibraryId(),", "-                        libPathHandler.getLibraryPath());", "-                } else {", "-                    config.addLibURL(libPathHandler.getLibraryId(),", "-                        libPathHandler.getLibraryURL());", "-                }", "-", "-            } else {", "-                super.startElement(uri, localName, qualifiedName, attributes);", "-            }", "-        } catch (ConfigException e) {", "-            throw new SAXParseException(\"Unable to process config\",", "-                getLocator(), e);", "-        }", "+        // everything else is a task", "+        BuildElementHandler buildElementHandler = new BuildElementHandler();", "+        buildElementHandler.start(getParseContext(), getXMLReader(),", "+            this, getLocator(), attributes, getElementSource(),", "+            qualifiedName);", "+        config.addTask(buildElementHandler.getBuildElement());", "+//        try {", "+//        } catch (ConfigException e) {", "+//            throw new SAXParseException(\"Unable to process config\",", "+//                getLocator(), e);", "+//        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29848f3b5417daa02eadb227de30c5b9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteJava.java", "commitBeforeChange": "87c740f8a7024d16874ec4f65ccd688a77320724", "commitAfterChange": "761201eca25ffe38373a5b37d7747f6ff3d759f9", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void execute(Project project) throws BuildException", "signatureAfterChange": "     public void execute(Project project) throws BuildException", "diff": ["-            if (classpath == null) {", "-                target = Class.forName(classname);", "-            } else {", "-                loader = project.createClassLoader(classpath);", "-                loader.setParent(project.getCoreLoader());", "-                loader.setParentFirst(false);", "-                loader.addJavaLibraries();", "-                loader.setIsolated(true);", "-                loader.setThreadContextLoader();", "-                loader.forceLoadClass(classname);", "-                target = Class.forName(classname, true, loader);", "+            try {", "+                if (classpath == null) {", "+                    target = Class.forName(classname);", "+                } else {", "+                    loader = project.createClassLoader(classpath);", "+                    loader.setParent(project.getCoreLoader());", "+                    loader.setParentFirst(false);", "+                    loader.addJavaLibraries();", "+                    loader.setIsolated(true);", "+                    loader.setThreadContextLoader();", "+                    loader.forceLoadClass(classname);", "+                    target = Class.forName(classname, true, loader);", "+                }", "+            } catch (ClassNotFoundException e) {", "+                throw new BuildException(\"Could not find \" + classname + \".\"", "+                                         + \" Make sure you have it in your\"", "+                                         + \" classpath\");", "-        } catch (ClassNotFoundException e) {", "-            throw new BuildException(\"Could not find \" + classname + \".\"", "-                                     + \" Make sure you have it in your\"", "-                                     + \" classpath\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "362caf6b268896f98d9cf100f2f8eb99", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/dotnet/DotnetResource.java", "commitBeforeChange": "c5d224e2fabd860332b84182429505a5f2a2ee54", "commitAfterChange": "6f8402d926c54252e54ac79efa3f5480ab7323c3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public String getVbStyleParameter()", "signatureAfterChange": "      private String getParameter(String fileName, String name, boolean csharpStyle)", "diff": ["+", "+    private String getParameter(String fileName, String name, boolean csharpStyle) {", "+        StringBuffer buffer=new StringBuffer();", "+        buffer.append(isEmbed()?\"/resource\":\"/linkresource\");", "+        buffer.append(':');", "+        buffer.append(fileName);", "+        if (name!=null) {", "+            buffer.append(',');", "+            buffer.append(name);", "+            if (csharpStyle) {", "+                if (getPublic()!=null) {", "+                    throw new BuildException(", "+                        \"This compiler does not support the \"", "+                        +\"public/private option.\");", "+                }", "+                else {", "+                    if (getPublic()!=null) {", "+                        buffer.append(',');", "+                        buffer.append(getPublic().booleanValue()", "+                                      ?\"public\":\"private\");", "+", "+                    }", "+                }", "+            }", "+            else if (getPublic()!=null) {", "+                throw new BuildException(\"You cannot have a public or private \"", "+                                         +\"option without naming the resource\");", "+            }", "-    public String getVbStyleParameter() {", "-        StringBuffer buffer = new StringBuffer();", "-        buffer.append(isEmbed() ? \"/resource\" : \"/linkresource\");", "-        buffer.append(':');", "-        buffer.append(getFile().toString());", "-        if (getName() != null) {", "-            buffer.append(',');", "-            buffer.append(getName());", "-            if (getPublic() != null) {", "-                buffer.append(',');", "-                buffer.append(getPublic().booleanValue()", "-                        ? \"public\" : \"private\");", "-            }", "-        } else if (getPublic() != null) {", "-            throw new BuildException(\"You cannot have a public or private \"", "-                    + \"option without naming the resource\");", "-        }", "-        return buffer.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3de24eaa8c7ba8505b3c9663c743cbd5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/repository/HttpRepository.java", "commitBeforeChange": "c8203de650acea3fa8e0e1a6acce7425f5bbe322", "commitAfterChange": "7651d02856325bec057619d215ee30c4c605ee80", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public boolean fetch(Library library) throws IOException", "signatureAfterChange": "     public boolean fetch(Library library) throws IOException", "diff": ["+        URL remoteURL=new URL(path);", "-        GetMethod get = createGet(path);", "+        long start, finish;", "+        start = System.currentTimeMillis();", "+        finish = System.currentTimeMillis();", "-        if (useTimestamps) {", "-            setIfModifiedSinceHeader(get, library.getLastModified());", "-        }", "-        try {", "-            long start, finish;", "-            start = System.currentTimeMillis();", "-            client.executeMethod(get);", "-            if (useTimestamps && get.getStatusCode() == HttpStatus.SC_NOT_MODIFIED) {", "-                logDebug(\"File is not modified\");", "-                //we get here if there is no change in timestamp", "-                //so no fetch", "-                return false;", "-            }", "-            if (get.getStatusCode() != HttpStatus.SC_OK) {", "-                String message = \"Request Failed:\"", "-                        + get.getStatusCode()", "-                        + \" from \" + get.getPath();", "-                logVerbose(message);", "-                logVerbose(get.getStatusLine().toString());", "-                logVerbose(get.getStatusText());", "-                throw new BuildException(message);", "-            }", "-            saveStreamToLibrary(get, library);", "-            finish = System.currentTimeMillis();", "-            long diff = finish - start;", "-            logVerbose(\"downloaded in \" + diff / 1000 + \" seconds\");", "-        } finally {", "-            // Release the connection.", "-            get.releaseConnection();", "-        }", "+        boolean success=get(remoteURL, library.getLibraryFile(),useTimestamps,", "+                username, password);", "+        long diff = finish - start;", "+        logVerbose(\"downloaded in \" + diff / 1000 + \" seconds\");", "-        return true;", "+        return success;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47a51424af43d4ba0ea87384565c43b9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/modules/edit/ElementNavigator.java", "commitBeforeChange": "8f7d91aacd3823ed8a447f714d2a3d97ca69518e", "commitAfterChange": "11b6cebd071bd1851cd57916525ea5ec386dbf79", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "         public boolean eventPosted(EventObject event)", "signatureAfterChange": "         public boolean eventPosted(EventObject event)", "diff": ["-            ACSProjectElement project = null;", "-            if(event instanceof ProjectSelectedEvent) {", "-                ProjectSelectedEvent e = (ProjectSelectedEvent) event;", "-                project = e.getSelectedProject();", "-            }", "-", "-            if(project == null) {", "-                // The project has been closed.", "-                // XXX this needs to be tested against ", "-                // different version of Swing...", "-                _tree.setModel(null);", "-                _tree.setSelectionModel(null);", "-                // Send an empty selection event to notify others that", "-                // nothing is selected.", "-                ElementSelectionEvent.createEvent(getContext(), null);", "+            if(event instanceof PropertyChangeEvent) {", "+                // The project node has changed.", "+// XXX This won't work until ACSTreeNodeElement.getParent() is fixed", "+//                ElementTreeModel model = (ElementTreeModel)_tree.getModel();", "+//                model.nodeChanged((TreeNode)model.getRoot());", "+                ", "-                _tree.setModel(new ElementTreeModel(project));", "-                _selections = new ElementTreeSelectionModel();", "-                _selections.addTreeSelectionListener(new SelectionForwarder());", "-                _tree.setSelectionModel(_selections);", "+                ACSProjectElement project = null;", "+                if(event instanceof ProjectSelectedEvent) {", "+                    ProjectSelectedEvent e = (ProjectSelectedEvent) event;", "+                    project = e.getSelectedProject();", "+                }", "+                ", "+                if(project == null) {", "+                    // The project has been closed.", "+                    // XXX this needs to be tested against ", "+                    // different version of Swing...", "+                    _tree.setModel(null);", "+                    _tree.setSelectionModel(null);", "+                    // Send an empty selection event to notify others that", "+                    // nothing is selected.", "+                    ElementSelectionEvent.createEvent(getContext(), null);", "+                }", "+                else {", "+                    _tree.setModel(new ElementTreeModel(project));", "+                    _selections = new ElementTreeSelectionModel();", "+                    _selections.addTreeSelectionListener(", "+                        new SelectionForwarder());", "+                    _tree.setSelectionModel(_selections);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d8bdcd03e68fece54382251e965f678", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/listener/CommonsLoggingListener.java", "commitBeforeChange": "8372d91e2632e11426949885f056804ae7717537", "commitAfterChange": "988ec061641b11cce372f8d85e12aa9f0134a8ae", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void messageLogged(BuildEvent event)", "signatureAfterChange": "     public void messageLogged(BuildEvent event)", "diff": ["+            String categoryString=null;", "+            String categoryDetail=null;", "+", "+                    categoryString=\"org.apache.tools.ant.Project\";", "+                    categoryDetail=event.getProject().getName();", "+                } else {", "+                    categoryString= \"org.apache.tools.ant.Target\";", "+                    categoryDetail=event.getTarget().getName();", "+            } else {", "+                // It's a task - append the target", "+                if( event.getTarget() != null ) {", "+                    categoryString=categoryObject.getClass().getName();", "+                    categoryDetail=event.getTarget().getName();", "+                } else {", "+                    categoryString=categoryObject.getClass().getName();", "+                }", "+", "-            Log log = logFactory.getInstance(categoryObject.getClass().getName());", "-            switch (event.getPriority()) {", "-                case Project.MSG_ERR:", "-                    log.error(event.getMessage());", "-                    break;", "-                case Project.MSG_WARN:", "-                    log.warn(event.getMessage());", "-                    break;", "-                case Project.MSG_INFO:", "-                    log.info(event.getMessage());", "-                    break;", "-                case Project.MSG_VERBOSE:", "-                    log.debug(event.getMessage());", "-                    break;", "-                case Project.MSG_DEBUG:", "-                    log.debug(event.getMessage());", "-                    break;", "-                default:", "-                    log.error(event.getMessage());", "-                    break;", "-            }", "+            Log log = getLog(categoryString, categoryDetail);", "+            int priority=event.getPriority();", "+            String message=event.getMessage();", "+            realLog( log, message, priority , null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6933afe9780de14aee95be0fa1c4ddc6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/depend/bcel/DependencyVisitor.java", "commitBeforeChange": "ffd2a2d7c25b78eb5f50c182312acb9dcf01ccda", "commitAfterChange": "5722812dbe0cfda11a528c3e6c32b2b2b67b7960", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void visitConstantNameAndType(ConstantNameAndType obj)", "signatureAfterChange": "     public void visitConstantNameAndType(ConstantNameAndType obj)", "diff": ["-            addClass(classname);", "-            int index = classname.lastIndexOf(\".\");", "-            if (index != -1) {", "-                classname = classname.substring(0, index) + \"$\" +", "-                            classname.substring(index + 1);", "+            // does the class have a package structure", "+            int index = classname.lastIndexOf(\".\");            ", "+            if (index > 0) {", "+                char start;", "+                // check if the package structure is more than 1 level deep", "+                int index2 = classname.lastIndexOf(\".\", index -1);", "+                if (index2 != -1) {", "+                    // class name has more than 1 package level 'com.company.Class'", "+                    start = classname.charAt(index2 + 1);", "+                }", "+                else {", "+                    // class name has only 1 package level 'package.Class'", "+                    start = classname.charAt(0);", "+                }", "+                // Check to see if it's an inner class 'com.company.Class$Inner'", "+                if ((start > 0x40) && (start < 0x5B)) {", "+                    // first letter of the previous segment of the class name 'Class'", "+                    // is upper case ascii. so according to the spec it's an inner class", "+                    classname = classname.substring(0, index) + \"$\" +", "+                            classname.substring(index + 1);                            ", "+                    addClass(classname);", "+                }", "+                else {", "+                    // Add the class in dotted notation 'com.company.Class'                       ", "+                    addClass(classname);", "+                }                    ", "+            }", "+            else {               ", "+                // Add a class with no package 'Class'"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81bd4ce1ddae1dd564f98b91e440994f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/embed/ProjectHelperImpl2.java", "commitBeforeChange": "af97c64cb1b6bea8dd0d7aa333a51c7613cbe5e9", "commitAfterChange": "3256156dcc13ead3eba8a9ea02b23ce7f7be8eb2", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 29, "signatureBeforeChange": "         public void onStartElement(String uri, String tag, String qname,                                    Attributes attrs,                                    AntXmlContext context)             throws SAXParseException", "signatureAfterChange": "         public void onStartElement(String uri, String tag, String qname,                                    Attributes attrs,                                    AntXmlContext context)             throws SAXParseException", "diff": ["-            if (context.project.getDataTypeDefinitions().get(qname) != null) {", "+            RuntimeConfigurable2 parentWrapper=context.currentWrapper();", "+            RuntimeConfigurable2 wrapper=null;", "+            ", "+            if (context.getProject().getDataTypeDefinitions().get(qname) != null) {", "-                    element = context.project.createDataType(qname);", "+                    Object element = context.getProject().createDataType(qname);", "+                        // can it happen ? We just checked that the type exists", "-                    target.addDataType(wrapper);", "+                    context.currentTarget.addDataType(wrapper);", "-                    task = context.project.createTask(qname);", "+                    task = context.getProject().createTask(qname);", "-                    task.setProject(context.project);", "+                    task.setProject(context.getProject());", "-                element=task;", "-                task.setOwningTarget(target);", "-                container.addTask(task);", "+                task.setOwningTarget(context.currentTarget);", "+", "+                Object parent=null;", "+                if( parentWrapper!=null ) {", "+                    parent=parentWrapper.getProxy();", "+                }", "+", "+                if( parent instanceof TaskContainer ) {", "+                    // Task included in a TaskContainer", "+                    ((TaskContainer)parent).addTask( task );", "+                } else {", "+                    // Task included in a target ( including the default one ).", "+                    context.currentTarget.addTask( task );", "+                }", "+                // container.addTask(task);", "-                ", "+", "+", "+            context.pushWrapper( wrapper );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86db886c07f69c4bc9a0d6034e08d330", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/acs/ACSTargetElementBeanInfo.java", "commitBeforeChange": "8170daae431ee785c4c5fe5b924ab200f077ab3a", "commitAfterChange": "6a6e0bd2647db6ae35dcfa3e9f81e306a64b7cc4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public PropertyDescriptor[] getPropertyDescriptors()", "signatureAfterChange": "     public PropertyDescriptor[] getPropertyDescriptors()", "diff": ["-                new PropertyDescriptor(getResources().getString(", "-                    getClass(),ACSTargetElement.NAME), ", "+                new PropertyDescriptor(ACSTargetElement.NAME, ", "-                new PropertyDescriptor(getResources().getString(", "-                    getClass(),ACSTargetElement.DESCRIPTION),", "-                                       ACSTargetElement.class)", "-", "+                new PropertyDescriptor(ACSTargetElement.DESCRIPTION,", "+                                       ACSTargetElement.class),", "+                new PropertyDescriptor(ACSTargetElement.DEPENDS,", "+                                       ACSTargetElement.class),", "+                new PropertyDescriptor(ACSTargetElement.IF,", "+                                       ACSTargetElement.class),", "+                new PropertyDescriptor(ACSTargetElement.UNLESS,", "+                                       ACSTargetElement.class),", "+                new PropertyDescriptor(ACSTargetElement.XML_STRING, ", "+                                       ACSTargetElement.class,", "+                                       \"getXMLString\", null)", "+", "+            // Set display names.", "+            retval[0].setDisplayName(getResources().getString(", "+                getClass(),ACSTargetElement.NAME));", "+            retval[1].setDisplayName(getResources().getString(", "+                getClass(),ACSTargetElement.DESCRIPTION));", "+            retval[2].setDisplayName(getResources().getString(", "+                getClass(),ACSTargetElement.DEPENDS));", "+            retval[3].setDisplayName(getResources().getString(", "+                getClass(),ACSTargetElement.IF));", "+            retval[4].setDisplayName(getResources().getString(", "+                getClass(),ACSTargetElement.UNLESS));", "+            retval[5].setDisplayName(getResources().getString(", "+                getClass(),ACSTargetElement.XML_STRING));", "+", "+            setSortingOrder(retval);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87d44690b3439d83522905f7eef954e9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteOn.java", "commitBeforeChange": "9ff2d6a1ab17e51f25cadf8de2a1b7ada8c15490", "commitAfterChange": "eefa2aba55ad71e6c5ee6e54748b1dc76025c7ac", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 9, "signatureBeforeChange": "      protected void runExec(Execute exe) throws BuildException", "signatureAfterChange": "      protected void runExec(Execute exe) throws BuildException", "diff": ["+            Vector fileNames = new Vector();", "+            Vector baseDirs = new Vector();", "-                Vector v = new Vector();", "-                        v.addElement(s[j]);", "+                        fileNames.addElement(s[j]);", "+                        baseDirs.addElement(base);", "-                        v.addElement(s[j]);", "+                        fileNames.addElement(s[j]);", "+                        baseDirs.addElement(base);", "-                if (v.size() == 0 && skipEmpty) {", "+                if (fileNames.size() == 0 && skipEmpty) {", "-                String[] s = new String[v.size()];", "-                v.copyInto(s);", "-", "-                int err = -1;", "-                ", "-                if (parallel) {", "-                    String[] command = getCommandline(s, base);", "-                    log(\"Executing \" + Commandline.toString(command), ", "-                        Project.MSG_VERBOSE);", "-                    exe.setCommandline(command);", "-                    runExecute(exe);", "-", "-                } else {", "+                if (!parallel) {", "+                    String[] s = new String[fileNames.size()];", "+                    fileNames.copyInto(s);", "+                    fileNames.removeAllElements();", "+                    baseDirs.removeAllElements();", "+            }", "+", "+            if (parallel) {", "+                String[] s = new String[fileNames.size()];", "+                fileNames.copyInto(s);", "+                File[] b = new File[baseDirs.size()];", "+                baseDirs.copyInto(b);", "+                String[] command = getCommandline(s, b);", "+                log(\"Executing \" + Commandline.toString(command), ", "+                    Project.MSG_VERBOSE);", "+                exe.setCommandline(command);", "+                runExecute(exe);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "903a68992d42a6e26e710ec2b98e03fb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/modules/edit/ElementNavigator.java", "commitBeforeChange": "113069f80d96fff735116abb27b70951799106fc", "commitAfterChange": "9996345251656eb38c5326fa7e5f394bc5f43882", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "         private void handle(MouseEvent e)", "signatureAfterChange": "         private void handle(MouseEvent e)", "diff": ["-                ActionManager mgr = getContext().getActions();", "-                JPopupMenu menu = mgr.createPopup(", "-                    getContext().getResources().getStringArray(", "-                        ElementNavigator.class, \"popupActions\"));", "-                menu.show((JComponent)e.getSource(), e.getX(), e.getY());", "+                Object source = e.getSource();", "+                String[] menuStr = null;", "+                JTree tree = (JTree) source;", "+                ", "+                // Find the selected path.", "+                TreePath selPath = tree.getPathForLocation(", "+                    e.getX(), e.getY());", "+                if (selPath == null) {", "+                    return;", "+                }", "+", "+                // Update the selection. ", "+                tree.setSelectionPath(selPath);", "+", "+                // Find the selected object.", "+                Object selObj = selPath.getLastPathComponent();", "+", "+                String defaultID = null;", "+                ", "+                // Does the item provide its own menu?", "+                if (selObj instanceof ACSInfoProvider) {", "+                    ACSInfoProvider ip = (ACSInfoProvider) selObj;", "+                    menuStr = ip.getMenuString();", "+                    defaultID = ip.getDefaultActionID();", "+                } else {", "+                    // Get the menu from the prop file.", "+                    menuStr = getContext().getResources().getStringArray(", "+                        ElementNavigator.class, defaultID);", "+                }", "+", "+                // Should we create a menu?", "+                if (menuStr != null && menuStr.length != 0) {", "+                    ActionManager mgr = getContext().getActions();", "+                    JPopupMenu menu = mgr.createPopup(menuStr, defaultID);", "+                    menu.show((JComponent)e.getSource(), e.getX(), e.getY());", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5c7f15a33af48796328c898268731f0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Checksum.java", "commitBeforeChange": "16a5d1b56ceb8dca9875b074ebb36c626ce06763", "commitAfterChange": "931a037496b3bc1c55734fd221a3ef773dc8cabb", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private boolean generateChecksums() throws BuildException", "signatureAfterChange": "     private boolean generateChecksums() throws BuildException", "diff": ["-                StringBuffer checksumSb = new StringBuffer();", "-                for (int i = 0; i < fileDigest.length; i++) {", "-                    String hexStr = Integer.toHexString(0x00ff & fileDigest[i]);", "-                    if (hexStr.length() < 2) {", "-                        checksumSb.append(\"0\");", "-                    }", "-                    checksumSb.append(hexStr);", "+                if (totalproperty != null) {", "+                    allDigests.put(src,fileDigest);", "-                String checksum = checksumSb.toString();", "+                String checksum = createDigestString(fileDigest);", "+            if (totalproperty != null) {", "+                // Calculate the total checksum", "+                // Convert the keys (source files) into a sorted array.", "+                Set keys = allDigests.keySet();", "+                Object[] keyArray = keys.toArray();", "+                // File is Comparable, so sorting is trivial", "+                Arrays.sort(keyArray);", "+                // Loop over the checksums and generate a total hash.", "+                messageDigest.reset();", "+                for (int i = 0; i < keyArray.length; i++) {", "+                    File src = (File) keyArray[i];", "+", "+                    // Add the digest for the file content", "+                    byte[] digest = (byte[]) allDigests.get(src);", "+                    messageDigest.update(digest);", "+", "+                    // Add the file path", "+                    String fileName = (String) relativeFilePaths.get(src);", "+                    messageDigest.update(fileName.getBytes());", "+                }", "+                String totalChecksum = createDigestString(messageDigest.digest());", "+                getProject().setNewProperty(totalproperty, totalChecksum);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "babe61a278a7b186a25d86acdd12605c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "2907030ab0cfd24783426d24bf06f7bbee19995f", "commitAfterChange": "b879b27c7274e2a54ad6a6e2a886311cb51ce771", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 68, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        if (version)", "+        if (version && doclet == null)", "-        if (author)", "+        if (author && doclet == null)", "+            if (serialwarn)                     ", "+                argList.addElement(\"-serialwarn\");", "-                argList.addElement(\"-doclet\");", "-                argList.addElement(doclet);", "-            }", "-            if (docletpath != null) {", "-                argList.addElement(\"-docletpath\");", "-                argList.addElement(docletpath);", "-            }", "+                if (doclet.getName() == null) {", "+                    throw new BuildException(\"The doclet name must be specified.\");", "+                }", "+                else {                ", "+                    argList.addElement(\"-doclet\");", "+                    argList.addElement(doclet.getName());", "+                    if (doclet.getPath() != null) {", "+                        argList.addElement(\"-docletpath\");", "+                        argList.addElement(doclet.getPath());", "+                    }", "+                    for (Enumeration e = doclet.getParams(); e.hasMoreElements();) {", "+                        DocletParam param = (DocletParam)e.nextElement();", "+                        if (param.getName() == null) {", "+                            throw new BuildException(\"Doclet parameters must have a name\");", "+                        }", "+                        ", "+                        argList.addElement(param.getName());", "+                        if (param.getValue() != null) {", "+                            argList.addElement(param.getValue());", "+                        }", "+                    }                        ", "+                }", "+            } ", "+            if (charset != null) {", "+                argList.addElement(\"-charset\");", "+                argList.addElement(charset);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d882ff00428ef62273acc6e0b94401c0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/modules/edit/ElementNavigator.java", "commitBeforeChange": "113069f80d96fff735116abb27b70951799106fc", "commitAfterChange": "9996345251656eb38c5326fa7e5f394bc5f43882", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "         public boolean eventPosted(EventObject event)", "signatureAfterChange": "         public boolean eventPosted(EventObject event)", "diff": ["+            else if(event instanceof RefreshDisplayEvent && model != null) {", "+                _tree.updateUI();", "+            }", "+            }", "+            else if(event instanceof DeleteElementEvent && model != null) {", "+                _tree.updateUI();", "-                    _tree.setModel(new ElementTreeModel(project));", "-                    _selections = new ElementTreeSelectionModel();", "-                    _selections.addTreeSelectionListener(", "-                        new SelectionForwarder());", "-                    _tree.setSelectionModel(_selections);", "+                    boolean updateModel = false;", "+                    TreeModel testModel = _tree.getModel();", "+                    ", "+                    // Set the model if's not an ElementTreeModel", "+                    if (testModel instanceof ElementTreeModel) {", "+                        ElementTreeModel etm = (ElementTreeModel) testModel;", "+                        ACSProjectElement currentProject = ", "+                            (ACSProjectElement) etm.getRoot();", "+                        ", "+                        // Set the model if the project is wrong", "+                        if (currentProject != project) {", "+                            updateModel = true;", "+                        }", "+                    } else {", "+                        updateModel = true;", "+                    }", "+", "+                    // Should we update the tree model", "+                    if (updateModel) {", "+                        _tree.setModel(new ElementTreeModel(project));", "+                        _selections = new ElementTreeSelectionModel();", "+                        _selections.addTreeSelectionListener(", "+                            new SelectionForwarder());", "+                        _tree.setSelectionModel(_selections);", "+                    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "28cea5af39d2b8b724f01fa058fa561b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ef9f79ecad88869310527ddccd529c4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/CoreDataService.java", "commitBeforeChange": "752f49d5b18f9743f8e4a6dbdc8065d240d9c97a", "commitAfterChange": "da4e1a3aa99899d6aecc6d14c2a7498fa51647aa", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public boolean isDataValueSet(String name) throws ExecutionException", "signatureAfterChange": "     public boolean isDataValueSet(String name) throws AntException", "diff": ["-    public boolean isDataValueSet(String name) throws ExecutionException {", "-        return frame.isDataValueSet(name);", "+    public boolean isDataValueSet(String name) throws AntException {", "+        Frame containingFrame = frame.getContainingFrame(name);", "+", "+        if (containingFrame == null) {", "+            return isOverrideSet(name);", "+        }", "+        if (containingFrame == frame) {", "+            return dataValues.containsKey(name);", "+        } else {", "+            String localName = frame.getNameInFrame(name);", "+            DataService actualDataService = getFrameDataService(containingFrame);", "+            return actualDataService.isDataValueSet(localName);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4af04296220de9f51aa81c1089bb2c5a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/CoreDataService.java", "commitBeforeChange": "752f49d5b18f9743f8e4a6dbdc8065d240d9c97a", "commitAfterChange": "da4e1a3aa99899d6aecc6d14c2a7498fa51647aa", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void setMutableDataValue(String valueName, Object value)          throws ExecutionException", "signatureAfterChange": "     private void setOverrideProperty(String name, DataValue value,                                      boolean mutable)          throws ExecutionException", "diff": ["-    public void setMutableDataValue(String valueName, Object value)", "-         throws ExecutionException {", "-        frame.setDataValue(valueName, value, true);", "+     */", "+    private void setOverrideProperty(String name, DataValue value,", "+                                     boolean mutable)", "+         throws ExecutionException {", "+        int refIndex = name.indexOf(Project.REF_DELIMITER);", "+        if (refIndex == -1) {", "+            throw new ExecutionException(\"Property overrides can only be set\"", "+                 + \" for properties in referenced projects - not \"", "+                 + name);", "+        }", "+", "+        String firstFrameName = name.substring(0, refIndex);", "+", "+        String relativeName", "+             = name.substring(refIndex + Project.REF_DELIMITER.length());", "+", "+        Map frameOverrides = (Map) overrides.get(firstFrameName);", "+        if (frameOverrides == null) {", "+            frameOverrides = new HashMap();", "+            overrides.put(firstFrameName, frameOverrides);", "+        }", "+", "+        updateValue(frameOverrides, relativeName, value, mutable);", "+    }"]}]}
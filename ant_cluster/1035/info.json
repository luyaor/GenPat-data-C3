{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bbe3618de58d111cedb19ff209075e67", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "044641e4ca2a9f6d1ed019ba26b1d903", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Ant.java", "commitBeforeChange": "7d18fc9d2131ec5f1f3c1f59995f70b1a69f71dd", "commitAfterChange": "03d8b12829680840c24e878d3d65fb4e7f808018", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                if (getOwningTarget().getName().equals(\"\")) {", "+", "+                String owningTargetName = getOwningTarget().getName();", "+", "+                if (owningTargetName.equals(\"\")) {", "-                } else if (getOwningTarget().getName().equals(target)) {", "+                } else if (owningTargetName.equals(target)) {", "+                } else {", "+                    Target other = ", "+                        (Target) getProject().getTargets().get(target);", "+                    if (other != null && other.dependsOn(owningTargetName)) {", "+                        throw new BuildException(getTaskName() ", "+                                                 + \" task calling a target\"", "+                                                 + \" that depends on\"", "+                                                 + \" its parent target \\'\"", "+                                                 + owningTargetName", "+                                                 + \"\\'.\");", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b08a8c20a0d46faadbe417193089b4a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/RuntimeConfigurable.java", "commitBeforeChange": "1beb540cd6584dc7246fecda16a0d10bd6ff6f3a", "commitAfterChange": "d4ebf04094c0866a1d3608f45a3ca80d46ad2702", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     public void maybeConfigure(Project p, boolean configureChildren)         throws BuildException", "signatureAfterChange": "     public void maybeConfigure(Project p, boolean configureChildren)         throws BuildException", "diff": ["-                } catch (BuildException be) {", "+                } catch (UnsupportedAttributeException be) {", "-                    if (!name.equals(\"id\")) {", "+                    if (name.equals(\"id\")) {", "+                        // Do nothing", "+                    } else  if (getElementTag() == null) {", "+                        throw be;", "+                    } else {", "+                        be.setMessage(", "+                            getElementTag()", "+                            +  \" doesn't support the \\\"\"", "+                            + be.getAttribute()", "+                            + \"\\\" attribute\");", "+                        throw be;", "+                    }", "+                } catch (BuildException be) {", "+                    if (name.equals(\"id\")) {", "+                        // Assume that this is an not supported attribute type", "+                        // thrown for example by a dymanic attribute task", "+                        // Do nothing", "+                    } else {"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5fe34847f950e148d2447722c4d878c5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93be46144a762b1d551b723e1b75700e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Property.java", "commitBeforeChange": "be12707c63314ce0314959ff551e37fe59b83943", "commitAfterChange": "4f3e4e1690289144b15872597586ed34ae92efb5", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "      protected void loadEnvironment( String prefix )", "signatureAfterChange": "      protected void loadEnvironment( String prefix )", "diff": ["-        try {", "-            Vector osEnv = Execute.getProcEnvironment();", "-            for (Enumeration e = osEnv.elements(); e.hasMoreElements(); ) {", "-                String entry = (String)e.nextElement();", "-                int pos = entry.indexOf('=');", "-                if (pos == -1) {", "-                    log(\"Ignoring: \" + entry, Project.MSG_WARN);", "-                } else {", "-                    props.put(prefix + entry.substring(0, pos), ", "-                              entry.substring(pos + 1));", "-                }", "+        Vector osEnv = Execute.getProcEnvironment();", "+        for (Enumeration e = osEnv.elements(); e.hasMoreElements(); ) {", "+            String entry = (String)e.nextElement();", "+            int pos = entry.indexOf('=');", "+            if (pos == -1) {", "+                log(\"Ignoring: \" + entry, Project.MSG_WARN);", "+            } else {", "+                props.put(prefix + entry.substring(0, pos), ", "+                entry.substring(pos + 1));", "-            addProperties(props);", "-        } catch (Exception ex) {", "-            throw new BuildException(ex, location);", "+        addProperties(props);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb7aef379b8cd5567eb66a1a47fa6ec8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "2d446f3df2b49ea07727bbd5b330f45a95024d42", "commitAfterChange": "f152ff3665854eda95df9916a022351da219efac", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "      protected void runStatements(Reader reader, PrintStream out) throws SQLException, IOException", "signatureAfterChange": "      protected void runStatements(Reader reader, PrintStream out)          throws SQLException, IOException", "diff": ["-    protected void runStatements(Reader reader, PrintStream out) throws SQLException, IOException {", "+    protected void runStatements(Reader reader, PrintStream out) ", "+        throws SQLException, IOException {", "-        try{", "-            while ((line=in.readLine()) != null){", "-                line = line.trim();", "-                line = project.replaceProperties(line);", "-                if (line.startsWith(\"//\")) {", "-                  continue;", "-                }", "-                if (line.startsWith(\"--\")) {", "-                  continue;", "-                }", "-                StringTokenizer st = new StringTokenizer(line);", "-                if (st.hasMoreTokens()) {", "-                    String token = st.nextToken();", "-                    if (\"REM\".equalsIgnoreCase(token)) {", "-                        continue;", "-                    }", "-                }", "-", "-                sql += \" \" + line;", "-                sql = sql.trim();", "-", "-                // SQL defines \"--\" as a comment to EOL", "-                // and in Oracle it may contain a hint", "-                // so we cannot just remove it, instead we must end it", "-                if (line.indexOf(\"--\") >= 0) {", "-                  sql += \"\\n\";", "-                }", "-", "-                if (delimiterType.equals(DelimiterType.NORMAL) && sql.endsWith(delimiter) ||", "-                    delimiterType.equals(DelimiterType.ROW) && line.equals(delimiter)) {", "-                    log(\"SQL: \" + sql, Project.MSG_VERBOSE);", "-                    execSQL(sql.substring(0, sql.length() - delimiter.length()), out);", "-                    sql = \"\";", "+        while ((line=in.readLine()) != null){", "+            line = line.trim();", "+            line = project.replaceProperties(line);", "+            if (line.startsWith(\"//\")) {", "+                continue;", "+            }", "+            if (line.startsWith(\"--\")) {", "+                continue;", "+            }", "+            StringTokenizer st = new StringTokenizer(line);", "+            if (st.hasMoreTokens()) {", "+                String token = st.nextToken();", "+                if (\"REM\".equalsIgnoreCase(token)) {", "+                    continue;", "- ", "-            // Catch any statements not followed by ;", "-            if(!sql.equals(\"\")){", "-                execSQL(sql, out);", "+            ", "+            sql += \" \" + line;", "+            sql = sql.trim();", "+            ", "+            // SQL defines \"--\" as a comment to EOL", "+            // and in Oracle it may contain a hint", "+            // so we cannot just remove it, instead we must end it", "+            if (line.indexOf(\"--\") >= 0) {", "+                sql += \"\\n\";", "-        }catch(SQLException e){", "-            throw e;", "+            ", "+            if ((delimiterType.equals(DelimiterType.NORMAL) ", "+                 && sql.endsWith(delimiter)) ", "+                ||", "+                (delimiterType.equals(DelimiterType.ROW) ", "+                 && line.equals(delimiter))) {", "+                log(\"SQL: \" + sql, Project.MSG_VERBOSE);", "+                execSQL(sql.substring(0, sql.length() - delimiter.length()), ", "+                        out);", "+                sql = \"\";", "+            }", "-", "+        ", "+        // Catch any statements not followed by ;", "+        if(!sql.equals(\"\")){", "+            execSQL(sql, out);", "+        }"]}]}
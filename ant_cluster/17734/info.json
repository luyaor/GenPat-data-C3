{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c0dd81c70cc389c19a0ba7c84730c430", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f3892a0e4dbf16f42c31711619883b9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "d3122c568192c3da62eb74174d96674a679999a8", "commitAfterChange": "655ad8f525f6d55fe32cbecdd3ef437b0f5d5fa5", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "         private File createCommandFile(String[] cmd) throws IOException", "signatureAfterChange": "         private File createCommandFile(String[] cmd, String[] env)             throws IOException", "diff": ["-        private File createCommandFile(String[] cmd) throws IOException {", "+        private File createCommandFile(String[] cmd, String[] env)", "+            throws IOException {", "-                StringBuffer dclCmd = new StringBuffer(\"$\");", "-                for (int i = 0; i < cmd.length; i++) {", "-                    dclCmd.append(' ').append(cmd[i]);", "+", "+                // add the environment as logicals to the DCL script", "+                if (env != null) {", "+                    int eqIndex;", "+                    for (int i = 1; i < env.length ; i++) {", "+                        eqIndex = env[i].indexOf('=');", "+                        if (eqIndex != -1) {", "+                            out.print(\"$ DEFINE/NOLOG \");", "+                            out.print(env[i].substring(0, eqIndex));", "+                            out.print(\" \\\"\");", "+                            out.print(env[i].substring(eqIndex + 1));", "+                            out.println('\\\"');", "+                        }", "+                    }", "-                out.println(dclCmd.toString());", "+", "+                out.print(\"$ \" + cmd[0]);", "+                for (int i = 1; i < cmd.length ; i++) {", "+                    out.println(\" -\");", "+                    out.print(cmd[i]);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b674365c688f1eaa1b7942643aaf6bd5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/TelnetTask.java", "commitBeforeChange": "e64c186c50b3ef61f4fce8cbc9a9e9c169c84e19", "commitAfterChange": "d4be9171f872a91dda1f3fd2dcf9249f6ee2fa88", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 19, "signatureBeforeChange": "       public void waitForString(String s)", "signatureAfterChange": "       public void waitForString(String s, Integer timeout)", "diff": ["+       */", "+      public void waitForString(String s, Integer timeout)", "-          while (sb.toString().indexOf(s) == -1)", "+          if (timeout == null || timeout.intValue() == 0)", "-              while (is.available() == 0);", "-              int iC = is.read();", "-              Character c = new Character((char)iC);", "-              sb.append(c);", "+              while (sb.toString().indexOf(s) == -1)", "+                  {", "+                      sb.append((char) is.read());", "+                  }", "+          }", "+          else", "+          {", "+              Calendar endTime = Calendar.getInstance(); ", "+              endTime.add(Calendar.SECOND,timeout.intValue());", "+              while ( sb.toString().indexOf(s) == -1)", "+              {", "+                  while (Calendar.getInstance().before(endTime) &&", "+                         is.available() == 0) {", "+                      Thread.sleep(250);", "+                  }", "+                  if (is.available() == 0)", "+                      throw new BuildException(\"Response Timed-Out\", getLocation());", "+                  sb.append((char) is.read());", "+              }", "+        } catch (BuildException be)", "+        { ", "+            throw be;"]}]}
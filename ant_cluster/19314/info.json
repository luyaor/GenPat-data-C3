{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7ceeb113f53e9c205179c83d88d1165d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "236e541574ce80e9ed7bb31409ac594a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/workspace/DefaultTaskContext.java", "commitBeforeChange": "c1d66dbc0cb573a6afe5fcaea76e661622337a00", "commitAfterChange": "43cbdfc52cca75f3089c7494d99b91cb9d562fc0", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public Object getService( final Class serviceClass )         throws TaskException", "signatureAfterChange": "     public Object getService( final Class serviceClass )         throws TaskException", "diff": ["-        throw new TaskException( \"No services available atm\" );", "+        // Try this context first", "+        final String name = serviceClass.getName();", "+        if( m_componentManager.hasComponent( name ) )", "+        {", "+            try", "+            {", "+                final Component service = m_componentManager.lookup( name );", "+                if( !serviceClass.isInstance( service ) )", "+                {", "+                    final String message =", "+                        REZ.getString( \"bad-service-class.error\",", "+                                       name,", "+                                       service.getClass().getName(),", "+                                       serviceClass.getName() );", "+                    throw new TaskException( message );", "+                }", "+", "+                return service;", "+            }", "+            catch( final ComponentException ce )", "+            {", "+                final String message = REZ.getString( \"bad-find-service.error\", name );", "+                throw new TaskException( message, ce );", "+            }", "+        }", "+", "+        // Try parent", "+        final TaskContext parent = (TaskContext)getParent();", "+        if( null != parent )", "+        {", "+            return parent.getService( serviceClass );", "+        }", "+", "+        // Not found", "+        final String message = REZ.getString( \"bad-find-service.error\", name );", "+        throw new TaskException( message );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a43273baae99b81aed84c5539826096", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultObjectConfigurer.java", "commitBeforeChange": "02a2cffe8f27603fdd8c7c83cc415170496a6fe1", "commitAfterChange": "9c6515959f5bf9016b0dd8c12691e1e7549b2dd0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void enableProperties()         throws ConfigurationException", "signatureAfterChange": "     private void enableProperties()         throws ConfigurationException", "diff": ["-        final Map adders = findAdders();", "+        final Map configurers = findPropertyConfigurers();", "-        final Iterator iterator = adders.keySet().iterator();", "+        final Iterator iterator = configurers.keySet().iterator();", "-            final String propName = (String)iterator.next();", "-            final Method addMethod = (Method)adders.get( propName );", "+            final String name = (String)iterator.next();", "+            final Method method = (Method)configurers.get( name );", "+            final boolean isSetter = method.getName().startsWith( \"set\" );", "-            final Class type = addMethod.getParameterTypes()[ 0 ];", "-            final boolean isTypedProp = ( propName.length() == 0 );", "+            final Class type = method.getParameterTypes()[ 0 ];", "+            final boolean isTypedProp = ( name.length() == 0 );", "-", "-            // Determine the max count for the property", "-            int maxCount = Integer.MAX_VALUE;", "-            if( addMethod != null && addMethod.getName().startsWith( \"set\" ) )", "+            else if( isTypedProp && isSetter )", "-                maxCount = 1;", "+                final String message =", "+                    REZ.getString( \"typed-setter-not-allowed.error\",", "+                                   m_class.getName(),", "+                                   type.getName() );", "+                throw new ConfigurationException( message );", "+            }", "+            else if( isTypedProp && null != m_typedPropertyConfigurer )", "+            {", "+                final String message =", "+                    REZ.getString( \"typed-adder-duplicates.error\",", "+                                   m_class.getName(),", "+                                   type.getName() );", "+                throw new ConfigurationException( message );", "-            final DefaultPropertyConfigurer configurer =", "-                new DefaultPropertyConfigurer( m_allProps.size(),", "-                                               type,", "-                                               addMethod,", "-                                               maxCount );", "-            m_allProps.add( configurer );", "-            if( isTypedProp )", "+            // Determine the max count for the property", "+            if( isSetter )", "-                m_typedPropConfigurer = configurer;", "+                final DefaultPropertyConfigurer setter =", "+                    new DefaultPropertyConfigurer( getPropertyCount(),", "+                                                   type,", "+                                                   method,", "+                                                   1 );", "+                m_setters.put( name, setter );", "-                m_props.put( propName, configurer );", "+                final DefaultPropertyConfigurer configurer =", "+                    new DefaultPropertyConfigurer( getPropertyCount(),", "+                                                   type,", "+                                                   method,", "+                                                   Integer.MAX_VALUE );", "+                if( isTypedProp )", "+                {", "+                    m_typedPropertyConfigurer = configurer;", "+                }", "+                else", "+                {", "+                    m_adders.put( name, configurer );", "+                }"]}]}
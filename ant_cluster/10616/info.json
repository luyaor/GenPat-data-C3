{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "99c8cc8edfb9172d1b98ac83bced0ede", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a288a5311e0a66d1991bc57b5cde9dc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/regexp/RegexpFactory.java", "commitBeforeChange": "1c1b51bd76af7e7cfa6dab8a66b3661acf199bea", "commitAfterChange": "c64fafb60c841a1c7f014340167a84b32c0d19e3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected Regexp createRegexpInstance(String classname)         throws BuildException", "signatureAfterChange": "     protected Regexp createRegexpInstance(String classname) throws BuildException", "diff": ["-    protected Regexp createRegexpInstance(String classname)", "-        throws BuildException {", "-", "-        RegexpMatcher m = createInstance(classname);", "-        if (m instanceof Regexp) {", "-            return (Regexp) m;", "-        } else {", "-            throw new BuildException(classname + \" doesn't implement the Regexp interface\");", "-        }", "+    protected Regexp createRegexpInstance(String classname) throws BuildException {", "+        return (Regexp) ClasspathUtils.newInstance(classname, RegexpFactory.class.getClassLoader(),", "+                Regexp.class);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50bea8283221a6ec4fbb32a875e5617e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/regexp/RegexpMatcherFactory.java", "commitBeforeChange": "af007ba13234afc51a113ee612e6abad4642cad1", "commitAfterChange": "81b65c0eaa7fff0b658e28269907a36c3a83fc6b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected RegexpMatcher createInstance(String className)         throws BuildException", "signatureAfterChange": "     protected RegexpMatcher createInstance(String className)         throws BuildException", "diff": ["-        throws BuildException {", "-        try {", "-            Class implClass = Class.forName(className);", "-            return (RegexpMatcher) implClass.newInstance();", "-        } catch (Throwable t) {", "-            throw new BuildException(t);", "-        }", "+        throws BuildException ", "+    {", "+        return (RegexpMatcher) ClasspathUtils.newInstance(className,", "+                RegexpMatcherFactory.class.getClassLoader(), RegexpMatcher .class);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d15cd00e3453fbdab68e7ba9672ce781", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8b269395291c016f42d46c630a615a7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/PropertyFile.java", "commitBeforeChange": "334ac128fea4c6e8e76c7c8af8061a47b5019bf4", "commitAfterChange": "ba37bf7991e099b567f8cd5a09178893ff55bb9c", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 17, "signatureBeforeChange": "         private void executeDate(String oldValue) throws BuildException", "signatureAfterChange": "         private void executeDate(String oldValue) throws BuildException", "diff": ["-        private void executeDate(String oldValue) throws BuildException ", "+        private void executeDate(String oldValue) throws BuildException", "-            StringBuffer dateString = new StringBuffer();", "+            GregorianCalendar value = new GregorianCalendar();", "+            GregorianCalendar newValue = new GregorianCalendar();", "-            // If value is defined then interpret what's given", "-            if (m_operation.equals(NULL_VALUE)) ", "-            {", "-                m_dateValue = null;", "-            }", "-            else ", "-            {", "-                Date now = new Date();", "-                m_dateValue.setTime(now);", "-                dateString.append(m_dateValue.get(Calendar.YEAR));", "-                dateString.append(\"/\");", "-                dateString.append((m_dateValue.get(Calendar.MONTH)+1 < 10) ? \"0\" : \"\");", "-                dateString.append(m_dateValue.get(Calendar.MONTH)+1);", "-                dateString.append(\"/\");", "-                dateString.append((m_dateValue.get(Calendar.DATE) < 10) ? \"0\" : \"\");", "-                dateString.append(m_dateValue.get(Calendar.DATE));", "-                dateString.append(\" \");", "-                dateString.append((m_dateValue.get(Calendar.HOUR_OF_DAY) < 10) ? \"0\" : \"\");", "-                dateString.append(m_dateValue.get(Calendar.HOUR_OF_DAY));", "-                dateString.append(\":\");", "-                dateString.append((m_dateValue.get(Calendar.MINUTE) < 10) ? \"0\" : \"\");", "-                dateString.append(m_dateValue.get(Calendar.MINUTE));", "-                m_value = dateString.toString();", "+            if (m_pattern == null) m_pattern = \"yyyy/MM/dd HH:mm\";", "+            DateFormat fmt = new SimpleDateFormat(m_pattern);", "+", "+            if (m_value != null) {", "+                if (NOW_VALUE_.equals(m_value.toLowerCase())) {", "+                    value.setTime(new Date());", "+                }", "+                else if (NULL_VALUE_.equals(m_value.toLowerCase())) {", "+                    value = null;", "+                }", "+                else {", "+                    try {", "+                        value.setTime(fmt.parse(m_value));", "+                    }", "+                    catch (Exception ex) {", "+                        // obviously not a date, try a simple int", "+                        try {", "+                            int offset = Integer.parseInt(m_value);", "+                            value.clear();", "+                            value.set(Calendar.DAY_OF_YEAR, offset);", "+                        }", "+                        catch (Exception ex_) {", "+                            value.clear();", "+                            value.set(Calendar.DAY_OF_YEAR, 1);", "+                        }", "+                    }", "+", "+                }", "-            m_value = dateString.toString();", "+            // special case", "+            if (m_default != null &&", "+                NOW_VALUE_.equals(m_default.toLowerCase()) &&", "+                (m_operation == Operation.INCREMENT_OPER ||", "+                 m_operation == Operation.DECREMENT_OPER) ) {", "+                oldValue = null;", "+            }", "+", "+            if (oldValue != null) {", "+                try {", "+                    newValue.setTime(fmt.parse(oldValue));", "+                }", "+                catch (ParseException pe)  { /* swollow */ }", "+            }", "+            else {", "+                if (m_default != null) {", "+                    if (NOW_VALUE_.equals(m_default.toLowerCase())) {", "+                        newValue.setTime(new Date());", "+                    }", "+                    else if (NULL_VALUE_.equals(m_default.toLowerCase())) {", "+                        newValue = null;", "+                    }", "+                    else {", "+                        try {", "+                            newValue.setTime(fmt.parse(m_default));", "+                        }", "+                        catch (ParseException pe)  { /* swollow */ }", "+                    }", "+                }", "+            }", "+", "+            if (m_operation == Operation.EQUALS_OPER) {", "+                newValue = value;", "+            }", "+            else if (m_operation == Operation.INCREMENT_OPER) {", "+                newValue.add(Calendar.SECOND, value.get(Calendar.SECOND));", "+                newValue.add(Calendar.MINUTE, value.get(Calendar.MINUTE));", "+                newValue.add(Calendar.HOUR_OF_DAY, value.get(Calendar.HOUR_OF_DAY));", "+                newValue.add(Calendar.DAY_OF_YEAR, value.get(Calendar.DAY_OF_YEAR));", "+            }", "+            else if (m_operation == Operation.DECREMENT_OPER) {", "+                newValue.add(Calendar.SECOND, -1 * value.get(Calendar.SECOND));", "+                newValue.add(Calendar.MINUTE, -1 * value.get(Calendar.MINUTE));", "+                newValue.add(Calendar.HOUR_OF_DAY, -1 * value.get(Calendar.HOUR_OF_DAY));", "+                newValue.add(Calendar.DAY_OF_YEAR, -1 * value.get(Calendar.DAY_OF_YEAR));", "+            }", "+            if (newValue != null) {", "+                m_value = fmt.format(newValue.getTime());", "+            }", "+            else {", "+                m_value = \"\";", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebec8c8fc21fddde95a4e64426d9aa15", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/PropertyFile.java", "commitBeforeChange": "62f2142b3431002933bf1281d244c164ed962890", "commitAfterChange": "6cbeee38fa5502baa5d75036ad2c0418cf808d56", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "         private void executeDate(String oldValue) throws BuildException", "signatureAfterChange": "         private void executeDate(String oldValue) throws BuildException", "diff": ["-            GregorianCalendar value = new GregorianCalendar();", "-            GregorianCalendar newValue = new GregorianCalendar();", "+            Calendar currentValue = Calendar.getInstance();", "-            if (m_pattern == null) {", "-              m_pattern = \"yyyy/MM/dd HH:mm\";", "+            if (pattern == null) {", "+              pattern = \"yyyy/MM/dd HH:mm\";", "-            DateFormat fmt = new SimpleDateFormat(m_pattern);", "+            DateFormat fmt = new SimpleDateFormat(pattern);", "-            // special case", "-            if (m_default != null &&", "-                NOW_VALUE_.equals(m_default.toLowerCase()) &&", "-                (m_operation == Operation.INCREMENT_OPER ||", "-                 m_operation == Operation.DECREMENT_OPER) ) {", "-                 oldValue = null;", "+            String currentStringValue = getCurrentValue(oldValue);", "+            if (currentStringValue == null) {", "+                currentStringValue = DEFAULT_DATE_VALUE;", "-", "-            if (oldValue != null) {", "+            ", "+            if (\"now\".equals(currentStringValue)) {", "+                currentValue.setTime(new Date());", "+            }", "+            else {", "-                    value.setTime(fmt.parse(oldValue));", "+                    currentValue.setTime(fmt.parse(currentStringValue));", "-", "-            if (m_value != null) {", "-                if (NOW_VALUE_.equals(m_value.toLowerCase())) {", "-                    value.setTime(new Date());", "-                }", "-                else if (NULL_VALUE_.equals(m_value.toLowerCase())) {", "-                    value = null;", "-                }", "-                else {", "-                    try {", "-                        value.setTime(fmt.parse(m_value));", "+            ", "+            if (operation != Operation.EQUALS_OPER) {", "+                int offset = 0;", "+                try {", "+                    offset = Integer.parseInt(value);", "+                    if (operation == Operation.DECREMENT_OPER) {", "+                        offset = -1 * offset;", "-                    catch (Exception ex) {", "-                        // obviously not a date, try a simple int", "-                        try {", "-                            int offset = Integer.parseInt(m_value);", "-                            value.clear();", "-                            value.set(Calendar.DAY_OF_YEAR, offset);", "-                        }", "-                        catch (Exception ex_) {", "-                            value.clear();", "-                            value.set(Calendar.DAY_OF_YEAR, 1);", "-                        }", "-                    }", "-", "+                catch (NumberFormatException e) {", "+                    throw new BuildException(\"Value not an integer on \" + key);", "+                }", "+                currentValue.add(field, offset);", "-            if (m_default != null && oldValue == null) {", "-                if (NOW_VALUE_.equals(m_default.toLowerCase())) {", "-                    value.setTime(new Date());", "-                }", "-                else if (NULL_VALUE_.equals(m_default.toLowerCase())) {", "-                    value = null;", "-                }", "-                else {", "-                    try {", "-                        value.setTime(fmt.parse(m_default));", "-                    }", "-                    catch (ParseException pe)  { /* swollow */ }", "-                }", "-            }", "-", "-", "-            if (m_operation == Operation.EQUALS_OPER) {", "-                newValue = value;", "-            }", "-            else if (m_operation == Operation.INCREMENT_OPER) {", "-                newValue.add(Calendar.SECOND, value.get(Calendar.SECOND));", "-                newValue.add(Calendar.MINUTE, value.get(Calendar.MINUTE));", "-                newValue.add(Calendar.HOUR_OF_DAY, value.get(Calendar.HOUR_OF_DAY));", "-                newValue.add(Calendar.DAY_OF_YEAR, value.get(Calendar.DAY_OF_YEAR));", "-            }", "-            else if (m_operation == Operation.DECREMENT_OPER) {", "-                newValue.add(Calendar.SECOND, -1 * value.get(Calendar.SECOND));", "-                newValue.add(Calendar.MINUTE, -1 * value.get(Calendar.MINUTE));", "-                newValue.add(Calendar.HOUR_OF_DAY, -1 * value.get(Calendar.HOUR_OF_DAY));", "-                newValue.add(Calendar.DAY_OF_YEAR, -1 * value.get(Calendar.DAY_OF_YEAR));", "-            }", "-            if (newValue != null) {", "-                m_value = fmt.format(newValue.getTime());", "-            }", "-            else {", "-                m_value = \"\";", "-            }", "+            value = fmt.format(currentValue.getTime());"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "48a7fb3b5fd2411850f0bad5a2346cc2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8edab8f1096db35ec57ae4373586ff60", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteOn.java", "commitBeforeChange": "575148a6633379d3f2c61d0cc838050b68929852", "commitAfterChange": "a7d38cf2639a85056062bdc2c3da1067cb84644a", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": "     protected void runExec(Execute exe) throws BuildException", "signatureAfterChange": "     protected void runExec(Execute exe) throws BuildException", "diff": ["-                    if (!\"dir\".equals(type)) {", "+                    if (!FileDirBoth.DIR.equals(type)) {", "-                        currentType = \"dir\";", "+                        currentType = FileDirBoth.DIR;", "-                if (!\"dir\".equals(currentType)) {", "+                if (!FileDirBoth.DIR.equals(currentType)) {", "-                if (!\"file\".equals(currentType)) {", "+                if (!FileDirBoth.FILE.equals(currentType)) {", "-                        = ((!\"dir\".equals(currentType))", "+                        = ((!FileDirBoth.DIR.equals(currentType))", "-                        + ((!\"file\".equals(currentType))", "+                        + ((!FileDirBoth.FILE.equals(currentType))", "-            for (int i = 0; i < filelists.size(); i++) {", "-                FileList list = (FileList) filelists.elementAt(i);", "-                File base = list.getDir(getProject());", "-                String[] names = getFilesAndDirs(list);", "+\t", "+\t    Iterator iter = resources.iterator();", "+\t    while (iter.hasNext()) {", "+\t\tResource res = (Resource) iter.next();", "-                for (int j = 0; j < names.length; j++) {", "-                    File f = new File(base, names[j]);", "-                    if ((!ignoreMissing) || (f.isFile() && !\"dir\".equals(type))", "-                        || (f.isDirectory() && !\"file\".equals(type))) {", "+\t\tif (!res.isExists() && ignoreMissing) {", "+\t\t    continue;", "+\t\t}", "-                        if (ignoreMissing || f.isFile()) {", "-                            totalFiles++;", "-                        } else {", "-                            totalDirs++;", "-                        }", "-                        fileNames.addElement(names[j]);", "-                        baseDirs.addElement(base);", "-                    }", "-                }", "-                if (fileNames.size() == 0 && skipEmpty) {", "-                    DirectoryScanner ds = new DirectoryScanner();", "-                    ds.setBasedir(base);", "-                    ds.setIncludes(list.getFiles(getProject()));", "-                    ds.scan();", "-                    int includedCount", "-                        = ds.getIncludedFilesCount() + ds.getIncludedDirsCount();", "+\t\tFile base = null;", "+\t\tString name = res.getName();", "+\t\tif (res instanceof FileResource) {", "+\t\t    FileResource fr = (FileResource) res;", "+\t\t    base = fr.getBaseDir();", "+\t\t    if (base == null) {", "+\t\t\tname = fr.getFile().getAbsolutePath();", "+\t\t    }", "+\t\t}", "-                    log(\"Skipping filelist for directory \" + base + \". It is \"", "-                        + ((includedCount > 0) ? \"up to date.\" : \"empty.\"),", "-                        Project.MSG_INFO);", "-                    continue;", "-                }", "+\t\tif (restrict(new String[] {name}, base).length == 0) {", "+\t\t    continue;", "+\t\t}", "+", "+\t\tif ((!res.isDirectory() || !res.isExists())", "+\t\t    && !FileDirBoth.DIR.equals(type)) {", "+\t\t    totalFiles++;", "+\t\t} else if (res.isDirectory() && !FileDirBoth.FILE.equals(type)) {", "+\t\t    totalDirs++;", "+\t\t} else {", "+\t\t    continue;", "+\t\t}", "+", "+\t\tbaseDirs.add(base);", "+\t\tfileNames.add(name);", "+", "-                    String[] s = new String[fileNames.size()];", "-                    fileNames.copyInto(s);", "-                    for (int j = 0; j < s.length; j++) {", "-                        String[] command = getCommandline(s[j], base);", "-                        log(Commandline.describeCommand(command),", "-                            Project.MSG_VERBOSE);", "-                        exe.setCommandline(command);", "+\t\t    String[] command = getCommandline(name, base);", "+\t\t    log(Commandline.describeCommand(command),", "+\t\t\tProject.MSG_VERBOSE);", "+\t\t    exe.setCommandline(command);", "-                        if (redirectorElement != null) {", "-                            setupRedirector();", "-                            redirectorElement.configure(redirector, s[j]);", "-                        }", "-                        if (redirectorElement != null || haveExecuted) {", "-                            // need to reset the stream handler to restart", "-                            // reading of pipes;", "-                            // go ahead and do it always w/ nested redirectors", "-                            exe.setStreamHandler(redirector.createHandler());", "-                        }", "-                        runExecute(exe);", "-                        haveExecuted = true;", "-                    }", "-                    fileNames.removeAllElements();", "-                    baseDirs.removeAllElements();", "-                }", "+\t\t    if (redirectorElement != null) {", "+\t\t\tsetupRedirector();", "+\t\t\tredirectorElement.configure(redirector, name);", "+\t\t    }", "+\t\t    if (redirectorElement != null || haveExecuted) {", "+\t\t\t// need to reset the stream handler to restart", "+\t\t\t// reading of pipes;", "+\t\t\t// go ahead and do it always w/ nested redirectors", "+\t\t\texe.setStreamHandler(redirector.createHandler());", "+\t\t    }", "+\t\t    runExecute(exe);", "+\t\t    haveExecuted = true;", "+\t\t    fileNames.removeAllElements();", "+\t\t    baseDirs.removeAllElements();", "+\t\t}", "-            }", "+\t    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f0b1ea359b57c16ea29a24ddcc5111a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteOn.java", "commitBeforeChange": "27f9f065c82441f9e1f902ebcecb1b3249a0412e", "commitAfterChange": "a855a6dbfa1e5c8973fc8897cee409708e61175c", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "     protected void runExec(Execute exe) throws BuildException", "signatureAfterChange": "     protected void runExec(Execute exe) throws BuildException", "diff": ["-            Iterator iter = resources.iterator();", "-            while (iter.hasNext()) {", "-                Resource res = (Resource) iter.next();", "+                Iterator iter = resources.iterator();", "+                while (iter.hasNext()) {", "+                    Resource res = (Resource) iter.next();", "-                if (!res.isExists() && ignoreMissing) {", "-                    continue;", "-                }", "-", "-                File base = null;", "-                String name = res.getName();", "-                if (res instanceof FileResource) {", "-                    FileResource fr = (FileResource) res;", "-                    base = fr.getBaseDir();", "-                    if (base == null) {", "-                        name = fr.getFile().getAbsolutePath();", "+                    if (!res.isExists() && ignoreMissing) {", "+                        continue;", "-                }", "-                if (restrict(new String[] {name}, base).length == 0) {", "-                    continue;", "-                }", "-", "-                if ((!res.isDirectory() || !res.isExists())", "-                    && !FileDirBoth.DIR.equals(type)) {", "-                    totalFiles++;", "-                } else if (res.isDirectory() && !FileDirBoth.FILE.equals(type)) {", "-                    totalDirs++;", "-                } else {", "-                    continue;", "-                }", "-", "-                baseDirs.add(base);", "-                fileNames.add(name);", "-", "-                if (!parallel) {", "-                    String[] command = getCommandline(name, base);", "-                    log(Commandline.describeCommand(command),", "-                        Project.MSG_VERBOSE);", "-                    exe.setCommandline(command);", "-", "-                    if (redirectorElement != null) {", "-                        setupRedirector();", "-                        redirectorElement.configure(redirector, name);", "+                    File base = null;", "+                    String name = res.getName();", "+                    if (res instanceof FileResource) {", "+                        FileResource fr = (FileResource) res;", "+                        base = fr.getBaseDir();", "+                        if (base == null) {", "+                            name = fr.getFile().getAbsolutePath();", "+                        }", "-                    if (redirectorElement != null || haveExecuted) {", "-                        // need to reset the stream handler to restart", "-                        // reading of pipes;", "-                        // go ahead and do it always w/ nested redirectors", "-                        exe.setStreamHandler(redirector.createHandler());", "+", "+                    if (restrict(new String[] {name}, base).length == 0) {", "+                        continue;", "-                    runExecute(exe);", "-                    haveExecuted = true;", "-                    fileNames.removeAllElements();", "-                    baseDirs.removeAllElements();", "+", "+                    if ((!res.isDirectory() || !res.isExists())", "+                        && !FileDirBoth.DIR.equals(type)) {", "+                        totalFiles++;", "+                    } else if (res.isDirectory()", "+                               && !FileDirBoth.FILE.equals(type)) {", "+                        totalDirs++;", "+                    } else {", "+                        continue;", "+                    }", "+", "+                    baseDirs.add(base);", "+                    fileNames.add(name);", "+", "+                    if (!parallel) {", "+                        String[] command = getCommandline(name, base);", "+                        log(Commandline.describeCommand(command),", "+                            Project.MSG_VERBOSE);", "+                        exe.setCommandline(command);", "+", "+                        if (redirectorElement != null) {", "+                            setupRedirector();", "+                            redirectorElement.configure(redirector, name);", "+                        }", "+                        if (redirectorElement != null || haveExecuted) {", "+                            // need to reset the stream handler to restart", "+                            // reading of pipes;", "+                            // go ahead and do it always w/ nested redirectors", "+                            exe.setStreamHandler(redirector.createHandler());", "+                        }", "+                        runExecute(exe);", "+                        haveExecuted = true;", "+                        fileNames.removeAllElements();", "+                        baseDirs.removeAllElements();", "+                    }", "-            }"]}]}
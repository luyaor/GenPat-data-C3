{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "63fe851c88d60e3add9708819069c9d8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a155d9f73122ea1db94f37566a260da", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/RenameExtensions.java", "commitBeforeChange": "8785091ee1c92874c44324f0429765539987b048", "commitAfterChange": "c9928eaad1f371f18ecae2b487a5328b315b5790", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private Hashtable scanDir(File srcDir, String[] files)", "signatureAfterChange": "     private Hashtable scanDir(File srcDir, String[] files)", "diff": ["-                File destFile = new File(srcDir, filename.substring(0, filename.lastIndexOf(fromExtension)) + toExtension);", "+                File destFile = ", "+                    new File( srcDir, ", "+                              filename.substring(0, filename.lastIndexOf(fromExtension)) + ", "+                              toExtension );", "+", "-                    log(\"Rejecting file: '\" + srcFile + \"' for rename as replace is false and file exists\", Project.MSG_VERBOSE);", "+                    log( \"Rejecting file: '\" + srcFile + \"' for rename as \" + ", "+                         \"replace is false and file exists\", Project.MSG_VERBOSE );", "-                log(\"File '\"+ filename + \"' doesn't match fromExtension: '\" + fromExtension + \"'\", Project.MSG_VERBOSE);", "+                log( \"File '\"+ filename + \"' doesn't match fromExtension: '\" + ", "+                     fromExtension + \"'\", Project.MSG_VERBOSE );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cda13feb6e993727531a72774f1f38dd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/jdepend/JDependTask.java", "commitBeforeChange": "d60b6ca1eea0a3372c99965f3c15466328659908", "commitAfterChange": "c6c232893c39257745a8f7a618bcdb5c59791cae", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public int executeAsForked(CommandlineJava commandline,ExecuteWatchdog watchdog) throws BuildException", "signatureAfterChange": "     public int executeAsForked(CommandlineJava commandline,                                ExecuteWatchdog watchdog) throws BuildException", "diff": ["-    public int executeAsForked(CommandlineJava commandline,ExecuteWatchdog watchdog) throws BuildException {", "+    public int executeAsForked(CommandlineJava commandline,", "+                               ExecuteWatchdog watchdog) throws BuildException {", "-            // having a space between the file and its path causes commandline to add quotes \"", "-            // around the argument thus making JDepend not taking it into account. Thus we split it in two", "+            // having a space between the file and its path causes commandline ", "+            // to add quotes around the argument thus making JDepend not taking ", "+            // it into account. Thus we split it in two", "-        PathTokenizer sourcesPath = new PathTokenizer(getSourcespath().toString());", "+        PathTokenizer sourcesPath ", "+            = new PathTokenizer(getSourcespath().toString());", "-            if (! f.exists() || !f.isDirectory()) {", "-                throw new BuildException(\"\\\"\"+ f.getPath() + \"\\\" does not represent a valid directory. JDepend would fail.\");", "+            if (!f.exists() || !f.isDirectory()) {", "+                throw new BuildException(\"\\\"\" + f.getPath() + \"\\\" does not \" ", "+                    + \"represent a valid directory. JDepend would fail.\");", "-        log(\"Executing: \"+commandline.toString(), Project.MSG_VERBOSE);", "+        log(\"Executing: \" + commandline.toString(), Project.MSG_VERBOSE);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb219e652c76c9f297434f0253409429", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "170b80253df9aac968ac9e8e96b457f4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipEncodingHelper.java", "commitBeforeChange": "cbd20a77eba224b21654251583971e054729f006", "commitAfterChange": "752d64fa43db2172327771ba4d36bee3f2d3b49a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "     static final boolean canEncodeName(String name, String encoding)", "signatureAfterChange": "     static ZipEncoding getZipEncoding(String name)", "diff": ["+     */", "+    static ZipEncoding getZipEncoding(String name) {", "+ ", "+        // fallback encoding is good enough for utf-8.", "+        if (isUTF8(name)) {", "+            return UTF8_ZIP_ENCODING;", "+        }", "+", "+        if (name == null) {", "+            return new FallbackZipEncoding();", "+        }", "+", "+        SimpleEncodingHolder h =", "+            (SimpleEncodingHolder) simpleEncodings.get(name);", "+", "+        if (h!=null) {", "+            return h.getEncoding();", "+        }", "+", "+        try {", "+", "+            Charset cs = Charset.forName(name);", "+            return new NioZipEncoding(cs);", "+", "+        } catch (UnsupportedCharsetException e) {", "+            return new FallbackZipEncoding(name);", "+        }", "+    }", "-     */", "-    static final boolean canEncodeName(String name, String encoding) {", "-", "-        Charset cs = Charset.forName(encoding);", "-", "-        CharsetEncoder enc = cs.newEncoder();", "-        enc.onMalformedInput(CodingErrorAction.REPORT);", "-        enc.onUnmappableCharacter(CodingErrorAction.REPORT);", "-", "-        return enc.canEncode(name);", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ae7fd9c18ec2a0f2d881e7766078292", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "587a3c4f5ef9a0effe4e1065ac7500e1e6987018", "commitAfterChange": "f504cf793e6d72308577e1dc86c7bed47d65de12", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 93, "signatureBeforeChange": "          public long skip(long n) throws IOException", "signatureAfterChange": "      protected void scan(File srcDir, String vpath, Vector pkgs)", "diff": ["-", "-        public long skip(long n) throws IOException {", "-            for (long i = 0; i < n; i++) {", "-                if (in.read() == -1) return i;", "-            }", "-            return n;", "-        }", "+    protected void scan(File srcDir, String vpath, Vector pkgs) {", "+    \tfoundJavaFile = false;", "+    \tFile dir = new File(srcDir, vpath);", "+    \t", "+    \tif (!dir.isDirectory()) {", "+    \t\treturn;", "+    \t}", "+    ", "+    \tString[] files = dir.list(new FilenameFilter () {", "+    \t\t\tpublic boolean accept(File dir, String name) {", "+    \t\t\t\tif (name.endsWith(\".java\")) {", "+    \t\t\t\t\tfoundJavaFile = true;", "+    \t\t\t\t\treturn false;", "+    \t\t\t\t}", "+    \t\t\t\tFile d = new File(dir, name);", "+    \t\t\t\tif (d.isDirectory()) {", "+    \t\t\t\t\treturn true;", "+    \t\t\t\t}", "+    \t\t\t\treturn false;", "+    \t\t\t}", "+    \t\t});", "+    ", "+    \tif (foundJavaFile) {", "+    \t\tString newPkg = vpath.substring(1).replace(File.separatorChar, '.');", "+    \t\tif (!pkgs.contains(newPkg)) {", "+    \t\t\tpkgs.add(newPkg);", "+    \t\t}", "+    \t}", "+    \t", "+    \tfor (int i=0; i<files.length; i++) {", "+    \t\tscan(srcDir, vpath + File.separator + files[i], pkgs);", "+    \t}", "+    \treturn;", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "757c0201fdc68ae076a3dcbae3103d97", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d9898e6d55701baafad382ba21f3901", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ComponentManager.java", "commitBeforeChange": "c0ddb311373dc9fe32a78a15a68c4587bbb7566d", "commitAfterChange": "69d9b9a49622889f44d6792faf00f886857828d6", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public Object createComponent(AntLibFactory factory, ClassLoader loader,                                   Class componentClass, boolean addTaskAdapter,                                   String componentName)          throws ExecutionException", "signatureAfterChange": "     public Object createComponent(String libraryId, String localName)          throws ExecutionException", "diff": ["-    public Object createComponent(AntLibFactory factory, ClassLoader loader,", "-                                  Class componentClass, boolean addTaskAdapter,", "-                                  String componentName)", "+    public Object createComponent(String libraryId, String localName)", "-        return createComponent(loader, factory, componentClass,", "-            componentName, componentName, addTaskAdapter, null);", "+        AntLibrary library", "+             = (AntLibrary) antLibraries.get(libraryId);", "+        if (library == null) {", "+            throw new ExecutionException(\"No library with libraryId \\\"\"", "+                 + libraryId + \"\\\" is available\");", "+        }", "+", "+        AntLibDefinition libDefinition = library.getDefinition(localName);", "+        if (libDefinition == null) {", "+            throw new ExecutionException(\"No component with name \\\"\"", "+                 + localName + \"\\\" was found in library with libraryId \\\"\"", "+                 + libraryId + \"\\\"\");", "+        }", "+        return createComponentFromDef(localName, library, libDefinition, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fec574b765144b27e1e4a7d3b3c8e9e9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/antlib/AntLibManager.java", "commitBeforeChange": "65b70febb53b077317c4d678291f9af547c3d116", "commitAfterChange": "f9d1c1691c7e9d80b793f5178f6113c949fc2441", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void addLibPath(AntLibrary antLibrary, URL path)          throws ExecutionException", "signatureAfterChange": "     public void addLibPath(String libraryId, URL libPath)          throws AntLibException", "diff": ["-    public void addLibPath(AntLibrary antLibrary, URL path)", "-         throws ExecutionException {", "-        if (!path.getProtocol().equals(\"file\")", "+    public void addLibPath(String libraryId, URL libPath)", "+         throws AntLibException {", "+        System.out.println(\"Adding path \" + libPath + \" for \" + libraryId);", "+        if (!libPath.getProtocol().equals(\"file\")", "-            throw new ExecutionException(\"Remote libpaths are not\"", "-                 + \" allowed: \" + path);", "+            throw new AntLibException(\"Remote libpaths are not\"", "+                 + \" allowed: \" + libPath);", "-        antLibrary.addLibraryURL(path);", "+", "+        List libPaths = (List) libPathsMap.get(libraryId);", "+        if (libPaths == null) {", "+            libPaths = new ArrayList();", "+            libPathsMap.put(libraryId, libPaths);", "+        }", "+        libPaths.add(libPath);", "+", "+        AntLibrary antLibrary = getLibrary(libraryId);", "+        if (antLibrary != null) {", "+            antLibrary.addLibraryURL(libPath);", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c670dc494e2db45fd9e204ec1c75c15", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39c0160753781f7ff7bb39ecee7883b2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/unix/SymlinkTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void testSymbolicLinkUtilsMethods() throws Exception", "signatureAfterChange": "      @Test     public void testSymbolicLinkUtilsMethods() throws Exception", "diff": ["+    @Test", "-        if (supportsSymlinks) {", "-            executeTarget(\"test-fileutils\");", "-            SymbolicLinkUtils su = SymbolicLinkUtils.getSymbolicLinkUtils();", "-            java.io.File f = new File(getOutputDir(), \"file1\");", "-            assertTrue(f.exists());", "-            assertFalse(f.isDirectory());", "-            assertTrue(f.isFile());", "-            assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isSymbolicLink(f.getParentFile(),", "-                                          f.getName()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "-                                                  f.getName()));", "+        buildRule.executeTarget(\"test-fileutils\");", "+        SymbolicLinkUtils su = SymbolicLinkUtils.getSymbolicLinkUtils();", "-            f = new File(getOutputDir(), \"dir1\");", "-            assertTrue(f.exists());", "-            assertTrue(f.isDirectory());", "-            assertFalse(f.isFile());", "-            assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isSymbolicLink(f.getParentFile(),", "-                                          f.getName()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "-                                                  f.getName()));", "+        java.io.File f = new File(buildRule.getOutputDir(), \"file1\");", "+        assertTrue(f.exists());", "+        assertFalse(f.isDirectory());", "+        assertTrue(f.isFile());", "+        assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "+        assertFalse(su.isSymbolicLink(f.getParentFile(),", "+                                      f.getName()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "+                                              f.getName()));", "-            f = new File(getOutputDir(), \"file2\");", "-            assertFalse(f.exists());", "-            assertFalse(f.isDirectory());", "-            assertFalse(f.isFile());", "-            assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isSymbolicLink(f.getParentFile(),", "-                                          f.getName()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "-                                                  f.getName()));", "+        f = new File(buildRule.getOutputDir(), \"dir1\");", "+        assertTrue(f.exists());", "+        assertTrue(f.isDirectory());", "+        assertFalse(f.isFile());", "+        assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "+        assertFalse(su.isSymbolicLink(f.getParentFile(),", "+                                      f.getName()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "+                                              f.getName()));", "-            f = new File(getOutputDir(), \"dir2\");", "-            assertFalse(f.exists());", "-            assertFalse(f.isDirectory());", "-            assertFalse(f.isFile());", "-            assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isSymbolicLink(f.getParentFile(),", "-                                          f.getName()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "-                                                  f.getName()));", "+        f = new File(buildRule.getOutputDir(), \"file2\");", "+        assertFalse(f.exists());", "+        assertFalse(f.isDirectory());", "+        assertFalse(f.isFile());", "+        assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "+        assertFalse(su.isSymbolicLink(f.getParentFile(),", "+                                      f.getName()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "+                                              f.getName()));", "+", "+        f = new File(buildRule.getOutputDir(), \"dir2\");", "+        assertFalse(f.exists());", "+        assertFalse(f.isDirectory());", "+        assertFalse(f.isFile());", "+        assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "+        assertFalse(su.isSymbolicLink(f.getParentFile(),", "+                                      f.getName()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "+                                              f.getName()));", "-            f = new File(getOutputDir(), \"file.there\");", "-            assertTrue(f.exists());", "-            assertFalse(f.isDirectory());", "-            assertTrue(f.isFile());", "-            assertTrue(su.isSymbolicLink(f.getAbsolutePath()));", "-            assertTrue(su.isSymbolicLink(f.getParentFile(),", "-                                         f.getName()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "-                                                  f.getName()));", "+        f = new File(buildRule.getOutputDir(), \"file.there\");", "+        assertTrue(f.exists());", "+        assertFalse(f.isDirectory());", "+        assertTrue(f.isFile());", "+        assertTrue(su.isSymbolicLink(f.getAbsolutePath()));", "+        assertTrue(su.isSymbolicLink(f.getParentFile(),", "+                                     f.getName()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "+                                              f.getName()));", "-            f = new File(getOutputDir(), \"dir.there\");", "-            assertTrue(f.exists());", "-            assertTrue(f.isDirectory());", "-            assertFalse(f.isFile());", "-            assertTrue(su.isSymbolicLink(f.getAbsolutePath()));", "-            assertTrue(su.isSymbolicLink(f.getParentFile(),", "-                                         f.getName()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "-                                                  f.getName()));", "+        f = new File(buildRule.getOutputDir(), \"dir.there\");", "+        assertTrue(f.exists());", "+        assertTrue(f.isDirectory());", "+        assertFalse(f.isFile());", "+        assertTrue(su.isSymbolicLink(f.getAbsolutePath()));", "+        assertTrue(su.isSymbolicLink(f.getParentFile(),", "+                                     f.getName()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+        assertFalse(su.isDanglingSymbolicLink(f.getParentFile(),", "+                                              f.getName()));", "-            // it is not possible to find out that symbolic links pointing", "-            // to inexistent files or directories are symbolic links", "-            // it used to be possible to detect this on Mac", "-            // this is not true under Snow Leopard and JDK 1.5", "-            // Removing special handling of MacOS until someone shouts", "-            // Antoine", "-            f = new File(getOutputDir(), \"file.notthere\");", "-            assertFalse(f.exists());", "-            assertFalse(f.isDirectory());", "-            assertFalse(f.isFile());", "-            assertTrue(su.isSymbolicLink(f.getAbsolutePath()) == false);", "-            assertTrue(su.isSymbolicLink(f.getParentFile(), f.getName()) == false);", "-            assertTrue(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "-            assertTrue(su.isDanglingSymbolicLink(f.getParentFile(),", "-                                                 f.getName()));", "+        // it is not possible to find out that symbolic links pointing", "+        // to inexistent files or directories are symbolic links", "+        // it used to be possible to detect this on Mac", "+        // this is not true under Snow Leopard and JDK 1.5", "+        // Removing special handling of MacOS until someone shouts", "+        // Antoine", "+        f = new File(buildRule.getOutputDir(), \"file.notthere\");", "+        assertFalse(f.exists());", "+        assertFalse(f.isDirectory());", "+        assertFalse(f.isFile());", "+        assertTrue(su.isSymbolicLink(f.getAbsolutePath()) == false);", "+        assertTrue(su.isSymbolicLink(f.getParentFile(), f.getName()) == false);", "+        assertTrue(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+        assertTrue(su.isDanglingSymbolicLink(f.getParentFile(),", "+                                             f.getName()));", "-            f = new File(getOutputDir(), \"dir.notthere\");", "-            assertFalse(f.exists());", "-            assertFalse(f.isDirectory());", "-            assertFalse(f.isFile());", "-            assertTrue(su.isSymbolicLink(f.getAbsolutePath()) == false);", "-            assertTrue(su.isSymbolicLink(f.getParentFile(), f.getName()) == false);", "-            assertTrue(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "-            assertTrue(su.isDanglingSymbolicLink(f.getParentFile(),", "-                                                 f.getName()));", "+        f = new File(buildRule.getOutputDir(), \"dir.notthere\");", "+        assertFalse(f.exists());", "+        assertFalse(f.isDirectory());", "+        assertFalse(f.isFile());", "+        assertTrue(su.isSymbolicLink(f.getAbsolutePath()) == false);", "+        assertTrue(su.isSymbolicLink(f.getParentFile(), f.getName()) == false);", "+        assertTrue(su.isDanglingSymbolicLink(f.getAbsolutePath()));", "+        assertTrue(su.isDanglingSymbolicLink(f.getParentFile(),", "+                                             f.getName()));", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bc2d35845c7d8f0db3a28bf2bad1ace", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/resources/ResourceListTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void testEmptyElementWithReference()", "signatureAfterChange": "      @Test     public void testEmptyElementWithReference()", "diff": ["+    @Test", "-            rl.setRefid(new Reference(getProject(), \"dummyref\"));", "+            rl.setRefid(new Reference(buildRule.getProject(), \"dummyref\"));", "-        rl.setRefid(new Reference(getProject(), \"dummyref\"));", "+        rl.setRefid(new Reference(buildRule.getProject(), \"dummyref\"));", "-        rl.add(new FileResource(getProject(), \".\"));", "+        rl.add(new FileResource(buildRule.getProject(), \".\"));", "-            rl.setRefid(new Reference(getProject(), \"dummyref\"));", "+            rl.setRefid(new Reference(buildRule.getProject(), \"dummyref\"));", "-        rl.setRefid(new Reference(getProject(), \"dummyref\"));", "+        rl.setRefid(new Reference(buildRule.getProject(), \"dummyref\"));", "-            rl.add(new FileResource(getProject(), \".\"));", "+            rl.add(new FileResource(buildRule.getProject(), \".\"));", "-            rl.setRefid(new Reference(getProject(), \"dummyref\"));", "+            rl.setRefid(new Reference(buildRule.getProject(), \"dummyref\"));", "-        rl.setRefid(new Reference(getProject(), \"dummyref\"));", "+        rl.setRefid(new Reference(buildRule.getProject(), \"dummyref\"));"]}]}
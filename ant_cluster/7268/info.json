{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3ccd862121e8ecd8fd8c4195d306edf7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9837beb97ec2b10039f5e2ed76a358b6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Project.java", "commitBeforeChange": "ea41c72f7adfce4ad48caded93962140650f2746", "commitAfterChange": "a65cadb437afdc85fcc77d9c58293c66e456ff46", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     public synchronized void removeBuildListener(BuildListener listener)", "signatureAfterChange": "     public void removeBuildListener(BuildListener listener)", "diff": ["-    public synchronized void removeBuildListener(BuildListener listener) {", "-        // create a new Vector to avoid ConcurrentModificationExc when", "-        // the listeners get added/removed while we are in fire", "-        Vector newListeners = getBuildListeners();", "-        newListeners.removeElement(listener);", "-        listeners = newListeners;", "+    public void removeBuildListener(BuildListener listener) {", "+        synchronized (listenersLock) {", "+            // copy on write semantics", "+            Vector newListeners = getBuildListeners();", "+            newListeners.removeElement(listener);", "+            listeners = newListeners;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c47669716ac95cb1b70107bd60a8c420", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Project.java", "commitBeforeChange": "e713682ea69123ef5ca4935776b817a2b81645cf", "commitAfterChange": "695ce2ed1c7ffb7ce113fcdc05d12cd70abad525", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     public void addBuildListener(BuildListener listener)", "signatureAfterChange": "     public void addBuildListener(BuildListener listener)", "diff": ["-            if (listeners.contains(listener)) {", "-                return;", "+            for (int i = 0; i < listeners.length; i++) {", "+                if (listeners[i] == listener) {", "+                    return;", "+                }", "-            Vector newListeners = getBuildListeners();", "-            newListeners.addElement(listener);", "+            BuildListener[] newListeners = new BuildListener[listeners.length + 1];", "+            System.arraycopy(listeners, 0, newListeners, 0, listeners.length);", "+            newListeners[listeners.length] = listener;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3f1d1a6b978b68bc482bf6f8336459fc", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abb0d316ccfb30ac50b58e11b0ab0b43", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/workspace/DefaultWorkspace.java", "commitBeforeChange": "be938b1e8fe6d68aec358cb6982c7d70fe827886", "commitAfterChange": "ef420c53bf5756a4e14afb47a54cef25e01017a9", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private ExecutionFrame createExecutionFrame( final Project project )         throws TaskException", "signatureAfterChange": "     private ExecutionFrame createExecutionFrame( final Project project )         throws TaskException, ComponentException", "diff": ["+     */", "-        throws TaskException", "+        throws TaskException, ComponentException", "-        //try", "-        //{", "-        //    //Add VFS manager", "-        //    // TODO - need to drive this from a typelib descriptor, plus", "-        //    // should be adding services to the root frame, rather than here", "-        //    final DefaultFileSystemManager vfsManager = new DefaultFileSystemManager();", "-        //    vfsManager.setBaseFile( project.getBaseDirectory() );", "-        //    componentManager.put( FileSystemManager.ROLE, vfsManager );", "-        //}", "-        //catch( Exception e )", "-        //{", "-        //    throw new TaskException( e.getMessage(), e );", "-        //}", "-", "-        try", "-        {", "-            deployer = m_deployer.createChildDeployer( componentManager );", "-            componentManager.put( Deployer.ROLE, deployer );", "-        }", "-        catch( ComponentException e )", "-        {", "-            throw new TaskException( e.getMessage(), e );", "-        }", "+        deployer = m_deployer.createChildDeployer( componentManager );", "+        componentManager.put( Deployer.ROLE, deployer );", "+        // Create a service manager that aggregates the contents of the context's", "+        // component manager, and service manager", "+        final MultiSourceServiceManager serviceManager = new MultiSourceServiceManager();", "+        serviceManager.add( (ServiceManager)componentManager.lookup( ServiceManager.ROLE ) );", "+        serviceManager.add( new ComponentManagerAdaptor( componentManager ) );", "+", "-            new DefaultTaskContext( m_baseContext, componentManager );", "+            new DefaultTaskContext( m_baseContext, serviceManager );", "-        final DefaultExecutionFrame frame = new DefaultExecutionFrame();", "+        // Create a logger", "+        final Logger logger =", "+            new LogKitLogger( m_hierarchy.getLoggerFor( \"project\" + m_projectID ) );", "+        m_projectID++;", "-        try", "-        {", "-            final Logger logger =", "-                new LogKitLogger( m_hierarchy.getLoggerFor( \"project\" + m_projectID ) );", "-            m_projectID++;", "+        final DefaultExecutionFrame frame = new DefaultExecutionFrame( logger, context, typeManager );", "-            frame.enableLogging( logger );", "-            frame.contextualize( context );", "-", "-            /**", "-             *  @todo Should no occur but done for the time being to simplify evolution.", "-             */", "-            componentManager.put( ExecutionFrame.ROLE, frame );", "-        }", "-        catch( final Exception e )", "-        {", "-            final String message = REZ.getString( \"bad-frame.error\" );", "-            throw new TaskException( message, e );", "-        }", "+        /**", "+         *  @todo Should no occur but done for the time being to simplify evolution.", "+         */", "+        componentManager.put( ExecutionFrame.ROLE, frame );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5154e8ce76521cc777fd7a0f3ec18ee", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "f87b5ed7757c30daca5cf875c95520a00dce2269", "commitAfterChange": "010a31e84477b60ff536725b388b38323540dcca", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private void setValue( final Object object,                            final String value,                            final Context context,                            final Method methods[] )         throws ConfigurationException", "signatureAfterChange": "     private void setValue( final AttributeSetter setter,                            final Object object,                            final String value,                            final Context context )         throws Exception", "diff": ["-", "-    private void setValue( final Object object,", "-                           final String value,", "-                           final Context context,", "-                           final Method methods[] )", "-        throws ConfigurationException", "-    {", "-            final Object objectValue =", "-                PropertyUtil.resolveProperty( value, context, false );", "-", "-            setValue( object, objectValue, methods, context );", "-        }", "-        catch( final PropertyException pe )", "-        {", "-            final String message =", "-                REZ.getString( \"bad-property-resolve.error\", value );", "-            throw new ConfigurationException( message, pe );", "-        }", "-    }", "+     */", "+    private void setValue( final AttributeSetter setter,", "+                           final Object object,", "+                           final String value,", "+                           final Context context )", "+        throws Exception", "+    {", "+        // Resolve property references in the attribute value", "+        Object objValue = PropertyUtil.resolveProperty( value, context, false );", "+", "+        // Convert the value to the appropriate type", "+        Class clazz = setter.getType();", "+        if( clazz.isPrimitive() )", "+            clazz = getComplexTypeFor( clazz );", "+        objValue = m_converter.convert( clazz, objValue, context );", "+        // Set the value", "+        setter.setAttribute( object, objValue );", "+    }"]}]}
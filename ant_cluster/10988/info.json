{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5d4678280ed4fcdb9ac9b8379dda4282", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "461cec769f38f54bccbdb4e51b2de3df", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/modules/edit/DependentTargetChooser.java", "commitBeforeChange": "2ff201801b557593afe6cf9dcd4d4c4f4da65b39", "commitAfterChange": "cfa93603e73e635d31be01cdb31dc9959a5ea35c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private List fillDependsList(ACSTargetElement aTarget)", "signatureAfterChange": "         public String[] getSelectedTargetsAsStringArray()", "diff": ["-    private List fillDependsList(ACSTargetElement aTarget) {", "-        List retVal = new ArrayList();", "-            ", "-        String[] dependNames = aTarget.getDepends();", "-        int length = dependNames.length;", "-        ArrayList allTargets = getCoTargets (aTarget);", "-        int allLen = allTargets.size();", "-        ", "-        for (int i = 0; i < length; i++)", "-        {", "-            for (int j = 0; j < allLen; j++) {", "-                ACSTargetElement currentElement = (ACSTargetElement)allTargets.get(j);", "-                if (currentElement.getName().equalsIgnoreCase(dependNames[i].trim())) retVal.add(currentElement);", "-            }", "-        }", "-        return retVal;", "-    }", "+         */", "+        public String[] getSelectedTargetsAsStringArray() {", "+            int length = getRowCount();", "+            String[] retVal = new String[getSelectedTargetCount()];", "+            int i = 0, j = 0;", "+        ", "+            for (i = 0; i < length; i++) {", "+                if (_selected[i]) {", "+                    retVal[j] = getTarget(i).getName();", "+                    j++;", "+                }", "+            }", "+            return retVal;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47c13b6a5bfe9ae40943c8ca6e084590", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ResourceUtils.java", "commitBeforeChange": "e580392c2d28c2a3530ebe0e1005bae0d45c5b8b", "commitAfterChange": "6c0b17e148b34774bbfffa826d1d0485fafa40ab", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static Resource[] selectOutOfDateSources(ProjectComponent logTo,                                                     Resource[] source,                                                     FileNameMapper mapper,                                                     ResourceFactory targets)", "signatureAfterChange": "     public static Resource[] selectOutOfDateSources(ProjectComponent logTo,                                                     Resource[] source,                                                     FileNameMapper mapper,                                                     ResourceFactory targets)", "diff": ["-                logTo.log(\"Warning: \" + source[counter].getName() ", "-                         + \" modified in the future.\", ", "+                logTo.log(\"Warning: \" + source[counter].getName()", "+                         + \" modified in the future.\",", "-            String[] targetnames = ", "+            String[] targetnames =", "-                for (int ctarget = 0; !added && ctarget < targetnames.length; ", "+                for (int ctarget = 0; !added && ctarget < targetnames.length;", "-                    Resource atarget = ", "+                    Resource atarget =", "-                        logTo.log(source[counter].getName() + \" added as \" ", "+                        logTo.log(source[counter].getName() + \" added as \"", "-                    } else if (atarget.getLastModified() ", "+                    } else if (!atarget.isDirectory() && atarget.getLastModified()", "-                        logTo.log(source[counter].getName() + \" added as \" ", "+                        logTo.log(source[counter].getName() + \" added as \"", "-                    logTo.log(source[counter].getName() ", "+                    logTo.log(source[counter].getName()", "-                logTo.log(source[counter].getName() ", "+                logTo.log(source[counter].getName()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "724a5a52b05319f8ef0230d25f6380e9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/XMLJUnitResultFormatter.java", "commitBeforeChange": "a1d12934e3aae0967e603dfad26253dab108be77", "commitAfterChange": "6af38183767fe6db8bcada1ad9d50a5f571c82f7", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "      public void testIgnored(Test test)", "signatureAfterChange": "      public void testIgnored(Test test)", "diff": ["-        String message = null;", "-        if (test != null && test instanceof JUnit4TestCaseFacade) {", "-        \t//try and get the message coded as part of the ignore", "-        \t/*", "-        \t * org.junit.runner.Description contains a getAnnotation(Class) method... but this", "-        \t * wasn't in older versions of JUnit4 so we have to try and do this by reflection", "-        \t */", "-        \ttry {", "-        \t\tClass<?> testClass = Class.forName(JUnitVersionHelper.getTestCaseClassName(test));", "-        \t", "-                Method testMethod = testClass.getMethod(JUnitVersionHelper.getTestCaseName(test));", "-                Ignore annotation = testMethod.getAnnotation(Ignore.class);", "-                if (annotation != null && annotation.value().length() > 0) {", "-                    message = annotation.value();", "-                }", "-        \t} catch (NoSuchMethodException e) {", "-\t\t\t\t// silently ignore - we'll report a skip with no message", "-\t\t\t} catch (ClassNotFoundException e) {", "-\t\t\t\t// silently ignore - we'll report a skip with no message", "-\t\t\t}", "-        }", "-        formatSkip(test, message);", "+        formatSkip(test, JUnitVersionHelper.getIgnoreMessage(test));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfd8b4238b34eaed0dfc9d81bf3f072e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "d25488cbbb28cf25e1f91f714c70999fd105432d", "commitAfterChange": "3d706ab8188a674936880b6f4530b0cf3991758b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     private IntrospectionHelper(final Class bean)", "signatureAfterChange": "     private IntrospectionHelper(final Class<?> bean)", "diff": ["-    private IntrospectionHelper(final Class bean) {", "+    private IntrospectionHelper(final Class<?> bean) {", "-            Class returnType = m.getReturnType();", "-            Class[] args = m.getParameterTypes();", "+            Class<?> returnType = m.getReturnType();", "+            Class<?>[] args = m.getParameterTypes();", "-                    Constructor constructor = null;", "+                    Constructor<?> constructor = null;", "-                        constructor = args[0].getConstructor(new Class[] {});", "+                        constructor = args[0].getConstructor();", "-                        constructor = args[0].getConstructor(new Class[] {Project.class});", "+                        constructor = args[0].getConstructor(Project.class);", "-                    Constructor constructor = null;", "+                    Constructor<?> constructor = null;", "-                        constructor = args[0].getConstructor(new Class[] {});", "+                        constructor = args[0].getConstructor();", "-                        constructor = args[0].getConstructor(new Class[] {Project.class});", "+                        constructor = args[0].getConstructor(Project.class);"]}]}
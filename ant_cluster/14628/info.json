{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fcb0e69120ea945b7fc3652aaf7db447", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35e243a19fe4b862ab1d54c46f996571", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/vfs/impl/DefaultFileSystemManager.java", "commitBeforeChange": "f382fa32eec7260111db0d67ae9c90dee2d6de0b", "commitAfterChange": "dfa0c6e159416ba22df942ba98e496d99d53d07f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void close()", "signatureAfterChange": "     public void dispose()", "diff": ["-    public void close()", "-        // TODO - implement this", "+     */", "+    public void dispose()", "+    {", "+        // Dispose the providers (making sure we only dispose each provider", "+        // once", "+        final Set providers = new HashSet();", "+        providers.addAll( m_providers.values() );", "+        for( Iterator iterator = providers.iterator(); iterator.hasNext(); )", "+        {", "+            Object provider = iterator.next();", "+            if( provider instanceof Disposable )", "+            {", "+                Disposable disposable = (Disposable)provider;", "+                disposable.dispose();", "+            }", "+        }", "+        m_providers.clear();", "+", "+        m_fileReplicator.dispose();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1069a3665364e5b3971f4b6f872fe14", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/vfs/provider/ftp/FtpFileNameParser.java", "commitBeforeChange": "5b87919be6a8db15efe30f2de6e617aba31ef619", "commitAfterChange": "52926715b4f4f53da4b63cf660a14f357d7a9b6e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public ParsedUri parseUri( String uriStr ) throws FileSystemException", "signatureAfterChange": "     public ParsedFtpUri parseFtpUri( final String uriStr )         throws FileSystemException", "diff": ["-    public ParsedUri parseUri( String uriStr ) throws FileSystemException", "+    public ParsedFtpUri parseFtpUri( final String uriStr )", "+        throws FileSystemException", "-        ParsedFtpUri uri = new ParsedFtpUri();", "+        final ParsedFtpUri uri = new ParsedFtpUri();", "+        // Adjust the hostname to lower-case", "+        final String hostname = uri.getHostName().toLowerCase();", "+        uri.setHostName( hostname );", "+", "+        // Drop the port if it is 21", "+        final String port = uri.getPort();", "+        if( port != null && port.equals( \"21\" ) )", "+        {", "+            uri.setPort( null );", "+        }", "+", "-        String userInfo = uri.getUserInfo();", "+        final String userInfo = uri.getUserInfo();", "+        // Now build the root URI", "+        final StringBuffer rootUri = new StringBuffer();", "+        appendRootUri( uri, rootUri );", "+        uri.setRootUri( rootUri.toString() );", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4ab9bf82b9f6ff2fbcd339bf8b52cd8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/cvslib/CvsTagDiff.java", "commitBeforeChange": "d85c862e9e6814b15f8b7c13ef20883ad8bad4cb", "commitAfterChange": "a1853e2770a23f6ec76fd0c3ed2c0ea428ae40c6", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        // support multiple packages", "-        StringTokenizer myTokenizer = new StringTokenizer(mypackage);", "-        while (myTokenizer.hasMoreTokens()) {", "-            addCommandArgument(myTokenizer.nextToken());", "-        }", "+", "-            tmpFile = FILE_UTILS.createTempFile(\"cvstagdiff\", \".log\", null, true, true);", "+            if (mypackage != null) {", "+                // support multiple packages", "+                StringTokenizer myTokenizer = new StringTokenizer(mypackage);", "+                while (myTokenizer.hasMoreTokens()) {", "+                    String pack = myTokenizer.nextToken();", "+                    packageNames.add(pack);", "+                    addCommandArgument(pack);", "+                }", "+            }", "+            for (Iterator iter = getModules().iterator(); iter.hasNext();) {", "+                AbstractCvsTask.Module m = (AbstractCvsTask.Module) iter.next();", "+                packageNames.add(m.getName());", "+                // will be added to command line in super.execute()", "+            }", "+", "+            tmpFile = FILE_UTILS.createTempFile(\"cvstagdiff\", \".log\", null,", "+                                                true, true);", "+            packageNames.clear();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6586043c32220e39867b7fbae9ceec3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Replace.java", "commitBeforeChange": "fd3ea490305970d8594f45a45f617ebe011ca885", "commitAfterChange": "6b2e7156fce5c379bb51f9aad53a90bad9e719ce", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                Enumeration e = props.keys();", "-                while (e.hasMoreElements()) {", "-                    String tok =  e.nextElement().toString();", "+                Iterator e = props.keySet().iterator();", "+                while (e.hasNext()) {", "+                    String tok =  e.next().toString();", "-            if (src != null) {", "-                processFile(src);", "+            if (sourceFile != null) {", "+                processFile(sourceFile);", "+                }", "+            }", "+", "+            if (resources != null) {", "+                for (Iterator i = resources.iterator(); i.hasNext(); ) {", "+                    FileProvider fp =", "+                        (FileProvider) ((Resource) i.next())", "+                        .as(FileProvider.class);", "+                    processFile(fp.getFile());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5a0d9016e9d496290a4146fed0acf7b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/FailureRecorder.java", "commitBeforeChange": "824c630ff9c0aeb0e01d9d08c1541d65dfb3fa99", "commitAfterChange": "f02f90064bbd969d79995103290b722750fe67ba", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r \r     private void createTestSuiteFooter()", "signatureAfterChange": "\r     \r     private void createSuiteMethod()", "diff": ["+    \r", "+    private void createSuiteMethod() {\r", "-\r", "-    private void createTestSuiteFooter() {\r", "+        for (Iterator iter = failedTests.iterator(); iter.hasNext();) {\r", "+            TestInfos testInfos = (TestInfos) iter.next();\r", "+            writer.print(\"        suite.addTest(\");\r", "+            writer.print(testInfos);\r", "+            writer.println(\");\");\r", "+        }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eeda9ff9dff188fae7aefc8c2621e6a4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/ActionManager.java", "commitBeforeChange": "a18fbb4649bfe9577aa4648d3ab2cfb7712453e8", "commitAfterChange": "c70641243c667093d23f689c7c28866fa661b1af", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public JMenuBar createMenuBar()", "signatureAfterChange": "     public JMenuBar createMenuBar()", "diff": ["-            retval.add(menu);", "+", "+            // XXX should be in config file", "+            menu.setMnemonic(name.charAt(0));", "+", "+            // XXX need to i18n here...", "+            if(name.equalsIgnoreCase(\"help\")) {", "+                try {", "+                    retval.setHelpMenu(menu);", "+                }", "+                catch(Error err) {", "+                    // Catch the \"not implemented\" error in", "+                    // some (all?) Swing implementations", "+                    retval.add(menu);", "+                }", "+            }", "+            else {", "+                retval.add(menu);", "+            }", "-                if(action.isPreceededBySeparator()) {", "+                // See if we should add a separator.", "+                if(action.isPreceededBySeparator() && ", "+                   menu.getMenuComponentCount() > 0) {", "+                item.setAccelerator(action.getAccelerator());"]}]}
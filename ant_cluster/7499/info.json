{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "521c5659ad805c662d8c4e7becc33b21", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16c1010117f16b19e9b7d6e36eb42bab", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/types/PathUtil.java", "commitBeforeChange": "62562693ac733d0697b5a522972f36ea5570225c", "commitAfterChange": "a816a71d9e2587a83890f499dd2cabb7c6e02889", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static String formatPath( final Path path, final TaskContext context )         throws TaskException", "signatureAfterChange": "     public static String formatPath( final File[] path )", "diff": ["-    public static String formatPath( final Path path, final TaskContext context )", "+    public static String formatPath( final File[] path )", "+    {", "+        // empty path return empty string", "+        if( path.length == 0 )", "+        {", "+            return \"\";", "+        }", "+", "+        // path containing one or more elements", "+        final StringBuffer result = new StringBuffer( path[ 0 ].toString() );", "+        for( int i = 1; i < path.length; i++ )", "+        {", "+            result.append( File.pathSeparatorChar );", "+            result.append( path[ i ].getAbsolutePath() );", "+        }", "+", "+        return result.toString();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70a638af231dd348ec0c6e9d7f0abcfa", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/rmic/KaffeRmic.java", "commitBeforeChange": "cb74dbba3be10b8558e4274aa223f54b519d7e30", "commitAfterChange": "0f25392ad69b81d390942ecba933aa5cbcbba5fe", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "       public boolean execute() throws BuildException", "signatureAfterChange": "       public boolean execute() throws BuildException", "diff": ["-            throw new BuildException(\"Cannot use Kaffe rmic, as it is not \"", "-                                     + \"available.  Neither \"", "-                                     + RMIC_CLASSNAME", "-                                     + \" nor \"", "-                                     + OLD_RMIC_CLASSNAME", "-                                     + \" have been found.  \"", "-                                     + \"A common solution is to \"", "-                                     + \"set the environment variable \"", "-                                     + \"JAVA_HOME or CLASSPATH.\",", "+            StringBuffer buf = new StringBuffer(\"Cannot use Kaffe rmic, as it\"", "+                                                + \" is not available.  None\"", "+                                                + \" of \");", "+            for (int i = 0; i < RMIC_CLASSNAMES.length; i++) {", "+                if (i != 0) {", "+                    buf.append(\", \");", "+                }", "+                ", "+                buf.append(RMIC_CLASSNAMES[i]);", "+            }", "+            buf.append(\" have been found. A common solution is to set the\"", "+                       + \" environment variable JAVA_HOME or CLASSPATH.\");", "+            throw new BuildException(buf.toString(),", "-        if (c.getName().equals(RMIC_CLASSNAME)) {", "+        if (!c.getName().equals(RMIC_CLASSNAMES[RMIC_CLASSNAMES.length - 1])) {", "+            // only supported since Kaffe 1.1.2"]}]}
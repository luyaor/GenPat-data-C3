{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "18e1c0c3d5d1f1e9595eaed2cd84561b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f9a4ecde3fa14d07717dc76007a3cfb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/embed/ProjectHelperImpl2.java", "commitBeforeChange": "f2d8ae34069b455a64a46431bd44a3b2a208e9d7", "commitAfterChange": "86334974455a492f4b76331b6002a45289874ddf", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 31, "signatureBeforeChange": "     private static SAXParserFactory getParserFactory()", "signatureAfterChange": "      public static AttributeList sax1Attributes( Attributes sax2Att )", "diff": ["-     */", "-    private static SAXParserFactory getParserFactory() {", "-        if (parserFactory == null) {", "-            parserFactory = SAXParserFactory.newInstance();", "-        }", "-", "-        return parserFactory;", "-    }", "+    public static AttributeList sax1Attributes( Attributes sax2Att ) {", "+        AttributeListImpl sax1Att=new AttributeListImpl();", "+        int length = sax2Att.getLength();", "+        if (length > 0) {", "+            for (int i = 0; i < length; i++) {", "+                // System.out.println(\"Attributes: \" + sax2Att.getQName(i) + \" \" +", "+                //                    sax2Att.getValue(i));", "+                sax1Att.addAttribute( sax2Att.getQName(i), ", "+                                      sax2Att.getType(i),", "+                                      sax2Att.getValue(i));", "+            }", "+\t}", "+        return sax1Att;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e7a53a91f8cb00b9a03e5d219889923", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "2a713cc02adc21aa5bd5189c8a2718631e6f6a88", "commitAfterChange": "99067d060752e5a89c24d99c17b6eb7231f96380", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 30, "signatureBeforeChange": "     protected void doFileOperations()", "signatureAfterChange": "     protected void doFileOperations()", "diff": ["-                String toFile = (String) fileCopyMap.get(fromFile);", "+                String[] toFiles = (String[]) fileCopyMap.get(fromFile);", "-                if (fromFile.equals(toFile)) {", "-                    log(\"Skipping self-copy of \" + fromFile, verbosity);", "-                    continue;", "-                }", "+                for (int i = 0; i < toFiles.length; i++) {", "+                    String toFile = toFiles[i];", "-                try {", "-                    log(\"Copying \" + fromFile + \" to \" + toFile, verbosity);", "+                    if (fromFile.equals(toFile)) {", "+                        log(\"Skipping self-copy of \" + fromFile, verbosity);", "+                        continue;", "+                    }", "-                    FilterSetCollection executionFilters =", "-                        new FilterSetCollection();", "-                    if (filtering) {", "-                        executionFilters", "-                            .addFilterSet(getProject().getGlobalFilterSet());", "+                    try {", "+                        log(\"Copying \" + fromFile + \" to \" + toFile, verbosity);", "+", "+                        FilterSetCollection executionFilters =", "+                            new FilterSetCollection();", "+                        if (filtering) {", "+                            executionFilters", "+                                .addFilterSet(getProject().getGlobalFilterSet());", "+                        }", "+                        for (Enumeration filterEnum = filterSets.elements();", "+                            filterEnum.hasMoreElements();) {", "+                            executionFilters", "+                                .addFilterSet((FilterSet) filterEnum.nextElement());", "+                        }", "+                        fileUtils.copyFile(fromFile, toFile, executionFilters,", "+                                           filterChains, forceOverwrite,", "+                                           preserveLastModified, inputEncoding,", "+                                           outputEncoding, getProject());", "+                    } catch (IOException ioe) {", "+                        String msg = \"Failed to copy \" + fromFile + \" to \" + toFile", "+                            + \" due to \" + ioe.getMessage();", "+                        File targetFile = new File(toFile);", "+                        if (targetFile.exists() && !targetFile.delete()) {", "+                            msg += \" and I couldn't delete the corrupt \" + toFile;", "+                        }", "+                        throw new BuildException(msg, ioe, getLocation());", "-                    for (Enumeration filterEnum = filterSets.elements();", "-                         filterEnum.hasMoreElements();) {", "-                        executionFilters", "-                            .addFilterSet((FilterSet) filterEnum.nextElement());", "-                    }", "-                    fileUtils.copyFile(fromFile, toFile, executionFilters,", "-                                       filterChains, forceOverwrite,", "-                                       preserveLastModified, inputEncoding,", "-                                       outputEncoding, getProject());", "-                } catch (IOException ioe) {", "-                    String msg = \"Failed to copy \" + fromFile + \" to \" + toFile", "-                        + \" due to \" + ioe.getMessage();", "-                    File targetFile = new File(toFile);", "-                    if (targetFile.exists() && !targetFile.delete()) {", "-                        msg += \" and I couldn't delete the corrupt \" + toFile;", "-                    }", "-                    throw new BuildException(msg, ioe, getLocation());", "-            int count = 0;", "+            int createCount = 0;", "-                File d = new File((String) e.nextElement());", "-                if (!d.exists()) {", "-                    if (!d.mkdirs()) {", "-                        log(\"Unable to create directory \"", "-                            + d.getAbsolutePath(), Project.MSG_ERR);", "-                    } else {", "-                        count++;", "+                String[] dirs = (String[]) e.nextElement();", "+                for (int i = 0; i < dirs.length; i++) {", "+                    File d = new File(dirs[i]);", "+                    if (!d.exists()) {", "+                        if (!d.mkdirs()) {", "+                            log(\"Unable to create directory \"", "+                                + d.getAbsolutePath(), Project.MSG_ERR);", "+                        } else {", "+                            createCount++;", "+                        }", "-", "-            if (count > 0) {", "-                log(\"Copied \" + count + \" empty director\"", "-                    + (count == 1 ? \"y\" : \"ies\")", "-                    + \" to \" + destDir.getAbsolutePath());", "+            if (createCount > 0) {", "+                log(\"Copied \" + dirCopyMap.size()", "+                    + \" empty director\"", "+                    + (dirCopyMap.size() == 1 ? \"y\" : \"ies\")", "+                    + \" to \" + createCount", "+                    + \" empty director\"", "+                    + (createCount == 1 ? \"y\" : \"ies\") + \" under \"", "+                    + destDir.getAbsolutePath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c054777b2264f73cc094c250325e6e09", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/Commandline.java", "commitBeforeChange": "29cf33f78f16638f62f3471816c1879e0a8190f2", "commitAfterChange": "6d7c130971fb273119d770033fc4ea42f899349f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public String[] getArguments()", "signatureAfterChange": "     public String[] getArguments()", "diff": ["-        final String [] result;", "-        result = new String[definition.size()];", "-        definition.copyInto(result);", "-        return result;", "+        Vector result = new Vector(definition.size()*2);", "+        for (int i=0; i<definition.size(); i++) {", "+            Argument arg = (Argument) definition.elementAt(i);", "+            String[] s = arg.getParts();", "+            for (int j=0; j<s.length; j++) {", "+                result.addElement(s[j]);", "+            }", "+        }", "+        ", "+        String [] res = new String[result.size()];", "+        result.copyInto(res);", "+        return res;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e39b74d9c673b51a89bd4a48feae5cdc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Project.java", "commitBeforeChange": "5e2008922a1fe38ae7867c07cfd049e247e95f1e", "commitAfterChange": "c672e8778ed4d0f929d9bb413532a4b2e421fa16", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 81, "signatureBeforeChange": "     public final Vector topoSort(String root, Hashtable targets)         throws BuildException", "signatureAfterChange": "     public final Vector topoSort(String[] root, Hashtable targets)         throws BuildException", "diff": ["+     */", "+    public final Vector topoSort(String[] root, Hashtable targets)", "+        throws BuildException {", "-        // We first run a DFS based sort using the root as the starting node.", "-        // This creates the minimum sequence of Targets to the root node.", "+        // We first run a DFS based sort using each root as a starting node.", "+        // This creates the minimum sequence of Targets to the root node(s).", "-        tsort(root, targets, state, visiting, ret);", "-        log(\"Build sequence for target `\" + root + \"' is \" + ret, MSG_VERBOSE);", "+        for (int i = 0; i < root.length; i++) {", "+            tsort(root[i], targets, state, visiting, ret);", "+        }", "+        StringBuffer buf = new StringBuffer(\"Build sequence for target(s)\");", "+", "+        for (int j = 0; j < root.length; j++) {", "+            buf.append((j == 0) ? \" `\" : \", `\").append(root[j]).append('\\'');", "+        }", "+        buf.append(\" is \" + ret);", "+        log(buf.toString(), MSG_VERBOSE);", "+"]}]}
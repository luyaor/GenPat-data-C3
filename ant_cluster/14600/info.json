{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "52b2b5021ff66c4a5f8c0459368605ab", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45bba99d2bd6cb567c4cb18a6f96a81e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Rmic.java", "commitBeforeChange": "aca10a1d12baef5b24d64906202659ffbdcf7e0f", "commitAfterChange": "6440b64b5a526e07d4457be2153642524cecc959", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 40, "signatureBeforeChange": "     private boolean isValidRmiRemote (Class testClass)", "signatureAfterChange": "     private boolean isValidRmiRemote (Class testClass)", "diff": ["-        Class rmiRemote = java.rmi.Remote.class;", "-        ", "-        if (rmiRemote.equals(testClass)) {", "-            // This class is java.rmi.Remote", "-            return true;", "-        }", "-            ", "-        Class [] interfaces = testClass.getInterfaces();", "-        if (interfaces != null) {", "-            for (int i = 0; i < interfaces.length; i++) {", "-                if (rmiRemote.equals(interfaces[i])) {", "-                    // This class directly implements java.rmi.Remote", "-                    return true;", "-                }", "-                if (isValidRmiRemote(interfaces[i])) {", "-                    return true;", "-                }", "-            }", "-        }", "-        return false;", "+        return getRemoteInterface(testClass) != null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c12e1916a4427430aac12d24467c6d1a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "43804e4ea2eff0ec4b2a606876ce3adf98dda954", "commitAfterChange": "0fcac6aa36d856294f2f1829c09b943bb4420f5a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public AntClassLoader(Project project, Path classpath)", "signatureAfterChange": "     public AntClassLoader(Project project, Path classpath)", "diff": ["+        parent = AntClassLoader.class.getClassLoader();", "-        this.project.addBuildListener(this);", "-        this.classpath = classpath.concatSystemClasspath(\"ignore\");", "+        project.addBuildListener(this);", "+        if (classpath != null) {", "+            Path actualClasspath = classpath.concatSystemClasspath(\"ignore\");", "+            String[] pathElements = actualClasspath.list();", "+            for (int i = 0; i < pathElements.length; ++i) {", "+                try {", "+                    addPathElement((String)pathElements[i]);", "+                }", "+                catch (BuildException e) {", "+                    // ignore path elements which are invalid relative to the project", "+                }", "+            }", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a6eb1833bde83a7801e2be4afffbeb0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "234fe495a04faa523c9be2e548a8ef91", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/ReplaceTokens.java", "commitBeforeChange": "ca4d619112299ab28dd289a2e0e407ddebc6340c", "commitAfterChange": "6e88f92ead6a5f67935055661a9e8041f5ed8bae", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public int read() throws IOException", "signatureAfterChange": "     public int read() throws IOException", "diff": ["-        if (replaceIndex != -1) {", "-            final int ch = replaceData.charAt(replaceIndex++);", "-            if (replaceIndex >= replaceData.length()) {", "-                replaceIndex = -1;", "+        if (!resolvedTokensBuilt) {", "+            // build the resolved tokens tree map.", "+            for (String key : hash.keySet()) {", "+                resolvedTokens.put(beginToken + key + endToken, hash.get(key));", "-            return ch;", "+            resolvedTokensBuilt = true;", "-        int ch = getNextChar();", "-", "-        if (ch == beginToken) {", "-            final StringBuffer key = new StringBuffer(\"\");", "-            do  {", "-                ch = getNextChar();", "-                if (ch != -1) {", "-                    key.append((char) ch);", "-                } else {", "-                    break;", "-                }", "-            } while (ch != endToken);", "-", "-            if (ch == -1) {", "-                if (queuedData == null || queueIndex == -1) {", "-                    queuedData = key.toString();", "-                } else {", "-                    queuedData", "-                        = key.toString() + queuedData.substring(queueIndex);", "-                }", "-                if (queuedData.length() > 0) {", "-                    queueIndex = 0;", "-                } else {", "-                    queueIndex = -1;", "-                }", "-                return beginToken;", "+        // are we currently serving replace data?", "+        if (replaceData != null) {", "+            if (replaceIndex < replaceData.length()) {", "+                return replaceData.charAt(replaceIndex++);", "-                key.setLength(key.length() - 1);", "+                replaceData = null;", "+            }", "+        }", "-                final String replaceWith = (String) hash.get(key.toString());", "-                if (replaceWith != null) {", "-                    if (replaceWith.length() > 0) {", "-                        replaceData = replaceWith;", "-                        replaceIndex = 0;", "-                    }", "-                    return read();", "+        // is the read buffer empty?", "+        if (readBuffer.length() == 0) {", "+            int next = in.read();", "+            if (next == -1) {", "+                return next; // end of stream. all buffers empty.", "+            }", "+            readBuffer += (char)next;", "+        }", "+", "+        for (;;) {", "+            // get the closest tokens", "+            SortedMap<String,String> possibleTokens = resolvedTokens.tailMap(readBuffer);", "+            if (possibleTokens.isEmpty() || !possibleTokens.firstKey().startsWith(readBuffer)) { // if there is none, then deliver the first char from the buffer.", "+                return getFirstCharacterFromReadBuffer();", "+            } else if (readBuffer.equals(possibleTokens.firstKey())) { // there exists a nearest token - is it an exact match?", "+                // we have found a token. prepare the replaceData buffer.", "+                replaceData = resolvedTokens.get(readBuffer);", "+                replaceIndex = 0;", "+                readBuffer = \"\"; // destroy the readBuffer - it's contents are being replaced entirely.", "+                // get the first character via recursive call.", "+                return read();", "+            } else { // nearest token is not matching exactly - read one character more.", "+                int next = in.read();", "+                if (next != -1) {", "+                    readBuffer += (char)next;", "-                    String newData = key.toString() + endToken;", "-                    if (queuedData == null || queueIndex == -1) {", "-                        queuedData = newData;", "-                    } else {", "-                        queuedData = newData + queuedData.substring(queueIndex);", "-                    }", "-                    queueIndex = 0;", "-                    return beginToken;", "+                    return getFirstCharacterFromReadBuffer(); // end of stream. deliver remaining characters from buffer.", "-        return ch;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3375b34f93e11f1f030e0bbdef006d45", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java", "commitBeforeChange": "1e745fe39610746a046ce2ea1eef71fa15a6ea8e", "commitAfterChange": "38dce34edfdb4041103530c656e12e6ed61e2bd6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected Commandline setupJavacCommandlineSwitches( Commandline cmd,                                                          boolean useDebugLevel )         throws TaskException", "signatureAfterChange": "     protected Commandline setupJavacCommandlineSwitches( Commandline cmd,                                                          boolean useDebugLevel )         throws TaskException", "diff": ["-                cmd.createArgument().setValue( memoryParameterPrefix + \"ms\" + m_memoryInitialSize );", "+                cmd.addArgument( memoryParameterPrefix + \"ms\" + m_memoryInitialSize );", "-                cmd.createArgument().setValue( memoryParameterPrefix + \"mx\" + m_memoryMaximumSize );", "+                cmd.addArgument( memoryParameterPrefix + \"mx\" + m_memoryMaximumSize );", "-            cmd.createArgument().setValue( \"-nowarn\" );", "+            cmd.addArgument( \"-nowarn\" );", "-            cmd.createArgument().setValue( \"-deprecation\" );", "+            cmd.addArgument( \"-deprecation\" );", "-            cmd.createArgument().setValue( \"-d\" );", "-            cmd.createArgument().setFile( m_destDir );", "+            cmd.addArgument( \"-d\" );", "+            cmd.addArgument( m_destDir );", "-        cmd.createArgument().setValue( \"-classpath\" );", "-        cmd.createArgument().setPath( classpath );", "+        cmd.addArgument( \"-classpath\" );", "+        cmd.addArguments( FileUtils.translateCommandline( classpath ) );", "-        cmd.createArgument().setValue( \"-sourcepath\" );", "-        cmd.createArgument().setPath( src );", "+        cmd.addArgument( \"-sourcepath\" );", "+        cmd.addArguments( FileUtils.translateCommandline( src ) );", "-            cmd.createArgument().setValue( \"-target\" );", "-            cmd.createArgument().setValue( target );", "+            cmd.addArgument( \"-target\" );", "+            cmd.addArgument( target );", "-            cmd.createArgument().setValue( \"-bootclasspath\" );", "-            cmd.createArgument().setPath( m_bootclasspath );", "+            cmd.addArgument( \"-bootclasspath\" );", "+            cmd.addArguments( FileUtils.translateCommandline( m_bootclasspath ) );", "-            cmd.createArgument().setValue( \"-extdirs\" );", "-            cmd.createArgument().setPath( m_extdirs );", "+            cmd.addArgument( \"-extdirs\" );", "+            cmd.addArguments( FileUtils.translateCommandline( m_extdirs ) );", "-            cmd.createArgument().setValue( \"-encoding\" );", "-            cmd.createArgument().setValue( m_encoding );", "+            cmd.addArgument( \"-encoding\" );", "+            cmd.addArgument( m_encoding );", "-                    cmd.createArgument().setValue( \"-g:\" + debugLevel );", "+                    cmd.addArgument( \"-g:\" + debugLevel );", "-                    cmd.createArgument().setValue( \"-g\" );", "+                    cmd.addArgument( \"-g\" );", "-                cmd.createArgument().setValue( \"-g\" );", "+                cmd.addArgument( \"-g\" );", "-            cmd.createArgument().setValue( \"-g:none\" );", "+            cmd.addArgument( \"-g:none\" );", "-            cmd.createArgument().setValue( \"-O\" );", "+            cmd.addArgument( \"-O\" );", "-            cmd.createArgument().setValue( \"-verbose\" );", "+            cmd.addArgument( \"-verbose\" );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbf61ccd5295743500fd4d1d378ddf98", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java", "commitBeforeChange": "1e745fe39610746a046ce2ea1eef71fa15a6ea8e", "commitAfterChange": "38dce34edfdb4041103530c656e12e6ed61e2bd6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected Commandline setupJavacCommandlineSwitches( Commandline cmd,                                                          boolean useDebugLevel )         throws TaskException", "signatureAfterChange": "     protected Commandline setupJavacCommandlineSwitches( Commandline cmd,                                                          boolean useDebugLevel )         throws TaskException", "diff": ["-                cmd.createArgument().setValue( memoryParameterPrefix + \"ms\" + m_memoryInitialSize );", "+                cmd.addArgument( memoryParameterPrefix + \"ms\" + m_memoryInitialSize );", "-                cmd.createArgument().setValue( memoryParameterPrefix + \"mx\" + m_memoryMaximumSize );", "+                cmd.addArgument( memoryParameterPrefix + \"mx\" + m_memoryMaximumSize );", "-            cmd.createArgument().setValue( \"-nowarn\" );", "+            cmd.addArgument( \"-nowarn\" );", "-            cmd.createArgument().setValue( \"-deprecation\" );", "+            cmd.addArgument( \"-deprecation\" );", "-            cmd.createArgument().setValue( \"-d\" );", "-            cmd.createArgument().setFile( m_destDir );", "+            cmd.addArgument( \"-d\" );", "+            cmd.addArgument( m_destDir );", "-        cmd.createArgument().setValue( \"-classpath\" );", "-        cmd.createArgument().setPath( classpath );", "+        cmd.addArgument( \"-classpath\" );", "+        cmd.addArguments( FileUtils.translateCommandline( classpath ) );", "-        cmd.createArgument().setValue( \"-sourcepath\" );", "-        cmd.createArgument().setPath( src );", "+        cmd.addArgument( \"-sourcepath\" );", "+        cmd.addArguments( FileUtils.translateCommandline( src ) );", "-            cmd.createArgument().setValue( \"-target\" );", "-            cmd.createArgument().setValue( target );", "+            cmd.addArgument( \"-target\" );", "+            cmd.addArgument( target );", "-            cmd.createArgument().setValue( \"-bootclasspath\" );", "-            cmd.createArgument().setPath( m_bootclasspath );", "+            cmd.addArgument( \"-bootclasspath\" );", "+            cmd.addArguments( FileUtils.translateCommandline( m_bootclasspath ) );", "-            cmd.createArgument().setValue( \"-extdirs\" );", "-            cmd.createArgument().setPath( m_extdirs );", "+            cmd.addArgument( \"-extdirs\" );", "+            cmd.addArguments( FileUtils.translateCommandline( m_extdirs ) );", "-            cmd.createArgument().setValue( \"-encoding\" );", "-            cmd.createArgument().setValue( m_encoding );", "+            cmd.addArgument( \"-encoding\" );", "+            cmd.addArgument( m_encoding );", "-                    cmd.createArgument().setValue( \"-g:\" + debugLevel );", "+                    cmd.addArgument( \"-g:\" + debugLevel );", "-                    cmd.createArgument().setValue( \"-g\" );", "+                    cmd.addArgument( \"-g\" );", "-                cmd.createArgument().setValue( \"-g\" );", "+                cmd.addArgument( \"-g\" );", "-            cmd.createArgument().setValue( \"-g:none\" );", "+            cmd.addArgument( \"-g:none\" );", "-            cmd.createArgument().setValue( \"-O\" );", "+            cmd.addArgument( \"-O\" );", "-            cmd.createArgument().setValue( \"-verbose\" );", "+            cmd.addArgument( \"-verbose\" );"]}]}
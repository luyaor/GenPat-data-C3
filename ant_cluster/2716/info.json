{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "958c0ddb722d5bc958caf026c8464381", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d0abd5c4151e115b6a2d4394963d969", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/antlib/src/main/org/apache/tools/ant/taskdefs/Antlib.java", "commitBeforeChange": "1d2784e6d5429505b3b420e342992c22cd5373a6", "commitAfterChange": "6252354506953777f5b921b8746a54e7d317475a", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 31, "signatureBeforeChange": "         public void startElement(String tag, AttributeList attrs)             throws SAXParseException", "signatureAfterChange": "         public void startElement(String tag, AttributeList attrs)             throws SAXParseException", "diff": ["-\t    level ++;", "+            level ++;", "-\t\tif (level > 1) {", "-\t\t    throw new SAXParseException(\"Unexpected element: \" + tag,", "-\t\t\t\t\t\tlocator);", "-\t\t}", "+                if (level > 1) {", "+                    throw new SAXParseException(\"Unexpected element: \" + tag,", "+                                                locator);", "+                }", "-\t    if (level == 1) {", "-\t\tthrow new SAXParseException(\"Missing antlib root element\",", "-\t\t\t\t\t    locator);", "-\t    }", "+            if (level == 1) {", "+                throw new SAXParseException(\"Missing antlib root element\",", "+                                            locator);", "+            }", "-\t    // Must have the two attributes declared", "-\t    parseAttributes(tag, attrs);", "+            // Must have the two attributes declared", "+            parseAttributes(tag, attrs);", "-\t    try {", "-\t\tif (\"role\".equals(tag)) {", "-\t\t    if (isRoleInUse(name)) {", "-\t\t\tString msg = \"Cannot override role: \" + name;", "-\t\t\tlog(msg, Project.MSG_WARN);", "-\t\t\treturn;\t\t\t", "-\t\t    }", "-\t\t    // Defining a new role", "-\t\t    symbols.addRole(name, loadClass(className),", "-\t\t\t\t    (adapter == null? ", "-\t\t\t\t     null : loadClass(adapter))); ", "-\t\t    return;", "-\t\t}", "+            try {", "+                if (\"role\".equals(tag)) {", "+                    if (project.isRoleDefined(name)) {", "+                        String msg = \"Cannot override role: \" + name;", "+                        log(msg, Project.MSG_WARN);", "+                        return;", "+                    }", "+                    // Defining a new role", "+                    Class clz = loadClass(className);", "+                    if (clz != null) {", "+                        project.addRoleDefinition(name, clz,", "+                                                  (adapter == null? null :", "+                                                   loadClass(adapter)));", "+                    }", "+                    return;", "+                }", "-\t\t// Defining a new element kind", "-\t\t//check for name alias", "-\t\tString alias = aliasMap.getProperty(name);", "-\t\tif (alias != null) {", "-\t\t    name = alias;", "-\t\t}", "-\t\t//catch an attempted override of an existing name", "-\t\tif (!override && isInUse(tag, name)) {", "-\t\t    String msg = \"Cannot override \" + tag + \": \" + name;", "-\t\t    log(msg, Project.MSG_WARN);", "-\t\t    return;", "-\t\t}", "-\t\tsymbols.add(tag, name, loadClass(className));", "-\t    }", "-\t    catch(BuildException be) {", "-\t\tthrow new SAXParseException(be.getMessage(), locator, be);", "-\t    }", "+                // Defining a new element kind", "+                //check for name alias", "+                String alias = aliasMap.getProperty(name);", "+                if (alias != null) {", "+                    name = alias;", "+                }", "+                //catch an attempted override of an existing name", "+                if (!override && project.isDefinedOnRole(tag, name)) {", "+                    String msg = \"Cannot override \" + tag + \": \" + name;", "+                    log(msg, Project.MSG_WARN);", "+                    return;", "+                }", "+                Class clz = loadClass(className);", "+                if (clz != null)", "+                    project.addDefinitionOnRole(tag, name, clz);", "+            }", "+            catch(BuildException be) {", "+                switch (onerror.getIndex()) {", "+                case FAIL:", "+                    throw new SAXParseException(be.getMessage(), locator, be);", "+                case REPORT:", "+                    project.log(be.getMessage(), project.MSG_WARN);", "+                    break;", "+                default:", "+                    project.log(be.getMessage(), project.MSG_DEBUG);", "+                }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4fe0652a823478c49b69e8e008c9008", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/antlib/src/main/org/apache/tools/ant/taskdefs/Antlib.java", "commitBeforeChange": "f1548aec2b4a57bfdca206f32178a9e03c39d3a1", "commitAfterChange": "7ed240811799349f5a0932e7a464086e5ce31527", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "         public void startElement(String tag, AttributeList attrs)             throws SAXParseException", "signatureAfterChange": "         public void startElement(String tag, AttributeList attrs)             throws SAXParseException", "diff": ["+\t    level ++;", "+\t\tif (level > 1) {", "+\t\t    throw new SAXParseException(\"Unexpected element: \" + tag,", "+\t\t\t\t\t\tlocator);", "+\t\t}", "-            if (\"task\".equals(tag) || \"type\".equals(tag)) {", "-                String name = null;", "-                String className = null;", "+\t    if (level == 1) {", "+\t\tthrow new SAXParseException(\"Missing antlib root element\",", "+\t\t\t\t\t    locator);", "+\t    }", "-                for (int i = 0, last = attrs.getLength(); i < last; i++) {", "-                    String key = attrs.getName(i);", "-                    String value = attrs.getValue(i);", "+\t    // Must have the two attributes declared", "+\t    parseAttributes(tag, attrs);", "-                    if (key.equals(\"name\")) {", "-                        name = value;", "-                    }", "-                    else if (key.equals(\"class\")) {", "-                        className = value;", "-                    }", "-                    else {", "-                        throw new SAXParseException(\"Unexpected attribute \\\"\"", "-                                 + key + \"\\\"\", locator);", "-                    }", "-                }", "-                if (name == null || className == null) {", "-                    String msg = \"Underspecified \" + tag + \" declaration.\";", "-                    throw new SAXParseException(msg, locator);", "-                }", "+\t    try {", "+\t\tif (\"role\".equals(tag)) {", "+\t\t    if (isRoleInUse(name)) {", "+\t\t\tString msg = \"Cannot override role: \" + name;", "+\t\t\tlog(msg, Project.MSG_WARN);", "+\t\t\treturn;\t\t\t", "+\t\t    }", "+\t\t    // Defining a new role", "+\t\t    symbols.addRole(name, loadClass(className),", "+\t\t\t\t    (adapter == null? ", "+\t\t\t\t     null : loadClass(adapter))); ", "+\t\t    return;", "+\t\t}", "-                try {", "-                    //check for name alias", "-                    String alias = aliasMap.getProperty(name);", "-                    if (alias != null) {", "-                        name = alias;", "-                    }", "-                    //catch an attempted override of an existing name", "-                    if (!override && inUse(name)) {", "-                        String msg = \"Cannot override \" + tag + \": \" + name;", "-                        log(msg, Project.MSG_WARN);", "-                        return;", "-                    }", "-", "-                    //load the named class", "-                    Class cls;", "-                    if(classloader==null) {", "-                        cls=Class.forName(className);", "-                    }", "-                    else {", "-                        cls=classloader.loadClass(className);", "-                    }", "-", "-                    //register it as a task or a datatype", "-                    if (tag.equals(\"task\")) {", "-                        project.addTaskDefinition(name, cls);", "-                    }", "-                    else {", "-                        project.addDataTypeDefinition(name, cls);", "-                    }", "-                }", "-                catch (ClassNotFoundException cnfe) {", "-                    String msg = \"Class \" + className +", "-                            \" cannot be found\";", "-                    throw new SAXParseException(msg, locator, cnfe);", "-                }", "-                catch (NoClassDefFoundError ncdfe) {", "-                    String msg = \"Class \" + className +", "-                            \" cannot be found\";", "-                    throw new SAXParseException(msg, locator);", "-                }", "-            }", "-            else {", "-                throw new SAXParseException(\"Unexpected element \\\"\" +", "-                        tag + \"\\\"\",", "-                        locator);", "-            }", "+\t\t// Defining a new element kind", "+\t\t//check for name alias", "+\t\tString alias = aliasMap.getProperty(name);", "+\t\tif (alias != null) {", "+\t\t    name = alias;", "+\t\t}", "+\t\t//catch an attempted override of an existing name", "+\t\tif (!override && isInUse(tag, name)) {", "+\t\t    String msg = \"Cannot override \" + tag + \": \" + name;", "+\t\t    log(msg, Project.MSG_WARN);", "+\t\t    return;", "+\t\t}", "+\t\tsymbols.add(tag, name, loadClass(className));", "+\t    }", "+\t    catch(BuildException be) {", "+\t\tthrow new SAXParseException(be.getMessage(), locator, be);", "+\t    }"]}]}
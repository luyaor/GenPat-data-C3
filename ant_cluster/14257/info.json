{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a5043258009d5a48850e636e6ef6668", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32d14ba7a5e210e39fefa541b603d6b6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ExecutionFrame.java", "commitBeforeChange": "7499c443d67445ea8fd0b8f4bd56c72251b18bf4", "commitAfterChange": "b7e43ad8c5906ae2b6d6b42f8b2715dc7d2e7a16", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 36, "signatureBeforeChange": "     private TaskContext configureTask(BuildElement model)          throws ExecutionException, TaskException", "signatureAfterChange": "     private TaskContext configureTask(BuildElement model)          throws ExecutionException", "diff": ["-         throws ExecutionException, TaskException {", "+         throws ExecutionException {", "-            Object element = elementClass.newInstance();", "+            AntLibFactory libFactory = getLibFactory(antLibrary);", "+            Object element = libFactory.createTaskInstance(elementClass);", "+", "-            TaskContext taskContext = allocateTaskContext();", "+            TaskContext taskContext = new TaskContext(this, eventSupport);", "-                 + e.getMessage() + \") for task \" + taskType);", "+                 + e.getMessage() + \") for task \" + taskType,", "+                e, model.getLocation());", "+        } catch (ExecutionException e) {", "+            e.setLocation(model.getLocation());", "+            throw e;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ac3037eea82e3e1baea389123251ba6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ExecutionFrame.java", "commitBeforeChange": "7499c443d67445ea8fd0b8f4bd56c72251b18bf4", "commitAfterChange": "b7e43ad8c5906ae2b6d6b42f8b2715dc7d2e7a16", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 38, "signatureBeforeChange": "     private Object createTypeInstance(Class typeClass, BuildElement model)          throws ExecutionException, TaskException", "signatureAfterChange": "     private Object createTypeInstance(Class typeClass, AntLibFactory libFactory,                                       BuildElement model)          throws ExecutionException", "diff": ["-    private Object createTypeInstance(Class typeClass, BuildElement model)", "-         throws ExecutionException, TaskException {", "+    private Object createTypeInstance(Class typeClass, AntLibFactory libFactory,", "+                                      BuildElement model)", "+         throws ExecutionException {", "-            Object typeInstance = typeClass.newInstance();", "-            if (typeInstance instanceof DataType) {", "-                DataType dataType = (DataType)typeInstance;", "-                TypeContext typeContext = new TypeContext();", "-                typeContext.initEnvironment(this, eventSupport);", "-                typeContext.init(dataType, model);", "+            Object typeInstance = null;", "+            if (libFactory == null) {", "+                typeInstance = typeClass.newInstance();", "+            } else {", "+                typeInstance = libFactory.createTypeInstance(typeClass);", "+", "+            if (typeInstance instanceof ExecutionComponent) {", "+                ExecutionComponent component = (ExecutionComponent)typeInstance;", "+                ExecutionContext context", "+                     = new ExecutionContext(this, eventSupport);", "+                context.setModelElement(model);", "+                component.init(context);", "+            }", "+", "+        } catch (ExecutionException e) {", "+            e.setLocation(model.getLocation());", "+            throw e;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a473f62df79dc9a6e6a4fa12eb286359", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b176f6fe99e694a1d001c7bce003981", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteOn.java", "commitBeforeChange": "a9659b5c2ea9ebd7990ecef24b478e59243fea8c", "commitAfterChange": "0d7f1ce40f2ca5e16a8c99bf9c185d01cf6fa1cb", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 15, "signatureBeforeChange": "      protected void runExec(Execute exe) throws BuildException", "signatureAfterChange": "      protected void runExec(Execute exe) throws BuildException", "diff": ["+        int totalFiles = 0;", "+        int totalDirs = 0;", "+        boolean haveExecuted = false;", "+                        totalFiles++;", "+                        totalDirs++;", "+                        haveExecuted = true;", "+                    }", "+                    fileNames.removeAllElements();", "+                    baseDirs.removeAllElements();", "+                }", "+            }", "+", "+            for (int i = 0; i < filelists.size(); i++) {", "+                FileList list = (FileList) filelists.elementAt(i);", "+                File base = list.getDir(getProject());", "+                String[] names = list.getFiles(getProject());", "+", "+                for (int j = 0; j < names.length; j++) {", "+                    File f = new File(base, names[j]);", "+                    if ((f.isFile() && !\"dir\".equals(type))", "+                        || (f.isDirectory() && !\"file\".equals(type))) {", "+", "+                        if (f.isFile()) {", "+                            totalFiles++;", "+                        } else {", "+                            totalDirs++;", "+                        }", "+", "+                        fileNames.addElement(names[j]);", "+                        baseDirs.addElement(base);", "+                    }", "+                }", "+", "+                if (fileNames.size() == 0 && skipEmpty) {", "+                    log(\"Skipping filelist for directory \"", "+                        + base + \". It is empty.\", Project.MSG_INFO);", "+                    continue;", "+                }", "+", "+                if (!parallel) {", "+                    String[] s = new String[fileNames.size()];", "+                    fileNames.copyInto(s);", "+                    for (int j = 0; j < s.length; j++) {", "+                        String[] command = getCommandline(s[j], base);", "+                        log(Commandline.describeCommand(command), ", "+                            Project.MSG_VERBOSE);", "+                        exe.setCommandline(command);", "+                        runExecute(exe);", "+                        haveExecuted = true;", "-                String[] s = new String[fileNames.size()];", "-                fileNames.copyInto(s);", "-                File[] b = new File[baseDirs.size()];", "-                baseDirs.copyInto(b);", "-                String[] command = getCommandline(s, b);", "-                log(Commandline.describeCommand(command), Project.MSG_VERBOSE);", "-                exe.setCommandline(command);", "-                runExecute(exe);", "+                runParallel(exe, fileNames, baseDirs);", "+                haveExecuted = true;", "+            }", "+", "+            if (haveExecuted) {", "+                log(\"Applied \" + cmdl.getExecutable() + \" to \"", "+                    + totalFiles + \" file\"", "+                    + (totalFiles != 1 ? \"s\" : \"\") + \" and \"", "+                    + totalDirs + \" director\"", "+                    + (totalDirs != 1 ? \"ies\" : \"y\") + \".\",", "+                    verbose ? Project.MSG_INFO : Project.MSG_VERBOSE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0e925270e5722a6ee8246b97222566e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "5b362efc980668c8bd04aa2ea6405174bd443f16", "commitAfterChange": "d93d7b09161b9fed366062f9fc095e46e772a69e", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 29, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        FileSet savedFileSet = null;", "-        if (file == null && destFile != null && filesets.size() == 1) {", "+\tResourceCollection savedRc = null;", "+        if (file == null && destFile != null && rcs.size() == 1) {", "-            savedFileSet = (FileSet) filesets.elementAt(0);", "+\t    savedRc = (ResourceCollection) rcs.elementAt(0);", "-            // deal with the filesets", "-            for (int i = 0; i < filesets.size(); i++) {", "-                FileSet fs = (FileSet) filesets.elementAt(i);", "-                DirectoryScanner ds = null;", "-                try {", "-                    ds = fs.getDirectoryScanner(getProject());", "-                } catch (BuildException e) {", "-                    if (failonerror", "-                        || !e.getMessage().endsWith(\" not found.\")) {", "-                        throw e;", "-                    } else {", "-                        log(\"Warning: \" + e.getMessage());", "-                        continue;", "-                    }", "-                }", "-                File fromDir = fs.getDir(getProject());", "+            // deal with the ResourceCollections", "-                String[] srcFiles = ds.getIncludedFiles();", "-                String[] srcDirs = ds.getIncludedDirectories();", "-                if (!flatten && mapperElement == null", "-                    && ds.isEverythingIncluded() && !fs.hasPatterns()) {", "-                    completeDirMap.put(fromDir, destDir);", "-                }", "-                scan(fromDir, destDir, srcFiles, srcDirs);", "+\t    /* for historical and performance reasons we have to do", "+\t       things in a rather complex way.", "+\t    ", "+\t       (1) Move is optimized to move directories if a fileset", "+\t       has been included completely, therefore FileSets need a", "+\t       special treatment.  This is also required to support", "+\t       the failOnError semantice (skip filesets with broken", "+\t       basedir but handle the remaining collections).", "+", "+\t       (2) We carry around a few protected methods that work", "+\t       on basedirs and arrays of names.  To optimize stuff, all", "+\t       resources with the same basedir get collected in", "+\t       separate lists and then each list is handled in one go.", "+\t    */", "+", "+\t    HashMap filesByBasedir = new HashMap();", "+\t    HashMap dirsByBasedir = new HashMap();", "+\t    HashSet baseDirs = new HashSet();", "+            for (int i = 0; i < rcs.size(); i++) {", "+\t\tResourceCollection rc = (ResourceCollection) rcs.elementAt(i);", "+", "+\t\tif (rc.isFilesystemOnly()) {", "+", "+\t\t    // Step (1)", "+\t\t    if (rc instanceof FileSet) {", "+\t\t\tFileSet fs = (FileSet) rc;", "+\t\t\tDirectoryScanner ds = null;", "+\t\t\ttry {", "+\t\t\t    ds = fs.getDirectoryScanner(getProject());", "+\t\t\t} catch (BuildException e) {", "+\t\t\t    if (failonerror", "+\t\t\t\t|| !e.getMessage().endsWith(\" not found.\")) {", "+\t\t\t\tthrow e;", "+\t\t\t    } else {", "+\t\t\t\tlog(\"Warning: \" + e.getMessage());", "+\t\t\t\tcontinue;", "+\t\t\t    }", "+\t\t\t}", "+\t\t\tFile fromDir = fs.getDir(getProject());", "+", "+\t\t\tString[] srcFiles = ds.getIncludedFiles();", "+\t\t\tString[] srcDirs = ds.getIncludedDirectories();", "+\t\t\tif (!flatten && mapperElement == null", "+\t\t\t    && ds.isEverythingIncluded() && !fs.hasPatterns()) {", "+\t\t\t    completeDirMap.put(fromDir, destDir);", "+\t\t\t}", "+\t\t\tadd(fromDir, srcFiles, filesByBasedir);", "+\t\t\tadd(fromDir, srcDirs, dirsByBasedir);", "+\t\t\tbaseDirs.add(fromDir);", "+\t\t    } else { // not a fileset", "+", "+\t\t\tIterator resources = rc.iterator();", "+\t\t\twhile (resources.hasNext()) {", "+\t\t\t    FileResource fr = (FileResource) resources.next();", "+\t\t\t    if (!fr.isExists()) {", "+\t\t\t\tcontinue;", "+\t\t\t    }", "+\t\t\t    File baseDir = getKeyFile(fr.getBaseDir());", "+\t\t\t    add(baseDir, ", "+\t\t\t\tbaseDir == NULL_FILE_PLACEHOLDER", "+\t\t\t\t? fr.getFile().getAbsolutePath() : fr.getName(),", "+\t\t\t\tfr.isDirectory() ? dirsByBasedir ", "+\t\t\t\t                 : filesByBasedir);", "+\t\t\t    baseDirs.add(baseDir);", "+\t\t\t}", "+\t\t    }", "+", "+\t\t    Iterator iter = baseDirs.iterator();", "+\t\t    while (iter.hasNext()) {", "+\t\t\tFile f = (File) iter.next();", "+\t\t\tList files = (List) filesByBasedir.get(f);", "+\t\t\tList dirs = (List) dirsByBasedir.get(f);", "+", "+\t\t\tString[] srcFiles = new String[0];", "+\t\t\tif (files != null) {", "+\t\t\t    srcFiles = (String[]) files.toArray(srcFiles);", "+\t\t\t}", "+\t\t\tString[] srcDirs = new String[0];", "+\t\t\tif (dirs != null) {", "+\t\t\t    srcDirs = (String[]) dirs.toArray(srcDirs);", "+\t\t\t}", "+\t\t\tscan(f == NULL_FILE_PLACEHOLDER ? null : f, destDir,", "+\t\t\t     srcFiles, srcDirs);", "+\t\t    }", "+\t\t} else { // not a File resource collection", "+\t\t    throw new BuildException(\"Only FileSystem resources are\"", "+\t\t\t\t\t     + \" supported.\");", "+\t\t}", "-            if (savedFileSet != null) {", "-                filesets.insertElementAt(savedFileSet, 0);", "+            if (savedRc != null) {", "+                rcs.insertElementAt(savedRc, 0);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "40ec651f94d179754f653740ade86b7a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8aeedd014048bf48b22c87932a333a6d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/Sort.java", "commitBeforeChange": "a4c55d35b99bdf699a35eefb78a1833c348c0a46", "commitAfterChange": "4baba959d28fc3516e8aa944bce79ca9608095a3", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 9, "signatureBeforeChange": "     protected synchronized void dieOnCircularReference(Stack stk, Project p)         throws BuildException", "signatureAfterChange": "     protected synchronized void dieOnCircularReference(Stack stk, Project p)         throws BuildException", "diff": ["-            if (comp.v != null && comp.v.size() > 0) {", "-                for (Iterator i = comp.v.iterator(); i.hasNext();) {", "-                    Object o = i.next();", "-                    if (o instanceof DataType) {", "-                        stk.push(o);", "-                        invokeCircularReferenceCheck((DataType) o, stk, p);", "-                    }", "-                }", "-            }", "+            DataType.invokeCircularReferenceCheck(comp, stk, p);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c317f754689c2df216506faeb2473eaa", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/PropertyHelper.java", "commitBeforeChange": "f9de93c35b4a4327c0cf29afd25ecf9c486f7647", "commitAfterChange": "902b72ec83e985a35e2e9fc26e41e2319cc7ea1e", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 15, "signatureBeforeChange": "      private String parsePropertyName(String value, ParsePosition pos)", "signatureAfterChange": "     public Collection getExpanders()", "diff": ["+     */", "+    public Collection getExpanders() {", "+        return getDelegates(PropertyExpander.class);", "+    }", "-", "-    private String parsePropertyName(String value, ParsePosition pos) {", "-        for (Iterator iter = getDelegates(PropertyExpander.class).iterator();", "-             iter.hasNext();) {", "-            String propertyName = ((PropertyExpander) iter.next())", "-                .parsePropertyName(value, pos, this);", "-            if (propertyName == null) {", "-                continue;", "-            }", "-            return propertyName;", "-        }", "-        return null;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0d505a3444c061d50a6a5df2632ca851", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06eaecdc71fa05410ba12b88b660321f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/antlib/src/main/org/apache/tools/ant/types/DataTypeAdapterTask.java", "commitBeforeChange": "8dfa7abd4d64b0cbef6166a28440f39f46d6efd1", "commitAfterChange": "fac77e5b28d862a0ac0278c078c72f169859a23a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-\tif (id != null) {", "-\t    // Need to re-register this reference", "-\t    // The container has register the Adapter instead", "-            project.addReference(id, proxy);\t    ", "-\t}", "-    }", "+\t    ((ProjectComponent)proxy).setProject(project);", "+\t// We are trying to set project even it is was not declared", "+                setProjectM.invoke(proxy, new Object[] {project});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fa72505177634e3f6052d4c0a699ccf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/email/PlainMailer.java", "commitBeforeChange": "b1b76c9c72c63ad046f952916e61b6aa8c1fea94", "commitAfterChange": "1be216b5d5ba9365d09b12c64ad31cd3cc7d5cdd", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void send()", "signatureAfterChange": "     public void send()", "diff": ["+            boolean atLeastOneRcptReached = false;", "-                mailMessage.to(e.nextElement().toString());", "+                String to = e.nextElement().toString();", "+                try {", "+                    mailMessage.to(to);", "+                    atLeastOneRcptReached = true;", "+                } catch (IOException ex) {", "+                    badRecipient(to, ex);", "+                }", "-                mailMessage.cc(e.nextElement().toString());", "+                String to = e.nextElement().toString();", "+                try {", "+                    mailMessage.cc(to);", "+                    atLeastOneRcptReached = true;", "+                } catch (IOException ex) {", "+                    badRecipient(to, ex);", "+                }", "-                mailMessage.bcc(e.nextElement().toString());", "+                String to = e.nextElement().toString();", "+                try {", "+                    mailMessage.bcc(to);", "+                    atLeastOneRcptReached = true;", "+                } catch (IOException ex) {", "+                    badRecipient(to, ex);", "+                }", "+            }", "+            if (!atLeastOneRcptReached) {", "+                throw new BuildException(\"Couldn't reach any recipient\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dc8a5e822cde48bab117ef6f8e0b356", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "536bfb63e3ad71036b032550ca8241e07e1f5d45", "commitAfterChange": "b5397fd0e4b2a0e360dc14a9cb1ebec8f4ce7aa5", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 5, "signatureBeforeChange": "         public void startElement(String name, AttributeList attrs) throws SAXParseException", "signatureAfterChange": "     public static ClassLoader getContextClassLoader()         throws BuildException", "diff": ["-         */", "-        public void startElement(String name, AttributeList attrs) throws SAXParseException {", "-            if (project.getDataTypeDefinitions().get(name) != null) {", "-                new DataTypeHandler(this, target).init(name, attrs);", "-            } else {", "-                new TaskHandler(this, target, null, target).init(name, attrs);", "-            }", "+    public static ClassLoader getContextClassLoader()", "+        throws BuildException", "+    {", "+        // Are we running on a JDK 1.2 or later system?", "+        Method method = null;", "+        try {", "+            method = Thread.class.getMethod(\"getContextClassLoader\", null);", "+        } catch (NoSuchMethodException e) {", "+            // we are running on JDK 1.1", "+            return null; ", "+        // Get the thread context class loader (if there is one)", "+        ClassLoader classLoader = null;", "+        try {", "+            classLoader = (ClassLoader)", "+                method.invoke(Thread.currentThread(), null);", "+        } catch (IllegalAccessException e) {", "+            throw new BuildException", "+                (\"Unexpected IllegalAccessException\", e);", "+        } catch (InvocationTargetException e) {", "+            throw new BuildException", "+                (\"Unexpected InvocationTargetException\", e);", "+        // Return the selected class loader", "+        return (classLoader);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b9461c23aa70512d25b64f470c5d004", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/TaskAdapter.java", "commitBeforeChange": "70b420621ba892d07049960e4cc4ac34c58549f6", "commitAfterChange": "55dcf2dee8cad363de7fd0a2d8317c857349c6bb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+        Method setProjectM = null;", "+        try {", "+            Class c = proxy.getClass();", "+            setProjectM = ", "+                c.getMethod( \"setProject\", new Class[] {Project.class});", "+            if(setProjectM != null) {", "+                setProjectM.invoke(proxy, new Object[] {project});", "+            }", "+        } catch( Exception ex ) {", "+            log(\"Error setting project in \" + proxy.getClass(), ", "+                Project.MSG_ERR);", "+            throw new BuildException( ex );", "+        }", "+", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e9eef76e6dca2a338e84313e814f385", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/TaskAdapter.java", "commitBeforeChange": "782372dee520ac0d90737d206d752e770912f5c2", "commitAfterChange": "74434ce5d074e3da0dd29528e6ea7c62be9e20e8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        Method setProjectM = null;", "-            setProjectM = proxy.getClass().getMethod(", "+            Method setLocationM = proxy.getClass().getMethod(", "+                \"setLocation\", new Class[] {Location.class});", "+            if (setLocationM != null) {", "+                setLocationM.invoke(proxy, new Object[] {getLocation()});", "+            }", "+        } catch (NoSuchMethodException e) {", "+            // ignore this if the class being used as a task does not have", "+            // a set location method.", "+        } catch (Exception ex) {", "+            log(\"Error setting location in \" + proxy.getClass(),", "+                Project.MSG_ERR);", "+            throw new BuildException(ex);", "+        }", "+", "+        try {", "+            Method setProjectM = proxy.getClass().getMethod("]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9eb050afa3cde0027efb0362696cac7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/jdepend/JDependTask.java", "commitBeforeChange": "a88ec34a6e9d217e6848041f6b02c236dd0fad70", "commitAfterChange": "0396f77f9942b5be913d74a5c9dec3250f3f7572", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     public int executeInVM(CommandlineJava commandline) throws BuildException", "signatureAfterChange": "     public int executeInVM(CommandlineJava commandline) throws BuildException", "diff": ["-            Vector v = new Vector();", "-            for (int i = 0; i < patterns.length; i++) {", "-                v.addElement(patterns[i]);", "+            if (setFilter != null) {", "+                Vector v = new Vector();", "+                for (int i = 0; i < patterns.length; i++) {", "+                    v.addElement(patterns[i]);", "+                }", "+                try {", "+                    Object o = packageFilterC.newInstance(new Object[] {v});", "+                    setFilter.invoke(jdepend, new Object[] {o});", "+                } catch (Throwable e) {", "+                    log(\"excludes will be ignored as JDepend doesn't like me: \"", "+                        + e.getMessage(), Project.MSG_WARN);", "+                }", "+            } else {", "+                log(\"Sorry, your version of JDepend doesn't support excludes\",", "+                    Project.MSG_WARN);", "-            jdepend.setFilter(new jdepend.framework.PackageFilter(v));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db71257073870d82e9ebb9b9b6b40ce5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitVersionHelper.java", "commitBeforeChange": "38495bec11585e162bbe617424ff00d99d0325ab", "commitAfterChange": "686cb8ffd17e68ce3595194f7b623d78b16f7251", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static String getTestCaseName(Test t)", "signatureAfterChange": "     public static String getTestCaseName(Test t)", "diff": ["+        } else {", "+            try {", "+                Method getNameMethod = ", "+                    t.getClass().getMethod(\"getName\", new Class [0]);", "+                if (getNameMethod.getReturnType() == String.class) {", "+                    return (String) getNameMethod.invoke(t, new Object[0]);", "+                }", "+            } catch (Throwable e) {}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fed1e88fe5c9d625ef64447fc303b41e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/FormatterElement.java", "commitBeforeChange": "5026f31269c0cf1f709aa6ee9dc775f0e7b74747", "commitAfterChange": "4369f6482672e451edd830277d0f64fcc9c7d10b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "     JUnitTaskMirror.JUnitResultFormatterMirror createFormatter(ClassLoader loader)             throws BuildException", "signatureAfterChange": "     JUnitTaskMirror.JUnitResultFormatterMirror createFormatter(ClassLoader loader)             throws BuildException", "diff": ["-", "+        ", "-", "+        ", "+        ", "+", "+        boolean needToSetProjectReference = true;", "+        try {", "+            Field field = r.getClass().getField(\"project\");", "+            Object value = field.get(r);", "+            if (value instanceof Project) {", "+                // there is already a project reference so dont overwrite this", "+                needToSetProjectReference = false;", "+            }", "+        } catch (Exception e) {", "+            // no field present, so no previous reference exists", "+        }", "+        ", "+        if (needToSetProjectReference) {", "+            Method setter;", "+            try {", "+                setter = r.getClass().getMethod(\"setProject\", new Class[] { Project.class });", "+                setter.invoke(r, new Object[] { project });", "+            } catch (Exception e) {", "+                // no setProject to invoke; just ignore", "+            }", "+        }", "+        "]}]}
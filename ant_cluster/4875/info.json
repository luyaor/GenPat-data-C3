{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "984fae44c3a5aa7e048385abe846bf08", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f1d05fc89b1cd62dcd5a47f7500ef18", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "ec980be7345681968c93f0609e9a3fecb39b9753", "commitAfterChange": "fbb9886634198d8377104bef9ec697fadeb134df", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 34, "signatureBeforeChange": "     private boolean binaryEquals(File f1, File f2) throws IOException", "signatureAfterChange": "     private int binaryCompare(Resource r1, Resource r2) throws IOException", "diff": ["-    private boolean binaryEquals(File f1, File f2) throws IOException {", "-        if (f1.length() != f2.length()) {", "-            // different size =>false", "-            return false;", "-        }", "-", "+    private int binaryCompare(Resource r1, Resource r2) throws IOException {", "-            in1 = new BufferedInputStream(new FileInputStream(f1));", "-            in2 = new BufferedInputStream(new FileInputStream(f2));", "+            in1 = new BufferedInputStream(r1.getInputStream());", "+            in2 = new BufferedInputStream(r2.getInputStream());", "-            int expectedByte = in1.read();", "-            while (expectedByte != -1) {", "-                if (expectedByte != in2.read()) {", "-                    return false;", "+            for (int b1 = in1.read(); b1 != -1; b1 = in1.read()) {", "+                int b2 = in2.read();", "+                if (b1 != b2) {", "+                    return b1 > b2 ? 1 : -1;", "-                expectedByte = in1.read();", "-            if (in2.read() != -1) {", "-                return false;", "-            }", "-            return true;", "+            return in2.read() == -1 ? 0 : -1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "908debe1051586e151b4d2d3fc0fb73b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "aae6a87238f255f5599bd1a559c1da34767e8716", "commitAfterChange": "296f7cecd0347b79f837be45c671e0fa9054f402", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 50, "signatureBeforeChange": "         public Process exec(Project project, String[] cmd, String[] env)              throws IOException", "signatureAfterChange": "          private void deleteAfter(final File f, final Process p)", "diff": ["-         */", "-        public Process exec(Project project, String[] cmd, String[] env)", "-             throws IOException {", "-            // Need to quote arguments with spaces, and to escape", "-            // quote characters", "-            String[] newcmd = new String[cmd.length];", "-            for (int i = 0; i < cmd.length; i++) {", "-                newcmd[i] = Commandline.quoteArgument(cmd[i]);", "-            }", "-            if (project != null) {", "-                project.log(\"Execute:Java11CommandLauncher: \"", "-                    + Commandline.describeCommand(newcmd), Project.MSG_DEBUG);", "-            }", "-            return Runtime.getRuntime().exec(newcmd, env);", "-        }", "+        private void deleteAfter(final File f, final Process p) {", "+            new Thread() {", "+                public void run() {", "+                    try {", "+                        p.waitFor();", "+                    }", "+                    catch (InterruptedException e) {", "+                        //ignore", "+                    }", "+                    FILE_UTILS.delete(f);", "+                }", "+            }.start();", "+        }"]}]}
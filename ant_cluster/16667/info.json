{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0730172f1f750e25054e24da854bdfbb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c4f7d6f1c10d56696371f9a318aceb5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/SSHExec.java", "commitBeforeChange": "f3709b2e5b64d2d62ec339119d59109da61fc32e", "commitAfterChange": "eb4293a5c60d218c2410b4a03bfb90b29fd7cf52", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-", "-        /* called once */", "-        if (command != null) {", "-            log(\"cmd : \" + command, Project.MSG_INFO);", "-            executeCommand(command);", "-        } else { // read command resource and execute for each command", "-            try {", "-                BufferedReader br = new BufferedReader(", "-                    new InputStreamReader(commandResource.getInputStream()));", "-                String cmd;", "-                while ((cmd = br.readLine()) != null) {", "-                    log(\"cmd : \" + cmd, Project.MSG_INFO);", "-                    executeCommand(cmd);", "+        ", "+        Session session = null;", "+        ", "+        try {", "+            session = openSession();", "+            /* called once */", "+            if (command != null) {", "+                log(\"cmd : \" + command, Project.MSG_INFO);", "+                ByteArrayOutputStream out = executeCommand(session, command);", "+                if(outputProperty != null) {", "+                    //#bugzilla 43437", "+                    getProject().setNewProperty(outputProperty, command + \" : \" + out);", "-                FileUtils.close(br);", "-            } catch (IOException e) {", "-                throw new BuildException(e);", "+            } else { // read command resource and execute for each command", "+                try {", "+                    BufferedReader br = new BufferedReader(", "+                            new InputStreamReader(commandResource.getInputStream()));", "+                    String cmd;", "+                    String output = \"\";", "+                    while ((cmd = br.readLine()) != null) {", "+                        log(\"cmd : \" + cmd, Project.MSG_INFO);", "+                        ByteArrayOutputStream out = executeCommand(session, cmd);", "+                        output += cmd + \" : \" + out + \"\\n\";", "+                    }", "+                    if(outputProperty != null) {", "+                        //#bugzilla 43437", "+                        getProject().setNewProperty(outputProperty, output);", "+                    }", "+                    FileUtils.close(br);", "+                } catch (IOException e) {", "+                    throw new BuildException(e);", "+                }", "+            }", "+        } catch(JSchException e) {", "+            throw new BuildException(e);", "+        } finally {", "+            if (session != null && session.isConnected()) {", "+                session.disconnect();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7775cd34b03d40ce360e6df55090a04", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/TraXLiaison.java", "commitBeforeChange": "85344c438efab87f56ca5f4b179752852ec0aa86", "commitAfterChange": "f66cab0ea7689df54fe51f64018cd3ef8b05cd3d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void transform(String infile, String outfile) throws Exception", "signatureAfterChange": "      public void transform(File infile, File outfile) throws Exception", "diff": ["-    public void transform(String infile, String outfile) throws Exception {", "-        FileOutputStream out = new FileOutputStream(outfile);", "+    public void transform(File infile, File outfile) throws Exception {", "+        FileInputStream fis = null;", "+        FileOutputStream fos = null;", "-            transformer.transform(new StreamSource(normalize(infile)), ", "-                                  new StreamResult(out));", "+            fis = new FileInputStream(infile);", "+            fos = new FileOutputStream(outfile);", "+            StreamSource src = new StreamSource(fis);", "+            src.setSystemId(getSystemId(infile));", "+            StreamResult res = new StreamResult(fos);", "+            // not sure what could be the need of this...", "+            res.setSystemId(getSystemId(outfile));", "+", "+            transformer.transform(src, res);", "-            out.close();", "+            // make sure to close all handles, otherwise the garbage", "+            // collector will close them...whenever possible and", "+            // Windows may complain about not being able to delete files.", "+            try {", "+                if (xslStream != null){", "+                    xslStream.close();", "+                }", "+            } catch (IOException ignored){}", "+            try {", "+                if (fis != null){", "+                    fis.close();", "+                }", "+            } catch (IOException ignored){}", "+            try {", "+                if (fos != null){", "+                    fos.close();", "+                }", "+            } catch (IOException ignored){}"]}]}
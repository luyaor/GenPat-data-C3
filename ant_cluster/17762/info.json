{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "19167d645abe97fc3fa7571801a24b73", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97b79f052a3472cfdd5dea44bc36d36a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/tasklet/engine/DefaultTskDeployer.java", "commitBeforeChange": "c31e31c52a1f624e72be505d788db9be42b87e5d", "commitAfterChange": "48c54a521235f746024ae8facc272e049d0e1cf5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "          public void deployTasklet( final String name, final String location, final URL url )         throws DeploymentException", "signatureAfterChange": "          public void deployTasklet( final String name, final String location, final URL url )         throws DeploymentException", "diff": ["-            final Iterator tasks = taskdefs.getChildren( \"task\" );", "-            while( tasks.hasNext() )", "+            final Configuration[] tasks = taskdefs.getChildren( \"task\" );", "+            for( int i = 0; i < tasks.length; i++ )", "-                final Configuration task = (Configuration)tasks.next();", "-                if( task.getAttribute( \"name\" ).equals( name ) )", "+                if( tasks[ i ].getAttribute( \"name\" ).equals( name ) )", "-                    handleTasklet( task, url );", "+                    handleTasklet( tasks[ i ], url );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f69421b72ab18f3c4e2ca71b39b107a9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/project/DefaultProjectBuilder.java", "commitBeforeChange": "c31e31c52a1f624e72be505d788db9be42b87e5d", "commitAfterChange": "48c54a521235f746024ae8facc272e049d0e1cf5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     protected void buildTarget( final DefaultProject project, final Configuration target )", "signatureAfterChange": "     protected void buildTarget( final DefaultProject project, final Configuration target )", "diff": ["-            throw new AntException( \"Discovered un-named target at \" + ", "+            throw new AntException( \"Discovered un-named target at \" +", "-        } ", "+        }", "-                                    \"unless condition at \" + target.getLocation() );    ", "+                                    \"unless condition at \" + target.getLocation() );", "-            final String[] elements = StringUtil.splitString( depends, \",\" );", "+            final String[] elements = ExceptionUtil.splitString( depends, \",\" );", "-                    throw new AntException( \"Discovered empty dependency in target \" + ", "-                                            target.getName() + \" at \" + target.getLocation() ); ", "+                    throw new AntException( \"Discovered empty dependency in target \" +", "+                                            target.getName() + \" at \" + target.getLocation() );", "-            }    ", "+            }", "-        final Iterator tasks = target.getChildren();", "-        while( tasks.hasNext() )", "+        final Configuration[] tasks = target.getChildren();", "+        for( int i = 0; i < tasks.length; i++ )", "-            final Configuration task = (Configuration)tasks.next();", "-            getLogger().debug( \"Parsed task: \" + task.getName() );", "-            defaultTarget.addTask( task );", "+            getLogger().debug( \"Parsed task: \" + tasks[ i ].getName() );", "+            defaultTarget.addTask( tasks[ i ] );"]}]}
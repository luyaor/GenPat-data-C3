{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0381f8480b1de57424dae5d25cf4b912", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ebf64d9e3edbcf1c40e72bef1d52626", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipEntry.java", "commitBeforeChange": "aa43e37a025cdf54b8914b8283e57419a253ed59", "commitAfterChange": "dee95e3acc5154aee03ff5f91f9a56426ae79f3f", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 43, "signatureBeforeChange": "     public boolean equals(Object o)", "signatureAfterChange": "     @Override     public boolean equals(Object obj)", "diff": ["-    public boolean equals(Object o) {", "-        return (this == o);", "+     */", "+    @Override", "+    public boolean equals(Object obj) {", "+        if (this == obj) {", "+            return true;", "+        }", "+        if (obj == null || getClass() != obj.getClass()) {", "+            return false;", "+        }", "+        ZipEntry other = (ZipEntry) obj;", "+        String myName = getName();", "+        String otherName = other.getName();", "+        if (myName == null) {", "+            if (otherName != null) {", "+                return false;", "+            }", "+        } else if (!myName.equals(otherName)) {", "+            return false;", "+        }", "+        String myComment = getComment();", "+        String otherComment = other.getComment();", "+        if (myComment == null) {", "+            myComment = \"\";", "+        }", "+        if (otherComment == null) {", "+            otherComment = \"\";", "+        }", "+        return getTime() == other.getTime()", "+            && myComment.equals(otherComment)", "+            && getInternalAttributes() == other.getInternalAttributes()", "+            && getPlatform() == other.getPlatform()", "+            && getExternalAttributes() == other.getExternalAttributes()", "+            && getMethod() == other.getMethod()", "+            && getSize() == other.getSize()", "+            && getCrc() == other.getCrc()", "+            && getCompressedSize() == other.getCompressedSize()", "+            && Arrays.equals(getCentralDirectoryExtra(),", "+                             other.getCentralDirectoryExtra())", "+            && Arrays.equals(getLocalFileDataExtra(),", "+                             other.getLocalFileDataExtra())", "+            && gpb.equals(other.gpb);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc2488461944c0190477239a70f146b5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "cca008dd0001628eefae7a0ebffba4815a6909f1", "commitAfterChange": "021fdf251c92ecb3981724d83c0265dc770280b3", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public static void main(String[] args) throws IOException", "signatureAfterChange": "     public static void main(String[] args) throws IOException", "diff": ["+        if (args[0].startsWith(\"testsfile=\")) {", "+            multipleTests = true;", "+            args[0] = args[0].substring(10 /* \"testsfile=\".length() */);", "+        }", "+", "-        JUnitTest t = new JUnitTest(args[0]);", "-", "-        t.setProperties(props);", "-        JUnitTestRunner runner = new JUnitTestRunner(t, haltError, stackfilter,", "-                                                     haltFail, showOut);", "-        runner.forked = true;", "-        transferFormatters(runner);", "-        runner.run();", "-        System.exit(runner.getRetCode());", "+        int returnCode = SUCCESS;", "+        if (multipleTests) {", "+            try {", "+                java.io.BufferedReader reader = ", "+                    new java.io.BufferedReader(new java.io.FileReader(args[0]));", "+                String testCaseName;", "+                int code = 0;", "+                boolean errorOccured = false;", "+                boolean failureOccured = false;", "+                String line = null;", "+                while ((line = reader.readLine()) != null) {", "+                    StringTokenizer st = new StringTokenizer(line, \",\");", "+                    testCaseName = st.nextToken();", "+                    JUnitTest t = new JUnitTest(testCaseName);", "+                    t.setTodir(new File(st.nextToken()));", "+                    t.setOutfile(st.nextToken());", "+                    code = launch(t, haltError, stackfilter, haltFail, ", "+                                  showOut, props);", "+                    errorOccured = (code == ERRORS);", "+                    failureOccured = (code != SUCCESS);", "+                    if (errorOccured || failureOccured ) {", "+                        if ((errorOccured && haltError) ", "+                            || (failureOccured && haltFail)) {", "+                            System.exit(code);", "+                        } else {", "+                            if (code > returnCode) {", "+                                returnCode = code;", "+                            }", "+                            System.out.println(\"TEST \" + t.getName() ", "+                                               + \" FAILED\");", "+                        }", "+                    }", "+                }", "+            } catch(IOException e) {", "+                e.printStackTrace();", "+            }", "+        } else {", "+            returnCode = launch(new JUnitTest(args[0]), haltError,", "+                                stackfilter, haltFail, showOut, props);", "+        }", "+", "+        System.exit(returnCode);"]}]}
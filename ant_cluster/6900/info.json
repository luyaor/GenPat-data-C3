{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1349688cf4e1212cbe3760ac6284c858", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "676d63e15a03c94ac3b7c09c3f92d91e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Available.java", "commitBeforeChange": "bc47be3b7622cf0b1ba1099469bc19b8485f9636", "commitAfterChange": "37cd9404c739254d3ef459f80549e30fddf526cf", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "      private boolean checkClass(String classname)", "signatureAfterChange": "      private boolean checkClass(String classname)", "diff": ["+            if( ignoreSystemclasses ) {", "+                loader = new AntClassLoader(null,getProject(),classpath,false);", "+                    try {", "+                        loader.findClass(classname);", "+                    }", "+                    catch( SecurityException se ) {", "+            // class found but restricted name; this is actually", "+            // the case we're looking for, so catch the exception", "+            // and return", "+                        return true;", "+            }", "+                }", "+                return false;", "+            }", "+            else if (loader != null) {", "-            log(\"class \\\"\" + classname + \"\\\" was not found\", ", "+            log(\"class \\\"\" + classname + \"\\\" was not found\",", "-            log(\"Could not load dependent class \\\"\" + e.getMessage() ", "-                + \"\\\" for class \\\"\" + classname + \"\\\"\", ", "+            log(\"Could not load dependent class \\\"\" + e.getMessage()", "+                + \"\\\" for class \\\"\" + classname + \"\\\"\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a04f53fc3880eecc7c321c1ccfc051e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/util/Condition.java", "commitBeforeChange": "c31e31c52a1f624e72be505d788db9be42b87e5d", "commitAfterChange": "48c54a521235f746024ae8facc272e049d0e1cf5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "          public boolean evaluate( final Context context )", "signatureAfterChange": "          public boolean evaluate( final Context context )", "diff": ["+        boolean result = false;", "+", "-                PropertyUtil.resolveProperty( m_condition, context, false ); ", "-", "-            boolean result = false;", "+                PropertyUtil.resolveProperty( getCondition(), context, false ); ", "-                result = ( null != context.get( resolved ) );", "+                final Object object = context.get( resolved );", "+                //TODO: Do more than just check for presence????????????", "+                ", "+                //true as object present", "+                result = true;", "-", "-            if( !m_isIfCondition )", "-            {", "-                result = !result;", "-            }", "-", "-            return result;", "+        }", "+        catch( final ContextException ce )", "+        {", "+            result = false;", "+", "+        if( !m_isIfCondition )", "+        {", "+            result = !result;", "+        }", "+", "+        return result;"]}]}
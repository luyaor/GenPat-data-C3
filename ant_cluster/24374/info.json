{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c63fb1a9c8e22a9b7126efd4d4e5706f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09545f1ead4064cb43d2604091c481ca", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XmlProperty.java", "commitBeforeChange": "2fe8b860c0001d234880e9b27e8f8c7fef14de5c", "commitAfterChange": "64886360cf0d83287454a0b04a6613c3f47c0e7d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public Object processNode (Node node, String prefix, Object container)", "signatureAfterChange": "     public Object processNode (Node node, String prefix, Object container)", "diff": ["-            id = (semanticAttributes && idNode != null", "-                  ? idNode.getNodeValue() : null);", "+            id = semanticAttributes && idNode != null ? idNode.getNodeValue() : null;", "-", "-                    Path containingPath = (container != null", "-                        && container instanceof Path ? (Path) container : null);", "-", "+                    Path containingPath = container != null && container instanceof Path ? (Path) container", "+                            : null;", "-                    } else if (containingPath != null", "-                               && nodeName.equals(PATH)) {", "+                    }", "+                    if (containingPath != null && nodeName.equals(PATH)) {", "-                    } else if (container instanceof Path", "-                               && nodeName.equals(REF_ID)) {", "+                    } else if (container instanceof Path && nodeName.equals(REF_ID)) {", "-                    } else if (container instanceof Path", "-                               && nodeName.equals(LOCATION)) {", "+                    } else if (container instanceof Path && nodeName.equals(LOCATION)) {", "-                            throw new BuildException(\"XmlProperty does not \"", "-                                                     + \"support nested paths\");", "+                            throw new BuildException(\"XmlProperty does not support nested paths\");", "-", "-", "-            && semanticAttributes", "-            && node.hasAttributes()", "-            && (node.getAttributes().getNamedItem(VALUE) != null", "-                || node.getAttributes().getNamedItem(LOCATION) != null", "-                || node.getAttributes().getNamedItem(REF_ID) != null", "-                || node.getAttributes().getNamedItem(PATH) != null", "-                || node.getAttributes().getNamedItem(PATHID) != null)) {", "+                && semanticAttributes", "+                && node.hasAttributes()", "+                && (node.getAttributes().getNamedItem(VALUE) != null", "+                        || node.getAttributes().getNamedItem(LOCATION) != null", "+                        || node.getAttributes().getNamedItem(REF_ID) != null", "+                        || node.getAttributes().getNamedItem(PATH) != null || node.getAttributes()", "+                        .getNamedItem(PATHID) != null)) {", "-        } else if ((node.getNodeType() == Node.ELEMENT_NODE)", "-            && (node.getChildNodes().getLength() == 1)", "-            && (node.getFirstChild().getNodeType() == Node.CDATA_SECTION_NODE)) {", "+        } else if (node.getNodeType() == Node.ELEMENT_NODE", "+                && node.getChildNodes().getLength() == 1", "+                && node.getFirstChild().getNodeType() == Node.CDATA_SECTION_NODE) {", "-        } else if ((node.getNodeType() == Node.ELEMENT_NODE)", "-                   && (node.getChildNodes().getLength() == 0)", "-                   && !semanticEmptyOverride) {", "+        } else if (node.getNodeType() == Node.ELEMENT_NODE", "+               && node.getChildNodes().getLength() == 0", "+               && !semanticEmptyOverride) {", "-        } else if ((node.getNodeType() == Node.ELEMENT_NODE)", "-                   && (node.getChildNodes().getLength() == 1)", "-                   && (node.getFirstChild().getNodeType() == Node.TEXT_NODE)", "-                   && (\"\".equals(node.getFirstChild().getNodeValue()))", "-                   && !semanticEmptyOverride) {", "+        } else if (node.getNodeType() == Node.ELEMENT_NODE", "+               && node.getChildNodes().getLength() == 1", "+               && node.getFirstChild().getNodeType() == Node.TEXT_NODE", "+               && \"\".equals(node.getFirstChild().getNodeValue())", "+               && !semanticEmptyOverride) {", "-", "-            if (semanticAttributes && id == null", "-                && container instanceof String) {", "+            if (semanticAttributes && id == null && container instanceof String) {", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cd76bae0dda7a25f4d2a369bcb96837", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "0efc2f817257f69d7cdc67c016b1caac68465f1d", "commitAfterChange": "939a6bbf2fb97ec29ecf79c86013846656d8751c", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "         public Object create()", "signatureAfterChange": "         public Object create()", "diff": ["-                        \"Not allowed to use the polymorphic form\"", "-                        + \" for this element\");", "+                            \"Not allowed to use the polymorphic form for this element\");", "-                ComponentHelper helper =", "-                    ComponentHelper.getComponentHelper(project);", "+                ComponentHelper helper = ComponentHelper.getComponentHelper(project);", "-                    throw new BuildException(", "-                        \"Unable to create object of type \" + polyType);", "+                    throw new BuildException(\"Unable to create object of type \" + polyType);", "-                nestedObject = nestedCreator.create(", "-                    project, parent, nestedObject);", "+                nestedObject = nestedCreator.create(project, parent, nestedObject);", "-                if (polyType != null) {", "-                    throw new BuildException(", "-                        \"Invalid type used \" + polyType);", "+                if (polyType == null) {", "+                    throw ex;", "-                throw ex;", "+                throw new BuildException(\"Invalid type used \" + polyType);"]}]}
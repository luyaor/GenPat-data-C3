{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "28ca501f7dbb7f505ca0f0dcf9438bf0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4f34ae227ef6a04c4224c2d3258468d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/DependSet.java", "commitBeforeChange": "4d9b1cdf1f3b8f3fde53ae386e988b29b32be390", "commitAfterChange": "163e6b921c7a1808e143feb626537fae620ba1fa", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "      private boolean uptodate(ResourceCollection src, ResourceCollection target)", "signatureAfterChange": "      private boolean uptodate(ResourceCollection src, ResourceCollection target)", "diff": ["-        int neTargets = new NonExistent(targets).size();", "+        NonExistent missingTargets = new NonExistent(targets);", "+        int neTargets = missingTargets.size();", "+            logMissing(missingTargets, \"target\");", "-        log(oldestTarget + \" is oldest target file\", Project.MSG_VERBOSE);", "+        logWithModificationTime(oldestTarget, \"oldest target file\");", "-        int neSources = new NonExistent(sources).size();", "+        NonExistent missingSources = new NonExistent(sources);", "+        int neSources = missingSources.size();", "+            logMissing(missingSources, \"source\");", "-        log(newestSource.toLongString() + \" is newest source\", Project.MSG_VERBOSE);", "+        logWithModificationTime(newestSource, \"newest source\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe688d824ae3c53afcd67f02780871d3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/embed/ProjectHelperImpl2.java", "commitBeforeChange": "d3ce4da4f14e4068b23b223fa70388f5e6da170c", "commitAfterChange": "03b6e25418f4b94cbb94e191d23d8ab0ba7b8f6e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void parse(Project project, Object source) throws BuildException", "signatureAfterChange": "     public void parse(Project project, Object source) throws BuildException", "diff": ["-        project.addDataTypeDefinition( \"systemPath\" , SystemPath.class );", "+        try {", "+            Class c=Class.forName(\"org.apache.tools.ant.types.SystemPath\");", "+            project.addDataTypeDefinition( \"systemPath\" , c );", "+        } catch (Exception ex ) {", "+        }", "-            if (parserFactory == null) {", "-                parserFactory = SAXParserFactory.newInstance();", "-            }", "-", "-            SAXParser saxParser = parserFactory.newSAXParser();", "-            parser =saxParser.getXMLReader();", "+            parser =JAXPUtils.getXMLReader();", "-        }", "-        catch(ParserConfigurationException exc) {", "-            throw new BuildException(\"Parser has not been configured correctly\", exc);", "-        }", "-        catch(SAXParseException exc) {", "+        } catch(SAXParseException exc) {", "-                new Location(context.buildFile.toString(), exc.getLineNumber(), exc.getColumnNumber());", "+                new Location(exc.getSystemId(), exc.getLineNumber(), exc.getColumnNumber());", "+        catch(UnsupportedEncodingException exc) {", "+              throw new BuildException(\"Encoding of project file is invalid.\",exc);", "+        }", "-            throw new BuildException(\"Error reading project file\", exc);", "+            throw new BuildException(\"Error reading project file: \" +exc.getMessage(), exc);"]}]}
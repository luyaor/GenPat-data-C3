{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "747a80adc2a88f903ffbd52537f1a61c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60513376bc17ccb6b559eb16b30bae77", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/acs/ACSTreeNodeElement.java", "commitBeforeChange": "a04027cae372928a9f757764f38c28f61e128412", "commitAfterChange": "0c852dba516bf705d62a2d53c47a7b1b1cdd5048", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     private List getCache()", "signatureAfterChange": "     private List getCache()", "diff": ["-            for(int i = 0; i < getLength(); i++) {", "-                if(item(i) instanceof TreeNode) {", "-                    _treeNodeCache.add(item(i));", "+            // XXX this crazy casting is to get around an", "+            // inconsistency between jikes and javac whereby", "+            // the call without this cast when compiled with", "+            // jikes causes an IllegalAccessException", "+            // because the implementation of getLength() and", "+            // item() are actually in a package only class", "+            // in the Sun implementation classes.", "+            int len = ((NodeList)this).getLength();", "+", "+            for(int i = 0; i < len; i++) {", "+                Object n = ((NodeList)this).item(i);", "+", "+                if(n instanceof TreeNode) {", "+                    _treeNodeCache.add(n);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1aabb3296af1032ddf6540b09bcf21d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ide/VAJAntToolGUI.java", "commitBeforeChange": "6cf09d26ffb60c6d9c780b92203ceb6b98b4182c", "commitAfterChange": "fcd6548344aa3f590435beff55530cfdb6983588", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tprivate void handleException(Throwable exception)", "signatureAfterChange": "     private void handleException(Throwable exception)", "diff": ["-\t */", "-\tprivate void handleException(Throwable exception) {", "-\t\t// Write exceptions to the log-window", "-\t\tgetMessageTextArea().append(lineSeparator + lineSeparator + exception.getMessage());", "-\t\tgetMessageFrame().show();", "+     */", "+    private void handleException(Throwable exception) {", "+        // Write exceptions to the log-window", "+        StringWriter sw = new StringWriter();", "+        exception.printStackTrace(new PrintWriter(sw));", "+        String trace = new String( sw.getBuffer() );", "+", "+        getMessageTextArea().append(lineSeparator + lineSeparator + trace);", "+        getMessageFrame().show();", "-\t}", "+    }"]}]}
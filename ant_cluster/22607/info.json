{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "234ff19c422a7b18ef9e60bbaf0922d0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "376052349f85d22fdabd22eb4b2080f0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "c4dee0afafcc57ede3e3d1e81d2d4a1455c484a4", "commitAfterChange": "f52a170159f6dc5beebe07bfb945cb5b3fa5290b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void configure( final Object object,                            final Configuration configuration,                            final Context context )         throws ConfigurationException", "signatureAfterChange": "     public void configure( final Object object,                            final Configuration configuration,                            final Context context )         throws ConfigurationException", "diff": ["-        if( DEBUG )", "+        try", "-            final String message = REZ.getString( \"configuring-object.notice\", object );", "-            getLogger().debug( message );", "+            configureObject( object, configuration, context );", "+        catch( InvocationTargetException ite )", "+        {", "+            // A configuration exception thrown from a nested object.  Unpack", "+            // and re-throw", "+            throw (ConfigurationException)ite.getTargetException();", "+        }", "+    }", "-            if( DEBUG )", "-            {", "-                final String message = REZ.getString( \"configurable.notice\" );", "-                getLogger().debug( message );", "-            }", "-", "-            if( DEBUG )", "-            {", "-                final String message = REZ.getString( \"reflection.notice\" );", "-                getLogger().debug( message );", "-            }", "-                final String value = configuration.getAttribute( name );", "-", "-                // Set the attribute", "-                setAttribute( configurer, object, name, value, context );", "-                setContent( configurer, object, content, context );", "-                configureElement( configurer, object, childConfig, context );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42170989fc981b5101d1373d77f87960", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/ant1compat/org/apache/tools/ant/Task.java", "commitBeforeChange": "ead2fe108e54f2c4589a411de36391d596f00a9b", "commitAfterChange": "66d9400a3bd4573e47f17cf944c8e2d7c4a32043", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected void configure( Object target, Configuration configuration ) throws ConfigurationException", "signatureAfterChange": "     protected void configure( Object target, Configuration configuration ) throws ConfigurationException", "diff": ["-        IntrospectionHelper helper = IntrospectionHelper.getHelper( target.getClass() );", "-", "-        // Configure the id.", "-        String id = configuration.getAttribute( \"id\", null );", "-        if( id != null )", "-        {", "-            project.addReference( id, target );", "-        }", "-", "-        // Configure the attributes.", "-        final String[] attribs = configuration.getAttributeNames();", "-        for( int i = 0; i < attribs.length; i++ )", "-        {", "-            final String name = attribs[ i ];", "-            final String value =", "-                project.replaceProperties( configuration.getAttribute( name ) );", "-            try", "-            {", "-                helper.setAttribute( project, target,", "-                                     name.toLowerCase( Locale.US ), value );", "-            }", "-            catch( BuildException be )", "-            {", "-                // id attribute must be set externally", "-                if( !name.equals( \"id\" ) )", "-                {", "-                    throw be;", "-                }", "-            }", "-        }", "-", "-        // Configure the text content.", "-        String text = configuration.getValue( null );", "-        if( text != null )", "-        {", "-            helper.addText( project, target, text );", "-        }", "-", "-        // Configure the nested elements", "-        Configuration[] nestedConfigs = configuration.getChildren();", "-        for( int i = 0; i < nestedConfigs.length; i++ )", "-        {", "-            Configuration nestedConfig = nestedConfigs[ i ];", "-            String name = nestedConfig.getName();", "-            Object nestedElement = helper.createElement( project, target, name );", "-            configure( nestedElement, nestedConfig );", "-            helper.storeElement( project, target, nestedElement, name );", "-        }", "-", "+        //TODO Maybe provide different configuration order for tasks not in a target,", "+        // elements in a TaskContainer etc...", "+        Ant1CompatConfigurer configurer =", "+            new Ant1CompatConfigurer( target, configuration, project );", "+        configurer.createChildren();", "+        configurer.configure();", "+        this.init();"]}]}
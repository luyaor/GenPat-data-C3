{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "64b9c91051fb133af3c7b62acf7a12d0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2834865718a9e22d675ef290a9a99993", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/TailFilter.java", "commitBeforeChange": "87241e9658b99f80933db976b7e099e08ffc2de0", "commitAfterChange": "f87fdc99c7f6796711f3b1f1efd9add14cb58129", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public final int read() throws IOException", "signatureAfterChange": "     public final int read() throws IOException", "diff": ["-                if (ch == '\\n' || ch == -1) {", "-                    ++linesRead;", "+                if (lines > 0) {", "+                    if (ch == '\\n' || ch == -1) {", "+                        ++linesRead;", "-                    if (linesRead == lines) {", "-                        int i = 0;", "-                        for (i = returnedCharPos + 1;", "-                            buffer[i] != 0 && buffer[i] != '\\n'; i++) {", "+                        if ((linesRead == lines + skip)) {", "+                            int i = 0;", "+                            for (i = returnedCharPos + 1;", "+                                buffer[i] != 0 && buffer[i] != '\\n'; i++) {", "+                            }", "+                            returnedCharPos = i;", "+                            --linesRead;", "-                        returnedCharPos = i;", "-                        --linesRead;", "+        // Because the complete stream is read into the buffer I can delete", "+        // the \"skip lines\" from back to the beginning.", "+        if (skip > 0) {", "+            // searching...", "+            int i;", "+            for (i = buffer.length - 1; skip > 0; i--) {", "+                if (buffer[i]=='\\n') {", "+                    skip--;", "+                }", "+            }", "+", "+           // cut the buffer to the new length", "+           char[] newBuffer = new char[i];", "+           System.arraycopy(buffer, 0, newBuffer, 0, i);", "+           buffer = newBuffer;", "+", "+           // don\ufffdt forget to set the \"lastposition\" new", "+           bufferPos = i;", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a445e2af540b1379027ea9bc1bef429", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "4cbbf3629a15a78615a3ce63ffe6f3fc028b172d", "commitAfterChange": "2c04d7e833b4e5dab1a3c5ddfe14b572aea8c112", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 53, "signatureBeforeChange": "      private void writeVersionNeededToExtractAndGeneralPurposeBits(final int                                                                   zipMethod,                                                                   final boolean                                                                   utfFallback,                                                                   final boolean                                                                   zip64)         throws IOException", "signatureAfterChange": "      private int versionNeededToExtract(final int zipMethod, final boolean zip64)", "diff": ["-    private void writeVersionNeededToExtractAndGeneralPurposeBits(final int", "-                                                                  zipMethod,", "-                                                                  final boolean", "-                                                                  utfFallback,", "-                                                                  final boolean", "-                                                                  zip64)", "-        throws IOException {", "-", "-        // CheckStyle:MagicNumber OFF", "-        int versionNeededToExtract = INITIAL_VERSION;", "-        if (zipMethod == DEFLATED && raf == null) {", "-            // requires version 2 as we are going to store length info", "-            // in the data descriptor", "-            versionNeededToExtract = DATA_DESCRIPTOR_MIN_VERSION;", "-        if (zip64) {", "-            versionNeededToExtract = ZIP64_MIN_VERSION;", "-        }", "-        // CheckStyle:MagicNumber ON", "-        // version needed to extract", "-        writeOut(ZipShort.getBytes(versionNeededToExtract));", "-        // general purpose bit flag", "-        writeOut(b.encode());", "+    private int versionNeededToExtract(final int zipMethod, final boolean zip64) {", "+        if (zip64) {", "+            return ZIP64_MIN_VERSION;", "+        }", "+        // requires version 2 as we are going to store length info", "+        // in the data descriptor", "+        return (isDeflatedToOutputStream(zipMethod)) ?", "+                DATA_DESCRIPTOR_MIN_VERSION :", "+                INITIAL_VERSION;", "+    }"]}]}
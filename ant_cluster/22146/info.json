{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dfad1ce1a51e1bcdf81557a30e3521a9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27f2f01f6eea4f94ab46d4f2d79da60c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "ee9453f4f459494b616f35d57b58b73773e534dd", "commitAfterChange": "edb71783adeffc29a56df203f97b5ac0e4566a5d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "          private static void runBuild()", "signatureAfterChange": "      private static void runBuild()", "diff": ["-    ", "+", "-        ", "-\tlong startTime = System.currentTimeMillis();", "-\tif (msgOutputLevel >= Project.MSG_INFO) {", "-\t    System.out.println(\"Buildfile: \" + buildFile);", "-\t}", "-        ", "-\tProject project = new Project();", "-\tproject.setOutputLevel(msgOutputLevel);", "-\t// set user-define properties", "+        long startTime = System.currentTimeMillis();", "+        if (msgOutputLevel >= Project.MSG_INFO) {", "+            System.out.println(\"Buildfile: \" + buildFile);", "+        }", "+", "+        Project project = new Project();", "+        project.setOutputLevel(msgOutputLevel);", "+", "+        // set user-define properties", "-        ", "-\ttry {", "-\t    ProjectHelper.configureProject(project, buildFile);", "-\t} catch (BuildException be) {", "-\t    String msg = \"BUILD CONFIG ERROR: \";", "-\t    System.out.println(msg + be.getMessage());", "-\t    be.printStackTrace();", "-\t    exit(1);", "-\t}", "+        try {", "+            ProjectHelper.configureProject(project, buildFile);", "+        } catch (BuildException be) {", "+            String msg = \"BUILD CONFIG ERROR: \";", "+            System.out.println(msg + be.getMessage());", "+            be.printStackTrace();", "+            System.exit(1);", "+        }", "-        ", "-\tif (targetCount == 0) {", "-\t    String target = project.getDefaultTarget();", "-\t    targets[0]=target;", "-\t    targetCount=1;", "-\t}", "-", "-        // set the security manager", "-    securityManager = new AntSecurityManager();", "-    System.setSecurityManager(securityManager);", "+        if (targets.size() == 0) {", "+            targets.addElement(project.getDefaultTarget());", "+        }", "-\ttry {", "-\t    for(int i=0; i< targetCount; i++) ", "-\t\tproject.executeTarget(targets[i]);", "-\t} catch (BuildException be) {", "-\t    String msg = \"BUILD FATAL ERROR: \";", "-\t    System.out.println(msg + be.getMessage());", "-        if (msgOutputLevel > Project.MSG_INFO) {", "-            be.printStackTrace();", "+        try {", "+            Enumeration en = targets.elements();", "+            while (en.hasMoreElements()) {", "+                project.executeTarget((String) en.nextElement());", "+            }", "+        } catch (BuildException be) {", "+            String msg = \"BUILD FATAL ERROR: \";", "+            System.out.println(msg + be.getMessage());", "+            if (msgOutputLevel > Project.MSG_INFO) {", "+                be.printStackTrace();", "+            }", "+            System.exit(1);", "-        exit(1);", "-\t}", "-        // track our stop time and let the user know how long things", "-        // took.", "-        ", "-\tlong finishTime = System.currentTimeMillis();", "-\tlong elapsedTime = finishTime - startTime;", "-\tif (msgOutputLevel >= Project.MSG_INFO) {", "-\t    System.out.println(\"Completed in \" + (elapsedTime/1000)", "-\t\t\t       + \" seconds\");", "-\t}", "+        // track our stop time and let the user know how long things took.", "+        long finishTime = System.currentTimeMillis();", "+        long elapsedTime = finishTime - startTime;", "+        if (msgOutputLevel >= Project.MSG_INFO) {", "+            System.out.println(\"Completed in \" + (elapsedTime/1000)", "+                               + \" seconds\");", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a3c360915cfd8d89ef8ec738f723c94", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/FixCRLF.java", "commitBeforeChange": "0777fa853af3a619d777adaead96e9c0d1aff291", "commitAfterChange": "5061e731c3919a7236bdcdd2ad9965d384313e26", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        if(file!=null) {", "-            if(srcDir!=null) {", "+        if (file != null) {", "+            if (srcDir != null) {", "-            srcDir=file.getParentFile();", "+            srcDir = file.getParentFile();", "-", "-            + \" eol=\"", "-            + (eol == ASIS ? \"asis\" : eol == CR ? \"cr\" : eol == LF ? \"lf\" : \"crlf\")", "-            + \" tab=\" + (tabs == TABS ? \"add\" : tabs == ASIS ? \"asis\" : \"remove\")", "-            + \" eof=\" + (ctrlz == ADD ? \"add\" : ctrlz == ASIS ? \"asis\" : \"remove\")", "-            + \" tablength=\" + tablength", "+            + \" eol=\" + filter.getEol().getValue()", "+            + \" tab=\" + filter.getTab().getValue()", "+            + \" eof=\" + filter.getEof().getValue()", "+            + \" tablength=\" + filter.getTablength()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91865fb5276f47b4512bde6a174e5226", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/i18n/TranslateTest.java", "commitBeforeChange": "b56846282e0f1e7ca72e4d157ebd4cff9cfe9b43", "commitAfterChange": "0d9a9e084149338164a2e73a28d7eea7e62722fe", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private boolean compareFiles(String name1, String name2)", "signatureAfterChange": "     private boolean compareFiles(File file1, File file2)", "diff": ["-    private boolean compareFiles(String name1, String name2) {", "-        File file1 = new File(System.getProperty(\"root\"), name1);", "-        File file2 = new File(System.getProperty(\"root\"), name2);", "-", "+    private boolean compareFiles(File file1, File file2) {", "-                System.out.println(\"One or both files do not exist:\" + name1 + \", \" + name2);", "+                System.out.println(\"One or both files do not exist:\" + file1.getAbsoluteFile() + \", \" + file2.getAbsoluteFile());", "-                System.out.println(\"File size mismatch:\" + name1 + \"(\" + file1.length() + \"), \" +", "-                                   name2  + \"(\" + file2.length() + \")\");", "+                System.out.println(\"File size mismatch:\" + file1.getAbsoluteFile() + \"(\" + file1.length() + \"), \" +", "+                                   file2.getAbsoluteFile()  + \"(\" + file2.length() + \")\");", "-                        System.out.println(\"Bytes mismatch:\" + name1 + \", \" + name2 +", "+                        System.out.println(\"Bytes mismatch:\" + file1.getAbsoluteFile() + \", \" + file2.getAbsoluteFile() +", "-            System.out.println(\"IOException comparing files: \" + name1 + \", \" + name2);", "+            System.out.println(\"IOException comparing files: \" + file1.getAbsoluteFile() + \", \" + file2.getAbsoluteFile());"]}]}
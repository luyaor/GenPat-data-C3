{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f5524f0d020ddf00ca78034d308e0c91", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e026af13b41461f4856b814ce4ed5c1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/filters/TokenFilterTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 22, "signatureBeforeChange": "       public void testScriptFilter2() throws IOException", "signatureAfterChange": "      @Test     public void testScriptFilter2() throws IOException", "diff": ["-", "+    @Test", "-        if (! hasScript(\"testScriptFilter\"))", "-            return;", "-", "-        expectFileContains(\"scriptfilter2\", getProject().getProperty(\"output\") + \"/scriptfilter2\",", "-                           \"HELLO MOON\");", "+    \tAssume.assumeTrue(\"Project does not have 'testScriptFilter' target\", buildRule.getProject().getTargets().contains(\"testScriptFilter\"));", "+        buildRule.executeTarget(\"scriptfilter2\");", "+    \tassertContains(\"HELLO MOON\", getFileString(buildRule.getProject().getProperty(\"output\") + \"/scriptfilter2\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d52abaa6c611ae88d4748be14709e5bb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/filters/TokenFilterTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 21, "signatureBeforeChange": "      public void testScriptFilter() throws IOException", "signatureAfterChange": "      @Test     public void testScriptFilter() throws IOException", "diff": ["+    @Test", "-        if (! hasScript(\"testScriptFilter\"))", "-            return;", "+    \tAssume.assumeTrue(\"Project does not have 'testScriptFilter' target\",", "+                buildRule.getProject().getTargets().contains(\"testScriptFilter\"));", "+    \tbuildRule.executeTarget(\"scriptfilter\");", "+    \tassertContains(\"HELLO WORLD\", getFileString(buildRule.getProject().getProperty(\"output\") + \"/scriptfilter\"));", "-        expectFileContains(\"scriptfilter\", getProject().getProperty(\"output\") + \"/scriptfilter\",", "-                           \"HELLO WORLD\");"]}]}
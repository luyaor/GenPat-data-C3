{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cc38b8dbb77cf7ffd4e269550ba3c0af", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7784efb1bb6551f53095ecdb80e8ff5a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultObjectConfigurer.java", "commitBeforeChange": "8af1905a98b1e04a63ab7473d64a41bfda91f15e", "commitAfterChange": "7a5c30f33c46dec3fb201dac6878a09c4cfcaf2c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private Map findAdders()         throws ConfigurationException", "signatureAfterChange": "     private Map findAdders()         throws ConfigurationException", "diff": ["-            final boolean isTypedAdder = methodName.equals( \"add\" );", "-", "-            final Class paramType = method.getParameterTypes()[ 0 ];", "-            if( isTypedAdder && !paramType.isInterface() )", "-            {", "-                final String message =", "-                    REZ.getString( \"typed-adder-non-interface.error\",", "-                                   m_class.getName(),", "-                                   paramType.getName() );", "-                throw new ConfigurationException( message );", "-            }", "-", "-            // TODO - un-hard-code this", "+            // Skip the text content method", "-", "-            final Class type = paramType;", "+            final Class type = method.getParameterTypes()[0];", "-                if( isTypedAdder )", "-                {", "-                    // Both are string, or both are not string", "-                    final String message =", "-                        REZ.getString( \"multiple-typed-adder-methods-for-element.error\",", "-                                       m_class.getName() );", "-                    throw new ConfigurationException( message );", "-                }", "-                else if( currentType != String.class && type == String.class )", "+                if( currentType != String.class && type == String.class )", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4a90b87a8d9abafd4bcec21415616ee", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/taskdefs/pvcs/Pvcs.java", "commitBeforeChange": "bd92e4de44f659770bc30e39f352dcc8446a1e9a", "commitAfterChange": "248269dea49bf84d7f1a87d23906854c519b9f70", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "      private File getFileList()         throws TaskException", "signatureAfterChange": "      private File getFileList()         throws TaskException", "diff": ["-        getContext().debug( \"Executing \" + cmd.toString() );", "-        catch( final ParseException pe )", "+        catch( final Exception e )", "-            final String message = \"Failed executing: \" +", "-                cmd.toString() + \". Exception: \" + pe.getMessage();", "-            throw new TaskException( message );", "-        }", "-        catch( final IOException ioe )", "-        {", "-            final String message = \"Failed executing: \" +", "-                cmd.toString() + \". Exception: \" + ioe.getMessage();", "-            throw new TaskException( message );", "+            throw new TaskException( \"Failed execution.\", e );"]}]}
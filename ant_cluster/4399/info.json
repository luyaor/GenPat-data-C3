{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9bde303674a65e29429263bfaf3fe84b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05f7fa932461db01b33bbea790853a80", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "4b3e0ee2041826e51ec60af99e7bcca7024bf676", "commitAfterChange": "ed3fafb887fef0afbcd90eef7f263fef3bde95d9", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void setValue( final PropertyConfigurer setter,                            final ConfigurationState state,                            final String value,                            final Context context )         throws Exception", "signatureAfterChange": "     private void setValue( final PropertyConfigurer setter,                            final ConfigurationState state,                            final String value,                            final Context context )         throws Exception", "diff": ["-        Object objValue = PropertyUtil.resolveProperty( value, context, false );", "+        Object objValue = context.resolveValue( value );", "-", "-        Object converterContext = context;", "-        if( context instanceof Resolvable )", "+        final Class type = setter.getType();", "+        if( ! type.isInstance( objValue ) )", "-            converterContext = ( (Resolvable)context ).resolve( context );", "+            objValue = m_converter.convert( type, objValue, context );", "-        final Class clazz = setter.getType();", "-        objValue = m_converter.convert( clazz, objValue, converterContext );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28e198b8dc929c37dec84c9ea6d99f6f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "b20531c93c277088ee73f7410025051b383d302e", "commitAfterChange": "7edeb4e678f61ddb643d348cfd8fede79b1cfbe5", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void setValue( final PropertyConfigurer setter,                            final ConfigurationState state,                            final String value,                            final Context context )         throws Exception", "signatureAfterChange": "     private void setValue( final PropertyConfigurer setter,                            final ConfigurationState state,                            final String value,                            final Context context )         throws Exception", "diff": ["+", "+        Object converterContext = context;", "+        if( context instanceof Resolvable )", "+        {", "+            converterContext = ( (Resolvable)context ).resolve( context );", "+        }", "-        objValue = m_converter.convert( clazz, objValue, context );", "+        objValue = m_converter.convert( clazz, objValue, converterContext );"]}]}
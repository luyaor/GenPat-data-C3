{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea8f78bd979da94594471457f7f28bec", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46fe362d71b15a53767d54d2a0c0c5b2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 132, "methodNumberAfterChange": 132, "signatureBeforeChange": "     @Override \tpublic void execute() throws BuildException", "signatureAfterChange": "     @Override \tpublic void execute() throws BuildException", "diff": ["-        Vector<String> packagesToDoc = new Vector<String>();", "-        Path sourceDirs = new Path(getProject());", "+        final Vector<String> packagesToDoc = new Vector<String>();", "+        final Path sourceDirs = new Path(getProject());", "+\t\tfinal", "-        Commandline toExecute = (Commandline) cmd.clone();", "+        final Commandline toExecute = (Commandline) cmd.clone();", "-        } catch (IOException e) {", "+        } catch (final IOException e) {", "-        JavadocOutputStream out = new JavadocOutputStream(Project.MSG_INFO);", "-        JavadocOutputStream err = new JavadocOutputStream(Project.MSG_WARN);", "-        Execute exe = new Execute(new PumpStreamHandler(out, err));", "+        final JavadocOutputStream out = new JavadocOutputStream(Project.MSG_INFO);", "+        final JavadocOutputStream err = new JavadocOutputStream(Project.MSG_WARN);", "+        final Execute exe = new Execute(new PumpStreamHandler(out, err));", "-            int ret = exe.execute();", "+            final int ret = exe.execute();", "-        } catch (IOException e) {", "+        } catch (final IOException e) {", "-            } catch (IOException e) {", "+            } catch (final IOException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2e33e9881152efbfe30b8f56c38c94b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/Frame.java", "commitBeforeChange": "f1025dd3c6deebb466ac41a06a42d812cdf4e08d", "commitAfterChange": "c2f14ffad1518f0d1c23c084b7c216d06c5da363", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 31, "signatureBeforeChange": "     protected void executeTarget(String targetName) throws ExecutionException", "signatureAfterChange": "     protected void executeTarget(String targetName) throws ExecutionException", "diff": ["+", "-        try {", "-            // firstly build a list of fully qualified target names to execute.", "-            List dependencyOrder = project.getTargetDependencies(targetName);", "+        // firstly build a list of fully qualified target names to execute.", "+        List dependencyOrder = getTargetDependencies(targetName);", "-            for (Iterator i = dependencyOrder.iterator(); i.hasNext();) {", "-                String fullTargetName = (String) i.next();", "-                Frame frame = getContainingFrame(fullTargetName);", "-                String localTargetName = getNameInFrame(fullTargetName);", "+        for (Iterator i = dependencyOrder.iterator(); i.hasNext();) {", "+            String fullTargetName = (String) i.next();", "+            Frame frame = getContainingFrame(fullTargetName);", "+            String localTargetName = getNameInFrame(fullTargetName);", "-                frame.executeTargetTasks(localTargetName);", "-            }", "-        } catch (ConfigException e) {", "-            throw new ExecutionException(e);", "+            frame.executeTargetTasks(localTargetName);"]}]}
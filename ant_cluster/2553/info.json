{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2cb2d709b585ff037901fb07d1a0d1b9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00cd31552c4ee1f6d757828d1d7771f9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/GenericDeploymentTool.java", "commitBeforeChange": "018aa8685b246a8bb269832fcbc935874eff0c1e", "commitAfterChange": "e545bf4a3695a90cc6d3645fb20d5dbacc7ec988", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 15, "signatureBeforeChange": "     protected void addFileToJar(JarOutputStream jStream,                                 FileInputStream iStream,                                 String          filename)         throws BuildException", "signatureAfterChange": "     protected void addFileToJar(JarOutputStream jStream,                                 File inputFile,                                 String logicalFilename)         throws BuildException", "diff": ["-                                FileInputStream iStream,", "-                                String          filename)", "+                                File inputFile,", "+                                String logicalFilename)", "+        FileInputStream iStream = null;", "-            // Create the zip entry and add it to the jar file", "-            ZipEntry zipEntry = new ZipEntry(filename);", "-            jStream.putNextEntry(zipEntry);", "-            ", "-            // Create the file input stream, and buffer everything over", "-            // to the jar output stream", "-            byte[] byteBuffer = new byte[2 * 1024];", "-            int count = 0;", "-            do {", "-                jStream.write(byteBuffer, 0, count);", "-                count = iStream.read(byteBuffer, 0, byteBuffer.length);", "-            } while (count != -1);", "-            ", "-            // Close up the file input stream for the class file", "-            iStream.close();", "+            if (!addedfiles.contains(logicalFilename)) {", "+                iStream = new FileInputStream(inputFile);", "+                // Create the zip entry and add it to the jar file", "+                ZipEntry zipEntry = new ZipEntry(logicalFilename);", "+                jStream.putNextEntry(zipEntry);", "+                   ", "+                // Create the file input stream, and buffer everything over", "+                // to the jar output stream", "+                byte[] byteBuffer = new byte[2 * 1024];", "+                int count = 0;", "+                do {", "+                    jStream.write(byteBuffer, 0, count);", "+                    count = iStream.read(byteBuffer, 0, byteBuffer.length);", "+                } while (count != -1);", "+                ", "+                //add it to list of files in jar", "+                addedfiles.add(logicalFilename);", "+           }       ", "-                         + filename + \"to jarfile.\"", "+                         + logicalFilename + \" to jarfile from \" + inputFile.getPath() + \".\"", "+        }", "+        finally {", "+            // Close up the file input stream for the class file", "+            if (iStream != null) {", "+                try {", "+                    iStream.close();", "+                }", "+                catch (IOException closeException) {}", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e777be3edc858a3e0c2361b2b3933bb7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/TraXLiaison.java", "commitBeforeChange": "8f70bc2a919459c49c1977d91551f43819063954", "commitAfterChange": "1e8307708de490453db28c89f777eb4a9c08767b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void transform(File infile, File outfile) throws Exception", "signatureAfterChange": "      public void transform(File infile, File outfile) throws Exception", "diff": ["-        FileInputStream fis = null;", "-        FileOutputStream fos = null;", "+        if (transformer == null) {", "+            transformer = newTransformer();", "+        }", "+", "+        InputStream fis = null;", "+        OutputStream fos = null;", "-            fis = new FileInputStream(infile);", "-            fos = new FileOutputStream(outfile);", "-            // FIXME: need to use a SAXSource as the source for the transform", "-            // so we can plug in our own entity resolver", "-            Source src = null;", "-            if (entityResolver != null) {", "-                if (tfactory.getFeature(SAXSource.FEATURE)) {", "-                    SAXParserFactory spFactory = SAXParserFactory.newInstance();", "-                    spFactory.setNamespaceAware(true);", "-                    XMLReader reader = spFactory.newSAXParser().getXMLReader();", "-                    reader.setEntityResolver(entityResolver);", "-                    src = new SAXSource(reader, new InputSource(fis));", "-                } else {", "-                    throw new IllegalStateException(\"xcatalog specified, but \" +", "-                        \"parser doesn't support SAX\");", "-                }", "-            } else {", "-                src = new StreamSource(fis);", "-            }", "-            src.setSystemId(getSystemId(infile));", "+            fis = new BufferedInputStream(new FileInputStream(infile));", "+            fos = new BufferedOutputStream(new FileOutputStream(outfile));", "-", "-            if (uriResolver != null)", "-                transformer.setURIResolver(uriResolver);", "-", "+            Source src = getSource(fis, infile);", "-                if (xslStream != null){", "-                    xslStream.close();", "-                }", "-            } catch (IOException ignored){}", "-            try {", "-                if (fis != null){", "+                if (fis != null) {", "-            } catch (IOException ignored){}", "+            } catch (IOException ignored) {", "+            }", "-                if (fos != null){", "+                if (fos != null) {", "-            } catch (IOException ignored){}", "+            } catch (IOException ignored) {", "+            }", "+        }", "+    }"]}]}
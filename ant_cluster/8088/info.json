{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "841131ab5914639c1639020cfe5bd442", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48b484335aedae5c28ecf555eee92749", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "ee5f3b4185bf2539cc29e20893d1d296910cf62c", "commitAfterChange": "eb08ea9fd094b675617320ddf8b66940644a8364", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "     private static void printUsage()", "signatureAfterChange": "     private static void printUsage()", "diff": ["-        String lSep = System.getProperty(\"line.separator\");", "-        StringBuffer msg = new StringBuffer();", "-        msg.append(\"ant [options] [target [target2 [target3] ...]]\" + lSep);", "-        msg.append(\"Options: \" + lSep);", "-        msg.append(\"  -help, -h              print this message\" + lSep);", "-        msg.append(\"  -projecthelp, -p       print project help information\" + lSep);", "-        msg.append(\"  -version               print the version information and exit\" + lSep);", "-        msg.append(\"  -diagnostics           print information that might be helpful to\" + lSep);", "-        msg.append(\"                         diagnose or report problems.\" + lSep);", "-        msg.append(\"  -quiet, -q             be extra quiet\" + lSep);", "-        msg.append(\"  -silent, -S            print nothing but task outputs and build failures\" + lSep);", "-        msg.append(\"  -verbose, -v           be extra verbose\" + lSep);", "-        msg.append(\"  -debug, -d             print debugging information\" + lSep);", "-        msg.append(\"  -emacs, -e             produce logging information without adornments\"", "-                   + lSep);", "-        msg.append(\"  -lib <path>            specifies a path to search for jars and classes\"", "-                   + lSep);", "-        msg.append(\"  -logfile <file>        use given file for log\" + lSep);", "-        msg.append(\"    -l     <file>                ''\" + lSep);", "-        msg.append(\"  -logger <classname>    the class which is to perform logging\" + lSep);", "-        msg.append(\"  -listener <classname>  add an instance of class as a project listener\"", "-                   + lSep);", "-        msg.append(\"  -noinput               do not allow interactive input\" + lSep);", "-        msg.append(\"  -buildfile <file>      use given buildfile\" + lSep);", "-        msg.append(\"    -file    <file>              ''\" + lSep);", "-        msg.append(\"    -f       <file>              ''\" + lSep);", "-        msg.append(\"  -D<property>=<value>   use value for given property\" + lSep);", "-        msg.append(\"  -keep-going, -k        execute all targets that do not depend\" + lSep);", "-        msg.append(\"                         on failed target(s)\" + lSep);", "-        msg.append(\"  -propertyfile <name>   load all properties from file with -D\" + lSep);", "-        msg.append(\"                         properties taking precedence\" + lSep);", "-        msg.append(\"  -inputhandler <class>  the class which will handle input requests\" + lSep);", "-        msg.append(\"  -find <file>           (s)earch for buildfile towards the root of\" + lSep);", "-        msg.append(\"    -s  <file>           the filesystem and use it\" + lSep);", "-        msg.append(\"  -nice  number          A niceness value for the main thread:\" + lSep", "-                   + \"                         1 (lowest) to 10 (highest); 5 is the default\"", "-                   + lSep);", "-        msg.append(\"  -nouserlib             Run ant without using the jar files from\" + lSep", "-                   + \"                         ${user.home}/.ant/lib\" + lSep);", "-        msg.append(\"  -noclasspath           Run ant without using CLASSPATH\" + lSep);", "-        msg.append(\"  -autoproxy             Java1.5+: use the OS proxy settings\"", "-                + lSep);", "-        msg.append(\"  -main <class>          override Ant's normal entry point\");", "-        System.out.println(msg.toString());", "+        System.out.println(\"ant [options] [target [target2 [target3] ...]]\");", "+        System.out.println(\"Options: \");", "+        System.out.println(\"  -help, -h              print this message\");", "+        System.out.println(\"  -projecthelp, -p       print project help information\");", "+        System.out.println(\"  -version               print the version information and exit\");", "+        System.out.println(\"  -diagnostics           print information that might be helpful to\");", "+        System.out.println(\"                         diagnose or report problems.\");", "+        System.out.println(\"  -quiet, -q             be extra quiet\");", "+        System.out.println(\"  -silent, -S            print nothing but task outputs and build failures\");", "+        System.out.println(\"  -verbose, -v           be extra verbose\");", "+        System.out.println(\"  -debug, -d             print debugging information\");", "+        System.out.println(\"  -emacs, -e             produce logging information without adornments\");", "+        System.out.println(\"  -lib <path>            specifies a path to search for jars and classes\");", "+        System.out.println(\"  -logfile <file>        use given file for log\");", "+        System.out.println(\"    -l     <file>                ''\");", "+        System.out.println(\"  -logger <classname>    the class which is to perform logging\");", "+        System.out.println(\"  -listener <classname>  add an instance of class as a project listener\");", "+        System.out.println(\"  -noinput               do not allow interactive input\");", "+        System.out.println(\"  -buildfile <file>      use given buildfile\");", "+        System.out.println(\"    -file    <file>              ''\");", "+        System.out.println(\"    -f       <file>              ''\");", "+        System.out.println(\"  -D<property>=<value>   use value for given property\");", "+        System.out.println(\"  -keep-going, -k        execute all targets that do not depend\");", "+        System.out.println(\"                         on failed target(s)\");", "+        System.out.println(\"  -propertyfile <name>   load all properties from file with -D\");", "+        System.out.println(\"                         properties taking precedence\");", "+        System.out.println(\"  -inputhandler <class>  the class which will handle input requests\");", "+        System.out.println(\"  -find <file>           (s)earch for buildfile towards the root of\");", "+        System.out.println(\"    -s  <file>           the filesystem and use it\");", "+        System.out.println(\"  -nice  number          A niceness value for the main thread:\"", "+                + \"                         1 (lowest) to 10 (highest); 5 is the default\");", "+        System.out.println(\"  -nouserlib             Run ant without using the jar files from\"", "+                + \"                         ${user.home}/.ant/lib\");", "+        System.out.println(\"  -noclasspath           Run ant without using CLASSPATH\");", "+        System.out.println(\"  -autoproxy             Java1.5+: use the OS proxy settings\");", "+        System.out.println(\"  -main <class>          override Ant's normal entry point\");", "+        for (ArgumentProcessor processor : ArgumentProcessorRegistry.getInstance().getProcessors()) {", "+            processor.printUsage(System.out);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b43472316f57f5a87b04b44bc16a1d25", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Rmic.java", "commitBeforeChange": "4a99751448c8773ce33c3029af60e20db02167f7", "commitAfterChange": "758b225e9a7868aa92992cc2bb27f5036225a1f1", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        File baseDir = project.resolveFile(base);", "-        File sourceBaseFile = null;", "-        if (null != sourceBase) {", "-            sourceBaseFile = project.resolveFile(sourceBase);", "-        }", "+", "+        loader = new AntClassLoader(project, classpath);", "-            scanDir(baseDir, files, verify);", "+            scanDir(baseDir, files);", "+        } else {", "+            // otherwise perform a timestamp comparison - at least", "+            scanDir(baseDir, ", "+                    new String[] {classname.replace('.', File.separatorChar) + \".class\"});", "-        sun.rmi.rmic.Main compiler = new sun.rmi.rmic.Main(System.out, \"rmic\");", "-        int argCount = 5;", "-        int i = 0;", "-        if (null != stubVersion) argCount++;", "-        if (null != sourceBase) argCount++;", "-        if (iiop) {", "-            argCount++;", "-            if( iiopopts != null ) {", "-                argCount++;", "-            }", "-        }", "-        if (idl) {", "-            argCount++;", "-            if( idlopts != null ) {", "-                argCount++;", "-            }", "-        }", "+        OutputStream logstr = new LogOutputStream(this, Project.MSG_WARN);", "+        sun.rmi.rmic.Main compiler = new sun.rmi.rmic.Main(logstr, \"rmic\");", "+        Commandline cmd = new Commandline();", "-        if (compileList.size() > 0) argCount += compileList.size() - 1;", "-        String[] args = new String[argCount];", "-        args[i++] = \"-d\";", "-        args[i++] = baseDir.getAbsolutePath();", "-        args[i++] = \"-classpath\";", "-        args[i++] = classpath.toString();", "+        cmd.createArgument().setValue(\"-d\");", "+        cmd.createArgument().setFile(baseDir);", "+        cmd.createArgument().setValue(\"-classpath\");", "+        cmd.createArgument().setPath(classpath);", "-                args[i++] = \"-v1.1\";", "+                cmd.createArgument().setValue(\"-v1.1\");", "-                args[i++] = \"-v1.2\";", "+                cmd.createArgument().setValue(\"-v1.2\");", "-                args[i++] = \"-vcompat\";", "+                cmd.createArgument().setValue(\"-vcompat\");", "-        if (null != sourceBase) args[i++] = \"-keepgenerated\";", "+        if (null != sourceBase)", "+            cmd.createArgument().setValue(\"-keepgenerated\");", "-             args[i++] = \"-iiop\";", "-             if( iiopopts != null ) ", "-                args[i++] = iiopopts;", "+            cmd.createArgument().setValue(\"-iiop\");", "+            if( iiopopts != null ) ", "+                cmd.createArgument().setValue(iiopopts);", "-             args[i++] = \"-idl\";", "-             if( idlopts != null ) ", "-                args[i++] = idlopts;", "+            cmd.createArgument().setValue(\"-idl\");", "+            if( idlopts != null ) ", "+                cmd.createArgument().setValue(idlopts);", "-", "-        if (classname != null) {", "-            if (shouldCompile(new File(baseDir, classname.replace('.', File.separatorChar) + \".class\"))) {", "-                args[i++] = classname;", "-                compiler.compile(args);", "+        int fileCount = compileList.size();", "+        if (fileCount > 0) {", "+            log(\"RMI Compiling \" + fileCount +", "+                \" class\"+ (fileCount > 1 ? \"es\" : \"\")+\" to \" + baseDir, ", "+                Project.MSG_INFO);", "+            ", "+            for (int j = 0; j < fileCount; j++) {", "+                cmd.createArgument().setValue((String) compileList.elementAt(j));", "-        } else {", "-            if (compileList.size() > 0) {", "-                log(\"RMI Compiling \" + compileList.size() +", "-                    \" classes to \" + baseDir, Project.MSG_INFO);", "-", "-                for (int j = 0; j < compileList.size(); j++) {", "-                    args[i++] = (String) compileList.elementAt(j);", "-                }", "-                compiler.compile(args);", "-            }", "+            log(\"Compilation args: \" + cmd.toString(), Project.MSG_VERBOSE);", "+            compiler.compile(cmd.getArguments());", "-            if (classname != null) {", "-                moveGeneratedFile(baseDir, sourceBaseFile, classname);", "-            } else {", "-                for (int j = 0; j < compileList.size(); j++) {", "-                    moveGeneratedFile(baseDir, sourceBaseFile, (String) compileList.elementAt(j));", "-                }", "+            for (int j = 0; j < fileCount; j++) {", "+                moveGeneratedFile(baseDir, sourceBase, (String) compileList.elementAt(j));", "+        compileList.removeAllElements();"]}]}
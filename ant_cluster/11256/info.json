{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3474bc1fd5c1d84cf10c1e879ec8d39d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f38d49c27f322af3b31d627c2b94648", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Rmic.java", "commitBeforeChange": "af56e7c4911a5dea0b326997d127d6380bbe93a2", "commitAfterChange": "818ddcf1837e09566976e01e2b718b1995f6e5f2", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 46, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        if (baseDir == null) {", "+        File outputDir = getOutputDir();", "+        if (outputDir == null) {", "-        if (!baseDir.exists()) {", "-            throw new BuildException(ERROR_NO_BASE_EXISTS + baseDir, getLocation());", "+        if (!outputDir.exists()) {", "+            throw new BuildException(ERROR_NO_BASE_EXISTS + outputDir, getLocation());", "-        if (!baseDir.isDirectory()) {", "-            throw new BuildException(ERROR_NOT_A_DIR + baseDir, getLocation());", "+        if (!outputDir.isDirectory()) {", "+            throw new BuildException(ERROR_NOT_A_DIR + outputDir, getLocation());", "-                        + baseDir, Project.MSG_INFO);", "+                        + outputDir, Project.MSG_INFO);", "-            if (null != sourceBase && !baseDir.equals(sourceBase)", "+            if (null != sourceBase && !outputDir.equals(sourceBase)", "-                        moveGeneratedFile(baseDir, sourceBase, (String) compileList.elementAt(j),", "+                        moveGeneratedFile(outputDir, sourceBase, (String) compileList.elementAt(j),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d33eb192693a14117abf95a6893d86cc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/filterreaders/src/main/org/apache/tools/ant/filters/ReplaceTokens.java", "commitBeforeChange": "7b8d582ad0c4a47e17fbb73773788608fddef0a0", "commitAfterChange": "87f806d3e4aba137d933f31a902197a19f96b7c4", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private final void initialize()", "signatureAfterChange": "     private final void initialize()", "diff": ["-        if (parameters != null) {", "-            for (int i = 0; i < parameters.length; i++) {", "-                if (parameters[i] != null) {", "-                    final String type = parameters[i].getType();", "+        Parameter[] params = getParameters();", "+        if (params != null) {", "+            for (int i = 0; i < params.length; i++) {", "+                if (params[i] != null) {", "+                    final String type = params[i].getType();", "-                        final String name = parameters[i].getName();", "+                        final String name = params[i].getName();", "-                            beginToken = parameters[i].getValue().charAt(0);", "+                            beginToken = params[i].getValue().charAt(0);", "-                            endToken = parameters[i].getValue().charAt(0);", "+                            endToken = params[i].getValue().charAt(0);", "-                        final String name = parameters[i].getName();", "-                        final String value = parameters[i].getValue();", "+                        final String name = params[i].getName();", "+                        final String value = params[i].getValue();"]}]}
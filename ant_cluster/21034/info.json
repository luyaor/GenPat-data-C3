{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e686050c6b0dfcef67f8603640c3bde", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1de3d790bda71b687a601f0cf595b286", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/metamata/AbstractMetamataTask.java", "commitBeforeChange": "271e0fe6fc223253e2c24c0f0f0c4fc4d9b58410", "commitAfterChange": "8af1905a98b1e04a63ab7473d64a41bfda91f15e", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 22, "signatureBeforeChange": "     protected Hashtable scanFileSets()", "signatureAfterChange": "      protected Hashtable scanSources(final Hashtable mapping, final String[] entries)", "diff": ["-    protected Hashtable scanFileSets(){", "-        for (int i = 0; i < fileSets.size(); i++){", "-            for (int j = 0; j < f.length; j++){", "-                if ( pathname.endsWith(\".java\") ){", "-                    File file = new File( ds.getBasedir(), pathname);", "-                    String classname = pathname.substring(0, pathname.length()-\".java\".length());", "-                   files.put( file.getAbsolutePath(), classname ); // it's a java file, add it.", "+    protected Hashtable scanSources(final Hashtable mapping, final String[] entries) {", "+        final Vector javaFiles = new Vector(512);", "+        for (int i = 0; i < entries.length; i++) {", "+            final File f = new File(entries[i]);", "+            if (f.isDirectory()) {", "+                DirectoryScanner ds = new DirectoryScanner();", "+                ds.setBasedir(f);", "+                ds.setIncludes(new String[]{\"**/*.java\"});", "+                ds.scan();", "+                String[] included = ds.getIncludedFiles();", "+                for (int j = 0; j < included.length; j++) {", "+                    javaFiles.addElement(new File(f, included[j]));", "+                }", "+            } else if (entries[i].endsWith(\".java\")) {", "+                javaFiles.addElement(f);", "+            }", "+        }", "+        // do the mapping paths/classname", "+        final int count = javaFiles.size();", "+        for (int i = 0; i < count; i++) {", "+            File file = (File) javaFiles.elementAt(i);", "+            String pathname = Path.translateFile(file.getAbsolutePath());", "+            String classname = pathname.substring(0, pathname.length() - \".java\".length());", "+            classname = classname.replace(File.separatorChar, '.');", "+            mapping.put(pathname, classname);", "+        }", "+        return mapping;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3938f30195f9ceda4874925fb5e5cdde", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/sitraka/bytecode/MethodInfo.java", "commitBeforeChange": "08f1fb49e458c04980a50ea10f6a6ad441923907", "commitAfterChange": "c1b263f4737e2ffcbe70fecb82b7c2ffea17e5bd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic void read(DataInputStream dis) throws IOException", "signatureAfterChange": "      public void read(ConstantPool constantPool, DataInputStream dis) throws IOException", "diff": ["-\t", "-\tpublic void read(DataInputStream dis) throws IOException {", "-\t\taccess_flags = dis.readShort();", "-\t\tname_index = dis.readShort();", "-\t\tdescriptor_index = dis.readShort();", "-\t\tAttributeInfoList attrlist = new AttributeInfoList(constantPool);", "-\t\tattrlist.read(dis);", "-\t\tcode = (Code)attrlist.getAttribute(AttributeInfo.CODE);", "-\t\tsynthetic = attrlist.getAttribute(AttributeInfo.SYNTHETIC) != null;", "-\t\tdeprecated = attrlist.getAttribute(AttributeInfo.DEPRECATED) != null;", "-\t\texceptions = (Exceptions)attrlist.getAttribute(AttributeInfo.EXCEPTIONS);", "-\t}", "+", "+    public void read(ConstantPool constantPool, DataInputStream dis) throws IOException {", "+        access_flags = dis.readShort();", "+", "+        int name_index = dis.readShort();", "+        name =  Utils.getUTF8Value(constantPool, name_index);", "+", "+        int descriptor_index = dis.readShort();", "+        descriptor = Utils.getUTF8Value(constantPool, descriptor_index);", "+", "+        int attributes_count = dis.readUnsignedShort();", "+        for (int i = 0; i < attributes_count; i++) {", "+            int attr_id = dis.readShort();", "+            String attr_name = Utils.getUTF8Value(constantPool, attr_id);", "+            int len = dis.readInt();", "+            if (AttributeInfo.CODE.equals(attr_name)) {", "+                readCode(constantPool, dis);", "+            } else {", "+                dis.skipBytes(len);", "+            }", "+        }", "+", "+    }"]}]}
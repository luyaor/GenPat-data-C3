{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "078cee96fd8991b139a81e20993ce7db", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e06b38c30541ec0982e06d5fce1ef16", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javac.java", "commitBeforeChange": "40cfacf23be83a5ef4fb8a5edf0fba6c7db909fc", "commitAfterChange": "2f3fc4ceb269ba3d0285afb816295ff76e503b10", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "     protected Path getCompileClasspath(boolean addRuntime)", "signatureAfterChange": "     protected Path getCompileClasspath(boolean addRuntime)", "diff": ["-            String order = project.getProperty(\"build.sysclasspath\");", "-            if (order == null) order=\"first\";", "-", "-            if (order.equals(\"only\")) {", "-                // only: the developer knows what (s)he is doing", "-                classpath.addExisting(Path.systemClasspath);", "-", "-            } else if (order.equals(\"last\")) {", "-                // last: don't trust the developer", "-                classpath.addExisting(compileClasspath);", "-                classpath.addExisting(Path.systemClasspath);", "-", "-            } else if (order.equals(\"ignore\")) {", "-                // ignore: don't trust anyone", "-                classpath.addExisting(compileClasspath);", "-                addRuntime = true;", "-", "-            } else {", "-                // first: developer could use a little help", "-                classpath.addExisting(Path.systemClasspath);", "-                classpath.addExisting(compileClasspath);", "-            }", "+            classpath.addExisting(compileClasspath.concatSystemClasspath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "191ce5e7c3bb566ad46c899123c234b2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javac.java", "commitBeforeChange": "d9dc37613d9674bcd4caa399529317bdd41ac512", "commitAfterChange": "ba0d3f2a3e98523d8fd5a9c4e8e2005a901eadc0", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     protected Path getCompileClasspath(boolean addRuntime)", "signatureAfterChange": "     protected Path getCompileClasspath(boolean addRuntime)", "diff": ["-        // add our classpath to the mix", "+        // Compine the build classpath with the system classpath, in an ", "+        // order determined by the value of build.classpath", "-        if (compileClasspath != null) {", "-            classpath.addExisting(compileClasspath);", "+        if (compileClasspath == null) {", "+            classpath.addExisting(Path.systemClasspath);", "+        } else {", "+            String order = project.getProperty(\"build.sysclasspath\");", "+            if (order == null) order=\"first\";", "+", "+            if (order.equals(\"only\")) {", "+                // only: the developer knows what (s)he is doing", "+                classpath.addExisting(Path.systemClasspath);", "+", "+            } else if (order.equals(\"last\")) {", "+                // last: don't trust the developer", "+                classpath.addExisting(compileClasspath);", "+                classpath.addExisting(Path.systemClasspath);", "+", "+            } else if (order.equals(\"ignore\")) {", "+                // ignore: don't trust anyone", "+                classpath.addExisting(compileClasspath);", "+                addRuntime = true;", "+", "+            } else {", "+                // first: developer could use a little help", "+                classpath.addExisting(Path.systemClasspath);", "+                classpath.addExisting(compileClasspath);", "+            }", "-        // add the system classpath", "+        // optionally add the runtime classes", "-        classpath.addExisting(Path.systemClasspath);"]}]}
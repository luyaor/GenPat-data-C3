{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "37dfecbb751f070939944fa5af7ef5ca", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "310f454443e25eb215289ebe2f216f4c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/deployer/DefaultDeployer.java", "commitBeforeChange": "e7ab62bc9179b392804835d02155e43d3d2cf5d6", "commitAfterChange": "2e6e170fb375181f4438e1de44808c7adab508a2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public DefaultDeployer()", "signatureAfterChange": "     public void handleType( final Deployment deployment,                             final TypeDefinition typeDef )         throws Exception", "diff": ["-     */", "-    public DefaultDeployer()", "-    {", "-        m_fileDeployers = new HashMap();", "-    }", "+    public void handleType( final Deployment deployment,", "+                            final TypeDefinition typeDef )", "+        throws Exception", "+        final String typeName = typeDef.getName();", "+        final String roleShorthand = typeDef.getRole();", "+", "+        final String className = typeDef.getClassname();", "+        if( null == className )", "+            final String message = REZ.getString( \"typedef.no-classname.error\" );", "+        if( typeDef instanceof ConverterDefinition )", "+            // Validate the definition", "+            final ConverterDefinition converterDef = (ConverterDefinition)typeDef;", "+            final String srcClass = converterDef.getSourceType();", "+            final String destClass = converterDef.getDestinationType();", "+            if( null == srcClass )", "+            {", "+                final String message = REZ.getString( \"converterdef.no-source.error\" );", "+                throw new DeploymentException( message );", "+            }", "+            if( null == destClass )", "+            {", "+                final String message = REZ.getString( \"converterdef.no-destination.error\" );", "+                throw new DeploymentException( message );", "+            }", "+", "+            // Deploy the converter", "+            handleConverter( deployment, className, srcClass, destClass );", "+        }", "+        else", "+        {", "+            // Validate the definition", "+            if( null == roleShorthand )", "+            {", "+                final String message = REZ.getString( \"typedef.no-role.error\" );", "+                throw new DeploymentException( message );", "+            }", "+            else if( null == typeName )", "+            {", "+                final String message = REZ.getString( \"typedef.no-name.error\" );", "+                throw new DeploymentException( message );", "+            }", "+", "+            // Deploy general-purpose type", "+            handleType( deployment, roleShorthand, typeName, className );", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cbd3e3afab3078a633df19042afd808", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/builder/XSLProjectBuilder.java", "commitBeforeChange": "30c15adf831522a3e92cea70a72cd19068f8b135", "commitAfterChange": "b91a25c851c38c44462c4a025b41cf631bc658bb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected void process( final String sourceID,                             final SAXConfigurationHandler handler )         throws Exception", "signatureAfterChange": "      protected void process( final URL sourceID,                             final SAXConfigurationHandler handler )         throws Exception", "diff": ["-    protected void process( final String sourceID,", "+", "+    protected void process( final URL sourceID,", "-        final String xslSheet = FileUtil.removeExtension( sourceID ) + \".xsl\";", "+        final SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();", "+        final SAXParser saxParser = saxParserFactory.newSAXParser();", "+        final XMLReader reader = saxParser.getXMLReader();", "+        reader.setFeature( \"http://xml.org/sax/features/validation\", false );", "+        reader.setErrorHandler( handler );", "-        // Create a transform factory instance.", "-        final TransformerFactory factory = TransformerFactory.newInstance();", "+        final ReactorPIHandler reactorHandler = new ReactorPIHandler();", "+        reader.setContentHandler( reactorHandler );", "-        // Create a transformer for the stylesheet.", "-        final Transformer transformer = factory.newTransformer( new StreamSource( xslSheet ) );", "+        try { reader.parse( sourceID.toString() ); }", "+        catch( final StopParsingException spe )", "+        {", "+            //Ignore me", "+        }", "-        final SAXResult result = new SAXResult( handler );", "+        Transformer transformer = null;", "-        //Make a debug option for this", "-        //transformer.transform( new StreamSource( sourceID ), new StreamResult( System.out ) );", "+        final int size = reactorHandler.getPICount();", "+        for( int i = 0; i < size; i++ )", "+        {", "+            final String target = reactorHandler.getTarget( i );", "+            final String data = reactorHandler.getData( i );", "-        transformer.transform( new StreamSource( sourceID ), result );", "+            if( target.equals( \"xsl-param\" ) ) handleParameter( data );", "+            else if( target.equals( \"xsl-params\" ) ) handleParameters( data, sourceID );", "+            else if( target.equals( \"xsl-stylesheet\" ) ) ", "+            {", "+                if( null != transformer )", "+                {", "+                    throw new SAXException( \"Build file can not contain \" + ", "+                                            \"two xsl-stylesheet PIs\" );", "+                }", "+", "+                final TransformerFactory factory = TransformerFactory.newInstance();", "+                final String stylesheet = getStylesheet( data, sourceID );", "+                transformer = factory.newTransformer( new StreamSource( stylesheet ) );", "+            }", "+        }", "+", "+        if( null == transformer )", "+        {", "+            reader.setContentHandler( handler );", "+            reader.parse( sourceID.toString() );", "+        }", "+        else", "+        {", "+            final SAXResult result = new SAXResult( handler );", "+            transformer.transform( new StreamSource( sourceID.toString() ), result );", "+        }        ", "+    }"]}]}
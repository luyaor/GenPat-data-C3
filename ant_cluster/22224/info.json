{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6cc9423ab1ee96826a717a0d2526efce", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0898ecfd24b1a3310323969d0e41169f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/starteam/StarTeamCheckin.java", "commitBeforeChange": "837f7ef785e24137608ba41f850d605b23bccff4", "commitAfterChange": "23e61358c8ed2aa3fe63c1f67082150047f1df9e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "     protected void visit(Folder starteamFolder, java.io.File targetFolder)             throws BuildException", "signatureAfterChange": "     protected void visit(Folder starteamFolder, java.io.File targetFolder)             throws BuildException", "diff": ["-            throws BuildException {", "+            throws BuildException ", "+    {", "-            Hashtable localFiles = listLocalFiles(targetFolder);", "-", "-            // If we have been told to create the working folders", "-            // For all Files in this folder, we need to check", "-            // if there have been modifications.", "-", "-            Item[] files = starteamFolder.getItems(\"File\");", "-            for (int i = 0; i < files.length; i++) {", "-                File eachFile = (File) files[i];", "-                String filename = eachFile.getName();", "-                java.io.File localFile =", "-                        new java.io.File(targetFolder, filename);", "-", "-                delistLocalFile(localFiles, localFile);", "-", "-                // If the file doesn't pass the include/exclude tests, skip it.", "-                if (!shouldProcess(filename)) {", "-                    log(\"Skipping \" + eachFile.toString(), Project.MSG_INFO);", "-                    continue;", "-                }", "-", "-", "-                // If forced is not set then we may save ourselves some work by", "-                // looking at the status flag.", "-                // Otherwise, we care nothing about these statuses.", "-", "-                if (!isForced()) {", "-                    int fileStatus = (eachFile.getStatus());", "-", "-                    // We try to update the status once to give StarTeam", "-                    // another chance.", "-                    if (fileStatus == Status.MERGE", "-                            || fileStatus == Status.UNKNOWN) {", "-                        eachFile.updateStatus(true, true);", "-                        fileStatus = (eachFile.getStatus());", "-                    }", "-                    if (fileStatus == Status.CURRENT) {", "-                        log(\"Not processing \" + eachFile.toString()", "-                                + \" as it is current.\",", "-                                Project.MSG_INFO);", "-                        continue;", "-                    }", "-                }", "-", "-                // Check in anything else.", "-", "-                log(\"Checking In: \" + (localFile.toString()), Project.MSG_INFO);", "-                eachFile.checkinFrom(localFile, this.comment,", "-                        this.lockStatus,", "-                        true, true, true);", "+            if (null != getRootLocalFolder()) {", "+                starteamFolder.setAlternatePathFragment(", "+                    targetFolder.getAbsolutePath());", "-            // Now we recursively call this method on all sub folders in this", "-            // folder unless recursive attribute is off.", "-            Folder[] subFolders = starteamFolder.getSubFolders();", "-            for (int i = 0; i < subFolders.length; i++) {", "-                java.io.File targetSubfolder =", "-                        new java.io.File(targetFolder, subFolders[i].getName());", "-                delistLocalFile(localFiles, targetSubfolder);", "+            Folder[] foldersList = starteamFolder.getSubFolders();", "+            Item[] stFiles = starteamFolder.getItems(getTypeNames().FILE);", "+            ", "+            // note, it's important to scan the items BEFORE we make the", "+            // UnmatchedFileMap because that creates a bunch of NEW", "+            // folders and files (unattached to repository) and we", "+            // don't want to include those in our traversal.", "+", "+            UnmatchedFileMap ufm = ", "+                new CheckinMap().init(", "+                    targetFolder.getAbsoluteFile(), starteamFolder);", "+", "+", "+            for (int i = 0, size = foldersList.length; i < size; i++) {", "+                Folder stFolder = foldersList[i];", "+                java.io.File subfolder = ", "+                    new java.io.File(targetFolder, stFolder.getName());", "+", "+                ufm.removeControlledItem(subfolder);", "-                    visit(subFolders[i], targetSubfolder);", "+                    visit(stFolder, subfolder);", "-            if (this.addUncontrolled) {", "-                addUncontrolledItems(localFiles, starteamFolder);", "+", "+           ", "+            for (int i = 0, size = stFiles.length; i < size; i++) {", "+                com.starbase.starteam.File stFile = ", "+                    (com.starbase.starteam.File) stFiles[i];", "+                processFile( stFile, targetFolder);", "+                ", "+                ufm.removeControlledItem(", "+                    new java.io.File(targetFolder, stFile.getName()));", "+            if (this.addUncontrolled) {", "+                ufm.processUncontrolledItems();", "+            }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "831e0f2c4213e775f815ed1961bfaca6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/starteam/StarTeamCheckout.java", "commitBeforeChange": "837f7ef785e24137608ba41f850d605b23bccff4", "commitAfterChange": "23e61358c8ed2aa3fe63c1f67082150047f1df9e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 11, "signatureBeforeChange": "     protected void visit(Folder starteamFolder, java.io.File targetFolder)             throws BuildException", "signatureAfterChange": "     protected void visit(Folder starteamFolder, java.io.File targetFolder)             throws BuildException", "diff": ["-            throws BuildException {", "+            throws BuildException ", "+    {  ", "-            Hashtable localFiles = listLocalFiles(targetFolder);", "-            // If we have been told to create the working folders", "-            if (createDirs) {", "-                // Create if it doesn't exist", "-                if (!targetFolder.exists()) {", "-                    targetFolder.mkdir();", "-                }", "+", "+            if (null != getRootLocalFolder()) {", "+                starteamFolder.setAlternatePathFragment(", "+                    targetFolder.getAbsolutePath());", "-            // For all Files in this folder, we need to check", "-            // if there have been modifications.", "+            ", "+            ", "+            Folder[] foldersList = starteamFolder.getSubFolders();", "+            Item[] filesList = starteamFolder.getItems(getTypeNames().FILE);", "+            ", "+            ", "+            // note, it's important to scan the items BEFORE we make the", "+            // Unmatched file map because that creates a bunch of NEW", "+            // folders and files (unattached to repository) and we", "+            // don't want to include those in our traversal.", "-            Item[] files = starteamFolder.getItems(\"File\");", "-            for (int i = 0; i < files.length; i++) {", "-                File eachFile = (File) files[i];", "-                String filename = eachFile.getName();", "-                java.io.File localFile =", "-                        new java.io.File(targetFolder, filename);", "-", "-                delistLocalFile(localFiles, localFile);", "-", "-                // If the file doesn't pass the include/exclude tests, skip it.", "-                if (!shouldProcess(filename)) {", "-                    log(\"Skipping \" + eachFile.toString(), Project.MSG_INFO);", "-                    continue;", "-                }", "+            UnmatchedFileMap ufm = ", "+                new CheckoutMap().", "+                    init(targetFolder.getAbsoluteFile(), starteamFolder);", "-                // If forced is not set then we may save ourselves some work by", "-                // looking at the status flag.", "-                // Otherwise, we care nothing about these statuses.", "-                if (!isForced()) {", "-                    int fileStatus = (eachFile.getStatus());", "+            for (int i = 0; i < foldersList.length; i++) {", "+                Folder stFolder = foldersList[i];", "-                    // We try to update the status once to give StarTeam", "-                    // another chance.", "-                    if (fileStatus == Status.MERGE || fileStatus == Status.UNKNOWN) {", "-                        eachFile.updateStatus(true, true);", "-                        fileStatus = (eachFile.getStatus());", "-                    }", "-                    if (fileStatus == Status.CURRENT) {", "-                        log(\"Not processing \" + eachFile.toString()", "-                                + \" as it is current.\",", "-                                Project.MSG_INFO);", "-                        continue;", "-                    }", "-                }", "+                java.io.File subfolder = ", "+                     new java.io.File(targetFolder, stFolder.getName());", "+                 ufm.removeControlledItem(subfolder);", "-                // Check out anything else.", "-                // Just a note: StarTeam has a status for NEW which implies", "-                // that there is an item  on your local machine that is not", "-                // in the repository.  These are the items that show up as", "-                // NOT IN VIEW in the Starteam GUI.", "-                // One would think that we would want to perhaps checkin the", "-                // NEW items (not in all cases! - Steve Cohen 15 Dec 2001)", "-                // Unfortunately, the sdk doesn't really work, and we can't", "-                // actually see  anything with a status of NEW. That is why", "-                // we can just check out  everything here without worrying", "-                // about losing anything.", "-", "-                log(\"Checking Out: \" + (localFile.toString()), Project.MSG_INFO);", "-                eachFile.checkoutTo(localFile, this.lockStatus,", "-                        true, true, true);", "+                 if (isRecursive()) {", "+                     if (!subfolder.exists()) {", "+                         if (this.createDirs) {", "+                             log(\"Creating folder: \" + subfolder);", "+                             subfolder.mkdirs();", "+                         }", "+                     }", "+                     if (subfolder.exists()) {", "+                         visit(stFolder, subfolder);", "+                     }", "+                 }", "-            // Now we recursively call this method on all sub folders in this", "-            // folder unless recursive attribute is off.", "-            Folder[] subFolders = starteamFolder.getSubFolders();", "-            for (int i = 0; i < subFolders.length; i++) {", "-                java.io.File targetSubfolder =", "-                        new java.io.File(targetFolder, subFolders[i].getName());", "-                delistLocalFile(localFiles, targetSubfolder);", "-                if (isRecursive()) {", "-                    visit(subFolders[i], targetSubfolder);", "-                }", "+            for (int i = 0; i < filesList.length; i++) {", "+                com.starbase.starteam.File stFile = ", "+                    (com.starbase.starteam.File) filesList[i];", "+                processFile( stFile, targetFolder);", "+                ", "+                ufm.removeControlledItem(", "+                    new java.io.File(targetFolder, stFile.getName()));", "-", "-                deleteUncontrolledItems(localFiles);", "+                ufm.processUncontrolledItems();", "-"]}]}
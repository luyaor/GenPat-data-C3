{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6167c17a33959e044873681b78d71d9d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11e275cd62cdab55117bd8a9ec45e72c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SignJar.java", "commitBeforeChange": "7229e5923e3cdbc8bed4d88c96eb90d1134cb379", "commitAfterChange": "450c0f1f2f827f00b7b03bedbede099ae0b3dc43", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private void signOneJar(File jarSource, File jarTarget)             throws BuildException", "signatureAfterChange": "     private void signOneJar(File jarSource, File jarTarget)             throws BuildException", "diff": ["-        final ExecTask cmd = new ExecTask(this);", "-        cmd.setExecutable(JavaEnvUtils.getJdkExecutable(JARSIGNER_COMMAND));", "-        cmd.setTaskType(JARSIGNER_COMMAND);", "+        final ExecTask cmd = createJarSigner();", "-        if (maxMemory != null) {", "-            cmd.createArg().setValue(\"-J-Xmx\" + maxMemory);", "-        }", "+        setCommonOptions(cmd);", "-        if (null != keystore) {", "-            // is the keystore a file", "-            cmd.createArg().setValue(\"-keystore\");", "-            String location;", "-            File keystoreFile = getProject().resolveFile(keystore);", "-            if (keystoreFile.exists()) {", "-                location = keystoreFile.getPath();", "-            } else {", "-                // must be a URL - just pass as is", "-                location = keystore;", "-            }", "-            cmd.createArg().setValue(location);", "-        }", "-        if (null != storetype) {", "-            cmd.createArg().setValue(\"-storetype\");", "-            cmd.createArg().setValue(storetype);", "-        }", "+        bindToKeystore(cmd);", "-            cmd.createArg().setValue(\"-sigfile\");", "-            cmd.createArg().setValue(sigfile);", "+            addValue(cmd, \"-sigfile\");", "+            String value = this.sigfile;", "+            addValue(cmd, value);", "-            cmd.createArg().setValue(\"-signedjar\");", "-            cmd.createArg().setValue(target.getPath());", "-        }", "-", "-        if (verbose) {", "-            cmd.createArg().setValue(\"-verbose\");", "+            addValue(cmd, \"-signedjar\");", "+            addValue(cmd, target.getPath());", "-            cmd.createArg().setValue(\"-internalsf\");", "+            addValue(cmd, \"-internalsf\");", "-            cmd.createArg().setValue(\"-sectionsonly\");", "+            addValue(cmd, \"-sectionsonly\");", "-        cmd.createArg().setValue(jarSource.getPath());", "+        addValue(cmd, jarSource.getPath());", "-        cmd.createArg().setValue(alias);", "+        addValue(cmd, alias);", "-        cmd.setFailonerror(true);", "-        cmd.addConfiguredRedirector(redirector);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "192b549af2bf3afed01af6d81289dae3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/optional/ScriptRunner.java", "commitBeforeChange": "ebefa298a138aaf7088ad1af981a392b895eff85", "commitAfterChange": "c0b535098106a3b4549151960da251a6e78e627e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void executeScript(String execName) throws BuildException", "signatureAfterChange": "     public void executeScript(String execName) throws BuildException", "diff": ["-        if (language == null) {", "-            throw new BuildException(\"script language must be specified\");", "-        }", "-", "-        ClassLoader origContextClassLoader =", "-            Thread.currentThread().getContextClassLoader();", "-        ClassLoader scriptLoader = getClass().getClassLoader();", "-        if (classpath != null && project != null) {", "-            scriptLoader = project.createClassLoader(", "-                scriptLoader, classpath);", "-        }", "+        checkLanguage();", "+        ClassLoader origLoader = replaceContextLoader();", "-            Thread.currentThread().setContextClassLoader(scriptLoader);", "-            BSFManager manager = new BSFManager ();", "-            manager.setClassLoader(scriptLoader);", "-", "-            for (Iterator i = beans.keySet().iterator(); i.hasNext();) {", "-                String key = (String) i.next();", "-                Object value = beans.get(key);", "-                if (value != null) {", "-                    manager.declareBean(key, value, value.getClass());", "-                } else {", "-                    // BSF uses a hashtable to store values", "-                    // so cannot declareBean with a null value", "-                    // So need to remove any bean of this name as", "-                    // that bean should not be visible", "-                    manager.undeclareBean(key);", "-                }", "-            }", "-", "+            BSFManager m = createManager();", "+            declareBeans(m);", "-            manager.exec(language, execName, 0, 0, script);", "-        } catch (BSFException be) {", "-            Throwable t = be;", "-            Throwable te = be.getTargetException();", "-            if (te != null) {", "-                if  (te instanceof BuildException) {", "-                    throw (BuildException) te;", "-                } else {", "-                    t = te;", "-                }", "+            if (engine == null) {", "+                m.exec(getLanguage(), execName, 0, 0, getScript());", "+            } else {", "+                engine.exec(execName, 0, 0, getScript());", "-            throw new BuildException(t);", "+        } catch (BSFException be) {", "+            throwBuildException(be);", "-             Thread.currentThread().setContextClassLoader(", "-                 origContextClassLoader);", "+            restoreContextLoader(origLoader);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a681ce1856a63f0937db34ab1ce18320", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ImportTask.java", "commitBeforeChange": "3a39ebed995578e9b6b14fb02724ddd2c4c3a516", "commitAfterChange": "a5da600a7a23e415a3028787e9b06fbc0dd27f74", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void execute()", "signatureAfterChange": "      public void execute()", "diff": ["-        if (file == null && resource == null) {", "+        if (file == null && resources.size() == 0) {", "-                                     + \" nested resource\");", "+                                     + \" at least one nested resource\");", "-        Resource importedResource = resource;", "-        File importedFile = null;", "-        if (resource == null) {", "+        Union resourcesToImport = new Union(getProject(), resources);", "+        if (file != null) {", "-        File buildFile = new File(getLocation().getFileName()).getAbsoluteFile();", "+            File buildFile =", "+                new File(getLocation().getFileName()).getAbsoluteFile();", "-        // Paths are relative to the build file they're imported from,", "-        // *not* the current directory (same as entity includes).", "+            // Paths are relative to the build file they're imported from,", "+            // *not* the current directory (same as entity includes).", "-        File buildFileParent = new File(buildFile.getParent());", "-            importedFile = FILE_UTILS.resolveFile(buildFileParent, file);", "-            importedResource = new FileResource(importedFile);", "+            File buildFileParent = new File(buildFile.getParent());", "+            File importedFile = FILE_UTILS.resolveFile(buildFileParent, file);", "+            resources.add(new FileResource(importedFile));", "+        for (Iterator i = resourcesToImport.iterator(); i.hasNext(); ) {", "+            importResource(helper, (Resource) i.next());", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afbb4d70ef5f6836bdacc816bb633f6d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/selectors/SelectorUtils.java", "commitBeforeChange": "cde826c2b0d226773ff00407365ac581b3e7c9e0", "commitAfterChange": "48c3492303350febdfc637a4c4a2e681f15f1867", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public static boolean match(String pattern, String str,                                 boolean isCaseSensitive)", "signatureAfterChange": "     public static boolean match(String pattern, String str,                                 boolean caseSensitive)", "diff": ["-                                boolean isCaseSensitive) {", "+                                boolean caseSensitive) {", "-                    if (isCaseSensitive && ch != strArr[i]) {", "+                    if (different(caseSensitive, ch, strArr[i])) {", "-                    }", "-                    if (!isCaseSensitive && Character.toUpperCase(ch)", "-                            != Character.toUpperCase(strArr[i])) {", "-                        return false;  // Character mismatch", "-        while ((ch = patArr[patIdxStart]) != '*' && strIdxStart <= strIdxEnd) {", "+        while (true) {", "+            ch = patArr[patIdxStart];", "+            if (ch == '*' || strIdxStart > strIdxEnd) {", "+                break;", "+            }", "-                if (isCaseSensitive && ch != strArr[strIdxStart]) {", "-                    return false; // Character mismatch", "-                }", "-                if (!isCaseSensitive && Character.toUpperCase(ch)", "-                        != Character.toUpperCase(strArr[strIdxStart])) {", "+                if (different(caseSensitive, ch, strArr[strIdxStart])) {", "-            for (int i = patIdxStart; i <= patIdxEnd; i++) {", "-                if (patArr[i] != '*') {", "-                    return false;", "-                }", "-            }", "-            return true;", "+            return allStars(patArr, patIdxStart, patIdxEnd);", "-        while ((ch = patArr[patIdxEnd]) != '*' && strIdxStart <= strIdxEnd) {", "+        while (true) {", "+            ch = patArr[patIdxEnd];", "+            if (ch == '*' || strIdxStart > strIdxEnd) {", "+                break;", "+            }", "-                if (isCaseSensitive && ch != strArr[strIdxEnd]) {", "-                    return false; // Character mismatch", "-                }", "-                if (!isCaseSensitive && Character.toUpperCase(ch)", "-                        != Character.toUpperCase(strArr[strIdxEnd])) {", "+                if (different(caseSensitive, ch, strArr[strIdxEnd])) {", "-            for (int i = patIdxStart; i <= patIdxEnd; i++) {", "-                if (patArr[i] != '*') {", "-                    return false;", "-                }", "-            }", "-            return true;", "+            return allStars(patArr, patIdxStart, patIdxEnd);", "-                        if (isCaseSensitive && ch != strArr[strIdxStart + i", "-                                + j]) {", "-                            continue strLoop;", "-                        }", "-                        if (!isCaseSensitive", "-                            && Character.toUpperCase(ch)", "-                                != Character.toUpperCase(strArr[strIdxStart + i + j])) {", "+                        if (different(caseSensitive, ch,", "+                                      strArr[strIdxStart + i + j])) {", "-        for (int i = patIdxStart; i <= patIdxEnd; i++) {", "-            if (patArr[i] != '*') {", "+        return allStars(patArr, patIdxStart, patIdxEnd);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f77b3d8977cf7c57b14b8c6959b227da", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "32f323668f263fad0bc38a43c6d4e6a1f4579c8a", "commitAfterChange": "a920aa9f305e0f998c908798c99b6d108f5d4a58", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public boolean doGet(int logLevel, DownloadProgress progress)             throws IOException", "signatureAfterChange": "     public boolean doGet(int logLevel, DownloadProgress progress)             throws IOException", "diff": ["+        for (Iterator iter = sources.iterator(); iter.hasNext(); ) {", "+            Resource r = (Resource) iter.next();", "+            URLProvider up = (URLProvider) r.as(URLProvider.class);", "+            URL source = up.getURL();", "+            return doGet(source, destination, logLevel, progress);", "+        }", "+        /*NOTREACHED*/", "+        return false;", "+    }", "-        GetThread getThread = new GetThread(hasTimestamp, timestamp, progress,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe3073ac267aa6c0eff2a53888fdcb42", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ExecutionManager.java", "commitBeforeChange": "7499c443d67445ea8fd0b8f4bd56c72251b18bf4", "commitAfterChange": "b7e43ad8c5906ae2b6d6b42f8b2715dc7d2e7a16", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public ExecutionManager(InitConfig initConfig)          throws ConfigException", "signatureAfterChange": "     public ExecutionManager(InitConfig initConfig, AntConfig config)          throws ConfigException", "diff": ["-    public ExecutionManager(InitConfig initConfig)", "+    public ExecutionManager(InitConfig initConfig, AntConfig config)", "-        Map librarySpecs = new HashMap();", "+        this.config = config;", "+        this.initConfig = initConfig;", "-        AntConfig userConfig = getAntConfig(initConfig.getUserConfigArea());", "-        AntConfig systemConfig = getAntConfig(initConfig.getSystemConfigArea());", "-", "-        AntConfig config = systemConfig;", "-        if (config == null) {", "-            config = userConfig;", "-        } else if (userConfig != null) {", "-            config.merge(userConfig);", "-        }", "-", "+        Map librarySpecs = new HashMap(10);", "-            URL taskBaseURL = new URL(initConfig.getLibraryURL(), \"antlibs\");", "-            addAntLibraries(librarySpecs, taskBaseURL);", "+            URL standardLibsURL", "+                 = new URL(initConfig.getLibraryURL(), \"antlibs/\");", "+            AntLibManager libManager", "+                 = new AntLibManager(config.isRemoteLibAllowed());", "+", "+            libManager.addAntLibraries(librarySpecs, standardLibsURL);", "+            libManager.configLibraries(initConfig, librarySpecs, antLibraries);", "+", "+            librarySpecs.clear();", "+            // add any additional libraries.", "-                // Now add in any found in the dirs specified in", "-                // the config files", "-                for (Iterator i = config.getTaskDirLocations(); i.hasNext(); ) {", "+                for (Iterator i = config.getLibraryLocations(); i.hasNext(); ) {", "-                    String taskDirString = (String)i.next();", "-                    File taskDir = new File(taskDirString);", "-                    if (!taskDir.exists()) {", "-                        URL taskDirURL = new URL(taskDirString);", "-                        addAntLibraries(librarySpecs, taskDirURL);", "-                    } else {", "-                        addAntLibraries(librarySpecs,", "-                            InitUtils.getFileURL(taskDir));", "-                    }", "+                    String libLocation = (String)i.next();", "+                    libManager.loadLib(librarySpecs, libLocation);", "+            libManager.configLibraries(initConfig, librarySpecs, antLibraries);", "-            configLibraries(initConfig, librarySpecs);", "+            addConfigLibPaths();", "-            if (config != null) {", "-                // now add any additional library Paths specified by the config", "-                for (Iterator i = config.getLibraryIds(); i.hasNext(); ) {", "-                    String libraryId = (String)i.next();", "-                    if (antLibraries.containsKey(libraryId)) {", "-                        AntLibrary antLib ", "-                            = (AntLibrary)antLibraries.get(libraryId);", "-                        List pathList = config.getLibraryPathList(libraryId);", "-                        for (Iterator j = pathList.iterator(); j.hasNext(); ) {", "-                            URL pathElementURL = (URL)j.next();", "-                            antLib.addLibraryURL(pathElementURL);", "-                        }", "-                    }", "-                }", "-            }", "-", "-            mainFrame = new ExecutionFrame(antLibraries);", "+            mainFrame = new ExecutionFrame(antLibraries, initConfig, config);"]}]}
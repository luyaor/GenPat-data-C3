{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a76906eb7cfcd064676ec24e8dc56b5f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10182cdcb8273e6b645269a6bd3a33c4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/DirectoryScannerTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 22, "signatureBeforeChange": "      public void testIsExcludedDirectoryScanned()", "signatureAfterChange": "      @Test     public void testIsExcludedDirectoryScanned()", "diff": ["+    @Test", "-        String shareclassloader = getProject().getProperty(\"tests.and.ant.share.classloader\");", "+        String shareclassloader = buildRule.getProject().getProperty(\"tests.and.ant.share.classloader\");", "-        if (shareclassloader == null", "-                || (shareclassloader != null && shareclassloader.startsWith(\"${\"))) {", "-            System.out.println(\"cannot execute testIsExcludedDirectoryScanned when tests are forked, \" +", "-                    \"package private method called\");", "-            return;", "-        }", "-        getProject().executeTarget(\"children-of-excluded-dir-setup\");", "+        assumeFalse(\"cannot execute testIsExcludedDirectoryScanned when tests are forked, \" +", "+                \"package private method called\", shareclassloader == null", "+                || (shareclassloader != null && shareclassloader.indexOf(\"${\") == 0));", "+        buildRule.getProject().executeTarget(\"children-of-excluded-dir-setup\");", "-        ds.setBasedir(new File(getProject().getProperty(\"output\")));", "+        ds.setBasedir(new File(buildRule.getProject().getProperty(\"output\")));", "+", "-        Set set = ds.getScannedDirs();", "+        Set<String> set = ds.getScannedDirs();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "431129ed53b3e29affc8811e137a5327", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/CopyTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public void testTranscoding() throws IOException", "signatureAfterChange": "      @Test     public void testTranscoding() throws IOException", "diff": ["+    @Test", "-        executeTarget(\"testTranscoding\");", "-        File f1 = getProject().resolveFile(\"copy/expected/utf-8\");", "-        File f2 = new File(getOutputDir(), \"copytest1.tmp\");", "-        assertTrue(FILE_UTILS.contentEquals(f1, f2));", "+        buildRule.executeTarget(\"testTranscoding\");", "+        File f1 = buildRule.getProject().resolveFile(\"copy/expected/utf-8\");", "+        File f2 = new File(buildRule.getProject().getProperty(\"output\"), \"copytest1.tmp\");", "+        assertEquals(FileUtilities.getFileContents(f1), FileUtilities.getFileContents(f2));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61dc51ff6635f57a317362d92f187d37", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/filters/ReplaceTokensTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void testReplaceTokensPropertyFile() throws IOException", "signatureAfterChange": "      @Test     public void testReplaceTokensPropertyFile() throws IOException", "diff": ["+    @Test", "-        executeTarget(\"testReplaceTokensPropertyFile\");", "-        File expected = FILE_UTILS.resolveFile(getProjectDir(), \"expected/replacetokens.test\");", "-        File result = new File(getProject().getProperty(\"output\"), \"replacetokensPropertyFile.test\");", "-        assertTrue(FILE_UTILS.contentEquals(expected, result));", "+        buildRule.executeTarget(\"testReplaceTokensPropertyFile\");", "+        File expected = buildRule.getProject().resolveFile(\"expected/replacetokens.test\");", "+        File result = new File(buildRule.getProject().getProperty(\"output\"), \"replacetokensPropertyFile.test\");", "+        assertEquals(FileUtilities.getFileContents(expected), FileUtilities.getFileContents(result));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "910d09102bdc9cac173d04727981c6e4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/InitializeClassTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testAll() throws IOException", "signatureAfterChange": "      @Test     public void testAll() throws IOException", "diff": ["+    @Test", "-        executeTarget(\"forked\");", "-        PrintStream ps = System.out;", "-        PrintStream newps = new PrintStream(new FileOutputStream(f2));", "-        System.setOut(newps);", "-        project.executeTarget(\"unforked\");", "-        System.setOut(ps);", "-        newps.close();", "-        assertTrue(\"Forked - non-forked mismatch\", FILE_UTILS.contentEquals(f1, f2));", "+        buildRule.executeTarget(\"forked\");", "+        synchronized (System.out) {", "+            PrintStream ps = System.out;", "+            PrintStream newps = new PrintStream(new FileOutputStream(f2));", "+             try {", "+                 System.setOut(newps);", "+                 buildRule.getProject().executeTarget(\"unforked\");", "+             } finally {", "+                 System.setOut(ps);", "+", "+                 newps.close();", "+             }", "+        }", "+        assertEquals(FileUtilities.getFileContents(f1), FileUtilities.getFileContents(f2));"]}]}
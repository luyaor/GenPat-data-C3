{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d8b7bbfdededf692c0c157bf2c555d03", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d8a12c6f92174d98ebe67b6b9bcddfe", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/taskdefs/jdepend/JDependTask.java", "commitBeforeChange": "7513ab1efa12321b3e2014764bfb23d16b425caf", "commitAfterChange": "299ea801bc1031e308bfe07a22e51edd1b972872", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void executeAsForked( final CommandlineJava commandline )         throws TaskException", "signatureAfterChange": "     private void executeAsForked()         throws TaskException", "diff": ["-    private void executeAsForked( final CommandlineJava commandline )", "+    private void executeAsForked()", "-        // if not set, auto-create the ClassPath from the project", "-        createClasspath();", "+        final ExecuteJava exe = new ExecuteJava();", "+        exe.setWorkingDirectory( m_dir );", "-        // not sure whether this test is needed but cost nothing to put.", "-        // hope it will be reviewed by anybody competent", "-        final String compileClasspath = PathUtil.formatPath( m_compileClasspath );", "-        if( compileClasspath.length() > 0 )", "+        if( \"text\".equals( m_format ) )", "-            commandline.addVmArgument( \"-classpath\" );", "-            commandline.addVmArgument( compileClasspath );", "+            exe.setClassName( \"jdepend.textui.JDepend\" );", "+        else", "+        {", "+            exe.setClassName( \"jdepend.xmlui.JDepend\" );", "+        }", "+", "+        if( m_jvm != null )", "+        {", "+            exe.setJvm( m_jvm );", "+        }", "+", "+        exe.getClassPath().addPath( m_compileClasspath );", "-            commandline.addArgument( \"-file\" );", "-            commandline.addArgument( m_outputFile.getPath() );", "-            // we have to find a cleaner way to put this output", "+            exe.getArguments().addArgument( \"-file\" );", "+            exe.getArguments().addArgument( m_outputFile );", "+            getContext().info( \"Output to be stored in \" + m_outputFile.getPath() );", "-            commandline.addArgument( f.getPath() );", "+            exe.getArguments().addArgument( f );", "-        final Execute exe = new Execute();", "-", "-        final String[] commandline1 = commandline.getCommandline();", "-        exe.setCommandline( new Commandline( commandline1 ) );", "-        exe.setWorkingDirectory( m_dir );", "-", "-        if( m_outputFile != null )", "-        {", "-            getContext().info( \"Output to be stored in \" + m_outputFile.getPath() );", "-        }", "-        exe.execute( getContext() );", "+        exe.executeForked( getContext() );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81cc7405639923635ab1b8f2f66ebf7b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/command/SaveAsCmd.java", "commitBeforeChange": "ffa6e24ba429847c04da9162971b6203151a7ce1", "commitAfterChange": "1056b715f84a4c3b17b7fcdecbaef6eaeb566ea7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void run()", "signatureAfterChange": "     public void run()", "diff": ["-        ProjectProxy project = getContext().getProject();", "-        if(project != null) {", "-            if(_file == null) {", "-                // XXX code here to select a file to save to.", "+        if(_project == null) {", "+            _project = getContext().getSelectionManager().getSelectedProject();", "+        }", "+", "+        if(_project != null) {", "+            // If no location is specified, then this truly is a SaveAs ", "+            // command. Provide the user the UI to select the output.", "+            if(_location == null) {", "-                    _file = chooser.getSelectedFile();", "-                    if(_file.exists()) {", "+                    File file = chooser.getSelectedFile();", "+                    if(file.exists()) {", "-                                       new Object[] {_file.toString()});", "+                                       new Object[] { file.toString()});", "-                        if(val != JOptionPane.YES_OPTION) {", "-                            _file = null;", "+                        if(val == JOptionPane.YES_OPTION) {", "+                            try {", "+                                _location = new URL(", "+                                    \"file\", null, file.getAbsolutePath());", "+                            }", "+                            catch(MalformedURLException ex) {", "+                                // Shouldn't happen. Save will just not", "+                                // happen.", "+                                ex.printStackTrace();", "+                            }", "-            if(_file != null) {", "-                project.setFile(_file);", "-                FileWriter out = null;", "+            // If a location is now available, do the save operation.", "+            if(_location != null) {", "-                    out = new FileWriter(_file);", "-                    project.write(out);", "+                    getContext().getProjectManager().saveAs(", "+                        _project, _location);", "-                        new Object[] { _file.toString() });", "+                        new Object[] { _location.toString() });", "-                }", "-                finally {", "-                    if (out != null) {", "-                        try {", "-                            out.flush();", "-                            out.close();", "-                        }", "-                        catch(IOException ex) {", "-                            // Intentionally ignored.", "-                        }", "-                    }"]}]}
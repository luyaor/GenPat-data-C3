{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6f98c9db7bbc65442bae55a5722c518b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af2a6da680e83530553e9ea6bf791c76", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/PropertyFile.java", "commitBeforeChange": "1c75ce2bee96873b6fbe22a9eada83d3f23c3e3d", "commitAfterChange": "37cf105bb344793a164900b1a09d678679e13946", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private void writeFile() throws BuildException", "signatureAfterChange": "      private void writeFile() throws BuildException", "diff": ["-        BufferedOutputStream bos = null;", "+        // Write to RAM first, as an OOME could otherwise produce a truncated file:", "+        ByteArrayOutputStream baos = new ByteArrayOutputStream();", "-            bos = new BufferedOutputStream(new FileOutputStream(propertyfile));", "-            properties.store(bos, comment);", "-        } catch (IOException ioe) {", "-            throw new BuildException(ioe, getLocation());", "-        } finally {", "-            FileUtils.close(bos);", "+            properties.store(baos, comment);", "+        } catch (IOException x) { // should not happen", "+            throw new BuildException(x, getLocation());", "+        }", "+        try {", "+            OutputStream os = new FileOutputStream(propertyfile);", "+            try {", "+                os.write(baos.toByteArray());", "+            } catch (IOException x) {", "+                propertyfile.delete(); // possibly corrupt", "+                throw new BuildException(x, getLocation());", "+            } finally {", "+                os.close();", "+            }", "+        } catch (IOException x) {", "+            throw new BuildException(x, getLocation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be1a35093b915c62f50905475fe4d516", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ExecutionFrame.java", "commitBeforeChange": "7499c443d67445ea8fd0b8f4bd56c72251b18bf4", "commitAfterChange": "b7e43ad8c5906ae2b6d6b42f8b2715dc7d2e7a16", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void setProject(Project project) throws ConfigException", "signatureAfterChange": "     protected void setProject(Project project) throws ConfigException", "diff": ["-    public void setProject(Project project) throws ConfigException {", "-        try {", "-            this.project = project;", "-            baseURL = new URL(project.getSourceURL(), project.getBase());", "-        } catch (MalformedURLException e) {", "-            throw new ConfigException(\"Unable to determine project base dir\",", "-                e, project.getLocation());", "+    protected void setProject(Project project) throws ConfigException {", "+        this.project = project;", "+        URL projectURL = project.getSourceURL();", "+        if (projectURL.getProtocol().equals(\"file\")) {", "+            File projectFile = new File(projectURL.getFile());", "+            String base = project.getBase();", "+            if (base == null) {", "+                base = \".\";", "+            }", "+            baseDir = new File(projectFile.getParentFile(), base);", "+        } else {", "+            baseDir = new File(\".\");", "-                 = new ExecutionFrame(antLibraries);", "+                 = new ExecutionFrame(standardLibs, initConfig, config);"]}]}
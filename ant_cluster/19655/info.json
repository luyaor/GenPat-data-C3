{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7085f38d962895060f8e748fa1dc559f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "840f79039810e140092da42a52af9950", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipLong.java", "commitBeforeChange": "35cadddc9862a72009a774f7d5939b338b434e60", "commitAfterChange": "4c69b551ec82319466630d5d268e4b840cd0b909", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public static byte[] getBytes(long value)", "signatureAfterChange": "     public static byte[] getBytes(long value)", "diff": ["-        byte[] result = new byte[4];", "-        result[0] = (byte) ((value & 0xFF));", "-        result[1] = (byte) ((value & 0xFF00) >> 8);", "-        result[2] = (byte) ((value & 0xFF0000) >> 16);", "-        result[3] = (byte) ((value & 0xFF000000L) >> 24);", "+        byte[] result = new byte[WORD];", "+        result[0] = (byte) ((value & BYTE_MASK));", "+        result[BYTE_1] = (byte) ((value & BYTE_1_MASK) >> BYTE_1_SHIFT);", "+        result[BYTE_2] = (byte) ((value & BYTE_2_MASK) >> BYTE_2_SHIFT);", "+        result[BYTE_3] = (byte) ((value & BYTE_3_MASK) >> BYTE_3_SHIFT);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e439cef045569e8d2d188be265036e5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/BuildNumber.java", "commitBeforeChange": "3ca7c90999ae1665925ab2d7b4255cd950f33238", "commitAfterChange": "6a434928c1677e61d1e34f12c0323524923434fe", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void validate()          throws BuildException", "signatureAfterChange": "     private void validate()          throws BuildException", "diff": ["-        if (null == m_file) {", "-            m_file = getProject().resolveFile(DEFAULT_FILENAME);", "+        if (null == myFile) {", "+            myFile = getProject().resolveFile(DEFAULT_FILENAME);", "-        if (!m_file.exists()) {", "+        if (!myFile.exists()) {", "-                FileUtils.newFileUtils().createNewFile(m_file);", "+                FileUtils.newFileUtils().createNewFile(myFile);", "-                    m_file + \" doesn't exist and new file can't be created.\";", "+                    myFile + \" doesn't exist and new file can't be created.\";", "-        if (!m_file.canRead()) {", "-            final String message = \"Unable to read from \" + m_file + \".\";", "+        if (!myFile.canRead()) {", "+            final String message = \"Unable to read from \" + myFile + \".\";", "-        if (!m_file.canWrite()) {", "-            final String message = \"Unable to write to \" + m_file + \".\";", "+        if (!myFile.canWrite()) {", "+            final String message = \"Unable to write to \" + myFile + \".\";"]}]}
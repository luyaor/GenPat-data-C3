{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "24de78790ba2689542be1ae23bbdea0e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "230b63633e6d748163b89d4f7196ac9e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/extension/JarLibAvailableTask.java", "commitBeforeChange": "f83f5c68c975f31a384cc24e94be4e5ebfa2da4d", "commitAfterChange": "f463bd2cab8b132695d8bf60c889212628eba281", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void execute()         throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-    public void execute()", "-        throws BuildException", "-    {", "+     */", "+    public void execute() throws BuildException {", "-        final Extension test = m_extension.toExtension();", "+        final Extension test = requiredExtension.toExtension();", "-        if( !m_extensionSets.isEmpty() )", "-        {", "-            final Iterator iterator = m_extensionSets.iterator();", "-            while( iterator.hasNext() )", "-            {", "-                final ExtensionSet extensionSet = (ExtensionSet)iterator.next();", "+        if (!extensionFileSets.isEmpty()) {", "+            final Iterator iterator = extensionFileSets.iterator();", "+            while (iterator.hasNext()) {", "+                final ExtensionSet extensionSet", "+                    = (ExtensionSet) iterator.next();", "-                    extensionSet.toExtensions( getProject() );", "-                for( int i = 0; i < extensions.length; i++ )", "-                {", "+                    extensionSet.toExtensions(getProject());", "+                for (int i = 0; i < extensions.length; i++) {", "-                    if( extension.isCompatibleWith( test ) )", "-                    {", "-                        getProject().setNewProperty( m_property, \"true\" );", "+                    if (extension.isCompatibleWith(test)) {", "+                        getProject().setNewProperty(propertyName, \"true\");", "-        }", "-        else", "-        {", "-            final Manifest manifest = ExtensionUtil.getManifest( m_file );", "-            final Extension[] extensions = Extension.getAvailable( manifest );", "-            for( int i = 0; i < extensions.length; i++ )", "-            {", "+        } else {", "+            final Manifest manifest = ExtensionUtil.getManifest(libraryFile);", "+            final Extension[] extensions = Extension.getAvailable(manifest);", "+            for (int i = 0; i < extensions.length; i++) {", "-                if( extension.isCompatibleWith( test ) )", "-                {", "-                    getProject().setNewProperty( m_property, \"true\" );", "+                if (extension.isCompatibleWith(test)) {", "+                    getProject().setNewProperty(propertyName, \"true\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3d71a652ff6cc09f1f156d9ad11b763", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/extension/JarLibResolveTask.java", "commitBeforeChange": "f83f5c68c975f31a384cc24e94be4e5ebfa2da4d", "commitAfterChange": "f463bd2cab8b132695d8bf60c889212628eba281", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public void execute()         throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-    public void execute()", "-        throws BuildException", "-    {", "+     */", "+    public void execute() throws BuildException {", "-        getProject().log( \"Resolving extension: \" + m_extension,", "-                          Project.MSG_VERBOSE );", "+        getProject().log(\"Resolving extension: \" + requiredExtension,", "+                          Project.MSG_VERBOSE);", "-            getProject().getProperty( m_property );", "+            getProject().getProperty(propertyName);", "-        if( null != candidate )", "-        {", "+        if (null != candidate) {", "-            if( m_failOnError )", "-            {", "-                throw new BuildException( message );", "-            }", "-            else", "-            {", "-                getProject().log( message, Project.MSG_ERR );", "+            if (failOnError) {", "+                throw new BuildException(message);", "+            } else {", "+                getProject().log(message, Project.MSG_ERR);", "-        final int size = m_resolvers.size();", "-        for( int i = 0; i < size; i++ )", "-        {", "+        final int size = resolvers.size();", "+        for (int i = 0; i < size; i++) {", "-                (ExtensionResolver)m_resolvers.get( i );", "+                (ExtensionResolver) resolvers.get(i);", "-            getProject().log( \"Searching for extension using Resolver:\" + resolver,", "-                              Project.MSG_VERBOSE );", "+            getProject().log(\"Searching for extension using Resolver:\" + resolver,", "+                              Project.MSG_VERBOSE);", "-            try", "-            {", "+            try {", "-                    resolver.resolve( m_extension, getProject() );", "-                try", "-                {", "-                    checkExtension( file );", "+                    resolver.resolve(requiredExtension, getProject());", "+                try {", "+                    checkExtension(file);", "+                } catch (final BuildException be) {", "+                    final String message = \"File \" + file + \" returned by \"", "+                        + \"resolver failed to satisfy extension due to: \"", "+                        + be.getMessage();", "+                    getProject().log(message, Project.MSG_WARN);", "-                catch( final BuildException be )", "-                {", "-                    final String message =", "-                        \"File \" + file + \" returned by resolver failed \" +", "-                        \"to satisfy extension due to: \" + be.getMessage();", "-                    getProject().log( message, Project.MSG_WARN );", "-                }", "-            }", "-            catch( final BuildException be )", "-            {", "-                final String message =", "-                    \"Failed to resolve extension to file \" +", "-                    \"using resolver \" + resolver + \" due to: \" + be;", "-                getProject().log( message, Project.MSG_WARN );", "+            } catch (final BuildException be) {", "+                final String message = \"Failed to resolve extension to file \"", "+                    + \"using resolver \" + resolver + \" due to: \" + be;", "+                getProject().log(message, Project.MSG_WARN);"]}]}
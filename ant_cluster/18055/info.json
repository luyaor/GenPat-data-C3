{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5dc6ca58a7b6871ce6d03660ea83c81b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "322b9e815eb49f91504976bd0ec44ad5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/PatternSet.java", "commitBeforeChange": "a8387980f989e9418ddcee6fa9ae14a0c07e3165", "commitAfterChange": "505d4a8c1d350ffac8a917378a6fac71b2517b3d", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void append(PatternSet other)", "signatureAfterChange": "     public void append(PatternSet other, Project p)", "diff": ["-    public void append(PatternSet other) {", "-        for (int i=0; i<other.includeList.size(); i++) {", "-            includeList.addElement(other.includeList.elementAt(i));", "+    public void append(PatternSet other, Project p) {", "+        if (isReference()) {", "+            throw new BuildException(\"Cannot append to a reference\");", "-        for (int i=0; i<other.excludeList.size(); i++) {", "-            excludeList.addElement(other.excludeList.elementAt(i));", "+", "+        String[] incl = other.getIncludePatterns(p);", "+        if (incl != null) {", "+            for (int i=0; i<incl.length; i++) {", "+                createInclude().setName(incl[i]);", "+            }", "+        }", "+        ", "+        String[] excl = other.getExcludePatterns(p);", "+        if (excl != null) {", "+            for (int i=0; i<excl.length; i++) {", "+                createExclude().setName(excl[i]);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7643a984b25ed6c9c652f1841ce30533", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Jar.java", "commitBeforeChange": "fffe72edb5a6a6deb6222d79841a42c1663ccd36", "commitAfterChange": "b74b9067510ce1fd1ce68b465f74c38c81fb7d01", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void setManifest(File manifestFile)", "signatureAfterChange": "      public void setManifest(File manifestFile)", "diff": ["-        manifest = manifestFile;", "-        if (!manifest.exists())", "-            throw new BuildException(\"Manifest file: \" + manifest + \" does not exist.\");", "-", "-        // Create a ZipFileSet for this file, and pass it up.", "-        ZipFileSet fs = new ZipFileSet();", "-        fs.setDir(new File(manifest.getParent()));", "-        fs.setIncludes(manifest.getName());", "-        fs.setFullpath(\"META-INF/MANIFEST.MF\");", "-        super.addFileset(fs);", "+        if (!manifestFile.exists()) {", "+            throw new BuildException(\"Manifest file: \" + manifestFile + \" does not exist.\", ", "+                                     getLocation());", "+        }", "+        ", "+        InputStream is = null;", "+        try {", "+            is = new FileInputStream(manifestFile);", "+            Manifest newManifest = new Manifest(is);", "+            if (manifest == null) {", "+                manifest = getDefaultManifest();", "+            }", "+            manifest.merge(newManifest);", "+        }", "+        catch (IOException e) {", "+            throw new BuildException(\"Unable to read manifest file: \" + manifestFile, e);", "+        }", "+        finally {", "+            if (is != null) {", "+                try {", "+                    is.close();", "+                }", "+                catch (IOException e) {", "+                    // do nothing", "+                }", "+            }", "+        }"]}]}
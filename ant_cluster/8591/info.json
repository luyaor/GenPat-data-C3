{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "71b520c6c1c4bb42a2cd28e83c31d91a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a0d7b0c93f10fee66c28a5e2418b26f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "     private TestResultHolder executeAsForked(JUnitTest test,                                              ExecuteWatchdog watchdog,                                              File casesFile)         throws BuildException", "signatureAfterChange": "     private TestResultHolder executeAsForked(JUnitTest test,                                              final ExecuteWatchdog watchdog,                                              final File casesFile)         throws BuildException", "diff": ["-                                             ExecuteWatchdog watchdog,", "-                                             File casesFile)", "+                                             final ExecuteWatchdog watchdog,", "+                                             final File casesFile)", "-        } catch (CloneNotSupportedException e) {", "+        } catch (final CloneNotSupportedException e) {", "-            FormatterElement fe = feArray[i];", "+            final FormatterElement fe = feArray[i];", "-                File outFile = getOutput(fe, test);", "+                final File outFile = getOutput(fe, test);", "-        File vmWatcher = createTempPropertiesFile(\"junitvmwatcher\");", "+        final File vmWatcher = createTempPropertiesFile(\"junitvmwatcher\");", "-        File propsFile = createTempPropertiesFile(\"junit\");", "+        final File propsFile = createTempPropertiesFile(\"junit\");", "-        Hashtable p = getProject().getProperties();", "-        Properties props = new Properties();", "-        for (Enumeration e = p.keys(); e.hasMoreElements();) {", "-            Object key = e.nextElement();", "+        final Hashtable p = getProject().getProperties();", "+        final Properties props = new Properties();", "+        for (final Enumeration e = p.keys(); e.hasMoreElements();) {", "+            final Object key = e.nextElement();", "-            FileOutputStream outstream = new FileOutputStream(propsFile);", "+            final FileOutputStream outstream = new FileOutputStream(propsFile);", "-        } catch (java.io.IOException e) {", "+        } catch (final java.io.IOException e) {", "-        Execute execute = new Execute(", "+        final Execute execute = new Execute(", "-        String[] environment = env.getVariables();", "+        final String[] environment = env.getVariables();", "-        TestResultHolder result = new TestResultHolder();", "+        final TestResultHolder result = new TestResultHolder();", "-        } catch (IOException e) {", "+        } catch (final IOException e) {", "-            } catch (Exception e) {", "+            } catch (final Exception e) {", "-            boolean crash = (watchdog != null && watchdog.killedProcess())", "+            final boolean crash = (watchdog != null && watchdog.killedProcess())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1529fc0efaf3b77eff53d0acaee522a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 152, "methodNumberAfterChange": 152, "signatureBeforeChange": "     private void parsePackages(Vector<String> pn, Path sp)", "signatureAfterChange": "     private void parsePackages(final Vector<String> pn, final Path sp)", "diff": ["-    private void parsePackages(Vector<String> pn, Path sp) {", "-        HashSet<String> addedPackages = new HashSet<String>();", "+    private void parsePackages(final Vector<String> pn, final Path sp) {", "+        final HashSet<String> addedPackages = new HashSet<String>();", "+\t\tfinal", "-            PatternSet ps = new PatternSet();", "+            final PatternSet ps = new PatternSet();", "-                Enumeration<PackageName> e = packageNames.elements();", "+                final Enumeration<PackageName> e = packageNames.elements();", "-                    PackageName p = e.nextElement();", "+                    final PackageName p = e.nextElement();", "-            Enumeration<PackageName> e = excludePackageNames.elements();", "+            final Enumeration<PackageName> e = excludePackageNames.elements();", "-                PackageName p = e.nextElement();", "+                final PackageName p = e.nextElement();", "-            String[] pathElements = sourcePath.list();", "+            final String[] pathElements = sourcePath.list();", "-                File dir = new File(pathElements[i]);", "+                final File dir = new File(pathElements[i]);", "-                    DirSet ds = new DirSet();", "+                    final DirSet ds = new DirSet();", "-        Enumeration<DirSet> e = dirSets.elements();", "+        final Enumeration<DirSet> e = dirSets.elements();", "-            DirSet ds = e.nextElement();", "-            File baseDir = ds.getDir(getProject());", "+            final DirSet ds = e.nextElement();", "+            final File baseDir = ds.getDir(getProject());", "-            DirectoryScanner dsc = ds.getDirectoryScanner(getProject());", "-            String[] dirs = dsc.getIncludedDirectories();", "+            final DirectoryScanner dsc = ds.getDirectoryScanner(getProject());", "+            final String[] dirs = dsc.getIncludedDirectories();", "-                File pd = new File(baseDir, dirs[i]);", "-                String[] files = pd.list(new FilenameFilter () {", "-                        @Override", "-\t\t\t\t\t\tpublic boolean accept(File dir1, String name) {", "+                final File pd = new File(baseDir, dirs[i]);", "+                final String[] files = pd.list(new FilenameFilter () {", "+\t\t\t\t\t\tpublic boolean accept(final File dir1, final String name) {", "-                        String packageName =", "+                        final String packageName ="]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e32c9318fe24d32b48cfaf0e11d98b34", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipFile.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private void         readCentralDirectoryEntry(Map<ZipEntry, NameAndComment> noUTF8Flag)         throws IOException", "signatureAfterChange": "     private void         readCentralDirectoryEntry(final Map<ZipEntry, NameAndComment> noUTF8Flag)         throws IOException", "diff": ["-        readCentralDirectoryEntry(Map<ZipEntry, NameAndComment> noUTF8Flag)", "+        readCentralDirectoryEntry(final Map<ZipEntry, NameAndComment> noUTF8Flag)", "-        OffsetEntry offset = new OffsetEntry();", "-        Entry ze = new Entry(offset);", "+        final OffsetEntry offset = new OffsetEntry();", "+        final Entry ze = new Entry(offset);", "-        int versionMadeBy = ZipShort.getValue(CFH_BUF, off);", "+        final int versionMadeBy = ZipShort.getValue(CFH_BUF, off);", "-        long time = ZipUtil.dosToJavaTime(ZipLong.getValue(CFH_BUF, off));", "+        final long time = ZipUtil.dosToJavaTime(ZipLong.getValue(CFH_BUF, off));", "-        int fileNameLen = ZipShort.getValue(CFH_BUF, off);", "+        final int fileNameLen = ZipShort.getValue(CFH_BUF, off);", "-        int extraLen = ZipShort.getValue(CFH_BUF, off);", "+        final int extraLen = ZipShort.getValue(CFH_BUF, off);", "-        int commentLen = ZipShort.getValue(CFH_BUF, off);", "+        final int commentLen = ZipShort.getValue(CFH_BUF, off);", "-        int diskStart = ZipShort.getValue(CFH_BUF, off);", "+        final int diskStart = ZipShort.getValue(CFH_BUF, off);", "-        byte[] fileName = new byte[fileNameLen];", "+        final byte[] fileName = new byte[fileNameLen];", "-        byte[] cdExtraData = new byte[extraLen];", "+        final byte[] cdExtraData = new byte[extraLen];", "-        byte[] comment = new byte[commentLen];", "+        final byte[] comment = new byte[commentLen];"]}]}
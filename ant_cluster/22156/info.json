{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f5cfcc0e5e52dfc96361058c6c19fba9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c2dade5a8094443252dc30e6e4e214c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/unix/SymlinkTest.java", "commitBeforeChange": "5f81fd801113c7f3bb4b734d0be4337ef482c0fd", "commitAfterChange": "db105dffc51d91759c8e656226bc6c4a5855d0ef", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void testSymbolicLinkUtilsMethods() throws Exception", "signatureAfterChange": "      public void testSymbolicLinkUtilsMethods() throws Exception", "diff": ["+            //apparently OS X knows a symlink is a symlink even if the target is missing:", "+            boolean mac = Os.isFamily(Os.FAMILY_MAC);", "+", "-            assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isSymbolicLink(f.getParentFile(),", "-                                          f.getName()));", "+            assertTrue(su.isSymbolicLink(f.getAbsolutePath()) == mac);", "+            assertTrue(su.isSymbolicLink(f.getParentFile(), f.getName()) == mac);", "-            assertFalse(su.isSymbolicLink(f.getAbsolutePath()));", "-            assertFalse(su.isSymbolicLink(f.getParentFile(),", "-                                          f.getName()));", "+            assertTrue(su.isSymbolicLink(f.getAbsolutePath()) == mac);", "+            assertTrue(su.isSymbolicLink(f.getParentFile(), f.getName()) == mac);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98a8e6297682199c59e3ebd3a2e2a060", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/unix/SymlinkTest.java", "commitBeforeChange": "a40f5fbc661d21426b9e147021c9bff6af807813", "commitAfterChange": "7fe0839f2206a6214201acee122871c89eeb2af4", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void testSymbolicLinkUtilsMethods() throws Exception", "signatureAfterChange": "      public void testSymbolicLinkUtilsMethods() throws Exception", "diff": ["-            //apparently OS X knows a symlink is a symlink even if the target is missing:", "-            boolean mac = Os.isFamily(Os.FAMILY_MAC);", "-", "+            // it is not possible to find out that symbolic links pointing", "+            // to inexistent files or directories are symbolic links", "+            // it used to be possible to detect this on Mac", "+            // this is not true under Snow Leopard and JDK 1.5", "+            // Removing special handling of MacOS until someone shouts", "+            // Antoine", "-            assertTrue(su.isSymbolicLink(f.getAbsolutePath()) == mac);", "-            assertTrue(su.isSymbolicLink(f.getParentFile(), f.getName()) == mac);", "+            assertTrue(su.isSymbolicLink(f.getAbsolutePath()) == false);", "+            assertTrue(su.isSymbolicLink(f.getParentFile(), f.getName()) == false);", "-            assertTrue(su.isSymbolicLink(f.getAbsolutePath()) == mac);", "-            assertTrue(su.isSymbolicLink(f.getParentFile(), f.getName()) == mac);", "+            assertTrue(su.isSymbolicLink(f.getAbsolutePath()) == false);", "+            assertTrue(su.isSymbolicLink(f.getParentFile(), f.getName()) == false);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "313c35e721bab073cf18c312333f0c29", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bf0de766328fbcd4c6e75a30ab2ff7b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/filterreaders/src/main/org/apache/tools/ant/util/ChainReaderHelper.java", "commitBeforeChange": "c5a6bd97758856408365e17d4625d486c9769486", "commitAfterChange": "7899d6c4a6c335eeffa486f6b09fa3725b0e3a7b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public final String processStream()         throws BuildException, IOException", "signatureAfterChange": "     public final String processStream()         throws BuildException, IOException", "diff": ["-                final AntFilterReader afr =", "-                    (AntFilterReader) filterReaders.elementAt(j);", "-                finalFilters.addElement(afr);", "+                finalFilters.addElement(filterReaders.elementAt(j));", "-                final AntFilterReader filter =", "-                    (AntFilterReader) finalFilters.elementAt(i);", "-                final String className = filter.getClassName();", "-                final Path classpath = filter.getClasspath();", "-                final Project project = filter.getProject();", "-                if (className != null) {", "-                    try {", "-                        Class clazz = null;", "-                        if (classpath == null) {", "-                            clazz = Class.forName(className);", "-                        } else {", "-                            AntClassLoader al = new AntClassLoader(project,", "-                                                                   classpath);", "-                            clazz = al.loadClass(className);", "-                            AntClassLoader.initializeClass(clazz);", "-                        }", "-                        if (clazz != null) {", "-                            if (!FilterReader.class.isAssignableFrom(clazz)) {", "-                                throw new BuildException(className +", "-                                    \" does not extend java.io.FilterReader\");", "+                Object o = finalFilters.elementAt(i);", "+", "+                if (o instanceof AntFilterReader) {", "+                    final AntFilterReader filter = (AntFilterReader) finalFilters.elementAt(i);", "+                    final String className = filter.getClassName();", "+                    final Path classpath = filter.getClasspath();", "+                    final Project project = filter.getProject();", "+                    if (className != null) {", "+                        try {", "+                            Class clazz = null;", "+                            if (classpath == null) {", "+                                clazz = Class.forName(className);", "+                            } else {", "+                                AntClassLoader al = new AntClassLoader(project,", "+                                                                       classpath);", "+                                clazz = al.loadClass(className);", "+                                AntClassLoader.initializeClass(clazz);", "-                            final Constructor[] constructors =", "-                                clazz.getConstructors();", "-                            final Reader[] rdr = {instream};", "-                            instream =", "-                                (Reader) constructors[0].newInstance(rdr);", "-                            if (Parameterizable.class.isAssignableFrom(clazz)) {", "-                                final Parameter[] params = filter.getParams();", "-                                ((Parameterizable)", "-                                    instream).setParameters(params);", "+                            if (clazz != null) {", "+                                if (!FilterReader.class.isAssignableFrom(clazz)) {", "+                                    throw new BuildException(className +", "+                                        \" does not extend java.io.FilterReader\");", "+                                }", "+                                final Constructor[] constructors =", "+                                    clazz.getConstructors();", "+                                int j = 0;", "+                                for (; j < constructors.length; j++) {", "+                                    Class[] types = constructors[j]", "+                                                      .getParameterTypes();", "+                                    if (types.length == 1 &&", "+                                        types[0].isAssignableFrom(Reader.class)) {", "+                                        break;", "+                                    }", "+                                }", "+                                final Reader[] rdr = {instream};", "+                                instream =", "+                                    (Reader) constructors[j].newInstance(rdr);", "+                                if (Parameterizable.class.isAssignableFrom(clazz)) {", "+                                    final Parameter[] params = filter.getParams();", "+                                    ((Parameterizable)", "+                                        instream).setParameters(params);", "+                                }", "+                        } catch (final ClassNotFoundException cnfe) {", "+                            throw new BuildException(cnfe);", "+                        } catch (final InstantiationException ie) {", "+                            throw new BuildException(ie);", "+                        } catch (final IllegalAccessException iae) {", "+                            throw new BuildException(iae);", "+                        } catch (final InvocationTargetException ite) {", "+                            throw new BuildException(ite);", "-                    } catch (final ClassNotFoundException cnfe) {", "-                        throw new BuildException(cnfe);", "-                    } catch (final InstantiationException ie) {", "-                        throw new BuildException(ie);", "-                    } catch (final IllegalAccessException iae) {", "-                        throw new BuildException(iae);", "-                    } catch (final InvocationTargetException ite) {", "-                        throw new BuildException(ite);", "+                } else if (o instanceof CloneableReader &&", "+                           o instanceof Reader) {", "+                    instream = ((CloneableReader) o).clone(instream);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68a04a0c30ee53d0db0794de4eb11355", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/cvslib/ChangeLogTask.java", "commitBeforeChange": "49ac8075b87fecb96138ec2fd569af101aa80743", "commitAfterChange": "7eb6ca9aa8b38b24196a2b43bb11429e8e651048", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        validate();", "+        File savedDir = m_dir; // may be altered in validate", "+        try {", "-        final Properties userList = new Properties();", "+            validate();", "-        loadUserlist( userList );", "+            final Properties userList = new Properties();", "+            ", "+            loadUserlist( userList );", "+            ", "+            for( Enumeration e = m_cvsUsers.elements(); ", "+                 e.hasMoreElements(); ) {", "+                final CvsUser user = (CvsUser)e.nextElement();", "+                user.validate();", "+                userList.put( user.getUserID(), user.getDisplayname() );", "+            }", "+            ", "+            final Commandline command = new Commandline();", "+            command.setExecutable( \"cvs\" );", "+            command.createArgument().setValue( \"log\" );", "-        for( Enumeration e = m_cvsUsers.elements(); e.hasMoreElements(); )", "-        {", "-            final CvsUser user = (CvsUser)e.nextElement();", "-            user.validate();", "-            userList.put( user.getUserID(), user.getDisplayname() );", "-        }", "-", "-        final Commandline command = new Commandline();", "-        command.setExecutable( \"cvs\" );", "-        command.createArgument().setValue( \"log\" );", "-", "-        if( null != m_start )", "-        {", "-            final SimpleDateFormat outputDate =", "-                new SimpleDateFormat( \"yyyy-MM-dd\" );", "-", "-            // We want something of the form: -d \">=YYYY-MM-dd\"", "-            final String dateRange = \"-d >=\" + outputDate.format( m_start );", "-            command.createArgument().setValue( dateRange );", "-        }", "+            if( null != m_start ) {", "+                final SimpleDateFormat outputDate =", "+                    new SimpleDateFormat( \"yyyy-MM-dd\" );", "+                ", "+                // We want something of the form: -d \">=YYYY-MM-dd\"", "+                final String dateRange = \"-d >=\" ", "+                    + outputDate.format( m_start );", "+                command.createArgument().setValue( dateRange );", "+            }", "-        // Check if list of files to check has been specified", "-        if( !m_filesets.isEmpty() )", "-        {", "-            final Enumeration e = m_filesets.elements();", "-            while( e.hasMoreElements() )", "-            {", "-                final FileSet fileSet = (FileSet)e.nextElement();", "-                final DirectoryScanner scanner = fileSet.getDirectoryScanner( project );", "-                final String[] files = scanner.getIncludedFiles();", "-                for( int i = 0; i < files.length; i++ )", "-                {", "-                    command.createArgument().setValue( files[ i ] );", "+            // Check if list of files to check has been specified", "+            if( !m_filesets.isEmpty() ) {", "+                final Enumeration e = m_filesets.elements();", "+                while( e.hasMoreElements() ) {", "+                    final FileSet fileSet = (FileSet)e.nextElement();", "+                    final DirectoryScanner scanner = ", "+                        fileSet.getDirectoryScanner( project );", "+                    final String[] files = scanner.getIncludedFiles();", "+                    for( int i = 0; i < files.length; i++ ) {", "+                        command.createArgument().setValue( files[ i ] );", "+                    }", "-        }", "-        final ChangeLogParser parser = new ChangeLogParser( userList );", "-        final RedirectingStreamHandler handler =", "-            new RedirectingStreamHandler( parser );", "+            final ChangeLogParser parser = new ChangeLogParser( userList );", "+            final RedirectingStreamHandler handler =", "+                new RedirectingStreamHandler( parser );", "-        log( \"ChangeLog command: [\" + command.toString() + \"]\", Project.MSG_VERBOSE );", "+            log( \"ChangeLog command: [\" + command.toString() + \"]\", ", "+                 Project.MSG_VERBOSE );", "-        final Execute exe = new Execute( handler );", "-        exe.setWorkingDirectory( m_dir );", "-        exe.setCommandline( command.getCommandline() );", "-        exe.setAntRun( getProject() );", "-        try", "-        {", "-            final int resultCode = exe.execute();", "-            if( 0 != resultCode )", "-            {", "-                throw new BuildException( \"Error running cvs log\" );", "+            final Execute exe = new Execute( handler );", "+            exe.setWorkingDirectory( m_dir );", "+            exe.setCommandline( command.getCommandline() );", "+            exe.setAntRun( getProject() );", "+            try {", "+                final int resultCode = exe.execute();", "+                if( 0 != resultCode ) {", "+                    throw new BuildException( \"Error running cvs log\" );", "+                }", "+            } catch( final IOException ioe ) {", "+                throw new BuildException( ioe.toString() );", "-        }", "-        catch( final IOException ioe )", "-        {", "-            throw new BuildException( ioe.toString() );", "-        }", "-        final String errors = handler.getErrors();", "-        if( null != errors )", "-        {", "-            log( errors, Project.MSG_ERR );", "-        }", "+            final String errors = handler.getErrors();", "+            if( null != errors ) {", "+                log( errors, Project.MSG_ERR );", "+            }", "-        final CVSEntry[] entrySet = parser.getEntrySetAsArray();", "-        final CVSEntry[] filteredEntrySet = filterEntrySet( entrySet );", "-        writeChangeLog( filteredEntrySet );", "+            final CVSEntry[] entrySet = parser.getEntrySetAsArray();", "+            final CVSEntry[] filteredEntrySet = filterEntrySet( entrySet );", "+            writeChangeLog( filteredEntrySet );", "+", "+        } finally {", "+            m_dir = savedDir;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6a3a92ec2b765c8b13867ff56f82b48", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "149ce34431423cd116e5d7175ff281c30565aa6a", "commitAfterChange": "5460755b447223e93e926e11a08e4df4f0e0ddb5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     private IntrospectionHelper(final Class bean)", "signatureAfterChange": "     private IntrospectionHelper(final Class bean)", "diff": ["-        nestedStorers = new Hashtable();", "-                && (name.equals(\"add\") /*|| name.equals(\"addConfigured\")*/)) {", "+                && (name.equals(\"add\") || name.equals(\"addConfigured\"))) {", "-                nestedTypes.put(propName, returnType);", "-                nestedCreators.put(propName, new NestedCreator() {", "+                // Check if a create of this property is already present", "+                // add takes preference over create for CB purposes", "+                if (nestedCreators.get(propName) == null) {", "+                    nestedTypes.put(propName, returnType);", "+                    nestedCreators.put(propName, new NestedCreator() {", "-                        public Object create(Object parent)", "+                        public boolean isPolyMorphic() {", "+                            return false;", "+                        }", "+", "+                        public Class getElementClass() {", "+                            return null;", "+                        }", "+", "+                        public Object create(", "+                            Project project, Object parent, Object ignore)", "-", "+                        public void store(Object parent, Object child) {", "+                        }", "-                nestedStorers.remove(propName);", "-", "+                }", "-                    final Constructor c =", "-                        args[0].getConstructor(new Class[] {});", "+                    Constructor constructor = null;", "+                    try {", "+                        constructor =", "+                            args[0].getConstructor(new Class[] {});", "+                    } catch (NoSuchMethodException ex) {", "+                        constructor =", "+                            args[0].getConstructor(new Class[] {", "+                                Project.class});", "+                    }", "+                    final Constructor c = constructor;", "-                            public Object create(Object parent)", "-                                throws InvocationTargetException, IllegalAccessException, InstantiationException {", "-", "-                                Object o = c.newInstance(new Object[] {});", "-                                return o;", "+                            public boolean isPolyMorphic() {", "+                                return true;", "-                        });", "-                    nestedStorers.put(propName, new NestedStorer() {", "+                            public Class getElementClass() {", "+                                return c.getDeclaringClass();", "+                            }", "+", "+                            public Object create(", "+                                Project project, Object parent, Object child)", "+                                throws InvocationTargetException,", "+                                IllegalAccessException, InstantiationException {", "+                                if (child != null) {", "+                                    return child;", "+                                } else if (c.getParameterTypes().length == 0) {", "+                                    return c.newInstance(new Object[] {});", "+                                } else {", "+                                    return c.newInstance(new Object[] {", "+                                        project});", "+                                }", "+                            }", "-                                throws InvocationTargetException, IllegalAccessException, InstantiationException {", "+                                throws InvocationTargetException,", "+                                IllegalAccessException, InstantiationException {", "-                    final Constructor c =", "-                        args[0].getConstructor(new Class[] {});", "+                    Constructor constructor = null;", "+                    try {", "+                        constructor =", "+                            args[0].getConstructor(new Class[] {});", "+                    } catch (NoSuchMethodException ex) {", "+                        constructor =", "+                            args[0].getConstructor(new Class[] {", "+                                Project.class});", "+                    }", "+                    final Constructor c = constructor;", "-                            public Object create(Object parent)", "-                                throws InvocationTargetException, IllegalAccessException, InstantiationException {", "+                            public boolean isPolyMorphic() {", "+                                return true;", "+                            }", "-                                Object o = c.newInstance(new Object[] {});", "-                                m.invoke(parent, new Object[] {o});", "-                                return o;", "+                            public Class getElementClass() {", "+                                return c.getDeclaringClass();", "+                            }", "+", "+                            public Object create(", "+                                Project project, Object parent, Object child)", "+                                throws InvocationTargetException,", "+                                       IllegalAccessException, InstantiationException {", "+                                if (child != null) {", "+                                    // ignore", "+                                } else if (c.getParameterTypes().length == 0) {", "+                                    child = c.newInstance(new Object[] {});", "+                                } else {", "+                                    child = c.newInstance(new Object[] {", "+                                        project});", "+                                }", "+                                m.invoke(parent, new Object[] {child});", "+                                return child;", "+                            }", "+                            public void store(Object parent, Object child)", "+                                throws InvocationTargetException,", "+                                       IllegalAccessException, InstantiationException {", "+", "-                    nestedStorers.remove(name);"]}]}
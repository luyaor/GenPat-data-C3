{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b91098ac992453f1faa1ba85210e8f80", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39b48093d6742aebec1d6c5e39675f17", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Java.java", "commitBeforeChange": "5c7b512ec7992a35f68f84f29144e7ca13a63a27", "commitAfterChange": "eca527f22bfff2af0e9b57e1c10e6f25424fe653", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": "     private void setupCommandLineForVMS(Execute exe, String[] command)", "signatureAfterChange": "     private void setupCommandLineForVMS(Execute exe, String[] command)", "diff": ["-        //Use the VM launcher instead of shell launcher on VMS", "-        exe.setVMLauncher(true);", "-        File vmsJavaOptionFile = null;", "-        try {", "-            String [] args = new String[command.length - 1];", "-            System.arraycopy(command, 1, args, 0, command.length - 1);", "-            vmsJavaOptionFile = JavaEnvUtils.createVmsJavaOptionFile(args);", "-            //we mark the file to be deleted on exit.", "-            //the alternative would be to cache the filename and delete", "-            //after execution finished, which is much better for long-lived runtimes", "-            //though spawning complicates things...", "-            vmsJavaOptionFile.deleteOnExit();", "-            String [] vmsCmd = {command[0], \"-V\", vmsJavaOptionFile.getPath()};", "-            exe.setCommandline(vmsCmd);", "-        } catch (IOException e) {", "-            throw new BuildException(\"Failed to create a temporary file for \\\"-V\\\" switch\");", "-        }", "+        ExecuteJava.setupCommandLineForVMS(exe, command);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec020fceadc76fceb19c24fb2c133344", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "7e7fa2f905e691ba00568bc670cc80060c224fd4", "commitAfterChange": "590936af269c77bda5fb410fd81e19958062efe6", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "     protected boolean isUpToDate(FileScanner[] scanners, File zipFile) throws BuildException", "signatureAfterChange": "     protected boolean isUpToDate(FileScanner[] scanners, File zipFile) throws BuildException", "diff": ["-                if (zipFile.exists()) return true;", "-                // In this case using java.util.zip will not work", "-                // because it does not permit a zero-entry archive.", "-                // Must create it manually.", "-                log(\"Note: creating empty \"+archiveType+\" archive \" + zipFile, Project.MSG_INFO);", "-                try {", "-                    OutputStream os = new FileOutputStream(zipFile);", "-                    try {", "-                        // Cf. PKZIP specification.", "-                        byte[] empty = new byte[22];", "-                        empty[0] = 80; // P", "-                        empty[1] = 75; // K", "-                        empty[2] = 5;", "-                        empty[3] = 6;", "-                        // remainder zeros", "-                        os.write(empty);", "-                    } finally {", "-                        os.close();", "-                    }", "-                } catch (IOException ioe) {", "-                    throw new BuildException(\"Could not create empty ZIP archive\", ioe, location);", "-                }", "-                return true;", "+                return createEmptyZip(zipFile);"]}]}
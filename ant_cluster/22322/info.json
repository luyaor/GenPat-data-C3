{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "56fc435d8f5c388f2ae85c81830d3c88", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14eccf5a1d632b8a14abbfb58d7958fd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/RenameExtensions.java", "commitBeforeChange": "c11c539ba35312f84c4c4660b4918e004a7b3337", "commitAfterChange": "0c19b8e359dc44686300770ced97d8446b311175", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        // scan source and dest dirs to build up rename list", "-        DirectoryScanner ds = getDirectoryScanner(srcDir);", "+        log(\"DEPRECATED - The renameext task is deprecated.  Use move instead.\",", "+            Project.MSG_WARN);", "+        log(\"Replace this with:\", Project.MSG_INFO);", "+        log(\"<move todir=\\\"\"+srcDir+\"\\\" overwrite=\\\"\"+replace+\"\\\">\", ", "+            Project.MSG_INFO);", "+        log(\"  <fileset dir=\\\"\"+srcDir+\"\\\" />\", Project.MSG_INFO);", "+        log(\"  <mapper type=\\\"glob\\\"\", Project.MSG_INFO);", "+        log(\"          from=\\\"*\"+fromExtension+\"\\\"\", Project.MSG_INFO);", "+        log(\"          to=\\\"*\"+toExtension+\"\\\" />\", Project.MSG_INFO);", "+        log(\"</move>\", Project.MSG_INFO);", "+        log(\"using the same patterns on <fileset> as you\\'ve used here\", ", "+            Project.MSG_INFO);", "-        String[] files = ds.getIncludedFiles();", "+        Move move = (Move)project.createTask(\"move\");", "+        move.setOwningTarget(target);", "+        move.setTaskName(getTaskName());", "+        move.setLocation(getLocation());", "+        move.setTodir(srcDir);", "+        move.setOverwrite(replace);", "-        Hashtable renameList = scanDir(srcDir, files);", "+        fileset.setDir(srcDir);", "+        move.addFileset(fileset);", "-        Enumeration e = renameList.keys();", "-        File fromFile = null;", "-        File toFile = null;", "-        while (e.hasMoreElements()) {", "-            fromFile = (File)e.nextElement();", "-            toFile = (File)renameList.get(fromFile);", "-            if (toFile.exists() && replace) toFile.delete();", "-            if (!fromFile.renameTo(toFile)) {", "-                throw new BuildException( \"Rename from: '\" + fromFile + \"' to '\" + ", "-                                          toFile + \"' failed.\" );", "-            }", "-        }", "+        Mapper me = move.createMapper();", "+        me.setType(globType);", "+        me.setFrom(\"*\"+fromExtension);", "+        me.setTo(\"*\"+toExtension);", "+        move.execute();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37af5111416601f2ce49ba1935086856", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/types/PathTest.java", "commitBeforeChange": "769fac83235a4c2fac00097cd26f201aa7eae534", "commitAfterChange": "a91adaf451abf4857fd8ce133757dfc3b433bf3f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void testConstructor()", "signatureAfterChange": "      public void testConstructorWindowsStyle()", "diff": ["-    public void testConstructor() {", "-        p = new Path(project, \"\\\\a;\\\\b\");", "-        l = p.list();", "+    public void testConstructorWindowsStyle() {", "+        Path p = new Path(project, \"\\\\a;\\\\b\");", "+        String[] l = p.list();", "-        }        ", "-", "-        p = new Path(project, \"\\\\a;\\\\b:/c\");", "-        l = p.list();", "-        assertEquals(\"three items, mixed style\", 3, l.length);", "-        if (isUnixStyle) {", "-            assertEquals(\"/a\", l[0]);", "-            assertEquals(\"/b\", l[1]);", "-            assertEquals(\"/c\", l[2]);", "-        } else if (isNetWare) {", "-            assertEquals(\"\\\\a\", l[0]);", "-            assertEquals(\"\\\\b\", l[1]);", "-            assertEquals(\"\\\\c\", l[2]);", "-        } else {", "-            assertEquals(\":\\\\a\", l[0].substring(1));", "-            assertEquals(\":\\\\b\", l[1].substring(1));", "-            assertEquals(\":\\\\c\", l[2].substring(1));", "+        p = new Path(project, \"c:\\\\test;d:\\\\programs\");", "+        l = p.list();", "+        if (isUnixStyle) {", "+            assertEquals(\"no drives on Unix\", 4, l.length);", "+            assertTrue(\"c resolved relative to project\\'s basedir\", ", "+                   l[0].endsWith(\"/c\"));", "+            assertEquals(\"/test\", l[1]);", "+            assertTrue(\"d resolved relative to project\\'s basedir\", ", "+                   l[2].endsWith(\"/d\"));", "+            assertEquals(\"/programs\", l[3]);", "+        } else if (isNetWare) {", "+            assertEquals(\"volumes on NetWare\", 2, l.length);", "+            assertEquals(\"c:\\\\test\", l[0].toLowerCase(Locale.US));", "+            assertEquals(\"d:\\\\programs\", l[1].toLowerCase(Locale.US));", "+        } else {", "+            assertEquals(\"drives on DOS\", 2, l.length);", "+            assertEquals(\"c:\\\\test\", l[0].toLowerCase(Locale.US));", "+            assertEquals(\"d:\\\\programs\", l[1].toLowerCase(Locale.US));", "+        }", "+", "+", "+        p = new Path(project, \"c:/test;d:/programs\");", "+        l = p.list();", "+        if (isUnixStyle) {", "+            assertEquals(\"no drives on Unix\", 4, l.length);", "+            assertTrue(\"c resolved relative to project\\'s basedir\", ", "+                   l[0].endsWith(\"/c\"));", "+            assertEquals(\"/test\", l[1]);", "+            assertTrue(\"d resolved relative to project\\'s basedir\", ", "+                   l[2].endsWith(\"/d\"));", "+            assertEquals(\"/programs\", l[3]);", "+        } else if (isNetWare) {", "+            assertEquals(\"volumes on NetWare\", 2, l.length);", "+            assertEquals(\"c:\\\\test\", l[0].toLowerCase(Locale.US));", "+            assertEquals(\"d:\\\\programs\", l[1].toLowerCase(Locale.US));", "+        } else {", "+            assertEquals(\"drives on DOS\", 2, l.length);", "+            assertEquals(\"c:\\\\test\", l[0].toLowerCase(Locale.US));", "+            assertEquals(\"d:\\\\programs\", l[1].toLowerCase(Locale.US));", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8d15abd25a670321dbf6cf3a42ad92f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Delete.java", "commitBeforeChange": "a1665b567b2b4c85c5f9ca356a678107147c0073", "commitAfterChange": "ec53cbb02a54af81b299b610acdbdda516f623b1", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 38, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        if (file == null && dir == null && filesets.size() == 0) {", "+        if (file == null && dir == null && filesets.size() == 0 && rcs.size() == 0) {", "-                                     + \"attributes, or a fileset element, \"", "+                                     + \"attributes, or a nested resource collection, \"", "-", "-", "-        // delete the files in the filesets", "+        Path p = new Path(getProject());", "+        p.addAll(rcs);", "-            FileSet fs = (FileSet) filesets.elementAt(i);", "-            try {", "-                DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "-                String[] files = ds.getIncludedFiles();", "-                String[] dirs = ds.getIncludedDirectories();", "-                removeFiles(fs.getDir(getProject()), files, dirs);", "-            } catch (BuildException be) {", "-                // directory doesn't exist or is not readable", "-                if (failonerror) {", "-                    throw be;", "-                } else {", "-                    log(be.getMessage(),", "-                        quiet ? Project.MSG_VERBOSE : Project.MSG_WARN);", "-                }", "-            }", "+            FileSet fs = (FileSet) filesets.get(i);", "+            p.add(includeEmpty ? new BCFileSet(fs) : fs);", "-", "-        // delete the files from the default fileset", "-            try {", "-                DirectoryScanner ds = super.getDirectoryScanner(dir);", "-                String[] files = ds.getIncludedFiles();", "-                String[] dirs = ds.getIncludedDirectories();", "-                removeFiles(dir, files, dirs);", "-            } catch (BuildException be) {", "-                // directory doesn't exist or is not readable", "-                if (failonerror) {", "-                    throw be;", "-                } else {", "-                    log(be.getMessage(),", "+            //add the files from the default fileset:", "+            FileSet implicit = getImplicitFileSet();", "+            p.add(includeEmpty ? new BCFileSet(implicit) : implicit);", "+        }", "+        // delete the files in the resource collections; sort to files, then dirs", "+        Sort s = new Sort();", "+        s.add(new Reverse(new FileSystem()));", "+        s.add(p);", "+        for (Iterator iter = s.iterator(); iter.hasNext();) {", "+            FileResource r = (FileResource) iter.next();", "+            if (!(r.isDirectory()) || r.getFile().list().length == 0) {", "+                log(\"Deleting \" + r, verbosity);", "+                if (!delete(r.getFile())) {", "+                    String message = \"Unable to delete \"", "+                        + (r.isDirectory() ? \"directory \" : \"file \") + r;", "+                    if (failonerror) {", "+                        throw new BuildException(message);", "+                    }", "+                    log(message,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e156dcaf366b107c2f81a9895df4f4d6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Definer.java", "commitBeforeChange": "8d496e5daaebec48cea6b123ca56351d9fd95245", "commitAfterChange": "2ecc6fa52abb223a67f8b81db23427f103c49b8b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        if (name==null || value==null ) {", "-            String msg = \"name or classname attributes of \"", "-                + getTaskName() + \" element \"", "-                + \"are undefined\";", "-            throw new BuildException(msg);", "-        }", "-        try {", "-            AntClassLoader al = null;", "-            if (classpath != null) {", "-                al = new AntClassLoader(project, classpath);", "-            } else {", "-                al = new AntClassLoader(project, Path.systemClasspath);", "-            }", "-            // need to load Task via system classloader or the new", "-            // task we want to define will never be a Task but always", "-            // be wrapped into a TaskAdapter.", "-            al.addSystemPackageRoot(\"org.apache.tools.ant\");", "+        AntClassLoader al=createLoader();", "+        if (file==null && resource==null ) {", "+", "+            // simple case - one definition", "+            if ( name==null || value==null  ) {", "+                String msg = \"name or classname attributes of \"", "+                    + getTaskName() + \" element \"", "+                    + \"are undefined\";", "+                throw new BuildException(msg);", "+            }", "+            addDefinition( al, name, value );", "+", "+        } else {", "+", "+            try {", "+                if (name != null || value != null) {", "+                    String msg = \"You must not specify name or value \"", "+                        + \"together with file or resource.\";", "+                    throw new BuildException(msg, location);", "+                }", "+            ", "+                if (file != null && resource != null) {", "+                    String msg = \"You must not specify both, file and resource.\";", "+                    throw new BuildException(msg, location);", "+                }", "+            ", "+", "+                Properties props=new Properties();", "+                InputStream is=null;", "+                if( file != null ) {", "+                    log(\"Loading definitions from file \" + file, ", "+                        Project.MSG_VERBOSE);", "+                    is=new FileInputStream( file );", "+                    if (is == null) {", "+                        log(\"Could not load definitions from file \" + file", "+                            + \". It doesn\\'t exist.\", Project.MSG_WARN);", "+                    }", "+                }    ", "+                if( resource!=null ) {", "+                    log(\"Loading definitions from resource \" + resource, ", "+                        Project.MSG_VERBOSE);", "+                    is=al.getResourceAsStream( resource );", "+                    if (is == null) {", "+                        log(\"Could not load definitions from resource \" ", "+                            + resource + \". It could not be found.\", ", "+                            Project.MSG_WARN);", "+                    }", "+                }", "+", "+                if( is!=null ) {", "+                    props.load( is );", "+                    Enumeration keys=props.keys();", "+                    while( keys.hasMoreElements() ) {", "+                        String n=(String)keys.nextElement();", "+                        String v=props.getProperty( n );", "+                        addDefinition( al, n, v );", "+                    }", "+                }", "+            } catch( IOException ex ) {", "+                throw new BuildException(ex, location);", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd821ed1a89b5d5a647573f5ec50685b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/Main.java", "commitBeforeChange": "685af27ceefe23e6cbaf8e8212805d3850765bdc", "commitAfterChange": "157d8f04d2c676ac93a8cda891f804bddf6f7836", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      protected void execute( final String[] args )         throws Exception", "signatureAfterChange": "      protected void execute( final String[] args )         throws Exception", "diff": ["-        String filename = null;", "-        String listenerName = null;", "-        String logLevel = null;", "-        String homeDir = null;", "-        String taskLibDir = null;", "-        boolean incremental = false;", "-        HashMap defines = new HashMap();", "+        final HashMap defines = new HashMap();", "+", "+        m_parameters.setParameter( \"filename\", \"build.ant\" );", "+        m_parameters.setParameter( \"log.level\", \"WARN\" );", "+        m_parameters.setParameter( \"listener\", \"org.apache.myrmidon.listeners.DefaultProjectListener\" );", "+        m_parameters.setParameter( \"incremental\", \"false\" );", "+", "+        //System property set up by launcher", "+        m_parameters.setParameter( \"myrmidon.home\", System.getProperty( \"myrmidon.home\" ) );", "-            case 0: targets.add( option.getArgument() ); break;", "-            case VERSION_OPT: System.out.println( VERSION ); return;", "-            case FILE_OPT: filename = option.getArgument(); break;", "-            case HOME_DIR_OPT: homeDir = option.getArgument(); break;", "-            case TASKLIB_DIR_OPT: taskLibDir = option.getArgument(); break;", "-            case VERBOSE_OPT: logLevel = \"INFO\"; break;", "-            case QUIET_OPT: logLevel = \"ERROR\"; break;", "-            case LOG_LEVEL_OPT: logLevel = option.getArgument(); break;", "-            case LISTENER_OPT: listenerName = option.getArgument(); break;", "-            case INCREMENTAL_OPT: incremental = true; break;", "+            case VERSION_OPT: System.out.println( Constants.BUILD_DESCRIPTION ); return;", "+", "+            case HOME_DIR_OPT: m_parameters.setParameter( \"myrmidon.home\", option.getArgument() ); break;", "+            case TASKLIB_DIR_OPT: ", "+                m_parameters.setParameter( \"myrmidon.lib.path\", option.getArgument() ); ", "+                break;", "+", "+            case LOG_LEVEL_OPT: m_parameters.setParameter( \"log.level\", option.getArgument() ); break;", "+            case VERBOSE_OPT: m_parameters.setParameter( \"log.level\", \"INFO\" ); break;", "+            case QUIET_OPT: m_parameters.setParameter( \"log.level\", \"ERROR\" ); break;", "+", "+            case INCREMENTAL_OPT: m_parameters.setParameter( \"incremental\", \"true\" ); break;", "+", "+            case FILE_OPT: m_parameters.setParameter( \"filename\", option.getArgument() ); break;", "+            case LISTENER_OPT: m_parameters.setParameter( \"listener\", option.getArgument() ); break;", "+", "+            case 0: targets.add( option.getArgument() ); break;", "-        if( null == logLevel ) logLevel = DEFAULT_LOGLEVEL;", "-        if( null == listenerName ) listenerName = DEFAULT_LISTENER;", "-        if( null == filename ) filename = DEFAULT_FILENAME;", "-", "+        final String logLevel = m_parameters.getParameter( \"log.level\", null );", "-        //if ant home not set then use system property ant.home", "-        //that was set up by launcher.", "-        if( null == homeDir ) homeDir = System.getProperty( \"ant.home\" );", "-", "-        final Parameters parameters = new Parameters();", "-        parameters.setParameter( \"ant.home\", homeDir );", "-", "-        if( null != taskLibDir ) parameters.setParameter( \"ant.path.task-lib\", taskLibDir );", "-", "-        m_homeDir = (new File( homeDir )).getAbsoluteFile();", "-        if( !m_homeDir.isDirectory() )", "+        final String home = m_parameters.getParameter( \"myrmidon.home\", null );", "+        final File homeDir = (new File( home )).getAbsoluteFile();", "+        if( !homeDir.isDirectory() )", "-            throw new TaskException( \"ant-home (\" + m_homeDir + \") is not a directory\" );", "+            throw new TaskException( \"myrmidon-home (\" + homeDir + \") is not a directory\" );", "-        final File libDir = new File( m_homeDir, \"lib\" );", "+        final File libDir = new File( homeDir, \"lib\" );", "+        final String filename = m_parameters.getParameter( \"filename\", null );", "+        final String listenerName = m_parameters.getParameter( \"listener\", null );", "+        final LogTarget target = new LogTargetToListenerAdapter( listener );", "+        getLogger().setLogTargets( new LogTarget[] { target } );", "+", "+", "+", "-        getLogger().info( \"Ant Home Directory: \" + m_homeDir );", "+        getLogger().info( \"Ant Home Directory: \" + homeDir );", "-        embeddor.parameterize( parameters );", "+        embeddor.parameterize( m_parameters );", "+        final boolean incremental = m_parameters.getParameterAsBoolean( \"incremental\", false );", "-            setupContext( context, defines );", "+            ", "+            //Add CLI defines", "+            addToContext( context, defines );", "+", "+            //Add system properties second so that they overide user-defined properties", "+            addToContext( context, System.getProperties() );", "-            //context.setProperty( Project.PROJECT, projectName );", "+            //context.setProperty( Project.PROJECT, project.getName() );"]}]}
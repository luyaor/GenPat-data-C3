{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2cbe24c0541d0f3b55e4fac6f1902759", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "641fd182e5a344ead7b5f1ce445c59f6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/antlib/src/main/org/apache/tools/ant/SymbolTable.java", "commitBeforeChange": "2bcc3b328adcc97c10be2efba1077ccf28b92caa", "commitAfterChange": "4ad59f0fc5eb69936f4322c1394993d33299959b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic RoleAdapter createAdapter()", "signatureAfterChange": " \tpublic RoleAdapter createAdapter(Project p)", "diff": ["-\tpublic RoleAdapter createAdapter() {", "-\t    if (adapterVerifier == null) return null;", "+\tpublic RoleAdapter createAdapter(Project p) {", "+\t    if (adapterFactory == null) return null;", "-\t\treturn (RoleAdapter) ", "-\t\t    adapterVerifier.getDeclaringClass().newInstance();", "+\t\treturn (RoleAdapter) adapterFactory.create(p);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93d358eeb2117cc7b0a05c03d584167c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/antlib/src/main/org/apache/tools/ant/SymbolTable.java", "commitBeforeChange": "1d2784e6d5429505b3b420e342992c22cd5373a6", "commitAfterChange": "6252354506953777f5b921b8746a54e7d317475a", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic RoleAdapter createAdapter()", "signatureAfterChange": "         public RoleAdapter createAdapter(Project p)", "diff": ["-\t */", "-\tpublic RoleAdapter createAdapter() {", "-\t    if (adapterVerifier == null) return null;", "-\t    ", "-\t    try {", "-\t\treturn (RoleAdapter) ", "-\t\t    adapterVerifier.getDeclaringClass().newInstance();", "-\t    }", "-\t    catch(BuildException be) {", "-\t\tthrow be;", "-\t    }", "-\t    catch(Exception e) {", "-\t\tthrow new BuildException(e);", "-\t    }", "-\t}", "+         */", "+        public RoleAdapter createAdapter(Project p) {", "+            if (adapterFactory == null) return null;", "+", "+            try {", "+                return (RoleAdapter) adapterFactory.create(p);", "+            }", "+            catch(BuildException be) {", "+                throw be;", "+            }", "+            catch(Exception e) {", "+                throw new BuildException(e);", "+            }", "+        }"]}]}
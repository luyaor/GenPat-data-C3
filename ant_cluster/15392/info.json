{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "44b7ed15fa7ac1adc41b2f11077b08b8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90f7ff8bc148a86e566e531276e93f32", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/embed/src/java/org/apache/tools/ant/helper/TaskAdapter2.java", "commitBeforeChange": "0124baebe268d181280e0777008d644f32dbdf6c", "commitAfterChange": "0c9788b8a7fc7ac0827a4a8dfff988deb8ccfc20", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public static void checkTaskClass(final Class taskClass, final Project project)", "signatureAfterChange": "      public void setDynamicAttribute(String name, String value)             throws BuildException", "diff": ["-     */", "-    public static void checkTaskClass(final Class taskClass, final Project project) {", "-        // Any task can be used via adapter. If it doesn't have any execute()", "-        // method, no problem - it will do nothing, but still get an 'id'", "-        // and be registered in the project reference table and useable by other", "-        // tasks.", "-        ", "-        if( true )", "-            return;", "-", "-        // don't have to check for interface, since then", "-        // taskClass would be abstract too.", "-        try {", "-            final Method executeM = taskClass.getMethod( \"execute\", null );", "-            // don't have to check for public, since", "-            // getMethod finds public method only.", "-            // don't have to check for abstract, since then", "-            // taskClass would be abstract too.", "-            if(!Void.TYPE.equals(executeM.getReturnType())) {", "-                final String message =", "-                    \"return type of execute() should be void but was \\\"\"+", "-                    executeM.getReturnType()+\"\\\" in \" + taskClass;", "-                project.log(message, Project.MSG_WARN);", "-            }", "-        } catch(NoSuchMethodException e) {", "-            final String message = \"No public execute() in \" + taskClass;", "-            project.log(message, Project.MSG_ERR);", "-            throw new BuildException(message);", "-        }", "-    }", "+", "+    public void setDynamicAttribute(String name, String value)", "+            throws BuildException", "+    {", "+        setAttribute( name, value );", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcdb5dd2c9b1ea097c5dc8fd2bf2b9fb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/types/Path.java", "commitBeforeChange": "6a20789293e6588a94560a11697fb59dd0d9338c", "commitAfterChange": "d319ab594b9d0b5a3a2ee264845172ca590496f3", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public String toString()", "signatureAfterChange": "     public void setPath( final String path )", "diff": ["+    public void setPath( final String path )", "+        addPath( path );", "+    }", "-     */", "-    public String toString()", "-    {", "-        try", "-        {", "-            final String[] list = list();", "-", "-            // empty path return empty string", "-            if( list.length == 0 )", "-            {", "-                return \"\";", "-            }", "-", "-            // path containing one or more elements", "-            final StringBuffer result = new StringBuffer( list[ 0 ].toString() );", "-            for( int i = 1; i < list.length; i++ )", "-            {", "-                result.append( File.pathSeparatorChar );", "-                result.append( list[ i ] );", "-            }", "-", "-            return result.toString();", "-        }", "-        catch( final TaskException te )", "-        {", "-            throw new Error( te.toString() );", "-        }"]}]}
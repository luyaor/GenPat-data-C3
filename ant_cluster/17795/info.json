{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9a99ca396b6a39ff53f7ad6bab4a5eca", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60fbfd58df1fd1cd83249816be0aa528", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DefaultLogger.java", "commitBeforeChange": "270394a09fddda0ea9ffa2330956c5f399ab840f", "commitAfterChange": "6bd8d6e938a45868902ecd1092858e8372933c7c", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void messageLogged(BuildEvent event)", "signatureAfterChange": "     public void messageLogged(BuildEvent event)", "diff": ["-                StringTokenizer tok = new StringTokenizer(event.getMessage(),", "-                                                          \"\\r\\n\", false);", "-                boolean first = true;", "-                while (tok.hasMoreTokens()) {", "-                    if (!first) {", "-                        message.append(StringUtils.LINE_SEP);", "+                try {", "+                    BufferedReader r = ", "+                        new BufferedReader(", "+                            new StringReader(event.getMessage()));", "+                    String line = r.readLine();", "+                    boolean first = true;", "+                    while (line != null) {", "+                        if (!first) {", "+                            message.append(StringUtils.LINE_SEP);", "+                        }", "+                        first = false;", "+                        message.append(label).append(line);", "+                        line = r.readLine();", "-                    first = false;", "-                    message.append(label);", "-                    message.append(tok.nextToken());", "+                } catch (IOException e) {", "+                    // shouldn't be possible", "+                    message.append(label).append(event.getMessage());", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf7ac7a104a51b3d29d18c393c81603c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/AbstractJarSignerTask.java", "commitBeforeChange": "b47a31a21065882b7b6279ed634fc340448feeef", "commitAfterChange": "25e6c497c3d1b68f412ad7fc47fad735edee37d7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "     protected void setCommonOptions(final ExecTask cmd)", "signatureAfterChange": "     protected void setCommonOptions(final ExecTask cmd)", "diff": ["-            cmd.createArg().setValue(\"-J-Xmx\" + maxMemory);", "+            addValue(cmd,\"-J-Xmx\" + maxMemory);", "-            cmd.createArg().setValue(\"-verbose\");", "+            addValue(cmd,\"-verbose\");", "+        }", "+        ", "+        //now patch in all system properties", "+        Vector props=sysProperties.getVariablesVector();", "+        Enumeration e=props.elements();", "+        while (e.hasMoreElements()) {", "+            Environment.Variable variable = (Environment.Variable) e.nextElement();", "+            declareSysProperty(cmd,variable);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9721a550c0169e32a45bf9e29332c3e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/Frame.java", "commitBeforeChange": "c0ddb311373dc9fe32a78a15a68c4587bbb7566d", "commitAfterChange": "69d9b9a49622889f44d6792faf00f886857828d6", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 36, "signatureBeforeChange": "     protected void executeTasks(Iterator taskIterator)          throws ExecutionException", "signatureAfterChange": "     protected void executeTasks(Iterator taskIterator)          throws ExecutionException", "diff": ["+        ", "+            List aspects = componentManager.getAspects();", "-", "-                if (component instanceof Task) {", "-                    execService.executeTask((Task) component);", "-                } else {", "-                    String typeId", "-                         = model.getAspectValue(Constants.ANT_ASPECT, \"id\");", "-", "-                    if (typeId != null) {", "-                        setDataValue(typeId, component, true);", "+                for (Iterator i = aspects.iterator(); i.hasNext();) {", "+                    Aspect aspect = (Aspect) i.next();", "+                    Object replacement ", "+                        = aspect.postCreateComponent(component, model);", "+                    if (replacement != null) {", "+                        component = replacement;", "+", "+                if (component instanceof Task) {", "+                    executeTask((Task) component);", "+                } "]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d8e9c5f18e72b532343d802a4d4658d5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6306afd6535582f9c829cc2b10ee94a3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Property.java", "commitBeforeChange": "f8a23baad2241604df68395c356ccca4c6fb8e28", "commitAfterChange": "089d421c3f3b9d5ebaaa4642da9d70958dae1007", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      private void resolveAllProperties(Hashtable props)", "signatureAfterChange": "      private void resolveAllProperties(Hashtable props)", "diff": ["-        Hashtable toResolve = new Hashtable();", "-        Enumeration e = props.keys();", "-        boolean more = true;", "-        ", "-        while (more) {", "-            while (e.hasMoreElements()) {", "-                Vector propsInValue = new Vector();", "-                String name = (String) e.nextElement();", "-                String value = (String) props.get(name);", "+        Hashtable unresolvableProperties = new Hashtable();", "+        for (Enumeration e = props.keys(); e.hasMoreElements(); ) {", "+            String name = (String) e.nextElement();", "+            String value = (String) props.get(name);", "+            boolean resolved = false;", "+            while (!resolved) { ", "+                Vector propsInValue = new Vector();", "+    ", "+                // assume it will be resolved", "+                resolved = true;", "+                boolean unresolvable = false;", "+                        if (elem.equals(name) || unresolvableProperties.containsKey(elem)) {", "+                            // we won't try further resolving elements with circular ", "+                            // property dependencies or dependencies on unresolvable elements", "+                            unresolvable = true;", "+                            break;", "+                        }", "+                        ", "-                            toResolve.put(name, value);", "-                            break;", "+                            resolved = false;", "-", "-                if (toResolve.size() > 0) {", "-                    Enumeration tre = toResolve.keys();", "-                    while (tre.hasMoreElements()) {", "-                        String name2 = (String) tre.nextElement();", "-                        String value2 = (String) toResolve.get(name2);", "-                        String v = ProjectHelper.replaceProperties(value2,", "-                                                                   project.getProperties());", "-                        v = ProjectHelper.replaceProperties(v, props);", "-                        props.put(name, v);", "-                    }", "-", "-                    toResolve.clear();", "-                    e = props.keys();", "-                } else {", "-                    more = false;", "+    ", "+                if (unresolvable) {", "+                    unresolvableProperties.put(name, value);", "+                    resolved = true;", "+    ", "+                if (!resolved) {", "+                    value = ProjectHelper.replaceProperties(value,", "+                                                               project.getProperties());", "+                    value = ProjectHelper.replaceProperties(value, props);", "+                    props.put(name, value);", "+                }    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69a2bb3339d62a91270f2b3d80c88ef9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/pvcs/Pvcs.java", "commitBeforeChange": "a2c15cb080a27a1535b6770628ac0a19655d1885", "commitAfterChange": "0f1c5dd88eba7cb386d894c0bf8aa34c883b4051", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 18, "signatureBeforeChange": "      protected int runCmd( Commandline cmd, OutputStream output, OutputStream error )         throws TaskException", "signatureAfterChange": "      private void validate()         throws TaskException", "diff": ["-    protected int runCmd( Commandline cmd, OutputStream output, OutputStream error )", "-        try", "-            final Execute exe = new Execute();", "-            exe.setOutput( output );", "-            exe.setError( error );", "-            exe.setWorkingDirectory( getBaseDirectory() );", "-            exe.setCommandline( cmd.getCommandline() );", "-            return exe.execute();", "-        catch( java.io.IOException e )", "-            String msg = \"Failed executing: \" + cmd.toString() + \". Exception: \" + e.getMessage();", "-            throw new TaskException( msg );", "+", "+    private void validate()", "+        throws TaskException", "+    {", "+        if( m_repository == null || m_repository.trim().equals( \"\" ) )", "+        {", "+            throw new TaskException( \"Required argument repository not specified\" );", "+        }", "+", "+        // default pvcs project is \"/\"", "+        if( m_pvcsProject == null && m_pvcsProjects.isEmpty() )", "+        {", "+            m_pvcsProject = \"/\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9635dea6c9cc55405966235486705402", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/pvcs/Pvcs.java", "commitBeforeChange": "a2c15cb080a27a1535b6770628ac0a19655d1885", "commitAfterChange": "0f1c5dd88eba7cb386d894c0bf8aa34c883b4051", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 18, "signatureBeforeChange": "      protected int runCmd( Commandline cmd, OutputStream output, OutputStream error )         throws TaskException", "signatureAfterChange": "      private void validate()         throws TaskException", "diff": ["-    protected int runCmd( Commandline cmd, OutputStream output, OutputStream error )", "-        try", "-            final Execute exe = new Execute();", "-            exe.setOutput( output );", "-            exe.setError( error );", "-            exe.setWorkingDirectory( getBaseDirectory() );", "-            exe.setCommandline( cmd.getCommandline() );", "-            return exe.execute();", "-        catch( java.io.IOException e )", "-            String msg = \"Failed executing: \" + cmd.toString() + \". Exception: \" + e.getMessage();", "-            throw new TaskException( msg );", "+", "+    private void validate()", "+        throws TaskException", "+    {", "+        if( m_repository == null || m_repository.trim().equals( \"\" ) )", "+        {", "+            throw new TaskException( \"Required argument repository not specified\" );", "+        }", "+", "+        // default pvcs project is \"/\"", "+        if( m_pvcsProject == null && m_pvcsProjects.isEmpty() )", "+        {", "+            m_pvcsProject = \"/\";"]}]}
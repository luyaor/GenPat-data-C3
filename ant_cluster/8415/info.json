{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0699075425221dd20bb2a2bdaf769343", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23e436e95a0ddd74f98379edf099a435", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteJava.java", "commitBeforeChange": "69b83f32135e786ce5ebaf4d275e2fd7cde8d154", "commitAfterChange": "d463563bef58bd94efa53ad1a9aa7aa81f89ae7e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void execute(Project project) throws BuildException", "signatureAfterChange": "      public void execute(Project project) throws BuildException", "diff": ["+", "-        final Object[] argument = { javaCommand.getArguments() };", "-            final Method main = target.getMethod(\"main\", param);", "-            main.invoke(null, argument);", "+            main = target.getMethod(\"main\", param);", "+", "+            if (timeout == null) {", "+                run();", "+            } else {", "+                thread = new Thread(this, \"ExecuteJava\");", "+                Watchdog w = new Watchdog(timeout.longValue());", "+                w.addTimeoutObserver(this);", "+                synchronized (this) {", "+                    thread.start();", "+                    w.start();", "+                    try {", "+                        wait();", "+                    } catch (InterruptedException e) {}", "+                    if (timedOut) {", "+                        project.log(\"Timeout: killed the sub-process\",", "+                                    Project.MSG_WARN); ", "+                    } else {", "+                        thread = null;", "+                        w.stop();", "+                    }", "+                }", "+            }", "+", "+            if (caught != null) {", "+                throw caught;", "+            }", "+", "-        } catch (InvocationTargetException e) {", "-            Throwable t = e.getTargetException();", "-            if (!(t instanceof SecurityException)) {", "-                throw new BuildException(t);", "-            }", "-            else {", "-                throw (SecurityException)t;", "-            }", "-        } catch (Exception e) {", "+        } catch (SecurityException e) {", "+            throw e;", "+        } catch (Throwable e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ada68dc622de6defe4f01d0596f4f0e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/ReplaceTokens.java", "commitBeforeChange": "626c8a16d3d9fab9b858a2f191c4b3df51a19f7e", "commitAfterChange": "d67398ecca6c48d849fb8ce9cd1e2d1dd2b16d6c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public final int read() throws IOException", "signatureAfterChange": "     public final int read() throws IOException", "diff": ["-        if (queuedData != null && queuedData.length() > 0) {", "-            final int ch = queuedData.charAt(0);", "-            if (queuedData.length() > 1) {", "-                queuedData = queuedData.substring(1);", "-            } else {", "-                queuedData = null;", "+        if (replaceIndex != -1) {", "+            final int ch = replaceData.charAt(replaceIndex++);", "+            if (replaceIndex >= replaceData.length()) {", "+                replaceIndex = -1;", "+        ", "+        int ch = getNextChar();", "-        int ch = in.read();", "-                ch = in.read();", "+                ch = getNextChar();", "-                queuedData = beginToken + key.toString();", "-                return read();", "+                if (queuedData == null || queueIndex == -1) {", "+                    queuedData = key.toString();", "+                } else {", "+                    queuedData ", "+                        = key.toString() + queuedData.substring(queueIndex);", "+                }", "+                queueIndex = 0;", "+                return beginToken;", "+                ", "-                    queuedData = replaceWith;", "+                    replaceData = replaceWith;", "+                    replaceIndex = 0;", "-                    queuedData = beginToken + key.toString() + endToken;", "-                    return read();", "+                    String newData = key.toString() + endToken;", "+                    if (queuedData == null || queueIndex == -1) {", "+                        queuedData = newData;", "+                    } else {", "+                        queuedData = newData + queuedData.substring(queueIndex);", "+                    }", "+                    queueIndex = 0;", "+                    return beginToken;"]}]}
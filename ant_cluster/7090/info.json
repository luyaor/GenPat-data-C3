{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b8f9663c31eb4cf3a946272a31204116", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "543e47efce57a66add9ed171ba92dcc5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "86029316faa68d77a37eab0a07714c5bd2dd46e1", "commitAfterChange": "f923ab50f9caea6910391d866039acd889f99077", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        cmd.setExecutable(\"javadoc\");", "+        Commandline toExecute = (Commandline)cmd.clone();", "+        toExecute.setExecutable(\"javadoc\");", "-            cmd.createArgument().setValue(\"-classpath\");", "-            cmd.createArgument().setPath(classpath);", "-            cmd.createArgument().setValue(\"-sourcepath\");", "-            cmd.createArgument().setPath(sourcePath);", "+            toExecute.createArgument().setValue(\"-classpath\");", "+            toExecute.createArgument().setPath(classpath);", "+            toExecute.createArgument().setValue(\"-sourcepath\");", "+            toExecute.createArgument().setPath(sourcePath);", "-            cmd.createArgument().setValue(\"-classpath\");", "-            cmd.createArgument().setValue(sourcePath.toString() +", "+            toExecute.createArgument().setValue(\"-classpath\");", "+            toExecute.createArgument().setValue(sourcePath.toString() +", "-            cmd.createArgument().setValue(\"-version\");", "+            toExecute.createArgument().setValue(\"-version\");", "-            cmd.createArgument().setValue(\"-author\");", "+            toExecute.createArgument().setValue(\"-author\");", "-                    cmd.createArgument().setValue(\"-doclet\");", "-                    cmd.createArgument().setValue(doclet.getName());", "+                    toExecute.createArgument().setValue(\"-doclet\");", "+                    toExecute.createArgument().setValue(doclet.getName());", "-                        cmd.createArgument().setValue(\"-docletpath\");", "-                        cmd.createArgument().setPath(doclet.getPath());", "+                        toExecute.createArgument().setValue(\"-docletpath\");", "+                        toExecute.createArgument().setPath(doclet.getPath());", "-                        cmd.createArgument().setValue(param.getName());", "+                        toExecute.createArgument().setValue(param.getName());", "-                            cmd.createArgument().setValue(param.getValue());", "+                            toExecute.createArgument().setValue(param.getValue());", "-                cmd.createArgument().setValue(\"-bootclasspath\");", "-                cmd.createArgument().setPath(bootclasspath);", "+                toExecute.createArgument().setValue(\"-bootclasspath\");", "+                toExecute.createArgument().setPath(bootclasspath);", "-                        cmd.createArgument().setValue(\"-linkoffline\");", "-                        cmd.createArgument().setValue(la.getHref());", "-                        cmd.createArgument().setValue(packageListLocation);", "+                        toExecute.createArgument().setValue(\"-linkoffline\");", "+                        toExecute.createArgument().setValue(la.getHref());", "+                        toExecute.createArgument().setValue(packageListLocation);", "-                        cmd.createArgument().setValue(\"-link\");", "-                        cmd.createArgument().setValue(la.getHref());", "+                        toExecute.createArgument().setValue(\"-link\");", "+                        toExecute.createArgument().setValue(la.getHref());", "-                    cmd.createArgument().setValue(\"-group\");", "-                    cmd.createArgument().setValue(name);", "-                    cmd.createArgument().setValue(pkgList);", "+                    toExecute.createArgument().setValue(\"-group\");", "+                    toExecute.createArgument().setValue(name);", "+                    toExecute.createArgument().setValue(pkgList);", "-                    cmd.createArgument().setValue(\"-group\");", "-                    cmd.createArgument().setValue(title);", "-                    cmd.createArgument().setValue(packages);", "+                    toExecute.createArgument().setValue(\"-group\");", "+                    toExecute.createArgument().setValue(title);", "+                    toExecute.createArgument().setValue(packages);", "-                    cmd.createArgument().setValue(name);", "+                    toExecute.createArgument().setValue(name);", "-                evaluatePackages(sourcePath, packages);", "+                evaluatePackages(toExecute, sourcePath, packages);", "-                cmd.createArgument().setValue(tok.nextToken().trim());", "+                toExecute.createArgument().setValue(tok.nextToken().trim());", "-            cmd.createArgument().setValue(\"@\" + packageList);", "+            toExecute.createArgument().setValue(\"@\" + packageList);", "-        log(\"Javadoc args: \" + cmd, Project.MSG_VERBOSE);", "+        log(\"Javadoc args: \" + toExecute, Project.MSG_VERBOSE);", "-            exe.setCommandline(cmd.getCommandline());", "+            exe.setCommandline(toExecute.getCommandline());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d960a36711b87554e78206a0f4d570b2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/dotnet/CSharp.java", "commitBeforeChange": "b0bf9dddde85cb1e6723303338ed03432acfcf2e", "commitAfterChange": "9f496d1b2a1bcf4a5ac32e2e890a695eb163d81e", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public void execute()         throws TaskException", "signatureAfterChange": "     public void execute()         throws TaskException", "diff": ["-        final Commandline cmd = exe.getCommandline();", "-        cmd.setExecutable( EXE_NAME );", "+        exe.setExecutable( EXE_NAME );", "-        addArgument( cmd, \"/nologo\" );", "-        addArgument( cmd, getAdditionalModulesParameter() );", "-        addArgument( cmd, getDefinitionsParameter() );", "-        addArgument( cmd, getDebugParameter() );", "-        addArgument( cmd, getDocFileParameter() );", "-        addArgument( cmd, getIncrementalParameter() );", "-        addArgument( cmd, getMainClassParameter() );", "-        addArgument( cmd, getOptimizeParameter() );", "-        addArgument( cmd, getReferencesParameter() );", "-        addArgument( cmd, getTargetTypeParameter() );", "-        addArgument( cmd, getUnsafeParameter() );", "-        addArgument( cmd, getWarnLevelParameter() );", "-        addArgument( cmd, getWin32IconParameter() );", "-        addArgument( cmd, getOutputFileParameter() );", "-        addArgument( cmd, getIncludeDefaultReferencesParameter() );", "-        addArgument( cmd, getDefaultReferenceParameter() );", "-        addArgument( cmd, getWin32ResParameter() );", "-        addArgument( cmd, getUtf8OutpuParameter() );", "-        addArgument( cmd, getFullPathsParameter() );", "-        addArgument( cmd, getExtraOptionsParameter() );", "+        addArgument( exe, \"/nologo\" );", "+        addArgument( exe, getAdditionalModulesParameter() );", "+        addArgument( exe, getDefinitionsParameter() );", "+        addArgument( exe, getDebugParameter() );", "+        addArgument( exe, getDocFileParameter() );", "+        addArgument( exe, getIncrementalParameter() );", "+        addArgument( exe, getMainClassParameter() );", "+        addArgument( exe, getOptimizeParameter() );", "+        addArgument( exe, getReferencesParameter() );", "+        addArgument( exe, getTargetTypeParameter() );", "+        addArgument( exe, getUnsafeParameter() );", "+        addArgument( exe, getWarnLevelParameter() );", "+        addArgument( exe, getWin32IconParameter() );", "+        addArgument( exe, getOutputFileParameter() );", "+        addArgument( exe, getIncludeDefaultReferencesParameter() );", "+        addArgument( exe, getDefaultReferenceParameter() );", "+        addArgument( exe, getWin32ResParameter() );", "+        addArgument( exe, getUtf8OutpuParameter() );", "+        addArgument( exe, getFullPathsParameter() );", "+        addArgument( exe, getExtraOptionsParameter() );", "-            addArgument( cmd, targetFile );", "+            addArgument( exe, targetFile );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f44bbde2cc8a05aeb9b846f7ca3eecc3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/optional/image/Scale.java", "commitBeforeChange": "f8c14ca446cbd22d0d9e633ff2b0a13a10ccd313", "commitAfterChange": "ff9b546d81da21c253e71319dc8a756380bac15c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public PlanarImage performScale(PlanarImage image)", "signatureAfterChange": "      public PlanarImage performScale(PlanarImage image)", "diff": ["-        float x_fl = getWidth();", "-        float y_fl = getHeight();", "+        float xFl = getWidth();", "+        float yFl = getHeight();", "-        if (!x_percent) {", "-            x_fl = (x_fl / image.getWidth());", "+        if (!xPercent) {", "+            xFl = (xFl / image.getWidth());", "-        if (!y_percent) {", "-            y_fl = (y_fl / image.getHeight());", "+        if (!yPercent) {", "+            yFl = (yFl / image.getHeight());", "-            y_fl = x_fl;", "+            yFl = xFl;", "-            x_fl = y_fl;", "+            xFl = yFl;", "-            x_fl = y_fl = Math.min(x_fl, y_fl);", "+            yFl = Math.min(xFl, yFl);", "+            xFl = yFl;", "-            x_fl = y_fl = Math.max(x_fl, y_fl);", "+            yFl = Math.max(xFl, yFl);", "+            xFl = yFl;", "-        pb.add(new Float(x_fl));", "-        pb.add(new Float(y_fl));", "+        pb.add(new Float(xFl));", "+        pb.add(new Float(yFl));", "-        log(\"\\tScaling to \" + (x_fl * 100) + \"% x \" + (y_fl * 100) + \"%\");", "+        log(\"\\tScaling to \" + (xFl * 100) + \"% x \" + (yFl * 100) + \"%\");"]}]}
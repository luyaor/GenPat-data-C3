{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c83a1851ec26610f00ebc6207d4fb04e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "133bdc49d239cb4119ca23bce50f9536", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "380870c2b26a9f3289569dc2451178df3f05613e", "commitAfterChange": "ad9edf5f5ea4a8f2a974726eeb8e656c177357df", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void write(final int b) throws IOException", "signatureAfterChange": "     public void write(int bv) throws IOException", "diff": ["-    public void write(final int b) throws IOException {", "-        if (this.out != null) {", "-            write0(b);", "+     */", "+    public void write(int bv) throws IOException {", "+        int b = (256 + bv) % 256;", "+        if (currentChar != -1) {", "+            if (currentChar == b) {", "+                runLength++;", "+                if (runLength > 254) {", "+                    writeRun();", "+                    currentChar = -1;", "+                    runLength = 0;", "+                }", "+            } else {", "+                writeRun();", "+                runLength = 1;", "+                currentChar = b;", "+            }", "-            throw new IOException(\"closed\");", "+            currentChar = b;", "+            runLength++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "314996d5de7295d3e617851d9d7b3daf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "ee344eb12509b4a69af0d52f285bbd7230f2c556", "commitAfterChange": "29cf33f78f16638f62f3471816c1879e0a8190f2", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "       protected Process exec() throws IOException", "signatureAfterChange": "       protected Process exec() throws IOException", "diff": ["-        return Runtime.getRuntime().exec(getCommandline(), getEnvironment());", "+        String userDir = System.getProperty(\"user.dir\");", "+        try {", "+            if (myos.equals(\"Mac OS\") && workingDirectory != null) {", "+                System.getProperties().put(\"user.dir\", ", "+                                           workingDirectory.getAbsolutePath());", "+            }", "+", "+            return Runtime.getRuntime().exec(getCommandline(), getEnvironment());", "+        } finally {", "+            if (myos.equals(\"Mac OS\") && workingDirectory != null) {", "+                System.getProperties().put(\"user.dir\", userDir);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a99f83b3e29abcb828e7b3be3c62566e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/StreamPumper.java", "commitBeforeChange": "ce5e4129647f8418d1ffb870f3bf8031664519bc", "commitAfterChange": "e505c281d0bf63acd3bfc5a10c730d79057605d5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void run()", "signatureAfterChange": "     public void run()", "diff": ["-        finish = false;", "-                if (length <= 0 || finish || Thread.interrupted()) {", "+                if (length <= 0 || Thread.interrupted()) {", "+                }", "+                if (finish) {", "+                \tbreak;", "+                }", "+            }", "+            // On completion, drain any available data (which might be the first data available for quick executions)", "+            if (finish) {", "+                while((length = is.available()) > 0) {", "+                \tif (Thread.interrupted()) {", "+                \t\tbreak;", "+                \t}", "+                    length = is.read(buf, 0, Math.min(length, buf.length));", "+                    if (length <= 0) {", "+                        break;", "+                    }", "+                    os.write(buf, 0, length);", "+            finish = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0fe11cf18d3d48b892fdc31ebc34465", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "fdde39136d793c06df81c914db2dc9273d1e6c4c", "commitAfterChange": "4ee2e5c268b44ad68c49168457f64b76e4d64a32", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static synchronized Vector getProcEnvironment()", "signatureAfterChange": "     public static synchronized Vector getProcEnvironment()", "diff": ["-            String line;", "+            String var = null;", "+            String line, lineSep = System.getProperty(\"line.separator\");", "-                procEnvironment.addElement(line);", "+                if (line.indexOf('=') == -1) {", "+                    // Chunk part of previous env var (UNIX env vars can", "+                    // contain embedded new lines).", "+                    if (var == null) {", "+                        var = lineSep + line;", "+                    }", "+                    else {", "+                        var += lineSep + line;", "+                    }", "+                }", "+                else {", "+                    // New env var...append the previous one if we have it.", "+                    if (var != null) {", "+                        procEnvironment.addElement(var);", "+                    }", "+                    var = line;", "+                }", "+            // Since we \"look ahead\" before adding, there's one last env var.", "+            procEnvironment.addElement(var);"]}]}
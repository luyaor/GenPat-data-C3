{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a7498ca33eec04085106d1ab9451c55", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "006f6958aa440c1c5dfc7e19f59e24d2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "8af1905a98b1e04a63ab7473d64a41bfda91f15e", "commitAfterChange": "7a5c30f33c46dec3fb201dac6878a09c4cfcaf2c", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private Object createdTypedObject( final String name,                                        final Class type )         throws ConfigurationException", "signatureAfterChange": "     private Object createdTypedObject( final String name,                                        final Class type )         throws ConfigurationException", "diff": ["-        final TypeFactory factory = getTypeFactory( type );", "+        // Attempt to create the object", "+        final Object obj;", "-            return factory.create( name );", "+            final TypeFactory factory = getTypeFactory( DataType.class );", "+            obj = factory.create( name );", "+", "+        // Check the types", "+        if( ! type.isInstance( obj ) )", "+        {", "+            final String message =", "+                REZ.getString( \"mismatched-typed-object.error\", name, type.getName() );", "+            throw new ConfigurationException( message );", "+        }", "+", "+        return obj;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40656ee5dd006e6dad96f68920b0a664", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/embeddor/DefaultEmbeddor.java", "commitBeforeChange": "e7ab62bc9179b392804835d02155e43d3d2cf5d6", "commitAfterChange": "2e6e170fb375181f4438e1de44808c7adab508a2", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private Object createComponent( final String component, final Class clazz )         throws Exception", "signatureAfterChange": "     private Component createComponent( final String component, final Class clazz )         throws Exception", "diff": ["-    private Object createComponent( final String component, final Class clazz )", "+    private Component createComponent( final String component, final Class clazz )", "+            if( !( object instanceof Component) )", "+            {", "+                final String message = REZ.getString( \"bad-type.error\", component, Component.class.getName() );", "+                throw new Exception( message );", "+            }", "-            return object;", "+            return (Component)object;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad14dff8d85f0e1e092b02a488322fbf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/depend/Depend.java", "commitBeforeChange": "1efb922bf591d5a8b083c5984b51fd46b0ebb9af", "commitAfterChange": "e12c63a6ee1b0bb45e9821ff84392c9391d76bd9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void determineDependencies() throws IOException", "signatureAfterChange": "     private void determineDependencies() throws IOException", "diff": ["+                                    int classMarker = jarFilePath.indexOf('!');", "+                                    jarFilePath = jarFilePath.substring(0, classMarker);", "-                                        int classMarker = jarFilePath.indexOf('!');", "-                                        jarFilePath = jarFilePath.substring(5, classMarker);", "+                                        classpathFileObject = new File(FileUtils.getFileUtils().fromURI(jarFilePath));", "+                                    } else {", "+                                        throw new IOException(\"Bizarre nested path in jar: protocol: \" + jarFilePath);", "-                                    classpathFileObject = new File(jarFilePath);", "-                                    String classFilePath = classURL.getFile();", "-                                    classpathFileObject = new File(classFilePath);", "+                                    classpathFileObject = new File(FileUtils.getFileUtils().fromURI(classURL.toExternalForm()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff2be3092e270c7b643e2813d4de6d84", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/builder/DefaultProjectBuilder.java", "commitBeforeChange": "50fb7f5643cba98640e7d4ce2b00736e9d42cbab", "commitAfterChange": "6ff9bf50ad2e4fcda69911d207c8dfe93e7b4e0b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private URL extractURL( final File file ) throws ProjectException", "signatureAfterChange": "     private String extractURL( final File file ) throws ProjectException", "diff": ["-    private URL extractURL( final File file ) throws ProjectException", "+     */", "+    private String extractURL( final File file ) throws ProjectException", "+        if( ! file.isFile() )", "+        {", "+            final String message = REZ.getString( \"ant.no-project-file.error\" );", "+            throw new ProjectException( message );", "+        }", "+", "-            return file.toURL();", "+            return file.getCanonicalFile().toURL().toString();", "-        catch( MalformedURLException e )", "+        catch( Exception e )"]}]}
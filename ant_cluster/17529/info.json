{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "320cfb777fe0d101a4895364537cea4b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b6cdaf3d70ba180e5a7e92270f9163c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "cbd20a77eba224b21654251583971e054729f006", "commitAfterChange": "752d64fa43db2172327771ba4d36bee3f2d3b49a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     protected byte[] getBytes(String name) throws ZipException", "signatureAfterChange": "     protected byte[] getBytes(String name) throws ZipException", "diff": ["-        if (encoding == null) {", "-            return name.getBytes();", "-        } else {", "-            try {", "-                return ZipEncodingHelper.encodeName(name, encoding);", "-            } catch (java.nio.charset.UnsupportedCharsetException ex) {", "-                // Java 1.4's NIO doesn't recognize a few names that", "-                // String.getBytes does", "-                try {", "-                    return name.getBytes(encoding);", "-                } catch (UnsupportedEncodingException uee) {", "-                    throw new ZipException(uee.getMessage());", "-                }", "-            }", "+        try {", "+            ByteBuffer b =", "+                ZipEncodingHelper.getZipEncoding(encoding).encode(name);", "+            byte[] result = new byte[b.limit()];", "+            System.arraycopy(b.array(), b.arrayOffset(), result, 0,", "+                             result.length);", "+            return result;", "+        } catch (IOException ex) {", "+            throw new ZipException(\"Failed to encode name: \" + ex.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b9537386598f148eca6a21ae0da868a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/AbstractFileSet.java", "commitBeforeChange": "3af30bdfcadad52de3f739223d6937d3f5b0a9bd", "commitAfterChange": "469dcdf7a4a239027eb73268dcb5a540d32b78d4", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "     public Object clone()", "signatureAfterChange": "     public Object clone()", "diff": ["-        try {", "-            AbstractFileSet fs = (AbstractFileSet) super.clone();", "-            fs.setProject(getProject());", "-            return fs;", "-        } catch (CloneNotSupportedException e) {", "-            throw new BuildException(e);", "+        if (isReference()) {", "+            return (getRef(getProject())).clone();", "+        } else {", "+            try {", "+                AbstractFileSet fs = (AbstractFileSet) super.clone();", "+                fs.defaultPatterns = (PatternSet) defaultPatterns.clone();", "+                fs.additionalPatterns = new Vector(additionalPatterns.size());", "+                Enumeration e = additionalPatterns.elements();", "+                while (e.hasMoreElements()) {", "+                    fs.additionalPatterns", "+                        .addElement(((PatternSet) e.nextElement()).clone());", "+                }", "+                fs.selectors = (Vector) fs.selectors.clone();", "+                return fs;", "+            } catch (CloneNotSupportedException e) {", "+                throw new BuildException(e);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fe3156ef999b238b6261fc45c2118a7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/FilterSet.java", "commitBeforeChange": "4c16ed4bd158a0f4b656a0088ecbb416f89c3db2", "commitAfterChange": "3fb7be5f43e19fb66624871fb4ad757583498585", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 30, "signatureBeforeChange": "     public synchronized Object clone() throws BuildException", "signatureAfterChange": "     public synchronized Object clone() throws BuildException", "diff": ["+     */", "+    public synchronized Object clone() throws BuildException {", "+        if (isReference()) {", "+            return ((FilterSet) getRef()).clone();", "+        }", "+        try {", "+            FilterSet fs = (FilterSet) super.clone();", "+            fs.filters = (Vector) getFilters().clone();", "+            fs.setProject(getProject());", "+            return fs;", "+        } catch (CloneNotSupportedException e) {", "+            throw new BuildException(e);", "+        }", "+    }", "-     */", "-    public synchronized Object clone() throws BuildException {", "-        if (isReference()) {", "-            return ((FilterSet) getRef()).clone();", "-        } else {", "-            try {", "-                FilterSet fs = (FilterSet) super.clone();", "-                fs.filters = (Vector) getFilters().clone();", "-                fs.setProject(getProject());", "-                return fs;", "-            } catch (CloneNotSupportedException e) {", "-                throw new BuildException(e);", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d567e14a3fc8b22147f2dcdd13631696", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/PatternSet.java", "commitBeforeChange": "f9239036ddb3e5c1434a3b3a310c5947357e47ad", "commitAfterChange": "351fe71fecbb7b419331eccc9e0431c5d6b4a129", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "     public Object clone()", "signatureAfterChange": "     public Object clone()", "diff": ["-        if (isReference()) {", "-            return getRef(getProject()).clone();", "-        } else {", "-            try {", "-                PatternSet ps = (PatternSet) super.clone();", "-                ps.includeList = (Vector) includeList.clone();", "-                ps.excludeList = (Vector) excludeList.clone();", "-                ps.includesFileList = (Vector) includesFileList.clone();", "-                ps.excludesFileList = (Vector) excludesFileList.clone();", "-                return ps;", "-            } catch (CloneNotSupportedException e) {", "-                throw new BuildException(e);", "-            }", "+        try {", "+            PatternSet ps = (PatternSet) super.clone();", "+            ps.includeList = (Vector) includeList.clone();", "+            ps.excludeList = (Vector) excludeList.clone();", "+            ps.includesFileList = (Vector) includesFileList.clone();", "+            ps.excludesFileList = (Vector) excludesFileList.clone();", "+            return ps;", "+        } catch (CloneNotSupportedException e) {", "+            throw new BuildException(e);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7c3ab05aa6c1dab3d6d56687f8684b33", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf048f7e9b62807d15d7e6838a8a4b01", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/Difference.java", "commitBeforeChange": "bd7585adb01844d04d23a6b1707427f9f4a490ad", "commitAfterChange": "ea33301047ba2de74fa062155df4d6337e5d1392", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     protected Collection getCollection()", "signatureAfterChange": "     protected Collection<Resource> getCollection()", "diff": ["-    protected Collection getCollection() {", "-        List rc = getResourceCollections();", "-        int size = rc.size();", "+    protected Collection<Resource> getCollection() {", "+        List<ResourceCollection> rcs = getResourceCollections();", "+        int size = rcs.size();", "-        HashSet hs = new HashSet();", "-        ArrayList al = new ArrayList();", "-        for (Iterator rcIter = rc.iterator(); rcIter.hasNext();) {", "-            for (Iterator r = nextRC(rcIter).iterator(); r.hasNext();) {", "-                Object next = r.next();", "-                if (hs.add(next)) {", "-                    al.add(next);", "+        Set<Resource> hs = new HashSet<Resource>();", "+        List<Resource> al = new ArrayList<Resource>();", "+        for (ResourceCollection rc : rcs) {", "+            for (Resource r : rc) {", "+                if (hs.add(r)) {", "+                    al.add(r);", "-                    al.remove(next);", "+                    al.remove(r);", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6e346d718064f41cac4e50d87c54d75", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "d25488cbbb28cf25e1f91f714c70999fd105432d", "commitAfterChange": "3d706ab8188a674936880b6f4530b0cf3991758b", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     private void checkIncludePatterns()", "signatureAfterChange": "     private void checkIncludePatterns()", "diff": ["-        Map newroots = new HashMap();", "+        Map<TokenizedPath, String> newroots = new HashMap<TokenizedPath, String>();", "-        for (Iterator iter = includeNonPatterns.entrySet().iterator();", "-             iter.hasNext(); ) {", "-            Map.Entry entry = (Map.Entry) iter.next();", "-            String pattern = (String) entry.getKey();", "+        for (Map.Entry<String, TokenizedPath> entry : includeNonPatterns.entrySet()) {", "+            String pattern = entry.getKey();", "-                newroots.put((TokenizedPath) entry.getValue(), pattern);", "+                newroots.put(entry.getValue(), pattern);", "-            // only scan directories that can include matched files or", "-            // directories", "-            Iterator it = newroots.entrySet().iterator();", "-", "-            while (it.hasNext()) {", "-                Map.Entry entry = (Map.Entry) it.next();", "-                TokenizedPath currentPath = (TokenizedPath) entry.getKey();", "+            // only scan directories that can include matched files or", "+            // directories", "+            for (Map.Entry<TokenizedPath, String> entry : newroots.entrySet()) {", "+                TokenizedPath currentPath = entry.getKey();"]}]}
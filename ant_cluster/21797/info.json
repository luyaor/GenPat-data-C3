{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9c7f95e00b42f7eb4a99e4c64d91c6a6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "437bc0b78e0a07cf62d436dd4589c56f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Length.java", "commitBeforeChange": "c3018eaa64e6319dd6a03e2bf46e3c1c965b4fd6", "commitAfterChange": "6bd9a3ed7834da429c8281f1febe3ff5d43ff0d3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 13, "signatureBeforeChange": "      private void handleFilesets(Handler h)", "signatureAfterChange": "      private static long getLength(String s, boolean t)", "diff": ["-    private void handleFilesets(Handler h) {", "-        HashSet included = new HashSet(filesets.size());", "-        for (int i = 0; i < filesets.size(); i++) {", "-            FileSet fs = (FileSet) (filesets.get(i));", "-                    //clone the Resource and alter path", "-                    if (basedir != null) {", "-                        r = (Resource) (r.clone());", "-                        r.setName(FileUtils.getFileUtils().resolveFile(", "-                            basedir, r.getName()).getAbsolutePath());", "-                    }", "-                    if (included.add(r.getName())) {", "-                        h.handle(r);", "-                    }", "-        included.clear();", "-        included = null;", "+", "+    private static long getLength(String s, boolean t) {", "+        return (t ? s.trim() : s).length();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49b5e7d120f78160d4fd13a8833c4db1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ContainerMapper.java", "commitBeforeChange": "3375d671acfa1fceb3325dc54fda5484b9e19208", "commitAfterChange": "2ead66e52c56fbc1a59789187ddba634ebe4ae2d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public String[] mapFileName(String sourceFileName)", "signatureAfterChange": "     public synchronized List getMappers()", "diff": ["+     */", "+    public synchronized List getMappers() {", "+        return Collections.unmodifiableList(mappers);", "+    }", "-     */", "-    public String[] mapFileName(String sourceFileName) {", "-        List ret = new ArrayList();", "-        if (chained) {", "-            List inputs = new ArrayList();", "-            ret.add(sourceFileName);", "-            for (int i = 0; i < mappers.size(); ++i) {", "-                inputs = ret;", "-                ret = new ArrayList();", "-                FileNameMapper mapper = (FileNameMapper) mappers.get(i);", "-                for (Iterator it = inputs.iterator(); it.hasNext();) {", "-                    String[] mapped = mapper.mapFileName(", "-                        (String) it.next());", "-                    if (mapped != null) {", "-                        for (int m = 0; m < mapped.length; ++m) {", "-                            ret.add(mapped[m]);", "-                        }", "-                    }", "-                }", "-                if (ret.size() == 0) {", "-                    return null;", "-                }", "-            }", "-        } else {", "-            for (int i = 0; i < mappers.size(); ++i) {", "-                FileNameMapper mapper = (FileNameMapper) mappers.get(i);", "-                String[] mapped = mapper.mapFileName(sourceFileName);", "-                if (mapped != null) {", "-                    for (int m = 0; m < mapped.length; ++m) {", "-                        ret.add(mapped[m]);", "-                    }", "-                }", "-            }", "-            if (ret.size() == 0) {", "-                return null;", "-            }", "-        }", "-        return (String[]) ret.toArray(new String[ret.size()]);", "-    }"]}]}
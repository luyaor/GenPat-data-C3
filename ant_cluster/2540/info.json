{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ff2288bc184311cad7888f8c7332301a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58dd4038ba309ca30e1f83885d2dca6e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ClasspathUtils.java", "commitBeforeChange": "af007ba13234afc51a113ee612e6abad4642cad1", "commitAfterChange": "81b65c0eaa7fff0b658e28269907a36c3a83fc6b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public static Object newInstance(         String className,         ClassLoader userDefinedLoader)", "signatureAfterChange": "     public static Object newInstance(         String className,         ClassLoader userDefinedLoader,         Class expectedType)", "diff": ["+     */", "+    public static Object newInstance(", "-        ClassLoader userDefinedLoader) {", "+        ClassLoader userDefinedLoader,", "+        Class expectedType) {", "-            Class clazz = userDefinedLoader.loadClass(className);", "+            Class clazz = Class.forName(className, true, userDefinedLoader); ", "+            if (!expectedType.isInstance(o))", "+            {", "+                throw new BuildException(", "+                    \"Class of unexpected Type: \" ", "+                        + className", "+                        + \" expected :\" ", "+                        + expectedType);", "+            }", "-                \"Class \"", "-                    + className", "-                    + \" not found by the specific classLoader.\",", "+                \"Class not found: \"", "+                    + className,", "+        } catch (LinkageError e) {", "+            throw new BuildException(", "+                \"Class \"", "+                    + className", "+                    + \" could not be loaded because of an invalid dependency.\", ", "+                e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1dbbf4d618df6928cc09de35d6a2651", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/filterreaders/src/main/org/apache/tools/ant/util/ChainReaderHelper.java", "commitBeforeChange": "de1a987f23e027a486e6b07ddc8ab2edecd7dd3a", "commitAfterChange": "e22b34c5772d1052e1be2fdb97ebd3ed79f71b3b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public final String processStream()         throws BuildException, IOException", "signatureAfterChange": "     public final String processStream()         throws BuildException, IOException", "diff": ["+                final Path classpath = filter.getClasspath();", "+                final Project project = filter.getProject();", "-                        final Class clazz = Class.forName(className);", "+                        Class clazz = null;", "+                        if (classpath == null) {", "+                            clazz = Class.forName(className);", "+                        } else {", "+                            System.out.println(project + \" \" + classpath);", "+                            AntClassLoader al = new AntClassLoader(project,", "+                                                                   classpath);", "+                            clazz = al.loadClass(className);", "+                            AntClassLoader.initializeClass(clazz);", "+                        }", "+                            if (!FilterReader.class.isAssignableFrom(clazz)) {", "+                                throw new BuildException(className +", "+                                    \" does not extend java.io.FilterReader\");", "+                            }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "00ed79c1934224bcfbc20d60b6a3b3fa", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d7e6a317f61f5535678cdf92defe4fb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Rmic.java", "commitBeforeChange": "926fcdcbeb003e509c0a1d03208f0eab2bab6813", "commitAfterChange": "5cc29f61e6a8fbcf8cb8f0fe2f848955c41f486a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 35, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        if (iiop) {", "-            log(\"IIOP has been turned on.\", Project.MSG_INFO);", "-            if( iiopopts != null ) {", "-                log(\"IIOP Options: \" + iiopopts, Project.MSG_INFO );", "-            }", "-        }", "-        if (idl) {", "-            log(\"IDL has been turned on.\", Project.MSG_INFO);", "-            if( idlopts != null ) {", "-                log(\"IDL Options: \" + idlopts, Project.MSG_INFO );", "-            }", "-        }", "-        Path classpath = getCompileClasspath(baseDir);", "+        String compiler = project.getProperty(\"build.rmic\");", "+        RmicAdapter adapter = RmicAdapterFactory.getRmic(compiler, this );", "+", "+        Path classpath = adapter.getClasspath();", "-            scanDir(baseDir, files);", "+            scanDir(baseDir, files, adapter.getMapper());", "-                    new String[] {classname.replace('.', File.separatorChar) + \".class\"});", "+                    new String[] {classname.replace('.', File.separatorChar) + \".class\"},", "+                    adapter.getMapper());", "-        // XXX", "-        // need to provide an input stream that we read in from!", "-", "-        OutputStream logstr = new LogOutputStream(this, Project.MSG_WARN);", "-        sun.rmi.rmic.Main compiler = new sun.rmi.rmic.Main(logstr, \"rmic\");", "-        Commandline cmd = new Commandline();", "-        ", "-        cmd.createArgument().setValue(\"-d\");", "-        cmd.createArgument().setFile(baseDir);", "-        cmd.createArgument().setValue(\"-classpath\");", "-        cmd.createArgument().setPath(classpath);", "-        if (null != stubVersion) {", "-            if (\"1.1\".equals(stubVersion))", "-                cmd.createArgument().setValue(\"-v1.1\");", "-            else if (\"1.2\".equals(stubVersion))", "-                cmd.createArgument().setValue(\"-v1.2\");", "-            else", "-                cmd.createArgument().setValue(\"-vcompat\");", "-        }", "-        if (null != sourceBase)", "-            cmd.createArgument().setValue(\"-keepgenerated\");", "-", "-        if( iiop ) {", "-            cmd.createArgument().setValue(\"-iiop\");", "-            if( iiopopts != null ) ", "-                cmd.createArgument().setValue(iiopopts);", "-        }", "-", "-        if( idl )  {", "-            cmd.createArgument().setValue(\"-idl\");", "-            if( idlopts != null ) ", "-                cmd.createArgument().setValue(idlopts);", "-        }", "-        if( debug )  {", "-            cmd.createArgument().setValue(\"-g\");", "-        }", "-", "-            for (int j = 0; j < fileCount; j++) {", "-                cmd.createArgument().setValue((String) compileList.elementAt(j));", "+            // now we need to populate the compiler adapter", "+            adapter.setRmic( this );", "+", "+            // finally, lets execute the compiler!!", "+            if (!adapter.execute()) {", "+                throw new BuildException(FAIL_MSG, location);", "-            log(\"Compilation args: \" + cmd.toString(), Project.MSG_VERBOSE);", "-            compiler.compile(cmd.getArguments());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0db46c55571a34be9963ddd21ae593ff", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javac.java", "commitBeforeChange": "c1a5419faf39033ffc2db1dcf8000f6a796f2dad", "commitAfterChange": "4ca5683c2a54ff4a141ed562a0f3b431b153b2c2", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 30, "signatureBeforeChange": "     private Commandline setupJavacCommand()", "signatureAfterChange": "     public boolean getVerbose()", "diff": ["+    /** Gets the verbose flag. */", "+    public boolean getVerbose() {", "+        return verbose;", "+    }", "-     */", "-    private Commandline setupJavacCommand() {", "-        Commandline cmd = new Commandline();", "-        Path classpath = getCompileClasspath(false);", "-", "-        if (deprecation == true) {", "-            cmd.createArgument().setValue(\"-deprecation\");", "-        }", "-", "-        if (destDir != null) {", "-            cmd.createArgument().setValue(\"-d\");", "-            cmd.createArgument().setFile(destDir);", "-        }", "-        ", "-        cmd.createArgument().setValue(\"-classpath\");", "-        // Just add \"sourcepath\" to classpath ( for JDK1.1 )", "-        if (Project.getJavaVersion().startsWith(\"1.1\")) {", "-            cmd.createArgument().setValue(classpath.toString() ", "-                                          + File.pathSeparator ", "-                                          + src.toString());", "-        } else {", "-            cmd.createArgument().setPath(classpath);", "-            cmd.createArgument().setValue(\"-sourcepath\");", "-            cmd.createArgument().setPath(src);", "-            if (target != null) {", "-                cmd.createArgument().setValue(\"-target\");", "-                cmd.createArgument().setValue(target);", "-            }", "-        }", "-        if (encoding != null) {", "-            cmd.createArgument().setValue(\"-encoding\");", "-            cmd.createArgument().setValue(encoding);", "-        }", "-        if (debug) {", "-            cmd.createArgument().setValue(\"-g\");", "-        }", "-        if (optimize) {", "-            cmd.createArgument().setValue(\"-O\");", "-        }", "-        if (bootclasspath != null) {", "-            cmd.createArgument().setValue(\"-bootclasspath\");", "-            cmd.createArgument().setPath(bootclasspath);", "-        }", "-        if (extdirs != null) {", "-            cmd.createArgument().setValue(\"-extdirs\");", "-            cmd.createArgument().setPath(extdirs);", "-        }", "-", "-        if (depend) {", "-            if (Project.getJavaVersion().startsWith(\"1.1\")) {", "-                cmd.createArgument().setValue(\"-depend\");", "-            } else if (Project.getJavaVersion().startsWith(\"1.2\")) {", "-                cmd.createArgument().setValue(\"-Xdepend\");", "-            } else {", "-                log(\"depend attribute is not supported by the modern compiler\",", "-                    Project.MSG_WARN);", "-            }", "-        }", "-", "-        if (verbose) {", "-            cmd.createArgument().setValue(\"-verbose\");", "-        }", "-", "-        logAndAddFilesToCompile(cmd);", "-        return cmd;", "-    }"]}]}
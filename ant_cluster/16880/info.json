{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "41e7110ae474ab629496e10b6a00fd52", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c4a55b7351d03b663987abcc0974694", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecTask.java", "commitBeforeChange": "0022fa2365dff486750da547135c9339b7a67526", "commitAfterChange": "984ad3c0217344ebdeb3b55fe2ba4018384fcfa3", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "     protected ExecuteStreamHandler createHandler() throws BuildException", "signatureAfterChange": "     protected ExecuteStreamHandler createHandler() throws BuildException", "diff": ["-        OutputStream outputStream = null;", "-        OutputStream errorStream = null;", "-        InputStream inputStream = null; ", "-        ", "-        if (out == null && outputprop == null) {", "-            outputStream = new LogOutputStream(this, Project.MSG_INFO);", "-            errorStream = new LogOutputStream(this, Project.MSG_WARN);", "-        } else {", "-            if (out != null)  {", "-                try {", "-                    outputStream ", "-                        = new FileOutputStream(out.getAbsolutePath(), append);", "-                    log(\"Output redirected to \" + out, Project.MSG_VERBOSE);", "-                } catch (FileNotFoundException fne) {", "-                    throw new BuildException(\"Cannot write to \" + out, fne,", "-                                             getLocation());", "-                } catch (IOException ioe) {", "-                    throw new BuildException(\"Cannot write to \" + out, ioe,", "-                                             getLocation());", "-                }", "-            }", "-        ", "-            if (outputprop != null) {", "-                baos = new ByteArrayOutputStream();", "-                log(\"Output redirected to property: \" + outputprop, ", "-                     Project.MSG_VERBOSE);", "-                if (out == null) {", "-                    outputStream = baos;", "-                } else {", "-                    outputStream = new TeeOutputStream(outputStream, baos);", "-                }", "-            } else {", "-                baos = null;", "-            }", "-            ", "-            errorStream = outputStream;", "-        } ", "-", "-        if (logError) {", "-            errorStream = new LogOutputStream(this, Project.MSG_WARN);", "-        }", "-        ", "-        if (error != null)  {", "-            try {", "-                errorStream ", "-                    = new FileOutputStream(error.getAbsolutePath(), append);", "-                log(\"Error redirected to \" + error, Project.MSG_VERBOSE);", "-            } catch (FileNotFoundException fne) {", "-                throw new BuildException(\"Cannot write to \" + error, fne,", "-                                         getLocation());", "-            } catch (IOException ioe) {", "-                throw new BuildException(\"Cannot write to \" + error, ioe,", "-                                         getLocation());", "-            }", "-        }", "-    ", "-        if (errorProperty != null) {", "-            errorBaos = new ByteArrayOutputStream();", "-            log(\"Error redirected to property: \" + errorProperty, ", "-                Project.MSG_VERBOSE);", "-            if (error == null) {", "-                errorStream = errorBaos;", "-            } else {", "-                errorStream = new TeeOutputStream(errorStream, errorBaos);", "-            }", "-        } else {", "-            errorBaos = null;", "-        }", "-", "-        if (input != null) {", "-            try {", "-                inputStream = new FileInputStream(input);", "-            } catch (FileNotFoundException fne) {", "-                throw new BuildException(\"Cannot read from \" + input, fne,", "-                                         getLocation());", "-            }", "-        }", "-        ", "-        return new PumpStreamHandler(outputStream, errorStream, inputStream, ", "-                                     true, true, true);         ", "+        return redirector.createHandler();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98b79e20863624ef6e12e53a209debd9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "8f09259a9e478e426334b46b55fdff85b05f7eaf", "commitAfterChange": "600b5034c20950694fc1d38a42bac70699617d92", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            if (driver == null) {", "-                throw new BuildException(\"Driver attribute must be set!\", ", "-                                         location);", "-            }", "-            if (userId == null) {", "-                throw new BuildException(\"User Id attribute must be set!\", ", "-                                         location);", "-            }", "-            if (password == null) {", "-                throw new BuildException(\"Password attribute must be set!\", ", "-                                         location);", "-            }", "-            if (url == null) {", "-                throw new BuildException(\"Url attribute must be set!\", ", "-                                         location);", "-            }", "-            if (srcFile != null && !srcFile.exists()) {", "-                throw new BuildException(\"Source file does not exist!\", ", "-                                         location);", "-            }", "-            Driver driverInstance = null;", "-            try {", "-                Class dc;", "-                if (classpath != null) {", "-                    // check first that it is not already loaded otherwise", "-                    // consecutive runs seems to end into an OutOfMemoryError", "-                    // or it fails when there is a native library to load", "-                    // several times.", "-                    // this is far from being perfect but should work", "-                    // in most cases.", "-                    synchronized (loaderMap){", "-                        if (caching){", "-                            loader = (AntClassLoader) loaderMap.get(driver);", "-                        }", "-                        if (loader == null){", "-                            log(\"Loading \" + driver ", "-                                + \" using AntClassLoader with classpath \" ", "-                                + classpath,", "-                                Project.MSG_VERBOSE);", "-                            loader = new AntClassLoader(project, classpath);", "-                            if (caching){", "-                                loaderMap.put(driver, loader);", "-                            }", "-                        } else {", "-                            log(\"Loading \" + driver ", "-                                + \" using a cached AntClassLoader.\",", "-                                Project.MSG_VERBOSE);", "-                        }", "-                    }", "-                    dc = loader.loadClass(driver);", "-                } else {", "-                    log(\"Loading \" + driver + \" using system loader.\", ", "-                        Project.MSG_VERBOSE);", "-                    dc = Class.forName(driver);", "-                }", "-                driverInstance = (Driver) dc.newInstance();", "-            } catch (ClassNotFoundException e){", "-                throw new BuildException(\"Class Not Found: JDBC driver \" ", "-                                         + driver + \" could not be loaded\",", "-                                         location);", "-            } catch (IllegalAccessException e){", "-                throw new BuildException(\"Illegal Access: JDBC driver \" ", "-                                         + driver + \" could not be loaded\", ", "-                                         location);", "-            } catch (InstantiationException e) {", "-                throw new BuildException(\"Instantiation Exception: JDBC driver \"", "-                                         + driver + \" could not be loaded\", ", "-                                         location);", "-            }", "+        ", "+           \tif (srcFile != null && !srcFile.exists()) {", "+\t\t   \t \tthrow new BuildException(\"Source file does not exist!\", location);", "+\t\t\t}", "-", "+\t\t\tconn = getConnection();", "+\t\t\tif (!isValidRdbms(conn)) {", "+\t\t\t\treturn;", "+\t\t\t}", "-                log(\"connecting to \" + url, Project.MSG_VERBOSE);", "-                Properties info = new Properties();", "-                info.put(\"user\", userId);", "-                info.put(\"password\", password);", "-                conn = driverInstance.connect(url, info);", "-                ", "-                if (conn == null) {", "-                    // Driver doesn't understand the URL", "-                    throw new SQLException(\"No suitable Driver for \" + url);", "-                }", "-                ", "-                if (!isValidRdbms(conn)) {", "-                    return;", "-                }", "-", "-                conn.setAutoCommit(autocommit);", "-", "-                        if (!autocommit) {", "+                        if (!isAutocommit()) {", "-                }", "+                } ", "-                if (!autocommit && conn != null && onError.equals(\"abort\")) {", "+                if (!isAutocommit() && conn != null && onError.equals(\"abort\")) {", "-                if (!autocommit && conn != null && onError.equals(\"abort\")) {", "+                if (!isAutocommit() && conn != null && onError.equals(\"abort\")) {"]}]}
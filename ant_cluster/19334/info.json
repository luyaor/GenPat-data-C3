{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f778607e785e1455a3f900186a76acd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73ab26643ae49ab61a276fcaea8cbfd9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "4b3e0ee2041826e51ec60af99e7bcca7024bf676", "commitAfterChange": "ed3fafb887fef0afbcd90eef7f263fef3bde95d9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void setReference( final ConfigurationState state,                                final String refName,                                final String unresolvedId,                                final Context context )         throws Exception", "signatureAfterChange": "     private void setReference( final ConfigurationState state,                                final String refName,                                final String unresolvedId,                                final Context context )         throws Exception", "diff": ["-        Object id = PropertyUtil.resolveProperty( unresolvedId, context, false );", "+        String id = context.resolveValue( unresolvedId ).toString();", "-        Object ref = null;", "-        try", "-        {", "-            ref = context.get( id );", "-        }", "-        catch( final ContextException e )", "+        Object ref = context.getProperty( id );", "+        if( ref == null )", "-            throw new ConfigurationException( message, e );", "+            throw new ConfigurationException( message );", "-        // Check the types", "+        // Convert the object, if necessary", "-            final String message = REZ.getString( \"mismatch-ref-types.error\", id, type.getName(), ref.getClass().getName() );", "-            throw new ConfigurationException( message );", "+            try", "+            {", "+                ref = m_converter.convert( type, ref, context );", "+            }", "+            catch( ConverterException e )", "+            {", "+                final String message = REZ.getString( \"mismatch-ref-types.error\", id, name );", "+                throw new ConfigurationException( message, e );", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3206bcd24aca805871cbd58c0f4f02a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/workspace/DefaultWorkspace.java", "commitBeforeChange": "8cab56ee0ec0c658d0dec674d305630eb8e88bf4", "commitAfterChange": "f5ba55efa18fa862c2a4f5762198c2a9481f287e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private File findTypeLib( final String libraryName )         throws Exception", "signatureAfterChange": "      private File findTypeLib( final String libraryName )         throws Exception", "diff": ["-        final String home = m_parameters.getParameter( \"myrmidon.home\" );", "-        final File homeDir = new File( home + File.separatorChar + \"ext\" );", "-", "-        final File library = new File( homeDir, name );", "-", "-        if( library.exists() )", "+        final File[] extPath = (File[])m_context.get( \"myrmidon.antlib.path\" );", "+        for( int i = 0; i < extPath.length; i++ )", "-            if( !library.canRead() )", "+            final File extDir = extPath[ i ];", "+            final File library = new File( extDir, name );", "+", "+            if( library.exists() )", "-                final String message = REZ.getString( \"no-read.error\", library );", "-                throw new TaskException( message );", "-            }", "-            else", "-            {", "-                return library;", "+                if( !library.canRead() )", "+                {", "+                    final String message = REZ.getString( \"no-read.error\", library );", "+                    throw new TaskException( message );", "+                }", "+                else", "+                {", "+                    return library;", "+                }"]}]}
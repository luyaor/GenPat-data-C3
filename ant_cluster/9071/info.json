{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "29b433e2b760ffaf5bc72425f71ff513", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbfb4801cd56022a02e610a202f91eb0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "cdb548b3b4d78f378f11293a270aa5a8bb4a913a", "commitAfterChange": "5e01ac3c135e9e7f675ca6dcc66abe9e0d0d6005", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String encoding, Project project)         throws IOException", "signatureAfterChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String encoding, Project project)         throws IOException", "diff": ["-                if (encoding == null) {", "-                    in = new BufferedReader(new FileReader(sourceFile));", "-                    out = new BufferedWriter(new FileWriter(destFile));", "-                } else {", "-                    in = new BufferedReader(new InputStreamReader(", "-                            new FileInputStream(sourceFile), encoding));", "-                    out = new BufferedWriter(new OutputStreamWriter(", "-                            new FileOutputStream(destFile), encoding));", "-                }", "-", "-                if (filterChainsAvailable) {", "-                    ChainReaderHelper crh = new ChainReaderHelper();", "-                    crh.setBufferSize(8192);", "-                    crh.setPrimaryReader(in);", "-                    crh.setFilterChains(filterChains);", "-                    crh.setProject(project);", "-                    Reader rdr = crh.getAssembledReader();", "-                    in = new BufferedReader(rdr);", "-                }", "-", "-                int length;", "-                String newline = null;", "-                String line = in.readLine();", "-                while (line != null) {", "-                    if (line.length() == 0) {", "-                        out.newLine();", "+                try {", "+                    if (encoding == null) {", "+                        in = new BufferedReader(new FileReader(sourceFile));", "+                        out = new BufferedWriter(new FileWriter(destFile));", "-                        if (filterSetsAvailable) {", "-                            newline = filters.replaceTokens(line);", "-                        } else {", "-                            newline = line;", "-                        }", "-                        out.write(newline);", "-                        out.newLine();", "+                        in = ", "+                            new BufferedReader(new InputStreamReader(", "+                                                 new FileInputStream(sourceFile), ", "+                                                 encoding));", "+                        out = ", "+                            new BufferedWriter(new OutputStreamWriter(", "+                                                 new FileOutputStream(destFile), ", "+                                                 encoding));", "-                    line = in.readLine();", "+", "+                    if (filterChainsAvailable) {", "+                        ChainReaderHelper crh = new ChainReaderHelper();", "+                        crh.setBufferSize(8192);", "+                        crh.setPrimaryReader(in);", "+                        crh.setFilterChains(filterChains);", "+                        crh.setProject(project);", "+                        Reader rdr = crh.getAssembledReader();", "+                        in = new BufferedReader(rdr);", "+                    }", "+                    ", "+                    int length;", "+                    String newline = null;", "+                    String line = in.readLine();", "+                    while (line != null) {", "+                        if (line.length() == 0) {", "+                            out.newLine();", "+                        } else {", "+                            if (filterSetsAvailable) {", "+                                newline = filters.replaceTokens(line);", "+                            } else {", "+                                newline = line;", "+                            }", "+                            out.write(newline);", "+                            out.newLine();", "+                        }", "+                        line = in.readLine();", "+                    }", "+                } finally {", "+                    if (out != null) {", "+                        out.close();", "+                    }", "+                    if (in != null) {", "+                        in.close();", "+                    }", "-", "-                out.close();", "-                in.close();", "-                FileInputStream in = new FileInputStream(sourceFile);", "-                FileOutputStream out = new FileOutputStream(destFile);", "+                FileInputStream in = null;", "+                FileOutputStream out = null;", "+                try {", "+                    in = new FileInputStream(sourceFile);", "+                    out = new FileOutputStream(destFile);", "-                byte[] buffer = new byte[8 * 1024];", "-                int count = 0;", "-                do {", "-                    out.write(buffer, 0, count);", "-                    count = in.read(buffer, 0, buffer.length);", "-                } while (count != -1);", "-", "-                in.close();", "-                out.close();", "+                    byte[] buffer = new byte[8 * 1024];", "+                    int count = 0;", "+                    do {", "+                        out.write(buffer, 0, count);", "+                        count = in.read(buffer, 0, buffer.length);", "+                    } while (count != -1);", "+                } finally {", "+                    if (out != null) {", "+                        out.close();", "+                    }", "+                    if (in != null) {", "+                        in.close();", "+                    }", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e677bbca1ab7f5f096daf21ea77c1381", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/pvcs/Pvcs.java", "commitBeforeChange": "270394a09fddda0ea9ffa2330956c5f399ab840f", "commitAfterChange": "6bd8d6e938a45868902ecd1092858e8372933c7c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void massagePCLI(File in, File out)          throws FileNotFoundException, IOException", "signatureAfterChange": "     private void massagePCLI(File in, File out)          throws FileNotFoundException, IOException", "diff": ["-        BufferedReader inReader = new BufferedReader(new FileReader(in));", "-        BufferedWriter outWriter = new BufferedWriter(new FileWriter(out));", "-        String s = null;", "-        while ((s = inReader.readLine()) != null) {", "-            String sNormal = s.replace('\\\\', '/');", "-            outWriter.write(sNormal);", "-            outWriter.newLine();", "+        BufferedReader inReader = null;", "+        BufferedWriter outWriter = null;", "+        try {", "+            inReader = new BufferedReader(new FileReader(in));", "+            outWriter = new BufferedWriter(new FileWriter(out));", "+            String s = null;", "+            while ((s = inReader.readLine()) != null) {", "+                String sNormal = s.replace('\\\\', '/');", "+                outWriter.write(sNormal);", "+                outWriter.newLine();", "+            }", "+        } finally {", "+            if (inReader != null) {", "+                inReader.close();", "+            }", "+            if (outWriter != null) {", "+                outWriter.close();", "+            }", "-        inReader.close();", "-        outWriter.close();"]}]}
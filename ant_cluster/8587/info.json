{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "62541feadb781b3b7c1b72ce702086e6", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "239968c24a7150544ebef9531b835e27", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "be12707c63314ce0314959ff551e37fe59b83943", "commitAfterChange": "4f3e4e1690289144b15872597586ed34ae92efb5", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "     public static String replaceProperties(Project project, String value, Hashtable keys )         throws BuildException", "signatureAfterChange": "     public static String replaceProperties(Project project, String value, Hashtable keys )             throws BuildException", "diff": ["-        throws BuildException", "-    {", "-        // XXX use Map instead of proj, it's too heavy", "+            throws BuildException {", "+        if (value == null) {", "+            return null;", "+        }", "-        // XXX need to replace this code with something better.", "-        StringBuffer sb=new StringBuffer();", "-        int i=0;", "-        int prev=0;", "-        // assert value!=nil", "-        int pos;", "-        while( (pos=value.indexOf( \"$\", prev )) >= 0 ) {", "-            if(pos>0) {", "-                sb.append( value.substring( prev, pos ) );", "+        Vector fragments = new Vector();", "+        Vector propertyRefs = new Vector();", "+        parsePropertyString(value, fragments, propertyRefs);", "+", "+        StringBuffer sb = new StringBuffer();", "+        Enumeration i = fragments.elements();", "+        Enumeration j = propertyRefs.elements();", "+        while (i.hasMoreElements()) {", "+            String fragment = (String)i.nextElement();", "+            if (fragment == null) {", "+                String propertyName = (String)j.nextElement();", "+                if (!keys.containsKey(propertyName)) {", "+                    project.log(\"Property ${\" + propertyName + \"} has not been set\", Project.MSG_VERBOSE);", "+                }", "+                fragment = (keys.containsKey(propertyName)) ? (String) keys.get(propertyName) ", "+                                                            : \"${\" + propertyName + \"}\"; ", "+            sb.append(fragment);", "+        }                        ", "+        ", "+        return sb.toString();", "+    }", "-                sb.append('$');", "-            else if (value.charAt( pos + 1 ) != '{' ) {", "-                sb.append( value.charAt( pos + 1 ) );", "-                prev=pos+2; // XXX", "-                int endName=value.indexOf( '}', pos );", "-                if( endName < 0 ) {", "-                    throw new BuildException(\"Syntax error in prop: \" +", "-                                             value );", "-                String n=value.substring( pos+2, endName );", "-                if (!keys.containsKey(n)) {", "-                    project.log(\"Property ${\" + n + \"} has not been set\", Project.MSG_VERBOSE);", "-                }", "-                ", "-                String v = (keys.containsKey(n)) ? (String) keys.get(n) : \"${\"+n+\"}\"; ", "-                ", "-                //System.out.println(\"N: \" + n + \" \" + \" V:\" + v);", "-                sb.append( v );", "-                prev=endName+1;", "-        if( prev < value.length() ) sb.append( value.substring( prev ) );", "-        //      System.out.println(\"After replace: \" + sb.toString());", "-        // System.out.println(\"Before replace: \" + value);", "-        return sb.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28ad551c33b2820293437443ffb5a1c6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/PropertyFile.java", "commitBeforeChange": "59fcd9ab821784fbf7d5ccee60b4f63c0f9b7735", "commitAfterChange": "09a7def3cd210a903db5fa8969a5292b93cb8192", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "         private void executeDate(String oldValue) throws BuildException", "signatureAfterChange": "         private void executeDate(String oldValue) throws BuildException", "diff": ["+            // special case", "+            if (m_default != null &&", "+                NOW_VALUE_.equals(m_default.toLowerCase()) &&", "+                (m_operation == Operation.INCREMENT_OPER ||", "+                 m_operation == Operation.DECREMENT_OPER) ) {", "+                oldValue = null;", "+            }", "+", "+            if (oldValue != null) {", "+                try {", "+                    value.setTime(fmt.parse(oldValue));", "+                }", "+                catch (ParseException pe)  { /* swollow */ }", "+            }", "+", "-            // special case", "-            if (m_default != null &&", "-                NOW_VALUE_.equals(m_default.toLowerCase()) &&", "-                (m_operation == Operation.INCREMENT_OPER ||", "-                 m_operation == Operation.DECREMENT_OPER) ) {", "-                oldValue = null;", "+            if (m_default != null && oldValue == null) {", "+                if (NOW_VALUE_.equals(m_default.toLowerCase())) {", "+                    value.setTime(new Date());", "+                }", "+                else if (NULL_VALUE_.equals(m_default.toLowerCase())) {", "+                    value = null;", "+                }", "+                else {", "+                    try {", "+                        value.setTime(fmt.parse(m_default));", "+                    }", "+                    catch (ParseException pe)  { /* swollow */ }", "+                }", "-            if (oldValue != null) {", "-                try {", "-                    newValue.setTime(fmt.parse(oldValue));", "-                }", "-                catch (ParseException pe)  { /* swollow */ }", "-            }", "-            else {", "-                if (m_default != null) {", "-                    if (NOW_VALUE_.equals(m_default.toLowerCase())) {", "-                        newValue.setTime(new Date());", "-                    }", "-                    else if (NULL_VALUE_.equals(m_default.toLowerCase())) {", "-                        newValue = null;", "-                    }", "-                    else {", "-                        try {", "-                            newValue.setTime(fmt.parse(m_default));", "-                        }", "-                        catch (ParseException pe)  { /* swollow */ }", "-                    }", "-                }", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2def3e53bf5a7c4bb781819c736d5acd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Property.java", "commitBeforeChange": "b846bf0a0491b2b8293082991157f05f0a12e5ff", "commitAfterChange": "d6ae851614fdd338ece0f76246e8b4939f0126f6", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "     private void resolveAllProperties(Properties props) throws BuildException", "signatureAfterChange": "     private void resolveAllProperties(Properties props) throws BuildException", "diff": ["-            String value = props.getProperty(name);", "+            Stack referencesSeen = new Stack();", "+            resolve(props, name, referencesSeen);", "+        }", "+    }", "-            boolean resolved = false;", "-            Vector expandedReferences = new Vector();", "-            expandedReferences.addElement(name);", "-            while (!resolved) {", "-                Vector fragments = new Vector();", "-                Vector propertyRefs = new Vector();", "-                ProjectHelper.parsePropertyString(value, fragments,", "-                                                  propertyRefs);", "-                resolved = true;", "-                if (propertyRefs.size() != 0) {", "-                    StringBuffer sb = new StringBuffer();", "-                    Enumeration i = fragments.elements();", "-                    Enumeration j = propertyRefs.elements();", "-                    while (i.hasMoreElements()) {", "-                        String fragment = (String) i.nextElement();", "-                        if (fragment == null) {", "-                            String propertyName = (String) j.nextElement();", "-                            if (expandedReferences.contains(propertyName)) {", "-                                throw new BuildException(\"Property \" + name", "-                                                         + \" was circularly \"", "-                                                         + \"defined.\");", "-                            }", "-                            expandedReferences.addElement(propertyName);", "-                            fragment = getProject().getProperty(propertyName);", "-                            if (fragment == null) {", "-                                if (props.containsKey(propertyName)) {", "-                                    fragment = props.getProperty(propertyName);", "-                                    resolved = false;", "-                                } else {", "-                                    fragment = \"${\" + propertyName + \"}\";", "-                                }", "-                            }", "-                        sb.append(fragment);", "-                    value = sb.toString();", "-                    props.put(name, value);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b8927f591f344fff9906d287e2c5396", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/PropertyFile.java", "commitBeforeChange": "334ac128fea4c6e8e76c7c8af8061a47b5019bf4", "commitAfterChange": "ba37bf7991e099b567f8cd5a09178893ff55bb9c", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 18, "signatureBeforeChange": "         private void executeInteger(String oldValue) throws BuildException", "signatureAfterChange": "         private void executeInteger(String oldValue) throws BuildException", "diff": ["-        private void executeInteger(String oldValue) throws BuildException ", "+        private void executeInteger(String oldValue) throws BuildException", "-            String newValue = \"\";", "-            int currentValue = 0;", "-            try ", "-            {", "-                currentValue = new Integer(oldValue).intValue();", "+            int value = 0;", "+            int newValue  = 0;", "+", "+            DecimalFormat fmt = (m_pattern != null) ? new DecimalFormat(m_pattern)", "+                                                    : new DecimalFormat();", "+", "+            if (m_value != null) {", "+                try {", "+                    value = fmt.parse(m_value).intValue();", "+                }", "+                catch (NumberFormatException nfe) { /* swollow */ }", "+                catch (ParseException pe)  { /* swollow */ }", "-            catch (NumberFormatException nfe) ", "-            {", "-                // Do nothing", "+            if (oldValue != null) {", "+                try {", "+                    newValue = fmt.parse(oldValue).intValue();", "+                }", "+                catch (NumberFormatException nfe) { /* swollow */ }", "+                catch (ParseException pe)  { /* swollow */ }", "+            }", "+            else if (m_default != null) {", "+                try {", "+                    newValue = fmt.parse(m_default).intValue();", "+                }", "+                catch (NumberFormatException nfe) { /* swollow */ }", "+                catch (ParseException pe)  { /* swollow */ }", "-            if (m_operation.equals(INCREMENT_OPER)) ", "-            {", "-                currentValue++;", "-                m_value = new String(\"\"+currentValue);", "+            if (m_operation == Operation.EQUALS_OPER) {", "+                newValue = value;", "-            else if (m_operation.equals(DECREMENT_OPER)) ", "-            {", "-                currentValue--;", "-                m_value = new String(\"\"+currentValue);", "+            else if (m_operation == Operation.INCREMENT_OPER) {", "+                newValue += value;", "+            }", "+            else if (m_operation == Operation.DECREMENT_OPER) {", "+                newValue -= value;", "+            }", "+            m_value = fmt.format(newValue);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab0149d9e2e19f0b2399ff35b0e93020", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "00d986bfdc4e0fd94afd90429515632e0d702e70", "commitAfterChange": "b5324fb76804f9e6ea2e7b7e5fda34874fd514cc", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public static void parsePropertyString(String value, Vector fragments,                                             Vector propertyRefs)         throws BuildException", "signatureAfterChange": "     public static void parsePropertyString(String value, Vector fragments,                                             Vector propertyRefs)         throws BuildException", "diff": ["-        throws BuildException {", "-        int prev = 0;", "-        int pos;", "-        //search for the next instance of $ from the 'prev' position", "-        while ((pos = value.indexOf(\"$\", prev)) >= 0) {", "-", "-            //if there was any text before this, add it as a fragment", "-            //TODO, this check could be modified to go if pos>prev;", "-            //seems like this current version could stick empty strings", "-            //into the list", "-            if (pos > 0) {", "-                fragments.addElement(value.substring(prev, pos));", "-            }", "-            //if we are at the end of the string, we tack on a $", "-            //then move past it", "-            if (pos == (value.length() - 1)) {", "-                fragments.addElement(\"$\");", "-                prev = pos + 1;", "-            } else if (value.charAt(pos + 1) != '{') {", "-                //peek ahead to see if the next char is a property or not", "-                //not a property: insert the char as a literal", "-                /*", "-                fragments.addElement(value.substring(pos + 1, pos + 2));", "-                prev = pos + 2;", "-                */", "-                if (value.charAt(pos + 1) == '$') {", "-                    //backwards compatibility two $ map to one mode", "-                    fragments.addElement(\"$\");", "-                    prev = pos + 2;", "-                } else {", "-                    //new behaviour: $X maps to $X for all values of X!='$'", "-                    fragments.addElement(value.substring(pos, pos + 2));", "-                    prev = pos + 2;", "-                }", "-                ", "-            } else {", "-                //property found, extract its name or bail on a typo", "-                int endName = value.indexOf('}', pos);", "-                if (endName < 0) {", "-                    throw new BuildException(\"Syntax error in property: \"", "-                                                 + value);", "-                }", "-                String propertyName = value.substring(pos + 2, endName);", "-                fragments.addElement(null);", "-                propertyRefs.addElement(propertyName);", "-                prev = endName + 1;", "-            }", "-        }", "-        //no more $ signs found", "-        //if there is any tail to the file, append it", "-        if (prev < value.length()) {", "-            fragments.addElement(value.substring(prev));", "-        }", "+        throws BuildException", "+    {", "+        PropertyHelper.parsePropertyStringDefault(value, fragments,", "+                propertyRefs);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7bbd2f8aeb3bf1c932bc80a34074b410", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "937810e0d1cac4ebcaf54e36c98cfc8b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/XmlLogger.java", "commitBeforeChange": "0ea3777ec4ae3e34aff17dfb05d1e6c818eb5bc0", "commitAfterChange": "bdd7cc0e9751c1a7378bc59a9825e6fb5b169c71", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "      public void messageLogged(BuildEvent event)", "signatureAfterChange": "      public void messageLogged(BuildEvent event)", "diff": ["-        if (taskElement != null) {", "-            taskElement.appendChild(messageElement);", "+        TimedElement parentElement = null;", "+        ", "+        Task task = event.getTask();", "+        Target target = event.getTarget();", "+        if (task != null) {", "+            parentElement = (TimedElement)tasks.get(task);", "-        else if (targetElement != null) {", "-            targetElement.appendChild(messageElement);", "+        if (parentElement == null && target != null) {", "+            parentElement = (TimedElement)targets.get(target);", "+        }", "+         ", "+        if (parentElement == null) {", "+            Stack threadStack = (Stack)threadStacks.get(Thread.currentThread());", "+            if (threadStack != null) {", "+                if (!threadStack.empty()) {", "+                    parentElement = (TimedElement)threadStack.peek();", "+                }", "+            }", "+        }", "+        ", "+        if (parentElement != null) {", "+            parentElement.element.appendChild(messageElement);", "-            buildElement.appendChild(messageElement);", "+            buildElement.element.appendChild(messageElement);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8d32ba376d9fe7e5abc066bdb55c276", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "3def9c5ed8dd13b7caf924d25dcd230391b17da6", "commitAfterChange": "2b925503d71972d8b782eedd6cdf75711377d7b0", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     private void checkIncludePatterns()", "signatureAfterChange": "     private void checkIncludePatterns()", "diff": ["+        ensureNonPatternSetsReady();", "+        int wildcardPatternIndex = 0;", "+            boolean wildcards = SelectorUtils.hasWildcards(includes[i]);", "+                    if (wildcards) {", "+                        wildcardPatternIndex++;", "+                    }", "+                if (wildcards) {", "+                    wildcardPatternIndex++;", "+                }", "-            newroots.put(SelectorUtils.rtrimWildcardTokens(", "-                includes[i]), includes[i]);", "+            if (wildcards) {", "+                newroots.put(includePatterns[wildcardPatternIndex++]", "+                             .rtrimWildcardTokens(), includes[i]);", "+            } else {", "+                newroots.put(new TokenizedPath(includes[i]), includes[i]);", "+            }", "-        if (newroots.containsKey(\"\") && basedir != null) {", "+        if (newroots.containsKey(TokenizedPath.EMPTY_PATH)", "+            && basedir != null) {", "-                String currentelement = (String) entry.getKey();", "+                TokenizedPath currentPath = (TokenizedPath) entry.getKey();", "+                String currentelement = currentPath.toString();", "-                String originalpattern = (String) entry.getValue();", "-                            myfile = findFile(basedir, currentelement, true);", "+                            myfile = currentPath.findFile(basedir, true);", "+                                if (!currentPath.toString()", "+                                    .equals(currentelement)) {", "+                                    currentPath =", "+                                        new TokenizedPath(currentelement);", "+                                }", "+", "-                    File f = findFile(basedir, currentelement, false);", "+                    File f = currentPath.findFile(basedir, false);", "+                        currentPath = new TokenizedPath(currentelement);", "+", "-                    if (!followSymlinks", "-                        && isSymlink(basedir, currentelement)) {", "+                    if (!followSymlinks && currentPath.isSymlink(basedir)) {", "+                        String originalpattern = (String) entry.getValue();"]}]}
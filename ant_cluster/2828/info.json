{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7aa681f30d16929e8c8d3604f98e7d64", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46f4c722c5a625319afd36e34be63f0d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/perforce/SimpleP4OutputHandler.java", "commitBeforeChange": "d74422c5bdb8c7a701452a41335f152e7dbff784", "commitAfterChange": "dace404953ec887dfb7a294442018535b8c6fb1d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void process(String line) throws BuildException", "signatureAfterChange": "     public void process(String line) throws BuildException", "diff": ["-        //p4 -s is unpredicatable. For example a server down", "-        //does not return error: markup", "+        //When a server is down, the code expects :", "+        //Perforce client error:", "+        //Connect to server failed; check $P4PORT.", "+        //TCP connect to localhost:1666 failed.", "+        //connect: localhost:1666: Connection refused", "-        //when running labelsync, if view elements are in sync, Perforce produces a line of output", "-        //looking like this one :", "-        //error: //depot/file2 - label in sync.", "-        if (parent.util.match(\"/error:/\", line) && !parent.util.match(\"/up-to-date/\", line)", "-            && !parent.util.match(\"/label in sync/\", line)) {", "-            throw new BuildException(line);", "-", "+        if (parent.util.match(\"/^error:/\", line)", "+            || parent.util.match(\"/^Perforce client error:/\", line)) {", "+            //when running labelsync, if view elements are in sync,", "+            //Perforce produces a line of output", "+            //looking like this one :", "+            //error: //depot/file2 - label in sync.", "+            if (!parent.util.match(\"/label in sync/\", line)", "+                && !parent.util.match(\"/up-to-date/\", line)) {", "+                parent.setInError(true);", "+            } else {", "+                //sync says \"error:\" when a file is up-to-date", "+                line = parent.util.substitute(\"s/^[^:]*: //\", line);", "+            }", "+        } else if (parent.util.match(\"/^info.*?:/\", line)) {", "+            //sometimes there's \"info1:", "+            line = parent.util.substitute(\"s/^[^:]*: //\", line);", "+        parent.log(line, parent.getInError() ? Project.MSG_ERR : Project.MSG_INFO);", "-        parent.log(parent.util.substitute(\"s/^[^:]*: //\", line), Project.MSG_INFO);", "-", "+        if (parent.getInError()) {", "+            parent.setErrorMessage(parent.getErrorMessage() + line + StringUtils.LINE_SEP);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4f5a39fac06cd0d35a314abb5daac93", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/selectors/TokenizedPath.java", "commitBeforeChange": "2b925503d71972d8b782eedd6cdf75711377d7b0", "commitAfterChange": "2c4faa154f069f3f69d6c3c95629409a7b8b0cc4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " TokenizedPath(String path, String[] tokens)", "signatureAfterChange": "     public TokenizedPath(TokenizedPath parent, String child)", "diff": ["+     */", "+    public TokenizedPath(TokenizedPath parent, String child) {", "+        if (parent.path.length() > 0", "+            && parent.path.charAt(parent.path.length() - 1)", "+               != File.separatorChar) {", "+            path = parent.path + File.separatorChar + child;", "+        } else {", "+            path = parent.path + child;", "+        }", "+        tokenizedPath = new String[parent.tokenizedPath.length + 1];", "+        System.arraycopy(parent.tokenizedPath, 0, tokenizedPath, 0,", "+                         parent.tokenizedPath.length);", "+        tokenizedPath[parent.tokenizedPath.length] = child;", "+    }"]}]}
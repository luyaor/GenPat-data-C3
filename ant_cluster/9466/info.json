{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "17c30fa0ac009fb2255c878a1f95c785", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "394110626c6eed6fbebcc43790b1b2a3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "32f323668f263fad0bc38a43c6d4e6a1f4579c8a", "commitAfterChange": "a920aa9f305e0f998c908798c99b6d108f5d4a58", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+        checkAttributes();", "+", "+        for (Iterator iter = sources.iterator(); iter.hasNext(); ) {", "+            Resource r = (Resource) iter.next();", "+            URLProvider up = (URLProvider) r.as(URLProvider.class);", "+            URL source = up.getURL();", "+", "+            File dest = destination;", "+            if (destination.isDirectory()) {", "+                if (mapperElement != null) {", "+                    String path = source.getPath();", "+                    if (path.endsWith(\"/\")) {", "+                        path = path.substring(0, path.length() - 1);", "+                    }", "+                    int slash = path.lastIndexOf(\"/\");", "+                    if (slash > -1) {", "+                        path = path.substring(slash + 1);", "+                    }", "+                    dest = new File(destination, path);", "+                } else {", "+                    FileNameMapper mapper = mapperElement.getImplementation();", "+                    String[] d = mapper.mapFileName(r.getName());", "+                    if (d == null || d.length != 1) {", "+                        log(\"skipping \" + r + \" - mapper can't handle it\",", "+                            Project.MSG_WARN);", "+                        continue;", "+                    }", "+                    dest = new File(destination, d[0]);", "+                }", "+            }", "-            doGet(logLevel, progress);", "+            doGet(source, dest, logLevel, progress);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9bb3191b391363a3f4b5c83c8fa6cca", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ResourceUtils.java", "commitBeforeChange": "8741512d8c2e4cad30f0c6e6134d9a793f00d4b7", "commitAfterChange": "9ae5d99ebe852fbb42a386b4c4969bb974e4d107", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public static void copyResource(Resource source, Resource dest,                             FilterSetCollection filters, Vector filterChains,                             boolean overwrite, boolean preserveLastModified, boolean append,                             String inputEncoding, String outputEncoding,                             Project project)         throws IOException", "signatureAfterChange": "     public static void copyResource(Resource source, Resource dest,                             FilterSetCollection filters, Vector filterChains,                             boolean overwrite, boolean preserveLastModified, boolean append,                             String inputEncoding, String outputEncoding,                             Project project)         throws IOException", "diff": ["+        } else if (source.as(FileProvider.class) != null", "+                   && dest.as(FileProvider.class) != null) {", "+            File sourceFile =", "+                ((FileProvider) source.as(FileProvider.class)).getFile();", "+            File destFile =", "+                ((FileProvider) dest.as(FileProvider.class)).getFile();", "+", "+            File parent = destFile.getParentFile();", "+            if (parent != null && !parent.isDirectory()", "+                && !destFile.getParentFile().mkdirs()) {", "+                throw new IOException(\"failed to create the parent directory\"", "+                                      + \" for \" + destFile);", "+            }", "+", "+            FileInputStream in = null;", "+            FileOutputStream out = null;", "+            FileChannel srcChannel = null;", "+            FileChannel destChannel = null;", "+", "+            try {", "+                in = new FileInputStream(sourceFile);", "+                out = new FileOutputStream(destFile);", "+                    ", "+                srcChannel = in.getChannel();", "+                destChannel = out.getChannel();", "+                ", "+                long position = 0;", "+                long count = srcChannel.size();", "+                while (position < count) {", "+                    position +=", "+                        srcChannel.transferTo(position, FileUtils.BUF_SIZE,", "+                                              destChannel);", "+                }", "+            } finally {", "+                FileUtils.close(srcChannel);", "+                FileUtils.close(destChannel);", "+                FileUtils.close(out);", "+                FileUtils.close(in);", "+            }"]}]}
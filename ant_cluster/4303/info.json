{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "01d5a0d4ee51fa6d0c2dd4756ad54cd1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bec1cc28dc00aba1e8809e8fe14ec0da", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipEncodingHelper.java", "commitBeforeChange": "cbd20a77eba224b21654251583971e054729f006", "commitAfterChange": "752d64fa43db2172327771ba4d36bee3f2d3b49a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "     static final byte[] encodeName(String name, String encoding)", "signatureAfterChange": "     static void appendSurrogate(ByteBuffer bb, char c)", "diff": ["-    static final byte[] encodeName(String name, String encoding) {", "+    static void appendSurrogate(ByteBuffer bb, char c) {", "+", "+        bb.put((byte) '%');", "+        bb.put((byte) 'U');", "+", "+        bb.put(HEX_DIGITS[(c >> 12)&0x0f]);", "+        bb.put(HEX_DIGITS[(c >> 8)&0x0f]);", "+        bb.put(HEX_DIGITS[(c >> 4)&0x0f]);", "+        bb.put(HEX_DIGITS[c & 0x0f]);", "+    }", "-            return name.getBytes();", "-", "-        Charset cs = Charset.forName(encoding);", "-        CharsetEncoder enc = cs.newEncoder();", "-", "-        enc.onMalformedInput(CodingErrorAction.REPORT);", "-        enc.onUnmappableCharacter(CodingErrorAction.REPORT);", "-", "-        CharBuffer cb = CharBuffer.wrap(name);", "-        ByteBuffer out = ByteBuffer.allocate(name.length()", "-                                             + (name.length() + 1) / 2);", "-", "-        while (cb.remaining() > 0) {", "-            CoderResult res = enc.encode(cb, out,true);", "-", "-            if (res.isUnmappable() || res.isMalformed()) {", "-", "-                // write the unmappable characters in utf-16", "-                // pseudo-URL encoding style to ByteBuffer.", "-                if (res.length() * 6 > out.remaining()) {", "-                    out = growBuffer(out,out.position() + res.length() * 6);", "-                }", "-", "-                for (int i=0; i<res.length(); ++i) {", "-                    out.put((byte) '%');", "-                    out.put((byte) 'U');", "-", "-                    char c = cb.get();", "-", "-                    out.put(HEX_DIGITS[(c >> 12)&0x0f]);", "-                    out.put(HEX_DIGITS[(c >> 8)&0x0f]);", "-                    out.put(HEX_DIGITS[(c >> 4)&0x0f]);", "-                    out.put(HEX_DIGITS[c & 0x0f]);", "-                }", "-", "-            } else if (res.isOverflow()) {", "-", "-                out = growBuffer(out, 0);", "-", "-            } else if (res.isUnderflow()) {", "-", "-                enc.flush(out);", "-                break;", "-", "-            }", "-        }", "-", "-        byte [] ret = new byte[out.position()];", "-        out.rewind();", "-        out.get(ret);", "-", "-        return ret;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d220a95e4e6075410be7e2db55be7537", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/tar/TarUtils.java", "commitBeforeChange": "b43f4224d8fe9d1e7d628e88df394a7dfed46d1b", "commitAfterChange": "2e5b53fa106b848646493cb6f6ea74616973aca0", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public static long parseOctal(byte[] header, int offset, int length)", "signatureAfterChange": "     public static long parseOctal(final byte[] buffer, final int offset, final int length)", "diff": ["-     */", "-    public static long parseOctal(byte[] header, int offset, int length) {", "-        long    result = 0;", "-        boolean stillPadding = true;", "-        int     end = offset + length;", "-        for (int i = offset; i < end; ++i) {", "-            if (header[i] == 0) {", "+     */", "+    public static long parseOctal(final byte[] buffer, final int offset, final int length) {", "+        long    result = 0;", "+        int     end = offset + length;", "+        int     start = offset;", "+", "+        if (length < 2){", "+            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");", "+        }", "+", "+        if (buffer[start] == 0) {", "+            return 0L;", "+        }", "+", "+        // Skip leading spaces", "+        while (start < end){", "+            if (buffer[start] == ' '){", "+                start++;", "+            } else {", "+        }", "-            if (header[i] == (byte) ' ' || header[i] == '0') {", "-                if (stillPadding) {", "-                    continue;", "-                }", "+        // Must have trailing NUL or space", "+        byte trailer;", "+        trailer = buffer[end-1];", "+        if (trailer == 0 || trailer == ' '){", "+            end--;", "+        } else {", "+            throw new IllegalArgumentException(", "+                    exceptionMessage(buffer, offset, length, end-1, trailer));", "+        }", "+        // May have additional NUL or space", "+        trailer = buffer[end-1];", "+        if (trailer == 0 || trailer == ' '){", "+            end--;", "+        }", "-                if (header[i] == (byte) ' ') {", "-                    break;", "-                }", "-            }", "-", "-            stillPadding = false;", "+        for ( ;start < end; start++) {", "+            final byte currentByte = buffer[start];", "-            result = (result << 3) + (header[i] - '0');", "+            if (currentByte < '0' || currentByte > '7'){", "+                throw new IllegalArgumentException(", "+                        exceptionMessage(buffer, offset, length, start, currentByte));", "+            }", "+            result = (result << 3) + (currentByte - '0'); // convert from ASCII"]}]}
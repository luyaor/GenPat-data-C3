{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "debe12f45b8109386ed6f986fd62b7a1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a428f08deaf69a77881ea8d6f4595c88", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Patch.java", "commitBeforeChange": "1c38f4ed52ca23857b7b83ca909cd1748dea88d6", "commitAfterChange": "6035bbf18dc7df5472368d91d69de03b1819c800", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        if (patchFile == null) {", "+        if (!havePatchfile) {", "-        if (!patchFile.exists()) {", "-            throw new BuildException(\"patchfile \"+patchFile+\" doesn\\'t exist\", ", "-                                     location);", "-        }", "-        StringBuffer command = new StringBuffer(\"patch -i \"+patchFile+\" \");", "+        cmd.setExecutable(\"patch\");", "-        if (backup) {", "-            command.append(\"-b \");", "-        }", "-        ", "-        if (ignoreWhitespace) {", "-            command.append(\"-l \");", "-        }", "-        ", "-        if (strip >= 0) {", "-            command.append(\"-p\"+strip+\" \");", "-        }", "-        ", "-        if (quiet) {", "-            command.append(\"-s \");", "-        }", "-        ", "-        if (reverse) {", "-            command.append(\"-R \");", "-        }", "-        ", "-            command.append(originalFile);", "-        } ", "+            cmd.addValue(originalFile.getAbsolutePath());", "+        }", "-        run(command.toString());", "+        Execute exe = new Execute(new LogStreamHandler(this, Project.MSG_INFO,", "+                                                       Project.MSG_WARN), ", "+                                  null);", "+        exe.setCommandline(cmd.getCommandline());", "+        try {", "+            exe.execute();", "+        } catch (IOException e) {", "+            throw new BuildException(e, location);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8b84d4da443e9cc3b795295ea12e5c4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Cvs.java", "commitBeforeChange": "1c38f4ed52ca23857b7b83ca909cd1748dea88d6", "commitAfterChange": "6035bbf18dc7df5472368d91d69de03b1819c800", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "          public void execute() throws BuildException", "signatureAfterChange": "          public void execute() throws BuildException", "diff": ["+", "+        // We can't do it ourselves as jCVS is GPLed, a third party task ", "+        // outside of jakarta repositories would be possible though (SB).", "-\tStringBuffer sb=new StringBuffer();", "-\tsb.append(\" cvs \");", "+        Commandline toExecute = new Commandline();", "+", "+        toExecute.setExecutable(\"cvs\");", "-            sb.append(\"-d \").append(cvsRoot).append(\" \");", "+            toExecute.addValue(\"-d\");", "+            toExecute.addValue(cvsRoot);", "-", "-        sb.append(noexec ? \"-n \" : \"\")", "-            .append(quiet  ? \"-q \" : \"\")", "-            .append(command).append(\" \");", "-\t\t", "-\tif (tag!=null)", "-            sb.append(\"-r \").append(tag).append(\" \");", "-", "-       if (date!=null)", "-            sb.append(\"-D \").append(date).append(\" \");", "+        if (noexec) {", "+            toExecute.addValue(\"-n\");", "+        }", "+        if (quiet) {", "+            toExecute.addValue(\"-q\");", "+        }", "+        toExecute.addValue(command);", "+        toExecute.addLine(cmd.getCommandline());", "-            sb.append(pack);", "+            toExecute.addValue(pack);", "-        run(sb.toString());", "+        Execute exe = new Execute(new LogStreamHandler(this, Project.MSG_INFO,", "+                                                       Project.MSG_WARN), ", "+                                  null);", "+", "+        exe.setAntRun(project);", "+        if (dest == null) dest = project.getBaseDir();", "+        exe.setWorkingDirectory(dest);", "+", "+        exe.setCommandline(toExecute.getCommandline());", "+        try {", "+            exe.execute();", "+        } catch (IOException e) {", "+            throw new BuildException(e, location);", "+        }"]}]}
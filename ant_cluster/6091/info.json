{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "916f291a7f38d8aed8eacb224a73e368", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "743a8b05bf0a91f00f9465098c8d9f7e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/GenericDeploymentTool.java", "commitBeforeChange": "ebb7f7ca8c9b5990f6418557719641f8345516e8", "commitAfterChange": "febf421b27c789d4b426d3d59b24dc42e07785b1", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 22, "signatureBeforeChange": "     protected boolean checkInterfaceClasses(String entryName, File entryFile, Hashtable checkEntries)", "signatureAfterChange": "      private void addInterface(Class theInterface, Hashtable checkEntries)", "diff": ["+", "+    private void addInterface(Class theInterface, Hashtable checkEntries) {", "+        if (!theInterface.getName().startsWith(\"java\")) // do not add system interfaces", "+        { ", "+            File interfaceFile = new File(srcDir.getAbsolutePath() ", "+                                        + File.separatorChar ", "+                                        + theInterface.getName().replace('.',File.separatorChar)", "+                                        + \".class\"", "+                                        );", "+            if (interfaceFile.exists() && interfaceFile.isFile())", "+            {", "+                checkEntries.put(theInterface.getName().replace('.',File.separatorChar)+\".class\",", "+                                 interfaceFile);", "+                Class[] superInterfaces = theInterface.getInterfaces();", "+                for (int i = 0; i < superInterfaces.length; i++) {", "+                    addInterface(superInterfaces[i], checkEntries);", "+                }", "+            }", "+        }", "+    }", "-     */", "-    protected boolean checkInterfaceClasses(String entryName, File entryFile, Hashtable checkEntries)", "-    {", "-        boolean addit = false;", "-        try", "-        {", "-            if (entryName.endsWith(\".class\")) //sanity check", "-            {", "-                // Load class to check superclass and interfaces", "-                ClassLoader loader = getClassLoaderForBuild();", "-                String classname = entryName.substring(0,entryName.lastIndexOf(\".class\")).replace(File.separatorChar,'.');", "-                Class c = loader.loadClass(classname);", "-", "-                Class[] interfaces = c.getInterfaces();", "-                for (int i = 0; i < interfaces.length; i++){", "-                    if (!interfaces[i].getName().equals(\"javax.ejb.EJBObject\")){ // do not add home interfaces  ", "-                        File superClassFile = new File(srcDir.getAbsolutePath() ", "-                                    + File.separatorChar ", "-                                    + interfaces[i].getName().replace('.',File.separatorChar)", "-                                    + \".class\"", "-                                    );", "-                        if (superClassFile.exists() && superClassFile.isFile()){", "-                            log(\"looking at interface \" + interfaces[i].getName(),  Project.MSG_VERBOSE);", "-                        ", "-                            addit = checkInterfaceClasses(interfaces[i].getName().replace('.',File.separatorChar)+\".class\", ", "-                                          superClassFile, checkEntries);", "-                            if (addit)", "-                            {", "-                                log(\"adding at interface \" + interfaces[i].getName(),  Project.MSG_VERBOSE);", "-                                checkEntries.put(interfaces[i].getName().replace('.',File.separatorChar)+\".class\",", "-                                         superClassFile);", "-                            }", "-                        }", "-                    }", "-                    else {", "-                        addit = true;", "-                    }", "-                }", "-            }", "-        }", "-        catch(ClassNotFoundException cnfe){", "-            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"", "-                            + \". Details: \"", "-                            + cnfe.getMessage();", "-            throw new BuildException(cnfmsg, cnfe);", "-        }", "-        return addit;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9eafa20208379d37097eb717a2a78b9c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/GenericDeploymentTool.java", "commitBeforeChange": "ebb7f7ca8c9b5990f6418557719641f8345516e8", "commitAfterChange": "febf421b27c789d4b426d3d59b24dc42e07785b1", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "     protected void checkSuperClasses(String entryName, File entryFile, Hashtable checkEntries)", "signatureAfterChange": "           private void addSuperClass(Class superClass, Hashtable checkEntries)", "diff": ["+    private void addSuperClass(Class superClass, Hashtable checkEntries) {", "+    ", "+        if (!superClass.getName().startsWith(\"java\"))", "+        {", "+            File superClassFile = new File(srcDir.getAbsolutePath() ", "+                                            + File.separatorChar ", "+                                            + superClass.getName().replace('.',File.separatorChar)", "+                                            + \".class\");", "+            if (superClassFile.exists() && superClassFile.isFile())", "+            {", "+                checkEntries.put(superClass.getName().replace('.',File.separatorChar) + \".class\", ", "+                                 superClassFile);", "+                ", "+                // now need to get super classes and interfaces for this class", "+                Class[] superInterfaces = superClass.getInterfaces();", "+                for (int i = 0; i < superInterfaces.length; i++) {", "+                    addInterface(superInterfaces[i], checkEntries);", "+                }", "+                ", "+                addSuperClass(superClass.getSuperclass(), checkEntries);", "+            }               ", "+        }", "+    }", "-     */", "-    protected void checkSuperClasses(String entryName, File entryFile, Hashtable checkEntries)", "-    {", "-        try", "-        {", "-            if (entryName.endsWith(\".class\")) //sanity check", "-            {", "-                // Load class to check superclass and interfaces", "-                ClassLoader loader = getClassLoaderForBuild();", "-                String classname = entryName.substring(0,entryName.lastIndexOf(\".class\")).replace(File.separatorChar,'.');", "-                Class c = loader.loadClass(classname);", "-", "-                Class s = c.getSuperclass();", "-                if (!s.getName().equals(\"java.lang.Object\"))", "-                {", "-                    File superClassFile = new File(srcDir.getAbsolutePath() ", "-                                    + File.separatorChar ", "-                                    + s.getName().replace('.',File.separatorChar)", "-                                    + \".class\"", "-                                    );", "-                    if (superClassFile.exists() && superClassFile.isFile()){", "-                        checkSuperClasses(s.getName().replace('.',File.separatorChar) + \".class\", superClassFile, checkEntries);", "-                        checkEntries.put(s.getName().replace('.',File.separatorChar) + \".class\", superClassFile);", "-                    }               ", "-                }", "-            }", "-        }", "-        catch(ClassNotFoundException cnfe){", "-            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"", "-                        + \". Details: \"", "-                + cnfe.getMessage();", "-            throw new BuildException(cnfmsg, cnfe);", "-        }", "-    }"]}]}
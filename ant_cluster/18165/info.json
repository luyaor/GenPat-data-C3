{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c44eeb16cc0f284f8efdb9bcc7c9fb3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d113478548654ee671f6a48cb722147", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/BuildNumber.java", "commitBeforeChange": "1d4c24c80f746b199fb3ee48ff98fbee300b211a", "commitAfterChange": "f7c0a7741dae7278cf3ec00c0440548f188a2f59", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void validate()         throws BuildException", "signatureAfterChange": "     private void validate()         throws BuildException", "diff": ["-                m_file.createNewFile();", "+                FileUtils.newFileUtils().createNewFile(m_file);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58663c5c9fc9b9009246e0d03ff7f8b5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/listeners/DefaultProjectListener.java", "commitBeforeChange": "2ddb4ff944dd3ed84fd6d6ed7b08ba753334f4de", "commitAfterChange": "adc80fb83ffa4c84d39c60b66c010a7baf6aff53", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     protected void output( final String data )", "signatureAfterChange": "     protected void output( final String data )", "diff": ["-            output( m_targetName + \":\\n\" );", "+            System.out.println( m_targetName + \":\\n\" );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd8a7ac0c87ba8ce27bc84b88025a9e6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "80a86aadd3850c2eb010a1d1796918666408954d", "commitAfterChange": "7820c64af8cfa6122b1afe00622c3118ce935a36", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                        (sun.misc.BASE64Encoder) Class.forName(\"sun.misc.BASE64Encoder\").newInstance();", "+                        (sun.misc.BASE64Encoder) ", "+                        Class.forName(\"sun.misc.BASE64Encoder\").newInstance();", "-                connection.setRequestProperty (\"Authorization\", \"Basic \" + encoding);", "+                connection.setRequestProperty (\"Authorization\", ", "+                                               \"Basic \" + encoding);", "-                if(httpConnection.getResponseCode()==HttpURLConnection.HTTP_NOT_MODIFIED)  {", "-                    //not modified so no file download. just return instead", "-                    //and trace out something so the user doesn't think that the", "-                    //download happened when it didnt", "+                if(httpConnection.getResponseCode() ", "+                   == HttpURLConnection.HTTP_NOT_MODIFIED)  {", "+                    //not modified so no file download. just return", "+                    //instead and trace out something so the user", "+                    //doesn't think that the download happened when it", "+                    //didnt", "-                if(httpConnection.getResponseCode()==HttpURLConnection.HTTP_UNAUTHORIZED)  {", "+                if(httpConnection.getResponseCode()", "+                   == HttpURLConnection.HTTP_UNAUTHORIZED)  {", "-            //REVISIT: at this point even non HTTP connections may support the if-modified-since", "-            //behaviour -we just check the date of the content and skip the write if it is not", "-            //newer. Some protocols (FTP) dont include dates, of course.", "+            //REVISIT: at this point even non HTTP connections may", "+            //support the if-modified-since behaviour -we just check", "+            //the date of the content and skip the write if it is not", "+            //newer. Some protocols (FTP) dont include dates, of", "+            //course.", "-                  System.out.print(\".\");", "+                    System.out.print(\".\");", "-              System.out.println();", "+                System.out.println();", "-            //if (and only if) the use file time option is set, then the", "-            //saved file now has its timestamp set to that of the downloaded file", "+            //if (and only if) the use file time option is set, then", "+            //the saved file now has its timestamp set to that of the", "+            //downloaded file", "-                        +((remoteTimestamp==0)?\" - using current time instead\":\"\"));", "+                        +((remoteTimestamp==0) ", "+                          ? \" - using current time instead\"", "+                          : \"\"));", "-                    touchFile(dest,remoteTimestamp);", "+                    FileUtils.newFileUtils()", "+                        .setFileLastModified(dest, remoteTimestamp);", "-        }", "-    }"]}]}
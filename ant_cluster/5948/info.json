{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8df6c376b38ae514b196528182d87e4d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3402a2809fadfc549e1cbf8f3c5d4238", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "cbd20a77eba224b21654251583971e054729f006", "commitAfterChange": "752d64fa43db2172327771ba4d36bee3f2d3b49a", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     protected void writeLocalFileHeader(ZipEntry ze) throws IOException", "signatureAfterChange": "     protected void writeLocalFileHeader(ZipEntry ze) throws IOException", "diff": ["-        byte[] name = getBytes(ze.getName());", "+        boolean encodable = this.zipEncoding.canEncode(ze.getName());", "+        ByteBuffer name = this.zipEncoding.encode(ze.getName());", "+", "-            ze.addExtraField(new UnicodePathExtraField(ze.getName(), name));", "+", "+            /*            if (!encodable) { -- FIXME decide what to*/", "+                ze.addExtraField(new UnicodePathExtraField(ze.getName(),", "+                                                           name.array(),", "+                                                           name.arrayOffset(),", "+                                                           name.limit()));", "+            /* } */", "+", "-                byte[] commentB = getBytes(comm);", "-                ze.addExtraField(new UnicodeCommentExtraField(comm, commentB));", "+", "+                boolean commentEncodable = this.zipEncoding.canEncode(comm);", "+", "+                /*            if (!commentEncodable) { -- FIXME decide what to*/", "+                    ByteBuffer commentB = this.zipEncoding.encode(comm);", "+                    ze.addExtraField(new UnicodeCommentExtraField(comm,", "+                                                                  commentB.array(),", "+                                                                  commentB.arrayOffset(),", "+                                                                  commentB.limit())", "+                                     );", "+                /* } */", "-        writeOut(ZipShort.getBytes(name.length));", "+        writeOut(ZipShort.getBytes(name.limit()));", "-        writeOut(name);", "-        written += name.length;", "+        writeOut(name.array(), name.arrayOffset(), name.limit());", "+        written += name.limit();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9263a09f33ac29321ed56b0376acbbab", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "f83f5c68c975f31a384cc24e94be4e5ebfa2da4d", "commitAfterChange": "f463bd2cab8b132695d8bf60c889212628eba281", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String inputEncoding, String outputEncoding,                          Project project)         throws IOException", "signatureAfterChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String inputEncoding, String outputEncoding,                          Project project)         throws IOException", "diff": ["-        if (overwrite || !destFile.exists() ||", "-            destFile.lastModified() < sourceFile.lastModified()) {", "+        if (overwrite || !destFile.exists()", "+            || destFile.lastModified() < sourceFile.lastModified()) {", "-                        in =", "-                            new BufferedReader(new InputStreamReader(", "-                                                                     new FileInputStream(sourceFile),", "-                                                                     inputEncoding));", "+                        InputStreamReader isr", "+                            = new InputStreamReader(new FileInputStream(sourceFile),", "+                                                    inputEncoding);", "+                        in = new BufferedReader(isr);", "-                        out =", "-                            new BufferedWriter(new OutputStreamWriter(", "-                                                                      new FileOutputStream(destFile),", "-                                                                      outputEncoding));", "+                        OutputStreamWriter osw", "+                            = new OutputStreamWriter(new FileOutputStream(destFile),", "+                                                     outputEncoding);", "+                        out = new BufferedWriter(osw);", "-                            // this should not happen, because the lines are returned with the end of line delimiter", "+                            // this should not happen, because the lines are", "+                            // returned with the end of line delimiter", "-                     char buffer[] = new char[1024*8];", "+                     char[] buffer = new char[1024 * 8];"]}]}
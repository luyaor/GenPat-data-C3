{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "63881625a662e62576efbb8a1d5a3f94", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1aed0a8df40353468adf65077075f0ed", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/PropertyHelper.java", "commitBeforeChange": "f9de93c35b4a4327c0cf29afd25ecf9c486f7647", "commitAfterChange": "902b72ec83e985a35e2e9fc26e41e2319cc7ea1e", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public Object parseProperties(String value) throws BuildException", "signatureAfterChange": "     public Object parseProperties(String value) throws BuildException", "diff": ["-        if (value == null || \"\".equals(value)) {", "-            return value;", "-        }", "-        ParsePosition pos = new ParsePosition(0);", "-        Object o = parseNextProperty(value, pos);", "-        if (o != null && pos.getIndex() == value.length()) {", "-            return o;", "-        }", "-        StringBuffer sb = new StringBuffer(value.length() * 2);", "-        if (o == null) {", "-            sb.append(value.charAt(pos.getIndex()));", "-            pos.setIndex(pos.getIndex() + 1);", "-        } else {", "-            sb.append(o);", "-        }", "-        while (pos.getIndex() < value.length()) {", "-            o = parseNextProperty(value, pos);", "-            if (o == null) {", "-                sb.append(value.charAt(pos.getIndex()));", "-                pos.setIndex(pos.getIndex() + 1);", "-            } else {", "-                sb.append(o);", "-            }", "-        }", "-        return sb.toString();", "+        return new ParseProperties(getProject(), getExpanders(), this)", "+            .parseProperties(value);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "239968c24a7150544ebef9531b835e27", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "be12707c63314ce0314959ff551e37fe59b83943", "commitAfterChange": "4f3e4e1690289144b15872597586ed34ae92efb5", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "     public static String replaceProperties(Project project, String value, Hashtable keys )         throws BuildException", "signatureAfterChange": "     public static String replaceProperties(Project project, String value, Hashtable keys )             throws BuildException", "diff": ["-        throws BuildException", "-    {", "-        // XXX use Map instead of proj, it's too heavy", "+            throws BuildException {", "+        if (value == null) {", "+            return null;", "+        }", "-        // XXX need to replace this code with something better.", "-        StringBuffer sb=new StringBuffer();", "-        int i=0;", "-        int prev=0;", "-        // assert value!=nil", "-        int pos;", "-        while( (pos=value.indexOf( \"$\", prev )) >= 0 ) {", "-            if(pos>0) {", "-                sb.append( value.substring( prev, pos ) );", "+        Vector fragments = new Vector();", "+        Vector propertyRefs = new Vector();", "+        parsePropertyString(value, fragments, propertyRefs);", "+", "+        StringBuffer sb = new StringBuffer();", "+        Enumeration i = fragments.elements();", "+        Enumeration j = propertyRefs.elements();", "+        while (i.hasMoreElements()) {", "+            String fragment = (String)i.nextElement();", "+            if (fragment == null) {", "+                String propertyName = (String)j.nextElement();", "+                if (!keys.containsKey(propertyName)) {", "+                    project.log(\"Property ${\" + propertyName + \"} has not been set\", Project.MSG_VERBOSE);", "+                }", "+                fragment = (keys.containsKey(propertyName)) ? (String) keys.get(propertyName) ", "+                                                            : \"${\" + propertyName + \"}\"; ", "+            sb.append(fragment);", "+        }                        ", "+        ", "+        return sb.toString();", "+    }", "-                sb.append('$');", "-            else if (value.charAt( pos + 1 ) != '{' ) {", "-                sb.append( value.charAt( pos + 1 ) );", "-                prev=pos+2; // XXX", "-                int endName=value.indexOf( '}', pos );", "-                if( endName < 0 ) {", "-                    throw new BuildException(\"Syntax error in prop: \" +", "-                                             value );", "-                String n=value.substring( pos+2, endName );", "-                if (!keys.containsKey(n)) {", "-                    project.log(\"Property ${\" + n + \"} has not been set\", Project.MSG_VERBOSE);", "-                }", "-                ", "-                String v = (keys.containsKey(n)) ? (String) keys.get(n) : \"${\"+n+\"}\"; ", "-                ", "-                //System.out.println(\"N: \" + n + \" \" + \" V:\" + v);", "-                sb.append( v );", "-                prev=endName+1;", "-        if( prev < value.length() ) sb.append( value.substring( prev ) );", "-        //      System.out.println(\"After replace: \" + sb.toString());", "-        // System.out.println(\"Before replace: \" + value);", "-        return sb.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab0149d9e2e19f0b2399ff35b0e93020", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "00d986bfdc4e0fd94afd90429515632e0d702e70", "commitAfterChange": "b5324fb76804f9e6ea2e7b7e5fda34874fd514cc", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public static void parsePropertyString(String value, Vector fragments,                                             Vector propertyRefs)         throws BuildException", "signatureAfterChange": "     public static void parsePropertyString(String value, Vector fragments,                                             Vector propertyRefs)         throws BuildException", "diff": ["-        throws BuildException {", "-        int prev = 0;", "-        int pos;", "-        //search for the next instance of $ from the 'prev' position", "-        while ((pos = value.indexOf(\"$\", prev)) >= 0) {", "-", "-            //if there was any text before this, add it as a fragment", "-            //TODO, this check could be modified to go if pos>prev;", "-            //seems like this current version could stick empty strings", "-            //into the list", "-            if (pos > 0) {", "-                fragments.addElement(value.substring(prev, pos));", "-            }", "-            //if we are at the end of the string, we tack on a $", "-            //then move past it", "-            if (pos == (value.length() - 1)) {", "-                fragments.addElement(\"$\");", "-                prev = pos + 1;", "-            } else if (value.charAt(pos + 1) != '{') {", "-                //peek ahead to see if the next char is a property or not", "-                //not a property: insert the char as a literal", "-                /*", "-                fragments.addElement(value.substring(pos + 1, pos + 2));", "-                prev = pos + 2;", "-                */", "-                if (value.charAt(pos + 1) == '$') {", "-                    //backwards compatibility two $ map to one mode", "-                    fragments.addElement(\"$\");", "-                    prev = pos + 2;", "-                } else {", "-                    //new behaviour: $X maps to $X for all values of X!='$'", "-                    fragments.addElement(value.substring(pos, pos + 2));", "-                    prev = pos + 2;", "-                }", "-                ", "-            } else {", "-                //property found, extract its name or bail on a typo", "-                int endName = value.indexOf('}', pos);", "-                if (endName < 0) {", "-                    throw new BuildException(\"Syntax error in property: \"", "-                                                 + value);", "-                }", "-                String propertyName = value.substring(pos + 2, endName);", "-                fragments.addElement(null);", "-                propertyRefs.addElement(propertyName);", "-                prev = endName + 1;", "-            }", "-        }", "-        //no more $ signs found", "-        //if there is any tail to the file, append it", "-        if (prev < value.length()) {", "-            fragments.addElement(value.substring(prev));", "-        }", "+        throws BuildException", "+    {", "+        PropertyHelper.parsePropertyStringDefault(value, fragments,", "+                propertyRefs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e88f1fde7de8dac304cb97d00aaea066", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "c4782a847fbe7aacd68eca6fb71bff313e94e645", "commitAfterChange": "551b204c245d4861589a0be50f453507e3c72e81", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "     public String toURI(String path)", "signatureAfterChange": "     public String toURI(String path)", "diff": ["-", "-        int i = 0;", "-        for (; i < len; i++) {", "-            ch = path.charAt(i);", "-            // if it's not an ASCII character, break here, and use UTF-8 encoding", "-            if (ch >= 128)", "-                break;", "-            if (gNeedEscaping[ch]) {", "-                sb.append('%');", "-                sb.append(gAfterEscaping1[ch]);", "-                sb.append(gAfterEscaping2[ch]);", "-                // record the fact that it's escaped", "-            }", "-            else {", "-                sb.append((char)ch);", "-            }", "+        try {", "+            sb.append(Locator.encodeUri(path));", "+        } catch (UnsupportedEncodingException exc) {", "+            throw new BuildException(exc);", "-", "-        // we saw some non-ascii character", "-        if (i < len) {", "-            // get UTF-8 bytes for the remaining sub-string", "-            byte[] bytes = null;", "-            byte b;", "-            try {", "-                bytes = path.substring(i).getBytes(Locator.URI_ENCODING);", "-            } catch (java.io.UnsupportedEncodingException e) {", "-                // should never happen", "-                throw new BuildException(e);", "-            }", "-            len = bytes.length;", "-", "-            // for each byte", "-            for (i = 0; i < len; i++) {", "-                b = bytes[i];", "-                // for non-ascii character: make it positive, then escape", "-                if (b < 0) {", "-                    ch = b + 256;", "-                    sb.append('%');", "-                    sb.append(gHexChs[ch >> 4]);", "-                    sb.append(gHexChs[ch & 0xf]);", "-                }", "-                else if (gNeedEscaping[b]) {", "-                    sb.append('%');", "-                    sb.append(gAfterEscaping1[b]);", "-                    sb.append(gAfterEscaping2[b]);", "-                }", "-                else {", "-                    sb.append((char)b);", "-                }", "-            }", "-        }", "-"]}]}
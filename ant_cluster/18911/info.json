{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a0489e711e40d769b70bf2ecbe0dba5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aeed9c7cea7b1a7b82e11e29f6fdb48c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/VerifyJar.java", "commitBeforeChange": "d99445bb67a0feecbc78238c54ff468fc72d2315", "commitAfterChange": "4cf9ef09a97e2c53eacb9e629d8470ab856acc2c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        final boolean hasFileset = filesets.size() > 0;", "-        if (!hasJar && !hasFileset) {", "+        if (!hasJar && !hasResources()) {", "-            Vector sources = createUnifiedSources();", "-            for (int i = 0; i < sources.size(); i++) {", "-                FileSet fs = (FileSet) sources.elementAt(i);", "-                //get all included files in a fileset", "-                DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "-                String[] jarFiles = ds.getIncludedFiles();", "-                File baseDir = fs.getDir(getProject());", "-", "-                //loop through all jars in the fileset", "-                for (int j = 0; j < jarFiles.length; j++) {", "-                    String jarFile = jarFiles[j];", "-                    File jarSource = new File(baseDir, jarFile);", "-                    verifyOneJar(jarSource);", "-                }", "+            Path sources = createUnifiedSourcePath();", "+            Iterator iter = sources.iterator();", "+            while (iter.hasNext()) {", "+                FileResource fr = (FileResource) iter.next();", "+                verifyOneJar(fr.getFile());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b52d00c0738a45d454c75aa79f7b6c08", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/event/EventBus.java", "commitBeforeChange": "a18fbb4649bfe9577aa4648d3ab2cfb7712453e8", "commitAfterChange": "c70641243c667093d23f689c7c28866fa661b1af", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void postEvent(EventObject event)", "signatureAfterChange": "     public void postEvent(EventObject event)", "diff": ["-        synchronized(_memberSet) {", "-            // XXX need to insert code here to test whether we are being", "-            // executed by the AWTEventQueue, or some other thread. If ", "-            // the latter, then we need to insert our execution on the ", "-            // AWTEventQueue thread as all code executing commands assumes ", "-            // that context.", "+        EventDispatcher disp = new EventDispatcher(event);", "-\t\t\tfor(int i = 0; i < _memberSet.length; i++) {", "-\t\t\t\tif(_memberSet[i] == null) continue;", "+        // Events need to be dispatched on the AWTEvent thread, as the UI", "+        // components assume that.", "+        if(SwingUtilities.isEventDispatchThread()) {", "+            disp.run();", "+        }", "+        else {", "+            SwingUtilities.invokeLater(disp);", "+        }", "+    }", "-\t\t\t\tIterator it = _memberSet[i].iterator();", "-\t\t\t\twhile(it.hasNext()) {", "-\t\t\t\t\tBusMember next = (BusMember) it.next();", "-\t\t\t\t\tBusFilter filter = next.getBusFilter();", "-\t\t\t\t\tif(filter == null || filter.accept(event)) {", "-\t\t\t\t\t\tnext.eventPosted(event);", "-\t\t\t\t\t}", "-\t\t\t\t\t// Check to see if the member cancelled the event. If so", "-\t\t\t\t\t// then don't send it on to the other members.", "-\t\t\t\t\tif(event instanceof AntEvent &&", "-\t\t\t\t\t   ((AntEvent)event).isCancelled()) break;", "-\t\t\t\t}", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e81ad6d3d94b8aa7fba342a7766dbb13", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Expand.java", "commitBeforeChange": "a7d38cf2639a85056062bdc2c3da1067cb84644a", "commitAfterChange": "f027ced8e7799c021f5678ba73fba07faca9de8f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        if (source == null && filesets.size() == 0) {", "-            throw new BuildException(\"src attribute and/or filesets must be \"", "+        if (source == null && resources.size() == 0) {", "+            throw new BuildException(\"src attribute and/or resources must be \"", "-        if (filesets.size() > 0) {", "-            for (int j = 0, size = filesets.size(); j < size; j++) {", "-                FileSet fs = (FileSet) filesets.elementAt(j);", "-                DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "-                File fromDir = fs.getDir(getProject());", "+\tIterator iter = resources.iterator();", "+\twhile (iter.hasNext()) {", "+\t    Resource r = (Resource) iter.next();", "+\t    if (!r.isExists()) {", "+\t\tcontinue;", "+\t    }", "-                String[] files = ds.getIncludedFiles();", "-                for (int i = 0; i < files.length; ++i) {", "-                    File file = new File(fromDir, files[i]);", "-                    expandFile(FILE_UTILS, file, dest);", "-                }", "-            }", "-        }", "+\t    if (r instanceof FileResource) {", "+\t\texpandFile(FILE_UTILS, ((FileResource) r).getFile(), dest);", "+\t    } else {", "+\t\texpandResource(r, dest);", "+\t    }", "+\t}"]}]}
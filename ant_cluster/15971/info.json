{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3f6eddd3ddb9b2ad676ab3e8967645e7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29245f7daaea1c48b03dc3b177496b84", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/junit/src/main/org/apache/tools/ant/taskdefs/optional/junit/formatter/BaseFormatter.java", "commitBeforeChange": "9ff0d86547933b2d071b31d0afb51780597a051a", "commitAfterChange": "59c0b1595d0d41e479765772788b976d9429c24d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void setOutput(OutputStream value)", "signatureAfterChange": "      public void init(Properties props) throws BuildException", "diff": ["-    public void setOutput(OutputStream value) {", "-        try {", "-            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(value, \"UTF8\")), true);", "-        } catch (IOException e) {", "-            // should not happen", "-            throw new IllegalStateException(e.getMessage());", "-        }", "+    public void init(Properties props) throws BuildException {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cb869a3d249cf8f4949a767091c4c85", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/api/DefaultTaskContext.java", "commitBeforeChange": "21a88b996ae1899e19a7062eeb3fe214cb2cbe4f", "commitAfterChange": "80712682289dee8200289b46365bdb5066d1d2f7", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public Object resolveValue( final String property )         throws TaskException", "signatureAfterChange": "     public DefaultTaskContext( final Map contextData )", "diff": ["+     */", "+    public DefaultTaskContext( final Map contextData )", "+    {", "+        this( contextData );", "+    }", "-     */", "-    public Object resolveValue( final String property )", "-        throws TaskException", "-    {", "-        try { return PropertyUtil.resolveProperty( property, this, false ); }", "-        catch( final PropertyException pe )", "-        {", "-            throw new TaskException( \"Error resolving \" + property + \" due to \" + pe.getMessage(),", "-                                     pe );", "-        }"]}]}
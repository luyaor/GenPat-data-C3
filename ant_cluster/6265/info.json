{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af960cdd84a36bddce80c7385aaccc35", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "575bdc75f4c9115dd6348621d7c3954d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/launch/Locator.java", "commitBeforeChange": "a500ff1e5013cbbb7830d5b47fa24dc4db1bc400", "commitAfterChange": "bcf84f5f14a9f80df80ca5836fc5b08d8be7c295", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public static String fromURI(String uri)", "signatureAfterChange": "     public static String fromURIJava13(String uri)", "diff": ["-                    throw (IllegalArgumentException) e2;", "+     */", "+    public static String fromURIJava13(String uri) {", "-            throw new IllegalArgumentException(\"Can only handle valid file: URIs\");", "+            throw new IllegalArgumentException(ERROR_NOT_FILE_URI +uri);", "-            throw new IllegalStateException(\"Could not convert URI to path: \"", "+            throw new IllegalStateException(\"Could not convert URI \"+uri+\" to path: \""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e7641633d0eb480d5380ceaf22c4328", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/launch/Locator.java", "commitBeforeChange": "d6ec4ccf3cb256b133215abe7db08131c4b58a4d", "commitAfterChange": "1f0bd8f40148f09a029ba4a4d61a9c1293199b53", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public static String fromURI(String uri)", "signatureAfterChange": "     public static String fromURI(String uri)", "diff": ["-        // #8031: first try Java 1.4.", "+        // #buzilla8031: first try Java 1.4.", "+        String result = null;", "+        //result = fromUriJava14(uri);", "+        if (result == null) {", "+            result = fromURIJava13(uri);", "+        }", "+        return result;", "+    }", "-                    = uriClazz.getMethod(\"create\", new Class[] {String.class});", "-                Object uriObj = createMethod.invoke(null, new Object[] {encodeURI(uri)});", "-                    = File.class.getConstructor(new Class[] {uriClazz});", "-                File f = (File) fileConst.newInstance(new Object[] {uriObj});", "-                    throw new IllegalArgumentException(\"Bad URI \"+uri+ \":\"+e2.getMessage(),e2);", "-        return fromURIJava13(uri);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "80480489c57a4b6a7e5277583d2a06fe", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f7a52b013243e9728ec8e0b08572494", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/bootstrap/org/apache/ant/builder/Builder.java", "commitBeforeChange": "6243b5ffe48c2c3f094b97a0356bf4f52a653c31", "commitAfterChange": "cae2d444f7e933d5d55072f4b546b27ce174a720", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private void addJavaFiles(List files, File dir)", "signatureAfterChange": "     private void addJavaFiles(List files, File dir, boolean recurse)", "diff": ["-    private void addJavaFiles(List files, File dir) {", "-        File[] javaFiles = dir.listFiles(new FilenameFilter() {", "-            public boolean accept(File dir, String name) {", "-                return name.endsWith(\".java\");", "-            }", "-        });", "+    private void addJavaFiles(List files, File dir, boolean recurse) {", "+        File[] javaFiles = dir.listFiles();", "-                files.add(javaFiles[i]);", "+                if (javaFiles[i].isDirectory() && recurse) {", "+                    addJavaFiles(files, javaFiles[i], recurse);", "+                } else if (javaFiles[i].getName().endsWith(\".java\")) {", "+                    files.add(javaFiles[i]);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3bfec226349e27c54474a42ce6a0576", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "aa43e37a025cdf54b8914b8283e57419a253ed59", "commitAfterChange": "dee95e3acc5154aee03ff5f91f9a56426ae79f3f", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 29, "signatureBeforeChange": "     protected void writeDataDescriptor(ZipEntry ze) throws IOException", "signatureAfterChange": "     protected void writeDataDescriptor(ZipEntry ze) throws IOException", "diff": ["-        writeOut(ZipLong.getBytes(entry.getCrc()));", "-        writeOut(ZipLong.getBytes(entry.getCompressedSize()));", "-        writeOut(ZipLong.getBytes(entry.getSize()));", "-        // CheckStyle:MagicNumber OFF", "-        written += 16;", "-        // CheckStyle:MagicNumber ON", "+        writeOut(ZipLong.getBytes(ze.getCrc()));", "+        int sizeFieldSize = WORD;", "+        if (!hasZip64Extra(ze)) {", "+            writeOut(ZipLong.getBytes(ze.getCompressedSize()));", "+            writeOut(ZipLong.getBytes(ze.getSize()));", "+        } else {", "+            sizeFieldSize = DWORD;", "+            writeOut(ZipEightByteInteger.getBytes(ze.getCompressedSize()));", "+            writeOut(ZipEightByteInteger.getBytes(ze.getSize()));", "+        }", "+        written += 2 * WORD + 2 * sizeFieldSize;"]}]}
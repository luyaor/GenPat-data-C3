{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6b928891e9fdc080ff0657e06ad86142", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e8f735cb5543b80fcfb0049b6f5c106", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "9e89cec932a798d958cf6bb310936d9a00c09a9d", "commitAfterChange": "7f01b5d12108c35313f1ba97391944ba751e935b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private void checkIncludePatterns()", "signatureAfterChange": "     private void checkIncludePatterns()", "diff": ["-            // check whether the candidate new pattern has a parent", "-            boolean hasParent = false;", "-            Enumeration myenum = newroots.keys();", "-            // logically, there should be at most one child pattern present", "-            // let's use a vector though to be sure", "-            Vector vdelete = new Vector();", "-            while (myenum.hasMoreElements()) {", "-                String existingpattern = (String) myenum.nextElement();", "-                // check whether the existing pattern is a child of the new pattern", "-                if (existingpattern.length() >= newpattern.length()) {", "-                    if (existingpattern.indexOf(newpattern) == 0) {", "-                        vdelete.add(existingpattern);", "-                    }", "-                }", "-                // check whether the new pattern is a child of the existing pattern", "-                if (existingpattern.length() <= newpattern.length()) {", "-                    if (newpattern.indexOf(existingpattern) == 0) {", "-                        hasParent = true;", "-                        break;", "-                    }", "-                }", "-            }", "-            // add the new pattern if does not have parents", "-            if (!hasParent) {", "-                newroots.put(newpattern, includes[icounter]);", "-                // remove child patterns", "-                for (int icounter2 = 0; icounter2 < vdelete.size(); icounter2++) {", "-                    newroots.remove(vdelete.elementAt(icounter2));", "-                }", "-            }", "+            newroots.put(newpattern, includes[icounter]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82a083de9a5ab400ec3123b85c2f27f9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "2e6482b287ca240581633145f270a8706b82c34e", "commitAfterChange": "57f5357a1ca7f0208c1e7a2ee791e837935d6645", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private void checkIncludePatterns()", "signatureAfterChange": "     private void checkIncludePatterns()", "diff": ["-            boolean hasParent=false;", "+            boolean hasParent = false;", "+            // logically, there should be at most one child pattern present", "+            // let's use a vector though to be sure", "+            Vector vdelete = new Vector();", "-                String existingpattern= (String) myenum.nextElement();", "+                String existingpattern = (String) myenum.nextElement();", "+                // check whether the existing pattern is a child of the new pattern", "+                if (existingpattern.length() >= newpattern.length()) {", "+                    if (existingpattern.indexOf(newpattern) == 0) {", "+                        vdelete.add(existingpattern);", "+                    }", "+                }", "+                // check whether the new pattern is a child of the existing pattern", "-                    if (newpattern.indexOf(existingpattern)==0) {", "-                        hasParent=true;", "+                    if (newpattern.indexOf(existingpattern) == 0) {", "+                        hasParent = true;", "+                        break;", "+            // add the new pattern if does not have parents", "-                newroots.put(newpattern,includes[icounter]);", "+                newroots.put(newpattern, includes[icounter]);", "+                // remove child patterns", "+                for (int icounter2 = 0; icounter2 < vdelete.size(); icounter2++) {", "+                    newroots.remove(vdelete.elementAt(icounter2));", "+                }", "-            File myfile=new File(basedir, currentelement);", "+            File myfile = new File(basedir, currentelement);", "-                    if (isIncluded(currentelement) ", "-                        && currentelement.length()>0) {", "-                        accountForIncludedDir(currentelement,myfile,true);", "+                    if (isIncluded(currentelement)", "+                        && currentelement.length() > 0) {", "+                        accountForIncludedDir(currentelement, myfile, true);", "-                            if (currentelement.charAt(currentelement.length()", "-                                                      -1 ) ", "+                            if (currentelement.charAt(currentelement.length()-1)", "-                    String originalpattern= ", "+                    String originalpattern =", "-                        accountForIncludedFile(currentelement,myfile);", "+                        accountForIncludedFile(currentelement, myfile);"]}]}
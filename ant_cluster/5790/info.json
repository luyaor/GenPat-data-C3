{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "117c2ee82e9c7410ce9c7208971ce103", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2772dabde9245045f7241962d1fe61be", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/deployer/DefaultDeployer.java", "commitBeforeChange": "e7ab62bc9179b392804835d02155e43d3d2cf5d6", "commitAfterChange": "2e6e170fb375181f4438e1de44808c7adab508a2", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private File[] getOptionalPackagesFor( final File typeLibrary )         throws Exception", "signatureAfterChange": "     private void handleType( final Deployment deployment,                              final String roleShorthand,                              final String typeName,                              final String className )         throws Exception", "diff": ["-    private File[] getOptionalPackagesFor( final File typeLibrary )", "-        final URL url = new URL( \"jar:\" + typeLibrary.getCanonicalFile().toURL() + \"!/\" );", "-        final JarURLConnection connection = (JarURLConnection)url.openConnection();", "-        final Manifest manifest = connection.getManifest();", "-        final Extension[] available = Extension.getAvailable( manifest );", "-        final Extension[] required = Extension.getRequired( manifest );", "-            final String message1 =", "-                REZ.getString( \"available-extensions.notice\", Arrays.asList( available ) );", "-            getLogger().debug( message1 );", "-            final String message2 =", "-                REZ.getString( \"required-extensions.notice\", Arrays.asList( required ) );", "-            getLogger().debug( message2 );", "-        }", "-", "-        final ArrayList dependencies = new ArrayList();", "-        final ArrayList unsatisfied = new ArrayList();", "-", "-        m_packageManager.scanDependencies( required,", "-                                           available,", "-                                           dependencies,", "-                                           unsatisfied );", "-", "-        if( 0 != unsatisfied.size() )", "-        {", "-            final int size = unsatisfied.size();", "-            for( int i = 0; i < size; i++ )", "-            {", "-                final Extension extension = (Extension)unsatisfied.get( i );", "-                final Object[] params = new Object[]", "-                {", "-                    extension.getExtensionName(),", "-                    extension.getSpecificationVendor(),", "-                    extension.getSpecificationVersion(),", "-                    extension.getImplementationVendor(),", "-                    extension.getImplementationVendorId(),", "-                    extension.getImplementationVersion(),", "-                    extension.getImplementationURL()", "-                };", "-                final String message = REZ.format( \"missing.extension\", params );", "-                getLogger().warn( message );", "-            }", "-", "-                REZ.getString( \"unsatisfied.extensions.error\", new Integer( size ) );", "-            throw new Exception( message );", "-", "-        final OptionalPackage[] packages =", "-            (OptionalPackage[])dependencies.toArray( new OptionalPackage[ 0 ] );", "-        return OptionalPackage.toFiles( packages );", "+     */", "+    private void handleType( final Deployment deployment,", "+                             final String roleShorthand,", "+                             final String typeName,", "+                             final String className )", "+        throws Exception", "+    {", "+        // TODO - detect duplicates", "+        final String role = getRoleForName( roleShorthand );", "+        final Class roleType = deployment.getClassLoader().loadClass( role );", "+        final DefaultTypeFactory factory = deployment.getFactory( roleType );", "+        factory.addNameClassMapping( typeName, className );", "+        m_typeManager.registerType( roleType, typeName, factory );", "+", "+        if( getLogger().isDebugEnabled() )", "+        {", "+            final String message =", "+                REZ.getString( \"register-type.notice\", roleShorthand, typeName );", "+            getLogger().debug( message );", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaf96e19e12a7340864c1a1abb6ac888", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/classloader/DefaultClassLoaderManager.java", "commitBeforeChange": "274da3301287be067b66a5778b27bfa98ef0a662", "commitAfterChange": "b91e4a3c1d8310dea42c2c353ab016d9c5425109", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private void getOptionalPackagesFor( final File jarFile, final List packages )         throws Exception", "signatureAfterChange": "     private OptionalPackage[] getOptionalPackagesFor( final OptionalPackage pkg )         throws Exception", "diff": ["-    private void getOptionalPackagesFor( final File jarFile, final List packages )", "-        final URL url = new URL( \"jar:\" + jarFile.getCanonicalFile().toURL() + \"!/\" );", "-        final JarURLConnection connection = (JarURLConnection)url.openConnection();", "-        final Manifest manifest = connection.getManifest();", "-        final Extension[] available = Extension.getAvailable( manifest );", "-        if( getLogger().isDebugEnabled() )", "+     */", "+    private OptionalPackage[] getOptionalPackagesFor( final OptionalPackage pkg )", "+        throws Exception", "+    {", "+        // Locate the optional packages that provide the required extesions", "+        final Extension[] required = pkg.getRequiredExtensions();", "+        final ArrayList packages = new ArrayList();", "+        for( int i = 0; i < required.length; i++ )", "-            final String message1 =", "-                REZ.getString( \"available-extensions.notice\", Arrays.asList( available ) );", "-            getLogger().debug( message1 );", "-            final String message2 =", "-                REZ.getString( \"required-extensions.notice\", Arrays.asList( required ) );", "-            getLogger().debug( message2 );", "+            final Extension extension = required[i ];", "+            final OptionalPackage optionalPackage = m_extensionManager.getOptionalPackage( extension );", "+            if( optionalPackage == null )", "+            {", "+                final String message =", "+                    REZ.getString( \"unsatisfied.extension.error\",", "+                                   pkg.getFile(),", "+                                   extension.getExtensionName(),", "+                                   extension.getSpecificationVersion() );", "+                throw new Exception( message );", "+            }", "+            packages.add( optionalPackage );", "-        final ArrayList dependencies = new ArrayList();", "-        final ArrayList unsatisfied = new ArrayList();", "-", "-        m_packageManager.scanDependencies( required,", "-                                           available,", "-                                           dependencies,", "-                                           unsatisfied );", "-", "-        if( 0 != unsatisfied.size() )", "-        {", "-            final String message =", "-                REZ.getString( \"unsatisfied.extensions.error\", new Integer( unsatisfied.size() ) );", "-            throw new Exception( message );", "-        }", "-", "-        final int count = dependencies.size();", "-        for( int i = 0; i < count; i++ )", "-        {", "-            final OptionalPackage optionalPackage = (OptionalPackage)dependencies.get(i );", "-            packages.add( optionalPackage.getFile() );", "-        }", "+        return (OptionalPackage[])packages.toArray( new OptionalPackage[packages.size() ] );"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0f2fa11f9c748ba703492a1356ebeca6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10eb641dd4fc6738d29ec8631fed622e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Tstamp.java", "commitBeforeChange": "c697c4d2d093adc00d508f6f6f91797d3c9ffe3e", "commitAfterChange": "65d02e393d8709dd9fd6f5d48b502b72507bbb86", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-\ttry {", "-\t    Calendar d=Calendar.getInstance();", "-\t    StringBuffer tstamp=new StringBuffer();", "-\t    tstamp.append( d.get(Calendar.YEAR));", "-\t    if(d.get(Calendar.MONTH) < 9) tstamp.append(\"0\");", "-\t    tstamp.append( 1+d.get(Calendar.MONTH));", "-\t    if( d.get(Calendar.DAY_OF_MONTH) < 10 ) tstamp.append(\"0\");", "-\t    tstamp.append(d.get(Calendar.DAY_OF_MONTH));", "-\t    project.setProperty( \"DSTAMP\" , tstamp.toString());", "-\t    ", "-\t    if( d.get(Calendar.HOUR_OF_DAY) < 10 ) tstamp.append(\"0\");", "-\t    tstamp.append( d.get(Calendar.HOUR_OF_DAY));", "-\t    ", "-\t    if( d.get(Calendar.MINUTE) < 10 ) tstamp.append(\"0\");", "-\t    tstamp.append(d.get(Calendar.MINUTE));", "-\t    project.setProperty( \"TSTAMP\" , tstamp.toString());", "-\t} catch (Exception ex) {", "-\t    ex.printStackTrace();", "-\t}", "-", "+        try {", "+            Date d = new Date();", "+            ", "+            SimpleDateFormat dstamp = new SimpleDateFormat (\"yyyymmdd\");", "+            project.setProperty(\"DSTAMP\", dstamp.format(d));", "+    ", "+            SimpleDateFormat tstamp = new SimpleDateFormat (\"hhmm\");", "+            project.setProperty(\"TSTAMP\", tstamp.format(d));", "+    ", "+            SimpleDateFormat today  = new SimpleDateFormat (\"MMMM d yyyy\", Locale.US);", "+            project.setProperty(\"TODAY\", today.format(d));", "+        } catch (Exception ex) {", "+            ex.printStackTrace();", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b8119f1fcb6cae70fca39497bce6200", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/jsp/compilers/JasperC.java", "commitBeforeChange": "3e35ab334b7e5ecd691960f61b58069130c4a2b0", "commitAfterChange": "6acb5be183f9d189628089d186ede0caf887cf0c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private Commandline setupJasperCommand()", "signatureAfterChange": "     private Commandline setupJasperCommand()", "diff": ["-    /* ------------------------------------------------------------ */", "+     */", "-        if (jspc.getDestdir() != null) {", "-            cmd.createArgument().setValue(\"-d\");", "-            cmd.createArgument().setFile(jspc.getDestdir());", "-        }", "-        if (jspc.getPackage() != null){", "-            cmd.createArgument().setValue(\"-p\");", "-            cmd.createArgument().setValue(jspc.getPackage());", "-        }", "-        if (jspc.getVerbose() != 0) {", "-            cmd.createArgument().setValue(\"-v\" + jspc.getVerbose());", "-        }", "+        addArg(cmd,\"-d\",jspc.getDestdir());", "+        addArg(cmd,\"-p\",jspc.getPackage());", "+        addArg(cmd,\"-v\"+jspc.getVerbose());", "+        addArg(cmd,\"-uriroot\",jspc.getUriroot());", "+        addArg(cmd,\"-uribase\",jspc.getUribase());", "+        addArg(cmd,\"-ieplugin\",jspc.getIeplugin());", "-            cmd.createArgument().setValue(\"-mapped\");", "-        }", "-        if (jspc.getIeplugin() != null){", "-            cmd.createArgument().setValue(\"-ieplugin\");", "-            cmd.createArgument().setValue(jspc.getIeplugin());", "-        }", "-        if (jspc.getUriroot() != null){", "-            cmd.createArgument().setValue(\"-uriroot\");", "-            cmd.createArgument().setValue(jspc.getUriroot().toString());", "-        }", "-        if (jspc.getUribase() != null){", "-            cmd.createArgument().setValue(\"-uribase\");", "-            cmd.createArgument().setValue(jspc.getUribase().toString());", "+            addArg(cmd,\"-mapped\");", "+        }       ", "+        if(jspc.getWebApp()!=null) {", "+            File dir=jspc.getWebApp().getDirectory();", "+            addArg(cmd,\"-webapp\",dir);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4972f90921ed4a46bae4e0ecc71087cc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/PropertyFile.java", "commitBeforeChange": "c70641243c667093d23f689c7c28866fa661b1af", "commitAfterChange": "08eef4e8a6bbe820b1622250bdc08de9b0d0cb15", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private void writeFile() throws BuildException", "signatureAfterChange": "      private void writeFile() throws BuildException", "diff": ["-    */", "-            // Write the message if we have one.", "-            if (m_comment != null) ", "-            {", "-                // FIXME: would like to use \\n as the newline rather than \\\\.", "-                StringTokenizer tok = new StringTokenizer(m_comment, \"\\\\\");", "-                while (tok.hasMoreTokens()) ", "-                {", "-                    bos.write(\"# \".getBytes());", "-                    bos.write(((String)tok.nextToken()).getBytes());", "-                    bos.write(NEWLINE.getBytes());", "-                }", "-                bos.write(NEWLINE.getBytes());", "-                bos.flush();", "-            }", "+// Write the message if we have one.", "+//            if (m_comment != null) ", "+//            {", "+//                // FIXME: would like to use \\n as the newline rather than \\\\.", "+//                StringTokenizer tok = new StringTokenizer(m_comment, \"\\\\\");", "+//                  while (tok.hasMoreTokens()) ", "+//                  {", "+//                      bos.write(\"# \".getBytes());", "+//                      bos.write(((String)tok.nextToken()).getBytes());", "+//                      bos.write(NEWLINE.getBytes());", "+//                  }", "+//                  bos.write(NEWLINE.getBytes());", "+//                  bos.flush();", "+//            }", "+//            Enumeration enumValues = m_properties.elements();", "+//            Enumeration enumKeys = m_properties.keys();", "+//            while (enumKeys.hasMoreElements()) ", "+//            {", "+//                bos.write(((String)enumKeys.nextElement()).getBytes());", "+//                bos.write(\"=\".getBytes());", "+//                bos.write(((String)enumValues.nextElement()).getBytes());", "+//                bos.write(NEWLINE.getBytes());", "+//                bos.flush();", "+//            }", "-            Enumeration enumValues = m_properties.elements();", "-            Enumeration enumKeys = m_properties.keys();", "-            while (enumKeys.hasMoreElements()) ", "-            {", "-                bos.write(((String)enumKeys.nextElement()).getBytes());", "-                bos.write(\"=\".getBytes());", "-                bos.write(((String)enumValues.nextElement()).getBytes());", "-                bos.write(NEWLINE.getBytes());", "-                bos.flush();", "-            }", "+            // Properties.store is not available in JDK 1.1", "+            Method m = ", "+                Properties.class.getMethod(\"store\", ", "+                                           new Class[] {", "+                                               OutputStream.class,", "+                                               String.class}", "+                                           );", "+            m.invoke(m_properties, new Object[] {bos, m_comment});", "+", "+        } catch (NoSuchMethodException nsme) {", "+            m_properties.save(bos, m_comment);", "+        } catch (InvocationTargetException ite) {", "+            Throwable t = ite.getTargetException();", "+            throw new BuildException(t, location);", "+        } catch (IllegalAccessException iae) {", "+            // impossible", "+            throw new BuildException(iae, location);", "-            throw new BuildException(ioe.toString());", "+            throw new BuildException(ioe, location);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e2248514ef2e43a8fa5710d1831e1f8e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9195e98534f10a655925b25978d65d2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/regexp/JakartaOroRegexp.java", "commitBeforeChange": "dfc1957328247cc79d3df7eb6f6c113e58c1dc31", "commitAfterChange": "be53ecfdc2ff0f8e955eada253ea8d3db38addeb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public String substitute(String input, String argument, int options)         throws BuildException", "signatureAfterChange": "      public String substitute(String input, String argument, int options)         throws BuildException", "diff": ["-        // Determine replacement Type", "-        int sOptions = getSubsOptions(options);", "+        // translate \\1 to $1 so that the Perl5Substitution will work", "+        StringBuffer subst = new StringBuffer();", "+        for (int i=0; i<argument.length(); i++) {", "+            char c = argument.charAt(i);", "+            if (c == '\\\\') {", "+                if (++i < argument.length()) {", "+                    c = argument.charAt(i);", "+                    int value = Character.digit(c, 10);", "+                    if (value > -1) {", "+                        subst.append(\"$\").append(value);", "+                    } else {", "+                        subst.append(c);", "+                    }", "+                } else {", "+                    // XXX - should throw an exception instead?", "+                    subst.append('\\\\');", "+                }", "+            } else {", "+                subst.append(c);", "+            }", "+        }", "+        ", "-        Substitution s = new Perl5Substitution(argument, sOptions);", "+        Substitution s = ", "+            new Perl5Substitution(subst.toString(), ", "+                                  Perl5Substitution.INTERPOLATE_ALL);", "-                               input);", "+                               input,", "+                               getSubsOptions(options));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e94d8adf0ae6aedaf65992c666ed7c43", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "1fa5ccf5682707c6b5e33482b641009e48190013", "commitAfterChange": "bec2a0777e910345fa7877d5aaa209ddde0937e3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 6, "signatureBeforeChange": "     protected static boolean match(String pattern, String str)", "signatureAfterChange": "     protected static boolean match(String pattern, String str, boolean isCaseSensitive)", "diff": ["+     */", "+    protected static boolean match(String pattern, String str, boolean isCaseSensitive) {", "-                if (ch != '?' && ch != strArr[i]) {", "-                    return false; // Character mismatch", "+                if (ch != '?') {", "+                    if (isCaseSensitive && ch != strArr[i]) {", "+                        return false;// Character mismatch", "+                    }", "+                    if (!isCaseSensitive && Character.toUpperCase(ch) !=", "+                        Character.toUpperCase(strArr[i])) {", "+                        return false; // Character mismatch", "+                    }", "-", "+        ", "-            if (ch != '?' && ch != strArr[strIdxStart]) {", "-                return false;", "+            if (ch != '?') {", "+                if (isCaseSensitive && ch != strArr[strIdxStart]) {", "+                    return false;// Character mismatch", "+                }", "+                if (!isCaseSensitive && Character.toUpperCase(ch) !=", "+                    Character.toUpperCase(strArr[strIdxStart])) {", "+                    return false;// Character mismatch", "+                }", "-            if (ch != '?' && ch != strArr[strIdxEnd]) {", "-                return false;", "+            if (ch != '?') {", "+                if (isCaseSensitive && ch != strArr[strIdxEnd]) {", "+                    return false;// Character mismatch", "+                }", "+                if (!isCaseSensitive && Character.toUpperCase(ch) !=", "+                    Character.toUpperCase(strArr[strIdxEnd])) {", "+                    return false;// Character mismatch", "+                }", "-strLoop:", "+            strLoop:", "-                    if (ch != '?' && ch != strArr[strIdxStart+i+j]) {", "-                        continue strLoop;", "+                    if (ch != '?') {", "+                        if (isCaseSensitive && ch != strArr[strIdxStart+i+j]) {", "+                            continue strLoop;", "+                        }", "+                        if (!isCaseSensitive && Character.toUpperCase(ch) !=", "+                            Character.toUpperCase(strArr[strIdxStart+i+j])) {", "+                            continue strLoop;", "+                        }"]}]}
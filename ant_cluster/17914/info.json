{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6628adad2ef4f9197e305b3c3a993e19", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "465b6ad1b80ed18a2e79680f98dd5ec4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/AbstractClasspathResource.java", "commitBeforeChange": "28ca0623119a788c754840b78a50b052518b2006", "commitAfterChange": "211d0a8ea6b0e7f4c28b83abab1961b40bba90e7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public InputStream getInputStream() throws IOException", "signatureAfterChange": "     public InputStream getInputStream() throws IOException", "diff": ["+", "+        final ClassLoaderWithFlag classLoader = getClassLoader();", "+        return !classLoader.needsCleanup()", "+            ? openInputStream(classLoader.getLoader())", "+            : new FilterInputStream(openInputStream(classLoader.getLoader())) {", "+                    public void close() throws IOException {", "+                        FileUtils.close(in);", "+                        classLoader.cleanup();", "+                    }", "+                    protected void finalize() throws Throwable {", "+                        try {", "+                            close();", "+                        } finally {", "+                            super.finalize();", "+                        }", "+                    }", "+                };", "+    }", "-", "-        final ClassLoader classLoader = cl;", "-        return !clNeedsCleanup", "-            ? openInputStream(cl)", "-            : new FilterInputStream(openInputStream(cl)) {", "-                    public void close() throws IOException {", "-                        FileUtils.close(in);", "-                        ((AntClassLoader) classLoader).cleanup();", "-                    }", "-                    protected void finalize() throws Throwable {", "-                        try {", "-                            close();", "-                        } finally {", "-                            super.finalize();", "-                        }", "-                    }", "-                };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e05a13d5df4a496ef0ce09d0d833ea3c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/Frame.java", "commitBeforeChange": "83dc385bd01fbc8ee2fb166b9a5605bdc6958d76", "commitAfterChange": "bf844382c856f7b51c56024189c93f11d34cb720", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     protected void executeTasks(Iterator taskIterator)          throws ExecutionException", "signatureAfterChange": "     protected void executeTasks(Iterator taskIterator)          throws ExecutionException", "diff": ["-            Throwable failureCause = null;", "-            ImportInfo importInfo", "-                 = componentManager.getDefinition(model.getType());", "-            if (importInfo == null) {", "-                throw new ExecutionException(\"There is no definition for the <\"", "-                     + model.getType() + \"> element\", model.getLocation());", "-            }", "-", "-                if (importInfo.getDefinitionType() == AntLibrary.TASKDEF) {", "-                    TaskContext taskContext = configureTask(model);", "-                    eventSupport.fireTaskStarted(model);", "-", "-                    ClassLoader currentLoader", "-                         = setContextLoader(taskContext.getLoader());", "-                    taskContext.execute();", "-                    setContextLoader(currentLoader);", "-                    taskContext.destroy();", "+                Object component = componentManager.createComponent(model);", "+                if (component instanceof Task) {", "+                    execService.executeTask((Task)component);", "-                    // typedef", "-                    String typeId = model.getAspectValue(ANT_ASPECT, \"id\");", "-                    Object typeInstance = configureType(model.getType(), model);", "+                    String typeId ", "+                        = model.getAspectValue(Constants.ANT_ASPECT, \"id\");", "-                        setDataValue(typeId, typeInstance, true);", "+                        setDataValue(typeId, component, true);", "-                failureCause = e;", "-                failureCause = ee;", "-            } finally {", "-                eventSupport.fireTaskFinished(model, failureCause);"]}]}
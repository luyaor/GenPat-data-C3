{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "21ec108ea7371105aa4e38a10074dc99", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29d426aff4a1b7b97a08f116d8b57715", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/executor/DefaultExecutor.java", "commitBeforeChange": "a3bafc4dc65a60091a09c190752987fa491412e1", "commitAfterChange": "c748e33dc59acb6c057543af70964487dedf97c3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "      protected final void doDispose( final Task task, final Configuration taskModel )         throws TaskException", "signatureAfterChange": "      protected final void doDispose( final Task task, final Configuration taskModel )         throws TaskException", "diff": ["-                throw new TaskException( \"Error disposing task \" +  taskModel.getName() + \" at \" +", "-                                         taskModel.getLocation() + \"(Reason: \" +", "-                                         throwable.getMessage() + \")\", throwable );", "+                final String message =", "+                    REZ.getString( \"dispose.error\",", "+                                   taskModel.getName(),", "+                                   taskModel.getLocation(),", "+                                   throwable.getMessage() );", "+                throw new TaskException( message, throwable );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46e285ac94f5a5c7dd982338fe0ff533", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/workspace/DefaultTaskContext.java", "commitBeforeChange": "179bc428c9da672a95511cdfe407058c888532e1", "commitAfterChange": "49c2480ab253ca2b0109bb0d9b8ac8432519a9ba", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private Object get( final String key )", "signatureAfterChange": "     public void error( final String message )", "diff": ["-     */", "-    private Object get( final String key )", "-    {", "-        final Object data = m_contextData.get( key );", "-        if( null != data )", "-        {", "-            //            if( data instanceof Resolvable )", "-            //            {", "-            //                return ( (Resolvable)data ).resolve( this );", "-            //            }", "-            return data;", "-        }", "-", "-        // If data was null, check the parent", "-        if( null == m_parent )", "-        {", "-            // There was no parent, and no data", "-            return null;", "-        }", "-", "-        return m_parent.getProperty( key );", "+     */", "+    public void error( final String message )", "+    {", "+        m_logger.error( message );", "+    }"]}]}
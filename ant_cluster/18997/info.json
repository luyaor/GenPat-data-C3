{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9464a1d9371ed232b06a07874d90e201", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1587e67bf0832b6b7ff90b54858e7b92", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/bootstrap/org/apache/ant/builder/BuildHelper.java", "commitBeforeChange": "752f49d5b18f9743f8e4a6dbdc8065d240d9c97a", "commitAfterChange": "da4e1a3aa99899d6aecc6d14c2a7498fa51647aa", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "     protected void addFileSetToPath(String pathName, String filesetDir,                                     String filesetIncludes)", "signatureAfterChange": "     protected void addFileSetToPath(String pathName, String filesetDir,                                     String filesetIncludes)", "diff": ["-        for (int i = 0; i < files.length; ++i) {", "-            if (currentPath == null || currentPath.length() == 0) {", "-                currentPath = files[i].getPath();", "-            } else {", "-                currentPath = currentPath + File.pathSeparator", "-                     + files[i].getPath();", "+        if (files != null) {", "+            for (int i = 0; i < files.length; ++i) {", "+                if (currentPath == null || currentPath.length() == 0) {", "+                    currentPath = files[i].getPath();", "+                } else {", "+                    currentPath = currentPath + File.pathSeparator", "+                         + files[i].getPath();", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "388bc8477489bc572034ac873a9155cf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/cli/org/apache/ant/cli/Commandline.java", "commitBeforeChange": "7499c443d67445ea8fd0b8f4bd56c72251b18bf4", "commitAfterChange": "b7e43ad8c5906ae2b6d6b42f8b2715dc7d2e7a16", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void parseArguments(String[] args)          throws ConfigException", "signatureAfterChange": "     private void parseArguments(String[] args)          throws ConfigException", "diff": ["-        for (int i = 0; i < args.length; i++) {", "-            String arg = args[i];", "+", "+        int i = 0;", "+        while (i < args.length) {", "+            String arg = args[i++];", "-                    String url = args[i + 1];", "+                    String url = args[i++];", "-                    i++;", "-                    File logFile = new File(args[i + 1]);", "-                    i++;", "+                    File logFile = new File(args[i++]);", "-                    listeners.add(args[i + 1]);", "-                    i++;", "+                    listeners.add(args[i++]);", "-                    loggerClassname = args[++i];", "+                    loggerClassname = args[i++];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85e0bbd0a3ff62ebeb8b0f72cba61aa6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Ant.java", "commitBeforeChange": "d5bfb5609dde48b93877185c1f61067e009e8499", "commitAfterChange": "1ba5087df429abe38dd22fe5c9ddbc343280f0ae", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "          public void init()", "signatureAfterChange": "      public void init()", "diff": ["-    ", "+", "-        p1 = new Project(project.getOutput(), project.getOutputLevel());", "+        p1 = new Project();", "+        Vector listeners = project.getBuildListeners();", "+        for (int i = 0; i < listeners.size(); i++) {", "+            p1.addBuildListener((BuildListener)listeners.elementAt(i));", "+        }", "+", "+        if (output != null) {", "+            try {", "+                PrintStream out = new PrintStream(new FileOutputStream(output));", "+                p1.addBuildListener(new DefaultLogger(out, Project.MSG_INFO));", "+            }", "+            catch( IOException ex ) {", "+                project.log( \"Ant: Can't set output to \" + output );", "+            }", "+        }", "+", "+        p1.init();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f7a52b013243e9728ec8e0b08572494", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/bootstrap/org/apache/ant/builder/Builder.java", "commitBeforeChange": "6243b5ffe48c2c3f094b97a0356bf4f52a653c31", "commitAfterChange": "cae2d444f7e933d5d55072f4b546b27ce174a720", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private void addJavaFiles(List files, File dir)", "signatureAfterChange": "     private void addJavaFiles(List files, File dir, boolean recurse)", "diff": ["-    private void addJavaFiles(List files, File dir) {", "-        File[] javaFiles = dir.listFiles(new FilenameFilter() {", "-            public boolean accept(File dir, String name) {", "-                return name.endsWith(\".java\");", "-            }", "-        });", "+    private void addJavaFiles(List files, File dir, boolean recurse) {", "+        File[] javaFiles = dir.listFiles();", "-                files.add(javaFiles[i]);", "+                if (javaFiles[i].isDirectory() && recurse) {", "+                    addJavaFiles(files, javaFiles[i], recurse);", "+                } else if (javaFiles[i].getName().endsWith(\".java\")) {", "+                    files.add(javaFiles[i]);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92734dd4b0b8bb005ce2255fa0e428da", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/scm/AntStarTeamCheckOut.java", "commitBeforeChange": "21ac4b4b7fe3afff06da8b04554c724baf925a7c", "commitAfterChange": "a99eb8f35c6f8ca403e5b32b62f7101833a7f750", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprotected void runItem(Server s, com.starbase.starteam.Project p, View v, Type t, Folder f, Item item)", "signatureAfterChange": " \tprotected void runItem(Server s, com.starbase.starteam.Project p, View v, Type t, Folder f, Item item)", "diff": ["-\t\t// Take the StarTeam folder name furthest down in the hierarchy.", "-\t\tdirName = dirName.substring(dirName.lastIndexOf(\"/\", dirName.length() - 2) + 1, dirName.length() - 1);", "-", "+                // Take the StarTeam folder name furthest down in the hierarchy.", "+                int endDirIndex = dirName.length();", "+                // If it ends with separator then strip it off", "+                if (dirName.endsWith(\"/\"))", "+                {", "+                    // This should be the SunOS and Linux case", "+                    endDirIndex--;", "+                }", "+\t\tdirName = dirName.substring(dirName.lastIndexOf(\"/\", dirName.length() - 2) + 1, endDirIndex);", "+                "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4f5a39fac06cd0d35a314abb5daac93", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/selectors/TokenizedPath.java", "commitBeforeChange": "2b925503d71972d8b782eedd6cdf75711377d7b0", "commitAfterChange": "2c4faa154f069f3f69d6c3c95629409a7b8b0cc4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " TokenizedPath(String path, String[] tokens)", "signatureAfterChange": "     public TokenizedPath(TokenizedPath parent, String child)", "diff": ["+     */", "+    public TokenizedPath(TokenizedPath parent, String child) {", "+        if (parent.path.length() > 0", "+            && parent.path.charAt(parent.path.length() - 1)", "+               != File.separatorChar) {", "+            path = parent.path + File.separatorChar + child;", "+        } else {", "+            path = parent.path + child;", "+        }", "+        tokenizedPath = new String[parent.tokenizedPath.length + 1];", "+        System.arraycopy(parent.tokenizedPath, 0, tokenizedPath, 0,", "+                         parent.tokenizedPath.length);", "+        tokenizedPath[parent.tokenizedPath.length] = child;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5efb75da2d48496eece8c405a39ee79", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/junit/src/main/org/apache/tools/ant/taskdefs/optional/rjunit/ServerElement.java", "commitBeforeChange": "c2b10718db2516942cbceeae8a89d1032393a55f", "commitAfterChange": "283bade37c87f86c92763234e886a69eb55cb47d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        Enumeration listeners = formatterElements.elements();", "-        while (listeners.hasMoreElements()) {", "-            ResultFormatterElement fe = (ResultFormatterElement)listeners.nextElement();", "-            Formatter formatter = fe.createFormatter();", "-            server.addListener( formatter );", "+        final int formatterCount = formatters.size();", "+        for (int i = 0; i < formatterCount; i++) {", "+            final Formatter f = (Formatter) formatters.get(i);", "+            server.addListener(f);", "+", "-            server.start(true);", "+            server.start(false); // do not loop", "-        } catch (InterruptedException e){", "+        } catch (IOException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d71c5d66752a277bd877331fe71ebae0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultObjectConfigurer.java", "commitBeforeChange": "ac3448e9c26ab04cdea9184b877376e001cb9eb2", "commitAfterChange": "12438f83eb481020c4c306d1dd1d58fd994b757b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private String extractName( final int prefixLen, final String methodName )", "signatureAfterChange": "     private String extractName( final int prefixLen, final String methodName )", "diff": ["-        for( int i = 0; i < sb.length(); i++ )", "+", "+        //Contains the index that we are up to in string buffer.", "+        //May not be equal to i as length of string buffer may change", "+        int index = 0;", "+", "+        final int size = sb.length();", "+        for( int i = 0; i < size; i++ )", "-            char ch = sb.charAt( i );", "+            char ch = sb.charAt( index );", "-                if( i > 0 )", "+                if( index > 0 )", "-                    sb.insert( i, '-' );", "-                    i++;", "+                    sb.insert( index, '-' );", "+                    index++;", "-                sb.setCharAt( i, Character.toLowerCase( ch ) );", "+                sb.setCharAt( index, Character.toLowerCase( ch ) );", "+            index++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df50d257daa9daee945cd012faad0ea2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Project.java", "commitBeforeChange": "c02865f72e8f37b51a2a430b75ab6fea1c7f7ed2", "commitAfterChange": "7573ef75f77cca9198cd0d4340c33f38c8242afa", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": "     private void fireMessageLoggedEvent(BuildEvent event, String message,                                         int priority)", "signatureAfterChange": "     private void fireMessageLoggedEvent(BuildEvent event, String message,                                         int priority)", "diff": ["-            loggingMessage = true;", "-            int size = listeners.size();", "-            for (int i = 0; i < size; i++) {", "-                BuildListener listener = (BuildListener) listeners.elementAt(i);", "-                listener.messageLogged(event);", "+            try {", "+                loggingMessage = true;", "+                int size = listeners.size();", "+                for (int i = 0; i < size; i++) {", "+                    BuildListener listener = (BuildListener) listeners.elementAt(i);", "+                    listener.messageLogged(event);", "+                }", "+            } finally {", "+                loggingMessage = false;", "-            loggingMessage = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6bd8cc03102bcb4d39eb1a99ff2df7d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/GenericDeploymentTool.java", "commitBeforeChange": "046a49448ba9cda7bfd1a69b619a7b492f23183e", "commitAfterChange": "0e37f4714ce94dd13aaae444988b88d6bf5233c7", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     protected void writeJar(String baseName, File jarfile, Hashtable files,                              String publicId) throws BuildException", "signatureAfterChange": "     protected void writeJar(String baseName, File jarfile, Hashtable files,                              String publicId) throws BuildException", "diff": ["-                for (int i=0, n=innerfiles.length; i < n; i++) {", "+                for (int i = 0, n = innerfiles.length; i < n; i++) {", "-                    entryName = entryName.substring(0, entryName.lastIndexOf(entryFile.getName())-1) + File.separatorChar + innerfiles[i];", "-        ", "+                    int entryIndex = entryName.lastIndexOf(entryFile.getName()) -1;", "+                    if ( entryIndex < 0) {", "+                        entryName = innerfiles[i];", "+                    }", "+                    else {", "+                        entryName = entryName.substring(0, entryIndex) + File.separatorChar + innerfiles[i];", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f919e3649bcc88cc2f7eeae5f216a8d4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "19397fb959cb8afa2a87b3e68eaf23994384aab4", "commitAfterChange": "21a1b3cfb48abc9e87a97e1bdab451abe49b44eb", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     protected void slowScan()", "signatureAfterChange": "     protected void slowScan()", "diff": ["-                for (int i = 0; i < excl.length; i++) {", "-                    if (!couldHoldIncluded(excl[i])) {", "-                        scandir(new File(basedir, excl[i]),", "-                                excl[i] + File.separator, false);", "-                    }", "-                }", "-                for (int i = 0; i < notIncl.length; i++) {", "-                    if (!couldHoldIncluded(notIncl[i])) {", "-                        scandir(new File(basedir, notIncl[i]),", "-                                notIncl[i] + File.separator, false);", "-                    }", "-                }", "+                processSlowScan(excl);", "+                processSlowScan(notIncl);"]}]}
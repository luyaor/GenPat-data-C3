{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9562632018f13870b582b2db65d98083", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01a3723b352c67bd4e61d097ef41b48b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/repository/GetLibraries.java", "commitBeforeChange": "4d831bb7cbb2bb2839303380a28f888c587802a0", "commitAfterChange": "f630ef56ed68316b07aaa27e05cf871de1070498", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 25, "signatureBeforeChange": "         public boolean hasNext()", "signatureAfterChange": "     private void doExecute() throws BuildException", "diff": ["+     */", "+    private void doExecute() throws BuildException {", "+        //map libraries to files", "+", "+", "+        //flag to indicate whether the download should go ahead", "+        boolean retrieve = true;", "+        List processedPolicies = new ArrayList(policies.size());", "+        //iterate through all policies and execute their preload task", "+        Iterator policyIterator = policies.enabledIterator();", "+        while (retrieve && policyIterator.hasNext()) {", "+            LibraryPolicy libraryPolicy = (LibraryPolicy) policyIterator.next();", "+            retrieve=libraryPolicy.beforeConnect(this, libraryIterator());", "+            if(retrieve) {", "+                //add all processed properties to the list, 'cept for anything that", "+                //broke the chain", "+                processedPolicies.add(libraryPolicy);", "+            } else {", "+                log(\"Policy \"+libraryPolicy.getClass().getName()", "+                        + \" disabled retrieval\",", "+                        Project.MSG_VERBOSE);", "+            }", "+        //see if we need to do a download", "+        if(!retrieve) {", "+            //if not, log it", "+            log(MSG_NO_RETRIEVE);", "+        } else {", "+            int downloads = calculateFetchCount();", "+            if(downloads>0) {", "+                //get the files", "+                connectAndRetrieve(repo, useTimestamp);", "+            } else {", "+                //nothing to fetch", "+                log(MSG_NO_LIBRARIES_TO_FETCH,Project.MSG_VERBOSE);", "+            }", "+        }", "+", "+        //now reverse iterate through all processed properties.", "+        for(int i=processedPolicies.size()-1;i>=0;i--) {", "+            LibraryPolicy libraryPolicy = (LibraryPolicy)processedPolicies.get(i);", "+            //and call their post-processor", "+            libraryPolicy.afterFetched(this,libraryIterator() );", "+        }", "+    }", "-         */", "-        public boolean hasNext() {", "-            while (_next == null && _underlyingIterator.hasNext()) {", "-                Library candidate = (Library) _underlyingIterator.next();", "-                if (candidate.isEnabled(_project)) {", "-                    _next = candidate;", "-                }", "-            }", "-            return (_next != null);", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57e8f22d398be2aee41f30a68f813da6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/vfs/provider/AbstractFileObject.java", "commitBeforeChange": "f382fa32eec7260111db0d67ae9c90dee2d6de0b", "commitAfterChange": "dfa0c6e159416ba22df942ba98e496d99d53d07f", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 27, "signatureBeforeChange": "     public void copy( final FileObject file ) throws FileSystemException", "signatureAfterChange": "     public void copyFrom( final FileObject file, final FileSelector selector )         throws FileSystemException", "diff": ["+     */", "+    public void copyFrom( final FileObject file, final FileSelector selector )", "+        throws FileSystemException", "+    {", "+        if( !file.exists() )", "+        {", "+            final String message = REZ.getString( \"copy-missing-file.error\", file.getName() );", "+            throw new FileSystemException( message );", "+        }", "+        if( isReadOnly() )", "+        {", "+            final String message = REZ.getString( \"copy-read-only.error\", file.getType(), file.getName(), m_name );", "+            throw new FileSystemException( message );", "+        }", "+", "+        // Locate the files to copy across", "+        final ArrayList files = new ArrayList();", "+        ( (AbstractFileObject)file ).findFiles( selector, false, files );", "+", "+        // Copy everything across", "+        final int count = files.size();", "+        for( int i = 0; i < count; i++ )", "+        {", "+            final FileObject srcFile = (FileObject)files.get( i );", "+", "+            // Determine the destination file", "+            final String relPath = file.getName().getRelativeName( srcFile.getName() );", "+            final FileObject destFile = resolveFile( relPath, NameScope.DESCENDENT_OR_SELF );", "+", "+            // Clean up the destination file, if necessary", "+            if( destFile.exists() && destFile.getType() != srcFile.getType() )", "+            {", "+                // The destination file exists, and is not of the same type,", "+                // so delete it", "+                // TODO - add a pluggable policy for deleting and overwriting existing files", "+                destFile.delete( FileConstants.SELECT_ALL );", "+            }", "+", "+            // Copy across", "+            if( srcFile.getType() == FileType.FILE )", "+            {", "+                copyContent( srcFile, destFile );", "+            }", "+            else", "+            {", "+                destFile.create( FileType.FOLDER );", "+            }", "+        }", "+    }", "-    public void copy( final FileObject file ) throws FileSystemException", "-            final InputStream instr = file.getContent().getInputStream();", "-                // Create the output strea via getContent(), to pick up the", "-                final OutputStream outstr = getContent().getOutputStream();", "-            final String message = REZ.getString( \"copy-file.error\", file.getName(), m_name );"]}]}
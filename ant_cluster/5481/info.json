{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "729fc5164ff683885f41eff86992adc6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13e90a7f55324830a41b9d4ba2845e9d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "795504806c2498feccbb9b3fafe76078091de6fd", "commitAfterChange": "b16652b4516ee8e3e5e8d4c52577c2164ee78f1d", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void write(byte[] b, int offset, int length) throws IOException", "signatureAfterChange": "     public void write(byte[] b, int offset, int length) throws IOException", "diff": ["-                    def.setInput(b, offset, length);", "-                    while (!def.needsInput()) {", "-                        deflate();", "+                    if (length <= DEFLATER_BLOCK_SIZE) {", "+                        def.setInput(b, offset, length);", "+                        deflateUntilInputIsNeeded();", "+                    } else {", "+                        final int fullblocks = length / DEFLATER_BLOCK_SIZE;", "+                        for (int i = 0; i < fullblocks; i++) {", "+                            def.setInput(b, offset + i * DEFLATER_BLOCK_SIZE,", "+                                         DEFLATER_BLOCK_SIZE);", "+                            deflateUntilInputIsNeeded();", "+                        }", "+                        final int done = fullblocks * DEFLATER_BLOCK_SIZE;", "+                        if (done < length) {", "+                            def.setInput(b, offset + done, length - done);", "+                            deflateUntilInputIsNeeded();", "+                        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6db4cd0da67cc4f136c3273362b777e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "aa43e37a025cdf54b8914b8283e57419a253ed59", "commitAfterChange": "dee95e3acc5154aee03ff5f91f9a56426ae79f3f", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public void write(byte[] b, int offset, int length) throws IOException", "signatureAfterChange": "     @Override     public void write(byte[] b, int offset, int length) throws IOException", "diff": ["+    @Override", "-        if (entry.getMethod() == DEFLATED) {", "-            if (length > 0) {", "-                if (!def.finished()) {", "-                    if (length <= DEFLATER_BLOCK_SIZE) {", "-                        def.setInput(b, offset, length);", "-                        deflateUntilInputIsNeeded();", "-                    } else {", "-                        final int fullblocks = length / DEFLATER_BLOCK_SIZE;", "-                        for (int i = 0; i < fullblocks; i++) {", "-                            def.setInput(b, offset + i * DEFLATER_BLOCK_SIZE,", "-                                         DEFLATER_BLOCK_SIZE);", "-                            deflateUntilInputIsNeeded();", "-                        }", "-                        final int done = fullblocks * DEFLATER_BLOCK_SIZE;", "-                        if (done < length) {", "-                            def.setInput(b, offset + done, length - done);", "-                            deflateUntilInputIsNeeded();", "-                        }", "-                    }", "-                }", "-            }", "+        ZipUtil.checkRequestedFeatures(entry.entry);", "+        entry.hasWritten = true;", "+        if (entry.entry.getMethod() == DEFLATED) {", "+            writeDeflated(b, offset, length);"]}]}
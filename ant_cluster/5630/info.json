{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c2a732152fb0ea1fa96057368ce5be82", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b1bce5f740dbc8711116eec32214732", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/types/DirSetTest.java", "commitBeforeChange": "af0dbb6ef20efb56df867fa8025d13b0319383e6", "commitAfterChange": "98d509c6f8d7774190e9c8579510f34df1c4ac2a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testCircularReferenceCheck()", "signatureAfterChange": "      protected FileSet getInstance()", "diff": ["-", "-    public void testCircularReferenceCheck() {", "-        DirSet f = new DirSet();", "-        project.addReference(\"dummy\", f);", "-        f.setRefid(new Reference(\"dummy\"));", "-        try {", "-            f.getDir(project);", "-            fail(\"Can make DirSet a Reference to itself.\");", "-        } catch (BuildException be) {", "-            assertEquals(\"This data type contains a circular reference.\",", "-                         be.getMessage());", "-        }", "-        try {", "-            f.getDirectoryScanner(project);", "-            fail(\"Can make DirSet a Reference to itself.\");", "-        } catch (BuildException be) {", "-            assertEquals(\"This data type contains a circular reference.\",", "-                         be.getMessage());", "-        }", "-", "-        // dummy1 --> dummy2 --> dummy3 --> dummy1", "-        DirSet f1 = new DirSet();", "-        project.addReference(\"dummy1\", f1);", "-        f1.setRefid(new Reference(\"dummy2\"));", "-        DirSet f2 = new DirSet();", "-        project.addReference(\"dummy2\", f2);", "-        f2.setRefid(new Reference(\"dummy3\"));", "-        DirSet f3 = new DirSet();", "-        project.addReference(\"dummy3\", f3);", "-        f3.setRefid(new Reference(\"dummy1\"));", "-        try {", "-            f1.getDir(project);", "-            fail(\"Can make circular reference.\");", "-        } catch (BuildException be) {", "-            assertEquals(\"This data type contains a circular reference.\",", "-                         be.getMessage());", "-        }", "-        try {", "-            f1.getDirectoryScanner(project);", "-            fail(\"Can make circular reference.\");", "-        } catch (BuildException be) {", "-            assertEquals(\"This data type contains a circular reference.\",", "-                         be.getMessage());", "-        }", "-", "-        // dummy1 --> dummy2 --> dummy3 ", "-        // (which has the Project's basedir as root).", "-        f1 = new DirSet();", "-        project.addReference(\"dummy1\", f1);", "-        f1.setRefid(new Reference(\"dummy2\"));", "-        f2 = new DirSet();", "-        project.addReference(\"dummy2\", f2);", "-        f2.setRefid(new Reference(\"dummy3\"));", "-        f3 = new DirSet();", "-        project.addReference(\"dummy3\", f3);", "-        f3.setDir(project.resolveFile(\".\"));", "-        File dir = f1.getDir(project);", "-        assertEquals(\"Dir is basedir\", dir, project.getBaseDir());", "+    protected FileSet getInstance() {", "+        return new DirSet();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6edf2cec43cdb347cb7210bde0dd9898", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/rmic/DefaultRmicAdapter.java", "commitBeforeChange": "e09047d73c19c9608d7408f1ba4f2f23ee9d067c", "commitAfterChange": "a7870b167d35566a8ed101467825a406aa61fa13", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     protected Path getCompileClasspath()", "signatureAfterChange": "     protected Path getCompileClasspath()", "diff": ["-            // XXX move this stuff to a separate class, code is identical to", "-            //     code in ../compiler/DefaultCompilerAdapter", "-", "-            if (System.getProperty(\"java.vendor\").toLowerCase().indexOf(\"microsoft\") >= 0) {", "-                // Pull in *.zip from packages directory", "-                FileSet msZipFiles = new FileSet();", "-                msZipFiles.setDir(new File(System.getProperty(\"java.home\") + File.separator + \"Packages\"));", "-                msZipFiles.setIncludes(\"*.ZIP\");", "-                classpath.addFileset(msZipFiles);", "-            } else if (Project.getJavaVersion() == Project.JAVA_1_1) {", "-                classpath.addExisting(new Path(null,", "-                                                System.getProperty(\"java.home\")", "-                                                + File.separator + \"lib\"", "-                                                + File.separator ", "-                                                + \"classes.zip\"));", "-            } else if(System.getProperty(\"java.vm.name\").equals(\"Kaffe\")) {", "-                FileSet kaffeJarFiles = new FileSet();", "-                kaffeJarFiles.setDir(new File(System.getProperty(\"java.home\") ", "-                                              + File.separator + \"share\"", "-                                              + File.separator + \"kaffe\"));", "-                ", "-                kaffeJarFiles.setIncludes(\"*.jar\");", "-                classpath.addFileset(kaffeJarFiles);", "-            } else {", "-                // JDK > 1.1 seems to set java.home to the JRE directory.", "-                classpath.addExisting(new Path(null,", "-                                                System.getProperty(\"java.home\")", "-                                                + File.separator + \"lib\"", "-                                                + File.separator + \"rt.jar\"));", "-                // Just keep the old version as well and let addExistingToPath", "-                // sort it out.", "-                classpath.addExisting(new Path(null,", "-                                                System.getProperty(\"java.home\")", "-                                                + File.separator +\"jre\"", "-                                                + File.separator + \"lib\"", "-                                                + File.separator + \"rt.jar\"));", "-", "-                // Added for MacOS X", "-                classpath.addExisting(new Path(null,", "-                                               System.getProperty(\"java.home\")", "-                                               + File.separator + \"..\"", "-                                               + File.separator + \"Classes\"", "-                                               + File.separator + \"classes.jar\"));", "-                classpath.addExisting(new Path(null,", "-                                               System.getProperty(\"java.home\")", "-                                               + File.separator + \"..\"", "-                                               + File.separator + \"Classes\"", "-                                               + File.separator + \"ui.jar\"));", "-            }", "+            classpath.addJavaRuntime();"]}]}
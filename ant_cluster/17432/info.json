{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df71c6b7d1d3aed5553a8950084ac4fb", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bd84281046bd06bf2c717da188f5c27", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ReplaceRegExp.java", "commitBeforeChange": "8d4985ca744bd0925d812835615bb991b16e1db2", "commitAfterChange": "f62d563414e6848898008af84073651eb83a7959", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     protected void doReplace(File f, int options)          throws IOException", "signatureAfterChange": "     protected void doReplace(File f, int options)          throws IOException", "diff": ["-            PrintWriter pw = new PrintWriter(bw);", "-                            pw.print(res);", "-                            pw.print('\\r');", "+                            bw.write(res);", "+                            bw.write('\\r');", "-                        pw.print(res);", "+                        bw.write(res);", "-                            pw.print('\\r');", "+                            bw.write('\\r');", "-                        pw.print('\\n');", "+                        bw.write('\\n');", "-                            pw.print(res);", "+                            bw.write(res);", "-                                pw.print('\\r');", "+                                bw.write('\\r');", "-                pw.flush();", "+                bw.flush();", "-                pw.print(res);", "-                pw.flush();", "+                bw.write(res);", "+                bw.flush();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc7136885e8c138f5a6628f632c20092", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Replace.java", "commitBeforeChange": "4be4d85ae2fec0a438fa952f96b8987cb34fa70a", "commitAfterChange": "77959a23ae933d353a9c9e4996ec0c86927892e1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void processFile(File src) throws BuildException", "signatureAfterChange": "     private void processFile(File src) throws BuildException", "diff": ["-            // for each found token, replace with value and write to the", "-            // output file", "-            buf = stringReplace(buf, tok, val);", "-            bw.write(buf,0,buf.length());", "-            bw.flush();", "+            // for each found token, replace with value", "+            String  newString = stringReplace(buf, tok, val);", "+            boolean changes   = !newString.equals(buf);", "+", "+            if (changes) {", "+                bw.write(newString,0,newString.length());", "+                bw.flush();", "+            }", "-            src.delete();", "-            temp.renameTo(src);", "+", "+            // If there were changes, move the new one to the old one, otherwise, delete the new one", "+            if (changes) {", "+                src.delete();", "+                temp.renameTo(src);", "+            } else {", "+                temp.delete();", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0f3c0931ec4bd736d60d64ceacda673", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/tar/TarInputStream.java", "commitBeforeChange": "34fdc2f62a8e282875c134c78aaf14105af92cf9", "commitAfterChange": "8819ee167bec189fb17e8d25ae3aca5268e0ec23", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "      Map<String, String> parsePaxHeaders(InputStream i) throws IOException", "signatureAfterChange": "      Map<String, String> parsePaxHeaders(InputStream i) throws IOException", "diff": ["-                            byte[] rest = new byte[len - read];", "-                            int got = i.read(rest);", "-                            if (got != len - read){", "+                            final int restLen = len - read;", "+                            byte[] rest = new byte[restLen];", "+                            int got = 0;", "+                            while (got < restLen && (ch = i.read()) != -1) {", "+                                rest[got++] = (byte) ch;", "+                            }", "+                            if (got != restLen) {", "-                                                      + (len - read)", "+                                                      + restLen", "-                                                      len - read - 1, \"UTF-8\");", "+                                                      restLen - 1, \"UTF-8\");"]}]}
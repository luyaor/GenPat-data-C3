{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1a1c3e8693f10159ed6b0104cefe314e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f9e676217009dc7bb029eddc879544b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/dotnet/CSharp.java", "commitBeforeChange": "e5a85d7265ed5c9a0e391d5d00596368229e8014", "commitAfterChange": "620b8828e3694634896ff05057883da63211fc2f", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public void execute()              throws BuildException", "signatureAfterChange": "     public String getFileExtension()", "diff": ["-     */", "-    public void execute()", "-             throws BuildException {", "-        if (srcDir == null) {", "-            srcDir = getProject().resolveFile(\".\");", "-        }", "-        log(\"CSC working from source directory \" + srcDir, Project.MSG_VERBOSE);", "-        validate();", "-", "-        NetCommand command = new NetCommand(this, \"CSC\", csc_exe_name);", "-        command.setFailOnError(getFailOnError());", "-        //DEBUG helper", "-        command.setTraceCommandLine(true);", "-        //fill in args", "-        command.addArgument(\"/nologo\");", "-        command.addArgument(getAdditionalModulesParameter());", "-        command.addArgument(getDefinitionsParameter());", "-        command.addArgument(getDebugParameter());", "-        command.addArgument(getDocFileParameter());", "-        command.addArgument(getIncrementalParameter());", "-        command.addArgument(getMainClassParameter());", "-        command.addArgument(getOptimizeParameter());", "-        command.addArgument(getReferencesParameter());", "-        command.addArgument(getTargetTypeParameter());", "-        command.addArgument(getUnsafeParameter());", "-        command.addArgument(getWarnLevelParameter());", "-        command.addArgument(getWin32IconParameter());", "-        command.addArgument(getOutputFileParameter());", "-        command.addArgument(getIncludeDefaultReferencesParameter());", "-        command.addArgument(getDefaultReferenceParameter());", "-        command.addArgument(getWin32ResParameter());", "-        command.addArgument(getUtf8OutputParameter());", "-        command.addArgument(getNoConfigParameter());", "-        command.addArgument(getFullPathsParameter());", "-        command.addArgument(getExtraOptionsParameter());", "-        command.addArgument(getFileAlignParameter());", "-", "-        long outputTimestamp;", "-        if (outputFile != null && outputFile.exists()) {", "-            outputTimestamp = outputFile.lastModified();", "-        } else {", "-            outputTimestamp = 0;", "-        }", "-        int filesOutOfDate = 0;", "-        //get dependencies list.", "-        DirectoryScanner scanner = super.getDirectoryScanner(srcDir);", "-        String[] dependencies = scanner.getIncludedFiles();", "-        log(\"compiling \" + dependencies.length + \" file\" + ((dependencies.length == 1) ? \"\" : \"s\"));", "-        File base = scanner.getBasedir();", "-        //add to the command", "-        for (int i = 0; i < dependencies.length; i++) {", "-            File targetFile = new File(base, dependencies[i]);", "-            log(targetFile.toString(), Project.MSG_VERBOSE);", "-            command.addArgument(targetFile.toString());", "-            if (targetFile.lastModified() > outputTimestamp) {", "-                filesOutOfDate++;", "-                log(\"Source file \" + targetFile.toString() + \" is out of date\",", "-                        Project.MSG_VERBOSE);", "-            } else {", "-                log(\"Source file \" + targetFile.toString() + \" is up to date\",", "-                        Project.MSG_VERBOSE);", "-            ", "-        }", "-", "-        //now run the command of exe + settings + files", "-        if (filesOutOfDate > 0) {", "-            command.runCommand();", "+     */", "+    public String getFileExtension() {", "+        return \"cs\";", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7b89ce83b9958146ab29166de656467", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ide/VAJAntToolGUI.java", "commitBeforeChange": "6cf09d26ffb60c6d9c780b92203ceb6b98b4182c", "commitAfterChange": "fcd6548344aa3f590435beff55530cfdb6983588", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 69, "signatureBeforeChange": " \tprivate void initConnections() throws Exception", "signatureAfterChange": "     private void initConnections() throws Exception", "diff": ["-\t */", "-\tprivate void initConnections() throws Exception {", "-\t\tthis.addWindowListener(iEventHandler);", "-\t\tgetBrowseButton().addActionListener(iEventHandler);", "-\t\tgetCloseButton().addActionListener(iEventHandler);", "-\t\tgetBuildButton().addActionListener(iEventHandler);", "-\t\tgetSaveMenuItem().addActionListener(iEventHandler);", "-\t\tgetAboutOkButton().addActionListener(iEventHandler);", "-\t\tgetAboutMenuItem().addActionListener(iEventHandler);", "-\t\tgetMessageOkButton().addActionListener(iEventHandler);", "-\t\tgetMessageClearLogButton().addActionListener(iEventHandler);", "-\t\tgetMessageOkButton().addActionListener(iEventHandler);", "-\t\tgetShowLogMenuItem().addActionListener(iEventHandler);", "-\t\tgetAboutDialog().addWindowListener(iEventHandler);", "-\t\tgetMessageFrame().addWindowListener(iEventHandler);", "-\t\tgetReloadButton().addActionListener(iEventHandler);", "-\t\tgetTargetList().addItemListener(iEventHandler);", "-\t\tgetMessageOutputLevelChoice().addItemListener(iEventHandler);", "-\t\tgetBuildFileTextField().addTextListener(iEventHandler);", "-\t\tconnectProjectNameToLabel();", "-\t\tconnectBuildFileNameToTextField();", "-\t}", "+     */", "+    private void initConnections() throws Exception {", "+        this.addWindowListener(iEventHandler);", "+        getBrowseButton().addActionListener(iEventHandler);", "+        getCloseButton().addActionListener(iEventHandler);", "+        getBuildButton().addActionListener(iEventHandler);", "+        getStopButton().addActionListener(iEventHandler);", "+        getSaveMenuItem().addActionListener(iEventHandler);", "+        getAboutOkButton().addActionListener(iEventHandler);", "+        getAboutMenuItem().addActionListener(iEventHandler);", "+        getMessageOkButton().addActionListener(iEventHandler);", "+        getMessageClearLogButton().addActionListener(iEventHandler);", "+        getMessageOkButton().addActionListener(iEventHandler);", "+        getShowLogMenuItem().addActionListener(iEventHandler);", "+        getAboutDialog().addWindowListener(iEventHandler);", "+        getMessageFrame().addWindowListener(iEventHandler);", "+        getReloadButton().addActionListener(iEventHandler);", "+        getTargetList().addItemListener(iEventHandler);", "+        getMessageOutputLevelChoice().addItemListener(iEventHandler);", "+        getBuildFileTextField().addTextListener(iEventHandler);", "+        connectProjectNameToLabel();", "+        connectBuildFileNameToTextField();", "+    }"]}]}
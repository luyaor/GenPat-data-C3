{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "21a6c9aef7e4bda13f9dcb03531d69be", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4337444a0fb3bcb3d208204b5a376da8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/framework/Execute.java", "commitBeforeChange": "69cff8fa828c6ad507c770e5726aebe83668a722", "commitAfterChange": "b6410584b65289fce8b334f40163fa2b6203479d", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public int execute()         throws TaskException", "signatureAfterChange": "     public int execute( final TaskContext context )         throws TaskException", "diff": ["-    public int execute()", "+    public int execute( final TaskContext context )", "-        final int returnCode = executeNativeProcess();", "-        checkReturnCode( returnCode );", "-        return returnCode;", "+        validate();", "+", "+        try", "+        {", "+            // Build an output handler", "+            final ExecOutputHandler handler = buildOutputHandler( context );", "+", "+            // Build the command meta-info", "+            final ExecManager execManager = (ExecManager)context.getService( ExecManager.class );", "+            final ExecMetaData metaData = buildExecMetaData( execManager );", "+", "+            logExecDetails( metaData, context );", "+", "+            // Execute the command and check return code", "+            final int returnCode = execManager.execute( metaData, handler, m_timeout );", "+            checkReturnCode( returnCode );", "+            return returnCode;", "+        }", "+        catch( final Exception e )", "+        {", "+            final String message = REZ.getString( \"execute.failed.error\", m_command.getExecutable() );", "+            throw new TaskException( message, e );", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43dcf2a7b55fc2cb97dab16b34250f35", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/classloader/DefaultClassLoaderManager.java", "commitBeforeChange": "274da3301287be067b66a5778b27bfa98ef0a662", "commitAfterChange": "b91e4a3c1d8310dea42c2c353ab016d9c5425109", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public ClassLoader createClassLoader( final File file ) throws ClassLoaderException", "signatureAfterChange": "     public ClassLoader getClassLoader( final File file ) throws ClassLoaderException", "diff": ["-    public ClassLoader createClassLoader( final File file ) throws ClassLoaderException", "+    public ClassLoader getClassLoader( final File file ) throws ClassLoaderException", "-        return createClassLoader( new File[] { file } );", "+        try", "+        {", "+            final File canonFile = file.getCanonicalFile();", "+", "+            // Check for cached classloader, creating it if required", "+            ClassLoader loader = (ClassLoader)m_classLoaders.get( canonFile );", "+            if( loader == null )", "+            {", "+                checkFile( canonFile );", "+                final OptionalPackage optionalPackage = toOptionalPackage( canonFile );", "+                loader = buildClassLoader( optionalPackage, new HashSet() );", "+            }", "+            return loader;", "+        }", "+        catch( final Exception e )", "+        {", "+            final String message = REZ.getString( \"create-classloader-for-file.error\", file );", "+            throw new ClassLoaderException( message, e );", "+        }"]}]}
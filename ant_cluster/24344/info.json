{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e41de3a15738dd8f0a99238b872d394e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7465c4c70636c55c4cba8b950246a827", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ComponentHelper.java", "commitBeforeChange": "4c4ad3483de60ef46e02f3b4f217e78422ac5ab4", "commitAfterChange": "4068d7cd9986a3f05760e3856c003bc9b8a6a8dd", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": "     public String getElementName(Object o, boolean brief)", "signatureAfterChange": "     public String getElementName(Object o, boolean brief)", "diff": ["-        for (Iterator i = antTypeTable.values().iterator(); i.hasNext();) {", "-            AntTypeDefinition def = (AntTypeDefinition) i.next();", "-            if (elementClassname.equals(def.getClassName())", "-                    && (elementClass == def.getExposedClass(project))) {", "-                String name = def.getName();", "-                return brief ? name : \"The <\" + name + \"> type\";", "+        synchronized (antTypeTable) {", "+            for (Iterator i = antTypeTable.values().iterator(); i.hasNext();) {", "+                AntTypeDefinition def = (AntTypeDefinition) i.next();", "+                if (elementClassname.equals(def.getClassName())", "+                        && (elementClass == def.getExposedClass(project))) {", "+                    String name = def.getName();", "+                    return brief ? name : \"The <\" + name + \"> type\";", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f8e475aecf7f6eddaebd9eba855f8e5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "b456160d70409bf1b5b6a2cfd211a4d012378f00", "commitAfterChange": "6aa8785e3250b197afbcde86f2fdc143f54e663a", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "     private AntTypeDefinition findRestrictedDefinition(         ComponentHelper helper, String componentName, List methods)", "signatureAfterChange": "     private AntTypeDefinition findRestrictedDefinition(         ComponentHelper helper, String componentName, List methods)", "diff": ["-        for (int i = 0; i < definitions.size(); ++i) {", "-            AntTypeDefinition d = (AntTypeDefinition) definitions.get(i);", "-            Class exposedClass = d.getExposedClass(helper.getProject());", "-            if (exposedClass == null) {", "-                continue;", "+        synchronized (definitions) {", "+            for (int i = 0; i < definitions.size(); ++i) {", "+                AntTypeDefinition d = (AntTypeDefinition) definitions.get(i);", "+                Class exposedClass = d.getExposedClass(helper.getProject());", "+                if (exposedClass == null) {", "+                    continue;", "+                }", "+                Method method  = findMatchingMethod(exposedClass, methods);", "+                if (method == null) {", "+                    continue;", "+                }", "+                if (matchedDefinitionClass != null) {", "+                    throw new BuildException(", "+                        \"ambiguous: restricted definitions for \"", "+                        + componentName + \" \"", "+                        + matchedDefinitionClass + \" and \" + exposedClass);", "+                }", "+                matchedDefinitionClass = exposedClass;", "+                definition = d;", "-            Method method  = findMatchingMethod(exposedClass, methods);", "-            if (method == null) {", "-                continue;", "-            }", "-            if (matchedDefinitionClass != null) {", "-                throw new BuildException(", "-                    \"ambiguous: restricted definitions for \"", "-                    + componentName + \" \"", "-                    + matchedDefinitionClass + \" and \" + exposedClass);", "-            }", "-            matchedDefinitionClass = exposedClass;", "-            definition = d;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8f7b0ef4522701e91761c63f3627c6d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/DateUtils.java", "commitBeforeChange": "05aa4509fdd92c39bf1adb059bcc5ab6c1fd7d94", "commitAfterChange": "485c20f2f6c78a38b458f4edbefa63db5f7cd9fe", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public static String getDateForHeader()", "signatureAfterChange": "     public static String getDateForHeader()", "diff": ["-        return DATE_HEADER_FORMAT.format(cal.getTime()) + tzMarker.toString();", "+        synchronized (DATE_HEADER_FORMAT) {", "+            return DATE_HEADER_FORMAT.format(cal.getTime()) + tzMarker.toString();", "+        }"]}]}
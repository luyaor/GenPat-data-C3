{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "30bee5054b234e6cf9cecf763731ec02", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "101b3b74527e718c295d338f4c0f6780", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "7d7fc053b7a9233664ffc5635354025a41e9cccd", "commitAfterChange": "559fe1af187c27c6253ef3a1b639783f0a372f50", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private Class getClassFromStream(InputStream stream, String classname)                  throws IOException", "signatureAfterChange": "     private Class getClassFromStream(InputStream stream, String classname)                  throws IOException", "diff": ["-        return defineClass(classname, classData, 0, classData.length); ", "+        // Simply put:", "+        // defineClass(classname, classData, 0, classData.length, Project.class.getProtectionDomain());", "+        // Made more elaborate to be 1.1-safe.", "+        if (defineClassProtectionDomain != null) {", "+            try {", "+                Object domain = getProtectionDomain.invoke(Project.class, new Object[0]);", "+                Object[] args = new Object[] {classname, classData, new Integer(0), new Integer(classData.length), domain};", "+                return (Class)defineClassProtectionDomain.invoke(this, args);", "+            }", "+            catch (InvocationTargetException ite) {", "+                Throwable t = ite.getTargetException();", "+                if (t instanceof ClassFormatError) {", "+                    throw (ClassFormatError)t;", "+                }", "+                else {", "+                    throw new IOException(t.toString());", "+                }", "+            }", "+            catch (Exception e) {", "+                throw new IOException(e.toString());", "+            }", "+        }", "+        else {", "+            return defineClass(classname, classData, 0, classData.length); ", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a2f3f4e0d8ee1880a7126f148e650c3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "47a487c0dd073ced71720ad46588eeb38e12e47c", "commitAfterChange": "67c71a89e9e02b6e4841f748c79350b7ca190a00", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "     protected Class defineClassFromData(File container, byte[] classData,                                         String classname) throws IOException", "signatureAfterChange": "     protected Class defineClassFromData(File container, byte[] classData,                                         String classname) throws IOException", "diff": ["-        // Simply put:", "-        // defineClass(classname, classData, 0, classData.length,", "-        //             Project.class.getProtectionDomain());", "-        // Made more elaborate to be 1.1-safe.", "-        if (defineClassProtectionDomain != null) {", "-            try {", "-                Object domain", "-                    = getProtectionDomain.invoke(Project.class, new Object[0]);", "-                Object[] args", "-                    = new Object[] {classname, classData, new Integer(0),", "-                                    new Integer(classData.length), domain};", "-                return (Class) defineClassProtectionDomain.invoke(this, args);", "-            } catch (InvocationTargetException ite) {", "-                Throwable t = ite.getTargetException();", "-                if (t instanceof ClassFormatError) {", "-                    throw (ClassFormatError) t;", "-                } else if (t instanceof NoClassDefFoundError) {", "-                    throw (NoClassDefFoundError) t;", "-                } else if (t instanceof SecurityException) {", "-                    throw (SecurityException) t;", "-                } else {", "-                    throw new IOException(t.toString());", "-                }", "-            } catch (Exception e) {", "-                throw new IOException(e.toString());", "-            }", "+        definePackage(container, classname);", "+        // XXX should instead make a new ProtectionDomain with a CodeSource", "+        // corresponding to container.toURI().toURL() and the same", "+        // PermissionCollection as Project.class.protectionDomain had", "+        return defineClass(classname, classData, 0, classData.length,", "+                           Project.class.getProtectionDomain());", "+    }", "-            return defineClass(classname, classData, 0, classData.length);"]}]}
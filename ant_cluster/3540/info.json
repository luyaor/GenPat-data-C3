{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9efbe8219d897650f76e0cac182dc202", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10912bee96b357ad2169d83d23473d5e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/embeddor/DefaultEmbeddor.java", "commitBeforeChange": "e7ab62bc9179b392804835d02155e43d3d2cf5d6", "commitAfterChange": "2e6e170fb375181f4438e1de44808c7adab508a2", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private void setupComponents()         throws Exception", "signatureAfterChange": "     private void setupComponents()         throws Exception", "diff": ["-        setupComponent( m_extensionManager );", "-        setupComponent( m_roleManager );", "-        setupComponent( m_aspectManager );", "-        setupComponent( m_converterRegistry );", "-        setupComponent( m_converter );", "-        setupComponent( m_executor );", "-        setupComponent( m_deployer );", "-        setupComponent( m_configurer );", "-    }", "+        for( Iterator iterator = m_components.iterator(); iterator.hasNext(); )", "+            final Component component = (Component)iterator.next();", "+            setupObject( component, m_parameters );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d20cad86208660ca57b740b31df219d6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/embeddor/DefaultEmbeddor.java", "commitBeforeChange": "46330b41c1a0cd642c895b8ff39ab295a3519ca4", "commitAfterChange": "f42a96f3046b6a665f9755123c9f7939e53737ba", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void createComponents()         throws Exception", "signatureAfterChange": "     private void setupComponents()         throws Exception", "diff": ["-    private void createComponents()", "+    private void setupComponents()", "+        // Create the components", "-        createComponent( AntServiceManager.class, PREFIX + \"service.DefaultAntServiceManager\" );", "+", "+        // Setup the components", "+        for( Iterator iterator = m_components.iterator(); iterator.hasNext(); )", "+        {", "+            final Object component = iterator.next();", "+            setupObject( component, m_serviceManager, m_parameters );", "+        }"]}]}
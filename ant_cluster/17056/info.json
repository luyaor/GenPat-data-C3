{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "78090c4f7b00c452e57cc628c50f397e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06ce1299eab13a9ac83b44c999768b12", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/scm/AntStarTeamCheckOut.java", "commitBeforeChange": "f7def885dd7bc3f17bb095754a21805701d7ada7", "commitAfterChange": "7fbbcdf665363d7efd4fe092bc7b24bd8eb6d542", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "     protected void runItem( Server s,                              com.starbase.starteam.Project p,                              View v,                              Type t,                              Folder f,                              Item item )", "signatureAfterChange": "     protected void runItem( Server s,                              com.starbase.starteam.Project p,                              View v,                              Type t,                              Folder f,                              Item item,                             String tgt )", "diff": ["-                            Item item )", "+                            Item item,", "+                            String tgt )", "-        // Time to filter...", "-        boolean includeIt = false;", "-        boolean excludeIt = false;", "-", "-        // See if it fits any includes.", "-        if (getIncludes()!=null)", "-        {", "-            StringTokenizer inStr = new StringTokenizer(getIncludes(), \" \");", "-            while (inStr.hasMoreTokens())", "-            {", "-                if (match(inStr.nextToken(), pName))", "-                {", "-                    includeIt = true;", "-                }", "-            }", "-        }", "-", "-        // See if it fits any excludes.", "-        if (getExcludes()!=null)", "-        {", "-            StringTokenizer exStr = new StringTokenizer(getExcludes(), \" \");", "-            while (exStr.hasMoreTokens())", "-            {", "-                if (match(exStr.nextToken(), pName))", "-                {", "-                    excludeIt = true;", "-                }", "-            }", "-        }", "-", "-        // Don't check it out if", "-        // (a) It fits no include filters", "-        // (b) It fits an exclude filter", "-        if (!includeIt | excludeIt)", "-        {", "+        if ( !shouldCheckout(pName) ) {", "-        if (getVerboseAsBoolean())", "+        if (getVerbose())", "-            boolean bShowHeader = true;", "-            if (f != prevFolder)", "+            boolean bShowHeader = (f != prevFolder);", "+            if (bShowHeader)", "-                System.out.println(\"            Folder: \\\"\" + strFolder + \"\\\"\");", "+                log(\"            Folder: \\\"\" + strFolder + \"\\\"\");", "-            }", "-            else", "-                bShowHeader        = false;", "-            // If we displayed the project, view, item type, or folder,", "-            // then show the list of relevant item properties.", "-            if (bShowHeader)", "-            {", "-                System.out.print(\"                Item\");", "-                System.out.print(\",\\t\" + p1.getDisplayName());", "+                // If we displayed the project, view, item type, or folder,", "+                // then show the list of relevant item properties.", "+                StringBuffer header = new StringBuffer(\"                Item\");", "+                header.append(\",\\t\").append(p1.getDisplayName());", "-                    System.out.print(\",\\t\" + p2.getDisplayName());", "+                    header.append(\",\\t\").append(p2.getDisplayName());", "-                System.out.println(\"\");", "+                log(header.toString());", "-", "-            System.out.print(\"                \" + item.getItemID());", "+            StringBuffer itemLine = new StringBuffer(\"                \");", "+            itemLine.append(item.getItemID());", "-            System.out.print(\",\\t\" + formatForDisplay(p1, item.get(p1.getName())));", "+            itemLine.append(\",\\t\").append(formatForDisplay(p1, item.get(p1.getName())));", "-                System.out.print(\",\\t\" + formatForDisplay(p2, item.get(p2.getName())));", "+                itemLine.append(\",\\t\").append(formatForDisplay(p2, item.get(p2.getName())));", "-                System.out.println(\",\\tLocked by \" + locker);", "+                itemLine.append(\",\\tLocked by \").append(locker);", "-                System.out.println(\",\\tNot locked\");", "+                itemLine.append(\",\\tNot locked\");", "+            log(itemLine.toString());", "+        // Create a reference to the local target file using either the \"default path\" calculation or the calculation based", "+        // solely on targetFolder.", "+        java.io.File local = (getUsesDefaultFolder()", "+                              ? getLocalFileUsingDefault(v,item.getParentFolder().getFolderHierarchy(),(String)item.get(p1.getName()))", "+                              : getLocalFile(tgt,(String)item.get(p1.getName())));", "+        try", "+        {", "+            remote.checkoutTo(local, Item.LockType.UNCHANGED, false, true, true);", "+            checkedOut++;", "+        }", "+        catch (Exception e)", "+        {", "+            log(\"Failed to checkout '\" + local + \"': \" + e.getMessage(), Project.MSG_WARN);", "+            // probably not a good idea to swallow the stacktrace", "+        }", "+    }", "-                ", "-        StringTokenizer pathTokenizer = ", "-            new StringTokenizer(item.getParentFolder().getFolderHierarchy(), delim);", "-        // Create a reference to the local target file using the format listed above.", "-        java.io.File local = new java.io.File( getTargetFolder() + localName + ", "-                                               item.get(p1.getName()) );", "-        try", "-        {", "-            remote.checkoutTo(local, Item.LockType.UNCHANGED, false, true, true);", "-        }", "-        catch (Throwable e)", "-        {", "-            project.log(\"    \" + e.getMessage());", "-        }", "-        checkedOut++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "175d8a195217dac9ecc904d2c2d4fc8d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/BorlandDeploymentTool.java", "commitBeforeChange": "e72340e0a1f68e91bb515aeb4dcad300a14c6434", "commitAfterChange": "9361281f36fe9a45067848d2ae8465befb2f3dd1", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void buildBorlandStubs(Iterator ithomes,Hashtable files )", "signatureAfterChange": "     private void buildBorlandStubs(Iterator ithomes,Hashtable files )", "diff": ["-        org.apache.tools.ant.taskdefs.ExecTask execTask = null;", "-        File java2iiopOut = null;", "-        try {", "-            java2iiopOut = File.createTempFile(\"java2iiop\",\"log\");", "-            log(\" iiop log file : \"+ java2iiopOut ,Project.MSG_DEBUG);", "+        Execute execTask = null;", "-            execTask = (ExecTask) getTask().getProject().createTask(\"exec\");", "-            execTask.setOutput(java2iiopOut);", "-            if ( java2iiopdebug ) {", "-                execTask.createArg().setValue(\"-VBJdebug\");                ", "-            } // end of if ()", "-                       ", "-            execTask.setDir(getConfig().srcDir);", "-            execTask.setExecutable(JAVA2IIOP);", "-            //set the classpath ", "-            execTask.createArg().setValue(\"-VBJclasspath\");", "-            execTask.createArg().setPath(getCombinedClasspath());", "-            //list file", "-            execTask.createArg().setValue(\"-list_files\");", "-            //no TIE classes", "-            execTask.createArg().setValue(\"-no_tie\");", "-            //root dir", "-            execTask.createArg().setValue(\"-root_dir\");", "-            execTask.createArg().setValue(getConfig().srcDir.getAbsolutePath());", "-            //compiling order", "-            execTask.createArg().setValue(\"-compile\");", "-            //add the home class", "-            while ( ithomes.hasNext()) {", "-                execTask.createArg().setValue(ithomes.next().toString());                ", "-            } // end of while ()", "+        execTask = new Execute(this);", "+        Project project = getTask().getProject();", "+        execTask.setAntRun(project);", "+        execTask.setWorkingDirectory(project.getBaseDir());", "+        ", "+        Commandline commandline = new Commandline();", "+        commandline.setExecutable(JAVA2IIOP);", "+        //debug ?", "+        if ( java2iiopdebug ) {", "+            commandline.createArgument().setValue(\"-VBJdebug\");                ", "+        } // end of if ()", "+        //set the classpath ", "+        commandline.createArgument().setValue(\"-VBJclasspath\");", "+        commandline.createArgument().setPath(getCombinedClasspath());", "+        //list file", "+        commandline.createArgument().setValue(\"-list_files\");", "+        //no TIE classes", "+        commandline.createArgument().setValue(\"-no_tie\");", "+        //root dir", "+        commandline.createArgument().setValue(\"-root_dir\");", "+        commandline.createArgument().setValue(getConfig().srcDir.getAbsolutePath());", "+        //compiling order", "+        commandline.createArgument().setValue(\"-compile\");", "+        //add the home class", "+        while ( ithomes.hasNext()) {", "+            commandline.createArgument().setValue(ithomes.next().toString());                ", "+        } // end of while ()", "+", "+        try {", "-            execTask.execute();", "+            log(commandline.toString(),Project.MSG_DEBUG);", "+            execTask.setCommandline(commandline.getCommandline());", "+            int result = execTask.execute();", "+            if ( result != 0 ) {", "+                String msg = \"Failed executing java2iiop (ret code is \"+result+\")\";", "+                throw new BuildException(msg, getTask().getLocation());", "+            }                       ", "-        catch (Exception e) {", "-            // Have to catch this because of the semantics of calling main()", "-            String msg = \"Exception while calling java2iiop. Details: \" + e.toString();", "-            throw new BuildException(msg, e);", "-        }", "-", "-        try {", "-            FileReader fr = new FileReader(java2iiopOut);", "-            LineNumberReader lnr = new LineNumberReader(fr);", "-            String javafile;", "-            while ( ( javafile = lnr.readLine()) != null) {", "-                if ( javafile.endsWith(\".java\") ) {", "-                    String classfile = toClassFile(javafile);", "-                    ", "-                    String key = classfile.substring(getConfig().srcDir.getAbsolutePath().length()+1);", "-                    log(\" generated : \"+ classfile ,Project.MSG_DEBUG);", "-                    log(\" key       : \"+ key       ,Project.MSG_DEBUG);", "-                    files.put(key, new File(classfile));                                           ", "-                } // end of if ()                ", "-            } // end of while ()", "-            lnr.close();            ", "-        }", "-        catch(Exception e) {", "-            String msg = \"Exception while parsing  java2iiop output. Details: \" + e.toString();", "-            throw new BuildException(msg, e);", "-        }", "-", "-        //delete the output , only if all is succesfull", "-        java2iiopOut.delete();", "+        catch (java.io.IOException e) {", "+            log(\"java2iiop exception :\"+e.getMessage(),Project.MSG_ERR);", "+            throw new BuildException(e,getTask().getLocation());", "+        }            "]}]}
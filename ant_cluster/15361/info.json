{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0825b1f18aa350959b271b5cdfb4dc1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e7c92774ff62debc509a42db9139ca5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/Frame.java", "commitBeforeChange": "83dc385bd01fbc8ee2fb166b9a5605bdc6958d76", "commitAfterChange": "bf844382c856f7b51c56024189c93f11d34cb720", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void configureElement(AntLibFactory factory, Object element,                                   BuildElement model)          throws ExecutionException", "signatureAfterChange": "     public String replacePropertyRefs(String value) throws ExecutionException", "diff": ["+     */", "+    public String replacePropertyRefs(String value) throws ExecutionException {", "+        return dataService.replacePropertyRefs(value);", "+    }", "-     */", "-    private void configureElement(AntLibFactory factory, Object element,", "-                                  BuildElement model)", "-         throws ExecutionException {", "-", "-        Setter setter = getSetter(element.getClass());", "-", "-        // start by setting the attributes of this element", "-        for (Iterator i = model.getAttributeNames(); i.hasNext(); ) {", "-            String attributeName = (String)i.next();", "-            String attributeValue = model.getAttributeValue(attributeName);", "-            if (!setter.supportsAttribute(attributeName)) {", "-                throw new ExecutionException(model.getType()", "-                     + \" does not support the \\\"\" + attributeName", "-                     + \"\\\" attribute\", model.getLocation());", "-            }", "-            setter.setAttribute(element, attributeName,", "-                dataService.replacePropertyRefs(attributeValue));", "-        }", "-        String modelText = model.getText().trim();", "-        if (modelText.length() != 0) {", "-            if (!setter.supportsText()) {", "-                throw new ExecutionException(model.getType()", "-                     + \" does not support content\", model.getLocation());", "-            }", "-            setter.addText(element,", "-                dataService.replacePropertyRefs(modelText));", "-        }", "-", "-        // now do the nested elements", "-        for (Iterator i = model.getNestedElements(); i.hasNext(); ) {", "-            BuildElement nestedElementModel = (BuildElement)i.next();", "-            String nestedElementName = nestedElementModel.getType();", "-", "-            ImportInfo info = componentManager.getDefinition(nestedElementName);", "-            if (element instanceof TaskContainer", "-                 && info != null", "-                 && info.getDefinitionType() == AntLibrary.TASKDEF", "-                 && !setter.supportsNestedElement(nestedElementName)) {", "-                // it is a nested task", "-                TaskContext nestedContext", "-                     = configureTask(nestedElementModel);", "-                TaskContainer container = (TaskContainer)element;", "-                // XXX what should we be adding - need to understand container", "-                // method of executing tasks", "-                container.addTask(nestedContext.getTask());", "-            } else {", "-                if (setter.supportsNestedAdder(nestedElementName)) {", "-                    addNestedElement(factory, setter, element,", "-                        nestedElementModel);", "-                } else if (setter.supportsNestedCreator(nestedElementName)) {", "-                    createNestedElement(factory, setter, element,", "-                        nestedElementModel);", "-                } else {", "-                    throw new ExecutionException(model.getType()", "-                         + \" does not support the \\\"\" + nestedElementName", "-                         + \"\\\" nested element\",", "-                        nestedElementModel.getLocation());", "-                }", "-            }", "-        }", "-", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc8159f942db0c83ebc8eadff0556cf6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ComponentManager.java", "commitBeforeChange": "65b70febb53b077317c4d678291f9af547c3d116", "commitAfterChange": "f9d1c1691c7e9d80b793f5178f6113c949fc2441", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": "     private void configureElement(AntLibFactory factory, Object element,                                   BuildElement model)          throws ExecutionException", "signatureAfterChange": "     private void configureElement(AntLibFactory factory, Object element,                                   BuildElement model)          throws AntException", "diff": ["-         throws ExecutionException {", "+         throws AntException {", "-        // start by setting the attributes of this element", "-        for (Iterator i = model.getAttributeNames(); i.hasNext();) {", "-            String attributeName = (String) i.next();", "-            String attributeValue = model.getAttributeValue(attributeName);", "-            if (!setter.supportsAttribute(attributeName)) {", "-                throw new ExecutionException(model.getType()", "-                     + \" does not support the \\\"\" + attributeName", "-                     + \"\\\" attribute\", model.getLocation());", "-            }", "-            setter.setAttribute(element, attributeName,", "-                frame.replacePropertyRefs(attributeValue));", "-        }", "-", "-        String modelText = model.getText().trim();", "-        if (modelText.length() != 0) {", "-            if (!setter.supportsText()) {", "-                throw new ExecutionException(model.getType()", "-                     + \" does not support content\", model.getLocation());", "-            }", "-            setter.addText(element,", "-                frame.replacePropertyRefs(modelText));", "-        }", "-", "-        // now do the nested elements", "+        // do the nested elements", "-                    throw new ExecutionException(model.getType()", "+                    throw new ExecutionException(\"<\" + model.getType() + \">\"", "+", "+        // Set the attributes of this element", "+        for (Iterator i = model.getAttributeNames(); i.hasNext();) {", "+            String attributeName = (String) i.next();", "+            String attributeValue = model.getAttributeValue(attributeName);", "+            if (!setter.supportsAttribute(attributeName)) {", "+                throw new ExecutionException(\"<\" + model.getType() + \">\"", "+                     + \" does not support the \\\"\" + attributeName", "+                     + \"\\\" attribute\", model.getLocation());", "+            }", "+            setter.setAttribute(element, attributeName,", "+                frame.replacePropertyRefs(attributeValue));", "+        }", "+", "+        String modelText = model.getText();", "+        if (modelText.length() != 0) {", "+            if (!setter.supportsText()) {", "+                throw new ExecutionException(\"<\" + model.getType() + \">\"", "+                     + \" does not support content\", model.getLocation());", "+            }", "+            setter.addText(element,", "+                frame.replacePropertyRefs(modelText));", "+        }", "+"]}]}
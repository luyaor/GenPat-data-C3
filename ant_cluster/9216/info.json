{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "63f9a043f1169cd31327e67c4c1f5486", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0187af14d323b0bf910498261b4ec7b3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ide/VAJLocalUtil.java", "commitBeforeChange": "adb10aa72e51f837386530781d2845cdcba3f799", "commitAfterChange": "7cd7c4e5f82cbe8a3fe5d03b7c8ea871a523fdd1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void loadProjects(Vector projectDescriptions)", "signatureAfterChange": "     public void loadProjects(Vector projectDescriptions)", "diff": ["-            ProjectEdition pe = findProjectEdition(d.getName(), d.getVersion());", "+            ProjectEdition pe;", "+            if (d.getVersion().equals(\"*\"))", "+                pe = findLatestProjectEdition(d.getName(), false);", "+            else if (d.getVersion().equals(\"**\"))", "+                pe = findLatestProjectEdition(d.getName(), true);", "+            else", "+                pe = findProjectEdition(d.getName(), d.getVersion());", "-                log(\"Loading '\" + d.getName() + \"', Version '\" + d.getVersion()", "-                    + \"', into Workspace\", MSG_VERBOSE);", "+                log(\"Loading '\" + pe.getName() + \"', Version '\" +", "+                    ((pe.getVersionName() != null)?pe.getVersionName():\"(\"+pe.getVersionStamp()+ \")\")+", "+                    \"' into Workspace\", MSG_VERBOSE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "622d40d4c0bbaa3808eeb64e5e84748f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/TraXLiaison.java", "commitBeforeChange": "cd69b894b2a5a02c6cc32c8caa4d7e949074eb9e", "commitAfterChange": "735f3fca3e3ce3a6b44109a44836d8ab64215e75", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private TransformerFactory getFactory() throws BuildException", "signatureAfterChange": "     private TransformerFactory getFactory() throws BuildException", "diff": ["+", "+        if (Boolean.TRUE.equals(DISABLE_SECURE_PROCESSING.get())) {", "+            try {", "+                Field _isNotSecureProcessing = tfactory.getClass().getDeclaredField(\"_isNotSecureProcessing\");", "+                _isNotSecureProcessing.setAccessible(true);", "+                _isNotSecureProcessing.set(tfactory, Boolean.TRUE);", "+            } catch (Exception x) {", "+                project.log(x.toString(), Project.MSG_DEBUG);", "+            }", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2636b5915b0891817e32f3ffb0b3cf2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "1534f4e063841a3db919dde44530d75b7d734c57", "commitAfterChange": "d2e6dcf66da83b17eb4a13f4ff7f374521fe29ec", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "     private TestResultHolder executeAsForked(JUnitTest test,                                              ExecuteWatchdog watchdog,                                              File casesFile)         throws BuildException", "signatureAfterChange": "     private TestResultHolder executeAsForked(JUnitTest test,                                              ExecuteWatchdog watchdog,                                              File casesFile)         throws BuildException", "diff": ["-            cmd.createArgument().setValue(\"testsfile=\" + casesFile);", "+            cmd.createArgument().setValue(Constants.TESTSFILE + casesFile);", "-        cmd.createArgument().setValue(\"filtertrace=\" + test.getFiltertrace());", "-        cmd.createArgument().setValue(\"haltOnError=\" + test.getHaltonerror());", "-        cmd.createArgument().setValue(\"haltOnFailure=\"", "+        cmd.createArgument().setValue(Constants.FILTERTRACE + test.getFiltertrace());", "+        cmd.createArgument().setValue(Constants.HALT_ON_ERROR + test.getHaltonerror());", "+        cmd.createArgument().setValue(Constants.HALT_ON_FAILURE", "-                if (s.startsWith(\"CLASSPATH=\")) {", "+                if (s.startsWith(CLASSPATH)) {", "-                                         s.substring(10 // \"CLASSPATH=\".length()", "+                                         s.substring(CLASSPATH.length()", "-                .setValue(\"formatter\"", "-                          + \"=org.apache.tools.ant.taskdefs.optional.junit.\"", "+                .setValue(Constants.FORMATTER", "+                          + \"org.apache.tools.ant.taskdefs.optional.junit.\"", "-        cmd.createArgument().setValue(\"showoutput=\"", "+        cmd.createArgument().setValue(Constants.SHOWOUTPUT", "-        cmd.createArgument().setValue(\"logtestlistenerevents=true\"); // #31885", "+        cmd.createArgument().setValue(Constants.LOGTESTLISTENEREVENTS+\"true\"); // #31885", "-                formatterArg.append(\"formatter=\");", "+                formatterArg.append(Constants.FORMATTER);", "-        cmd.createArgument().setValue(\"crashfile=\"", "+        cmd.createArgument().setValue(Constants.CRASHFILE", "-        cmd.createArgument().setValue(\"propsfile=\"", "+        cmd.createArgument().setValue(Constants.PROPSFILE", "-            } else if (!\"terminated successfully\".equals(vmCrashString)) {", "+            } else if (!Constants.TERMINATED_SUCCESSFULLY.equals(vmCrashString)) {"]}]}
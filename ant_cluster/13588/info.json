{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0017b78bdc4b021d16ec27ca933bdda2", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6febef6aa9aaf28e37b90367abf0099f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "1efb922bf591d5a8b083c5984b51fd46b0ebb9af", "commitAfterChange": "e12c63a6ee1b0bb45e9821ff84392c9391d76bd9", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "     public String toURI(String path)", "signatureAfterChange": "     public String toURI(String path)", "diff": ["+        // #8031: first try Java 1.4.", "+        Class uriClazz = null;", "+        try {", "+            uriClazz = Class.forName(\"java.net.URI\");", "+        } catch (ClassNotFoundException e) {", "+            // OK, Java 1.3.", "+        }", "+        if (uriClazz != null) {", "+            try {", "+                File f = new File(path).getAbsoluteFile();", "+                java.lang.reflect.Method toURIMethod = File.class.getMethod(\"toURI\", new Class[0]);", "+                Object uriObj = toURIMethod.invoke(f, new Object[] {});", "+                java.lang.reflect.Method toASCIIStringMethod = uriClazz.getMethod(\"toASCIIString\", new Class[0]);", "+                return (String) toASCIIStringMethod.invoke(uriObj, new Object[] {});", "+            } catch (Exception e) {", "+                // Reflection problems? Should not happen, debug.", "+                e.printStackTrace();", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75d5b8b3364b4fac71bd7e2e9f487d19", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/modules/edit/ElementNavigator.java", "commitBeforeChange": "ffa6e24ba429847c04da9162971b6203151a7ce1", "commitAfterChange": "1056b715f84a4c3b17b7fcdecbaef6eaeb566ea7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "         public boolean eventPosted(EventObject event)", "signatureAfterChange": "         public boolean eventPosted(EventObject event)", "diff": ["-            ProjectProxy project = getContext().getProject();", "+            ACSProjectElement project = null;", "+            if(event instanceof ProjectSelectedEvent) {", "+                ProjectSelectedEvent e = (ProjectSelectedEvent) event;", "+                project = e.getSelectedProject();", "+            }", "+                // Send an empty selection event to notify others that", "+                // nothing is selected.", "+                ElementSelectionEvent.createEvent(getContext(), null);", "-                _tree.setModel(project.getTreeModel());", "-                _tree.setSelectionModel(project.getTreeSelectionModel());", "+                _tree.setModel(new ElementTreeModel(project));", "+                _selections = new ElementTreeSelectionModel();", "+                _selections.addTreeSelectionListener(new SelectionForwarder());", "+                _tree.setSelectionModel(_selections);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fed1e88fe5c9d625ef64447fc303b41e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/FormatterElement.java", "commitBeforeChange": "5026f31269c0cf1f709aa6ee9dc775f0e7b74747", "commitAfterChange": "4369f6482672e451edd830277d0f64fcc9c7d10b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "     JUnitTaskMirror.JUnitResultFormatterMirror createFormatter(ClassLoader loader)             throws BuildException", "signatureAfterChange": "     JUnitTaskMirror.JUnitResultFormatterMirror createFormatter(ClassLoader loader)             throws BuildException", "diff": ["-", "+        ", "-", "+        ", "+        ", "+", "+        boolean needToSetProjectReference = true;", "+        try {", "+            Field field = r.getClass().getField(\"project\");", "+            Object value = field.get(r);", "+            if (value instanceof Project) {", "+                // there is already a project reference so dont overwrite this", "+                needToSetProjectReference = false;", "+            }", "+        } catch (Exception e) {", "+            // no field present, so no previous reference exists", "+        }", "+        ", "+        if (needToSetProjectReference) {", "+            Method setter;", "+            try {", "+                setter = r.getClass().getMethod(\"setProject\", new Class[] { Project.class });", "+                setter.invoke(r, new Object[] { project });", "+            } catch (Exception e) {", "+                // no setProject to invoke; just ignore", "+            }", "+        }", "+        "]}]}
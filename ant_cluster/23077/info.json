{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7b8c57dd99192245d7d235937151b676", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ce7fa7e35c4da01e239a9e84cdf5bea", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/modules/core/RegisterConverter.java", "commitBeforeChange": "d23b08a302496937c4d1d08e31431ece313de2b8", "commitAfterChange": "5872737ff5d0006fffd509da87f4bc9115cb5a39", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void execute()         throws TaskException", "signatureAfterChange": "      public void execute()         throws TaskException", "diff": ["-        final URL url = getURL( m_lib );", "-", "+", "+        final File file = getFile( m_lib );", "-        if( !isFullyDefined && null == url )", "+        if( !isFullyDefined && null == file )", "-                m_tskDeployer.deployConverter( m_classname, url.toString(), url );", "+                m_tskDeployer.deployConverter( m_classname, file );", "-                                         \" from \" + url, de );", "+                                         \" from \" + file, de );", "-            m_converterRegistry.registerConverter( m_classname, m_sourceType, m_destinationType );", "+            try", "+            {", "+                m_converterRegistry.registerConverter( m_classname, m_sourceType, m_destinationType );", "-            final DefaultTypeFactory factory = new DefaultTypeFactory( new URL[] { url } );", "-            factory.addNameClassMapping( m_classname, m_classname );", "-", "-            try { m_typeManager.registerType( Converter.ROLE, m_classname, factory ); }", "+                final URL url = file.toURL();", "+                final DefaultTypeFactory factory = new DefaultTypeFactory( new URL[] { url } );", "+                factory.addNameClassMapping( m_classname, m_classname );", "+                ", "+                m_typeManager.registerType( Converter.ROLE, m_classname, factory ); ", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d09975ece37305d0bd186adb239989ed", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/modules/core/RegisterDataType.java", "commitBeforeChange": "d23b08a302496937c4d1d08e31431ece313de2b8", "commitAfterChange": "5872737ff5d0006fffd509da87f4bc9115cb5a39", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     protected void registerResource( final String name,                                      final String className,                                      final URL url )         throws TaskException", "signatureAfterChange": "     protected void registerResource( final String name,                                      final String className,                                      final File file )         throws TaskException", "diff": ["-                                     final URL url )", "+                                     final File file )", "-            try { getDeployer().deployDataType( name, url.toString(), url ); }", "+            try { getDeployer().deployDataType( name, file ); }", "-                throw new TaskException( \"Failed deploying \" + name + \" from \" + url, de );", "+                throw new TaskException( \"Failed deploying \" + name + \" from \" + file, de );", "-            final DefaultTypeFactory factory = new DefaultTypeFactory( new URL[] { url } );", "-            factory.addNameClassMapping( name, className );", "-            try { getTypeManager().registerType( DataType.ROLE, name, factory ); }", "+            try", "+            {", "+                final URL url = file.toURL();", "+                final DefaultTypeFactory factory = new DefaultTypeFactory( new URL[] { url } );", "+                factory.addNameClassMapping( name, className );", "+                getTypeManager().registerType( DataType.ROLE, name, factory ); ", "+            }", "-                throw new TaskException( \"Failed registering \" + name + \" from \" + url, e );", "+                throw new TaskException( \"Failed registering \" + name + \" from \" + file, e );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8a8b4b70ead2e5394662c46b99b2436", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/modules/core/RegisterTasklet.java", "commitBeforeChange": "d23b08a302496937c4d1d08e31431ece313de2b8", "commitAfterChange": "5872737ff5d0006fffd509da87f4bc9115cb5a39", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     protected void registerResource( final String name,                                      final String className,                                      final URL url )         throws TaskException", "signatureAfterChange": "     protected void registerResource( final String name,                                      final String className,                                      final File file )         throws TaskException", "diff": ["-                                     final URL url )", "+                                     final File file )", "-            try { getDeployer().deployTask( name, url.toString(), url ); }", "+            try { getDeployer().deployTask( name, file ); }", "-                throw new TaskException( \"Failed deploying \" + name + \" from \" + url, de );", "+                throw new TaskException( \"Failed deploying \" + name + \" from \" + file, de );", "-            final DefaultTypeFactory factory = new DefaultTypeFactory( new URL[] { url } );", "-            factory.addNameClassMapping( name, className );", "-            try { getTypeManager().registerType( Task.ROLE, name, factory ); }", "+            try ", "+            { ", "+                final URL url = file.toURL();", "+                final DefaultTypeFactory factory = new DefaultTypeFactory( new URL[] { url } );", "+                factory.addNameClassMapping( name, className );", "+                getTypeManager().registerType( Task.ROLE, name, factory ); ", "+            }", "-                throw new TaskException( \"Failed registering \" + name + \" from \" + url, e );", "+                throw new TaskException( \"Failed registering \" + name + \" from \" + file, e );"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3697151397eaece75b3af27378e2a492", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "239968c24a7150544ebef9531b835e27", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "be12707c63314ce0314959ff551e37fe59b83943", "commitAfterChange": "4f3e4e1690289144b15872597586ed34ae92efb5", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "     public static String replaceProperties(Project project, String value, Hashtable keys )         throws BuildException", "signatureAfterChange": "     public static String replaceProperties(Project project, String value, Hashtable keys )             throws BuildException", "diff": ["-        throws BuildException", "-    {", "-        // XXX use Map instead of proj, it's too heavy", "+            throws BuildException {", "+        if (value == null) {", "+            return null;", "+        }", "-        // XXX need to replace this code with something better.", "-        StringBuffer sb=new StringBuffer();", "-        int i=0;", "-        int prev=0;", "-        // assert value!=nil", "-        int pos;", "-        while( (pos=value.indexOf( \"$\", prev )) >= 0 ) {", "-            if(pos>0) {", "-                sb.append( value.substring( prev, pos ) );", "+        Vector fragments = new Vector();", "+        Vector propertyRefs = new Vector();", "+        parsePropertyString(value, fragments, propertyRefs);", "+", "+        StringBuffer sb = new StringBuffer();", "+        Enumeration i = fragments.elements();", "+        Enumeration j = propertyRefs.elements();", "+        while (i.hasMoreElements()) {", "+            String fragment = (String)i.nextElement();", "+            if (fragment == null) {", "+                String propertyName = (String)j.nextElement();", "+                if (!keys.containsKey(propertyName)) {", "+                    project.log(\"Property ${\" + propertyName + \"} has not been set\", Project.MSG_VERBOSE);", "+                }", "+                fragment = (keys.containsKey(propertyName)) ? (String) keys.get(propertyName) ", "+                                                            : \"${\" + propertyName + \"}\"; ", "+            sb.append(fragment);", "+        }                        ", "+        ", "+        return sb.toString();", "+    }", "-                sb.append('$');", "-            else if (value.charAt( pos + 1 ) != '{' ) {", "-                sb.append( value.charAt( pos + 1 ) );", "-                prev=pos+2; // XXX", "-                int endName=value.indexOf( '}', pos );", "-                if( endName < 0 ) {", "-                    throw new BuildException(\"Syntax error in prop: \" +", "-                                             value );", "-                String n=value.substring( pos+2, endName );", "-                if (!keys.containsKey(n)) {", "-                    project.log(\"Property ${\" + n + \"} has not been set\", Project.MSG_VERBOSE);", "-                }", "-                ", "-                String v = (keys.containsKey(n)) ? (String) keys.get(n) : \"${\"+n+\"}\"; ", "-                ", "-                //System.out.println(\"N: \" + n + \" \" + \" V:\" + v);", "-                sb.append( v );", "-                prev=endName+1;", "-        if( prev < value.length() ) sb.append( value.substring( prev ) );", "-        //      System.out.println(\"After replace: \" + sb.toString());", "-        // System.out.println(\"Before replace: \" + value);", "-        return sb.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d9dc1b788ec3bb59d0b935816b9e55c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/filterreaders/src/main/org/apache/tools/ant/taskdefs/LoadProperties.java", "commitBeforeChange": "07f926d903581d863a35f5ab34929cd53a26023c", "commitAfterChange": "4e222b97c6be55124832d53c6478a2688df9e308", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public final void execute() throws BuildException", "signatureAfterChange": "     public final void execute() throws BuildException", "diff": ["-            int index = 0;", "-", "-                while (index != -1) {", "-                    int oldIndex = index;", "-                    index = text.indexOf(\"\\n\", oldIndex);", "-                    if (index != -1) {", "-                        String line = text.substring(oldIndex, index);", "-                        if (line.endsWith(\"\\r\")) {", "-                            line = line.substring(0, line.length() - 1);", "-                        }", "-                        int equalIndex = line.indexOf(\"=\");", "-                        int spaceIndex = line.indexOf(\" \");", "-                        int sepIndex = -1;", "-", "-                        if (equalIndex != -1 || spaceIndex != -1) {", "-                            if (equalIndex == -1) {", "-                                sepIndex = spaceIndex;", "-                            } else if (spaceIndex == -1) {", "-                                sepIndex = equalIndex;", "-                            } else {", "-                                sepIndex = Math.min(spaceIndex, equalIndex);", "-                            }", "-                        }", "-", "-                        if (sepIndex != -1) {", "-                            String key = line.substring(0, sepIndex);", "-                            String value = line.substring(sepIndex + 1);", "-                            if (value != null && value.trim().length() > 0) {", "-                                project.setNewProperty(key, value);", "-                            }", "-                        }", "-", "-                        ++index;", "+                StringInputStream sis = new StringInputStream(text);", "+                Properties props = new Properties();", "+                props.load(sis);", "+                Enumeration e = props.keys();", "+                while (e.hasMoreElements()) {", "+                    String key = (String) e.nextElement();", "+                    String value = props.getProperty(key);", "+                    if (key != null && value != null", "+                            && value.trim().length() > 0) {", "+                        project.setNewProperty(key, value);", "+                sis.close();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8e0109498193a06fe4f43425988c75b6", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a36f3619a1392a425611c41389ffadf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/cvslib/ChangeLogTask.java", "commitBeforeChange": "57248b5dfac3551c05f70d9fbbb3b1b20c53e479", "commitAfterChange": "5ec7e1db1b76797c2513ada02a7cdc4fa23903b4", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-", "-            final Commandline command = new Commandline();", "-            command.setExecutable(\"cvs\");", "-            command.createArgument().setValue(\"log\");", "+            setCommand(\"log\");", "+            if (getTag() != null) {", "+                CvsVersion myCvsVersion = new CvsVersion();", "+                myCvsVersion.setProject(getProject());", "+                myCvsVersion.setTaskName(\"cvsversion\");", "+                myCvsVersion.setCvsRoot(getCvsRoot());", "+                myCvsVersion.setCvsRsh(getCvsRsh());", "+                myCvsVersion.setPassfile(getPassFile());", "+                myCvsVersion.setDest(m_dir);", "+                myCvsVersion.execute();", "+                if (myCvsVersion.supportsCvsLogWithSOption()) {", "+                    addCommandArgument(\"-S\");", "+                }", "+            }", "-                command.createArgument().setValue(\"-d\");", "-                command.createArgument().setValue(dateRange);", "+                addCommandArgument(\"-d\");", "+                addCommandArgument(dateRange);", "-                        command.createArgument().setValue(files[i]);", "+                        addCommandArgument(files[i]);", "-            log(command.describeCommand(), Project.MSG_VERBOSE);", "+            log(getCommand(), Project.MSG_VERBOSE);", "-            final Execute exe = new Execute(handler);", "-", "-            exe.setWorkingDirectory(m_dir);", "-            exe.setCommandline(command.getCommandline());", "-            exe.setAntRun(getProject());", "-            try {", "-                final int resultCode = exe.execute();", "-", "-                if (Execute.isFailure(resultCode)) {", "-                    throw new BuildException(\"Error running cvs log\");", "-                }", "-            } catch (final IOException ioe) {", "-                throw new BuildException(ioe.toString());", "-            }", "-", "+            setDest(m_dir);", "+            setExecuteStreamHandler(handler);", "+            super.execute();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d8a12c6f92174d98ebe67b6b9bcddfe", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/taskdefs/jdepend/JDependTask.java", "commitBeforeChange": "7513ab1efa12321b3e2014764bfb23d16b425caf", "commitAfterChange": "299ea801bc1031e308bfe07a22e51edd1b972872", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void executeAsForked( final CommandlineJava commandline )         throws TaskException", "signatureAfterChange": "     private void executeAsForked()         throws TaskException", "diff": ["-    private void executeAsForked( final CommandlineJava commandline )", "+    private void executeAsForked()", "-        // if not set, auto-create the ClassPath from the project", "-        createClasspath();", "+        final ExecuteJava exe = new ExecuteJava();", "+        exe.setWorkingDirectory( m_dir );", "-        // not sure whether this test is needed but cost nothing to put.", "-        // hope it will be reviewed by anybody competent", "-        final String compileClasspath = PathUtil.formatPath( m_compileClasspath );", "-        if( compileClasspath.length() > 0 )", "+        if( \"text\".equals( m_format ) )", "-            commandline.addVmArgument( \"-classpath\" );", "-            commandline.addVmArgument( compileClasspath );", "+            exe.setClassName( \"jdepend.textui.JDepend\" );", "+        else", "+        {", "+            exe.setClassName( \"jdepend.xmlui.JDepend\" );", "+        }", "+", "+        if( m_jvm != null )", "+        {", "+            exe.setJvm( m_jvm );", "+        }", "+", "+        exe.getClassPath().addPath( m_compileClasspath );", "-            commandline.addArgument( \"-file\" );", "-            commandline.addArgument( m_outputFile.getPath() );", "-            // we have to find a cleaner way to put this output", "+            exe.getArguments().addArgument( \"-file\" );", "+            exe.getArguments().addArgument( m_outputFile );", "+            getContext().info( \"Output to be stored in \" + m_outputFile.getPath() );", "-            commandline.addArgument( f.getPath() );", "+            exe.getArguments().addArgument( f );", "-        final Execute exe = new Execute();", "-", "-        final String[] commandline1 = commandline.getCommandline();", "-        exe.setCommandline( new Commandline( commandline1 ) );", "-        exe.setWorkingDirectory( m_dir );", "-", "-        if( m_outputFile != null )", "-        {", "-            getContext().info( \"Output to be stored in \" + m_outputFile.getPath() );", "-        }", "-        exe.execute( getContext() );", "+        exe.executeForked( getContext() );"]}]}
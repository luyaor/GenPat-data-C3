{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a14cd8aa25f3158edf6b4e2052a44088", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14eccf5a1d632b8a14abbfb58d7958fd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/RenameExtensions.java", "commitBeforeChange": "c11c539ba35312f84c4c4660b4918e004a7b3337", "commitAfterChange": "0c19b8e359dc44686300770ced97d8446b311175", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        // scan source and dest dirs to build up rename list", "-        DirectoryScanner ds = getDirectoryScanner(srcDir);", "+        log(\"DEPRECATED - The renameext task is deprecated.  Use move instead.\",", "+            Project.MSG_WARN);", "+        log(\"Replace this with:\", Project.MSG_INFO);", "+        log(\"<move todir=\\\"\"+srcDir+\"\\\" overwrite=\\\"\"+replace+\"\\\">\", ", "+            Project.MSG_INFO);", "+        log(\"  <fileset dir=\\\"\"+srcDir+\"\\\" />\", Project.MSG_INFO);", "+        log(\"  <mapper type=\\\"glob\\\"\", Project.MSG_INFO);", "+        log(\"          from=\\\"*\"+fromExtension+\"\\\"\", Project.MSG_INFO);", "+        log(\"          to=\\\"*\"+toExtension+\"\\\" />\", Project.MSG_INFO);", "+        log(\"</move>\", Project.MSG_INFO);", "+        log(\"using the same patterns on <fileset> as you\\'ve used here\", ", "+            Project.MSG_INFO);", "-        String[] files = ds.getIncludedFiles();", "+        Move move = (Move)project.createTask(\"move\");", "+        move.setOwningTarget(target);", "+        move.setTaskName(getTaskName());", "+        move.setLocation(getLocation());", "+        move.setTodir(srcDir);", "+        move.setOverwrite(replace);", "-        Hashtable renameList = scanDir(srcDir, files);", "+        fileset.setDir(srcDir);", "+        move.addFileset(fileset);", "-        Enumeration e = renameList.keys();", "-        File fromFile = null;", "-        File toFile = null;", "-        while (e.hasMoreElements()) {", "-            fromFile = (File)e.nextElement();", "-            toFile = (File)renameList.get(fromFile);", "-            if (toFile.exists() && replace) toFile.delete();", "-            if (!fromFile.renameTo(toFile)) {", "-                throw new BuildException( \"Rename from: '\" + fromFile + \"' to '\" + ", "-                                          toFile + \"' failed.\" );", "-            }", "-        }", "+        Mapper me = move.createMapper();", "+        me.setType(globType);", "+        me.setFrom(\"*\"+fromExtension);", "+        me.setTo(\"*\"+toExtension);", "+        move.execute();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d8a12c6f92174d98ebe67b6b9bcddfe", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/taskdefs/jdepend/JDependTask.java", "commitBeforeChange": "7513ab1efa12321b3e2014764bfb23d16b425caf", "commitAfterChange": "299ea801bc1031e308bfe07a22e51edd1b972872", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void executeAsForked( final CommandlineJava commandline )         throws TaskException", "signatureAfterChange": "     private void executeAsForked()         throws TaskException", "diff": ["-    private void executeAsForked( final CommandlineJava commandline )", "+    private void executeAsForked()", "-        // if not set, auto-create the ClassPath from the project", "-        createClasspath();", "+        final ExecuteJava exe = new ExecuteJava();", "+        exe.setWorkingDirectory( m_dir );", "-        // not sure whether this test is needed but cost nothing to put.", "-        // hope it will be reviewed by anybody competent", "-        final String compileClasspath = PathUtil.formatPath( m_compileClasspath );", "-        if( compileClasspath.length() > 0 )", "+        if( \"text\".equals( m_format ) )", "-            commandline.addVmArgument( \"-classpath\" );", "-            commandline.addVmArgument( compileClasspath );", "+            exe.setClassName( \"jdepend.textui.JDepend\" );", "+        else", "+        {", "+            exe.setClassName( \"jdepend.xmlui.JDepend\" );", "+        }", "+", "+        if( m_jvm != null )", "+        {", "+            exe.setJvm( m_jvm );", "+        }", "+", "+        exe.getClassPath().addPath( m_compileClasspath );", "-            commandline.addArgument( \"-file\" );", "-            commandline.addArgument( m_outputFile.getPath() );", "-            // we have to find a cleaner way to put this output", "+            exe.getArguments().addArgument( \"-file\" );", "+            exe.getArguments().addArgument( m_outputFile );", "+            getContext().info( \"Output to be stored in \" + m_outputFile.getPath() );", "-            commandline.addArgument( f.getPath() );", "+            exe.getArguments().addArgument( f );", "-        final Execute exe = new Execute();", "-", "-        final String[] commandline1 = commandline.getCommandline();", "-        exe.setCommandline( new Commandline( commandline1 ) );", "-        exe.setWorkingDirectory( m_dir );", "-", "-        if( m_outputFile != null )", "-        {", "-            getContext().info( \"Output to be stored in \" + m_outputFile.getPath() );", "-        }", "-        exe.execute( getContext() );", "+        exe.executeForked( getContext() );"]}]}
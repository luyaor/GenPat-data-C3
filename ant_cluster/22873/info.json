{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5c8079f2bff821438f98ac2a3cf47231", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d9987a56129f37199f5b5ca82e0cf3c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Ant.java", "commitBeforeChange": "c77ef9c1638717bed6957e3195b997cfb9a781b0", "commitAfterChange": "451172e226f83491712da44c9dbc122f97ed78ab", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+", "+            // Are we trying to call the target in which we are defined (or", "+            // the build file if this is a top level task)?", "+            if (newProject.getProperty(\"ant.file\")", "+                .equals(getProject().getProperty(\"ant.file\"))", "+                && getOwningTarget() != null) {", "+                if (getOwningTarget().getName().equals(\"\")) {", "+                    if (getTaskName().equals(\"antcall\")) {", "+                        throw new BuildException(\"antcall must not be used at\"", "+                                                 + \" the top level.\");", "+                    } else {", "+                        throw new BuildException(getTaskName() + \" task at the\"", "+                                                 + \" top level must not invoke\"", "+                                                 + \" its own build file.\");", "+                    }", "+                } else if (getOwningTarget().getName().equals(target)) {", "+                    throw new BuildException(getTaskName() + \" task calling \"", "+                                             + \"its own parent target.\");", "+                }", "+            }", "+", "-            }", "-", "-            // Are we trying to call the target in which we are defined (or", "-            // the build file if this is a top level task)?", "-            if (newProject.getBaseDir().equals(getProject().getBaseDir())", "-                && newProject.getProperty(\"ant.file\").equals(getProject().getProperty(\"ant.file\"))", "-                && getOwningTarget() != null", "-                && (getOwningTarget().getName().equals(\"\")", "-                    || getOwningTarget().getName().equals(target))) {", "-                throw new BuildException(\"ant task calling its own parent \"", "-                                         + \"target\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52988142fc118ebb4cbee0a2aa65d42e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "2c4faa154f069f3f69d6c3c95629409a7b8b0cc4", "commitAfterChange": "8b58203e3120ecbeb7c53ce127fb41316f7eea92", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     private void checkIncludePatterns()", "signatureAfterChange": "     private void checkIncludePatterns()", "diff": ["+", "-        int wildcardPatternIndex = 0;", "-        for (int i = 0; i < includes.length; i++) {", "-            boolean wildcards = SelectorUtils.hasWildcards(includes[i]);", "-            if (FileUtils.isAbsolutePath(includes[i])) {", "-                //skip abs. paths not under basedir, if set:", "-                if (basedir != null", "-                    && !SelectorUtils.matchPatternStart(includes[i],", "-                    basedir.getAbsolutePath(), isCaseSensitive())) {", "-                    if (wildcards) {", "-                        wildcardPatternIndex++;", "-                    }", "-                    continue;", "-                }", "-            } else if (basedir == null) {", "-                //skip non-abs. paths if basedir == null:", "-                if (wildcards) {", "-                    wildcardPatternIndex++;", "-                }", "-                continue;", "-            }", "-            if (wildcards) {", "-                newroots.put(includePatterns[wildcardPatternIndex++]", "-                             .rtrimWildcardTokens(), includes[i]);", "-            } else {", "-                newroots.put(new TokenizedPath(includes[i]), includes[i]);", "+        for (int i = 0; i < includePatterns.length; i++) {", "+            String pattern = includePatterns[i].toString();", "+            if (!shouldSkipPattern(pattern)) {", "+                newroots.put(includePatterns[i].rtrimWildcardTokens(),", "+                             pattern);", "+        for (Iterator iter = includeNonPatterns.entrySet().iterator();", "+             iter.hasNext(); ) {", "+            Map.Entry entry = (Map.Entry) iter.next();", "+            String pattern = (String) entry.getKey();", "+            if (!shouldSkipPattern(pattern)) {", "+                newroots.put((TokenizedPath) entry.getValue(), pattern);", "+            }", "+        }", "+", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "757d5ffb93f414234a3c0e53b366baf8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/FixCRLF.java", "commitBeforeChange": "2f59f52b6308d1fa1c39b2d16d66c6f0e749718c", "commitAfterChange": "7f18b8f61106667917fa5bdd33b885344f2f5221", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "       private void processFile(String file) throws BuildException", "signatureAfterChange": "       private void processFile(String file) throws BuildException", "diff": ["+            boolean destIsWrong = true;", "-                    if (!destFile.delete()) {", "-                        throw new BuildException(\"Unable to delete \"", "-                                                 + destFile);", "-                    }", "-                    if (!tmpFile.renameTo(destFile)) {", "-                        throw new BuildException(", "-                                \"Failed to transform \" + srcFile", "-                                + \" to \" + destFile", "-                                + \". Couldn't rename temporary file: \"", "-                                + tmpFile);", "-                    }", "-", "-                } else { // destination is equal to temp file", "+                } else {", "-                    if (!tmpFile.delete()) {", "-                        throw new BuildException(\"Unable to delete \"", "-                                                 + tmpFile);", "-                    }", "-                }", "-            } else { // destFile does not exist - write the temp file", "-                log(\"destFile does not exist\", Project.MSG_DEBUG);", "-", "-                File parent = fileUtils.getParentFile(destFile);", "-                if (!parent.exists()) {", "-                    parent.mkdirs();", "-                }", "-", "-                if (!tmpFile.renameTo(destFile)) {", "-                    throw new BuildException(", "-                            \"Failed to transform \" + srcFile", "-                            + \" to \" + destFile", "-                            + \". Couldn't rename temporary file: \"", "-                            + tmpFile);", "+                    destIsWrong = false;", "-            tmpFile = null;", "+            if (destIsWrong) {", "+                fileUtils.rename(tmpFile, destFile);", "+                tmpFile = null;", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f8e475aecf7f6eddaebd9eba855f8e5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "b456160d70409bf1b5b6a2cfd211a4d012378f00", "commitAfterChange": "6aa8785e3250b197afbcde86f2fdc143f54e663a", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "     private AntTypeDefinition findRestrictedDefinition(         ComponentHelper helper, String componentName, List methods)", "signatureAfterChange": "     private AntTypeDefinition findRestrictedDefinition(         ComponentHelper helper, String componentName, List methods)", "diff": ["-        for (int i = 0; i < definitions.size(); ++i) {", "-            AntTypeDefinition d = (AntTypeDefinition) definitions.get(i);", "-            Class exposedClass = d.getExposedClass(helper.getProject());", "-            if (exposedClass == null) {", "-                continue;", "+        synchronized (definitions) {", "+            for (int i = 0; i < definitions.size(); ++i) {", "+                AntTypeDefinition d = (AntTypeDefinition) definitions.get(i);", "+                Class exposedClass = d.getExposedClass(helper.getProject());", "+                if (exposedClass == null) {", "+                    continue;", "+                }", "+                Method method  = findMatchingMethod(exposedClass, methods);", "+                if (method == null) {", "+                    continue;", "+                }", "+                if (matchedDefinitionClass != null) {", "+                    throw new BuildException(", "+                        \"ambiguous: restricted definitions for \"", "+                        + componentName + \" \"", "+                        + matchedDefinitionClass + \" and \" + exposedClass);", "+                }", "+                matchedDefinitionClass = exposedClass;", "+                definition = d;", "-            Method method  = findMatchingMethod(exposedClass, methods);", "-            if (method == null) {", "-                continue;", "-            }", "-            if (matchedDefinitionClass != null) {", "-                throw new BuildException(", "-                    \"ambiguous: restricted definitions for \"", "-                    + componentName + \" \"", "-                    + matchedDefinitionClass + \" and \" + exposedClass);", "-            }", "-            matchedDefinitionClass = exposedClass;", "-            definition = d;"]}]}
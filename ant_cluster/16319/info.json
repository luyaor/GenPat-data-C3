{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0eb550fe069279d521eedc0e3b09517a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06c2ad6255c9f0f640b3332b20f6eda8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ComponentManager.java", "commitBeforeChange": "fcc7e2b47f01468c83803caa09ce8266e56f213c", "commitAfterChange": "d571dff958cd85b5083a2a829f84e35b4abe4434", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     protected Object createComponent(String componentName, BuildElement model)          throws ExecutionException", "signatureAfterChange": "     private Object createComponent(String componentName, BuildElement model)          throws ExecutionException", "diff": ["-    protected Object createComponent(String componentName, BuildElement model)", "+    private Object createComponent(String componentName, BuildElement model)", "-        ImportInfo importInfo = getImport(componentName);", "-        if (importInfo == null) {", "-            throw new ExecutionException(\"There is no definition of the <\"", "-                 + componentName + \"> component\");", "+        Object component = null;", "+        if (model != null) {             ", "+            for (Iterator i = aspects.iterator(); i.hasNext();) {", "+                Aspect aspect = (Aspect) i.next();", "+                component = aspect.preCreateComponent(component, model);", "+            }", "-        String className = importInfo.getClassName();", "-", "-        ComponentLibrary componentLibrary", "-             = importInfo.getComponentLibrary();", "-", "-        return createComponentFromDef(componentName, componentLibrary,", "-            importInfo.getDefinition(), model);", "+        ", "+        if (component == null) {", "+            ImportInfo importInfo = getImport(componentName);", "+            if (importInfo == null) {", "+                throw new ExecutionException(\"There is no definition of the <\"", "+                + componentName + \"> component\");", "+            }", "+            String className = importInfo.getClassName();", "+            ", "+            ComponentLibrary componentLibrary", "+            = importInfo.getComponentLibrary();", "+            ", "+            component = createComponentFromDef(componentName, componentLibrary,", "+                importInfo.getDefinition(), model);", "+        }", "+        ", "+        if (model != null) {", "+            for (Iterator i = aspects.iterator(); i.hasNext();) {", "+                Aspect aspect = (Aspect) i.next();", "+                component = aspect.postCreateComponent(component, model);", "+            }", "+        }", "+        ", "+        return component;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72b032571718bb4c77760f705949799a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipFile.java", "commitBeforeChange": "aa43e37a025cdf54b8914b8283e57419a253ed59", "commitAfterChange": "dee95e3acc5154aee03ff5f91f9a56426ae79f3f", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 23, "signatureBeforeChange": "     private void resolveLocalFileHeaderData(Map entriesWithoutUTF8Flag)         throws IOException", "signatureAfterChange": "     private void resolveLocalFileHeaderData(Map<ZipEntry, NameAndComment>                                             entriesWithoutUTF8Flag)         throws IOException", "diff": ["-    private void resolveLocalFileHeaderData(Map entriesWithoutUTF8Flag)", "+    private void resolveLocalFileHeaderData(Map<ZipEntry, NameAndComment>", "+                                            entriesWithoutUTF8Flag)", "-        Enumeration e = Collections.enumeration(new HashSet(entries.keySet()));", "-        while (e.hasMoreElements()) {", "-            ZipEntry ze = (ZipEntry) e.nextElement();", "-            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);", "+        // changing the name of a ZipEntry is going to change", "+        // the hashcode - see COMPRESS-164", "+        // Map needs to be reconstructed in order to keep central", "+        // directory order", "+        Map<ZipEntry, OffsetEntry> origMap =", "+            new LinkedHashMap<ZipEntry, OffsetEntry>(entries);", "+        entries.clear();", "+        for (Map.Entry<ZipEntry, OffsetEntry> ent : origMap.entrySet()) {", "+            ZipEntry ze = ent.getKey();", "+            OffsetEntry offsetEntry = ent.getValue();", "-                    throw new RuntimeException(\"failed to skip file name in\"", "-                                               + \" local file header\");", "+                    throw new IOException(\"failed to skip file name in\"", "+                                          + \" local file header\");", "-            }            ", "+            }", "-            /*dataOffsets.put(ze,", "-                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH", "-                                     + SHORT + SHORT + fileNameLen + extraFieldLen));", "-            */", "-                // changing the name of a ZipEntry is going to change", "-                // the hashcode", "-                // - see https://issues.apache.org/jira/browse/COMPRESS-164", "-                entries.remove(ze);", "-                setNameAndCommentFromExtraFields(ze,", "-                                                 (NameAndComment)", "-                                                 entriesWithoutUTF8Flag.get(ze));", "-                entries.put(ze, offsetEntry);", "+                String orig = ze.getName();", "+                NameAndComment nc = entriesWithoutUTF8Flag.get(ze);", "+                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,", "+                                                         nc.comment);", "+                if (!orig.equals(ze.getName())) {", "+                    nameMap.remove(orig);", "+                    nameMap.put(ze.getName(), ze);", "+                }", "-        }", "-    }", "+            entries.put(ze, offsetEntry);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a44b69fe338ecf550ac36419508fa276", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e847d71d87a023091d737f14a21a2d4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "08ee283e413328452727333c6faf761a909d5662", "commitAfterChange": "476678d4a660bd6077ae4a8389cc29f42fbde0c9", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "      private NestedCreator getNestedCreator(         Project project, String parentUri, Object parent,         String elementName) throws BuildException", "signatureAfterChange": "      private NestedCreator getNestedCreator(         Project project, String parentUri, Object parent,         String elementName, UnknownElement child) throws BuildException", "diff": ["-        String elementName) throws BuildException {", "+        String elementName, UnknownElement child) throws BuildException {", "+        }", "+        if (nc == null && parent instanceof DynamicConfiguratorNS) {", "+            DynamicConfiguratorNS dc = (DynamicConfiguratorNS) parent;", "+            String qName = (child == null ? name : child.getQName());", "+            final Object nestedElement =", "+                dc.createDynamicElement(", "+                    (child == null ? \"\" : child.getNamespace()),", "+                    name, qName);", "+            if (nestedElement != null) {", "+                nc = new NestedCreator() {", "+                    public boolean isPolyMorphic() {", "+                        return false;", "+                    }", "+                    public Class getElementClass() {", "+                        return null;", "+                    }", "+", "+                    public Object getRealObject() {", "+                        return null;", "+                    }", "+", "+                    public Object create(", "+                        Project project, Object parent, Object ignore) {", "+                        return nestedElement;", "+                    }", "+                    public void store(Object parent, Object child) {", "+                    }", "+                };", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2b81b415e99bc35b9e8770ddfc1c0a3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "9de9f96130722fdc5761aa186dd87e7fbe84f994", "commitAfterChange": "f948bb98aabcf47939c53e349b1a054f00ecc833", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "      private NestedCreator getNestedCreator(Project project, Object parent,         String elementName) throws BuildException", "signatureAfterChange": "      private NestedCreator getNestedCreator(         Project project, String parentUri, Object parent,         String elementName) throws BuildException", "diff": ["-    private NestedCreator getNestedCreator(Project project, Object parent,", "-        String elementName) throws BuildException {", "-", "-        NestedCreator nc = (NestedCreator) nestedCreators.get(", "-            elementName.toLowerCase(Locale.US));", "-        if (nc == null) {", "-            nc = createAddTypeCreator(project, parent, elementName);", "-        }", "-        if (nc == null && parent instanceof DynamicConfigurator) {", "-            DynamicConfigurator dc = (DynamicConfigurator) parent;", "-            final Object nestedElement = dc.createDynamicElement(elementName);", "-            if (nestedElement != null) {", "-                nc = new NestedCreator() {", "-                    public boolean isPolyMorphic() {", "-                        return false;", "-                    }", "-                    public Class getElementClass() {", "-                        return null;", "-                    }", "-", "-                    public Object getRealObject() {", "-                        return null;", "-                    }", "-", "-                    public Object create(", "-                        Project project, Object parent, Object ignore) {", "-                        return nestedElement;", "-                    }", "-                    public void store(Object parent, Object child) {", "-                    }", "-                };", "-            }", "-        }", "-        if (nc == null) {", "-            throwNotSupported(project, parent, elementName);", "-        }", "-        return nc;", "-    }"]}]}
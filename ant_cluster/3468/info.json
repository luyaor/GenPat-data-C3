{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "57997000075032658ae233c99319b78b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d38010bb25cbdcd1ab1af599460fc1cc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ClasspathUtils.java", "commitBeforeChange": "052d19e952abee3ced0456b7412ec51fe8baa51b", "commitAfterChange": "b404a282b25f5b01eeb1646495eb2f36f675ebe9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public static ClassLoader getClassLoaderForPath(Path path, String pathId,                                                      boolean reverseLoader)", "signatureAfterChange": "     public static ClassLoader getClassLoaderForPath(         Project p, Path path, String loaderId, boolean reverseLoader)", "diff": ["+     */", "+    public static ClassLoader getClassLoaderForPath(", "+        Project p, Path path, String loaderId, boolean reverseLoader) {", "+        return getClassLoaderForPath(p, path, loaderId, reverseLoader,", "+                                     isMagicPropertySet(p));", "+    }", "-    public static ClassLoader getClassLoaderForPath(Path path, String pathId, ", "-                                                    boolean reverseLoader) {", "-        Project p = path.getProject();", "-        String loaderId = LOADER_ID_PREFIX + pathId;", "-        // code stolen from o.a.t.a.taskdefs.Definer, might be a todo", "-        // to remove it there didn't look at the reverse loader stuff", "-        // however (todo that first)", "-        if (p.getProperty(REUSE_LOADER_REF) != null) {", "-            //chose not to do the extra instanceof checking here, consider it ", "-            // a programming error and not a config error if this fails", "-            // so I assume the RuntimeException is OK ", "-            cl = (ClassLoader)p.getReference(loaderId);", "-        if (cl == null){", "-            cl = getUniqueClassLoaderForPath(path, reverseLoader);", "-            p.addReference(loaderId, cl);            ", "-        } ", "-        ", "-        return cl;        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1a1c18d19b5be294f59a46467face90", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Project.java", "commitBeforeChange": "ff04e875ee2a99514bbea79b677968a63befff72", "commitAfterChange": "2e3455f4e62419b163a4a05c4c40b0f717366283", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private AntClassLoader createClassLoader()", "signatureAfterChange": "     public AntClassLoader createClassLoader(Path path)", "diff": ["-     */", "-    private AntClassLoader createClassLoader() {", "-        AntClassLoader loader = null;", "-        try {", "-            // 1.2+ - create advanced helper dynamically", "-            Class loaderClass", "-                    = Class.forName(ANTCLASSLOADER_JDK12);", "-            loader = (AntClassLoader) loaderClass.newInstance();", "-        } catch (Exception e) {", "-            log(\"Unable to create Class Loader: \"", "-                    + e.getMessage(), Project.MSG_DEBUG);", "-        }", "-", "-        if (loader == null) {", "-            loader = new AntClassLoader();", "-        }", "-", "-        loader.setProject(this);", "-        return loader;", "-    }", "+        AntClassLoader loader = new AntClassLoader2();", "+        loader.setProject(this);"]}]}
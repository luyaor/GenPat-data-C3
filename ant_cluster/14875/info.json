{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "beb2bbb3997c06a13e37ec1c4faf3dba", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a71391314ac233b0a117dc6d1aeefc6f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "d25488cbbb28cf25e1f91f714c70999fd105432d", "commitAfterChange": "3d706ab8188a674936880b6f4530b0cf3991758b", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "     private TokenizedPattern[] fillNonPatternSet(Map map, String[] patterns)", "signatureAfterChange": "     private TokenizedPattern[] fillNonPatternSet(Map<String, TokenizedPath> map, String[] patterns)", "diff": ["-    private TokenizedPattern[] fillNonPatternSet(Map map, String[] patterns) {", "-        ArrayList al = new ArrayList(patterns.length);", "+    private TokenizedPattern[] fillNonPatternSet(Map<String, TokenizedPath> map, String[] patterns) {", "+        ArrayList<TokenizedPattern> al = new ArrayList<TokenizedPattern>(patterns.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e13850495459322a19403489a9a0d6ef", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "     private TokenizedPattern[] fillNonPatternSet(Map<String, TokenizedPath> map, String[] patterns)", "signatureAfterChange": "     private TokenizedPattern[] fillNonPatternSet(final Map<String, TokenizedPath> map, final String[] patterns)", "diff": ["-    private TokenizedPattern[] fillNonPatternSet(Map<String, TokenizedPath> map, String[] patterns) {", "-        ArrayList<TokenizedPattern> al = new ArrayList<TokenizedPattern>(patterns.length);", "+    private TokenizedPattern[] fillNonPatternSet(final Map<String, TokenizedPath> map, final String[] patterns) {", "+        final ArrayList<TokenizedPattern> al = new ArrayList<TokenizedPattern>(patterns.length);", "-                String s = isCaseSensitive()", "+                final String s = isCaseSensitive()"]}]}
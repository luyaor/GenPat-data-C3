{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f710446165160033e10673475170ff3c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17b491507515e2a47a27be035f12436e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/cvslib/ChangeLogTask.java", "commitBeforeChange": "a603964d0e47e977ecfb361ec75ec17603752c58", "commitAfterChange": "08f7f02ab32e3605b614545855381a0f0e1d0392", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private CVSEntry[] filterEntrySet(final CVSEntry[] entrySet)", "signatureAfterChange": "     private CVSEntry[] filterEntrySet(final CVSEntry[] entrySet)", "diff": ["-", "+            ", "+            //bug#30471", "+            //this is caused by Date.after throwing a NullPointerException", "+            //for some reason there's no date set in the CVSEntry", "+            //Java 1.3.1 API", "+            //http://java.sun.com/j2se/1.3/docs/api/java/util/Date.html#after(java.util.Date)", "+            //doesn't throw NullPointerException", "+            //Java 1.4.2 + 1.5 API", "+            //http://java.sun.com/j2se/1.4.2/docs/api/java/util/Date.html#after(java.util.Date)", "+            //according to the docs it doesn't throw, according to the bug report it does", "+            //http://java.sun.com/j2se/1.5.0/docs/api/java/util/Date.html#after(java.util.Date)", "+            //according to the docs it does throw", "+            ", "+            //for now skip entries which are missing a date", "+            if (null == date) {", "+                continue;", "+            }", "+            "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6de11927f3918d1967831e2e4c37f0aa", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "930f2f2030a279a8565becb92ecf5407d5972589", "commitAfterChange": "8585763d2022bbdda30bb6a7e2d523fbea25542a", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private void checkIncludePatterns()", "signatureAfterChange": "     private void checkIncludePatterns()", "diff": ["+            // we need to call getCanonicalFile here for DOS systems", "+            // the reason being that otherwise File will be influenced", "+            // by the case of currentelement, which we want to avoid", "+            if (Os.isFamily(\"dos\") && myfile.exists()) {", "+                try {", "+                    // getAbsoluteFile() is not enough here unfortunately", "+                    myfile = myfile.getCanonicalFile();", "+                }", "+                catch (Exception ex) {", "+                    throw new BuildException(ex);", "+                }", "+                // the variable currentelement is actually telling what", "+                // the scan results will contain", "+                currentelement = fileUtils.removeLeadingPath(basedir,", "+                                                             myfile);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dde240fb24065829489cef104460f736", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/deployer/ServiceDescriptorBuilder.java", "commitBeforeChange": "56250d886e6efcfa207e9c1f2cd4b00985e259fd", "commitAfterChange": "be938b1e8fe6d68aec358cb6982c7d70fe827886", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public TypelibDescriptor createDescriptor( final Configuration config,                                                final String url )         throws DeploymentException", "signatureAfterChange": "     public TypelibDescriptor createDescriptor( final Configuration config,                                                final String url )         throws DeploymentException", "diff": ["-            // TODO - populate the descriptor", "+            // Build the descriptor", "+            final ServiceDescriptor descriptor = new ServiceDescriptor( url );", "-            return new ServiceDescriptor( url );", "+            // Add the service definitions", "+            final Configuration[] elements = config.getChildren();", "+            for( int i = 0; i < elements.length; i++ )", "+            {", "+                final Configuration element = elements[ i ];", "+                final String roleShorthand = element.getName();", "+                final String factoryClassName = element.getAttribute( \"factory\" );", "+                final ServiceDefinition definition = new ServiceDefinition( roleShorthand, factoryClassName, config );", "+                descriptor.addDefinition( definition );", "+            }", "+", "+            return descriptor;"]}]}
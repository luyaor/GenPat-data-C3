{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c00079d3a03734790af9a2f89c5db25c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82429a98f9eb8be3e257c0aa9e58ffc2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/junit/src/main/org/apache/tools/ant/taskdefs/optional/rjunit/formatter/XMLFormatter.java", "commitBeforeChange": "b5388a13508f06fa8db0823d69fd93b55c51a514", "commitAfterChange": "6fd8df2dc29733f2f2b0d2c844877f26543a0070", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void onTestStarted(TestRunEvent evt)", "signatureAfterChange": "      public void onTestStarted(TestRunEvent evt)", "diff": ["-        //@fixme, eh, a testname only can obviouslly be a duplicate...", "-        testStarts.put(evt.getName(), evt);", "-        Element currentTest = doc.createElement(TESTCASE);", "-        currentTest.setAttribute(ATTR_NAME, evt.getName());", "-        rootElement.appendChild(currentTest);", "-        testElements.put(evt.getName(), currentTest);", "-        //removeEvent(evt);", "+        Element test = doc.createElement(TESTCASE);", "+        String name = JUnitHelper.getTestName(evt.getName());", "+        test.setAttribute(ATTR_NAME, name);", "+        String suiteName = JUnitHelper.getSuiteName(evt.getName());", "+        lastSuiteElement.appendChild(test);", "+        lastTestElement = test;", "+        lastTestEvent = evt;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0e7b5293bf427a21d8df1282a87c611", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ImportTask.java", "commitBeforeChange": "27b0172aac056d0a4710e82e259bd31a24841b16", "commitAfterChange": "6b2378c2e6dfde13698cbe45bf633854c817bbd6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void execute()", "signatureAfterChange": "      public void execute()", "diff": ["+", "+        String oldSep = ProjectHelper.getCurrentPrefixSeparator();", "-            ProjectHelper.setCurrentTargetPrefix(targetPrefix);", "-            ProjectHelper.setInIncludeMode(isInIncludeMode());", "+            String prefix = targetPrefix;", "+            if (isInIncludeMode() && oldPrefix != null", "+                && targetPrefix != null) {", "+                prefix = oldPrefix + oldSep + targetPrefix;", "+            }", "+            setProjectHelperProps(prefix, prefixSeparator,", "+                                  isInIncludeMode());", "+", "-            ProjectHelper.setCurrentTargetPrefix(oldPrefix);", "-            ProjectHelper.setInIncludeMode(oldIncludeMode);", "+            setProjectHelperProps(oldPrefix, oldSep, oldIncludeMode);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aba3935c1858f39e621abf1ddf58b332", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/embeddor/DefaultEmbeddor.java", "commitBeforeChange": "6638f2ac2b2d797fe2789ea7cbcf235b7cf4ea5a", "commitAfterChange": "7eb8a34e54e5c7ff3241f4414e04cf3b623c3e07", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public Workspace createWorkspace( final Parameters parameters )         throws Exception", "signatureAfterChange": "     public Workspace createWorkspace( final Map properties )         throws Exception", "diff": ["-    public Workspace createWorkspace( final Parameters parameters )", "+    public Workspace createWorkspace( final Map properties )", "-        // TODO - don't do this; need some way to pass separate sets of defines and config", "-        // to the workspace", "-        parameters.setParameter( MYRMIDON_HOME, m_parameters.getParameter( MYRMIDON_HOME ) );", "-        setupObject( workspace, m_workspaceServiceManager, parameters );", "+        setupObject( workspace, m_workspaceServiceManager, m_parameters );", "+", "+        // Create the property store", "+        final PropertyStore propStore = createBaseStore( properties );", "+", "+        // Create an execution frame, and attach it to the workspace", "+        final ExecutionFrame frame =", "+            new DefaultExecutionFrame( getLogger(),", "+                                       propStore,", "+                                       m_workspaceServiceManager);", "+        ( (ExecutionContainer)workspace ).setRootExecutionFrame( frame );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4f34ae227ef6a04c4224c2d3258468d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/DependSet.java", "commitBeforeChange": "4d9b1cdf1f3b8f3fde53ae386e988b29b32be390", "commitAfterChange": "163e6b921c7a1808e143feb626537fae620ba1fa", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "      private boolean uptodate(ResourceCollection src, ResourceCollection target)", "signatureAfterChange": "      private boolean uptodate(ResourceCollection src, ResourceCollection target)", "diff": ["-        int neTargets = new NonExistent(targets).size();", "+        NonExistent missingTargets = new NonExistent(targets);", "+        int neTargets = missingTargets.size();", "+            logMissing(missingTargets, \"target\");", "-        log(oldestTarget + \" is oldest target file\", Project.MSG_VERBOSE);", "+        logWithModificationTime(oldestTarget, \"oldest target file\");", "-        int neSources = new NonExistent(sources).size();", "+        NonExistent missingSources = new NonExistent(sources);", "+        int neSources = missingSources.size();", "+            logMissing(missingSources, \"source\");", "-        log(newestSource.toLongString() + \" is newest source\", Project.MSG_VERBOSE);", "+        logWithModificationTime(newestSource, \"newest source\");"]}]}
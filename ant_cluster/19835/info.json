{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6cb060ca45feb5992b4f16eb869f093b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40fab72c00ee0ab0dbf6b6476f2e35e7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/i18n/Translate.java", "commitBeforeChange": "16cc5da1fc0317172d43328232994314b59697fa", "commitAfterChange": "fb25c836b47f9a54bc7cb7924e40537e65d00b2b", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private void translate() throws BuildException", "signatureAfterChange": "     private void translate() throws BuildException", "diff": ["-                        // 2003-02-21 new replace algorithm by tbee (tbee@tbee.org)", "-                        // because it wasn't able to replace something like \"@aaa;@bbb;\"", "+                            // 2003-02-21 new replace algorithm by tbee (tbee@tbee.org)", "+                            // because it wasn't able to replace something like \"@aaa;@bbb;\"", "-                        // is there a startToken", "-                        // and there is still stuff following the startToken", "-                        int startIndex = line.indexOf(startToken);", "-                        while (startIndex >= 0", "-                            && (startIndex + startToken.length()) <= line.length()) {", "-                            // the new value, this needs to be here", "-                            // because it is required to calculate the next position to search from", "-                            // at the end of the loop", "-                            String replace = null;", "+                            // is there a startToken", "+                            // and there is still stuff following the startToken", "+                            int startIndex = line.indexOf(startToken);", "+                            while (startIndex >= 0", "+                                && (startIndex + startToken.length()) <= line.length()) {", "+                                // the new value, this needs to be here", "+                                // because it is required to calculate the next position to search from", "+                                // at the end of the loop", "+                                String replace = null;", "-                            // we found a starttoken, is there an endtoken following?", "-                            // start at token+tokenlength because start and end", "-                            // token may be indentical", "-                            int endIndex = line.indexOf(endToken, startIndex + startToken.length());", "-                            if (endIndex < 0) {", "-                                startIndex += 1;", "-                            } else {", "-                                // grab the token", "-                                String token", "-                                    = line.substring(startIndex + startToken.length(), endIndex);", "-", "-                                // If there is a white space or = or :, then", "-                                // it isn't to be treated as a valid key.", "-                                boolean validToken = true;", "-                                for (int k = 0; k < token.length() && validToken; k++) {", "-                                    char c = token.charAt(k);", "-                                    if (c == ':' || c == '='", "-                                        || Character.isSpaceChar(c)) {", "-                                        validToken = false;", "-                                    }", "-                                }", "-                                if (!validToken) {", "+                                // we found a starttoken, is there an endtoken following?", "+                                // start at token+tokenlength because start and end", "+                                // token may be indentical", "+                                int endIndex = line.indexOf(endToken, startIndex + startToken.length());", "+                                if (endIndex < 0) {", "-                                    // find the replace string", "-                                    if (resourceMap.containsKey(token)) {", "-                                        replace = (String) resourceMap.get(token);", "-                                    } else {", "-                                        replace = token;", "+                                    // grab the token", "+                                    String token", "+                                        = line.substring(startIndex + startToken.length(), endIndex);", "+", "+                                    // If there is a white space or = or :, then", "+                                    // it isn't to be treated as a valid key.", "+                                    boolean validToken = true;", "+                                    for (int k = 0; k < token.length() && validToken; k++) {", "+                                        char c = token.charAt(k);", "+                                        if (c == ':' || c == '='", "+                                            || Character.isSpaceChar(c)) {", "+                                            validToken = false;", "+                                        }", "+                                    if (!validToken) {", "+                                        startIndex += 1;", "+                                    } else {", "+                                        // find the replace string", "+                                        if (resourceMap.containsKey(token)) {", "+                                            replace = (String) resourceMap.get(token);", "+                                        } else {", "+                                            log(\"Replacement string missing for: \"", "+                                                + token, Project.MSG_VERBOSE);", "+                                            replace = startToken + token + endToken;", "+                                        }", "-                                    // generate the new line", "-                                    line = line.substring(0, startIndex)", "-                                         + replace", "-                                         + line.substring(endIndex + endToken.length());", "+                                        // generate the new line", "+                                        line = line.substring(0, startIndex)", "+                                             + replace", "+                                             + line.substring(endIndex + endToken.length());", "-                                    // set start position for next search", "-                                    startIndex += replace.length();", "+                                        // set start position for next search", "+                                        startIndex += replace.length();", "+                                    }", "+", "+                                // find next starttoken", "+                                startIndex = line.indexOf(startToken, startIndex);", "-", "-                            // find next starttoken", "-                            startIndex = line.indexOf(startToken, startIndex);", "-                        }", "-", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6a9e1e40eba7f304354bb2e74b864c3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/email/EmailTask.java", "commitBeforeChange": "8d0a7dc50ac5f28978517eb289457e26b4b40c44", "commitAfterChange": "27b9f24bf23dcd72f13756dd74984dd2432c39c0", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": "     public void execute()", "signatureAfterChange": "     public void execute()", "diff": ["+            log(\"ReplyTo \" + replyToList,Project.MSG_VERBOSE);", "+            mailer.setReplyToList(replyToList);"]}]}
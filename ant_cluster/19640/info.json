{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1e1c07b52d3b363f6845cfd98ac6f1ef", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c56535e2cd5251d3e8c75eb733980a4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/PathTokenizer.java", "commitBeforeChange": "769fac83235a4c2fac00097cd26f201aa7eae534", "commitAfterChange": "a91adaf451abf4857fd8ce133757dfc3b433bf3f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public PathTokenizer(String path)", "signatureAfterChange": "     public PathTokenizer(String path)", "diff": ["-       tokenizer = new StringTokenizer(path, \":;\", false);", "-       dosStyleFilesystem = File.pathSeparatorChar == ';'; ", "+        if (onNetWare) {", "+            // For NetWare, use the boolean=true mode, so we can use delimiter ", "+            // information to make a better decision later.", "+            tokenizer = new StringTokenizer(path, \":;\", true);", "+        }", "+        else {", "+            // on Windows and Unix, we can ignore delimiters and still have", "+            // enough information to tokenize correctly.", "+            tokenizer = new StringTokenizer(path, \":;\", false);", "+        }", "+        dosStyleFilesystem = File.pathSeparatorChar == ';'; "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "858ce8c0ad2fff55b771f5ee7733845a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Jar.java", "commitBeforeChange": "88bdf1337ee0276e778f0417442cafab101743ac", "commitAfterChange": "8df1ef0ecfcd30c0445cb3f7300cdf8e16e32df1", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     protected ArchiveState getResourcesToAdd(ResourceCollection[] rcs,                                              File zipFile,                                              boolean needsUpdate)         throws BuildException", "signatureAfterChange": "     protected ArchiveState getResourcesToAdd(ResourceCollection[] rcs,                                              File zipFile,                                              boolean needsUpdate)         throws BuildException", "diff": ["+        if (skipWriting) {", "+            // this pass is only there to construct the merged", "+            // manifest this means we claim an update was needed and", "+            // only include the manifests, skipping any uptodate", "+            // checks here defering them for the second run", "+            return new ArchiveState(true, grabManifests(rcs));", "+        }", "+", "-                    logOnFirstPass(\"Updating jar since the current jar has\"", "+                    log(\"Updating jar since the current jar has\"", "-                        logOnFirstPass(\"Updating jar since jar manifest has\"", "+                        log(\"Updating jar since jar manifest has\""]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f698b7db4acb78ee8514c05a7f1d71a9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e7fe4e02552bcf417b4a138fce585dc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "9174fbde3b63fde69fee83a681d22301f7aa7a02", "commitAfterChange": "c2077d52ddbe15f9357e4609f78f6cd8187b0365", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 77, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        boolean javadoc1 = (Project.getJavaVersion() == Project.JAVA_1_1);", "-", "-", "-        Vector argList = new Vector();", "-        if(maxmemory != null){", "-            if(javadoc1){", "-                argList.addElement(\"-J-mx\" + maxmemory);", "-            }", "-            else{", "-                argList.addElement(\"-J-Xmx\" + maxmemory);", "-            }", "-        }", "-", "-            argList.addElement(\"-classpath\");", "-            argList.addElement(classpath.toString());", "+            cmd.createArgument().setValue(\"-classpath\");", "+            cmd.createArgument().setValue(classpath.toString());", "-                argList.addElement(\"-sourcepath\");", "-                argList.addElement(sourcePath.toString());", "+                cmd.createArgument().setValue(\"-sourcepath\");", "+                cmd.createArgument().setValue(sourcePath.toString());", "-            argList.addElement(\"-classpath\");", "-            argList.addElement(sourcePath.toString() +", "+            cmd.createArgument().setValue(\"-classpath\");", "+            cmd.createArgument().setValue(sourcePath.toString() +", "-        if (destDir != null) {", "-            argList.addElement(\"-d\");", "-            argList.addElement(destDir.getAbsolutePath());", "-        }", "-            argList.addElement (\"-version\");", "-        if (nodeprecated)", "-            argList.addElement (\"-nodeprecated\");", "+            cmd.createArgument().setValue(\"-version\");", "-            argList.addElement (\"-author\");", "-        if (noindex)", "-            argList.addElement (\"-noindex\");", "-        if (notree)", "-            argList.addElement (\"-notree\");", "-        if (pub)", "-            argList.addElement (\"-public\");", "-        if (prot)", "-            argList.addElement (\"-protected\");", "-        if (pack)", "-            argList.addElement (\"-package\");", "-        if (priv)", "-            argList.addElement (\"-private\");", "-        if (encoding != null) {", "-            argList.addElement(\"-encoding\");", "-            argList.addElement(encoding);", "-        }", "-        if (docencoding != null) {", "-            argList.addElement(\"-docencoding\");", "-            argList.addElement(docencoding);", "-        }", "+            cmd.createArgument().setValue(\"-author\");", "-            if (overviewFile != null) {", "-                argList.addElement(\"-overview\");", "-                argList.addElement(overviewFile.getAbsolutePath());", "-            }", "-            if (old)", "-                argList.addElement(\"-1.1\");", "-            if (verbose)", "-                argList.addElement(\"-verbose\");", "-            if (use)", "-                argList.addElement(\"-use\");", "-            if (splitindex)", "-                argList.addElement(\"-splitindex\");", "-            if (nodeprecatedlist)", "-                argList.addElement(\"-nodeprecatedlist\");", "-            if (nohelp)", "-                argList.addElement(\"-nohelp\");", "-            if (nonavbar)", "-                argList.addElement(\"-nonavbar\");", "-            if (serialwarn)                     ", "-                argList.addElement(\"-serialwarn\");", "-                    throw new BuildException(\"The doclet name must be specified.\");", "+                    throw new BuildException(\"The doclet name must be specified.\", location);", "-                    argList.addElement(\"-doclet\");", "-                    argList.addElement(doclet.getName());", "+                    cmd.createArgument().setValue(\"-doclet\");", "+                    cmd.createArgument().setValue(doclet.getName());", "-                        argList.addElement(\"-docletpath\");", "-                        argList.addElement(doclet.getPath().toString());", "+                        cmd.createArgument().setValue(\"-docletpath\");", "+                        cmd.createArgument().setValue(doclet.getPath().toString());", "-                        argList.addElement(param.getName());", "+                        cmd.createArgument().setValue(param.getName());", "-                            argList.addElement(param.getValue());", "+                            cmd.createArgument().setValue(param.getValue());", "-                argList.addElement(\"-bootclasspath\");", "-                argList.addElement(bootclasspath.toString());", "-            }", "-            if (extdirs != null) {", "-                argList.addElement(\"-extdirs\");", "-                argList.addElement(extdirs);", "-            }", "-            if (locale != null) {", "-                argList.addElement(\"-locale\");", "-                argList.addElement(locale);", "-            }", "-            if (encoding != null) {", "-                argList.addElement(\"-encoding\");", "-                argList.addElement(encoding);", "-            }", "-            if (windowtitle != null) {", "-                argList.addElement(\"-windowtitle\");", "-                argList.addElement(windowtitle);", "-            }", "-            if (doctitle != null) {", "-                argList.addElement(\"-doctitle\");", "-                argList.addElement(doctitle);", "-            }", "-            if (header != null) {", "-                argList.addElement(\"-header\");", "-                argList.addElement(header);", "-            }", "-            if (footer != null) {", "-                argList.addElement(\"-footer\");", "-                argList.addElement(footer);", "-            }", "-            if (bottom != null) {", "-                argList.addElement(\"-bottom\");", "-                argList.addElement(bottom);", "-            }", "-            ", "-            // add the single link arguments", "-            if (link != null) {", "-                argList.addElement(\"-link\");", "-                argList.addElement(link);", "+                cmd.createArgument().setValue(\"-bootclasspath\");", "+                cmd.createArgument().setValue(bootclasspath.toString());", "-                        argList.addElement(\"-linkoffline\");", "-                        argList.addElement(la.getHref());", "-                        argList.addElement(packageListLocation);", "+                        cmd.createArgument().setValue(\"-linkoffline\");", "+                        cmd.createArgument().setValue(la.getHref());", "+                        cmd.createArgument().setValue(packageListLocation);", "-                        argList.addElement(\"-link\");", "-                        argList.addElement(la.getHref());", "+                        cmd.createArgument().setValue(\"-link\");", "+                        cmd.createArgument().setValue(la.getHref());", "-            // add the single linkoffline arguments", "-            if (linkoffline != null) {", "-                argList.addElement(\"-linkoffline\");", "-                argList.addElement(linkoffline);", "-            }", "-            ", "-                    argList.addElement(\"-group\");", "-                    argList.addElement(name);", "-                    argList.addElement(pkgList);", "+                    cmd.createArgument().setValue(\"-group\");", "+                    cmd.createArgument().setValue(name);", "+                    cmd.createArgument().setValue(pkgList);", "-                    argList.addElement(\"-group\");", "-                    argList.addElement(title);", "-                    argList.addElement(packages);", "+                    cmd.createArgument().setValue(\"-group\");", "+                    cmd.createArgument().setValue(title);", "+                    cmd.createArgument().setValue(packages);", "-            if (stylesheetfile != null) {", "-                argList.addElement(\"-stylesheetfile\");", "-                argList.addElement(stylesheetfile.getAbsolutePath());", "-            }", "-            if (helpfile != null) {", "-                argList.addElement(\"-helpfile\");", "-                argList.addElement(helpfile.getAbsolutePath());", "-            }", "-            if (charset != null) {", "-                argList.addElement(\"-charset\");", "-                argList.addElement(charset);", "-            }", "-            if (additionalParam != null) {", "-                argList.addElement(additionalParam);", "-            }", "-                    argList.addElement(name);", "+                    cmd.createArgument().setValue(name);", "-                evaluatePackages(sourcePath, packages, argList);", "+                evaluatePackages(sourcePath, packages);", "-                argList.addElement(tok.nextToken().trim());", "+                cmd.createArgument().setValue(tok.nextToken().trim());", "-            argList.addElement(\"@\" + packageList);", "+            cmd.createArgument().setValue(\"@\" + packageList);", "-        log(\"Javadoc args: \" + argList.toString(), Project.MSG_VERBOSE);", "+        log(\"Javadoc args: \" + cmd.getArguments(), Project.MSG_VERBOSE);", "-        StringBuffer b = new StringBuffer();", "-        b.append(\"javadoc \");", "-", "-        Enumeration e = argList.elements();", "-        while (e.hasMoreElements()) {", "-            String arg = (String) e.nextElement();", "-            if (!arg.startsWith(\"-\")) {", "-                b.append(\"\\\"\");", "-                b.append(arg);", "-                b.append(\"\\\"\");", "-            } else {", "-                b.append(arg);", "-            }", "-            if (e.hasMoreElements()) b.append(\" \");", "+        JavadocOutputStream out = new JavadocOutputStream(Project.MSG_INFO);", "+        JavadocOutputStream err = new JavadocOutputStream(Project.MSG_WARN);", "+        Execute exe = new Execute(new PumpStreamHandler(out, err));", "+        exe.setAntRun(project);", "+        exe.setWorkingDirectory(project.getBaseDir());", "+        try {", "+            exe.setCommandline(cmd.getCommandline());", "+            exe.execute();", "+        } catch (IOException e) {", "+            throw new BuildException(\"Execute failed: \" + e, e, location);", "+        } finally {", "+            out.logFlush();", "+            err.logFlush();", "+            try {", "+                out.close();", "+                err.close();", "+            } catch (IOException e) {}", "-", "-        run(b.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "835f785c3a3e9b366646e9296fec0f43", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/DependSet.java", "commitBeforeChange": "3fd5d9ba323b0d4cf83368085be5c9103d97f7f5", "commitAfterChange": "d8a41c88bee05a818356bf6f4f16f31ccc43940e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-", "-        if ((sourceFileSets.size() == 0) && (sourceFileLists.size() == 0)) {", "-          throw new BuildException(\"At least one <srcfileset> or <srcfilelist>\"", "-                                   + \" element must be set\");", "+        if (sources == null) {", "+          throw new BuildException(", "+              \"At least one set of source resources must be specified\");", "-        if ((targetFileSets.size() == 0) && (targetFileLists.size() == 0)) {", "-          throw new BuildException(\"At least one <targetfileset> or\"", "-                                   + \" <targetfilelist> element must be set\");", "+        if (targets == null) {", "+          throw new BuildException(", "+              \"At least one set of target files must be specified\");", "-        long now = (new Date()).getTime();", "-        /*", "-          We have to munge the time to allow for the filesystem time", "-          granularity.", "-        */", "-        now += FILE_UTILS.getFileTimestampGranularity();", "-", "-        // Grab all the target files specified via filesets:", "-        Vector allTargets = new Vector();", "-        long oldestTargetTime = 0;", "-        File oldestTarget = null;", "-        Enumeration enumTargetSets = targetFileSets.elements();", "-        while (enumTargetSets.hasMoreElements()) {", "-", "-           FileSet targetFS          = (FileSet) enumTargetSets.nextElement();", "-           if (!targetFS.getDir(getProject()).exists()) {", "-               // this is the same as if it was empty, no target files found", "-               continue;", "-           }", "-           DirectoryScanner targetDS = targetFS.getDirectoryScanner(getProject());", "-           String[] targetFiles      = targetDS.getIncludedFiles();", "-", "-           for (int i = 0; i < targetFiles.length; i++) {", "-", "-              File dest = new File(targetFS.getDir(getProject()), targetFiles[i]);", "-              allTargets.addElement(dest);", "-", "-              if (dest.lastModified() > now) {", "-                 log(\"Warning: \" + targetFiles[i] + \" modified in the future.\",", "-                     Project.MSG_WARN);", "-              }", "-              if (oldestTarget == null", "-                || dest.lastModified() < oldestTargetTime) {", "-                  oldestTargetTime = dest.lastModified();", "-                  oldestTarget = dest;", "-              }", "-           }", "+        //no sources = nothing to compare; no targets = nothing to delete:", "+        if (sources.size() > 0 && targets.size() > 0 && !uptodate(sources, targets)) {", "+           log(\"Deleting all target files.\", Project.MSG_VERBOSE);", "+           Delete delete = new Delete();", "+           delete.bindToOwner(this);", "+           delete.add(targets);", "+           delete.perform();", "-        // Grab all the target files specified via filelists:", "-        boolean upToDate = true;", "-        Enumeration enumTargetLists = targetFileLists.elements();", "-        while (enumTargetLists.hasMoreElements()) {", "+    }", "-           FileList targetFL    = (FileList) enumTargetLists.nextElement();", "-           String[] targetFiles = targetFL.getFiles(getProject());", "-           for (int i = 0; i < targetFiles.length; i++) {", "-", "-              File dest = new File(targetFL.getDir(getProject()), targetFiles[i]);", "-              if (!dest.exists()) {", "-                 log(targetFiles[i] + \" does not exist.\", Project.MSG_VERBOSE);", "-                 upToDate = false;", "-                 continue;", "-              } else {", "-                 allTargets.addElement(dest);", "-              }", "-              if (dest.lastModified() > now) {", "-                 log(\"Warning: \" + targetFiles[i] + \" modified in the future.\",", "-                     Project.MSG_WARN);", "-              }", "-              if (oldestTarget == null", "-                  || dest.lastModified() < oldestTargetTime) {", "-                  oldestTargetTime = dest.lastModified();", "-                  oldestTarget = dest;", "-              }", "-           }", "-        if (oldestTarget != null) {", "-            log(oldestTarget + \" is oldest target file\", Project.MSG_VERBOSE);", "-        } else {", "-            // no target files, then we cannot remove any target files and", "-            // skip the following tests right away", "-            upToDate = false;", "-        // Check targets vs source files specified via filelists:", "-        if (upToDate) {", "-           Enumeration enumSourceLists = sourceFileLists.elements();", "-           while (upToDate && enumSourceLists.hasMoreElements()) {", "-              FileList sourceFL    = (FileList) enumSourceLists.nextElement();", "-              String[] sourceFiles = sourceFL.getFiles(getProject());", "-", "-              for (int i = 0; upToDate && i < sourceFiles.length; i++) {", "-                 File src = new File(sourceFL.getDir(getProject()), sourceFiles[i]);", "-", "-                 if (src.lastModified() > now) {", "-                    log(\"Warning: \" + sourceFiles[i]", "-                        + \" modified in the future.\", Project.MSG_WARN);", "-                 }", "-                 if (!src.exists()) {", "-                    log(sourceFiles[i] + \" does not exist.\",", "-                        Project.MSG_VERBOSE);", "-                    upToDate = false;", "-                    break;", "-                 }", "-                 if (src.lastModified() > oldestTargetTime) {", "-                    upToDate = false;", "-                    log(oldestTarget + \" is out of date with respect to \"", "-                        + sourceFiles[i], Project.MSG_VERBOSE);", "-                 }", "-              }", "-           }", "-        }", "-        // Check targets vs source files specified via filesets:", "-        if (upToDate) {", "-           Enumeration enumSourceSets = sourceFileSets.elements();", "-           while (upToDate && enumSourceSets.hasMoreElements()) {", "-", "-              FileSet sourceFS          = (FileSet) enumSourceSets.nextElement();", "-              DirectoryScanner sourceDS = sourceFS.getDirectoryScanner(getProject());", "-              String[] sourceFiles      = sourceDS.getIncludedFiles();", "-", "-              for (int i = 0; upToDate && i < sourceFiles.length; i++) {", "-                 File src = new File(sourceFS.getDir(getProject()), sourceFiles[i]);", "-", "-                 if (src.lastModified() > now) {", "-                    log(\"Warning: \" + sourceFiles[i]", "-                        + \" modified in the future.\", Project.MSG_WARN);", "-                 }", "-                 if (src.lastModified() > oldestTargetTime) {", "-                    upToDate = false;", "-                    log(oldestTarget + \" is out of date with respect to \"", "-                        + sourceFiles[i], Project.MSG_VERBOSE);", "-                 }", "-              }", "-           }", "-        }", "-        if (!upToDate) {", "-           log(\"Deleting all target files. \", Project.MSG_VERBOSE);", "-           for (Enumeration e = allTargets.elements(); e.hasMoreElements();) {", "-              File fileToRemove = (File) e.nextElement();", "-              log(\"Deleting file \" + fileToRemove.getAbsolutePath(),", "-                  Project.MSG_VERBOSE);", "-              fileToRemove.delete();", "-           }"]}]}
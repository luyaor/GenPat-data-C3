{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e05cb5cc730f9dad292230df78c785b0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07a93abeabe7a6d0c63423c55370459a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/MacroInstance.java", "commitBeforeChange": "5e4408208a34ba760533b1c6738ccb71cdfa03ba", "commitAfterChange": "278074659bf5724cde17788d210699876f7ffa4e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": "      private UnknownElement copy(UnknownElement ue)", "signatureAfterChange": "      private UnknownElement copy(UnknownElement ue)", "diff": ["+            } else if (templateElement.isImplicit()) {", "+                if (unknownElements.size() == 0 && !templateElement.isOptional()) {", "+                    throw new BuildException(", "+                        \"Missing nested elements for implicit element \"", "+                        + templateElement.getName());", "+                }", "+                for (Iterator i = unknownElements.iterator();", "+                     i.hasNext();) {", "+                    UnknownElement child = (UnknownElement) i.next();", "+                    rc.addChild(child.getWrapper());", "+                    ret.addChild(child);", "+                }", "-                Element element = (Element) presentElements.get(tag);", "-                if (element == null) {", "+                List list = (List) presentElements.get(tag);", "+                if (list == null) {", "-                for (Iterator i = element.getUnknownElements().iterator();", "+                for (Iterator i = list.iterator();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f221a902de31e313627d4ea7ca0a6a4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "af5b94e9d969c42765bd41f15181a6653535a76a", "commitAfterChange": "35bcdc15f7d829f94651c334c9ebfb09c0e7cd37", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static synchronized Vector getProcEnvironment()", "signatureAfterChange": "     public static synchronized Vector getProcEnvironment()", "diff": ["+        if (JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_1_5)) {", "+            try {", "+                Map/*<String,String>*/ env = (Map) System.class.getMethod(\"getenv\", new Class[0]).invoke(null, new Object[0]);", "+                Iterator it = env.entrySet().iterator();", "+                while (it.hasNext()) {", "+                    Map.Entry entry = (Map.Entry) it.next();", "+                    procEnvironment.add(entry.getKey() + \"=\" + entry.getValue());", "+                }", "+                return procEnvironment;", "+            } catch (Exception x) {", "+                x.printStackTrace();", "+            }", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df2d30bd16ef24c0975e6d1b9c9c864e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34b4dc7b7f477fbcc628b881d69f65fe", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Available.java", "commitBeforeChange": "816d018e67a8703d14b55316e338ea7a6ded4e17", "commitAfterChange": "5728d77e073954bae5660e35dd9486e448cf0e0d", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      private boolean checkFile()", "signatureAfterChange": "      private boolean checkFile()", "diff": ["-                File filename = new File(paths[i]);", "+                /* ", "+                ** filepath can be a list of directory and/or", "+                ** file names (gen'd via <fileset>)", "+                **", "+                ** look for:", "+                **   full-pathname specified == path in list", "+                **   full-pathname specified == parent dir of path in list", "+                **   simple name specified   == path in list", "+                **   simple name specified   == path in list + name", "+                **   simple name specified   == parent dir + name", "+                **   simple name specified   == parent of parent dir + name", "+                **", "+                */", "+                File path = new File(paths[i]);", "+                String dirname = path.getParent();", "-                        String dir = filename.getParent();", "-                        if(dir != null) {", "-                            int index = dir.lastIndexOf(File.separator);", "-                            String dirname = dir.substring(index + 1);", "-                            if(dirname.equals(file.getName())) {", "-                                log(\"Found directory: \" + dir, Project.MSG_VERBOSE);", "+                        if (path.isFile()) {", "+                            // full-pathname specified", "+                            if (dirname.equals(path.toString())) {", "+                                log(\"Found directory: \" + path, Project.MSG_VERBOSE);", "+                                return true;", "+                            // simple name specified", "+                            } else if(new File(dirname, file).isDirectory()) {", "+                                log(\"Found directory: \" + dirname + File.separator + file, Project.MSG_VERBOSE);", "+                        // full-pathname specified", "+                        } else if (path.toString().equals(new File(file).toString()) && path.isDirectory()) {", "+                                log(\"Found directory: \" + path, Project.MSG_VERBOSE);", "+                                return true;", "+                        // simple name specified", "+                        } else if (new File(path, file).isDirectory()) {", "+                                log(\"Found directory: \" + path + File.separator + file, Project.MSG_VERBOSE);", "+                                return true;", "-                    } else if (type.equalsIgnoreCase(\"file\")) {", "-                        if(filename.isFile()) {", "-                            if(filename.getName().equals(file.getName())) {", "-                                log(\"Found file: \" + filename, Project.MSG_VERBOSE);", "+                    /* end check for type dir */", "+                    } else {", "+                        if (path.toString().equals(new File(file).toString()) && path.isFile()) {", "+                                log(\"Found file: \" + path, Project.MSG_VERBOSE);", "-                            }", "+                        } else if (new File(path, file).isFile()) {", "+                            log(\"Found file: \" + path + File.separator + file, Project.MSG_VERBOSE);", "+                            return true;", "+                        } else if (new File(dirname, file).isFile()) {", "+                            log(\"Found file: \" + dirname + File.separator + file, Project.MSG_VERBOSE);", "+                            return true;", "-                } else if(filename.isFile()) {", "-                    if(filename.getName().equals(file.getName())) {", "-                        log(\"Found file: \" + filename, Project.MSG_VERBOSE);", "+                /* end check for specified type */", "+                } else {", "+                    if (path.toString().equals(new File(file).toString())) {", "+                        log(\"Found: \" + path, Project.MSG_VERBOSE);", "+                    } else if (new File(path, file).exists()) {", "+                        log(\"Found: \" + path + File.separator + file, Project.MSG_VERBOSE);", "+                        return true;", "+                    } else if (new File(dirname, file).exists()) {", "+                        log(\"Found: \" + dirname + File.separator + file, Project.MSG_VERBOSE);", "+                        return true;", "+                    } else {", "+                        File dir = new File(dirname);", "+                        dirname = dir.getParent();", "+                        if (new File(dirname, file).exists()) {", "+                            log(\"Found: \" + dirname + File.separator + file, Project.MSG_VERBOSE);", "+                            return true;", "+                        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a0286a21b1fd048c5d6232266b70787", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/GenericDeploymentTool.java", "commitBeforeChange": "03d2b1c05fef9a3b37e4fbe70fffe08cbacf14f8", "commitAfterChange": "8303dd1fd643ab7369de8a3125f5a1e3b6a72968", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 27, "signatureBeforeChange": "           private void addSuperClass(Class superClass, Hashtable checkEntries)", "signatureAfterChange": "     protected void checkAndAddDependants(Hashtable checkEntries)         throws BuildException", "diff": ["+    protected void checkAndAddDependants(Hashtable checkEntries)", "+        throws BuildException", "+        Dependencies visitor = new Dependencies();", "+        Set set = new TreeSet();", "+        Set newSet = new HashSet();", "+        final String base = config.srcDir.getAbsolutePath() + File.separator;", "+        Iterator i = checkEntries.keySet().iterator();", "+        while (i.hasNext()) {", "+            String entryName = (String)i.next();", "+                newSet.add(entryName.substring(0, entryName.length() - \".class\".length()).replace(File.separatorChar, '/'));", "+        }", "+        set.addAll(newSet);", "+", "+        do {", "+            i = newSet.iterator();", "+            while (i.hasNext()) {", "+                String fileName = base + ((String)i.next()).replace('/', File.separatorChar) + \".class\";", "+", "+                    JavaClass javaClass = new ClassParser(fileName).parse();", "+                    javaClass.accept(visitor);", "+                catch (IOException e) {", "+                    log(\"exception: \" +  e.getMessage(), Project.MSG_INFO);", "+            newSet.clear();", "+            newSet.addAll(visitor.getDependencies());", "+            visitor.clearDependencies();", "+", "+            Dependencies.applyFilter(newSet, new Filter() {", "+                    public boolean accept(Object object) {", "+                        String fileName = base + ((String)object).replace('/', File.separatorChar) + \".class\";", "+                        return new File(fileName).exists();", "+                    }", "+                });", "+            newSet.removeAll(set);", "+            set.addAll(newSet);", "+        }", "+        while (newSet.size() > 0);", "+", "+        i = set.iterator();", "+        while (i.hasNext()) {", "+            String next = ((String)i.next()).replace('/', File.separatorChar);", "+            checkEntries.put(next + \".class\", new File(base + next + \".class\"));", "+            log(\"dependent class: \" + next + \".class\" + \" - \" + base + next + \".class\", Project.MSG_VERBOSE);", "-     ", "-    private void addSuperClass(Class superClass, Hashtable checkEntries) {", "-    ", "-        if (!superClass.getName().startsWith(\"java\"))", "-        {", "-            File superClassFile = new File(config.srcDir.getAbsolutePath() ", "-                                            + File.separatorChar ", "-                                            + superClass.getName().replace('.',File.separatorChar)", "-                                            + \".class\");", "-            if (superClassFile.exists() && superClassFile.isFile())", "-            {", "-                checkEntries.put(superClass.getName().replace('.',File.separatorChar) + \".class\", ", "-                                 superClassFile);", "-                ", "-                // now need to get super classes and interfaces for this class", "-                Class[] superInterfaces = superClass.getInterfaces();", "-                for (int i = 0; i < superInterfaces.length; i++) {", "-                    addInterface(superInterfaces[i], checkEntries);", "-                }", "-                ", "-                addSuperClass(superClass.getSuperclass(), checkEntries);", "-            }               ", "-        }", "-    }"]}]}
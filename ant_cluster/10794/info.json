{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b5f9bdb31d361ed0d3c8259854faf6ae", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc1ed596514a430a23ec3d09d6cd8a70", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SubAnt.java", "commitBeforeChange": "729aa048f35944987ac79cf8b05b05a2be3f9cb1", "commitAfterChange": "b7c2f5f6435c50ce21b758e0f070add9cabae1fb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute()", "signatureAfterChange": "     public void execute()", "diff": ["+        BuildException buildException = null;", "-            File directory = null;", "-            File file = new File(filenames[i]);", "-            if (file.isDirectory()) {", "-                if (genericantfile != null) {", "-                    directory = file;", "-                    file = genericantfile;", "+            File file = null;", "+            Throwable thrownException = null;", "+            try {", "+                File directory = null;", "+                file = new File(filenames[i]);", "+                if (file.isDirectory()) {", "+                    if (genericantfile != null) {", "+                        directory = file;", "+                        file = genericantfile;", "+                    } else {", "+                        file = new File(file, antfile);", "+                    }", "+                }", "+                execute(file, directory);", "+            } catch (RuntimeException ex) {", "+                if (!(getProject().isKeepGoingMode())) {", "+                    throw ex; // throw further", "+                }", "+                thrownException = ex;", "+            } catch (Throwable ex) {", "+                if (!(getProject().isKeepGoingMode())) {", "+                    throw new BuildException(ex);", "+                }", "+                thrownException = ex;", "+            }", "+            if (thrownException != null) {", "+                if (thrownException instanceof BuildException) {", "+                    log(\"File '\" + file", "+                        + \"' failed with message '\"", "+                        + thrownException.getMessage() + \"'.\", Project.MSG_ERR);", "+                    // only the first build exception is reported", "+                    if (buildException == null) {", "+                        buildException = (BuildException) thrownException;", "+                    }", "-                    file = new File(file, antfile);", "+                    log(\"Target '\" + file", "+                        + \"' failed with message '\"", "+                        + thrownException.getMessage() + \"'.\", Project.MSG_ERR);", "+                    thrownException.printStackTrace(System.err);", "+                    if (buildException == null) {", "+                        buildException =", "+                            new BuildException(thrownException);", "+                    }", "-            execute(file, directory);", "+        }", "+        // check if one of the builds failed in keep going mode", "+        if (buildException != null) {", "+            throw buildException;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecdf04890d4729109cff4aa4759cdbf6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Project.java", "commitBeforeChange": "729aa048f35944987ac79cf8b05b05a2be3f9cb1", "commitAfterChange": "b7c2f5f6435c50ce21b758e0f070add9cabae1fb", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 65, "signatureBeforeChange": "     public void executeTarget(String targetName) throws BuildException", "signatureAfterChange": "     public void executeTarget(String targetName) throws BuildException", "diff": ["-        int curidx = 0;", "-        Target curtarget;", "-", "-        do {", "-            curtarget = (Target) sortedTargets.elementAt(curidx++);", "-            curtarget.performTasks();", "-        } while (!curtarget.getName().equals(targetName));", "+        Set succeededTargets = new HashSet();", "+        BuildException buildException = null; // first build exception", "+        for (Enumeration iter = sortedTargets.elements();", "+             iter.hasMoreElements();) {", "+            Target curtarget = (Target) iter.nextElement();", "+            boolean canExecute = true;", "+            for (Enumeration depIter = curtarget.getDependencies();", "+                 depIter.hasMoreElements();) {", "+                String dependencyName = ((String) depIter.nextElement());", "+                if (!succeededTargets.contains(dependencyName)) {", "+                    canExecute = false;", "+                    log(curtarget,", "+                        \"Cannot execute '\" + curtarget.getName() + \"' - '\"", "+                        + dependencyName + \"' failed or was not executed.\",", "+                        MSG_ERR);", "+                    break;", "+                }", "+            }", "+            if (canExecute) {", "+                Throwable thrownException = null;", "+                try {", "+                    curtarget.performTasks();", "+                    succeededTargets.add(curtarget.getName());", "+                } catch (RuntimeException ex) {", "+                    if (!(keepGoingMode)) {", "+                        throw ex; // throw further", "+                    }", "+                    thrownException = ex;", "+                } catch (Throwable ex) {", "+                    if (!(keepGoingMode)) {", "+                        throw new BuildException(ex);", "+                    }", "+                    thrownException = ex;", "+                }", "+                if (thrownException != null) {", "+                    if (thrownException instanceof BuildException) {", "+                        log(curtarget,", "+                            \"Target '\" + curtarget.getName()", "+                            + \"' failed with message '\"", "+                            + thrownException.getMessage() + \"'.\", MSG_ERR);", "+                        // only the first build exception is reported", "+                        if (buildException == null) {", "+                            buildException = (BuildException) thrownException;", "+                        }", "+                    } else {", "+                        log(curtarget,", "+                            \"Target '\" + curtarget.getName()", "+                            + \"' failed with message '\"", "+                            + thrownException.getMessage() + \"'.\", MSG_ERR);", "+                        thrownException.printStackTrace(System.err);", "+                        if (buildException == null) {", "+                            buildException =", "+                                new BuildException(thrownException);", "+                        }", "+                    }", "+                }", "+            }", "+            if (curtarget.getName().equals(targetName)) { // old exit condition", "+                break;", "+            }", "+        }", "+        if (buildException != null) {", "+            throw buildException;", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "40f6548b0e8093f916fae60c621115f5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2774badefb4a37bfe763b02f9b58713c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Definer.java", "commitBeforeChange": "7c20aeab9898341c593fb56f6c3f9646b013d664", "commitAfterChange": "7228bef97c4c12a5012e14e1a059a12069ee4818", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      private URL fileToURL()", "signatureAfterChange": "      private URL fileToURL()", "diff": ["+        String message = null;", "-            log(\"File \" + file + \" does not exist\", Project.MSG_WARN);", "-            return null;", "+            message = \"File \" + file + \" does not exist\";", "-        if (!(file.isFile())) {", "-            log(\"File \" + file + \" is not a file\", Project.MSG_WARN);", "-            return null;", "+        if (message == null && !(file.isFile())) {", "+            message = \"File \" + file + \" is not a file\";", "-            return file.toURL();", "+            if (message == null) {", "+                return file.toURL();", "+            }", "-            log(\"File \" + file + \" cannot use as URL: \"", "-                + ex.toString(), Project.MSG_WARN);", "-            return null;", "+            message =", "+                \"File \" + file + \" cannot use as URL: \"", "+                + ex.toString();", "+        // Here if there is an error", "+        switch (onError) {", "+            case OnError.FAIL_ALL:", "+                throw new BuildException(message);", "+            case OnError.FAIL:", "+                // Fall Through", "+            case OnError.REPORT:", "+                log(message, Project.MSG_WARN);", "+                break;", "+            case OnError.IGNORE:", "+                // Fall Through", "+            default:", "+                // Ignore the problem", "+                break;", "+        }", "+        return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "def3aafaf6a0b8fe65d009d7628d7897", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/jsp/compilers/JasperC.java", "commitBeforeChange": "f19f07d6e4c72f241057ecfc32d80be21201bbf7", "commitAfterChange": "ca91f8cb7e4f2bfe1a191dea6126a32649af9565", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public boolean execute()         throws BuildException", "signatureAfterChange": "     public boolean execute()         throws BuildException", "diff": ["-        Commandline cmd = setupJasperCommand();", "+        CommandlineJava cmd = setupJasperCommand();", "+        /*", "+        Path classpath=cmd.createClasspath(getProject());", "+        if (getJspc().getClasspath() != null) {", "+            classpath=getJspc().getClasspath();", "+        } else {", "+            classpath.concatSystemClasspath();", "+        }", "+        ExecuteJava exec=new ExecuteJava();", "+        exec.execute(getProject());", "+        if ((err = executeJava()) != 0) {", "+            if (failOnError) {", "+                throw new BuildException(\"Java returned: \" + err, location);", "+            } else {", "+                log(\"Java Result: \" + err, Project.MSG_ERR);", "+            }", "+        */", "+", "-            Java java = (Java) (getJspc().getProject()).createTask(\"java\");", "+            Java java = (Java) (getProject().createTask(\"java\"));", "-                java.setClasspath(Path.systemClasspath);", "+                Path classpath=new Path(getProject());", "+                classpath.concatSystemClasspath();", "+                java.setClasspath(classpath);", "+            java.setDir(getProject().getBaseDir());", "-            String args[] = cmd.getArguments();", "+            //this is really irritating; we need a way to set stuff", "+            String args[] = cmd.getJavaCommand().getArguments();", "-            //@todo implement failonerror support here?"]}]}
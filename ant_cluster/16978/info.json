{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7e1b195f6fc6329d6a23047ec90d9004", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b5d63c509619f4bf8e3c3f635e60f62", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "380870c2b26a9f3289569dc2451178df3f05613e", "commitAfterChange": "ad9edf5f5ea4a8f2a974726eeb8e656c177357df", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 31, "signatureBeforeChange": "          Data(int blockSize100k)", "signatureAfterChange": "      private void allocateCompressStructures ()", "diff": ["+", "+    private void allocateCompressStructures () {", "+        int n = baseBlockSize * blockSize100k;", "+        block = new char[(n + 1 + NUM_OVERSHOOT_BYTES)];", "+        quadrant = new int[(n + NUM_OVERSHOOT_BYTES)];", "+        zptr = new int[n];", "+        ftab = new int[65537];", "+", "+        if (block == null || quadrant == null || zptr == null", "+            || ftab == null) {", "+            //int totalDraw = (n + 1 + NUM_OVERSHOOT_BYTES) + (n + NUM_OVERSHOOT_BYTES) + n + 65537;", "+            //compressOutOfMemory ( totalDraw, n );", "+        }", "+", "+        /*", "+          The back end needs a place to store the MTF values", "+          whilst it calculates the coding tables.  We could", "+          put them in the zptr array.  However, these values", "+          will fit in a short, so we overlay szptr at the", "+          start of zptr, in the hope of reducing the number", "+          of cache misses induced by the multiple traversals", "+          of the MTF values when calculating coding tables.", "+          Seems to improve compression speed by about 1%.", "+        */", "+        //    szptr = zptr;", "+", "+", "+        szptr = new short[2 * n];", "-", "-        Data(int blockSize100k) {", "-            super();", "-", "-            final int n = blockSize100k * BZip2Constants.baseBlockSize;", "-            this.block = new byte[(n + 1 + NUM_OVERSHOOT_BYTES)];", "-            this.fmap = new int[n];", "-            this.sfmap = new char[2 * n];", "-            this.quadrant = this.sfmap;", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f6055c44d8e509c4232dd4859b4152e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/Mapper.java", "commitBeforeChange": "cd466ddf6c6ab04afb63921f8ae25817e9a914a3", "commitAfterChange": "ce89090b466c00d8a218ff572a4cfe92eebc9d96", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public FileNameMapper getImplementation() throws BuildException", "signatureAfterChange": "     public FileNameMapper getImplementation() throws BuildException", "diff": ["-        if (type == null && classname == null) {", "-            throw new BuildException(\"one of the attributes type or classname is required\");", "+        if (type == null && classname == null && container == null) {", "+            throw new BuildException(", "+                \"nested mapper or \"", "+                + \"one of the attributes type or classname is required\");", "+        }", "+", "+        if (container != null) {", "+            if (type != null || classname != null ||", "+                to != null || from != null) {", "+                throw new BuildException(", "+                    \"for nested mappers, type, classname, to and from\" +", "+                    \" attributes are not allowed\");", "+            }", "+            if (chained != null) {", "+                container.setChained(chained.booleanValue());", "+            }", "+            return container;", "-            throw new BuildException(\"must not specify both type and classname attribute\");", "+            throw new BuildException(", "+                \"must not specify both type and classname attribute\");"]}]}
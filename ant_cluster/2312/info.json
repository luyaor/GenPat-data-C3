{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "db3a59f32caaa96ebb803e56c362ea8e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b21a4b609fa9ba122055f5b7854ad9c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/workspace/DefaultWorkspace.java", "commitBeforeChange": "50fb7f5643cba98640e7d4ce2b00736e9d42cbab", "commitAfterChange": "6ff9bf50ad2e4fcda69911d207c8dfe93e7b4e0b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private void executeTarget( final Project project,                                 final String name,                                 final Target target,                                 final ExecutionFrame frame )         throws TaskException", "signatureAfterChange": "     private void executeTarget( final ProjectEntry entry,                                 final String name,                                 final Target target )         throws TaskException", "diff": ["-    private void executeTarget( final Project project,", "+    private void executeTarget( final ProjectEntry entry,", "-                                final Target target,", "-                                final ExecutionFrame frame )", "+                                final Target target )", "-        //notify listeners", "-        m_listenerSupport.targetStarted( project.getProjectName(), name );", "+        final Project project = entry.getProject();", "-        //check the condition associated with target.", "-        //if it is not satisfied then skip target", "-        final Condition condition = target.getCondition();", "-        if( null != condition )", "+        // Check target state, to see if it has already been executed, and", "+        // to check for dependency cycles", "+        final TargetState state = entry.getTargetState( target );", "+        if( state == TargetState.FINISHED )", "-            try", "+            // Target has been executed", "+            return;", "+        }", "+        if( state == TargetState.TRAVERSING )", "+        {", "+            // Cycle in target dependencies", "+            final String message = REZ.getString( \"target-dependency-cycle.error\", name );", "+            throw new TaskException( message );", "+        }", "+", "+        // Set state to indicate this target has been started", "+        entry.setTargetState( target, TargetState.TRAVERSING );", "+", "+        // Execute the target's dependencies", "+", "+        // Implicit target first", "+        if( target != project.getImplicitTarget() )", "+        {", "+            executeTarget( entry, \"<init>\", project.getImplicitTarget() );", "+        }", "+", "+        // Named dependencies", "+        final Dependency[] dependencies = target.getDependencies();", "+        for( int i = 0; i < dependencies.length; i++ )", "+        {", "+            final Dependency dependency = dependencies[ i ];", "+            final String otherProjectName = dependency.getProjectName();", "+            if( otherProjectName != null )", "-                final boolean result = condition.evaluate( frame.getContext() );", "-                if( !result )", "-                {", "-                    final String message = REZ.getString( \"skip-target.notice\", name );", "-                    getLogger().debug( message );", "-                    return;", "-                }", "+                // Dependency in a referenced project", "+                final Project otherProject = getProject( otherProjectName, project );", "+                final ProjectEntry otherEntry = getProjectEntry( otherProject );", "+                executeTarget( otherEntry, dependency.getTargetName() );", "-            catch( final TaskException te )", "+            else", "-                final String message = REZ.getString( \"condition-eval.error\", name );", "-                throw new TaskException( message, te );", "+                // Dependency in this project", "+                executeTarget( entry, dependency.getTargetName() );", "-        final String message = REZ.getString( \"exec-target.notice\", name );", "-        getLogger().debug( message );", "+        // Now execute the target itself", "+        executeTargetNoDeps( entry, name, target );", "+", "+        // Mark target as complete", "+        entry.setTargetState( target, TargetState.FINISHED );", "+    }", "-        //execute all tasks assciated with target", "-            executeTask( tasks[ i ], frame );", "-        //notify listeners"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed1dfe47d3bf7e53ada15da0bd7ab0a2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/project/DefaultProjectBuilder.java", "commitBeforeChange": "58f8db35ee5db94294191fc2599cb02a8086b881", "commitAfterChange": "8c97911720b40557d78672245bc2e7f724917297", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      protected void buildTarget( final DefaultProject project,                                  final Configuration configuration )", "signatureAfterChange": "     protected void buildTarget( final DefaultProject project, final Configuration target )", "diff": ["-    protected void buildTarget( final DefaultProject project, ", "-                                final Configuration configuration )", "+     */", "+    protected void buildTarget( final DefaultProject project, final Configuration target )", "-        final String name = configuration.getAttribute( \"name\", null );", "-        final String depends = configuration.getAttribute( \"depends\", null );", "-        final String ifCondition = configuration.getAttribute( \"if\", null );", "-        final String unlessCondition = configuration.getAttribute( \"unless\", null );", "+        final String name = target.getAttribute( \"name\", null );", "+        final String depends = target.getAttribute( \"depends\", null );", "+        final String ifCondition = target.getAttribute( \"if\", null );", "+        final String unlessCondition = target.getAttribute( \"unless\", null );", "-                                    configuration.getLocation() );", "+                                    target.getLocation() );", "-        m_logger.debug( \"Parsing target: \" + name );", "+        getLogger().debug( \"Parsing target: \" + name );", "-                                    \"unless condition at \" + configuration.getLocation() );    ", "+                                    \"unless condition at \" + target.getLocation() );    ", "-            m_logger.debug( \"Target if condition: \" + ifCondition );", "+            getLogger().debug( \"Target if condition: \" + ifCondition );", "-            m_logger.debug( \"Target unless condition: \" + unlessCondition );", "+            getLogger().debug( \"Target unless condition: \" + unlessCondition );", "-        final DefaultTarget target = new DefaultTarget( condition );", "+        final DefaultTarget defaultTarget = new DefaultTarget( condition );", "+        //apply depends attribute", "-            int start = 0;", "-            int end = depends.indexOf( ',' );", "+            final String[] elements = StringUtil.splitString( depends, \",\" );", "-            while( -1 != end )", "+            for( int i = 0; i < elements.length; i++ )", "-                final String dependency = ", "-                    parseDependency( configuration, depends.substring( start, end ) );", "+                final String dependency = elements[ i ].trim();", "-                target.addDependency( dependency );", "-                start = end++;", "-                end = depends.indexOf( ',', start );", "+                if( 0 == dependency.length() )", "+                {", "+                    throw new AntException( \"Discovered empty dependency in target \" + ", "+                                            target.getName() + \" at \" + target.getLocation() ); ", "+                }", "+", "+                getLogger().debug( \"Target dependency: \" + dependency );", "+                defaultTarget.addDependency( dependency );", "-", "-            final String dependency = ", "-                parseDependency( configuration, depends.substring( start ) );", "-", "-            target.addDependency( dependency );", "-        final Iterator tasks = configuration.getChildren();", "+        //add all the targets from element", "+        final Iterator tasks = target.getChildren();", "-            m_logger.debug( \"Parsed task: \" + task.getName() );", "-            target.addTask( task );", "+            getLogger().debug( \"Parsed task: \" + task.getName() );", "+            defaultTarget.addTask( task );", "-        project.addTarget( name, target );", "+        //add target to project", "+        project.addTarget( name, defaultTarget );"]}]}
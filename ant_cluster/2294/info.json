{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b4fc2040bcd24e2f9a723b172662a1c9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4427d697a9cdc6890ef54604eb4b5334", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/Tar.java", "commitBeforeChange": "1e745fe39610746a046ce2ea1eef71fa15a6ea8e", "commitAfterChange": "38dce34edfdb4041103530c656e12e6ed61e2bd6", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      protected void tarFile( File file, TarOutputStream tOut, String vPath,                             TarFileSet tarFileSet )         throws IOException, TaskException", "signatureAfterChange": "      private void tarFile( final File file,                           final TarOutputStream output,                           String path,                           final TarFileSet tarFileSet )         throws IOException, TaskException", "diff": ["-    protected void tarFile( File file, TarOutputStream tOut, String vPath,", "-                            TarFileSet tarFileSet )", "+    private void tarFile( final File file,", "+                          final TarOutputStream output,", "+                          String path,", "+                          final TarFileSet tarFileSet )", "-        FileInputStream fIn = null;", "-", "-        if( vPath.length() <= 0 )", "+        if( path.length() <= 0 )", "-        if( file.isDirectory() && !vPath.endsWith( \"/\" ) )", "+        if( file.isDirectory() && !path.endsWith( \"/\" ) )", "-            vPath += \"/\";", "+            path += \"/\";", "+        if( path.length() >= TarConstants.NAMELEN )", "+        {", "+            if( longFileMode.isOmitMode() )", "+            {", "+                final String message = \"Omitting: \" + path;", "+                getLogger().info( message );", "+                return;", "+            }", "+            else if( longFileMode.isWarnMode() )", "+            {", "+                final String message = \"Entry: \" + path + \" longer than \" +", "+                    TarConstants.NAMELEN + \" characters.\";", "+                getLogger().warn( message );", "+                if( !longWarningGiven )", "+                {", "+                    final String message2 = \"Resulting tar file can only be processed successfully\"", "+                        + \" by GNU compatible tar commands\";", "+                    getLogger().warn( message2 );", "+                    longWarningGiven = true;", "+                }", "+            }", "+            else if( longFileMode.isFailMode() )", "+            {", "+                final String message = \"Entry: \" + path + \" longer than \" +", "+                                        TarConstants.NAMELEN + \"characters.\";", "+                throw new TaskException( message );", "+            }", "+        }", "+", "+        FileInputStream input = null;", "-            if( vPath.length() >= TarConstants.NAMELEN )", "-            {", "-                if( longFileMode.isOmitMode() )", "-                {", "-                    getLogger().info( \"Omitting: \" + vPath );", "-                    return;", "-                }", "-                else if( longFileMode.isWarnMode() )", "-                {", "-                    final String message = \"Entry: \" + vPath + \" longer than \" +", "-                        TarConstants.NAMELEN + \" characters.\";", "-                    getLogger().warn( message );", "-                    if( !longWarningGiven )", "-                    {", "-                        final String message2 = \"Resulting tar file can only be processed successfully\"", "-                            + \" by GNU compatible tar commands\";", "-                        getLogger().warn( message2 );", "-                        longWarningGiven = true;", "-                    }", "-                }", "-                else if( longFileMode.isFailMode() )", "-                {", "-                    throw new TaskException(", "-                        \"Entry: \" + vPath + \" longer than \" +", "-                        TarConstants.NAMELEN + \"characters.\" );", "-                }", "-            }", "-", "-            TarEntry te = new TarEntry( vPath );", "-            te.setModTime( file.lastModified() );", "+            final TarEntry entry = new TarEntry( path );", "+            entry.setModTime( file.lastModified() );", "-                te.setSize( file.length() );", "-                te.setMode( tarFileSet.getMode() );", "+                entry.setSize( file.length() );", "+                entry.setMode( tarFileSet.getMode() );", "-            te.setUserName( tarFileSet.getUserName() );", "-            te.setGroupName( tarFileSet.getGroup() );", "+            entry.setUserName( tarFileSet.getUserName() );", "+            entry.setGroupName( tarFileSet.getGroup() );", "-            tOut.putNextEntry( te );", "+            output.putNextEntry( entry );", "-                fIn = new FileInputStream( file );", "-", "-                byte[] buffer = new byte[ 8 * 1024 ];", "-                int count = 0;", "-                do", "-                {", "-                    tOut.write( buffer, 0, count );", "-                    count = fIn.read( buffer, 0, buffer.length );", "-                } while( count != -1 );", "+                input = new FileInputStream( file );", "+                IOUtil.copy( input, output );", "-            tOut.closeEntry();", "+            output.closeEntry();", "-            if( fIn != null )", "-                fIn.close();", "-        }", "-    }", "+            if( input != null )", "+                input.close();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79ec00b887fee61bd378a1d9b6428493", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/Tar.java", "commitBeforeChange": "1e745fe39610746a046ce2ea1eef71fa15a6ea8e", "commitAfterChange": "38dce34edfdb4041103530c656e12e6ed61e2bd6", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      protected void tarFile( File file, TarOutputStream tOut, String vPath,                             TarFileSet tarFileSet )         throws IOException, TaskException", "signatureAfterChange": "      private void tarFile( final File file,                           final TarOutputStream output,                           String path,                           final TarFileSet tarFileSet )         throws IOException, TaskException", "diff": ["-    protected void tarFile( File file, TarOutputStream tOut, String vPath,", "-                            TarFileSet tarFileSet )", "+    private void tarFile( final File file,", "+                          final TarOutputStream output,", "+                          String path,", "+                          final TarFileSet tarFileSet )", "-        FileInputStream fIn = null;", "-", "-        if( vPath.length() <= 0 )", "+        if( path.length() <= 0 )", "-        if( file.isDirectory() && !vPath.endsWith( \"/\" ) )", "+        if( file.isDirectory() && !path.endsWith( \"/\" ) )", "-            vPath += \"/\";", "+            path += \"/\";", "+        if( path.length() >= TarConstants.NAMELEN )", "+        {", "+            if( longFileMode.isOmitMode() )", "+            {", "+                final String message = \"Omitting: \" + path;", "+                getLogger().info( message );", "+                return;", "+            }", "+            else if( longFileMode.isWarnMode() )", "+            {", "+                final String message = \"Entry: \" + path + \" longer than \" +", "+                    TarConstants.NAMELEN + \" characters.\";", "+                getLogger().warn( message );", "+                if( !longWarningGiven )", "+                {", "+                    final String message2 = \"Resulting tar file can only be processed successfully\"", "+                        + \" by GNU compatible tar commands\";", "+                    getLogger().warn( message2 );", "+                    longWarningGiven = true;", "+                }", "+            }", "+            else if( longFileMode.isFailMode() )", "+            {", "+                final String message = \"Entry: \" + path + \" longer than \" +", "+                                        TarConstants.NAMELEN + \"characters.\";", "+                throw new TaskException( message );", "+            }", "+        }", "+", "+        FileInputStream input = null;", "-            if( vPath.length() >= TarConstants.NAMELEN )", "-            {", "-                if( longFileMode.isOmitMode() )", "-                {", "-                    getLogger().info( \"Omitting: \" + vPath );", "-                    return;", "-                }", "-                else if( longFileMode.isWarnMode() )", "-                {", "-                    final String message = \"Entry: \" + vPath + \" longer than \" +", "-                        TarConstants.NAMELEN + \" characters.\";", "-                    getLogger().warn( message );", "-                    if( !longWarningGiven )", "-                    {", "-                        final String message2 = \"Resulting tar file can only be processed successfully\"", "-                            + \" by GNU compatible tar commands\";", "-                        getLogger().warn( message2 );", "-                        longWarningGiven = true;", "-                    }", "-                }", "-                else if( longFileMode.isFailMode() )", "-                {", "-                    throw new TaskException(", "-                        \"Entry: \" + vPath + \" longer than \" +", "-                        TarConstants.NAMELEN + \"characters.\" );", "-                }", "-            }", "-", "-            TarEntry te = new TarEntry( vPath );", "-            te.setModTime( file.lastModified() );", "+            final TarEntry entry = new TarEntry( path );", "+            entry.setModTime( file.lastModified() );", "-                te.setSize( file.length() );", "-                te.setMode( tarFileSet.getMode() );", "+                entry.setSize( file.length() );", "+                entry.setMode( tarFileSet.getMode() );", "-            te.setUserName( tarFileSet.getUserName() );", "-            te.setGroupName( tarFileSet.getGroup() );", "+            entry.setUserName( tarFileSet.getUserName() );", "+            entry.setGroupName( tarFileSet.getGroup() );", "-            tOut.putNextEntry( te );", "+            output.putNextEntry( entry );", "-                fIn = new FileInputStream( file );", "-", "-                byte[] buffer = new byte[ 8 * 1024 ];", "-                int count = 0;", "-                do", "-                {", "-                    tOut.write( buffer, 0, count );", "-                    count = fIn.read( buffer, 0, buffer.length );", "-                } while( count != -1 );", "+                input = new FileInputStream( file );", "+                IOUtil.copy( input, output );", "-            tOut.closeEntry();", "+            output.closeEntry();", "-            if( fIn != null )", "-                fIn.close();", "-        }", "-    }", "+            if( input != null )", "+                input.close();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bec4b6c94af2a1a86fffdca6a0e8ef2c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "101b3b74527e718c295d338f4c0f6780", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "7d7fc053b7a9233664ffc5635354025a41e9cccd", "commitAfterChange": "559fe1af187c27c6253ef3a1b639783f0a372f50", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private Class getClassFromStream(InputStream stream, String classname)                  throws IOException", "signatureAfterChange": "     private Class getClassFromStream(InputStream stream, String classname)                  throws IOException", "diff": ["-        return defineClass(classname, classData, 0, classData.length); ", "+        // Simply put:", "+        // defineClass(classname, classData, 0, classData.length, Project.class.getProtectionDomain());", "+        // Made more elaborate to be 1.1-safe.", "+        if (defineClassProtectionDomain != null) {", "+            try {", "+                Object domain = getProtectionDomain.invoke(Project.class, new Object[0]);", "+                Object[] args = new Object[] {classname, classData, new Integer(0), new Integer(classData.length), domain};", "+                return (Class)defineClassProtectionDomain.invoke(this, args);", "+            }", "+            catch (InvocationTargetException ite) {", "+                Throwable t = ite.getTargetException();", "+                if (t instanceof ClassFormatError) {", "+                    throw (ClassFormatError)t;", "+                }", "+                else {", "+                    throw new IOException(t.toString());", "+                }", "+            }", "+            catch (Exception e) {", "+                throw new IOException(e.toString());", "+            }", "+        }", "+        else {", "+            return defineClass(classname, classData, 0, classData.length); ", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbce14dc8b20c0739f3c2f95619cf3bd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/native2ascii/SunNative2Ascii.java", "commitBeforeChange": "79b7beb40009ddef7ef755f2b3e6022a4bb436c5", "commitAfterChange": "ab0d0f78f4e8ddc0b9f708c7b32576a0926be129", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      protected boolean run(Commandline cmd, ProjectComponent log)         throws BuildException", "signatureAfterChange": "      protected boolean run(Commandline cmd, ProjectComponent log)         throws BuildException", "diff": ["-        sun.tools.native2ascii.Main n2a = new sun.tools.native2ascii.Main();", "-        return n2a.convert(cmd.getArguments());", "+        try {", "+            Class n2aMain = Class.forName(\"sun.tools.native2ascii.Main\");", "+            Class[] param = new Class[] {String[].class};", "+            Method convert = n2aMain.getMethod(\"convert\", param);", "+            if (convert == null) {", "+                throw new BuildException(\"Could not find convert() method in \"", "+                                         + \"sun.tools.native2ascii.Main\");", "+            }", "+            Object o = n2aMain.newInstance();", "+            return ((Boolean) convert.invoke(o, ", "+                                             new Object[] {cmd.getArguments()})", "+                    ).booleanValue();", "+        } catch (BuildException ex) {", "+            //rethrow", "+            throw ex;", "+        } catch (Exception ex) {", "+            //wrap", "+           throw new BuildException(\"Error starting Sun's native2ascii: \", ex);", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bc21fbf55b7cb7c45c200c12c9d2beaa", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "619c7e88937ca20427ac1c7bda81e3a6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/CollectionUtils.java", "commitBeforeChange": "d25488cbbb28cf25e1f91f714c70999fd105432d", "commitAfterChange": "3d706ab8188a674936880b6f4530b0cf3991758b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public static String flattenToString(Collection c)", "signatureAfterChange": "     public static String flattenToString(Collection<?> c)", "diff": ["-    public static String flattenToString(Collection c) {", "-        Iterator iter = c.iterator();", "-        boolean first = true;", "-        StringBuffer sb = new StringBuffer();", "-        while (iter.hasNext()) {", "-            if (!first) {", "+    public static String flattenToString(Collection<?> c) {", "+        final StringBuilder sb = new StringBuilder();", "+        for (Object o : c) {", "+            if (sb.length() != 0) {", "-            sb.append(String.valueOf(iter.next()));", "-            first = false;", "+            sb.append(o);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dc09298f8d89431832fae721bc3e125", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/DOMElementWriter.java", "commitBeforeChange": "f67b8649e8b40f489ea4091276cfffb010beae99", "commitAfterChange": "62c16a4a5d7520c7283d10d0c1633ee0a3d2e5d5", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "      private String encode(String value, boolean encodeWhitespace)", "signatureAfterChange": "      private String encode(final String value, final boolean encodeWhitespace)", "diff": ["-    private String encode(String value, boolean encodeWhitespace) {", "-        int len = value.length();", "-        StringBuffer sb = new StringBuffer(len);", "+    private String encode(final String value, final boolean encodeWhitespace) {", "+        final int len = value.length();", "+        final StringBuffer sb = new StringBuffer(len);", "-            char c = value.charAt(i);", "+            final char c = value.charAt(i);", "-                    sb.append(\"&#x\").append(Integer.toHexString(c)).append(\";\");", "+                    sb.append(WS_ENTITIES[c - '\\t']);"]}]}
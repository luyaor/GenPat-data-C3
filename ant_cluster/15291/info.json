{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "62ee63d0110aad35d23fcc66c27c216b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14eccf5a1d632b8a14abbfb58d7958fd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/RenameExtensions.java", "commitBeforeChange": "c11c539ba35312f84c4c4660b4918e004a7b3337", "commitAfterChange": "0c19b8e359dc44686300770ced97d8446b311175", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        // scan source and dest dirs to build up rename list", "-        DirectoryScanner ds = getDirectoryScanner(srcDir);", "+        log(\"DEPRECATED - The renameext task is deprecated.  Use move instead.\",", "+            Project.MSG_WARN);", "+        log(\"Replace this with:\", Project.MSG_INFO);", "+        log(\"<move todir=\\\"\"+srcDir+\"\\\" overwrite=\\\"\"+replace+\"\\\">\", ", "+            Project.MSG_INFO);", "+        log(\"  <fileset dir=\\\"\"+srcDir+\"\\\" />\", Project.MSG_INFO);", "+        log(\"  <mapper type=\\\"glob\\\"\", Project.MSG_INFO);", "+        log(\"          from=\\\"*\"+fromExtension+\"\\\"\", Project.MSG_INFO);", "+        log(\"          to=\\\"*\"+toExtension+\"\\\" />\", Project.MSG_INFO);", "+        log(\"</move>\", Project.MSG_INFO);", "+        log(\"using the same patterns on <fileset> as you\\'ve used here\", ", "+            Project.MSG_INFO);", "-        String[] files = ds.getIncludedFiles();", "+        Move move = (Move)project.createTask(\"move\");", "+        move.setOwningTarget(target);", "+        move.setTaskName(getTaskName());", "+        move.setLocation(getLocation());", "+        move.setTodir(srcDir);", "+        move.setOverwrite(replace);", "-        Hashtable renameList = scanDir(srcDir, files);", "+        fileset.setDir(srcDir);", "+        move.addFileset(fileset);", "-        Enumeration e = renameList.keys();", "-        File fromFile = null;", "-        File toFile = null;", "-        while (e.hasMoreElements()) {", "-            fromFile = (File)e.nextElement();", "-            toFile = (File)renameList.get(fromFile);", "-            if (toFile.exists() && replace) toFile.delete();", "-            if (!fromFile.renameTo(toFile)) {", "-                throw new BuildException( \"Rename from: '\" + fromFile + \"' to '\" + ", "-                                          toFile + \"' failed.\" );", "-            }", "-        }", "+        Mapper me = move.createMapper();", "+        me.setType(globType);", "+        me.setFrom(\"*\"+fromExtension);", "+        me.setTo(\"*\"+toExtension);", "+        move.execute();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8d15abd25a670321dbf6cf3a42ad92f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Delete.java", "commitBeforeChange": "a1665b567b2b4c85c5f9ca356a678107147c0073", "commitAfterChange": "ec53cbb02a54af81b299b610acdbdda516f623b1", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 38, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        if (file == null && dir == null && filesets.size() == 0) {", "+        if (file == null && dir == null && filesets.size() == 0 && rcs.size() == 0) {", "-                                     + \"attributes, or a fileset element, \"", "+                                     + \"attributes, or a nested resource collection, \"", "-", "-", "-        // delete the files in the filesets", "+        Path p = new Path(getProject());", "+        p.addAll(rcs);", "-            FileSet fs = (FileSet) filesets.elementAt(i);", "-            try {", "-                DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "-                String[] files = ds.getIncludedFiles();", "-                String[] dirs = ds.getIncludedDirectories();", "-                removeFiles(fs.getDir(getProject()), files, dirs);", "-            } catch (BuildException be) {", "-                // directory doesn't exist or is not readable", "-                if (failonerror) {", "-                    throw be;", "-                } else {", "-                    log(be.getMessage(),", "-                        quiet ? Project.MSG_VERBOSE : Project.MSG_WARN);", "-                }", "-            }", "+            FileSet fs = (FileSet) filesets.get(i);", "+            p.add(includeEmpty ? new BCFileSet(fs) : fs);", "-", "-        // delete the files from the default fileset", "-            try {", "-                DirectoryScanner ds = super.getDirectoryScanner(dir);", "-                String[] files = ds.getIncludedFiles();", "-                String[] dirs = ds.getIncludedDirectories();", "-                removeFiles(dir, files, dirs);", "-            } catch (BuildException be) {", "-                // directory doesn't exist or is not readable", "-                if (failonerror) {", "-                    throw be;", "-                } else {", "-                    log(be.getMessage(),", "+            //add the files from the default fileset:", "+            FileSet implicit = getImplicitFileSet();", "+            p.add(includeEmpty ? new BCFileSet(implicit) : implicit);", "+        }", "+        // delete the files in the resource collections; sort to files, then dirs", "+        Sort s = new Sort();", "+        s.add(new Reverse(new FileSystem()));", "+        s.add(p);", "+        for (Iterator iter = s.iterator(); iter.hasNext();) {", "+            FileResource r = (FileResource) iter.next();", "+            if (!(r.isDirectory()) || r.getFile().list().length == 0) {", "+                log(\"Deleting \" + r, verbosity);", "+                if (!delete(r.getFile())) {", "+                    String message = \"Unable to delete \"", "+                        + (r.isDirectory() ? \"directory \" : \"file \") + r;", "+                    if (failonerror) {", "+                        throw new BuildException(message);", "+                    }", "+                    log(message,"]}]}
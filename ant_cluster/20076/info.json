{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "451f8a2d10553db05c7ffa06cf67d90f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c61d58184105b570649f13fa95d1118", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "b9c9d1a29c79e175c65cf22876c0cfec0e8d4ced", "commitAfterChange": "d180ff4e655f2160229d8c45dac21ab6a66d6b3b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "      protected void zipFile(InputStream in, ZipOutputStream zOut, String vPath)         throws IOException", "signatureAfterChange": "      protected void zipFile(InputStream in, ZipOutputStream zOut, String vPath)         throws IOException", "diff": ["+", "+        /*", "+         * XXX ZipOutputStream.putEntry expects the ZipEntry to know its", "+         * size and the CRC sum before you start writing the data when using ", "+         * STORED mode.", "+         *", "+         * This forces us to process the data twice.", "+         *", "+         * I couldn't find any documentation on this, just found out by try ", "+         * and error.", "+         */", "+        if (!doCompress) {", "+            long size = 0;", "+            CRC32 cal = new CRC32();", "+            if (!in.markSupported()) {", "+                // Store data into a byte[]", "+                ByteArrayOutputStream bos = new ByteArrayOutputStream();", "+", "+                byte[] buffer = new byte[8 * 1024];", "+                int count = 0;", "+                do {", "+                    size += count;", "+                    cal.update(buffer, 0, count);", "+                    bos.write(buffer, 0, count);", "+                    count = in.read(buffer, 0, buffer.length);", "+                } while (count != -1);", "+                in = new ByteArrayInputStream(bos.toByteArray());", "+", "+            } else {", "+                in.mark(Integer.MAX_VALUE);", "+                byte[] buffer = new byte[8 * 1024];", "+                int count = 0;", "+                do {", "+                    size += count;", "+                    cal.update(buffer, 0, count);", "+                    count = in.read(buffer, 0, buffer.length);", "+                } while (count != -1);", "+                in.reset();", "+            }", "+            ze.setSize(size);", "+            ze.setCrc(cal.getValue());", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e90b96f0af3e69f8552bf4172cbbb43e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/anteater/bootstrap/Bootstrap.java", "commitBeforeChange": "d741f56d0b67fa0feb5af74c8e8f5419f980f5d3", "commitAfterChange": "4cd7d60e99d2dbbea019824a0ac731c2ae341d1f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 1, "signatureBeforeChange": "      private static void copyfile(String from, String dest)", "signatureAfterChange": "     static void runCommand(String[] command) throws IOException", "diff": ["+     */", "+    static void runCommand(String[] command) throws IOException {", "+        Runtime runtime = Runtime.getRuntime();", "+        Process process = runtime.exec(command);", "+        // echo output from process", "+        InputStream in = process.getInputStream();", "+        byte[] buf = new byte[80];", "+        int count = 0;", "+        count = in.read(buf, 0, buf.length);", "+        while (count != -1) {", "+            System.out.write(buf, 0, count);", "+        }", "+            ", "+        in = process.getErrorStream();", "+        count = in.read(buf, 0, buf.length);          ", "+        if (count > 0) {", "+            System.out.println();", "+            System.out.println(\"Error Stream Output:\");", "+             ", "-", "-    private static void copyfile(String from, String dest) {", "-        File fromF = new File(from);", "-        File destF = new File(dest);", "-        if (fromF.exists()) {", "-            System.out.println(\"   Copying \" + from);", "-            try {", "-                FileInputStream in = new FileInputStream(fromF);", "-                FileOutputStream out = new FileOutputStream(destF);", "-                byte[] buf = new byte[1024 * 16];", "-                int count = 0;", "-                count = in.read(buf, 0, buf.length);", "-                if (count != -1) {", "-                    out.write(buf, 0, count);", "-                    count = in.read(buf, 0, buf.length);", "-                }", "-                ", "-                in.close();", "-                out.close();", "-            } catch (IOException ioe) {", "-                System.out.println(\"OUCH: \" + from);", "-                System.out.println(ioe);", "-            }", "-        }", "-    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7516296301a7d016a7844806b9513d5f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b92c3236e59a89154f39a7e02d18912", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/UnknownElement.java", "commitBeforeChange": "aeee70243a354c5951ec655556f8a1530e7713eb", "commitAfterChange": "ca5799fd8c1780abcc25f63745faf95bd2cdb06a", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 18, "signatureBeforeChange": "     protected Object makeObject(UnknownElement ue, RuntimeConfigurable w)", "signatureAfterChange": "     protected Object makeObject(UnknownElement ue, RuntimeConfigurable w)", "diff": ["-        Object o = makeTask(ue, w);", "+        ComponentHelper helper = ComponentHelper.getComponentHelper(", "+            getProject());", "+        String name = ue.getComponentName();", "+        Object o = helper.createComponent(ue, ue.getNamespace(), name);", "-            o = getProject().createDataType(ue.getTag());", "+            throw getNotFoundException(\"task or type\", name);", "-        if (o == null) {", "-            throw getNotFoundException(\"task or type\", ue.getTag());", "+        if (o instanceof Task) {", "+            Task task = (Task) o;", "+            task.setOwningTarget(getOwningTarget());", "+            task.init();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bec357c4be2b41d0fae7f19780c5d5c1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "bf6026a147e879837eaad2a16348ae2162829867", "commitAfterChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "         public Object create()", "signatureAfterChange": "         public Object create()", "diff": ["-                ComponentHelper helper = ComponentHelper.getComponentHelper(project);", "+                final ComponentHelper helper = ComponentHelper.getComponentHelper(project);", "-            } catch (IllegalAccessException ex) {", "+            } catch (final IllegalAccessException ex) {", "-            } catch (InstantiationException ex) {", "+            } catch (final InstantiationException ex) {", "-            } catch (IllegalArgumentException ex) {", "+            } catch (final IllegalArgumentException ex) {", "-            } catch (InvocationTargetException ex) {", "+            } catch (final InvocationTargetException ex) {"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d571e6c22a2794d7b690f3a903d418a0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "397844fd0a7590ad2aba3ea1e771924a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "6cd0de1022faed419783119405f458e44a1ac663", "commitAfterChange": "f21a51dfd3ecb9fa8813f5612a5f87d437de2450", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "     protected void writeLocalFileHeader(ZipEntry ze) throws IOException", "signatureAfterChange": "     protected void writeLocalFileHeader(ZipEntry ze) throws IOException", "diff": ["-        boolean encodable = this.zipEncoding.canEncode(ze.getName());", "-        ByteBuffer name = this.zipEncoding.encode(ze.getName());", "+        boolean encodable = zipEncoding.canEncode(ze.getName());", "+        ByteBuffer name;", "+        if (!encodable && fallbackToUTF8) {", "+            name = ZipEncodingHelper.UTF8_ZIP_ENCODING.encode(ze.getName());", "+        } else {", "+            name = zipEncoding.encode(ze.getName());", "+        }", "-        if (createUnicodeExtraFields) {", "+        if (createUnicodeExtraFields != UnicodeExtraFieldPolicy.NEVER) {", "-            /*            if (!encodable) { -- FIXME decide what to*/", "+            if (createUnicodeExtraFields == UnicodeExtraFieldPolicy.ALWAYS", "+                || !encodable) {", "-            /* } */", "+            }", "-                /*            if (!commentEncodable) { -- FIXME decide what to*/", "+                if (createUnicodeExtraFields == UnicodeExtraFieldPolicy.ALWAYS", "+                    || !commentEncodable) {", "-                /* } */", "+                }", "-        writeVersionNeededToExtractAndGeneralPurposeBits(zipMethod);", "+        writeVersionNeededToExtractAndGeneralPurposeBits(zipMethod,", "+                                                         !encodable", "+                                                         && fallbackToUTF8);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e847d71d87a023091d737f14a21a2d4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "08ee283e413328452727333c6faf761a909d5662", "commitAfterChange": "476678d4a660bd6077ae4a8389cc29f42fbde0c9", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "      private NestedCreator getNestedCreator(         Project project, String parentUri, Object parent,         String elementName) throws BuildException", "signatureAfterChange": "      private NestedCreator getNestedCreator(         Project project, String parentUri, Object parent,         String elementName, UnknownElement child) throws BuildException", "diff": ["-        String elementName) throws BuildException {", "+        String elementName, UnknownElement child) throws BuildException {", "+        }", "+        if (nc == null && parent instanceof DynamicConfiguratorNS) {", "+            DynamicConfiguratorNS dc = (DynamicConfiguratorNS) parent;", "+            String qName = (child == null ? name : child.getQName());", "+            final Object nestedElement =", "+                dc.createDynamicElement(", "+                    (child == null ? \"\" : child.getNamespace()),", "+                    name, qName);", "+            if (nestedElement != null) {", "+                nc = new NestedCreator() {", "+                    public boolean isPolyMorphic() {", "+                        return false;", "+                    }", "+                    public Class getElementClass() {", "+                        return null;", "+                    }", "+", "+                    public Object getRealObject() {", "+                        return null;", "+                    }", "+", "+                    public Object create(", "+                        Project project, Object parent, Object ignore) {", "+                        return nestedElement;", "+                    }", "+                    public void store(Object parent, Object child) {", "+                    }", "+                };", "+            }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4b8eb86a700263a27b2e0c9bf7ed01d2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdf558b399cf9e1b239b202ef8141748", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/SchemaValidateTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void testNoDoubleSchemaLocation() throws Exception", "signatureAfterChange": "      @Test     public void testNoDoubleSchemaLocation() throws Exception", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testNoDoubleSchemaLocation\",", "-                \"two locations for schemas\",", "-                SchemaValidate.SchemaLocation.ERROR_TWO_LOCATIONS);", "+        try {", "+            buildRule.executeTarget(\"testNoDoubleSchemaLocation\");", "+            fail(\"Two locations for schemas\");", "+        } catch (BuildException ex) {", "+            AntAssert.assertContains(SchemaValidate.SchemaLocation.ERROR_TWO_LOCATIONS,", "+                    ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f580d01b0a2d666241c50f6068361364", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/SchemaValidateTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void testNoDuplicateSchema() throws Exception", "signatureAfterChange": "      @Test     public void testNoDuplicateSchema() throws Exception", "diff": ["+", "+    @Test", "-        expectBuildExceptionContaining(\"testNoDuplicateSchema\",", "-                \"duplicate schemas with different values\",", "-                SchemaValidate.ERROR_DUPLICATE_SCHEMA);", "+        try {", "+            buildRule.executeTarget(\"testNoDuplicateSchema\");", "+            fail(\"duplicate schemas with different values\");", "+        } catch (BuildException ex) {", "+            AntAssert.assertContains(SchemaValidate.ERROR_DUPLICATE_SCHEMA,", "+                    ex.getMessage());", "+        }"]}]}
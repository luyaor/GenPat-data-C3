{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8169730522a03aa7675f4333f73c5efa", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "022b3396da481b39c2fc56e1fd819354", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/jdepend/JDependTask.java", "commitBeforeChange": "2b0c95d418b4f3646a6e8479123efd8b95147674", "commitAfterChange": "e142e5addaeb50f2c2a7c71c29747150b9fad463", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     public int executeInVM(CommandlineJava commandline) throws BuildException", "signatureAfterChange": "     public int executeInVM(CommandlineJava commandline) throws BuildException", "diff": ["-                String[] classesPath = getClassespath().list();", "-                for (int i = 0; i < classesPath.length; i++) {", "-                    File f = new File(classesPath[i]);", "+                String[] cP = getClassespath().list();", "+                for (int i = 0; i < cP.length; i++) {", "+                    File f = new File(cP[i]);", "-                String[] sourcesPath = getSourcespath().list();", "-                for (int i = 0; i < sourcesPath.length; i++) {", "-                    File f = new File(sourcesPath[i]);", "+                String[] sP = getSourcespath().list();", "+                for (int i = 0; i < sP.length; i++) {", "+                    File f = new File(sP[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b83aa5d8b216c56fbcd02f221897f4a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/RecorderEntry.java", "commitBeforeChange": "84ca18779b28443d3e89838d923ed9b4c65fec78", "commitAfterChange": "9489d9ffc1be7d8f2fc593542185ce2eabc7016c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      public void messageLogged(BuildEvent event)", "signatureAfterChange": "      public void messageLogged(BuildEvent event)", "diff": ["-            String name = \"[\" + event.getTask().getTaskName() + \"]\";", "-            /** @todo replace 12 with DefaultLogger.LEFT_COLUMN_SIZE */", "-            for ( int i = 0; i < (12 - name.length()); i++ ) {", "-                buf.append( \" \" );", "-            } // for", "-            buf.append( name );", "+            String name = event.getTask().getTaskName();", "+            ", "+            if (!emacsMode) {", "+                String label = \"[\" + name + \"] \";", "+                int size = DefaultLogger.LEFT_COLUMN_SIZE - label.length();", "+                for (int i = 0; i < size; i++) {", "+                    buf.append(\" \");", "+                } // for", "+                buf.append(label);", "+            } // if"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd240d50865704c47e830d7919ca5c59", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "2b925503d71972d8b782eedd6cdf75711377d7b0", "commitAfterChange": "2c4faa154f069f3f69d6c3c95629409a7b8b0cc4", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 44, "signatureBeforeChange": "     private boolean contentsExcluded(String name)", "signatureAfterChange": "     private boolean contentsExcluded(TokenizedPath path)", "diff": ["-    private boolean contentsExcluded(String name) {", "-        name = (name.endsWith(File.separator)) ? name : name + File.separator;", "-        for (int i = 0; i < excludes.length; i++) {", "-            String e = excludes[i];", "-            if (e.endsWith(SelectorUtils.DEEP_TREE_MATCH)", "-                && SelectorUtils.matchPath(e.substring(0, e.length() - 2),", "-                                           name, isCaseSensitive())) {", "+    private boolean contentsExcluded(TokenizedPath path) {", "+        for (int i = 0; i < excludePatterns.length; i++) {", "+            if (excludePatterns[i].endsWith(SelectorUtils.DEEP_TREE_MATCH)", "+                && excludePatterns[i].withoutLastToken()", "+                   .matchPath(path, isCaseSensitive())) {"]}]}
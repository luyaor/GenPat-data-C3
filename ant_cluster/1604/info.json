{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f894f2706fee9d77d10ddb562c582568", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "197efc320ef0776e86d5db4e0e5d30ae", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/image/Image.java", "commitBeforeChange": "686cb8ffd17e68ce3595194f7b623d78b16f7251", "commitAfterChange": "8d3464f4e6fe2268c6fccbe4f9d651c8222496cd", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void execute()", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-    public void execute() {", "+    public void execute() throws BuildException {", "-            String [] files =null;", "+            String[] files = null;", "-            if (srcDir != null){", "-              ds = super.getDirectoryScanner(srcDir);", "+            if (srcDir != null) {", "+                ds = super.getDirectoryScanner(srcDir);", "-              files = ds.getIncludedFiles();", "-              for (int i = 0; i < files.length; i++){", "-                filesList.add(new File(srcDir.getAbsolutePath() + File.separator + files[i]));", "-              }", "+                files = ds.getIncludedFiles();", "+                for (int i = 0; i < files.length; i++) {", "+                    filesList.add(new File(srcDir.getAbsolutePath() + File.separator + files[i]));", "+                }", "-                files =ds.getIncludedFiles();", "+                files = ds.getIncludedFiles();", "-                for (int j = 0; j < files.length; j++){", "-                  filesList.add(new File(fromDir.getAbsolutePath() + File.separator + files[j]));", "+                for (int j = 0; j < files.length; j++) {", "+                    filesList.add(new File(fromDir.getAbsolutePath() + File.separator + files[j]));", "-            if (!overwrite){", "-             // remove any files that shouldn't be overwritten.", "-             ArrayList filesToRemove = new ArrayList();", "-             for(Iterator i = filesList.iterator();i.hasNext();){", "-               File f = (File)i.next();", "-               File new_file = new File(destDir.getAbsolutePath() + File.separator + f.getName());", "-               if (new_file.exists()){", "-                 filesToRemove.add(f);", "-               }", "-             }", "-             filesList.removeAll(filesToRemove);", "+            if (!overwrite) {", "+                // remove any files that shouldn't be overwritten.", "+                ArrayList filesToRemove = new ArrayList();", "+                for (Iterator i = filesList.iterator(); i.hasNext();) {", "+                    File f = (File) i.next();", "+                    File new_file = new File(destDir.getAbsolutePath() + File.separator + f.getName());", "+                    if (new_file.exists()) {", "+                        filesToRemove.add(f);", "+                    }", "+                }", "+                filesList.removeAll(filesToRemove);", "-            for (Iterator i = filesList.iterator();i.hasNext();){", "-              File file = (File)i.next();", "+            for (Iterator i = filesList.iterator(); i.hasNext();) {", "+                File file = (File) i.next();", "-              processFile(file);", "-              if (garbage_collect) {", "-                  System.gc();", "-              }", "+                processFile(file);", "+                if (garbage_collect) {", "+                    System.gc();", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9328e053dd5760d384338f7f2e5541ca", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/launch/Locator.java", "commitBeforeChange": "36d84a61dc70dd6bbc8ee25d5261de5f2874e837", "commitAfterChange": "f3939727d9e11188d266beed7e9dfa8e2fd0bc9a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public static URL getClassLocationURL(Class theClass)          throws MalformedURLException", "signatureAfterChange": "     public static String fromURI(String uri)", "diff": ["-    public static URL getClassLocationURL(Class theClass)", "-         throws MalformedURLException {", "-        String className = theClass.getName().replace('.', '/') + \".class\";", "-        URL classRawURL = theClass.getClassLoader().getResource(className);", "-", "-        String fileComponent = classRawURL.getFile();", "-        if (classRawURL.getProtocol().equals(\"file\")) {", "-            // Class comes from a directory of class files rather than", "-            // from a jar.", "-            int classFileIndex = fileComponent.lastIndexOf(className);", "-            if (classFileIndex != -1) {", "-                fileComponent = fileComponent.substring(0, classFileIndex);", "-            }", "-", "-            return new URL(\"file:\" + fileComponent);", "-        } else if (classRawURL.getProtocol().equals(\"jar\")) {", "-            // Class is coming from a jar. The file component of the URL", "-            // is actually the URL of the jar file", "-            int classSeparatorIndex = fileComponent.lastIndexOf(\"!\");", "-            if (classSeparatorIndex != -1) {", "-                fileComponent = fileComponent.substring(0, classSeparatorIndex);", "-            }", "-", "-            return new URL(fileComponent);", "-        } else {", "-            // its running out of something besides a jar.", "-            // We just return the Raw URL as a best guess", "-            return classRawURL;", "-        }", "+     */", "+    public static String fromURI(String uri) {", "+        if (!uri.startsWith(\"file:\")) {", "+            throw new IllegalArgumentException(\"Can only handle file: URIs\");", "+        }", "+        if (uri.startsWith(\"file://\")) {", "+            uri = uri.substring(7);", "+        } else {", "+            uri = uri.substring(5);", "+        }", "+", "+        uri = uri.replace('/', File.separatorChar);", "+        if (File.pathSeparatorChar == ';' && uri.startsWith(\"\\\\\") && uri.length() > 2", "+            && Character.isLetter(uri.charAt(1)) && uri.charAt(2) == ':') {", "+            uri = uri.substring(1);", "+        }", "+", "+        StringBuffer sb = new StringBuffer();", "+        CharacterIterator iter = new StringCharacterIterator(uri);", "+        for (char c = iter.first(); c != CharacterIterator.DONE;", "+             c = iter.next()) {", "+            if (c == '%') {", "+                char c1 = iter.next();", "+                if (c1 != CharacterIterator.DONE) {", "+                    int i1 = Character.digit(c1, 16);", "+                    char c2 = iter.next();", "+                    if (c2 != CharacterIterator.DONE) {", "+                        int i2 = Character.digit(c2, 16);", "+                        sb.append((char) ((i1 << 4) + i2));", "+                    }", "+                }", "+            } else {", "+                sb.append(c);", "+            }", "+        }", "+", "+        String path = sb.toString();", "+        return path;", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "42538be9cdaf75e874aa53d3c0b58b4f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "159da8c6267f6651bf4599eefa8331e0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "3742a036cb052bd971bd117738230ecfbdcbf7bb", "commitAfterChange": "41893fdb3052f79a2d09d7f8a86711912fc429e6", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void runBuild(ClassLoader coreLoader) throws BuildException", "signatureAfterChange": "     private void runBuild(ClassLoader coreLoader) throws BuildException", "diff": ["-            SecurityManager oldsm = System.getSecurityManager();", "+            // use a system manager that prevents from System.exit()", "+            // only in JDK > 1.1", "+            SecurityManager oldsm = null;", "+            if ( !Project.JAVA_1_0.equals(Project.getJavaVersion()) &&", "+                !Project.JAVA_1_1.equals(Project.getJavaVersion()) ){", "+                oldsm = System.getSecurityManager();", "+                System.setSecurityManager(new NoExitSecurityManager());", "+            }", "+                // put back the original security manager", "+                if (oldsm != null){", "+                    System.setSecurityManager(oldsm);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf8a9cee30d5cf1bd57a1d15269b1631", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Project.java", "commitBeforeChange": "4cc50d387f2042c897b22a4ae6bff2f556071ffe", "commitAfterChange": "7e01ed9d2d7fa189892aa9d1a3ff24ad75dbf1d7", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": "     public Object getReference(String key)", "signatureAfterChange": "     public Object getReference(String key)", "diff": ["-        return resolveIdReference(key, this);", "+        ret = resolveIdReference(key, this);", "+        if (ret == null && !key.equals(MagicNames.REFID_PROPERTY_HELPER)) {", "+            Vector p = new Vector();", "+            PropertyHelper.getPropertyHelper(this).parsePropertyString(", "+                key, new Vector(), p);", "+            if (p.size() == 1) {", "+                log(\"Unresolvable reference \" + key", "+                    + \" might be a misuse of property expansion syntax.\",", "+                    MSG_WARN);", "+            }", "+        }", "+        return ret;"]}]}
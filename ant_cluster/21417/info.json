{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7eaa897477b2ae2735310d9e7f5bce95", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10f30305f291b34311a4f65f1433528f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/Frame.java", "commitBeforeChange": "752f49d5b18f9743f8e4a6dbdc8065d240d9c97a", "commitAfterChange": "da4e1a3aa99899d6aecc6d14c2a7498fa51647aa", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 16, "signatureBeforeChange": "     protected Map getAllProperties()", "signatureAfterChange": "     protected Iterator getRefNames()", "diff": ["-     */", "-    protected Map getAllProperties() {", "-        Map allProperties = new HashMap(dataValues);", "-        Iterator i = referencedFrames.keySet().iterator();", "-", "-        while (i.hasNext()) {", "-            String refName = (String) i.next();", "-            Frame refFrame = getReferencedFrame(refName);", "-            Map refProperties = refFrame.getAllProperties();", "-            Iterator j = refProperties.keySet().iterator();", "-", "-            while (j.hasNext()) {", "-                String name = (String) j.next();", "-                Object value = refProperties.get(name);", "-", "-                allProperties.put(refName + Project.REF_DELIMITER + name,", "-                    value);", "-            }", "-        }", "-", "-        return allProperties;", "-    }", "+     */", "+    protected Iterator getRefNames() {", "+        return referencedFrames.keySet().iterator();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17cbfa0f7ad1f79d16fdf8f7ac8eb6fe", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultObjectConfigurer.java", "commitBeforeChange": "ba1f6f147af327833c018a27a46347cbd46625f3", "commitAfterChange": "a989b254f04d33e5bc2370b62121bd56830ac2f1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void enableContent()         throws ConfigurationException", "signatureAfterChange": "     private void enableContent()         throws ConfigurationException", "diff": ["+     */", "+    private void enableContent()", "+        throws ConfigurationException", "+    {", "+        // Locate the 'addContent' methods, which return void, and take", "+        // a single parameter.", "+        final Collection methods = findMethods( \"addContent\", true );", "+        if( methods.size() == 0 )", "+        {", "+            return;", "+        }", "+", "+        final Method method = (Method)methods.iterator().next();", "+        final Class type = method.getParameterTypes()[ 0 ];", "+        m_contentConfigurer = new DefaultPropertyConfigurer( getPropertyCount(),", "+                                                             type,", "+                                                             method,", "+                                                             1 );", "+    }", "-     */", "-    private void enableContent()", "-        throws ConfigurationException", "-    {", "-        // TODO - should be using 'setContent', rather than 'addContent',", "-        // to better match the call-at-most-once semantics of the other", "-        // setter methods", "-", "-        // Locate any 'addContent' methods, which return void, and take", "-        // a single parameter.", "-        final Method[] methods = m_class.getMethods();", "-        for( int i = 0; i < methods.length; i++ )", "-        {", "-            final Method method = methods[ i ];", "-            final String methodName = method.getName();", "-            if( Modifier.isStatic( method.getModifiers() ) ||", "-                !methodName.equals( \"addContent\" ) ||", "-                method.getReturnType() != Void.TYPE ||", "-                method.getParameterTypes().length != 1 )", "-            {", "-                continue;", "-            }", "-", "-            // Check for multiple content setters", "-            if( null != m_contentConfigurer )", "-            {", "-                final String message =", "-                    REZ.getString( \"multiple-content-setter-methods.error\", m_class.getName() );", "-                throw new ConfigurationException( message );", "-            }", "-", "-            final Class type = method.getParameterTypes()[ 0 ];", "-            m_contentConfigurer =", "-                new DefaultPropertyConfigurer( getPropertyCount(),", "-                                               type,", "-                                               method,", "-                                               1 );", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "254aef09339caf008ad3fb71a1a35343", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Tstamp.java", "commitBeforeChange": "8a7fce7e2e6db1d736542cfb5a117223fc3b8f14", "commitAfterChange": "e503ebd4c7a3603efb6119fec72b3bbe3e9a4f58", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "                  public void setUnit(String unit)", "signatureAfterChange": "         public void setUnit(String unit)", "diff": ["-        ", "+         */", "-            if (unit.equalsIgnoreCase(\"millisecond\")) {", "-                field = Calendar.MILLISECOND;", "-            }", "-            else if (unit.equalsIgnoreCase(\"second\")) {", "-                field = Calendar.SECOND;", "-            }", "-            else if (unit.equalsIgnoreCase(\"minute\")) {", "-                field = Calendar.MINUTE;", "-            }", "-            else if (unit.equalsIgnoreCase(\"hour\")) {", "-                field = Calendar.HOUR_OF_DAY;", "-            }", "-            else if (unit.equalsIgnoreCase(\"day\")) {", "-                field = Calendar.DATE;", "-            }", "-            else if (unit.equalsIgnoreCase(\"week\")) {", "-                field = Calendar.WEEK_OF_YEAR;", "-            }", "-            else if (unit.equalsIgnoreCase(\"month\")) {", "-                field = Calendar.MONTH;", "-            }", "-            else if (unit.equalsIgnoreCase(\"year\")) {", "-                field = Calendar.YEAR;", "-            }", "-            else {", "-                throw new BuildException(unit + \" is not a unit supported by the tstamp task\", getLocation());", "-            }", "-        }            ", "+            log(\"DEPRECATED - The setUnit(String) method has been deprecated.\"", "+                + \" Use setUnit(Tstamp.Unit) instead.\");", "+            Unit u = new Unit();", "+            u.setValue(unit);", "+            field = u.getCalendarField();", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "465b6ad1b80ed18a2e79680f98dd5ec4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/AbstractClasspathResource.java", "commitBeforeChange": "28ca0623119a788c754840b78a50b052518b2006", "commitAfterChange": "211d0a8ea6b0e7f4c28b83abab1961b40bba90e7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public InputStream getInputStream() throws IOException", "signatureAfterChange": "     public InputStream getInputStream() throws IOException", "diff": ["+", "+        final ClassLoaderWithFlag classLoader = getClassLoader();", "+        return !classLoader.needsCleanup()", "+            ? openInputStream(classLoader.getLoader())", "+            : new FilterInputStream(openInputStream(classLoader.getLoader())) {", "+                    public void close() throws IOException {", "+                        FileUtils.close(in);", "+                        classLoader.cleanup();", "+                    }", "+                    protected void finalize() throws Throwable {", "+                        try {", "+                            close();", "+                        } finally {", "+                            super.finalize();", "+                        }", "+                    }", "+                };", "+    }", "-", "-        final ClassLoader classLoader = cl;", "-        return !clNeedsCleanup", "-            ? openInputStream(cl)", "-            : new FilterInputStream(openInputStream(cl)) {", "-                    public void close() throws IOException {", "-                        FileUtils.close(in);", "-                        ((AntClassLoader) classLoader).cleanup();", "-                    }", "-                    protected void finalize() throws Throwable {", "-                        try {", "-                            close();", "-                        } finally {", "-                            super.finalize();", "-                        }", "-                    }", "-                };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4da7d23f323373800f84fac5933afed3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Length.java", "commitBeforeChange": "ec980be7345681968c93f0609e9a3fecb39b9753", "commitAfterChange": "fbb9886634198d8377104bef9ec697fadeb134df", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": "      private void handleResources(Handler h)", "signatureAfterChange": "      private void handleResources(Handler h)", "diff": ["-        for (Iterator i = filesets.iterator(); i.hasNext();) {", "-            FileSet fs = (FileSet) i.next();", "-            DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "-            String[] f = ds.getIncludedFiles();", "-            for (int j = 0; j < f.length; j++) {", "-                Resource r = ds.getResource(f[j]);", "-                if (!r.isExists()) {", "-                    log(r.getName() + \" does not exist\", Project.MSG_ERR);", "-                } else if (r.isDirectory()) {", "-                    log(r.getName() + \" is a directory; length unspecified\",", "-                        Project.MSG_ERR);", "-                } else {", "-                    //force a full path:", "-                    File basedir = ds.getBasedir();", "-                    String s = FileUtils.getFileUtils().resolveFile(", "-                        basedir, r.getName()).getAbsolutePath();", "-                    h.handle(new Resource(s, true,", "-                        r.getLastModified(), false, r.getSize()));", "-                }", "+        for (Iterator i = resources.iterator(); i.hasNext();) {", "+            Resource r = (Resource) i.next();", "+            if (!r.isExists()) {", "+                log(r + \" does not exist\", Project.MSG_ERR);", "+            } else if (r.isDirectory()) {", "+                log(r + \" is a directory; length unspecified\",", "+                    Project.MSG_ERR);", "+            } else {", "+                h.handle(r);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "523440b27b8cbd30feba7f96b88fffe6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "e503ebd4c7a3603efb6119fec72b3bbe3e9a4f58", "commitAfterChange": "3a28c02ef6540c2d32aef2665f4abfd00e5937e3", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     public void setAction(String action) throws BuildException", "signatureAfterChange": "     public void setAction(String action) throws BuildException", "diff": ["-    public void setAction(String action) throws BuildException", "-    {", "-        String actionL = action.toLowerCase(Locale.US);", "-        if (actionL.equals(\"send\") ||", "-            actionL.equals(\"put\"))", "-        {", "-            this.action = SEND_FILES;", "-        }", "-        else if (actionL.equals(\"recv\") ||", "-                 actionL.equals(\"get\"))", "-        {", "-            this.action = GET_FILES;", "-        }", "-        else if (actionL.equals(\"del\") ||", "-                 actionL.equals(\"delete\" ))", "-        {", "-            this.action = DEL_FILES;", "-        }", "-        else if (actionL.equals(\"list\"))", "-        {", "-            this.action = LIST_FILES;", "-        }", "-        else if (actionL.equals(\"mkdir\"))", "-        {", "-            this.action = MK_DIR;", "-        }", "-        else", "-        {", "-            throw new BuildException(\"action \" + action + \" is not supported\");", "-        }", "+    public void setAction(String action) throws BuildException {", "+        log(\"DEPRECATED - The setAction(String) method has been deprecated.\"", "+            + \" Use setAction(FTP.Action) instead.\");", "+        Action a = new Action();", "+        a.setValue(action);", "+        this.action = a.getAction();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87b010d7ea0d73334be0172312bddc3a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/modules/basic/Property.java", "commitBeforeChange": "5c3c1ca862e3d3dcb31eba03cb9c472b7daa5ef8", "commitAfterChange": "7a87980dc39534a2517471c590aa5b5619892aaa", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void configure( final Configuration configuration )         throws ConfigurationException", "signatureAfterChange": "      public void configure( final Configuration configuration )         throws ConfigurationException", "diff": ["-", "-", "-            final Object object = resolve( value );", "-", "-            if( name.equals( \"name\" ) )", "-            {", "-                final String convertedValue = (String)convert( String.class, object );", "-                setName( convertedValue );", "-            }", "-            else if( name.equals( \"value\" ) )", "-            {", "-                try { setValue( object ); }", "-                catch( final TaskException te )", "-                {", "-                    throw new ConfigurationException( \"Error setting value: \" + value, te );", "-                }", "-            }", "-            else if( name.equals( \"local-scope\" ) )", "-            {", "-                final Boolean localScope = (Boolean)convert( Boolean.class, object );", "-                setLocalScope( Boolean.TRUE == localScope );", "-            }", "-            else", "-            {", "-                throw new ConfigurationException( \"Unknown attribute \" + name );", "-            }", "+            configure( this, name, value );", "-", "-            final Configuration child = children[ i ];", "-", "-                final DataType value = (DataType)m_factory.create( child.getName() );", "-                configure( value, child );", "+                final DataType value = (DataType)m_factory.create( children[ i ].getName() );", "+                configure( value, children[ i ] );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b312ae865a059d3466ea14ff6215a15a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/tar/TarRoundTripTest.java", "commitBeforeChange": "b817fdb2b8ab9d8e62004957b7913cab17d5d01f", "commitAfterChange": "ca10b52e340d4ce2018e7426920e964ceaf1307a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testLongRoundTripping() throws IOException", "signatureAfterChange": "     public void testLongRoundTrippingGNU() throws IOException", "diff": ["-    public void testLongRoundTripping() throws IOException {", "+    public void testLongRoundTrippingGNU() throws IOException {", "+        testLongRoundTripping(TarOutputStream.LONGFILE_GNU);", "+    }", "-        tos.setLongFileMode(TarOutputStream.LONGFILE_GNU);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcab4bc9efcf043e4b208d2aeae3f93f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ExecutionFrame.java", "commitBeforeChange": "e0fef5cf64773a98734998b9736ded96fc8be2c7", "commitAfterChange": "81c17b6164451315e24ae774f1bed668cbca99ce", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected void setProject(Project project) throws ConfigException", "signatureAfterChange": "     protected void setProject(Project project) throws ExecutionException", "diff": ["-    protected void setProject(Project project) throws ConfigException {", "+    protected void setProject(Project project) throws ExecutionException {", "-        URL projectURL = project.getSourceURL();", "-        if (projectURL.getProtocol().equals(\"file\")) {", "-            File projectFile = new File(projectURL.getFile());", "-            String base = project.getBase();", "-            if (base == null) {", "-                base = \".\";", "-            }", "-            baseDir = new File(projectFile.getParentFile(), base);", "-        } else {", "-            baseDir = new File(\".\");", "-        }", "-", "-            ExecutionFrame referencedFrame", "-                 = new ExecutionFrame(standardLibs, initConfig, config);", "-            referencedFrame.setProject(referencedProject);", "+            ExecutionFrame referencedFrame = createFrame(referencedProject);", "-            for (Iterator j = eventSupport.getListeners(); j.hasNext(); ) {", "-                BuildListener listener = (BuildListener)j.next();", "-                referencedFrame.addBuildListener(listener);", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cec147b2ad2be8be9be57d2da93a3737", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Diagnostics.java", "commitBeforeChange": "c99b33079f5cd10abf44645de85729fe35b82cda", "commitAfterChange": "161579a6d082eac88d197ee70491745c54d48b92", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      private static String getClassLocation( Class clazz)", "signatureAfterChange": "      private static String getClassLocation( Class clazz)", "diff": ["-        try {", "-            java.net.URL url = clazz.getProtectionDomain().getCodeSource().getLocation();", "-            String location = url.toString();", "-            if (location.startsWith(\"jar\")) {", "-                url = ((java.net.JarURLConnection) url.openConnection()).getJarFileURL();", "-                location = url.toString();", "-            }", "-", "-            if (location.startsWith(\"file\")) {", "-                java.io.File file = new java.io.File(url.getFile());", "-                return file.getAbsolutePath();", "-            } else {", "-                return url.toString();", "-            }", "-        } catch (Throwable t) {", "-        }", "-        return null;", "+        File f = LoaderUtils.getClassSource(clazz);", "+        return f == null ? null : f.getAbsolutePath();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1be79ef53ed2cc80e2e7169a629430d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/LoaderUtils.java", "commitBeforeChange": "36d84a61dc70dd6bbc8ee25d5261de5f2874e837", "commitAfterChange": "f3939727d9e11188d266beed7e9dfa8e2fd0bc9a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public static File getResourceSource(ClassLoader c, String resource)", "signatureAfterChange": "     public static File getResourceSource(ClassLoader c, String resource)", "diff": ["-        FileUtils fileUtils = FileUtils.newFileUtils();", "-        ", "-        URL url = c.getResource(resource);", "-        if (url != null) {", "-            String u = url.toString();", "-            if (u.startsWith(\"jar:file:\")) {", "-                int pling = u.indexOf(\"!\");", "-                String jarName = u.substring(4, pling);", "-                return new File(fileUtils.fromURI(jarName));", "-            } else if (u.startsWith(\"file:\")) {", "-                int tail = u.indexOf(resource);", "-                String dirName = u.substring(0, tail);", "-                return new File(fileUtils.fromURI(dirName));", "-            }", "-        }", "-        return null;", "+        return normalizeSource(Locator.getResourceSource(c, resource));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da147cac5a0fa202e73b24934cead7d5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/launcher/Main.java", "commitBeforeChange": "3946d3183e482916114f5b5126d23cd6bf1c9da3", "commitAfterChange": "25c4d95cd51429feee002187eba3dc0acfbb4d3e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static final void main( final String[] args )         throws Exception", "signatureAfterChange": "     public static final void main( final String[] args )         throws Exception", "diff": ["-            //setup classloader appropriately for myrmidon jar", "-            final File libDir = new File( installDirectory, \"lib\" );", "-            final URL[] libUrls = buildURLList( libDir );", "-            final URLClassLoader libClassLoader = new URLClassLoader( libUrls );", "-", "-            final File containerLibDir = new File( installDirectory, \"bin\" + File.separator + \"lib\" );", "-            final URL[] containerLibUrls = buildURLList( containerLibDir );", "+            final URLClassLoader sharedClassLoader = createSharedClassLoader( installDirectory );", "-                new URLClassLoader( containerLibUrls, libClassLoader );", "+                createContainerClassLoader( installDirectory, sharedClassLoader );", "-            //load class and retrieve appropriate main method.", "-            final Class clazz = classLoader.loadClass( \"org.apache.myrmidon.frontends.CLIMain\" );", "-            final Method method = clazz.getMethod( \"main\", new Class[]{args.getClass()} );", "-", "-            Thread.currentThread().setContextClassLoader( classLoader );", "-", "-            //kick the tires and light the fires....", "-            method.invoke( null, new Object[]{args} );", "+            execMainClass( classLoader, args );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcba5d75ed4fadb3a6a2a9f0779a0a73", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ANTLR.java", "commitBeforeChange": "c99b33079f5cd10abf44645de85729fe35b82cda", "commitAfterChange": "161579a6d082eac88d197ee70491745c54d48b92", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     protected void addClasspathEntry(String resource)", "signatureAfterChange": "     protected void addClasspathEntry(String resource)", "diff": ["-        URL url = getClass().getResource(resource);", "-        if (url != null) {", "-            String u = url.toString();", "-            if (u.startsWith(\"jar:file:\")) {", "-                int pling = u.indexOf(\"!\");", "-                String jarName = u.substring(9, pling);", "-                log(\"Implicitly adding \" + jarName + \" to classpath\",", "-                        Project.MSG_DEBUG);", "-                createClasspath().setLocation(new File((new File(jarName)).getAbsolutePath()));", "-            } else if (u.startsWith(\"file:\")) {", "-                int tail = u.indexOf(resource);", "-                String dirName = u.substring(5, tail);", "-                log(\"Implicitly adding \" + dirName + \" to classpath\",", "-                        Project.MSG_DEBUG);", "-                createClasspath().setLocation(new File((new File(dirName)).getAbsolutePath()));", "-            } else {", "-                log(\"Don\\'t know how to handle resource URL \" + u,", "-                        Project.MSG_DEBUG);", "-            }", "+        /* ", "+         * pre Ant 1.6 this method used to call getClass().getResource", "+         * while Ant 1.6 will call ClassLoader.getResource().", "+         *", "+         * The difference is that Class.getResource expects a leading", "+         * slash for \"absolute\" resources and will strip it before", "+         * delegating to ClassLoader.getResource - so we now have to", "+         * emulate Class's behavior.", "+         */", "+        if (resource.startsWith(\"/\")) {", "+            resource = resource.substring(1);", "+        } else {", "+            resource = \"org/apache/tools/ant/taskdefs/optional/\"", "+                + resource;", "+        }", "+        ", "+        File f = LoaderUtils.getResourceSource(getClass().getClassLoader(),", "+                                               resource);", "+        if (f != null) {", "+            log(\"Found \" + f.getAbsolutePath(), Project.MSG_DEBUG);", "+            createClasspath().setLocation(f);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e05a13d5df4a496ef0ce09d0d833ea3c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/Frame.java", "commitBeforeChange": "83dc385bd01fbc8ee2fb166b9a5605bdc6958d76", "commitAfterChange": "bf844382c856f7b51c56024189c93f11d34cb720", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     protected void executeTasks(Iterator taskIterator)          throws ExecutionException", "signatureAfterChange": "     protected void executeTasks(Iterator taskIterator)          throws ExecutionException", "diff": ["-            Throwable failureCause = null;", "-            ImportInfo importInfo", "-                 = componentManager.getDefinition(model.getType());", "-            if (importInfo == null) {", "-                throw new ExecutionException(\"There is no definition for the <\"", "-                     + model.getType() + \"> element\", model.getLocation());", "-            }", "-", "-                if (importInfo.getDefinitionType() == AntLibrary.TASKDEF) {", "-                    TaskContext taskContext = configureTask(model);", "-                    eventSupport.fireTaskStarted(model);", "-", "-                    ClassLoader currentLoader", "-                         = setContextLoader(taskContext.getLoader());", "-                    taskContext.execute();", "-                    setContextLoader(currentLoader);", "-                    taskContext.destroy();", "+                Object component = componentManager.createComponent(model);", "+                if (component instanceof Task) {", "+                    execService.executeTask((Task)component);", "-                    // typedef", "-                    String typeId = model.getAspectValue(ANT_ASPECT, \"id\");", "-                    Object typeInstance = configureType(model.getType(), model);", "+                    String typeId ", "+                        = model.getAspectValue(Constants.ANT_ASPECT, \"id\");", "-                        setDataValue(typeId, typeInstance, true);", "+                        setDataValue(typeId, component, true);", "-                failureCause = e;", "-                failureCause = ee;", "-            } finally {", "-                eventSupport.fireTaskFinished(model, failureCause);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0adf34d86f5fb2506cd962f5464775a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ReplaceRegExp.java", "commitBeforeChange": "671dff9a1cfe74859b9ec4356974b22840953989", "commitAfterChange": "0faf6e94d6bd5911035e07913286d1ff0c75524b", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     protected void doReplace(File f, int options)          throws IOException", "signatureAfterChange": "     protected void doReplace(File f, int options)          throws IOException", "diff": ["-                        String line = null;", "-                        String res = null;", "-                                    line = linebuf.toString();", "-                                    res  = doReplace(regex, subs, line, options);", "-", "-                                    if (!res.equals(line)) {", "-                                        changes = true;", "-                                    }", "-", "-                                    w.write(res);", "+                                    changes |= replaceAndWrite(linebuf.toString(),", "+                                                               w, options);", "-                                line = linebuf.toString();", "-                                res  = doReplace(regex, subs, line, options);", "-", "-                                if (!res.equals(line)) {", "-                                    changes = true;", "-                                }", "-", "-                                w.write(res);", "+                                changes |= replaceAndWrite(linebuf.toString(),", "+                                                           w, options);", "-                                    line = linebuf.toString();", "-                                    res  = doReplace(regex, subs, line, options);", "-", "-                                    if (!res.equals(line)) {", "-                                        changes = true;", "-                                    }", "-", "-                                    w.write(res);", "+                                    changes |= replaceAndWrite(linebuf.toString(),", "+                                                               w, options);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e86e5ea4e92e49e9ce8c5d798f7a7b7e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/Sort.java", "commitBeforeChange": "19d970dbd33bac4654e4d8319afe11dcb15dd708", "commitAfterChange": "c1a8cd521f77cc542c206e7ab3f4aeb6aae53e87", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 9, "signatureBeforeChange": "     protected Collection getCollection()", "signatureAfterChange": "     protected synchronized Collection getCollection()", "diff": ["-    protected Collection getCollection() {", "-        List rcs = getResourceCollections();", "-        if (rcs.size() != 1) {", "-            throw new BuildException(ONE_NESTED_MESSAGE);", "-        }", "-        Iterator nested = ((ResourceCollection) (rcs.get(0))).iterator();", "-        if (!(nested.hasNext())) {", "+    protected synchronized Collection getCollection() {", "+        ResourceCollection rc = getResourceCollection();", "+        Iterator iter = rc.iterator();", "+        if (!(iter.hasNext())) {", "-        ArrayList al = new ArrayList();", "-        while (nested.hasNext()) {", "-            al.add(nested.next());", "+        SortedBag b = new SortedBag(comp);", "+        while (iter.hasNext()) {", "+            b.add(iter.next());", "-        if (compStack.empty()) {", "-            Collections.sort(al);", "-        } else {", "-            for (Stack s = (Stack) compStack.clone(); !s.empty();) {", "-                Collections.sort(al, (ResourceComparator) s.pop());", "-            }", "-        }", "-        return al;", "+        return b;"]}]}
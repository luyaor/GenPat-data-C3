{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7c23848c53bde085f884c569a2041866", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01dfd9664d23735fa5dc9fadf1c377ea", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "b1278e4e62260543c5086fb7b584a4d27c63d987", "commitAfterChange": "11f0a8954237d3208179ca4404f47ad882591f56", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": "     protected boolean isUpToDate(FTPClient ftp, File localFile,                                  String remoteFile)          throws IOException, BuildException", "signatureAfterChange": "     protected boolean isUpToDate(FTPClient ftp, File localFile,                                  String remoteFile)          throws IOException, BuildException", "diff": ["+        long adjustedRemoteTimestamp = ", "+            remoteTimestamp + this.timeDiffMillis + this.granularityMillis; ", "+        ", "+        StringBuffer msg = new StringBuffer(\"   [\")", "+        \t.append(TIMESTAMP_LOGGING_SDF.format(new Date(localTimestamp)))", "+        \t.append(\"] local\");", "+        log(msg.toString(), Project.MSG_VERBOSE);", "+        ", "+        msg = new StringBuffer(\"   [\")", "+          \t.append(TIMESTAMP_LOGGING_SDF.format(new Date(adjustedRemoteTimestamp)))", "+        \t.append(\"] remote\");", "+        if (remoteTimestamp != adjustedRemoteTimestamp) {", "+            msg.append(\" - (raw: \")", "+        \t.append(TIMESTAMP_LOGGING_SDF.format(new Date(remoteTimestamp)))", "+            .append(\")\");", "+        }", "+        log(msg.toString(), Project.MSG_VERBOSE);", "+        ", "+", "+        ", "-            return remoteTimestamp ", "-            \t\t+ this.timeDiffMillis ", "-            \t\t+ this.granularityMillis ", "-            \t>= localTimestamp;", "+            return adjustedRemoteTimestamp >= localTimestamp;", "-            return localTimestamp ", "-            \t>= remoteTimestamp ", "-                \t+ this.timeDiffMillis", "-                \t+ this.granularityMillis;", "+            return localTimestamp >= adjustedRemoteTimestamp;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c0203e299826bdfa38d62f56055c1b5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ImportTask.java", "commitBeforeChange": "8dd8b1bb02f9992909c7bd08f8922eb9f35a5052", "commitAfterChange": "fdc711e2e2805a41b766e9d1e07d83512d97f658", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      private void importResource(ProjectHelper helper,                                 Resource importedResource)", "signatureAfterChange": "      private void importResource(ProjectHelper helper,                                 Resource importedResource)", "diff": ["-            helper.parse(getProject(), importedResource);", "+            ProjectHelper subHelper = ProjectHelperRepository.getInstance().getProjectHelperForBuildFile(", "+                    importedResource);", "+", "+            // push current stacks into the sub helper", "+            subHelper.getImportStack().addAll(helper.getImportStack());", "+            subHelper.getExtensionStack().addAll(helper.getExtensionStack());", "+            getProject().addReference(ProjectHelper.PROJECTHELPER_REFERENCE, subHelper);", "+", "+            subHelper.parse(getProject(), importedResource);", "+", "+            // push back the stack from the sub helper to the main one", "+            getProject().addReference(ProjectHelper.PROJECTHELPER_REFERENCE, helper);", "+            helper.getImportStack().clear();", "+            helper.getImportStack().addAll(subHelper.getImportStack());", "+            helper.getExtensionStack().clear();", "+            helper.getExtensionStack().addAll(subHelper.getExtensionStack());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25faa70aa283df6de2c4131bfa496b05", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/bootstrap/org/apache/ant/builder/MutantBuilder.java", "commitBeforeChange": "752f49d5b18f9743f8e4a6dbdc8065d240d9c97a", "commitAfterChange": "da4e1a3aa99899d6aecc6d14c2a7498fa51647aa", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 7, "signatureBeforeChange": "     protected void antlibs(BuildHelper helper)", "signatureAfterChange": "     protected void antlibs(BuildHelper helper)", "diff": ["+    protected void antlibs(BuildHelper helper) {", "+        helper.runDepends(this, \"antlibs\", \"common\");", "+        System.out.println(\"antlibs: \");", "+        {", "+            BuildHelper subHelper = new BuildHelper();", "+            subHelper.setProperty(\"libname\", helper.resolve(\"system\"));", "+            subHelper.setProperty(\"antlibdir\", helper.resolve(\"${dist.syslibs.dir}\"));", "+            subHelper.setParent(helper);", "+            _init(subHelper);", "+            buildlib(subHelper);", "+        }", "+        {", "+            BuildHelper subHelper = new BuildHelper();", "+            subHelper.setProperty(\"libname\", helper.resolve(\"monitor\"));", "+            subHelper.setProperty(\"antlibdir\", helper.resolve(\"${dist.syslibs.dir}\"));", "+            subHelper.setParent(helper);", "+            _init(subHelper);", "+            buildlib(subHelper);", "+        }", "-    }", "-    protected void antlibs(BuildHelper helper) {", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ea46730877a396543ba8e7196de4f75", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/modules/console/BuildConsole.java", "commitBeforeChange": "37b3d25cc8c65444ab2cbb5c0ff153dccf56c789", "commitAfterChange": "2d4bfedfb63f054542debd85410e53916fa502f3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void contextualize(AppContext context)", "signatureAfterChange": "     public void contextualize(AppContext context)", "diff": ["-        ", "+", "+        /** Anonymous class to respond to resize envents and", "+         * post <code>ConsoleNotVisibleEvent</code> or", "+         * <code>ConsoleVisibleEvent</code> events.", "+         */", "+        addComponentListener(new ComponentAdapter() {", "+            public void componentResized(ComponentEvent e) {", "+                AppContext c = BuildConsole.this.getContext();", "+                if (BuildConsole.this.getHeight() == 0) {", "+                    c.getEventBus().postEvent(new ConsoleNotVisibleEvent(c));", "+                } else {", "+                    c.getEventBus().postEvent(new ConsoleVisibleEvent(c));", "+                }", "+            }", "+            public void componentHidden(ComponentEvent e) {}", "+            public void componentMoved(ComponentEvent e) {}", "+            public void componentShown(ComponentEvent e) {}", "+        });", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ce201f6d354e4f6f94a68bd4f7a87e0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javac.java", "commitBeforeChange": "1fa24dc235453d37357a5ffb190f5a3c15a49295", "commitAfterChange": "bba4624fac50881dcc5e81de48fffe05f92e2116", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 83, "signatureBeforeChange": "      private boolean hasPackageInfo(File[] newFiles)", "signatureAfterChange": "      private void lookForPackageInfos(File srcDir, File[] newFiles)", "diff": ["+    private void lookForPackageInfos(File srcDir, File[] newFiles) {", "+        for (int i = 0; i < newFiles.length; i++) {", "+            File f = newFiles[i];", "+            if (!f.getName().equals(\"package-info.java\")) {", "+                continue;", "+            String path = FILE_UTILS.removeLeadingPath(srcDir, f).", "+                    replace(File.separatorChar, '/');", "+            String suffix = \"/package-info.java\";", "+            if (!path.endsWith(suffix)) {", "+                log(\"anomalous package-info.java path: \" + path, Project.MSG_WARN);", "+                continue;", "+            }", "+            String pkg = path.substring(0, path.length() - suffix.length());", "+            packageInfos.put(pkg, Long.valueOf(f.lastModified()));", "-    private boolean hasPackageInfo(File[] newFiles) {", "-        for (int i = 0; i < newFiles.length; ++i) {", "-            if (newFiles[i].getName().equals(PACKAGE_INFO_JAVA)) {", "-                return true;", "-        return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "607597c3c2b62783abd4520aec00fcb4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "8477db586049ffe4763ea2aeb8c8b2dd786f82a1", "commitAfterChange": "da882e14dce576c4be8d779bcefa2d43236844d2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+\t    // prepare Java 1.1 style credentials", "+\t    if (uname != null || pword != null) {", "+\t      String up = uname + \":\" + pword;", "+\t      String encoding;", "+\t      // check to see if sun's Base64 encoder is available.", "+\t      try {", "+\t\tsun.misc.BASE64Encoder encoder = ", "+\t\t  (sun.misc.BASE64Encoder) Class.forName(\"sun.misc.BASE64Encoder\").newInstance();", "+\t\tencoding = encoder.encode (up.getBytes());", "+", "+\t      }", "+\t      catch (Exception ex) { // sun's base64 encoder isn't available ", "+\t\tBase64Converter encoder = new Base64Converter();", "+\t\tencoding = encoder.encode(up.getBytes());", "+\t      }", "+\t      connection.setRequestProperty (\"Authorization\", \"Basic \" + encoding);", "+", "+\t    }", "+\t\t// test for 401 result (HTTP only)", "+                if(httpConnection.getResponseCode()==HttpURLConnection.HTTP_UNAUTHORIZED)  {", "+                    log(\"Not authorized - check \" + dest + \" for details\");", "+                    return; ", "+                }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "817f02670dc9bbb09682a5a75a573da0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Retry.java", "commitBeforeChange": "403e3ac9bf82acd669290c014e6c6d89d763520a", "commitAfterChange": "656c4b15dca26d52034f075bf077fd8c72896a1f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r     public void execute() throws BuildException", "signatureAfterChange": "\r     public void execute() throws BuildException", "diff": ["+        StringBuffer errorMessages = new StringBuffer();\r", "+                    errorMessages.append(e.getMessage());\r", "+                    errorMessages.append(getProject().getProperty(\"line.separator\"));\r", "-                    throw new BuildException(\"Task [\"+nestedTask.getTaskName()+\"] failed after [\"+retryCount+\"] attempts, giving up\");\r", "+                    errorMessages.append(e.getMessage());\r", "+                    StringBuffer exceptionMessage = new StringBuffer();\r", "+                    exceptionMessage.append(\"Task [\").append(nestedTask.getTaskName());\r", "+                    exceptionMessage.append(\"] failed after [\").append(retryCount);\r", "+                    exceptionMessage.append(\"] attempts, giving up.\");\r", "+                    exceptionMessage.append(getProject().getProperty(\"line.separator\"));\r", "+                    exceptionMessage.append(\"Error messages:\").append(getProject().getProperty(\"line.separator\"));\r", "+                    exceptionMessage.append(errorMessages);\r", "+                    throw new BuildException(exceptionMessage.toString(), getLocation());\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6b4d774a334855d84517f23299fa57b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/TraXLiaisonTest.java", "commitBeforeChange": "4dab12fb9ccbaa24cc22c9804302bc7a4373b78e", "commitAfterChange": "fe829a9d0fa679df3ae2cc4803e5236ed2ed5c7b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testXalan2Redirect() throws Exception", "signatureAfterChange": "      public void testXalan2Redirect() throws Exception", "diff": ["+        ClassLoader orig = Thread.currentThread().getContextClassLoader();", "+            // Use the JRE's Xerces, not lib/optional/xerces.jar:", "+            Thread.currentThread().setContextClassLoader(new ClassLoader(ClassLoader.getSystemClassLoader().getParent()) {", "+                public InputStream getResourceAsStream(String name) {", "+                    if (name.startsWith(\"META-INF/services/\")) {", "+                        // work around JAXP #6723276 in JDK 6", "+                        return new ByteArrayInputStream(new byte[0]);", "+                    }", "+                    return super.getResourceAsStream(name);", "+                }", "+            });", "+            // Tickle #52382:", "+            System.setSecurityManager(new SecurityManager() {public void checkPermission(Permission perm) {}});", "+            Thread.currentThread().setContextClassLoader(orig);", "+            System.setSecurityManager(null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f66339c1451bd870243ec10570b5b115", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "0c2d03d031ecacd79ea8d77cd88b8428e84a3c7c", "commitAfterChange": "44ecc125fa2df70025e742ba113dd793c0e27580", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "      private static void transferFormatters(JUnitTestRunner runner,                                            JUnitTest test)", "signatureAfterChange": "      private static void transferFormatters(JUnitTestRunner runner,                                            JUnitTest test)", "diff": ["+        runner.addFormatter(new JUnitResultFormatter() {", "+", "+            public void startTestSuite(JUnitTest suite) throws BuildException {", "+            }", "+", "+            public void endTestSuite(JUnitTest suite) throws BuildException {", "+            }", "+", "+            public void setOutput(OutputStream out) {", "+            }", "+", "+            public void setSystemOutput(String out) {", "+            }", "+", "+            public void setSystemError(String err) {", "+            }", "+", "+            public void addError(Test arg0, Throwable arg1) {", "+            }", "+", "+            public void addFailure(Test arg0, AssertionFailedError arg1) {", "+            }", "+", "+            public void endTest(Test arg0) {", "+            }", "+", "+            public void startTest(Test arg0) {", "+                System.out.println(this.getClass().getName() + \":\" + arg0);", "+                registerTestCase(JUnitVersionHelper.getTestCaseName(arg0));", "+            }", "+        });"]}]}
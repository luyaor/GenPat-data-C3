{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "65acf1d321284fef6d6ea3108ab9451a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d912cf57e75ba87f7bb2663bdd445ac2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "19397fb959cb8afa2a87b3e68eaf23994384aab4", "commitAfterChange": "21a1b3cfb48abc9e87a97e1bdab451abe49b44eb", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "     private void checkIncludePatterns()", "signatureAfterChange": "     private void checkIncludePatterns()", "diff": ["-        for (int icounter = 0; icounter < includes.length; icounter++) {", "-            if (FileUtils.isAbsolutePath(includes[icounter])) {", "+        for (int i = 0; i < includes.length; i++) {", "+            if (FileUtils.isAbsolutePath(includes[i])) {", "-                    && !SelectorUtils.matchPatternStart(includes[icounter],", "+                    && !SelectorUtils.matchPatternStart(includes[i],", "-                includes[icounter]), includes[icounter]);", "+                includes[i]), includes[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8c9986aad2b8e27f77ee8f5068c041d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/DefaultExcludesTest.java", "commitBeforeChange": "6a02f448306dee5d4d63dbb092c365469420129d", "commitAfterChange": "a98a49253bd792fec570f11f310d61dc9370f67a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void assertEquals(String message, String[] expected, String[] actual)", "signatureAfterChange": "     private void assertEquals(String message, String[] expected, String[] actual)", "diff": ["-        for (int counter=0; counter <expected.length; counter++) {", "-            assertEquals(message + \" : \" + counter + \"th element in array match\", expected[counter], actual[counter]);", "+        for (int counter=0; counter < expected.length; counter++) {", "+            boolean found = false;", "+            for (int i = 0; !found && i < actual.length; i++) {", "+                found |= expected[counter].equals(actual[i]);", "+            }", "+            assertTrue(message + \" : didn't find element \"", "+                       + expected[counter] + \" in array match\", found);"]}]}
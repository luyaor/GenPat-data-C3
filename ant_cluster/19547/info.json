{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9f0f18917caf24548016de6c27ca746e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "054a22ba5be5719cec67a849f3dc252b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/tar/TarBuffer.java", "commitBeforeChange": "3494ca7bb3adf2962b4d05abfc666b65adf18e09", "commitAfterChange": "0b93bdd7cdfe6a7a48f02cf125014e5d538d5381", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private void flushBlock()         throws IOException", "signatureAfterChange": "     private void flushBlock()         throws IOException", "diff": ["-        if( this.debug )", "+        if( m_debug )", "-            System.err.println( \"TarBuffer.flushBlock() called.\" );", "+            final String message = \"TarBuffer.flushBlock() called.\";", "+            debug( message );", "-        if( this.outStream == null )", "+        if( m_output == null )", "-            throw new IOException( \"writing to an input buffer\" );", "+            final String message = \"writing to an input buffer\";", "+            throw new IOException( message );", "-        if( this.currRecIdx > 0 )", "+        if( m_currRecIdx > 0 )", "-            this.writeBlock();", "+            writeBlock();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81277a6ad1a7b154d8aa34cb6c561996", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/tar/TarBuffer.java", "commitBeforeChange": "3494ca7bb3adf2962b4d05abfc666b65adf18e09", "commitAfterChange": "0b93bdd7cdfe6a7a48f02cf125014e5d538d5381", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private void writeBlock()         throws IOException", "signatureAfterChange": "     private void writeBlock()         throws IOException", "diff": ["-        if( this.debug )", "+        if( m_debug )", "-            System.err.println( \"WriteBlock: blkIdx = \" + this.currBlkIdx );", "+            final String message = \"WriteBlock: blkIdx = \" + m_currBlkIdx;", "+            debug( message );", "-        if( this.outStream == null )", "+        if( null == m_output )", "-            throw new IOException( \"writing to an input buffer\" );", "+            final String message = \"writing to an input buffer\";", "+            throw new IOException( message );", "-        this.outStream.write( this.blockBuffer, 0, this.blockSize );", "-        this.outStream.flush();", "+        m_output.write( m_blockBuffer, 0, m_blockSize );", "+        m_output.flush();", "-        this.currRecIdx = 0;", "-        this.currBlkIdx++;", "+        m_currRecIdx = 0;", "+        m_currBlkIdx++;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8592e90633bab32c48ef780ecef5192f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/tar/TarBuffer.java", "commitBeforeChange": "3494ca7bb3adf2962b4d05abfc666b65adf18e09", "commitAfterChange": "0b93bdd7cdfe6a7a48f02cf125014e5d538d5381", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private boolean readBlock()         throws IOException", "signatureAfterChange": "     private boolean readBlock()         throws IOException", "diff": ["-        if( this.debug )", "+        if( m_debug )", "-            System.err.println( \"ReadBlock: blkIdx = \" + this.currBlkIdx );", "+            final String message = \"ReadBlock: blkIdx = \" + m_currBlkIdx;", "+            debug( message );", "-        if( this.inStream == null )", "+        if( null == m_input )", "-            throw new IOException( \"reading from an output buffer\" );", "+            final String message = \"reading from an output buffer\";", "+            throw new IOException( message );", "-        this.currRecIdx = 0;", "+        m_currRecIdx = 0;", "-        int bytesNeeded = this.blockSize;", "+        int bytesNeeded = m_blockSize;", "-            long numBytes = this.inStream.read( this.blockBuffer, offset,", "-                                                bytesNeeded );", "+            final long numBytes = m_input.read( m_blockBuffer, offset, bytesNeeded );", "-            if( numBytes != this.blockSize )", "+            if( numBytes != m_blockSize )", "-                if( this.debug )", "+                if( m_debug )", "-                                        + numBytes + \" of \" + this.blockSize", "+                                        + numBytes + \" of \" + m_blockSize", "-        this.currBlkIdx++;", "+        m_currBlkIdx++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d55d2ea891da34566da7028be80d345", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/tar/TarBuffer.java", "commitBeforeChange": "3494ca7bb3adf2962b4d05abfc666b65adf18e09", "commitAfterChange": "0b93bdd7cdfe6a7a48f02cf125014e5d538d5381", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void skipRecord()         throws IOException", "signatureAfterChange": "     public void skipRecord()         throws IOException", "diff": ["-        if( this.debug )", "+        if( m_debug )", "-            System.err.println( \"SkipRecord: recIdx = \" + this.currRecIdx", "-                                + \" blkIdx = \" + this.currBlkIdx );", "+            final String message = \"SkipRecord: recIdx = \" + m_currRecIdx +", "+                \" blkIdx = \" + m_currBlkIdx;", "+            debug( message );", "-        if( this.inStream == null )", "+        if( null == m_input )", "-            throw new IOException( \"reading (via skip) from an output buffer\" );", "+            final String message = \"reading (via skip) from an output buffer\";", "+            throw new IOException( message );", "-        if( this.currRecIdx >= this.recsPerBlock )", "+        if( m_currRecIdx >= m_recsPerBlock )", "-            if( !this.readBlock() )", "+            if( !readBlock() )", "-        this.currRecIdx++;", "+        m_currRecIdx++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e44cf39eeead1ca6a5f42b3b361fefe3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/tar/TarOutputStream.java", "commitBeforeChange": "0b93bdd7cdfe6a7a48f02cf125014e5d538d5381", "commitAfterChange": "1447e596aa13ca3441f24a8e163f4a255c5a7e23", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void putNextEntry( TarEntry entry )         throws IOException", "signatureAfterChange": "     public void putNextEntry( final TarEntry entry )         throws IOException", "diff": ["-    public void putNextEntry( TarEntry entry )", "+    public void putNextEntry( final TarEntry entry )", "-        if( entry.getName().length() >= TarConstants.NAMELEN )", "+        if( entry.getName().length() >= TarEntry.NAMELEN )", "-            if( longFileMode == LONGFILE_GNU )", "+            if( m_longFileMode == LONGFILE_GNU )", "-                TarEntry longLinkEntry = new TarEntry( TarConstants.GNU_LONGLINK,", "-                                                       TarConstants.LF_GNUTYPE_LONGNAME );", "+                final TarEntry longLinkEntry =", "+                    new TarEntry( TarConstants.GNU_LONGLINK,", "+                                  TarConstants.LF_GNUTYPE_LONGNAME );", "-            else if( longFileMode != LONGFILE_TRUNCATE )", "+            else if( m_longFileMode != LONGFILE_TRUNCATE )", "-                throw new RuntimeException( \"file name '\" + entry.getName()", "-                                            + \"' is too long ( > \"", "-                                            + TarConstants.NAMELEN + \" bytes)\" );", "+                final String message = \"file name '\" + entry.getName() +", "+                    \"' is too long ( > \" + TarEntry.NAMELEN + \" bytes)\";", "+                throw new IOException( message );", "-        entry.writeEntryHeader( this.recordBuf );", "-        this.buffer.writeRecord( this.recordBuf );", "+        entry.writeEntryHeader( m_recordBuf );", "+        m_buffer.writeRecord( m_recordBuf );", "-        this.currBytes = 0;", "+        m_currBytes = 0;", "-            this.currSize = 0;", "+            m_currSize = 0;", "-            this.currSize = (int)entry.getSize();", "+            m_currSize = (int)entry.getSize();"]}]}
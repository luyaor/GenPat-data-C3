{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4391ed5adee186f5a951568b8c15387a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0742a899fa0b36fcd6ca089ba11632e6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "23a03fcf16119310506d2e18d585cfdffb550650", "commitAfterChange": "1844a85f5feebe940057df6b041ab2fe095cc43d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 7, "signatureBeforeChange": "          public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["+", "-        project.log(\"Building \" + archiveType + \": \" + zipFile.getAbsolutePath());", "-    ", "+        project.log(\"Building \"+ archiveType +\": \"+ zipFile.getAbsolutePath());", "+", "+        if (baseDir == null) {", "+            throw new BuildException(\"basedir attribute must be set!\");", "+        }", "+        if (!baseDir.exists()) {", "+            throw new BuildException(\"basedir does not exist!\");", "+        }", "+", "+        DirectoryScanner ds = new DirectoryScanner();", "+        ds.setBasedir(baseDir);", "+        ds.setIncludes(includes);", "+        ds.setExcludes(excludes);", "+        if (useDefaultExcludes) {", "+            ds.addDefaultExcludes();", "+        }", "+        ds.scan();", "+", "+        String[] files = ds.getIncludedFiles();", "+        String[] dirs  = ds.getIncludedDirectories();", "+", "-\t    initZipOutputStream(zOut);", "-            ", "-            if ( allItems ) {", "-                String[] lst = baseDir.list();", "-                for (int i=0;i<lst.length;i++) {", "-                    items.addElement(lst[i]);", "-                }", "+            initZipOutputStream(zOut);", "+", "+            for (int i = 0; i < dirs.length; i++) {", "+                File f = new File(baseDir,dirs[i]);", "+                String name = dirs[i].replace(File.separatorChar,'/')+\"/\";", "+                zipDir(f, zOut, name);", "-            // add items", "-            Enumeration e = items.elements();", "-            while (e.hasMoreElements()) {", "-                String s = (String)e.nextElement();", "-                // check to make sure item is not in ignore list", "-                // shouldn't be ignored here, but just want to make sure", "-                if (! ignoreList.contains(s)) {", "-                    File f = new File(baseDir, s);", "-                    if (f.isDirectory()) {", "-                        zipDir(f, zOut, s + \"/\");", "-                    } else {", "-                        zipFile(f, zOut, s);", "-                    }", "-                } else {", "-                    project.log(\"Ignoring: \" + s, Project.MSG_WARN);", "-                }", "+            for (int i = 0; i < files.length; i++) {", "+                File f = new File(baseDir,files[i]);", "+                String name = files[i].replace(File.separatorChar,'/');", "+                zipFile(f, zOut, name);", "-    ", "-            // close up            ", "+", "+            // close up"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "088d8436f852dad78e72319b6b1ef075", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Tar.java", "commitBeforeChange": "5c1e42a954c9a3212c5263e1fdb012ab48515807", "commitAfterChange": "3c6126f29bd3b99708ba5fc606c9afca2c3384a9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        if (baseDir == null) {", "-            throw new BuildException(\"basedir attribute must be set!\", ", "-                                     location);", "-        }", "-        if (!baseDir.exists()) {", "-            throw new BuildException(\"basedir does not exist!\", location);", "+        if (baseDir != null) {", "+            if (!baseDir.exists()) {", "+                throw new BuildException(\"basedir does not exist!\", location);", "+            }", "+            ", "+            // add the main fileset to the list of filesets to process.", "+            TarFileSet mainFileSet = new TarFileSet(fileset);", "+            mainFileSet.setDir(baseDir);", "+            mainFileSet.setDefaultexcludes(useDefaultExcludes);", "+            filesets.addElement(mainFileSet);", "-        DirectoryScanner ds = super.getDirectoryScanner(baseDir);", "+        // check if tr is out of date with respect to each", "+        // fileset", "+        boolean upToDate = true;", "+        for (Enumeration e = filesets.elements(); e.hasMoreElements();) {", "+            TarFileSet fs = (TarFileSet)e.nextElement();", "+            String[] files = fs.getFiles(project);", "+            ", "+            if (!archiveIsUpToDate(files)) {", "+                upToDate = false;", "+                break;", "+            }", "+        }", "-        String[] files = ds.getIncludedFiles();", "-", "-        if (archiveIsUpToDate(files)) {", "+        if (upToDate) {", "-", "-            for (int i = 0; i < files.length; i++) {", "-                File f = new File(baseDir,files[i]);", "-                String name = files[i].replace(File.separatorChar,'/');", "-                tarFile(f, tOut, name);", "+        ", "+            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {", "+                TarFileSet fs = (TarFileSet)e.nextElement();", "+                String[] files = fs.getFiles(project);", "+                for (int i = 0; i < files.length; i++) {", "+                    File f = new File(baseDir,files[i]);", "+                    String name = files[i].replace(File.separatorChar,'/');", "+                    tarFile(f, tOut, name, fs);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1609a40a57cc3ab7c376c6fe37cbf4b1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java", "commitBeforeChange": "821004a5407db28a7482cff8f928d92b7615ea36", "commitAfterChange": "d97f4f390c59827af8a3bfe380c1bf7d4a4a84a9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 13, "signatureBeforeChange": "     protected void addVendorFiles(Hashtable ejbFiles, String baseName)", "signatureAfterChange": "     protected void addVendorFiles(Hashtable ejbFiles, String baseName)", "diff": ["+        else {", "+            return;", "+        }", "-        // The the weblogic cmp deployment descriptor", "-        File weblogicCMPDD = new File(getDescriptorDir(), ddPrefix + WL_CMP_DD);", "-", "-        if (weblogicCMPDD.exists()) {", "-            ejbFiles.put(META_DIR + WL_CMP_DD,", "-                         weblogicCMPDD);", "+        if (oldCMP) {", "+            log(\"The old method for locating CMP files has been DEPRECATED.\", Project.MSG_INFO);", "+            log(\"Please adjust your weblogic descriptor and set oldCMP=\\\"false\\\" \" +", "+                \"to use the new CMP descriptor inclusion mechanism. \", Project.MSG_INFO);", "+            // The the weblogic cmp deployment descriptor", "+            File weblogicCMPDD = new File(getDescriptorDir(), ddPrefix + WL_CMP_DD);", "+                ", "+            if (weblogicCMPDD.exists()) {", "+                ejbFiles.put(META_DIR + WL_CMP_DD,", "+                             weblogicCMPDD);", "+            }", "+        }", "+        else {", "+            // now that we have the weblogic descriptor, we parse the file", "+            // to find other descriptors needed to deploy the bean.", "+            // this could be the weblogic-cmp-rdbms.xml or any other O/R", "+            // mapping tool descriptors.", "+            try", "+            {", "+                File ejbDescriptor = (File)ejbFiles.get(META_DIR + EJB_DD);", "+                SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();", "+                saxParserFactory.setValidating(true);", "+                SAXParser saxParser = saxParserFactory.newSAXParser();", "+                DescriptorHandler handler = getWebglogicDescriptorHandler(ejbDescriptor.getParentFile());", "+                saxParser.parse(new InputSource", "+                                (new FileInputStream", "+                                (weblogicDD)),", "+                                handler);", "+                                ", "+                Hashtable ht = handler.getFiles();", "+                Enumeration e = ht.keys();", "+                while(e.hasMoreElements()){", "+                    String key = (String)e.nextElement();", "+                    ejbFiles.put(key, ht.get(key));", "+                }", "+            }", "+            catch(Exception e)", "+            { ", "+                String msg = \"Exception while adding Vendor specific files: \" + e.toString();", "+                throw new BuildException(msg, e);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "291747a8372d78b230f88798b751bfe8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "51fa6c6e412765a4540fd0d597b4b1805d189376", "commitAfterChange": "e596d350ae9efa7d0aaf51d8f988be6ea3909078", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String inputEncoding, String outputEncoding,                          Project project)         throws IOException", "signatureAfterChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String inputEncoding, String outputEncoding,                          Project project)         throws IOException", "diff": ["-            if (filterSetsAvailable || filterChainsAvailable", "-                || (inputEncoding != null ", "-                    && !inputEncoding.equals(outputEncoding))", "-                || (inputEncoding == null && outputEncoding != null)) {", "+            if (filterSetsAvailable) {", "+            } else if (filterChainsAvailable", "+                       || (inputEncoding != null ", "+                           && !inputEncoding.equals(outputEncoding))", "+                       || (inputEncoding == null && outputEncoding != null)) {", "+                BufferedReader in = null;", "+                BufferedWriter out = null;", "+ ", "+                 try {", "+                     if (inputEncoding == null) {", "+                         in = new BufferedReader(new FileReader(sourceFile));", "+                     } else {", "+                         in =", "+                             new BufferedReader(", "+                                 new InputStreamReader(", "+                                     new FileInputStream(sourceFile),", "+                                     inputEncoding));", "+                     }", "+ ", "+                     if (outputEncoding == null) {", "+                         out = new BufferedWriter(new FileWriter(destFile));", "+                     } else {", "+                         out =", "+                             new BufferedWriter(", "+                                 new OutputStreamWriter(", "+                                     new FileOutputStream(destFile),", "+                                     outputEncoding));", "+                     }", "+ ", "+                     if (filterChainsAvailable) {", "+                         ChainReaderHelper crh = new ChainReaderHelper();", "+                         crh.setBufferSize(8192);", "+                         crh.setPrimaryReader(in);", "+                         crh.setFilterChains(filterChains);", "+                         crh.setProject(project);", "+                         Reader rdr = crh.getAssembledReader();", "+                         in = new BufferedReader(rdr);", "+                     }", "+                     char buffer[] = new char[1024*8];", "+                     while (true) {", "+                         int nRead = in.read(buffer, 0, buffer.length);", "+                         if (nRead == -1) {", "+                             break;", "+                         }", "+                         out.write(buffer, 0, nRead);", "+                      }", "+                  } finally {", "+                      if (out != null) {", "+                         out.close();", "+                     }", "+                     if (in != null) {", "+                         in.close();", "+                     }", "+                 }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dacd6595da9b682698787282b26f6c6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ExecuteOn.java", "commitBeforeChange": "7f98652146940a5c7714f209979d74fe2092af34", "commitAfterChange": "61320f305f5ccb78963b3a9fe607f3505ec635e4", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      protected void runExec(Execute exe) throws BuildException", "diff": ["-", "-    public void execute() throws BuildException {", "-        if (command.getExecutable() == null) {", "-            throw new BuildException(\"no executable specified\", location);", "-        }", "-", "-        String[] orig = command.getCommandline();", "-        String[] cmd = new String[orig.length+1];", "-        System.arraycopy(orig, 0, cmd, 0, orig.length);", "+    protected void runExec(Execute exe) throws BuildException {", "+        try {", "-        Vector v = new Vector();", "-        for (int i=0; i<filesets.size(); i++) {", "-            FileSet fs = (FileSet) filesets.elementAt(i);", "-            DirectoryScanner ds = fs.getDirectoryScanner(project);", "-            String[] s = ds.getIncludedFiles();", "-            for (int j=0; j<s.length; j++) {", "-                v.addElement(new File(fs.getDir(), s[j]).getAbsolutePath());", "+            Vector v = new Vector();", "+            for (int i=0; i<filesets.size(); i++) {", "+                FileSet fs = (FileSet) filesets.elementAt(i);", "+                DirectoryScanner ds = fs.getDirectoryScanner(project);", "+                String[] s = ds.getIncludedFiles();", "+                for (int j=0; j<s.length; j++) {", "+                    v.addElement(new File(fs.getDir(), s[j]).getAbsolutePath());", "+                }", "-        }", "-        ", "-        String label = command.toString()+\" \";", "-        String[] environment = env.getVariables();", "-        for (int i=0; i<v.size(); i++) {", "-            try {", "-                // show the command", "-                String file = (String) v.elementAt(i);", "-                log(label+file, Project.MSG_VERBOSE);", "-                Execute exe = new Execute(createHandler(), createWatchdog());", "-                cmd[orig.length] = file;", "-                exe.setCommandline(cmd);", "-                exe.setEnvironment(environment);", "-                int err = exe.execute();", "+            String[] s = new String[v.size()];", "+            v.copyInto(s);", "+", "+            int err = -1;", "+            String myos = System.getProperty(\"os.name\");", "+", "+            // antRun.bat currently limits us to directory + executable ", "+            //                                             + 7 args", "+            if (parallel && ", "+                (myos.toLowerCase().indexOf(\"windows\") < 0 || s.length+cmdl.size() <= 8)", "+                ) {", "+                cmdl.addLine(s);", "+                exe.setCommandline(cmdl.getCommandline());", "+                err = exe.execute();", "-                        throw new BuildException(\"Exec returned: \"+err, location);", "+                        throw new BuildException(\"Exec returned: \"+err, ", "+                                                 location);", "-            } catch (IOException e) {", "-                throw new BuildException(\"Execute failed: \" + e, e, location);", "+", "+            } else {", "+                String[] cmd = new String[cmdl.size()+1];", "+                System.arraycopy(cmdl.getCommandline(), 0, cmd, 0, cmdl.size());", "+                for (int i=0; i<s.length; i++) {", "+                    cmd[cmdl.size()] = s[i];", "+                    exe.setCommandline(cmd);", "+                    err = exe.execute();", "+                    if (err != 0) {", "+                        if (failOnError) {", "+                            throw new BuildException(\"Exec returned: \"+err, ", "+                                                     location);", "+                        } else {", "+                            log(\"Result: \" + err, Project.MSG_ERR);", "+                        }", "+                    }", "+                }", "+", "+        } catch (IOException e) {", "+            throw new BuildException(\"Execute failed: \" + e, e, location);", "+        } finally {", "+            // close the output file if required", "+            logFlush();", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e17b7f309edfbd1d53da3172b8e2552", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "a28f64f5cf1b63d9342683d77d79a5cdf9e67f85", "commitAfterChange": "ff41336fc19f549bc995898f4543da6d7e9d9bf9", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": "     private String[] patchEnvironment()", "signatureAfterChange": "     private String[] patchEnvironment()", "diff": ["-        Vector osEnv = (Vector) getProcEnvironment().clone();", "+        Map/*<String, String>*/ osEnv =", "+            new LinkedHashMap(getEnvironmentVariables());", "-            // Get key including \"=\"", "-            String key = keyValue.substring(0, keyValue.indexOf('=') + 1);", "-            if (environmentCaseInSensitive) {", "-                // Nb: using default locale as key is a env name", "-                key = key.toLowerCase();", "-            }", "-            int size = osEnv.size();", "+            String key = keyValue.substring(0, keyValue.indexOf('='));", "-            for (int j = 0; j < size; j++) {", "-                String osEnvItem = (String) osEnv.elementAt(j);", "-                String convertedItem = environmentCaseInSensitive", "-                    ? osEnvItem.toLowerCase() : osEnvItem;", "-                if (convertedItem.startsWith(key)) {", "-                    osEnv.removeElementAt(j);", "-                    if (environmentCaseInSensitive) {", "+", "+            // Try without changing case first", "+            if (osEnv.remove(key) == null && environmentCaseInSensitive) {", "+                // not found, maybe perform a case insensitive search", "+", "+                // Nb: using default locale as key is a env name", "+                key = key.toLowerCase();", "+", "+                for (Iterator it = osEnv.keySet().iterator(); it.hasNext(); ) {", "+                    String osEnvItem = (String) it.next();", "+                    if (osEnvItem.toLowerCase().equals(key)) {", "-                        keyValue = osEnvItem.substring(0, key.length())", "-                            + keyValue.substring(key.length());", "+                        key = osEnvItem;", "+                        break;", "-                    break;", "+", "-            osEnv.addElement(keyValue);", "+            osEnv.put(key, keyValue.substring(key.length() + 1));", "-        return (String[]) (osEnv.toArray(new String[osEnv.size()]));", "+", "+        ArrayList l = new ArrayList();", "+        for (Iterator it = osEnv.entrySet().iterator(); it.hasNext(); ) {", "+            Map.Entry entry = (Map.Entry) it.next();", "+            l.add(entry.getKey() + \"=\" + entry.getValue());", "+        }", "+        return (String[]) (l.toArray(new String[osEnv.size()]));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fe0ac8fd4f80bf58d5191418dc304f0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/email/MimeMailer.java", "commitBeforeChange": "5eba0f2b035efcaa637d4f8c430e9ce07209fdc1", "commitAfterChange": "a4d5d0df1c8360e002472f85d9c95807a7557e20", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void send()", "signatureAfterChange": "   public void send()", "diff": ["-                    java.security.Provider p=(java.security.Provider)Class.forName( \"com.sun.net.ssl.internal.ssl.Provider\").newInstance();", "+                    Provider p", "+                        = (Provider) Class.forName(\"com.sun.net.ssl.internal.ssl.Provider\").newInstance();", "-                }", "-                catch (Exception e) {", "-                    throw new BuildException(\"could not instantiate ssl security provider, check that you have JSSE in your classpath\");", "+                } catch (Exception e) {", "+                    throw new BuildException(\"could not instantiate ssl \"", "+                        + \"security provider, check that you have JSSE in \"", "+                        + \"your classpath\");", "-                props.put( \"mail.smtp.socketFactory.class\", SSL_FACTORY);", "-                props.put( \"mail.smtp.socketFactory.fallback\", \"false\");", "+                props.put(\"mail.smtp.socketFactory.class\", SSL_FACTORY);", "+                props.put(\"mail.smtp.socketFactory.fallback\", \"false\");", "-            if (user==null && password == null) {", "+            if (user == null && password == null) {", "-            }", "-            else {", "+            } else {", "-                auth = new SimpleAuthenticator(user,password);", "-                sesh = Session.getInstance(props,auth);", "+                auth = new SimpleAuthenticator(user, password);", "+                sesh = Session.getInstance(props, auth);", "-            if(charset!=null) {", "-              // Assign/reassign message charset from MimeType", "+            if (charset != null) {", "+                // Assign/reassign message charset from MimeType", "-            }", "-            // Next: looking if charset having explict definition", "-            else {", "-              charset = message.getCharset();", "-              if(charset==null) {", "-                // Using default", "-                charset=defaultCharset;", "-                message.setCharset(charset);", "-              }", "+            } else {", "+                // Next: looking if charset having explict definition", "+                charset = message.getCharset();", "+                if (charset == null) {", "+                    // Using default", "+                    charset = DEFAULT_CHARSET;", "+                    message.setCharset(charset);", "+                }", "-            if (subject != null)", "-                msg.setSubject(subject,charset);", "+            if (subject != null) {", "+                msg.setSubject(subject, charset);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "334b32eec83c819c00850b9582906c54", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/xml/XSLTProcess.java", "commitBeforeChange": "030fd751f51bef1c60b27cc4034cf1b013551520", "commitAfterChange": "0deb15031e9e934900b3b41f0d191dabdece8f80", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 20, "signatureBeforeChange": "      protected XSLTLiaison getLiaison()         throws TaskException", "signatureAfterChange": "      private void transform( final File in, final File out )         throws Exception", "diff": ["-    protected XSLTLiaison getLiaison()", "-        // if processor wasn't specified, see if TraX is available.  If not,", "-        // default it to xslp or xalan, depending on which is in the classpath", "-        if( m_liaison == null )", "-            if( m_processor != null )", "-            {", "-                try", "-                {", "-                    resolveProcessor( m_processor );", "-                }", "-                catch( Exception e )", "-                {", "-                    throw new TaskException( \"Error\", e );", "-                }", "-            }", "-            else", "-            {", "-                try", "-                {", "-                    resolveProcessor( \"trax\" );", "-                }", "-                catch( Throwable e1 )", "-                {", "-                    try", "-                    {", "-                        resolveProcessor( \"xalan\" );", "-                    }", "-                    catch( Throwable e2 )", "-                    {", "-                        try", "-                        {", "-                            resolveProcessor( \"adaptx\" );", "-                        }", "-                        catch( Throwable e3 )", "-                        {", "-                            try", "-                            {", "-                                resolveProcessor( \"xslp\" );", "-                            }", "-                            catch( Throwable e4 )", "-                            {", "-                                e4.printStackTrace();", "-                                e3.printStackTrace();", "-                                e2.printStackTrace();", "-                                throw new TaskException( \"Error\", e1 );", "-                            }", "-                        }", "-                    }", "-                }", "-            }", "-        return m_liaison;", "+", "+    private void transform( final File in, final File out )", "+        throws Exception", "+    {", "+        FileInputStream fis = null;", "+        FileOutputStream fos = null;", "+        try", "+        {", "+            fis = new FileInputStream( in );", "+            fos = new FileOutputStream( out );", "+            final StreamSource source = new StreamSource( fis, getSystemId( in ) );", "+            final StreamResult result = new StreamResult( fos );", "+", "+            m_transformer.transform( source, result );", "+        }", "+        finally", "+        {", "+            IOUtil.shutdownStream( fis );", "+            IOUtil.shutdownStream( fos );", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a38918def621da9be92b32bbd33cd48", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/StripJavaComments.java", "commitBeforeChange": "bd0662b8fa0d69a8129ea1089518b146e77c6abd", "commitAfterChange": "a1e68fb8c70781a8a2529d2a3cdee319720a93ce", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public final int read() throws IOException", "signatureAfterChange": "     public final int read() throws IOException", "diff": ["-        int ch = in.read();", "-        if (ch == '/') {", "+        int ch = -1;", "+        if (readAheadCh != -1) {", "+            ch = readAheadCh;", "+            readAheadCh = -1;", "+        } else {", "-            if (ch == '/') {", "-                while (ch != '\\n' && ch != -1) {", "-                    ch = in.read();", "-                }", "-            } else if (ch == '*') {", "-                while (ch != -1) {", "-                    ch = in.read();", "-                    if (ch == '*') {", "+            if (ch == '\"') {", "+                inString = !inString;", "+            } else {", "+                if (!inString) {", "+                    if (ch == '/') {", "-                        while (ch == '*' && ch != -1) {", "-                            ch = in.read();", "-                        }", "-", "-                            ch = read();", "-                            break;", "+                            while (ch != '\\n' && ch != -1) {", "+                                ch = in.read();", "+                            }", "+                        } else if (ch == '*') {", "+                            while (ch != -1) {", "+                                ch = in.read();", "+                                if (ch == '*') {", "+                                    ch = in.read();", "+                                    while (ch == '*' && ch != -1) {", "+                                        ch = in.read();", "+                                    }", "+", "+                                    if (ch == '/') {", "+                                        ch = read();", "+                                        break;", "+                                    }", "+                                }", "+                            }", "+                        } else {", "+                            readAheadCh = ch;", "+                            ch = '/';", "-        }", "-", "-        if (ch == '\"') {", "-            while (ch != -1) {", "-                ch = in.read();", "-                if (ch == '\\\\') {", "-                    ch = in.read();", "-                } else if (ch == '\"') {", "-                    ch = read();", "-                    break;", "-                }", "-            }", "-        }", "-", "-        if (ch == '\\'') {", "-            ch = in.read();", "-            if (ch == '\\\\') {", "-                ch = in.read();", "-            }", "-            ch = in.read();", "-            ch = read();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "410a556b8cd7ba9bfc3ee21f79059f5e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Expand.java", "commitBeforeChange": "dc00bd536bd6a1cd2bae07cecc352c085a8a0f9d", "commitAfterChange": "80d371a3b4e1ba3f845e1b9a8f831fd6a11fafd5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        ", "+", "+        if (source == null && filesets.size() == 0) {", "+            throw new BuildException(\"src attribute and/or filesets must be specified\");", "+        }", "+", "+        if (dest == null && outFile == null) {", "+            throw new BuildException(", "+                \"Dest and/or the OutFile attribute \" +", "+                \"must be specified\");", "+        }", "+", "+        if (dest != null && dest.exists() && !dest.isDirectory()) {", "+            throw new BuildException(\"Dest must be a directory.\", location);", "+        }", "+", "+        if (verbose && outFile == null) {", "+            throw new BuildException(", "+                \"Verbose can be set only when OutFile is \" +", "+                \"specified\");", "+        }", "-        ", "-        if (source == null) {", "-            throw new BuildException(\"Source attribute must be specified\");", "-        }", "-        if (dest == null) {", "-            throw new BuildException(\"Dest attribute must be specified\");", "-        }", "-        if (source.isDirectory()) {", "-            // get all the files in the descriptor directory", "-            DirectoryScanner ds = super.getDirectoryScanner(source);", "-    ", "-            String[] files = ds.getIncludedFiles();", "-            for (int i = 0; i < files.length; ++i) {", "-                File file = new File(source, files[i]);", "-                expandFile(touch, file, dest);", "+        try {", "+            if (outFile != null) {", "+                if (outFile.isDirectory()) {", "+                    throw new BuildException(\"Outfile \" + outFile", "+                        + \" must not be a directory.\");", "+                }", "+                if (!outFile.exists()) {", "+                    File parent = new File(outFile.getParent());", "+                    if (!parent.exists()) {", "+                        if (!parent.mkdirs()) {", "+                            throw new BuildException(\"Unable to create \"", "+                                + outFile);", "+                        }", "+                    }", "+                }", "+                fw = new FileWriter(outFile);", "+                bw = new BufferedWriter(fw);", "+                pw = new PrintWriter(bw, true);", "+            }", "+        } catch (IOException ioe) {", "+            throw new BuildException(ioe.getMessage(), location);", "+        }", "+        if (source != null) {", "+            if (source.isDirectory()) {", "+                // get all the files in the descriptor directory", "+                DirectoryScanner ds = super.getDirectoryScanner(source);", "+", "+                String[] files = ds.getIncludedFiles();", "+                for (int i = 0; i < files.length; ++i) {", "+                    File file = new File(source, files[i]);", "+                    expandFile(touch, file, dest);", "+                }", "+            }", "+            else {", "+                expandFile(touch, source, dest);", "-        else {", "-            expandFile(touch, source, dest);", "+        if (filesets.size() > 0) {", "+            for (int j=0; j < filesets.size(); j++) {", "+                FileSet fs = (FileSet) filesets.elementAt(j);", "+                DirectoryScanner ds = fs.getDirectoryScanner(project);", "+                File fromDir = fs.getDir(project);", "+", "+                String[] files = ds.getIncludedFiles();", "+                for (int i = 0; i < files.length; ++i) {", "+                    File file = new File(fromDir, files[i]);", "+                    expandFile(touch, file, dest);", "+                }", "+            }", "+        }", "+        try {", "+            if (pw != null) {", "+                pw.close();", "+            }", "+            if (bw != null) {", "+                bw.close();", "+            }", "+            if (fw != null) {", "+                fw.close();", "+            }", "+        } catch (IOException ioe1) {", "+            //Oh, well!  We did our best"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "426439da1a39a951cd312d960c42d0b6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "aa43e37a025cdf54b8914b8283e57419a253ed59", "commitAfterChange": "dee95e3acc5154aee03ff5f91f9a56426ae79f3f", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 27, "signatureBeforeChange": "     protected void writeLocalFileHeader(ZipEntry ze) throws IOException", "signatureAfterChange": "     protected void writeLocalFileHeader(ZipEntry ze) throws IOException", "diff": ["-        ", "-        final ZipEncoding entryEncoding;", "-        ", "-        if (!encodable && fallbackToUTF8) {", "-            entryEncoding = ZipEncodingHelper.UTF8_ZIP_ENCODING;", "-        } else {", "-            entryEncoding = zipEncoding;", "-        }", "-        ", "-        ByteBuffer name = entryEncoding.encode(ze.getName());        ", "+        ByteBuffer name = getName(ze);", "-", "-            if (createUnicodeExtraFields == UnicodeExtraFieldPolicy.ALWAYS", "-                || !encodable) {", "-                ze.addExtraField(new UnicodePathExtraField(ze.getName(),", "-                                                           name.array(),", "-                                                           name.arrayOffset(),", "-                                                           name.limit()));", "-            }", "-", "-            String comm = ze.getComment();", "-            if (comm != null && !\"\".equals(comm)) {", "-", "-                boolean commentEncodable = this.zipEncoding.canEncode(comm);", "-", "-                if (createUnicodeExtraFields == UnicodeExtraFieldPolicy.ALWAYS", "-                    || !commentEncodable) {", "-                    ByteBuffer commentB = entryEncoding.encode(comm);", "-                    ze.addExtraField(new UnicodeCommentExtraField(comm,", "-                                                                  commentB.array(),", "-                                                                  commentB.arrayOffset(),", "-                                                                  commentB.limit())", "-                                     );", "-                }", "-            }", "+            addUnicodeExtraFields(ze, encodable, name);", "-        offsets.put(ze, ZipLong.getBytes(written));", "+        offsets.put(ze, Long.valueOf(written));", "-                                                         && fallbackToUTF8);", "+                                                         && fallbackToUTF8,", "+                                                         hasZip64Extra(ze));", "-        writeOut(toDosTime(ze.getTime()));", "+        writeOut(ZipUtil.toDosTime(ze.getTime()));", "-        localDataStart = written;", "+        entry.localDataStart = written;", "-            writeOut(LZERO);", "-            writeOut(LZERO);", "+            if (hasZip64Extra(entry.entry)) {", "+                // point to ZIP64 extended information extra field for", "+                // sizes, may get rewritten once sizes are known if", "+                // stream is seekable", "+                writeOut(ZipLong.ZIP64_MAGIC.getBytes());", "+                writeOut(ZipLong.ZIP64_MAGIC.getBytes());", "+            } else {", "+                writeOut(LZERO);", "+                writeOut(LZERO);", "+            }", "-            writeOut(ZipLong.getBytes(ze.getSize()));", "-            writeOut(ZipLong.getBytes(ze.getSize()));", "+            byte[] size = ZipLong.ZIP64_MAGIC.getBytes();", "+            if (!hasZip64Extra(ze)) {", "+                size = ZipLong.getBytes(ze.getSize());", "+            }", "+            writeOut(size);", "+            writeOut(size);", "-        dataStart = written;", "+        entry.dataStart = written;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4da6b1e62746269df01c0980ed19f8d6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/frontends/CLIMain.java", "commitBeforeChange": "8b39211862c5a0b88ce5764bbc1682a89fd02895", "commitAfterChange": "8b4b896303cebb9f6f054254131e248da36b454b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private CLOptionDescriptor[] createCLOptions()", "signatureAfterChange": "     private CLOptionDescriptor[] createCLOptions()", "diff": ["-        final CLOptionDescriptor[] options = new CLOptionDescriptor[ 13 ];", "-        options[ 0 ] =", "+        final CLOptionDescriptor[] options = {", "-                                    INFO_OPT_INCOMPAT );", "-        options[ 1 ] =", "+                                    INFO_OPT_INCOMPAT ),", "-                                    REZ.getString( \"file.opt\" ) );", "-        options[ 2 ] =", "+                                    REZ.getString( \"file.opt\" ) ),", "-                                    LOG_OPT_INCOMPAT );", "-        options[ 3 ] =", "+                                    LOG_OPT_INCOMPAT ),", "-                                    LOG_OPT_INCOMPAT );", "-        options[ 4 ] =", "+                                    LOG_OPT_INCOMPAT ),", "-                                    LOG_OPT_INCOMPAT );", "-        options[ 5 ] =", "+                                    LOG_OPT_INCOMPAT ),", "-                                    REZ.getString( \"listener.opt\" ) );", "-        options[ 6 ] =", "+                                    REZ.getString( \"listener.opt\" ),", "+                                    LISTENER_OPT_INCOMPAT ),", "+            new CLOptionDescriptor( \"noprefix\",", "+                                    CLOptionDescriptor.ARGUMENT_DISALLOWED,", "+                                    NO_PREFIX_OPT,", "+                                    REZ.getString( \"noprefix.opt\" ),", "+                                    LISTENER_OPT_INCOMPAT ),", "-                                    INFO_OPT_INCOMPAT );", "-", "-        options[ 7 ] =", "+                                    INFO_OPT_INCOMPAT ),", "-                                    REZ.getString( \"tasklib.opt\" ) );", "-        options[ 8 ] =", "+                                    REZ.getString( \"tasklib.opt\" ) ),", "-                                    REZ.getString( \"incremental.opt\" ) );", "-        options[ 9 ] =", "+                                    REZ.getString( \"incremental.opt\" ) ),", "-                                    REZ.getString( \"home.opt\" ) );", "-        options[ 10 ] =", "+                                    REZ.getString( \"home.opt\" ) ),", "-                                    new int[ 0 ] );", "-        options[ 11 ] =", "+                                    new int[ 0 ] ),", "-                                    REZ.getString( \"build.opt\" ) );", "-        options[ 12 ] =", "+                                    REZ.getString( \"build.opt\" ) ),", "-                                    REZ.getString( \"dry-run.opt\" ) );", "+                                    REZ.getString( \"dry-run.opt\" ) )", "+        };", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "514cf8eea359f212d09024b3f8e2b701", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/jdepend/JDependTask.java", "commitBeforeChange": "8d3002cf8ab1b9f87d38b0b4e5682d15ffb7002a", "commitAfterChange": "9c51b355f7e7c16c5466e43b59019cad49a1fe56", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 24, "signatureBeforeChange": "     public int executeInVM(CommandlineJava commandline) throws BuildException", "signatureAfterChange": "     public int executeInVM(CommandlineJava commandline) throws BuildException", "diff": ["-        PathTokenizer sourcesPath ", "-            = new PathTokenizer(getSourcespath().toString());", "-        while (sourcesPath.hasMoreTokens()) {", "-            File f = new File(sourcesPath.nextToken());", "-", "-            // not necessary as JDepend would fail, but why loose some time?", "-            if (!f.exists() || !f.isDirectory()) {", "-                String msg = \"\\\"\" + f.getPath() + \"\\\" does not represent a valid\" ", "-                    + \" directory. JDepend would fail.\";", "-                log(msg);", "-                throw new BuildException(msg);", "+        if (getClassespath() != null) {", "+            // This is the new, better way - use classespath instead", "+            // of sourcespath.  The code is currently the same - you", "+            // need class files in a directory to use this - jar files", "+            // coming soon....", "+            String[] classesPath = getClassespath().list();", "+            for (int i = 0; i < classesPath.length; i++) {", "+                File f = new File(classesPath[i]);", "+                // not necessary as JDepend would fail, but why loose", "+                // some time?", "+                if (!f.exists() || !f.isDirectory()) {", "+                    String msg = \"\\\"\"", "+                        + f.getPath()", "+                        + \"\\\" does not represent a valid\"", "+                        + \" directory. JDepend would fail.\";", "+                    log(msg);", "+                    throw new BuildException(msg);", "+                }", "+                try {", "+                    jdepend.addDirectory(f.getPath());", "+                } catch (IOException e) {", "+                    String msg =", "+                        \"JDepend Failed when adding a class directory: \"", "+                        + e.getMessage();", "+                    log(msg);", "+                    throw new BuildException(msg);", "+                }", "-            try {", "-                jdepend.addDirectory(f.getPath());", "-            } catch (IOException e) {", "-                String msg = \"JDepend Failed when adding a source directory: \" ", "-                    + e.getMessage();", "-                log(msg);", "-                throw new BuildException(msg);", "+", "+        } else if (getSourcespath() != null) {", "+", "+            // This is the old way and is deprecated - classespath is", "+            // the right way to do this and is above", "+            String[] sourcesPath = getSourcespath().list();", "+            for (int i = 0; i < sourcesPath.length; i++) {", "+                File f = new File(sourcesPath[i]);", "+", "+                // not necessary as JDepend would fail, but why loose", "+                // some time?", "+                if (!f.exists() || !f.isDirectory()) {", "+                    String msg = \"\\\"\"", "+                        + f.getPath()", "+                        + \"\\\" does not represent a valid\"", "+                        + \" directory. JDepend would fail.\";", "+                    log(msg);", "+                    throw new BuildException(msg);", "+                }", "+                try {", "+                    jdepend.addDirectory(f.getPath());", "+                } catch (IOException e) {", "+                    String msg =", "+                        \"JDepend Failed when adding a source directory: \"", "+                        + e.getMessage();", "+                    log(msg);", "+                    throw new BuildException(msg);", "+                }", "+", "+        // This bit turns <exclude> child tags into patters to ignore", "+        String[] patterns = defaultPatterns.getExcludePatterns(getProject());", "+        if (patterns != null && patterns.length > 0) {", "+            Vector v = new Vector();", "+            for (int i = 0; i < patterns.length; i++) {", "+                v.addElement(patterns[i]);", "+            }", "+            jdepend.setFilter(new jdepend.framework.PackageFilter(v));", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51d43433083d8edc21aff7b8a40c036b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Expand.java", "commitBeforeChange": "e22d7c50937ee1d155f91bfd635673bd41017e76", "commitAfterChange": "95fa304e14c4cc49d84e089ea13107a35b68f8d5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        if (dest == null && outFile == null) {", "+        if (dest == null) {", "-                \"Dest and/or the OutFile attribute \" +", "-                \"must be specified\");", "+                \"Dest attribute must be specified\");", "-        if (dest != null && dest.exists() && !dest.isDirectory()) {", "+        if (dest.exists() && !dest.isDirectory()) {", "-        }", "-", "-        if (verbose && outFile == null) {", "-            throw new BuildException(", "-                \"Verbose can be set only when OutFile is \" +", "-                \"specified\");", "-        try {", "-            if (outFile != null) {", "-                if (outFile.isDirectory()) {", "-                    throw new BuildException(\"Outfile \" + outFile", "-                        + \" must not be a directory.\");", "-                }", "-                if (!outFile.exists()) {", "-                    File parent = new File(outFile.getParent());", "-                    if (!parent.exists()) {", "-                        if (!parent.mkdirs()) {", "-                            throw new BuildException(\"Unable to create \"", "-                                + outFile);", "-                        }", "-                    }", "-                }", "-                fw = new FileWriter(outFile);", "-                bw = new BufferedWriter(fw);", "-                pw = new PrintWriter(bw, true);", "-            }", "-        } catch (IOException ioe) {", "-            throw new BuildException(ioe.getMessage(), location);", "-        }", "-                // get all the files in the descriptor directory", "-                DirectoryScanner ds = super.getDirectoryScanner(source);", "-", "-                String[] files = ds.getIncludedFiles();", "-                for (int i = 0; i < files.length; ++i) {", "-                    File file = new File(source, files[i]);", "-                    expandFile(fileUtils, file, dest);", "-                }", "-            }", "-            else {", "+                throw new BuildException(\"Src must not be a directory.\" +", "+                    \" Use nested filesets instead.\", location);", "+            } else {", "-        if (pw != null) {", "-            pw.close();", "-        }", "-        if (bw != null) {", "-            try {", "-                bw.close();", "-            } catch (IOException ioe1) {}", "-        }", "-        if (fw != null) {", "-            try {", "-                fw.close();", "-            } catch (IOException ioe1) {", "-                //Oh, well!  We did our best", "-            }", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54623caa096668fda69f94846c38f059", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/BorlandGenerateClient.java", "commitBeforeChange": "de5c81da9e9750acda2fa942394aef201e6b4b7c", "commitAfterChange": "fc42e57c2cf638019efdfadb5592b3ba4c4c21da", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-    public void execute() throws BuildException ", "-    {", "-        try", "-        {", "-            if ( ejbjarfile == null ||", "-                 ejbjarfile.isDirectory()) ", "-            {", "-                throw new BuildException(\"invalid ejb jar file.\");", "+    public void execute() throws BuildException {", "+        if ( ejbjarfile == null ||", "+             ejbjarfile.isDirectory()) {", "+            throw new BuildException(\"invalid ejb jar file.\");", "+        } // end of if ()", "+", "+        if ( clientjarfile == null ||", "+             clientjarfile.isDirectory()) {", "+            log(\"invalid or missing client jar file.\",Project.MSG_VERBOSE);", "+            String ejbjarname = ejbjarfile.getAbsolutePath();", "+            //clientname = ejbjarfile+client.jar", "+            String clientname = ejbjarname.substring(0,ejbjarname.lastIndexOf(\".\"));", "+            clientname = clientname + \"client.jar\";", "+            clientjarfile = new File(clientname);", "+", "+        } // end of if ()", "+", "+        if ( mode == null ) {", "+            log(\"mode is null default mode  is java\");", "+            setMode(JAVA_MODE);", "+        } // end of if ()", "+", "+        log(\"client jar file is \" + clientjarfile);", "+", "+        if ( mode.equalsIgnoreCase(FORK_MODE)) {", "+            executeFork();", "+        } // end of if ()", "+        else {            ", "+            executeJava();", "+        } // end of else                       ", "+    }", "-            if ( clientjarfile == null ||", "-                 clientjarfile.isDirectory()) ", "-            {", "-                log(\"invalid or missing client jar file.\",Project.MSG_VERBOSE);", "-                String ejbjarname = ejbjarfile.getAbsolutePath();", "-                //clientname = ejbjarfile+client.jar", "-                String clientname = ejbjarname.substring(0,ejbjarname.lastIndexOf(\".\"));", "-                clientname = clientname + \"client.jar\";", "-                clientjarfile = new File(clientname);", "-            } // end of if ()", "-            log(\"client jar file is \" + clientjarfile);", "-            if ( debug ) ", "-            {", "-        catch (Exception e) ", "-        {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e01dfff6aa793e54d1474a8f2d4398d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "cc432705f28eb85592b6fd077bf95d7c522e3a01", "commitAfterChange": "1c03d4738077efd8b9b09670c26b25430c83af1f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "          protected void scandir(String dir, String vpath, boolean fast)", "signatureAfterChange": "          protected void scandir(String dir, String vpath, boolean fast)", "diff": ["-                    return;    // no files in directory.", "+                    ftp.changeToParentDirectory();", "+                    return;", "-                    String name = vpath + file.getName();", "-                    if (file.isDirectory()) {", "-                        if (isIncluded(name)) {", "-                            if (!isExcluded(name)) {", "-                                dirsIncluded.addElement(name);", "-                                if (fast) {", "-                                    scandir(name, name + File.separator, fast);", "-                                }", "-                            } else {", "-                                dirsExcluded.addElement(name);", "-                            }", "-                        } else {", "-                            dirsNotIncluded.addElement(name);", "-                            if (fast && couldHoldIncluded(name)) {", "-                                scandir(name, name + File.separator, fast);", "-                            }", "-                        }", "-                        if (!fast) {", "-                            scandir(name, name + File.separator, fast);", "-                        }", "-                    } else {", "-                        if (file.isFile()) {", "+                    if (!file.getName().equals(\".\") && !file.getName().equals(\"..\")) {", "+                        if (file.isDirectory()) {", "+                            String name = file.getName();", "-                                    filesIncluded.addElement(name);", "+                                    dirsIncluded.addElement(name);", "+                                    if (fast) {", "+                                        scandir(name, vpath + name + File.separator, fast);", "+                                    }", "-                                    filesExcluded.addElement(name);", "+                                    dirsExcluded.addElement(name);", "-                                filesNotIncluded.addElement(name);", "+                                dirsNotIncluded.addElement(name);", "+                                if (fast && couldHoldIncluded(name)) {", "+                                    scandir(name, vpath + name + File.separator, fast);", "+                                }", "+                            }", "+                            if (!fast) {", "+                                scandir(name, vpath + name + File.separator, fast);", "+                            }", "+                        } else {", "+                            if (file.isFile()) {", "+                                String name = vpath + file.getName();", "+                                if (isIncluded(name)) {", "+                                    if (!isExcluded(name)) {", "+                                        filesIncluded.addElement(name);", "+                                    } else {", "+                                        filesExcluded.addElement(name);", "+                                    }", "+                                } else {", "+                                    filesNotIncluded.addElement(name);", "+                                }", "+                ftp.changeToParentDirectory();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ffdb1413ff8916880e17c56b42107d0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Ant.java", "commitBeforeChange": "bb05312e66a2403d2405988dbaf0830cde65df7c", "commitAfterChange": "da5f3bfd256e383926c6ece58dba15a7d4bd5761", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private void addReferences() throws BuildException", "signatureAfterChange": "     private void addReferences() throws BuildException", "diff": ["-        Hashtable thisReferences", "-            = (Hashtable) getProject().getReferences().clone();", "-        Hashtable newReferences = newProject.getReferences();", "-        Enumeration e;", "-        if (references.size() > 0) {", "-            for (e = references.elements(); e.hasMoreElements();) {", "-                Reference ref = (Reference) e.nextElement();", "-                String refid = ref.getRefId();", "-                if (refid == null) {", "-                    throw new BuildException(\"the refid attribute is required\"", "-                                             + \" for reference elements\");", "-                }", "-                if (!thisReferences.containsKey(refid)) {", "-                    log(\"Parent project doesn't contain any reference '\"", "-                        + refid + \"'\",", "-                        Project.MSG_WARN);", "-                    continue;", "-                }", "-", "-                thisReferences.remove(refid);", "-                String toRefid = ref.getToRefid();", "-                if (toRefid == null) {", "-                    toRefid = refid;", "-                }", "-                copyReference(refid, toRefid);", "+        @SuppressWarnings(\"unchecked\")", "+        Hashtable<String, Object> thisReferences", "+            = (Hashtable<String, Object>) getProject().getReferences().clone();", "+        for (Reference ref : references) {", "+            String refid = ref.getRefId();", "+            if (refid == null) {", "+                throw new BuildException(\"the refid attribute is required\"", "+                                         + \" for reference elements\");", "+            if (!thisReferences.containsKey(refid)) {", "+                log(\"Parent project doesn't contain any reference '\"", "+                    + refid + \"'\",", "+                    Project.MSG_WARN);", "+                continue;", "+            }", "+", "+            thisReferences.remove(refid);", "+            String toRefid = ref.getToRefid();", "+            if (toRefid == null) {", "+                toRefid = refid;", "+            }", "+            copyReference(refid, toRefid);", "-            for (e = thisReferences.keys(); e.hasMoreElements();) {", "-                String key = (String) e.nextElement();", "+            Hashtable<String, Object> newReferences = newProject.getReferences();", "+            for (String key : thisReferences.keySet()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7168b82789e8568746bd9e4cae9206a0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/email/EmailAddress.java", "commitBeforeChange": "7b4290a6232f165327ddf4832c06474c8ef6109e", "commitAfterChange": "f1a4a514784709dadf94d8b4f38ab2f52f1b1e1e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public EmailAddress(String address)", "signatureAfterChange": "     public EmailAddress(String email)", "diff": ["-    public EmailAddress(String address) {", "-        this.address = address;", "+    // Algorithm based on the one found in Ant's MailMessage.java", "+    public EmailAddress(String email) {", "+        final int minLen = 9;", "+        int len = email.length();", "+", "+        // shortcut for \"<address>\"", "+        if (len > minLen) {", "+            if ((email.charAt(0) == '<' || email.charAt(1) == '<')", "+            && (email.charAt(len - 1) == '>' || email.charAt(len - 2) == '>')) {", "+                this.address = trim(email, true);", "+                return;", "+            }", "+        }", "+", "+        int paramDepth = 0;", "+        int start = 0;", "+        int end = 0;", "+        int nStart = 0;", "+        int nEnd = 0;", "+", "+        for (int i = 0; i < len; i++) {", "+            char c = email.charAt(i);", "+            if (c == '(') {", "+                paramDepth++;", "+                if (start == 0) {", "+                    end = i;  // support \"address (name)\"", "+                    nStart = i + 1;", "+                }", "+            } else if (c == ')') {", "+                paramDepth--;", "+                if (end == 0) {", "+                    start = i + 1;  // support \"(name) address\"", "+                    nEnd = i;", "+                }", "+            } else if (paramDepth == 0 && c == '<') {", "+                if (start == 0) {", "+                    nEnd = i;", "+                }", "+                start = i + 1;", "+            } else if (paramDepth == 0 && c == '>') {", "+                end = i;", "+                if (end != len - 1) {", "+                    nStart = i + 1;", "+                }", "+            }", "+        }", "+", "+        // DEBUG: System.out.println( email );", "+        if (end == 0) {", "+            end = len;", "+        }", "+        // DEBUG: System.out.println( \"address: \" + start + \" \" + end );", "+        if (nEnd == 0) {", "+            nEnd = len;", "+        }", "+        // DEBUG: System.out.println( \"name: \" + nStart + \" \" + nEnd );", "+", "+        this.address = trim(email.substring(start, end), true);", "+        this.name = trim(email.substring(nStart, nEnd), false);", "+", "+        // if the two substrings are longer than the original, then name", "+        // contains address - so reset the name to null", "+        if (this.name.length() + this.address.length() > len) {", "+            this.name = null;", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a2ff3987f2c3df672f39e62a3102883", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "8b162d567dc13b9ae576422744854684a6c3ceb1", "commitAfterChange": "6c7f485943c930bf2de75288e47c4bf27c63b50a", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 27, "signatureBeforeChange": "     protected void slowScan()", "signatureAfterChange": "     protected void slowScan()", "diff": ["-        if (haveSlowResults) {", "-            return;", "+        synchronized (slowScanLock) {", "+            if (haveSlowResults) {", "+                return;", "+            }", "+            if (slowScanning) {", "+                while (slowScanning) {", "+                    try {", "+                        slowScanLock.wait();", "+                    } catch (InterruptedException e) {", "+                    }", "+                }", "+                return;", "+            }", "+            slowScanning = true;", "+        try {", "+            synchronized (this) {", "-        String[] excl = new String[dirsExcluded.size()];", "-        dirsExcluded.copyInto(excl);", "-", "-        String[] notIncl = new String[dirsNotIncluded.size()];", "-        dirsNotIncluded.copyInto(notIncl);", "-", "-        for (int i = 0; i < excl.length; i++) {", "-            if (!couldHoldIncluded(excl[i])) {", "-                scandir(new File(basedir, excl[i]),", "-                        excl[i] + File.separator, false);", "+                String[] excl = new String[dirsExcluded.size()];", "+                dirsExcluded.copyInto(excl);", "+        ", "+                String[] notIncl = new String[dirsNotIncluded.size()];", "+                dirsNotIncluded.copyInto(notIncl);", "+        ", "+                for (int i = 0; i < excl.length; i++) {", "+                    if (!couldHoldIncluded(excl[i])) {", "+                        scandir(new File(basedir, excl[i]),", "+                                excl[i] + File.separator, false);", "+                    }", "+                }", "+                for (int i = 0; i < notIncl.length; i++) {", "+                    if (!couldHoldIncluded(notIncl[i])) {", "+                        scandir(new File(basedir, notIncl[i]),", "+                                notIncl[i] + File.separator, false);", "+                    }", "+                }", "+            }", "+        } finally {", "+            synchronized (slowScanLock) {", "+                haveSlowResults = true;", "+                slowScanning = false;", "+                slowScanLock.notifyAll();", "-", "-        for (int i = 0; i < notIncl.length; i++) {", "-            if (!couldHoldIncluded(notIncl[i])) {", "-                scandir(new File(basedir, notIncl[i]),", "-                        notIncl[i] + File.separator, false);", "-            }", "-        }", "-", "-        haveSlowResults  = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81cc7405639923635ab1b8f2f66ebf7b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/command/SaveAsCmd.java", "commitBeforeChange": "ffa6e24ba429847c04da9162971b6203151a7ce1", "commitAfterChange": "1056b715f84a4c3b17b7fcdecbaef6eaeb566ea7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void run()", "signatureAfterChange": "     public void run()", "diff": ["-        ProjectProxy project = getContext().getProject();", "-        if(project != null) {", "-            if(_file == null) {", "-                // XXX code here to select a file to save to.", "+        if(_project == null) {", "+            _project = getContext().getSelectionManager().getSelectedProject();", "+        }", "+", "+        if(_project != null) {", "+            // If no location is specified, then this truly is a SaveAs ", "+            // command. Provide the user the UI to select the output.", "+            if(_location == null) {", "-                    _file = chooser.getSelectedFile();", "-                    if(_file.exists()) {", "+                    File file = chooser.getSelectedFile();", "+                    if(file.exists()) {", "-                                       new Object[] {_file.toString()});", "+                                       new Object[] { file.toString()});", "-                        if(val != JOptionPane.YES_OPTION) {", "-                            _file = null;", "+                        if(val == JOptionPane.YES_OPTION) {", "+                            try {", "+                                _location = new URL(", "+                                    \"file\", null, file.getAbsolutePath());", "+                            }", "+                            catch(MalformedURLException ex) {", "+                                // Shouldn't happen. Save will just not", "+                                // happen.", "+                                ex.printStackTrace();", "+                            }", "-            if(_file != null) {", "-                project.setFile(_file);", "-                FileWriter out = null;", "+            // If a location is now available, do the save operation.", "+            if(_location != null) {", "-                    out = new FileWriter(_file);", "-                    project.write(out);", "+                    getContext().getProjectManager().saveAs(", "+                        _project, _location);", "-                        new Object[] { _file.toString() });", "+                        new Object[] { _location.toString() });", "-                }", "-                finally {", "-                    if (out != null) {", "-                        try {", "-                            out.flush();", "-                            out.close();", "-                        }", "-                        catch(IOException ex) {", "-                            // Intentionally ignored.", "-                        }", "-                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86f695f9696146edf1b7df61b2cba4de", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/zip/UTF8ZipFilesTest.java", "commitBeforeChange": "cbd20a77eba224b21654251583971e054729f006", "commitAfterChange": "752d64fa43db2172327771ba4d36bee3f2d3b49a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 10, "signatureBeforeChange": "      private static void createTestFile(File file, String encoding)         throws UnsupportedEncodingException, IOException", "signatureAfterChange": "      private static void createTestFile(File file, String encoding,                                        boolean withEFS,                                        boolean withExplicitUnicodeExtra)         throws UnsupportedEncodingException, IOException", "diff": ["-    private static void createTestFile(File file, String encoding)", "+    private static void createTestFile(File file, String encoding,", "+                                       boolean withEFS,", "+                                       boolean withExplicitUnicodeExtra)", "+", "+        ZipEncoding zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);", "+            zos.setUseLanguageEncodingFlag(withEFS);", "+            zos.setCreateUnicodeExtraFields(!withExplicitUnicodeExtra);", "-            if (!ZipEncodingHelper.canEncodeName(ze.getName(),", "-                                                 zos.getEncoding())) {", "+            if (withExplicitUnicodeExtra", "+                && !zipEncoding.canEncode(ze.getName())) {", "+", "+                ByteBuffer en = zipEncoding.encode(ze.getName());", "+", "-                                                           zos.getEncoding()));", "+                                                           en.array(),", "+                                                           en.arrayOffset(),", "+                                                           en.limit()));", "-            if (!ZipEncodingHelper.canEncodeName(ze.getName(),", "-                                                 zos.getEncoding())) {", "+            if (withExplicitUnicodeExtra", "+                && !zipEncoding.canEncode(ze.getName())) {", "+", "+                ByteBuffer en = zipEncoding.encode(ze.getName());", "+", "-                                                           zos.getEncoding()));", "+                                                           en.array(),", "+                                                           en.arrayOffset(),", "+                                                           en.limit()));", "-            if (!ZipEncodingHelper.canEncodeName(ze.getName(),", "-                                                 zos.getEncoding())) {", "+            if (withExplicitUnicodeExtra", "+                && !zipEncoding.canEncode(ze.getName())) {", "+", "+                ByteBuffer en = zipEncoding.encode(ze.getName());", "+", "-                                                           zos.getEncoding()));", "+                                                           en.array(),", "+                                                           en.arrayOffset(),", "+                                                           en.limit()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88250c268467988a667b810fc207f927", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "1764b5fda8fe5b4166269d73a00f975b4c7fb75d", "commitAfterChange": "1e599c6651b3baafbf807462fe32a975b416f1d1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void setAttribute(Project p, Object element, String attributeName,                              String value) throws BuildException", "signatureAfterChange": "     public void setAttribute(Project p, Object element, String attributeName,             Object value) throws BuildException", "diff": ["+     */", "+    public void setAttribute(Project p, Object element, String attributeName,", "+            Object value) throws BuildException {", "+        AttributeSetter as = (AttributeSetter) attributeSetters.get(", "+                attributeName.toLowerCase(Locale.US));", "+        if (as == null && value != null) {", "+            if (element instanceof DynamicAttributeNS) {", "+                DynamicAttributeNS dc = (DynamicAttributeNS) element;", "+                String uriPlusPrefix = ProjectHelper.extractUriFromComponentName(attributeName);", "+                String uri = ProjectHelper.extractUriFromComponentName(uriPlusPrefix);", "+                String localName = ProjectHelper.extractNameFromComponentName(attributeName);", "+                String qName = \"\".equals(uri) ? localName : uri + \":\" + localName;", "+                dc.setDynamicAttribute(uri, localName, qName, value.toString());", "+                return;", "+            }", "+            if (element instanceof DynamicAttribute) {", "+                DynamicAttribute dc = (DynamicAttribute) element;", "+                dc.setDynamicAttribute(attributeName.toLowerCase(Locale.US), value.toString());", "+                return;", "+            }", "+            if (attributeName.indexOf(':') >= 0) {", "+                return; // Ignore attribute from unknown uri's", "+            }", "+            String msg = getElementName(p, element)", "+                    + \" doesn't support the \\\"\" + attributeName + \"\\\" attribute.\";", "+            throw new UnsupportedAttributeException(msg, attributeName);", "+        }", "+        try {", "+            as.setObject(p, element, value);", "+        } catch (IllegalAccessException ie) {", "+            // impossible as getMethods should only return public methods", "+            throw new BuildException(ie);", "+        } catch (InvocationTargetException ite) {", "+            throw extractBuildException(ite);", "+        }", "+    }", "-        AttributeSetter as = (AttributeSetter) attributeSetters.get(", "-                attributeName.toLowerCase(Locale.US));", "-        if (as == null) {", "-            if (element instanceof DynamicAttributeNS) {", "-                DynamicAttributeNS dc = (DynamicAttributeNS) element;", "-                String uriPlusPrefix = ProjectHelper.extractUriFromComponentName(attributeName);", "-                String uri = ProjectHelper.extractUriFromComponentName(uriPlusPrefix);", "-                String localName = ProjectHelper.extractNameFromComponentName(attributeName);", "-                String qName = \"\".equals(uri) ? localName : uri + \":\" + localName;", "-                dc.setDynamicAttribute(uri, localName, qName, value);", "-                return;", "-            }", "-            if (element instanceof DynamicAttribute) {", "-                DynamicAttribute dc = (DynamicAttribute) element;", "-                dc.setDynamicAttribute(attributeName.toLowerCase(Locale.US), value);", "-                return;", "-            }", "-            if (attributeName.indexOf(':') != -1) {", "-                return; // Ignore attribute from unknown uri's", "-            }", "-            String msg = getElementName(p, element)", "-                    + \" doesn't support the \\\"\" + attributeName + \"\\\" attribute.\";", "-            throw new UnsupportedAttributeException(msg, attributeName);", "-        }", "-        try {", "-            as.set(p, element, value);", "-        } catch (IllegalAccessException ie) {", "-            // impossible as getMethods should only return public methods", "-            throw new BuildException(ie);", "-        } catch (InvocationTargetException ite) {", "-            throw extractBuildException(ite);", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a2856542a6f80ca61edb177fe40332d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "3f78457877d6713f35dc7b5d2838f4818f4f16dc", "commitAfterChange": "9a7f8d24f541c554cedaf2d7c947cdb2828b6609", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "         protected void scandir(String dir, String vpath, boolean fast)", "signatureAfterChange": "         protected void scandir(String dir, String vpath, boolean fast)", "diff": ["+            // avoid double scanning of directories, can only happen in fast mode", "+            if (fast && hasBeenScanned(vpath)) {", "+                return;", "+            }", "-", "-                FTPFile[] newfiles = ftp.listFiles();", "+                String completePath = null;", "+                if (!vpath.equals(\"\")) {", "+                    completePath = rootPath + remoteFileSep", "+                        + vpath.replace(File.separatorChar, remoteFileSep.charAt(0));", "+                } else {", "+                    completePath = rootPath;", "+                }", "+                FTPFile[] newfiles = listFiles(completePath, false);", "-                                if (!isExcluded(name)) {", "-                                    if (fast) {", "-                                        if (file.isSymbolicLink()) {", "-                                            scandir(file.getLink(),", "-                                                name + File.separator, fast);", "-                                        } else {", "-                                            scandir(file.getName(),", "-                                                name + File.separator, fast);", "-                                        }", "-                                    }", "-                                    dirsIncluded.addElement(name);", "-                                } else {", "-                                    dirsExcluded.addElement(name);", "-                                    if (fast && couldHoldIncluded(name)) {", "-                                        scandir(file.getName(),", "-                                                name + File.separator, fast);", "-                                    }", "-                                }", "+                                accountForIncludedDir(name,", "+                                    new AntFTPFile(ftp, file, completePath) , fast);", "-                                if (isIncluded(name)) {", "-                                    if (!isExcluded(name)) {", "-                                        filesIncluded.addElement(name);", "-                                    } else {", "-                                        filesExcluded.addElement(name);", "-                                    }", "-                                } else {", "-                                    filesNotIncluded.addElement(name);", "-                                }", "+                                accountForIncludedFile(name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9546909820c1c4e3e8baa409ea1daca2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/metamata/MParse.java", "commitBeforeChange": "b5ad58c4d736b7f0a97aaa78b258dcceb9c21c89", "commitAfterChange": "7435b27b914764c3845b4821363ffeb4ddfe89cd", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 11, "signatureBeforeChange": "       public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-", "+    /** execute the command line */", "-", "-        if (target == null || !target.isFile()) {", "-            throw new BuildException(\"Invalid target: \" + target);", "+        try {", "+            setUp();", "+            ExecuteStreamHandler handler = createStreamHandler();", "+            _execute(handler);", "+        } finally {", "+            cleanUp();", "-        final File javaFile = new File(target.toString().substring(0,", "-                                                                   target.toString().indexOf(\".jj\")) + \".java\");", "+    }", "-        cmdl.createArgument().setValue(target.getAbsolutePath());", "-", "-        if (metahome == null || !metahome.isDirectory()) {", "-            throw new BuildException(\"Metamatahome not valid.\");", "-        }", "-        if (metaworkingdir == null || !metaworkingdir.isDirectory()) {", "-            throw new BuildException(\"Workingdir not set.\");", "-        }", "-        if (userclasspath == null) {", "-            throw new BuildException(\"Userclasspath not set.\");", "-        }", "-", "-        final Path classpath = cmdl.createClasspath(project);", "-        classpath.createPathElement().setLocation(new File(metahome.getAbsolutePath() + \"/lib/metamatadebug.jar\"));", "-        classpath.createPathElement().setLocation(new File(metahome.getAbsolutePath() + \"/lib/metamata.jar\"));", "-        classpath.createPathElement().setLocation(new File(metahome.getAbsolutePath() + \"/lib/JavaCC.zip\"));", "-", "-        final Commandline.Argument arg = cmdl.createVmArgument();", "-        arg.setValue(\"-mx140M\");", "-        arg.setValue(\"-Dmwp=\" + metaworkingdir.getAbsolutePath());", "-        arg.setValue(\"-Dmetamata.home=\" + metahome.getAbsolutePath());", "-        arg.setValue(\"-Dmetamata.java=java\");", "-        arg.setValue(\"-Dmetamata.java.options=-mx140M\");", "-        arg.setValue(\"-Dmetamata.java.options.classpath=-classpath\");", "-        arg.setValue(\"-Dmetamata.java.compiler=javac\");", "-        arg.setValue(\"-Dmetamata.java.compiler.options.0=-J-mx64M\");", "-        arg.setValue(\"-Dmetamata.java.compiler.options.classpath=-classpath\");", "-        arg.setValue(\"-Dmetamata.language=en\");", "-        arg.setValue(\"-Dmetamata.country=US\");", "-        arg.setValue(\"-Dmetamata.classpath=\" + userclasspath);", "-", "-        final Execute process = new Execute(new LogStreamHandler(this,", "-                                                                 Project.MSG_INFO,", "-                                                                 Project.MSG_INFO), null);", "-", "-            try {", "-                if (process.execute() != 0) {", "-                    throw new BuildException(\"MParse failed.\");", "-                }", "-            } finally {", "-                if (cleanupHack) {", "-                    final File oo393 = new File(javaFile.getParent(),", "-                                                \"OO393.class\");", "-                    if (oo393.exists()) {", "-                        project.log(\"Removing stale file: \" + oo393.getName());", "-                        oo393.delete();", "-                    }", "-                    final File sunjj = new File(javaFile.getParent(),", "-                                                \"__jj\" + javaFile.getName().substring(0,", "-                                                                                      javaFile.getName().indexOf(\".java\")) + \".sunjj\");", "-                    if (sunjj.exists()) {", "-                        project.log(\"Removing stale file: \" + sunjj.getName());", "-                        sunjj.delete();", "-                    }", "-                }", "-        catch (IOException e) {", "-            throw new BuildException(\"Failed to launch MParse: \" + e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96745893c4fb186b6ddb51ac0d9098b4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Checksum.java", "commitBeforeChange": "e562f879e82fea2c7960533aaa097c769429968c", "commitAfterChange": "4db83aaa5baa9b47810796035a0e9cafeab911d7", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private boolean validateAndExecute() throws BuildException", "signatureAfterChange": "     private boolean validateAndExecute() throws BuildException", "diff": ["-        if (file == null && filesets.size() == 0) {", "+        if (file == null && (resources == null || resources.size() == 0)) {", "-                                     \"Specify at least one source - a file or a fileset.\");", "+                \"Specify at least one source - a file or a resource collection.\");", "-", "+        if (!(resources == null || resources.isFilesystemOnly())) {", "+            throw new BuildException(\"Can only calculate checksums for file-based resources.\");", "+        }", "-            throw new BuildException(", "-                                     \"Checksum cannot be generated for directories\");", "+            throw new BuildException(\"Checksum cannot be generated for directories\");", "-", "-            throw new BuildException(", "-                                     \"File and Totalproperty cannot co-exist.\");", "+            throw new BuildException(\"File and Totalproperty cannot co-exist.\");", "-", "-            throw new BuildException(", "-                                     \"Property and FileExt cannot co-exist.\");", "+            throw new BuildException(\"Property and FileExt cannot co-exist.\");", "-", "-", "+            int ct = 0;", "+            if (resources != null) {", "+                ct += resources.size();", "+            }", "-                if (filesets.size() > 0) {", "-                    throw new BuildException(\"Multiple files cannot be used \"", "-                                             + \"when Property is specified\");", "-                }", "-            } else {", "-                if (filesets.size() > 1", "-                    || ((FileSet) filesets.get(0)).size() > 1) {", "-                    throw new BuildException(\"Multiple files cannot be used \"", "-                                             + \"when Property is specified\");", "-                }", "+                ct++;", "+            }", "+            if (ct > 1) {", "+                throw new BuildException(", "+                    \"Multiple files cannot be used when Property is specified\");", "-", "-", "-            throw new BuildException(", "-                                     \"VerifyProperty and ForceOverwrite cannot co-exist.\");", "+            throw new BuildException(\"VerifyProperty and ForceOverwrite cannot co-exist.\");", "-", "-            throw new BuildException(\"ForceOverwrite cannot be used when \"", "-                                     + \"conditions are being used.\");", "+            throw new BuildException(", "+                \"ForceOverwrite cannot be used when conditions are being used.\");", "-", "-", "-            throw new BuildException(\"Unable to create Message Digest\",", "-                                     getLocation());", "+            throw new BuildException(\"Unable to create Message Digest\", getLocation());", "-", "-            throw new BuildException(", "-                                     \"File extension when specified must not be an empty string\");", "+            throw new BuildException(\"File extension when specified must not be an empty string\");", "-", "-            int sizeofFileSet = filesets.size();", "-            for (int i = 0; i < sizeofFileSet; i++) {", "-                FileSet fs = (FileSet) filesets.elementAt(i);", "-                DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "-                String[] srcFiles = ds.getIncludedFiles();", "-                for (int j = 0; j < srcFiles.length; j++) {", "-                    File src = new File(fs.getDir(getProject()), srcFiles[j]);", "+            if (resources != null) {", "+                for (Iterator i = resources.iterator(); i.hasNext();) {", "+                    FileResource fr = (FileResource) i.next();", "+                    File src = fr.getFile();", "-                        String relativePath = srcFiles[j].replace(File.separatorChar, '/');", "-                        relativeFilePaths.put(src, relativePath);", "+                        relativeFilePaths.put(src, fr.getName().replace(File.separatorChar, '/'));", "-", "-            addToIncludeFileMap(file);", "-", "+            if (file != null) {", "+                addToIncludeFileMap(file);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5a1f121989fe5441808705d4621d5dc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/compilers/CompilerAdapterFactory.java", "commitBeforeChange": "028ba47c8246f510012ef061d879d05240b90c71", "commitAfterChange": "efd287b871106edf3efb9e1b96aeea16b85f0549", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public static CompilerAdapter getCompiler(String compilerType, Task task,                                               Path classpath)         throws BuildException", "signatureAfterChange": "     public static CompilerAdapter getCompiler(String compilerType, Task task,                                               Path classpath)         throws BuildException", "diff": ["-            boolean isClassicCompilerSupported = true;", "-            //as new versions of java come out, add them to this test", "-            if (!JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_2)", "-                && !JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_3)) {", "-                isClassicCompilerSupported = false;", "-            }", "-", "-                if (isClassicCompilerSupported) {", "-                    return new Javac12();", "-                } else {", "-                    task.log(\"This version of java does \"", "-                                             + \"not support the classic \"", "-                                             + \"compiler; upgrading to modern\",", "-                                             Project.MSG_WARN);", "-                    compilerType = \"modern\";", "-                }", "+                task.log(\"This version of java does \"", "+                                         + \"not support the classic \"", "+                                         + \"compiler; upgrading to modern\",", "+                                         Project.MSG_WARN);", "+                compilerType = \"modern\";", "-                    if (isClassicCompilerSupported) {", "-                        task.log(\"Modern compiler not found - looking for \"", "-                                 + \"classic compiler\", Project.MSG_WARN);", "-                        return new Javac12();", "-                    } else {", "-                        throw new BuildException(\"Unable to find a javac \"", "-                                                 + \"compiler;\\n\"", "-                                                 + MODERN_COMPILER", "-                                                 + \" is not on the \"", "-                                                 + \"classpath.\\n\"", "-                                                 + \"Perhaps JAVA_HOME does not\"", "-                                                 + \" point to the JDK.\\n\"", "-                                + \"It is currently set to \\\"\"", "-                                + JavaEnvUtils.getJavaHome()", "-                                + \"\\\"\");", "-                    }", "+                    throw new BuildException(\"Unable to find a javac \"", "+                                             + \"compiler;\\n\"", "+                                             + MODERN_COMPILER", "+                                             + \" is not on the \"", "+                                             + \"classpath.\\n\"", "+                                             + \"Perhaps JAVA_HOME does not\"", "+                                             + \" point to the JDK.\\n\"", "+                            + \"It is currently set to \\\"\"", "+                            + JavaEnvUtils.getJavaHome()", "+                            + \"\\\"\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a749cf172a220937c545ec12bcc55f94", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Ant.java", "commitBeforeChange": "4783bc46159826bc33858cfc9145c4be93dfe755", "commitAfterChange": "2a291dca9249d6a4958d9898282fa67343bf59b7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                    } else {", "-                        throw new BuildException(getTaskName() + \" task at the\"", "-                                                 + \" top level must not invoke\"", "-                                                 + \" its own build file.\");", "+                    throw new BuildException(getTaskName() + \" task at the\"", "+                                + \" top level must not invoke\"", "+                                + \" its own build file.\");", "-                } else {", "-                    boolean circular = false;", "-                    for (Iterator it = locals.iterator(); !circular && it.hasNext();) {", "-                        Target other = (Target) (getProject().getTargets().get(", "-                            (String) (it.next())));", "-                        circular |= (other != null", "-                            && other.dependsOn(owningTargetName));", "-                    }", "-                    if (circular) {", "-                        throw new BuildException(getTaskName()", "-                                                 + \" task calling a target\"", "-                                                 + \" that depends on\"", "-                                                 + \" its parent target \\'\"", "-                                                 + owningTargetName", "-                                                 + \"\\'.\");", "-                    }", "+                }", "+                boolean circular = false;", "+                for (Iterator it = locals.iterator(); ", "+                     !circular && it.hasNext();) {", "+                    Target other = ", "+                        (Target) (getProject().getTargets().get(it.next()));", "+                    circular |= (other != null", "+                                 && other.dependsOn(owningTargetName));", "+                }", "+                if (circular) {", "+                    throw new BuildException(getTaskName()", "+                                             + \" task calling a target\"", "+                                             + \" that depends on\"", "+                                             + \" its parent target \\'\"", "+                                             + owningTargetName", "+                                             + \"\\'.\");", "-            if (locals.size() > 0 && !(locals.size() == 1 && locals.get(0) == \"\")) {", "+            if (locals.size() > 0 && !(locals.size() == 1 ", "+                                       && locals.get(0) == \"\")) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5da00d9b7fe83ecc0990e0ba92c0351", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "37e97ef42d47f59a277025d51b1d13719a9e616a", "commitAfterChange": "b92e6b644f97b87083602a8ce4029cce01725674", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "     private void checkIncludePatterns()", "signatureAfterChange": "     private void checkIncludePatterns()", "diff": ["+            if (FileUtils.isAbsolutePath(includes[icounter])) {", "+                //skip abs. paths not under basedir, if set:", "+                if (basedir != null", "+                    && !SelectorUtils.matchPatternStart(includes[icounter],", "+                    basedir.getAbsolutePath(), isCaseSensitive())) {", "+                    continue;", "+                }", "+            } else if (basedir == null) {", "+                //skip non-abs. paths if basedir == null:", "+                continue;", "+            }", "-        if (newroots.containsKey(\"\")) {", "+        if (newroots.containsKey(\"\") && basedir != null) {", "-            try {", "-                canonBase = basedir.getCanonicalFile();", "-            } catch (IOException ex) {", "-                throw new BuildException(ex);", "+            if (basedir != null) {", "+                try {", "+                    canonBase = basedir.getCanonicalFile();", "+                } catch (IOException ex) {", "+                    throw new BuildException(ex);", "+                }", "+                if (basedir == null && !FileUtils.isAbsolutePath(currentelement)) {", "+                    continue;", "+                }", "-                        File canonFile = myfile.getCanonicalFile();", "-                        String path = FILE_UTILS.removeLeadingPath(canonBase,", "-                                                                  canonFile);", "+                        String path = (basedir == null)", "+                            ? myfile.getCanonicalPath()", "+                            : FILE_UTILS.removeLeadingPath(canonBase,", "+                            myfile.getCanonicalFile());", "-                            if (myfile != null) {", "-                                currentelement =", "-                                    FILE_UTILS.removeLeadingPath(basedir,", "-                                                                 myfile);", "+                            if (myfile != null && basedir != null) {", "+                                currentelement = FILE_UTILS.removeLeadingPath(", "+                                    basedir, myfile);", "-                        currentelement = FILE_UTILS.removeLeadingPath(basedir,", "-                                                                     f);", "+                        currentelement = (basedir == null)", "+                            ? f.getAbsolutePath()", "+                            : FILE_UTILS.removeLeadingPath(basedir, f);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bccf5744baf446e034ff23bd6e465082", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Zip.java", "commitBeforeChange": "3ef74849efee36e856e6a1a37199a13ee15499a6", "commitAfterChange": "8b0f5b8c9ba88b3b80dba55661f1417ab6cacf04", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     public void executeMain() throws BuildException", "signatureAfterChange": "     public void executeMain() throws BuildException", "diff": ["-        if (baseDir == null && resources.size() == 0", "-            && groupfilesets.size() == 0 && \"zip\".equals(archiveType)) {", "-            throw new BuildException(\"basedir attribute must be set, \"", "-                                     + \"or at least one \"", "-                                     + \"resource collection must be given!\");", "-        }", "-", "-        if (zipFile == null) {", "-            throw new BuildException(\"You must specify the \"", "-                                     + archiveType + \" file to create!\");", "-        }", "-", "-        if (zipFile.exists() && !zipFile.isFile()) {", "-            throw new BuildException(zipFile + \" is not a file.\");", "-        }", "-", "-        if (zipFile.exists() && !zipFile.canWrite()) {", "-            throw new BuildException(zipFile + \" is read-only.\");", "-        }", "+        checkAttributesAndElements();", "-        // Whether or not an actual update is required -", "-        // we don't need to update if the original file doesn't exist", "-        if (doUpdate && !zipFile.exists()) {", "-            doUpdate = false;", "-            log(\"ignoring update attribute as \" + archiveType", "-                + \" doesn't exist.\", Project.MSG_DEBUG);", "-        }", "-", "-        // Add the files found in groupfileset to fileset", "-        for (int i = 0; i < groupfilesets.size(); i++) {", "-", "-            log(\"Processing groupfileset \", Project.MSG_VERBOSE);", "-            FileSet fs = (FileSet) groupfilesets.elementAt(i);", "-            FileScanner scanner = fs.getDirectoryScanner(getProject());", "-            String[] files = scanner.getIncludedFiles();", "-            File basedir = scanner.getBasedir();", "-            for (int j = 0; j < files.length; j++) {", "-", "-                log(\"Adding file \" + files[j] + \" to fileset\",", "-                    Project.MSG_VERBOSE);", "-                ZipFileSet zf = new ZipFileSet();", "-                zf.setProject(getProject());", "-                zf.setSrc(new File(basedir, files[j]));", "-                add(zf);", "-                filesetsFromGroupfilesets.addElement(zf);", "-            }", "-        }", "+        processDoUpdate();", "+        processGroupFilesets();", "-", "-                renamedFile =", "-                    FILE_UTILS.createTempFile(\"zip\", \".tmp\",", "-                                              zipFile.getParentFile());", "-                renamedFile.deleteOnExit();", "-", "-                try {", "-                    FILE_UTILS.rename(zipFile, renamedFile);", "-                } catch (SecurityException e) {", "-                    throw new BuildException(", "-                        \"Not allowed to rename old file (\"", "-                        + zipFile.getAbsolutePath()", "-                        + \") to temporary file\");", "-                } catch (IOException e) {", "-                    throw new BuildException(", "-                        \"Unable to rename old file (\"", "-                        + zipFile.getAbsolutePath()", "-                        + \") to temporary file\");", "-                }", "+                renamedFile = renameFile();", "-                try {", "-                    if (zOut != null) {", "-                        zOut.close();", "-                    }", "-                } catch (IOException ex) {", "-                    // If we're in this finally clause because of an", "-                    // exception, we don't really care if there's an", "-                    // exception when closing the stream. E.g. if it", "-                    // throws \"ZIP file must have at least one entry\",", "-                    // because an exception happened before we added", "-                    // any files, then we must swallow this", "-                    // exception. Otherwise, the error that's reported", "-                    // will be the close() error, which is not the", "-                    // real cause of the problem.", "-                    if (success) {", "-                        throw ex;", "-                    }", "-                }", "+                closeZout(zOut, success);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caa51e43293a4e4edf719944fa7c5a07", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Tar.java", "commitBeforeChange": "1400dc3c1b536c70697f83be990b0725121cba90", "commitAfterChange": "b5fcf10604f56a8061d10f332570342b34cc7a9d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            if (filesets.size() == 0) {", "+            if (filesets.size() == 0 && resourceCollections.size() == 0) {", "-                                         + \"attribute or some nested filesets.\",", "+                                         + \"attribute or some nested resource\"", "+                                         + \" collections.\",", "-                TarFileSet fs = (TarFileSet) e.nextElement();", "-                String[] files = fs.getFiles(getProject());", "-", "-                if (!archiveIsUpToDate(files, fs.getDir(getProject()))) {", "-                    upToDate = false;", "-                }", "-", "-                for (int i = 0; i < files.length; ++i) {", "-                    if (tarFile.equals(new File(fs.getDir(getProject()),", "-                                                files[i]))) {", "-                        throw new BuildException(\"A tar file cannot include \"", "-                                                 + \"itself\", getLocation());", "-                    }", "-                }", "+                upToDate &= check((TarFileSet) e.nextElement());", "+            }", "+            for (Enumeration e = resourceCollections.elements();", "+                 e.hasMoreElements();) {", "+                upToDate &= check((ResourceCollection) e.nextElement());", "-                    TarFileSet fs = (TarFileSet) e.nextElement();", "-                    String[] files = fs.getFiles(getProject());", "-                    if (files.length > 1 && fs.getFullpath().length() > 0) {", "-                        throw new BuildException(\"fullpath attribute may only \"", "-                                                 + \"be specified for \"", "-                                                 + \"filesets that specify a \"", "-                                                 + \"single file.\");", "-                    }", "-                    for (int i = 0; i < files.length; i++) {", "-                        File f = new File(fs.getDir(getProject()), files[i]);", "-                        String name = files[i].replace(File.separatorChar, '/');", "-                        tarFile(f, tOut, name, fs);", "-                    }", "+                    tar((TarFileSet) e.nextElement(), tOut);", "+                }", "+                for (Enumeration e = resourceCollections.elements();", "+                     e.hasMoreElements();) {", "+                    tar((ResourceCollection) e.nextElement(), tOut);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cadc425db064c50574551c1f5faed215", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Ant.java", "commitBeforeChange": "5e2008922a1fe38ae7867c07cfd049e247e95f1e", "commitAfterChange": "c672e8778ed4d0f929d9bb413532a4b2e421fa16", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        String savedTarget = target;", "+        Vector locals = new Vector(targets);", "-            log(\"calling target \" + (target != null ? target : \"[default]\")", "-                    + \" in build file \" +  antFile, Project.MSG_VERBOSE);", "+            log(\"calling target(s) \"", "+                + ((locals.size() == 0) ? locals.toString() : \"[default]\")", "+                + \" in build file \" + antFile, Project.MSG_VERBOSE);", "-            if (target == null) {", "-                target = newProject.getDefaultTarget();", "+            if (locals.size() == 0) {", "+                String defaultTarget = newProject.getDefaultTarget();", "+                if (defaultTarget != null) {", "+                    locals.add(defaultTarget);", "+                }", "-                if (owningTargetName.equals(target)) {", "+                if (locals.contains(owningTargetName)) {", "-                    Target other =", "-                        (Target) getProject().getTargets().get(target);", "-                    if (other != null && other.dependsOn(owningTargetName)) {", "+                    boolean circular = false;", "+                    for (Iterator it = locals.iterator(); !circular && it.hasNext();) {", "+                        Target other = (Target)(getProject().getTargets().get(", "+                            (String)(it.next())));", "+                        circular |= (other != null", "+                            && other.dependsOn(owningTargetName));", "+                    }", "+                    if (circular) {", "-            if (target != null && !\"\".equals(target)) {", "+            if (locals.size() > 0 && !(locals.size() == 1 && locals.get(0) == \"\")) {", "-                    newProject.executeTarget(target);", "+                    String[] nameArray =", "+                        (String[])(locals.toArray(new String[locals.size()]));", "+", "+                    Hashtable targets = newProject.getTargets();", "+                    Vector sortedTargets = newProject.topoSort(nameArray, targets);", "+", "+                    sortedTargets.setSize(sortedTargets.indexOf(targets.get(", "+                        locals.lastElement())) + 1);", "+                    newProject.executeSortedTargets(sortedTargets);", "-            target = savedTarget;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc2488461944c0190477239a70f146b5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "cca008dd0001628eefae7a0ebffba4815a6909f1", "commitAfterChange": "021fdf251c92ecb3981724d83c0265dc770280b3", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public static void main(String[] args) throws IOException", "signatureAfterChange": "     public static void main(String[] args) throws IOException", "diff": ["+        if (args[0].startsWith(\"testsfile=\")) {", "+            multipleTests = true;", "+            args[0] = args[0].substring(10 /* \"testsfile=\".length() */);", "+        }", "+", "-        JUnitTest t = new JUnitTest(args[0]);", "-", "-        t.setProperties(props);", "-        JUnitTestRunner runner = new JUnitTestRunner(t, haltError, stackfilter,", "-                                                     haltFail, showOut);", "-        runner.forked = true;", "-        transferFormatters(runner);", "-        runner.run();", "-        System.exit(runner.getRetCode());", "+        int returnCode = SUCCESS;", "+        if (multipleTests) {", "+            try {", "+                java.io.BufferedReader reader = ", "+                    new java.io.BufferedReader(new java.io.FileReader(args[0]));", "+                String testCaseName;", "+                int code = 0;", "+                boolean errorOccured = false;", "+                boolean failureOccured = false;", "+                String line = null;", "+                while ((line = reader.readLine()) != null) {", "+                    StringTokenizer st = new StringTokenizer(line, \",\");", "+                    testCaseName = st.nextToken();", "+                    JUnitTest t = new JUnitTest(testCaseName);", "+                    t.setTodir(new File(st.nextToken()));", "+                    t.setOutfile(st.nextToken());", "+                    code = launch(t, haltError, stackfilter, haltFail, ", "+                                  showOut, props);", "+                    errorOccured = (code == ERRORS);", "+                    failureOccured = (code != SUCCESS);", "+                    if (errorOccured || failureOccured ) {", "+                        if ((errorOccured && haltError) ", "+                            || (failureOccured && haltFail)) {", "+                            System.exit(code);", "+                        } else {", "+                            if (code > returnCode) {", "+                                returnCode = code;", "+                            }", "+                            System.out.println(\"TEST \" + t.getName() ", "+                                               + \" FAILED\");", "+                        }", "+                    }", "+                }", "+            } catch(IOException e) {", "+                e.printStackTrace();", "+            }", "+        } else {", "+            returnCode = launch(new JUnitTest(args[0]), haltError,", "+                                stackfilter, haltFail, showOut, props);", "+        }", "+", "+        System.exit(returnCode);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5acd4ea26341e8626814f1170cbfaca", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "6ecbe242189a8d7feba3d56c8ec89582e77b1b29", "commitAfterChange": "409b0917b6f737faf5c8b804fdbec8bd1f7f5274", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+            ", "+            System.err.println(test.getFork());", "+", "-                    fe.setOutfile(project.resolveFile(test.getOutfile()", "-                                                      +fe.getExtension()));", "+                    if (fe.getUseFile()) {", "+                        fe.setOutfile(project.resolveFile(test.getOutfile()", "+                                                          +fe.getExtension()));", "+                    } else {", "+                        fe.setOutput(new LogOutputStream(this, Project.MSG_INFO));", "+                    }", "-                    add[i].setOutfile(project.resolveFile(test.getOutfile()", "-                                                          +add[i].getExtension()));", "+                    if (add[i].getUseFile()) {", "+                        add[i].setOutfile(project.resolveFile(test.getOutfile()", "+                                                              +add[i].getExtension()));", "+                    } else {", "+                        add[i].setOutput(new LogOutputStream(this, Project.MSG_INFO));", "+                    }", "+                StringBuffer formatterArg = new StringBuffer();", "-                    cmd.createArgument().setValue(\"formatter=\" +", "-                                                  fe.getClassname() + \",\"", "-                                                  + project.resolveFile(test.getOutfile()", "-                                                                               +fe.getExtension()).getAbsolutePath());", "+                    formatterArg.append(\"formatter=\");", "+                    formatterArg.append(fe.getClassname());", "+                    if (fe.getUseFile()) {", "+                        formatterArg.append(\",\");", "+                        formatterArg.append(project.resolveFile(test.getOutfile()", "+                                                                +fe.getExtension())", "+                                            .getAbsolutePath());", "+                    }", "+                    cmd.createArgument().setValue(formatterArg.toString());", "+                    formatterArg.setLength(0);", "-                    cmd.createArgument().setValue(\"formatter=\" +", "-                                                  add[i].getClassname() + \",\"", "-                                                  + project.resolveFile(test.getOutfile()", "-                                                                               +add[i].getExtension()).getAbsolutePath());", "+                    formatterArg.append(\"formatter=\");", "+                    formatterArg.append(add[i].getClassname());", "+                    if (add[i].getUseFile()) {", "+                        formatterArg.append(\",\");", "+                        formatterArg.append(project.resolveFile(test.getOutfile()", "+                                                                +add[i].getExtension())", "+                                            .getAbsolutePath());", "+                    }", "+                    cmd.createArgument().setValue(formatterArg.toString());", "+                    formatterArg.setLength(0);", "+                log(\"Executing: \"+cmd.toString(), Project.MSG_VERBOSE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6405c1bad582f55d8ae163005d4aa64", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/rmic/DefaultRmicAdapter.java", "commitBeforeChange": "aca10a1d12baef5b24d64906202659ffbdcf7e0f", "commitAfterChange": "6440b64b5a526e07d4457be2153642524cecc959", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "          public String[] mapFileName(String name)", "signatureAfterChange": "          public String[] mapFileName(String name)", "diff": ["-            if (!attributes.getIiop()) {", "+            /*", "+             * fallback in case we have trouble loading the class or", "+             * don't know how to handle it (there is no easy way to", "+             * know what IDL mode would generate.", "+             *", "+             * This is supposed to make Ant always recompile the", "+             * class, as a file of that name should not exist.", "+             */", "+            String[] target = new String[] {name+\".tmp.\"+rand.nextLong()};", "+", "+            if (!attributes.getIiop() && !attributes.getIdl()) {", "+                // JRMP with simple naming convention", "-                    return new String[] {", "+                    target = new String[] {", "-                    return new String[] {", "+                    target = new String[] {", "-            } else {", "-                int lastSlash = base.lastIndexOf(\"/\");", "+            } else if (!attributes.getIdl()) {", "+                int lastSlash = base.lastIndexOf(File.separatorChar);", "-                return new String[] {", "-                    dirname + \"_\" + filename + getStubClassSuffix() + \".class\",", "-                    dirname + \"_\" + filename + getTieClassSuffix() + \".class\"", "-                };", "+                try {", "+                    Class c = attributes.getLoader().loadClass(classname);", "+", "+                    if (c.isInterface()) {", "+                        // only stub, no tie", "+                        target = new String[] {", "+                            dirname + \"_\" + filename + getStubClassSuffix() ", "+                            + \".class\"", "+                        };", "+                    } else {", "+                        /*", "+                         * stub is derived from implementation, ", "+                         * tie from interface name.", "+                         */", "+                        Class interf = attributes.getRemoteInterface(c);", "+                        String iName = interf.getName();", "+                        String iDir = \"\";", "+                        int iIndex = -1;", "+                        int lastDot = iName.lastIndexOf(\".\");", "+                        if (lastDot == -1) {", "+                            // no package", "+                            iIndex = 0;", "+                        } else {", "+                            iIndex = lastDot + 1;", "+                            iDir = iName.substring(0, iIndex);", "+                            iDir = iDir.replace('.', File.separatorChar);", "+                        }", "+                        ", "+                        target = new String[] {", "+                            dirname + \"_\" + filename + getTieClassSuffix() ", "+                            + \".class\",", "+                            iDir + \"_\" + iName.substring(iIndex) ", "+                            + getStubClassSuffix() + \".class\"", "+                        };", "+                    }", "+                } catch (ClassNotFoundException e) {", "+                    attributes.log(\"Unable to verify class \" + classname", "+                                   + \". It could not be found.\", ", "+                                   Project.MSG_WARN);", "+                } catch (NoClassDefFoundError e) {", "+                    attributes.log(\"Unable to verify class \" + classname", "+                                   + \". It is not defined.\", Project.MSG_WARN);", "+                } catch (Throwable t) {", "+                    attributes.log(\"Unable to verify class \" + classname", "+                                   + \". Loading caused Exception: \"", "+                                   + t.getMessage(), Project.MSG_WARN);", "+                }", "+            return target;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da856da9b417b8920fde65a474c79507", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/main/org/apache/ant/core/execution/ExecutionFrame.java", "commitBeforeChange": "a48208f6cf8cf80ef1e144305ff8dfe0958599d5", "commitAfterChange": "c2e518039b65dc5b8c9c31f9f78b2d72ea8db2d1", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 24, "signatureBeforeChange": "     public void executeTasks(Iterator taskIterator) throws ExecutionException, ConfigException", "signatureAfterChange": "     public void executeTasks(Iterator taskIterator) throws ExecutionException, ConfigException", "diff": ["-     */", "-    public void executeTasks(Iterator taskIterator) throws ExecutionException, ConfigException {", "-        Task task = null;", "-        try {", "-            while (taskIterator.hasNext()) {", "-                task = (Task)taskIterator.next();", "-                try {", "-                    ExecutionTask executionTask = getConfiguredExecutionTask(task);", "-                    eventSupport.fireTaskStarted(this, task);", "-                    executionTask.execute();", "-                }", "-                catch (ExecutionException e) {", "-                    if (e.getLocation() == null || e.getLocation() == Location.UNKNOWN_LOCATION) {", "-                        e.setLocation(task.getLocation());", "-                    }", "-                    throw e;", "-                }", "-                catch (ConfigException e) {", "-                    if (e.getLocation() == null || e.getLocation() == Location.UNKNOWN_LOCATION) {", "-                        e.setLocation(task.getLocation());", "-                    }", "-                    throw e;", "-                }", "-                eventSupport.fireTaskFinished(this, task, null);", "-            }", "-        }", "-        catch (RuntimeException e) {", "-            eventSupport.fireTaskFinished(this, task, e);", "-            throw e;", "-        }", "-    }        ", "+     */", "+    public void executeTasks(Iterator taskIterator) throws ExecutionException, ConfigException {", "+        TaskElement task = null;", "+        try {", "+            while (taskIterator.hasNext()) {", "+                task = (TaskElement)taskIterator.next();", "+                try {", "+                    Task configuredTask = configureTask(task);", "+                    eventSupport.fireTaskStarted(this, task);", "+                    configuredTask.execute();", "+                }", "+                catch (ExecutionException e) {", "+                    if (e.getLocation() == null || e.getLocation() == Location.UNKNOWN_LOCATION) {", "+                        e.setLocation(task.getLocation());", "+                    }", "+                    throw e;", "+                }", "+                catch (ConfigException e) {", "+                    if (e.getLocation() == null || e.getLocation() == Location.UNKNOWN_LOCATION) {", "+                        e.setLocation(task.getLocation());", "+                    }", "+                    throw e;", "+                }", "+                eventSupport.fireTaskFinished(this, task, null);", "+            }", "+        }", "+        catch (RuntimeException e) {", "+            eventSupport.fireTaskFinished(this, task, e);", "+            throw e;", "+        }", "+    }        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb3270ffba8d319794d601d2e2f3243f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/antlib/src/main/org/apache/tools/ant/taskdefs/Antlib.java", "commitBeforeChange": "1d2784e6d5429505b3b420e342992c22cd5373a6", "commitAfterChange": "6252354506953777f5b921b8746a54e7d317475a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private InputStream getDescriptor(File file)         throws BuildException", "signatureAfterChange": "         private URL getDescriptorURL(File file, String resourceName)", "diff": ["+         */", "+        private URL getDescriptorURL(File file, String resourceName) {", "+            try {", "+                if (!file.exists()) {", "+                    return null;", "+                }", "+", "+                if (file.isDirectory()) {", "+                    File resource = new File(file, resourceName);", "+", "+                    if (resource.exists()) {", "+                        try {", "+                            return new URL(\"file:\"+resource.toString());", "+                        } catch (MalformedURLException ex) {", "+                            return null;", "+                        }", "+                    }", "+                }", "+                else {", "+                    ZipFile zipFile = new ZipFile(file);", "+                    try {", "+                        ZipEntry entry = zipFile.getEntry(resourceName);", "+                        if (entry != null) {", "+                            try {", "+                                return new URL(\"jar:file:\"+file.toString()+\"!/\"+entry);", "+                            } catch (MalformedURLException ex) {", "+                                return null;", "+                            }", "+                        }", "+                    }", "+                    finally {", "+                        zipFile.close();", "+                    }", "+                }", "+            }", "+            catch (Exception e) {", "+                e.printStackTrace();", "+            }", "+", "+            return null;", "+        }", "-    private InputStream getDescriptor(File file)", "-        throws BuildException {", "-        try {", "-            final ZipFile zipfile = new ZipFile(file);", "-            ZipEntry entry = zipfile.getEntry(ANT_DESCRIPTOR);", "-            if (entry == null) {", "-                return null;", "-            }", "-", "-            // Guarantee that when Entry is closed so does the zipfile instance.", "-            return", "-                new FilterInputStream(zipfile.getInputStream(entry)) {", "-                    public void close()", "-                        throws IOException {", "-                        super.close();", "-                        zipfile.close();", "-                    }", "-                };", "-        }", "-        catch (ZipException ze) {", "-            throw new BuildException(\"Not a library file.\", ze, location);", "-        }", "-        catch (IOException ioe) {", "-            throw new BuildException(\"Cannot read library content.\",", "-                    ioe, location);", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1ab042161fbf3303bebb2d295091080", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/FixCRLF.java", "commitBeforeChange": "14d7f3c9152c8c52501a5624e361a588f9e56367", "commitAfterChange": "6231c77d24ce79d308b50e46097851fa8dc63e93", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            \" cr=\" + (addcr==-1 ? \"add\" : addcr==0 ? \"asis\" : \"remove\") +", "-            \" tab=\" + (addtab==-1 ? \"add\" : addtab==0 ? \"asis\" : \"remove\") +", "-            \" eof=\" + (ctrlz==-1 ? \"add\" : ctrlz==0 ? \"asis\" : \"remove\") +", "+            \" cr=\" + (addcr==1 ? \"add\" : addcr==0 ? \"asis\" : \"remove\") +", "+            \" tab=\" + (addtab==1 ? \"add\" : addtab==0 ? \"asis\" : \"remove\") +", "+            \" eof=\" + (ctrlz==1 ? \"add\" : ctrlz==0 ? \"asis\" : \"remove\") +", "+                // Determine whether it should be written,", "+                // that is if it is different than the potentially already existing file", "+                boolean write = false;", "+                byte[] existingdata = indata;", "-                if (destDir != null) destFile = new File(destDir, files[i]);", "-                FileOutputStream outStream = new FileOutputStream(destFile);", "-                outStream.write(outdata,0,o);", "-                outStream.close();", "+                if (destDir != null) {", "+                    destFile = new File(destDir, files[i]);", "+                    if(destFile.isFile()) {", "+                        int len = (int)destFile.length();", "+                        if(len != o) {", "+                            write = true;", "+                        } else {", "+                            existingdata = new byte[len];", "+                            try {", "+                                FileInputStream in = new FileInputStream(destFile);", "+                                in.read(existingdata);", "+                                in.close();", "+                            } catch (IOException e) {", "+                                throw new BuildException(e);", "+                            }", "+                        }", "+                    } else {", "+                        write = true;", "+                    }", "+                }", "+", "+                if(!write) {", "+                    if(existingdata.length != o) {", "+                        write = true;", "+                    } else {", "+                        for(int j = 0; j < o; ++j) {", "+                            if(existingdata[j] != outdata[j]) {", "+                                write = true;", "+                                break;", "+                            }", "+                        }", "+                    }", "+                }", "+", "+                if(write) {", "+                    log(destFile + \" is being written\", Project.MSG_VERBOSE);", "+                    FileOutputStream outStream = new FileOutputStream(destFile);", "+                    outStream.write(outdata,0,o);", "+                    outStream.close();", "+                } else {", "+                    log(destFile + \" is not written, as the contents are identical\",", "+                        Project.MSG_VERBOSE);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6440f238cad4ef01e4cfcb5a7be6189", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "4783bc46159826bc33858cfc9145c4be93dfe755", "commitAfterChange": "2a291dca9249d6a4958d9898282fa67343bf59b7", "methodNumberBeforeChange": 120, "methodNumberAfterChange": 120, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-                            throw new BuildException(\"The package list \"", "-                                                     + \" location for link \" + la.getHref()", "-                                                     + \" must be provided because the link is \"", "+                            throw new BuildException(\"The package list\"", "+                                                     + \" location for link \" ", "+                                                     + la.getHref()", "+                                                     + \" must be provided \"", "+                                                     + \"because the link is \"", "-                            toExecute.createArgument().setValue (ta.getParameter());", "+                            toExecute.createArgument()", "+                                .setValue (ta.getParameter());", "-                            // The tag element is used as a fileset. Parse all the files and", "-                            // create -tag arguments.", "-                            DirectoryScanner tagDefScanner = ta.getDirectoryScanner(getProject());", "+                            // The tag element is used as a", "+                            // fileset. Parse all the files and create", "+                            // -tag arguments.", "+                            DirectoryScanner tagDefScanner = ", "+                                ta.getDirectoryScanner(getProject());", "-                                        = new BufferedReader(new FileReader(tagDefFile));", "+                                        = new BufferedReader(", "+                                              new FileReader(tagDefFile)", "+                                              );", "-                                        toExecute.createArgument().setValue (\"-tag\");", "-                                        toExecute.createArgument().setValue (line);", "+                                        toExecute.createArgument()", "+                                            .setValue(\"-tag\");", "+                                        toExecute.createArgument()", "+                                            .setValue(line);", "-                                                new FileWriter(tmpList.getAbsolutePath(),", "-                                                               true));", "+                                    new FileWriter(tmpList.getAbsolutePath(),", "+                                                   true));", "-                throw new BuildException(\"Javadoc returned \" + ret, getLocation());", "+                throw new BuildException(\"Javadoc returned \" + ret,", "+                                         getLocation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8f638f1151b5d545cbacd026918060b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Manifest.java", "commitBeforeChange": "299ea801bc1031e308bfe07a22e51edd1b972872", "commitAfterChange": "eca5133693881d72fbd157619b03647e7e255789", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 26, "signatureBeforeChange": "         public String addAttributeAndCheck(Attribute attribute) throws ManifestException", "signatureAfterChange": "         public String addAttributeAndCheck(Attribute attribute)               throws ManifestException", "diff": ["-        public String addAttributeAndCheck(Attribute attribute) throws ManifestException {", "+        public String addAttributeAndCheck(Attribute attribute) ", "+             throws ManifestException {", "-            if (attribute.getName().equalsIgnoreCase(ATTRIBUTE_NAME)) {", "-                warnings.addElement(\"\\\"\" + ATTRIBUTE_NAME + \"\\\" attributes should not occur in the \" +", "-                                    \"main section and must be the first element in all \" +", "-                                    \"other sections: \\\"\" +attribute.getName() + \": \" + attribute.getValue() + \"\\\"\");", "+            if (attribute.getKey().equalsIgnoreCase(ATTRIBUTE_NAME)) {", "+                warnings.addElement(\"\\\"\" + ATTRIBUTE_NAME + \"\\\" attributes \" ", "+                    + \"should not occur in the main section and must be the \"", "+                    + \"first element in all other sections: \\\"\" ", "+                    + attribute.getName() + \": \" + attribute.getValue() + \"\\\"\");", "-            if (attribute.getName().toLowerCase().startsWith(ATTRIBUTE_FROM.toLowerCase())) {", "-                warnings.addElement(\"Manifest attributes should not start with \\\"\" +", "-                                    ATTRIBUTE_FROM + \"\\\" in \\\"\" +attribute.getName() + \": \" + attribute.getValue() + \"\\\"\");", "-            }", "-            else {", "+            if (attribute.getKey().startsWith(ATTRIBUTE_FROM.toLowerCase())) {", "+                warnings.addElement(\"Manifest attributes should not start \" ", "+                    + \"with \\\"\" + ATTRIBUTE_FROM + \"\\\" in \\\"\" ", "+                    + attribute.getName() + \": \" + attribute.getValue() + \"\\\"\");", "+            } else {", "-                String attributeName = attribute.getName().toLowerCase();", "-                if (attributeName.equals(ATTRIBUTE_CLASSPATH)) {", "-                    Vector classpathAttrs = (Vector)attributes.get(attributeName);", "-                    if (classpathAttrs == null) {", "-                        classpathAttrs = new Vector();", "-                        attributes.put(attributeName, classpathAttrs);", "+                String attributeKey = attribute.getKey();", "+                if (attributeKey.equals(ATTRIBUTE_CLASSPATH)) {", "+                    Attribute classpathAttribute = ", "+                        (Attribute)attributes.get(attributeKey);", "+                    ", "+                    if (classpathAttribute == null) {", "+                        storeAttribute(attribute);", "+                    } else {", "+                        Enumeration e = attribute.getValues();", "+                        while (e.hasMoreElements()) {", "+                            String value = (String)e.nextElement();", "+                            classpathAttribute.addValue(value);", "+                        }", "-                    classpathAttrs.addElement(attribute);", "-                }", "-                else if (attributes.containsKey(attributeName)) {", "-                    throw new ManifestException(\"The attribute \\\"\" + attribute.getName() + \"\\\" may not \" +", "-                                                \"occur more than once in the same section\");", "-                }", "-                else {", "-                    attributes.put(attributeName, attribute);", "+                } else if (attributes.containsKey(attributeKey)) {", "+                    throw new ManifestException(\"The attribute \\\"\" ", "+                        + attribute.getName() + \"\\\" may not occur more \" ", "+                        + \"than once in the same section\");", "+                } else {", "+                    storeAttribute(attribute);"]}]}
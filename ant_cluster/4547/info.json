{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d834a10afebc8cc6569958725187775c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "306bc8202a9ec7e3ce3a4df9893cc87f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Rmic.java", "commitBeforeChange": "cf4c2f018749355bf2c390e438cc18bc7e234efa", "commitAfterChange": "8162d141e44b778d135f9251277e85c922f0544c", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private void addExistingToClasspath(StringBuffer target,String source)", "signatureAfterChange": "     private void addExistingToClasspath(Path target, Path source)", "diff": ["-    private void addExistingToClasspath(StringBuffer target,String source) {", "-       StringTokenizer tok = new StringTokenizer(source,", "-                             System.getProperty(\"path.separator\"), false);", "-       while (tok.hasMoreTokens()) {", "-           File f = project.resolveFile(tok.nextToken());", "+    private void addExistingToClasspath(Path target, Path source) {", "+        String[] list = source.list();", "+        for (int i=0; i<list.length; i++) {", "+            File f = project.resolveFile(list[i]);", "-           if (f.exists()) {", "-               target.append(File.pathSeparator);", "-               target.append(f.getAbsolutePath());", "+            if (f.exists()) {", "+                target.setLocation(f.getAbsolutePath());", "-       }", "-", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59b8192586f6cf281215139b29866332", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/types/PatternSet.java", "commitBeforeChange": "1829060b863bcb631e251a2a58b7a752d60ddddb", "commitAfterChange": "432a0ae47a43a7e8c6a8c2678289b88b8aa18960", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void setIncludes( String includes )", "signatureAfterChange": "     public void setIncludes( final String includes )", "diff": ["-    public void setIncludes( String includes )", "+    public void setIncludes( final String includes )", "-        if( includes != null && includes.length() > 0 )", "+        final Pattern[] patterns = parsePatterns( includes );", "+        for( int i = 0; i < patterns.length; i++ )", "-            StringTokenizer tok = new StringTokenizer( includes, \", \", false );", "-            while( tok.hasMoreTokens() )", "-            {", "-                createInclude().setName( tok.nextToken() );", "-            }", "+            addInclude( patterns[ i ] );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "836178eb769071b60fdc9f81f9f7a28e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antlibs/system/org/apache/ant/antlib/system/AntBase.java", "commitBeforeChange": "752f49d5b18f9743f8e4a6dbdc8065d240d9c97a", "commitAfterChange": "da4e1a3aa99899d6aecc6d14c2a7498fa51647aa", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     protected Map getProperties()", "signatureAfterChange": "     protected Map getDataValues() throws AntException", "diff": ["-    protected Map getProperties() {", "-        if (!inheritAll) {", "-            return super.getProperties();", "-        }", "+    protected Map getDataValues() throws AntException {", "+        DataService dataService = getDataService();", "+        int priority = inheritAll ? DataValue.PRIORITY_BASE", "+                                  : DataValue.PRIORITY_INHERIT;", "-        // need to combine existing properties with new ones", "-        Map subBuildProperties = getDataService().getAllProperties();", "-", "-        subBuildProperties.putAll(super.getProperties());", "-        return subBuildProperties;", "+        Map values = new HashMap(super.getDataValues());", "+        dataService.mergeDataValues(values, dataService.getAllDataValues(),", "+            priority);", "+        return values;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9080f80e568a341cc76259eae50b96f8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/types/PatternSet.java", "commitBeforeChange": "1829060b863bcb631e251a2a58b7a752d60ddddb", "commitAfterChange": "432a0ae47a43a7e8c6a8c2678289b88b8aa18960", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void setExcludes( String excludes )", "signatureAfterChange": "     public void setExcludes( final String excludes )", "diff": ["-    public void setExcludes( String excludes )", "+    public void setExcludes( final String excludes )", "-        if( excludes != null && excludes.length() > 0 )", "+        final Pattern[] patterns = parsePatterns( excludes );", "+        for( int i = 0; i < patterns.length; i++ )", "-            StringTokenizer tok = new StringTokenizer( excludes, \", \", false );", "-            while( tok.hasMoreTokens() )", "-            {", "-                createExclude().setName( tok.nextToken() );", "-            }", "+            addExclude( patterns[ i ] );", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5266c88fe4d52beb3cd93ce09b630b5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/types/PatternSet.java", "commitBeforeChange": "1829060b863bcb631e251a2a58b7a752d60ddddb", "commitAfterChange": "432a0ae47a43a7e8c6a8c2678289b88b8aa18960", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void setExcludes( String excludes )", "signatureAfterChange": "     public void setExcludes( final String excludes )", "diff": ["-    public void setExcludes( String excludes )", "+    public void setExcludes( final String excludes )", "-        if( excludes != null && excludes.length() > 0 )", "+        final Pattern[] patterns = parsePatterns( excludes );", "+        for( int i = 0; i < patterns.length; i++ )", "-            StringTokenizer tok = new StringTokenizer( excludes, \", \", false );", "-            while( tok.hasMoreTokens() )", "-            {", "-                createExclude().setName( tok.nextToken() );", "-            }", "+            addExclude( patterns[ i ] );", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6bee952acef950a182f91d4c6027dae", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/types/PatternSet.java", "commitBeforeChange": "1829060b863bcb631e251a2a58b7a752d60ddddb", "commitAfterChange": "432a0ae47a43a7e8c6a8c2678289b88b8aa18960", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void setIncludes( String includes )", "signatureAfterChange": "     public void setIncludes( final String includes )", "diff": ["-    public void setIncludes( String includes )", "+    public void setIncludes( final String includes )", "-        if( includes != null && includes.length() > 0 )", "+        final Pattern[] patterns = parsePatterns( includes );", "+        for( int i = 0; i < patterns.length; i++ )", "-            StringTokenizer tok = new StringTokenizer( includes, \", \", false );", "-            while( tok.hasMoreTokens() )", "-            {", "-                createInclude().setName( tok.nextToken() );", "-            }", "+            addInclude( patterns[ i ] );"]}]}
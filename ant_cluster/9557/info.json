{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3fb9af9be93ff202ef9607cff622b7cc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09c2e958bf7c314e731ebb165617e758", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/email/MimeMailer.java", "commitBeforeChange": "e7fb9570418c8f963123c259470373667ac8a84e", "commitAfterChange": "f5b5a8b53cad568d5a5ab97ed35c91f698fb1c8e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "       private static InternetAddress[] internetAddresses(Vector list)          throws AddressException, UnsupportedEncodingException", "signatureAfterChange": "      private static InternetAddress[] internetAddresses(Vector list)         throws AddressException, UnsupportedEncodingException", "diff": ["-", "-         throws AddressException, UnsupportedEncodingException {", "+        throws AddressException, UnsupportedEncodingException {", "-            if (addr.getName() == null) {", "-                addrs[i] = new InternetAddress(addr.getAddress());", "-            } else {", "-                addrs[i] = new InternetAddress(addr.getAddress(),", "-                    addr.getName());", "-            }", "+            String name = addr.getName();", "+            addrs[i] = (name == null)", "+                ? new InternetAddress(addr.getAddress())", "+                : new InternetAddress(addr.getAddress(), name);", "-", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7995c188d085e5f6c0df404680ba8fbe", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/condition/HasFreeSpace.java", "commitBeforeChange": "cc32e094ecf8f0ac6334ad7a1c33ecd7c9523629", "commitAfterChange": "5e02af101eb4b402542014893bdfdbddc1fbec47", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \r     public boolean eval() throws BuildException", "signatureAfterChange": "\r \r     public boolean eval() throws BuildException", "diff": ["-                String j6FileUtils = \"org.apache.tools.ant.util.java16.Java6FileUtils\";\r", "-                ReflectWrapper w = new ReflectWrapper(getClass().getClassLoader(), j6FileUtils);\r", "-                long free = ((Long)w.invoke(\"freeSpace\", String.class, partition)).longValue();\r", "+                File fs = new File(partition);\r", "+                ReflectWrapper w = new ReflectWrapper(fs);\r", "+                long free = ((Long)w.invoke(\"getFreeSpace\")).longValue();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0c51e2fffb42ccfacc821b655cb25a1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/ZipResource.java", "commitBeforeChange": "4af209f564ee4c3b8408f089a8f23723a99a6704", "commitAfterChange": "a96627738decba56e1c94e54fa23ecbd7bfdb9a2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public File getZipfile()", "signatureAfterChange": "     public File getZipfile()", "diff": ["-        return isReference()", "-            ? ((ZipResource) getCheckedRef()).getZipfile() : zipfile;", "+        FileResource r = (FileResource) getArchive();", "+        return r.getFile();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb71e9754b94d57ffaab07256d90b9fe", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "4771d246a416828537319b6235a93a4382d746fa", "commitAfterChange": "002d084d5d809016ae2bd425912f3e6cd5066526", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void parse() throws BuildException", "signatureAfterChange": "     private void parse() throws BuildException", "diff": ["-            parser = getParserFactory().newSAXParser().getParser();", "-            parser.setDocumentHandler(new RootHandler());", "-            parser.parse(new InputSource(new FileReader(buildFile)));", "+            SAXParser saxParser = getParserFactory().newSAXParser();", "+            parser = saxParser.getParser();", "+            saxParser.parse(buildFile, new RootHandler());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cee55cd5ccda8a2b324e0d5c78a60e08", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/Main.java", "commitBeforeChange": "a6bebc97c61c6d0039e75db487c0220f726a71c7", "commitAfterChange": "a00fa243becff6d062b1e9491d7cada4c552c3ba", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     protected ClassLoader createClassLoader( final File libDir )", "signatureAfterChange": "     protected ClassLoader createClassLoader( final File libDir )", "diff": ["-            if( !files[ i ].getName().equals( \"ant.jar\" ) &&", "-                !files[ i ].getName().equals( \"myrmidon.jar\" ) &&", "-                !files[ i ].getName().equals( \"avalonapi.jar\" ) )", "+            final String name = files[ i ].getName();", "+            if( !name.equals( \"ant.jar\" ) &&", "+                !name.equals( \"myrmidon.jar\" ) &&", "+                !name.equals( \"avalonapi.jar\" ) )"]}]}
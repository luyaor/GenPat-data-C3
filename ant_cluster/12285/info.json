{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eea0a16dd7d05a40279727de1e220d69", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8289d7417ad325c52a9e0d5f1bca1b8a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/condition/HasFreeSpace.java", "commitBeforeChange": "5e87c313e9059d690df749a3859c5e76b146f991", "commitAfterChange": "cc32e094ecf8f0ac6334ad7a1c33ecd7c9523629", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \t\r \tpublic boolean eval() throws BuildException", "signatureAfterChange": "\r \r     public boolean eval() throws BuildException", "diff": ["-\t\r", "-\tpublic boolean eval() throws BuildException {\r", "-\t\ttry {\r", "-\t\t\tif (JavaEnvUtils.isAtLeastJavaVersion(\"1.6\")) {\r", "-\t\t\t\t//reflection to avoid bootstrap/build problems\r", "-\t\t\t\tString j6FileUtils = \"org.apache.tools.ant.util.java16.Java6FileUtils\";\r", "-\t\t\t\tReflectWrapper w = new ReflectWrapper(getClass().getClassLoader(), j6FileUtils);\r", "-\t\t\t\tlong free = ((Long)w.invoke(\"freeSpace\", String.class, partition)).longValue();\r", "-\t\t\t\treturn free >= StringUtils.parseHumanSizes(needed);\r", "-\t\t\t} else {\r", "-\t\t\t\tthrow new BuildException(\"HasFreeSpace condition not supported on Java5 or less.\");\r", "-\t\t\t}\r", "-\t\t} catch (Exception e) {\r", "-\t\t\tthrow new BuildException(e);\r", "-\t\t}\r", "-\t}\r", "+    public boolean eval() throws BuildException {\r", "+        validate();\r", "+        try {\r", "+            if (JavaEnvUtils.isAtLeastJavaVersion(\"1.6\")) {\r", "+                //reflection to avoid bootstrap/build problems\r", "+                String j6FileUtils = \"org.apache.tools.ant.util.java16.Java6FileUtils\";\r", "+                ReflectWrapper w = new ReflectWrapper(getClass().getClassLoader(), j6FileUtils);\r", "+                long free = ((Long)w.invoke(\"freeSpace\", String.class, partition)).longValue();\r", "+                return free >= StringUtils.parseHumanSizes(needed);\r", "+            } else {\r", "+                throw new BuildException(\"HasFreeSpace condition not supported on Java5 or less.\");\r", "+            }\r", "+        } catch (Exception e) {\r", "+            throw new BuildException(e);\r", "+        }\r", "+    }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b512a4413e91e53f605d72414e4922ec", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ide/VAJAntTool.java", "commitBeforeChange": "6cf09d26ffb60c6d9c780b92203ceb6b98b4182c", "commitAfterChange": "fcd6548344aa3f590435beff55530cfdb6983588", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public static VAJBuildInfo loadBuildData(String projectName)", "signatureAfterChange": "     public static VAJBuildInfo loadBuildData(String projectName)", "diff": ["- */", "-public static VAJBuildInfo loadBuildData(String projectName) {", "-\tVAJBuildInfo result = null;", "-\ttry {", "-\t\tProject project = VAJUtil.getWorkspace().loadedProjectNamed( projectName );", "-\t\tif ( project.testToolRepositoryData(TOOL_DATA_KEY) ) {", "-\t\t\tToolData td = project.getToolRepositoryData(TOOL_DATA_KEY);", "-\t\t\tString data = (String)td.getData();", "-\t\t\tresult = VAJBuildInfo.parse( data );", "-\t\t} else {", "-\t\t\tresult = new VAJBuildInfo();", "-\t\t}", "-\t\tresult.setVAJProjectName( projectName );", "-\t} catch (Throwable t) {", "-\t\tSystem.out.println(\"BuildInfo for Project \" + projectName + ", "-\t\t\t\" could not be loaded\" + t);", "-\t\tthrow new BuildException(t);", "-\t}", "-\treturn result;", "-}", "+     */", "+    public static VAJBuildInfo loadBuildData(String projectName) {", "+        VAJBuildInfo result = null;", "+        try {", "+            Project project = ", "+                VAJLocalUtil.getWorkspace().loadedProjectNamed( projectName );", "+            if ( project.testToolRepositoryData(TOOL_DATA_KEY) ) {", "+                ToolData td = project.getToolRepositoryData(TOOL_DATA_KEY);", "+                String data = (String)td.getData();", "+                result = VAJBuildInfo.parse( data );", "+            } else {", "+                result = new VAJBuildInfo();", "+            }", "+            result.setVAJProjectName( projectName );", "+        } catch (Throwable t) {", "+            throw new BuildException(\"BuildInfo for Project \" ", "+                                     + projectName + \" could not be loaded\" + t);", "+        }", "+        return result;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3eebe3fee751a3402c4e36240c1f0ae", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ide/VAJAntToolGUI.java", "commitBeforeChange": "6cf09d26ffb60c6d9c780b92203ceb6b98b4182c", "commitAfterChange": "fcd6548344aa3f590435beff55530cfdb6983588", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tprivate Panel getCommandButtonPanel()", "signatureAfterChange": "     private Panel getCommandButtonPanel()", "diff": ["-\t */", "-\tprivate Panel getCommandButtonPanel() {", "-\t\tif (iCommandButtonPanel == null) {", "-\t\t\ttry {", "-\t\t\t\tiCommandButtonPanel = new Panel();", "-\t\t\t\tiCommandButtonPanel.setName(\"CommandButtonPanel\");", "-\t\t\t\tiCommandButtonPanel.setLayout(getCommandButtonPanelFlowLayout());", "-\t\t\t\tiCommandButtonPanel.setBackground(SystemColor.control);", "-\t\t\t\tiCommandButtonPanel.add(getReloadButton());", "-\t\t\t\tgetCommandButtonPanel().add(getBuildButton(), getBuildButton().getName());", "-\t\t\t\tgetCommandButtonPanel().add(getCloseButton(), getCloseButton().getName());", "-\t\t\t} catch (Throwable iExc) {", "-\t\t\t\thandleException(iExc);", "-\t\t\t}", "-\t\t}", "-\t\treturn iCommandButtonPanel;", "-\t}", "+     */", "+    private Panel getCommandButtonPanel() {", "+        if (iCommandButtonPanel == null) {", "+            try {", "+                iCommandButtonPanel = new Panel();", "+                iCommandButtonPanel.setName(\"CommandButtonPanel\");", "+                iCommandButtonPanel.setLayout(getCommandButtonPanelFlowLayout());", "+                iCommandButtonPanel.setBackground(SystemColor.control);", "+                iCommandButtonPanel.add(getReloadButton());", "+                iCommandButtonPanel.add(getBuildButton());", "+                iCommandButtonPanel.add(getStopButton());", "+                iCommandButtonPanel.add(getCloseButton());", "+            } catch (Throwable iExc) {", "+                handleException(iExc);", "+            }", "+        }", "+        return iCommandButtonPanel;", "+    }"]}]}
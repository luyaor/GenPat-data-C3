{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bcb56a578c5eeeac4f1ef1ab07a50324", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c18ab7cf40a087bec06aa0eb6c19413", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Checksum.java", "commitBeforeChange": "16a5d1b56ceb8dca9875b074ebb36c626ce06763", "commitAfterChange": "931a037496b3bc1c55734fd221a3ef773dc8cabb", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private void addToIncludeFileMap(File file) throws BuildException", "signatureAfterChange": "     private void addToIncludeFileMap(File file) throws BuildException", "diff": ["-                    File dest", "-                        = new File(file.getParent(), file.getName() + fileext);", "+                    File checksumFile = getChecksumFile(file);", "-                        (file.lastModified() > dest.lastModified())) {", "-                        includeFileMap.put(file, dest);", "+                        (file.lastModified() > checksumFile.lastModified())) {", "+                        includeFileMap.put(file, checksumFile);", "-                        log(file + \" omitted as \" + dest + \" is up to date.\",", "+                        log(file + \" omitted as \" + checksumFile + \" is up to date.\",", "+                        if (totalproperty != null) {", "+                            // Read the checksum from disk.", "+                            String checksum = null;", "+                            try {", "+                                BufferedReader diskChecksumReader = new BufferedReader(new FileReader(checksumFile));", "+                                checksum = diskChecksumReader.readLine();", "+                            } catch (IOException e) {", "+                                throw new BuildException(\"Couldn't read checksum file \" + checksumFile, e);", "+                            }", "+                            byte[] digest = decodeHex(checksum.toCharArray());", "+                            allDigests.put(file,digest );", "+                        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49206fa004a4459ecb859ef06f2b6e31", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/workspace/DefaultTaskContext.java", "commitBeforeChange": "e2ec6a3988643fe6f3c8fabd5b8656e4209eaa1d", "commitAfterChange": "42c6021a9e42f49f50a3f4a170590d15a9b8c3db", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     public TaskContext createSubContext( final String name )         throws TaskException", "signatureAfterChange": "     public TaskContext createSubContext( final String name )         throws TaskException", "diff": ["-        final DefaultTaskContext context =", "-            new DefaultTaskContext( this, m_serviceManager, m_logger );", "-", "-        context.setProperty( TaskContext.NAME, getName() + \".\" + name );", "-        context.setProperty( TaskContext.BASE_DIRECTORY, getBaseDirectory() );", "-", "-        return context;", "-    }", "+            final PropertyStore store = m_store.createChildStore( name );", "+            final DefaultServiceManager serviceManager =", "+                new DefaultServiceManager( m_serviceManager );", "+            final Logger logger = m_logger.getChildLogger( name );", "+            return new DefaultTaskContext( serviceManager, logger, store );", "+        catch( final Exception e )", "+            throw new TaskException( e.getMessage(), e );"]}]}
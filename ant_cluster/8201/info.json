{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a86097ad1f8cf3108f8fb89bc11e4b81", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbb22599b4ba5a160d95701e6b81f6ce", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/XMLJUnitResultFormatter.java", "commitBeforeChange": "10c41029aeaba31241f1a85f9b02591b357e20b6", "commitAfterChange": "818cb969adef1df0f5918ba62f80f62502d5e53e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private void formatError(String type, Test test, Throwable t)", "signatureAfterChange": "      private void formatError(String type, Test test, Throwable t)", "diff": ["+    private void formatError(String type, Test test, Throwable t) {", "+        if (test != null) {", "+            endTest(test);", "+        }", "+", "+        Element nested = doc.createElement(type);", "+        if (test != null) {", "+            currentTest.appendChild(nested);", "+        } else {", "+            rootElement.appendChild(nested);", "+        }", "+", "+        String message = t.getMessage();", "+        if (message != null && message.length() > 0) {", "+            nested.setAttribute(\"message\", xmlEscape(t.getMessage()));", "+        }", "+        nested.setAttribute(\"type\", xmlEscape(t.getClass().getName()));", "+", "+        StringWriter swr = new StringWriter();", "+        t.printStackTrace(new PrintWriter(swr, true));", "+        Text trace = doc.createTextNode(swr.toString());", "+        nested.appendChild(trace);", "+    }", "-", "-    private void formatError(String type, Test test, Throwable t) {", "-        formatTestCaseOpenTag(test);", "-        results.append(\"    <\");", "-        results.append(type);", "-        results.append(\" message=\\\"\");", "-        results.append(xmlEscape(t.getMessage()));", "-        results.append(\"\\\" type=\\\"\");", "-        results.append(t.getClass().getName());", "-        results.append(\"\\\">\");", "-        results.append(newLine);", "-", "-        results.append(\"<![CDATA[\");", "-        results.append(newLine);", "-        StringWriter swr = new StringWriter();", "-        t.printStackTrace(new PrintWriter(swr, true));", "-        results.append(swr.toString());", "-        results.append(\"]]>\");", "-        results.append(newLine);", "-", "-        results.append(\"    </\");", "-        results.append(type);", "-        results.append(\">\");", "-        results.append(newLine);", "-", "-        results.append(\"  </testcase>\");", "-        results.append(newLine);", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd99e7018d305ff969928c7b9f14f8e3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/junit/src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "9ff0d86547933b2d071b31d0afb51780597a051a", "commitAfterChange": "59c0b1595d0d41e479765772788b976d9429c24d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        File tmp = configureTestRunner();", "-        Execute execute = new Execute(new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN));", "-        execute.setCommandline(cmd.getCommandline());", "-        execute.setAntRun(project);", "-", "-        log(RES.getString(\"task.process-cmdline.log\", cmd.toString()), Project.MSG_VERBOSE);", "-        int retVal;", "-        try {", "-            retVal = execute.execute();", "-        } catch (IOException e) {", "-            String msg = RES.getString(\"task.process-failed.error\");", "-            throw new BuildException(msg, e, location);", "-        } finally {", "-            tmp.delete();", "+        if (client == null && server == null) {", "+            throw new BuildException(\"Invalid state: need to be server, client or both\");", "-    }", "+        // 1) server and client", "+        if (server != null && client != null) {", "+            ServerWorker worker = new ServerWorker();", "+            worker.start();", "+            client.execute();", "+            Exception caught = null;", "+            try {", "+                worker.join();", "+                caught = worker.getException();", "+            } catch (InterruptedException e){", "+                caught = e;", "+            if (caught != null){", "+                throw new BuildException(caught);", "+            }", "+            return;", "+        // 2) server only (waiting for client)", "+        if (server != null && client == null) {", "+            server.execute();", "+            return;", "+", "+        // 3) client only (connecting to server)", "+        if (server == null && client != null) {", "+            client.execute();", "+            return;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8b01a6d732f5d64eaf48a8d14a6633b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "536bfb63e3ad71036b032550ca8241e07e1f5d45", "commitAfterChange": "b5397fd0e4b2a0e360dc14a9cb1ebec8f4ce7aa5", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 4, "signatureBeforeChange": "         public void init(String tag, AttributeList attrs) throws SAXParseException", "signatureAfterChange": "     private static ProjectHelper newHelper(String helperClass)         throws BuildException", "diff": ["-         */", "-        public void init(String tag, AttributeList attrs) throws SAXParseException {", "-            try {", "-                task = project.createTask(tag);", "-            } catch (BuildException e) {", "-                // swallow here, will be thrown again in ", "-                // UnknownElement.maybeConfigure if the problem persists.", "-            }", "-", "-            if (task == null) {", "-                task = new UnknownElement(tag);", "-                task.setProject(project);", "-                task.setTaskType(tag);", "-                task.setTaskName(tag);", "-            }", "-", "-            task.setLocation(new Location(buildFile.toString(), locator.getLineNumber(), locator.getColumnNumber()));", "-            configureId(task, attrs);", "-", "-            // Top level tasks don't have associated targets", "-            if (target != null) {", "-                task.setOwningTarget(target);", "-                container.addTask(task);", "-                task.init();", "-                wrapper = task.getRuntimeConfigurableWrapper();", "-                wrapper.setAttributes(attrs);", "-                if (parentWrapper != null) {", "-                    parentWrapper.addChild(wrapper);", "-                }", "-            } else {", "-                task.init();", "-                configure(task, attrs, project);", "-            }", "-        }", "+    private static ProjectHelper newHelper(String helperClass)", "+        throws BuildException", "+    {", "+        ClassLoader classLoader = getContextClassLoader();", "+        try {", "+            Class clazz = null;", "+            if (classLoader != null) {", "+                    clazz = classLoader.loadClass(helperClass);", "+                } catch( ClassNotFoundException ex ) {", "+                    // try next method", "+            if( clazz==null ) {", "+                clazz = Class.forName(helperClass);", "+            return ((ProjectHelper) clazz.newInstance());", "+        } catch (Exception e) {", "+            throw new BuildException(e);"]}]}
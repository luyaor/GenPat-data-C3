{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e50c173c603afaf95f5bc6b22daaeeb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12a3a40c2bf8c684397b1344ed6d8800", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/selectors/TypeSelectorTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testSelectionBehaviour()", "signatureAfterChange": "     @Test     public void testSelectionBehaviour()", "diff": ["+    @Test", "-        TypeSelector.FileType directory = new", "-                TypeSelector.FileType();", "+        TypeSelector.FileType directory = new TypeSelector.FileType();", "-        TypeSelector.FileType file = new", "-                TypeSelector.FileType();", "+        TypeSelector.FileType file = new TypeSelector.FileType();", "-        try {", "-            makeBed();", "+    ", "-            s = (TypeSelector)getInstance();", "-            s.setType(directory);", "-            results = selectionString(s);", "-            assertEquals(\"TFFFFFFFFFFT\", results);", "+        s = new TypeSelector();", "+        s.setType(directory);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TFFFFFFFFFFT\", results);", "-            s = (TypeSelector)getInstance();", "-            s.setType(file);", "-            results = selectionString(s);", "-            assertEquals(\"FTTTTTTTTTTF\", results);", "+        s = new TypeSelector();", "+        s.setType(file);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"FTTTTTTTTTTF\", results);", "-", "-        }", "-        finally {", "-            cleanupBed();", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6e0f817835ca236a93fdded8fcb7ec5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/selectors/ModifiedSelectorTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public void testCreatePropertiesCacheViaModifiedSelector()", "signatureAfterChange": "     @Test     public void testCreatePropertiesCacheViaModifiedSelector()", "diff": ["+    @Test", "-        File cachefile = new File(basedir, \"cachefile.properties\");", "-        try {", "+        File cachefile = new File(selectorRule.getProject().getBaseDir(), \"cachefile.properties\");", "+    ", "+        // Configure the selector", "+        ModifiedSelector s = new ModifiedSelector();", "+        s.setDelayUpdate(false);", "+        s.addParam(\"cache.cachefile\", cachefile);", "-            // initialize test environment (called \"bed\")", "-            makeBed();", "+        ModifiedSelector.CacheName cacheName = new ModifiedSelector.CacheName();", "+        cacheName.setValue(\"propertyfile\");", "+        s.setCache(cacheName);", "-            // Configure the selector", "-            ModifiedSelector s = (ModifiedSelector)getSelector();", "-            s.setDelayUpdate(false);", "-            s.addParam(\"cache.cachefile\", cachefile);", "+        s.setUpdate(true);", "-            ModifiedSelector.CacheName cacheName = new ModifiedSelector.CacheName();", "-            cacheName.setValue(\"propertyfile\");", "-            s.setCache(cacheName);", "+        selectorRule.selectionString(s);", "-            s.setUpdate(true);", "-", "-            selectionString(s);", "-", "-            // evaluate correctness", "-            assertTrue(\"Cache file is not created.\", cachefile.exists());", "-        } finally {", "-            cleanupBed();", "-            if (cachefile!=null) cachefile.delete();", "-        }", "+        // evaluate correctness", "+        assertTrue(\"Cache file is not created.\", cachefile.exists());", "+        cachefile.delete();", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebbb2521670913413ba6ee656a76ef9f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/selectors/ModifiedSelectorTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 38, "signatureBeforeChange": "     public void testSeldirs()", "signatureAfterChange": "     @Test     public void testSeldirs()", "diff": ["+    @Test", "-        ModifiedSelector s = (ModifiedSelector)getSelector();", "-        try {", "-            makeBed();", "-", "-            StringBuffer sbTrue  = new StringBuffer();", "-            StringBuffer sbFalse = new StringBuffer();", "-            for (int i=0; i<filenames.length; i++) {", "-                if (files[i].isDirectory()) {", "-                    sbTrue.append(\"T\");", "-                    sbFalse.append(\"F\");", "-                } else {", "-                    sbTrue.append(\"T\");", "-                    sbFalse.append(\"T\");", "-                }", "+        ModifiedSelector s = new ModifiedSelector();", "+        StringBuffer sbTrue  = new StringBuffer();", "+        StringBuffer sbFalse = new StringBuffer();", "+        for (int i=0; i<selectorRule.getFiles().length; i++) {", "+            if (selectorRule.getFiles()[i].isDirectory()) {", "+                sbTrue.append(\"T\");", "+                sbFalse.append(\"F\");", "+            } else {", "+                sbTrue.append(\"T\");", "+                sbFalse.append(\"T\");", "-", "-            s.setSeldirs(true);", "-            performTests(s, sbTrue.toString());", "-            s.getCache().delete();", "-", "-            s.setSeldirs(false);", "-            performTests(s, sbFalse.toString());", "-            s.getCache().delete();", "-", "-        } finally {", "-            cleanupBed();", "-            if (s!=null) s.getCache().delete();", "+", "+        s.setSeldirs(true);", "+        performTests(s, sbTrue.toString());", "+        s.getCache().delete();", "+", "+        s.setSeldirs(false);", "+        performTests(s, sbFalse.toString());", "+        s.getCache().delete();", "+", "+        s.getCache().delete();"]}]}
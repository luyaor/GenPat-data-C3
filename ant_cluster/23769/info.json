{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3cc07c396587b47b57f659af4683a4d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6845382177d18e969debe158f7bdb095", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/tar/TarOutputStream.java", "commitBeforeChange": "0b93bdd7cdfe6a7a48f02cf125014e5d538d5381", "commitAfterChange": "1447e596aa13ca3441f24a8e163f4a255c5a7e23", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void write( byte[] wBuf, int wOffset, int numToWrite )         throws IOException", "signatureAfterChange": "     public void write( final byte[] buffer,                        final int offset,                        final int count )         throws IOException", "diff": ["-    public void write( byte[] wBuf, int wOffset, int numToWrite )", "+    public void write( final byte[] buffer,", "+                       final int offset,", "+                       final int count )", "-        if( ( this.currBytes + numToWrite ) > this.currSize )", "+        int position = offset;", "+        int numToWrite = count;", "+        if( ( m_currBytes + numToWrite ) > m_currSize )", "-            throw new IOException( \"request to write '\" + numToWrite", "-                                   + \"' bytes exceeds size in header of '\"", "-                                   + this.currSize + \"' bytes\" );", "+            final String message = \"request to write '\" + numToWrite +", "+                \"' bytes exceeds size in header of '\" + m_currSize + \"' bytes\";", "+            throw new IOException( message );", "-        if( this.assemLen > 0 )", "+        if( m_assemLen > 0 )", "-            if( ( this.assemLen + numToWrite ) >= this.recordBuf.length )", "+            if( ( m_assemLen + numToWrite ) >= m_recordBuf.length )", "-                int aLen = this.recordBuf.length - this.assemLen;", "+                final int length = m_recordBuf.length - m_assemLen;", "-                System.arraycopy( this.assemBuf, 0, this.recordBuf, 0,", "-                                  this.assemLen );", "-                System.arraycopy( wBuf, wOffset, this.recordBuf,", "-                                  this.assemLen, aLen );", "-                this.buffer.writeRecord( this.recordBuf );", "+                System.arraycopy( m_assemBuf, 0, m_recordBuf, 0,", "+                                  m_assemLen );", "+                System.arraycopy( buffer, position, m_recordBuf,", "+                                  m_assemLen, length );", "+                m_buffer.writeRecord( m_recordBuf );", "-                this.currBytes += this.recordBuf.length;", "-                wOffset += aLen;", "-                numToWrite -= aLen;", "-                this.assemLen = 0;", "+                m_currBytes += m_recordBuf.length;", "+                position += length;", "+                numToWrite -= length;", "+                m_assemLen = 0;", "-                System.arraycopy( wBuf, wOffset, this.assemBuf, this.assemLen,", "+                System.arraycopy( buffer, position, m_assemBuf, m_assemLen,", "-                wOffset += numToWrite;", "-                this.assemLen += numToWrite;", "+                position += numToWrite;", "+                m_assemLen += numToWrite;", "-            if( numToWrite < this.recordBuf.length )", "+            if( numToWrite < m_recordBuf.length )", "-                System.arraycopy( wBuf, wOffset, this.assemBuf, this.assemLen,", "+                System.arraycopy( buffer, position, m_assemBuf, m_assemLen,", "-                this.assemLen += numToWrite;", "+                m_assemLen += numToWrite;", "-            this.buffer.writeRecord( wBuf, wOffset );", "+            m_buffer.writeRecord( buffer, position );", "-            int num = this.recordBuf.length;", "+            int num = m_recordBuf.length;", "-            this.currBytes += num;", "+            m_currBytes += num;", "-            wOffset += num;", "+            position += num;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb20ba6e8b8860082f8a0f20992c2c47", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/tar/TarInputStream.java", "commitBeforeChange": "0b93bdd7cdfe6a7a48f02cf125014e5d538d5381", "commitAfterChange": "1447e596aa13ca3441f24a8e163f4a255c5a7e23", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public int read( byte[] buf, int offset, int numToRead )         throws IOException", "signatureAfterChange": "     public int read( final byte[] buffer,                      final int offset,                      final int count )         throws IOException", "diff": ["-    public int read( byte[] buf, int offset, int numToRead )", "+    public int read( final byte[] buffer,", "+                     final int offset,", "+                     final int count )", "+        int position = offset;", "+        int numToRead = count;", "-        if( this.entryOffset >= this.entrySize )", "+        if( m_entryOffset >= m_entrySize )", "-        if( ( numToRead + this.entryOffset ) > this.entrySize )", "+        if( ( numToRead + m_entryOffset ) > m_entrySize )", "-            numToRead = ( this.entrySize - this.entryOffset );", "+            numToRead = ( m_entrySize - m_entryOffset );", "-        if( this.readBuf != null )", "+        if( null != m_readBuf )", "-            int sz = ( numToRead > this.readBuf.length ) ? this.readBuf.length", "-                : numToRead;", "+            final int size =", "+                ( numToRead > m_readBuf.length ) ? m_readBuf.length : numToRead;", "-            System.arraycopy( this.readBuf, 0, buf, offset, sz );", "+            System.arraycopy( m_readBuf, 0, buffer, position, size );", "-            if( sz >= this.readBuf.length )", "+            if( size >= m_readBuf.length )", "-                this.readBuf = null;", "+                m_readBuf = null;", "-                int newLen = this.readBuf.length - sz;", "-                byte[] newBuf = new byte[ newLen ];", "+                final int newLength = m_readBuf.length - size;", "+                final byte[] newBuffer = new byte[ newLength ];", "-                System.arraycopy( this.readBuf, sz, newBuf, 0, newLen );", "+                System.arraycopy( m_readBuf, size, newBuffer, 0, newLength );", "-                this.readBuf = newBuf;", "+                m_readBuf = newBuffer;", "-            totalRead += sz;", "-            numToRead -= sz;", "-            offset += sz;", "+            totalRead += size;", "+            numToRead -= size;", "+            position += size;", "-            byte[] rec = this.buffer.readRecord();", "-", "-            if( rec == null )", "+            final byte[] rec = m_buffer.readRecord();", "+            if( null == rec )", "-                throw new IOException( \"unexpected EOF with \" + numToRead", "-                                       + \" bytes unread\" );", "+                final String message =", "+                    \"unexpected EOF with \" + numToRead + \" bytes unread\";", "+                throw new IOException( message );", "-            int sz = numToRead;", "-            int recLen = rec.length;", "+            int size = numToRead;", "+            final int recordLength = rec.length;", "-            if( recLen > sz )", "+            if( recordLength > size )", "-                System.arraycopy( rec, 0, buf, offset, sz );", "+                System.arraycopy( rec, 0, buffer, position, size );", "-                this.readBuf = new byte[ recLen - sz ];", "+                m_readBuf = new byte[ recordLength - size ];", "-                System.arraycopy( rec, sz, this.readBuf, 0, recLen - sz );", "+                System.arraycopy( rec, size, m_readBuf, 0, recordLength - size );", "-                sz = recLen;", "+                size = recordLength;", "-                System.arraycopy( rec, 0, buf, offset, recLen );", "+                System.arraycopy( rec, 0, buffer, position, recordLength );", "-            totalRead += sz;", "-            numToRead -= sz;", "-            offset += sz;", "+            totalRead += size;", "+            numToRead -= size;", "+            position += size;", "-        this.entryOffset += totalRead;", "+        m_entryOffset += totalRead;"]}]}
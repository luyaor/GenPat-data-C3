{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b950d704a5696e961cb20b26083b4294", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d4d6c62bdb09ca9deb87a87c701cd0c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/builder/DefaultProjectBuilder.java", "commitBeforeChange": "4ad59f0fc5eb69936f4322c1394993d33299959b", "commitAfterChange": "6e89cb024f5e360f9a4a9a3d9e8b8483c7e1ecee", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void buildTarget( final DefaultProject project, final Configuration target )         throws Exception", "signatureAfterChange": "     private void buildTarget( final DefaultProject project, final Configuration target )         throws Exception", "diff": ["+        verifyName( name, target );", "+", "+        if( getLogger().isDebugEnabled() )", "+        {", "+            final String message = REZ.getString( \"ant.target-parse.notice\", name );", "+            getLogger().debug( message );", "+        }", "+", "+        final String[] dependencies = buildDependsList( depends, target );", "+        final Condition condition = buildCondition( ifCondition, unlessCondition, target );", "+        final Target defaultTarget =", "+            new Target( condition, target.getChildren(), dependencies );", "+", "+        //add target to project", "+        project.addTarget( name, defaultTarget );", "+    }", "-        if( getLogger().isDebugEnabled() )", "-        {", "-            final String message = REZ.getString( \"ant.target-parse.notice\", name );", "-            getLogger().debug( message );", "-        }", "-", "-        if( null != ifCondition && null != unlessCondition )", "-        {", "-            final String message =", "-                REZ.getString( \"ant.target-bad-logic.error\", target.getLocation() );", "-            throw new Exception( message );", "-        }", "-", "-        Condition condition = null;", "-", "-        if( null != ifCondition )", "-        {", "-            if( getLogger().isDebugEnabled() )", "-            {", "-                final String message = REZ.getString( \"ant.target-if.notice\", ifCondition );", "-                getLogger().debug( message );", "-            }", "-            condition = new Condition( true, ifCondition );", "-        }", "-        else if( null != unlessCondition )", "-        {", "-            if( getLogger().isDebugEnabled() )", "-            {", "-                final String message = REZ.getString( \"ant.target-unless.notice\", unlessCondition );", "-                getLogger().debug( message );", "-            }", "-            condition = new Condition( false, unlessCondition );", "-        }", "-", "-        final Target defaultTarget =", "-            new Target( condition, target.getChildren(), dependencies );", "-        //add target to project", "-        project.addTarget( name, defaultTarget );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5094c2c978e4dadb7daadf77e76cd8cd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/builder/DefaultProjectBuilder.java", "commitBeforeChange": "b3c44651dba0b0dd33a68baab7afdb4175d6fe93", "commitAfterChange": "f522a0a7baf7e79ed933ed7714e6c6c15c51ac0a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void buildTarget( final DefaultProject project, final Configuration target )         throws Exception", "signatureAfterChange": "     private void buildTarget( final DefaultProject project, final Configuration target )         throws Exception", "diff": ["-            throw new Exception( \"Discovered un-named target at \" +", "-                                 target.getLocation() );", "+            final String message = ", "+                REZ.getString( \"ant.target-noname.error\", target.getLocation() );", "+            throw new Exception( message );", "-            throw new Exception( \"Target with an invalid name at \" +", "-                                 target.getLocation() );", "+            final String message = ", "+                REZ.getString( \"ant.target-bad-name.error\", target.getLocation() );", "+            throw new Exception( message );", "-        getLogger().debug( \"Parsing target: \" + name );", "+        if( getLogger().isDebugEnabled() )", "+        {", "+            final String message = REZ.getString( \"ant.target-parse.notice\", name );", "+            getLogger().debug( message );", "+        }", "-            throw new Exception( \"Discovered invalid target that has both a if and \" +", "-                                    \"unless condition at \" + target.getLocation() );", "+            final String message = ", "+                REZ.getString( \"ant.target-bad-logic.error\", target.getLocation() );", "+            throw new Exception( message );", "-            getLogger().debug( \"Target if condition: \" + ifCondition );", "+            if( getLogger().isDebugEnabled() )", "+            {", "+                final String message = REZ.getString( \"ant.target-if.notice\", ifCondition );", "+                getLogger().debug( message );", "+            }", "-            getLogger().debug( \"Target unless condition: \" + unlessCondition );", "+            if( getLogger().isDebugEnabled() )", "+            {", "+                final String message = REZ.getString( \"ant.target-unless.notice\", unlessCondition );", "+                getLogger().debug( message );", "+            }", "-                    throw new Exception( \"Discovered empty dependency in target \" +", "-                                         target.getName() + \" at \" + target.getLocation() );", "+                    final String message = REZ.getString( \"ant.target-bad-dependency.error\", ", "+                                                          target.getName(), ", "+                                                          target.getLocation() );", "+                    throw new Exception( message );", "-                getLogger().debug( \"Target dependency: \" + dependency );", "+                if( getLogger().isDebugEnabled() )", "+                {", "+                    final String message = REZ.getString( \"ant.target-dependency.notice\", dependency );", "+                    getLogger().debug( message );", "+                }   ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "515df94674cac3340ffe63c6a450e6a3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/builder/DefaultProjectBuilder.java", "commitBeforeChange": "50fb7f5643cba98640e7d4ce2b00736e9d42cbab", "commitAfterChange": "6ff9bf50ad2e4fcda69911d207c8dfe93e7b4e0b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      private String[] buildDependsList( final String depends, final Configuration target )         throws ProjectException", "signatureAfterChange": "      private Dependency[] buildDependsList( final String depends, final Configuration target )         throws ProjectException", "diff": ["-    private String[] buildDependsList( final String depends, final Configuration target )", "+    private Dependency[] buildDependsList( final String depends, final Configuration target )", "-        String[] dependencies = null;", "-", "-        if( null != depends )", "+        if( null == depends )", "-            final String[] elements = StringUtil.split( depends, \",\" );", "-            final ArrayList dependsList = new ArrayList();", "-", "-            for( int i = 0; i < elements.length; i++ )", "-            {", "-                final String dependency = elements[ i ].trim();", "-", "-                if( 0 == dependency.length() )", "-                {", "-                    final String message = REZ.getString( \"ant.target-bad-dependency.error\",", "-                                                          target.getName(),", "-                                                          target.getLocation() );", "-                    throw new ProjectException( message );", "-                }", "-", "-                if( getLogger().isDebugEnabled() )", "-                {", "-                    final String message = REZ.getString( \"ant.target-dependency.notice\", dependency );", "-                    getLogger().debug( message );", "-                }", "-", "-                dependsList.add( dependency );", "-            }", "-", "-            dependencies = (String[])dependsList.toArray( new String[ 0 ] );", "+            return null;", "-        return dependencies;", "-    }", "+        final String[] elements = StringUtil.split( depends, \",\" );", "+        final ArrayList dependsList = new ArrayList();", "+        for( int i = 0; i < elements.length; i++ )", "+            final String dependency = elements[ i ].trim();", "+", "+                final String message = REZ.getString( \"ant.target-dependency.notice\", dependency );", "+            // Split project->target dependencies", "+            final int sep = dependency.indexOf( \"->\" );", "+            final String projectName;", "+            final String targetName;", "+            if( sep != -1 )", "+                projectName = dependency.substring( 0, sep );", "+                targetName = dependency.substring( sep + 2 );", "+            else", "+            {", "+                projectName = null;", "+                targetName = dependency;", "+            }", "+", "+            if( targetName.length() == 0 || ( projectName != null && projectName.length() == 0 ) )", "+            {", "+                final String message = REZ.getString( \"ant.target-bad-dependency.error\",", "+                                                      target.getName(),", "+                                                      target.getLocation() );", "+                throw new ProjectException( message );", "+            }", "+", "+            dependsList.add( new Dependency( projectName, targetName ) );", "+        return (Dependency[])dependsList.toArray( new Dependency[dependsList.size() ] );"]}]}
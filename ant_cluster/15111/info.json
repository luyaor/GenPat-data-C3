{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1df0f06e0aee0ff5868c7238788e7b1d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3757188d4fa8deccc6c33b3a0db397bc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/runtime/ConverterDef.java", "commitBeforeChange": "8d226e312c364e3465737658341d24cf795c3393", "commitAfterChange": "bc34bb06ca8b29568e31990be726d04559ca2972", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void execute()         throws TaskException", "signatureAfterChange": "      public void execute()         throws TaskException", "diff": ["-            final ConverterRegistry converterRegistry = (ConverterRegistry)getService( ConverterRegistry.class );", "-            converterRegistry.registerConverter( m_classname, m_sourceType, m_destinationType );", "-", "-            final URL url = m_lib.toURL();", "-            final DefaultTypeFactory factory = new DefaultTypeFactory( new URL[]{url} );", "-            factory.addNameClassMapping( m_classname, m_classname );", "-", "-            final TypeManager typeManager = (TypeManager)getService( TypeManager.class );", "-            typeManager.registerType( Converter.ROLE, m_classname, factory );", "+            // Locate the deployer, then deploy the converter", "+            final Deployer deployer = (Deployer)getService( Deployer.class );", "+            final TypeDeployer typeDeployer = deployer.createDeployer( m_lib );", "+            typeDeployer.deployConverter( m_classname, m_sourceType, m_destinationType );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5af1edeae4df50aa86bec0292d5e497", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/framework/AbstractTypeDef.java", "commitBeforeChange": "8d226e312c364e3465737658341d24cf795c3393", "commitAfterChange": "bc34bb06ca8b29568e31990be726d04559ca2972", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void execute()         throws TaskException", "signatureAfterChange": "      public void execute()         throws TaskException", "diff": ["-        final String typeName = getTypeName();", "-        final RoleManager roleManager = (RoleManager)getService( RoleManager.class );", "-        final String role = roleManager.getRoleForName( typeName );", "+        final String shorthand = getRoleShorthand();", "-        final ClassLoader classLoader = createClassLoader();", "-        final DefaultTypeFactory factory = new DefaultTypeFactory( classLoader );", "-        factory.addNameClassMapping( m_name, m_className );", "-", "-        final TypeManager typeManager = (TypeManager)getService( TypeManager.class );", "-            typeManager.registerType( role, m_name, factory );", "+            // Locate the deployer, and use it to deploy the type", "+            final Deployer deployer = (Deployer)getService( Deployer.class );", "+            final TypeDeployer typeDeployer = deployer.createDeployer( m_lib );", "+            typeDeployer.deployType( shorthand, m_name, m_className );", "-        catch( final TypeException te )", "+        catch( DeploymentException e )", "-            final String message = REZ.getString( \"typedef.no-register.error\" );", "-            throw new TaskException( message, te );", "+            throw new TaskException( e.getMessage(), e );"]}]}
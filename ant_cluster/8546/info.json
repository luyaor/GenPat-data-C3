{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b401e91ca8a44daa6d2d659b480efc12", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b7b5b0c877d1dbea1f4511ef403f4a9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Move.java", "commitBeforeChange": "2a713cc02adc21aa5bd5189c8a2718631e6f6a88", "commitAfterChange": "99067d060752e5a89c24d99c17b6eb7231f96380", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      protected void doFileOperations()", "signatureAfterChange": "      protected void doFileOperations()", "diff": ["-                String toFile = (String) fileCopyMap.get(fromFile);", "-                if (fromFile.equals(toFile)) {", "-                    log(\"Skipping self-move of \" + fromFile, verbosity);", "-                    continue;", "-                }", "-", "-                boolean moved = false;", "-", "+                boolean selfMove = false;", "-                    File d = new File(toFile);", "+                    String[] toFiles = (String[]) fileCopyMap.get(fromFile);", "+                    for (int i = 0; i < toFiles.length; i++) {", "+                        String toFile = (String) toFiles[i];", "-                    try {", "-                        log(\"Attempting to rename: \" + fromFile", "-                            + \" to \" + toFile, verbosity);", "-                        moved = renameFile(f, d, filtering, forceOverwrite);", "-                    } catch (IOException ioe) {", "-                        String msg = \"Failed to rename \" + fromFile", "-                            + \" to \" + toFile", "-                            + \" due to \" + ioe.getMessage();", "-                        throw new BuildException(msg, ioe, getLocation());", "-                    }", "+                        if (fromFile.equals(toFile)) {", "+                            log(\"Skipping self-move of \" + fromFile, verbosity);", "+                            selfMove = true;", "-                    if (!moved) {", "-                        try {", "-                            log(\"Moving \" + fromFile + \" to \" + toFile,", "-                                verbosity);", "-", "-                            FilterSetCollection executionFilters =", "-                                new FilterSetCollection();", "-                            if (filtering) {", "-                                executionFilters", "-                                    .addFilterSet(getProject().getGlobalFilterSet());", "-                            }", "-                            for (Enumeration filterEnum =", "-                                     getFilterSets().elements();", "-                                 filterEnum.hasMoreElements();) {", "-                                executionFilters", "-                                    .addFilterSet((FilterSet) filterEnum", "-                                                  .nextElement());", "-                            }", "-                            getFileUtils().copyFile(f, d, executionFilters,", "-                                                    getFilterChains(),", "-                                                    forceOverwrite,", "-                                                    getPreserveLastModified(),", "-                                                    getEncoding(),", "-                                                    getOutputEncoding(),", "-                                                    getProject());", "-", "-                            f = new File(fromFile);", "-                            if (!f.delete()) {", "-                                throw new BuildException(\"Unable to delete \"", "-                                                         + \"file \"", "-                                                         + f.getAbsolutePath());", "-                            }", "-                        } catch (IOException ioe) {", "-                            String msg = \"Failed to copy \" + fromFile + \" to \"", "-                                + toFile", "-                                + \" due to \" + ioe.getMessage();", "-                            throw new BuildException(msg, ioe, getLocation());", "+                            // if this is the last time through the loop then", "+                            // move will not occur, but that's what we want", "+                            continue;", "+                        }", "+                        File d = new File(toFile);", "+                        if ((i + 1) == toFiles.length && !selfMove) {", "+                            // Only try to move if this is the last mapped file", "+                            // and one of the mappings isn't to itself", "+                            moveFile(f, d, filtering, forceOverwrite);", "+                        } else {", "+                            copyFile(f, d, filtering, forceOverwrite);", "-            int count = 0;", "+            int createCount = 0;", "-                String toDirName = (String) dirCopyMap.get(fromDirName);", "-                File fromDir = new File(fromDirName);", "-                File toDir = new File(toDirName);", "-                if (!toDir.exists()) {", "-                    if (!toDir.mkdirs()) {", "-                        log(\"Unable to create directory \"", "-                            + toDirName, Project.MSG_ERR);", "-                    } else {", "-                        count++;", "+                String[] toDirNames = (String[]) dirCopyMap.get(fromDirName);", "+                boolean selfMove = false;", "+                for (int i = 0; i < toDirNames.length; i++) {", "+", "+                    if (fromDirName.equals(toDirNames[i])) {", "+                        log(\"Skipping self-move of \" + fromDirName, verbosity);", "+                        selfMove = true;", "+                        continue;", "+                    }", "+", "+                    File d = new File(toDirNames[i]);", "+                    if (!d.exists()) {", "+                        if (!d.mkdirs()) {", "+                            log(\"Unable to create directory \"", "+                                + d.getAbsolutePath(), Project.MSG_ERR);", "+                        } else {", "+                            createCount++;", "+                        }", "-                if (okToDelete(fromDir)) {", "+", "+                File fromDir = new File(fromDirName);", "+                if (!selfMove && okToDelete(fromDir)) {", "+", "-            if (count > 0) {", "-                log(\"Moved \" + count + \" empty directories to \"", "+            if (createCount > 0) {", "+                log(\"Moved \" + dirCopyMap.size()", "+                    + \" empty director\"", "+                    + (dirCopyMap.size()== 1 ? \"y\" : \"ies\")", "+                    + \" to \" + createCount", "+                    + \" empty director\"", "+                    + (createCount == 1 ? \"y\" : \"ies\") + \" under \""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e18c20d41f478be890b71e8e8cdd497b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Available.java", "commitBeforeChange": "b6e535486e4b58d1ae642fa6e7ea1e3e45bc24e2", "commitAfterChange": "8a676908c40081a254a7af5955d7e2065ecffbd1", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      private boolean checkFile()", "signatureAfterChange": "      private boolean checkFile()", "diff": ["-            return checkFile(file);", "+            return checkFile(project.resolveFile(file), file);", "-                String dirname = path.getParent();", "-                if (type != null) {", "-                    if (type.equalsIgnoreCase(\"dir\")) {", "-                        if (path.isFile()) {", "-                            // full-pathname specified", "-                            if (dirname.equals(path.toString())) {", "-                                log(\"Found directory: \" + path, Project.MSG_VERBOSE);", "-                                return true;", "-                            // simple name specified", "-                            } else if(new File(dirname, file).isDirectory()) {", "-                                log(\"Found directory: \" + dirname + File.separator + file, Project.MSG_VERBOSE);", "-                                return true;", "-                            }", "-                        // full-pathname specified", "-                        } else if (path.toString().equals(new File(file).toString()) && path.isDirectory()) {", "-                                log(\"Found directory: \" + path, Project.MSG_VERBOSE);", "-                                return true;", "-                        // simple name specified", "-                        } else if (new File(path, file).isDirectory()) {", "-                                log(\"Found directory: \" + path + File.separator + file, Project.MSG_VERBOSE);", "-                                return true;", "-                        }", "-                    /* end check for type dir */", "-                    } else {", "-                        if (path.toString().equals(new File(file).toString()) && path.isFile()) {", "-                                log(\"Found file: \" + path, Project.MSG_VERBOSE);", "-                                return true;", "-                        } else if (new File(path, file).isFile()) {", "-                            log(\"Found file: \" + path + File.separator + file, Project.MSG_VERBOSE);", "-                            return true;", "-                        } else if (new File(dirname, file).isFile()) {", "-                            log(\"Found file: \" + dirname + File.separator + file, Project.MSG_VERBOSE);", "-                            return true;", "-                        }", "-                    }", "-                /* end check for specified type */", "-                } else {", "-                    if (path.toString().equals(new File(file).toString())) {", "+", "+                // **   full-pathname specified == path in list", "+                // **   simple name specified   == path in list", "+                if (path.exists() && file.equals(paths[i])) {", "+                    if (type == null) {", "-                    } else if (new File(path, file).exists()) {", "-                        log(\"Found: \" + path + File.separator + file, Project.MSG_VERBOSE);", "+                    } else if (type.equalsIgnoreCase(\"dir\") ", "+                               && path.isDirectory()) {", "+                        log(\"Found directory: \" + path, Project.MSG_VERBOSE);", "-                    } else if (new File(dirname, file).exists()) {", "-                        log(\"Found: \" + dirname + File.separator + file, Project.MSG_VERBOSE);", "+                    } else if (type.equalsIgnoreCase(\"file\") ", "+                               && path.isFile()) {", "+                        log(\"Found file: \" + path, Project.MSG_VERBOSE);", "-                    } else {", "-                        File dir = new File(dirname);", "-                        dirname = dir.getParent();", "-                        if (new File(dirname, file).exists()) {", "-                            log(\"Found: \" + dirname + File.separator + file, Project.MSG_VERBOSE);", "+                    }", "+                    // not the requested type", "+                    return false;", "+                }", "+                ", "+                FileUtils fileUtils = FileUtils.newFileUtils();", "+                File parent = fileUtils.getParentFile(path);", "+                // **   full-pathname specified == parent dir of path in list", "+                if (parent != null && parent.exists() ", "+                    && file.equals(parent.getAbsolutePath())) {", "+                    if (type == null) {", "+                        log(\"Found: \" + parent, Project.MSG_VERBOSE);", "+                        return true;", "+                    } else if (type.equalsIgnoreCase(\"dir\")) {", "+                        log(\"Found directory: \" + parent, Project.MSG_VERBOSE);", "+                        return true;", "+                    }", "+                    // not the requested type", "+                    return false;", "+                }", "+", "+                // **   simple name specified   == path in list + name", "+                if (path.exists() && path.isDirectory()) {", "+                    if (checkFile(new File(path, file), ", "+                                  file + \" in \" + path)) {", "+                        return true;", "+                    }", "+                }", "+                ", "+                // **   simple name specified   == parent dir + name", "+                if (parent != null && parent.exists()) {", "+                    if (checkFile(new File(parent, file), ", "+                                  file + \" in \" + parent)) {", "+                        return true;", "+                    }", "+                }", "+                ", "+                // **   simple name specified   == parent of parent dir + name", "+                if (parent != null) {", "+                    File grandParent = fileUtils.getParentFile(parent);", "+                    if (grandParent != null && grandParent.exists()) {", "+                        if (checkFile(new File(grandParent, file), ", "+                                      file + \" in \" + grandParent)) {"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f02b1411d940759619f4ba700c20fcd3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6de11927f3918d1967831e2e4c37f0aa", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "930f2f2030a279a8565becb92ecf5407d5972589", "commitAfterChange": "8585763d2022bbdda30bb6a7e2d523fbea25542a", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private void checkIncludePatterns()", "signatureAfterChange": "     private void checkIncludePatterns()", "diff": ["+            // we need to call getCanonicalFile here for DOS systems", "+            // the reason being that otherwise File will be influenced", "+            // by the case of currentelement, which we want to avoid", "+            if (Os.isFamily(\"dos\") && myfile.exists()) {", "+                try {", "+                    // getAbsoluteFile() is not enough here unfortunately", "+                    myfile = myfile.getCanonicalFile();", "+                }", "+                catch (Exception ex) {", "+                    throw new BuildException(ex);", "+                }", "+                // the variable currentelement is actually telling what", "+                // the scan results will contain", "+                currentelement = fileUtils.removeLeadingPath(basedir,", "+                                                             myfile);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd564ecd1862b52d907e919a153cbf90", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/TraXLiaisonTest.java", "commitBeforeChange": "84926aa016ebb2053d9573a2908996f35d2522cb", "commitAfterChange": "2b79ae4693fc4e6091944dbc6fa93c401cd84446", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testXalan2Redirect() throws Exception", "signatureAfterChange": "      public void testXalan2Redirect() throws Exception", "diff": ["+    \tClass clazz = null;", "+    \ttry {", "+    \t\tclazz = getClass().getClassLoader().loadClass(\"org.apache.xalan.lib.Redirect\");", "+    \t} catch (Exception exc) {", "+    \t\t// ignore", "+    \t}", "+    \tif (clazz == null) {", "+    \t\tSystem.out.println(\"xalan redirect is not on the classpath\");", "+    \t\treturn;", "+    \t}"]}]}
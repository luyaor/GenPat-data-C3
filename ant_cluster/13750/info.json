{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5353e432fc737529cbee8db131105bb9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9735eba2fc1cd55e835fd2a88f116cb0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Expand.java", "commitBeforeChange": "c840cbe680b4b76d465bc7e4390c86cae18b57dc", "commitAfterChange": "53588f1250f43815d4c92de79c326dd3665fb83c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-                    ", "+        ", "+        File srcF=project.resolveFile(source);", "+        File dir=project.resolveFile(dest);", "+        ", "+        ZipInputStream zis = null;", "-\t    File srcF=project.resolveFile(source);", "-\t    File dir=project.resolveFile(dest);", "-\t    ZipInputStream zis = new ZipInputStream(new FileInputStream(srcF));", "+\t    zis = new ZipInputStream(new FileInputStream(srcF));", "+\t\tFile f = new File(dir, project.translatePath(ze.getName()));", "-\t\t    File f = new File(dir, project.translatePath(ze.getName()));", "-\t\t    System.out.println(\"FileNotFoundException: \" +  ze.getName()  );", "+\t\t    log(\"Unable to expand to file \" + f.getPath(), Project.MSG_WARN);", "-\t    log(\"</log:expand>\", Project.MSG_VERBOSE );", "+\t    log(\"expand complete\", Project.MSG_VERBOSE );", "-\t    ioe.printStackTrace();", "+\t    throw new BuildException(\"Error while expanding \" + srcF.getPath(), ioe);", "+\t} finally {", "+\t    if (zis != null) {", "+\t        try {", "+\t            zis.close();", "+\t        }", "+\t        catch (IOException e) {}", "+\t    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99b602cd7916d9d8b19893856097f7ea", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/RExecTask.java", "commitBeforeChange": "befcdc72067b9a6018e163337b95e4877762be24", "commitAfterChange": "8fac17d331ce4c61907a29471f1febd5730c4d95", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        rexec = new AntRExecClient();", "+        AntRExecClient rexec = null;", "-            rexec.connect(server, port);", "-        } catch (IOException e) {", "-            throw new BuildException(\"Can't connect to \" + server);", "-        }", "-        /**  Login if userid and password were specified */", "-        if (userid != null && password != null) {", "-            login();", "-        }", "-        /**  Process each sub command */", "-        Enumeration tasksToRun = rexecTasks.elements();", "-        while (tasksToRun != null && tasksToRun.hasMoreElements()) {", "-            RExecSubTask task = (RExecSubTask) tasksToRun.nextElement();", "-            if (task instanceof RExecRead && defaultTimeout != null) {", "-                ((RExecRead) task).setDefaultTimeout(defaultTimeout);", "+            rexec = new AntRExecClient();", "+            try {", "+                rexec.connect(server, port);", "+            } catch (IOException e) {", "+                throw new BuildException(\"Can't connect to \" + server);", "-            task.execute(rexec);", "-        }", "+            /**  Login if userid and password were specified */", "+            if (userid != null && password != null) {", "+                login(rexec);", "+            }", "+            /**  Process each sub command */", "+            Enumeration tasksToRun = rexecTasks.elements();", "+            while (tasksToRun != null && tasksToRun.hasMoreElements()) {", "+                RExecSubTask task = (RExecSubTask) tasksToRun.nextElement();", "+                if (task instanceof RExecRead && defaultTimeout != null) {", "+                    ((RExecRead) task).setDefaultTimeout(defaultTimeout);", "+                }", "+                task.execute(rexec);", "+            }", "-        /** Keep reading input stream until end of it or time-out */", "-        rexec.waitForEOF(defaultTimeout);", "+            /** Keep reading input stream until end of it or time-out */", "+            rexec.waitForEOF(defaultTimeout);", "+       } finally {", "+           if (rexec != null) {", "+               try {", "+                   rexec.disconnect();", "+               } catch (IOException e) {", "+                   throw new BuildException(\"Error disconnecting from \" ", "+                                            + server);", "+               }", "+           }", "+       }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "97f20812a48aae2b9a20e04006469bf8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3be0efb4e5d2e2a4084825b4d69c6c5d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/i18n/TranslateTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private boolean compareFiles(File file1, File file2)", "signatureAfterChange": "     private boolean compareFiles(File file1, File file2) throws IOException", "diff": ["-    private boolean compareFiles(File file1, File file2) {", "-        try {", "-            if (!file1.exists() || !file2.exists()) {", "-                System.out.println(\"One or both files do not exist:\" + file1.getAbsoluteFile() + \", \" + file2.getAbsoluteFile());", "-                return false;", "-            }", "-", "-            if (file1.length() != file2.length()) {", "-                System.out.println(\"File size mismatch:\" + file1.getAbsoluteFile() + \"(\" + file1.length() + \"), \" +", "-                                   file2.getAbsoluteFile()  + \"(\" + file2.length() + \")\");", "-                return false;", "-            }", "-", "-            // byte - byte compare", "-            byte[] buffer1 = new byte[BUF_SIZE];", "-            byte[] buffer2 = new byte[BUF_SIZE];", "-", "-            FileInputStream fis1 = new FileInputStream(file1);", "-            FileInputStream fis2 = new FileInputStream(file2);", "-            int index = 0;", "-            int read = 0;", "-            while ((read = fis1.read(buffer1)) != -1) {", "-                fis2.read(buffer2);", "-                for (int i = 0; i < read; ++i, ++index) {", "-                    if (buffer1[i] != buffer2[i]) {", "-                        System.out.println(\"Bytes mismatch:\" + file1.getAbsoluteFile() + \", \" + file2.getAbsoluteFile() +", "-                                           \" at byte \" + index);", "-                        return false;", "-                    }", "-                }", "-            }", "-            return true;", "-        }", "-        catch (IOException e) {", "-            System.out.println(\"IOException comparing files: \" + file1.getAbsoluteFile() + \", \" + file2.getAbsoluteFile());", "+    private boolean compareFiles(File file1, File file2) throws IOException {", "+        if (!file1.exists() || !file2.exists()) {", "+", "+        if (file1.length() != file2.length()) {", "+            return false;", "+        }", "+", "+        // byte - byte compare", "+        byte[] buffer1 = new byte[BUF_SIZE];", "+        byte[] buffer2 = new byte[BUF_SIZE];", "+", "+        FileInputStream fis1 = new FileInputStream(file1);", "+        FileInputStream fis2 = new FileInputStream(file2);", "+        int index = 0;", "+        int read = 0;", "+        while ((read = fis1.read(buffer1)) != -1) {", "+            fis2.read(buffer2);", "+            for (int i = 0; i < read; ++i, ++index) {", "+                if (buffer1[i] != buffer2[i]) {", "+                    return false;", "+                }", "+            }", "+        }", "+        return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5e93286b73ad6a317faafae13135784", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/FilterSetTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 15, "signatureBeforeChange": "      private boolean compareFiles(String name1, String name2)", "signatureAfterChange": "      private boolean compareFiles(String name1, String name2) throws IOException", "diff": ["-    private boolean compareFiles(String name1, String name2) {", "+    private boolean compareFiles(String name1, String name2) throws IOException {", "-        try {", "-            if (!file1.exists() || !file2.exists()) {", "-                System.out.println(\"One or both files do not exist:\" + name1 + \", \" + name2);", "-                return false;", "-            }", "-            if (file1.length() != file2.length()) {", "-                System.out.println(\"File size mismatch:\" + name1 + \"(\" + file1.length() + \"), \" +", "-                                   name2  + \"(\" + file2.length() + \")\");", "-                return false;", "-            }", "-", "-            // byte - byte compare", "-            byte[] buffer1 = new byte[BUF_SIZE];", "-            byte[] buffer2 = new byte[BUF_SIZE];", "-", "-            FileInputStream fis1 = new FileInputStream(file1);", "-            FileInputStream fis2 = new FileInputStream(file2);", "-            int index = 0;", "-            int read = 0;", "-            while ((read = fis1.read(buffer1)) != -1) {", "-                fis2.read(buffer2);", "-                for (int i = 0; i < read; ++i, ++index) {", "-                    if (buffer1[i] != buffer2[i]) {", "-                        System.out.println(\"Bytes mismatch:\" + name1 + \", \" + name2 +", "-                                           \" at byte \" + index);", "-                        return false;", "-                    }", "-                }", "-            }", "-            return true;", "-        }", "-        catch (IOException e) {", "-            System.out.println(\"IOException comparing files: \" + name1 + \", \" + name2);", "+        if (!file1.exists() || !file2.exists()) {", "+", "+        if (file1.length() != file2.length()) {", "+            return false;", "+        }", "+", "+        // byte - byte compare", "+        byte[] buffer1 = new byte[BUF_SIZE];", "+        byte[] buffer2 = new byte[BUF_SIZE];", "+", "+        FileInputStream fis1 = new FileInputStream(file1);", "+        FileInputStream fis2 = new FileInputStream(file2);", "+        int index = 0;", "+        int read = 0;", "+        while ((read = fis1.read(buffer1)) != -1) {", "+            fis2.read(buffer2);", "+            for (int i = 0; i < read; ++i, ++index) {", "+                if (buffer1[i] != buffer2[i]) {", "+                    return false;", "+                }", "+            }", "+        }", "+        return true;", "+"]}]}
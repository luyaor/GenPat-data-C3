{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9ae14d2b27317f26e8d417019cfd2d06", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "611c91a5a8ffa49ce4453bae2d6b4fc7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Delete.java", "commitBeforeChange": "ccea996681f5f6e770cd8a4a204c383ece7e14f2", "commitAfterChange": "38c1cabaac10ef23cbc89b96b6b4f37159233580", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        if (f == null && delDir == null) {", "-            throw new BuildException(\"<file> or <dir> attribute must be set!\");", "+        if (usedMatchingTask) {", "+            log(\"DEPRECATED - Use of the implicit FileSet is deprecated.  Use a nested fileset element instead.\");", "+        }", "+", "+        if (file == null && dir == null && filesets.size() == 0) {", "+            throw new BuildException(\"At least one of the file or dir attributes, or a fileset element, must be set.\");", "-        // old <delete> functionality must still work", "-        if (f != null) {", "-            if (f.exists()) {", "-                if (f.isDirectory()) {", "-                    log(\"Directory: \" + f.getAbsolutePath() + \" cannot be removed with delete.  Use Deltree instead.\");", "+        // delete the single file", "+        if (file != null) {", "+            if (file.exists()) {", "+                if (file.isDirectory()) {", "+                    log(\"Directory \" + file.getAbsolutePath() + \" cannot be removed using the file attribute.  Use dir instead.\");", "-                    log(\"Deleting: \" + f.getAbsolutePath());", "-", "-                    if (!f.delete()) {", "-                        throw new BuildException(\"Unable to delete file \" + f.getAbsolutePath());", "+                    log(\"Deleting: \" + file.getAbsolutePath());", "+  ", "+                    if (!file.delete()) {", "+                        throw new BuildException(\"Unable to delete file \" + file.getAbsolutePath());", "-            } ", "-        } ", "+            } else {", "+                log(\"Could not find file \" + file.getAbsolutePath() + \" to delete.\");", "+            }", "+        }", "-        // now we'll do the fancy pattern-driven deletes", "-        if (delDir == null) {", "-            return;", "-        } ", "+        // delete the directory", "+        if (dir != null && !usedMatchingTask) {", "+            log(\"Deleting directory \" + dir.getAbsolutePath());", "+            removeDir(dir);", "+        }", "-        if (!delDir.exists()) {", "-            throw new BuildException(\"dir does not exist!\");", "-        } ", "+        // delete the files in the filesets", "+        for (int i=0; i<filesets.size(); i++) {", "+            FileSet fs = (FileSet) filesets.elementAt(i);", "+            DirectoryScanner ds = fs.getDirectoryScanner(project);", "+            String[] files = ds.getIncludedFiles();", "+            removeFiles(fs.getDir(project), files);", "+        }", "-        DirectoryScanner ds = super.getDirectoryScanner(delDir);", "-        String[] files = ds.getIncludedFiles();", "-", "-        if (files.length > 0) {", "-            log(\"Deleting \" + files.length + \" file\"", "-                + (files.length == 1 ? \"\" : \"s\")", "-                + \" from \" + delDir.getAbsolutePath());", "-", "-            for (int i = 0; i < files.length; i++) {", "-                File f = new File(delDir, files[i]);", "-", "-                if (f.exists()) {", "-                    log(\"Deleting: \" + f.getAbsolutePath(), verbosity);", "-", "-                    if (!f.delete()) {", "-                        throw new BuildException(\"Unable to delete \" + f.getAbsolutePath());", "-                    } ", "-                } ", "-            } ", "-        } ", "+        // delete the files from the default fileset", "+        if (usedMatchingTask && dir != null) {", "+            DirectoryScanner ds = super.getDirectoryScanner(dir);", "+            String [] files = ds.getIncludedFiles();", "+            removeFiles(dir, files);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3640ba6881c752357379710160f4cd5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Delete.java", "commitBeforeChange": "8947bdbc21d3439529ce0f424f5224c500bc7958", "commitAfterChange": "9bd75d2c4e8bb5387ec65dd76ccf483f2bec59e7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+     */", "+    public void execute() throws BuildException {", "+        if (f == null && delDir == null) {", "+            throw new BuildException(\"<file> or <dir> attribute must be set!\");", "+        } ", "+        // old <delete> functionality must still work", "+        if (f != null) {", "+            if (f.exists()) {", "+                if (f.isDirectory()) {", "+                    log(\"Directory: \" + f.getAbsolutePath() + \" cannot be removed with delete.  Use Deltree instead.\");", "+                } else {", "+                    log(\"Deleting: \" + f.getAbsolutePath());", "-   */", "-  public void execute() throws BuildException {", "+                    if (!f.delete()) {", "+                        throw new BuildException(\"Unable to delete file \" + f.getAbsolutePath());", "+                    } ", "+                } ", "+            } ", "+        } ", "-    if (f == null && delDir == null) {", "-      throw new BuildException(\"<file> or <dir> attribute must be set!\");", "-    }", "+        // now we'll do the fancy pattern-driven deletes", "+        if (delDir == null) {", "+            return;", "+        } ", "-    // old <delete> functionality must still work", "-    if (f != null) {", "-      if (f.exists()) {", "-        if (f.isDirectory()) {", "-          project", "-            .log(\"Directory: \" + f.getAbsolutePath()", "-                 + \" cannot be removed with delete.  Use Deltree instead.\");", "-        }", "-        else {", "-          project.log(\"Deleting: \" + f.getAbsolutePath());", "-          if (!f.delete()) {", "-\t      throw new BuildException(\"Unable to delete file \" + f.getAbsolutePath());", "-          }", "-        }", "-      }", "-    }", "+        if (!delDir.exists()) {", "+            throw new BuildException(\"dir does not exist!\");", "+        } ", "-    // now we'll do the fancy pattern-driven deletes", "-    if (delDir == null) {", "-      return;", "-    }", "-    if (!delDir.exists()) {", "-      throw new BuildException(\"dir does not exist!\");", "-    }", "-    DirectoryScanner ds    = super.getDirectoryScanner(delDir);", "-    String[]         files = ds.getIncludedFiles();", "+        DirectoryScanner ds = super.getDirectoryScanner(delDir);", "+        String[] files = ds.getIncludedFiles();", "-    if (files.length > 0) {", "-      project.log(\"Deleting \" + files.length + \" files from \" + delDir.getAbsolutePath());", "-      for (int i = 0; i < files.length; i++) {", "-        File f = new File(delDir, files[i]);", "+        if (files.length > 0) {", "+            log(\"Deleting \" + files.length + \" files from \" + delDir.getAbsolutePath());", "-        if (f.exists()) {", "-          project.log(\"Deleting: \" + f.getAbsolutePath(), verbosity);", "-          if (!f.delete()) {", "-\t      throw new BuildException(\"Unable to delete \" + f.getAbsolutePath());", "-          }", "-        }", "-      }", "-    }", "-  }", "+            for (int i = 0; i < files.length; i++) {", "+                File f = new File(delDir, files[i]);", "+", "+                if (f.exists()) {", "+                    log(\"Deleting: \" + f.getAbsolutePath(), verbosity);", "+", "+                    if (!f.delete()) {", "+                        throw new BuildException(\"Unable to delete \" + f.getAbsolutePath());", "+                    } ", "+                } ", "+            } ", "+        } ", "+    } "]}]}
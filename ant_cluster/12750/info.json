{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4523e30f01929e4ec3f5bbfb107e20e9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "006f6958aa440c1c5dfc7e19f59e24d2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "8af1905a98b1e04a63ab7473d64a41bfda91f15e", "commitAfterChange": "7a5c30f33c46dec3fb201dac6878a09c4cfcaf2c", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private Object createdTypedObject( final String name,                                        final Class type )         throws ConfigurationException", "signatureAfterChange": "     private Object createdTypedObject( final String name,                                        final Class type )         throws ConfigurationException", "diff": ["-        final TypeFactory factory = getTypeFactory( type );", "+        // Attempt to create the object", "+        final Object obj;", "-            return factory.create( name );", "+            final TypeFactory factory = getTypeFactory( DataType.class );", "+            obj = factory.create( name );", "+", "+        // Check the types", "+        if( ! type.isInstance( obj ) )", "+        {", "+            final String message =", "+                REZ.getString( \"mismatched-typed-object.error\", name, type.getName() );", "+            throw new ConfigurationException( message );", "+        }", "+", "+        return obj;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35bf11f3f897ed46bdc645147930c0ab", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/builder/DefaultProjectBuilder.java", "commitBeforeChange": "60b9a1fbd8dff3813fb1ba61f2fd7cc5b292c244", "commitAfterChange": "9005ee85f3bf3147ea2477ce73855547011ce801", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private DefaultProject buildProject( final File file,                                          final Configuration configuration )         throws Exception", "signatureAfterChange": "     private DefaultProject buildProject( final File file,                                          final Configuration configuration )         throws Exception", "diff": ["+        final Version version = getVersion( configuration );", "+", "+        if( !VERSION.complies( version ) )", "+        {", "+            final String message =", "+                REZ.getString( \"ant.bad-version.error\", VERSION, version );", "+            throw new Exception( message );", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43b53c975beb0625ddbe58af4896f512", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/property/DefaultPropertyResolver.java", "commitBeforeChange": "6638f2ac2b2d797fe2789ea7cbcf235b7cf4ea5a", "commitAfterChange": "7eb8a34e54e5c7ff3241f4414e04cf3b623c3e07", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     protected Object getPropertyValue( final String propertyName,                                        final PropertyStore properties )         throws TaskException", "signatureAfterChange": "     protected Object getPropertyValue( final String propertyName,                                        final TaskContext context )         throws TaskException", "diff": ["-                                       final PropertyStore properties )", "+                                       final TaskContext context )", "-        return properties.getProperty( propertyName );", "+        final Object value = context.getProperty( propertyName );", "+        if( value != null )", "+        {", "+            return value;", "+        }", "+", "+        final String message = REZ.getString( \"prop.missing-value.error\", propertyName );", "+        throw new TaskException( message );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60bb46c51425f378adcaaf773b65ed0c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultObjectConfigurer.java", "commitBeforeChange": "c4dee0afafcc57ede3e3d1e81d2d4a1455c484a4", "commitAfterChange": "f52a170159f6dc5beebe07bfb945cb5b3fa5290b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public PropertyConfigurer getProperty( final String name )", "signatureAfterChange": "     public PropertyConfigurer getProperty( final String name ) throws NoSuchPropertyException", "diff": ["-    public PropertyConfigurer getProperty( final String name )", "+    public PropertyConfigurer getProperty( final String name ) throws NoSuchPropertyException", "-        return (PropertyConfigurer)m_props.get( name );", "+        final PropertyConfigurer prop = (PropertyConfigurer)m_props.get( name );", "+        if( prop != null )", "+        {", "+            return prop;", "+        }", "+", "+        // Unknown property", "+        final String message = REZ.getString( \"unknown-property.error\", m_class.getName(), name );", "+        throw new NoSuchPropertyException( message );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7189a7bc0e4c6cfc374df124ff97785a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/converter/DefaultMasterConverter.java", "commitBeforeChange": "f1ca327fe83b0932fe8240cbcf3b86d550dce2d5", "commitAfterChange": "ce85ba9cfee9e2c3595721d7ea30ed85f2672e45", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public Object convert( final Class destination,                            final Object original,                            final Context context )         throws ConverterException", "signatureAfterChange": "     public Object convert( final Class destination,                            final Object original,                            final Context context )         throws ConverterException", "diff": ["-            return converter.convert( destination, original, context );", "+            final Object object = converter.convert( destination, original, context );", "+            if( destination.isInstance( object ) )", "+            {", "+                return object;", "+            }", "+            else", "+            {", "+                final String message =", "+                    REZ.getString( \"bad-return-type.error\",", "+                                   name,", "+                                   object,", "+                                   destination.getName() );", "+                throw new ConverterException( message );", "+            }"]}]}
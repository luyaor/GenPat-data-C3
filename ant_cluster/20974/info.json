{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3bddceae03736a380c51f639472881b7", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09317e9345636f911e926733bd7dcc00", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ReplaceRegExp.java", "commitBeforeChange": "23b5b9d2ca3e35f969fa33bbcdfe55f583024c20", "commitAfterChange": "a26c94ea6a7ed1d62eccb2170a17e3cbb86c759c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     protected void doReplace(File f, int options)          throws IOException", "signatureAfterChange": "     protected void doReplace(File f, int options)          throws IOException", "diff": ["-                LineNumberReader lnr = new LineNumberReader(br);", "+                StringBuffer linebuf = new StringBuffer();", "+                String res = null;", "+                int c;", "+                boolean hasCR = false;", "-                while ((line = lnr.readLine()) != null) {", "-                    String res = doReplace(regex, subs, line, options);", "+                do {", "+                    c = br.read();", "-                    if (!res.equals(line)) {", "-                        changes = true;", "+                    if (c == '\\r') {", "+                        if (hasCR) {", "+                            // second CR -> EOL + possibly empty line", "+                            line = linebuf.toString();", "+                            res  = doReplace(regex, subs, line, options);", "+", "+                            if (!res.equals(line)) {", "+                                changes = true;", "+                            }", "+", "+                            pw.print(res);", "+                            pw.print('\\r');", "+", "+                            linebuf.setLength(0);", "+                            // hasCR is still true (for the second one)", "+                        } else {", "+                            // first CR in this line", "+                            hasCR = true;", "+                        }", "+                    else if (c == '\\n') {", "+                        // LF -> EOL", "+                        line = linebuf.toString();", "+                        res  = doReplace(regex, subs, line, options);", "-                    pw.println(res);", "-                }", "+                        if (!res.equals(line)) {", "+                            changes = true;", "+                        }", "+", "+                        pw.print(res);", "+                        if (hasCR) {", "+                            pw.print('\\r');", "+                            hasCR = false;", "+                        }", "+                        pw.print('\\n');", "+", "+                        linebuf.setLength(0);", "+                    } else { // any other char", "+                        if ((hasCR) || (c < 0)) {", "+                            // Mac-style linebreak or EOF (or both)", "+                            line = linebuf.toString();", "+                            res  = doReplace(regex, subs, line, options);", "+", "+                            if (!res.equals(line)) {", "+                                changes = true;", "+                            }", "+", "+                            pw.print(res);", "+                            if (hasCR) {", "+                                pw.print('\\r');", "+                                hasCR = false;", "+                            }", "+", "+                            linebuf.setLength(0);", "+                        }", "+", "+                        if (c >= 0) {", "+                            linebuf.append((char) c);", "+                        }", "+                    }", "+                } while (c >= 0);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "219a1ef08ca0874f20378c69a887277d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "33d19ef67e2eb18cdf696c337f158ae725f92f21", "commitAfterChange": "b14e61f604f088f5522e8caa9c396da71e7b775e", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "     protected int transferFiles(FTPClient ftp, FileSet fs)          throws IOException, BuildException", "signatureAfterChange": "     protected int transferFiles(FTPClient ftp, FileSet fs)          throws IOException, BuildException", "diff": ["-", "-            for (int i = 0; i < dsfiles.length; i++) {", "-                switch (action) {", "-                    case SEND_FILES:", "-                        sendFile(ftp, dir, dsfiles[i]);", "-                        break;", "-                    case GET_FILES:", "-                        getFile(ftp, dir, dsfiles[i]);", "-                        break;", "-                    case DEL_FILES:", "-                        delFile(ftp, dsfiles[i]);", "-                        break;", "-                    case LIST_FILES:", "-                        listFile(ftp, bw, dsfiles[i]);", "-                        break;", "-                    case CHMOD:", "-                        doSiteCommand(ftp, \"chmod \" + chmod + \" \" + resolveFile(dsfiles[i]));", "-                        transferred++;", "-                        break;", "-                    case RM_DIR:", "-                        rmDir(ftp, dsfiles[i]);", "-                        break;", "-                    default:", "-                        throw new BuildException(\"unknown ftp action \" + action);", "+            if (action == RM_DIR) {", "+                // to remove directories, start by the end of the list", "+                // the trunk does not let itself be removed before the leaves", "+                for (int i = dsfiles.length - 1; i >= 0; i--) {", "+                    rmDir(ftp, dsfiles[i]);", "+                }", "+            }   else {", "+                for (int i = 0; i < dsfiles.length; i++) {", "+                    switch (action) {", "+                        case SEND_FILES:", "+                            sendFile(ftp, dir, dsfiles[i]);", "+                            break;", "+                        case GET_FILES:", "+                            getFile(ftp, dir, dsfiles[i]);", "+                            break;", "+                        case DEL_FILES:", "+                            delFile(ftp, dsfiles[i]);", "+                            break;", "+                        case LIST_FILES:", "+                            listFile(ftp, bw, dsfiles[i]);", "+                            break;", "+                        case CHMOD:", "+                            doSiteCommand(ftp, \"chmod \" + chmod + \" \" + resolveFile(dsfiles[i]));", "+                            transferred++;", "+                            break;", "+                        default:", "+                            throw new BuildException(\"unknown ftp action \" + action);", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c57656fbc49a6e7d42579287d248af00", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "536a84c211f50992fedce887f3120414eec39068", "commitAfterChange": "d0cb590844449882c124f78aa671ef8750c75ea9", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 76, "signatureBeforeChange": "     protected int transferFiles(FTPClient ftp, FileSet fs)          throws IOException, BuildException", "signatureAfterChange": "     protected int transferFiles(final FTPClient ftp, FileSet fs)          throws IOException, BuildException", "diff": ["-    protected int transferFiles(FTPClient ftp, FileSet fs)", "+    protected int transferFiles(final FTPClient ftp, FileSet fs)", "+            RetryHandler h = new RetryHandler(this.retriesAllowed, this);", "-                    rmDir(ftp, dsfiles[i]);", "+                    final String dsfile = dsfiles[i];", "+                    executeRetryable(h, new Retryable() {", "+                        public void execute() throws IOException {", "+                            rmDir(ftp, dsfile);", "+                        }", "+                    }, dsfile);", "+                final BufferedWriter fbw = bw;", "+                final String fdir = dir;", "-                    switch (action) {", "-                        case SEND_FILES:", "-                            sendFile(ftp, dir, dsfiles[i]);", "-                            break;", "-                        case GET_FILES:", "-                            getFile(ftp, dir, dsfiles[i]);", "-                            break;", "-                        case DEL_FILES:", "-                            delFile(ftp, dsfiles[i]);", "-                            break;", "-                        case LIST_FILES:", "-                            listFile(ftp, bw, dsfiles[i]);", "-                            break;", "-                        case CHMOD:", "-                            doSiteCommand(ftp, \"chmod \" + chmod + \" \" + resolveFile(dsfiles[i]));", "-                            transferred++;", "-                            break;", "-                        default:", "-                            throw new BuildException(\"unknown ftp action \" + action);", "-                    }", "+                    final String dsfile = dsfiles[i];", "+                    executeRetryable(h, new Retryable() {", "+                        public void execute() throws IOException {", "+                            switch (action) {", "+                                case SEND_FILES:", "+                                    sendFile(ftp, fdir, dsfile);", "+                                    break;", "+                                case GET_FILES:", "+                                    getFile(ftp, fdir, dsfile);", "+                                    break;", "+                                case DEL_FILES:", "+                                    delFile(ftp, dsfile);", "+                                    break;", "+                                case LIST_FILES:", "+                                    listFile(ftp, fbw, dsfile);", "+                                    break;", "+                                case CHMOD:", "+                                    doSiteCommand(ftp, \"chmod \" + chmod + \" \" + resolveFile(dsfile));", "+                                    transferred++;", "+                                    break;", "+                                default:", "+                                    throw new BuildException(\"unknown ftp action \" + action);", "+                            }", "+                        }", "+                    }, dsfile);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9764c1e50bb261ac098b0d63ae0ea75", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "12df7ec426adb3e47cfb0d268d9b646769e38ac7", "commitAfterChange": "152be14c152edab99f90e8c71f589a6bf8087bbe", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "     protected int transferFiles(FTPClient ftp, FileSet fs)         throws IOException, BuildException", "signatureAfterChange": "     protected int transferFiles(FTPClient ftp, FileSet fs)         throws IOException, BuildException", "diff": ["-        if ((ds.getBasedir() == null) && ((action == SEND_FILES) || (action == GET_FILES))) {", "-            throw new BuildException( \"the dir attribute must be set for send and get actions\" );", "+        if ((ds.getBasedir() == null) ", "+            && ((action == SEND_FILES) || (action == GET_FILES))) {", "+            throw new BuildException(\"the dir attribute must be set for send \"", "+                                     + \"and get actions\" );", "-        if (action == LIST_FILES) {", "-            File pd = new File(listing.getParent());", "-            if (!pd.exists()) {", "-                pd.mkdirs();", "-            }", "-            bw = new BufferedWriter(new FileWriter(listing));", "-        }", "-", "-        for (int i = 0; i < dsfiles.length; i++)", "-        {", "-            switch (action) {", "-            case SEND_FILES: {", "-                sendFile(ftp, dir, dsfiles[i]);", "-                break;", "+        try {", "+            if (action == LIST_FILES) {", "+                File pd = fileUtils.getParentFile(listing);", "+                if (!pd.exists()) {", "+                    pd.mkdirs();", "+                }", "+                bw = new BufferedWriter(new FileWriter(listing));", "-            case GET_FILES: {", "-                getFile(ftp, dir, dsfiles[i]);", "-                break;", "-            }", "+            for (int i = 0; i < dsfiles.length; i++) {", "+                switch (action) {", "+                case SEND_FILES: {", "+                    sendFile(ftp, dir, dsfiles[i]);", "+                    break;", "+                }", "-            case DEL_FILES: {", "-                delFile(ftp, dsfiles[i]);", "-                break;", "-            }", "+                case GET_FILES: {", "+                    getFile(ftp, dir, dsfiles[i]);", "+                    break;", "+                }", "-            case LIST_FILES: {", "-                listFile(ftp, bw, dsfiles[i]);", "-                break;", "-            }", "+                case DEL_FILES: {", "+                    delFile(ftp, dsfiles[i]);", "+                    break;", "+                }", "+                    ", "+                case LIST_FILES: {", "+                    listFile(ftp, bw, dsfiles[i]);", "+                    break;", "+                }", "+                    ", "+                case CHMOD: {", "+                    doSiteCommand(ftp, \"chmod \" + chmod + \" \" + dsfiles[i]);", "+                    transferred++;", "+                    break;", "+                }", "-            case CHMOD: {", "-                 doSiteCommand(ftp,\"chmod \" + chmod + \" \" + dsfiles[i]);", "-                 transferred++;", "-                 break;", "+                default: {", "+                    throw new BuildException(\"unknown ftp action \" + action );", "+                }", "+                }", "-", "-            default: {", "-                throw new BuildException(\"unknown ftp action \" + action );", "+        } finally {", "+            if (bw != null) {", "+                bw.close();", "-            }", "-        }", "-", "-        if (action == LIST_FILES) {", "-            bw.close();"]}]}
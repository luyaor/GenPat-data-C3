{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "72e466d8e3ef127d88cb371e1632397a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d508c94a44cdb5ecb9e720f5f442848", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/test/org/apache/myrmidon/framework/file/test/TestFileList.java", "commitBeforeChange": "6638f2ac2b2d797fe2789ea7cbcf235b7cf4ea5a", "commitAfterChange": "7eb8a34e54e5c7ff3241f4414e04cf3b623c3e07", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public String[] listFiles( final TaskContext context )         throws TaskException", "signatureAfterChange": "     public String[] listFiles( final TaskContext context )         throws TaskException", "diff": ["-        final File file = context.resolveFile( m_name );", "-        return new String[] { file.getAbsolutePath() };", "+        final ArrayList files = new ArrayList();", "+        if( m_name != null )", "+        {", "+            final File file = context.resolveFile( m_name );", "+            files.add( file.getAbsolutePath() );", "+        }", "+        if( m_path != null )", "+        {", "+            final String[] fileNames = m_path.listFiles( context );", "+            for( int i = 0; i < fileNames.length; i++ )", "+            {", "+                files.add( fileNames[ i ] );", "+            }", "+        }", "+        return (String[])files.toArray( new String[ files.size() ] );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a78d0bd59fc5ac96b7464d70af9bc5fb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/vss/MSVSS.java", "commitBeforeChange": "d9ce954d35df741c0344e59f043b4e41f33c71f4", "commitAfterChange": "839c93f9e0ba20487296f807470650b93f2abdd8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "      protected int run(Commandline cmd)", "signatureAfterChange": "      protected int run(Commandline cmd)", "diff": ["+", "+", "+            // If location of ss.ini is specified we need to set the ", "+            // environment-variable SSDIR to this value", "+            if (m_serverPath != null) {", "+                String[] env = exe.getEnvironment();", "+                if( env == null ) {", "+                    env = new String[0];", "+                }", "+                String[] newEnv = new String[env.length+1];", "+                for( int i=0;i<env.length;i++ ) {", "+                    newEnv[i] = env[i];", "+                }", "+                newEnv[env.length] = \"SSDIR=\" + m_serverPath;", "+", "+                exe.setEnvironment(newEnv);", "+            }", "+            "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c31ad8e547ce4973f0c84652b95221f4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/Commandline.java", "commitBeforeChange": "183de933a18bc2af76fbed2385a30afa0c816cd5", "commitAfterChange": "c62e477a0b74de1c4f16643fce6851f44bf2e90e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": "         public String[] getParts()", "signatureAfterChange": "         public String[] getParts()", "diff": ["-            return parts;", "+            if (parts == null || parts.length == 0", "+                || (prefix.length() == 0 && suffix.length() == 0)) {", "+                return parts;", "+            }", "+            String[] fullParts = new String[parts.length];", "+            for (int i = 0; i < fullParts.length; ++i) {", "+                fullParts[i] = prefix + parts[i] + suffix;", "+            }", "+            return fullParts;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cad7e76d72f62f22de825267fe02cdc4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/extensions/LibraryDisplayer.java", "commitBeforeChange": "233e04e45369b3c5bbcff070a75205e4c0d48e96", "commitAfterChange": "829ab528ab20211bf041ac82b1bc7b46eac0b768", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     void displayLibrary( final File file,                          final Manifest manifest )         throws TaskException", "signatureAfterChange": "     void displayLibrary( final File file,                          final Manifest manifest )         throws TaskException", "diff": ["+        final Extension[] options = Extension.getOptions( manifest );", "+            0 == options.length &&", "+        if( 0 != options.length )", "+        {", "+            System.out.println( \"Extensions that will be used by Library if present:\" );", "+            for( int i = 0; i < options.length; i++ )", "+            {", "+                final Extension extension = options[ i ];", "+                System.out.println( extension.toString() );", "+            }", "+        }", "+"]}]}
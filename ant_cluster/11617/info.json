{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ab5b350f061bf875f5e15db701a39121", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "680da4fdf9d36170515175879b447748", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/GenericDeploymentTool.java", "commitBeforeChange": "ebb7f7ca8c9b5990f6418557719641f8345516e8", "commitAfterChange": "febf421b27c789d4b426d3d59b24dc42e07785b1", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     protected void checkAndAddInherited(Hashtable checkEntries) throws BuildException", "signatureAfterChange": "     protected void checkAndAddInherited(Hashtable checkEntries) throws BuildException", "diff": ["-", "-                                if (!interfaces[i].getName().equals(\"javax.ejb.EJBObject\")) // do not add home interfaces", "-                                { ", "-                                    File superClassFile = new File(srcDir.getAbsolutePath() ", "-                                                                    + File.separatorChar ", "-                                                                    + interfaces[i].getName().replace('.',File.separatorChar)", "-                                                                    + \".class\"", "-                                                                    );", "-                                    if (superClassFile.exists() && superClassFile.isFile())", "-                                    {", "-                                        if (checkInterfaceClasses(interfaces[i].getName().replace('.',File.separatorChar)+\".class\", ", "-                                              superClassFile, checkEntries))", "-                                        {", "-                                            checkEntries.put(interfaces[i].getName().replace('.',File.separatorChar)+\".class\",", "-                                                 superClassFile);", "-                                        }", "-                                    }", "-                                }", "+                                addInterface(interfaces[i], checkEntries);", "-                            if (!s.getName().equals(\"java.lang.Object\"))", "-                            {", "-                                File superClassFile = new File(srcDir.getAbsolutePath() ", "-                                + File.separatorChar ", "-                                + s.getName().replace('.',File.separatorChar)", "-                                + \".class\"", "-                                );", "-                                if (superClassFile.exists() && superClassFile.isFile())", "-                                {", "-                                    checkSuperClasses(s.getName().replace('.',File.separatorChar) + \".class\", ", "-                                    superClassFile, checkEntries);", "-                                    checkEntries.put(s.getName().replace('.',File.separatorChar) + \".class\", ", "-                                    superClassFile);", "-                                }               ", "-                            }", "+                            addSuperClass(c.getSuperclass(), checkEntries);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abb041a6feeeadfa0fd18d23692bd0a0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java", "commitBeforeChange": "e09047d73c19c9608d7408f1ba4f2f23ee9d067c", "commitAfterChange": "a7870b167d35566a8ed101467825a406aa61fa13", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected Path getCompileClasspath()", "signatureAfterChange": "     protected Path getCompileClasspath()", "diff": ["-            // XXX move this stuff to a separate class, code is identical to", "-            //     code in ../rmic/DefaultRmicAdapter", "-", "-            if (System.getProperty(\"java.vendor\").toLowerCase().indexOf(\"microsoft\") >= 0) {", "-                // Pull in *.zip from packages directory", "-                FileSet msZipFiles = new FileSet();", "-                msZipFiles.setDir(new File(System.getProperty(\"java.home\") + File.separator + \"Packages\"));", "-                msZipFiles.setIncludes(\"*.ZIP\");", "-                classpath.addFileset(msZipFiles);", "-            }", "-            else if (Project.getJavaVersion() == Project.JAVA_1_1) {", "-                classpath.addExisting(new Path(null,", "-                                                System.getProperty(\"java.home\")", "-                                                + File.separator + \"lib\"", "-                                                + File.separator", "-                                                + \"classes.zip\"));", "-            } else {", "-                // JDK > 1.1 seems to set java.home to the JRE directory.", "-                classpath.addExisting(new Path(null,", "-                                                System.getProperty(\"java.home\")", "-                                                + File.separator + \"lib\"", "-                                                + File.separator + \"rt.jar\"));", "-                // Just keep the old version as well and let addExistingToPath", "-                // sort it out.", "-                classpath.addExisting(new Path(null,", "-                                                System.getProperty(\"java.home\")", "-                                                + File.separator +\"jre\"", "-                                                + File.separator + \"lib\"", "-                                                + File.separator + \"rt.jar\"));", "-", "-                // Added for MacOS X", "-                classpath.addExisting(new Path(null,", "-                                               System.getProperty(\"java.home\")", "-                                               + File.separator + \"..\"", "-                                               + File.separator + \"Classes\"", "-                                               + File.separator + \"classes.jar\"));", "-                classpath.addExisting(new Path(null,", "-                                               System.getProperty(\"java.home\")", "-                                               + File.separator + \"..\"", "-                                               + File.separator + \"Classes\"", "-                                               + File.separator + \"ui.jar\"));", "-            }", "+            classpath.addJavaRuntime();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cefec9a3a4733a1b64d974a4ac818b9a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javac.java", "commitBeforeChange": "c1a5419faf39033ffc2db1dcf8000f6a796f2dad", "commitAfterChange": "4ca5683c2a54ff4a141ed562a0f3b431b153b2c2", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 6, "signatureBeforeChange": "     protected Path getCompileClasspath(boolean addRuntime)", "signatureAfterChange": "     public Path getClasspath()", "diff": ["+    /** Gets the classpath to be used for this compilation. */", "+    public Path getClasspath() {", "+        return compileClasspath;", "-     */", "-    protected Path getCompileClasspath(boolean addRuntime) {", "-        Path classpath = new Path(project);", "-", "-        // add dest dir to classpath so that previously compiled and", "-        // untouched classes are on classpath", "-", "-        if (destDir != null) {", "-            classpath.setLocation(destDir);", "-        }", "-", "-        // Combine the build classpath with the system classpath, in an ", "-        // order determined by the value of build.classpath", "-", "-        if (compileClasspath == null) {", "-            classpath.addExisting(Path.systemClasspath);", "-        } else {", "-            classpath.addExisting(compileClasspath.concatSystemClasspath());", "-        }", "-", "-        // optionally add the runtime classes", "-", "-        if (addRuntime) {", "-            if (System.getProperty(\"java.vendor\").toLowerCase().indexOf(\"microsoft\") >= 0) {", "-                // Pull in *.zip from packages directory", "-                FileSet msZipFiles = new FileSet();", "-                msZipFiles.setDir(new File(System.getProperty(\"java.home\") + File.separator + \"Packages\"));", "-                msZipFiles.setIncludes(\"*.ZIP\");", "-                classpath.addFileset(msZipFiles);", "-            }", "-            else if (Project.getJavaVersion() == Project.JAVA_1_1) {", "-                classpath.addExisting(new Path(null,", "-                                                System.getProperty(\"java.home\")", "-                                                + File.separator + \"lib\"", "-                                                + File.separator ", "-                                                + \"classes.zip\"));", "-            } else {", "-                // JDK > 1.1 seems to set java.home to the JRE directory.", "-                classpath.addExisting(new Path(null,", "-                                                System.getProperty(\"java.home\")", "-                                                + File.separator + \"lib\"", "-                                                + File.separator + \"rt.jar\"));", "-                // Just keep the old version as well and let addExistingToPath", "-                // sort it out.", "-                classpath.addExisting(new Path(null,", "-                                                System.getProperty(\"java.home\")", "-                                                + File.separator +\"jre\"", "-                                                + File.separator + \"lib\"", "-                                                + File.separator + \"rt.jar\"));", "-            }", "-        }", "-            ", "-        return classpath;"]}]}
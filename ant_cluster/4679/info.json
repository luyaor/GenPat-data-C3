{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "922384ea65821c07168cf4a43ee31ee7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "181ef4af72638b24200cb2ef019c4af4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/ManifestClassPathTest.java", "commitBeforeChange": "c4cc9c42b1186ff585b7506c4ece1434a5127ce0", "commitAfterChange": "2487a905056a72e96e91a8116eb3d150d96e5469", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "      public void testDifferentWindowsDrive()", "signatureAfterChange": "      public void testDifferentWindowsDrive()", "diff": ["+            // the lines below try to find a drive name different than the one containing the temp dir", "+            // if the temp dir is C will try to use D", "+            // if the temp dir is on D or other will try to use C", "+            File tmpdir = new File(System.getProperty(\"java.io.tmpdir\"));", "+            String driveLetter = \"C\";", "-                new java.io.File(\"D:/foo.txt\").getCanonicalPath();", "+                String tmpCanonicalPath = tmpdir.getCanonicalPath();", "+                driveLetter = tmpCanonicalPath.substring(1).toUpperCase();", "+            } catch (IOException ioe) {", "+                System.out.println(\"exception happened getting canonical path of java.io.tmpdir : \" + ioe.getMessage());", "+            }", "+            String altDriveLetter = null;", "+            try {", "+                if (\"C\".equals(driveLetter)) {", "+                    altDriveLetter = \"D\";", "+                } else {", "+                    altDriveLetter = \"C\";", "+                }", "+                new java.io.File(altDriveLetter + \":/foo.txt\").getCanonicalPath();", "-                System.out.println(\"drive d: doesn't exist or is not ready,\"", "+                System.out.println(\"drive \" + altDriveLetter + \": doesn't exist or is not ready,\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6afac5b3b8ff8b28ee627ec58be7425", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Jar.java", "commitBeforeChange": "1fa5ccf5682707c6b5e33482b641009e48190013", "commitAfterChange": "bec2a0777e910345fa7877d5aaa209ddde0937e3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": "          protected void zipFile(File file, ZipOutputStream zOut, String vPath)         throws IOException", "signatureAfterChange": "          protected void zipFile(File file, ZipOutputStream zOut, String vPath)         throws IOException", "diff": ["-        // If the file being added is META-INF/MANIFEST.MF, we merge it with the", "-        // current manifest ", "+        // If the file being added is META-INF/MANIFEST.MF, we warn if it's not the", "+        // one specified in the \"manifest\" attribute - or if it's being added twice, ", "+        // meaning the same file is specified by the \"manifeset\" attribute and in", "+        // a <fileset> element.", "-            InputStream is = null;", "-            try {", "-                is = new FileInputStream(file);", "-                zipManifestEntry(is);", "-            }", "-            catch (IOException e) {", "-                throw new BuildException(\"Unable to read manifest file: \" + file, e);", "-            }", "-            finally {", "-                if (is != null) {", "-                    try {", "-                        is.close();", "-                    }", "-                    catch (IOException e) {", "-                        // do nothing", "-                    }", "-                }", "-            }", "+            log(\"Warning: selected \"+archiveType+\" files include a META-INF/MANIFEST.MF which will be ignored \" +", "+                \"(please use manifest attribute to \"+archiveType+\" task)\", Project.MSG_WARN);", "+"]}]}
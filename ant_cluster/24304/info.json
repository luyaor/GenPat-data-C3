{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "315ceda02fe7b0cb0d47fe5eeac47449", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "514cf8eea359f212d09024b3f8e2b701", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/jdepend/JDependTask.java", "commitBeforeChange": "8d3002cf8ab1b9f87d38b0b4e5682d15ffb7002a", "commitAfterChange": "9c51b355f7e7c16c5466e43b59019cad49a1fe56", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 24, "signatureBeforeChange": "     public int executeInVM(CommandlineJava commandline) throws BuildException", "signatureAfterChange": "     public int executeInVM(CommandlineJava commandline) throws BuildException", "diff": ["-        PathTokenizer sourcesPath ", "-            = new PathTokenizer(getSourcespath().toString());", "-        while (sourcesPath.hasMoreTokens()) {", "-            File f = new File(sourcesPath.nextToken());", "-", "-            // not necessary as JDepend would fail, but why loose some time?", "-            if (!f.exists() || !f.isDirectory()) {", "-                String msg = \"\\\"\" + f.getPath() + \"\\\" does not represent a valid\" ", "-                    + \" directory. JDepend would fail.\";", "-                log(msg);", "-                throw new BuildException(msg);", "+        if (getClassespath() != null) {", "+            // This is the new, better way - use classespath instead", "+            // of sourcespath.  The code is currently the same - you", "+            // need class files in a directory to use this - jar files", "+            // coming soon....", "+            String[] classesPath = getClassespath().list();", "+            for (int i = 0; i < classesPath.length; i++) {", "+                File f = new File(classesPath[i]);", "+                // not necessary as JDepend would fail, but why loose", "+                // some time?", "+                if (!f.exists() || !f.isDirectory()) {", "+                    String msg = \"\\\"\"", "+                        + f.getPath()", "+                        + \"\\\" does not represent a valid\"", "+                        + \" directory. JDepend would fail.\";", "+                    log(msg);", "+                    throw new BuildException(msg);", "+                }", "+                try {", "+                    jdepend.addDirectory(f.getPath());", "+                } catch (IOException e) {", "+                    String msg =", "+                        \"JDepend Failed when adding a class directory: \"", "+                        + e.getMessage();", "+                    log(msg);", "+                    throw new BuildException(msg);", "+                }", "-            try {", "-                jdepend.addDirectory(f.getPath());", "-            } catch (IOException e) {", "-                String msg = \"JDepend Failed when adding a source directory: \" ", "-                    + e.getMessage();", "-                log(msg);", "-                throw new BuildException(msg);", "+", "+        } else if (getSourcespath() != null) {", "+", "+            // This is the old way and is deprecated - classespath is", "+            // the right way to do this and is above", "+            String[] sourcesPath = getSourcespath().list();", "+            for (int i = 0; i < sourcesPath.length; i++) {", "+                File f = new File(sourcesPath[i]);", "+", "+                // not necessary as JDepend would fail, but why loose", "+                // some time?", "+                if (!f.exists() || !f.isDirectory()) {", "+                    String msg = \"\\\"\"", "+                        + f.getPath()", "+                        + \"\\\" does not represent a valid\"", "+                        + \" directory. JDepend would fail.\";", "+                    log(msg);", "+                    throw new BuildException(msg);", "+                }", "+                try {", "+                    jdepend.addDirectory(f.getPath());", "+                } catch (IOException e) {", "+                    String msg =", "+                        \"JDepend Failed when adding a source directory: \"", "+                        + e.getMessage();", "+                    log(msg);", "+                    throw new BuildException(msg);", "+                }", "+", "+        // This bit turns <exclude> child tags into patters to ignore", "+        String[] patterns = defaultPatterns.getExcludePatterns(getProject());", "+        if (patterns != null && patterns.length > 0) {", "+            Vector v = new Vector();", "+            for (int i = 0; i < patterns.length; i++) {", "+                v.addElement(patterns[i]);", "+            }", "+            jdepend.setFilter(new jdepend.framework.PackageFilter(v));", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c72ecb1db59b1358d52aaebe10687fbf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/Path.java", "commitBeforeChange": "20dede5ad87cf903e9be1a39d67312d7f39dfcd0", "commitAfterChange": "a8d4fe6d9b8c7a4adb1704b12de610dc6e18fe94", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public String[] list()", "signatureAfterChange": "     public String[] list()", "diff": ["-        final String[] result = new String[definition.size()];", "-        definition.copyInto(result);", "-        return result;", "+        Vector result = new Vector(2*elements.size());", "+        for (int i=0; i<elements.size(); i++) {", "+            Object o = elements.elementAt(i);", "+            if (o instanceof Reference) {", "+                Reference r = (Reference) o;", "+                o = r.getReferencedObject(project);", "+                // we only support references to filesets right now", "+                if (o == null || !(o instanceof FileSet)) {", "+                    String msg = r.getRefId()+\" doesn\\'t denote a fileset\";", "+                    throw new BuildException(msg);", "+                }", "+            }", "+            ", "+            if (o instanceof String) {", "+                // obtained via append", "+                addUnlessPresent(result, (String) o);", "+            } else if (o instanceof PathElement) {", "+                String[] parts = ((PathElement) o).getParts();", "+                if (parts == null) {", "+                    throw new BuildException(\"You must either set location or path on <pathelement>\");", "+                }", "+                for (int j=0; j<parts.length; j++) {", "+                    addUnlessPresent(result, parts[j]);", "+                }", "+            } else if (o instanceof FileSet) {", "+                FileSet fs = (FileSet) o;", "+                DirectoryScanner ds = fs.getDirectoryScanner(project);", "+                String[] s = ds.getIncludedFiles();", "+                File dir = fs.getDir();", "+                for (int j=0; j<s.length; j++) {", "+                    addUnlessPresent(result, ", "+                                     translateFile((new File(dir, s[j])).getAbsolutePath()));", "+                }", "+            }", "+        }", "+        String[] res = new String[result.size()];", "+        result.copyInto(res);", "+        return res;"]}]}
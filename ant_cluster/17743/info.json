{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a0147ba05103eb1959699e70ff267a32", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e489c5b5368dbab8d4c5308a3e070f4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/bootstrap/org/apache/ant/builder/Builder.java", "commitBeforeChange": "e7d7a265edad357f5cec5384fa7e8c19b14a0e6b", "commitAfterChange": "0b2bea8de1c7eed2d38886c63529fefced7aec7d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private File[] getAnt1Files()", "signatureAfterChange": "     private File[] getAnt1Files()", "diff": ["-        files.add(new File(PACKAGE_ROOT, \"types/EnumeratedAttribute.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"types/Path.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"types/FileSet.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"types/PatternSet.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"types/Reference.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"types/FilterSet.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"types/FilterSetCollection.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"types/Mapper.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"types/ZipFileSet.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"types/ZipScanner.java\"));", "+        files.add(new File(TYPES_ROOT, \"EnumeratedAttribute.java\"));", "+        files.add(new File(TYPES_ROOT, \"Path.java\"));", "+        files.add(new File(TYPES_ROOT, \"FileSet.java\"));", "+        files.add(new File(TYPES_ROOT, \"PatternSet.java\"));", "+        files.add(new File(TYPES_ROOT, \"Reference.java\"));", "+        files.add(new File(TYPES_ROOT, \"FilterSet.java\"));", "+        files.add(new File(TYPES_ROOT, \"FilterSetCollection.java\"));", "+        files.add(new File(TYPES_ROOT, \"Mapper.java\"));", "+        files.add(new File(TYPES_ROOT, \"ZipFileSet.java\"));", "+        files.add(new File(TYPES_ROOT, \"ZipScanner.java\"));", "+        files.add(new File(TYPES_ROOT, \"FilterChain.java\"));", "+        files.add(new File(TYPES_ROOT, \"Parameter.java\"));", "+        files.add(new File(TYPES_ROOT, \"Parameterizable.java\"));", "+        files.add(new File(TYPES_ROOT, \"RegularExpression.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"types/Commandline.java\"));", "+        files.add(new File(PACKAGE_ROOT, \"util/regexp/Regexp.java\"));", "+        files.add(new File(PACKAGE_ROOT, \"util/regexp/RegexpMatcher.java\"));", "+        files.add(new File(PACKAGE_ROOT, \"util/regexp/RegexpFactory.java\"));", "+        files.add(new File(PACKAGE_ROOT, \"util/regexp/RegexpMatcherFactory.java\"));", "+        files.add(new File(TYPES_ROOT, \"Commandline.java\"));", "-        files.add(new File(PACKAGE_ROOT, \"types/defaults.properties\"));", "+        files.add(new File(TYPES_ROOT, \"defaults.properties\"));", "+        ", "+        files.add(new File(FILTERS_ROOT, \"util/ChainReaderHelper.java\"));", "+        files.add(new File(FILTERS_ROOT, \"ClassConstants.java\"));", "+        files.add(new File(FILTERS_ROOT, \"ExpandProperties.java\"));", "+        files.add(new File(FILTERS_ROOT, \"HeadFilter.java\"));", "+        files.add(new File(FILTERS_ROOT, \"LineContains.java\"));", "+        files.add(new File(FILTERS_ROOT, \"LineContainsRegExp.java\"));", "+        files.add(new File(FILTERS_ROOT, \"PrefixLines.java\"));", "+        files.add(new File(FILTERS_ROOT, \"ReplaceTokens.java\"));", "+        files.add(new File(FILTERS_ROOT, \"StripJavaComments.java\"));", "+        files.add(new File(FILTERS_ROOT, \"StripLineBreaks.java\"));", "+        files.add(new File(FILTERS_ROOT, \"StripLineComments.java\"));", "+        files.add(new File(FILTERS_ROOT, \"TabsToSpaces.java\"));", "+        files.add(new File(FILTERS_ROOT, \"TailFilter.java\"));", "+        files.add(new File(FILTERS_ROOT, \"BaseFilterReader.java\"));", "+        files.add(new File(FILTERS_ROOT, \"ChainableReader.java\"));", "+        files.add(new File(TYPES_ROOT, \"AntFilterReader.java\"));", "+        files.add(new File(FILTERS_ROOT, \"BaseParamFilterReader.java\"));", "+        files.add(new File(FILTERS_ROOT, \".java\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e399fc277fbe7b88c30709223d554855", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/testcases/org/apache/myrmidon/components/AbstractComponentTest.java", "commitBeforeChange": "50fb7f5643cba98640e7d4ce2b00736e9d42cbab", "commitAfterChange": "6ff9bf50ad2e4fcda69911d207c8dfe93e7b4e0b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected final ServiceManager getServiceManager()", "signatureAfterChange": "     protected final ServiceManager getServiceManager() throws Exception", "diff": ["-    protected final ServiceManager getServiceManager()", "+    protected final ServiceManager getServiceManager() throws Exception", "-        return m_serviceManager;", "-    }", "+        if( m_serviceManager == null )", "+        {", "+            Logger logger = getLogger();", "+            // Create the components", "+            m_serviceManager = new DefaultServiceManager();", "+            List components = new ArrayList();", "+", "+            Object component = new DefaultMasterConverter();", "+            m_serviceManager.put( Converter.ROLE, component );", "+            components.add( component );", "+", "+            component = new DefaultConverterRegistry();", "+            m_serviceManager.put( ConverterRegistry.ROLE, component );", "+            components.add( component );", "+", "+            component = new DefaultTypeManager();", "+            m_serviceManager.put( TypeManager.ROLE, component );", "+            components.add( component );", "+", "+            component = new DefaultConfigurer();", "+            m_serviceManager.put( Configurer.ROLE, component );", "+            components.add( component );", "+", "+            component = new DefaultDeployer();", "+            m_serviceManager.put( Deployer.ROLE, component );", "+            components.add( component );", "+", "+            final DefaultClassLoaderManager classLoaderMgr = new DefaultClassLoaderManager();", "+            classLoaderMgr.setBaseClassLoader( getClass().getClassLoader() );", "+            m_serviceManager.put( ClassLoaderManager.ROLE, classLoaderMgr );", "+            components.add( classLoaderMgr );", "+", "+            component = new DefaultExtensionManager();", "+            m_serviceManager.put( ExtensionManager.ROLE, component );", "+            components.add( component );", "+", "+            component = new DefaultRoleManager();", "+            m_serviceManager.put( RoleManager.ROLE, component );", "+            components.add( component );", "+", "+            component = new DefaultPropertyResolver();", "+            m_serviceManager.put( PropertyResolver.ROLE, component );", "+            components.add( component );", "+", "+            // Log enable the components", "+            for( Iterator iterator = components.iterator(); iterator.hasNext(); )", "+            {", "+                Object obj = iterator.next();", "+                if( obj instanceof LogEnabled )", "+                {", "+                    final LogEnabled logEnabled = (LogEnabled)obj;", "+                    logEnabled.enableLogging( logger );", "+                }", "+            }", "+", "+            // Compose the components", "+            for( Iterator iterator = components.iterator(); iterator.hasNext(); )", "+            {", "+                Object obj = iterator.next();", "+                if( obj instanceof Serviceable )", "+                {", "+                    final Serviceable serviceable = (Serviceable)obj;", "+                    serviceable.service( m_serviceManager );", "+                }", "+            }", "+        }", "+        return m_serviceManager;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed806e43331ecab89c100e2f7bfc6e68", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/test/org/apache/myrmidon/components/AbstractComponentTest.java", "commitBeforeChange": "50fb7f5643cba98640e7d4ce2b00736e9d42cbab", "commitAfterChange": "6ff9bf50ad2e4fcda69911d207c8dfe93e7b4e0b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected final ServiceManager getServiceManager()", "signatureAfterChange": "     protected final ServiceManager getServiceManager() throws Exception", "diff": ["-    protected final ServiceManager getServiceManager()", "+    protected final ServiceManager getServiceManager() throws Exception", "-        return m_serviceManager;", "-    }", "+        if( m_serviceManager == null )", "+        {", "+            Logger logger = getLogger();", "+            // Create the components", "+            m_serviceManager = new DefaultServiceManager();", "+            List components = new ArrayList();", "+", "+            Object component = new DefaultMasterConverter();", "+            m_serviceManager.put( Converter.ROLE, component );", "+            components.add( component );", "+", "+            component = new DefaultConverterRegistry();", "+            m_serviceManager.put( ConverterRegistry.ROLE, component );", "+            components.add( component );", "+", "+            component = new DefaultTypeManager();", "+            m_serviceManager.put( TypeManager.ROLE, component );", "+            components.add( component );", "+", "+            component = new DefaultConfigurer();", "+            m_serviceManager.put( Configurer.ROLE, component );", "+            components.add( component );", "+", "+            component = new DefaultDeployer();", "+            m_serviceManager.put( Deployer.ROLE, component );", "+            components.add( component );", "+", "+            final DefaultClassLoaderManager classLoaderMgr = new DefaultClassLoaderManager();", "+            classLoaderMgr.setBaseClassLoader( getClass().getClassLoader() );", "+            m_serviceManager.put( ClassLoaderManager.ROLE, classLoaderMgr );", "+            components.add( classLoaderMgr );", "+", "+            component = new DefaultExtensionManager();", "+            m_serviceManager.put( ExtensionManager.ROLE, component );", "+            components.add( component );", "+", "+            component = new DefaultRoleManager();", "+            m_serviceManager.put( RoleManager.ROLE, component );", "+            components.add( component );", "+", "+            component = new DefaultPropertyResolver();", "+            m_serviceManager.put( PropertyResolver.ROLE, component );", "+            components.add( component );", "+", "+            // Log enable the components", "+            for( Iterator iterator = components.iterator(); iterator.hasNext(); )", "+            {", "+                Object obj = iterator.next();", "+                if( obj instanceof LogEnabled )", "+                {", "+                    final LogEnabled logEnabled = (LogEnabled)obj;", "+                    logEnabled.enableLogging( logger );", "+                }", "+            }", "+", "+            // Compose the components", "+            for( Iterator iterator = components.iterator(); iterator.hasNext(); )", "+            {", "+                Object obj = iterator.next();", "+                if( obj instanceof Serviceable )", "+                {", "+                    final Serviceable serviceable = (Serviceable)obj;", "+                    serviceable.service( m_serviceManager );", "+                }", "+            }", "+        }", "+        return m_serviceManager;"]}]}
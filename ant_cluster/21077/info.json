{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "22473ce66427cc58218eeb3a81531bfd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08b2f5d423fbcb61b5de0553a9d65585", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/Rpm.java", "commitBeforeChange": "c7dfaa577bd7940283563befa0aacd048f5de4d7", "commitAfterChange": "89d025a11df25e7edd6820ec47cc4859ea7a7ecc", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            streamhandler = new LogStreamHandler(this, Project.MSG_INFO,", "-                                                 Project.MSG_WARN);", "+            if (showoutput) {", "+                streamhandler = new LogStreamHandler(this, Project.MSG_INFO,", "+                                                     Project.MSG_WARN);", "+            } else {", "+                streamhandler = new LogStreamHandler(this, Project.MSG_DEBUG,", "+                                                     Project.MSG_DEBUG);", "+            }", "-            } else {", "+            } else if (showoutput) {", "+            } else {", "+                outputstream = new LogOutputStream(this, Project.MSG_DEBUG);", "-            } else {", "+            } else if (showoutput) {", "+            } else {", "+                errorstream = new LogOutputStream(this, Project.MSG_DEBUG);", "-            if (returncode != 0) {", "-                throw new BuildException(\"'\" +", "-                        toExecute.getExecutable() +", "-                        \"' failed with exit code \"+returncode);", "+            if (Execute.isFailure(returncode)) {", "+                String msg = \"'\" + toExecute.getExecutable() ", "+                    + \"' failed with exit code \" + returncode;", "+                if (failOnError) {", "+                    throw new BuildException(msg);", "+                } else {", "+                    log(msg, Project.MSG_ERR);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "604765fbe3acd805aa2d1a44da64f680", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "b86a0a2830f81aa373a40ca7db51c5308f58550a", "commitAfterChange": "1375d72ba33469d368c812a889ab11e9ffe6200e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     protected void scan(File fromDir, File toDir, String[] files, String[] dirs)", "signatureAfterChange": "     protected void scan(File fromDir, File toDir, String[] files, String[] dirs)", "diff": ["-        for (int i = 0; i < files.length; i++) {", "-            String filename = files[i];", "-            File src = new File(fromDir, filename);", "-            File dest;", "-            if (flatten) {", "-                dest = new File(toDir, new File(filename).getName());", "-            } else {", "-                dest = new File(toDir, filename);", "-            }", "-            if (forceOverwrite ||", "-                (src.lastModified() > dest.lastModified())) {", "-                fileCopyMap.put(src.getAbsolutePath(),", "-                                 dest.getAbsolutePath());", "-            }", "+        FileNameMapper mapper = null;", "+        if (flatten) {", "+            mapper = new FlatFileNameMapper();", "+        } else {", "+            mapper = new IdentityMapper();", "+        buildMap(fromDir, toDir, files, mapper, fileCopyMap);", "+", "-            for (int i = 0; i < dirs.length; i++) {", "-                String dname = dirs[i];", "-                File sd = new File(fromDir, dname);", "-                File dd;", "-                if (flatten) {", "-                    dd = new File(toDir, new File(dname).getName());", "-                } else {", "-                    dd = new File(toDir, dname);", "-                }", "-                if (forceOverwrite || (sd.lastModified() > dd.lastModified())) {", "-                    dirCopyMap.put(sd.getAbsolutePath(), dd.getAbsolutePath());", "-                }", "-            }", "+            buildMap(fromDir, toDir, dirs, mapper, dirCopyMap);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf5e44a8619c3afdce70607e368977af", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Definer.java", "commitBeforeChange": "f19f07d6e4c72f241057ecfc32d80be21201bbf7", "commitAfterChange": "ca91f8cb7e4f2bfe1a191dea6126a32649af9565", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "       private AntClassLoader createLoader()", "signatureAfterChange": "      private AntClassLoader createLoader()", "diff": ["-", "+        // magic property ", "+        if (project.getProperty(REUSE_LOADER_REF) != null) {", "+            // Generate the 'reuse' name automatically from the reference.", "+            // This allows <taskdefs> that work on both ant1.4 and ant1.5.", "+            // ( in 1.4 it'll require the task/type to be in classpath if they", "+            //   are used togheter ).", "+            if (loaderId == null && classpathId != null) {", "+                loaderId = \"ant.loader.\" + classpathId;", "+            }", "+        }", "+        ", "+        // If a loader has been set ( either by loaderRef or magic property )", "+        if (loaderId != null) {", "+            Object reusedLoader = project.getReference(loaderId);", "+            if (reusedLoader != null) {", "+                if (reusedLoader instanceof AntClassLoader) {", "+                    return (AntClassLoader)reusedLoader;", "+                }", "+                // In future the reference object may be the <loader> type", "+                // if( reusedLoader instanceof Loader ) {", "+                //      return ((Loader)reusedLoader).getLoader(project);", "+                // }", "+            }", "+        }", "+       ", "+", "+", "+        // If the loader is new, record it for future uses by other", "+        // task/typedefs", "+        if (loaderId != null) {", "+            if (project.getReference(loaderId) == null) {", "+                project.addReference(loaderId, al);", "+            }", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d741678d07c1c09c8426d045f43a1948", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/TraXLiaison.java", "commitBeforeChange": "a738000acab66d8d7ce5cf563f6dd96d9c7024fb", "commitAfterChange": "53db3a2602bcc7a0b357dbb3cc02b6e254960a7e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void createTransformer() throws Exception", "signatureAfterChange": "     private void createTransformer() throws Exception", "diff": ["+        }", "+", "+        if (traceConfiguration != null) {", "+            if (\"org.apache.xalan.transformer.TransformerImpl\"", "+                .equals(transformer.getClass().getName())) {", "+                try {", "+                    Class traceSupport =", "+                        Class.forName(\"org.apache.tools.ant.taskdefs.optional.\"", "+                                      + \"Xalan2TraceSupport\", true,", "+                                      Thread.currentThread()", "+                                      .getContextClassLoader());", "+                    XSLTTraceSupport ts =", "+                        (XSLTTraceSupport) traceSupport.newInstance();", "+                    ts.configureTrace(transformer, traceConfiguration);", "+                } catch (Exception e) {", "+                    String msg = \"Failed to enable tracing because of \" + e;", "+                    if (project != null) {", "+                        project.log(msg, Project.MSG_WARN);", "+                    } else {", "+                        System.err.println(msg);", "+                    }", "+                }", "+            } else {", "+                String msg = \"Not enabling trace support for transformer\"", "+                    + \" implementation\" + transformer.getClass().getName();", "+                if (project != null) {", "+                    project.log(msg, Project.MSG_WARN);", "+                } else {", "+                    System.err.println(msg);", "+                }", "+            }"]}]}
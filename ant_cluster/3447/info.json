{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "773bfaef632305e078ee514541e833c4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10dc257cf7ce9d6d640efcba52d8097a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "          private URLConnection openConnection(URL aSource) throws IOException", "signatureAfterChange": "          private URLConnection openConnection(final URL aSource) throws IOException", "diff": ["-        private URLConnection openConnection(URL aSource) throws IOException {", "+        private URLConnection openConnection(final URL aSource) throws IOException {", "-            URLConnection connection = aSource.openConnection();", "+            final URLConnection connection = aSource.openConnection();", "-                String up = uname + \":\" + pword;", "+                final String up = uname + \":\" + pword;", "-                Base64Converter encoder = new Base64Converter();", "+                final Base64Converter encoder = new Base64Converter();", "-            } catch (NullPointerException e) {", "+            } catch (final NullPointerException e) {", "-                HttpURLConnection httpConnection = (HttpURLConnection) connection;", "-                int responseCode = httpConnection.getResponseCode();", "+                final HttpURLConnection httpConnection = (HttpURLConnection) connection;", "+                final int responseCode = httpConnection.getResponseCode();", "-                    String newLocation = httpConnection.getHeaderField(\"Location\");", "-                    String message = aSource", "+                    final String newLocation = httpConnection.getHeaderField(\"Location\");", "+                    final String message = aSource", "-                    URL newURL = new URL(aSource, newLocation);", "+                    final URL newURL = new URL(aSource, newLocation);", "-                long lastModified = httpConnection.getLastModified();", "+                final long lastModified = httpConnection.getLastModified();", "-                    String message = \"HTTP Authorization failure\";", "+                    final String message = \"HTTP Authorization failure\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11147bdea9aeb7309e5e26ab2f5e3b60", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/EventResponder.java", "commitBeforeChange": "18b63a1b1afc269c237e2bc05de803544e49ad45", "commitAfterChange": "8785091ee1c92874c44324f0429765539987b048", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "         public boolean eventPosted(EventObject event)", "signatureAfterChange": "         public boolean eventPosted(EventObject event)", "diff": ["-            // XXX turn this switch structure into a command", "-            // lookup using an initialized hash table.", "-            if(command.equals(OpenCmd.ACTION_NAME)) {", "-                new OpenCmd(_context).execute();", "-            }", "-            else if(command.equals(SaveCmd.ACTION_NAME)) {", "-                new SaveCmd(_context).execute();", "-            }", "-            else if(command.equals(SaveAsCmd.ACTION_NAME)) {", "-                new SaveAsCmd(_context).execute();", "-            }", "-            else if(command.equals(BuildCmd.ACTION_NAME)) {", "-                new BuildCmd(_context).execute();", "-            }", "-            else if(command.equals(CloseCmd.ACTION_NAME)) {", "-                new CloseCmd(_context).execute();", "-            }", "-            else if(command.equals(ExitCmd.ACTION_NAME)) {", "-                new ExitCmd(_context).execute();", "-            }", "-            else if(command.equals(AboutCmd.ACTION_NAME)) {", "-                new AboutCmd(_context).execute();", "-            }", "-            else if(command.equals(ChangeLookAndFeelCmd.ACTION_NAME)) {", "-                new ChangeLookAndFeelCmd(_context).execute();", "-            }", "-            else if(command.equals(ChangeLookAndFeelCmd.ACTION_NAME)) {", "-                new ChangeLookAndFeelCmd(_context).execute();", "-            }", "-            else if(command.equals(EmacsNotifyCmd.ACTION_NAME)) {", "-                AbstractButton source = (AbstractButton) event.getSource();", "-                new EmacsNotifyCmd(_context, source.isSelected()).execute();", "+            Command cmd = ", "+                _context.getActions().getActionCommand(command, _context);", "+            if(cmd != null) {", "+                cmd.run();", "+                return false;", "+                return true;", "-            return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64e3b6032098f6fb2771d3454cd02328", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/FailureRecorder.java", "commitBeforeChange": "5026f31269c0cf1f709aa6ee9dc775f0e7b74747", "commitAfterChange": "4369f6482672e451edd830277d0f64fcc9c7d10b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r     private String getLocationName()", "signatureAfterChange": "\r     private String getLocationName()", "diff": ["-    //      via Ant properties. But how to access these?\r", "+     */\r", "-            String propValue = System.getProperty(MAGIC_PROPERTY_CLASS_LOCATION);\r", "-            locationName = (propValue != null) ? propValue : DEFAULT_CLASS_LOCATION;\r", "+            String syspropValue = System.getProperty(MAGIC_PROPERTY_CLASS_LOCATION);\r", "+            String antpropValue = getProject().getProperty(MAGIC_PROPERTY_CLASS_LOCATION);\r", "+\r", "+            if (syspropValue != null) {\r", "+                locationName = syspropValue;\r", "+                verbose(\"System property '\" + MAGIC_PROPERTY_CLASS_LOCATION + \"' set, so use \"\r", "+                        + \"its value '\" + syspropValue + \"' as location for collector class.\");\r", "+            } else if (antpropValue != null) {\r", "+                locationName = antpropValue;\r", "+                verbose(\"Ant property '\" + MAGIC_PROPERTY_CLASS_LOCATION + \"' set, so use \"\r", "+                        + \"its value '\" + antpropValue + \"' as location for collector class.\");\r", "+            } else {\r", "+                locationName = DEFAULT_CLASS_LOCATION;\r", "+                verbose(\"System property '\" + MAGIC_PROPERTY_CLASS_LOCATION + \"' not set, so use \"\r", "+                        + \"value as location for collector class: '\" + DEFAULT_CLASS_LOCATION + \"'\");\r", "+            }\r", "+\r", "+            File locationFile = new File(locationName);\r", "+            if (!locationFile.isAbsolute()) {\r", "+                File f = new File(getProject().getBaseDir(), locationName);\r", "+                locationName = f.getAbsolutePath();\r", "+                verbose(\"Location file is relative (\" + locationFile + \")\"\r", "+                        + \" use absolute path instead (\" + locationName + \")\");\r", "+            }\r", "+        \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe3bd85f6074a8d64a112e693424d460", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Manifest.java", "commitBeforeChange": "6309813d01620379a35da64c12c4de488efedc2d", "commitAfterChange": "4ab1950bd8ba0bf2335e09b07852d74e1b016f5a", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 30, "signatureBeforeChange": "     public void merge(Manifest other) throws ManifestException", "signatureAfterChange": "     public void merge(Manifest other, boolean overwriteMain) throws ManifestException", "diff": ["-        if (other.manifestVersion != null) {", "-            manifestVersion = other.manifestVersion;", "-        }", "-        mainSection.merge(other.mainSection);", "-        for (Enumeration e = other.sections.keys(); e.hasMoreElements();) {", "-            String sectionName = (String)e.nextElement();", "-            Section ourSection = (Section)sections.get(sectionName);", "-            Section otherSection = (Section)other.sections.get(sectionName);", "-            if (ourSection == null) {", "-                sections.put(sectionName, otherSection);", "-            }", "-            else {", "-                ourSection.merge(otherSection);", "-            }", "-        }", "+     */", "+    public void merge(Manifest other, boolean overwriteMain) throws ManifestException {", "+        if (other != null) {", "+             if (overwriteMain) {", "+                 mainSection = other.mainSection;", "+             }", "+             else {", "+                 mainSection.merge(other.mainSection);", "+             }", "+", "+             if (other.manifestVersion != null) {", "+                 manifestVersion = other.manifestVersion;", "+             }", "+", "+             for (Enumeration e = other.sections.keys(); e.hasMoreElements();) {", "+                 String sectionName = (String)e.nextElement();", "+                 Section ourSection = (Section)sections.get(sectionName);", "+                 Section otherSection = (Section)other.sections.get(sectionName);", "+                 if (ourSection == null) {", "+                     if (otherSection != null) {", "+                         sections.put(sectionName.toLowerCase(), otherSection);", "+                     }", "+                 }", "+                 else {", "+                     ourSection.merge(otherSection);", "+                 }", "+             }", "+         }"]}]}
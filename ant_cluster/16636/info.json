{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5540d52f86a3fd5c480f6b9f05a13f9a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40c6587426c0b75b2c4b2f6b985532cb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/MacroInstance.java", "commitBeforeChange": "dc783273b09bd69dee29f8afd61706e328b9e666", "commitAfterChange": "bf736586fa0347cd87d9bcb450dfe16c7263c1e4", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void execute()", "signatureAfterChange": "     public void execute()", "diff": ["-        if (macroDef.getTextName() != null) {", "-            localProperties.put(macroDef.getTextName(), text);", "+        if (macroDef.getText() != null) {", "+            if (text == null) {", "+                if (!macroDef.getText().getOptional()) {", "+                    throw new BuildException(", "+                        \"required text missing\");", "+                }", "+                text = \"\";", "+            }", "+            if (macroDef.getText().getTrim()) {", "+                text = text.trim();", "+            }", "+            localProperties.put(macroDef.getText().getName(), text);", "+        } else {", "+            if (text != null && !text.trim().equals(\"\")) {", "+                throw new BuildException(", "+                    \"The \\\"\" + getTaskName() + \"\\\" macro does not support\"", "+                    + \" nested text data.\");", "+            }", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "629911b45835307429aebee122f9569a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/XSLTProcess.java", "commitBeforeChange": "5800b026fac0179cb373c1c85261c04bf2b54e8e", "commitAfterChange": "88f1be2d0462de59e99bf085522756a647195248", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            log(\"Warning: the task name <style> is deprecated. Use <xslt> instead.\", Project.MSG_WARN);", "+            log(\"Warning: the task name <style> is deprecated. Use <xslt> instead.\",", "+                    Project.MSG_WARN);", "-        if (xslFile == null) {", "-            throw new BuildException(\"no stylesheet specified\", getLocation());", "+        if (xslResource == null && xslFile == null) {", "+            throw new BuildException(\"specify the \"", "+                + \"stylesheet either as a filename in style \"", "+                + \"attribute or as a nested resource\", getLocation());", "+", "+        }", "+        if (xslResource != null && xslFile != null) {", "+            throw new BuildException(\"specify the \"", "+                + \"stylesheet either as a filename in style \"", "+                + \"attribute or as a nested resource but not \"", "+                + \"as both\", getLocation());", "-            File stylesheet = getProject().resolveFile(xslFile);", "-            if (!stylesheet.exists()) {", "-                stylesheet = FILE_UTILS.resolveFile(baseDir, xslFile);", "-                /*", "-                 * shouldn't throw out deprecation warnings before we know,", "-                 * the wrong version has been used.", "-                 */", "-                if (stylesheet.exists()) {", "-                    log(\"DEPRECATED - the 'style' attribute should be relative \"", "-                        + \"to the project's\");", "-                    log(\"             basedir, not the tasks's basedir.\");", "+            if (xslFile != null) {", "+                // If we enter here, it means that the stylesheet is supplied", "+                // via style attribute", "+                File stylesheet = FILE_UTILS.resolveFile(getProject().getBaseDir(), xslFile);", "+                if (!stylesheet.exists()) {", "+                    stylesheet = FILE_UTILS.resolveFile(baseDir, xslFile);", "+                    /*", "+                     * shouldn't throw out deprecation warnings before we know,", "+                     * the wrong version has been used.", "+                     */", "+                    if (stylesheet.exists()) {", "+                        log(\"DEPRECATED - the 'style' attribute should be relative \"", "+                                + \"to the project's\");", "+                        log(\"             basedir, not the tasks's basedir.\");", "+                    }", "+                FileResource fr = new FileResource();", "+                fr.setProject(getProject());", "+                fr.setFile(stylesheet);", "+                xslResource = fr;", "-                process(inFile, outFile, stylesheet);", "+                process(inFile, outFile, xslResource);", "-\t    checkDest();", "+            checkDest();", "-\t    if (useImplicitFileset) {", "-            scanner = getDirectoryScanner(baseDir);", "-            log(\"Transforming into \" + destDir, Project.MSG_INFO);", "+            if (useImplicitFileset) {", "+                scanner = getDirectoryScanner(baseDir);", "+                log(\"Transforming into \" + destDir, Project.MSG_INFO);", "-            // Process all the files marked for styling", "-            list = scanner.getIncludedFiles();", "-            for (int i = 0; i < list.length; ++i) {", "-                process(baseDir, list[i], destDir, stylesheet);", "-            }", "-            if (performDirectoryScan) {", "-                // Process all the directories marked for styling", "-                dirs = scanner.getIncludedDirectories();", "-                for (int j = 0; j < dirs.length; ++j) {", "-                    list = new File(baseDir, dirs[j]).list();", "-                    for (int i = 0; i < list.length; ++i) {", "-                        process(baseDir, dirs[j] + File.separator + list[i],", "-                                destDir, stylesheet);", "+                // Process all the files marked for styling", "+                list = scanner.getIncludedFiles();", "+                for (int i = 0; i < list.length; ++i) {", "+                    process(baseDir, list[i], destDir, xslResource);", "+                }", "+                if (performDirectoryScan) {", "+                    // Process all the directories marked for styling", "+                    dirs = scanner.getIncludedDirectories();", "+                    for (int j = 0; j < dirs.length; ++j) {", "+                        list = new File(baseDir, dirs[j]).list();", "+                        for (int i = 0; i < list.length; ++i) {", "+                            process(baseDir, dirs[j] + File.separator + list[i],", "+                                    destDir, xslResource);", "+                        }", "+            } else { // only resource collections, there better be some", "+                if (resources.size() == 0) {", "+                    throw new BuildException(\"no resources specified\");", "+                }", "-\t    } else { // only resource collections, there better be some", "-            if (resources.size() == 0) {", "-                throw new BuildException(\"no resources specified\");", "-            }", "-\t    }", "-\t    processResources(stylesheet);", "+            processResources(xslResource);"]}]}
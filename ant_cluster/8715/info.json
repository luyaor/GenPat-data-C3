{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b783473f2f97eef6a802382aa8884155", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69a6995c7bfea8641695800fc6051d62", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/launch/Launcher.java", "commitBeforeChange": "3fe578a16dfaae9a9bb1f24561e3bba6b9c88830", "commitAfterChange": "a8b485c525cebdfc2338660fb321ff3a833d93af", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private int run(String[] args)             throws LaunchException, MalformedURLException", "signatureAfterChange": "     private int run(String[] args)             throws LaunchException, MalformedURLException", "diff": ["-        List libPathURLs = new ArrayList();", "+        URL[] libURLs    = getLibPathURLs(", "+            noClassPath ? null : cpString, libPaths);", "+        URL[] systemURLs = getSystemURLs(jarDir);", "+        URL[] userURLs   = noUserLib ? new URL[0] : getUserURLs();", "-        if (cpString != null && !noClassPath) {", "-            addPath(cpString, false, libPathURLs);", "-        }", "-", "-        for (Iterator i = libPaths.iterator(); i.hasNext();) {", "-            String libPath = (String) i.next();", "-            addPath(libPath, true, libPathURLs);", "-        }", "-", "-        URL[] libJars = (URL[]) libPathURLs.toArray(new URL[libPathURLs.size()]);", "-", "-        // Now try and find JAVA_HOME", "-        File toolsJar = Locator.getToolsJar();", "-", "-        // determine ant library directory for system jars: use property", "-        // or default using location of ant-launcher.jar", "-        File antLibDir = null;", "-        String antLibDirProperty = System.getProperty(ANTLIBDIR_PROPERTY);", "-        if (antLibDirProperty != null) {", "-            antLibDir = new File(antLibDirProperty);", "-        }", "-        if ((antLibDir == null) || !antLibDir.exists()) {", "-            antLibDir = jarDir;", "-            System.setProperty(ANTLIBDIR_PROPERTY, antLibDir.getAbsolutePath());", "-        }", "-        URL[] systemJars = Locator.getLocationURLs(antLibDir);", "-", "-        File userLibDir", "-            = new File(System.getProperty(USER_HOMEDIR), USER_LIBDIR);", "-", "-        URL[] userJars = noUserLib ? new URL[0] : Locator.getLocationURLs(userLibDir);", "-", "-        int numJars = libJars.length + userJars.length + systemJars.length;", "-        if (toolsJar != null) {", "-            numJars++;", "-        }", "-        URL[] jars = new URL[numJars];", "-        System.arraycopy(libJars, 0, jars, 0, libJars.length);", "-        System.arraycopy(userJars, 0, jars, libJars.length, userJars.length);", "-        System.arraycopy(systemJars, 0, jars, userJars.length + libJars.length,", "-            systemJars.length);", "-", "-        if (toolsJar != null) {", "-            jars[jars.length - 1] = Locator.fileToURL(toolsJar);", "-        }", "-", "+        URL[] jars = getJarArray(", "+            libURLs, userURLs, systemURLs, Locator.getToolsJar());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1f00d1b77091a4bbf59df5c8dfd764b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/start/org/apache/ant/start/Main.java", "commitBeforeChange": "284e7904db67222895f80b31bebd6902c9535013", "commitAfterChange": "d9e69473683976b55bf9fdd93da9bb982f4b3ba1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private void start(String[] args)", "signatureAfterChange": "     public void start(String frontend, String[] args)", "diff": ["-    private void start(String[] args) {", "+    public void start(String frontend, String[] args) {", "-            URL libraryURL = getLibraryURL();", "-            config.setLibraryURL(libraryURL);", "+            URL frontendJar = new URL(config.getLibraryURL(), ", "+                \"frontend/\" + frontend + \".jar\");", "+            URL[] frontendJars = new URL[]{frontendJar};", "+            ClassLoader frontEndLoader ", "+                = new URLClassLoader(frontendJars, config.getCoreLoader());", "-            URL antHome = getAntHome();", "-            config.setAntHome(antHome);", "-            if (antHome.getProtocol().equals(\"file\")) {", "-                File systemConfigArea = new File(antHome.getFile(), \"conf\");", "-                config.setSystemConfigArea(systemConfigArea);", "-            }", "-            File userConfigArea", "-                 = new File(System.getProperty(\"user.home\"), \".ant/conf\");", "-            config.setUserConfigArea(userConfigArea);", "-", "-            // set up the class loaders that will be used when running Ant", "-            ClassLoader systemLoader = getClass().getClassLoader();", "-            config.setSystemLoader(systemLoader);", "-            URL toolsJarURL = ClassLocator.getToolsJarURL();", "-            config.setToolsJarURL(toolsJarURL);", "-", "-            URL commonJarLib = new URL(libraryURL, \"common/\");", "-            ClassLoader commonLoader", "-                 = new URLClassLoader(LoaderUtils.getLocationURLs(commonJarLib,", "-                \"common.jar\"), systemLoader);", "-            config.setCommonLoader(commonLoader);", "-", "-            // core needs XML parser for parsing various XML components.", "-            URL[] parserURLs", "-                 = LoaderUtils.getLocationURLs(new URL(libraryURL, \"parser/\"),", "-                \"crimson.jar\");", "-            config.setParserURLs(parserURLs);", "-", "-            URL[] coreURLs", "-                 = LoaderUtils.getLocationURLs(new URL(libraryURL, \"antcore/\"),", "-                \"antcore.jar\");", "-            URL[] combinedURLs = new URL[parserURLs.length + coreURLs.length];", "-            System.arraycopy(coreURLs, 0, combinedURLs, 0, coreURLs.length);", "-            System.arraycopy(parserURLs, 0, combinedURLs, coreURLs.length,", "-                parserURLs.length);", "-            ClassLoader coreLoader = new URLClassLoader(combinedURLs,", "-                commonLoader);", "-            config.setCoreLoader(coreLoader);", "-", "-            URL cliJarLib = new URL(libraryURL, \"cli/\");", "-            ClassLoader frontEndLoader", "-                 = new URLClassLoader(LoaderUtils.getLocationURLs(cliJarLib,", "-                \"cli.jar\"), coreLoader);", "-", "-            //System.out.println(\"System Loader config\");                ", "-            //LoaderUtils.dumpLoader(System.out, systemLoader);", "-            // System.out.println(\"Front End Loader config\");", "-            // LoaderUtils.dumpLoader(System.out, frontEndLoader);", "+            //System.out.println(\"Front End Loader config\");", "+            //LoaderUtils.dumpLoader(System.out, frontEndLoader);", "-"]}]}
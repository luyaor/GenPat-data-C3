{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "25134e7c4017a750282ba9ac7bf3bc22", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b8119f1fcb6cae70fca39497bce6200", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/jsp/compilers/JasperC.java", "commitBeforeChange": "3e35ab334b7e5ecd691960f61b58069130c4a2b0", "commitAfterChange": "6acb5be183f9d189628089d186ede0caf887cf0c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private Commandline setupJasperCommand()", "signatureAfterChange": "     private Commandline setupJasperCommand()", "diff": ["-    /* ------------------------------------------------------------ */", "+     */", "-        if (jspc.getDestdir() != null) {", "-            cmd.createArgument().setValue(\"-d\");", "-            cmd.createArgument().setFile(jspc.getDestdir());", "-        }", "-        if (jspc.getPackage() != null){", "-            cmd.createArgument().setValue(\"-p\");", "-            cmd.createArgument().setValue(jspc.getPackage());", "-        }", "-        if (jspc.getVerbose() != 0) {", "-            cmd.createArgument().setValue(\"-v\" + jspc.getVerbose());", "-        }", "+        addArg(cmd,\"-d\",jspc.getDestdir());", "+        addArg(cmd,\"-p\",jspc.getPackage());", "+        addArg(cmd,\"-v\"+jspc.getVerbose());", "+        addArg(cmd,\"-uriroot\",jspc.getUriroot());", "+        addArg(cmd,\"-uribase\",jspc.getUribase());", "+        addArg(cmd,\"-ieplugin\",jspc.getIeplugin());", "-            cmd.createArgument().setValue(\"-mapped\");", "-        }", "-        if (jspc.getIeplugin() != null){", "-            cmd.createArgument().setValue(\"-ieplugin\");", "-            cmd.createArgument().setValue(jspc.getIeplugin());", "-        }", "-        if (jspc.getUriroot() != null){", "-            cmd.createArgument().setValue(\"-uriroot\");", "-            cmd.createArgument().setValue(jspc.getUriroot().toString());", "-        }", "-        if (jspc.getUribase() != null){", "-            cmd.createArgument().setValue(\"-uribase\");", "-            cmd.createArgument().setValue(jspc.getUribase().toString());", "+            addArg(cmd,\"-mapped\");", "+        }       ", "+        if(jspc.getWebApp()!=null) {", "+            File dir=jspc.getWebApp().getDirectory();", "+            addArg(cmd,\"-webapp\",dir);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a00e4d7f60b8adb3c88db162bfed14f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/taskdefs/IContract.java", "commitBeforeChange": "6a20789293e6588a94560a11697fb59dd0d9338c", "commitAfterChange": "d319ab594b9d0b5a3a2ee264845172ca590496f3", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public void execute()         throws TaskException", "signatureAfterChange": "     public void execute()         throws TaskException", "diff": ["-            Path beforeInstrumentationClasspath = ( (Path)baseClasspath.clone() );", "-            beforeInstrumentationClasspath.append( new Path( srcDir.getAbsolutePath() ) );", "+            Path beforeInstrumentationClasspath = new Path();", "+            beforeInstrumentationClasspath.addPath( baseClasspath );", "+            beforeInstrumentationClasspath.addLocation( srcDir );", "-            Path afterInstrumentationClasspath = ( (Path)baseClasspath.clone() );", "-            afterInstrumentationClasspath.append( new Path( instrumentDir.getAbsolutePath() ) );", "-            afterInstrumentationClasspath.append( new Path( repositoryDir.getAbsolutePath() ) );", "-            afterInstrumentationClasspath.append( new Path( srcDir.getAbsolutePath() ) );", "-            afterInstrumentationClasspath.append( new Path( buildDir.getAbsolutePath() ) );", "+            Path afterInstrumentationClasspath = new Path();", "+            afterInstrumentationClasspath.addPath( baseClasspath );", "+            afterInstrumentationClasspath.addLocation( instrumentDir );", "+            afterInstrumentationClasspath.addLocation( repositoryDir );", "+            afterInstrumentationClasspath.addLocation( srcDir );", "+            afterInstrumentationClasspath.addLocation( buildDir );", "-            Path repositoryClasspath = ( (Path)baseClasspath.clone() );", "-            repositoryClasspath.append( new Path( instrumentDir.getAbsolutePath() ) );", "-            repositoryClasspath.append( new Path( srcDir.getAbsolutePath() ) );", "-            repositoryClasspath.append( new Path( repositoryDir.getAbsolutePath() ) );", "-            repositoryClasspath.append( new Path( buildDir.getAbsolutePath() ) );", "+            Path repositoryClasspath = new Path();", "+            repositoryClasspath.addPath( baseClasspath );", "+            repositoryClasspath.addLocation( instrumentDir );", "+            repositoryClasspath.addLocation( srcDir );", "+            repositoryClasspath.addLocation( repositoryDir );", "+            repositoryClasspath.addLocation( buildDir );", "-            Path iContractClasspath = ( (Path)baseClasspath.clone() );", "-            iContractClasspath.append( new Path( System.getProperty( \"java.home\" ) + File.separator + \"..\" + File.separator + \"lib\" + File.separator + \"tools.jar\" ) );", "-            iContractClasspath.append( new Path( srcDir.getAbsolutePath() ) );", "-            iContractClasspath.append( new Path( repositoryDir.getAbsolutePath() ) );", "-            iContractClasspath.append( new Path( instrumentDir.getAbsolutePath() ) );", "-            iContractClasspath.append( new Path( buildDir.getAbsolutePath() ) );", "+            Path iContractClasspath = new Path();", "+            iContractClasspath.addPath( baseClasspath );", "+            iContractClasspath.addLocation( new File(System.getProperty( \"java.home\" ) + File.separator + \"..\" + File.separator + \"lib\" + File.separator + \"tools.jar\" ) );", "+            iContractClasspath.addLocation( srcDir );", "+            iContractClasspath.addLocation( repositoryDir );", "+            iContractClasspath.addLocation( instrumentDir );", "+            iContractClasspath.addLocation( buildDir );", "-                iControlProps.setProperty( \"classpath\", afterInstrumentationClasspath.toString() );", "+                iControlProps.setProperty( \"classpath\", PathUtil.formatPath( afterInstrumentationClasspath ) );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dce35549639ac9d8734d1916a5cc9b1c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "ec980be7345681968c93f0609e9a3fecb39b9753", "commitAfterChange": "fbb9886634198d8377104bef9ec697fadeb134df", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private void binaryCat()", "signatureAfterChange": "     private void binaryCat(ResourceCollection c)", "diff": ["-    private void binaryCat() {", "-        log(\"Binary concatenation of \" + sourceFiles.size()", "-            + \" files to \" + destinationFile);", "+    private void binaryCat(ResourceCollection c) {", "+        log(\"Binary concatenation of \" + c.size()", "+            + \" resources to \" + destinationFile);", "-        FileInputStream in = null;", "+        InputStream in = null;", "-                throw new BuildException(", "-                    \"Unable to open \" + destinationFile", "-                    + \" for writing\", t);", "+                throw new BuildException(\"Unable to open \"", "+                    + destinationFile + \" for writing\", t);", "-            for (Iterator i = sourceFiles.iterator(); i.hasNext();) {", "-                File sourceFile = (File) i.next();", "+            try {", "+                in = new ConcatResourceInputStream(c);", "+                ((ConcatResourceInputStream) in).setManagingComponent(this);", "+            } catch (IOException e) {", "+                throw new BuildException(e);", "+            }", "+            Thread t = new Thread(new StreamPumper(in, out));", "+            t.start();", "+            try {", "+                t.join();", "+            } catch (InterruptedException e) {", "-                    in = new FileInputStream(sourceFile);", "-                } catch (Exception t) {", "-                    throw new BuildException(", "-                        \"Unable to open input file \" + sourceFile,", "-                        t);", "+                    t.join();", "+                } catch (InterruptedException ee) {", "-                int count = 0;", "-                do {", "-                    try {", "-                        count = in.read(buffer, 0, buffer.length);", "-                    } catch (Exception t) {", "-                        throw new BuildException(", "-                            \"Unable to read from \" + sourceFile, t);", "-                    }", "-                    try {", "-                        if (count > 0) {", "-                            out.write(buffer, 0, count);", "-                        }", "-                    } catch (Exception t) {", "-                        throw new BuildException(", "-                            \"Unable to write to \" + destinationFile, t);", "-                    }", "-                } while (count > 0);", "-", "-                try {", "-                    in.close();", "-                } catch (Exception t) {", "-                    throw new BuildException(", "-                        \"Unable to close \" + sourceFile, t);", "-                }", "-                in = null;", "-"]}]}
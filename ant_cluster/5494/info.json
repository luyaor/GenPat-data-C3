{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "85bd95a6d3d454d1cdde0f2b04d36b8a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3806f5297d384c7e60efad68defc53c7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Replace.java", "commitBeforeChange": "9fdb1c85ba0d2fab36ce8f3b0563f393d955ac9d", "commitAfterChange": "a51c373c0fcf539fc8f71b5c21951fa64439d361", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 28, "signatureBeforeChange": "     private void processFile(File src) throws BuildException", "signatureAfterChange": "     private void processFile(File src) throws BuildException", "diff": ["-        Reader reader = null;", "-        Writer writer = null;", "+        FileInput in = null;", "+        FileOutput out = null;", "-            reader = encoding == null ? new FileReader(src)", "-                : new InputStreamReader(new FileInputStream(src), encoding);", "+            in = new FileInput(src);", "-            BufferedReader br = new BufferedReader(reader);", "-", "-            String buf = FileUtils.readFully(br);", "-            br.close();", "-            reader = null;", "-", "-            if (buf == null) {", "-                buf = \"\";", "-            }", "-", "-            StringBuffer buffer = new StringBuffer(buf);", "-            buf = null;", "+            temp = fileUtils.createTempFile(\"rep\", \".tmp\",", "+                    src.getParentFile());", "+            out = new FileOutput(temp);", "-            processReplacefilters(buffer, src.getPath());", "+            out.setInputBuffer(buildFilterChain(in.getOutputBuffer()));", "+", "+            while (in.readChunck()) {", "+                if (processFilterChain()) {", "+                    out.process();", "+                }", "+            }", "+", "+            flushFilterChain();", "+", "+            out.flush();", "+            in.close();", "+            in = null;", "+            out.close();", "+            out = null;", "-                String out = buffer.toString();", "-                temp = fileUtils.createTempFile(\"rep\", \".tmp\",", "-                        src.getParentFile());", "-                temp.deleteOnExit();", "-                writer = encoding == null ? new FileWriter(temp)", "-                        : new OutputStreamWriter(new FileOutputStream(temp), encoding);", "-                BufferedWriter bw = new BufferedWriter(writer);", "-                bw.write(out, 0, out.length());", "-                bw.flush();", "-                bw.close();", "-                writer = null;", "-                ++fileCount;", "-                                    + ioe.getClass().getName() + \":\"", "-                                    + ioe.getMessage(), ioe, getLocation());", "+                    + ioe.getClass().getName() + \":\"", "+                    + ioe.getMessage(), ioe, getLocation());", "-            if (reader != null) {", "+            if (in != null) {", "-                    reader.close();", "+                    in.close();", "-            if (writer != null) {", "+            if (out != null) {", "-                    writer.close();", "+                    out.close();", "-                temp.delete();", "+                if (!temp.delete()) {", "+                    temp.deleteOnExit();", "+                }", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b8023ab757a3c6134dc1c45d049103d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/listener/MailLogger.java", "commitBeforeChange": "8f4a67608a919e16059f3a74cf08a940d4a2f085", "commitAfterChange": "04340a9cb3fc58edcb167ec7fc3a7c8da2a8bb8c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void buildFinished(BuildEvent event)", "signatureAfterChange": "     public void buildFinished(BuildEvent event)", "diff": ["-", "-            String mailhost = getValue(properties, \"mailhost\", \"localhost\");", "-            int port = Integer.parseInt(getValue(properties, \"port\",", "-                                        String.valueOf(MailMessage.DEFAULT_PORT)));", "-            String user = getValue(properties, \"user\", \"\");", "-            String password = getValue(properties, \"password\", \"\");", "-            boolean ssl = Project.toBoolean(getValue(properties,", "-                     \"ssl\", \"off\"));", "-            String from = getValue(properties, \"from\", null);", "-            String replytoList = getValue(properties, \"replyto\", \"\");", "-            String toList = getValue(properties, prefix + \".to\", null);", "-            String subject = getValue(properties, prefix + \".subject\",", "-                    (success) ? \"Build Success\" : \"Build Failure\");", "-            if (user.equals(\"\") && password.equals(\"\") && !ssl) {", "-                sendMail(mailhost, port,  from, replytoList, toList,", "-                         subject, buffer.substring(0));", "+            Values values = new Values()", "+                .mailhost(getValue(properties, \"mailhost\", \"localhost\"))", "+                .port(Integer.parseInt(", "+                          getValue(", "+                              properties, \"port\",", "+                              String.valueOf(MailMessage.DEFAULT_PORT))))", "+                .user(getValue(properties, \"user\", \"\"))", "+                .password(getValue(properties, \"password\", \"\"))", "+                .ssl(Project.toBoolean(getValue(properties,", "+                                                \"ssl\", \"off\")))", "+                .from(getValue(properties, \"from\", null))", "+                .replytoList(getValue(properties, \"replyto\", \"\"))", "+                .toList(getValue(properties, prefix + \".to\", null))", "+                .subject(getValue(", "+                             properties, prefix + \".subject\",", "+                             (success) ? \"Build Success\" : \"Build Failure\"));", "+            if (values.user().equals(\"\")", "+                && values.password().equals(\"\")", "+                && !values.ssl()) {", "+                sendMail(values, buffer.substring(0));", "-                sendMimeMail(event.getProject(), mailhost, port, user,", "-                             password, ssl, from, replytoList, toList,", "-                             subject, buffer.substring(0));", "+                sendMimeMail(", "+                    event.getProject(), values, buffer.substring(0));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41baa6b91391828c43eb43212a482887", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Tar.java", "commitBeforeChange": "1400dc3c1b536c70697f83be990b0725121cba90", "commitAfterChange": "b5fcf10604f56a8061d10f332570342b34cc7a9d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "     protected void tarFile(File file, TarOutputStream tOut, String vPath,                            TarFileSet tarFileSet)         throws IOException", "signatureAfterChange": "     protected void tarFile(File file, TarOutputStream tOut, String vPath,                            TarFileSet tarFileSet)         throws IOException", "diff": ["-        FileInputStream fIn = null;", "+        tarResource(new FileResource(file), tOut, vPath, tarFileSet);", "+    }", "-        String fullpath = tarFileSet.getFullpath();", "-        if (fullpath.length() > 0) {", "-            vPath = fullpath;", "-        } else {", "-            // don't add \"\" to the archive", "-            if (vPath.length() <= 0) {", "-                return;", "-            }", "-            if (file.isDirectory() && !vPath.endsWith(\"/\")) {", "-                vPath += \"/\";", "-            }", "-", "-            String prefix = tarFileSet.getPrefix();", "-            // '/' is appended for compatibility with the zip task.", "-            if (prefix.length() > 0 && !prefix.endsWith(\"/\")) {", "-                prefix = prefix + \"/\";", "-            }", "-            vPath = prefix + vPath;", "-        if (vPath.startsWith(\"/\") && !tarFileSet.getPreserveLeadingSlashes()) {", "-            int l = vPath.length();", "-            if (l <= 1) {", "-                // we would end up adding \"\" to the archive", "-                return;", "-            }", "-            vPath = vPath.substring(1, l);", "-        }", "-", "-        try {", "-            if (vPath.length() >= TarConstants.NAMELEN) {", "-                if (longFileMode.isOmitMode()) {", "-                    log(\"Omitting: \" + vPath, Project.MSG_INFO);", "-                } else if (longFileMode.isWarnMode()) {", "-                    log(\"Entry: \" + vPath + \" longer than \"", "-                        + TarConstants.NAMELEN + \" characters.\",", "-                    if (!longWarningGiven) {", "-                        log(\"Resulting tar file can only be processed \"", "-                            + \"successfully by GNU compatible tar commands\",", "-                            Project.MSG_WARN);", "-                        longWarningGiven = true;", "-                    }", "-                } else if (longFileMode.isFailMode()) {", "-                    throw new BuildException(\"Entry: \" + vPath", "-                }", "-            TarEntry te = new TarEntry(vPath);", "-            te.setModTime(file.lastModified());", "-            if (!file.isDirectory()) {", "-                if (file.length() > TarConstants.MAXSIZE) {", "-                    throw new BuildException(\"File: \" + file + \" larger than \" +", "-                            TarConstants.MAXSIZE + \" bytes.\");", "-                }", "-                te.setSize(file.length());", "-            } else {", "-                te.setMode(tarFileSet.getDirMode());", "-            te.setUserName(tarFileSet.getUserName());", "-            te.setGroupName(tarFileSet.getGroup());", "-            te.setUserId(tarFileSet.getUid());", "-            te.setGroupId(tarFileSet.getGid());", "-            if (!file.isDirectory()) {", "-                fIn = new FileInputStream(file);", "-                    count = fIn.read(buffer, 0, buffer.length);", "-            if (fIn != null) {", "-                fIn.close();", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "464f57d0cc9cfdce6c7b36c95570b661", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/image/Image.java", "commitBeforeChange": "26839fdb3234b8344a313d1bee71aff8494b3842", "commitAfterChange": "541157c5de95bf1cb2ff9f47b8aadac0b3ee98e1", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void processFile(File file)", "signatureAfterChange": "     public void processFile(File file, File newFile)", "diff": ["+     */", "+    public void processFile(File file, File newFile) {", "-            FileSeekableStream input = new FileSeekableStream(file);", "-            PlanarImage image = JAI.create(\"stream\", input);", "-            for (int i = 0; i < instructions.size(); i++) {", "-                Object instr = instructions.elementAt(i);", "-                if (instr instanceof TransformOperation) {", "-                    image = ((TransformOperation) instr)", "-                        .executeTransformOperation(image);", "-                } else {", "-                    log(\"Not a TransformOperation: \" + instr);", "-                }", "-            }", "-            input.close();", "-            if (str_encoding.toLowerCase().equals(\"jpg\")) {", "-                str_encoding = \"JPEG\";", "-            } else if (str_encoding.toLowerCase().equals(\"tif\")) {", "-                str_encoding = \"TIFF\";", "+            FileSeekableStream input = null;", "+            PlanarImage image = null;", "+            try {", "+                input = new FileSeekableStream(file);", "+                image = JAI.create(\"stream\", input);", "+                for (int i = 0; i < instructions.size(); i++) {", "+                    Object instr = instructions.elementAt(i);", "+                    if (instr instanceof TransformOperation) {", "+                        image = ((TransformOperation) instr)", "+                            .executeTransformOperation(image);", "+                    } else {", "+                        log(\"Not a TransformOperation: \" + instr);", "+                    }", "+                }", "+            } finally {", "+                FileUtils.close(input);", "-            if (destDir == null) {", "-                destDir = srcDir;", "+", "+            File dstParent = newFile.getParentFile();", "+            if (!dstParent.isDirectory() && !dstParent.mkdirs()){", "+                throw new BuildException(\"Failed to create parent directory \"", "+                                         + dstParent);", "-            File newFile = new File(destDir, file.getName());", "-            FileOutputStream stream = new FileOutputStream(newFile);", "-            JAI.create(\"encode\", image, stream, str_encoding.toUpperCase(),", "-                       null);", "-            stream.flush();", "-            stream.close();", "+            FileOutputStream stream = null;", "+            try {", "+                stream = new FileOutputStream(newFile);", "+", "+                JAI.create(\"encode\", image, stream, str_encoding.toUpperCase(),", "+                           null);", "+                stream.flush();", "+            } finally {", "+                FileUtils.close(stream);", "+            }", "+            if (!file.equals(newFile)){", "+                newFile.delete();", "+            }", "+            if (!file.equals(newFile)){", "+                newFile.delete();", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a0958b0483ae6872b64f3b827af0289", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "8793957204b1e3607d35150f6631ccadc786c52c", "commitAfterChange": "7030e8de61dc33cedbcff46a1438b62fc1da5f9d", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "     private void logVmExit(FormatterElement[] feArray, JUnitTest test,                            String message)", "signatureAfterChange": "     private void logVmExit(FormatterElement[] feArray, JUnitTest test,                            String message)", "diff": ["-        createClassLoader();", "-        test.setCounts(1, 0, 1);", "-        test.setProperties(getProject().getProperties());", "-        for (int i = 0; i < feArray.length; i++) {", "-            FormatterElement fe = feArray[i];", "-            File outFile = getOutput(fe, test);", "-            JUnitTaskMirror.JUnitResultFormatterMirror formatter = fe.createFormatter(classLoader);", "-            if (outFile != null && formatter != null) {", "-                try {", "-                    OutputStream out = new FileOutputStream(outFile);", "-                    addVmExit(test, formatter, out, message);", "-                } catch (IOException e) {", "-                    // ignore", "+        try {", "+            log(\"Using System properties \" + System.getProperties(),", "+                Project.MSG_VERBOSE);", "+            if (splitJunit) {", "+                classLoader = (AntClassLoader) delegate.getClass().getClassLoader();", "+            } else {", "+                createClassLoader();", "+            }", "+            if (classLoader != null) {", "+                classLoader.setThreadContextLoader();", "+            }", "+", "+            test.setCounts(1, 0, 1);", "+            test.setProperties(getProject().getProperties());", "+            for (int i = 0; i < feArray.length; i++) {", "+                FormatterElement fe = feArray[i];", "+                File outFile = getOutput(fe, test);", "+                JUnitTaskMirror.JUnitResultFormatterMirror formatter = ", "+                    fe.createFormatter(classLoader);", "+                if (outFile != null && formatter != null) {", "+                    try {", "+                        OutputStream out = new FileOutputStream(outFile);", "+                        addVmExit(test, formatter, out, message);", "+                    } catch (IOException e) {", "+                        // ignore", "+                    }", "-        }", "-        if (summary) {", "-            JUnitTaskMirror.SummaryJUnitResultFormatterMirror f = delegate.newSummaryJUnitResultFormatter();", "-            f.setWithOutAndErr(\"withoutanderr\".equalsIgnoreCase(summaryValue));", "-            addVmExit(test, f, getDefaultOutput(), message);", "+            if (summary) {", "+                JUnitTaskMirror.SummaryJUnitResultFormatterMirror f = ", "+                    delegate.newSummaryJUnitResultFormatter();", "+                f.setWithOutAndErr(\"withoutanderr\".equalsIgnoreCase(summaryValue));", "+                addVmExit(test, f, getDefaultOutput(), message);", "+            }", "+        } finally {", "+            if (classLoader != null) {", "+                classLoader.resetThreadContextLoader();", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e5ac01ae0bc20bddaee612a3ecee0d1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Replace.java", "commitBeforeChange": "79ab8ae1d59ed007337a3657ac5c6c78107cc0d8", "commitAfterChange": "c8c751af8ea4cb0607690327d79a0b56d6054925", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private void processFile(File src) throws BuildException", "signatureAfterChange": "     private void processFile(File src) throws BuildException", "diff": ["-        File temp = fileUtils.createTempFile(\"rep\", \".tmp\",", "-                                             fileUtils.getParentFile(src));", "-        temp.deleteOnExit();", "-", "+        File temp = null;", "-            writer = encoding == null ? new FileWriter(temp)", "-                : new OutputStreamWriter(new FileOutputStream(temp), encoding);", "-            BufferedWriter bw = new BufferedWriter(writer);", "+            br.close();", "+            reader = null;", "+", "-            //Preserve original string (buf) so we can compare the result", "-            String newString = new String(buf);", "+            StringBuffer buffer = new StringBuffer(buf);", "+            buf = null;", "-            if (token != null) {", "-                // line separators in values and tokens are \"\\n\"", "-                // in order to compare with the file contents, replace them", "-                // as needed", "-                String val = stringReplace(value.getText(), \"\\r\\n\",", "-                                           \"\\n\", false);", "-                val = stringReplace(val, \"\\n\",", "-                                           StringUtils.LINE_SEP, false);", "-                String tok = stringReplace(token.getText(), \"\\r\\n\",", "-                                            \"\\n\", false);", "-                tok = stringReplace(tok, \"\\n\",", "-                                           StringUtils.LINE_SEP, false);", "+            int repCountStart = replaceCount;", "-                // for each found token, replace with value", "-                log(\"Replacing in \" + src.getPath() + \": \" + token.getText()", "-                    + \" --> \" + value.getText(), Project.MSG_VERBOSE);", "-                newString = stringReplace(newString, tok, val, true);", "-            }", "+            processReplacefilters(buffer, src.getPath());", "-            if (replacefilters.size() > 0) {", "-                newString = processReplacefilters(newString, src.getPath());", "-            }", "-", "-            boolean changes = !newString.equals(buf);", "+            boolean changes = (replaceCount != repCountStart);", "-                bw.write(newString, 0, newString.length());", "+                String out = buffer.toString();", "+                temp = fileUtils.createTempFile(\"rep\", \".tmp\",", "+                        src.getParentFile());", "+                temp.deleteOnExit();", "+                writer = encoding == null ? new FileWriter(temp)", "+                        : new OutputStreamWriter(new FileOutputStream(temp), encoding);", "+                BufferedWriter bw = new BufferedWriter(writer);", "+                bw.write(out, 0, out.length());", "-            }", "-", "-            // cleanup", "-            bw.close();", "-            writer = null;", "-            br.close();", "-            reader = null;", "-", "-            // If there were changes, move the new one to the old one;", "-            // otherwise, delete the new one", "-            if (changes) {", "+                bw.close();", "+                writer = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abf1fe573a136c04d25597a37dae0f69", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Replace.java", "commitBeforeChange": "c28ec7da7aefa85051bcb81e0eea06c74e17342a", "commitAfterChange": "50c1cfa5726c79d5184a0c9d258afb159a5e0899", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 32, "signatureBeforeChange": "     private void processFile(File src) throws BuildException", "signatureAfterChange": "     private void processFile(File src) throws BuildException", "diff": ["-        File temp = null;", "-        FileInput in = null;", "-        FileOutput out = null;", "+        int repCountStart = replaceCount;", "+        logFilterChain(src.getPath());", "+", "-            in = new FileInput(src);", "-", "-            temp = FILE_UTILS.createTempFile(\"rep\", \".tmp\",", "+            File temp = FILE_UTILS.createTempFile(\"rep\", \".tmp\",", "-            out = new FileOutput(temp);", "+            try {", "+                FileInput in = new FileInput(src);", "+                try {", "+                    FileOutput out = new FileOutput(temp);", "+                    try {", "+                        out.setInputBuffer(buildFilterChain(in.getOutputBuffer()));", "-            int repCountStart = replaceCount;", "+                        while (in.readChunk()) {", "+                            if (processFilterChain()) {", "+                                out.process();", "+                            }", "+                        }", "-            logFilterChain(src.getPath());", "+                        flushFilterChain();", "-            out.setInputBuffer(buildFilterChain(in.getOutputBuffer()));", "-", "-            while (in.readChunk()) {", "-                if (processFilterChain()) {", "-                    out.process();", "+                        out.flush();", "+                    } finally {", "+                        out.close();", "+                    }", "+                } finally {", "+                    in.close();", "-            }", "-", "-            flushFilterChain();", "-", "-            out.flush();", "-            in.close();", "-            in = null;", "-            out.close();", "-            out = null;", "-", "-            boolean changes = (replaceCount != repCountStart);", "-            if (changes) {", "-                fileCount++;", "-                long origLastModified = src.lastModified();", "-                FILE_UTILS.rename(temp, src);", "-                if (preserveLastModified) {", "-                    FILE_UTILS.setFileLastModified(src, origLastModified);", "+                boolean changes = (replaceCount != repCountStart);", "+                if (changes) {", "+                    fileCount++;", "+                    long origLastModified = src.lastModified();", "+                    FILE_UTILS.rename(temp, src);", "+                    if (preserveLastModified) {", "+                        FILE_UTILS.setFileLastModified(src, origLastModified);", "+                    }", "-                temp = null;", "+            } finally {", "+                if (temp.isFile() && !temp.delete()) {", "+                    temp.deleteOnExit();", "+                }", "-        } finally {", "-            if (null != in) {", "-                in.closeQuietly();", "-            }", "-            if (null != out) {", "-                out.closeQuietly();", "-            }", "-            if (temp != null) {", "-                if (!temp.delete()) {", "-                    temp.deleteOnExit();", "-                }", "-            }"]}]}
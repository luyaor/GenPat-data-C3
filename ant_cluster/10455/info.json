{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a771a033d525ce122d66fc40adbd249e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a288a5311e0a66d1991bc57b5cde9dc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/regexp/RegexpFactory.java", "commitBeforeChange": "1c1b51bd76af7e7cfa6dab8a66b3661acf199bea", "commitAfterChange": "c64fafb60c841a1c7f014340167a84b32c0d19e3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected Regexp createRegexpInstance(String classname)         throws BuildException", "signatureAfterChange": "     protected Regexp createRegexpInstance(String classname) throws BuildException", "diff": ["-    protected Regexp createRegexpInstance(String classname)", "-        throws BuildException {", "-", "-        RegexpMatcher m = createInstance(classname);", "-        if (m instanceof Regexp) {", "-            return (Regexp) m;", "-        } else {", "-            throw new BuildException(classname + \" doesn't implement the Regexp interface\");", "-        }", "+    protected Regexp createRegexpInstance(String classname) throws BuildException {", "+        return (Regexp) ClasspathUtils.newInstance(classname, RegexpFactory.class.getClassLoader(),", "+                Regexp.class);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50bea8283221a6ec4fbb32a875e5617e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/regexp/RegexpMatcherFactory.java", "commitBeforeChange": "af007ba13234afc51a113ee612e6abad4642cad1", "commitAfterChange": "81b65c0eaa7fff0b658e28269907a36c3a83fc6b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected RegexpMatcher createInstance(String className)         throws BuildException", "signatureAfterChange": "     protected RegexpMatcher createInstance(String className)         throws BuildException", "diff": ["-        throws BuildException {", "-        try {", "-            Class implClass = Class.forName(className);", "-            return (RegexpMatcher) implClass.newInstance();", "-        } catch (Throwable t) {", "-            throw new BuildException(t);", "-        }", "+        throws BuildException ", "+    {", "+        return (RegexpMatcher) ClasspathUtils.newInstance(className,", "+                RegexpMatcherFactory.class.getClassLoader(), RegexpMatcher .class);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7d6e04a9a7748a1bac0cbf6b3de0abf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/IncludeTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": "      public void testWithSpaceInclude()", "signatureAfterChange": "      @Test     public void testWithSpaceInclude()", "diff": ["+    @Test", "-        configureProject(\"src/etc/testcases/core/include/with space/include.xml\");", "-        try {", "-            expectLog(\"test1\", \"from included entity in 'with space'\");", "-        } catch (Throwable t) {", "-            throw new AssertionFailedError(", "-                t.toString() + \"; log=\\n\" + getFullLog());", "-        }", "+        buildRule.configureProject(\"src/etc/testcases/core/include/with space/include.xml\");", "+        buildRule.executeTarget(\"test1\");", "+        assertEquals(\"from included entity in 'with space'\", buildRule.getLog());"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cffadfabe53b83231700b952b74e492f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67b3de14ca3cc86f58c4fc04b848610d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "93db46be115205107729104e728d45687d885295", "commitAfterChange": "20ab59bff57796a67e1cdfefbc29826c7d55edba", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "      private void doReversibleTransformation()", "signatureAfterChange": "      private void doReversibleTransformation()", "diff": ["-        workLimit = workFactor * last;", "-        workDone = 0;", "-        blockRandomised = false;", "-        firstAttempt = true;", "+        m_workLimit = m_workFactor * m_last;", "+        m_workDone = 0;", "+        m_blockRandomised = false;", "+        m_firstAttempt = true;", "-        if( workDone > workLimit && firstAttempt )", "+        if( m_workDone > m_workLimit && m_firstAttempt )", "-            workLimit = workDone = 0;", "-            blockRandomised = true;", "-            firstAttempt = false;", "+            m_workLimit = m_workDone = 0;", "+            m_blockRandomised = true;", "+            m_firstAttempt = false;", "-        origPtr = -1;", "-        for( i = 0; i <= last; i++ )", "+        m_origPtr = -1;", "+        for( i = 0; i <= m_last; i++ )", "-            if( zptr[ i ] == 0 )", "+            if( m_zptr[ i ] == 0 )", "-                origPtr = i;", "+                m_origPtr = i;", "-        if( origPtr == -1 )", "+        if( m_origPtr == -1 )"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b98d4cdb9aaf132d4f9902862b3c2ab3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "228fb9839c21a0a853598e114faca72c8e9340e7", "commitAfterChange": "9922008d657c72235c402343fd88847b044014ad", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 36, "signatureBeforeChange": "      private void doReversibleTransformation()", "signatureAfterChange": "      private void blockSort()", "diff": ["-    private void doReversibleTransformation() {", "-        int i;", "-        workLimit = workFactor * last;", "-        workDone = 0;", "-        blockRandomised = false;", "-        firstAttempt = true;", "-", "+    private void blockSort() {", "+        this.workLimit = WORK_FACTOR * this.last;", "+        this.workDone = 0;", "+        this.blockRandomised = false;", "+        this.firstAttempt = true;", "-        if (workDone > workLimit && firstAttempt) {", "+        if (this.firstAttempt && (this.workDone > this.workLimit)) {", "-            workLimit = workDone = 0;", "-            blockRandomised = true;", "-            firstAttempt = false;", "+            this.workLimit = this.workDone = 0;", "+            this.firstAttempt = false;", "-        origPtr = -1;", "-        for (i = 0; i <= last; i++) {", "-            if (zptr[i] == 0) {", "-                origPtr = i;", "+        int[] fmap = this.data.fmap;", "+        this.origPtr = -1;", "+        for (int i = 0, lastShadow = this.last; i <= lastShadow; i++) {", "+            if (fmap[i] == 0) {", "+                this.origPtr = i;", "-        if (origPtr == -1) {", "-            panic();", "+        // assert (this.origPtr != -1) : this.origPtr;", "+    }"]}]}
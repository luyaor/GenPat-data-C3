{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb179fb29ff09b0383e156556411b8ba", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5df66c706d45ee4ce097015a107ecd3f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Move.java", "commitBeforeChange": "111d76453a147727fb73d6b2b438c82f11218c92", "commitAfterChange": "5c5b959ca73e40af4f23b845579bbb7fa5e73bb3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected boolean renameFile(File sourceFile, File destFile,                                  boolean filtering, boolean overwrite)         throws IOException, BuildException", "signatureAfterChange": "     protected boolean renameFile(File sourceFile, File destFile,                                  boolean filtering, boolean overwrite)         throws IOException, BuildException", "diff": ["-        if (!filtering) {", "-            // ensure that parent dir of dest file exists!", "-            // not using getParentFile method to stay 1.1 compat", "-            String parentPath = destFile.getParent();", "-            if (parentPath != null) {", "-                File parent = new File(parentPath);", "-                if (!parent.exists()) {", "-                    parent.mkdirs();", "-                }", "-            }", "-", "-            if (destFile.exists()) {", "-                if (!destFile.delete()) {", "-                    throw new BuildException(\"Unable to remove existing file \"", "-                                             + destFile);", "-                }", "-            }", "-            renamed = sourceFile.renameTo(destFile);", "-        } else {", "+        if (filterSets != null && filterSets.size() > 0) {", "+        } else {", "+            if (!filtering) {", "+                // ensure that parent dir of dest file exists!", "+                // not using getParentFile method to stay 1.1 compat", "+                String parentPath = destFile.getParent();", "+                if (parentPath != null) {", "+                    File parent = new File(parentPath);", "+                    if (!parent.exists()) {", "+                        parent.mkdirs();", "+                    }", "+                }", "+", "+                if (destFile.exists()) {", "+                    if (!destFile.delete()) {", "+                        throw new BuildException(\"Unable to remove existing file \"", "+                                                 + destFile);", "+                    }", "+                }", "+                renamed = sourceFile.renameTo(destFile);", "+            } else {", "+                renamed = false;", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "683e5ed69f4aef805ed2a26871ec8dd1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/PatternSet.java", "commitBeforeChange": "55ed11a225d2a2c7d2cc28a6b07d425a79d3b91a", "commitAfterChange": "c2e92b31856632faa104d9d1a93c7e1480aa8b92", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 25, "signatureBeforeChange": "     private void readFiles(Project p)", "signatureAfterChange": "     private void readFiles(Project p)", "diff": ["-        if (incl != null) {", "-            readPatterns(incl, includeList, p);", "-            incl = null;", "+        if (includesFileList.size() > 0) {", "+            Enumeration e = includesFileList.elements();", "+            while (e.hasMoreElements()) {", "+            \tNameEntry ne = (NameEntry)e.nextElement();", "+            \tString fileName = ne.evalName(p);", "+            \tif (fileName != null) {", "+                    File inclFile = p.resolveFile(fileName);", "+                    if (!inclFile.exists())", "+                        throw new BuildException(\"Includesfile \"", "+                                                 + inclFile.getAbsolutePath()", "+                                                 + \" not found.\");", "+                    readPatterns(inclFile, includeList, p);", "+            \t}", "+            }", "+            includesFileList.clear();", "-        if (excl != null) {", "-            readPatterns(excl, excludeList, p);", "-            excl = null;", "-        }", "-    }", "+        if (excludesFileList.size() > 0) {", "+            Enumeration e = includesFileList.elements();", "+            while (e.hasMoreElements()) {", "+            \tNameEntry ne = (NameEntry)e.nextElement();", "+            \tString fileName = ne.evalName(p);", "+            \tif (fileName != null) {", "+                    File exclFile = p.resolveFile(fileName);", "+                    if (!exclFile.exists())", "+                        throw new BuildException(\"Excludesfile \"", "+                                                 + exclFile.getAbsolutePath()", "+                                                 + \" not found.\");", "+                    readPatterns(exclFile, excludeList, p);", "+            \t}", "+            }", "+            excludesFileList.clear();", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96985e6381adc5a222cd74c06e95083a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/depend/Depend.java", "commitBeforeChange": "7be61ff46cba15020a14a9d8c83236e929bb5a31", "commitAfterChange": "07a3027bb2230d2add3de5ec0b166a35d50b0236", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private void addClassFiles(Vector classFileList, File dir, File root)", "signatureAfterChange": "     private void addClassFiles(Vector classFileList, File dir, File root)", "diff": ["-        if (filesInDir != null) {", "-            int length = filesInDir.length;", "+        if (filesInDir == null) {", "+            return;", "+        }", "+        int length = filesInDir.length;", "-            for (int i = 0; i < length; ++i) {", "-                File file = new File(dir, filesInDir[i]);", "-                if (file.isDirectory()) {", "-                    addClassFiles(classFileList, file, root);", "-                } else if (file.getName().endsWith(\".class\")) {", "-                    ClassFileInfo info = new ClassFileInfo();", "-                    info.absoluteFile = file;", "-                    info.relativeName = file.getPath().substring(root.getPath().length() + 1,", "-                        file.getPath().length() - 6);", "-                    info.className = ClassFileUtils.convertSlashName(info.relativeName);", "-                    classFileList.addElement(info);", "-                }", "+        int rootLength = root.getPath().length();", "+        for (int i = 0; i < length; ++i) {", "+            File file = new File(dir, filesInDir[i]);", "+            if (file.isDirectory()) {", "+                addClassFiles(classFileList, file, root);", "+            } else if (file.getName().endsWith(\".class\")) {", "+                ClassFileInfo info = new ClassFileInfo();", "+                info.absoluteFile = file;", "+                String relativeName = file.getPath().substring(rootLength + 1,", "+                    file.getPath().length() - 6);", "+                info.className ", "+                    = ClassFileUtils.convertSlashName(relativeName);", "+                info.sourceFile = findSourceFile(relativeName);    ", "+                classFileList.addElement(info);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b39af2067e6a10ec01e4b37401dfcd8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/launch/Launcher.java", "commitBeforeChange": "2f92f5e232e603548fc2def696fa1ab278fb11a8", "commitAfterChange": "543344b83993d92a562a4db14717a1a8f27f499d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void run(String[] args) throws LaunchException, MalformedURLException", "signatureAfterChange": "     private void run(String[] args) throws LaunchException, MalformedURLException", "diff": ["+        String cpString = null;", "+            } else if (args[i].equals(\"-cp\")) {", "+                if (i == args.length - 1) {", "+                    throw new LaunchException(\"The -cp argument must \"", "+                        + \"be followed by a classpath expression\");", "+                }", "+                if (cpString != null) {", "+                    throw new LaunchException(\"The -cp argument must \"", "+                        + \"not be repeated\");", "+                }", "+                cpString = args[++i];", "-        if (libPaths.size() == 0) {", "+        if (libPaths.size() == 0 && cpString == null) {", "+", "+        if (cpString != null) {", "+            addPath(cpString, false, libPathURLs);", "+        }", "+", "-            StringTokenizer myTokenizer", "-                = new StringTokenizer(libPath, System.getProperty(\"path.separator\"));", "-            while (myTokenizer.hasMoreElements()) {", "-                String elementName = myTokenizer.nextToken();", "-                File element = new File(elementName);", "-                if (elementName.indexOf(\"%\") != -1 && !element.exists()) {", "-                    continue;", "-                }", "-                if (element.isDirectory()) {", "-                    // add any jars in the directory", "-                    URL[] dirURLs = Locator.getLocationURLs(element);", "-                    for (int j = 0; j < dirURLs.length; ++j) {", "-                        libPathURLs.add(dirURLs[j]);", "-                    }", "-                }", "-", "-                libPathURLs.add(element.toURL());", "-            }", "+            addPath(libPath, true, libPathURLs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0ff897cf5f35a14050f259f19ad4e63", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/XmlLogger.java", "commitBeforeChange": "90dcced6ab280d3093912bc4c831be790eeeb295", "commitAfterChange": "6c315c38234faf9c26ca3ab76195b767eccbe558", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void buildFinished(BuildEvent event)", "signatureAfterChange": "      public void buildFinished(BuildEvent event)", "diff": ["+            // print the stacktrace in the build file it is always useful...", "+            // better have too much info than not enough.", "+            ByteArrayOutputStream baos = new ByteArrayOutputStream();", "+            PrintStream ps = new PrintStream(baos,true);", "+            Throwable t = event.getException();", "+            t.printStackTrace(ps);", "+            ps.flush();", "+            ps.close();", "+            Text errText =  doc.createCDATASection(baos.toString());", "+            Element stacktrace = doc.createElement(STACKTRACE_TAG);", "+            stacktrace.appendChild(errText);", "+            buildElement.element.appendChild(stacktrace);", "+       String outFilename = event.getProject().getProperty(\"XmlLogger.file\");", "+        if (outFilename == null) {", "+            outFilename = \"log.xml\";", "+        }", "+        Writer out = null;", "-            String outFilename = ", "-                event.getProject().getProperty(\"XmlLogger.file\");", "-", "-            if (outFilename == null) {", "-                outFilename = \"log.xml\";", "-            }", "-", "-            Writer out =", "-                new OutputStreamWriter(new FileOutputStream(outFilename),", "-                                       \"UTF8\");", "+            FileOutputStream fos = new FileOutputStream(outFilename);", "+            out = new OutputStreamWriter(fos, \"UTF8\");", "-            out.close();", "-            ", "-            throw new BuildException(\"Unable to close log file\", exc);", "+            throw new BuildException(\"Unable to write log file\", exc);", "+        } finally {", "+            if (out != null){", "+                try {", "+                    out.close();", "+                } catch (IOException e){ }", "+            }"]}]}
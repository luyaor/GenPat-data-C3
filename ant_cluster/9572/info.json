{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6d98401b44b424b5a62136ff46dc6fe6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20ad6125644e0f2a679c728b7e2ec0a7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java", "commitBeforeChange": "d91fdceaa60b70502667049c3156197ab14908f0", "commitAfterChange": "d95bfb6e605b1eefc16889b9dfdf081072c82e51", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected Commandline setupJavacCommandlineSwitches(Commandline cmd,                                                         boolean useDebugLevel)", "signatureAfterChange": "     protected Commandline setupJavacCommandlineSwitches(Commandline cmd,                                                         boolean useDebugLevel)", "diff": ["-                attributes.log(\"Since fork is false, ignoring memoryInitialSize setting.\",", "+                attributes.log(\"Since fork is false, ignoring \"", "+                               + \"memoryInitialSize setting.\", ", "-                cmd.createArgument().setValue(memoryParameterPrefix+\"ms\"+memoryInitialSize);", "+                cmd.createArgument().setValue(memoryParameterPrefix", "+                                              + \"ms\" + memoryInitialSize);", "-                attributes.log(\"Since fork is false, ignoring memoryMaximumSize setting.\",", "+                attributes.log(\"Since fork is false, ignoring \"", "+                               + \"memoryMaximumSize setting.\",", "-                cmd.createArgument().setValue(memoryParameterPrefix+\"mx\"+memoryMaximumSize);", "+                cmd.createArgument().setValue(memoryParameterPrefix", "+                                              + \"mx\" + memoryMaximumSize);", "-            // If the buildfile specifies sourcepath=\"\", then don't output any sourcepath.", "+            // If the buildfile specifies sourcepath=\"\", then don't", "+            // output any sourcepath.", "-                attributes.log(\"depend attribute is not supported by the modern compiler\",", "-                    Project.MSG_WARN);", "+                attributes.log(\"depend attribute is not supported by the \"", "+                               + \"modern compiler\", Project.MSG_WARN);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2581a02a0d2eb2d22b1bd1907dabb832", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ssh/AbstractSshMessage.java", "commitBeforeChange": "db261bb4de9cd85c8b10068e45b91faed50dfba5", "commitAfterChange": "a5ec1501c919f54d9becf781db44e2e529676fd5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      protected void waitForAck(InputStream in) throws IOException", "signatureAfterChange": "     protected void waitForAck(InputStream in)          throws IOException, BuildException", "diff": ["-    protected void waitForAck(InputStream in) throws IOException {", "-        int b = 0;", "-        do {", "-            b = in.read();", "-        } while (b > 0);", "+     */", "+    protected void waitForAck(InputStream in) ", "+        throws IOException, BuildException {", "+        int b = in.read();", "+", "+        // b may be 0 for success,", "+        //          1 for error,", "+        //          2 for fatal error,", "+", "+        if (b == -1) {", "+            // didn't receive any response", "+            throw new BuildException(\"No response from server\");", "+        } else if (b != 0) {", "+            StringBuffer sb = new StringBuffer();", "+", "+            int c = in.read();", "+            while (c > 0 && c != '\\n') {", "+                sb.append((char) c);", "+                c = in.read();", "+            }", "+            ", "+            if (b == 1) {", "+                throw new BuildException(\"server indicated an error: \"", "+                                         + sb.toString());", "+            } else if (b == 2) {", "+                throw new BuildException(\"server indicated a fatal error: \"", "+                                         + sb.toString());", "+            } else {", "+                throw new BuildException(\"unknown response, code \" + b", "+                                         + \" message: \" + sb.toString());", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26edca42e47040490b3e6416ed28600a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/XMLValidateTask.java", "commitBeforeChange": "6650efb105e0cdd4941ffc2c98f2aa8ee6e1dfea", "commitAfterChange": "e42bd46a51dd6347c0961e311bd3717c24d4ea8c", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private boolean setFeature(String feature, boolean value, boolean warn)", "signatureAfterChange": "     private void setFeature(String feature, boolean value)          throws BuildException", "diff": ["-    private boolean setFeature(String feature, boolean value, boolean warn) {", "+    private void setFeature(String feature, boolean value) ", "+        throws BuildException {", "-        boolean  toReturn = false;", "-            toReturn = true;", "-            if (warn) {", "-                log(\"Could not set feature '\"", "-                    + feature", "-                    + \"' because the '\" +", "-                       readerClassName + \"' parser doesn't recognize it\",", "-                    Project.MSG_WARN);", "-            }", "+            throw new BuildException(\"Parser \" + xmlReader.getClass().getName()", "+                                     + \" doesn't recognize feature \"", "+                                     + feature, e, getLocation());", "-            if (warn) {", "-                log(\"Could not set feature '\"", "-                    + feature", "-                    + \"' because the '\" +", "-                        readerClassName + \"' parser doesn't support it\",", "-                    Project.MSG_WARN);", "-            }", "+            throw new BuildException(\"Parser \" + xmlReader.getClass().getName()", "+                                     + \" doesn't support feature \"", "+                                     + feature, e, getLocation());", "-        return toReturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "444de4be481b9ea6c9fd325a2f1ee963", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "e7cca3123ec529a60595f5a8f86d874b52db026a", "commitAfterChange": "9ce98074308e646c89b868a37f5ed90c0ce3396b", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void execute()", "signatureAfterChange": "     public void execute()", "diff": ["+", "+        // if binary check if incompatible attributes are used", "+        if (binary) {", "+            if (destinationFile == null) {", "+                throw new BuildException(", "+                    \"DestFile attribute is required for binary concatenation\");", "+            }", "+", "+            if (textBuffer != null) {", "+                throw new BuildException(", "+                    \"Nested text is incompatible with binary concatenation\");", "+            }", "+            if (encoding != null || outputEncoding != null) {", "+                throw new BuildException(", "+                    \"Seting input or output encoding is incompatible with binary\"", "+                    + \" concatenation\");", "+            }", "+            if (filterChains != null) {", "+                throw new BuildException(", "+                    \"Setting filters is incompatible with binary concatenation\");", "+            }", "+            if (fixLastLine) {", "+                throw new BuildException(", "+                    \"Setting fixlastline is incompatible with binary concatenation\");", "+            }", "+            if (header != null || footer != null) {", "+                throw new BuildException(", "+                    \"Nested header or footer is incompatible with binary concatenation\");", "+            }", "+        }", "-        cat();", "+        if (binary) {", "+            binaryCat();", "+        } else {", "+            cat();", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51eb6ceaa64dc75a209addc06a3911c7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/AggregateTransformer.java", "commitBeforeChange": "37e1a669340af86ea163020ac3cec13cbd881b29", "commitAfterChange": "ce8272e144b8168b864015d2dd304410ebb236fc", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 10, "signatureBeforeChange": "     protected XSLTInputSource getXSLStreamSource(String name) throws IOException", "signatureAfterChange": "     protected String getStylesheetSystemId() throws IOException", "diff": ["+     */", "+    protected String getStylesheetSystemId() throws IOException {", "+        String xslname = \"junit-frames.xsl\";", "+        if (NOFRAMES.equals(format)){", "+            xslname = \"junit-noframes.xsl\";", "-     */", "-    protected XSLTInputSource getXSLStreamSource(String name) throws IOException {", "-        InputStream in;", "-        String systemId; //we need this because there are references in xsls", "+        URL url = null;", "-            in = getResourceAsStream(\"xsl/\" + name);", "-            systemId = getClass().getResource(\"xsl/\" + name).toString();", "+            url = getClass().getResource(xslname);", "+            if (url == null){", "+                throw new FileNotFoundException(\"Could not find jar resource \" + xslname);", "+            }", "-            File f = new File(styleDir, name);", "-            in= new FileInputStream(f);", "-            systemId = \"file:///\" + f.getAbsolutePath();", "+            File file = new File(styleDir, xslname);", "+            if (!file.exists()){", "+                throw new FileNotFoundException(\"Could not find file '\" + file + \"'\");", "+            }", "+            url = new URL(\"file\", \"\", file.getAbsolutePath());", "-        XSLTInputSource ss = new XSLTInputSource(in);", "-        ss.setSystemId(systemId);", "-        return ss;", "+        return url.toExternalForm();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "626617213ccce122ac89a3b394d91105", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/perforce/P4Integrate.java", "commitBeforeChange": "787728897a6052af385456788bc4e578ba170ba5", "commitAfterChange": "a12cf63191aece501e0c5b2603c6b72cad03caf8", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        if ( this.leavetargetrevision) {", "+        if (this.leavetargetrevision) {", "-        if ( this.enablebaselessmerges ) {", "+        if (this.enablebaselessmerges) {", "-        if (this.simulationmode ) {", "+        if (this.simulationmode) {", "-        if ( this.reversebranchmappings ) {", "+        if (this.reversebranchmappings) {", "-        if ( this.propagatesourcefiletype ) {", "+        if (this.propagatesourcefiletype) {", "-        if ( this.nocopynewtargetfiles ) {", "+        if (this.nocopynewtargetfiles) {", "-", "-        }", "-        else if ( branch != null && fromfile == null && tofile != null )", "-            {", "+        } else if (branch != null && fromfile == null && tofile != null) {", "-        }", "-        else if ( branch != null && fromfile != null )", "-            {", "-            command = P4CmdOpts + \" -b \" + branch + \" -s \"+ fromfile + \" \" + tofile;", "-        }", "-        else {", "-            throw new BuildException(\"you need to specify fromfile and tofile, or branch and tofile, or branch and fromfile, or branch and fromfile and tofile \");", "+        } else if (branch != null && fromfile != null) {", "+            command = P4CmdOpts + \" -b \" + branch + \" -s \" + fromfile + \" \" + tofile;", "+        } else {", "+            throw new BuildException(\"you need to specify fromfile and tofile, \"", "+            + \"or branch and tofile, or branch and fromfile, or branch and fromfile and tofile \");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6446362d6e928111e937e589ba4767fc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/starteam/StarTeamCheckout.java", "commitBeforeChange": "08084b4e5c26211fb4fb4335d175f1e9c33be1bf", "commitAfterChange": "2f7478b5c436752b32f6f6ad1e3eefefd9018149", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": "     protected void testPreconditions() throws BuildException", "signatureAfterChange": "     protected void testPreconditions() throws BuildException", "diff": ["-        if (lockStatus != Item.LockType.UNCHANGED && null != getLabel()) {", "-            log(\"Neither locked nor unlocked may be true when checking out a labeled version.\", ", "-                Project.MSG_ERR);", "-            throw new BuildException(\"Lock status may not be changed when checking out a non-current version.\");", "+        if (lockStatus != Item.LockType.UNCHANGED) {", "+            boolean lockStatusBad = false;", "+            if (null != getLabel()) {", "+                log(\"Neither locked nor unlocked may be true\"", "+                    + \" when checking out a labeled version.\", ", "+                    Project.MSG_ERR);", "+                lockStatusBad = true;", "+            } else if (null != getAsOfDate()) {", "+                log(\"Neither locked nor unlocked may be true\"", "+                    + \" when checking out by date.\", ", "+                    Project.MSG_ERR);", "+                lockStatusBad = true;", "+            }", "+            if (lockStatusBad) {", "+                throw new BuildException(", "+                    \"Lock status may not be changed\"", "+                    + \" when checking out a non-current version.\");", "+            }", "+        if (null != getLabel() && null != getAsOfDate()) {", "+            throw new BuildException(", "+                \"Both label and asOfDate specified.  \"", "+                + \"Unable to process request.\");", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a09d0d39debeb9fe7dfef64318505f2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "12df7ec426adb3e47cfb0d268d9b646769e38ac7", "commitAfterChange": "152be14c152edab99f90e8c71f589a6bf8087bbe", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "     public void execute()         throws BuildException", "signatureAfterChange": "     public void execute()         throws BuildException", "diff": ["-                throw new BuildException(\"FTP connection failed: \" + ftp.getReplyString());", "+                throw new BuildException(\"FTP connection failed: \" ", "+                                         + ftp.getReplyString());", "-                    throw new BuildException(", "-                                             \"could not set transfer type: \" +", "+                    throw new BuildException(\"could not set transfer type: \" +", "-                    throw new BuildException(", "-                                             \"could not enter into passive mode: \" +", "+                    throw new BuildException(\"could not enter into passive \"", "+                                             + \"mode: \" +", "-               doSiteCommand(ftp,\"umask \" + umask);", "+                doSiteCommand(ftp, \"umask \" + umask);", "-            // If the action is MK_DIR, then the specified remote directory is the", "-            // directory to create.", "+            // If the action is MK_DIR, then the specified remote", "+            // directory is the directory to create.", "-                        throw new BuildException(", "-                                                 \"could not change remote directory: \" +", "+                        throw new BuildException(\"could not change remote \"", "+                                                 + \"directory: \" +"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "01b303b7b2ebdabc86bb5be31274821f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "125eb34a91c712fe716b3a19065d32b6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/cvslib/CVSPass.java", "commitBeforeChange": "7cffd478a00528784882a5a03d46f2b76ea31c5f", "commitAfterChange": "7e3a3c6b31d98e0670eafa58b20215808105ddaf", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public final void execute()         throws TaskException", "signatureAfterChange": "     public final void execute()         throws TaskException", "diff": ["-        if( cvsRoot == null )", "+        if( null == m_cvsRoot )", "+        {", "-        if( password == null )", "+        }", "+        if( null == m_password )", "+        {", "+        }", "-        log( \"cvsRoot: \" + cvsRoot, project.MSG_DEBUG );", "-        log( \"password: \" + password, project.MSG_DEBUG );", "-        log( \"passFile: \" + passFile, project.MSG_DEBUG );", "+        getLogger().debug( \"cvsRoot: \" + m_cvsRoot );", "+        getLogger().debug( \"password: \" + m_password );", "+        getLogger().debug( \"passFile: \" + m_passwordFile );", "+        //FIXME: Should not be writing the whole file - Just append to the file", "+        //Also should have EOL configurable", "-            StringBuffer buf = new StringBuffer();", "-", "-            if( passFile.exists() )", "+            final StringBuffer sb = new StringBuffer();", "+            if( m_passwordFile.exists() )", "-                BufferedReader reader =", "-                    new BufferedReader( new FileReader( passFile ) );", "+                final BufferedReader reader =", "+                    new BufferedReader( new FileReader( m_passwordFile ) );", "-                    if( !line.startsWith( cvsRoot ) )", "+                    if( !line.startsWith( m_cvsRoot ) )", "-                        buf.append( line + EOL );", "+                        sb.append( line + EOL );", "-            String pwdfile = buf.toString() + cvsRoot + \" A\" + mangle( password );", "+            final String pwdfile =", "+                sb.toString() + m_cvsRoot + \" A\" + mangle( m_password );", "-            log( \"Writing -> \" + pwdfile, project.MSG_DEBUG );", "+            getLogger().debug( \"Writing -> \" + pwdfile );", "-            PrintWriter writer = new PrintWriter( new FileWriter( passFile ) );", "+            final PrintWriter writer =", "+                new PrintWriter( new FileWriter( m_passwordFile ) );", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4046acfbde7da8490033b7e5d18dc993", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/War.java", "commitBeforeChange": "689c463eda7b1f0d4064d9f028582ee95ff9ecda", "commitAfterChange": "c91cce227b53c499d2a61694f6ba14e2e5ba5930", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     protected void zipFile(File file, ZipOutputStream zOut, String vPath,                            int mode)         throws IOException", "signatureAfterChange": "     protected void zipFile(File file, ZipOutputStream zOut, String vPath,                            int mode)         throws IOException", "diff": ["-        if (vPath.equalsIgnoreCase(\"WEB-INF/web.xml\"))  {", "-            if (deploymentDescriptor == null", "-                || !FILE_UTILS.fileNameEquals(deploymentDescriptor, file)", "-                || descriptorAdded) {", "-                log(\"Warning: selected \" + archiveType", "-                    + \" files include a WEB-INF/web.xml which will be ignored \"", "-                    + \"(please use webxml attribute to \"", "-                    + archiveType + \" task)\", Project.MSG_WARN);", "+        String vPathLowerCase = vPath.toLowerCase(Locale.ENGLISH);", "+        //by default, we add the file.", "+        boolean addFile = true;", "+        if (XML_DESCRIPTOR_PATH.equals(vPathLowerCase)) {", "+            //a web.xml file was found. See if it is a duplicate or not", "+            if (addedWebXmlFile != null) {", "+                //a second web.xml file, so skip it", "+                addFile = false;", "+                //check to see if we warn or not", "+                if (!FILE_UTILS.fileNameEquals(addedWebXmlFile, file)) {", "+                    log(\"Warning: selected \" + archiveType", "+                            +\" files include a second \" +XML_DESCRIPTOR_PATH", "+                            + \" which will be ignored.\\n\"", "+                            + \"The duplicate entry is at \" +file +'\\n'", "+                            + \"The file that will be used is \"", "+                            + addedWebXmlFile,", "+                            Project.MSG_WARN);", "+                }", "-                super.zipFile(file, zOut, vPath, mode);", "+                //no added file, yet", "+                addedWebXmlFile=file;", "+                //there is no web.xml file, so add it", "+                addFile = true;", "+                //and remember that we did", "+                deploymentDescriptor = file;", "-        } else {", "+        }", "+        if (addFile) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "797f29d72727163ec2b96dc6fab7b508", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/IContract.java", "commitBeforeChange": "7f76769aba1d44cd44eb56ebadbbbe9068859c68", "commitAfterChange": "0ae47a0947c94f5e56a518702e90355fe23bf1ff", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private void scan() throws BuildException", "signatureAfterChange": "     private void scan() throws BuildException", "diff": ["-        if( controlFile != null ) {", "-            if( controlFile.exists() ) {", "-                controlFileTime = controlFile.lastModified();", "-                fileset.setDir( instrumentDir );", "-                ds = fileset.getDirectoryScanner( project );", "-                files = ds.getIncludedFiles();", "-                for( int i = 0; i < files.length; i++ ) {", "-                    File srcFile = new File(srcDir, files[i]);", "-                    if( files[i].endsWith( \".class\" ) ) {", "-                        if( controlFileTime > srcFile.lastModified() ) {", "-                            if( !dirty ) {", "-                                log( \"Control file \" + controlFile.getAbsolutePath() + \" has been updated. Instrumenting all files...\" );", "+        try {", "+            if( controlFile != null ) {", "+                if( controlFile.exists() && instrumentDir.exists() ) {", "+                    controlFileTime = controlFile.lastModified();", "+                    fileset.setDir( instrumentDir );", "+                    ds = fileset.getDirectoryScanner( project );", "+                    files = ds.getIncludedFiles();", "+                    for( int i = 0; i < files.length; i++ ) {", "+                        File srcFile = new File(srcDir, files[i]);", "+                        if( files[i].endsWith( \".class\" ) ) {", "+                            if( controlFileTime > srcFile.lastModified() ) {", "+                                if( !dirty ) {", "+                                    log( \"Control file \" + controlFile.getAbsolutePath() + \" has been updated. Instrumenting all files...\" );", "+                                }", "+                                dirty = true;", "+                                instrumentall = true;", "-                            dirty = true;", "-                            instrumentall = true;", "+        } catch( Throwable t ) {", "+            System.out.println( \"FATAL\" );", "+            t.printStackTrace();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94f520d5be22f0231050a30dabaf4871", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/Available.java", "commitBeforeChange": "bab80bf968716d4230c3c4461a8dfbc6343f6a6b", "commitAfterChange": "093967db0e29ab675eef29fbe21d840f3467c5a7", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      private boolean checkFile()         throws TaskException", "signatureAfterChange": "      private boolean checkFile()         throws TaskException", "diff": ["-        if( filepath == null )", "+        if( m_filepath == null )", "-            return checkFile( resolveFile( file ), file );", "+            return checkFile( resolveFile( m_file ), m_file );", "-            String[] paths = filepath.list();", "+            String[] paths = m_filepath.list();", "-                if( path.exists() && file.equals( paths[ i ] ) )", "+                if( path.exists() && m_file.equals( paths[ i ] ) )", "-                    if( type == null )", "+                    if( m_type == null )", "-                    else if( type.isDir()", "+                    else if( m_type.isDir()", "-                    else if( type.isFile()", "+                    else if( m_type.isFile()", "-                    && file.equals( parent.getAbsolutePath() ) )", "+                    && m_file.equals( parent.getAbsolutePath() ) )", "-                    if( type == null )", "+                    if( m_type == null )", "-                    else if( type.isDir() )", "+                    else if( m_type.isDir() )", "-                    if( checkFile( new File( path, file ),", "-                                   file + \" in \" + path ) )", "+                    if( checkFile( new File( path, m_file ),", "+                                   m_file + \" in \" + path ) )", "-                    if( checkFile( new File( parent, file ),", "-                                   file + \" in \" + parent ) )", "+                    if( checkFile( new File( parent, m_file ),", "+                                   m_file + \" in \" + parent ) )", "-                        if( checkFile( new File( grandParent, file ),", "-                                       file + \" in \" + grandParent ) )", "+                        if( checkFile( new File( grandParent, m_file ),", "+                                       m_file + \" in \" + grandParent ) )"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb7ebf0749956a947a3352f225fea62a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/Available.java", "commitBeforeChange": "bab80bf968716d4230c3c4461a8dfbc6343f6a6b", "commitAfterChange": "093967db0e29ab675eef29fbe21d840f3467c5a7", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      private boolean checkFile()         throws TaskException", "signatureAfterChange": "      private boolean checkFile()         throws TaskException", "diff": ["-        if( filepath == null )", "+        if( m_filepath == null )", "-            return checkFile( resolveFile( file ), file );", "+            return checkFile( resolveFile( m_file ), m_file );", "-            String[] paths = filepath.list();", "+            String[] paths = m_filepath.list();", "-                if( path.exists() && file.equals( paths[ i ] ) )", "+                if( path.exists() && m_file.equals( paths[ i ] ) )", "-                    if( type == null )", "+                    if( m_type == null )", "-                    else if( type.isDir()", "+                    else if( m_type.isDir()", "-                    else if( type.isFile()", "+                    else if( m_type.isFile()", "-                    && file.equals( parent.getAbsolutePath() ) )", "+                    && m_file.equals( parent.getAbsolutePath() ) )", "-                    if( type == null )", "+                    if( m_type == null )", "-                    else if( type.isDir() )", "+                    else if( m_type.isDir() )", "-                    if( checkFile( new File( path, file ),", "-                                   file + \" in \" + path ) )", "+                    if( checkFile( new File( path, m_file ),", "+                                   m_file + \" in \" + path ) )", "-                    if( checkFile( new File( parent, file ),", "-                                   file + \" in \" + parent ) )", "+                    if( checkFile( new File( parent, m_file ),", "+                                   m_file + \" in \" + parent ) )", "-                        if( checkFile( new File( grandParent, file ),", "-                                       file + \" in \" + grandParent ) )", "+                        if( checkFile( new File( grandParent, m_file ),", "+                                       m_file + \" in \" + grandParent ) )"]}]}
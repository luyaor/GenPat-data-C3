{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5aeec5529de06dea4ad77b872708a604", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bfe6589f79e2d8928bccab6c44337b4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antlibs/system/org/apache/ant/antlib/system/Ant.java", "commitBeforeChange": "65b70febb53b077317c4d678291f9af547c3d116", "commitAfterChange": "f9d1c1691c7e9d80b793f5178f6113c949fc2441", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void execute() throws ExecutionException", "signatureAfterChange": "     public void execute() throws AntException", "diff": ["-    public void execute() throws ExecutionException {", "+    public void execute() throws AntException {", "-        Object key = execService.setupBuild(model, getProperties());", "+        BuildKey key = execService.setupBuild(model, getProperties(), true);", "+", "+        if (output != null) {", "+            FileService fileService", "+                = (FileService) getCoreService(FileService.class);", "+", "+            File outfile = null;", "+            if (baseDir != null) {", "+                outfile = FileUtils.newFileUtils().resolveFile(baseDir, output);", "+            } else {", "+                outfile = fileService.resolveFile(output);", "+            }", "+            try {", "+                PrintStream out", "+                    = new PrintStream(new FileOutputStream(outfile));", "+                DefaultLogger logger = new DefaultLogger();", "+                logger.setMessageOutputLevel(MessageLevel.MSG_INFO);", "+                logger.setOutputPrintStream(out);", "+                logger.setErrorPrintStream(out);", "+                execService.addBuildListener(key, logger);", "+            } catch (IOException ex) {", "+                log(\"Ant: Can't set output to \" + output,", "+                    MessageLevel.MSG_INFO);", "+            }", "+        }", "+", "+        execService.releaseBuild(key);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e1371ad209b1728ae35b5968497640e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/starteam/StarTeamCheckin.java", "commitBeforeChange": "837f7ef785e24137608ba41f850d605b23bccff4", "commitAfterChange": "23e61358c8ed2aa3fe63c1f67082150047f1df9e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private void addUncontrolledItems(Hashtable localFiles, Folder folder)             throws IOException", "signatureAfterChange": "         void processUncontrolledItems() throws BuildException", "diff": ["-    private void addUncontrolledItems(Hashtable localFiles, Folder folder)", "-            throws IOException {", "-        try {", "-            Enumeration e = localFiles.keys();", "-            while (e.hasMoreElements()) {", "-                java.io.File file =", "-                        new java.io.File(e.nextElement().toString());", "-                add(folder, file);", "-        } catch (SecurityException e) {", "-            log(\"Error adding file: \" + e, Project.MSG_ERR);", "+         */", "+        void processUncontrolledItems() throws BuildException {", "+            if (this.isActive()) {", "+                Enumeration e = this.keys();", "+                while (e.hasMoreElements()) {", "+                    java.io.File local = (java.io.File) e.nextElement();", "+                    Item remoteItem = (Item) this.get(local);", "+                    remoteItem.update();", "+    ", "+                    // once we find a folder that isn't in the repository, ", "+                    // we know we can add it.", "+                    if (local.isDirectory()) {", "+                        Folder folder = (Folder) remoteItem;", "+                        log(\"Added uncontrolled folder \" ", "+                            + folder.getFolderHierarchy()", "+                            + \" from \" + local.getAbsoluteFile());", "+                        if (isRecursive()) {", "+                            UnmatchedFileMap submap = ", "+                                new CheckinMap().init(local, folder);", "+                            submap.processUncontrolledItems();", "+                        }", "+                    } else {", "+                        com.starbase.starteam.File remoteFile =", "+                            (com.starbase.starteam.File) remoteItem;", "+                        log(\"Added uncontrolled file \" ", "+                            + TreeBasedTask.getFullRepositoryPath(remoteFile)", "+                            + \" from \" + local.getAbsoluteFile());", "+    ", "+                    }", "+                }"]}]}
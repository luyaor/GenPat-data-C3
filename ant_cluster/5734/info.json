{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec8a84a8ea26abd6570da603a0211f46", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bd84281046bd06bf2c717da188f5c27", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ReplaceRegExp.java", "commitBeforeChange": "8d4985ca744bd0925d812835615bb991b16e1db2", "commitAfterChange": "f62d563414e6848898008af84073651eb83a7959", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     protected void doReplace(File f, int options)          throws IOException", "signatureAfterChange": "     protected void doReplace(File f, int options)          throws IOException", "diff": ["-            PrintWriter pw = new PrintWriter(bw);", "-                            pw.print(res);", "-                            pw.print('\\r');", "+                            bw.write(res);", "+                            bw.write('\\r');", "-                        pw.print(res);", "+                        bw.write(res);", "-                            pw.print('\\r');", "+                            bw.write('\\r');", "-                        pw.print('\\n');", "+                        bw.write('\\n');", "-                            pw.print(res);", "+                            bw.write(res);", "-                                pw.print('\\r');", "+                                bw.write('\\r');", "-                pw.flush();", "+                bw.flush();", "-                pw.print(res);", "-                pw.flush();", "+                bw.write(res);", "+                bw.flush();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1d2f0045a303aa296b5158c587e636e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/type/DefaultTypeManager.java", "commitBeforeChange": "165ec8163b70ab6415e2ca549bd5d2a621a8e39b", "commitAfterChange": "d23b08a302496937c4d1d08e31431ece313de2b8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private TypedComponentSelector createSelector( final String role )         throws ComponentException", "signatureAfterChange": "     private MultiSourceTypeFactory createFactory( final String role )         throws TypeException", "diff": ["-    private TypedComponentSelector createSelector( final String role )", "-        throws ComponentException", "+    private MultiSourceTypeFactory createFactory( final String role )", "+        throws TypeException", "-        TypedComponentSelector selector = (TypedComponentSelector)m_roleMap.get( role );", "-        if( null != selector ) ", "+        MultiSourceTypeFactory factory = (MultiSourceTypeFactory)m_roleMap.get( role );", "+        if( null != factory ) ", "-            return selector;", "+            return factory;", "-        if( null != m_parent )", "+        final MultiSourceTypeFactory parentFactory = getParentTypedFactory( role );       ", "+        if( null != parentFactory )", "-            final TypedComponentSelector parentSelector = getTypedSelector( m_parent, role );", "-", "-            if( null != parentSelector )", "-            {", "-                selector = new TypedComponentSelector( parentSelector );", "-            }", "+            factory = new MultiSourceTypeFactory( parentFactory );", "-        ///If we haven't goa selector try to create a new one", "-        if( null == selector )", "+        ///If we haven't goa factory try to create a new one", "+        if( null == factory )", "-            //Precondition that role.endsWith( \"Selector\" )", "+            //Precondition that role.endsWith( \"Factory\" )", "-                selector = new TypedComponentSelector( clazz );", "+                factory = new MultiSourceTypeFactory( clazz );", "-                throw new ComponentException( \"Role '\" + role + \"' does not specify \" +", "-                                              \"accessible work interface\" );", "+                throw new TypeException( \"Role '\" + role + \"' does not specify \" +", "+                                         \"accessible work interface\" );", "-        m_roleMap.put( role, selector );", "+        m_roleMap.put( role, factory );", "-        return selector;", "+        return factory;"]}]}
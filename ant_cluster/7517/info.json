{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd041f8da9bad351cc43ea105024c580", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4fc54c3399f4f222766f0add013ec59", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/dotnet/CSharp.java", "commitBeforeChange": "919e3c42b4f5fe58f906c93171d446e5cda882e0", "commitAfterChange": "9e8e57522752c19d172b764350480e0d7b69c112", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public void execute()         throws TaskException", "signatureAfterChange": "     public void execute()         throws TaskException", "diff": ["-        if( _srcDir == null )", "+        if( null == m_srcDir )", "-            _srcDir = getBaseDirectory();", "+            m_srcDir = getBaseDirectory();", "-        NetCommand command = new NetCommand( this, \"CSC\", csc_exe_name );", "-        command.setFailOnError( getFailFailOnError() );", "-        //DEBUG helper", "-        command.setTraceCommandLine( true );", "-        //fill in args", "-        command.addArgument( \"/nologo\" );", "-        command.addArgument( getAdditionalModulesParameter() );", "-        command.addArgument( getDefinitionsParameter() );", "-        command.addArgument( getDebugParameter() );", "-        command.addArgument( getDocFileParameter() );", "-        command.addArgument( getIncrementalParameter() );", "-        command.addArgument( getMainClassParameter() );", "-        command.addArgument( getOptimizeParameter() );", "-        command.addArgument( getReferencesParameter() );", "-        command.addArgument( getTargetTypeParameter() );", "-        command.addArgument( getUnsafeParameter() );", "-        command.addArgument( getWarnLevelParameter() );", "-        command.addArgument( getWin32IconParameter() );", "-        command.addArgument( getOutputFileParameter() );", "-        command.addArgument( getIncludeDefaultReferencesParameter() );", "-        command.addArgument( getDefaultReferenceParameter() );", "-        command.addArgument( getWin32ResParameter() );", "-        command.addArgument( getUtf8OutpuParameter() );", "-        command.addArgument( getNoConfigParameter() );", "-        command.addArgument( getFullPathsParameter() );", "-        command.addArgument( getExtraOptionsParameter() );", "+        final ExecManager execManager = (ExecManager)getService( ExecManager.class );", "+        final Execute exe = new Execute( execManager );", "+        exe.setReturnCode( 0 );", "+", "+        final Commandline cmd = exe.getCommandline();", "+        cmd.setExecutable( EXE_NAME );", "+", "+        addArgument( cmd, \"/nologo\" );", "+        addArgument( cmd, getAdditionalModulesParameter() );", "+        addArgument( cmd, getDefinitionsParameter() );", "+        addArgument( cmd, getDebugParameter() );", "+        addArgument( cmd, getDocFileParameter() );", "+        addArgument( cmd, getIncrementalParameter() );", "+        addArgument( cmd, getMainClassParameter() );", "+        addArgument( cmd, getOptimizeParameter() );", "+        addArgument( cmd, getReferencesParameter() );", "+        addArgument( cmd, getTargetTypeParameter() );", "+        addArgument( cmd, getUnsafeParameter() );", "+        addArgument( cmd, getWarnLevelParameter() );", "+        addArgument( cmd, getWin32IconParameter() );", "+        addArgument( cmd, getOutputFileParameter() );", "+        addArgument( cmd, getIncludeDefaultReferencesParameter() );", "+        addArgument( cmd, getDefaultReferenceParameter() );", "+        addArgument( cmd, getWin32ResParameter() );", "+        addArgument( cmd, getUtf8OutpuParameter() );", "+        addArgument( cmd, getFullPathsParameter() );", "+        addArgument( cmd, getExtraOptionsParameter() );", "-        DirectoryScanner scanner = super.getDirectoryScanner( _srcDir );", "-        String[] dependencies = scanner.getIncludedFiles();", "-        getLogger().info( \"compiling \" + dependencies.length + \" file\" + ( ( dependencies.length == 1 ) ? \"\" : \"s\" ) );", "-        String baseDir = scanner.getBasedir().toString();", "+        final DirectoryScanner scanner = super.getDirectoryScanner( m_srcDir );", "+        final String[] dependencies = scanner.getIncludedFiles();", "+        final String message = \"compiling \" + dependencies.length + \" file\" +", "+            ( ( dependencies.length == 1 ) ? \"\" : \"s\" );", "+        getLogger().info( message );", "+        final String baseDir = scanner.getBasedir().toString();", "-            String targetFile = dependencies[ i ];", "-            targetFile = baseDir + File.separator + targetFile;", "-            command.addArgument( targetFile );", "+            final String targetFile = baseDir + File.separator + dependencies[ i ];", "+            addArgument( cmd, targetFile );", "-        command.runCommand();", "+        exe.execute();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c85feb95ad5222a25a9d68b1af7a2c54", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/dotnet/CSharp.java", "commitBeforeChange": "919e3c42b4f5fe58f906c93171d446e5cda882e0", "commitAfterChange": "9e8e57522752c19d172b764350480e0d7b69c112", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public void execute()         throws TaskException", "signatureAfterChange": "     public void execute()         throws TaskException", "diff": ["-        if( _srcDir == null )", "+        if( null == m_srcDir )", "-            _srcDir = getBaseDirectory();", "+            m_srcDir = getBaseDirectory();", "-        NetCommand command = new NetCommand( this, \"CSC\", csc_exe_name );", "-        command.setFailOnError( getFailFailOnError() );", "-        //DEBUG helper", "-        command.setTraceCommandLine( true );", "-        //fill in args", "-        command.addArgument( \"/nologo\" );", "-        command.addArgument( getAdditionalModulesParameter() );", "-        command.addArgument( getDefinitionsParameter() );", "-        command.addArgument( getDebugParameter() );", "-        command.addArgument( getDocFileParameter() );", "-        command.addArgument( getIncrementalParameter() );", "-        command.addArgument( getMainClassParameter() );", "-        command.addArgument( getOptimizeParameter() );", "-        command.addArgument( getReferencesParameter() );", "-        command.addArgument( getTargetTypeParameter() );", "-        command.addArgument( getUnsafeParameter() );", "-        command.addArgument( getWarnLevelParameter() );", "-        command.addArgument( getWin32IconParameter() );", "-        command.addArgument( getOutputFileParameter() );", "-        command.addArgument( getIncludeDefaultReferencesParameter() );", "-        command.addArgument( getDefaultReferenceParameter() );", "-        command.addArgument( getWin32ResParameter() );", "-        command.addArgument( getUtf8OutpuParameter() );", "-        command.addArgument( getNoConfigParameter() );", "-        command.addArgument( getFullPathsParameter() );", "-        command.addArgument( getExtraOptionsParameter() );", "+        final ExecManager execManager = (ExecManager)getService( ExecManager.class );", "+        final Execute exe = new Execute( execManager );", "+        exe.setReturnCode( 0 );", "+", "+        final Commandline cmd = exe.getCommandline();", "+        cmd.setExecutable( EXE_NAME );", "+", "+        addArgument( cmd, \"/nologo\" );", "+        addArgument( cmd, getAdditionalModulesParameter() );", "+        addArgument( cmd, getDefinitionsParameter() );", "+        addArgument( cmd, getDebugParameter() );", "+        addArgument( cmd, getDocFileParameter() );", "+        addArgument( cmd, getIncrementalParameter() );", "+        addArgument( cmd, getMainClassParameter() );", "+        addArgument( cmd, getOptimizeParameter() );", "+        addArgument( cmd, getReferencesParameter() );", "+        addArgument( cmd, getTargetTypeParameter() );", "+        addArgument( cmd, getUnsafeParameter() );", "+        addArgument( cmd, getWarnLevelParameter() );", "+        addArgument( cmd, getWin32IconParameter() );", "+        addArgument( cmd, getOutputFileParameter() );", "+        addArgument( cmd, getIncludeDefaultReferencesParameter() );", "+        addArgument( cmd, getDefaultReferenceParameter() );", "+        addArgument( cmd, getWin32ResParameter() );", "+        addArgument( cmd, getUtf8OutpuParameter() );", "+        addArgument( cmd, getFullPathsParameter() );", "+        addArgument( cmd, getExtraOptionsParameter() );", "-        DirectoryScanner scanner = super.getDirectoryScanner( _srcDir );", "-        String[] dependencies = scanner.getIncludedFiles();", "-        getLogger().info( \"compiling \" + dependencies.length + \" file\" + ( ( dependencies.length == 1 ) ? \"\" : \"s\" ) );", "-        String baseDir = scanner.getBasedir().toString();", "+        final DirectoryScanner scanner = super.getDirectoryScanner( m_srcDir );", "+        final String[] dependencies = scanner.getIncludedFiles();", "+        final String message = \"compiling \" + dependencies.length + \" file\" +", "+            ( ( dependencies.length == 1 ) ? \"\" : \"s\" );", "+        getLogger().info( message );", "+        final String baseDir = scanner.getBasedir().toString();", "-            String targetFile = dependencies[ i ];", "-            targetFile = baseDir + File.separator + targetFile;", "-            command.addArgument( targetFile );", "+            final String targetFile = baseDir + File.separator + dependencies[ i ];", "+            addArgument( cmd, targetFile );", "-        command.runCommand();", "+        exe.execute();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d960a36711b87554e78206a0f4d570b2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/dotnet/CSharp.java", "commitBeforeChange": "b0bf9dddde85cb1e6723303338ed03432acfcf2e", "commitAfterChange": "9f496d1b2a1bcf4a5ac32e2e890a695eb163d81e", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public void execute()         throws TaskException", "signatureAfterChange": "     public void execute()         throws TaskException", "diff": ["-        final Commandline cmd = exe.getCommandline();", "-        cmd.setExecutable( EXE_NAME );", "+        exe.setExecutable( EXE_NAME );", "-        addArgument( cmd, \"/nologo\" );", "-        addArgument( cmd, getAdditionalModulesParameter() );", "-        addArgument( cmd, getDefinitionsParameter() );", "-        addArgument( cmd, getDebugParameter() );", "-        addArgument( cmd, getDocFileParameter() );", "-        addArgument( cmd, getIncrementalParameter() );", "-        addArgument( cmd, getMainClassParameter() );", "-        addArgument( cmd, getOptimizeParameter() );", "-        addArgument( cmd, getReferencesParameter() );", "-        addArgument( cmd, getTargetTypeParameter() );", "-        addArgument( cmd, getUnsafeParameter() );", "-        addArgument( cmd, getWarnLevelParameter() );", "-        addArgument( cmd, getWin32IconParameter() );", "-        addArgument( cmd, getOutputFileParameter() );", "-        addArgument( cmd, getIncludeDefaultReferencesParameter() );", "-        addArgument( cmd, getDefaultReferenceParameter() );", "-        addArgument( cmd, getWin32ResParameter() );", "-        addArgument( cmd, getUtf8OutpuParameter() );", "-        addArgument( cmd, getFullPathsParameter() );", "-        addArgument( cmd, getExtraOptionsParameter() );", "+        addArgument( exe, \"/nologo\" );", "+        addArgument( exe, getAdditionalModulesParameter() );", "+        addArgument( exe, getDefinitionsParameter() );", "+        addArgument( exe, getDebugParameter() );", "+        addArgument( exe, getDocFileParameter() );", "+        addArgument( exe, getIncrementalParameter() );", "+        addArgument( exe, getMainClassParameter() );", "+        addArgument( exe, getOptimizeParameter() );", "+        addArgument( exe, getReferencesParameter() );", "+        addArgument( exe, getTargetTypeParameter() );", "+        addArgument( exe, getUnsafeParameter() );", "+        addArgument( exe, getWarnLevelParameter() );", "+        addArgument( exe, getWin32IconParameter() );", "+        addArgument( exe, getOutputFileParameter() );", "+        addArgument( exe, getIncludeDefaultReferencesParameter() );", "+        addArgument( exe, getDefaultReferenceParameter() );", "+        addArgument( exe, getWin32ResParameter() );", "+        addArgument( exe, getUtf8OutpuParameter() );", "+        addArgument( exe, getFullPathsParameter() );", "+        addArgument( exe, getExtraOptionsParameter() );", "-            addArgument( cmd, targetFile );", "+            addArgument( exe, targetFile );"]}]}
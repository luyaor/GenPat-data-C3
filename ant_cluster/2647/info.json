{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "740bad6844ac7cea9eaebdb8e5fce9b9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "015f3895d21c671929582ac1f81dc012", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/DOMElementWriter.java", "commitBeforeChange": "a0b111116d82b1ab530e3237b9b1706455052771", "commitAfterChange": "b7b59490a82c8b2df3c580a2f2502cc28b8e75d8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void openElement(Element element, Writer out, int indent,                             String indentWith, boolean hasChildren)         throws IOException", "signatureAfterChange": "     public void openElement(Element element, Writer out, int indent,                             String indentWith, boolean hasChildren)         throws IOException", "diff": ["+        if (namespacePolicy.qualifyElements) {", "+            String prefix = (String) nsPrefixMap.get(element.getNamespaceURI());", "+            if (prefix == null) {", "+                if (nsPrefixMap.isEmpty()) {", "+                    // steal default namespace", "+                    prefix = \"\";", "+                } else {", "+                    prefix = NS + (nextPrefix++);", "+                }", "+                nsPrefixMap.put(element.getNamespaceURI(), prefix);", "+                addNSDefinition(element, element.getNamespaceURI());", "+            }", "+            if (!\"\".equals(prefix)) {", "+                out.write(prefix);", "+                out.write(\":\");", "+            }", "+        }", "+            if (namespacePolicy.qualifyAttributes) {", "+                String prefix =", "+                    (String) nsPrefixMap.get(attr.getNamespaceURI());", "+                if (prefix == null) {", "+                    prefix = NS + (nextPrefix++);", "+                    nsPrefixMap.put(attr.getNamespaceURI(), prefix);", "+                    addNSDefinition(element, attr.getNamespaceURI());", "+                }", "+                out.write(prefix);", "+                out.write(\":\");", "+            }", "+", "+        // write namespace declarations", "+        ArrayList al = (ArrayList) nsURIByElement.get(element);", "+        if (al != null) {", "+            Iterator iter = al.iterator();", "+            while (iter.hasNext()) {", "+                String uri = (String) iter.next();", "+                String prefix = (String) nsPrefixMap.get(uri);", "+                out.write(\" xmlns\");", "+                if (!\"\".equals(prefix)) {", "+                    out.write(\":\");", "+                    out.write(prefix);", "+                }", "+                out.write(\"=\\\"\");", "+                out.write(uri);", "+                out.write(\"\\\"\");", "+            }", "+        }", "+", "+            removeNSDefinitions(element);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e1371ad209b1728ae35b5968497640e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/starteam/StarTeamCheckin.java", "commitBeforeChange": "837f7ef785e24137608ba41f850d605b23bccff4", "commitAfterChange": "23e61358c8ed2aa3fe63c1f67082150047f1df9e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private void addUncontrolledItems(Hashtable localFiles, Folder folder)             throws IOException", "signatureAfterChange": "         void processUncontrolledItems() throws BuildException", "diff": ["-    private void addUncontrolledItems(Hashtable localFiles, Folder folder)", "-            throws IOException {", "-        try {", "-            Enumeration e = localFiles.keys();", "-            while (e.hasMoreElements()) {", "-                java.io.File file =", "-                        new java.io.File(e.nextElement().toString());", "-                add(folder, file);", "-        } catch (SecurityException e) {", "-            log(\"Error adding file: \" + e, Project.MSG_ERR);", "+         */", "+        void processUncontrolledItems() throws BuildException {", "+            if (this.isActive()) {", "+                Enumeration e = this.keys();", "+                while (e.hasMoreElements()) {", "+                    java.io.File local = (java.io.File) e.nextElement();", "+                    Item remoteItem = (Item) this.get(local);", "+                    remoteItem.update();", "+    ", "+                    // once we find a folder that isn't in the repository, ", "+                    // we know we can add it.", "+                    if (local.isDirectory()) {", "+                        Folder folder = (Folder) remoteItem;", "+                        log(\"Added uncontrolled folder \" ", "+                            + folder.getFolderHierarchy()", "+                            + \" from \" + local.getAbsoluteFile());", "+                        if (isRecursive()) {", "+                            UnmatchedFileMap submap = ", "+                                new CheckinMap().init(local, folder);", "+                            submap.processUncontrolledItems();", "+                        }", "+                    } else {", "+                        com.starbase.starteam.File remoteFile =", "+                            (com.starbase.starteam.File) remoteItem;", "+                        log(\"Added uncontrolled file \" ", "+                            + TreeBasedTask.getFullRepositoryPath(remoteFile)", "+                            + \" from \" + local.getAbsoluteFile());", "+    ", "+                    }", "+                }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9bcb12be95e77e938ac45ac51d655623", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21a9c832a33061754cf593cf8739c1f9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Touch.java", "commitBeforeChange": "2cd5cfabd458ab9d92e045a32d6831f72a4e2940", "commitAfterChange": "b7443f2b77a8daeba5f4b36a14ef34d1fb7fe931", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+        long savedMillis = millis;", "+", "-                new BuildException(\"Specify at least one source - a file or a fileset.\");", "+                new BuildException(\"Specify at least one source - a file or \"", "+                                   + \"a fileset.\");", "-        if (dateTime != null) {", "-            DateFormat df = DateFormat.getDateTimeInstance(DateFormat.SHORT,", "-                                                           DateFormat.SHORT,", "-                                                           Locale.US);", "-            try {", "-                setMillis(df.parse(dateTime).getTime());", "-                if (millis < 0) {", "-                    throw new BuildException(\"Date of \" + dateTime", "-                                             + \" results in negative milliseconds value relative to epoch (January 1, 1970, 00:00:00 GMT).\");", "+        try {", "+            if (dateTime != null) {", "+                DateFormat df = ", "+                    DateFormat.getDateTimeInstance(DateFormat.SHORT,", "+                                                   DateFormat.SHORT,", "+                                                   Locale.US);", "+                try {", "+                    setMillis(df.parse(dateTime).getTime());", "+                    if (millis < 0) {", "+                        throw new BuildException(\"Date of \" + dateTime", "+                                                 + \" results in negative \"", "+                                                 + \"milliseconds value \"", "+                                                 + \"relative to epoch \"", "+                                                 + \"(January 1, 1970, \"", "+                                                 + \"00:00:00 GMT).\");", "+                    }", "+                } catch (ParseException pe) {", "+                    throw new BuildException(pe.getMessage(), pe, location);", "-            } catch (ParseException pe) {", "-                throw new BuildException(pe.getMessage(), pe, location);", "-        }", "-        touch();", "+            touch();", "+        } finally {", "+            millis = savedMillis;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8046a3a97822a47793f51a4db4c31a02", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Tar.java", "commitBeforeChange": "3518a35d4755b8d411ac9b8e54ed5ab43248b2fc", "commitAfterChange": "7efc06af49ac85c35b17dff638c8f28ca73eba78", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        if (baseDir != null) {", "-            if (!baseDir.exists()) {", "-                throw new BuildException(\"basedir does not exist!\", location);", "-            }", "-", "-            // add the main fileset to the list of filesets to process.", "-            TarFileSet mainFileSet = new TarFileSet(fileset);", "-            mainFileSet.setDir(baseDir);", "-            filesets.addElement(mainFileSet);", "-        }", "-", "-        if (filesets.size() == 0) {", "-            throw new BuildException(\"You must supply either a basdir attribute or some nested filesets.\",", "-                                     location);", "-        }", "-", "-        // check if tr is out of date with respect to each", "-        // fileset", "-        boolean upToDate = true;", "-        for (Enumeration e = filesets.elements(); e.hasMoreElements();) {", "-            TarFileSet fs = (TarFileSet)e.nextElement();", "-            String[] files = fs.getFiles(project);", "-", "-            if (!archiveIsUpToDate(files)) {", "-                upToDate = false;", "-            }", "-", "-            for (int i = 0; i < files.length; ++i) {", "-                if (tarFile.equals(new File(fs.getDir(project), files[i]))) {", "-                    throw new BuildException(\"A tar file cannot include itself\", location);", "-                }", "-            }", "-        }", "-", "-        if (upToDate) {", "-            log(\"Nothing to do: \"+tarFile.getAbsolutePath()+\" is up to date.\",", "-                Project.MSG_INFO);", "-            return;", "-        }", "-", "-        log(\"Building tar: \"+ tarFile.getAbsolutePath(), Project.MSG_INFO);", "-", "-        TarOutputStream tOut = null;", "+        Vector savedFileSets = (Vector) filesets.clone();", "-            tOut = new TarOutputStream(new FileOutputStream(tarFile));", "-            tOut.setDebug(true);", "-            if (longFileMode.isTruncateMode()) {", "-                tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);", "-            }", "-            else if (longFileMode.isFailMode() ||", "-                     longFileMode.isOmitMode()) {", "-                tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);", "-            }", "-            else {", "-                // warn or GNU", "-                tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);", "+            if (baseDir != null) {", "+                if (!baseDir.exists()) {", "+                    throw new BuildException(\"basedir does not exist!\", ", "+                                             location);", "+                }", "+", "+                // add the main fileset to the list of filesets to process.", "+                TarFileSet mainFileSet = new TarFileSet(fileset);", "+                mainFileSet.setDir(baseDir);", "+                filesets.addElement(mainFileSet);", "-            longWarningGiven = false;", "+            if (filesets.size() == 0) {", "+                throw new BuildException(\"You must supply either a basedir \"", "+                                         + \"attribute or some nested filesets.\",", "+                                         location);", "+            }", "+            ", "+            // check if tar is out of date with respect to each", "+            // fileset", "+            boolean upToDate = true;", "-                if (files.length > 1 && fs.getFullpath().length() > 0) {", "-                    throw new BuildException(\"fullpath attribute may only be specified for \" +", "-                                             \"filesets that specify a single file.\");", "+", "+                if (!archiveIsUpToDate(files)) {", "+                    upToDate = false;", "-                for (int i = 0; i < files.length; i++) {", "-                    File f = new File(fs.getDir(project), files[i]);", "-                    String name = files[i].replace(File.separatorChar,'/');", "-                    tarFile(f, tOut, name, fs);", "+", "+                for (int i = 0; i < files.length; ++i) {", "+                    if (tarFile.equals(new File(fs.getDir(project), ", "+                                                files[i]))) {", "+                        throw new BuildException(\"A tar file cannot include \"", "+                                                 + \"itself\", location);", "+                    }", "-        } catch (IOException ioe) {", "-            String msg = \"Problem creating TAR: \" + ioe.getMessage();", "-            throw new BuildException(msg, ioe, location);", "+", "+            if (upToDate) {", "+                log(\"Nothing to do: \"+tarFile.getAbsolutePath()", "+                    +\" is up to date.\", Project.MSG_INFO);", "+                return;", "+            }", "+", "+            log(\"Building tar: \"+ tarFile.getAbsolutePath(), Project.MSG_INFO);", "+", "+            TarOutputStream tOut = null;", "+            try {", "+                tOut = new TarOutputStream(new FileOutputStream(tarFile));", "+                tOut.setDebug(true);", "+                if (longFileMode.isTruncateMode()) {", "+                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);", "+                }", "+                else if (longFileMode.isFailMode() ||", "+                         longFileMode.isOmitMode()) {", "+                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);", "+                }", "+                else {", "+                    // warn or GNU", "+                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);", "+                }", "+", "+                longWarningGiven = false;", "+                for (Enumeration e = filesets.elements(); ", "+                     e.hasMoreElements();) {", "+                    TarFileSet fs = (TarFileSet)e.nextElement();", "+                    String[] files = fs.getFiles(project);", "+                    if (files.length > 1 && fs.getFullpath().length() > 0) {", "+                        throw new BuildException(\"fullpath attribute may only \"", "+                                                 + \"be specified for \" ", "+                                                 + \"filesets that specify a \"", "+                                                 + \"single file.\");", "+                    }", "+                    for (int i = 0; i < files.length; i++) {", "+                        File f = new File(fs.getDir(project), files[i]);", "+                        String name = files[i].replace(File.separatorChar,'/');", "+                        tarFile(f, tOut, name, fs);", "+                    }", "+                }", "+            } catch (IOException ioe) {", "+                String msg = \"Problem creating TAR: \" + ioe.getMessage();", "+                throw new BuildException(msg, ioe, location);", "+            } finally {", "+                if (tOut != null) {", "+                    try {", "+                        // close up", "+                        tOut.close();", "+                    }", "+                    catch (IOException e) {}", "+                }", "+            }", "-            if (tOut != null) {", "-                try {", "-                    // close up", "-                    tOut.close();", "-                }", "-                catch (IOException e) {}", "-            }", "+            filesets = savedFileSets;"]}]}
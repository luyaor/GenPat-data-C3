{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2f47a4557ae2a0491b821cc0aba25167", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ff304db68d5929959b603cf38dcce12", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/cvslib/CvsVersion.java", "commitBeforeChange": "2a77a7377909e28c2f58374c57ea0e2b77c2ed2b", "commitAfterChange": "d302bf91179d5fc190dd3f2b8e2d41112b45cdfb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void execute()", "signatureAfterChange": "     public void execute()", "diff": ["+        log(\"Received version response \\\"\" + output + \"\\\"\",", "+            Project.MSG_DEBUG);", "-        while (st.hasMoreTokens()) {", "-            String currentToken = st.nextToken();", "+        String cachedVersion = null;", "+        boolean haveReadAhead = false;", "+        while (haveReadAhead || st.hasMoreTokens()) {", "+            String currentToken = haveReadAhead ? cachedVersion : st.nextToken();", "+            haveReadAhead = false;", "-            if (client && cvs != null) {", "+            if (!client && !server && cvs != null", "+                && cachedVersion == null && st.hasMoreTokens()) {", "+                cachedVersion = st.nextToken();", "+                haveReadAhead = true;", "+            } else if (client && cvs != null) {", "+            } else if (currentToken.equals(\"(client/server)\")", "+                       && cvs != null && cachedVersion != null", "+                       && !client && !server) {", "+                client = server = true;", "+                clientVersion = serverVersion = cachedVersion + cvs;", "+                cachedVersion = cvs = null;", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a57f757ba24e6258f16851db32f364d8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "7fb63d79c61b77630a246e973d11904d331672e5", "commitAfterChange": "8b8cea1e308142afdc5e18146f768cb01a2a21d6", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "     private boolean isMorePowerfulThanExcludes(String name, String includepattern)", "signatureAfterChange": "     private boolean isMorePowerfulThanExcludes(String name, String includepattern)", "diff": ["-        String shortpattern = SelectorUtils.rtrimWildcardTokens(includepattern);", "+        String soughtexclude = name + File.separator + \"**\";", "-            String shortexclude = SelectorUtils.rtrimWildcardTokens(excludes[counter]);", "-            // here we are checking that the trimmed exclude pattern is not a plain directory", "-            // <exclude name=\"foo\"/> means exclude only the directory foo, but not its subdirs", "-            if (shortexclude.length() < excludes[counter].length()) {", "-                if (excludes[counter].charAt(shortexclude.length()) == File.separatorChar) {", "-                    if (matchPath(shortexclude, name, isCaseSensitive)) {", "-                        if (shortexclude.length() > shortpattern.length()) {", "-                            return false;", "-                        }", "-                    }", "-                }", "+            if (excludes[counter].equals(soughtexclude))  {", "+                return false;"]}]}
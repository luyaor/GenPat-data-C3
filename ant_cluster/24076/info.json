{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "00e9a311580bde135036dde0e06c8a7d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0629e69a15e1c92843c1cec66828198e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/frontends/CLIMain.java", "commitBeforeChange": "321497ad25f76931e5b18e384fbd73ca8d198d92", "commitAfterChange": "ec74722dcd89659e5f1b1241acd59dc3f5978be7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private void execute( final String[] args )         throws Exception", "signatureAfterChange": "      private void execute( final Map properties, final String[] args )         throws Exception", "diff": ["-", "-    private void execute( final String[] args )", "+    private void execute( final Map properties, final String[] args )", "-        setupDefaultParameters();", "-", "-        if( !parseCommandLineOptions( args ) )", "-        {", "-            return;", "-        }", "-", "-        prepareLogging();", "-", "-        checkHomeDir();", "-        final File buildFile = getBuildFile();", "-", "-        //getLogger().debug( \"Ant Bin Directory: \" + m_binDir );", "-        //getLogger().debug( \"Ant Lib Directory: \" + m_libDir );", "-        //getLogger().debug( \"Ant Task Lib Directory: \" + m_taskLibDir );", "-", "-        if( m_dryRun )", "-        {", "-            m_parameters.setParameter( Executor.ROLE,", "-                                       \"org.apache.myrmidon.components.executor.PrintingExecutor\" );", "-        }", "-", "-        final Embeddor embeddor = prepareEmbeddor();", "-", "-            final ProjectListener listener = prepareListener( embeddor );", "+            // Set system properties set up by launcher", "+            m_embedded.setEmbeddorProperty( \"myrmidon.home\", properties.get( \"myrmidon.home\" ) );", "-            //create the project", "-            final Project project =", "-                embeddor.createProject( buildFile.toString(), null, m_builderParameters );", "+            // Command line", "+            if( !parseCommandLineOptions( args ) )", "+            {", "+                return;", "+            }", "+", "+            // Setup logging", "+            final BasicLogger logger = new BasicLogger( \"[myrmidon] \", m_priority );", "+            m_embedded.setLogger( logger );", "+", "+            if( m_dryRun )", "+            {", "+                m_embedded.setEmbeddorProperty( Executor.ROLE,", "+                                                \"org.apache.myrmidon.components.executor.PrintingExecutor\" );", "+            }", "+", "+            // Set the common classloader", "+            final ClassLoader sharedClassLoader = (ClassLoader)properties.get( \"myrmidon.shared.classloader\" );", "+            m_embedded.setSharedClassLoader( sharedClassLoader );", "-            final boolean incremental = m_parameters.getParameterAsBoolean( \"incremental\", false );", "-            if( !incremental )", "+            if( !m_incremental )", "-                executeBuild( embeddor, project, listener );", "+                executeBuild();", "-                executeIncrementalBuild( embeddor, project, listener );", "+                executeIncrementalBuild();", "-            shutdownEmbeddor( embeddor );", "+            m_embedded.stop();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e80fa723f77ad9aae76e035604827c73", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ExecutionManager.java", "commitBeforeChange": "ec9816997d704ba18f8209a3b8330275e5a61325", "commitAfterChange": "30b81779b563d12a1e28bebf934d5a5626da57ce", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private void addConfigLibPaths()          throws ExecutionException", "signatureAfterChange": "     public void init() throws ExecutionException", "diff": ["+     */", "+    public void init() throws ExecutionException {", "+            libManager.configLibraries(initConfig, librarySpecs, antLibraries,", "+                config.getLibraryPathsMap());", "+            for (Iterator i = config.getLibraryLocations(); i.hasNext(); ) {", "+                // try file first", "+                String libLocation = (String)i.next();", "+                libManager.loadLibs(librarySpecs, libLocation);", "+            }", "+            libManager.configLibraries(initConfig, librarySpecs, antLibraries,", "+                config.getLibraryPathsMap());", "-     */", "-    private void addConfigLibPaths()", "-         throws ExecutionException {", "-        // now add any additional library Paths specified by the config", "-        for (Iterator i = config.getLibraryIds(); i.hasNext(); ) {", "-            String libraryId = (String)i.next();", "-            if (antLibraries.containsKey(libraryId)) {", "-                AntLibrary antLib", "-                     = (AntLibrary)antLibraries.get(libraryId);", "-                List pathList = config.getLibraryPathList(libraryId);", "-                for (Iterator j = pathList.iterator(); j.hasNext(); ) {", "-                    URL pathElementURL = (URL)j.next();", "-                    if (!pathElementURL.getProtocol().equals(\"file\")", "-                         && !config.isRemoteLibAllowed()) {", "-                        throw new ExecutionException(\"Remote libpaths are not\"", "-                             + \" allowed: \" + pathElementURL);", "-                    }", "-                    antLib.addLibraryURL(pathElementURL);", "-                }", "-            }"]}]}
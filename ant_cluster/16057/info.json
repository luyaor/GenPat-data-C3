{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b6197b88b5810c16d93d3ba5488033ff", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "136f0163930942d556b47879bed20313", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "99a9f194032b4185fc017d9bfe31e0419cc51f02", "commitAfterChange": "ced321c00be004a78c335295701169edf0dcb55f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private Class getComplexTypeFor( final Class clazz )", "signatureAfterChange": "     private void configureReference( final ObjectConfigurer configurer,                                      final Object object,                                      final Configuration element,                                      final Context context )         throws ConfigurationException", "diff": ["+     */", "+    private void configureReference( final ObjectConfigurer configurer,", "+                                     final Object object,", "+                                     final Configuration element,", "+                                     final Context context )", "+        throws ConfigurationException", "+    {", "+        // Adjust the name", "+        final String elementName = element.getName();", "+        final String name = elementName.substring( 0, elementName.length() - 4 );", "+", "+        // Extract the id", "+        final String id = element.getAttribute( \"id\" );", "+        if( 1 != element.getAttributeNames().length ||", "+            0 != element.getChildren().length )", "+        {", "+            final String message = REZ.getString( \"extra-config-for-ref.error\" );", "+            throw new ConfigurationException( message );", "+        }", "+", "+        // Set the property", "+        setReference( configurer, object, name, id, context );", "+    }", "-", "-    private Class getComplexTypeFor( final Class clazz )", "-    {", "-        if( String.class == clazz )", "-        {", "-            return String.class;", "-        }", "-        else if( Integer.TYPE.equals( clazz ) )", "-        {", "-            return Integer.class;", "-        }", "-        else if( Long.TYPE.equals( clazz ) )", "-        {", "-            return Long.class;", "-        }", "-        else if( Short.TYPE.equals( clazz ) )", "-        {", "-            return Short.class;", "-        }", "-        else if( Byte.TYPE.equals( clazz ) )", "-        {", "-            return Byte.class;", "-        }", "-        else if( Boolean.TYPE.equals( clazz ) )", "-        {", "-            return Boolean.class;", "-        }", "-        else if( Float.TYPE.equals( clazz ) )", "-        {", "-            return Float.class;", "-        }", "-        else if( Double.TYPE.equals( clazz ) )", "-        {", "-            return Double.class;", "-        }", "-        else", "-        {", "-            final String message = REZ.getString( \"no-complex-type.error\", clazz.getName() );", "-            throw new IllegalArgumentException( message );", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4972f90921ed4a46bae4e0ecc71087cc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/PropertyFile.java", "commitBeforeChange": "c70641243c667093d23f689c7c28866fa661b1af", "commitAfterChange": "08eef4e8a6bbe820b1622250bdc08de9b0d0cb15", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private void writeFile() throws BuildException", "signatureAfterChange": "      private void writeFile() throws BuildException", "diff": ["-    */", "-            // Write the message if we have one.", "-            if (m_comment != null) ", "-            {", "-                // FIXME: would like to use \\n as the newline rather than \\\\.", "-                StringTokenizer tok = new StringTokenizer(m_comment, \"\\\\\");", "-                while (tok.hasMoreTokens()) ", "-                {", "-                    bos.write(\"# \".getBytes());", "-                    bos.write(((String)tok.nextToken()).getBytes());", "-                    bos.write(NEWLINE.getBytes());", "-                }", "-                bos.write(NEWLINE.getBytes());", "-                bos.flush();", "-            }", "+// Write the message if we have one.", "+//            if (m_comment != null) ", "+//            {", "+//                // FIXME: would like to use \\n as the newline rather than \\\\.", "+//                StringTokenizer tok = new StringTokenizer(m_comment, \"\\\\\");", "+//                  while (tok.hasMoreTokens()) ", "+//                  {", "+//                      bos.write(\"# \".getBytes());", "+//                      bos.write(((String)tok.nextToken()).getBytes());", "+//                      bos.write(NEWLINE.getBytes());", "+//                  }", "+//                  bos.write(NEWLINE.getBytes());", "+//                  bos.flush();", "+//            }", "+//            Enumeration enumValues = m_properties.elements();", "+//            Enumeration enumKeys = m_properties.keys();", "+//            while (enumKeys.hasMoreElements()) ", "+//            {", "+//                bos.write(((String)enumKeys.nextElement()).getBytes());", "+//                bos.write(\"=\".getBytes());", "+//                bos.write(((String)enumValues.nextElement()).getBytes());", "+//                bos.write(NEWLINE.getBytes());", "+//                bos.flush();", "+//            }", "-            Enumeration enumValues = m_properties.elements();", "-            Enumeration enumKeys = m_properties.keys();", "-            while (enumKeys.hasMoreElements()) ", "-            {", "-                bos.write(((String)enumKeys.nextElement()).getBytes());", "-                bos.write(\"=\".getBytes());", "-                bos.write(((String)enumValues.nextElement()).getBytes());", "-                bos.write(NEWLINE.getBytes());", "-                bos.flush();", "-            }", "+            // Properties.store is not available in JDK 1.1", "+            Method m = ", "+                Properties.class.getMethod(\"store\", ", "+                                           new Class[] {", "+                                               OutputStream.class,", "+                                               String.class}", "+                                           );", "+            m.invoke(m_properties, new Object[] {bos, m_comment});", "+", "+        } catch (NoSuchMethodException nsme) {", "+            m_properties.save(bos, m_comment);", "+        } catch (InvocationTargetException ite) {", "+            Throwable t = ite.getTargetException();", "+            throw new BuildException(t, location);", "+        } catch (IllegalAccessException iae) {", "+            // impossible", "+            throw new BuildException(iae, location);", "-            throw new BuildException(ioe.toString());", "+            throw new BuildException(ioe, location);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79aa4ff12092278c6ef523c7edb8bd54", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/embeddor/DefaultEmbeddor.java", "commitBeforeChange": "e7ab62bc9179b392804835d02155e43d3d2cf5d6", "commitAfterChange": "2e6e170fb375181f4438e1de44808c7adab508a2", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private DefaultComponentManager createComponentManager()", "signatureAfterChange": "     private void createComponent( Class roleType, String defaultImpl )         throws Exception", "diff": ["-     */", "-    private DefaultComponentManager createComponentManager()", "-    {", "-        final DefaultComponentManager componentManager = new DefaultComponentManager();", "-", "-        componentManager.put( MasterConverter.ROLE, m_converter );", "-", "-        //Following components required when Myrmidon is used as build tool", "-        componentManager.put( Embeddor.ROLE, this );", "-", "-        //Following components required when Myrmidon allows user deployment of tasks etal.", "-        componentManager.put( RoleManager.ROLE, m_roleManager );", "-        componentManager.put( Deployer.ROLE, m_deployer );", "-        componentManager.put( ExtensionManager.ROLE, m_extensionManager );", "-", "-        //Following components used when want to types (ie tasks/mappers etc)", "-        componentManager.put( TypeManager.ROLE, m_typeManager );", "-        componentManager.put( ConverterRegistry.ROLE, m_converterRegistry );", "-", "-        componentManager.put( AspectManager.ROLE, m_aspectManager );", "-", "-        //Following components required when allowing Container tasks", "-        componentManager.put( Configurer.ROLE, m_configurer );", "-        componentManager.put( Executor.ROLE, m_executor );", "-", "-        return componentManager;", "-    }", "+     */", "+    private void createComponent( Class roleType, String defaultImpl )", "+        throws Exception", "+    {", "+        final String role = roleType.getName();", "+        final String className = m_parameters.getParameter( role, defaultImpl );", "+        final Component component = createComponent( className, roleType );", "+        m_componentManager.put( role, component );", "+        m_components.add( component );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcb02c7651b8c2cd7e424befaf27846b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/extensions/JarLibManifestTask.java", "commitBeforeChange": "0e481b8463a698cc76b183b097eaa08db32fa6e4", "commitAfterChange": "c66d1357e4ef1e3e9b56512ab6b63784fc47220b", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private void appendExtensionData( final Attributes attributes )", "signatureAfterChange": "     private void appendExtensionList( final Attributes attributes,                                       final Attributes.Name extensionKey,                                       final String listPrefix,                                       final int size )", "diff": ["+    private void appendExtensionList( final Attributes attributes,", "+                                      final Attributes.Name extensionKey,", "+                                      final String listPrefix,", "+                                      final int size )", "+        final StringBuffer sb = new StringBuffer();", "+        for( int i = 0; i < size; i++ )", "+            sb.append( listPrefix + i );", "+            sb.append( ' ' );", "+        //add in something like", "+        //\"Extension-List: javahelp java3d\"", "+        attributes.put( extensionKey, sb.toString() );", "-    private void appendExtensionData( final Attributes attributes )", "-        attributes.put( Extension.EXTENSION_NAME, m_extensionName );", "-        if( null != m_specificationVendor )", "-            attributes.put( Extension.SPECIFICATION_VENDOR,", "-                            m_specificationVendor );", "-        if( null != m_specificationVersion )", "-        {", "-            attributes.put( Extension.SPECIFICATION_VERSION,", "-                            m_specificationVersion.toString() );", "-        }", "-        if( null != m_implementationVendorID )", "-        {", "-            attributes.put( Extension.IMPLEMENTATION_VENDOR_ID,", "-                            m_implementationVendorID );", "-        }", "-        if( null != m_implementationVendor )", "-        {", "-            attributes.put( Extension.IMPLEMENTATION_VENDOR,", "-                            m_implementationVendor );", "-        }", "-        if( null != m_implementationVersion )", "-        {", "-            attributes.put( Extension.IMPLEMENTATION_VERSION,", "-                            m_implementationVersion.toString() );", "-        }", "-        if( null != m_implementationURL )", "-        {", "-            attributes.put( Extension.IMPLEMENTATION_URL,", "-                            m_implementationURL );", "-        }"]}]}
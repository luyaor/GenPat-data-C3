{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "36bcd262ae4180b9893126c8e724469d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ff304db68d5929959b603cf38dcce12", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/cvslib/CvsVersion.java", "commitBeforeChange": "2a77a7377909e28c2f58374c57ea0e2b77c2ed2b", "commitAfterChange": "d302bf91179d5fc190dd3f2b8e2d41112b45cdfb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void execute()", "signatureAfterChange": "     public void execute()", "diff": ["+        log(\"Received version response \\\"\" + output + \"\\\"\",", "+            Project.MSG_DEBUG);", "-        while (st.hasMoreTokens()) {", "-            String currentToken = st.nextToken();", "+        String cachedVersion = null;", "+        boolean haveReadAhead = false;", "+        while (haveReadAhead || st.hasMoreTokens()) {", "+            String currentToken = haveReadAhead ? cachedVersion : st.nextToken();", "+            haveReadAhead = false;", "-            if (client && cvs != null) {", "+            if (!client && !server && cvs != null", "+                && cachedVersion == null && st.hasMoreTokens()) {", "+                cachedVersion = st.nextToken();", "+                haveReadAhead = true;", "+            } else if (client && cvs != null) {", "+            } else if (currentToken.equals(\"(client/server)\")", "+                       && cvs != null && cachedVersion != null", "+                       && !client && !server) {", "+                client = server = true;", "+                clientVersion = serverVersion = cachedVersion + cvs;", "+                cachedVersion = cvs = null;", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad04f38ac980f7bbc446610ed87d6930", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "ee5f3b4185bf2539cc29e20893d1d296910cf62c", "commitAfterChange": "eb08ea9fd094b675617320ddf8b66940644a8364", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private void runBuild(ClassLoader coreLoader) throws BuildException", "signatureAfterChange": "     private void runBuild(ClassLoader coreLoader) throws BuildException", "diff": ["+        ArgumentProcessorRegistry processorRegistry = ArgumentProcessorRegistry.getInstance();", "+", "+        for (ArgumentProcessor processor : processorRegistry.getProcessors()) {", "+            List<String> extraArgs = extraArguments.get(processor.getClass());", "+            if (extraArgs != null) {", "+                if (processor.handleArg(extraArgs)) {", "+                    return;", "+                }", "+            }", "+        }", "+", "+                for (ArgumentProcessor processor : processorRegistry.getProcessors()) {", "+                    List<String> extraArgs = extraArguments.get(processor.getClass());", "+                    if (extraArgs != null) {", "+                        processor.prepareConfigure(project, extraArgs);", "+                    }", "+                }", "+", "+", "+                for (ArgumentProcessor processor : processorRegistry.getProcessors()) {", "+                    List<String> extraArgs = extraArguments.get(processor.getClass());", "+                    if (extraArgs != null) {", "+                        if (processor.handleArg(project, extraArgs)) {", "+                            return;", "+                        }", "+                    }", "+                }"]}]}
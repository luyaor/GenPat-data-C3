{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c0538cf3e20b672f7acc02bf735073a8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7872ad550af1dc6e83d1d71f757f4b0d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/AntClassLoaderTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void testInvalidZipException() throws Exception", "signatureAfterChange": "     @Test     public void testInvalidZipException() throws Exception", "diff": ["+    @Test", "-        executeTarget(\"createNonJar\");", "-        File jar = new File(getProject().getProperty(\"tmp.dir\")", "+        buildRule.executeTarget(\"createNonJar\");", "+        File jar = new File(buildRule.getProject().getProperty(\"tmp.dir\")", "-        Path myPath = new Path(getProject());", "+        Path myPath = new Path(buildRule.getProject());", "-        getProject().setUserProperty(\"build.sysclasspath\",\"ignore\");", "-        loader = getProject().createClassLoader(myPath);", "+        buildRule.getProject().setUserProperty(\"build.sysclasspath\",\"ignore\");", "+        loader = buildRule.getProject().createClassLoader(myPath);", "-                new PrintStream(new BuildFileTest.AntOutputStream(errBuffer));", "+                new PrintStream(new BuildFileRule.AntOutputStream(errBuffer));", "-            String log = getLog();", "+            String log = buildRule.getLog();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e59465f3145df4d5c932c6b1e80a3f32", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/PropertyTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void test5()", "signatureAfterChange": "      @Test     public void test5()", "diff": ["+    @Test", "-        String baseDir = getProject().getProperty(\"basedir\");", "-        try {", "-            String uri = FILE_UTILS.toURI(", "-                baseDir + \"/property3.properties\");", "-            getProject().setNewProperty(", "-                \"test5.url\", uri);", "-        } catch (Exception ex) {", "-            throw new BuildException(ex);", "-        }", "-        expectLog(\"test5\", \"http.url is http://localhost:999\");", "+        String baseDir = buildRule.getProject().getProperty(\"basedir\");", "+    \tString uri = FILE_UTILS.toURI(baseDir + \"/property3.properties\");", "+        buildRule.getProject().setNewProperty(\"test5.url\", uri);", "+        ", "+        buildRule.executeTarget(\"test5\");", "+        assertContains(\"http.url is http://localhost:999\", buildRule.getLog());"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ccaf73105b8abeb4a270dcba82ae560", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "629fe9231d70130d126c531752e03d53", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/frontends/EmbeddedAnt.java", "commitBeforeChange": "274da3301287be067b66a5778b27bfa98ef0a662", "commitAfterChange": "b91e4a3c1d8310dea42c2c353ab016d9c5425109", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private ProjectListener prepareListener( final Embeddor embeddor )         throws Exception", "signatureAfterChange": "     private void prepareListeners( final Embeddor embeddor,                                    final Workspace workspace )         throws Exception", "diff": ["-    private ProjectListener prepareListener( final Embeddor embeddor )", "+    private void prepareListeners( final Embeddor embeddor,", "+                                   final Workspace workspace )", "-        if( m_listener == null )", "+        if( m_listenerName != null )", "-            m_listener = embeddor.createListener( m_listenerName );", "+            final ProjectListener listener = embeddor.createListener( m_listenerName );", "+            workspace.addProjectListener( listener );", "-        return m_listener;", "+        final int count = m_listeners.size();", "+        for( int i = 0; i < count; i++ )", "+        {", "+            final ProjectListener listener = (ProjectListener)m_listeners.get(i );", "+            workspace.addProjectListener( listener );", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f324d51b9e4f1651903b9cde8268db0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/classloader/DefaultClassLoaderManager.java", "commitBeforeChange": "62562693ac733d0697b5a522972f36ea5570225c", "commitAfterChange": "a816a71d9e2587a83890f499dd2cabb7c6e02889", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private File[] getOptionalPackagesFor( final File typeLibrary )         throws Exception", "signatureAfterChange": "     private void getOptionalPackagesFor( final File jarFile, final List packages )         throws Exception", "diff": ["-    private File[] getOptionalPackagesFor( final File typeLibrary )", "+    private void getOptionalPackagesFor( final File jarFile, final List packages )", "-        final URL url = new URL( \"jar:\" + typeLibrary.getCanonicalFile().toURL() + \"!/\" );", "+        final URL url = new URL( \"jar:\" + jarFile.getCanonicalFile().toURL() + \"!/\" );", "-        final OptionalPackage[] packages =", "-            (OptionalPackage[])dependencies.toArray( new OptionalPackage[ 0 ] );", "-        return OptionalPackage.toFiles( packages );", "+        final int count = dependencies.size();", "+        for( int i = 0; i < count; i++ )", "+        {", "+            final OptionalPackage optionalPackage = (OptionalPackage)dependencies.get(i );", "+            packages.add( optionalPackage.getFile() );", "+        }"]}]}
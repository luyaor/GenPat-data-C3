{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0ce65cde57b4de9cdfcb83d771ccb4d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c433cbcb68101861cbc41daa30c03ff", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "228fb9839c21a0a853598e114faca72c8e9340e7", "commitAfterChange": "9922008d657c72235c402343fd88847b044014ad", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 33, "signatureBeforeChange": "      private void simpleSort(int lo, int hi, int d)", "signatureAfterChange": "     private boolean mainSimpleSort(final Data dataShadow, final int lo,                                    final int hi, final int d)", "diff": ["-", "-    private void simpleSort(int lo, int hi, int d) {", "-        int i, j, h, bigN, hp;", "-        int v;", "-", "-        bigN = hi - lo + 1;", "+     */", "+    private boolean mainSimpleSort(final Data dataShadow, final int lo,", "+                                   final int hi, final int d) {", "+        final int bigN = hi - lo + 1;", "-            return;", "+            return this.firstAttempt && (this.workDone > this.workLimit);", "-        hp = 0;", "-        while (incs[hp] < bigN) {", "+        int hp = 0;", "+        while (INCS[hp] < bigN) {", "-        hp--;", "-        for (; hp >= 0; hp--) {", "-            h = incs[hp];", "+        final int[] fmap = dataShadow.fmap;", "+        final char[] quadrant = dataShadow.quadrant;", "+        final byte[] block = dataShadow.block;", "+        final int lastShadow = this.last;", "+        final int lastPlus1 = lastShadow + 1;", "+        final boolean firstAttemptShadow = this.firstAttempt;", "+        final int workLimitShadow = this.workLimit;", "+        int workDoneShadow = this.workDone;", "-            i = lo + h;", "-            while (true) {", "-                /* copy 1 */", "-                if (i > hi) {", "-                    break;", "-                }", "-                v = zptr[i];", "-                j = i;", "-                while (fullGtU(zptr[j - h] + d, v + d)) {", "-                    zptr[j] = zptr[j - h];", "-                    j = j - h;", "-                    if (j <= (lo + h - 1)) {", "-                        break;", "-                    }", "-                }", "-                zptr[j] = v;", "-                i++;", "+        // Following block contains unrolled code which could be shortened by", "+        // coding it in additional loops.", "-                /* copy 2 */", "-                if (i > hi) {", "-                    break;", "-                }", "-                v = zptr[i];", "-                j = i;", "-                while (fullGtU(zptr[j - h] + d, v + d)) {", "-                    zptr[j] = zptr[j - h];", "-                    j = j - h;", "-                    if (j <= (lo + h - 1)) {", "-                        break;", "-                    }", "-                }", "-                zptr[j] = v;", "-                i++;", "+        HP: while (--hp >= 0) {", "+            final int h = INCS[hp];", "+            final int mj = lo + h - 1;", "-                /* copy 3 */", "-                if (i > hi) {", "-                    break;", "-                }", "-                v = zptr[i];", "-                j = i;", "-                while (fullGtU(zptr[j - h] + d, v + d)) {", "-                    zptr[j] = zptr[j - h];", "-                    j = j - h;", "-                    if (j <= (lo + h - 1)) {", "-                        break;", "-                    }", "-                }", "-                zptr[j] = v;", "-                i++;", "+            for (int i = lo + h; i <= hi;) {", "+                // copy", "+                for (int k = 3; (i <= hi) && (--k >= 0); i++) {", "+                    final int v = fmap[i];", "+                    final int vd = v + d;", "+                    int j = i;", "-                if (workDone > workLimit && firstAttempt) {", "-                    return;", "-                }", "-            }", "-        }", "-    }", "+                    // for (int a;", "+                    // (j > mj) && mainGtU((a = fmap[j - h]) + d, vd,", "+                    // block, quadrant, lastShadow);", "+                    // j -= h) {", "+                    // fmap[j] = a;", "+                    // }", "+                    //", "+                    // unrolled version:", "+                    // start inline mainGTU", "+                    boolean onceRunned = false;", "+                    int a = 0;", "+                    HAMMER: while (true) {", "+                        if (onceRunned) {", "+                            fmap[j] = a;", "+                            if ((j -= h) <= mj) {", "+                                break HAMMER;", "+                        } else {", "+                            onceRunned = true;", "+                        a = fmap[j - h];", "+                        int i1 = a + d;", "+                        int i2 = vd;", "+                        // following could be done in a loop, but", "+                        // unrolled it for performance:", "+                        if (block[i1 + 1] == block[i2 + 1]) {", "+                            if (block[i1 + 2] == block[i2 + 2]) {", "+                                if (block[i1 + 3] == block[i2 + 3]) {", "+                                    if (block[i1 + 4] == block[i2 + 4]) {", "+                                        if (block[i1 + 5] == block[i2 + 5]) {", "+                                            if (block[(i1 += 6)] == block[(i2 += 6)]) {", "+                                                int x = lastShadow;", "+                                                X: while (x > 0) {", "+                                                    x -= 4;", "+                                                    if (block[i1 + 1] == block[i2 + 1]) {", "+                                                        if (quadrant[i1] == quadrant[i2]) {", "+                                                            if (block[i1 + 2] == block[i2 + 2]) {", "+                                                                if (quadrant[i1 + 1] == quadrant[i2 + 1]) {", "+                                                                    if (block[i1 + 3] == block[i2 + 3]) {", "+                                                                        if (quadrant[i1 + 2] == quadrant[i2 + 2]) {", "+                                                                            if (block[i1 + 4] == block[i2 + 4]) {", "+                                                                                if (quadrant[i1 + 3] == quadrant[i2 + 3]) {", "+                                                                                    if ((i1 += 4) >= lastPlus1) {", "+                                                                                        i1 -= lastPlus1;", "+                                                                                    }", "+                                                                                    if ((i2 += 4) >= lastPlus1) {", "+                                                                                        i2 -= lastPlus1;", "+                                                                                    }", "+                                                                                    workDoneShadow++;", "+                                                                                    continue X;", "+                                                                                } else if ((quadrant[i1 + 3] > quadrant[i2 + 3])) {", "+                                                                                    continue HAMMER;", "+                                                                                } else {", "+                                                                                    break HAMMER;", "+                                                                                }", "+                                                                            } else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff)) {", "+                                                                                continue HAMMER;", "+                                                                            } else {", "+                                                                                break HAMMER;", "+                                                                            }", "+                                                                        } else if ((quadrant[i1 + 2] > quadrant[i2 + 2])) {", "+                                                                            continue HAMMER;", "+                                                                        } else {", "+                                                                            break HAMMER;", "+                                                                        }", "+                                                                    } else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff)) {", "+                                                                        continue HAMMER;", "+                                                                    } else {", "+                                                                        break HAMMER;", "+                                                                    }", "+                                                                } else if ((quadrant[i1 + 1] > quadrant[i2 + 1])) {", "+                                                                    continue HAMMER;", "+                                                                } else {", "+                                                                    break HAMMER;", "+                                                                }", "+                                                            } else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff)) {", "+                                                                continue HAMMER;", "+                                                            } else {", "+                                                                break HAMMER;", "+                                                            }", "+                                                        } else if ((quadrant[i1] > quadrant[i2])) {", "+                                                            continue HAMMER;", "+                                                        } else {", "+                                                            break HAMMER;", "+                                                        }", "+                                                    } else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff)) {", "+                                                        continue HAMMER;", "+                                                    } else {", "+                                                        break HAMMER;", "+                                                    }", "+                                                }", "+                                                break HAMMER;", "+                                            } // while x > 0", "+                                            else {", "+                                                if ((block[i1] & 0xff) > (block[i2] & 0xff)) {", "+                                                    continue HAMMER;", "+                                                } else {", "+                                                    break HAMMER;", "+                                                }", "+                                            }", "+                                        } else if ((block[i1 + 5] & 0xff) > (block[i2 + 5] & 0xff)) {", "+                                            continue HAMMER;", "+                                        } else {", "+                                            break HAMMER;", "+                                        }", "+                                    } else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff)) {", "+                                        continue HAMMER;", "+                                    } else {", "+                                        break HAMMER;", "+                                    }", "+                                } else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff)) {", "+                                    continue HAMMER;", "+                                } else {", "+                                    break HAMMER;", "+                                }", "+                            } else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff)) {", "+                                continue HAMMER;", "+                            } else {", "+                                break HAMMER;", "+                        } else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff)) {", "+                            continue HAMMER;", "+                        } else {", "+                            break HAMMER;", "+", "+                    } // HAMMER", "+                    // end inline mainGTU", "+", "+                    fmap[j] = v;", "+                if (firstAttemptShadow && (i <= hi)", "+                    && (workDoneShadow > workLimitShadow)) {", "+                    break HP;", "+", "+        this.workDone = workDoneShadow;", "+        return firstAttemptShadow && (workDoneShadow > workLimitShadow);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af2f07e774853f0315cef6586fe7ef62", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "3477bbf6474cdd2b70b12eb638e64415a4f1c2ec", "commitAfterChange": "134d95afef9b42cf08f2eccb077b97525ac38034", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 32, "signatureBeforeChange": "      private void simpleSort(int lo, int hi, int d)", "signatureAfterChange": "     private boolean mainSimpleSort(final Data data, final int lo, final int hi,                                    final int d)", "diff": ["-", "-    private void simpleSort(int lo, int hi, int d) {", "-        int i, j, h, bigN, hp;", "-        int v;", "-", "-        bigN = hi - lo + 1;", "+     */", "+    private boolean mainSimpleSort(final Data data, final int lo, final int hi,", "+                                   final int d) {", "+        final int bigN = hi - lo + 1;", "-            return;", "+            return this.firstAttempt && (this.workDone > this.workLimit);", "-        hp = 0;", "-        while (incs[hp] < bigN) {", "+        int hp = 0;", "+        while (INCS[hp] < bigN) {", "-        hp--;", "-        for (; hp >= 0; hp--) {", "-            h = incs[hp];", "+        final int[] fmap            = data.fmap;", "+        final char[] quadrant       = data.quadrant;", "+        final byte[] block          = data.block;", "+        final int last              = this.last;", "+        final int lastPlus1         = last + 1;", "+        final boolean firstAttempt  = this.firstAttempt;", "+        final int workLimit         = this.workLimit;", "+        int workDone                = this.workDone;", "-            i = lo + h;", "-            while (true) {", "-                /* copy 1 */", "-                if (i > hi) {", "-                    break;", "-                }", "-                v = zptr[i];", "-                j = i;", "-                while (fullGtU(zptr[j - h] + d, v + d)) {", "-                    zptr[j] = zptr[j - h];", "-                    j = j - h;", "-                    if (j <= (lo + h - 1)) {", "-                        break;", "-                    }", "-                }", "-                zptr[j] = v;", "-                i++;", "+        // Following block contains unrolled code which could be shortened by", "+        // coding it in additional loops.", "-                /* copy 2 */", "-                if (i > hi) {", "-                    break;", "-                }", "-                v = zptr[i];", "-                j = i;", "-                while (fullGtU(zptr[j - h] + d, v + d)) {", "-                    zptr[j] = zptr[j - h];", "-                    j = j - h;", "-                    if (j <= (lo + h - 1)) {", "-                        break;", "-                    }", "-                }", "-                zptr[j] = v;", "-                i++;", "+        HP: while (--hp >= 0) {", "+            final int h = INCS[hp];", "+            final int mj = lo + h - 1;", "-                /* copy 3 */", "-                if (i > hi) {", "-                    break;", "-                }", "-                v = zptr[i];", "-                j = i;", "-                while (fullGtU(zptr[j - h] + d, v + d)) {", "-                    zptr[j] = zptr[j - h];", "-                    j = j - h;", "-                    if (j <= (lo + h - 1)) {", "-                        break;", "-                    }", "-                }", "-                zptr[j] = v;", "-                i++;", "+            for (int i = lo + h; i <= hi;) {", "+                // copy", "+                for (int k = 3; (i <= hi) && (--k >= 0); i++) {", "+                    final int v = fmap[i];", "+                    final int vd = v + d;", "+                    int j = i;", "-                if (workDone > workLimit && firstAttempt) {", "+                    //  for (int a;", "+                    //       (j > mj) && mainGtU((a = fmap[j - h]) + d, vd,", "+                    //                           block, quadrant, last);", "+                    //       j -= h) {", "+                    //      fmap[j] = a;", "+                    //  }", "+                    //", "+                    // unrolled version:", "+", "+                    // start inline mainGTU", "+                    boolean onceRunned = false;", "+                    int a = 0;", "+", "+                    HAMMER: while (true) {", "+                        if (onceRunned) {", "+                            fmap[j] = a;", "+                            if ((j -= h) <= mj) {", "+                                break HAMMER;", "+                            }", "+                        } else {", "+                            onceRunned = true;", "+                        }", "+", "+                        a = fmap[j - h];", "+                        int i1 = a + d;", "+                        int i2 = vd;", "+", "+                        // following could be done in a loop, but", "+                        // unrolled it for performance:", "+                        if (block[i1 + 1] == block[i2 + 1]) {", "+                            if (block[i1 + 2] == block[i2 + 2]) {", "+                                if (block[i1 + 3] == block[i2 + 3]) {", "+                                    if (block[i1 + 4] == block[i2 + 4]) {", "+                                        if (block[i1 + 5] == block[i2 + 5]) {", "+                                            if (block[(i1 += 6)]", "+                                                == block[(i2 += 6)]) {", "+                                                int x = last;", "+                                                X: while (x > 0) {", "+                                                    x -= 4;", "+", "+                                                    if (block[i1 + 1]", "+                                                        == block[i2 + 1]) {", "+                                                        if (quadrant[i1]", "+                                                            == quadrant[i2]) {", "+                                                            if (block[i1 + 2] == block[i2 + 2]) {", "+                                                                if (quadrant[i1 + 1] == quadrant[i2 + 1]) {", "+                                                                    if (block[i1 + 3] == block[i2 + 3]) {", "+                                                                        if (quadrant[i1 + 2] == quadrant[i2 + 2]) {", "+                                                                            if (block[i1 + 4] == block[i2 + 4]) {", "+                                                                                if (quadrant[i1 + 3] == quadrant[i2 + 3]) {", "+                                                                                    if ((i1 += 4) >= lastPlus1) {", "+                                                                                        i1 -= lastPlus1;", "+                                                                                    }", "+                                                                                    if ((i2 += 4) >= lastPlus1) {", "+                                                                                        i2 -= lastPlus1;", "+                                                                                    }", "+                                                                                    workDone++;", "+                                                                                    continue X;", "+                                                                                } else if ((quadrant[i1 + 3] > quadrant[i2 + 3])) {", "+                                                                                    continue HAMMER;", "+                                                                                } else {", "+                                                                                    break HAMMER;", "+                                                                                }", "+                                                                            } else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff)) {", "+                                                                                continue HAMMER;", "+                                                                            } else {", "+                                                                                break HAMMER;", "+                                                                            }", "+                                                                        } else if ((quadrant[i1 + 2] > quadrant[i2 + 2])) {", "+                                                                            continue HAMMER;", "+                                                                        } else {", "+                                                                            break HAMMER;", "+                                                                        }", "+                                                                    } else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff)) {", "+                                                                        continue HAMMER;", "+                                                                    } else {", "+                                                                        break HAMMER;", "+                                                                    }", "+                                                                } else if ((quadrant[i1 + 1] > quadrant[i2 + 1])) {", "+                                                                    continue HAMMER;", "+                                                                } else {", "+                                                                    break HAMMER;", "+                                                                }", "+                                                            } else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff)) {", "+                                                                continue HAMMER;", "+                                                            } else {", "+                                                                break HAMMER;", "+                                                            }", "+                                                        } else if ((quadrant[i1] > quadrant[i2])) {", "+                                                            continue HAMMER;", "+                                                        } else {", "+                                                            break HAMMER;", "+                                                        }", "+                                                    } else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff)) {", "+                                                        continue HAMMER;", "+                                                    } else {", "+                                                        break HAMMER;", "+                                                    }", "+", "+                                                }", "+                                                break HAMMER;", "+                                            } // while x > 0", "+                                            else {", "+                                                if ((block[i1] & 0xff)", "+                                                    > (block[i2] & 0xff)) {", "+                                                    continue HAMMER;", "+                                                } else {", "+                                                    break HAMMER;", "+                                                }", "+                                            }", "+                                        } else if ((block[i1 + 5] & 0xff)", "+                                                   > (block[i2 + 5] & 0xff)) {", "+                                            continue HAMMER;", "+                                        } else {", "+                                            break HAMMER;", "+                                        }", "+                                    } else if ((block[i1 + 4] & 0xff)", "+                                               > (block[i2 + 4] & 0xff)) {", "+                                        continue HAMMER;", "+                                    } else {", "+                                        break HAMMER;", "+                                    }", "+                                } else if ((block[i1 + 3] & 0xff)", "+                                           > (block[i2 + 3] & 0xff)) {", "+                                    continue HAMMER;", "+                                } else {", "+                                    break HAMMER;", "+                                }", "+                            } else if ((block[i1 + 2] & 0xff)", "+                                       > (block[i2 + 2] & 0xff)) {", "+                                continue HAMMER;", "+                            } else {", "+                                break HAMMER;", "+                            }", "+                        } else if ((block[i1 + 1] & 0xff)", "+                                   > (block[i2 + 1] & 0xff)) {", "+                            continue HAMMER;", "+                        } else {", "+                            break HAMMER;", "+                        }", "+", "+                    } // HAMMER", "+                    // end inline mainGTU", "+", "+                    fmap[j] = v;", "+                }", "+", "+                if (firstAttempt && (i <= hi) && (workDone > workLimit)) {", "+                    break HP;", "+                }", "+            }", "+        }", "+", "+        this.workDone = workDone;", "+        return firstAttempt && (workDone > workLimit);", "+    }", "-            }", "-        }", "-    }"]}]}
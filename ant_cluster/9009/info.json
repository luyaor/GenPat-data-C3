{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bfa38227c9ef656c10163cc7669b79c9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a40e149bbb7158726eda11a90282bc7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java", "commitBeforeChange": "e063898390238f89e0dca0b66f971340425017e6", "commitAfterChange": "37879f0723eadaec6ce4c357b4c41338f55a86d9", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected Commandline setupJavacCommandlineSwitches( Commandline cmd,                                                          boolean useDebugLevel )         throws TaskException", "signatureAfterChange": "     protected Commandline setupJavacCommandlineSwitches( Commandline cmd,                                                          boolean useDebugLevel )         throws TaskException", "diff": ["-", "-        // we cannot be using Java 1.0 when forking, so we only have to", "-        // distinguish between Java 1.1, and Java 1.2 and higher, as Java 1.1", "-        // has its own parameter format", "-        boolean usingJava1_1 = Project.getJavaVersion().equals( Project.JAVA_1_1 );", "-        String memoryParameterPrefix = usingJava1_1 ? \"-J-\" : \"-J-X\";", "+        String memoryParameterPrefix = \"-J-X\";", "+        cmd.createArgument().setPath( classpath );", "-        // Just add \"sourcepath\" to classpath ( for JDK1.1 )", "-        // as well as \"bootclasspath\" and \"extdirs\"", "-        if( Project.getJavaVersion().startsWith( \"1.1\" ) )", "+        cmd.createArgument().setValue( \"-sourcepath\" );", "+        cmd.createArgument().setPath( src );", "+", "+        if( target != null )", "-            Path cp = new Path();", "-            /*", "-             * XXX - This doesn't mix very well with build.systemclasspath,", "-             */", "-            if( m_bootclasspath != null )", "-            {", "-                cp.append( m_bootclasspath );", "-            }", "-            if( m_extdirs != null )", "-            {", "-                cp.addExtdirs( m_extdirs );", "-            }", "-            cp.append( classpath );", "-            cp.append( src );", "-            cmd.createArgument().setPath( cp );", "+            cmd.createArgument().setValue( \"-target\" );", "+            cmd.createArgument().setValue( target );", "-        else", "+", "+        if( m_bootclasspath != null )", "-            cmd.createArgument().setPath( classpath );", "-            cmd.createArgument().setValue( \"-sourcepath\" );", "-            cmd.createArgument().setPath( src );", "-            if( target != null )", "-            {", "-                cmd.createArgument().setValue( \"-target\" );", "-                cmd.createArgument().setValue( target );", "-            }", "-            if( m_bootclasspath != null )", "-            {", "-                cmd.createArgument().setValue( \"-bootclasspath\" );", "-                cmd.createArgument().setPath( m_bootclasspath );", "-            }", "-            if( m_extdirs != null )", "-            {", "-                cmd.createArgument().setValue( \"-extdirs\" );", "-                cmd.createArgument().setPath( m_extdirs );", "-            }", "+            cmd.createArgument().setValue( \"-bootclasspath\" );", "+            cmd.createArgument().setPath( m_bootclasspath );", "+        }", "+", "+        if( m_extdirs != null )", "+        {", "+            cmd.createArgument().setValue( \"-extdirs\" );", "+            cmd.createArgument().setPath( m_extdirs );", "-            if( useDebugLevel", "-                && Project.getJavaVersion() != Project.JAVA_1_0", "-                && Project.getJavaVersion() != Project.JAVA_1_1 )", "+            if( useDebugLevel )", "-", "-        else if( Project.getJavaVersion() != Project.JAVA_1_0 &&", "-            Project.getJavaVersion() != Project.JAVA_1_1 )", "+        else", "-        }", "-", "-        if( m_depend )", "-        {", "-            if( Project.getJavaVersion().startsWith( \"1.1\" ) )", "-            {", "-                cmd.createArgument().setValue( \"-depend\" );", "-            }", "-            else if( Project.getJavaVersion().startsWith( \"1.2\" ) )", "-            {", "-                cmd.createArgument().setValue( \"-Xdepend\" );", "-            }", "-            else", "-            {", "-                final String message = \"depend attribute is not supported by the modern compiler\";", "-                getLogger().warn( message );", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "542982ef85238006f287c054c92664cf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java", "commitBeforeChange": "e063898390238f89e0dca0b66f971340425017e6", "commitAfterChange": "37879f0723eadaec6ce4c357b4c41338f55a86d9", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected Commandline setupJavacCommandlineSwitches( Commandline cmd,                                                          boolean useDebugLevel )         throws TaskException", "signatureAfterChange": "     protected Commandline setupJavacCommandlineSwitches( Commandline cmd,                                                          boolean useDebugLevel )         throws TaskException", "diff": ["-", "-        // we cannot be using Java 1.0 when forking, so we only have to", "-        // distinguish between Java 1.1, and Java 1.2 and higher, as Java 1.1", "-        // has its own parameter format", "-        boolean usingJava1_1 = Project.getJavaVersion().equals( Project.JAVA_1_1 );", "-        String memoryParameterPrefix = usingJava1_1 ? \"-J-\" : \"-J-X\";", "+        String memoryParameterPrefix = \"-J-X\";", "+        cmd.createArgument().setPath( classpath );", "-        // Just add \"sourcepath\" to classpath ( for JDK1.1 )", "-        // as well as \"bootclasspath\" and \"extdirs\"", "-        if( Project.getJavaVersion().startsWith( \"1.1\" ) )", "+        cmd.createArgument().setValue( \"-sourcepath\" );", "+        cmd.createArgument().setPath( src );", "+", "+        if( target != null )", "-            Path cp = new Path();", "-            /*", "-             * XXX - This doesn't mix very well with build.systemclasspath,", "-             */", "-            if( m_bootclasspath != null )", "-            {", "-                cp.append( m_bootclasspath );", "-            }", "-            if( m_extdirs != null )", "-            {", "-                cp.addExtdirs( m_extdirs );", "-            }", "-            cp.append( classpath );", "-            cp.append( src );", "-            cmd.createArgument().setPath( cp );", "+            cmd.createArgument().setValue( \"-target\" );", "+            cmd.createArgument().setValue( target );", "-        else", "+", "+        if( m_bootclasspath != null )", "-            cmd.createArgument().setPath( classpath );", "-            cmd.createArgument().setValue( \"-sourcepath\" );", "-            cmd.createArgument().setPath( src );", "-            if( target != null )", "-            {", "-                cmd.createArgument().setValue( \"-target\" );", "-                cmd.createArgument().setValue( target );", "-            }", "-            if( m_bootclasspath != null )", "-            {", "-                cmd.createArgument().setValue( \"-bootclasspath\" );", "-                cmd.createArgument().setPath( m_bootclasspath );", "-            }", "-            if( m_extdirs != null )", "-            {", "-                cmd.createArgument().setValue( \"-extdirs\" );", "-                cmd.createArgument().setPath( m_extdirs );", "-            }", "+            cmd.createArgument().setValue( \"-bootclasspath\" );", "+            cmd.createArgument().setPath( m_bootclasspath );", "+        }", "+", "+        if( m_extdirs != null )", "+        {", "+            cmd.createArgument().setValue( \"-extdirs\" );", "+            cmd.createArgument().setPath( m_extdirs );", "-            if( useDebugLevel", "-                && Project.getJavaVersion() != Project.JAVA_1_0", "-                && Project.getJavaVersion() != Project.JAVA_1_1 )", "+            if( useDebugLevel )", "-", "-        else if( Project.getJavaVersion() != Project.JAVA_1_0 &&", "-            Project.getJavaVersion() != Project.JAVA_1_1 )", "+        else", "-        }", "-", "-        if( m_depend )", "-        {", "-            if( Project.getJavaVersion().startsWith( \"1.1\" ) )", "-            {", "-                cmd.createArgument().setValue( \"-depend\" );", "-            }", "-            else if( Project.getJavaVersion().startsWith( \"1.2\" ) )", "-            {", "-                cmd.createArgument().setValue( \"-Xdepend\" );", "-            }", "-            else", "-            {", "-                final String message = \"depend attribute is not supported by the modern compiler\";", "-                getLogger().warn( message );", "-            }"]}]}
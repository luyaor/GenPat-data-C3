{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d16d172f7645b74ab03f71e49b3286d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "426439da1a39a951cd312d960c42d0b6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "aa43e37a025cdf54b8914b8283e57419a253ed59", "commitAfterChange": "dee95e3acc5154aee03ff5f91f9a56426ae79f3f", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 27, "signatureBeforeChange": "     protected void writeLocalFileHeader(ZipEntry ze) throws IOException", "signatureAfterChange": "     protected void writeLocalFileHeader(ZipEntry ze) throws IOException", "diff": ["-        ", "-        final ZipEncoding entryEncoding;", "-        ", "-        if (!encodable && fallbackToUTF8) {", "-            entryEncoding = ZipEncodingHelper.UTF8_ZIP_ENCODING;", "-        } else {", "-            entryEncoding = zipEncoding;", "-        }", "-        ", "-        ByteBuffer name = entryEncoding.encode(ze.getName());        ", "+        ByteBuffer name = getName(ze);", "-", "-            if (createUnicodeExtraFields == UnicodeExtraFieldPolicy.ALWAYS", "-                || !encodable) {", "-                ze.addExtraField(new UnicodePathExtraField(ze.getName(),", "-                                                           name.array(),", "-                                                           name.arrayOffset(),", "-                                                           name.limit()));", "-            }", "-", "-            String comm = ze.getComment();", "-            if (comm != null && !\"\".equals(comm)) {", "-", "-                boolean commentEncodable = this.zipEncoding.canEncode(comm);", "-", "-                if (createUnicodeExtraFields == UnicodeExtraFieldPolicy.ALWAYS", "-                    || !commentEncodable) {", "-                    ByteBuffer commentB = entryEncoding.encode(comm);", "-                    ze.addExtraField(new UnicodeCommentExtraField(comm,", "-                                                                  commentB.array(),", "-                                                                  commentB.arrayOffset(),", "-                                                                  commentB.limit())", "-                                     );", "-                }", "-            }", "+            addUnicodeExtraFields(ze, encodable, name);", "-        offsets.put(ze, ZipLong.getBytes(written));", "+        offsets.put(ze, Long.valueOf(written));", "-                                                         && fallbackToUTF8);", "+                                                         && fallbackToUTF8,", "+                                                         hasZip64Extra(ze));", "-        writeOut(toDosTime(ze.getTime()));", "+        writeOut(ZipUtil.toDosTime(ze.getTime()));", "-        localDataStart = written;", "+        entry.localDataStart = written;", "-            writeOut(LZERO);", "-            writeOut(LZERO);", "+            if (hasZip64Extra(entry.entry)) {", "+                // point to ZIP64 extended information extra field for", "+                // sizes, may get rewritten once sizes are known if", "+                // stream is seekable", "+                writeOut(ZipLong.ZIP64_MAGIC.getBytes());", "+                writeOut(ZipLong.ZIP64_MAGIC.getBytes());", "+            } else {", "+                writeOut(LZERO);", "+                writeOut(LZERO);", "+            }", "-            writeOut(ZipLong.getBytes(ze.getSize()));", "-            writeOut(ZipLong.getBytes(ze.getSize()));", "+            byte[] size = ZipLong.ZIP64_MAGIC.getBytes();", "+            if (!hasZip64Extra(ze)) {", "+                size = ZipLong.getBytes(ze.getSize());", "+            }", "+            writeOut(size);", "+            writeOut(size);", "-        dataStart = written;", "+        entry.dataStart = written;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5acd4ea26341e8626814f1170cbfaca", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java", "commitBeforeChange": "6ecbe242189a8d7feba3d56c8ec89582e77b1b29", "commitAfterChange": "409b0917b6f737faf5c8b804fdbec8bd1f7f5274", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+            ", "+            System.err.println(test.getFork());", "+", "-                    fe.setOutfile(project.resolveFile(test.getOutfile()", "-                                                      +fe.getExtension()));", "+                    if (fe.getUseFile()) {", "+                        fe.setOutfile(project.resolveFile(test.getOutfile()", "+                                                          +fe.getExtension()));", "+                    } else {", "+                        fe.setOutput(new LogOutputStream(this, Project.MSG_INFO));", "+                    }", "-                    add[i].setOutfile(project.resolveFile(test.getOutfile()", "-                                                          +add[i].getExtension()));", "+                    if (add[i].getUseFile()) {", "+                        add[i].setOutfile(project.resolveFile(test.getOutfile()", "+                                                              +add[i].getExtension()));", "+                    } else {", "+                        add[i].setOutput(new LogOutputStream(this, Project.MSG_INFO));", "+                    }", "+                StringBuffer formatterArg = new StringBuffer();", "-                    cmd.createArgument().setValue(\"formatter=\" +", "-                                                  fe.getClassname() + \",\"", "-                                                  + project.resolveFile(test.getOutfile()", "-                                                                               +fe.getExtension()).getAbsolutePath());", "+                    formatterArg.append(\"formatter=\");", "+                    formatterArg.append(fe.getClassname());", "+                    if (fe.getUseFile()) {", "+                        formatterArg.append(\",\");", "+                        formatterArg.append(project.resolveFile(test.getOutfile()", "+                                                                +fe.getExtension())", "+                                            .getAbsolutePath());", "+                    }", "+                    cmd.createArgument().setValue(formatterArg.toString());", "+                    formatterArg.setLength(0);", "-                    cmd.createArgument().setValue(\"formatter=\" +", "-                                                  add[i].getClassname() + \",\"", "-                                                  + project.resolveFile(test.getOutfile()", "-                                                                               +add[i].getExtension()).getAbsolutePath());", "+                    formatterArg.append(\"formatter=\");", "+                    formatterArg.append(add[i].getClassname());", "+                    if (add[i].getUseFile()) {", "+                        formatterArg.append(\",\");", "+                        formatterArg.append(project.resolveFile(test.getOutfile()", "+                                                                +add[i].getExtension())", "+                                            .getAbsolutePath());", "+                    }", "+                    cmd.createArgument().setValue(formatterArg.toString());", "+                    formatterArg.setLength(0);", "+                log(\"Executing: \"+cmd.toString(), Project.MSG_VERBOSE);"]}]}
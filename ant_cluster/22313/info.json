{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bb4692622c71cdde63f2d4619e367081", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "125d5b47dfa81342795c14c9ba1b45c0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Tar.java", "commitBeforeChange": "1400dc3c1b536c70697f83be990b0725121cba90", "commitAfterChange": "b5fcf10604f56a8061d10f332570342b34cc7a9d", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 20, "signatureBeforeChange": "         public String getGroup()", "signatureAfterChange": "     protected TarFileSet asTarFileSet(ArchiveFileSet archiveFileSet)", "diff": ["+     */", "+    protected TarFileSet asTarFileSet(ArchiveFileSet archiveFileSet) {", "+        TarFileSet tfs = null;", "+        if (archiveFileSet != null && archiveFileSet instanceof TarFileSet) {", "+            tfs = (TarFileSet) archiveFileSet;", "+        } else {", "+            tfs = new TarFileSet();", "+            tfs.setProject(getProject());", "+            if (archiveFileSet != null) {", "+                tfs.setPrefix(archiveFileSet.getPrefix(getProject()));", "+                tfs.setFullpath(archiveFileSet.getFullpath(getProject()));", "+                if (archiveFileSet.hasFileModeBeenSet()) {", "+                    tfs.integerSetFileMode(archiveFileSet", "+                                           .getFileMode(getProject()));", "+                }", "+                if (archiveFileSet.hasDirModeBeenSet()) {", "+                    tfs.integerSetDirMode(archiveFileSet", "+                                          .getDirMode(getProject()));", "+                }", "+                ", "+                if (archiveFileSet instanceof", "+                    org.apache.tools.ant.types.TarFileSet) {", "+                    org.apache.tools.ant.types.TarFileSet t =", "+                        (org.apache.tools.ant.types.TarFileSet) archiveFileSet;", "+                    if (t.hasUserNameBeenSet()) {", "+                        tfs.setUserName(t.getUserName());", "+                    }", "+                    if (t.hasGroupBeenSet()) {", "+                        tfs.setGroup(t.getGroup());", "+                    }", "+                    if (t.hasUserIdBeenSet()) {", "+                        tfs.setUid(t.getUid());", "+                    }", "+                    if (t.hasGroupIdBeenSet()) {", "+                        tfs.setGid(t.getGid());", "+                    }", "+                }", "+            }", "+        }", "+        return tfs;", "+    }", "-         */", "-        public String getGroup() {", "-            return groupName;", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "291747a8372d78b230f88798b751bfe8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "51fa6c6e412765a4540fd0d597b4b1805d189376", "commitAfterChange": "e596d350ae9efa7d0aaf51d8f988be6ea3909078", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String inputEncoding, String outputEncoding,                          Project project)         throws IOException", "signatureAfterChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String inputEncoding, String outputEncoding,                          Project project)         throws IOException", "diff": ["-            if (filterSetsAvailable || filterChainsAvailable", "-                || (inputEncoding != null ", "-                    && !inputEncoding.equals(outputEncoding))", "-                || (inputEncoding == null && outputEncoding != null)) {", "+            if (filterSetsAvailable) {", "+            } else if (filterChainsAvailable", "+                       || (inputEncoding != null ", "+                           && !inputEncoding.equals(outputEncoding))", "+                       || (inputEncoding == null && outputEncoding != null)) {", "+                BufferedReader in = null;", "+                BufferedWriter out = null;", "+ ", "+                 try {", "+                     if (inputEncoding == null) {", "+                         in = new BufferedReader(new FileReader(sourceFile));", "+                     } else {", "+                         in =", "+                             new BufferedReader(", "+                                 new InputStreamReader(", "+                                     new FileInputStream(sourceFile),", "+                                     inputEncoding));", "+                     }", "+ ", "+                     if (outputEncoding == null) {", "+                         out = new BufferedWriter(new FileWriter(destFile));", "+                     } else {", "+                         out =", "+                             new BufferedWriter(", "+                                 new OutputStreamWriter(", "+                                     new FileOutputStream(destFile),", "+                                     outputEncoding));", "+                     }", "+ ", "+                     if (filterChainsAvailable) {", "+                         ChainReaderHelper crh = new ChainReaderHelper();", "+                         crh.setBufferSize(8192);", "+                         crh.setPrimaryReader(in);", "+                         crh.setFilterChains(filterChains);", "+                         crh.setProject(project);", "+                         Reader rdr = crh.getAssembledReader();", "+                         in = new BufferedReader(rdr);", "+                     }", "+                     char buffer[] = new char[1024*8];", "+                     while (true) {", "+                         int nRead = in.read(buffer, 0, buffer.length);", "+                         if (nRead == -1) {", "+                             break;", "+                         }", "+                         out.write(buffer, 0, nRead);", "+                      }", "+                  } finally {", "+                      if (out != null) {", "+                         out.close();", "+                     }", "+                     if (in != null) {", "+                         in.close();", "+                     }", "+                 }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79d75283a3c4674f056631c67ff42bb1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/IContract.java", "commitBeforeChange": "72053e82f182e41019dfda7b72b4b81676e48660", "commitAfterChange": "60ed8507e7718d1e5b0d5f36d18571ff07c8c017", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 18, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+", "+            // turn off assertions if we're using controlfile, unless they are not explicitly set.", "+            boolean useControlFile = (controlFile != null) && controlFile.exists();", "+            if( useControlFile && !preModified ) {", "+                pre = false;", "+            }", "+            if( useControlFile && !postModified ) {", "+                post = false;", "+            }", "+            if( useControlFile && !invariantModified ) {", "+                invariant = false;", "+            }", "+            // issue warning if pre,post or invariant is used together with controlfile", "+            if( ( pre || post || invariant ) && controlFile != null ) {", "+                log( \"WARNING: specifying pre,post or invariant will override control file settings\" );", "+            }", "+", "+", "+", "+            mkdir.setDir( buildDir );", "+            mkdir.execute();", "-            // Set the compiler", "-            setCompiler();", "-", "+", "+            // Might need to add the core classes if we're not using Sun's Javac (like Jikes)", "+            String compiler = project.getProperty(\"build.compiler\");", "+            ClasspathHelper classpathHelper = new ClasspathHelper( compiler );", "+            classpathHelper.modify( baseClasspath );", "+            afterInstrumentationClasspath.append( new Path( getProject(), buildDir.getAbsolutePath() ) );", "+            repositoryClasspath.append( new Path( getProject(), buildDir.getAbsolutePath() ) );", "+            iContractClasspath.append( new Path( getProject(), buildDir.getAbsolutePath() ) );", "-            args.append( \"-b\" ).append( icCompiler ).append( \"\\\"\" ).append( \" -classpath \" ).append( beforeInstrumentationClasspath ).append( \"\\\" \" );", "-            args.append( \"-c\" ).append( icCompiler ).append( \"\\\"\" ).append( \" -classpath \" ).append( afterInstrumentationClasspath ).append( \"\\\" \" );", "-            args.append( \"-n\" ).append( icCompiler ).append( \"\\\"\" ).append( \" -classpath \" ).append( repositoryClasspath ).append( \"\\\" \" );", "+            args.append( \"-b\" ).append( \"\\\"\" ).append( icCompiler ).append( \" -classpath \" ).append( beforeInstrumentationClasspath ).append( \"\\\" \" );", "+            args.append( \"-c\" ).append( \"\\\"\" ).append( icCompiler ).append( \" -classpath \" ).append( afterInstrumentationClasspath ).append( \" -d \" ).append( buildDir ).append( \"\\\" \" );", "+            args.append( \"-n\" ).append( \"\\\"\" ).append( icCompiler ).append( \" -classpath \" ).append( repositoryClasspath ).append( \"\\\" \" );", "-            args.append( instrumentall ? \"-a \" : \"\" ); // reinstrument everything if controlFile exists and is newer than source", "+            args.append( quiet ? \"-q \" : \"\" );", "+            args.append( instrumentall ? \"-a \" : \"\" ); // reinstrument everything if controlFile exists and is newer than any class", "-// System.out.println( \"JAVA -classpath \" + iContractClasspath + \" com.reliablesystems.iContract.Tool \" + args.toString() );", "+//System.out.println( \"JAVA -classpath \" + iContractClasspath + \" com.reliablesystems.iContract.Tool \" + args.toString() );", "-                iControlProps.setProperty( \"classRoot\", srcDir.getAbsolutePath() );", "-                iControlProps.setProperty( \"classpath\", iContractClasspath.toString() );", "-                iControlProps.setProperty( \"controlFile\", \"control\" );", "+                iControlProps.setProperty( \"sourceRoot\", srcDir.getAbsolutePath() );", "+                iControlProps.setProperty( \"classRoot\", classDir.getAbsolutePath() );", "+                iControlProps.setProperty( \"classpath\", afterInstrumentationClasspath.toString() );", "+                iControlProps.setProperty( \"controlFile\", controlFile.getAbsolutePath() );", "+                iControlProps.setProperty( \"targetsFile\", targets.getAbsolutePath() );", "-                    iControlProps.store( new FileOutputStream( \"icontrol.properties\" ), \"Edit the classRoot and controlfile properties if you like\" );", "-                    log( \"Updated file icontrol.properties.\" );", "+                    iControlProps.store( new FileOutputStream( \"icontrol.properties\" ), ICONTROL_PROPERTIES_HEADER );", "+                    log( \"Updated icontrol.properties\" );", "+            // do it!", "-        } else {", "+", "+        } else { // not dirty"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b32c32acec1dd771b6f6cbf6f2a2f771", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/FTP.java", "commitBeforeChange": "26067ee1d30e96a7345a20a29bb538ed314d4c70", "commitAfterChange": "54057d742bcffec3013ff101b9f0e8db5ce65009", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 18, "signatureBeforeChange": "     protected int sendFiles(FTPClient ftp, DirectoryScanner ds)         throws IOException, BuildException", "signatureAfterChange": "     protected int transferFiles(FTPClient ftp, FileSet fs)         throws IOException, BuildException", "diff": ["-    protected int sendFiles(FTPClient ftp, DirectoryScanner ds)", "+    protected int transferFiles(FTPClient ftp, FileSet fs)", "+        FileScanner ds;", "+", "+        if (action == SEND_FILES) {", "+            ds = fs.getDirectoryScanner(project);", "+        } else {", "+            ds = new FTPDirectoryScanner(ftp);", "+            fs.setupDirectoryScanner(ds, project);", "+            ds.scan();", "+        }\t\t\t", "+\t\t\t\t", "-        String dir = ds.getBasedir().getAbsolutePath();", "+        String dir = null;", "+        if ((ds.getBasedir() == null) && ((action == SEND_FILES) || (action == GET_FILES))) {", "+            throw new BuildException( \"the dir attribute must be set for send and get actions\" );", "+        } else {", "+            if ((action == SEND_FILES) || (action == GET_FILES)) {", "+                dir = ds.getBasedir().getAbsolutePath();", "+            }", "+        }", "+", "+        // If we are doing a listing, we need the output stream created now.", "+        BufferedWriter bw = null;", "+        if (action == LIST_FILES) {", "+            File pd = new File(listing.getParent());", "+            if (!pd.exists()) {", "+                pd.mkdirs();", "+            }", "+            bw = new BufferedWriter(new FileWriter(listing));", "+        }", "-            sendFile(ftp, dir, dsfiles[i]);", "+            switch (action) {", "+                case SEND_FILES: {", "+                    sendFile(ftp, dir, dsfiles[i]);", "+                    break;", "+                }", "+", "+                case GET_FILES: {", "+                    getFile(ftp, dir, dsfiles[i]);", "+                    break;", "+                }", "+", "+                case DEL_FILES: {", "+                    delFile(ftp, dsfiles[i]);", "+                    break;", "+                }", "+", "+                case LIST_FILES: {", "+                    listFile(ftp, bw, dsfiles[i]);", "+                    break;", "+                }", "+", "+                default: {", "+                    throw new BuildException(\"unknown ftp action \" + action );", "+                }", "+            }", "+        }", "+", "+        if (action == LIST_FILES) {", "+            bw.close();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d010e45be8f7159b73ef99967c0d5538", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Definer.java", "commitBeforeChange": "26f6bfe2be0861267eca5624537b48daa7574dd6", "commitAfterChange": "8701272b2418d74536d09b289f118d1833d42217", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 34, "signatureBeforeChange": "     private void addDefinition(ClassLoader al, String name, String value)         throws BuildException", "signatureAfterChange": "      protected void addDefinition(ClassLoader al, String name, String classname)         throws BuildException", "diff": ["-     */", "-    private void addDefinition(ClassLoader al, String name, String value)", "-        throws BuildException {", "-        try {", "-            Class c = al.loadClass(value);", "-            AntClassLoader.initializeClass(c);", "-            addDefinition(name, c);", "-        } catch (ClassNotFoundException cnfe) {", "-            String msg = getTaskName() + \" class \" + value", "-                + \" cannot be found\";", "-            throw new BuildException(msg, cnfe, getLocation());", "-        } catch (NoClassDefFoundError ncdfe) {", "-            String msg = getTaskName() + \": A class needed by class \"", "-                + value + \" cannot be found: \" + ncdfe.getMessage();", "-            throw new BuildException(msg, ncdfe, location);", "-        }", "-    }", "+    protected void addDefinition(ClassLoader al, String name, String classname)", "+        throws BuildException", "+    {", "+        Class cl = null;", "+        try {", "+            try {", "+                if (onError != OnError.IGNORE) {", "+                    cl = al.loadClass(classname);", "+                    AntClassLoader.initializeClass(cl);", "+                }", "+                ", "+                if (adapter != null) {", "+                    adapterClass = al.loadClass(adapter);", "+                    AntClassLoader.initializeClass(adapterClass);", "+                }", "+", "+                if (adaptTo != null) {", "+                    adaptToClass = al.loadClass(adaptTo);", "+                    AntClassLoader.initializeClass(adaptToClass);", "+                }", "+", "+                AntTypeDefinition def = new AntTypeDefinition();", "+                def.setName(name);", "+                def.setProject(getProject());", "+                def.setClassName(classname);", "+                def.setClass(cl);", "+                def.setAdapterClass(adapterClass);", "+                def.setAdaptToClass(adaptToClass);", "+                def.setClassLoader(al);", "+                if (cl != null) {", "+                    def.checkClass();", "+                }", "+                ComponentHelper.getComponentHelper(getProject())", "+                    .addDataTypeDefinition(def);", "+            } catch (ClassNotFoundException cnfe) {", "+                String msg = getTaskName() + \" class \" + classname", "+                    + \" cannot be found\";", "+                throw new BuildException(msg, cnfe, getLocation());", "+            } catch (NoClassDefFoundError ncdfe) {", "+                String msg = getTaskName() + \"A class needed by class \"", "+                    + classname + \" cannot be found: \" + ncdfe.getMessage();", "+                throw new BuildException(msg, ncdfe, location);", "+            }", "+        } catch (BuildException ex) {", "+            switch (onError) {", "+                case OnError.FAIL:", "+                    throw ex;", "+                case OnError.REPORT:", "+                    log(ex.getLocation() + \"Warning: \" + ex.getMessage(),", "+                        Project.MSG_WARN);", "+                    break;", "+                default:", "+                    log(ex.getLocation() + ex.getMessage(),", "+                        Project.MSG_DEBUG);", "+            }", "+        }", "+    }"]}]}
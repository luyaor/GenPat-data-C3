{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f9e7b1fd46eb59ab5de4b1b23ab4338", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1cbc8992ec2031516581018763c17c3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ComponentHelper.java", "commitBeforeChange": "d25488cbbb28cf25e1f91f714c70999fd105432d", "commitAfterChange": "3d706ab8188a674936880b6f4530b0cf3991758b", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 45, "signatureBeforeChange": "         public synchronized List findMatches(String prefix)", "signatureAfterChange": "     private List<AntTypeDefinition> findTypeMatches(String prefix)", "diff": ["-         */", "-        public synchronized List/*<AntTypeDefinition>*/ findMatches(String prefix) {", "-            ArrayList matches = new ArrayList();", "-            for (Iterator i = values().iterator(); i.hasNext();) {", "-                AntTypeDefinition def = (AntTypeDefinition) (i.next());", "+    private List<AntTypeDefinition> findTypeMatches(String prefix) {", "+        final List<AntTypeDefinition> result = new ArrayList<AntTypeDefinition>();", "+        synchronized (antTypeTable) {", "+            for (AntTypeDefinition def : antTypeTable.values()) {", "-                    matches.add(def);", "+                    result.add(def);", "-            return matches;", "+        return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef8785b76236ac2a69f73bf098007ab9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/comparators/DelegatedResourceComparator.java", "commitBeforeChange": "7829faf36a6f4bc565e0e8b92aa85cc948718176", "commitAfterChange": "9caeed5081071d6a2de28844d0a724918f8c6d86", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected void dieOnCircularReference(Stack stk, Project p)         throws BuildException", "signatureAfterChange": "     protected void dieOnCircularReference(Stack<Object> stk, Project p)         throws BuildException", "diff": ["-    protected void dieOnCircularReference(Stack stk, Project p)", "+    protected void dieOnCircularReference(Stack<Object> stk, Project p)", "-            if (!(v == null || v.isEmpty())) {", "-                for (Iterator i = v.iterator(); i.hasNext();) {", "-                    Object o = i.next();", "-                    if (o instanceof DataType) {", "-                        pushAndInvokeCircularReferenceCheck((DataType) o, stk,", "+            if (!(resourceComparators == null || resourceComparators.isEmpty())) {", "+                for (ResourceComparator resourceComparator : resourceComparators) {", "+                    if (resourceComparator instanceof DataType) {", "+                        pushAndInvokeCircularReferenceCheck((DataType) resourceComparator, stk,"]}]}
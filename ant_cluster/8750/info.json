{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d71c2a19a616b9c817935c3928e7707b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1495749bbad3db8c85bd8895e243826", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "677491b9276e57da76218487af18cfda70aa28af", "commitAfterChange": "a05d1f12196d34b23d4ab80c3598f6fb63410ac5", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     protected void writeCentralFileHeader(ZipEntry ze) throws IOException", "signatureAfterChange": "     protected void writeCentralFileHeader(ZipEntry ze) throws IOException", "diff": ["-        writeOut(CFH_SIG.getBytes());", "+        writeOut(CFH_SIG);", "-        writeOut((new ZipShort((ze.getPlatform() << 8) | 20)).getBytes());", "+        writeOut(ZipShort.getBytes((ze.getPlatform() << 8) | 20));", "-            writeOut((new ZipShort(20)).getBytes());", "+            writeOut(ZipShort.getBytes(20));", "-            writeOut((new ZipShort(8)).getBytes());", "+            writeOut(ZipShort.getBytes(8));", "-            writeOut((new ZipShort(10)).getBytes());", "+            writeOut(ZipShort.getBytes(10));", "-        writeOut((new ZipShort(ze.getMethod())).getBytes());", "+        writeOut(ZipShort.getBytes(ze.getMethod()));", "-        writeOut((new ZipLong(ze.getCrc())).getBytes());", "-        writeOut((new ZipLong(ze.getCompressedSize())).getBytes());", "-        writeOut((new ZipLong(ze.getSize())).getBytes());", "+        writeOut(ZipLong.getBytes(ze.getCrc()));", "+        writeOut(ZipLong.getBytes(ze.getCompressedSize()));", "+        writeOut(ZipLong.getBytes(ze.getSize()));", "-        writeOut((new ZipShort(name.length)).getBytes());", "+        writeOut(ZipShort.getBytes(name.length));", "-        writeOut((new ZipShort(extra.length)).getBytes());", "+        writeOut(ZipShort.getBytes(extra.length));", "-        writeOut((new ZipShort(commentB.length)).getBytes());", "+        writeOut(ZipShort.getBytes(commentB.length));", "-        writeOut((new ZipShort(ze.getInternalAttributes())).getBytes());", "+        writeOut(ZipShort.getBytes(ze.getInternalAttributes()));", "-        writeOut((new ZipLong(ze.getExternalAttributes())).getBytes());", "+        writeOut(ZipLong.getBytes(ze.getExternalAttributes()));", "-        writeOut(((ZipLong) offsets.get(ze)).getBytes());", "+        writeOut((byte[]) offsets.get(ze));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f591ab6993454fb4efdac7ed8b9543d2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/bzip2/CBZip2OutputStream.java", "commitBeforeChange": "93db46be115205107729104e728d45687d885295", "commitAfterChange": "20ab59bff57796a67e1cdfefbc29826c7d55edba", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      protected static void hbMakeCodeLengths( char[] len, int[] freq,                                              int alphaSize, int maxLen )", "signatureAfterChange": "      protected static void hbMakeCodeLengths( char[] len, int[] freq,                                              int alphaSize, int maxLen )", "diff": ["-        int[] weight = new int[ MAX_ALPHA_SIZE * 2 ];", "+        int[] weights = new int[ MAX_ALPHA_SIZE * 2 ];", "-            weight[ i + 1 ] = ( freq[ i ] == 0 ? 1 : freq[ i ] ) << 8;", "+            weights[ i + 1 ] = ( freq[ i ] == 0 ? 1 : freq[ i ] ) << 8;", "-            weight[ 0 ] = 0;", "+            weights[ 0 ] = 0;", "-                    while( weight[ tmp ] < weight[ heap[ zz >> 1 ] ] )", "+                    while( weights[ tmp ] < weights[ heap[ zz >> 1 ] ] )", "-                            weight[ heap[ yy + 1 ] ] < weight[ heap[ yy ] ] )", "+                            weights[ heap[ yy + 1 ] ] < weights[ heap[ yy ] ] )", "-                        if( weight[ tmp ] < weight[ heap[ yy ] ] )", "+                        if( weights[ tmp ] < weights[ heap[ yy ] ] )", "-                            weight[ heap[ yy + 1 ] ] < weight[ heap[ yy ] ] )", "+                            weights[ heap[ yy + 1 ] ] < weights[ heap[ yy ] ] )", "-                        if( weight[ tmp ] < weight[ heap[ yy ] ] )", "+                        if( weights[ tmp ] < weights[ heap[ yy ] ] )", "-                weight[ nNodes ] = ( ( weight[ n1 ] & 0xffffff00 )", "-                    + ( weight[ n2 ] & 0xffffff00 ) )", "-                    | ( 1 + ( ( ( weight[ n1 ] & 0x000000ff ) >", "-                    ( weight[ n2 ] & 0x000000ff ) ) ?", "-                    ( weight[ n1 ] & 0x000000ff ) :", "-                    ( weight[ n2 ] & 0x000000ff ) ) );", "+                final int v1 = weights[ n1 ];", "+                final int v2 = weights[ n2 ];", "+                final int weight = calculateWeight( v1, v2 );", "+                weights[ nNodes ] = weight;", "-                    while( weight[ tmp ] < weight[ heap[ zz >> 1 ] ] )", "+                    while( weights[ tmp ] < weights[ heap[ zz >> 1 ] ] )", "-                j = weight[ i ] >> 8;", "+                j = weights[ i ] >> 8;", "-                weight[ i ] = j << 8;", "+                weights[ i ] = j << 8;", "+    }"]}]}
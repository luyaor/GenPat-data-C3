{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "06a47eff65e1cd444bede9e8147e9f9b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ea682e0d88b74c92cf4e46fe9c6c77e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "b0b920b08fae74de3fd7a7dd5efbca9e8cf379e6", "commitAfterChange": "114d55869f46b382375b6b32ddc17bb2e5fc598c", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 31, "signatureBeforeChange": "     public static void main(String[] args) throws IOException", "signatureAfterChange": "     public static void main(String[] args) throws IOException", "diff": ["+        String[] methods = null;", "-            if (args[i].startsWith(Constants.HALT_ON_ERROR)) {", "+            if (args[i].startsWith(Constants.METHOD_NAMES)) {", "+                try {", "+                    String methodsList = args[i].substring(Constants.METHOD_NAMES.length());", "+                    methods = JUnitTest.parseTestMethodNamesList(methodsList);", "+                } catch (IllegalArgumentException ex) {", "+                    System.err.println(\"Invalid specification of test method names: \" + args[i]);", "+                    System.exit(ERRORS);", "+                }", "+            } else if (args[i].startsWith(Constants.HALT_ON_ERROR)) {", "+                String[] testMethodNames;", "-                    testCaseName = st.nextToken();", "+                    String testListSpec = st.nextToken();", "+                    int colonIndex = testListSpec.indexOf(':');", "+                    if (colonIndex == -1) {", "+                        testCaseName = testListSpec;", "+                        testMethodNames = null;", "+                    } else {", "+                        testCaseName = testListSpec.substring(0, colonIndex);", "+                        testMethodNames = JUnitTest.parseTestMethodNamesList(", "+                                                    testListSpec", "+                                                    .substring(colonIndex + 1)", "+                                                    .replace('+', ','));", "+                    }", "-                    code = launch(t, haltError, stackfilter, haltFail,", "+                    code = launch(t, testMethodNames, haltError, stackfilter, haltFail,", "-                t, haltError, stackfilter, haltFail,", "+                t, methods, haltError, stackfilter, haltFail,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d741678d07c1c09c8426d045f43a1948", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/TraXLiaison.java", "commitBeforeChange": "a738000acab66d8d7ce5cf563f6dd96d9c7024fb", "commitAfterChange": "53db3a2602bcc7a0b357dbb3cc02b6e254960a7e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void createTransformer() throws Exception", "signatureAfterChange": "     private void createTransformer() throws Exception", "diff": ["+        }", "+", "+        if (traceConfiguration != null) {", "+            if (\"org.apache.xalan.transformer.TransformerImpl\"", "+                .equals(transformer.getClass().getName())) {", "+                try {", "+                    Class traceSupport =", "+                        Class.forName(\"org.apache.tools.ant.taskdefs.optional.\"", "+                                      + \"Xalan2TraceSupport\", true,", "+                                      Thread.currentThread()", "+                                      .getContextClassLoader());", "+                    XSLTTraceSupport ts =", "+                        (XSLTTraceSupport) traceSupport.newInstance();", "+                    ts.configureTrace(transformer, traceConfiguration);", "+                } catch (Exception e) {", "+                    String msg = \"Failed to enable tracing because of \" + e;", "+                    if (project != null) {", "+                        project.log(msg, Project.MSG_WARN);", "+                    } else {", "+                        System.err.println(msg);", "+                    }", "+                }", "+            } else {", "+                String msg = \"Not enabling trace support for transformer\"", "+                    + \" implementation\" + transformer.getClass().getName();", "+                if (project != null) {", "+                    project.log(msg, Project.MSG_WARN);", "+                } else {", "+                    System.err.println(msg);", "+                }", "+            }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "382d4a3fcaf4270dc7aef4640b965ec0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0769132790895b53e6fb885c2b6888c7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/LoadFileTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void testNoSourcefilefound()", "signatureAfterChange": "     @Test     public void testNoSourcefilefound()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testNoSourcefilefound\",", "-                \"File not found\", \" doesn't exist\");", "+        try {", "+\t\t\tbuildRule.executeTarget(\"testNoSourcefilefound\");", "+\t\t\tfail(\"BuildException expected: File not found\");", "+\t\t} catch (BuildException ex) {", "+\t\t\tassertContains(\" doesn't exist\", ex.getMessage());", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "123dd01522acc51319e9a1ca860811ae", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/EchoXMLTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void testEmpty()", "signatureAfterChange": "      @Test     public void testEmpty()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testEmpty\", \"must fail\", \"No nested XML specified\");", "+        try {", "+            buildRule.executeTarget(\"testEmpty\");", "+            fail(\"BuildException expected: must fail\");", "+        } catch (BuildException ex) {", "+            assertContains(\"No nested XML specified\", ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f7d06d86cf9f5e385fb0480e674fffc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/PreSetDefTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 11, "signatureBeforeChange": "      public void testCorrectTaskNameBadEl()", "signatureAfterChange": "      @Test     public void testCorrectTaskNameBadEl()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(", "-            \"correct_taskname_badel\", \"element message\", \"javac doesn't support the\");", "+        try {", "+            buildRule.executeTarget(\"correct_taskname_badel\");", "+            fail(\"BuildException expected: element message\");", "+        } catch (BuildException ex) {", "+            assertContains(\"javac doesn't support the\", ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2326b36150bced14a2c8783d4101a07d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/ExtendedTaskdefTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testRun2() throws Exception", "signatureAfterChange": "      @Test     public void testRun2() throws Exception", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testRun2\",", "-                \"exception thrown by the subclass\",", "-                \"executing the Foo task\");", "+    \ttry {", "+    \t\tbuildRule.executeTarget(\"testRun2\");", "+    \t\tfail(\"BuildException should have been thrown\");", "+    \t} catch(BuildException ex) {", "+    \t\tassertContains(\"exception thrown by the subclass\", \"executing the Foo task\", ex.getMessage());", "+    \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2346f4b6f6e91b4b1665179856171577", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/ManifestTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void test13()", "signatureAfterChange": "     @Test     public void test13()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"test13\", \"Duplicate Attribute\",", "-                                       \"The attribute \\\"Test\\\" may not occur more than once in the same section\");", "+        try {", "+\t\t\tbuildRule.executeTarget(\"test13\");", "+\t\t\tfail(\"BuildException expected: Duplicate Attribute\");", "+\t\t} catch (BuildException ex) {", "+\t\t\tassertContains(\"The attribute \\\"Test\\\" may not occur more than once in the same section\", ex.getMessage());", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "235694ff0cc44e4930f81fd646bbbaf0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/ManifestTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void test10()", "signatureAfterChange": "     @Test     public void test10()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"test10\", \"Attribute has no name\",", "-                                       \"Attributes must have name and value\");", "+        try {", "+\t\t\tbuildRule.executeTarget(\"test10\");", "+\t\t\tfail(\"BuildException expected: Attribute has no name\");", "+\t\t} catch (BuildException ex) {", "+\t\t\tassertContains(\"Attributes must have name and value\", ex.getMessage());", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f01105589b67375bd14b6f50c2ab4c9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/TypeAdapterTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testRunAdapterError()", "signatureAfterChange": "      @Test     public void testRunAdapterError()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(", "-            \"runadaptererror\", \"xx\", \"No public run() method in\");", "+        try {", "+            buildRule.executeTarget(\"runadaptererror\");", "+            fail(\"BuildException expected: no public run method\");", "+        } catch (BuildException ex) {", "+            assertContains(\"No public run() method in\", ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2feb84abca2b91d13fd708b99c59daa0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/MacroDefTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 22, "signatureBeforeChange": "      public void testBackTrace()", "signatureAfterChange": "      @Test     public void testBackTrace()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(", "-            \"backtraceon\",", "-            \"Checking if a back trace is created\",", "-            \"following error occurred\");", "+        try {", "+            buildRule.executeTarget(\"backtraceon\");", "+            fail(\"BuildException expected: Checking if a back trace is created\");", "+        } catch (BuildException ex) {", "+            assertContains(\"following error occurred\", ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30f1a7427ae3e04b93fd4e1d7e57757f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/EchoXMLTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testFail()", "signatureAfterChange": "      @Test     public void testFail()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testFail\", \"must fail\", \"${foo}=bar\");", "+        try {", "+            buildRule.executeTarget(\"testFail\");", "+            fail(\"BuildException expected: must fail\");", "+        } catch (BuildException ex) {", "+            assertContains(\"${foo}=bar\", ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31493d9fd2f544b513be109c8291681b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/JarTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "          public void testNoVersionInfoFail()", "signatureAfterChange": "          @Test     public void testNoVersionInfoFail()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testNoVersionInfoFail\", \"Manifest Implemention information missing.\", \"No Implementation-Title set.\");", "+        try {", "+\t\t\tbuildRule.executeTarget(\"testNoVersionInfoFail\");", "+\t\t\tfail(\"BuildException expected: Manifest Implemention information missing.\");", "+\t\t} catch (BuildException ex) {", "+\t\t\tassertContains(\"No Implementation-Title set.\", ex.getMessage());", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32b81e266e2cfc17c5c1bfb29fbabe21", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/SubAntTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": "          public void testMultipleTargetsOneDoesntExist_FOEtrue()", "signatureAfterChange": "          @Test     public void testMultipleTargetsOneDoesntExist_FOEtrue()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"multipleTargetsOneDoesntExist_FOEtrue\", ", "-                                       \"Calling not existent target\", ", "-                                       \"Target \\\"three\\\" does not exist in the project \\\"subant\\\"\");", "+        try {", "+            buildRule.executeTarget(\"multipleTargetsOneDoesntExist_FOEtrue\");", "+            fail(\"BuildException expected: Calling not existent target\");", "+        } catch (BuildException ex) {", "+            assertContains(\"Target \\\"three\\\" does not exist in the project \\\"subant\\\"\", ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35d4f6a929c6386fe5b90040f5dfe300", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/AssertionsTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected void expectAssertion(String target)", "signatureAfterChange": "     private void expectAssertion(String target)", "diff": ["-    protected void expectAssertion(String target) {", "-        expectBuildExceptionContaining(target,", "-                \"assertion not thrown in \"+target,", "-                \"Java returned: 1\");", "+    private void expectAssertion(String target) {", "+        try {", "+            buildRule.executeTarget(target);", "+            fail(\"BuildException should have been thrown by assertion fail in task\");", "+        } catch (BuildException ex) {", "+            assertContains(\"assertion not thrown in \"+target, \"Java returned: 1\", ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fd19d7581bd0114489aa709bb7f6bbf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/MakeUrlTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testEmpty()", "signatureAfterChange": "      @Test     public void testEmpty()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testEmpty\", \"missing property\", \"property\");", "+        try {", "+\t\t\tbuildRule.executeTarget(\"testEmpty\");", "+\t\t\tfail(\"BuildException expected: missing property\");", "+\t\t} catch (BuildException ex) {", "+\t\t\tassertContains(\"property\", ex.getMessage());", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "535cf436d705a7bf4981dd58a840714a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/EchoPropertiesTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 6, "signatureBeforeChange": "       public void testEchoToBadFile()", "signatureAfterChange": "       @Test     public void testEchoToBadFile()", "diff": ["+    @Test", "-        expectBuildExceptionContaining( \"testEchoToBadFile\",", "-            \"destfile is a directory\", \"destfile is a directory!\" );", "+    \ttry {", "+    \t\tbuildRule.executeTarget(\"testEchoToBadFile\");", "+            fail(\"BuildException should have been thrown on destination file being a directory\");", "+    \t} catch(BuildException ex) {", "+    \t\tassertContains(\"destfile is a directory\", \"destfile is a directory!\", ex.getMessage());", "+    \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a3cbb9b103af55ab1b29f44df67e36c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/NiceTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void testTooSlow()", "signatureAfterChange": "      @Test     public void testTooSlow()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(", "-                \"too_slow\",\"out of range\",\"out of the range 1-10\");", "+        try {", "+\t\t\tbuildRule.executeTarget(\"too_slow\");", "+\t\t\tfail(\"BuildException expected: out of range\");", "+\t\t} catch (BuildException ex) {", "+\t\t\tassertContains(\"out of the range 1-10\", ex.getMessage());", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d93675effc9de3f75111f7534349a88", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/NiceTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void testTooFast()", "signatureAfterChange": "      @Test     public void testTooFast()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(", "-                \"too_fast\", \"out of range\", \"out of the range 1-10\");", "+        try {", "+\t\t\tbuildRule.executeTarget(\"too_fast\");", "+\t\t\tfail(\"BuildException expected: out of range\");", "+\t\t} catch (BuildException ex) {", "+\t\t\tassertContains(\"out of the range 1-10\", ex.getMessage());", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76b8669caee2d8780c8ee7591fa2f30a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/ManifestTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void test11()", "signatureAfterChange": "     @Test     public void test11()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"test11\", \"Attribute has no value\",", "-                                       \"Attributes must have name and value\");", "+        try {", "+\t\t\tbuildRule.executeTarget(\"test11\");", "+\t\t\tfail(\"BuildException expected: Attribute has no value\");", "+\t\t} catch (BuildException ex) {", "+\t\t\tassertContains(\"Attributes must have name and value\", ex.getMessage());", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7aba7aeadf79691e337a30bfa885cde3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/MakeUrlTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void testNoProperty()", "signatureAfterChange": "      @Test     public void testNoProperty()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testNoProperty\", \"missing property\", \"property\");", "+        try {", "+\t\t\tbuildRule.executeTarget(\"testNoProperty\");", "+\t\t\tfail(\"BuildException expected: missing property\");", "+\t\t} catch (BuildException ex) {", "+\t\t\tassertContains(\"property\", ex.getMessage());", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7da53ef940563338f566e2422adf6c8b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/AssertionsTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": "      public void testMultipleAssertions()", "signatureAfterChange": "      @Test     public void testMultipleAssertions()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"test-multiple-assertions\",", "-                \"multiple assertions rejected\",", "-                \"Only one assertion declaration is allowed\");", "-    }", "+        try {", "+            buildRule.executeTarget(\"test-multiple-assertions\");", "+            fail(\"BuildException should have been thrown by assertion fail in task\");", "+        } catch (BuildException ex) {", "+            assertContains(\"multiple assertions rejected\", \"Only one assertion declaration is allowed\", ex.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7df0a8be2c8d3b932ad325be776a20c7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/ManifestTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void test3()", "signatureAfterChange": "     @Test     public void test3()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"test3\", \"Manifest is invalid - no colon on header line\",", "-                                       \"Invalid Manifest\");", "+        try {", "+\t\t\tbuildRule.executeTarget(\"test3\");", "+\t\t\tfail(\"BuildException expected: Manifest is invalid - no colon on header line\");", "+\t\t} catch (BuildException ex) {", "+\t\t\tassertContains(\"Invalid Manifest\", ex.getMessage());", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89daafcbda93dd2b22f1c1dbfdb65ee7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/PreSetDefTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public void testCorrectTaskNameBadAttr()", "signatureAfterChange": "      @Test     public void testCorrectTaskNameBadAttr()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(", "-            \"correct_taskname_badattr\", \"attribute message\", \"javac doesn't support the\");", "+        try {", "+            buildRule.executeTarget(\"correct_taskname_badattr\");", "+            fail(\"BuildException expected: attribute message\");", "+        } catch (BuildException ex) {", "+            assertContains(\"javac doesn't support the\", ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d41595b0982ac94d530d4bdb5267345", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/EchoPropertiesTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 4, "signatureBeforeChange": "       public void testReadBadFileFail()", "signatureAfterChange": "       @Test     public void testReadBadFile()", "diff": ["+    @Test", "+    \ttry {", "+    \t\tbuildRule.executeTarget(\"testReadBadFile\");", "+    \t\tfail(\"BuildException should have been thrown on bad file\");", "+    \t}", "+    \tcatch(BuildException ex) {", "+    \t\tassertContains(\"srcfile is a directory\",\"srcfile is a directory!\", ex.getMessage());", "+    \t}", "-", "-    public void testReadBadFileFail() {", "-        expectBuildExceptionContaining( \"testReadBadFile\",", "-            \"srcfile is a directory\", \"srcfile is a directory!\" );", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94d681c34294553f26738be358c51be4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/MakeUrlTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testNoFile()", "signatureAfterChange": "      @Test     public void testNoFile()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testNoFile\", \"missing file\", \"file\");", "+        try {", "+\t\t\tbuildRule.executeTarget(\"testNoFile\");", "+\t\t\tfail(\"BuildException expected: missing file\");", "+\t\t} catch (BuildException ex) {", "+\t\t\tassertContains(\"file\", ex.getMessage());", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a02c192c79fbae0be579977b6ccc4a19", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/ManifestTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void test12()", "signatureAfterChange": "     @Test     public void test12()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"test12\", \"Section with no name\",", "-                                       \"Sections must have a name\");", "+        try {", "+\t\t\tbuildRule.executeTarget(\"test12\");", "+\t\t\tfail(\"BuildException expected: Section with no name\");", "+\t\t} catch (BuildException ex) {", "+\t\t\tassertContains(\"Sections must have a name\", ex.getMessage());", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d137109b3b4923c270bd50f1f223ce05", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/AssertionsTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public void testReferenceAbuse()", "signatureAfterChange": "      @Test     public void testReferenceAbuse()", "diff": ["-", "-    public void testReferenceAbuse() {", "-        expectBuildExceptionContaining(\"test-reference-abuse\",", "-                \"reference abuse rejected\",", "-                \"You must not specify\");", "-    }", "+    @Test", "+    public void testReferenceAbuse() {", "+        try {", "+            buildRule.executeTarget(\"test-reference-abuse\");", "+            fail(\"BuildException should have been thrown by reference abuse\");", "+        } catch (BuildException ex) {", "+            assertContains(\"reference abuse rejected\", \"You must not specify\", ex.getMessage());", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d498d6538d89715a1dca170be4db1453", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/depend/DependTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void testNoSource()", "signatureAfterChange": "     @Test     public void testNoSource()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testnosource\",", "-            \"No source specified\", \"srcdir attribute must be set\");", "+        try {", "+            buildRule.executeTarget(\"testnosource\");", "+            fail(\"Build exception expected: No source specified\");", "+        } catch(BuildException ex) {", "+            assertContains(\"srcdir attribute must be set\", ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d81a41c8fb4cb39da90bdf685d666acc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/JavaTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testNoJarNoClassname()", "signatureAfterChange": "      @Test     public void testNoJarNoClassname()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testNoJarNoClassname\",", "-            \"parameter validation\",", "-            \"Classname must not be null.\");", "+        try {", "+            buildRule.executeTarget(\"testNoJarNoClassname\");", "+            fail(\"Build exception should have been thrown - parameter validation\");", "+        } catch (BuildException ex) {", "+            assertContains(\"Classname must not be null.\", ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e27c25130f6dc3dc811992d5db37af7d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/depend/DependTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void testEmptySource()", "signatureAfterChange": "     @Test     public void testEmptySource()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testemptysource\",", "-            \"No source specified\", \"srcdir attribute must be non-empty\");", "+        try {", "+            buildRule.executeTarget(\"testemptysource\");", "+            fail(\"Build exception expected: No source specified\");", "+        } catch(BuildException ex) {", "+            assertContains(\"srcdir attribute must be non-empty\", ex.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e571589372ea293c56ede3cc84669f57", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/ExtendedTaskdefTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void testRun() throws Exception", "signatureAfterChange": "      @Test     public void testRun() throws Exception", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"testRun\",", "-                \"exception thrown by the subclass\",", "-                \"executing the Foo task\");", "+    \ttry {", "+    \t\tbuildRule.executeTarget(\"testRun\");", "+    \t\tfail(\"BuildException should have been thrown\");", "+    \t} catch(BuildException ex) {", "+    \t\tassertContains(\"exception thrown by the subclass\", \"executing the Foo task\", ex.getMessage());", "+    \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb72e99446aad77431ec10de0ef16a0c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/CaseTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void testTaskCase()", "signatureAfterChange": "     @Test     public void testTaskCase()", "diff": ["+    @Test", "-        expectBuildExceptionContaining(\"taskcase\",", "-            \"Task names are case sensitive\",", "-            \"Problem: failed to create task or type ecHO\");", "+    \ttry {", "+    \t\tbuildRule.executeTarget(\"taskcase\");", "+    \t\tfail(\"Build exception should have been thrown due to case sensitivity of name\");", "+    \t} catch(BuildException ex) {", "+    \t\tassertContains(\"Task names should be case sensitive\", \"Problem: failed to create task or type ecHO\", ex.getMessage());", "+    \t}"]}]}
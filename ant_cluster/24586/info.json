{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a85b3467edb0365879f9df8374b5f169", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0a91e98a41bd4eb5118b40e64a8452e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/classloader/DefaultClassLoaderManager.java", "commitBeforeChange": "274da3301287be067b66a5778b27bfa98ef0a662", "commitAfterChange": "b91e4a3c1d8310dea42c2c353ab016d9c5425109", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private ClassLoader buildClassLoader( final ArrayList files )         throws Exception", "signatureAfterChange": "     private ClassLoader buildClassLoader( final OptionalPackage pkg,                                           final Set pending )         throws Exception", "diff": ["-    private ClassLoader buildClassLoader( final ArrayList files )", "+    private ClassLoader buildClassLoader( final OptionalPackage pkg,", "+                                          final Set pending )", "-        final ArrayList allFiles = new ArrayList( files );", "-        final int count = files.size();", "-        for( int i = 0; i < count; i++ )", "+        final File jarFile = pkg.getFile();", "+", "+        // Check for cached classloader", "+        ClassLoader classLoader = (ClassLoader)m_classLoaders.get( jarFile );", "+        if( classLoader != null )", "-            final File file = (File)files.get(i );", "-            checkFile( file );", "-            getOptionalPackagesFor( file, allFiles );", "+            return classLoader;", "-        final URL[] urls = buildClasspath( allFiles );", "-        return new URLClassLoader( urls, m_commonClassLoader );", "+        // Check for cyclic dependency", "+        if( pending.contains( jarFile ) )", "+        {", "+            final String message = REZ.getString( \"dependency-cycle.error\", jarFile );", "+            throw new Exception( message );", "+        }", "+        pending.add( jarFile );", "+", "+        // Build the classloaders for the extensions required by this optional", "+        // package", "+        final ClassLoader[] parentClassLoaders =", "+            buildParentClassLoaders( new OptionalPackage[] { pkg }, pending );", "+", "+        // Create and cache the classloader", "+        final URL[] urls = { jarFile.toURL() };", "+        classLoader = new MultiParentURLClassLoader( urls, parentClassLoaders );", "+        m_classLoaders.put( jarFile, classLoader );", "+        pending.remove( jarFile );", "+        return classLoader;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b130f5e861a7a8a90570556519eefae1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/classloader/DefaultClassLoaderManager.java", "commitBeforeChange": "274da3301287be067b66a5778b27bfa98ef0a662", "commitAfterChange": "b91e4a3c1d8310dea42c2c353ab016d9c5425109", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public ClassLoader createClassLoader( final File[] files ) throws ClassLoaderException", "signatureAfterChange": "     public ClassLoader createClassLoader( final File[] files ) throws ClassLoaderException", "diff": ["-            // Build a list of canonical file names", "-            final ArrayList canonFiles = new ArrayList( files.length );", "-            for( int i = 0; i < files.length; i++ )", "+            if( files == null || files.length == 0 )", "-                canonFiles.add( files[ i ].getCanonicalFile() );", "+                return m_commonClassLoader;", "-            // Locate cached classloader, creating it if necessary", "-            ClassLoader classLoader = (ClassLoader)m_fileDeployers.get( canonFiles );", "-            if( classLoader == null )", "+            // Build a list of optional packages for the files", "+            final OptionalPackage[] packages = new OptionalPackage[ files.length ];", "+            for( int i = 0; i < files.length; i++ )", "-                classLoader = buildClassLoader( canonFiles );", "-                m_fileDeployers.put( canonFiles, classLoader );", "+                final File canonFile = files[ i ].getCanonicalFile();", "+                checkFile( canonFile );", "+                packages[ i ] = toOptionalPackage( canonFile );", "-            return classLoader;", "+", "+            // Build the classloaders for the required extensions", "+            final ClassLoader[] parentClassLoaders = buildParentClassLoaders( packages, new HashSet() );", "+", "+            // Build the classloader", "+            final URL[] urls = buildClasspath( files );", "+            return new MultiParentURLClassLoader( urls, parentClassLoaders );", "-            final String message = REZ.getString( \"create-classloader-for-file.error\", fileNames );", "+            final String message = REZ.getString( \"create-classloader-for-files.error\", fileNames );"]}]}
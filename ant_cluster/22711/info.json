{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "88e20d2609e9388094d2baf5e870b052", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e7ed0bd08e14eaf4bdc6f35725049a8", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Tar.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     protected boolean check(ResourceCollection rc)", "signatureAfterChange": "     protected boolean check(final ResourceCollection rc)", "diff": ["-    protected boolean check(ResourceCollection rc) {", "+    protected boolean check(final ResourceCollection rc) {", "-            FileSet fs = (FileSet) rc;", "+            final FileSet fs = (FileSet) rc;", "-            HashSet basedirs = new HashSet();", "-            HashMap basedirToFilesMap = new HashMap();", "-            for (Resource res : rc) {", "-                FileResource r = ResourceUtils", "+            final Set<File> basedirs = new HashSet<File>();", "+            final Map<File, List<String>> basedirToFilesMap = new HashMap<File, List<String>>();", "+            for (final Resource res : rc) {", "+                final FileResource r = ResourceUtils", "-                Vector files = (Vector) basedirToFilesMap.get(base);", "+                List<String> files = basedirToFilesMap.get(base);", "-                    files = new Vector();", "+                    files = new Vector<String>();", "-            Iterator iter = basedirs.iterator();", "-            while (iter.hasNext()) {", "-                File base = (File) iter.next();", "-                Vector f = (Vector) basedirToFilesMap.get(base);", "-                String[] files = (String[]) f.toArray(new String[f.size()]);", "-                upToDate &=", "-                    check(base == Copy.NULL_FILE_PLACEHOLDER ? null : base,", "-                          files);", "+            for(final File base : basedirs) {", "+            \tfinal File tmpBase = base == Copy.NULL_FILE_PLACEHOLDER ? null : base;", "+                final List<String> files = basedirToFilesMap.get(base);", "+\t\t\t\tcheck(tmpBase, files);", "-            Iterator<Resource> iter = rc.iterator();", "+            final Iterator<Resource> iter = rc.iterator();", "-                Resource r = iter.next();", "+                final Resource r = iter.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7709675ba1223737d413daffc25c5fcd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "0c132498a8026db624c2fcf7026538c52e47b312", "commitAfterChange": "4004834c04e0eec8f0f698435b0c5983751fb593", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "     private File findFileCaseInsensitive(File base, Vector pathElements)", "signatureAfterChange": "     private File findFileCaseInsensitive(File base, Vector pathElements)", "diff": ["-        } else {", "-            if (!base.isDirectory()) {", "-                return null;", "+        }", "+        if (!base.isDirectory()) {", "+            return null;", "+        }", "+        String[] files = list(base);", "+        if (files == null) {", "+            throw new BuildException(\"IO error scanning directory \"", "+                                     + base.getAbsolutePath());", "+        }", "+        String current = (String) pathElements.remove(0);", "+        for (int i = 0; i < files.length; i++) {", "+            if (files[i].equals(current)) {", "+                return findFileCaseInsensitive(", "+                    new File(base, files[i]), pathElements);", "-            String[] files = list(base);", "-            if (files == null) {", "-                throw new BuildException(\"IO error scanning directory \"", "-                                         + base.getAbsolutePath());", "-            }", "-            String current = (String) pathElements.remove(0);", "-            for (int i = 0; i < files.length; i++) {", "-                if (files[i].equals(current)) {", "-                    base = new File(base, files[i]);", "-                    return findFileCaseInsensitive(base, pathElements);", "-                }", "-            }", "-            for (int i = 0; i < files.length; i++) {", "-                if (files[i].equalsIgnoreCase(current)) {", "-                    base = new File(base, files[i]);", "-                    return findFileCaseInsensitive(base, pathElements);", "-                }", "+        }", "+        for (int i = 0; i < files.length; i++) {", "+            if (files[i].equalsIgnoreCase(current)) {", "+                return findFileCaseInsensitive(", "+                    new File(base, files[i]), pathElements);"]}]}
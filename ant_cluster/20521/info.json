{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4b3f87734a92d298aa4634c7136a01b6", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52988142fc118ebb4cbee0a2aa65d42e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "2c4faa154f069f3f69d6c3c95629409a7b8b0cc4", "commitAfterChange": "8b58203e3120ecbeb7c53ce127fb41316f7eea92", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     private void checkIncludePatterns()", "signatureAfterChange": "     private void checkIncludePatterns()", "diff": ["+", "-        int wildcardPatternIndex = 0;", "-        for (int i = 0; i < includes.length; i++) {", "-            boolean wildcards = SelectorUtils.hasWildcards(includes[i]);", "-            if (FileUtils.isAbsolutePath(includes[i])) {", "-                //skip abs. paths not under basedir, if set:", "-                if (basedir != null", "-                    && !SelectorUtils.matchPatternStart(includes[i],", "-                    basedir.getAbsolutePath(), isCaseSensitive())) {", "-                    if (wildcards) {", "-                        wildcardPatternIndex++;", "-                    }", "-                    continue;", "-                }", "-            } else if (basedir == null) {", "-                //skip non-abs. paths if basedir == null:", "-                if (wildcards) {", "-                    wildcardPatternIndex++;", "-                }", "-                continue;", "-            }", "-            if (wildcards) {", "-                newroots.put(includePatterns[wildcardPatternIndex++]", "-                             .rtrimWildcardTokens(), includes[i]);", "-            } else {", "-                newroots.put(new TokenizedPath(includes[i]), includes[i]);", "+        for (int i = 0; i < includePatterns.length; i++) {", "+            String pattern = includePatterns[i].toString();", "+            if (!shouldSkipPattern(pattern)) {", "+                newroots.put(includePatterns[i].rtrimWildcardTokens(),", "+                             pattern);", "+        for (Iterator iter = includeNonPatterns.entrySet().iterator();", "+             iter.hasNext(); ) {", "+            Map.Entry entry = (Map.Entry) iter.next();", "+            String pattern = (String) entry.getKey();", "+            if (!shouldSkipPattern(pattern)) {", "+                newroots.put((TokenizedPath) entry.getValue(), pattern);", "+            }", "+        }", "+", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83e80879ffc319bfd126ace2c2d15cc9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/PathConvert.java", "commitBeforeChange": "23b6d1df6030af3535bf7a588935312b240263ae", "commitAfterChange": "b7858a9322909d250bc55efe54d4af9bd335d174", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 19, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        Union savedPath = path;", "+        Resources savedPath = path;", "-            // Get the list of path components in canonical form", "-            String[] elems = path.list();", "-", "-            if (mapper != null) {", "-                FileNameMapper impl = mapper.getImplementation();", "-                List ret = new ArrayList();", "-                for (int i = 0; i < elems.length; ++i) {", "-                    String[] mapped = impl.mapFileName(elems[i]);", "-                    for (int m = 0; mapped != null && m < mapped.length; ++m) {", "-                        ret.add(mapped[m]);", "-                    }", "+            ResourceCollection resources = isPreserveDuplicates() ? (ResourceCollection) path : new Union(path);", "+            List ret = new ArrayList();", "+            FileNameMapper mapperImpl = mapper == null ? new IdentityMapper() : mapper.getImplementation();", "+            for (Iterator iter = resources.iterator(); iter.hasNext(); ) {", "+                String[] mapped = mapperImpl.mapFileName(String.valueOf(iter.next()));", "+                for (int m = 0; mapped != null && m < mapped.length; ++m) {", "+                    ret.add(mapped[m]);", "-                elems = (String[]) ret.toArray(new String[ret.size()]);", "-            for (int i = 0; i < elems.length; i++) {", "-                String elem = mapElement(elems[i]); // Apply the path prefix map", "+            boolean first = true;", "+            for (Iterator mappedIter = ret.iterator(); mappedIter.hasNext(); ) {", "+                String elem = mapElement((String) mappedIter.next()); // Apply the path prefix map", "-                if (i != 0) {", "+                if (first) {", "+                    first = false;", "-                StringTokenizer stDirectory =", "-                    new StringTokenizer(elem, fromDirSep, true);", "+                StringTokenizer stDirectory = new StringTokenizer(elem, fromDirSep, true);", "-                    log(\"Set property \" + property + \" = \" + value,", "-                        Project.MSG_VERBOSE);", "+                    log(\"Set property \" + property + \" = \" + value, Project.MSG_VERBOSE);"]}]}
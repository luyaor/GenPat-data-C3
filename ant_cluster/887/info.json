{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b7713e5fd4d3af7efedf19de7d74a113", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "576a32bce2e37e8c499b0da2821a8f4a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "e2ae69c5288e614c717a8224cc821cefc930e557", "commitAfterChange": "f2bc3fe7c89755a2e53e79aaf636b4177fe8928d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      private IntrospectionHelper(final Class bean)", "signatureAfterChange": "      private IntrospectionHelper(final Class bean)", "diff": ["+        nestedStorers = new Hashtable();", "+        ", "+            } else if (name.startsWith(\"addConfigured\")", "+                       && java.lang.Void.TYPE.equals(returnType)", "+                       && args.length == 1", "+                       && !java.lang.String.class.equals(args[0])", "+                       && !args[0].isArray()", "+                       && !args[0].isPrimitive()) {", "+                 ", "+                try {", "+                    final Constructor c = ", "+                        args[0].getConstructor(new Class[] {});", "+                    String propName = getPropertyName(name, \"addConfigured\");", "+                    nestedTypes.put(propName, args[0]);", "+                    nestedCreators.put(propName, new NestedCreator() {", "+", "+                            public Object create(Object parent) ", "+                                throws InvocationTargetException, IllegalAccessException, InstantiationException {", "+                                ", "+                                Object o = c.newInstance(new Object[] {});", "+                                return o;", "+                            }", "+", "+                        });", "+                    nestedStorers.put(propName, new NestedStorer() {", "+", "+                            public void store(Object parent, Object child) ", "+                                throws InvocationTargetException, IllegalAccessException, InstantiationException {", "+                                ", "+                                m.invoke(parent, new Object[] {child});", "+                            }", "+", "+                        });", "+                } catch (NoSuchMethodException nse) {", "+                }", "-                    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9bb3191b391363a3f4b5c83c8fa6cca", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ResourceUtils.java", "commitBeforeChange": "8741512d8c2e4cad30f0c6e6134d9a793f00d4b7", "commitAfterChange": "9ae5d99ebe852fbb42a386b4c4969bb974e4d107", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public static void copyResource(Resource source, Resource dest,                             FilterSetCollection filters, Vector filterChains,                             boolean overwrite, boolean preserveLastModified, boolean append,                             String inputEncoding, String outputEncoding,                             Project project)         throws IOException", "signatureAfterChange": "     public static void copyResource(Resource source, Resource dest,                             FilterSetCollection filters, Vector filterChains,                             boolean overwrite, boolean preserveLastModified, boolean append,                             String inputEncoding, String outputEncoding,                             Project project)         throws IOException", "diff": ["+        } else if (source.as(FileProvider.class) != null", "+                   && dest.as(FileProvider.class) != null) {", "+            File sourceFile =", "+                ((FileProvider) source.as(FileProvider.class)).getFile();", "+            File destFile =", "+                ((FileProvider) dest.as(FileProvider.class)).getFile();", "+", "+            File parent = destFile.getParentFile();", "+            if (parent != null && !parent.isDirectory()", "+                && !destFile.getParentFile().mkdirs()) {", "+                throw new IOException(\"failed to create the parent directory\"", "+                                      + \" for \" + destFile);", "+            }", "+", "+            FileInputStream in = null;", "+            FileOutputStream out = null;", "+            FileChannel srcChannel = null;", "+            FileChannel destChannel = null;", "+", "+            try {", "+                in = new FileInputStream(sourceFile);", "+                out = new FileOutputStream(destFile);", "+                    ", "+                srcChannel = in.getChannel();", "+                destChannel = out.getChannel();", "+                ", "+                long position = 0;", "+                long count = srcChannel.size();", "+                while (position < count) {", "+                    position +=", "+                        srcChannel.transferTo(position, FileUtils.BUF_SIZE,", "+                                              destChannel);", "+                }", "+            } finally {", "+                FileUtils.close(srcChannel);", "+                FileUtils.close(destChannel);", "+                FileUtils.close(out);", "+                FileUtils.close(in);", "+            }"]}]}
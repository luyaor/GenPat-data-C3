{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e9dca703c811295b3d8d9c33cd1be25", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72c4aa3e2c288b55bcd569f31e9b8ff9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ComponentManager.java", "commitBeforeChange": "26d9c6536e7e605b92a6e4b20eb0cd25e116a689", "commitAfterChange": "f19f07d6e4c72f241057ecfc32d80be21201bbf7", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private Object createComponentFromDef(String componentName,                                           ComponentLibrary componentLibrary,                                           AntLibDefinition libDefinition,                                           BuildElement model)          throws AntException", "signatureAfterChange": "     private Object createComponentFromDef(String componentName,                                           ComponentLibrary componentLibrary,                                           AntLibDefinition libDefinition,                                           BuildElement model)          throws AntException", "diff": ["-        if (model != null) {", "-            location = model.getLocation();", "-        }", "-", "-        boolean isTask", "-             = libDefinition.getDefinitionType() == AntLibrary.TASKDEF;", "-        String localName = libDefinition.getDefinitionName();", "-        String className = libDefinition.getClassName();", "+        String className = null;", "-            ClassLoader componentLoader = componentLibrary.getClassLoader();", "-            Class componentClass", "-                 = Class.forName(className, true, componentLoader);", "+            boolean isTask", "+                 = libDefinition.getDefinitionType() == AntLibrary.TASKDEF;", "+", "+", "+            Object component = null;", "+            if (model != null) {", "+                location = model.getLocation();", "+                for (Iterator i = aspects.iterator(); i.hasNext();) {", "+                    Aspect aspect = (Aspect) i.next();", "+                    component = aspect.preCreateComponent(component, model);", "+                }", "+            }", "+", "-            // create the component using the factory", "-            Object component", "-                 = libFactory.createComponent(componentClass, localName);", "+            ClassLoader componentLoader = null;", "+            if (component == null) {", "+                String localName = libDefinition.getDefinitionName();", "+                className = libDefinition.getClassName();", "+                componentLoader = componentLibrary.getClassLoader();", "+                Class componentClass", "+                    = Class.forName(className, true, componentLoader);", "+                // create the component using the factory", "+                component", "+                    = libFactory.createComponent(componentClass, localName);", "+            } else {", "+                className = component.getClass().getName();", "+                componentLoader = component.getClass().getClassLoader();", "+            }", "-                ExecutionContext context", "-                     = new ExecutionContext(frame, execComponent, model);", "-                context.setClassLoader(componentLoader);", "-                execComponent.init(context, componentName);", "+                // give it a context unless it already has one", "+                if (execComponent.getAntContext() == null) {", "+                    ExecutionContext context", "+                         = new ExecutionContext(frame, execComponent, model);", "+                    context.setClassLoader(componentLoader);", "+                    execComponent.init(context, componentName);", "+                }", "+                for (Iterator i = aspects.iterator(); i.hasNext();) {", "+                    Aspect aspect = (Aspect) i.next();", "+                    component = aspect.postCreateComponent(component, model);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1f00d1b77091a4bbf59df5c8dfd764b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/start/org/apache/ant/start/Main.java", "commitBeforeChange": "284e7904db67222895f80b31bebd6902c9535013", "commitAfterChange": "d9e69473683976b55bf9fdd93da9bb982f4b3ba1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private void start(String[] args)", "signatureAfterChange": "     public void start(String frontend, String[] args)", "diff": ["-    private void start(String[] args) {", "+    public void start(String frontend, String[] args) {", "-            URL libraryURL = getLibraryURL();", "-            config.setLibraryURL(libraryURL);", "+            URL frontendJar = new URL(config.getLibraryURL(), ", "+                \"frontend/\" + frontend + \".jar\");", "+            URL[] frontendJars = new URL[]{frontendJar};", "+            ClassLoader frontEndLoader ", "+                = new URLClassLoader(frontendJars, config.getCoreLoader());", "-            URL antHome = getAntHome();", "-            config.setAntHome(antHome);", "-            if (antHome.getProtocol().equals(\"file\")) {", "-                File systemConfigArea = new File(antHome.getFile(), \"conf\");", "-                config.setSystemConfigArea(systemConfigArea);", "-            }", "-            File userConfigArea", "-                 = new File(System.getProperty(\"user.home\"), \".ant/conf\");", "-            config.setUserConfigArea(userConfigArea);", "-", "-            // set up the class loaders that will be used when running Ant", "-            ClassLoader systemLoader = getClass().getClassLoader();", "-            config.setSystemLoader(systemLoader);", "-            URL toolsJarURL = ClassLocator.getToolsJarURL();", "-            config.setToolsJarURL(toolsJarURL);", "-", "-            URL commonJarLib = new URL(libraryURL, \"common/\");", "-            ClassLoader commonLoader", "-                 = new URLClassLoader(LoaderUtils.getLocationURLs(commonJarLib,", "-                \"common.jar\"), systemLoader);", "-            config.setCommonLoader(commonLoader);", "-", "-            // core needs XML parser for parsing various XML components.", "-            URL[] parserURLs", "-                 = LoaderUtils.getLocationURLs(new URL(libraryURL, \"parser/\"),", "-                \"crimson.jar\");", "-            config.setParserURLs(parserURLs);", "-", "-            URL[] coreURLs", "-                 = LoaderUtils.getLocationURLs(new URL(libraryURL, \"antcore/\"),", "-                \"antcore.jar\");", "-            URL[] combinedURLs = new URL[parserURLs.length + coreURLs.length];", "-            System.arraycopy(coreURLs, 0, combinedURLs, 0, coreURLs.length);", "-            System.arraycopy(parserURLs, 0, combinedURLs, coreURLs.length,", "-                parserURLs.length);", "-            ClassLoader coreLoader = new URLClassLoader(combinedURLs,", "-                commonLoader);", "-            config.setCoreLoader(coreLoader);", "-", "-            URL cliJarLib = new URL(libraryURL, \"cli/\");", "-            ClassLoader frontEndLoader", "-                 = new URLClassLoader(LoaderUtils.getLocationURLs(cliJarLib,", "-                \"cli.jar\"), coreLoader);", "-", "-            //System.out.println(\"System Loader config\");                ", "-            //LoaderUtils.dumpLoader(System.out, systemLoader);", "-            // System.out.println(\"Front End Loader config\");", "-            // LoaderUtils.dumpLoader(System.out, frontEndLoader);", "+            //System.out.println(\"Front End Loader config\");", "+            //LoaderUtils.dumpLoader(System.out, frontEndLoader);", "-"]}]}
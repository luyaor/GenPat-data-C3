{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c617499096a31712b52bb3a28ede3545", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1abd5c80c9087a611903de6d0f0d8dd1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/vss/MSVSSHISTORY.java", "commitBeforeChange": "9f80e894bd1f2b9b3bef66d043db22916c1ee683", "commitAfterChange": "f25d3801bb03267e98e239d6fae047b8d3778eed", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void setStyle(BriefCodediffNofile attr)", "signatureAfterChange": "     public void setStyle(BriefCodediffNofile attr)", "diff": ["-            m_Style = FLAG_BRIEF;", "+            super.setInternalStyle(FLAG_BRIEF);", "-            m_Style = FLAG_CODEDIFF;", "+            super.setInternalStyle(FLAG_CODEDIFF);", "-            m_Style = \"\";", "+            super.setInternalStyle(\"\");", "-            m_Style = FLAG_NO_FILE;", "+            super.setInternalStyle(FLAG_NO_FILE);", "-            throw new BuildException(\"Style \" + attr + \" unknown.\");", "+            throw new BuildException(\"Style \" + attr + \" unknown.\", getLocation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ab18d7e5552e1d504a7abd3f347f515", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Checksum.java", "commitBeforeChange": "ca3829750d8b334b59c3373f48d9689e8a3133ac", "commitAfterChange": "3c7ae9e72597eae42af15839f7d0b3ea87cfdb30", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private boolean generateChecksums() throws BuildException", "signatureAfterChange": "     private boolean generateChecksums() throws BuildException", "diff": ["-                String checksum = \"\";", "+                StringBuffer checksum = new StringBuffer();", "-                        checksum += \"0\";", "+                        checksum.append(\"0\");", "-                    checksum += hexStr;", "+                    checksum.append(hexStr);", "-                        project.setProperty(prop, checksum);", "+                        project.setProperty(prop, checksum.toString());", "-                        fos.write(checksum.getBytes());", "+                        fos.write(checksum.toString().getBytes());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52d663ef191f65c5fa4f3880e9791615", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Replace.java", "commitBeforeChange": "54e31d0926635fbfb674a17cd0792ede5eb9cab2", "commitAfterChange": "cd70defe8455d24e6268c76106f19427aaaf557c", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private void processFile(File src) throws BuildException", "signatureAfterChange": "     private void processFile(File src) throws BuildException", "diff": ["-            // read the entire file into a char[]", "+            // read the entire file into a StringBuffer", "+            //   but then again, it might be smaller than needed on", "+            //   platforms like Windows where length can't be trusted", "-            char[] tmpBuf = new char[fileLengthInBytes];", "+            StringBuffer tmpBuf = new StringBuffer(fileLengthInBytes);", "-                tmpBuf[totread] = (char)readChar;", "+                tmpBuf.append((char)readChar);", "-            String buf = new String(tmpBuf);", "+            String buf = tmpBuf.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ae2a0f964ce762f68fdc7e311183520", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "0f3d4a58ff810fe461345dc833a8dabbff97c9a5", "commitAfterChange": "4ae976759285d73d6994b282ee195fa50e860143", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String inputEncoding, String outputEncoding,                          Project project)         throws IOException", "signatureAfterChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String inputEncoding, String outputEncoding,                          Project project)         throws IOException", "diff": ["+                    TokenFilter.LineTokenizer lineTokenizer = new TokenFilter.LineTokenizer();", "+                    lineTokenizer.setIncludeDelims(true);", "-                    String line = in.readLine();", "+                    String line = lineTokenizer.getToken(in);", "+                            // this should not happen, because the lines are returned with the end of line delimiter", "-                            if (filterSetsAvailable) {", "-                                newline = filters.replaceTokens(line);", "-                            } else {", "-                                newline = line;", "-                            }", "+                            newline = filters.replaceTokens(line);", "-                            out.newLine();", "-                        line = in.readLine();", "+                        line = lineTokenizer.getToken(in);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8006264aa81ed10e18e479801cc6a1ae", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "1967c958ff5363f25742a8b7687a0c9dddcfa38a", "commitAfterChange": "abd749ac59547f30196666617311f6737bf4369d", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void catFiles(File base, String[] files)", "signatureAfterChange": "     private void catFiles(File base, String[] files)", "diff": ["-        final int len = files.length;", "-        String[] input = new String[len];", "-        for (int i = 0; i < len; i++) {", "+        Vector inputFileNames = new Vector();", "+        for (int i = 0; i < files.length; i++) {", "-            input[i] = current.getAbsolutePath();", "+            inputFileNames.addElement(current.getAbsolutePath());", "+        final int len = inputFileNames.size();", "+        String[] input = new String[len];", "+        inputFileNames.copyInto(input);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb245a60a0dae43449c7219c2039c7d9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/i18n/Translate.java", "commitBeforeChange": "edb91a00f3f188521e66c6eb4bdceff72a527ae9", "commitAfterChange": "ff164b0006a8d9f5511dfc39be765d561121eea7", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private void translate() throws BuildException", "signatureAfterChange": "     private void translate() throws BuildException", "diff": ["-                        while ((line = in.readLine()) != null) {", "+                        TokenFilter.LineTokenizer lineTokenizer = new TokenFilter.LineTokenizer();", "+                        lineTokenizer.setIncludeDelims(true);", "+                        line = lineTokenizer.getToken(in);", "+                        while ((line) != null) {", "-                            out.newLine();", "+                            line = lineTokenizer.getToken(in);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf67eabff50e02f7ecfcc6d31f4e3560", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/Frame.java", "commitBeforeChange": "65b70febb53b077317c4d678291f9af547c3d116", "commitAfterChange": "f9d1c1691c7e9d80b793f5178f6113c949fc2441", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 48, "signatureBeforeChange": "     private void determineBaseDir() throws ExecutionException", "signatureAfterChange": "     private void determineBaseDir() throws AntException", "diff": ["-    private void determineBaseDir() throws ExecutionException {", "+    private void determineBaseDir() throws AntException {", "-            baseDir", "-                 = new File(getDataValue(MagicProperties.BASEDIR).toString());", "+            String baseDirString", "+                = getDataValue(MagicProperties.BASEDIR).toString();", "+            setBaseDir(new File(baseDirString));", "-                    baseDir = projectFileParent;", "+                    setBaseDir(projectFileParent);", "-                    baseDir = fileUtils.resolveFile(projectFileParent, base);", "+                    setBaseDir(fileUtils.resolveFile(projectFileParent, base));", "-                baseDir = new File(\".\");", "+                setBaseDir(new File(\".\"));", "-        setDataValue(MagicProperties.BASEDIR, baseDir.getAbsolutePath(), true);"]}]}
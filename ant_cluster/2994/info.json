{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "50cca56daa7e2c6c17842da6da23b373", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "321aadc58cd67f7c76865fb4575f2eec", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/PropertyTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public void testPrefixFailure()", "signatureAfterChange": "      @Test     public void testPrefixFailure()", "diff": ["+    @Test", "-            executeTarget(\"prefix.fail\");", "+            buildRule.executeTarget(\"prefix.fail\");", "+            fail(\"Did not throw exception on invalid use of prefix\");", "-            assertTrue(\"Prefix allowed on non-resource/file load - \", ", "-                     e.getMessage().indexOf(\"Prefix is only valid\") != -1);", "-            return;", "+            assertContains(\"Prefix allowed on non-resource/file load - \", ", "+                     \"Prefix is only valid\", e.getMessage());", "-        fail(\"Did not throw exception on invalid use of prefix\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c07528329b1b23135adc1c578fe947ff", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/PropertyTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public void testCircularReference()", "signatureAfterChange": "      @Test     public void testCircularReference()", "diff": ["+    @Test", "-            executeTarget(\"testCircularReference\");", "+            buildRule.executeTarget(\"testCircularReference\");", "+            fail(\"Did not throw exception on circular exception\");", "-            assertTrue(\"Circular definition not detected - \",", "-                         e.getMessage().indexOf(\"was circularly defined\")", "-                         != -1);", "-            return;", "+            assertContains(\"Circular definition not detected - \",", "+                         \"was circularly defined\", e.getMessage());", "-        fail(\"Did not throw exception on circular exception\");"]}]}
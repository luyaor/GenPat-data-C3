{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6b9bba8dd5155400c603f7e7ec546c04", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f7c11b237f1ef31ce9f34a87a147889", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/vfs/provider/zip/ZipFileSystemProvider.java", "commitBeforeChange": "f382fa32eec7260111db0d67ae9c90dee2d6de0b", "commitAfterChange": "dfa0c6e159416ba22df942ba98e496d99d53d07f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected FileSystem createFileSystem( final ParsedUri uri )         throws FileSystemException", "signatureAfterChange": "     protected FileSystem createFileSystem( final ParsedUri uri )         throws FileSystemException", "diff": ["-        // TODO - temporary hack; need to use a converter", "-        File destFile = null;", "-        try", "-        {", "-            final File cacheDir = new File( \"ant_vfs_cache\" );", "-            cacheDir.mkdirs();", "-            destFile = File.createTempFile( \"cache_\", \"_\" + file.getName().getBaseName(), cacheDir );", "-            destFile.deleteOnExit();", "-        }", "-        catch( IOException e )", "-        {", "-            throw new FileSystemException( \"Could not replicate file\", e );", "-        }", "-        FileObject destFileObj = getContext().resolveFile( null, destFile.getAbsolutePath() );", "-        destFileObj.copy( file );", "+        // Make a local copy of the file", "+        final File zipFile = file.replicateFile( FileConstants.SELECT_SELF );", "-        return new ZipFileSystem( name, destFile );", "+        return new ZipFileSystem( getContext(), name, zipFile );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95c7e0647994da04240dabb0fa4ef8c9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DefaultLogger.java", "commitBeforeChange": "0d2218167bbf0eeb812301c657643de0e8c9c317", "commitAfterChange": "ba8cedaafaa09d6ae126f273fcb6a615c562cf4b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void buildFinished(BuildEvent event)", "signatureAfterChange": "     public void buildFinished(BuildEvent event)", "diff": ["-", "-            while (error instanceof BuildException) { // #43398", "-                Throwable cause = ((BuildException) error).getCause();", "-                if (cause != null && cause.toString().equals(error.getMessage())) {", "-                    error = cause;", "-                } else {", "-                    break;", "-                }", "-            }", "-", "-            if (Project.MSG_VERBOSE <= msgOutputLevel", "-                || !(error instanceof BuildException)) {", "-                message.append(StringUtils.getStackTrace(error));", "-            } else {", "-                message.append(error.toString()).append(lSep);", "-            }", "+            throwableMessage(message, error, Project.MSG_VERBOSE <= msgOutputLevel);"]}]}
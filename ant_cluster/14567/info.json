{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7721a20778d04fcc323052e49ae03878", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39bed9ca2b3205eab7bd5bb7ab36d2ab", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "1b76f1b6dae88a7a158e50222bb19f6f5ca26d70", "commitAfterChange": "13f6d98c9de38c6c53d4d855157c3fad620c3303", "methodNumberBeforeChange": 142, "methodNumberAfterChange": 142, "signatureBeforeChange": "      private void doLinks(Commandline toExecute)", "signatureAfterChange": "      private void doLinks(final Commandline toExecute)", "diff": ["-    private void doLinks(Commandline toExecute) {", "+    private void doLinks(final Commandline toExecute) {", "-            for (Enumeration<LinkArgument> e = links.elements(); e.hasMoreElements();) {", "-                LinkArgument la = e.nextElement();", "+            for (final Enumeration<LinkArgument> e = links.elements(); e.hasMoreElements();) {", "+                final LinkArgument la = e.nextElement();", "-                    File hrefAsFile =", "+                    final File hrefAsFile =", "-                        } catch (MalformedURLException ex) {", "+                        } catch (final MalformedURLException ex) {", "-                        URL base = new URL(\"file://.\");", "+                        final URL base = new URL(\"file://.\");", "-                    } catch (MalformedURLException mue) {", "+                    } catch (final MalformedURLException mue) {", "-                    File packageListLocation = la.getPackagelistLoc();", "+                    final File packageListLocation = la.getPackagelistLoc();", "-                        File packageListFile =", "+                        final File packageListFile =", "-                            } catch (MalformedURLException ex) {", "+                            } catch (final MalformedURLException ex) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "622e8bc88c6066e45f15233ac84d9251", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "43804e4ea2eff0ec4b2a606876ce3adf98dda954", "commitAfterChange": "0fcac6aa36d856294f2f1829c09b943bb4420f5a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 27, "signatureBeforeChange": "     private Class findClass(String name, Path path) throws ClassNotFoundException", "signatureAfterChange": "     private Class findClassInComponents(String name) throws ClassNotFoundException", "diff": ["-    private Class findClass(String name, Path path) throws ClassNotFoundException {", "+    private Class findClassInComponents(String name) throws ClassNotFoundException {", "-            String[] pathElements = path.list();", "-            for (int i = 0; i < pathElements.length && stream == null; ++i) {", "+            for (Enumeration e = pathComponents.elements(); e.hasMoreElements(); ) {", "+                File pathComponent = (File)e.nextElement();", "-                    File pathComponent = project.resolveFile((String)pathElements[i]);", "+                    if (stream != null) {", "+                        return getClassFromStream(stream, name);", "+                    }", "-                catch (BuildException e) {", "-                    // ignore invalid paths ", "+                catch (IOException ioe) {", "+                    log(\"Exception reading component \" + pathComponent , Project.MSG_VERBOSE);", "-        ", "-            if (stream == null) {", "-                throw new ClassNotFoundException();", "-            }", "-                ", "-            return getClassFromStream(stream, name);", "-        }", "-        catch (IOException ioe) {", "-            ioe.printStackTrace();", "+            "]}]}
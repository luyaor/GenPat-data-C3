{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "27f7e55380852d3198bdba41836bca2e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51eb6ceaa64dc75a209addc06a3911c7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/AggregateTransformer.java", "commitBeforeChange": "37e1a669340af86ea163020ac3cec13cbd881b29", "commitAfterChange": "ce8272e144b8168b864015d2dd304410ebb236fc", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 10, "signatureBeforeChange": "     protected XSLTInputSource getXSLStreamSource(String name) throws IOException", "signatureAfterChange": "     protected String getStylesheetSystemId() throws IOException", "diff": ["+     */", "+    protected String getStylesheetSystemId() throws IOException {", "+        String xslname = \"junit-frames.xsl\";", "+        if (NOFRAMES.equals(format)){", "+            xslname = \"junit-noframes.xsl\";", "-     */", "-    protected XSLTInputSource getXSLStreamSource(String name) throws IOException {", "-        InputStream in;", "-        String systemId; //we need this because there are references in xsls", "+        URL url = null;", "-            in = getResourceAsStream(\"xsl/\" + name);", "-            systemId = getClass().getResource(\"xsl/\" + name).toString();", "+            url = getClass().getResource(xslname);", "+            if (url == null){", "+                throw new FileNotFoundException(\"Could not find jar resource \" + xslname);", "+            }", "-            File f = new File(styleDir, name);", "-            in= new FileInputStream(f);", "-            systemId = \"file:///\" + f.getAbsolutePath();", "+            File file = new File(styleDir, xslname);", "+            if (!file.exists()){", "+                throw new FileNotFoundException(\"Could not find file '\" + file + \"'\");", "+            }", "+            url = new URL(\"file\", \"\", file.getAbsolutePath());", "-        XSLTInputSource ss = new XSLTInputSource(in);", "-        ss.setSystemId(systemId);", "-        return ss;", "+        return url.toExternalForm();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c068fe08f4bd58d283fae1832348c684", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/image/Image.java", "commitBeforeChange": "e0c04a3b27b8a6637bb1af562df9b38644ee89b2", "commitAfterChange": "1f2eea24cabc5464b0d95392996cfd997cd8a2bc", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void processFile(File file)", "signatureAfterChange": "     public void processFile(File file)", "diff": ["-            FileOutputStream stream = new FileOutputStream(file);", "+", "+", "-            String file_ext = str_encoding.toLowerCase();", "-                file_ext = \"jpg\";", "-                file_ext = \"tif\";", "+", "+            if (destDir == null){", "+              destDir = srcDir;", "+            }", "+", "+            File new_file = new File(destDir.getAbsolutePath() + File.separator + file.getName());", "+", "+            if ((overwrite && new_file.exists()) && (!new_file.equals(file))) {", "+                new_file.delete();", "+            }", "+            else if (!overwrite && new_file.exists()){", "+              return;", "+            }", "+", "+            FileOutputStream stream = new FileOutputStream(new_file);", "-            String old_name = file.getAbsolutePath();", "-            int t_loc = old_name.lastIndexOf(\".\");", "-            String t_name = old_name.substring(0, t_loc + 1) + file_ext;", "-            File new_file = new File(t_name);", "-            if ((overwrite && new_file.exists()) && (!new_file.equals(file))) {", "-                new_file.delete();", "-            }", "-            file.renameTo(new_file);", "+", "-            log(\"Error processing file:  \" + err);", "+           if (!failonerror) {", "+             log(\"Error processing file:  \" + err);", "+           } else {", "+             throw new BuildException(err);", "+           }", "+", "+        catch (java.lang.RuntimeException rerr) {", "+           if (!failonerror) {", "+             log(\"Error processing file:  \" + rerr);", "+           } else {", "+             throw new BuildException(rerr);", "+           }", "+        }", "+"]}]}
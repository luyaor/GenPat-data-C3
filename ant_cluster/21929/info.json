{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "61e736574be24ca91f9eb313ac1fe9a6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2833f4b11ac8fc97e872da2b2b93ebf4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/VerifyJar.java", "commitBeforeChange": "02c264aee45f29a2936f681099661a31ad206500", "commitAfterChange": "a63a14400d4462d174133f8691a1219c06ad9bba", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void verifyOneJar(File jar)", "signatureAfterChange": "     private void verifyOneJar(File jar)", "diff": ["-        cmd.execute();", "-        String results=outputCache.toString();", "-        if(results.indexOf(VERIFIED_TEXT)<0) {", "-            throw new BuildException(ERROR_NO_VERIFY+jar);", "+        BuildException ex = null;", "+        try {", "+            cmd.execute();", "+        } catch (BuildException e) {", "+            ex = e;", "+        }", "+        String results = outputCache.toString();", "+        //deal with jdk1.4.2 bug:", "+        if (ex != null) {", "+            if (results.indexOf(\"zip file closed\") >= 0) {", "+                log(\"You are running \" + JARSIGNER_COMMAND + \" against a JVM with\"", "+                    + \" a known bug that manifests as an IllegalStateException.\",", "+                    Project.MSG_WARN);", "+            } else {", "+                throw ex;", "+            }", "+        }", "+        if (results.indexOf(VERIFIED_TEXT) < 0) {", "+            throw new BuildException(ERROR_NO_VERIFY + jar);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfa8ccf1549ea854e0782ca2f1ee3af2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Definer.java", "commitBeforeChange": "359855b65f028b1f5939264810934e7d09f65648", "commitAfterChange": "e8a83719cd6439a1ac94f5d495f6889be8b81238", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private AntClassLoader createLoader()", "signatureAfterChange": "     private ClassLoader createLoader()", "diff": ["-    private AntClassLoader createLoader() {", "+    private ClassLoader createLoader() {", "-                if (reusedLoader instanceof AntClassLoader) {", "-                    return (AntClassLoader)reusedLoader;", "-                }", "+                return (ClassLoader)reusedLoader;", "+                //if (reusedLoader instanceof AntClassLoader) {", "+                //    return (AntClassLoader)reusedLoader;", "+                //}", "-        AntClassLoader al = null;", "+        ClassLoader al = null;", "+", "+        if( classpath ==null ) {", "+            // do we need to create another loader ?", "+            al=project.getCoreLoader();", "+            if( al != null ) {", "+                return al;", "+            }", "+        }", "+", "+            project.log( \"Creating new loader for taskdef using \" + classpath +", "+                    \" reverse=\" + reverseLoader, Project.MSG_DEBUG );", "+            // XXX Probably it would be better to reuse getClass().getClassLoader()", "+            // I don't think we need a new ( identical ) loader for each task", "-                                    !reverseLoader);", "+                    !reverseLoader);", "-        al.addSystemPackageRoot(\"org.apache.tools.ant\");", "+        ((AntClassLoader)al).addSystemPackageRoot(\"org.apache.tools.ant\");"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "43a29331ec75e0dffd517a6721a148b2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed666cc7bdc2298fd483d3e67dab7211", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/helper/ProjectHelper2.java", "commitBeforeChange": "7cbce4bf09d398a8f7cb9011b3f859f09274aa82", "commitAfterChange": "c2dba687256b368d6ca095487a17d432dcab22e4", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void parse(Project project, Object source)             throws BuildException", "signatureAfterChange": "      public void parse(Project project, Object source)             throws BuildException", "diff": ["-            throws BuildException", "-    {", "+            throws BuildException {", "-        AntXmlContext context=null;", "-        context=(AntXmlContext)project.getReference(\"ant.parsing.context\");", "+        AntXMLContext context = null;", "+        context = (AntXMLContext) project.getReference(\"ant.parsing.context\");", "-        if (context==null ) {", "-            context=new AntXmlContext(project, this);", "-            project.addReference( \"ant.parsing.context\", context );", "-            project.addReference( \"ant.targets\", context.targetVector );", "+        if (context == null) {", "+            context = new AntXMLContext(project);", "+            project.addReference(\"ant.parsing.context\", context);", "+            project.addReference(\"ant.targets\", context.getTargets());", "-        if (this.getImportStack().size() > 1 ) {", "+        if (this.getImportStack().size() > 1) {", "-            context.ignoreProjectTag=true;", "+            context.setIgnoreProjectTag(true);", "-            parse(project, source,new RootHandler(context));", "+            parse(project, source, new RootHandler(context));", "-            context.implicitTarget.execute();", "+            context.getImplicitTarget().execute();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbd64a3933783ed2e2d1fb308153ff58", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/helper/ProjectHelper2.java", "commitBeforeChange": "eed11060d56db6336cccec940722e8e972e110ed", "commitAfterChange": "f15fb7639cb643c876f15a87659cf4a068689a33", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void parse(Project project, Object source)             throws BuildException", "signatureAfterChange": "      public void parse(Project project, Object source)             throws BuildException", "diff": ["-        AntXmlContext context=new AntXmlContext(project, this);", "-        ", "-        project.addReference( \"ant.parsing.context\", context );", "-        project.addReference( \"ant.targets\", context.targetVector );", "+        this.getImportStack().addElement(source);", "+        AntXmlContext context=null;", "+        context=(AntXmlContext)project.getReference(\"ant.parsing.context\");", "+//        System.out.println(\"Parsing \" + getImportStack().size() + \" \" +", "+//                context+ \" \" + getImportStack() );", "+        if( context==null ) {", "+            context=new AntXmlContext(project, this);", "+            project.addReference( \"ant.parsing.context\", context );", "+            project.addReference( \"ant.targets\", context.targetVector );", "+        }", "-        parse(project, source,new RootHandler(context));", "-", "-        // Execute the top-level target", "-        context.implicitTarget.execute();", "+        if( this.getImportStack().size() > 1 ) {", "+            // we are in an imported file.", "+            context.ignoreProjectTag=true;", "+            parse(project, source, new RootHandler(context));", "+        } else {", "+            // top level file", "+            parse(project, source,new RootHandler(context));", "+            // Execute the top-level target", "+            context.implicitTarget.execute();", "+        }"]}]}
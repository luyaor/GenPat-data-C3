{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aa35ef983aa569f71fc5f62d17f78b62", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d4e0c8a85f49a6b74dbc548e681e560", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/antidote/org/apache/tools/ant/gui/command/NewElementDlg.java", "commitBeforeChange": "53ddc59eccb9ca398bcc74db1fc1577bde5b7d45", "commitAfterChange": "4c0c12c0f70aab990d7aefae3ab82d92d24c7cef", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void setList(String[] list)", "signatureAfterChange": "     public void setLists(String[] coreElements, String[] optionalElements)", "diff": ["-    public void setList(String[] list) {", "-        if (list == null || list.length == 0) {", "+    public void setLists(String[] coreElements, String[] optionalElements) {", "+", "+        // Are there any items to display?", "+        if ( (coreElements == null || coreElements.length == 0) &&", "+             (optionalElements == null || optionalElements.length == 0 ) ) {", "+", "+            // Hide the list", "+            _optionalButton.setVisible(false);", "-            _elementList.setListData(list);", "+            ", "+            // Are there any core elements?", "+            if (coreElements == null) {", "+                _coreElements = new ArrayList();", "+                ", "+                // Display the optional elements", "+                _optionalButton.setSelected(true);", "+                _optionalButton.setVisible(false);", "+            } else {", "+                // Create a sorted list of the core elements", "+                List temp = Collections.fill(null, coreElements);", "+                java.util.Collections.sort(temp);", "+                _coreElements = temp;", "+            }", "+            ", "+            // Are there any optional elements?", "+            if (optionalElements == null) {", "+                _optionalElements = new ArrayList();", "+                ", "+                // Display the core elements", "+                _optionalButton.setSelected(false);", "+                _optionalButton.setVisible(false);", "+            } else {", "+                // Create a sorted list of the optional elements", "+                List temp = Collections.fill(null, optionalElements);", "+                java.util.Collections.sort(temp);", "+                _optionalElements = temp;", "+            }", "+            ", "+            // Are the lists the same?", "+            if (_optionalElements.containsAll(_coreElements) &&", "+                _coreElements.containsAll(_optionalElements) ) {", "+                    ", "+                // Hide the button", "+                _optionalButton.setVisible(false);", "+            }", "+        enableButtons();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "839c803c40c6afaad291521ccc506add", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ExecutionFrame.java", "commitBeforeChange": "e0fef5cf64773a98734998b9736ded96fc8be2c7", "commitAfterChange": "81c17b6164451315e24ae774f1bed668cbca99ce", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 28, "signatureBeforeChange": "     private AntLibFactory getLibFactory(AntLibrary antLibrary)          throws ExecutionException", "signatureAfterChange": "     private void determineBaseDirs() throws ExecutionException", "diff": ["-    private AntLibFactory getLibFactory(AntLibrary antLibrary)", "-         throws ExecutionException {", "-        String libraryId = antLibrary.getLibraryId();", "-        if (libFactories.containsKey(libraryId)) {", "-            return (AntLibFactory)libFactories.get(libraryId);", "+    private void determineBaseDirs() throws ExecutionException {", "+        if (isDataValueSet(BASEDIR_PROP)) {", "+            baseDir = new File(getDataValue(BASEDIR_PROP).toString());", "+        } else {", "+            URL projectURL = project.getSourceURL();", "+            if (projectURL.getProtocol().equals(\"file\")) {", "+                File projectFile = new File(projectURL.getFile());", "+                File projectFileParent = projectFile.getParentFile();", "+                String base = project.getBase();", "+                if (base == null) {", "+                    baseDir = projectFileParent;", "+                } else {", "+                    FileUtils fileUtils = new FileUtils();", "+                    baseDir = fileUtils.resolveFile(projectFileParent, base);", "+                }", "+            } else {", "+                baseDir = new File(\".\");", "+            }", "+            setDataValue(BASEDIR_PROP, baseDir.getPath(), true);", "-        AntLibFactory libFactory = antLibrary.getFactory();", "-        if (libFactory == null) {", "-            libFactory = new StandardLibFactory();", "+", "+        for (Iterator i = getReferencedFrames(); i.hasNext(); ) {", "+            ExecutionFrame refFrame = (ExecutionFrame)i.next();", "+            refFrame.determineBaseDirs();", "-        libFactories.put(libraryId, libFactory);", "-        libFactory.init(new ExecutionContext(this, eventSupport));", "-        return libFactory;"]}]}
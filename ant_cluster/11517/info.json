{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b921c062722da3c3ee447ee239c4b05c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "050d9705da619ac4cfddbcd2c426c6e5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "cdef1ea2fdf8e56abad143b32c8f8593714af19b", "commitAfterChange": "4f46532c945a4fe13670cbbeda0a0c817bcaef9f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        if (inputFile == null && sqlCommand == null) {", "-            throw new BuildException(\"Input file or sql attribute must be set!\");", "+        sqlCommand = sqlCommand.trim();", "+", "+        if (srcFile == null && sqlCommand.length() == 0) {", "+            throw new BuildException(\"Source file or sql statement must be set!\", location);", "-            throw new BuildException(\"Driver attribute must be set!\");", "+            throw new BuildException(\"Driver attribute must be set!\", location);", "-            throw new BuildException(\"User Id attribute must be set!\");", "+            throw new BuildException(\"User Id attribute must be set!\", location);", "-            throw new BuildException(\"Password attribute must be set!\");", "+            throw new BuildException(\"Password attribute must be set!\", location);", "-            throw new BuildException(\"Url attribute must be set!\");", "+            throw new BuildException(\"Url attribute must be set!\", location);", "-        if (inputFile != null && !inputFile.exists()) {", "-            throw new BuildException(\"Input file does not exist!\");", "+        if (srcFile != null && !srcFile.exists()) {", "+            throw new BuildException(\"Source file does not exist!\", location);", "-            throw new BuildException(\"JDBC driver \" + driver + \" could not be loaded\");", "+            throw new BuildException(\"JDBC driver \" + driver + \" could not be loaded\", location);", "-        String line = \"\";", "-        String sql = \"\";", "-        Statement statement = null;", "-", "+            conn.setAutoCommit(autocommit);", "+", "-            if (sqlCommand != null) {", "-                execSQL(statement, sqlCommand);", "+            if (sqlCommand.length() != 0) {", "+                runStatements(new StringReader(sqlCommand));", "-            if (inputFile != null) {", "-                BufferedReader in = new BufferedReader(new FileReader(inputFile));", "-  ", "-                while ((line=in.readLine()) != null){", "-                    if (line.trim().startsWith(\"//\")) continue;", "-                    if (line.trim().startsWith(\"--\")) continue;", "- ", "-                    sql += \" \" + line;", "-                    if (sql.trim().endsWith(\";\")){", "-                        log(\"SQL: \" + sql, Project.MSG_VERBOSE);", "-                        execSQL(statement, sql.substring(0, sql.length()-1));", "-                        sql = \"\";", "-                    }", "-                }", "+            if (srcFile != null) {", "+                runStatements(new FileReader(srcFile));", "+            }", "+", "+            if (!autocommit) {", "+                conn.commit();", "-            conn.commit();", "-            throw new BuildException(e);", "+            if (!autocommit) {", "+                try {", "+                    conn.rollback();", "+                } catch (SQLException ex) {}", "+            }", "+            throw new BuildException(e, location);", "-            log(\"Failed to execute: \" + sql, Project.MSG_ERR);", "-            throw new BuildException(e);", "+            if (!autocommit) {", "+                try {", "+                    conn.rollback();", "+                } catch (SQLException ex) {}", "+            }", "+            throw new BuildException(e, location);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c12581e39aad52aa3bb3eddc5555d7e7", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/metamata/MAuditStreamHandler.java", "commitBeforeChange": "271e0fe6fc223253e2c24c0f0f0c4fc4d9b58410", "commitAfterChange": "8af1905a98b1e04a63ab7473d64a41bfda91f15e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void stop()", "signatureAfterChange": "     public void stop()", "diff": ["+        // make sure to flush err stream", "+        try {", "+            errThread.join();", "+        } catch (InterruptedException e) {", "+        }", "+        try {", "+            errStream.flush();", "+        } catch (IOException e) {", "+        }", "-        // this is the only code that could be needed to be overrided", "+        // this is the only code that could be needed to be overriden", "+        final Date now = new Date();", "+        rootElement.setAttribute(\"snapshot_created\", DateUtils.format(now, DateUtils.ISO8601_DATETIME_PATTERN));", "+        rootElement.setAttribute(\"elapsed_time\", String.valueOf(now.getTime() - program_start.getTime()));", "+        rootElement.setAttribute(\"program_start\", DateUtils.format(now, DateUtils.ISO8601_DATETIME_PATTERN));", "-        while (keys.hasMoreElements()){", "-            String filepath = (String)keys.nextElement();", "-            Vector v = (Vector)auditedFiles.get(filepath);", "-            String fullclassname = (String)filemapping.get(filepath);", "+        while (keys.hasMoreElements()) {", "+            String filepath = (String) keys.nextElement();", "+            Vector v = (Vector) auditedFiles.get(filepath);", "+            String fullclassname = (String) filemapping.get(filepath);", "-            clazz.setAttribute(\"violations\", String.valueOf(v.size()));", "-            errors += v.size();", "-            for (int i = 0; i < v.size(); i++){", "-                MAudit.Violation violation = (MAudit.Violation)v.elementAt(i);", "+            final int violationCount = v.size();", "+            clazz.setAttribute(\"violations\", String.valueOf(violationCount));", "+            errors += violationCount;", "+            for (int i = 0; i < violationCount; i++) {", "+                MAudit.Violation violation = (MAudit.Violation) v.elementAt(i);", "-                error.setAttribute(\"line\", String.valueOf(violation.line));", "+                error.setAttribute(\"line\", violation.line);", "-        if (xmlOut != null) {", "-            Writer wri = null;", "-            try {", "-                wri = new OutputStreamWriter(xmlOut, \"UTF-8\");", "-                wri.write(\"<?xml version=\\\"1.0\\\"?>\\n\");", "-                (new DOMElementWriter()).write(rootElement, wri, 0, \"  \");", "-                wri.flush();", "-            } catch(IOException exc) {", "-                task.log(\"Unable to write log file\", Project.MSG_ERR);", "-            } finally {", "-                if (xmlOut != System.out && xmlOut != System.err) {", "-                    if (wri != null) {", "-                        try {", "-                            wri.close();", "-                        } catch (IOException e) {}", "-                    }", "+        Writer wri = null;", "+        try {", "+            wri = new OutputStreamWriter(xmlOut, \"UTF-8\");", "+            wri.write(\"<?xml version=\\\"1.0\\\"?>\\n\");", "+            (new DOMElementWriter()).write(rootElement, wri, 0, \"  \");", "+            wri.flush();", "+        } catch (IOException exc) {", "+            task.log(\"Unable to write log file\", Project.MSG_ERR);", "+        } finally {", "+            if (wri != null) {", "+                try {", "+                    wri.close();", "+                } catch (IOException e) {", "-"]}]}
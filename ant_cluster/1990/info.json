{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5870da93fcc423d5393340d831a654ac", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "126b0478650bbb95092700f61eeb9eba", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "10c41029aeaba31241f1a85f9b02591b357e20b6", "commitAfterChange": "818cb969adef1df0f5918ba62f80f62502d5e53e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void run()", "signatureAfterChange": "      public void run()", "diff": ["-        long start = System.currentTimeMillis();", "-", "-        if (retCode != 0) { // had an exception in the constructor", "-            return;", "+        res = new TestResult();", "+        res.addListener(this);", "+        for (int i=0; i < formatters.size(); i++) {", "+            res.addListener((TestListener)formatters.elementAt(i));", "+        long start = System.currentTimeMillis();", "+", "-        suite.run(res);", "-        junitTest.setRunTime(System.currentTimeMillis()-start);", "-        junitTest.setCounts(res.runCount(), res.failureCount(),", "-                            res.errorCount());", "+        if (exception != null) { // had an exception in the constructor", "+            for (int i=0; i < formatters.size(); i++) {", "+                ((TestListener)formatters.elementAt(i)).addError(null, ", "+                                                                 exception);", "+            }", "+            junitTest.setCounts(1, 0, 1);", "+            junitTest.setRunTime(0);", "+        } else {", "+            suite.run(res);", "+            junitTest.setCounts(res.runCount(), res.failureCount(), ", "+                                res.errorCount());", "+            junitTest.setRunTime(System.currentTimeMillis() - start);", "+        }", "-        if (res.errorCount() != 0) {", "-            retCode = 2;", "+        if (retCode != SUCCESS || res.errorCount() != 0) {", "+            retCode = ERRORS;", "-            retCode = 1;", "+            retCode = FAILURES;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "390bf73fccb0c34e837f7ac974062ebb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/metamata/MAudit.java", "commitBeforeChange": "271e0fe6fc223253e2c24c0f0f0c4fc4d9b58410", "commitAfterChange": "8af1905a98b1e04a63ab7473d64a41bfda91f15e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 12, "signatureBeforeChange": "      protected Vector getOptions()", "signatureAfterChange": "      protected Vector getOptions()", "diff": ["-    protected Vector getOptions(){", "+    protected Vector getOptions() {", "+        // add the source path automatically from the fileset.", "+        // to avoid redundancy...", "+        for (int i = 0; i < fileSets.size(); i++) {", "+            FileSet fs = (FileSet) fileSets.elementAt(i);", "+            Path path = createSourcepath();", "+            File dir = fs.getDir(getProject());", "+            path.setLocation(dir);", "+        }", "+", "-        if (sourcePath != null){", "+        if (sourcePath != null) {", "-        }        ", "-        ", "+        }", "+", "-        if (classPath != null){", "+        if (classPath != null) {", "-//      options.addElement(\"-quiet\");", "-        if (fix){", "+        if (quiet) {", "+            options.addElement(\"-quiet\");", "+        }", "+        if (fullsemanticize) {", "+            options.addElement(\"-full-semanticize\");", "+        }", "+        if (verbose) {", "+            options.addElement(\"-verbose\");", "+        }", "+        if (offsets) {", "+            options.addElement(\"-offsets\");", "+        }", "+        if (exit) {", "+            options.addElement(\"-exit\");", "+        }", "+        if (fix) {", "-        if (list){", "+        if (list) {", "-        if (sourcePath != null){", "+        if (sourcePath != null) {", "-        ", "-        if (unused){", "+        addAllVector(options, includedFiles.keys());", "+        if (unused) {", "-        addAllVector(options, includedFiles.keys());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44e9fb99c66c3401068a331e8f41c3ae", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "888d09c10709a969536ebc92d89e6af26f1c9d69", "commitAfterChange": "4461e98f844764730b62743e3ab9be0eed6a2cc3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      private static void configureTargets(Project project, Element root)         throws BuildException", "signatureAfterChange": "      private static void configureProject(Project project, Element root)         throws BuildException", "diff": ["-    private static void configureTargets(Project project, Element root)", "+    private static void configureProject(Project project, Element root)", "+        // configure taskdefs", "+        NodeList list = root.getElementsByTagName(\"taskdef\");", "+        for (int i = 0; i < list.getLength(); i++) {", "+            Taskdef taskdef = new Taskdef();", "+            configure(project, taskdef, (Element)list.item(i));", "+            taskdef.setProject(project);", "+            taskdef.init();", "+        }", "+", "+        // configure properties", "+        list = root.getElementsByTagName(\"property\");", "+        for (int i = 0; i < list.getLength(); i++) {", "+            Property property = new Property();", "+            configure(project, property, (Element)list.item(i));", "+            property.setProject(project);", "+            property.init();", "+        }", "+", "-        NodeList list = root.getElementsByTagName(\"target\");", "+        list = root.getElementsByTagName(\"target\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f3892a0e4dbf16f42c31711619883b9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "d3122c568192c3da62eb74174d96674a679999a8", "commitAfterChange": "655ad8f525f6d55fe32cbecdd3ef437b0f5d5fa5", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "         private File createCommandFile(String[] cmd) throws IOException", "signatureAfterChange": "         private File createCommandFile(String[] cmd, String[] env)             throws IOException", "diff": ["-        private File createCommandFile(String[] cmd) throws IOException {", "+        private File createCommandFile(String[] cmd, String[] env)", "+            throws IOException {", "-                StringBuffer dclCmd = new StringBuffer(\"$\");", "-                for (int i = 0; i < cmd.length; i++) {", "-                    dclCmd.append(' ').append(cmd[i]);", "+", "+                // add the environment as logicals to the DCL script", "+                if (env != null) {", "+                    int eqIndex;", "+                    for (int i = 1; i < env.length ; i++) {", "+                        eqIndex = env[i].indexOf('=');", "+                        if (eqIndex != -1) {", "+                            out.print(\"$ DEFINE/NOLOG \");", "+                            out.print(env[i].substring(0, eqIndex));", "+                            out.print(\" \\\"\");", "+                            out.print(env[i].substring(eqIndex + 1));", "+                            out.println('\\\"');", "+                        }", "+                    }", "-                out.println(dclCmd.toString());", "+", "+                out.print(\"$ \" + cmd[0]);", "+                for (int i = 1; i < cmd.length ; i++) {", "+                    out.println(\" -\");", "+                    out.print(cmd[i]);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b58d2e0f56301f50741d68c2000718b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "cc911f59921cda9a230eebd58c4ab6d9e292d5e9", "commitAfterChange": "693d7c89066c2913bd08ca5cefb022de793f118e", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        if (srcFile == null && sqlCommand.length() == 0) { ", "+        if (srcFile == null && sqlCommand.length()==0 && filesets.isEmpty()) { ", "-                throw new BuildException(\"Source file, transactions or sql statement must be set!\", location);", "+                throw new BuildException(\"Source file or fileset, transactions or sql statement must be set!\", location);", "-        } else {", "+        } else { ", "+            // deal with the filesets", "+            for (int i=0; i<filesets.size(); i++) {", "+                FileSet fs = (FileSet) filesets.elementAt(i);", "+                DirectoryScanner ds = fs.getDirectoryScanner(project);", "+                File srcDir = fs.getDir(project);", "+", "+                String[] srcFiles = ds.getIncludedFiles();", "+", "+                // Make a transaction for each file", "+                for ( int j=0 ; j<srcFiles.length ; j++ ) {", "+                    Transaction t = createTransaction();", "+                    t.setSrc(new File(srcDir, srcFiles[j]));", "+                }", "+            }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65ff8fc5e98bdc97621cc2f192237b73", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Delete.java", "commitBeforeChange": "5f7fbe8b732d8ad675be2e58acf2fde106b484b5", "commitAfterChange": "ebac9845309a1af1c1814faa758cdd310f9f3bd9", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 44, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+                DirectoryScanner ds = fs.getDirectoryScanner();", "-                    filesetDirs.add(new ReverseDirs(getProject(), fsDir, fs", "-                            .getDirectoryScanner().getIncludedDirectories()));", "+                    filesetDirs.add(new ReverseDirs(getProject(), fsDir,", "+                                                    ds", "+                                                    .getIncludedDirectories()));", "+                }", "+", "+                if (removeNotFollowedSymlinks) {", "+                    String[] n = ds.getNotFollowedSymlinks();", "+                    if (n.length > 0) {", "+                        String[] links = new String[n.length];", "+                        System.arraycopy(n, 0, links, 0, n.length);", "+                        Arrays.sort(links, ReverseDirs.REVERSE);", "+                        for (int l = 0; l < links.length; l++) {", "+                            try {", "+                                SYMLINK_UTILS", "+                                    .deleteSymbolicLink(new File(links[l]),", "+                                                        this);", "+                            } catch (java.io.IOException ex) {", "+                                handle(ex);", "+                            }", "+                        }", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90631ad771af35bb3e7172cd64bfcd8c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "e13d922745cda9a00544c2010e21cafce218e709", "commitAfterChange": "fd507cf2d23a705cb42d8870b483ee3f65d0bc8f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "     protected void scan(File fromDir, File toDir, String[] files)", "signatureAfterChange": "     protected void scan(File fromDir, File toDir, String[] files, String[] dirs)", "diff": ["-    protected void scan(File fromDir, File toDir, String[] files) {", "+    protected void scan(File fromDir, File toDir, String[] files, String[] dirs) {", "+", "+        if (includeEmpty) {", "+            for (int i = 0; i < dirs.length; i++) {", "+                String dname = dirs[i];", "+                File sd = new File(fromDir, dname);", "+                File dd;", "+                if (flatten) {", "+                    dd = new File(toDir, new File(dname).getName());", "+                } else {", "+                    dd = new File(toDir, dname);", "+                }", "+                if (forceOverwrite || (sd.lastModified() > dd.lastModified())) {", "+                    dirCopyMap.put(sd.getAbsolutePath(), dd.getAbsolutePath());", "+                }", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "955e9181b10fc786b9c7815d2bbcdb6d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Javadoc.java", "commitBeforeChange": "6769b415ef3830ffbd4058a7094f6a4765fd91d4", "commitAfterChange": "a9a32155c55b9fafe17c094167a195e276117e36", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": "     private void evaluatePackages(Commandline toExecute, Path sourcePath,                                    Vector packages, Vector excludePackages)", "signatureAfterChange": "     private void evaluatePackages(Commandline toExecute, Path sourcePath,                                    Vector packages, Vector excludePackages)", "diff": ["-        log(\"Packages = \" + packages, Project.MSG_VERBOSE);", "-\t\tlog(\"Exclude Packages = \" + excludePackages, Project.MSG_VERBOSE);", "+        StringBuffer msg = new StringBuffer(\"Packages = \");", "+        for (int i=0; i<packages.size(); i++) {", "+            if (i > 0) {", "+                msg.append(\",\");", "+            }", "+            msg.append(packages.elementAt(i));", "+        }", "+        log(msg.toString(), Project.MSG_VERBOSE);", "+", "+        msg.setLength(0);", "+        msg.append(\"Exclude Packages = \");", "+        for (int i=0; i<excludePackages.size(); i++) {", "+            if (i > 0) {", "+                msg.append(\",\");", "+            }", "+            msg.append(excludePackages.elementAt(i));", "+        }", "+        log(msg.toString(), Project.MSG_VERBOSE);", "-\t\te = excludePackages.elements();", "-\t\twhile (e.hasMoreElements()) {", "-\t\t\tString pkg = (String)e.nextElement();", "-\t\t\tpkg = pkg.replace('.','/');", "-\t\t\tif (pkg.endsWith(\"*\")) {", "-\t\t\t\tpkg += \"*\";", "-\t\t\t}", "-", "-\t\t\tfs.createExclude().setName(pkg);", "-\t\t}", "-", "+        e = excludePackages.elements();", "+        while (e.hasMoreElements()) {", "+            String pkg = (String)e.nextElement();", "+            pkg = pkg.replace('.','/');", "+            if (pkg.endsWith(\"*\")) {", "+                pkg += \"*\";", "+            }", "+            ", "+            fs.createExclude().setName(pkg);", "+        }", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9588aad67d0f9b27a26863648a6b8770", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/framework/AbstractTypeDef.java", "commitBeforeChange": "d957fa1151163d513197a174a098e2aac8745b1e", "commitAfterChange": "87ceed8170a6359ac2c4714b6ad22c55d2b1f571", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void setLib( final File lib )", "signatureAfterChange": "     public void configure( Configuration configuration ) throws ConfigurationException", "diff": ["-    public void setLib( final File lib )", "+     */", "+    public void configure( Configuration configuration ) throws ConfigurationException", "-        //In the future this would be replaced by ClassPath sub-element", "-        m_lib = lib;", "+        m_typeDef = createTypeDefinition();", "+", "+        // Configure attributes", "+        final String[] attrs = configuration.getAttributeNames();", "+        for( int i = 0; i < attrs.length; i++ )", "+        {", "+            final String name = attrs[ i ];", "+            final String value = configuration.getAttribute( name );", "+            if( name.equalsIgnoreCase( \"lib\" ) )", "+            {", "+                m_lib = (File)convert( File.class, value );", "+            }", "+            else", "+            {", "+                configure( m_typeDef, name, value );", "+            }", "+        }", "+", "+        // Configure nested elements", "+        final Configuration[] elements = configuration.getChildren();", "+        for( int i = 0; i < elements.length; i++ )", "+        {", "+            Configuration element = elements[ i ];", "+            configure( m_typeDef, element );", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b674365c688f1eaa1b7942643aaf6bd5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/TelnetTask.java", "commitBeforeChange": "e64c186c50b3ef61f4fce8cbc9a9e9c169c84e19", "commitAfterChange": "d4be9171f872a91dda1f3fd2dcf9249f6ee2fa88", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 19, "signatureBeforeChange": "       public void waitForString(String s)", "signatureAfterChange": "       public void waitForString(String s, Integer timeout)", "diff": ["+       */", "+      public void waitForString(String s, Integer timeout)", "-          while (sb.toString().indexOf(s) == -1)", "+          if (timeout == null || timeout.intValue() == 0)", "-              while (is.available() == 0);", "-              int iC = is.read();", "-              Character c = new Character((char)iC);", "-              sb.append(c);", "+              while (sb.toString().indexOf(s) == -1)", "+                  {", "+                      sb.append((char) is.read());", "+                  }", "+          }", "+          else", "+          {", "+              Calendar endTime = Calendar.getInstance(); ", "+              endTime.add(Calendar.SECOND,timeout.intValue());", "+              while ( sb.toString().indexOf(s) == -1)", "+              {", "+                  while (Calendar.getInstance().before(endTime) &&", "+                         is.available() == 0) {", "+                      Thread.sleep(250);", "+                  }", "+                  if (is.available() == 0)", "+                      throw new BuildException(\"Response Timed-Out\", getLocation());", "+                  sb.append((char) is.read());", "+              }", "+        } catch (BuildException be)", "+        { ", "+            throw be;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee28d419542f689988472853a6bb185d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/AntStructure.java", "commitBeforeChange": "4d082edbbdb380b7d718db1bf4322dcdc3f49281", "commitAfterChange": "f40249fb493adae86ba37ff25192164188f6eb32", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "         public void printElementDecl(PrintWriter out, Project p,                                      String name, Class element)", "signatureAfterChange": "         public void printElementDecl(PrintWriter out, Project p,                                      String name, Class element)", "diff": ["+                } else if (type.getSuperclass() != null && type.getSuperclass().getName().equals(\"java.lang.Enum\")) {", "+                    try {", "+                        Object[] values = (Object[]) type.getMethod(\"values\", null).invoke(null, null);", "+                        if (values.length == 0) {", "+                            sb.append(\"CDATA \");", "+                        } else {", "+                            sb.append('(');", "+                            for (int i = 0; i < values.length; i++) {", "+                                if (i != 0) {", "+                                    sb.append(\" | \");", "+                                }", "+                                sb.append(type.getMethod(\"name\", null).invoke(values[i], null));", "+                            }", "+                            sb.append(\") \");", "+                        }", "+                    } catch (Exception x) {", "+                        sb.append(\"CDATA \");", "+                    }"]}]}
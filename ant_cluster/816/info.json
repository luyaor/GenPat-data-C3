{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "643bd80c51aaa0dd338d3697d8aadf29", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "786f23f2dd1b28bd9863dc20c55a16cf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/filterreaders/src/main/org/apache/tools/ant/filters/StripLineBreaks.java", "commitBeforeChange": "7265fdb8a846802089831647891b0218858fdc7b", "commitAfterChange": "8aa365e5d7d7f14ac4e0002be30968df77b08b56", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private final String stripLineBreaks(final String source)", "signatureAfterChange": "     private final String stripLineBreaks(final String source)", "diff": ["-        final int len=source.length();", "-        final String userDefinedLineBreaks =", "-            (String) parameters.get(LINE_BREAKS_KEY);", "+        final int len = source.length();", "+        String userDefinedLineBreaks = null;", "+        if (parameters != null) {", "+            for (int i = 0; i < parameters.length; i++) {", "+                if (LINE_BREAKS_KEY.equals(parameters[i].getName())) {", "+                    userDefinedLineBreaks = parameters[i].getValue();", "+                    break;", "+                }", "+            }", "+        }", "-        final StringBuffer dest=new StringBuffer(len);", "+        final StringBuffer dest = new StringBuffer(len);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a48d0828bf6d4523198f992a36589b1c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/CompositeMapper.java", "commitBeforeChange": "d8922d6d2dc045114787e20cb1c61772cdfb66bb", "commitAfterChange": "36786a3b76700f546fe04e69598329fcb19fffc7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public String[] mapFileName(String sourceFileName)", "signatureAfterChange": "     public String[] mapFileName(String sourceFileName)", "diff": ["+        LinkedList sortedResults = new LinkedList();", "-                    results.addAll(Arrays.asList(mapped));", "+                    for (int i = 0; i < mapped.length; i++) {", "+                        if (!results.contains(mapped[i])) {", "+                            results.add(mapped[i]);", "+                            sortedResults.addLast(mapped[i]);", "+                        }", "+                    }", "-            : (String[]) results.toArray(new String[results.size()]);", "+            : (String[]) sortedResults.toArray(new String[results.size()]);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "62cc9ff7ca97059ba06523795526d4bd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2485137d5fb911b27152dd14bd9586b4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/i18n/Translate.java", "commitBeforeChange": "f3939727d9e11188d266beed7e9dfa8e2fd0bc9a", "commitAfterChange": "fb9fb495e7a5565edff6d7074b3e85189fdcdf66", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private void translate() throws BuildException", "signatureAfterChange": "     private void translate() throws BuildException", "diff": ["-\t\t\t\t\t\t// 2003-02-21 new replace algorithm by tbee (tbee@tbee.org)", "-\t\t\t\t\t\t// because it wasn't able to replace something like \"@aaa;@bbb;\"", "+                        // 2003-02-21 new replace algorithm by tbee (tbee@tbee.org)", "+                        // because it wasn't able to replace something like \"@aaa;@bbb;\"", "-\t\t\t\t\t\t// is there a startToken", "-\t\t\t\t\t\t// and there is still stuff following the startToken", "-\t\t\t\t\t\tint startIndex = line.indexOf(startToken);", "-\t\t\t\t\t\twhile ( startIndex >= 0 && (startIndex+startToken.length()) <= line.length() )", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\t// the new value, this needs to be here", "-\t\t\t\t\t\t\t// because it is required to calculate the next position to search from", "-\t\t\t\t\t\t\t// at the end of the loop", "-\t\t\t\t            String replace = null;", "+                        // is there a startToken", "+                        // and there is still stuff following the startToken", "+                        int startIndex = line.indexOf(startToken);", "+                        while (startIndex >= 0 && (startIndex + startToken.length()) <= line.length()) {", "+                            // the new value, this needs to be here", "+                            // because it is required to calculate the next position to search from", "+                            // at the end of the loop", "+                            String replace = null;", "-\t\t\t\t\t\t\t// we found a starttoken, is there an endtoken following?", "-\t\t\t\t\t\t\t// start at token+tokenlength because start and end token may be indentical", "-\t\t\t\t\t\t\tint endIndex = line.indexOf(endToken, startIndex + startToken.length());", "-\t\t\t\t\t\t\tif (endIndex < 0) startIndex += 1;", "-\t\t\t\t\t\t\telse", "-\t\t\t\t\t\t\t{", "-\t\t\t\t\t\t\t\t// grab the token", "-\t\t\t\t\t\t\t\tString token = line.substring(startIndex + startToken.length(), endIndex);", "+                            // we found a starttoken, is there an endtoken following?", "+                            // start at token+tokenlength because start and end token may be indentical", "+                            int endIndex = line.indexOf(endToken, startIndex + startToken.length());", "+                            if (endIndex < 0) {", "+                                startIndex += 1;", "+                            } else {", "+                                // grab the token", "+                                String token = line.substring(startIndex + startToken.length(), endIndex);", "-\t\t\t\t                // If there is a white space or = or :, then", "-\t\t\t\t                // it isn't to be treated as a valid key.", "-\t\t\t\t                boolean validToken = true;", "-\t\t\t\t                for (int k = 0; k < token.length() && validToken; k++)", "-\t\t\t\t                {", "-\t\t\t\t                    char c = token.charAt(k);", "-\t\t\t\t                    if ( c == ':'", "-\t\t\t\t                      || c == '='", "-\t\t\t\t                      || Character.isSpaceChar(c)", "-\t\t\t\t                       )", "-\t\t\t\t                    {", "-\t\t\t\t                    \tvalidToken = false;", "-\t\t\t\t                    }", "-\t\t\t\t                }", "-\t\t\t\t                if (!validToken) startIndex += 1;", "-\t\t\t\t                else", "-\t\t\t\t                {", "-\t\t\t\t                \t// find the replace string", "-\t\t\t\t                \tif (resourceMap.containsKey(token)) replace = (String)resourceMap.get(token);", "-\t\t\t\t                \telse                                replace = token;", "+                                // If there is a white space or = or :, then", "+                                // it isn't to be treated as a valid key.", "+                                boolean validToken = true;", "+                                for (int k = 0; k < token.length() && validToken; k++)", "+                                {", "+                                    char c = token.charAt(k);", "+                                    if (c == ':' || c == '='", "+                                        || Character.isSpaceChar(c)) {", "+                                        validToken = false;", "+                                    }", "+                                }", "+                                if (!validToken) {", "+                                    startIndex += 1;", "+                                } else {", "+                                    // find the replace string", "+                                    if (resourceMap.containsKey(token)) {", "+                                        replace = (String) resourceMap.get(token);", "+                                    } else {", "+                                        replace = token;", "+                                    }", "-\t\t\t\t                    // generate the new line", "-\t\t\t\t                    line = line.substring(0, startIndex)", "-\t\t\t\t                         + replace", "-\t\t\t\t                         + line.substring(endIndex + endToken.length());", "+                                    // generate the new line", "+                                    line = line.substring(0, startIndex)", "+                                         + replace", "+                                         + line.substring(endIndex + endToken.length());", "-\t\t\t\t\t\t\t\t\t// set start position for next search", "-\t\t\t\t\t\t\t\t\tstartIndex += replace.length();", "-\t\t\t\t                }", "-\t\t\t\t\t\t\t}", "+                                    // set start position for next search", "+                                    startIndex += replace.length();", "+                                }", "+                            }", "-\t\t\t\t\t\t\t// find next starttoken", "-\t\t\t\t\t\t\tstartIndex = line.indexOf(startToken, startIndex);", "-\t\t\t\t\t\t}", "+                            // find next starttoken", "+                            startIndex = line.indexOf(startToken, startIndex);", "+                        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fcd49bce0527e34bbad926e6e62498a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/FixCRLF.java", "commitBeforeChange": "af7fb0127af235ba48a1e9ada6f7fc45847e53fa", "commitAfterChange": "a794b2b204995a03c2e3c117ff2c4749710e6840", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-            \" cr=\" + (addcr==1 ? \"add\" : addcr==0 ? \"asis\" : \"remove\") +", "-            \" tab=\" + (addtab==1 ? \"add\" : addtab==0 ? \"asis\" : \"remove\") +", "-            \" eof=\" + (ctrlz==1 ? \"add\" : ctrlz==0 ? \"asis\" : \"remove\") +", "+            \" eol=\" +", "+\t    (eol==ASIS ? \"asis\" : eol==CR ? \"cr\" : eol==LF ? \"lf\" : \"crlf\") +", "+            \" tab=\" + (tabs==TABS ? \"add\" : tabs==ASIS ? \"asis\" : \"remove\") +", "+            \" eof=\" + (ctrlz==ADD ? \"add\" : ctrlz==ASIS ? \"asis\" : \"remove\") +", "-            File srcFile = new File(srcDir, files[i]);", "+\t    processFile(files[i]);", "+        }", "+    }", "-            // read the contents of the file", "-            int count = (int)srcFile.length();", "-            byte indata[] = new byte[count];", "-                FileInputStream inStream = new FileInputStream(srcFile);", "-                inStream.read(indata);", "-                inStream.close();", "-            // count the number of cr, lf,  and tab characters", "-            int cr = 0;", "-            int lf = 0;", "-            int tab = 0;", "-", "-            for (int k=0; k<count; k++) {", "-                byte c = indata[k];", "-                if (c == '\\r') cr++;", "-                if (c == '\\n') lf++;", "-                if (c == '\\t') tab++;", "-            }", "-", "-            // check for trailing eof", "-            boolean eof = ((count>0) && (indata[count-1] == 0x1A));", "-", "-            // log stats (before fixes)", "-            log(srcFile + \": size=\" + count + \" cr=\" + cr +", "-                        \" lf=\" + lf + \" tab=\" + tab + \" eof=\" + eof,", "-                        Project.MSG_VERBOSE);", "-", "-            // determine the output buffer size (slightly pessimisticly)", "-            int outsize = count;", "-            if (addcr  !=  0) outsize-=cr;", "-            if (addcr  == +1) outsize+=lf;", "-            if (addtab == -1) outsize+=tab*(tablength-1);", "-            if (ctrlz  == +1) outsize+=1;", "-", "-            // copy the data", "-            byte outdata[] = new byte[outsize];", "-            int o = 0;    // output offset", "-            int line = o; // beginning of line", "-            int col = 0;  // desired column", "-", "-            for (int k=0; k<count; k++) {", "-                switch (indata[k]) {", "-                    case (byte)' ':", "-                        // advance column", "-                        if (addtab == 0) outdata[o++]=(byte)' ';", "-                        col++;", "-                        break;", "-", "-                    case (byte)'\\t':", "-                        if (addtab == 0) {", "-                            // treat like any other character", "-                            outdata[o++]=(byte)'\\t';", "-                            col++;", "-                        } else {", "-                            // advance column to next tab stop", "-                            col = (col|(tablength-1))+1;", "-                        }", "-                        break;", "-", "-                    case (byte)'\\r':", "-                        if (addcr == 0) {", "-                            // treat like any other character", "-                            outdata[o++]=(byte)'\\r';", "-                            col++;", "-                        }", "-                        break;", "-", "-                    case (byte)'\\n':", "-                        // start a new line (optional CR followed by LF)", "-                        if (addcr == +1) outdata[o++]=(byte)'\\r';", "-                        outdata[o++]=(byte)'\\n';", "-                        line=o;", "-                        col=0;", "-                        break;", "-", "-                    default:", "-                        // add tabs if two or more spaces are required", "-                        if (addtab>0 && o+1<line+col) {", "-                            // determine logical column", "-                            int diff=o-line;", "-", "-                            // add tabs until this column would be passed", "-                            // note: the start of line is adjusted to match", "-                            while ((diff|(tablength-1))<col) {", "-                                outdata[o++]=(byte)'\\t';", "-                                line-=(tablength-1)-(diff&(tablength-1));", "-                                diff=o-line;", "-                            };", "-                        };", "-", "-                        // space out to desired column", "-                        while (o<line+col) outdata[o++]=(byte)' ';", "-", "-                        // append desired character", "-                        outdata[o++]=indata[k];", "-                        col++;", "-            }", "-            // add or remove an eof character as required", "-            if (ctrlz == +1) {", "-                if (outdata[o-1]!=0x1A) outdata[o++]=0x1A;", "-            } else if (ctrlz == -1) {", "-                if (o>2 && outdata[o-1]==0x0A && outdata[o-2]==0x1A) o--;", "-                if (o>1 && outdata[o-1]==0x1A) o--;", "-            }", "-            // output the data", "-            try {", "-                // Determine whether it should be written,", "-                // that is if it is different than the potentially already existing file", "-                boolean write = false;", "-                byte[] existingdata = indata;", "-                File destFile = srcFile;", "-                if (destDir != null) {", "-                    destFile = new File(destDir, files[i]);", "-                    if(destFile.isFile()) {", "-                        int len = (int)destFile.length();", "-                        if(len != o) {", "-                            write = true;", "-                        } else {", "-                            existingdata = new byte[len];", "-                                FileInputStream in = new FileInputStream(destFile);", "-                                in.read(existingdata);", "-                                in.close();", "-                        }", "-                    } else {", "-                        write = true;", "-                    }", "-                }", "-                if(!write) {", "-                    if(existingdata.length != o) {", "-                        write = true;", "-                    } else {", "-                        for(int j = 0; j < o; ++j) {", "-                            if(existingdata[j] != outdata[j]) {", "-                                write = true;", "-                                break;", "-                            }", "-                        }", "-                    }", "-", "-                if(write) {", "-                    log(destFile + \" is being written\", Project.MSG_VERBOSE);", "-                    FileOutputStream outStream = new FileOutputStream(destFile);", "-                    outStream.write(outdata,0,o);", "-                    outStream.close();", "-                } else {", "-                    log(destFile + \" is not written, as the contents are identical\",", "-                        Project.MSG_VERBOSE);", "-                }", "-        } /* end for */"]}]}
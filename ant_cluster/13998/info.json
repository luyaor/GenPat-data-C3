{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3cc6561a4004567532f7abbca4c234eb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54ed4e61bd0810e784ce8a617c4e5122", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/Javah.java", "commitBeforeChange": "5ffacddada00339f7c26549ff306e1d4fa04fc41", "commitAfterChange": "13b07b313fdc7ab2620f71517ab16698be496f24", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private void doClassicCompile() throws BuildException", "signatureAfterChange": "     public String[] getClasses()", "diff": ["+     */", "+    public String[] getClasses() {", "+        ArrayList al = new ArrayList();", "+        if (cls != null) {", "+            StringTokenizer tok = new StringTokenizer(cls, \",\", false);", "+            while (tok.hasMoreTokens()) {", "+                al.add(tok.nextToken().trim());", "+            }", "+        }", "+", "+        Enumeration e = classes.elements();", "+        while (e.hasMoreElements()) {", "+            ClassArgument arg = (ClassArgument) e.nextElement();", "+            al.add(arg.getName());", "+        }", "+        return (String[]) al.toArray(new String[0]);", "+    }", "-", "-    private void doClassicCompile() throws BuildException {", "-        Commandline cmd = setupJavahCommand();", "-", "-        // Use reflection to be able to build on all JDKs", "-        /*", "-        // provide the compiler a different message sink - namely our own", "-        sun.tools.javac.Main compiler =", "-                new sun.tools.javac.Main(new LogOutputStream(this, Project.MSG_WARN), \"javac\");", "-", "-        if (!compiler.compile(cmd.getArguments())) {", "-            throw new BuildException(\"Compile failed\");", "-        }", "-        */", "-", "-", "-        try {", "-            Class javahMainClass = null;", "-            try {", "-                // first search for the \"old\" javah class in 1.4.2 tools.jar", "-                javahMainClass = Class.forName(\"com.sun.tools.javah.oldjavah.Main\");", "-            } catch (ClassNotFoundException cnfe) {", "-                // assume older than 1.4.2 tools.jar", "-                javahMainClass = Class.forName(\"com.sun.tools.javah.Main\");", "-            }", "-", "-            // now search for the constructor that takes in String[] arguments.", "-            Class[] strings = new Class[] {String[].class};", "-            Constructor constructor = javahMainClass.getConstructor(strings);", "-", "-            // construct the javah Main instance", "-            Object javahMain = constructor.newInstance(new Object[] {cmd.getArguments()});", "-", "-            // find the run method", "-            Method runMethod = javahMainClass.getMethod(\"run\", new Class[0]);", "-", "-            runMethod.invoke(javahMain, new Object[0]);", "-        } catch (Exception ex) {", "-            if (ex instanceof BuildException) {", "-                throw (BuildException) ex;", "-            } else {", "-                throw new BuildException(\"Error starting javah: \" + ex, ex, getLocation());", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4fe0652a823478c49b69e8e008c9008", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/antlib/src/main/org/apache/tools/ant/taskdefs/Antlib.java", "commitBeforeChange": "f1548aec2b4a57bfdca206f32178a9e03c39d3a1", "commitAfterChange": "7ed240811799349f5a0932e7a464086e5ce31527", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "         public void startElement(String tag, AttributeList attrs)             throws SAXParseException", "signatureAfterChange": "         public void startElement(String tag, AttributeList attrs)             throws SAXParseException", "diff": ["+\t    level ++;", "+\t\tif (level > 1) {", "+\t\t    throw new SAXParseException(\"Unexpected element: \" + tag,", "+\t\t\t\t\t\tlocator);", "+\t\t}", "-            if (\"task\".equals(tag) || \"type\".equals(tag)) {", "-                String name = null;", "-                String className = null;", "+\t    if (level == 1) {", "+\t\tthrow new SAXParseException(\"Missing antlib root element\",", "+\t\t\t\t\t    locator);", "+\t    }", "-                for (int i = 0, last = attrs.getLength(); i < last; i++) {", "-                    String key = attrs.getName(i);", "-                    String value = attrs.getValue(i);", "+\t    // Must have the two attributes declared", "+\t    parseAttributes(tag, attrs);", "-                    if (key.equals(\"name\")) {", "-                        name = value;", "-                    }", "-                    else if (key.equals(\"class\")) {", "-                        className = value;", "-                    }", "-                    else {", "-                        throw new SAXParseException(\"Unexpected attribute \\\"\"", "-                                 + key + \"\\\"\", locator);", "-                    }", "-                }", "-                if (name == null || className == null) {", "-                    String msg = \"Underspecified \" + tag + \" declaration.\";", "-                    throw new SAXParseException(msg, locator);", "-                }", "+\t    try {", "+\t\tif (\"role\".equals(tag)) {", "+\t\t    if (isRoleInUse(name)) {", "+\t\t\tString msg = \"Cannot override role: \" + name;", "+\t\t\tlog(msg, Project.MSG_WARN);", "+\t\t\treturn;\t\t\t", "+\t\t    }", "+\t\t    // Defining a new role", "+\t\t    symbols.addRole(name, loadClass(className),", "+\t\t\t\t    (adapter == null? ", "+\t\t\t\t     null : loadClass(adapter))); ", "+\t\t    return;", "+\t\t}", "-                try {", "-                    //check for name alias", "-                    String alias = aliasMap.getProperty(name);", "-                    if (alias != null) {", "-                        name = alias;", "-                    }", "-                    //catch an attempted override of an existing name", "-                    if (!override && inUse(name)) {", "-                        String msg = \"Cannot override \" + tag + \": \" + name;", "-                        log(msg, Project.MSG_WARN);", "-                        return;", "-                    }", "-", "-                    //load the named class", "-                    Class cls;", "-                    if(classloader==null) {", "-                        cls=Class.forName(className);", "-                    }", "-                    else {", "-                        cls=classloader.loadClass(className);", "-                    }", "-", "-                    //register it as a task or a datatype", "-                    if (tag.equals(\"task\")) {", "-                        project.addTaskDefinition(name, cls);", "-                    }", "-                    else {", "-                        project.addDataTypeDefinition(name, cls);", "-                    }", "-                }", "-                catch (ClassNotFoundException cnfe) {", "-                    String msg = \"Class \" + className +", "-                            \" cannot be found\";", "-                    throw new SAXParseException(msg, locator, cnfe);", "-                }", "-                catch (NoClassDefFoundError ncdfe) {", "-                    String msg = \"Class \" + className +", "-                            \" cannot be found\";", "-                    throw new SAXParseException(msg, locator);", "-                }", "-            }", "-            else {", "-                throw new SAXParseException(\"Unexpected element \\\"\" +", "-                        tag + \"\\\"\",", "-                        locator);", "-            }", "+\t\t// Defining a new element kind", "+\t\t//check for name alias", "+\t\tString alias = aliasMap.getProperty(name);", "+\t\tif (alias != null) {", "+\t\t    name = alias;", "+\t\t}", "+\t\t//catch an attempted override of an existing name", "+\t\tif (!override && isInUse(tag, name)) {", "+\t\t    String msg = \"Cannot override \" + tag + \": \" + name;", "+\t\t    log(msg, Project.MSG_WARN);", "+\t\t    return;", "+\t\t}", "+\t\tsymbols.add(tag, name, loadClass(className));", "+\t    }", "+\t    catch(BuildException be) {", "+\t\tthrow new SAXParseException(be.getMessage(), locator, be);", "+\t    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5e50fa1d3161677a094183fb4831209a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ea64f4a54c4d5f2c15dbfabf4ebd095", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/ProjectHelper.java", "commitBeforeChange": "7b1b3d16673949d0a108587b653c1a1855def0cb", "commitAfterChange": "7fc0d42636ae70a69d8dc312090c5fe80ae32f0c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public static ProjectHelper getProjectHelper()          throws BuildException", "signatureAfterChange": "     public static ProjectHelper getProjectHelper()          throws BuildException", "diff": ["+        String helperClass = System.getProperty(HELPER_PROPERTY);", "-            String helperClass = System.getProperty(HELPER_PROPERTY);", "-            // It's ok, we'll try next option", "-            ;", "+            System.out.println(\"Unable to load ProjectHelper class \\\"\" ", "+                + helperClass + \" specified in system property \" ", "+                + HELPER_PROPERTY);", "-                ;", "+                System.out.println(\"Unable to load ProjectHelper \" ", "+                    + \"from service \\\"\" + SERVICE_ID); ", "-            // Default", "-            return new ProjectHelperImpl();", "+            try {", "+                // Default", "+                return new ProjectHelperImpl();", "+            } catch (Throwable e) {", "+                String message = \"Unable to load default ProjectHelper due to \"", "+                    + e.getClass().getName() + \": \" + e.getMessage();", "+                throw new BuildException(message, e);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc13fe7d590bb788e3c9878dccfa3fb9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/cvslib/RedirectingStreamHandler.java", "commitBeforeChange": "5b95034bfc65304cba6fcabf40141d731165cf33", "commitAfterChange": "0e481b8463a698cc76b183b097eaa08db32fa6e4", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void run()", "signatureAfterChange": "       public void stop()", "diff": ["+    public void stop() ", "-     */", "-    public void run()", "-    {", "-        // Read the error stream so that it does not block !", "-        // We cannot use a BufferedReader as the ready() method is bugged!", "-        // (see Bug 4329985, which is supposed to be fixed in JDK1.4 :", "-        //http://developer.java.sun.com/developer/bugParade/bugs/4329985.html)", "+        super.stop();", "-            while( m_error.ready() )", "-            {", "-                final int value = m_error.read();", "-                if( -1 != value )", "-                {", "-                    m_errors.append( (char)value );", "-                }", "-            }", "-        }", "-        catch( final IOException ioe )", "+            getErr().close();", "+            getOut().close();", "+        } ", "+        catch( final IOException e )", "-            //ignore --> Means stderror has been shutdown", "+            // plain impossible", "+            throw new BuildException( e );", "-    }"]}]}
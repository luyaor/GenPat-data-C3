{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c6db6ca758deb41d7a7b4eb3194682fe", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63305a4d43cc1a6a31746d133fb1b29e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "e854f481c9a76b41680eb0f605de524556b059ad", "commitAfterChange": "7a3448dcea316f454dd0ba470f8b0825504ae309", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     private AttributeSetter createAttributeSetter( final Method m,                                                          final Class arg )", "signatureAfterChange": "     private AttributeSetter createAttributeSetter( final Method m,                                                    final Class arg )         throws TaskException", "diff": ["-                                                         final Class arg )", "+                                                   final Class arg )", "+        throws TaskException", "-             || java.lang.Character.TYPE.equals( arg ) )", "+            || java.lang.Character.TYPE.equals( arg ) )", "-             || java.lang.Boolean.TYPE.equals( arg ) )", "+            || java.lang.Boolean.TYPE.equals( arg ) )", "-                            new Boolean[]{new Boolean( Project.toBoolean( value ) )} );", "+                                  new Boolean[]{new Boolean( Project.toBoolean( value ) )} );", "-                        throws InvocationTargetException, IllegalAccessException, BuildException", "+                        throws InvocationTargetException, IllegalAccessException, TaskException", "-                            throw new BuildException( ce );", "+                            throw new TaskException( ce.toString(), ce );", "-                        m.invoke( parent, new File[]{p.resolveFile( value )} );", "+                        final File file =", "+                            FileUtils.newFileUtils().resolveFile( p.getBaseDir(), value );", "+                        m.invoke( parent, new File[]{ file } );", "-                        throws InvocationTargetException, IllegalAccessException, BuildException", "+                        throws InvocationTargetException, IllegalAccessException, TaskException", "-                            org.apache.tools.ant.types.EnumeratedAttribute ea = ( org.apache.tools.ant.types.EnumeratedAttribute )arg.newInstance();", "+                            org.apache.tools.ant.types.EnumeratedAttribute ea = (org.apache.tools.ant.types.EnumeratedAttribute)arg.newInstance();", "-                            throw new BuildException( ie );", "+                            throw new TaskException( ie.getMessage(), ie );", "-                            throws InvocationTargetException, IllegalAccessException, BuildException", "+                            throws InvocationTargetException, IllegalAccessException, TaskException", "-                                    ( ( ProjectComponent )attribute ).setProject( p );", "+                                    ( (ProjectComponent)attribute ).setProject( p );", "-                                throw new BuildException( ie );", "+                                throw new TaskException( ie.getMessage(), ie );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91216b08be828aab971244f6fae5a47a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "e854f481c9a76b41680eb0f605de524556b059ad", "commitAfterChange": "7a3448dcea316f454dd0ba470f8b0825504ae309", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     private AttributeSetter createAttributeSetter( final Method m,                                                          final Class arg )", "signatureAfterChange": "     private AttributeSetter createAttributeSetter( final Method m,                                                    final Class arg )         throws TaskException", "diff": ["-                                                         final Class arg )", "+                                                   final Class arg )", "+        throws TaskException", "-             || java.lang.Character.TYPE.equals( arg ) )", "+            || java.lang.Character.TYPE.equals( arg ) )", "-             || java.lang.Boolean.TYPE.equals( arg ) )", "+            || java.lang.Boolean.TYPE.equals( arg ) )", "-                            new Boolean[]{new Boolean( Project.toBoolean( value ) )} );", "+                                  new Boolean[]{new Boolean( Project.toBoolean( value ) )} );", "-                        throws InvocationTargetException, IllegalAccessException, BuildException", "+                        throws InvocationTargetException, IllegalAccessException, TaskException", "-                            throw new BuildException( ce );", "+                            throw new TaskException( ce.toString(), ce );", "-                        m.invoke( parent, new File[]{p.resolveFile( value )} );", "+                        final File file =", "+                            FileUtils.newFileUtils().resolveFile( p.getBaseDir(), value );", "+                        m.invoke( parent, new File[]{ file } );", "-                        throws InvocationTargetException, IllegalAccessException, BuildException", "+                        throws InvocationTargetException, IllegalAccessException, TaskException", "-                            org.apache.tools.ant.types.EnumeratedAttribute ea = ( org.apache.tools.ant.types.EnumeratedAttribute )arg.newInstance();", "+                            org.apache.tools.ant.types.EnumeratedAttribute ea = (org.apache.tools.ant.types.EnumeratedAttribute)arg.newInstance();", "-                            throw new BuildException( ie );", "+                            throw new TaskException( ie.getMessage(), ie );", "-                            throws InvocationTargetException, IllegalAccessException, BuildException", "+                            throws InvocationTargetException, IllegalAccessException, TaskException", "-                                    ( ( ProjectComponent )attribute ).setProject( p );", "+                                    ( (ProjectComponent)attribute ).setProject( p );", "-                                throw new BuildException( ie );", "+                                throw new TaskException( ie.getMessage(), ie );"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9b4504c7a50aebf121f71d7aef930347", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1063c58d5d5fb7ecf3fa24e8015973c4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/selectors/SelectorUtils.java", "commitBeforeChange": "b374c9f8a0a98f6127e1c226da0c68ad159e37e9", "commitAfterChange": "4dbe4dd92b5ec3dad9b357bffba330ad79d3895b", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public static boolean isOutOfDate(Resource src, Resource target,                                       long granularity)", "signatureAfterChange": "     public static boolean isOutOfDate(Resource src, Resource target, long granularity)", "diff": ["-    public static boolean isOutOfDate(Resource src, Resource target,", "-                                      long granularity) {", "+    public static boolean isOutOfDate(Resource src, Resource target, long granularity) {", "-        // Check if source exists - use sourceLastModified for file resources", "-        // as it is quicker than checking exists() again, however string resources", "-        // have a last modified time of 0", "-        boolean sourceExists = (src instanceof FileResource)", "-            ? sourceLastModified != 0L : src.isExists();", "-", "-        if (targetLastModified == 0L) {", "-            return true;", "-        }", "-        return (sourceLastModified - granularity) > targetLastModified;", "+        return src.isExists()", "+                && (sourceLastModified == Resource.UNKNOWN_DATETIME", "+                        || targetLastModified == Resource.UNKNOWN_DATETIME", "+                                || (sourceLastModified - granularity) > targetLastModified);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a7cbe18264e287377c3d1cb3baca3af", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "af007ba13234afc51a113ee612e6abad4642cad1", "commitAfterChange": "81b65c0eaa7fff0b658e28269907a36c3a83fc6b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     protected void addBuildListeners(Project project)", "signatureAfterChange": "     protected void addBuildListeners(Project project)", "diff": ["-            try {", "-                BuildListener listener =", "-                    (BuildListener) Class.forName(className).newInstance();", "-                if (project != null) {", "-                    project.setProjectReference(listener);", "-                }", "-                project.addBuildListener(listener);", "-            } catch (Throwable exc) {", "-                throw new BuildException(\"Unable to instantiate listener \"", "-                    + className, exc);", "+            BuildListener listener =", "+                    (BuildListener) ClasspathUtils.newInstance(className,", "+                            Main.class.getClassLoader(), BuildListener.class);", "+            if (project != null) {", "+                project.setProjectReference(listener);", "+            project.addBuildListener(listener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a288a5311e0a66d1991bc57b5cde9dc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/regexp/RegexpFactory.java", "commitBeforeChange": "1c1b51bd76af7e7cfa6dab8a66b3661acf199bea", "commitAfterChange": "c64fafb60c841a1c7f014340167a84b32c0d19e3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected Regexp createRegexpInstance(String classname)         throws BuildException", "signatureAfterChange": "     protected Regexp createRegexpInstance(String classname) throws BuildException", "diff": ["-    protected Regexp createRegexpInstance(String classname)", "-        throws BuildException {", "-", "-        RegexpMatcher m = createInstance(classname);", "-        if (m instanceof Regexp) {", "-            return (Regexp) m;", "-        } else {", "-            throw new BuildException(classname + \" doesn't implement the Regexp interface\");", "-        }", "+    protected Regexp createRegexpInstance(String classname) throws BuildException {", "+        return (Regexp) ClasspathUtils.newInstance(classname, RegexpFactory.class.getClassLoader(),", "+                Regexp.class);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50bea8283221a6ec4fbb32a875e5617e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/regexp/RegexpMatcherFactory.java", "commitBeforeChange": "af007ba13234afc51a113ee612e6abad4642cad1", "commitAfterChange": "81b65c0eaa7fff0b658e28269907a36c3a83fc6b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected RegexpMatcher createInstance(String className)         throws BuildException", "signatureAfterChange": "     protected RegexpMatcher createInstance(String className)         throws BuildException", "diff": ["-        throws BuildException {", "-        try {", "-            Class implClass = Class.forName(className);", "-            return (RegexpMatcher) implClass.newInstance();", "-        } catch (Throwable t) {", "-            throw new BuildException(t);", "-        }", "+        throws BuildException ", "+    {", "+        return (RegexpMatcher) ClasspathUtils.newInstance(className,", "+                RegexpMatcherFactory.class.getClassLoader(), RegexpMatcher .class);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f38b5d2192a4d1222c03f4e7753938f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/XMLValidateTask.java", "commitBeforeChange": "6650efb105e0cdd4941ffc2c98f2aa8ee6e1dfea", "commitAfterChange": "e42bd46a51dd6347c0961e311bd3717c24d4ea8c", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private void initValidator()", "signatureAfterChange": "     private void initValidator()", "diff": ["-                throw new BuildException(INIT_FAILED_MSG + readerClassName", "+                throw new BuildException(INIT_FAILED_MSG ", "+                                         + reader.getClass().getName()", "-                boolean ok = setFeature(\"http://xml.org/sax/features/validation\", true, true);", "-                if (!ok) {", "-                    throw new BuildException(INIT_FAILED_MSG", "-                                             + readerClassName", "-                                             + \" doesn't provide validation\");", "-                }", "+                setFeature(\"http://xml.org/sax/features/validation\", true);", "-                setFeature(feature.getName(),", "-                           feature.getValue(),", "-                           true);", "+                setFeature(feature.getName(), feature.getValue());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fc6f3c0f38f4b9015fe15369c32453b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/EjbcHelper.java", "commitBeforeChange": "205151486acb02a98f17a73c8367302d53fb56b8", "commitAfterChange": "34b083983d52d1bc7eaf31b312924fdf83a76b07", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "                 private void process() throws Exception", "diff": ["-     */", "-    public void execute() throws BuildException {", "-        try {", "-            String manifest = \"Manifest-Version: 1.0\\n\\n\";", "-            for (int i = 0; i < descriptors.length; ++i) {", "-                String descriptorName = descriptors[i];", "-                File descriptorFile = new File(descriptorDirectory, descriptorName);", "-                ", "-                if (isRegenRequired(descriptorFile)) {", "-                    ejbcTask.log(\"Running ejbc for \" + descriptorFile.getName(), Project.MSG_INFO);", "-                    regenerateSupportClasses(descriptorFile);", "-                }", "-                else {", "-                    ejbcTask.log(descriptorFile.getName() + \" is up to date\", Project.MSG_VERBOSE);", "-                }", "-                manifest += \"Name: \" + descriptorFile.getName() + \"\\nEnterprise-Bean: True\\n\\n\";", "-            }", "-            ", "-            FileWriter fw = new FileWriter(manifestFile);", "-            PrintWriter pw = new PrintWriter(fw);", "-            pw.print(manifest);", "-            fw.flush();", "-            fw.close();", "-        }", "-        catch (IOException e) {", "-            throw new BuildException(e);", "+     */            ", "+    private void process() throws Exception {", "+        String manifest = \"Manifest-Version: 1.0\\n\\n\";", "+        for (int i = 0; i < descriptors.length; ++i) {", "+            String descriptorName = descriptors[i];", "+            File descriptorFile = new File(descriptorDirectory, descriptorName);", "+            ", "+            if (isRegenRequired(descriptorFile)) {", "+                System.out.println(\"Running ejbc for \" + descriptorFile.getName());", "+                regenerateSupportClasses(descriptorFile);", "+            }", "+            else {", "+                System.out.println(descriptorFile.getName() + \" is up to date\");", "+            }", "+            manifest += \"Name: \" + descriptorFile.getName() + \"\\nEnterprise-Bean: True\\n\\n\";", "+        }", "+        ", "+        FileWriter fw = new FileWriter(manifestFile);", "+        PrintWriter pw = new PrintWriter(fw);", "+        pw.print(manifest);", "+        fw.flush();", "+        fw.close();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae7a5ae00fb7ba9f0b3cc82071db8c55", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/tar/TarEntry.java", "commitBeforeChange": "b43f4224d8fe9d1e7d628e88df394a7dfed46d1b", "commitAfterChange": "2e5b53fa106b848646493cb6f6ea74616973aca0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public TarEntry(File file)", "signatureAfterChange": "     public TarEntry(File file, String fileName)", "diff": ["-    public TarEntry(File file) {", "+    public TarEntry(File file, String fileName) {", "-        String fileName = normalizeFileName(file.getPath(), false);", "-        this.linkName = new StringBuffer(\"\");", "-        this.name = new StringBuffer(fileName);", "+        this.linkName = \"\";", "-            int nameLength = name.length();", "-            if (nameLength == 0 || name.charAt(nameLength - 1) != '/') {", "-                this.name.append(\"/\");", "+            int nameLength = fileName.length();", "+            if (nameLength == 0 || fileName.charAt(nameLength - 1) != '/') {", "+                this.name = fileName + \"/\";", "+            } else {", "+                this.name = fileName;", "+            this.name = fileName;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcae1d167f748ed1825724027f446214", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/BuildEvent.java", "commitBeforeChange": "8947bdbc21d3439529ce0f424f5224c500bc7958", "commitAfterChange": "9bd75d2c4e8bb5387ec65dd76ccf483f2bec59e7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 0, "signatureBeforeChange": "     private static Object getSource(Project project, Target target, Task task)", "signatureAfterChange": "     public BuildEvent(Project project)", "diff": ["+    public BuildEvent(Project project) {", "+        super(project);", "+        this.target = null;", "+        this.task = null;", "+    }", "-     */", "-    private static Object getSource(Project project, Target target, Task task) {", "-        if (task != null) return task;", "-        if (target != null) return target;", "-        if (project != null) return project;", "-", "-        throw new IllegalArgumentException(\"Project field cannot be null\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7d6e04a9a7748a1bac0cbf6b3de0abf", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/IncludeTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": "      public void testWithSpaceInclude()", "signatureAfterChange": "      @Test     public void testWithSpaceInclude()", "diff": ["+    @Test", "-        configureProject(\"src/etc/testcases/core/include/with space/include.xml\");", "-        try {", "-            expectLog(\"test1\", \"from included entity in 'with space'\");", "-        } catch (Throwable t) {", "-            throw new AssertionFailedError(", "-                t.toString() + \"; log=\\n\" + getFullLog());", "-        }", "+        buildRule.configureProject(\"src/etc/testcases/core/include/with space/include.xml\");", "+        buildRule.executeTarget(\"test1\");", "+        assertEquals(\"from included entity in 'with space'\", buildRule.getLog());"]}]}
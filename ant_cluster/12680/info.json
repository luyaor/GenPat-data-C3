{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "49b606d6f53ff72ac0fc2a4bfbd1b7e2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e13fa430ec5f5b3575df3008e454b97", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/UpToDate.java", "commitBeforeChange": "fc24b8bbecb508d4edddb2ecf8897b7479c8a63f", "commitAfterChange": "d5836ac061734031a67a6c3bb5fb2fe1e73e566f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public boolean eval()", "signatureAfterChange": "     public boolean eval()", "diff": ["-                upToDate = upToDate", "-                    && (targetFile.lastModified() >= sourceFile.lastModified());", "+                upToDate = targetFile.lastModified() >= sourceFile.lastModified();", "-                upToDate = upToDate", "-                    && (sfs.restrict(new String[] {sourceFile.getAbsolutePath()},", "+                upToDate = sfs.restrict(new String[] {sourceFile.getAbsolutePath()},", "-                                  mapperElement.getImplementation()).length == 0);", "+                                  mapperElement.getImplementation()).length == 0;", "-            upToDate = upToDate && scanDir(fs.getDir(getProject()),", "+            upToDate = scanDir(fs.getDir(getProject()),", "-            upToDate = upToDate", "-                && (ResourceUtils.selectOutOfDateSources(", "-                        this, r, getMapper(), getProject()).length == 0);", "+            upToDate = ResourceUtils.selectOutOfDateSources(", "+                        this, r, getMapper(), getProject()).length == 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3640ba6881c752357379710160f4cd5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Delete.java", "commitBeforeChange": "8947bdbc21d3439529ce0f424f5224c500bc7958", "commitAfterChange": "9bd75d2c4e8bb5387ec65dd76ccf483f2bec59e7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+     */", "+    public void execute() throws BuildException {", "+        if (f == null && delDir == null) {", "+            throw new BuildException(\"<file> or <dir> attribute must be set!\");", "+        } ", "+        // old <delete> functionality must still work", "+        if (f != null) {", "+            if (f.exists()) {", "+                if (f.isDirectory()) {", "+                    log(\"Directory: \" + f.getAbsolutePath() + \" cannot be removed with delete.  Use Deltree instead.\");", "+                } else {", "+                    log(\"Deleting: \" + f.getAbsolutePath());", "-   */", "-  public void execute() throws BuildException {", "+                    if (!f.delete()) {", "+                        throw new BuildException(\"Unable to delete file \" + f.getAbsolutePath());", "+                    } ", "+                } ", "+            } ", "+        } ", "-    if (f == null && delDir == null) {", "-      throw new BuildException(\"<file> or <dir> attribute must be set!\");", "-    }", "+        // now we'll do the fancy pattern-driven deletes", "+        if (delDir == null) {", "+            return;", "+        } ", "-    // old <delete> functionality must still work", "-    if (f != null) {", "-      if (f.exists()) {", "-        if (f.isDirectory()) {", "-          project", "-            .log(\"Directory: \" + f.getAbsolutePath()", "-                 + \" cannot be removed with delete.  Use Deltree instead.\");", "-        }", "-        else {", "-          project.log(\"Deleting: \" + f.getAbsolutePath());", "-          if (!f.delete()) {", "-\t      throw new BuildException(\"Unable to delete file \" + f.getAbsolutePath());", "-          }", "-        }", "-      }", "-    }", "+        if (!delDir.exists()) {", "+            throw new BuildException(\"dir does not exist!\");", "+        } ", "-    // now we'll do the fancy pattern-driven deletes", "-    if (delDir == null) {", "-      return;", "-    }", "-    if (!delDir.exists()) {", "-      throw new BuildException(\"dir does not exist!\");", "-    }", "-    DirectoryScanner ds    = super.getDirectoryScanner(delDir);", "-    String[]         files = ds.getIncludedFiles();", "+        DirectoryScanner ds = super.getDirectoryScanner(delDir);", "+        String[] files = ds.getIncludedFiles();", "-    if (files.length > 0) {", "-      project.log(\"Deleting \" + files.length + \" files from \" + delDir.getAbsolutePath());", "-      for (int i = 0; i < files.length; i++) {", "-        File f = new File(delDir, files[i]);", "+        if (files.length > 0) {", "+            log(\"Deleting \" + files.length + \" files from \" + delDir.getAbsolutePath());", "-        if (f.exists()) {", "-          project.log(\"Deleting: \" + f.getAbsolutePath(), verbosity);", "-          if (!f.delete()) {", "-\t      throw new BuildException(\"Unable to delete \" + f.getAbsolutePath());", "-          }", "-        }", "-      }", "-    }", "-  }", "+            for (int i = 0; i < files.length; i++) {", "+                File f = new File(delDir, files[i]);", "+", "+                if (f.exists()) {", "+                    log(\"Deleting: \" + f.getAbsolutePath(), verbosity);", "+", "+                    if (!f.delete()) {", "+                        throw new BuildException(\"Unable to delete \" + f.getAbsolutePath());", "+                    } ", "+                } ", "+            } ", "+        } ", "+    } "]}]}
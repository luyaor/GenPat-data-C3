{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f284ce2e0cacce10054fcf09f321cf52", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5375093c4db641568a3c9cb632982f68", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/depend/DependTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void testNonPublic()", "signatureAfterChange": "     @Test     public void testNonPublic()", "diff": ["+    @Test", "-        executeTarget(\"testnonpublic\");", "-        String log = getLog();", "-        assertTrue(\"Expected warning about APrivate\",", "-            log.indexOf(\"The class APrivate in file\") != -1);", "-        assertTrue(\"but has not been deleted because its source file \"", "+        buildRule.executeTarget(\"src5setup\");", "+        buildRule.executeTarget(\"compile\");", "+", "+        FileUtilities.rollbackTimetamps(new File(buildRule.getProject().getProperty(\"tempsrc.dir\")), 5);", "+        FileUtilities.rollbackTimetamps(new File(buildRule.getProject().getProperty(\"classes.dir\")), 5);", "+", "+        buildRule.executeTarget(\"testnonpublic\");", "+        String log = buildRule.getLog();", "+        assertContains(\"Expected warning about APrivate\",", "+            \"The class APrivate in file\", log);", "+        assertContains(\"but has not been deleted because its source file \"", "-            log.indexOf(\"The class APrivate in file\") != -1);", "+            \"The class APrivate in file\", log);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ef3cffc1331387e62af0f7bbcc90777", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/filters/TokenFilterTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public void testReplaceRegex() throws IOException", "signatureAfterChange": "      @Test     public void testReplaceRegex() throws IOException", "diff": ["+    @Test", "-        if (! hasRegex(\"testReplaceRegex\"))", "-            return;", "-        String contents = getFileString(", "-            \"replaceregex\", getProject().getProperty(\"output\") + \"/replaceregex\");", "-        assertStringContains(contents, \"world world world world\");", "-        assertStringContains(contents, \"dog Cat dog\");", "-        assertStringContains(contents, \"moon Sun Sun\");", "-        assertStringContains(contents, \"found WhiteSpace\");", "-        assertStringContains(contents, \"Found digits [1234]\");", "-        assertStringNotContains(contents, \"This is a line with digits\");", "+", "+    \tbuildRule.executeTarget(\"hasregex\");", "+        Assume.assumeTrue(\"Regex not present\",", "+                getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\").contains(\"bye world\"));", "+", "+        buildRule.executeTarget(\"replaceregex\");", "+        String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregex\");", "+        assertContains(\"world world world world\", contents);", "+        assertContains(\"dog Cat dog\", contents);", "+        assertContains(\"moon Sun Sun\", contents);", "+        assertContains(\"found WhiteSpace\", contents);", "+        assertContains(\"Found digits [1234]\", contents);", "+        assertNotContains(\"This is a line with digits\", contents);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2129d5a653670e9ef8e1820d2dd82cae", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "489020e7936cd3fcaa5eae59e90a92ea", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/dotnet/DotnetCompile.java", "commitBeforeChange": "cbc4de47ebaa1710dbbf8d73efff8ccc8aeb26c4", "commitAfterChange": "362a940807ba311bb1ae34d77bbace30aa932a3b", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 57, "signatureBeforeChange": "         public String getValue(Task owner) throws BuildException", "signatureAfterChange": "      protected int addReferenceFilesets(NetCommand command, long outputTimestamp)", "diff": ["+", "+    protected int addReferenceFilesets(NetCommand command, long outputTimestamp) {", "+        int filesOutOfDate = 0;", "+        Hashtable filesToBuild=new Hashtable();", "+        for (int i = 0; i < referenceFilesets.size(); i++) {", "+            FileSet fs = (FileSet) referenceFilesets.elementAt(i);", "+            filesOutOfDate += command.scanOneFileset(", "+                    fs.getDirectoryScanner(getProject()),", "+                    filesToBuild,", "+                    outputTimestamp);", "+        }", "+        //bail out early if there were no files", "+        if(filesToBuild.size()==0) {", "+            return 0;", "+        }", "+        StringBuffer referenceList= new StringBuffer(REFERENCE_OPTION);", "+        //now scan the hashtable and add the files", "+        Enumeration files = filesToBuild.elements();", "+        while (files.hasMoreElements()) {", "+            File file = (File) files.nextElement();", "+            if(isFileManagedBinary(file)) {", "+                referenceList.append(file.toString());", "+                referenceList.append(getReferenceDelimiter());", "+            } else {", "+                log(\"ignoring \"+file+\" as it is not a managed executable\",", "+                        Project.MSG_VERBOSE);", "+            }", "+", "+        }", "+        //add it all to an argument", "+        command.addArgument(referenceList.toString());", "+        return filesOutOfDate;", "+    }", "-         */", "-        public String getValue(Task owner) throws BuildException {", "-            if(name==null) {", "-                throw new BuildException(\"No name provided for the define element\",", "-                    owner.getLocation());", "-            }", "-            if(!isSet(owner)) {", "-                return null;", "-            }", "-            return name;", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "723b53fc7cdc7ebd7e76c40276d77dc3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/repository/GetLibraries.java", "commitBeforeChange": "4d831bb7cbb2bb2839303380a28f888c587802a0", "commitAfterChange": "f630ef56ed68316b07aaa27e05cf871de1070498", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 24, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+        if (isOffline()) {", "+            log(\"No retrieval, task is \\\"offline\\\"\");", "+        } else {", "+            doExecute();", "+        }", "+        //validate the state", "+        verifyAllLibrariesPresent();", "+", "+        //create the path", "+        if (pathid != null) {", "+            createPath();", "+        }", "+    }", "-        int failures = 0;", "-        if (isOffline()) {", "-            log(\"No retrieval, task is \\\"offline\\\"\");", "-            //when offline, we just make sure everything is in place", "-            verifyAllLibrariesPresent();", "-            return;", "-            if (!reachable) {", "-                if (forceDownload) {", "-                    throw new BuildException(repo.toString()", "-                            + \" is unreachable and forceDownload is set\");", "-                }", "-            } else {", "-                log(\"Repository is live\", Project.MSG_DEBUG);", "-            //iterate through the libs we have", "-            Iterator it = filteredIterator();", "-                try {", "-                    //fetch it", "-                    if (repo.fetch(library)) {", "-                } catch (IOException e) {", "-                    //failures to fetch are logged at verbose level", "-                    log(ERROR_LIBRARY_FETCH_FAILED + library);", "-                    log(e.getMessage(), Project.MSG_VERBOSE);", "-                    //add failures", "-                    failures++;", "-", "-        //at this point downloads have finished.", "-        //we do still need to verify that everything worked.", "-        if ((failures>0 && forceDownload)) {", "-            throw new BuildException(ERROR_FORCED_DOWNLOAD_FAILED);", "-        }", "-", "-        //validate the download", "-        verifyAllLibrariesPresent();", "-", "-        //create the path", "-        if(pathid!=null) {", "-            createPath();", "-        }", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0748339528f3b83e6f3998200995747", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "c6c2722ad0807de6ce4f826bd92e51f2600ec07f", "commitAfterChange": "387d93e6ece00a294af599f30f0aac7b0bb56eee", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "     protected void makeRemoteDir(FTPClient ftp, String dir)          throws IOException, BuildException", "signatureAfterChange": "     protected void makeRemoteDir(FTPClient ftp, String dir)          throws IOException, BuildException", "diff": ["+        String workingDirectory = ftp.printWorkingDirectory();", "-            log(\"creating directory: \" + dir);", "+            log(\"Creating directory: \" + dir);", "-", "-        if (!ftp.makeDirectory(dir)) {", "-            // codes 521, 550 and 553 can be produced by FTP Servers", "-            //  to indicate that an attempt to create a directory has", "-            //  failed because the directory already exists.", "-            handleMkDirFailure(ftp);", "-            if (verbose) {", "-                log(\"directory already exists\");", "+        if (dir.indexOf(\"/\") == 0) {", "+            ftp.changeWorkingDirectory(\"/\");", "+        }", "+        String subdir = new String();", "+        StringTokenizer st = new StringTokenizer(dir, \"/\");", "+        while (st.hasMoreTokens()) {", "+            subdir = st.nextToken();", "+            log(\"Checking \" + subdir, Project.MSG_DEBUG);", "+            if (!ftp.changeWorkingDirectory(subdir)) {", "+                if(!ftp.makeDirectory(subdir)) {", "+                    // codes 521, 550 and 553 can be produced by FTP Servers", "+                    //  to indicate that an attempt to create a directory has", "+                    //  failed because the directory already exists.", "+                    int rc = ftp.getReplyCode();", "+                    if (!(ignoreNoncriticalErrors && (rc == 550 || rc == 553 || rc==521))) {", "+                        throw new BuildException(\"could not create directory: \" + ftp.getReplyString());", "+                    }", "+                    if (verbose) {", "+                        log(\"Directory already exists\");", "+                    }", "+                } else {", "+                    if (verbose) {", "+                        log(\"Directory created OK\");", "+                    }", "+                    ftp.changeWorkingDirectory(subdir);", "+                }", "-        } else {", "-            if (verbose) {", "-                log(\"directory created OK\");", "-            }", "+        }", "+        if (workingDirectory != null) {", "+            ftp.changeWorkingDirectory(workingDirectory);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "73a972f14b8ee9b3690927c63c83da4a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35e243a19fe4b862ab1d54c46f996571", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/vfs/impl/DefaultFileSystemManager.java", "commitBeforeChange": "f382fa32eec7260111db0d67ae9c90dee2d6de0b", "commitAfterChange": "dfa0c6e159416ba22df942ba98e496d99d53d07f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void close()", "signatureAfterChange": "     public void dispose()", "diff": ["-    public void close()", "-        // TODO - implement this", "+     */", "+    public void dispose()", "+    {", "+        // Dispose the providers (making sure we only dispose each provider", "+        // once", "+        final Set providers = new HashSet();", "+        providers.addAll( m_providers.values() );", "+        for( Iterator iterator = providers.iterator(); iterator.hasNext(); )", "+        {", "+            Object provider = iterator.next();", "+            if( provider instanceof Disposable )", "+            {", "+                Disposable disposable = (Disposable)provider;", "+                disposable.dispose();", "+            }", "+        }", "+        m_providers.clear();", "+", "+        m_fileReplicator.dispose();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1069a3665364e5b3971f4b6f872fe14", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/vfs/provider/ftp/FtpFileNameParser.java", "commitBeforeChange": "5b87919be6a8db15efe30f2de6e617aba31ef619", "commitAfterChange": "52926715b4f4f53da4b63cf660a14f357d7a9b6e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public ParsedUri parseUri( String uriStr ) throws FileSystemException", "signatureAfterChange": "     public ParsedFtpUri parseFtpUri( final String uriStr )         throws FileSystemException", "diff": ["-    public ParsedUri parseUri( String uriStr ) throws FileSystemException", "+    public ParsedFtpUri parseFtpUri( final String uriStr )", "+        throws FileSystemException", "-        ParsedFtpUri uri = new ParsedFtpUri();", "+        final ParsedFtpUri uri = new ParsedFtpUri();", "+        // Adjust the hostname to lower-case", "+        final String hostname = uri.getHostName().toLowerCase();", "+        uri.setHostName( hostname );", "+", "+        // Drop the port if it is 21", "+        final String port = uri.getPort();", "+        if( port != null && port.equals( \"21\" ) )", "+        {", "+            uri.setPort( null );", "+        }", "+", "-        String userInfo = uri.getUserInfo();", "+        final String userInfo = uri.getUserInfo();", "+        // Now build the root URI", "+        final StringBuffer rootUri = new StringBuffer();", "+        appendRootUri( uri, rootUri );", "+        uri.setRootUri( rootUri.toString() );", "+"]}]}
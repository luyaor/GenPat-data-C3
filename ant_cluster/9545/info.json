{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "02ee0b7dd64130aeacda1ee1cb69ca59", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04a5f5b2b822fb82617bbbfbc3fee4a1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/ZipScanner.java", "commitBeforeChange": "54fec62b385b75dc3eb2919685dbddc032e316a1", "commitAfterChange": "a9353331a922b229316fa3da01f1b2df9fd75059", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public String[] getIncludedDirectories()", "signatureAfterChange": "     public String[] getIncludedDirectories()", "diff": ["-        return new String[0];", "+        Vector myvector=new Vector();", "+        // first check if the archive needs to be scanned again", "+        scanme();", "+        for (int counter = 0; counter < myentries.size(); counter++) {", "+            Resource myresource = (Resource) myentries.elementAt(counter);", "+            if (myresource.isDirectory() && match(myresource.getName())) {", "+                myvector.addElement(myresource.getName());", "+            }", "+        }", "+        String[] files = new String[myvector.size()];", "+        myvector.copyInto(files);", "+        return files;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c054777b2264f73cc094c250325e6e09", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/Commandline.java", "commitBeforeChange": "29cf33f78f16638f62f3471816c1879e0a8190f2", "commitAfterChange": "6d7c130971fb273119d770033fc4ea42f899349f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public String[] getArguments()", "signatureAfterChange": "     public String[] getArguments()", "diff": ["-        final String [] result;", "-        result = new String[definition.size()];", "-        definition.copyInto(result);", "-        return result;", "+        Vector result = new Vector(definition.size()*2);", "+        for (int i=0; i<definition.size(); i++) {", "+            Argument arg = (Argument) definition.elementAt(i);", "+            String[] s = arg.getParts();", "+            for (int j=0; j<s.length; j++) {", "+                result.addElement(s[j]);", "+            }", "+        }", "+        ", "+        String [] res = new String[result.size()];", "+        result.copyInto(res);", "+        return res;"]}]}
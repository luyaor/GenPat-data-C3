{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7c93ee52df17d00cd9e807504837c1b6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07bf42d451d61fb6dac7d938f52dfe7e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/JonasDeploymentTool.java", "commitBeforeChange": "270394a09fddda0ea9ffa2330956c5f399ab840f", "commitAfterChange": "6bd8d6e938a45868902ecd1092858e8372933c7c", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 19, "signatureBeforeChange": "     protected String getJarBaseName(String aDescriptorFileName)", "signatureAfterChange": "      protected String getJarBaseName(String descriptorFileName)", "diff": ["-    // Determine the JAR filename (without filename extension)", "-    protected String getJarBaseName(String aDescriptorFileName) {", "-        String aBaseName = null;", "-        EjbJar.Config aConfig = super.getConfig();", "-        if (aConfig.namingScheme.getValue().equals(EjbJar.NamingScheme.DESCRIPTOR)) {", "+", "+    protected String getJarBaseName(String descriptorFileName) {", "+", "+        String baseName = null;", "+", "+        if ( getConfig().namingScheme.getValue().equals(EjbJar.NamingScheme.DESCRIPTOR) ) {", "+", "-            // ??/MyEJB.xml ( I will find later the ??/jonas-MyEJB.xml file )", "-            if (aDescriptorFileName.indexOf(aConfig.baseNameTerminator) == -1) {", "-                String aCanonicalDescriptor = aDescriptorFileName.replace('\\\\', '/');", "+            if ( descriptorFileName.indexOf(getConfig().baseNameTerminator) == -1 ) {", "+", "+\t\t// baseNameTerminator not found: the descriptor use the", "+\t\t// JOnAS naming convention, ie [Foo.xml,jonas-Foo.xml] and", "+\t\t// not [Foo<baseNameTerminator>-ejb-jar.xml,", "+\t\t// Foo<baseNameTerminator>-jonas-ejb-jar.xml].", "+\t\t", "+                String aCanonicalDescriptor = descriptorFileName.replace('\\\\', '/');", "-                int endBaseName;", "+                int endOfBaseName;", "-                if (lastSeparatorIndex != -1) {", "-                    endBaseName = aDescriptorFileName.indexOf(\".xml\", lastSeparatorIndex);", "+                if ( lastSeparatorIndex != -1 ) {", "+                    endOfBaseName = descriptorFileName.indexOf(\".xml\", lastSeparatorIndex);", "-                    endBaseName = aDescriptorFileName.indexOf(\".xml\");", "+                    endOfBaseName = descriptorFileName.indexOf(\".xml\");", "-                if (endBaseName != -1) {", "-                    aBaseName = aDescriptorFileName.substring(0, endBaseName);", "+                if ( endOfBaseName != -1 ) {", "+                    baseName = descriptorFileName.substring(0, endOfBaseName);", "-        if (aBaseName == null) {", "-            // else get standard BaseName", "-            aBaseName = super.getJarBaseName(aDescriptorFileName);", "+        if ( baseName == null ) {", "+            // else get standard baseName", "+            baseName = super.getJarBaseName(descriptorFileName);", "-        return aBaseName;", "+\t", "+        log(\"JAR base name: \" + baseName, Project.MSG_VERBOSE);\t", "+", "+        return baseName;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "159f814c73a53ffe2614721ff1536426", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/GenericDeploymentTool.java", "commitBeforeChange": "bd2c472af4fc8428f494cfd929dfd098100ceb41", "commitAfterChange": "64c4989ed4575a005c66a87a194791cf15ce27f4", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 14, "signatureBeforeChange": "          public void processDescriptor(String descriptorFileName, SAXParser saxParser,                                   FileSet supportFileSet)", "signatureAfterChange": "          public void processDescriptor(String descriptorFileName, SAXParser saxParser)", "diff": ["-    public void processDescriptor(String descriptorFileName, SAXParser saxParser,", "-                                  FileSet supportFileSet) {", "+    public void processDescriptor(String descriptorFileName, SAXParser saxParser) {", "-            DescriptorHandler handler = getDescriptorHandler(srcDir);", "+            DescriptorHandler handler = getDescriptorHandler(config.srcDir);", "-            descriptorStream = new FileInputStream(new File(getDescriptorDir(), descriptorFileName));", "+            descriptorStream = new FileInputStream(new File(config.descriptorDir, descriptorFileName));", "-            if (supportFileSet != null) {", "+            if (config.supportFileSet != null) {", "-                File supportBaseDir = supportFileSet.getDir(project);", "-                ", "-                DirectoryScanner supportScanner = supportFileSet.getDirectoryScanner(project);", "+                File supportBaseDir = config.supportFileSet.getDir(project);", "+                DirectoryScanner supportScanner = config.supportFileSet.getDirectoryScanner(project);", "-            if (baseJarName != null) {", "-                baseName = baseJarName;", "+            if (config.baseJarName != null) {", "+                baseName = config.baseJarName;", "-                    endBaseName = descriptorFileName.indexOf(baseNameTerminator, ", "+                    endBaseName = descriptorFileName.indexOf(config.baseNameTerminator, ", "-                    endBaseName = descriptorFileName.indexOf(baseNameTerminator);", "+                    endBaseName = descriptorFileName.indexOf(config.baseNameTerminator);", "-                         new File(getDescriptorDir(), descriptorFileName));", "+                         new File(config.descriptorDir, descriptorFileName));", "-            if (flatDestDir && baseName.length() != 0) {", "+            if (config.flatDestDir && baseName.length() != 0) {"]}]}
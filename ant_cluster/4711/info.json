{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ba3b3734cf714a283bdab263f2ea0c01", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17d131f3b0aa381121d99f7f0e7e2303", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Rmic.java", "commitBeforeChange": "d5313cd9aeb9e62923cf784c46598937160aba2e", "commitAfterChange": "38c2a2a22283450dab6afcf3d3ec094c67dc1e4e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["+", "-        File baseFile = project.resolveFile(base);", "+        File baseDir = project.resolveFile(base);", "+        if (baseDir == null) {", "+            throw new BuildException(\"base attribute must be set!\", location);", "+        }", "+        if (!baseDir.exists()) {", "+            throw new BuildException(\"base does not exist!\", location);", "+        }", "+", "+        if (verify) {", "+            project.log(\"Verify has been turned on.\", Project.MSG_INFO);", "+        }", "-        if (null != sourceBase)", "+        if (null != sourceBase) {", "-        String classpath = getCompileClasspath(baseFile);", "+        }", "+        String classpath = getCompileClasspath(baseDir);", "+", "+        // scan base dirs to build up compile lists", "+", "+        DirectoryScanner ds = this.getDirectoryScanner(baseDir);", "+", "+        String[] files = ds.getIncludedFiles();", "+", "+        scanDir(baseDir, files, verify);", "+", "-            int argCount = 5;", "+        int argCount = 5;", "+        if (compileList.size() > 0) argCount += compileList.size() - 1;", "-        args[i++] = baseFile.getAbsolutePath();", "+        args[i++] = baseDir.getAbsolutePath();", "-        args[i++] = classname;", "-        compiler.compile(args);", "+        if (classname != null) {", "+            if (shouldCompile(new File(baseDir, classname.replace('.', File.separatorChar)))) {", "+                args[i++] = classname;", "+                compiler.compile(args);", "+            }", "+        } else {", "+            if (compileList.size() > 0) {", "+                project.log(\"RMI Compiling \" + compileList.size() +", "+                            \" classes to \" + baseDir, Project.MSG_INFO);", "+", "+                for (int j = 0; j < compileList.size(); j++) {", "+                    args[i++] = (String) compileList.elementAt(j);", "+                }", "+                compiler.compile(args);", "+            }", "+        }", "-                String stubFileName = classname.replace('.', '/') + \"_Stub.java\";", "-            File oldStubFile = new File(baseFile, stubFileName);", "-            File newStubFile = new File(sourceBaseFile, stubFileName);", "-            try {", "-                project.copyFile(oldStubFile, newStubFile, filtering);", "-                oldStubFile.delete();", "-            } catch (IOException ioe) {", "-                String msg = \"Failed to copy \" + oldStubFile + \" to \" +", "-                             newStubFile + \" due to \" + ioe.getMessage();", "-                throw new BuildException(msg);", "-            }", "-            if (!\"1.2\".equals(stubVersion)) {", "-                String skelFileName = classname.replace('.', '/') + \"_Skel.java\";", "-                File oldSkelFile = new File(baseFile, skelFileName);", "-                File newSkelFile = new File(sourceBaseFile, skelFileName);", "-                try {", "-                    project.copyFile(oldSkelFile, newSkelFile, filtering);", "-                    oldSkelFile.delete();", "-                } catch (IOException ioe) {", "-                    String msg = \"Failed to copy \" + oldSkelFile + \" to \" +", "-                                  newSkelFile + \" due to \" + ioe.getMessage();", "-                    throw new BuildException(msg);", "+            if (classname != null) {", "+                moveGeneratedFile(baseDir, sourceBaseFile, classname);", "+            } else {", "+                for (int j = 0; j < compileList.size(); j++) {", "+                    moveGeneratedFile(baseDir, sourceBaseFile, (String) compileList.elementAt(j));", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c17569d138cf84233d2041e3090b5fc5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Rmic.java", "commitBeforeChange": "b139901cab374b10e2f73a58769fb4ef1c2837bd", "commitAfterChange": "0218e3ecae8397a700aae864601f963e5771a9a5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-    public void execute() throws BuildException {", "-\tString pathsep = System.getProperty(\"path.separator\");", "-\tStringBuffer classpath = new StringBuffer();", "-\tFile baseFile = project.resolveFile(base);", "-\tclasspath.append(baseFile.getAbsolutePath());", "-\tclasspath.append(pathsep);", "-        classpath.append(System.getProperty(\"java.class.path\"));", "-        ", "-        // in jdk 1.2, the system classes are not on the visible classpath.", "-        ", "-        if (Project.getJavaVersion().startsWith(\"1.2\")) {", "-            String bootcp = System.getProperty(\"sun.boot.class.path\");", "-            if (bootcp != null) {", "-                classpath.append(pathsep);", "-                classpath.append(bootcp);", "-            }", "-        }", "-\t", "+", "+    public void execute() throws BuildException {", "+\tFile baseFile = project.resolveFile(base);", "+        File sourceBaseFile = null;", "+        if (null != sourceBase)", "+            sourceBaseFile = project.resolveFile(sourceBase);", "+        String classpath = getCompileClasspath(baseFile);", "-        String[] args = new String[5];", "-        args[0] = \"-d\";", "-        args[1] = baseFile.getAbsolutePath();", "-        args[2] = \"-classpath\";", "-        args[3] = classpath.toString();", "-        args[4] = classname;", "+  \t    int argCount = 5;", "+        int i = 0;", "+        if (null != stubVersion) argCount++;", "+        if (null != sourceBase) argCount++;", "+        String[] args = new String[argCount];", "+        args[i++] = \"-d\";", "+        args[i++] = baseFile.getAbsolutePath();", "+        args[i++] = \"-classpath\";", "+        args[i++] = classpath;", "+        args[i++] = classname;", "+        if (null != stubVersion) {", "+            if (\"1.1\".equals(stubVersion))", "+                args[i++] = \"-v1.1\";", "+            else if (\"1.2\".equals(stubVersion))", "+                args[i++] = \"-v1.2\";", "+            else", "+                args[i++] = \"-vcompat\";", "+        }", "+        if (null != sourceBase) args[i++] = \"-keepgenerated\";", "+", "+", "+        // Move the generated source file to the base directory", "+        if (null != sourceBase) {", "+        \tString stubFileName = classname.replace('.', '/') + \"_Stub.java\";", "+            File oldStubFile = new File(baseFile, stubFileName);", "+            File newStubFile = new File(sourceBaseFile, stubFileName);", "+            try {", "+                copyFile(oldStubFile, newStubFile);", "+                oldStubFile.delete();", "+            } catch (IOException ioe) {", "+                String msg = \"Failed to copy \" + oldStubFile + \" to \" + ", "+                             newStubFile + \" due to \" + ioe.getMessage();", "+                throw new BuildException(msg);", "+            }", "+            if (!\"1.2\".equals(stubVersion)) {", "+                String skelFileName = classname.replace('.', '/') + \"_Skel.java\";", "+                File oldSkelFile = new File(baseFile, skelFileName);", "+                File newSkelFile = new File(sourceBaseFile, skelFileName);", "+                try {", "+            \t    copyFile(oldSkelFile, newSkelFile);", "+            \t    oldSkelFile.delete();", "+                } catch (IOException ioe) {", "+                    String msg = \"Failed to copy \" + oldSkelFile + \" to \" + ", "+                                  newSkelFile + \" due to \" + ioe.getMessage();", "+                    throw new BuildException(msg);", "+                }", "+            }", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a5c614d45b9769ae1c62afdee28cafb1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e01dfff6aa793e54d1474a8f2d4398d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "cc432705f28eb85592b6fd077bf95d7c522e3a01", "commitAfterChange": "1c03d4738077efd8b9b09670c26b25430c83af1f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "          protected void scandir(String dir, String vpath, boolean fast)", "signatureAfterChange": "          protected void scandir(String dir, String vpath, boolean fast)", "diff": ["-                    return;    // no files in directory.", "+                    ftp.changeToParentDirectory();", "+                    return;", "-                    String name = vpath + file.getName();", "-                    if (file.isDirectory()) {", "-                        if (isIncluded(name)) {", "-                            if (!isExcluded(name)) {", "-                                dirsIncluded.addElement(name);", "-                                if (fast) {", "-                                    scandir(name, name + File.separator, fast);", "-                                }", "-                            } else {", "-                                dirsExcluded.addElement(name);", "-                            }", "-                        } else {", "-                            dirsNotIncluded.addElement(name);", "-                            if (fast && couldHoldIncluded(name)) {", "-                                scandir(name, name + File.separator, fast);", "-                            }", "-                        }", "-                        if (!fast) {", "-                            scandir(name, name + File.separator, fast);", "-                        }", "-                    } else {", "-                        if (file.isFile()) {", "+                    if (!file.getName().equals(\".\") && !file.getName().equals(\"..\")) {", "+                        if (file.isDirectory()) {", "+                            String name = file.getName();", "-                                    filesIncluded.addElement(name);", "+                                    dirsIncluded.addElement(name);", "+                                    if (fast) {", "+                                        scandir(name, vpath + name + File.separator, fast);", "+                                    }", "-                                    filesExcluded.addElement(name);", "+                                    dirsExcluded.addElement(name);", "-                                filesNotIncluded.addElement(name);", "+                                dirsNotIncluded.addElement(name);", "+                                if (fast && couldHoldIncluded(name)) {", "+                                    scandir(name, vpath + name + File.separator, fast);", "+                                }", "+                            }", "+                            if (!fast) {", "+                                scandir(name, vpath + name + File.separator, fast);", "+                            }", "+                        } else {", "+                            if (file.isFile()) {", "+                                String name = vpath + file.getName();", "+                                if (isIncluded(name)) {", "+                                    if (!isExcluded(name)) {", "+                                        filesIncluded.addElement(name);", "+                                    } else {", "+                                        filesExcluded.addElement(name);", "+                                    }", "+                                } else {", "+                                    filesNotIncluded.addElement(name);", "+                                }", "+                ftp.changeToParentDirectory();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e049afc6878580f364395e5ec31853a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "2b925503d71972d8b782eedd6cdf75711377d7b0", "commitAfterChange": "2c4faa154f069f3f69d6c3c95629409a7b8b0cc4", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 33, "signatureBeforeChange": "      private void scandir(File dir, String vpath, boolean fast,                          String[] newfiles, LinkedList directoryNamesFollowed)", "signatureAfterChange": "      private void scandir(File dir, TokenizedPath path, boolean fast,                          String[] newfiles, LinkedList directoryNamesFollowed)", "diff": ["-    private void scandir(File dir, String vpath, boolean fast,", "+    private void scandir(File dir, TokenizedPath path, boolean fast,", "+        String vpath = path.toString();", "+        if (vpath.length() > 0 && !vpath.endsWith(File.separator)) {", "+            vpath += File.separator;", "+        }", "+", "+            TokenizedPath newPath = new TokenizedPath(path, newfiles[i]);", "-                if (isIncluded(name)) {", "-                    accountForIncludedFile(name, file);", "+                if (isIncluded(newPath)) {", "+                    accountForIncludedFile(newPath, file);", "-                if (isIncluded(name)) {", "-                    accountForIncludedDir(name, file, fast, children,", "+                if (isIncluded(newPath)) {", "+                    accountForIncludedDir(newPath, file, fast, children,", "-                    if (fast && couldHoldIncluded(name)) {", "-                        scandir(file, name + File.separator, fast, children,", "+                    if (fast && couldHoldIncluded(newPath)) {", "+                        scandir(file, newPath, fast, children,", "-                    scandir(file, name + File.separator, fast, children,", "-                            directoryNamesFollowed);", "+                    scandir(file, newPath, fast, children, directoryNamesFollowed);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb4833cf62fb98bd3a97de8ee4b0d3dd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/depend/Depend.java", "commitBeforeChange": "0992b41f807cf4bdeb4fd517d08adc8f8f8e258e", "commitAfterChange": "75722dcb03cb32e6efbd01d306f301c1bd490716", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void determineDependencies() throws IOException", "signatureAfterChange": "     private void determineDependencies() throws IOException", "diff": ["-        classJarDependencies = null;", "-        if (compileClasspath != null) {", "+        classpathDependencies = null;", "+        if (dependClasspath != null) {", "-            classJarDependencies = new Hashtable();", "-            AntClassLoader loader = new AntClassLoader(getProject(), compileClasspath);", "-            Hashtable jarFileCache = new Hashtable();", "-            Object nullJarFile = new Object();", "+            classpathDependencies = new Hashtable();", "+            AntClassLoader loader = new AntClassLoader(getProject(), dependClasspath);", "+            Hashtable classpathFileCache = new Hashtable();", "+            Object nullFileMarker = new Object();", "-                Hashtable jarDependencies = new Hashtable();", "-                classJarDependencies.put(className, jarDependencies);", "+                Hashtable dependencies = new Hashtable();", "+                classpathDependencies.put(className, dependencies);", "-                    Object jarFileObject = jarFileCache.get(dependency);", "-                    if (jarFileObject == null) {", "-                        jarFileObject = nullJarFile;", "+                    Object classpathFileObject = classpathFileCache.get(dependency);", "+                    if (classpathFileObject == null) {", "+                        classpathFileObject = nullFileMarker;", "-                                String jarFilePath = classURL.getFile();", "-                                if (jarFilePath.startsWith(\"file:\")) {", "-                                    int classMarker = jarFilePath.indexOf('!');", "-                                    jarFilePath = jarFilePath.substring(5, classMarker);", "+                                if (classURL.getProtocol().equals(\"jar\")) {", "+                                    String jarFilePath = classURL.getFile();", "+                                    if (jarFilePath.startsWith(\"file:\")) {", "+                                        int classMarker = jarFilePath.indexOf('!');", "+                                        jarFilePath = jarFilePath.substring(5, classMarker);", "+                                    }", "+                                    classpathFileObject = new File(jarFilePath);", "-                                jarFileObject = new File(jarFilePath);", "+                                else if (classURL.getProtocol().equals(\"file\")) {", "+                                    String classFilePath = classURL.getFile();", "+                                    classpathFileObject = new File(classFilePath);", "+                                }", "-                                    \" depends on \" + jarFileObject + ", "+                                    \" depends on \" + classpathFileObject + ", "-                        jarFileCache.put(dependency, jarFileObject);", "+                        classpathFileCache.put(dependency, classpathFileObject);", "-                    if (jarFileObject != null && jarFileObject != nullJarFile) {", "+                    if (classpathFileObject != null && classpathFileObject != nullFileMarker) {", "-                        File jarFile = (File)jarFileObject;", "-                        jarDependencies.put(jarFile, jarFile);", "+                        File jarFile = (File)classpathFileObject;", "+                        dependencies.put(jarFile, jarFile);"]}]}
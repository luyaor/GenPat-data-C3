{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6c4f1388b879ca1fdc79440985219b29", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17ef9b2d959d5386e3333b541b48730c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ClassIntrospector.java", "commitBeforeChange": "2cf032e2ec39726aed4c77622b59eadd3828072e", "commitAfterChange": "2e31f97888f11646bebb8939fed00c37c4c863e2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public ClassIntrospector(final Class bean, Map converters)", "signatureAfterChange": "     public ClassIntrospector(final Class bean, Map converters)", "diff": ["+        getDepths(bean);", "-                reflector.addAttributeMethod(m, getPropertyName(name, \"set\"),", "-                    converters);", "+                Integer depth = (Integer)classDepth.get(m.getDeclaringClass());", "+                reflector.addAttributeMethod(m, depth.intValue(), ", "+                    getPropertyName(name, \"set\"), converters);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecd5ea499f1c888dddc0fceeef2b1811", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/PropertyHelper.java", "commitBeforeChange": "c00d3f670bf0ede36467d3409170346af1a535d9", "commitAfterChange": "65b09851fd5134ce0a66954485bdff2db5783e40", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "     public synchronized void add(Delegate delegate)", "signatureAfterChange": "     public void add(Delegate delegate)", "diff": ["-    public synchronized void add(Delegate delegate) {", "-        for (Iterator iter = getDelegateInterfaces(delegate).iterator(); iter.hasNext();) {", "-            Object key = iter.next();", "-            List list = (List) delegates.get(key);", "-            if (list == null) {", "-                list = new ArrayList();", "-                delegates.put(key, list);", "+    public void add(Delegate delegate) {", "+        synchronized (Delegate.class) {", "+            Hashtable newDelegates = (Hashtable) delegates.clone();", "+            for (Iterator iter = getDelegateInterfaces(delegate).iterator(); iter.hasNext();) {", "+                Object key = iter.next();", "+                List list = (List) newDelegates.get(key);", "+                if (list == null) {", "+                    list = new ArrayList();", "+                    newDelegates.put(key, list);", "+                }", "+                if (list.contains(delegate)) {", "+                    list.remove(delegate);", "+                }", "+                list.add(0, delegate);", "-            if (list.contains(delegate)) {", "-                list.remove(delegate);", "-            }", "-            list.add(0, delegate);", "+            delegates = newDelegates;"]}]}
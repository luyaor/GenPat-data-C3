{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "654fc017f322c504f4245eee28639757", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "275df208be2d6292b1b94fd9675aeac0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "cbd20a77eba224b21654251583971e054729f006", "commitAfterChange": "752d64fa43db2172327771ba4d36bee3f2d3b49a", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     protected void writeCentralFileHeader(ZipEntry ze) throws IOException", "signatureAfterChange": "     protected void writeCentralFileHeader(ZipEntry ze) throws IOException", "diff": ["-        byte[] name = getBytes(ze.getName());", "-        writeOut(ZipShort.getBytes(name.length));", "+        ByteBuffer name = this.zipEncoding.encode(ze.getName());", "+        writeOut(ZipShort.getBytes(name.limit()));", "-        byte[] commentB = getBytes(comm);", "-        writeOut(ZipShort.getBytes(commentB.length));", "+        ByteBuffer commentB = this.zipEncoding.encode(comm);", "+        writeOut(ZipShort.getBytes(commentB.limit()));", "-        writeOut(name);", "-        written += name.length;", "+        writeOut(name.array(), name.arrayOffset(), name.limit());", "+        written += name.limit();", "-        writeOut(commentB);", "-        written += commentB.length;", "+        writeOut(commentB.array(), commentB.arrayOffset(), commentB.limit());", "+        written += commentB.limit();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3402a2809fadfc549e1cbf8f3c5d4238", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "cbd20a77eba224b21654251583971e054729f006", "commitAfterChange": "752d64fa43db2172327771ba4d36bee3f2d3b49a", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     protected void writeLocalFileHeader(ZipEntry ze) throws IOException", "signatureAfterChange": "     protected void writeLocalFileHeader(ZipEntry ze) throws IOException", "diff": ["-        byte[] name = getBytes(ze.getName());", "+        boolean encodable = this.zipEncoding.canEncode(ze.getName());", "+        ByteBuffer name = this.zipEncoding.encode(ze.getName());", "+", "-            ze.addExtraField(new UnicodePathExtraField(ze.getName(), name));", "+", "+            /*            if (!encodable) { -- FIXME decide what to*/", "+                ze.addExtraField(new UnicodePathExtraField(ze.getName(),", "+                                                           name.array(),", "+                                                           name.arrayOffset(),", "+                                                           name.limit()));", "+            /* } */", "+", "-                byte[] commentB = getBytes(comm);", "-                ze.addExtraField(new UnicodeCommentExtraField(comm, commentB));", "+", "+                boolean commentEncodable = this.zipEncoding.canEncode(comm);", "+", "+                /*            if (!commentEncodable) { -- FIXME decide what to*/", "+                    ByteBuffer commentB = this.zipEncoding.encode(comm);", "+                    ze.addExtraField(new UnicodeCommentExtraField(comm,", "+                                                                  commentB.array(),", "+                                                                  commentB.arrayOffset(),", "+                                                                  commentB.limit())", "+                                     );", "+                /* } */", "-        writeOut(ZipShort.getBytes(name.length));", "+        writeOut(ZipShort.getBytes(name.limit()));", "-        writeOut(name);", "-        written += name.length;", "+        writeOut(name.array(), name.arrayOffset(), name.limit());", "+        written += name.limit();"]}]}
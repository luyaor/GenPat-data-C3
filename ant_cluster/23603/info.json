{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "93eb01996943fd17bfa8c17e9dd37fc5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27f2f01f6eea4f94ab46d4f2d79da60c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "ee9453f4f459494b616f35d57b58b73773e534dd", "commitAfterChange": "edb71783adeffc29a56df203f97b5ac0e4566a5d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "          private static void runBuild()", "signatureAfterChange": "      private static void runBuild()", "diff": ["-    ", "+", "-        ", "-\tlong startTime = System.currentTimeMillis();", "-\tif (msgOutputLevel >= Project.MSG_INFO) {", "-\t    System.out.println(\"Buildfile: \" + buildFile);", "-\t}", "-        ", "-\tProject project = new Project();", "-\tproject.setOutputLevel(msgOutputLevel);", "-\t// set user-define properties", "+        long startTime = System.currentTimeMillis();", "+        if (msgOutputLevel >= Project.MSG_INFO) {", "+            System.out.println(\"Buildfile: \" + buildFile);", "+        }", "+", "+        Project project = new Project();", "+        project.setOutputLevel(msgOutputLevel);", "+", "+        // set user-define properties", "-        ", "-\ttry {", "-\t    ProjectHelper.configureProject(project, buildFile);", "-\t} catch (BuildException be) {", "-\t    String msg = \"BUILD CONFIG ERROR: \";", "-\t    System.out.println(msg + be.getMessage());", "-\t    be.printStackTrace();", "-\t    exit(1);", "-\t}", "+        try {", "+            ProjectHelper.configureProject(project, buildFile);", "+        } catch (BuildException be) {", "+            String msg = \"BUILD CONFIG ERROR: \";", "+            System.out.println(msg + be.getMessage());", "+            be.printStackTrace();", "+            System.exit(1);", "+        }", "-        ", "-\tif (targetCount == 0) {", "-\t    String target = project.getDefaultTarget();", "-\t    targets[0]=target;", "-\t    targetCount=1;", "-\t}", "-", "-        // set the security manager", "-    securityManager = new AntSecurityManager();", "-    System.setSecurityManager(securityManager);", "+        if (targets.size() == 0) {", "+            targets.addElement(project.getDefaultTarget());", "+        }", "-\ttry {", "-\t    for(int i=0; i< targetCount; i++) ", "-\t\tproject.executeTarget(targets[i]);", "-\t} catch (BuildException be) {", "-\t    String msg = \"BUILD FATAL ERROR: \";", "-\t    System.out.println(msg + be.getMessage());", "-        if (msgOutputLevel > Project.MSG_INFO) {", "-            be.printStackTrace();", "+        try {", "+            Enumeration en = targets.elements();", "+            while (en.hasMoreElements()) {", "+                project.executeTarget((String) en.nextElement());", "+            }", "+        } catch (BuildException be) {", "+            String msg = \"BUILD FATAL ERROR: \";", "+            System.out.println(msg + be.getMessage());", "+            if (msgOutputLevel > Project.MSG_INFO) {", "+                be.printStackTrace();", "+            }", "+            System.exit(1);", "-        exit(1);", "-\t}", "-        // track our stop time and let the user know how long things", "-        // took.", "-        ", "-\tlong finishTime = System.currentTimeMillis();", "-\tlong elapsedTime = finishTime - startTime;", "-\tif (msgOutputLevel >= Project.MSG_INFO) {", "-\t    System.out.println(\"Completed in \" + (elapsedTime/1000)", "-\t\t\t       + \" seconds\");", "-\t}", "+        // track our stop time and let the user know how long things took.", "+        long finishTime = System.currentTimeMillis();", "+        long elapsedTime = finishTime - startTime;", "+        if (msgOutputLevel >= Project.MSG_INFO) {", "+            System.out.println(\"Completed in \" + (elapsedTime/1000)", "+                               + \" seconds\");", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fba802665d006c8e7dd77cd0765dbd17", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "ec980be7345681968c93f0609e9a3fecb39b9753", "commitAfterChange": "fbb9886634198d8377104bef9ec697fadeb134df", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": "          private Reader getReader() throws IOException", "signatureAfterChange": "          private Reader getReader() throws IOException", "diff": ["-            if (reader == null) {", "-                log(\"Concating file \" + sourceFiles.elementAt(pos),", "-                    Project.MSG_VERBOSE);", "-                if (encoding == null) {", "-                    reader = new BufferedReader(", "-                        new FileReader((File) sourceFiles.elementAt(pos)));", "-                } else {", "-                    // invoke the zoo of io readers", "-                    reader = new BufferedReader(", "-                        new InputStreamReader(", "-                            new FileInputStream(", "-                                (File) sourceFiles.elementAt(pos)),", "-                            encoding));", "-                }", "-                for (int i = 0; i < lastChars.length; ++i) {", "-                    lastChars[i] = 0;", "-                }", "+            if (reader == null && i.hasNext()) {", "+                Resource r = (Resource) i.next();", "+                log(\"Concating \" + r.toLongString(), Project.MSG_VERBOSE);", "+                InputStream is = r.getInputStream();", "+                reader = new BufferedReader(encoding == null", "+                    ? new InputStreamReader(is)", "+                    : new InputStreamReader(is, encoding));", "+                Arrays.fill(lastChars, (char) 0);", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4484b0c6ed257a1f1afe3055599a2b8f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34130b077079da51f7eb53cfe28ec48d", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/PlainJUnitResultFormatter.java", "commitBeforeChange": "2ef872804303b611e9a26dbcee320bfbac800c52", "commitAfterChange": "f76dfe4521618521029828e214ababd55124d919", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void endTestSuite(JUnitTest suite) throws BuildException", "signatureAfterChange": "     public void endTestSuite(JUnitTest suite) throws BuildException", "diff": ["+        String newLine = System.getProperty(\"line.separator\");", "-        sb.append(System.getProperty(\"line.separator\"));", "+        sb.append(newLine);", "-        sb.append(System.getProperty(\"line.separator\"));", "-        sb.append(System.getProperty(\"line.separator\"));", "+        sb.append(newLine);", "+        sb.append(newLine);", "+        ", "+        // append the err and output streams to the log", "+        if (systemOutput != null && systemOutput.length() > 0) {", "+            sb.append(\"------------- Standard Output ---------------\" )", "+                .append(newLine)", "+                .append(systemOutput)", "+                .append(\"------------- ---------------- ---------------\" )", "+                .append(newLine);", "+        }", "+        ", "+        if (systemError != null && systemError.length() > 0) {", "+            sb.append(\"------------- Standard Error -----------------\" )", "+                .append(newLine)", "+                .append(systemError)", "+                .append(\"------------- ---------------- ---------------\" )", "+                .append(newLine);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3409d3faaaeb212baa1df3dc9409689", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/SummaryJUnitResultFormatter.java", "commitBeforeChange": "2ef872804303b611e9a26dbcee320bfbac800c52", "commitAfterChange": "f76dfe4521618521029828e214ababd55124d919", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void endTestSuite(JUnitTest suite) throws BuildException", "signatureAfterChange": "     public void endTestSuite(JUnitTest suite) throws BuildException", "diff": ["+        String newLine = System.getProperty(\"line.separator\");", "-        sb.append(System.getProperty(\"line.separator\"));", "+        sb.append(newLine);", "+", "+        if (withOutAndErr) {", "+            if (systemOutput != null && systemOutput.length() > 0) {", "+                sb.append( \"Output:\" ).append(newLine).append(systemOutput)", "+                    .append(newLine);", "+            }", "+            ", "+            if (systemError != null && systemError.length() > 0) {", "+                sb.append( \"Error: \" ).append(newLine).append(systemError)", "+                    .append(newLine);", "+            }", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f672e346cc96a301c3e04bb9c6e86621", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/zip/ZipOutputStream.java", "commitBeforeChange": "aa43e37a025cdf54b8914b8283e57419a253ed59", "commitAfterChange": "dee95e3acc5154aee03ff5f91f9a56426ae79f3f", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 32, "signatureBeforeChange": "     protected void writeCentralDirectoryEnd() throws IOException", "signatureAfterChange": "     protected void writeCentralDirectoryEnd() throws IOException", "diff": ["-        byte[] num = ZipShort.getBytes(entries.size());", "+        int numberOfEntries = entries.size();", "+        if (numberOfEntries > ZIP64_MAGIC_SHORT", "+            && zip64Mode == Zip64Mode.Never) {", "+            throw new Zip64RequiredException(Zip64RequiredException", "+                                             .TOO_MANY_ENTRIES_MESSAGE);", "+        }", "+        if (cdOffset > ZIP64_MAGIC && zip64Mode == Zip64Mode.Never) {", "+            throw new Zip64RequiredException(Zip64RequiredException", "+                                             .ARCHIVE_TOO_BIG_MESSAGE);", "+        }", "+", "+        byte[] num = ZipShort.getBytes(Math.min(numberOfEntries,", "+                                                ZIP64_MAGIC_SHORT));", "-        writeOut(ZipLong.getBytes(cdLength));", "-        writeOut(ZipLong.getBytes(cdOffset));", "+        writeOut(ZipLong.getBytes(Math.min(cdLength, ZIP64_MAGIC)));", "+        writeOut(ZipLong.getBytes(Math.min(cdOffset, ZIP64_MAGIC)));"]}]}
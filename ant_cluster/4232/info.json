{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "028610c083d41715520c385fe7708cdb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "189ca9d2560a761cf58a4a051d5bfd11", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/taskdefs/AntTest.java", "commitBeforeChange": "6ef4875d061c42465f53150b1397b4d7d3b65905", "commitAfterChange": "3745d5dc705f587314a801d7a7ffe9dd2a0e60b3", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "          public void targetStarted(BuildEvent event)", "signatureAfterChange": "          public void targetStarted(BuildEvent event)", "diff": ["-                    assertEquals(\"Call \"+calls+\" refid=\\'\"+keys[calls]+\"\\'\", ", "-                                 expectSame[calls],", "-                                 event.getProject().getReferences().get(keys[calls++]) == value);", "+                    String msg = ", "+                        \"Call \" + calls + \" refid=\\'\" + keys[calls] + \"\\'\";", "+                    if (value == null) {", "+                        Object o = event.getProject().getReference(keys[calls]);", "+                        if (expectSame[calls++]) {", "+                            assertNull(msg, o);", "+                        } else {", "+                            assertNotNull(msg, o);", "+                        }", "+                    } else {", "+                        // a rather convoluted equals() test", "+                        Path expect = (Path) value;", "+                        Path received = (Path) event.getProject().getReference(keys[calls]);", "+                        boolean shouldBeEqual = expectSame[calls++];", "+                        if (received == null) {", "+                            assertTrue(msg, !shouldBeEqual);", "+                        } else {", "+                            String[] l1 = expect.list();", "+                            String[] l2 = received.list();", "+                            if (l1.length == l2.length) {", "+                                for (int i=0; i<l1.length; i++) {", "+                                    if (!l1[i].equals(l2[i])) {", "+                                        assertTrue(msg, !shouldBeEqual);", "+                                    }", "+                                }", "+                                assertTrue(msg, shouldBeEqual);", "+                            } else {", "+                                assertTrue(msg, !shouldBeEqual);", "+                            }", "+                        }", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a04a6ac65df75bd9bf837d30c864e58b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java", "commitBeforeChange": "b0b920b08fae74de3fd7a7dd5efbca9e8cf379e6", "commitAfterChange": "114d55869f46b382375b6b32ddc17bb2e5fc598c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void run()", "signatureAfterChange": "     public void run()", "diff": ["+                final boolean testMethodsSpecified = (methods != null);", "+", "+                if (!testMethodsSpecified) {", "+                }", "+                    boolean useSingleMethodAdapter = false;", "+                    if (junit.framework.TestCase.class.isAssignableFrom(testClass)) {", "+                        // Do not use JUnit 4 API for running JUnit 3.x", "+                        // tests - it is not able to run individual test", "+                        // methods.", "+                        //", "+                        // Technical details:", "+                        // org.junit.runner.Request.method(Class, String).getRunner()", "+                        // would return a runner which always executes all", "+                        // test methods. The reason is that the Runner would be", "+                        // an instance of class", "+                        // org.junit.internal.runners.OldTestClassRunner", "+                        // that does not implement interface Filterable - so it", "+                        // is unable to filter out test methods not matching", "+                        // the requested name.", "+                    } else {", "+                            if (testMethodsSpecified) {", "+                                /*", "+                                 * We cannot try to load the JUnit4TestAdapter", "+                                 * before trying to load JUnit4TestMethodAdapter", "+                                 * because it might fail with", "+                                 * NoClassDefFoundException, instead of plain", "+                                 * ClassNotFoundException.", "+                                 */", "+                                junit4TestAdapterClass = Class.forName(", "+                                    \"org.apache.tools.ant.taskdefs.optional.junit.JUnit4TestMethodAdapter\");", "+                                useSingleMethodAdapter = true;", "+                            }", "+                            if (testMethodsSpecified) {", "+                                junit4TestAdapterClass =", "+                                    Class.forName(", "+                                        \"org.apache.tools.ant.taskdefs.optional.junit.JUnit4TestMethodAdapter\",", "+                                        true, loader);", "+                                useSingleMethodAdapter = true;", "+                            }", "+                    }", "+                        Class[] formalParams;", "+                        Object[] actualParams;", "+                        if (useSingleMethodAdapter) {", "+                            formalParams = new Class[] {Class.class, String[].class};", "+                            actualParams = new Object[] {testClass, methods};", "+                        } else {", "+                            formalParams = new Class[] {Class.class};", "+                            actualParams = new Object[] {testClass};", "+                        }", "-                            .getConstructor(new Class[] {Class.class}).", "-                            newInstance(new Object[] {testClass});", "+                            .getConstructor(formalParams).", "+                            newInstance(actualParams);", "-                        suite = new TestSuite(testClass);", "+                        if (!testMethodsSpecified) {", "+                            suite = new TestSuite(testClass);", "+                        } else if (methods.length == 1) {", "+                            suite = TestSuite.createTest(testClass, methods[0]);", "+                        } else {", "+                            TestSuite testSuite = new TestSuite(testClass.getName());", "+                            for (int i = 0; i < methods.length; i++) {", "+                                testSuite.addTest(", "+                                    TestSuite.createTest(testClass, methods[i]));", "+                            }", "+                            suite = testSuite;", "+                        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "17988eea229de2ec70401481fd602865", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67f47e1cf83fd2e36d8ffba63be34a35", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/types/selectors/PresentSelectorTest.java", "commitBeforeChange": "e5235423ccd494cb7516a1df6e3e13a74a22b767", "commitAfterChange": "da5a13f8e4e0e4475f942b5ae5670271b711d423", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void testSelectionBehaviour()", "signatureAfterChange": "     public void testSelectionBehaviour()", "diff": ["-            s.setTargetdir(basedirname);", "+            s.setTargetdir(beddir);", "-            s.setTargetdir(basedirname);", "+            s.setTargetdir(beddir);", "-            s.setTargetdir(\"src/etc/testcases/taskdefs/expected\");", "+            File subdir = new File(\"src/etc/testcases/taskdefs/expected\");", "+            s.setTargetdir(subdir);", "-            assertEquals(\"TTTTTTTTTTTF\", results);", "+        if (JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)) {", "+                assertEquals(\"TTTTTFFFFFFF\", results);", "+            } else {", "+                assertEquals(\"TTTTTTTTTTTF\", results);", "+            }", "-            s.setTargetdir(basedirname);", "+            s.setTargetdir(beddir);", "-            s.setTargetdir(basedirname + \"/tar/bz2\");", "+            subdir = new File(beddir, \"tar/bz2\");", "+            s.setTargetdir(subdir);", "+            try {", "+                makeMirror();", "+", "+                s = (PresentSelector)getInstance();", "+                subdir = getProject().resolveFile(\"selectortest2\");", "+                s.setTargetdir(subdir);", "+                results = mirrorSelectionString(s);", "+                assertEquals(\"TTTFFTTTTTTT\", results);", "+                results = selectionString(s);", "+                assertEquals(\"TTTFFTTTTTTT\", results);", "+", "+", "+            }", "+            finally {", "+                cleanupMirror();", "+            }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e77785ef5b0fcd384967c66a1da712d3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/taskdefs/ManifestTest.java", "commitBeforeChange": "3e1cde904eca74dd23da0102f7a68ecc0cd1aa62", "commitAfterChange": "176b11946b0fd2fdc0f5f06d676aba72fc4fce98", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public void testLongLine() throws IOException, ManifestException", "signatureAfterChange": "     public void testLongLine() throws IOException, ManifestException", "diff": ["+        p.setUserProperty(\"test.long68name\" , LONG_68_NAME);", "+        p.setUserProperty(\"test.long70name\" , LONG_70_NAME);", "+        p.setUserProperty(\"test.notlongname\" , NOT_LONG_NAME);", "+        p.setUserProperty(\"test.value\", VALUE);", "+        ", "+        String value = mainSection.getAttributeValue(LONG_68_NAME);", "+        assertEquals(\"LONG_68_NAME_VALUE_MISMATCH\", VALUE, value);", "+        value = mainSection.getAttributeValue(LONG_70_NAME);", "+        assertEquals(\"LONG_70_NAME_VALUE_MISMATCH\", VALUE, value);", "+        value = mainSection.getAttributeValue(NOT_LONG_NAME);", "+        assertEquals(\"NOT_LONG_NAME_VALUE_MISMATCH\", VALUE, value);", "+        ", "+        BufferedReader in = new BufferedReader(new FileReader(EXPANDED_MANIFEST));", "+        ", "+        Set set = new HashSet();", "+        String read = in.readLine();", "+        while (read != null)", "+        {", "+            set.add(read);", "+            read = in.readLine();", "+        }", "+        ", "+        assertTrue(\"Manifest file should have contained string \", set", "+                .remove(\" NOT_LONG\"));", "+        assertTrue(\"Manifest file should have contained string \", set", "+                .remove(\" NG\"));", "+        assertTrue(\"Manifest file should have contained string \", set", "+                .remove(LONG_70_NAME + \": \"));", "+        assertTrue(\"Manifest file should have contained string \", set", "+                .remove(NOT_LONG_NAME + \": NOT_LO\"));"]}]}
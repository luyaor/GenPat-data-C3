{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f07a1e8cdc80ecdb6782d3cfce04194c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46581c3623cd5766d4035a4e0d0d084b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/filterreaders/src/main/org/apache/tools/ant/filters/ClassConstants.java", "commitBeforeChange": "131519b962655478e6cf36802ace9d0f702aa823", "commitAfterChange": "f9bcdd7713370a79393e749e0e55fada438faa4a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public final int read() throws IOException", "signatureAfterChange": "     public final int read() throws IOException", "diff": ["-                final StringBuffer sb = JavaClassHelper.getConstants(bytes);", "-                if (sb.length() > 0) {", "-                    queuedData = sb.toString();", "-                    return read();", "+                try {", "+                    final Class javaClassHelper =", "+                        Class.forName(JAVA_CLASS_HELPER);", "+                    if (javaClassHelper != null) {", "+                        final Class params[] = {", "+                            byte[].class", "+                        };", "+                        final Method getConstants =", "+                            javaClassHelper.getMethod(\"getConstants\", params);", "+                        final Object[] args = {", "+                            bytes", "+                        };", "+                        // getConstants is a staic method, no need to", "+                        // pass in the object", "+                        final StringBuffer sb = (StringBuffer)", "+                                getConstants.invoke(null, args);", "+                        if (sb.length() > 0) {", "+                            queuedData = sb.toString();", "+                            return read();", "+                        }", "+                    }", "+                } catch (ClassNotFoundException cnfe) {", "+                    throw new IOException(cnfe.getMessage());", "+                } catch (NoSuchMethodException nsme) {", "+                    throw new IOException(nsme.getMessage());", "+                } catch (IllegalAccessException iae) {", "+                    throw new IOException(iae.getMessage());", "+                } catch (IllegalArgumentException iarge) {", "+                    throw new IOException(iarge.getMessage());", "+                } catch (InvocationTargetException ite) {", "+                    throw new IOException(ite.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4958d5ff87f1e0fdb5c4826ce94fe2e3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "dddcf551a908df7a6f9ccb7db4b49ce441844375", "commitAfterChange": "e6a52064b983a4152dbfb75b1597efed46d02e2d", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-", "-", "-        try{", "-            Class.forName(driver);", "+        Driver driverInstance = null;", "+        // Load the driver using the ", "+        try {", "+            Class dc;", "+            if (classpath != null) {", "+\t\tlog(\"Loading \" + driver + \" using AntClassLoader with classpath \" + classpath, Project.MSG_VERBOSE);", "+                loader = new AntClassLoader(project, classpath, false);", "+                dc = loader.loadClass(driver);", "+            }", "+            else {", "+\t\tlog(\"Loading \" + driver + \" using system loader.\", Project.MSG_VERBOSE);", "+                dc = Class.forName(driver);", "+            }", "+            driverInstance = (Driver) dc.newInstance();", "-            throw new BuildException(\"JDBC driver \" + driver + \" could not be loaded\", location);", "+            throw new BuildException(\"Class Not Found: JDBC driver \" + driver + \" could not be loaded\", location);", "+        }catch(IllegalAccessException e){", "+            throw new BuildException(\"Illegal Access: JDBC driver \" + driver + \" could not be loaded\", location);", "+        }catch(InstantiationException e) {", "+            throw new BuildException(\"Instantiation Exception: JDBC driver \" + driver + \" could not be loaded\", location);", "-            conn = DriverManager.getConnection(url, userId, password);", "+            Properties info = new Properties();", "+            info.put(\"user\", userId);", "+            info.put(\"password\", password);", "+            conn = driverInstance.connect(url, info);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a442216051428cfcb45ffde7cc6f02f5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "3ce64dd501a7e5dfd84967399cc4c68c643de810", "commitAfterChange": "b941f2ef443cbbaec2b995b3c34958067c4979c3", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 41, "signatureBeforeChange": "     public void execute()", "signatureAfterChange": "     public void execute()", "diff": ["-     */", "-    public void execute() {", "-        ResourceCollection c = validate();", "-        if (c == null) {", "-            return;", "-        }", "-        // Do nothing if no resources (including nested text)", "-        if (c.size() < 1 && header == null && footer == null) {", "-            log(\"No existing resources and no nested text, doing nothing\",", "-                Project.MSG_INFO);", "-            return;", "-        }", "-        if (binary) {", "-            binaryCat(c);", "-        } else {", "-            cat(c);", "-        }", "-    }", "+     */", "+    public void execute() {", "+        validate();", "+        if (binary && destinationFile == null) {", "+            throw new BuildException(", "+                \"destfile attribute is required for binary concatenation\");", "+        }", "+        ResourceCollection c = getResources();", "+        if (isUpToDate(c)) {", "+            log(destinationFile + \" is up-to-date.\", Project.MSG_VERBOSE);", "+            return;", "+        }", "+        if (c.size() == 0) {", "+            return;", "+        }", "+        OutputStream out;", "+        if (destinationFile == null) {", "+            // Log using WARN so it displays in 'quiet' mode.", "+            out = new LogOutputStream(this, Project.MSG_WARN);", "+        } else {", "+            try {", "+                // ensure that the parent dir of dest file exists", "+                File parent = destinationFile.getParentFile();", "+                if (!parent.exists()) {", "+                    parent.mkdirs();", "+                }", "+                // use getPath() for pre-JDK 1.4 compatibility:", "+                out = new FileOutputStream(destinationFile.getPath(), append);", "+            } catch (Throwable t) {", "+                throw new BuildException(\"Unable to open \"", "+                    + destinationFile + \" for writing\", t);", "+            }", "+        }", "+        InputStream catStream;", "+        try {", "+            catStream = new ConcatResource(c).getInputStream();", "+        } catch (IOException e) {", "+            throw new BuildException(\"error getting concatenated resource content\", e);", "+        }", "+        pump(catStream, out);", "+    }"]}]}
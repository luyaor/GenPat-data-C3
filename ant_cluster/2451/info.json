{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e154dc6696e7427c6a7cc2f08fa1bdcb", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cb013124ddd5df36f94b1f7b850770c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "ec980be7345681968c93f0609e9a3fecb39b9753", "commitAfterChange": "fbb9886634198d8377104bef9ec697fadeb134df", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String inputEncoding, String outputEncoding,                          Project project)         throws IOException", "signatureAfterChange": "     public void copyFile(File sourceFile, File destFile,                          FilterSetCollection filters, Vector filterChains,                          boolean overwrite, boolean preserveLastModified,                          String inputEncoding, String outputEncoding,                          Project project)         throws IOException", "diff": ["+        copyResource(new FileResource(sourceFile), new FileResource(destFile),", "+            filters, filterChains, overwrite, preserveLastModified,", "+            inputEncoding, outputEncoding, project);", "+    }", "-        if (overwrite || !destFile.exists()", "-            || destFile.lastModified() < sourceFile.lastModified()) {", "-            if (destFile.exists() && destFile.isFile()) {", "-                destFile.delete();", "-            // ensure that parent dir of dest file exists!", "-            // not using getParentFile method to stay 1.1 compat", "-            File parent = destFile.getParentFile();", "-            if (parent != null && !parent.exists()) {", "-                parent.mkdirs();", "-            }", "-            final boolean filterSetsAvailable = (filters != null", "-                                                 && filters.hasFilters());", "-            final boolean filterChainsAvailable = (filterChains != null", "-                                                   && filterChains.size() > 0);", "-            if (filterSetsAvailable) {", "-                BufferedReader in = null;", "-                BufferedWriter out = null;", "-                try {", "-                    if (inputEncoding == null) {", "-                        in = new BufferedReader(new FileReader(sourceFile));", "-                    } else {", "-                        InputStreamReader isr", "-                            = new InputStreamReader(new FileInputStream(sourceFile),", "-                                                    inputEncoding);", "-                        in = new BufferedReader(isr);", "-                    }", "-                    if (outputEncoding == null) {", "-                        out = new BufferedWriter(new FileWriter(destFile));", "-                    } else {", "-                        OutputStreamWriter osw", "-                            = new OutputStreamWriter(new FileOutputStream(destFile),", "-                                                     outputEncoding);", "-                        out = new BufferedWriter(osw);", "-                    }", "-                    if (filterChainsAvailable) {", "-                        ChainReaderHelper crh = new ChainReaderHelper();", "-                        crh.setBufferSize(BUF_SIZE);", "-                        crh.setPrimaryReader(in);", "-                        crh.setFilterChains(filterChains);", "-                        crh.setProject(project);", "-                        Reader rdr = crh.getAssembledReader();", "-                        in = new BufferedReader(rdr);", "-                    }", "-                    LineTokenizer lineTokenizer = new LineTokenizer();", "-                    lineTokenizer.setIncludeDelims(true);", "-                    String newline = null;", "-                    String line = lineTokenizer.getToken(in);", "-                    while (line != null) {", "-                        if (line.length() == 0) {", "-                            // this should not happen, because the lines are", "-                            // returned with the end of line delimiter", "-                            out.newLine();", "-                        } else {", "-                            newline = filters.replaceTokens(line);", "-                            out.write(newline);", "-                        }", "-                        line = lineTokenizer.getToken(in);", "-                    }", "-                } finally {", "-                    close(out);", "-                    close(in);", "-            } else if (filterChainsAvailable", "-                       || (inputEncoding != null", "-                           && !inputEncoding.equals(outputEncoding))", "-                       || (inputEncoding == null && outputEncoding != null)) {", "-                BufferedReader in = null;", "-                BufferedWriter out = null;", "-                 try {", "-                     if (inputEncoding == null) {", "-                         in = new BufferedReader(new FileReader(sourceFile));", "-                     } else {", "-                         in =", "-                             new BufferedReader(", "-                                 new InputStreamReader(", "-                                     new FileInputStream(sourceFile),", "-                                     inputEncoding));", "-                     }", "-                     if (outputEncoding == null) {", "-                         out = new BufferedWriter(new FileWriter(destFile));", "-                     } else {", "-                         out =", "-                             new BufferedWriter(", "-                                 new OutputStreamWriter(", "-                                     new FileOutputStream(destFile),", "-                                     outputEncoding));", "-                     }", "-                     if (filterChainsAvailable) {", "-                         ChainReaderHelper crh = new ChainReaderHelper();", "-                         crh.setBufferSize(BUF_SIZE);", "-                         crh.setPrimaryReader(in);", "-                         crh.setFilterChains(filterChains);", "-                         crh.setProject(project);", "-                         Reader rdr = crh.getAssembledReader();", "-                         in = new BufferedReader(rdr);", "-                     }", "-                     char[] buffer = new char[BUF_SIZE];", "-                     while (true) {", "-                         int nRead = in.read(buffer, 0, buffer.length);", "-                         if (nRead == -1) {", "-                             break;", "-                         }", "-                         out.write(buffer, 0, nRead);", "-                      }", "-                 } finally {", "-                     close(out);", "-                     close(in);", "-                 }", "-            } else {", "-                FileInputStream in = null;", "-                FileOutputStream out = null;", "-                try {", "-                    in = new FileInputStream(sourceFile);", "-                    out = new FileOutputStream(destFile);", "-", "-                    byte[] buffer = new byte[BUF_SIZE];", "-                    int count = 0;", "-                    do {", "-                        out.write(buffer, 0, count);", "-                        count = in.read(buffer, 0, buffer.length);", "-                    } while (count != -1);", "-                } finally {", "-                    close(out);", "-                    close(in);", "-            if (preserveLastModified) {", "-                setFileLastModified(destFile, sourceFile.lastModified());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af9f5e6efe7fe597ab364e8e29028460", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/ResourceUtils.java", "commitBeforeChange": "f7cec58a607900954a1686009fb5ebe4ea6ddea6", "commitAfterChange": "3ae69e82c33e0e03941387a3506561accc2697d3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public static void copyResource(Resource source, Resource dest,                              FilterSetCollection filters, Vector filterChains,                              boolean overwrite, boolean preserveLastModified,                              String inputEncoding, String outputEncoding,                              Project project)         throws IOException", "signatureAfterChange": "     public static void copyResource(Resource source, Resource dest,                              FilterSetCollection filters, Vector filterChains,                              boolean overwrite, boolean preserveLastModified,                              String inputEncoding, String outputEncoding,                              Project project)         throws IOException", "diff": ["-        if (!overwrite) {", "-            long slm = source.getLastModified();", "-            if (dest.isExists() && slm != 0", "-                && dest.getLastModified() > slm) {", "-                return;", "-            }", "+        copyResource(source, dest, filters, filterChains, overwrite, preserveLastModified, false, inputEncoding, outputEncoding, project);", "+    }", "-                OutputStreamWriter osw = null;", "-                    osw = new OutputStreamWriter(dest.getOutputStream());", "-                    osw = new OutputStreamWriter(dest.getOutputStream(),", "-                                                 outputEncoding);", "-                OutputStreamWriter osw = null;", "-                    osw = new OutputStreamWriter(dest.getOutputStream());", "-                    osw = new OutputStreamWriter(dest.getOutputStream(),", "-                                                 outputEncoding);", "-                out = dest.getOutputStream();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9b32704bb909fee4d59ae1a4aa643da4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e8644f32e599d449c015cf8a2915937", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/BriefJUnitResultFormatter.java", "commitBeforeChange": "8d4985ca744bd0925d812835615bb991b16e1db2", "commitAfterChange": "f62d563414e6848898008af84073651eb83a7959", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     protected synchronized void formatError(String type, Test test,                                             Throwable error)", "signatureAfterChange": "     protected synchronized void formatError(String type, Test test,                                             Throwable error)", "diff": ["-        resultWriter.println(formatTest(test) + type);", "-        resultWriter.println(error.getMessage());", "-        String strace = JUnitTestRunner.getFilteredTrace(error);", "-        resultWriter.println(strace);", "-        resultWriter.println();", "+        try {", "+            resultWriter.write(formatTest(test) + type);", "+            resultWriter.newLine();", "+            resultWriter.write(error.getMessage());", "+            resultWriter.newLine();", "+            String strace = JUnitTestRunner.getFilteredTrace(error);", "+            resultWriter.write(strace);", "+            resultWriter.newLine();", "+            resultWriter.newLine();", "+        } catch (IOException ex) {", "+            throw new BuildException(ex);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fb7d3b97c1ff8a5b443954faf0a1820", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/SummaryJUnitResultFormatter.java", "commitBeforeChange": "444a953257a1f383b6e417326194b7556b85ea58", "commitAfterChange": "9d3c394c5d1c57194e8e49cd62837855411cb98f", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void endTestSuite(JUnitTest suite) throws BuildException", "signatureAfterChange": "     public void endTestSuite(JUnitTest suite) throws BuildException", "diff": ["+", "+        /* class name needed with multi-threaded execution because", "+           results line may not appear immediately below start line.", "+           only write thread id, class name in multi-thread mode so", "+           the line still looks as much like the old line as possible. */", "+        if (suite.getThread() > 0) {", "+            sb.append(\", Thread: \");", "+            sb.append(suite.getThread());", "+            sb.append(\", Class: \");", "+            sb.append(suite.getName());", "+        }", "-            out.write(sb.toString().getBytes());", "-            out.flush();", "-        } catch (IOException ioex) {", "-            throw new BuildException(\"Unable to write summary output\", ioex);", "+            writeOutputLine(sb.toString().getBytes());"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c957958a35de0fef9447cf5fae51c41", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c673fd300a0411340abfb3f8e287b591", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Ant.java", "commitBeforeChange": "75be43a0db87407b5342e80fb809b42f618a4c4b", "commitAfterChange": "a22c8c09c83a3a684cd003cf0661c7913291640f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+                Throwable t = null;", "+                    newProject.fireSubBuildStarted();", "-                    throw ProjectHelper.addLocationToBuildException(", "-                        ex, getLocation());", "-              } finally {", "+                    t = ProjectHelper", "+                        .addLocationToBuildException(ex, getLocation());", "+                    throw (BuildException) t;", "+                } finally {", "+                    newProject.fireSubBuildFinished(t);", "-            Iterator iter = getBuildListeners();", "-            while (iter.hasNext()) {", "-                newProject.removeBuildListener((BuildListener) iter.next());", "-            }", "-            iter = newProject.getBuildListeners().iterator();", "-            while (iter.hasNext()) {", "-                Object o = iter.next();", "-                if (o instanceof RecorderEntry) {", "-                    ((RecorderEntry) o).close();", "-                } else if (o instanceof AntClassLoader) {", "-                    ((AntClassLoader) o).cleanup();", "-                }", "-            }", "-            "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc71ecf80a05c454933b4699a1116a51", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/ResourceList.java", "commitBeforeChange": "7829faf36a6f4bc565e0e8b92aa85cc948718176", "commitAfterChange": "9caeed5081071d6a2de28844d0a724918f8c6d86", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     protected synchronized void dieOnCircularReference(Stack stk, Project p)         throws BuildException", "signatureAfterChange": "     protected synchronized void dieOnCircularReference(Stack<Object> stk, Project p)         throws BuildException", "diff": ["-    protected synchronized void dieOnCircularReference(Stack stk, Project p)", "+    protected synchronized void dieOnCircularReference(Stack<Object> stk, Project p)", "-            for (Iterator iter = textDocuments.iterator(); iter.hasNext(); ) {", "-                Object o = (Object) iter.next();", "-                if (o instanceof DataType) {", "-                    pushAndInvokeCircularReferenceCheck((DataType) o, stk, p);", "+            for (ResourceCollection resourceCollection : textDocuments) {", "+                if (resourceCollection instanceof DataType) {", "+                    pushAndInvokeCircularReferenceCheck((DataType) resourceCollection, stk, p);", "-            for (Iterator iter = filterChains.iterator(); iter.hasNext(); ) {", "-                FilterChain fc = (FilterChain) iter.next();", "-                pushAndInvokeCircularReferenceCheck(fc, stk, p);", "+            for (FilterChain filterChain : filterChains) {", "+                pushAndInvokeCircularReferenceCheck(filterChain, stk, p);"]}]}
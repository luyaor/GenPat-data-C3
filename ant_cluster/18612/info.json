{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "97d7417abc957a026c4b53d86d335780", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "647c3fb8882611691e26876142e6efce", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/Cab.java", "commitBeforeChange": "d3cd72efd0bcc53e93dc30234f1793d9c44b3093", "commitAfterChange": "2737393e9f982e62dcd84f35a5f342ae9fa07cd7", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-                Process p = Runtime.getRuntime().exec(\"listcab\");", "+                Process p = Execute.launch(getProject(), ", "+                                           new String[] {\"listcab\"}, null,", "+                                           baseDir, true);", "+", "+                // Create the stream pumpers to forward listcab's stdout and stderr to the log", "+                // note: listcab is an interactive program, and issues prompts for every new line.", "+                //       Therefore, make it show only with verbose logging turned on.", "+                LogOutputStream outLog = new LogOutputStream(this, Project.MSG_VERBOSE);", "+                LogOutputStream errLog = new LogOutputStream(this, Project.MSG_ERR);", "+                StreamPumper    outPump = new StreamPumper(p.getInputStream(), outLog);", "+                StreamPumper    errPump = new StreamPumper(p.getErrorStream(), errLog);", "+                ", "+                // Pump streams asynchronously", "+                (new Thread(outPump)).start();", "+                (new Thread(errPump)).start();", "+", "+                int result = -99; // A wild default for when the thread is interrupted", "+", "+                try {", "+                    // Wait for the process to finish", "+                    result = p.waitFor();", "+", "+                    // Wait for the end of output and error streams", "+                    outPump.waitFor();", "+                    outLog.close();", "+                    errPump.waitFor();", "+                    errLog.close();", "+                } catch(InterruptedException ie) {", "+                    log(\"Thread interrupted: \" + ie);", "+                }", "+", "+                // Informative summary message in case of errors", "+                if(result != 0) {", "+                    log(\"Error executing listcab; error code: \" + result);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b4b80e53b8d1ea7abcba5c757c4d7db", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/Cab.java", "commitBeforeChange": "08eef4e8a6bbe820b1622250bdc08de9b0d0cb15", "commitAfterChange": "66d9c994937f8b4667773ebad664322a9f0e74c6", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["-        // we must be on Windows to continue", "-        if (!isWindows)", "-        {", "-            log(\"cannot run on non-Windows platforms: \" + myos,", "-                Project.MSG_VERBOSE);", "-            return;", "-        }", "-        ", "+", "-        ", "+    ", "-        try {", "-            File listFile = createListFile(files);", "-            ExecTask exec = createExec();", "-            File outFile = null;", "+        // we must be on Windows to continue", "+        if (!isWindows) {", "+            log(\"Using listcab/libcabinet\", Project.MSG_VERBOSE);", "-            // die if cabarc fails", "-            exec.setFailonerror(true);", "-            exec.setDir(baseDir);", "+            StringBuffer sb = new StringBuffer();", "-            if (!doVerbose)", "-            {", "-                outFile = createTempFile(\"ant\", null);", "-                exec.setOutput(outFile);", "+            Enumeration fileEnum = files.elements();", "+            ", "+            while (fileEnum.hasMoreElements()) {", "+                sb.append(fileEnum.nextElement()).append(\"\\n\");", "+            sb.append(\"\\n\").append(cabFile.getAbsolutePath()).append(\"\\n\");", "+            ", "+            try {", "+                Process p = Runtime.getRuntime().exec(\"listcab\");", "+                OutputStream out = p.getOutputStream();", "+                out.write(sb.toString().getBytes());", "+                out.flush();", "+                out.close();", "+            } catch (IOException ex) {", "+                String msg = \"Problem creating \" + cabFile + \" \" + ex.getMessage();", "+                throw new BuildException(msg);", "+            }", "+        } else {", "+            try {", "+                File listFile = createListFile(files);", "+                ExecTask exec = createExec();", "+                File outFile = null;", "-            exec.setCommand(createCommand(listFile));", "-            exec.execute();", "-", "-            if (outFile != null)", "-            {", "-                outFile.delete();", "+                // die if cabarc fails", "+                exec.setFailonerror(true);", "+                exec.setDir(baseDir);", "+                ", "+                if (!doVerbose) {", "+                    outFile = createTempFile(\"ant\", null);", "+                    exec.setOutput(outFile);", "+                }", "+                    ", "+                exec.setCommand(createCommand(listFile));", "+                exec.execute();", "+    ", "+                if (outFile != null) {", "+                    outFile.delete();", "+                }", "+                ", "+                listFile.delete();", "+            } catch (IOException ioe) {", "+                String msg = \"Problem creating \" + cabFile + \" \" + ioe.getMessage();", "+                throw new BuildException(msg);", "-            ", "-            listFile.delete();", "-        } catch (IOException ioe) {", "-            String msg = \"Problem creating \" + cabFile + \" \" + ioe.getMessage();", "-            throw new BuildException(msg);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0ff897cf5f35a14050f259f19ad4e63", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/XmlLogger.java", "commitBeforeChange": "90dcced6ab280d3093912bc4c831be790eeeb295", "commitAfterChange": "6c315c38234faf9c26ca3ab76195b767eccbe558", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void buildFinished(BuildEvent event)", "signatureAfterChange": "      public void buildFinished(BuildEvent event)", "diff": ["+            // print the stacktrace in the build file it is always useful...", "+            // better have too much info than not enough.", "+            ByteArrayOutputStream baos = new ByteArrayOutputStream();", "+            PrintStream ps = new PrintStream(baos,true);", "+            Throwable t = event.getException();", "+            t.printStackTrace(ps);", "+            ps.flush();", "+            ps.close();", "+            Text errText =  doc.createCDATASection(baos.toString());", "+            Element stacktrace = doc.createElement(STACKTRACE_TAG);", "+            stacktrace.appendChild(errText);", "+            buildElement.element.appendChild(stacktrace);", "+       String outFilename = event.getProject().getProperty(\"XmlLogger.file\");", "+        if (outFilename == null) {", "+            outFilename = \"log.xml\";", "+        }", "+        Writer out = null;", "-            String outFilename = ", "-                event.getProject().getProperty(\"XmlLogger.file\");", "-", "-            if (outFilename == null) {", "-                outFilename = \"log.xml\";", "-            }", "-", "-            Writer out =", "-                new OutputStreamWriter(new FileOutputStream(outFilename),", "-                                       \"UTF8\");", "+            FileOutputStream fos = new FileOutputStream(outFilename);", "+            out = new OutputStreamWriter(fos, \"UTF8\");", "-            out.close();", "-            ", "-            throw new BuildException(\"Unable to close log file\", exc);", "+            throw new BuildException(\"Unable to write log file\", exc);", "+        } finally {", "+            if (out != null){", "+                try {", "+                    out.close();", "+                } catch (IOException e){ }", "+            }"]}]}
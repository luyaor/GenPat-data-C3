{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "61377118cf1e9599d21781b4565121b2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00cd31552c4ee1f6d757828d1d7771f9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/GenericDeploymentTool.java", "commitBeforeChange": "018aa8685b246a8bb269832fcbc935874eff0c1e", "commitAfterChange": "e545bf4a3695a90cc6d3645fb20d5dbacc7ec988", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 15, "signatureBeforeChange": "     protected void addFileToJar(JarOutputStream jStream,                                 FileInputStream iStream,                                 String          filename)         throws BuildException", "signatureAfterChange": "     protected void addFileToJar(JarOutputStream jStream,                                 File inputFile,                                 String logicalFilename)         throws BuildException", "diff": ["-                                FileInputStream iStream,", "-                                String          filename)", "+                                File inputFile,", "+                                String logicalFilename)", "+        FileInputStream iStream = null;", "-            // Create the zip entry and add it to the jar file", "-            ZipEntry zipEntry = new ZipEntry(filename);", "-            jStream.putNextEntry(zipEntry);", "-            ", "-            // Create the file input stream, and buffer everything over", "-            // to the jar output stream", "-            byte[] byteBuffer = new byte[2 * 1024];", "-            int count = 0;", "-            do {", "-                jStream.write(byteBuffer, 0, count);", "-                count = iStream.read(byteBuffer, 0, byteBuffer.length);", "-            } while (count != -1);", "-            ", "-            // Close up the file input stream for the class file", "-            iStream.close();", "+            if (!addedfiles.contains(logicalFilename)) {", "+                iStream = new FileInputStream(inputFile);", "+                // Create the zip entry and add it to the jar file", "+                ZipEntry zipEntry = new ZipEntry(logicalFilename);", "+                jStream.putNextEntry(zipEntry);", "+                   ", "+                // Create the file input stream, and buffer everything over", "+                // to the jar output stream", "+                byte[] byteBuffer = new byte[2 * 1024];", "+                int count = 0;", "+                do {", "+                    jStream.write(byteBuffer, 0, count);", "+                    count = iStream.read(byteBuffer, 0, byteBuffer.length);", "+                } while (count != -1);", "+                ", "+                //add it to list of files in jar", "+                addedfiles.add(logicalFilename);", "+           }       ", "-                         + filename + \"to jarfile.\"", "+                         + logicalFilename + \" to jarfile from \" + inputFile.getPath() + \".\"", "+        }", "+        finally {", "+            // Close up the file input stream for the class file", "+            if (iStream != null) {", "+                try {", "+                    iStream.close();", "+                }", "+                catch (IOException closeException) {}", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f015f457462ca5b2b660249c4e899d0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/selectors/FilenameSelector.java", "commitBeforeChange": "02e939c261d79e9d1c2df779bfe1b787b63dd55c", "commitAfterChange": "d814a03e98431c1ae142e398f02be2a3b7205b3c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public boolean isSelected(File basedir, String filename, File file)", "signatureAfterChange": "     public boolean isSelected(File basedir, String filename, File file)", "diff": ["-", "+        if (pattern != null) {", "+        } else {", "+            if (reg == null) {", "+                reg = new RegularExpression();", "+                reg.setPattern(regex);", "+                expression = reg.getRegexp(getProject());", "+            }", "+            int options = Regexp.MATCH_DEFAULT;", "+            if (!casesensitive) {", "+                options |= Regexp.MATCH_CASE_INSENSITIVE;", "+            }", "+            return expression.matches(filename, options) == !negated;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "444de4be481b9ea6c9fd325a2f1ee963", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "e7cca3123ec529a60595f5a8f86d874b52db026a", "commitAfterChange": "9ce98074308e646c89b868a37f5ed90c0ce3396b", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void execute()", "signatureAfterChange": "     public void execute()", "diff": ["+", "+        // if binary check if incompatible attributes are used", "+        if (binary) {", "+            if (destinationFile == null) {", "+                throw new BuildException(", "+                    \"DestFile attribute is required for binary concatenation\");", "+            }", "+", "+            if (textBuffer != null) {", "+                throw new BuildException(", "+                    \"Nested text is incompatible with binary concatenation\");", "+            }", "+            if (encoding != null || outputEncoding != null) {", "+                throw new BuildException(", "+                    \"Seting input or output encoding is incompatible with binary\"", "+                    + \" concatenation\");", "+            }", "+            if (filterChains != null) {", "+                throw new BuildException(", "+                    \"Setting filters is incompatible with binary concatenation\");", "+            }", "+            if (fixLastLine) {", "+                throw new BuildException(", "+                    \"Setting fixlastline is incompatible with binary concatenation\");", "+            }", "+            if (header != null || footer != null) {", "+                throw new BuildException(", "+                    \"Nested header or footer is incompatible with binary concatenation\");", "+            }", "+        }", "-        cat();", "+        if (binary) {", "+            binaryCat();", "+        } else {", "+            cat();", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e25a687c3e4b062ed2ae49bf2d304ad", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/todo/taskdefs/ExecuteJava.java", "commitBeforeChange": "7513ab1efa12321b3e2014764bfb23d16b425caf", "commitAfterChange": "299ea801bc1031e308bfe07a22e51edd1b972872", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void execNonForked( final TaskContext context )         throws TaskException", "signatureAfterChange": "     public void executeNonForked( final TaskContext context )         throws TaskException", "diff": ["-    private void execNonForked( final TaskContext context )", "+    public void executeNonForked( final TaskContext context )", "+        if( m_className == null )", "+        {", "+            throw new TaskException( \"Classname must not be null.\" );", "+        }", "+        if( m_jar != null )", "+        {", "+            throw new TaskException( \"Cannot execute a jar in non-forked mode.\" );", "+        }", "+        if( m_vmArgs.size() > 0 )", "+        {", "+            context.warn( \"JVM args ignored when same JVM is used.\" );", "+        }", "+        if( m_workingDirectory != null )", "+        {", "+            context.warn( \"Working directory ignored when same JVM is used.\" );", "+        }", "+        if( m_sysProperties.size() > 0 )", "+        {", "+            context.warn( \"System properties ignored when same JVM is used.\" );", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79ea43e833e7c4a6b4a3dddd1dc09486", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Patch.java", "commitBeforeChange": "e6fb386da04e84cc10062f3abf29ee30c7c8cd08", "commitAfterChange": "c1c1f4fcff7032808ed575c58ad56dd0821b05b7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public void execute() throws BuildException", "signatureAfterChange": "      public void execute() throws BuildException", "diff": ["+", "-        ", "-        exe.setCommandline(toExecute.getCommandline());", "+", "+        if (directory != null) {", "+            if (directory.exists() && directory.isDirectory()) {", "+                exe.setWorkingDirectory(directory);", "+            } else if (!directory.isDirectory()) {", "+                throw new BuildException(directory + \" is not a directory.\",", "+                                         location);", "+            } else {", "+                throw new BuildException(\"directory \" + directory", "+                                         + \" doesn\\'t exist\", location);", "+            }", "+        } else {", "+            exe.setWorkingDirectory(getProject().getBaseDir());", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9762474cc2049f9ec9c88cf88642fc16", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/WLRun.java", "commitBeforeChange": "e49a5fb5644508cc28576955cebb347071848b94", "commitAfterChange": "c73084faf5d4b9c3a7b6d692908200303dc21d02", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-        if (beaHome != null) {", "-            executeWLS6();", "-        }", "-        else {", "-            executeWLS();", "-        }", "-    }", "+        if (!securityPolicyFile.exists()) {", "+            // OK it maybe an absolute path. Use the project to resolve it", "+            securityPolicyFile = project.resolveFile(securityPolicy);", "+            if (!securityPolicyFile.exists()) {", "+                throw new BuildException(\"Security policy \" + securityPolicy +", "+                                         \" was not found.\");", "+            }                                         ", "+        }", "+", "+", "+        if (beaHome != null) {", "+            executeWLS6(securityPolicyFile);", "+        }", "+        else {", "+            executeWLS(securityPolicyFile);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cae999ce3b6efd61b0cfdb6c3990de62", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Get.java", "commitBeforeChange": "13eb95ae4d6f35ee540b77b1d8eef2e44c7b2720", "commitAfterChange": "f0282fd8b18b09bbd18ee4b82fed883f872a802a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-\ttry {", "+        if (source == null) {", "+            throw new BuildException(\"src attribute is required\", location);", "+        }", "+", "+        if (dest == null) {", "+            throw new BuildException(\"dest attribute is required\", location);", "+        }", "+", "+        if (dest.exists() && dest.isDirectory()) { ", "+            throw new BuildException(\"The specified destination is a directory\",", "+                                     location);", "+        }", "+", "+        if (dest.exists() && !dest.canWrite()) { ", "+            throw new BuildException(\"Can't write to \" + dest.getAbsolutePath(),", "+                                     location);", "+        }", "+", "+        try {", "-\t    \t//set the timestamp to the file date.", "+\t    //set the timestamp to the file date."]}]}
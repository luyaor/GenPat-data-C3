{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3174c7da07045070a094a2fb07ddf5f7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22a463c7c70bf6e8c30489e5b93a774c", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/Tar.java", "commitBeforeChange": "e854f481c9a76b41680eb0f605de524556b059ad", "commitAfterChange": "7a3448dcea316f454dd0ba470f8b0825504ae309", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void execute()         throws BuildException", "signatureAfterChange": "      public void execute()         throws BuildException", "diff": ["-            throw new BuildException( \"tarfile attribute must be set!\",", "-                location );", "+            throw new BuildException( \"tarfile attribute must be set!\" );", "-            throw new BuildException( \"tarfile is a directory!\",", "-                location );", "+            throw new BuildException( \"tarfile is a directory!\" );", "-            throw new BuildException( \"Can not write to the specified tarfile!\",", "-                location );", "+            throw new BuildException( \"Can not write to the specified tarfile!\" );", "-                throw new BuildException( \"basedir does not exist!\", location );", "+                throw new BuildException( \"basedir does not exist!\" );", "-            throw new BuildException( \"You must supply either a basdir attribute or some nested filesets.\",", "-                location );", "+            throw new BuildException( \"You must supply either a basdir attribute or some nested filesets.\" );", "-        for( Enumeration e = filesets.elements(); e.hasMoreElements();  )", "+        for( Enumeration e = filesets.elements(); e.hasMoreElements(); )", "-            TarFileSet fs = ( TarFileSet )e.nextElement();", "+            TarFileSet fs = (TarFileSet)e.nextElement();", "-                if( tarFile.equals( new File( fs.getDir( project ), files[i] ) ) )", "+                if( tarFile.equals( new File( fs.getDir( project ), files[ i ] ) ) )", "-                    throw new BuildException( \"A tar file cannot include itself\", location );", "+                    throw new BuildException( \"A tar file cannot include itself\" );", "-                Project.MSG_INFO );", "+                 Project.MSG_INFO );", "-            for( Enumeration e = filesets.elements(); e.hasMoreElements();  )", "+            for( Enumeration e = filesets.elements(); e.hasMoreElements(); )", "-                TarFileSet fs = ( TarFileSet )e.nextElement();", "+                TarFileSet fs = (TarFileSet)e.nextElement();", "-                    File f = new File( fs.getDir( project ), files[i] );", "-                    String name = files[i].replace( File.separatorChar, '/' );", "+                    File f = new File( fs.getDir( project ), files[ i ] );", "+                    String name = files[ i ].replace( File.separatorChar, '/' );", "-            throw new BuildException( msg, ioe, location );", "+            throw new BuildException( msg, ioe );", "-                {}", "+                {", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9203b83dc6eb3b94b44d57f6dd96db13", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/Tar.java", "commitBeforeChange": "e854f481c9a76b41680eb0f605de524556b059ad", "commitAfterChange": "7a3448dcea316f454dd0ba470f8b0825504ae309", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void execute()         throws BuildException", "signatureAfterChange": "      public void execute()         throws BuildException", "diff": ["-            throw new BuildException( \"tarfile attribute must be set!\",", "-                location );", "+            throw new BuildException( \"tarfile attribute must be set!\" );", "-            throw new BuildException( \"tarfile is a directory!\",", "-                location );", "+            throw new BuildException( \"tarfile is a directory!\" );", "-            throw new BuildException( \"Can not write to the specified tarfile!\",", "-                location );", "+            throw new BuildException( \"Can not write to the specified tarfile!\" );", "-                throw new BuildException( \"basedir does not exist!\", location );", "+                throw new BuildException( \"basedir does not exist!\" );", "-            throw new BuildException( \"You must supply either a basdir attribute or some nested filesets.\",", "-                location );", "+            throw new BuildException( \"You must supply either a basdir attribute or some nested filesets.\" );", "-        for( Enumeration e = filesets.elements(); e.hasMoreElements();  )", "+        for( Enumeration e = filesets.elements(); e.hasMoreElements(); )", "-            TarFileSet fs = ( TarFileSet )e.nextElement();", "+            TarFileSet fs = (TarFileSet)e.nextElement();", "-                if( tarFile.equals( new File( fs.getDir( project ), files[i] ) ) )", "+                if( tarFile.equals( new File( fs.getDir( project ), files[ i ] ) ) )", "-                    throw new BuildException( \"A tar file cannot include itself\", location );", "+                    throw new BuildException( \"A tar file cannot include itself\" );", "-                Project.MSG_INFO );", "+                 Project.MSG_INFO );", "-            for( Enumeration e = filesets.elements(); e.hasMoreElements();  )", "+            for( Enumeration e = filesets.elements(); e.hasMoreElements(); )", "-                TarFileSet fs = ( TarFileSet )e.nextElement();", "+                TarFileSet fs = (TarFileSet)e.nextElement();", "-                    File f = new File( fs.getDir( project ), files[i] );", "-                    String name = files[i].replace( File.separatorChar, '/' );", "+                    File f = new File( fs.getDir( project ), files[ i ] );", "+                    String name = files[ i ].replace( File.separatorChar, '/' );", "-            throw new BuildException( msg, ioe, location );", "+            throw new BuildException( msg, ioe );", "-                {}", "+                {", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebc881bfcd76dbd88984bc99ece6788a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/pvcs/Pvcs.java", "commitBeforeChange": "537a07b019e2de8769ae71acad23e90e725050f8", "commitAfterChange": "0e650797a55ba63d32831b2b77e809554e31bcd2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void execute() throws org.apache.tools.ant.BuildException", "signatureAfterChange": "     public void execute() throws org.apache.tools.ant.BuildException", "diff": ["+        File tmp2 = null;", "-            tmp = new File(\"pvcs_ant_\"+(new Random(System.currentTimeMillis())).nextLong()+\".log\");", "+            Random rand = new Random(System.currentTimeMillis());", "+            tmp = new File(\"pvcs_ant_\"+rand.nextLong()+\".log\");", "+            tmp2 = new File(\"pvcs_ant_\"+rand.nextLong()+\".log\");", "+            log(\"Executing \" + commandLine.toString(), Project.MSG_VERBOSE);", "-                throw new BuildException(\"Communication between ant and pvcs failed\");", "-                                ", "-            // Create foldes in workspace", "+                throw new BuildException(\"Communication between ant and pvcs failed. No output generated from executing PVCS commandline interface \\\"pcli\\\" and \\\"get\\\"\");", "+", "+            // Create folders in workspace", "+            log(\"Creating folders\", Project.MSG_INFO);", "+", "+            // Massage PCLI lvf output transforming '\\' to '/' so get command works appropriately", "+            massagePCLI(tmp, tmp2);", "-            commandLine.createArgument().setValue(\"@\"+tmp.getAbsolutePath());", "+", "+            if (updateOnly) {", "+                commandLine.createArgument().setValue(\"-U\");", "+            }", "+", "+            commandLine.createArgument().setValue(\"@\"+tmp2.getAbsolutePath());", "+            log(\"Getting files\", Project.MSG_INFO);", "+            log(\"Executing \" + commandLine.toString(), Project.MSG_VERBOSE);", "-                String msg = \"Failed executing: \" + commandLine.toString();", "+                String msg = \"Failed executing: \" + commandLine.toString() + \". Return code was \"+result;", "-            String msg = \"Failed executing: \" + commandLine.toString();", "-            throw new BuildException(e.getMessage(),location);", "+            String msg = \"Failed executing: \" + commandLine.toString() + \". Exception: \"+e.getMessage();", "+            throw new BuildException(msg,location);", "-            String msg = \"Failed executing: \" + commandLine.toString();", "-            throw new BuildException(e.getMessage(),location);", "+            String msg = \"Failed executing: \" + commandLine.toString() + \". Exception: \"+e.getMessage();", "+            throw new BuildException(msg,location);", "-            String msg = \"Failed executing: \" + commandLine.toString();", "-            throw new BuildException(e.getMessage(),location);", "+            String msg = \"Failed executing: \" + commandLine.toString() + \". Exception: \"+e.getMessage();", "+            throw new BuildException(msg,location);", "+            }", "+            if (tmp2 != null) {", "+                tmp2.delete();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b84055225ed3fd65a5a899fb1d4dd34e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "514f4854b7c7848caf7038f8d9e17d69", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/selectors/PresentSelectorTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testSelectionBehaviour()", "signatureAfterChange": "     @Test     public void testSelectionBehaviour()", "diff": ["+    @Test", "-        try {", "-            makeBed();", "+        File beddir = selectorRule.getBeddir();", "+        ", "+        s = new PresentSelector();", "+        s.setTargetdir(beddir);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TTTTTTTTTTTT\", results);", "-            s = (PresentSelector)getInstance();", "-            s.setTargetdir(beddir);", "-            results = selectionString(s);", "-            assertEquals(\"TTTTTTTTTTTT\", results);", "+        s = new PresentSelector();", "+        s.setTargetdir(beddir);", "+        m = s.createMapper();", "+        m.setType(identity);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TTTTTTTTTTTT\", results);", "-            s = (PresentSelector)getInstance();", "-            s.setTargetdir(beddir);", "-            m = s.createMapper();", "-            m.setType(identity);", "-            results = selectionString(s);", "-            assertEquals(\"TTTTTTTTTTTT\", results);", "+        s = new PresentSelector();", "+        File subdir = new File(System.getProperty(\"root\"), \"src/etc/testcases/taskdefs/expected\");", "+        s.setTargetdir(subdir);", "+        m = s.createMapper();", "+        m.setType(flatten);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TTTTTTTTTTTF\", results);", "-            s = (PresentSelector)getInstance();", "-            File subdir = new File(System.getProperty(\"root\"), \"src/etc/testcases/taskdefs/expected\");", "-            s.setTargetdir(subdir);", "-            m = s.createMapper();", "-            m.setType(flatten);", "-            results = selectionString(s);", "-            assertEquals(\"TTTTTTTTTTTF\", results);", "+        s = new PresentSelector();", "+        s.setTargetdir(beddir);", "+        m = s.createMapper();", "+        m.setType(merge);", "+        m.setTo(\"asf-logo.gif.gz\");", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TTTTTTTTTTTT\", results);", "-            s = (PresentSelector)getInstance();", "-            s.setTargetdir(beddir);", "-            m = s.createMapper();", "-            m.setType(merge);", "-            m.setTo(\"asf-logo.gif.gz\");", "-            results = selectionString(s);", "-            assertEquals(\"TTTTTTTTTTTT\", results);", "+        s = new PresentSelector();", "+        subdir = new File(beddir, \"tar/bz2\");", "+        s.setTargetdir(subdir);", "+        m = s.createMapper();", "+        m.setType(glob);", "+        m.setFrom(\"*.bz2\");", "+        m.setTo(\"*.tar.bz2\");", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"FFTFFFFFFFFF\", results);", "-            s = (PresentSelector)getInstance();", "-            subdir = new File(beddir, \"tar/bz2\");", "-            s.setTargetdir(subdir);", "-            m = s.createMapper();", "-            m.setType(glob);", "-            m.setFrom(\"*.bz2\");", "-            m.setTo(\"*.tar.bz2\");", "-            results = selectionString(s);", "-            assertEquals(\"FFTFFFFFFFFF\", results);", "+            ", "+        s = new PresentSelector();", "+        subdir = new File(selectorRule.getOutputDir(), \"selectortest2\");", "+        s.setTargetdir(subdir);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TTTFFTTTTTTT\", results);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TTTFFTTTTTTT\", results);", "-            try {", "-                makeMirror();", "-", "-                s = (PresentSelector)getInstance();", "-                subdir = new File(getOutputDir(), \"selectortest2\");", "-                s.setTargetdir(subdir);", "-                results = mirrorSelectionString(s);", "-                assertEquals(\"TTTFFTTTTTTT\", results);", "-                results = selectionString(s);", "-                assertEquals(\"TTTFFTTTTTTT\", results);", "-", "-", "-            }", "-            finally {", "-                cleanupMirror();", "-            }", "-", "-        }", "-        finally {", "-            cleanupBed();", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eedfc20d9d86c0b6a71589e05d5c0550", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/types/selectors/SizeSelectorTest.java", "commitBeforeChange": "7eab7687db21f8a0c35b66dd9fae9e7c1178d5d5", "commitAfterChange": "b61c80746dd5df73899390826e197d2656784f91", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testSelectionBehaviour()", "signatureAfterChange": "     @Test     public void testSelectionBehaviour()", "diff": ["+    @Test", "-        try {", "-            makeBed();", "+    ", "+        s = new SizeSelector();", "+        s.setValue(10);", "+        s.setWhen(less);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TFFFFFFFFFFT\", results);", "-            s = (SizeSelector)getInstance();", "-            s.setValue(10);", "-            s.setWhen(less);", "-            results = selectionString(s);", "-            assertEquals(\"TFFFFFFFFFFT\", results);", "+        s = new SizeSelector();", "+        s.setValue(10);", "+        s.setWhen(more);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TTTTTTTTTTTT\", results);", "-            s = (SizeSelector)getInstance();", "-            s.setValue(10);", "-            s.setWhen(more);", "-            results = selectionString(s);", "-            assertEquals(\"TTTTTTTTTTTT\", results);", "+        s = new SizeSelector();", "+        s.setValue(32);", "+        s.setWhen(equal);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TFFFTFFFFFFT\", results);", "-            s = (SizeSelector)getInstance();", "-            s.setValue(32);", "-            s.setWhen(equal);", "-            results = selectionString(s);", "-            assertEquals(\"TFFFTFFFFFFT\", results);", "+        s = new SizeSelector();", "+        s.setValue(7);", "+        s.setWhen(more);", "+        s.setUnits(kilo);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TFTFFTTTTTTT\", results);", "-            s = (SizeSelector)getInstance();", "-            s.setValue(7);", "-            s.setWhen(more);", "-            s.setUnits(kilo);", "-            results = selectionString(s);", "-            assertEquals(\"TFTFFTTTTTTT\", results);", "+        s = new SizeSelector();", "+        s.setValue(7);", "+        s.setWhen(more);", "+        s.setUnits(kibi);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TFTFFFTTFTTT\", results);", "-            s = (SizeSelector)getInstance();", "-            s.setValue(7);", "-            s.setWhen(more);", "-            s.setUnits(kibi);", "-            results = selectionString(s);", "-            assertEquals(\"TFTFFFTTFTTT\", results);", "+        s = new SizeSelector();", "+        s.setValue(99999);", "+        s.setWhen(more);", "+        s.setUnits(tibi);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TFFFFFFFFFFT\", results);", "-            s = (SizeSelector)getInstance();", "-            s.setValue(99999);", "-            s.setWhen(more);", "-            s.setUnits(tibi);", "-            results = selectionString(s);", "-            assertEquals(\"TFFFFFFFFFFT\", results);", "-", "-            s = (SizeSelector)getInstance();", "-            Parameter param1 = new Parameter();", "-            Parameter param2 = new Parameter();", "-            Parameter param3 = new Parameter();", "-            param1.setName(\"value\");", "-            param1.setValue(\"20\");", "-            param2.setName(\"units\");", "-            param2.setValue(\"Ki\");", "-            param3.setName(\"when\");", "-            param3.setValue(\"more\");", "-            Parameter[] params = {param1,param2,param3};", "-            s.setParameters(params);", "-            results = selectionString(s);", "-            assertEquals(\"TFFFFFFTFFTT\", results);", "-        }", "-        finally {", "-            cleanupBed();", "-        }", "+        s = new SizeSelector();", "+        Parameter param1 = new Parameter();", "+        Parameter param2 = new Parameter();", "+        Parameter param3 = new Parameter();", "+        param1.setName(\"value\");", "+        param1.setValue(\"20\");", "+        param2.setName(\"units\");", "+        param2.setValue(\"Ki\");", "+        param3.setName(\"when\");", "+        param3.setValue(\"more\");", "+        Parameter[] params = {param1,param2,param3};", "+        s.setParameters(params);", "+        results = selectorRule.selectionString(s);", "+        assertEquals(\"TFFFFFFTFFTT\", results);", "+    "]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b38f09d90aa9e6962835731b29c72515", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "934435f00372377f25f59c046a805b96", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/PathConvert.java", "commitBeforeChange": "b5b99c769a21d3602ee35948cf004925f03464ba", "commitAfterChange": "25253f3faa839d0341bdfe9eecb06d8791fcf8ea", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+        Path savedPath = path;", "+        String savedPathSep = pathSep; // may be altered in validateSetup", "+        String savedDirSep = dirSep; // may be altered in validateSetup", "-        // If we are a reference, create a Path from the reference", "-        if( isReference() ) {", "-            path = new Path(getProject()).createPath();", "-", "-            Object obj = refid.getReferencedObject(getProject());", "-", "-            if( obj instanceof Path ) {", "-                path.setRefid(refid);", "-            } else if( obj instanceof FileSet ) {", "-                FileSet fs = (FileSet)obj;", "-                path.addFileset( fs );", "-            } else if( obj instanceof DirSet ) {", "-                DirSet ds = (DirSet)obj;", "-                path.addDirset( ds );", "-            } else if( obj instanceof FileList ) {", "-                FileList fl = (FileList)obj;", "-                path.addFilelist( fl );", "+        try {", "+            // If we are a reference, create a Path from the reference", "+            if( isReference() ) {", "+                path = new Path(getProject()).createPath();", "-            } else {", "-                throw new BuildException( \"'refid' does not refer to a path, fileset, dirset, or filelist.\" );", "-            }", "-        }", "-", "-        validateSetup();                    // validate our setup", "-", "-        // Currently, we deal with only two path formats: Unix and Windows", "-        // And Unix is everything that is not Windows", "-        // (with the exception for NetWare below)", "-", "-        // for NetWare and OS/2, piggy-back on Windows, since here and", "-        // in the apply code, the same assumptions can be made as with", "-        // windows - that \\\\ is an OK separator, and do comparisons", "-        // case-insensitive.", "-        onWindows = Os.isFamily(\"dos\");", "-", "-        String fromDirSep = onWindows ? \"\\\\\" : \"/\";", "-", "-        StringBuffer rslt = new StringBuffer( 100 );", "-", "-        // Get the list of path components in canonical form", "-        String[] elems = path.list();", "-", "-        for( int i=0; i < elems.length; i++ ) {", "-            String elem = elems[i];", "-", "-            elem = mapElement( elem );      // Apply the path prefix map", "-", "-", "-            // Now convert the path and file separator characters from the", "-            // current os to the target os.", "-", "-            if( i != 0 ) {", "-                rslt.append( pathSep );", "-            }", "-", "-            StringTokenizer stDirectory = ", "-                new StringTokenizer(elem, fromDirSep, true);", "-            String token = null;", "-", "-            while ( stDirectory.hasMoreTokens() ) {", "-                token = stDirectory.nextToken();", "-", "-                if (fromDirSep.equals(token)) {", "-                    rslt.append( dirSep ); ", "-                }", "-                else {", "-                    rslt.append( token );", "+                Object obj = refid.getReferencedObject(getProject());", "+                ", "+                if( obj instanceof Path ) {", "+                    path.setRefid(refid);", "+                } else if( obj instanceof FileSet ) {", "+                    FileSet fs = (FileSet)obj;", "+                    path.addFileset( fs );", "+                } else if( obj instanceof DirSet ) {", "+                    DirSet ds = (DirSet)obj;", "+                    path.addDirset( ds );", "+                } else if( obj instanceof FileList ) {", "+                    FileList fl = (FileList)obj;", "+                    path.addFilelist( fl );", "+                    ", "+                } else {", "+                    throw new BuildException( \"'refid' does not refer to a \"", "+                                              + \"path, fileset, dirset, or \"", "+                                              + \"filelist.\" );", "+            ", "+            validateSetup();                    // validate our setup", "+            ", "+            // Currently, we deal with only two path formats: Unix and Windows", "+            // And Unix is everything that is not Windows", "+            // (with the exception for NetWare and OS/2 below)", "+            ", "+            // for NetWare and OS/2, piggy-back on Windows, since here and", "+            // in the apply code, the same assumptions can be made as with", "+            // windows - that \\\\ is an OK separator, and do comparisons", "+            // case-insensitive.", "+            String fromDirSep = onWindows ? \"\\\\\" : \"/\";", "+            ", "+            StringBuffer rslt = new StringBuffer( 100 );", "+            ", "+            // Get the list of path components in canonical form", "+            String[] elems = path.list();", "+            ", "+            for( int i=0; i < elems.length; i++ ) {", "+                String elem = elems[i];", "+                ", "+                elem = mapElement( elem );      // Apply the path prefix map", "+                ", "+                ", "+                // Now convert the path and file separator characters from the", "+                // current os to the target os.", "+                ", "+                if( i != 0 ) {", "+                    rslt.append( pathSep );", "+                }", "+                ", "+                StringTokenizer stDirectory = ", "+                    new StringTokenizer(elem, fromDirSep, true);", "+                String token = null;", "+                ", "+                while ( stDirectory.hasMoreTokens() ) {", "+                    token = stDirectory.nextToken();", "+                    ", "+                    if (fromDirSep.equals(token)) {", "+                        rslt.append( dirSep ); ", "+                    }", "+                    else {", "+                        rslt.append( token );", "+                    }", "+                }", "+            }", "+", "+            // Place the result into the specified property", "+            String value = rslt.toString();", "+            ", "+            log( \"Set property \" + property + \" = \" + value, ", "+                 Project.MSG_VERBOSE );", "+            ", "+            getProject().setNewProperty( property, value );", "+        } finally {", "+            path = savedPath;", "+            dirSep = savedDirSep;", "+            pathSep = savedPathSep;", "-", "-        // Place the result into the specified property", "-        String value = rslt.toString();", "-", "-        log( \"Set property \" + property + \" = \" + value, Project.MSG_VERBOSE );", "-", "-        getProject().setNewProperty( property, value );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da59a0c13fb7559d67a30816b22ffdba", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/SQLExec.java", "commitBeforeChange": "2d446f3df2b49ea07727bbd5b330f45a95024d42", "commitAfterChange": "f152ff3665854eda95df9916a022351da219efac", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+        Vector savedTransaction = (Vector) transactions.clone();", "+        String savedSqlCommand = sqlCommand;", "+", "-        if (srcFile == null && sqlCommand.length()==0 && filesets.isEmpty()) { ", "-            if (transactions.size() == 0) {", "-                throw new BuildException(\"Source file or fileset, transactions or sql statement must be set!\", location);", "+        try {", "+            if (srcFile == null && sqlCommand.length()==0 ", "+                && filesets.isEmpty()) { ", "+                if (transactions.size() == 0) {", "+                    throw new BuildException(\"Source file or fileset, \"", "+                                             + \"transactions or sql statement \"", "+                                             + \"must be set!\", location);", "+                }", "-        } else { ", "+            if (driver == null) {", "+                throw new BuildException(\"Driver attribute must be set!\", ", "+                                         location);", "+            }", "+            if (userId == null) {", "+                throw new BuildException(\"User Id attribute must be set!\", ", "+                                         location);", "+            }", "+            if (password == null) {", "+                throw new BuildException(\"Password attribute must be set!\", ", "+                                         location);", "+            }", "+            if (url == null) {", "+                throw new BuildException(\"Url attribute must be set!\", ", "+                                         location);", "+            }", "+            if (srcFile != null && !srcFile.exists()) {", "+                throw new BuildException(\"Source file does not exist!\", ", "+                                         location);", "+            }", "+            Driver driverInstance = null;", "+            try {", "+                Class dc;", "+                if (classpath != null) {", "+                    // check first that it is not already loaded otherwise", "+                    // consecutive runs seems to end into an OutOfMemoryError", "+                    // or it fails when there is a native library to load", "+                    // several times.", "+                    // this is far from being perfect but should work", "+                    // in most cases.", "+                    synchronized (loaderMap){", "+                        if (caching){", "+                            loader = (AntClassLoader)loaderMap.get(driver);", "+                        }", "+                        if (loader == null){", "+                            log( \"Loading \" + driver ", "+                                 + \" using AntClassLoader with classpath \" ", "+                                 + classpath,", "+                                 Project.MSG_VERBOSE );", "+                            loader = new AntClassLoader(project, classpath);", "+                            if (caching){", "+                                loaderMap.put(driver, loader);", "+                            }", "+                        } else {", "+                            log(\"Loading \" + driver ", "+                                + \" using a cached AntClassLoader.\",", "+                                Project.MSG_VERBOSE);", "+                        }", "+                    }", "+                    dc = loader.loadClass(driver);", "+                }", "+                else {", "+                    log(\"Loading \" + driver + \" using system loader.\", ", "+                        Project.MSG_VERBOSE);", "+                    dc = Class.forName(driver);", "+                }", "+                driverInstance = (Driver) dc.newInstance();", "+            }catch(ClassNotFoundException e){", "+                throw new BuildException(\"Class Not Found: JDBC driver \" ", "+                                         + driver + \" could not be loaded\",", "+                                         location);", "+            }catch(IllegalAccessException e){", "+                throw new BuildException(\"Illegal Access: JDBC driver \" ", "+                                         + driver + \" could not be loaded\", ", "+                                         location);", "+            }catch(InstantiationException e) {", "+                throw new BuildException(\"Instantiation Exception: JDBC driver \"", "+                                         + driver + \" could not be loaded\", ", "+                                         location);", "+            }", "+", "-", "+                ", "-", "+                ", "-", "+            ", "-        }", "-        if (driver == null) {", "-            throw new BuildException(\"Driver attribute must be set!\", location);", "-        }", "-        if (userId == null) {", "-            throw new BuildException(\"User Id attribute must be set!\", location);", "-        }", "-        if (password == null) {", "-            throw new BuildException(\"Password attribute must be set!\", location);", "-        }", "-        if (url == null) {", "-            throw new BuildException(\"Url attribute must be set!\", location);", "-        }", "-        if (srcFile != null && !srcFile.exists()) {", "-            throw new BuildException(\"Source file does not exist!\", location);", "-        }", "-        Driver driverInstance = null;", "-        try {", "-            Class dc;", "-            if (classpath != null) {", "-                // check first that it is not already loaded otherwise", "-                // consecutive runs seems to end into an OutOfMemoryError", "-                // or it fails when there is a native library to load", "-                // several times.", "-                // this is far from being perfect but should work in most cases.", "-                synchronized (loaderMap){", "-                    if (caching){", "-                        loader = (AntClassLoader)loaderMap.get(driver);", "-                    }", "-                    if (loader == null){", "-                        log( \"Loading \" + driver + \" using AntClassLoader with classpath \" + classpath,", "-                             Project.MSG_VERBOSE );", "-                        loader = new AntClassLoader(project, classpath);", "-                        if (caching){", "-                            loaderMap.put(driver, loader);", "-                        }", "-                    } else {", "-                        log(\"Loading \" + driver + \" using a cached AntClassLoader.\",", "-                                Project.MSG_VERBOSE);", "-                    }", "+            try{", "+                log(\"connecting to \" + url, Project.MSG_VERBOSE );", "+                Properties info = new Properties();", "+                info.put(\"user\", userId);", "+                info.put(\"password\", password);", "+                conn = driverInstance.connect(url, info);", "+                ", "+                if (conn == null) {", "+                    // Driver doesn't understand the URL", "+                    throw new SQLException(\"No suitable Driver for \"+url);", "-                dc = loader.loadClass(driver);", "-            }", "-            else {", "-                log(\"Loading \" + driver + \" using system loader.\", Project.MSG_VERBOSE);", "-                dc = Class.forName(driver);", "-            }", "-            driverInstance = (Driver) dc.newInstance();", "-        }catch(ClassNotFoundException e){", "-            throw new BuildException(\"Class Not Found: JDBC driver \" + driver + \" could not be loaded\", location);", "-        }catch(IllegalAccessException e){", "-            throw new BuildException(\"Illegal Access: JDBC driver \" + driver + \" could not be loaded\", location);", "-        }catch(InstantiationException e) {", "-            throw new BuildException(\"Instantiation Exception: JDBC driver \" + driver + \" could not be loaded\", location);", "-        }", "+                ", "+                if (!isValidRdbms(conn)) {", "+                    return;", "+                }", "-        try{", "-            log(\"connecting to \" + url, Project.MSG_VERBOSE );", "-            Properties info = new Properties();", "-            info.put(\"user\", userId);", "-            info.put(\"password\", password);", "-            conn = driverInstance.connect(url, info);", "+                conn.setAutoCommit(autocommit);", "-            if (conn == null) {", "-                // Driver doesn't understand the URL", "-                throw new SQLException(\"No suitable Driver for \"+url);", "-            }", "-", "-            if (!isValidRdbms(conn)) {", "-              return;", "-            }", "-", "-            conn.setAutoCommit(autocommit);", "-", "-            statement = conn.createStatement();", "+                statement = conn.createStatement();", "-            PrintStream out = System.out;", "-            try {", "-                if (output != null) {", "-                    log(\"Opening PrintStream to output file \" + output, Project.MSG_VERBOSE);", "-                    out = new PrintStream(new BufferedOutputStream(new FileOutputStream(output.getAbsolutePath(), append)));", "-                }", "-                        ", "-                // Process all transactions", "-                for (Enumeration e = transactions.elements(); ", "-                     e.hasMoreElements();) {", "+                PrintStream out = System.out;", "+                try {", "+                    if (output != null) {", "+                        log(\"Opening PrintStream to output file \" + output, ", "+                            Project.MSG_VERBOSE);", "+                        out = new PrintStream(", "+                                  new BufferedOutputStream(", "+                                      new FileOutputStream(output", "+                                                           .getAbsolutePath(),", "+                                                           append)));", "+                    }", "+                    ", "+                    // Process all transactions", "+                    for (Enumeration e = transactions.elements(); ", "+                         e.hasMoreElements();) {", "-                    ((Transaction) e.nextElement()).runTransaction(out);", "-                    if (!autocommit) {", "-                        log(\"Commiting transaction\", Project.MSG_VERBOSE);", "-                        conn.commit();", "+                        ((Transaction) e.nextElement()).runTransaction(out);", "+                        if (!autocommit) {", "+                            log(\"Commiting transaction\", Project.MSG_VERBOSE);", "+                            conn.commit();", "+                        }", "+                finally {", "+                    if (out != null && out != System.out) {", "+                        out.close();", "+                    }", "+                }", "+            } catch(IOException e){", "+                if (!autocommit && conn != null && onError.equals(\"abort\")) {", "+                    try {", "+                        conn.rollback();", "+                    } catch (SQLException ex) {}", "+                }", "+                throw new BuildException(e, location);", "+            } catch(SQLException e){", "+                if (!autocommit && conn != null && onError.equals(\"abort\")) {", "+                    try {", "+                        conn.rollback();", "+                    } catch (SQLException ex) {}", "+                }", "+                throw new BuildException(e, location);", "-                if (out != null && out != System.out) {", "-                    out.close();", "-                }", "-            }", "-        } catch(IOException e){", "-            if (!autocommit && conn != null && onError.equals(\"abort\")) {", "-                    conn.rollback();", "-                } catch (SQLException ex) {}", "-            }", "-            throw new BuildException(e, location);", "-        } catch(SQLException e){", "-            if (!autocommit && conn != null && onError.equals(\"abort\")) {", "-                try {", "-                    conn.rollback();", "-                } catch (SQLException ex) {}", "-            }", "-            throw new BuildException(e, location);", "-        }", "-        finally {", "-            try {", "-                if (statement != null) {", "-                    statement.close();", "+                    if (statement != null) {", "+                        statement.close();", "+                    }", "+                    if (conn != null) {", "+                        conn.close();", "+                    }", "-                if (conn != null) {", "-                    conn.close();", "-                }", "+                catch (SQLException e) {}", "-            catch (SQLException e) {}", "+            ", "+            log(goodSql + \" of \" + totalSql + ", "+                \" SQL statements executed successfully\");", "+        } finally {", "+            transactions = savedTransaction;", "+            sqlCommand = savedSqlCommand;", "-          ", "-        log(goodSql + \" of \" + totalSql + ", "-            \" SQL statements executed successfully\");"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c156aef1e7a0cfc215f05d3f9e64aabe", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d29f7376afb8cce9d3a54bfa99b6d41", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/GenericDeploymentTool.java", "commitBeforeChange": "018aa8685b246a8bb269832fcbc935874eff0c1e", "commitAfterChange": "e545bf4a3695a90cc6d3645fb20d5dbacc7ec988", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 20, "signatureBeforeChange": "     protected void writeJar(String baseName, File jarfile, Hashtable files) throws BuildException", "signatureAfterChange": "     protected void writeJar(String baseName, File jarfile, Hashtable files) throws BuildException", "diff": ["-        JarOutputStream jarStream = null;", "-        Iterator entryIterator = null;", "-        String entryName = null;", "-        File entryFile = null;", "-\tFile entryDir = null;", "-\tString innerfiles[] = null;", "+        JarOutputStream jarStream = null;", "+            // clean the addedfiles Vector ", "+            addedfiles = new ArrayList();", "+", "+            ", "-            entryIterator = files.keySet().iterator();", "-            while (entryIterator.hasNext()) {", "-                entryName = (String) entryIterator.next();", "-                entryFile = (File) files.get(entryName);", "+            for (Iterator entryIterator = files.keySet().iterator(); entryIterator.hasNext(); ) {", "+                String entryName = (String) entryIterator.next();", "+                File entryFile = (File) files.get(entryName);", "-                getTask().log(\"adding file '\" + entryName + \"'\",", "+                log(\"adding file '\" + entryName + \"'\",", "-                addFileToJar(jarStream,", "-                             new FileInputStream(entryFile),", "-                             entryName);", "+                addFileToJar(jarStream, entryFile, entryName);", "-\t\t// See if there are any inner classes for this class and add them in if there are", "-\t\tInnerClassFilenameFilter flt = new InnerClassFilenameFilter(entryFile.getName());", "-\t\tentryDir = entryFile.getParentFile();", "-\t\tinnerfiles = entryDir.list(flt);", "-\t\tfor (int i=0, n=innerfiles.length; i < n; i++) {", "-\t", "-\t\t\t//get and clean up innerclass name", "-\t\t\tentryName = entryName.substring(0, entryName.lastIndexOf(entryFile.getName())-1) + File.separatorChar + innerfiles[i];", "-", "-\t\t\t// link the file", "-\t\t\tentryFile = new File(srcDir, entryName);", "-", "-\t\t\tgetTask().log(\"adding innerclass file '\" + entryName + \"'\", ", "-\t\t\t\t    Project.MSG_VERBOSE);", "-", "-\t\t\taddFileToJar(jarStream,", "-                                     new FileInputStream(entryFile),", "-                                     entryName);", "-", "-\t\t}", "+                // See if there are any inner classes for this class and add them in if there are", "+                InnerClassFilenameFilter flt = new InnerClassFilenameFilter(entryFile.getName());", "+                File entryDir = entryFile.getParentFile();", "+                String[] innerfiles = entryDir.list(flt);", "+                for (int i=0, n=innerfiles.length; i < n; i++) {", "+            ", "+                    //get and clean up innerclass name", "+                    entryName = entryName.substring(0, entryName.lastIndexOf(entryFile.getName())-1) + File.separatorChar + innerfiles[i];", "+        ", "+                    // link the file", "+                    entryFile = new File(srcDir, entryName);", "+        ", "+                    log(\"adding innerclass file '\" + entryName + \"'\", ", "+                            Project.MSG_VERBOSE);", "+        ", "+                    addFileToJar(jarStream, entryFile, entryName);", "+        ", "+                }", "-            // All done.  Close the jar stream.", "-            jarStream.close();", "+        finally {", "+            if (jarStream != null) {", "+                try {", "+                    jarStream.close();", "+                }", "+                catch (IOException closeException) {}", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d522ecbeca4b7e01f4185dea94c6b6dd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Sync.java", "commitBeforeChange": "32365ed4e0db6ddef7498334a9ca574df66e6726", "commitAfterChange": "b1186f08a39d23367aefcabd37ef446d36a0afb1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private int[] removeOrphanFiles(Hashtable nonOrphans, File file)", "signatureAfterChange": "     private int[] removeOrphanFiles(Set nonOrphans, File toDir)", "diff": ["-    private int[] removeOrphanFiles(Hashtable nonOrphans, File file) {", "-        int[] removedCount = new int[] {0, 0, 0};", "-        if (file.isDirectory()) {", "-            File[] children = file.listFiles();", "-            for (int i = 0; i < children.length; ++i) {", "-                int[] temp = removeOrphanFiles(nonOrphans, children[i]);", "-                removedCount[0] += temp[0];", "-                removedCount[1] += temp[1];", "-                removedCount[2] += temp[2];", "-            }", "-", "-            if (nonOrphans.get(file) == null && removedCount[2] == 0) {", "-                log(\"Removing orphan directory: \" + file, Project.MSG_DEBUG);", "-                file.delete();", "-                ++removedCount[0];", "-            } else {", "-                /*", "-                  Contrary to what is said above, position 2 is not", "-                  meaningless inside the recursion.", "-                  Position 2 is used to carry information back up the", "-                  recursion about whether or not a directory contains", "-                  a directory or file at any depth that is not an", "-                  orphan", "-                  This has to be done, because if you have the", "-                  following directory structure: c:\\src\\a\\file and", "-                  your mapper src files were constructed like so:", "-                  <include name=\"**\\a\\**\\*\"/>", "-                  The folder 'a' will not be in the hashtable of", "-                  nonorphans.  So, before deleting it as an orphan, we", "-                  have to know whether or not any of its children at", "-                  any level are orphans.", "-                  If no, then this folder is also an orphan, and may", "-                  be deleted.  I do this by changing position 2 to a", "-                  '1'.", "-                */", "-                removedCount[2] = 1;", "-            }", "-", "-        } else {", "-            if (nonOrphans.get(file) == null) {", "-                log(\"Removing orphan file: \" + file, Project.MSG_DEBUG);", "-                file.delete();", "-                ++removedCount[1];", "-            } else {", "-                removedCount[2] = 1;", "-            }", "+    private int[] removeOrphanFiles(Set nonOrphans, File toDir) {", "+        int[] removedCount = new int[] {0, 0};", "+        DirectoryScanner ds = new DirectoryScanner();", "+        ds.setBasedir(toDir);", "+        Set s = new HashSet(nonOrphans);", "+        s.add(\"\");", "+        String[] excls = (String[]) s.toArray(new String[s.size()]);", "+        ds.setExcludes(excls);", "+        ds.scan();", "+        String[] files = ds.getIncludedFiles();", "+        for (int i = 0; i < files.length; i++) {", "+            File f = new File(toDir, files[i]);", "+            log(\"Removing orphan file: \" + f, Project.MSG_DEBUG);", "+            f.delete();", "+            ++removedCount[1];", "+        }", "+        String[] dirs = ds.getIncludedDirectories();", "+        for (int i = dirs.length - 1 ; i >= 0 ; --i) {", "+            File f = new File(toDir, dirs[i]);", "+            log(\"Removing orphan directory: \" + f, Project.MSG_DEBUG);", "+            f.delete();", "+            ++removedCount[0];"]}]}
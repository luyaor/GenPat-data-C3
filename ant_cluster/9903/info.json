{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0859e45d1a68319e565579784e69cf68", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94523e26a17e838cbcd9af7f27a26d38", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "92ba08996fc4224f2653057f06bfc7fefb72a81b", "commitAfterChange": "10c41029aeaba31241f1a85f9b02591b357e20b6", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "       protected Process exec() throws IOException", "signatureAfterChange": "       protected Process exec() throws IOException", "diff": ["-        String userDir = System.getProperty(\"user.dir\");", "-        try {", "-            if (myos.equals(\"Mac OS\") && workingDirectory != null) {", "-                System.getProperties().put(\"user.dir\", ", "-                                           workingDirectory.getAbsolutePath());", "-            }", "-", "-            return Runtime.getRuntime().exec(getCommandline(), getEnvironment());", "-        } finally {", "-            if (myos.equals(\"Mac OS\") && workingDirectory != null) {", "-                System.getProperties().put(\"user.dir\", userDir);", "-            }", "-        }", "+\tif (workingDirectory == null) {", "+\t    // Easy.", "+\t    return Runtime.getRuntime().exec(cmdl, getEnvironment());", "+\t} else if (execWithCWD != null) {", "+\t    // The best way to set cwd, if you have JDK 1.3.", "+\t    try {", "+\t\tObject[] arguments = new Object[] {getCommandline(), getEnvironment(), workingDirectory};", "+\t\treturn (Process)execWithCWD.invoke(Runtime.getRuntime(), arguments);", "+            } catch (InvocationTargetException ite) {", "+                Throwable t = ite.getTargetException();", "+                if (t instanceof ThreadDeath) {", "+                    throw (ThreadDeath)t;", "+                } else if (t instanceof IOException) {", "+                    throw (IOException)t;", "+                } else {", "+                    throw new IOException(t.toString());", "+                }", "+\t    } catch (Exception e) {", "+\t\t// IllegalAccess, IllegalArgument, ClassCast", "+\t\tthrow new IOException(e.toString());", "+\t    }", "+\t} else if (myos.equals(\"Mac OS\")) {", "+\t    // Dubious Mac hack.", "+\t    System.getProperties().put(\"user.dir\", ", "+\t\t\t\t       workingDirectory.getAbsolutePath());", "+\t    try {", "+\t\treturn Runtime.getRuntime().exec(cmdl, getEnvironment());", "+\t    } finally {", "+                System.getProperties().put(\"user.dir\", antWorkingDirectory);", "+\t    }", "+\t} else if (myos.toLowerCase().indexOf(\"windows\") >= 0 &&", "+\t\t   (myos.toLowerCase().indexOf(\"nt\") >= 0 ||", "+\t\t    myos.indexOf(\"2000\") >= 0)) {", "+\t    // cmd /c cd works OK on Windows NT & friends.", "+\t    String[] commandLine = new String[cmdl.length+5];", "+\t    commandLine[0] = \"cmd\";", "+\t    commandLine[1] = \"/c\";", "+\t    commandLine[2] = \"cd\";", "+\t    commandLine[3] = workingDirectory.getAbsolutePath();", "+\t    commandLine[4] = \"&&\";", "+\t    System.arraycopy(cmdl, 0, commandLine, 5, cmdl.length);", "+\t    return Runtime.getRuntime().exec(commandLine, getEnvironment());", "+\t} else {", "+\t    // Fallback to the antRun wrapper script (POSIX, Win95/98, etc.):", "+\t    String[] commandLine = new String[cmdl.length+2];", "+\t    commandLine[0] = antRun;", "+\t    commandLine[1] = workingDirectory.getAbsolutePath();", "+\t    System.arraycopy(cmdl, 0, commandLine, 2, cmdl.length);", "+\t    return Runtime.getRuntime().exec(commandLine, getEnvironment());", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1d94de07660d4bd243fefab470435ba", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Untar.java", "commitBeforeChange": "dc00bd536bd6a1cd2bae07cecc352c085a8a0f9d", "commitAfterChange": "80d371a3b4e1ba3f845e1b9a8f831fd6a11fafd5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void setOverwrite(boolean b)", "signatureAfterChange": "      private String mode2str(int mode)", "diff": ["+    private String mode2str(int mode) {", "+        StringBuffer sb = new StringBuffer(\"----------\");", "+        if ((mode & S_IFREG ) == 0) {", "+            if ((mode & S_IFDIR ) != 0) {", "+                sb.setCharAt(0, 'd');", "+            } else if ((mode & S_IFLNK)  != 0) {", "+                sb.setCharAt(0, 'l');", "+            } else if ((mode & S_IFIFO)  != 0) {", "+                sb.setCharAt(0, 'p');", "+            } else if ((mode & S_IFCHR)  != 0) {", "+                sb.setCharAt(0, 'c');", "+            } else if ((mode & S_IFBLK)  != 0) {", "+                sb.setCharAt(0, 'b');", "+            } else if ((mode & S_IFSOCK) != 0) {", "+                sb.setCharAt(0, 's');", "+            } else if ((mode & S_IFIFO)  != 0) {", "+                sb.setCharAt(0, 'p');", "+            }", "+        }", "+        if ((mode & S_IRUSR ) != 0) {", "+            sb.setCharAt(1, 'r');", "+        }", "+        if ((mode & S_IWUSR ) != 0) {", "+            sb.setCharAt(2, 'w');", "+        }", "+        if ((mode & S_IXUSR ) != 0) {", "+            sb.setCharAt(3, 'x');", "+        }", "-     */", "-    public void setOverwrite(boolean b) {", "-        overwrite = b;", "-    }", "+        if ((mode & S_IRGRP ) != 0) {", "+            sb.setCharAt(4, 'r');", "+        }", "+        if ((mode & S_IWGRP ) != 0) {", "+            sb.setCharAt(5, 'w');", "+        }", "+        if ((mode & S_IXGRP ) != 0) {", "+            sb.setCharAt(6, 'x');", "+        }", "+        if ((mode & S_IROTH ) != 0) {", "+            sb.setCharAt(7, 'r');", "+        }", "+        if ((mode & S_IWOTH ) != 0) {", "+            sb.setCharAt(8, 'w');", "+        }", "+        if ((mode & S_IXOTH ) != 0) {", "+            sb.setCharAt(9, 'x');", "+        }", "+        return new String(sb);", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1219d1f468a54ab71a3f0567f135c7b1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1609a40a57cc3ab7c376c6fe37cbf4b1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java", "commitBeforeChange": "821004a5407db28a7482cff8f928d92b7615ea36", "commitAfterChange": "d97f4f390c59827af8a3bfe380c1bf7d4a4a84a9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 13, "signatureBeforeChange": "     protected void addVendorFiles(Hashtable ejbFiles, String baseName)", "signatureAfterChange": "     protected void addVendorFiles(Hashtable ejbFiles, String baseName)", "diff": ["+        else {", "+            return;", "+        }", "-        // The the weblogic cmp deployment descriptor", "-        File weblogicCMPDD = new File(getDescriptorDir(), ddPrefix + WL_CMP_DD);", "-", "-        if (weblogicCMPDD.exists()) {", "-            ejbFiles.put(META_DIR + WL_CMP_DD,", "-                         weblogicCMPDD);", "+        if (oldCMP) {", "+            log(\"The old method for locating CMP files has been DEPRECATED.\", Project.MSG_INFO);", "+            log(\"Please adjust your weblogic descriptor and set oldCMP=\\\"false\\\" \" +", "+                \"to use the new CMP descriptor inclusion mechanism. \", Project.MSG_INFO);", "+            // The the weblogic cmp deployment descriptor", "+            File weblogicCMPDD = new File(getDescriptorDir(), ddPrefix + WL_CMP_DD);", "+                ", "+            if (weblogicCMPDD.exists()) {", "+                ejbFiles.put(META_DIR + WL_CMP_DD,", "+                             weblogicCMPDD);", "+            }", "+        }", "+        else {", "+            // now that we have the weblogic descriptor, we parse the file", "+            // to find other descriptors needed to deploy the bean.", "+            // this could be the weblogic-cmp-rdbms.xml or any other O/R", "+            // mapping tool descriptors.", "+            try", "+            {", "+                File ejbDescriptor = (File)ejbFiles.get(META_DIR + EJB_DD);", "+                SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();", "+                saxParserFactory.setValidating(true);", "+                SAXParser saxParser = saxParserFactory.newSAXParser();", "+                DescriptorHandler handler = getWebglogicDescriptorHandler(ejbDescriptor.getParentFile());", "+                saxParser.parse(new InputSource", "+                                (new FileInputStream", "+                                (weblogicDD)),", "+                                handler);", "+                                ", "+                Hashtable ht = handler.getFiles();", "+                Enumeration e = ht.keys();", "+                while(e.hasMoreElements()){", "+                    String key = (String)e.nextElement();", "+                    ejbFiles.put(key, ht.get(key));", "+                }", "+            }", "+            catch(Exception e)", "+            { ", "+                String msg = \"Exception while adding Vendor specific files: \" + e.toString();", "+                throw new BuildException(msg, e);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ffdb1413ff8916880e17c56b42107d0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Ant.java", "commitBeforeChange": "bb05312e66a2403d2405988dbaf0830cde65df7c", "commitAfterChange": "da5f3bfd256e383926c6ece58dba15a7d4bd5761", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private void addReferences() throws BuildException", "signatureAfterChange": "     private void addReferences() throws BuildException", "diff": ["-        Hashtable thisReferences", "-            = (Hashtable) getProject().getReferences().clone();", "-        Hashtable newReferences = newProject.getReferences();", "-        Enumeration e;", "-        if (references.size() > 0) {", "-            for (e = references.elements(); e.hasMoreElements();) {", "-                Reference ref = (Reference) e.nextElement();", "-                String refid = ref.getRefId();", "-                if (refid == null) {", "-                    throw new BuildException(\"the refid attribute is required\"", "-                                             + \" for reference elements\");", "-                }", "-                if (!thisReferences.containsKey(refid)) {", "-                    log(\"Parent project doesn't contain any reference '\"", "-                        + refid + \"'\",", "-                        Project.MSG_WARN);", "-                    continue;", "-                }", "-", "-                thisReferences.remove(refid);", "-                String toRefid = ref.getToRefid();", "-                if (toRefid == null) {", "-                    toRefid = refid;", "-                }", "-                copyReference(refid, toRefid);", "+        @SuppressWarnings(\"unchecked\")", "+        Hashtable<String, Object> thisReferences", "+            = (Hashtable<String, Object>) getProject().getReferences().clone();", "+        for (Reference ref : references) {", "+            String refid = ref.getRefId();", "+            if (refid == null) {", "+                throw new BuildException(\"the refid attribute is required\"", "+                                         + \" for reference elements\");", "+            if (!thisReferences.containsKey(refid)) {", "+                log(\"Parent project doesn't contain any reference '\"", "+                    + refid + \"'\",", "+                    Project.MSG_WARN);", "+                continue;", "+            }", "+", "+            thisReferences.remove(refid);", "+            String toRefid = ref.getToRefid();", "+            if (toRefid == null) {", "+                toRefid = refid;", "+            }", "+            copyReference(refid, toRefid);", "-            for (e = thisReferences.keys(); e.hasMoreElements();) {", "-                String key = (String) e.nextElement();", "+            Hashtable<String, Object> newReferences = newProject.getReferences();", "+            for (String key : thisReferences.keySet()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78da65868a59b5018a012c73ac8566dd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ide/VAJRemoteUtil.java", "commitBeforeChange": "00eb48bddc7183e3d960299901b931aefd1bf61a", "commitAfterChange": "4ac9a8932c13b7d5c9e8f15c7856a71d7044f236", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private String assembleImportExportParams(                                               File dir,                                               String[] includePatterns, String[] excludePatterns,                                               boolean includeClasses, boolean includeResources,                                               boolean includeSources, boolean useDefaultExcludes)", "signatureAfterChange": "     private void assembleImportExportParams(Vector parameters,                                             File dir,                                             String[] includePatterns, String[] excludePatterns,                                             boolean includeClasses, boolean includeResources,                                             boolean includeSources, boolean useDefaultExcludes)", "diff": ["-    private String assembleImportExportParams(", "-                                              File dir,", "-                                              String[] includePatterns, String[] excludePatterns,", "-                                              boolean includeClasses, boolean includeResources,", "-                                              boolean includeSources, boolean useDefaultExcludes) {", "-        String result =", "-            VAJToolsServlet.DIR_PARAM + \"=\"", "-            + URLEncoder.encode(dir.getPath()) + \"&\"", "-            + VAJToolsServlet.CLASSES_PARAM + \"=\" + includeClasses + \"&\"", "-            + VAJToolsServlet.RESOURCES_PARAM + \"=\" + includeResources + \"&\"", "-            + VAJToolsServlet.SOURCES_PARAM + \"=\" + includeSources + \"&\"", "-            + VAJToolsServlet.DEFAULT_EXCLUDES_PARAM + \"=\" + useDefaultExcludes;", "+    private void assembleImportExportParams(Vector parameters,", "+                                            File dir,", "+                                            String[] includePatterns, String[] excludePatterns,", "+                                            boolean includeClasses, boolean includeResources,", "+                                            boolean includeSources, boolean useDefaultExcludes) {", "+        parameters.addElement(new URLParam(VAJToolsServlet.DIR_PARAM, dir.getPath()));", "+        parameters.addElement(new URLParam(VAJToolsServlet.CLASSES_PARAM, includeClasses));", "+        parameters.addElement(new URLParam(VAJToolsServlet.RESOURCES_PARAM, includeResources));", "+        parameters.addElement(new URLParam(VAJToolsServlet.SOURCES_PARAM, includeSources));", "+        parameters.addElement(new URLParam(VAJToolsServlet.DEFAULT_EXCLUDES_PARAM, useDefaultExcludes));", "-                result = result + \"&\" + VAJExportServlet.INCLUDE_PARAM + \"=\"", "-                    + URLEncoder.encode(includePatterns[i]);", "+                parameters.addElement(new", "+                                      URLParam(VAJExportServlet.INCLUDE_PARAM, includePatterns[i]));", "-                result = result + \"&\" + VAJExportServlet.EXCLUDE_PARAM + \"=\"", "-                    + URLEncoder.encode(excludePatterns[i]);", "+                parameters.addElement(new", "+                                      URLParam(VAJExportServlet.EXCLUDE_PARAM, excludePatterns[i]));", "-", "-        return result;"]}]}
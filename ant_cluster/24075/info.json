{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0ee7b14c3c89fdd53b9032eaccd9707", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3510a9e216d8f4e92f552e13fd30be51", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/junit/XMLResultAggregatorTest.java", "commitBeforeChange": "cd69b894b2a5a02c6cc32c8caa4d7e949074eb9e", "commitAfterChange": "735f3fca3e3ce3a6b44109a44836d8ab64215e75", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testFrames() throws Exception", "signatureAfterChange": "      public void testFrames() throws Exception", "diff": ["+        // For now, skip this test on JDK 6 (and below); see below for why:", "+        try {", "+            Class.forName(\"java.nio.file.Files\");", "+        } catch (ClassNotFoundException x) {", "+            return;", "+        }", "-        PrintWriter pw = new PrintWriter(xml);", "+        PrintWriter pw = new PrintWriter(new FileOutputStream(xml));", "+        /* getResourceAsStream override unnecessary on JDK 7. Ought to work around JAXP #6723276 in JDK 6, but causes a TypeCheckError in FunctionCall for reasons TBD:", "+        Thread.currentThread().setContextClassLoader(new ClassLoader(ClassLoader.getSystemClassLoader().getParent()) {", "+            public InputStream getResourceAsStream(String name) {", "+                if (name.startsWith(\"META-INF/services/\")) {", "+                    return new ByteArrayInputStream(new byte[0]);", "+                }", "+                return super.getResourceAsStream(name);", "+            }", "+        });", "+        */", "+        // Use the JRE's Xerces, not lib/optional/xerces.jar:", "+        Thread.currentThread().setContextClassLoader(ClassLoader.getSystemClassLoader().getParent());", "+        // Tickle #51668:", "+        System.setSecurityManager(new SecurityManager() {public void checkPermission(Permission perm) {}});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6b4d774a334855d84517f23299fa57b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/taskdefs/optional/TraXLiaisonTest.java", "commitBeforeChange": "4dab12fb9ccbaa24cc22c9804302bc7a4373b78e", "commitAfterChange": "fe829a9d0fa679df3ae2cc4803e5236ed2ed5c7b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testXalan2Redirect() throws Exception", "signatureAfterChange": "      public void testXalan2Redirect() throws Exception", "diff": ["+        ClassLoader orig = Thread.currentThread().getContextClassLoader();", "+            // Use the JRE's Xerces, not lib/optional/xerces.jar:", "+            Thread.currentThread().setContextClassLoader(new ClassLoader(ClassLoader.getSystemClassLoader().getParent()) {", "+                public InputStream getResourceAsStream(String name) {", "+                    if (name.startsWith(\"META-INF/services/\")) {", "+                        // work around JAXP #6723276 in JDK 6", "+                        return new ByteArrayInputStream(new byte[0]);", "+                    }", "+                    return super.getResourceAsStream(name);", "+                }", "+            });", "+            // Tickle #52382:", "+            System.setSecurityManager(new SecurityManager() {public void checkPermission(Permission perm) {}});", "+            Thread.currentThread().setContextClassLoader(orig);", "+            System.setSecurityManager(null);"]}]}
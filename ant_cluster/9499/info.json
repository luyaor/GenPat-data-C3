{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6c916e9041a02680b9d3c871826ac74d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "312be39defb234cdbfca6681a687cdd9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/tar/TarInputStream.java", "commitBeforeChange": "171220cb337ad731d3e79f0db9e45381b615fbb2", "commitAfterChange": "1fe6b17d5fbbf0f70c13def785498d87e7d3c685", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public TarEntry getNextEntry() throws IOException", "signatureAfterChange": "     public TarEntry getNextEntry() throws IOException", "diff": ["-            StringBuffer longName = new StringBuffer();", "+            ByteArrayOutputStream longName = new ByteArrayOutputStream();", "-                longName.append(new String(buf, 0, length)); // TODO default charset?", "+                longName.write(buf, 0, length);", "-            // remove trailing null terminator", "-            if (longName.length() > 0", "-                && longName.charAt(longName.length() - 1) == 0) {", "-                longName.deleteCharAt(longName.length() - 1);", "+            byte[] longNameData = longName.toByteArray();", "+            // remove trailing null terminator(s)", "+            length = longNameData.length;", "+            while (length > 0 && longNameData[length - 1] == 0) {", "+                --length;", "-            currEntry.setName(longName.toString());", "+            if (length != longNameData.length) {", "+                byte[] l = new byte[length];", "+                System.arraycopy(longNameData, 0, l, 0, length);", "+                longNameData = l;", "+            }", "+            ", "+            currEntry.setName(encoding.decode(longNameData));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95d5f61e42703d4236881ef3d4f89dd0", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/configuration/DefaultConfigurer.java", "commitBeforeChange": "c31e31c52a1f624e72be505d788db9be42b87e5d", "commitAfterChange": "48c54a521235f746024ae8facc272e049d0e1cf5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void configure( final Object object,                             final Configuration configuration,                            final Context context )         throws ConfigurationException", "signatureAfterChange": "     public void configure( final Object object,                            final Configuration configuration,                            final Context context )         throws ConfigurationException", "diff": ["-    public void configure( final Object object, ", "+    public void configure( final Object object,", "-            m_logger.debug( \"Configuring \" + object );", "+            getLogger().debug( \"Configuring \" + object );", "-            if( DEBUG ) ", "+            if( DEBUG )", "-                m_logger.debug( \"Configuring object via Configurable interface\" );", "+                getLogger().debug( \"Configuring object via Configurable interface\" );", "-            if( DEBUG ) ", "+            if( DEBUG )", "-                m_logger.debug( \"Configuring object via Configurable reflection\" );", "+                getLogger().debug( \"Configuring object via Configurable reflection\" );", "-            final Iterator attributes = configuration.getAttributeNames();", "-            while( attributes.hasNext() )", "+            final String[] attributes = configuration.getAttributeNames();", "+            for( int i = 0; i < attributes.length; i++ )", "-                final String name = (String)attributes.next();", "+                final String name = attributes[ i ];", "-             ", "-                if( DEBUG ) ", "+", "+                if( DEBUG )", "-                    m_logger.debug( \"Configuring attribute name=\" + name +", "+                    getLogger().debug( \"Configuring attribute name=\" + name +", "-                ", "+", "-            final Iterator elements = configuration.getChildren();", "-            ", "-            while( elements.hasNext() )", "+            final Configuration[] children = configuration.getChildren();", "+", "+            for( int i = 0; i < children.length; i++ )", "-                final Configuration element = (Configuration)elements.next();", "-                ", "-                if( DEBUG ) ", "+                final Configuration child = children[ i ];", "+", "+                if( DEBUG )", "-                    m_logger.debug( \"Configuring subelement name=\" + element.getName() );", "+                    getLogger().debug( \"Configuring subelement name=\" + child.getName() );", "-                ", "-                configureElement( object, element, context );", "+", "+                configureElement( object, child, context );", "-                    if( DEBUG ) ", "+                    if( DEBUG )", "-                        m_logger.debug( \"Configuring content \" + content );", "+                        getLogger().debug( \"Configuring content \" + content );", "-                    ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4a09ef49e01180f08e41e5ea7955695", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/classloader/DefaultClassLoaderManager.java", "commitBeforeChange": "62562693ac733d0697b5a522972f36ea5570225c", "commitAfterChange": "a816a71d9e2587a83890f499dd2cabb7c6e02889", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public ClassLoader createClassLoader( File file ) throws DeploymentException", "signatureAfterChange": "     public ClassLoader createClassLoader( final File[] files ) throws ClassLoaderException", "diff": ["-    public ClassLoader createClassLoader( File file ) throws DeploymentException", "+     */", "+    public ClassLoader createClassLoader( final File[] files ) throws ClassLoaderException", "-            final File canonFile = file.getCanonicalFile();", "+            // Build a list of canonical file names", "+            final ArrayList canonFiles = new ArrayList( files.length );", "+            for( int i = 0; i < files.length; i++ )", "+            {", "+                canonFiles.add( files[ i ].getCanonicalFile() );", "+            }", "-            URLClassLoader classLoader = (URLClassLoader)m_fileDeployers.get( canonFile );", "+            ClassLoader classLoader = (ClassLoader)m_fileDeployers.get( canonFiles );", "-                checkFile( canonFile );", "-                final File[] extensions = getOptionalPackagesFor( canonFile );", "-                final URL[] urls = buildClasspath( canonFile, extensions );", "-                classLoader = new URLClassLoader( urls, m_baseClassLoader );", "-                m_fileDeployers.put( canonFile, classLoader );", "+                classLoader = buildClassLoader( canonFiles );", "+                m_fileDeployers.put( canonFiles, classLoader );", "-        catch( Exception e )", "+        catch( final Exception e )", "-            final String message = REZ.getString( \"create-classloader-for-file.error\", file );", "-            throw new DeploymentException( message );", "+            final String fileNames = PathUtil.formatPath( files );", "+            final String message = REZ.getString( \"create-classloader-for-file.error\", fileNames );", "+            throw new ClassLoaderException( message, e );", "+    }"]}]}
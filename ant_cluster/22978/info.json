{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f7d0d29118bcec4586542dcaaa5283b0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "334b32eec83c819c00850b9582906c54", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/antlib/xml/XSLTProcess.java", "commitBeforeChange": "030fd751f51bef1c60b27cc4034cf1b013551520", "commitAfterChange": "0deb15031e9e934900b3b41f0d191dabdece8f80", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 20, "signatureBeforeChange": "      protected XSLTLiaison getLiaison()         throws TaskException", "signatureAfterChange": "      private void transform( final File in, final File out )         throws Exception", "diff": ["-    protected XSLTLiaison getLiaison()", "-        // if processor wasn't specified, see if TraX is available.  If not,", "-        // default it to xslp or xalan, depending on which is in the classpath", "-        if( m_liaison == null )", "-            if( m_processor != null )", "-            {", "-                try", "-                {", "-                    resolveProcessor( m_processor );", "-                }", "-                catch( Exception e )", "-                {", "-                    throw new TaskException( \"Error\", e );", "-                }", "-            }", "-            else", "-            {", "-                try", "-                {", "-                    resolveProcessor( \"trax\" );", "-                }", "-                catch( Throwable e1 )", "-                {", "-                    try", "-                    {", "-                        resolveProcessor( \"xalan\" );", "-                    }", "-                    catch( Throwable e2 )", "-                    {", "-                        try", "-                        {", "-                            resolveProcessor( \"adaptx\" );", "-                        }", "-                        catch( Throwable e3 )", "-                        {", "-                            try", "-                            {", "-                                resolveProcessor( \"xslp\" );", "-                            }", "-                            catch( Throwable e4 )", "-                            {", "-                                e4.printStackTrace();", "-                                e3.printStackTrace();", "-                                e2.printStackTrace();", "-                                throw new TaskException( \"Error\", e1 );", "-                            }", "-                        }", "-                    }", "-                }", "-            }", "-        return m_liaison;", "+", "+    private void transform( final File in, final File out )", "+        throws Exception", "+    {", "+        FileInputStream fis = null;", "+        FileOutputStream fos = null;", "+        try", "+        {", "+            fis = new FileInputStream( in );", "+            fos = new FileOutputStream( out );", "+            final StreamSource source = new StreamSource( fis, getSystemId( in ) );", "+            final StreamResult result = new StreamResult( fos );", "+", "+            m_transformer.transform( source, result );", "+        }", "+        finally", "+        {", "+            IOUtil.shutdownStream( fis );", "+            IOUtil.shutdownStream( fos );", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4da6b1e62746269df01c0980ed19f8d6", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/frontends/CLIMain.java", "commitBeforeChange": "8b39211862c5a0b88ce5764bbc1682a89fd02895", "commitAfterChange": "8b4b896303cebb9f6f054254131e248da36b454b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private CLOptionDescriptor[] createCLOptions()", "signatureAfterChange": "     private CLOptionDescriptor[] createCLOptions()", "diff": ["-        final CLOptionDescriptor[] options = new CLOptionDescriptor[ 13 ];", "-        options[ 0 ] =", "+        final CLOptionDescriptor[] options = {", "-                                    INFO_OPT_INCOMPAT );", "-        options[ 1 ] =", "+                                    INFO_OPT_INCOMPAT ),", "-                                    REZ.getString( \"file.opt\" ) );", "-        options[ 2 ] =", "+                                    REZ.getString( \"file.opt\" ) ),", "-                                    LOG_OPT_INCOMPAT );", "-        options[ 3 ] =", "+                                    LOG_OPT_INCOMPAT ),", "-                                    LOG_OPT_INCOMPAT );", "-        options[ 4 ] =", "+                                    LOG_OPT_INCOMPAT ),", "-                                    LOG_OPT_INCOMPAT );", "-        options[ 5 ] =", "+                                    LOG_OPT_INCOMPAT ),", "-                                    REZ.getString( \"listener.opt\" ) );", "-        options[ 6 ] =", "+                                    REZ.getString( \"listener.opt\" ),", "+                                    LISTENER_OPT_INCOMPAT ),", "+            new CLOptionDescriptor( \"noprefix\",", "+                                    CLOptionDescriptor.ARGUMENT_DISALLOWED,", "+                                    NO_PREFIX_OPT,", "+                                    REZ.getString( \"noprefix.opt\" ),", "+                                    LISTENER_OPT_INCOMPAT ),", "-                                    INFO_OPT_INCOMPAT );", "-", "-        options[ 7 ] =", "+                                    INFO_OPT_INCOMPAT ),", "-                                    REZ.getString( \"tasklib.opt\" ) );", "-        options[ 8 ] =", "+                                    REZ.getString( \"tasklib.opt\" ) ),", "-                                    REZ.getString( \"incremental.opt\" ) );", "-        options[ 9 ] =", "+                                    REZ.getString( \"incremental.opt\" ) ),", "-                                    REZ.getString( \"home.opt\" ) );", "-        options[ 10 ] =", "+                                    REZ.getString( \"home.opt\" ) ),", "-                                    new int[ 0 ] );", "-        options[ 11 ] =", "+                                    new int[ 0 ] ),", "-                                    REZ.getString( \"build.opt\" ) );", "-        options[ 12 ] =", "+                                    REZ.getString( \"build.opt\" ) ),", "-                                    REZ.getString( \"dry-run.opt\" ) );", "+                                    REZ.getString( \"dry-run.opt\" ) )", "+        };", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a2ff3987f2c3df672f39e62a3102883", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "8b162d567dc13b9ae576422744854684a6c3ceb1", "commitAfterChange": "6c7f485943c930bf2de75288e47c4bf27c63b50a", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 27, "signatureBeforeChange": "     protected void slowScan()", "signatureAfterChange": "     protected void slowScan()", "diff": ["-        if (haveSlowResults) {", "-            return;", "+        synchronized (slowScanLock) {", "+            if (haveSlowResults) {", "+                return;", "+            }", "+            if (slowScanning) {", "+                while (slowScanning) {", "+                    try {", "+                        slowScanLock.wait();", "+                    } catch (InterruptedException e) {", "+                    }", "+                }", "+                return;", "+            }", "+            slowScanning = true;", "+        try {", "+            synchronized (this) {", "-        String[] excl = new String[dirsExcluded.size()];", "-        dirsExcluded.copyInto(excl);", "-", "-        String[] notIncl = new String[dirsNotIncluded.size()];", "-        dirsNotIncluded.copyInto(notIncl);", "-", "-        for (int i = 0; i < excl.length; i++) {", "-            if (!couldHoldIncluded(excl[i])) {", "-                scandir(new File(basedir, excl[i]),", "-                        excl[i] + File.separator, false);", "+                String[] excl = new String[dirsExcluded.size()];", "+                dirsExcluded.copyInto(excl);", "+        ", "+                String[] notIncl = new String[dirsNotIncluded.size()];", "+                dirsNotIncluded.copyInto(notIncl);", "+        ", "+                for (int i = 0; i < excl.length; i++) {", "+                    if (!couldHoldIncluded(excl[i])) {", "+                        scandir(new File(basedir, excl[i]),", "+                                excl[i] + File.separator, false);", "+                    }", "+                }", "+                for (int i = 0; i < notIncl.length; i++) {", "+                    if (!couldHoldIncluded(notIncl[i])) {", "+                        scandir(new File(basedir, notIncl[i]),", "+                                notIncl[i] + File.separator, false);", "+                    }", "+                }", "+            }", "+        } finally {", "+            synchronized (slowScanLock) {", "+                haveSlowResults = true;", "+                slowScanning = false;", "+                slowScanLock.notifyAll();", "-", "-        for (int i = 0; i < notIncl.length; i++) {", "-            if (!couldHoldIncluded(notIncl[i])) {", "-                scandir(new File(basedir, notIncl[i]),", "-                        notIncl[i] + File.separator, false);", "-            }", "-        }", "-", "-        haveSlowResults  = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86f695f9696146edf1b7df61b2cba4de", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/zip/UTF8ZipFilesTest.java", "commitBeforeChange": "cbd20a77eba224b21654251583971e054729f006", "commitAfterChange": "752d64fa43db2172327771ba4d36bee3f2d3b49a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 10, "signatureBeforeChange": "      private static void createTestFile(File file, String encoding)         throws UnsupportedEncodingException, IOException", "signatureAfterChange": "      private static void createTestFile(File file, String encoding,                                        boolean withEFS,                                        boolean withExplicitUnicodeExtra)         throws UnsupportedEncodingException, IOException", "diff": ["-    private static void createTestFile(File file, String encoding)", "+    private static void createTestFile(File file, String encoding,", "+                                       boolean withEFS,", "+                                       boolean withExplicitUnicodeExtra)", "+", "+        ZipEncoding zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);", "+            zos.setUseLanguageEncodingFlag(withEFS);", "+            zos.setCreateUnicodeExtraFields(!withExplicitUnicodeExtra);", "-            if (!ZipEncodingHelper.canEncodeName(ze.getName(),", "-                                                 zos.getEncoding())) {", "+            if (withExplicitUnicodeExtra", "+                && !zipEncoding.canEncode(ze.getName())) {", "+", "+                ByteBuffer en = zipEncoding.encode(ze.getName());", "+", "-                                                           zos.getEncoding()));", "+                                                           en.array(),", "+                                                           en.arrayOffset(),", "+                                                           en.limit()));", "-            if (!ZipEncodingHelper.canEncodeName(ze.getName(),", "-                                                 zos.getEncoding())) {", "+            if (withExplicitUnicodeExtra", "+                && !zipEncoding.canEncode(ze.getName())) {", "+", "+                ByteBuffer en = zipEncoding.encode(ze.getName());", "+", "-                                                           zos.getEncoding()));", "+                                                           en.array(),", "+                                                           en.arrayOffset(),", "+                                                           en.limit()));", "-            if (!ZipEncodingHelper.canEncodeName(ze.getName(),", "-                                                 zos.getEncoding())) {", "+            if (withExplicitUnicodeExtra", "+                && !zipEncoding.canEncode(ze.getName())) {", "+", "+                ByteBuffer en = zipEncoding.encode(ze.getName());", "+", "-                                                           zos.getEncoding()));", "+                                                           en.array(),", "+                                                           en.arrayOffset(),", "+                                                           en.limit()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb3270ffba8d319794d601d2e2f3243f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/antlib/src/main/org/apache/tools/ant/taskdefs/Antlib.java", "commitBeforeChange": "1d2784e6d5429505b3b420e342992c22cd5373a6", "commitAfterChange": "6252354506953777f5b921b8746a54e7d317475a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private InputStream getDescriptor(File file)         throws BuildException", "signatureAfterChange": "         private URL getDescriptorURL(File file, String resourceName)", "diff": ["+         */", "+        private URL getDescriptorURL(File file, String resourceName) {", "+            try {", "+                if (!file.exists()) {", "+                    return null;", "+                }", "+", "+                if (file.isDirectory()) {", "+                    File resource = new File(file, resourceName);", "+", "+                    if (resource.exists()) {", "+                        try {", "+                            return new URL(\"file:\"+resource.toString());", "+                        } catch (MalformedURLException ex) {", "+                            return null;", "+                        }", "+                    }", "+                }", "+                else {", "+                    ZipFile zipFile = new ZipFile(file);", "+                    try {", "+                        ZipEntry entry = zipFile.getEntry(resourceName);", "+                        if (entry != null) {", "+                            try {", "+                                return new URL(\"jar:file:\"+file.toString()+\"!/\"+entry);", "+                            } catch (MalformedURLException ex) {", "+                                return null;", "+                            }", "+                        }", "+                    }", "+                    finally {", "+                        zipFile.close();", "+                    }", "+                }", "+            }", "+            catch (Exception e) {", "+                e.printStackTrace();", "+            }", "+", "+            return null;", "+        }", "-    private InputStream getDescriptor(File file)", "-        throws BuildException {", "-        try {", "-            final ZipFile zipfile = new ZipFile(file);", "-            ZipEntry entry = zipfile.getEntry(ANT_DESCRIPTOR);", "-            if (entry == null) {", "-                return null;", "-            }", "-", "-            // Guarantee that when Entry is closed so does the zipfile instance.", "-            return", "-                new FilterInputStream(zipfile.getInputStream(entry)) {", "-                    public void close()", "-                        throws IOException {", "-                        super.close();", "-                        zipfile.close();", "-                    }", "-                };", "-        }", "-        catch (ZipException ze) {", "-            throw new BuildException(\"Not a library file.\", ze, location);", "-        }", "-        catch (IOException ioe) {", "-            throw new BuildException(\"Cannot read library content.\",", "-                    ioe, location);", "-        }"]}]}
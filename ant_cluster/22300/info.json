{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a61449663ccf3f52d99a74fa3b6642f1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12d3c7b2e89e24eedaedc73582544cf1", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/project/DefaultProjectBuilder.java", "commitBeforeChange": "58f8db35ee5db94294191fc2599cb02a8086b881", "commitAfterChange": "8c97911720b40557d78672245bc2e7f724917297", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public DefaultProjectBuilder()", "signatureAfterChange": "      public DefaultProjectBuilder()", "diff": ["-        ConfigurationBuilder builder = null;", "-        try { builder = new ConfigurationBuilder(); }", "-        catch( final SAXException se ) {}", "-", "-        m_configurationBuilder = builder;", "+        m_builder = new ConfigurationBuilder();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d1d8da26ca50df49fcd3f60f0feb980", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/types/resources/Files.java", "commitBeforeChange": "cbe9978c14108b0ce3235e6c695b21efd9c2937e", "commitAfterChange": "a738000acab66d8d7ce5cf563f6dd96d9c7024fb", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "     public synchronized Object clone()", "signatureAfterChange": "     public synchronized Object clone()", "diff": ["-        try {", "-            Files f = (Files) super.clone();", "-            f.defaultPatterns = (PatternSet) defaultPatterns.clone();", "-            f.additionalPatterns = new Vector(additionalPatterns.size());", "-            for (Iterator iter = additionalPatterns.iterator(); iter.hasNext();) {", "-                PatternSet ps = (PatternSet) iter.next();", "-                f.additionalPatterns.add(ps.clone());", "-            }", "-            f.selectors = new Vector(selectors);", "-            return f;", "-        } catch (CloneNotSupportedException e) {", "-            throw new BuildException(e);", "+        Files f = (Files) super.clone();", "+        f.defaultPatterns = (PatternSet) defaultPatterns.clone();", "+        f.additionalPatterns = new Vector(additionalPatterns.size());", "+        for (Iterator iter = additionalPatterns.iterator(); iter.hasNext();) {", "+            PatternSet ps = (PatternSet) iter.next();", "+            f.additionalPatterns.add(ps.clone());", "+        return f;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60930985a9c99ef83d999323fc9e5641", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/regexp/JakartaRegexpMatcher.java", "commitBeforeChange": "fcd6548344aa3f590435beff55530cfdb6983588", "commitAfterChange": "ffea0a9f7459b7c64148ae244b22e847bad9128b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void setPattern(String pattern) throws BuildException", "signatureAfterChange": "     public void setPattern(String pattern)", "diff": ["-    public void setPattern(String pattern) throws BuildException {", "-        try {", "-            this.pattern = pattern;", "-            reg = new RE(pattern);", "-        } catch (RESyntaxException e) {", "-            throw new BuildException(e);", "-        }", "+    public void setPattern(String pattern) {", "+        this.pattern = pattern;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6adf3a205e1d6f55912993e624915d96", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/junit/FormatterElement.java", "commitBeforeChange": "f5fb02e4934074f9b1ec52c7435e282231bae7bc", "commitAfterChange": "14c701bcf995a211c209e2cb4ef2507e17975f75", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     JUnitTaskMirror.JUnitResultFormatterMirror createFormatter(ClassLoader loader)             throws BuildException", "signatureAfterChange": "     JUnitTaskMirror.JUnitResultFormatterMirror createFormatter(ClassLoader loader)             throws BuildException", "diff": ["-            try {", "-                out = new BufferedOutputStream(new FileOutputStream(outFile));", "-            } catch (java.io.IOException e) {", "-                throw new BuildException(\"Unable to open file \" + outFile, e);", "-            }", "+            out = new DelayedFileOutputStream(outFile);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c362d50dec99d351d4691329d4556afa", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a29ded66fe2ecdbc72cc97446fb321b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ImportTask.java", "commitBeforeChange": "03a994486aa12f5751d3bffd1986fd2a0dadffe6", "commitAfterChange": "0be94ce296ad1d671cbbfca63d7c2d706d17d7fe", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-    ", "-        ProjectHelper2.AntXmlContext context;", "-        context=(ProjectHelper2.AntXmlContext)project.getReference(\"ant.parsing.context\");", "-        context.importlevel++;", "+        ProjectHelper helper=", "+                (ProjectHelper)project.getReference(\"ant.projectHelper\");", "+        Vector importStack=helper.getImportStack();", "+        Object currentSource=importStack.elementAt(importStack.size() - 1);", "-        project.log(\"Importing file \"+file +\" from \"+", "-                    context.buildFile.getAbsolutePath() +", "-                \"( level=\" + context.importlevel + \" )\",", "-                    Project.MSG_VERBOSE);", "+//        ProjectHelper2.AntXmlContext context;", "+//        context=(ProjectHelper2.AntXmlContext)project.getReference(\"ant.parsing.context\");", "+", "+//        File buildFile=context.buildFile;", "+//        File buildFileParent=context.buildFileParent;", "+        File buildFile=(File)currentSource;", "+        File buildFileParent=new File(buildFile.getParent());", "+", "+        project.log(\"Importing file \"+ file +\" from \"+", "+                    buildFile.getAbsolutePath(), Project.MSG_VERBOSE);", "-            importedFile = new File(context.buildFileParent, file);", "+            importedFile = new File( buildFileParent, file);", "+", "-                                         context.buildFile.getAbsolutePath());", "+                                         buildFile.getAbsolutePath());", "-        // Add parent build file to the map to avoid cycles...", "-        String parentFilename = getPath(context.buildFile);", "-        if (!context.importedFiles.containsKey(parentFilename)) {", "-            context.importedFiles.put(parentFilename, context.buildFile);", "-        }", "-", "-        // Make sure we import the file only once", "-        String importedFilename = getPath(importedFile);", "-        if (context.importedFiles.containsKey(importedFilename)) {", "-            project.log(\"\\nSkipped already imported file:\\n   \"+", "-                    importedFilename+\"\\n\",Project.MSG_WARN);", "-            context.importlevel--;", "+        if( importStack.contains(importedFile) ) {", "+            project.log(\"\\nSkipped already imported file to avoid loop:\\n   \"+", "+                    importedFile + \"\\n\",Project.MSG_WARN);", "-        } else {", "-            context.importedFiles.put(importedFilename, importedFile);", "-        context.ignoreProjectTag=true;", "-        context.helper.parse(project, importedFile,", "-                new ProjectHelper2.RootHandler(context));", "+//        // Add parent build file to the map to avoid cycles...", "+//        String parentFilename = getPath(buildFile);", "+//        if (!context.importedFiles.containsKey(parentFilename)) {", "+//            context.importedFiles.put(parentFilename, buildFile);", "+//        }", "+//", "+//        // Make sure we import the file only once", "+//        String importedFilename = getPath(importedFile);", "+//        if (context.importedFiles.containsKey(importedFilename)) {", "+//            project.log(\"\\nSkipped already imported file:\\n   \"+", "+//                    importedFilename+\"\\n\",Project.MSG_WARN);", "+//            return;", "+//        } else {", "+//            context.importedFiles.put(importedFilename, importedFile);", "+//        }", "-        context.importlevel--;", "+//        context.ignoreProjectTag=true;", "+//        context.helper.parse(project, importedFile,", "+//                new ProjectHelper2.RootHandler(context));", "+", "+        helper.parse( project, importedFile );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57f2fd87f58fcfc5e76a69f68a543967", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/helper/ProjectHelper2.java", "commitBeforeChange": "7cbce4bf09d398a8f7cb9011b3f859f09274aa82", "commitAfterChange": "c2dba687256b368d6ca095487a17d432dcab22e4", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 15, "signatureBeforeChange": "         public void onStartElement(String uri, String tag, String qname,                                    Attributes attrs,                                    AntXmlContext context)             throws SAXParseException", "signatureAfterChange": "         public void onStartElement(String uri, String tag, String qname,                                    Attributes attrs,                                    AntXMLContext context)             throws SAXParseException", "diff": ["-                                   AntXmlContext context)", "-            throws SAXParseException", "-        {", "+                                   AntXMLContext context)", "+            throws SAXParseException {", "-            Project project=context.getProject();", "+            Project project = context.getProject();", "-                    if ( value != null && !value.equals(\"\")) {", "-                        if (!context.ignoreProjectTag )", "+                    if (value != null && !value.equals(\"\")) {", "+                        if (!context.isIgnoringProjectTag()) {", "+                        }", "-                        context.currentProjectName=value;", "+                        context.setCurrentProjectName(value);", "-                        if (!context.ignoreProjectTag ) {", "+                        if (!context.isIgnoringProjectTag()) {", "-                        if (!context.ignoreProjectTag ) {", "+                        if (!context.isIgnoringProjectTag()) {", "-                    if (!context.ignoreProjectTag )", "+                    if (!context.isIgnoringProjectTag()) {", "+                    }", "-                    throw new SAXParseException(\"Unexpected attribute \\\"\" + attrs.getQName(i) + \"\\\"\", context.locator);", "+                    throw new SAXParseException(\"Unexpected attribute \\\"\"", "+                        + attrs.getQName(i) + \"\\\"\", context.getLocator());", "-            String antFileProp = \"ant.file.\" + context.currentProjectName;", "+            String antFileProp = \"ant.file.\" + context.getCurrentProjectName();", "-                if( context.ignoreProjectTag &&", "-                    !dupFile.equals(context.buildFile)) {", "-                    project.log(\"Duplicated project name in import. Project \"+", "-                        context.currentProjectName + \" defined first in \" +", "-                        dup + \" and again in \" + context.buildFile,", "+                if (context.isIgnoringProjectTag() &&", "+                    !dupFile.equals(context.getBuildFile())) {", "+                    project.log(\"Duplicated project name in import. Project \" +", "+                        context.getCurrentProjectName() + \" defined first in \" +", "+                        dup + \" and again in \" + context.getBuildFile(),", "-            if (context.buildFile != null ) {", "-                project.setUserProperty(\"ant.file.\"+context.currentProjectName,", "-                        context.buildFile.toString());", "+            if (context.getBuildFile() != null) {", "+                project.setUserProperty(\"ant.file.\"", "+                    + context.getCurrentProjectName(),", "+                    context.getBuildFile().toString());", "-            if (context.ignoreProjectTag ) {", "+            if (context.isIgnoringProjectTag()) {", "-                    project.setBasedir(context.buildFileParent.getAbsolutePath());", "+                    project.setBasedir(context.getBuildFileParent().getAbsolutePath());", "-                                                               context.buildFileParent));", "+                                                               context.getBuildFileParent()));", "-            project.addTarget(\"\", context.implicitTarget);", "-            context.currentTarget=context.implicitTarget;", "+            project.addTarget(\"\", context.getImplicitTarget());", "+            context.setCurrentTarget(context.getImplicitTarget());"]}]}
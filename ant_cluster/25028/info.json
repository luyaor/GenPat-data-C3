{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5107750028a9fb71f76b412abee9e0ad", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "755d8928992684518753ae97aeae5421", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/tasklet/engine/DefaultTaskletEngine.java", "commitBeforeChange": "c6a798ef68e969311121bbe219367ffcc01bc621", "commitAfterChange": "bba92ec2234c85ea1ff3ec3e4e2bb45adaaf3197", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void init()         throws Exception", "signatureAfterChange": "      public void init()         throws Exception", "diff": ["-        m_locatorRegistry = createLocatorRegistry();", "-        m_factory = createFactory();", "-        setupSubComponent( m_factory );", "-", "+        //converter must be created before configurerer ", "+        //so that it gets placed in configurers componentManager", "-        m_converterEngine.setLogger( m_logger );", "+        m_locatorRegistry = createLocatorRegistry();", "+        m_factory = createFactory();", "+        setupSubComponent( m_factory );", "+", "+        m_dataTypeEngine = createDataTypeEngine();", "+        setupSubComponent( m_dataTypeEngine );", "+", "+", "-        m_tskDeployer.setLogger( m_logger );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7709675ba1223737d413daffc25c5fcd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/DirectoryScanner.java", "commitBeforeChange": "0c132498a8026db624c2fcf7026538c52e47b312", "commitAfterChange": "4004834c04e0eec8f0f698435b0c5983751fb593", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "     private File findFileCaseInsensitive(File base, Vector pathElements)", "signatureAfterChange": "     private File findFileCaseInsensitive(File base, Vector pathElements)", "diff": ["-        } else {", "-            if (!base.isDirectory()) {", "-                return null;", "+        }", "+        if (!base.isDirectory()) {", "+            return null;", "+        }", "+        String[] files = list(base);", "+        if (files == null) {", "+            throw new BuildException(\"IO error scanning directory \"", "+                                     + base.getAbsolutePath());", "+        }", "+        String current = (String) pathElements.remove(0);", "+        for (int i = 0; i < files.length; i++) {", "+            if (files[i].equals(current)) {", "+                return findFileCaseInsensitive(", "+                    new File(base, files[i]), pathElements);", "-            String[] files = list(base);", "-            if (files == null) {", "-                throw new BuildException(\"IO error scanning directory \"", "-                                         + base.getAbsolutePath());", "-            }", "-            String current = (String) pathElements.remove(0);", "-            for (int i = 0; i < files.length; i++) {", "-                if (files[i].equals(current)) {", "-                    base = new File(base, files[i]);", "-                    return findFileCaseInsensitive(base, pathElements);", "-                }", "-            }", "-            for (int i = 0; i < files.length; i++) {", "-                if (files[i].equalsIgnoreCase(current)) {", "-                    base = new File(base, files[i]);", "-                    return findFileCaseInsensitive(base, pathElements);", "-                }", "+        }", "+        for (int i = 0; i < files.length; i++) {", "+            if (files[i].equalsIgnoreCase(current)) {", "+                return findFileCaseInsensitive(", "+                    new File(base, files[i]), pathElements);"]}]}
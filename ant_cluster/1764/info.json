{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca3492b5a824faf5e0ddb4b93995035d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81bd4ce1ddae1dd564f98b91e440994f", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/sandbox/embed/ProjectHelperImpl2.java", "commitBeforeChange": "af97c64cb1b6bea8dd0d7aa333a51c7613cbe5e9", "commitAfterChange": "3256156dcc13ead3eba8a9ea02b23ce7f7be8eb2", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 29, "signatureBeforeChange": "         public void onStartElement(String uri, String tag, String qname,                                    Attributes attrs,                                    AntXmlContext context)             throws SAXParseException", "signatureAfterChange": "         public void onStartElement(String uri, String tag, String qname,                                    Attributes attrs,                                    AntXmlContext context)             throws SAXParseException", "diff": ["-            if (context.project.getDataTypeDefinitions().get(qname) != null) {", "+            RuntimeConfigurable2 parentWrapper=context.currentWrapper();", "+            RuntimeConfigurable2 wrapper=null;", "+            ", "+            if (context.getProject().getDataTypeDefinitions().get(qname) != null) {", "-                    element = context.project.createDataType(qname);", "+                    Object element = context.getProject().createDataType(qname);", "+                        // can it happen ? We just checked that the type exists", "-                    target.addDataType(wrapper);", "+                    context.currentTarget.addDataType(wrapper);", "-                    task = context.project.createTask(qname);", "+                    task = context.getProject().createTask(qname);", "-                    task.setProject(context.project);", "+                    task.setProject(context.getProject());", "-                element=task;", "-                task.setOwningTarget(target);", "-                container.addTask(task);", "+                task.setOwningTarget(context.currentTarget);", "+", "+                Object parent=null;", "+                if( parentWrapper!=null ) {", "+                    parent=parentWrapper.getProxy();", "+                }", "+", "+                if( parent instanceof TaskContainer ) {", "+                    // Task included in a TaskContainer", "+                    ((TaskContainer)parent).addTask( task );", "+                } else {", "+                    // Task included in a target ( including the default one ).", "+                    context.currentTarget.addTask( task );", "+                }", "+                // container.addTask(task);", "-                ", "+", "+", "+            context.pushWrapper( wrapper );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bde16e02bb7664900792170da276abc4", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/Main.java", "commitBeforeChange": "d678e492b98fc7a29ed46b3f9d8ffade75c3bb4a", "commitAfterChange": "52418752350fdbbed27fe9c443a077e6b3c61cdf", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected ClassLoader createClassLoader( final File libDir )", "signatureAfterChange": "      private boolean parseCommandLineOptions( final String[] args )", "diff": ["+    private boolean parseCommandLineOptions( final String[] args )", "+            return false;", "+            case HELP_OPT: usage( options ); return false;", "+            case VERSION_OPT: System.out.println( Constants.BUILD_DESCRIPTION ); return false;", "+                m_defines.put( option.getArgument( 0 ), option.getArgument( 1 ) );", "+            case 0: m_targets.add( option.getArgument() ); break;", "+        }", "+", "+        return true;", "+    }", "-     */", "-    protected ClassLoader createClassLoader( final File libDir )", "-    {", "-        final ClassLoader candidate = getClass().getClassLoader();", "-", "-        if( !(candidate instanceof LauncherClassLoader) )", "-        {", "-            getLogger().warn( \"Warning: Unable to add entries from \" +", "-                              \"lib-path to classloader\" );", "-            return candidate;", "-        }", "-", "-        final LauncherClassLoader classLoader = (LauncherClassLoader)candidate;", "-", "-        final ExtensionFileFilter filter =", "-            new ExtensionFileFilter( new String[] { \".jar\", \".zip\" } );", "-", "-        final File[] files = libDir.listFiles( filter );", "-", "-        for( int i = 0; i < files.length; i++ )", "-        {", "-            //except for a few *special* files add all the", "-            //.zip/.jars to classloader", "-            final String name = files[ i ].getName();", "-            if( !name.equals( \"ant.jar\" ) &&", "-                !name.equals( \"myrmidon.jar\" ) &&", "-                !name.equals( \"avalonapi.jar\" ) )", "-            {", "-                try { classLoader.addURL( files[ i ].toURL() ); }", "-                catch( final MalformedURLException mue ) {}", "-            }", "-        }", "-", "-        return classLoader;"]}]}
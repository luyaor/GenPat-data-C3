{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "060cb01cd9a29a8345eca53a46a67e13", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a29ded66fe2ecdbc72cc97446fb321b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ImportTask.java", "commitBeforeChange": "03a994486aa12f5751d3bffd1986fd2a0dadffe6", "commitAfterChange": "0be94ce296ad1d671cbbfca63d7c2d706d17d7fe", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["-    ", "-        ProjectHelper2.AntXmlContext context;", "-        context=(ProjectHelper2.AntXmlContext)project.getReference(\"ant.parsing.context\");", "-        context.importlevel++;", "+        ProjectHelper helper=", "+                (ProjectHelper)project.getReference(\"ant.projectHelper\");", "+        Vector importStack=helper.getImportStack();", "+        Object currentSource=importStack.elementAt(importStack.size() - 1);", "-        project.log(\"Importing file \"+file +\" from \"+", "-                    context.buildFile.getAbsolutePath() +", "-                \"( level=\" + context.importlevel + \" )\",", "-                    Project.MSG_VERBOSE);", "+//        ProjectHelper2.AntXmlContext context;", "+//        context=(ProjectHelper2.AntXmlContext)project.getReference(\"ant.parsing.context\");", "+", "+//        File buildFile=context.buildFile;", "+//        File buildFileParent=context.buildFileParent;", "+        File buildFile=(File)currentSource;", "+        File buildFileParent=new File(buildFile.getParent());", "+", "+        project.log(\"Importing file \"+ file +\" from \"+", "+                    buildFile.getAbsolutePath(), Project.MSG_VERBOSE);", "-            importedFile = new File(context.buildFileParent, file);", "+            importedFile = new File( buildFileParent, file);", "+", "-                                         context.buildFile.getAbsolutePath());", "+                                         buildFile.getAbsolutePath());", "-        // Add parent build file to the map to avoid cycles...", "-        String parentFilename = getPath(context.buildFile);", "-        if (!context.importedFiles.containsKey(parentFilename)) {", "-            context.importedFiles.put(parentFilename, context.buildFile);", "-        }", "-", "-        // Make sure we import the file only once", "-        String importedFilename = getPath(importedFile);", "-        if (context.importedFiles.containsKey(importedFilename)) {", "-            project.log(\"\\nSkipped already imported file:\\n   \"+", "-                    importedFilename+\"\\n\",Project.MSG_WARN);", "-            context.importlevel--;", "+        if( importStack.contains(importedFile) ) {", "+            project.log(\"\\nSkipped already imported file to avoid loop:\\n   \"+", "+                    importedFile + \"\\n\",Project.MSG_WARN);", "-        } else {", "-            context.importedFiles.put(importedFilename, importedFile);", "-        context.ignoreProjectTag=true;", "-        context.helper.parse(project, importedFile,", "-                new ProjectHelper2.RootHandler(context));", "+//        // Add parent build file to the map to avoid cycles...", "+//        String parentFilename = getPath(buildFile);", "+//        if (!context.importedFiles.containsKey(parentFilename)) {", "+//            context.importedFiles.put(parentFilename, buildFile);", "+//        }", "+//", "+//        // Make sure we import the file only once", "+//        String importedFilename = getPath(importedFile);", "+//        if (context.importedFiles.containsKey(importedFilename)) {", "+//            project.log(\"\\nSkipped already imported file:\\n   \"+", "+//                    importedFilename+\"\\n\",Project.MSG_WARN);", "+//            return;", "+//        } else {", "+//            context.importedFiles.put(importedFilename, importedFile);", "+//        }", "-        context.importlevel--;", "+//        context.ignoreProjectTag=true;", "+//        context.helper.parse(project, importedFile,", "+//                new ProjectHelper2.RootHandler(context));", "+", "+        helper.parse( project, importedFile );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ebed87aff1c1ae878c3092fd5f57e2a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/ReplaceTokens.java", "commitBeforeChange": "ca4d619112299ab28dd289a2e0e407ddebc6340c", "commitAfterChange": "6e88f92ead6a5f67935055661a9e8041f5ed8bae", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private void initialize()", "signatureAfterChange": "     private void initialize()", "diff": ["-            for (int i = 0; i < params.length; i++) {", "-                if (params[i] != null) {", "-                    final String type = params[i].getType();", "+            for (Parameter param : params) {", "+                if (param != null) {", "+                    final String type = param.getType();", "-                        final String name = params[i].getName();", "-                        String value = params[i].getValue();", "+                        final String name = param.getName();", "-                            if (value.length() == 0) {", "-                                throw new BuildException(\"Begin token cannot \"", "-                                    + \"be empty\");", "-                            }", "-                            beginToken = params[i].getValue().charAt(0);", "+                            beginToken = param.getValue();", "-                            if (value.length() == 0) {", "-                                throw new BuildException(\"End token cannot \"", "-                                    + \"be empty\");", "-                            }", "-                            endToken = params[i].getValue().charAt(0);", "+                            endToken = param.getValue();", "-                        final String name = params[i].getName();", "-                        final String value = params[i].getValue();", "+                        final String name = param.getName();", "+                        final String value = param.getValue();", "-                            new FileResource(new File(params[i].getValue())));", "+                                new FileResource(new File(param.getValue())));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82484d8681784956185b5a8ecfe84992", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/aut/tar/TarInputStream.java", "commitBeforeChange": "0b93bdd7cdfe6a7a48f02cf125014e5d538d5381", "commitAfterChange": "1447e596aa13ca3441f24a8e163f4a255c5a7e23", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public TarEntry getNextEntry()         throws IOException", "signatureAfterChange": "     public TarEntry getNextEntry()         throws IOException", "diff": ["-        if( this.hasHitEOF )", "+        if( m_hasHitEOF )", "-        if( this.currEntry != null )", "+        if( m_currEntry != null )", "-            int numToSkip = this.entrySize - this.entryOffset;", "+            final int numToSkip = m_entrySize - m_entryOffset;", "-            if( this.debug )", "+            if( m_debug )", "-                System.err.println( \"TarInputStream: SKIP currENTRY '\"", "-                                    + this.currEntry.getName() + \"' SZ \"", "-                                    + this.entrySize + \" OFF \"", "-                                    + this.entryOffset + \"  skipping \"", "-                                    + numToSkip + \" bytes\" );", "+                final String message = \"TarInputStream: SKIP currENTRY '\" +", "+                    m_currEntry.getName() + \"' SZ \" + m_entrySize +", "+                    \" OFF \" + m_entryOffset + \"  skipping \" + numToSkip + \" bytes\";", "+                debug( message );", "-                this.skip( numToSkip );", "+                skip( numToSkip );", "-            this.readBuf = null;", "+            m_readBuf = null;", "-        byte[] headerBuf = this.buffer.readRecord();", "-", "+        final byte[] headerBuf = m_buffer.readRecord();", "-            if( this.debug )", "+            if( m_debug )", "-                System.err.println( \"READ NULL RECORD\" );", "+                debug( \"READ NULL RECORD\" );", "-            this.hasHitEOF = true;", "+            m_hasHitEOF = true;", "-        else if( this.buffer.isEOFRecord( headerBuf ) )", "+        else if( m_buffer.isEOFRecord( headerBuf ) )", "-            if( this.debug )", "+            if( m_debug )", "-                System.err.println( \"READ EOF RECORD\" );", "+                debug( \"READ EOF RECORD\" );", "-            this.hasHitEOF = true;", "+            m_hasHitEOF = true;", "-        if( this.hasHitEOF )", "+        if( m_hasHitEOF )", "-            this.currEntry = null;", "+            m_currEntry = null;", "-            this.currEntry = new TarEntry( headerBuf );", "+            m_currEntry = new TarEntry( headerBuf );", "-            if( !( headerBuf[ 257 ] == 'u' && headerBuf[ 258 ] == 's'", "-                && headerBuf[ 259 ] == 't' && headerBuf[ 260 ] == 'a'", "-                && headerBuf[ 261 ] == 'r' ) )", "+            if( !( headerBuf[ 257 ] == 'u' && headerBuf[ 258 ] == 's' &&", "+                headerBuf[ 259 ] == 't' && headerBuf[ 260 ] == 'a' &&", "+                headerBuf[ 261 ] == 'r' ) )", "-                this.entrySize = 0;", "-                this.entryOffset = 0;", "-                this.currEntry = null;", "+                m_entrySize = 0;", "+                m_entryOffset = 0;", "+                m_currEntry = null;", "-                throw new IOException( \"bad header in block \"", "-                                       + this.buffer.getCurrentBlockNum()", "-                                       + \" record \"", "-                                       + this.buffer.getCurrentRecordNum()", "-                                       + \", \" +", "-                                       \"header magic is not 'ustar', but '\"", "-                                       + headerBuf[ 257 ]", "-                                       + headerBuf[ 258 ]", "-                                       + headerBuf[ 259 ]", "-                                       + headerBuf[ 260 ]", "-                                       + headerBuf[ 261 ]", "-                                       + \"', or (dec) \"", "-                                       + ( (int)headerBuf[ 257 ] )", "-                                       + \", \"", "-                                       + ( (int)headerBuf[ 258 ] )", "-                                       + \", \"", "-                                       + ( (int)headerBuf[ 259 ] )", "-                                       + \", \"", "-                                       + ( (int)headerBuf[ 260 ] )", "-                                       + \", \"", "-                                       + ( (int)headerBuf[ 261 ] ) );", "+                final String message = \"bad header in block \" +", "+                    m_buffer.getCurrentBlockNum() +", "+                    \" record \" + m_buffer.getCurrentRecordNum() + \", \" +", "+                    \"header magic is not 'ustar', but '\" +", "+                    headerBuf[ 257 ] +", "+                    headerBuf[ 258 ] +", "+                    headerBuf[ 259 ] +", "+                    headerBuf[ 260 ] +", "+                    headerBuf[ 261 ] +", "+                    \"', or (dec) \" +", "+                    ( (int)headerBuf[ 257 ] ) + \", \" +", "+                    ( (int)headerBuf[ 258 ] ) + \", \" +", "+                    ( (int)headerBuf[ 259 ] ) + \", \" +", "+                    ( (int)headerBuf[ 260 ] ) + \", \" +", "+                    ( (int)headerBuf[ 261 ] );", "+", "+                throw new IOException( message );", "-            if( this.debug )", "+            if( m_debug )", "-                System.err.println( \"TarInputStream: SET CURRENTRY '\"", "-                                    + this.currEntry.getName()", "-                                    + \"' size = \"", "-                                    + this.currEntry.getSize() );", "+                final String message = \"TarInputStream: SET CURRENTRY '\" +", "+                    m_currEntry.getName() + \"' size = \" + m_currEntry.getSize();", "+                debug( message );", "-            this.entryOffset = 0;", "+            m_entryOffset = 0;", "-            this.entrySize = (int)this.currEntry.getSize();", "+            m_entrySize = (int)m_currEntry.getSize();", "-        if( this.currEntry != null && this.currEntry.isGNULongNameEntry() )", "+        if( null != m_currEntry && m_currEntry.isGNULongNameEntry() )", "-            StringBuffer longName = new StringBuffer();", "-            byte[] buffer = new byte[ 256 ];", "+            final StringBuffer longName = new StringBuffer();", "+            final byte[] buffer = new byte[ 256 ];", "-                longName.append( new String( buffer, 0, length ) );", "+                final String str = new String( buffer, 0, length );", "+                longName.append( str );", "-            this.currEntry.setName( longName.toString() );", "+            m_currEntry.setName( longName.toString() );", "-        return this.currEntry;", "+        return m_currEntry;"]}]}
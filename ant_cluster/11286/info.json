{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "94d7d6d804cfe02d4555fb2df7c57a8c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30556803d85d10c4c3f6bc17f6ec1fff", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/todo/org/apache/tools/bzip2/CBZip2InputStream.java", "commitBeforeChange": "c05fecf453869e6962a7f3ba8ec302b628a997ba", "commitAfterChange": "7ac20d949c1479a45698ca673b1de7321e9977f2", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 28, "signatureBeforeChange": "      private void recvDecodingTables()", "signatureAfterChange": "      private void recvDecodingTables()", "diff": ["-        char len[][] = new char[ N_GROUPS ][ MAX_ALPHA_SIZE ];", "-        int i;", "-        int j;", "-        int t;", "-        int nGroups;", "-        int nSelectors;", "-        int alphaSize;", "-        int minLen;", "-        int maxLen;", "-        boolean inUse16[] = new boolean[ 16 ];", "-", "-        /*", "-         * Receive the mapping table", "-         */", "-        for( i = 0; i < 16; i++ )", "-            if( bsR( 1 ) == 1 )", "-                inUse16[ i ] = true;", "-            else", "-                inUse16[ i ] = false;", "-", "-        for( i = 0; i < 256; i++ )", "-            inUse[ i ] = false;", "-", "-        for( i = 0; i < 16; i++ )", "-            if( inUse16[ i ] )", "-                for( j = 0; j < 16; j++ )", "-                    if( bsR( 1 ) == 1 )", "-                        inUse[ i * 16 + j ] = true;", "-", "+        buildInUseTable();", "-        alphaSize = nInUse + 2;", "+        final int alphaSize = m_nInUse + 2;", "-        nGroups = bsR( 3 );", "-        nSelectors = bsR( 15 );", "-        for( i = 0; i < nSelectors; i++ )", "+        final int groupCount = bsR( 3 );", "+        final int selectorCount = bsR( 15 );", "+        for( int i = 0; i < selectorCount; i++ )", "-            j = 0;", "+            int run = 0;", "-                j++;", "-            selectorMtf[ i ] = (char)j;", "-        }", "-        {", "-            /*", "-             * Undo the MTF values for the selectors.", "-             */", "-            char pos[] = new char[ N_GROUPS ];", "-            char tmp;", "-            char v;", "-            for( v = 0; v < nGroups; v++ )", "-                pos[ v ] = v;", "-", "-            for( i = 0; i < nSelectors; i++ )", "-                v = selectorMtf[ i ];", "-                tmp = pos[ v ];", "-                while( v > 0 )", "-                {", "-                    pos[ v ] = pos[ v - 1 ];", "-                    v--;", "-                }", "-                pos[ 0 ] = tmp;", "-                selector[ i ] = tmp;", "+                run++;", "+            m_selectorMtf[ i ] = (char)run;", "+         * Undo the MTF values for the selectors.", "+         */", "+        final char pos[] = new char[ N_GROUPS ];", "+        for( char v = 0; v < groupCount; v++ )", "+        {", "+            pos[ v ] = v;", "+        }", "+", "+        for( int i = 0; i < selectorCount; i++ )", "+        {", "+            int v = m_selectorMtf[ i ];", "+            final char tmp = pos[ v ];", "+            while( v > 0 )", "+            {", "+                pos[ v ] = pos[ v - 1 ];", "+                v--;", "+            }", "+            pos[ 0 ] = tmp;", "+            m_selector[ i ] = tmp;", "+        }", "+", "+        final char len[][] = new char[ N_GROUPS ][ MAX_ALPHA_SIZE ];", "+        /*", "-        for( t = 0; t < nGroups; t++ )", "+        for( int i = 0; i < groupCount; i++ )", "-            for( i = 0; i < alphaSize; i++ )", "+            for( int j = 0; j < alphaSize; j++ )", "+                    {", "+                    }", "+                    {", "+                    }", "-                len[ t ][ i ] = (char)curr;", "+                len[ i ][ j ] = (char)curr;", "-        for( t = 0; t < nGroups; t++ )", "+        for( int k = 0; k < groupCount; k++ )", "-            minLen = 32;", "-            maxLen = 0;", "-            for( i = 0; i < alphaSize; i++ )", "+            int minLen = 32;", "+            int maxLen = 0;", "+            for( int i = 0; i < alphaSize; i++ )", "-                if( len[ t ][ i ] > maxLen )", "-                    maxLen = len[ t ][ i ];", "-                if( len[ t ][ i ] < minLen )", "-                    minLen = len[ t ][ i ];", "+                if( len[ k ][ i ] > maxLen )", "+                {", "+                    maxLen = len[ k ][ i ];", "+                }", "+                if( len[ k ][ i ] < minLen )", "+                {", "+                    minLen = len[ k ][ i ];", "+                }", "-            hbCreateDecodeTables( limit[ t ], base[ t ], perm[ t ], len[ t ], minLen,", "+            hbCreateDecodeTables( m_limit[ k ], m_base[ k ], m_perm[ k ], len[ k ], minLen,", "-            minLens[ t ] = minLen;", "+            m_minLens[ k ] = minLen;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4579e533d8bbc6bc1b8cf7c37fbcd53b", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/main/org/apache/tools/bzip2/CBZip2InputStream.java", "commitBeforeChange": "c05fecf453869e6962a7f3ba8ec302b628a997ba", "commitAfterChange": "7ac20d949c1479a45698ca673b1de7321e9977f2", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 28, "signatureBeforeChange": "      private void recvDecodingTables()", "signatureAfterChange": "      private void recvDecodingTables()", "diff": ["-        char len[][] = new char[ N_GROUPS ][ MAX_ALPHA_SIZE ];", "-        int i;", "-        int j;", "-        int t;", "-        int nGroups;", "-        int nSelectors;", "-        int alphaSize;", "-        int minLen;", "-        int maxLen;", "-        boolean inUse16[] = new boolean[ 16 ];", "-", "-        /*", "-         * Receive the mapping table", "-         */", "-        for( i = 0; i < 16; i++ )", "-            if( bsR( 1 ) == 1 )", "-                inUse16[ i ] = true;", "-            else", "-                inUse16[ i ] = false;", "-", "-        for( i = 0; i < 256; i++ )", "-            inUse[ i ] = false;", "-", "-        for( i = 0; i < 16; i++ )", "-            if( inUse16[ i ] )", "-                for( j = 0; j < 16; j++ )", "-                    if( bsR( 1 ) == 1 )", "-                        inUse[ i * 16 + j ] = true;", "-", "+        buildInUseTable();", "-        alphaSize = nInUse + 2;", "+        final int alphaSize = m_nInUse + 2;", "-        nGroups = bsR( 3 );", "-        nSelectors = bsR( 15 );", "-        for( i = 0; i < nSelectors; i++ )", "+        final int groupCount = bsR( 3 );", "+        final int selectorCount = bsR( 15 );", "+        for( int i = 0; i < selectorCount; i++ )", "-            j = 0;", "+            int run = 0;", "-                j++;", "-            selectorMtf[ i ] = (char)j;", "-        }", "-        {", "-            /*", "-             * Undo the MTF values for the selectors.", "-             */", "-            char pos[] = new char[ N_GROUPS ];", "-            char tmp;", "-            char v;", "-            for( v = 0; v < nGroups; v++ )", "-                pos[ v ] = v;", "-", "-            for( i = 0; i < nSelectors; i++ )", "-                v = selectorMtf[ i ];", "-                tmp = pos[ v ];", "-                while( v > 0 )", "-                {", "-                    pos[ v ] = pos[ v - 1 ];", "-                    v--;", "-                }", "-                pos[ 0 ] = tmp;", "-                selector[ i ] = tmp;", "+                run++;", "+            m_selectorMtf[ i ] = (char)run;", "+         * Undo the MTF values for the selectors.", "+         */", "+        final char pos[] = new char[ N_GROUPS ];", "+        for( char v = 0; v < groupCount; v++ )", "+        {", "+            pos[ v ] = v;", "+        }", "+", "+        for( int i = 0; i < selectorCount; i++ )", "+        {", "+            int v = m_selectorMtf[ i ];", "+            final char tmp = pos[ v ];", "+            while( v > 0 )", "+            {", "+                pos[ v ] = pos[ v - 1 ];", "+                v--;", "+            }", "+            pos[ 0 ] = tmp;", "+            m_selector[ i ] = tmp;", "+        }", "+", "+        final char len[][] = new char[ N_GROUPS ][ MAX_ALPHA_SIZE ];", "+        /*", "-        for( t = 0; t < nGroups; t++ )", "+        for( int i = 0; i < groupCount; i++ )", "-            for( i = 0; i < alphaSize; i++ )", "+            for( int j = 0; j < alphaSize; j++ )", "+                    {", "+                    }", "+                    {", "+                    }", "-                len[ t ][ i ] = (char)curr;", "+                len[ i ][ j ] = (char)curr;", "-        for( t = 0; t < nGroups; t++ )", "+        for( int k = 0; k < groupCount; k++ )", "-            minLen = 32;", "-            maxLen = 0;", "-            for( i = 0; i < alphaSize; i++ )", "+            int minLen = 32;", "+            int maxLen = 0;", "+            for( int i = 0; i < alphaSize; i++ )", "-                if( len[ t ][ i ] > maxLen )", "-                    maxLen = len[ t ][ i ];", "-                if( len[ t ][ i ] < minLen )", "-                    minLen = len[ t ][ i ];", "+                if( len[ k ][ i ] > maxLen )", "+                {", "+                    maxLen = len[ k ][ i ];", "+                }", "+                if( len[ k ][ i ] < minLen )", "+                {", "+                    minLen = len[ k ][ i ];", "+                }", "-            hbCreateDecodeTables( limit[ t ], base[ t ], perm[ t ], len[ t ], minLen,", "+            hbCreateDecodeTables( m_limit[ k ], m_base[ k ], m_perm[ k ], len[ k ], minLen,", "-            minLens[ t ] = minLen;", "+            m_minLens[ k ] = minLen;"]}]}
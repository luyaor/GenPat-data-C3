{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fff8569a328464f36e22c21a44eb5b6b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ada68dc622de6defe4f01d0596f4f0e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/ReplaceTokens.java", "commitBeforeChange": "626c8a16d3d9fab9b858a2f191c4b3df51a19f7e", "commitAfterChange": "d67398ecca6c48d849fb8ce9cd1e2d1dd2b16d6c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public final int read() throws IOException", "signatureAfterChange": "     public final int read() throws IOException", "diff": ["-        if (queuedData != null && queuedData.length() > 0) {", "-            final int ch = queuedData.charAt(0);", "-            if (queuedData.length() > 1) {", "-                queuedData = queuedData.substring(1);", "-            } else {", "-                queuedData = null;", "+        if (replaceIndex != -1) {", "+            final int ch = replaceData.charAt(replaceIndex++);", "+            if (replaceIndex >= replaceData.length()) {", "+                replaceIndex = -1;", "+        ", "+        int ch = getNextChar();", "-        int ch = in.read();", "-                ch = in.read();", "+                ch = getNextChar();", "-                queuedData = beginToken + key.toString();", "-                return read();", "+                if (queuedData == null || queueIndex == -1) {", "+                    queuedData = key.toString();", "+                } else {", "+                    queuedData ", "+                        = key.toString() + queuedData.substring(queueIndex);", "+                }", "+                queueIndex = 0;", "+                return beginToken;", "+                ", "-                    queuedData = replaceWith;", "+                    replaceData = replaceWith;", "+                    replaceIndex = 0;", "-                    queuedData = beginToken + key.toString() + endToken;", "-                    return read();", "+                    String newData = key.toString() + endToken;", "+                    if (queuedData == null || queueIndex == -1) {", "+                        queuedData = newData;", "+                    } else {", "+                        queuedData = newData + queuedData.substring(queueIndex);", "+                    }", "+                    queueIndex = 0;", "+                    return beginToken;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "576a32bce2e37e8c499b0da2821a8f4a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/IntrospectionHelper.java", "commitBeforeChange": "e2ae69c5288e614c717a8224cc821cefc930e557", "commitAfterChange": "f2bc3fe7c89755a2e53e79aaf636b4177fe8928d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      private IntrospectionHelper(final Class bean)", "signatureAfterChange": "      private IntrospectionHelper(final Class bean)", "diff": ["+        nestedStorers = new Hashtable();", "+        ", "+            } else if (name.startsWith(\"addConfigured\")", "+                       && java.lang.Void.TYPE.equals(returnType)", "+                       && args.length == 1", "+                       && !java.lang.String.class.equals(args[0])", "+                       && !args[0].isArray()", "+                       && !args[0].isPrimitive()) {", "+                 ", "+                try {", "+                    final Constructor c = ", "+                        args[0].getConstructor(new Class[] {});", "+                    String propName = getPropertyName(name, \"addConfigured\");", "+                    nestedTypes.put(propName, args[0]);", "+                    nestedCreators.put(propName, new NestedCreator() {", "+", "+                            public Object create(Object parent) ", "+                                throws InvocationTargetException, IllegalAccessException, InstantiationException {", "+                                ", "+                                Object o = c.newInstance(new Object[] {});", "+                                return o;", "+                            }", "+", "+                        });", "+                    nestedStorers.put(propName, new NestedStorer() {", "+", "+                            public void store(Object parent, Object child) ", "+                                throws InvocationTargetException, IllegalAccessException, InstantiationException {", "+                                ", "+                                m.invoke(parent, new Object[] {child});", "+                            }", "+", "+                        });", "+                } catch (NoSuchMethodException nse) {", "+                }", "-                    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68d88ff8a6a47e8ec6fcbd070ae913bb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/javacc/JavaCC.java", "commitBeforeChange": "a177bc702d6f9cdcd37e0fff65f577e66b297735", "commitAfterChange": "22b84e3a90aa69d0b0de53d108af5b9caf75a59a", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     protected static String getMainClass(File home, int type)         throws BuildException", "signatureAfterChange": "     protected static String getMainClass(File home, int type)         throws BuildException", "diff": ["-        int majorVersion = getMajorVersionNumber(home);", "+        Path p = new Path(null);", "+        p.createPathElement().setLocation(getArchiveFile(home));", "+        p.addJavaRuntime();", "+        return getMainClass(p, type);", "+    }", "-        switch (majorVersion) {", "-        case 1:", "-        case 2:", "-", "-", "-            break;", "-", "-        case 3:", "-            /*", "-             * This is where the fun starts, JavaCC 3.0 uses", "-             * org.netbeans.javacc, 3.1 uses org.javacc - I wonder", "-             * which version is going to use net.java.javacc.", "-             *", "-             * Look into to the archive to pick up the best", "-             * package.", "-             */", "-            ZipFile zf = null;", "-            try {", "-                zf = new ZipFile(getArchiveFile(home));", "-                if (zf.getEntry(ORG_PACKAGE_3_0.replace('.', '/')) != null) {", "-                } else {", "-                    packagePrefix = ORG_PACKAGE_3_1;", "-                }", "-            } catch (IOException e) {", "-                throw new BuildException(\"Error reading javacc.jar\", e);", "-            } finally {", "-                if (zf != null) {", "-                    try {", "-                        zf.close();", "-                    } catch (IOException e) {", "-                        throw new BuildException(e);", "-                    }", "-            switch (type) {", "-            case TASKDEF_TYPE_JAVACC:", "-                mainClass = ORG_JAVACC_CLASS;", "-", "-            case TASKDEF_TYPE_JJTREE:", "-                mainClass = ORG_JJTREE_CLASS;", "-", "-                break;", "-", "-            case TASKDEF_TYPE_JJDOC:", "-                mainClass = ORG_JJDOC_CLASS;", "-", "-                break;", "-", "-            break;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6eee75f379883032c0b9f3c55018e649", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/i18n/Translate.java", "commitBeforeChange": "a984179d1f7d092e4e0c671a0b4e714cf7a88142", "commitAfterChange": "1dd390137b8f8e921f129269855d1fe5621473a6", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private void translate() throws BuildException", "signatureAfterChange": "     private void translate() throws BuildException", "diff": ["+                        int stLength = startToken.length();", "+                        int etLength = endToken.length();", "-                                startIndex = line.indexOf(startToken, endIndex + 1);", "+                                startIndex = line.indexOf(startToken, endIndex + etLength);", "-                                    startIndex + 1 >= line.length()) {", "+                                    startIndex + stLength >= line.length()) {", "-                                endIndex = line.indexOf(endToken, startIndex + 1);", "+                                endIndex = line.indexOf(endToken, startIndex + stLength);", "-                                String matches = line.substring(startIndex + 1,", "+                                String matches = line.substring(startIndex + stLength,", "-                                    //If there is a white space or = or :, then", "-                                    //it isn't to be treated as a valid key.", "+                                //If there is a white space or = or :, then", "+                                //it isn't to be treated as a valid key.", "-                                    + line.substring(endIndex + 1);", "-                                endIndex = startIndex + replace.length() + 1;", "-                                if (endIndex + 1 >= line.length()) {", "+                                    + line.substring(endIndex + etLength);", "+                                endIndex = startIndex + replace.length() + etLength;", "+                                if (endIndex + etLength >= line.length()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0adf34d86f5fb2506cd962f5464775a", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ReplaceRegExp.java", "commitBeforeChange": "671dff9a1cfe74859b9ec4356974b22840953989", "commitAfterChange": "0faf6e94d6bd5911035e07913286d1ff0c75524b", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     protected void doReplace(File f, int options)          throws IOException", "signatureAfterChange": "     protected void doReplace(File f, int options)          throws IOException", "diff": ["-                        String line = null;", "-                        String res = null;", "-                                    line = linebuf.toString();", "-                                    res  = doReplace(regex, subs, line, options);", "-", "-                                    if (!res.equals(line)) {", "-                                        changes = true;", "-                                    }", "-", "-                                    w.write(res);", "+                                    changes |= replaceAndWrite(linebuf.toString(),", "+                                                               w, options);", "-                                line = linebuf.toString();", "-                                res  = doReplace(regex, subs, line, options);", "-", "-                                if (!res.equals(line)) {", "-                                    changes = true;", "-                                }", "-", "-                                w.write(res);", "+                                changes |= replaceAndWrite(linebuf.toString(),", "+                                                           w, options);", "-                                    line = linebuf.toString();", "-                                    res  = doReplace(regex, subs, line, options);", "-", "-                                    if (!res.equals(line)) {", "-                                        changes = true;", "-                                    }", "-", "-                                    w.write(res);", "+                                    changes |= replaceAndWrite(linebuf.toString(),", "+                                                               w, options);"]}]}
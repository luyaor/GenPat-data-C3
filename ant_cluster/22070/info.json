{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f35137b43160e47c717ad62ce2dbe6a5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3eb37c59872df02626a58fc255847c9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/metamata/MAuditStreamHandler.java", "commitBeforeChange": "7a5c30f33c46dec3fb201dac6878a09c4cfcaf2c", "commitAfterChange": "3b349325f1e1f10b3c4616a1c7a3e9b4ec24c40b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     protected void parseOutput(BufferedReader br) throws IOException", "signatureAfterChange": "     protected void parseOutput(BufferedReader br) throws IOException", "diff": ["+        final MAuditParser parser = new MAuditParser();", "-            processLine(line);", "-        }", "-    }", "+            final MAuditParser.Violation violation = parser.parseLine(line);", "+            if (violation != null) {", "+                addViolation(violation.file, violation);", "+            } else {", "+                // this doesn't match..report it as info, it could be", "+                // either the copyright, summary or a multiline message (damn !)", "+                task.log(line, Project.MSG_INFO);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c41313476cdc4433efbeaa93ca5e8ad3", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/ImportTask.java", "commitBeforeChange": "9c00060b74a8cb502ef8d94cbd380039ebdd4922", "commitAfterChange": "d15bd65fa56c200394f412f61bd6fbd6a42d8ec3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void execute()", "signatureAfterChange": "     public void execute()", "diff": ["-        Object currentSource = importStack.elementAt(importStack.size() - 1);", "-", "-        File buildFile = (File) currentSource;", "+", "+        if (getLocation() == null || getLocation().getFileName() == null) {", "+            throw new BuildException(\"Unable to get location of import task\");", "+        }", "+", "+        File buildFile = new File(getLocation().getFileName());", "+        importedFile = new File(getPath(importedFile));", "+", "-                \"\\nSkipped already imported file to avoid loop:\\n   \"", "+                \"Skipped already imported file:\\n   \""]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "15bc6afeaa27e1543b27f3cb67791acc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21f9a3a90c25cc4211414cf7c3974022", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/Main.java", "commitBeforeChange": "98caa52a0a2816697e533f7864a95b52e293273f", "commitAfterChange": "99529fd6c5e0d622048fe2ea34af150b7a1f09ff", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private void runBuild(ClassLoader coreLoader) throws BuildException", "signatureAfterChange": "     private void runBuild(ClassLoader coreLoader) throws BuildException", "diff": ["-                project.fireBuildFinished(error);", "+                try {", "+                    project.fireBuildFinished(error);", "+                } catch (Throwable t) {", "+                    // yes, I know it is bad style to catch Throwable,", "+                    // but if we don't, we lose valuable information", "+                    System.err.println(\"Caught an exception while logging the\"", "+                                       + \" end of the build.  Exception was:\");", "+                    t.printStackTrace();", "+                    if (error != null) {", "+                        System.err.println(\"There has been an error prior to\"", "+                                           + \" that:\");", "+                        error.printStackTrace();", "+                    }", "+                    throw new BuildException(t);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "733fbf3f88ff6e976eec7db732d9dfe5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/DirectoryScannerTest.java", "commitBeforeChange": "e5235423ccd494cb7516a1df6e3e13a74a22b767", "commitAfterChange": "da5a13f8e4e0e4475f942b5ae5670271b711d423", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testSetFollowLinks()", "signatureAfterChange": "      public void testSetFollowLinks()", "diff": ["-                    Thread.sleep(1000);    ", "+                    Thread.sleep(1000);", "-                ", "+", "-                ", "+", "-            ", "+", "-                ", "+", "-                assertTrue(\"(1) taskdefs package included\", ", "+                assertTrue(\"(1) taskdefs package included\",", "-            ", "+", "-                ", "+", "-            ", "+", "-                assertTrue(\"(2) taskdefs package not included\", ", "+                assertTrue(\"(2) taskdefs package not included\",", "-                ", "+", "-                (new File(\"src/main/org/apache/tools/ThisIsALink\")).delete();", "-            } ", "+                File f = new File(\"src/main/org/apache/tools/ThisIsALink\");", "+                if (!f.delete()) {", "+                    throw new RuntimeException(\"Failed to delete \"+f);", "+                }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7901d43a1155beb4ad9d4cf4bba2949e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/AntClassLoader.java", "commitBeforeChange": "6ea9dc1024fa547e046417d86c602bed21d64a43", "commitAfterChange": "9bd753321ae84d06e3115d0549c2d7dda7972428", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "     protected URL getResourceURL(File file, String resourceName)", "signatureAfterChange": "     protected URL getResourceURL(File file, String resourceName)", "diff": ["-                        jarFile = new JarFile(file);", "+                        try {", "+                            jarFile = new JarFile(file);", "+                        } catch (ZipException notAJar) {", "+                            // raised if a file that is not a ZIP", "+                            // happens to be part of the classpath -", "+                            // this obviously cannot contain the", "+                            // resource", "+                            String msg = \"CLASSPATH element \" + file", "+                                + \" is not a JAR.\";", "+                            log(msg, Project.MSG_WARN);", "+                            System.err.println(msg);", "+                            return null;", "+                        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfc2a5022221a28369754bc2064b9ef5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Checksum.java", "commitBeforeChange": "aee67d5f1e75c16e6c8dd25507067b30045c802f", "commitAfterChange": "6c29cfdd70102a32f666f0f4525bf48da0613bbb", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private boolean generateChecksums() throws BuildException", "signatureAfterChange": "     private boolean generateChecksums() throws BuildException", "diff": ["-                // File is Comparable, so sorting is trivial", "-                Arrays.sort(keyArray);", "+                // File is Comparable, but sort-order is platform", "+                // dependent (case-insensitive on Windows)", "+                Arrays.sort(keyArray, new Comparator() {", "+                        public int compare(Object o1, Object o2) {", "+                            File f1 = (File) o1;", "+                            File f2 = (File) o2;", "+                            return f1 == null ? (f2 == null ? 0 : -1)", "+                                : (f2 == null ? 1", "+                                   : f1.getName().compareTo(f2.getName())", "+                                   );", "+                        }", "+                    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4c45dfd10284b0995f8ffee9e7418d5", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java", "commitBeforeChange": "ab08e2cd2569fe20d71c5b268b5f0994161b8187", "commitAfterChange": "2d1c5924e54f556642b92ec702cdbee071db3e75", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": "             private String getRelativePath(String currentPath, String currentRelativePath)", "signatureAfterChange": "             private String getRelativePath(String currentPath, String currentRelativePath)", "diff": ["+                    if (!relPath.equals(\"\")) {", "+                        relPath = relPath + remoteFileSep;", "+                    }", "-                        throw new BuildException(\"could not find \" + currentElement", "-                            + \" from \" + currentPath);", "+                        // hit a hidden file assume not a symlink", "+                        relPath = relPath + currentElement;", "+                        currentPath = currentPath + remoteFileSep + currentElement;", "+                        log(\"Hidden file \" + relPath + \" assumed to not be a symlink.\", Project.MSG_VERBOSE);", "-                        if (!relPath.equals(\"\")) {", "-                            relPath = relPath + remoteFileSep;", "-                        }"]}]}
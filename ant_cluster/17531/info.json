{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "58d474ff672366c234bc250ad5c4efea", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5446599361c6101d6027848fd208af04", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Copy.java", "commitBeforeChange": "9fb2961443b0e15a6fd0be0aceed9d78e8c9cad7", "commitAfterChange": "f613801836c18d2ed1d7da7deab40f0867b99620", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public void execute() throws BuildException", "signatureAfterChange": "     public void execute() throws BuildException", "diff": ["+        File savedFile = file; // may be altered in validateAttributes", "+        File savedDestFile = destFile;", "+        File savedDestDir = destDir;", "+        FileSet savedFileSet = null;", "+        if (file == null && destFile != null && filesets.size() == 1) {", "+            // will be removed in validateAttributes", "+            savedFileSet = (FileSet) filesets.elementAt(0);", "+        }", "+        ", "-        // deal with the single file", "-        if (file != null) {", "-            if (file.exists()) {", "-                if (destFile == null) {", "-                    destFile = new File(destDir, file.getName());", "-                }", "+        try {", "+            ", "+            // deal with the single file", "+            if (file != null) {", "+                if (file.exists()) {", "+                    if (destFile == null) {", "+                        destFile = new File(destDir, file.getName());", "+                    }", "-                if (forceOverwrite ||", "-                    (file.lastModified() > destFile.lastModified())) {", "-                    fileCopyMap.put(file.getAbsolutePath(), destFile.getAbsolutePath());", "+                    if (forceOverwrite ||", "+                        (file.lastModified() > destFile.lastModified())) {", "+                        fileCopyMap.put(file.getAbsolutePath(), ", "+                                        destFile.getAbsolutePath());", "+                    } else {", "+                        log(file + \" omitted as \" + destFile ", "+                            + \" is up to date.\", Project.MSG_VERBOSE);", "+                    }", "-                    log(file + \" omitted as \" + destFile + \" is up to date.\",", "-                        Project.MSG_VERBOSE);", "-                }", "-            } else {", "-                String message = \"Warning: Could not find file \"", "-                                 + file.getAbsolutePath() + \" to copy.\";", "-                if(!failonerror) {", "-                    log(message);", "-                } else {", "-                    throw new BuildException(message);", "+                    String message = \"Warning: Could not find file \"", "+                        + file.getAbsolutePath() + \" to copy.\";", "+                    if(!failonerror) {", "+                        log(message);", "+                    } else {", "+                        throw new BuildException(message);", "+                    }", "-        }", "-        // deal with the filesets", "-        for (int i=0; i<filesets.size(); i++) {", "-            FileSet fs = (FileSet) filesets.elementAt(i);", "-            DirectoryScanner ds = fs.getDirectoryScanner(project);", "-            File fromDir = fs.getDir(project);", "-", "-            String[] srcFiles = ds.getIncludedFiles();", "-            String[] srcDirs = ds.getIncludedDirectories();", "-            boolean isEverythingIncluded = ds.isEverythingIncluded();", "-            if (isEverythingIncluded", "-                && !flatten && mapperElement == null) {", "-                completeDirMap.put(fromDir, destDir);", "+            // deal with the filesets", "+            for (int i=0; i<filesets.size(); i++) {", "+                FileSet fs = (FileSet) filesets.elementAt(i);", "+                DirectoryScanner ds = fs.getDirectoryScanner(project);", "+                File fromDir = fs.getDir(project);", "+                ", "+                String[] srcFiles = ds.getIncludedFiles();", "+                String[] srcDirs = ds.getIncludedDirectories();", "+                boolean isEverythingIncluded = ds.isEverythingIncluded();", "+                if (isEverythingIncluded", "+                    && !flatten && mapperElement == null) {", "+                    completeDirMap.put(fromDir, destDir);", "+                }", "+                scan(fromDir, destDir, srcFiles, srcDirs);", "-            scan(fromDir, destDir, srcFiles, srcDirs);", "-        }", "+            ", "+            // do all the copy operations now...", "+            doFileOperations();", "+        } finally {", "+            // clean up again, so this instance can be used a second", "+            // time", "+            file = savedFile;", "+            destFile = savedDestFile;", "+            destDir = savedDestDir;", "+            if (savedFileSet != null) {", "+                filesets.insertElementAt(savedFileSet, 0);", "+            }", "-        // do all the copy operations now...", "-        doFileOperations();", "-", "-        // clean up destDir again - so this instance can be used a second", "-        // time without throwing an exception", "-        if (destFile != null) {", "-            destDir = null;", "+            fileCopyMap.clear();", "+            dirCopyMap.clear();", "+            completeDirMap.clear();", "-        fileCopyMap.clear();", "-        dirCopyMap.clear();", "-        completeDirMap.clear();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a98759e7a43437d97e2e28e12b50dfd2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/tests/junit/org/apache/tools/ant/AntClassLoaderTest.java", "commitBeforeChange": "670a91ad2a855185e5d46827c81b4f2ac9680f36", "commitAfterChange": "329f6d356af02746fa26d4304ad57b8bdadb8c8b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void testInvalidZipException() throws Exception", "signatureAfterChange": "     public void testInvalidZipException() throws Exception", "diff": ["-        loader.getResource(\"foo.txt\");", "-        String log = getLog();", "-        int startMessage = log.indexOf(\"Unable to obtain resource from \");", "-        assertTrue(startMessage >= 0);", "-        assertTrue(log.indexOf(\"foo.jar\", startMessage) > 0);", "-", "+        PrintStream sysErr = System.err;", "+        try {", "+            StringBuffer errBuffer = new StringBuffer();", "+            PrintStream err =", "+                new PrintStream(new BuildFileTest.AntOutputStream(errBuffer));", "+            System.setErr(err);", "+            loader.getResource(\"foo.txt\");", "+            String log = getLog();", "+            int startMessage = log.indexOf(\"Unable to obtain resource from \");", "+            assertTrue(startMessage >= 0);", "+            assertTrue(log.indexOf(\"foo.jar\", startMessage) > 0);", "+            log = errBuffer.toString();", "+            startMessage = log.indexOf(\"Unable to obtain resource from \");", "+            assertTrue(startMessage >= 0);", "+            assertTrue(log.indexOf(\"foo.jar\", startMessage) > 0);", "+        } finally {", "+            System.setErr(sysErr);", "+        }"]}]}
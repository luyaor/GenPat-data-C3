{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3ce5139e7a4e3bcab46652acced23ceb", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fd1afda04ce365a510e08c6d75d0108", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/ejb/GenericDeploymentTool.java", "commitBeforeChange": "e83842ef5b089bc230c52bace1fe744225009899", "commitAfterChange": "16b0304fd18bbda8806ed8daa0eafed283c76927", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     protected String getJarBaseName(String descriptorFileName)", "signatureAfterChange": "     protected String getJarBaseName(String descriptorFileName)", "diff": ["-            int lastSeparatorIndex = descriptorFileName.lastIndexOf(File.separator);", "-            String dirName = descriptorFileName.substring(0, lastSeparatorIndex);", "+            File descriptorFile = new File(config.descriptorDir, descriptorFileName);", "+            String path = descriptorFile.getAbsolutePath();", "+            int lastSeparatorIndex ", "+                = path.lastIndexOf(File.separator);", "+            if (lastSeparatorIndex == -1) {", "+                throw new BuildException(\"Unable to determine directory name holding descriptor\");", "+            }", "+            String dirName = path.substring(0, lastSeparatorIndex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe7095b81db4d3d5766e245d2e515d85", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/FileUtils.java", "commitBeforeChange": "5b320cdc202a575a067f3dacbd06bff3ebc43f83", "commitAfterChange": "f40cbc60b34a952432e7abfb70181d0feabd4dd6", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     public String removeLeadingPath(File leading, File path)", "signatureAfterChange": "     public String removeLeadingPath(File leading, File path)", "diff": ["-        String l = normalize(leading.getAbsolutePath()).getAbsolutePath();", "+        // if leading's path ends with a slash, it will be stripped by", "+        // normalize - we always add one so we never think /foo was a", "+        // parent directory of /foobar", "+        String l = normalize(leading.getAbsolutePath()).getAbsolutePath()", "+            + File.separator;", "-            String result = p.substring(l.length());", "-            if (result.startsWith(File.separator)) {", "-                result = result.substring(File.separator.length());", "-            }", "-            return result;", "+            return p.substring(l.length());"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a78644c05691e3eb571b37837f556b3e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "000db2e1ef658124b47122da3b7f3e11", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/jdepend/JDependTask.java", "commitBeforeChange": "d60b6ca1eea0a3372c99965f3c15466328659908", "commitAfterChange": "c6c232893c39257745a8f7a618bcdb5c59791cae", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     public int executeInVM(CommandlineJava commandline) throws BuildException", "signatureAfterChange": "     public int executeInVM(CommandlineJava commandline) throws BuildException", "diff": ["-        if(\"xml\".equals(format)) {", "+        if (\"xml\".equals(format)) {", "-                String msg = \"JDepend Failed when creating the output file: \" + e.getMessage();", "+                String msg = \"JDepend Failed when creating the output file: \" ", "+                    + e.getMessage();", "-        PathTokenizer sourcesPath = new PathTokenizer(getSourcespath().toString());", "+        PathTokenizer sourcesPath ", "+            = new PathTokenizer(getSourcespath().toString());", "-            if (! f.exists() || !f.isDirectory()) {", "-                String msg = \"\\\"\"+ f.getPath() + \"\\\" does not represent a valid directory. JDepend would fail.\";", "+            if (!f.exists() || !f.isDirectory()) {", "+                String msg = \"\\\"\" + f.getPath() + \"\\\" does not represent a valid\" ", "+                    + \" directory. JDepend would fail.\";", "-                String msg = \"JDepend Failed when adding a source directory: \" + e.getMessage();", "+                String msg = \"JDepend Failed when adding a source directory: \" ", "+                    + e.getMessage();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cda13feb6e993727531a72774f1f38dd", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/jdepend/JDependTask.java", "commitBeforeChange": "d60b6ca1eea0a3372c99965f3c15466328659908", "commitAfterChange": "c6c232893c39257745a8f7a618bcdb5c59791cae", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public int executeAsForked(CommandlineJava commandline,ExecuteWatchdog watchdog) throws BuildException", "signatureAfterChange": "     public int executeAsForked(CommandlineJava commandline,                                ExecuteWatchdog watchdog) throws BuildException", "diff": ["-    public int executeAsForked(CommandlineJava commandline,ExecuteWatchdog watchdog) throws BuildException {", "+    public int executeAsForked(CommandlineJava commandline,", "+                               ExecuteWatchdog watchdog) throws BuildException {", "-            // having a space between the file and its path causes commandline to add quotes \"", "-            // around the argument thus making JDepend not taking it into account. Thus we split it in two", "+            // having a space between the file and its path causes commandline ", "+            // to add quotes around the argument thus making JDepend not taking ", "+            // it into account. Thus we split it in two", "-        PathTokenizer sourcesPath = new PathTokenizer(getSourcespath().toString());", "+        PathTokenizer sourcesPath ", "+            = new PathTokenizer(getSourcespath().toString());", "-            if (! f.exists() || !f.isDirectory()) {", "-                throw new BuildException(\"\\\"\"+ f.getPath() + \"\\\" does not represent a valid directory. JDepend would fail.\");", "+            if (!f.exists() || !f.isDirectory()) {", "+                throw new BuildException(\"\\\"\" + f.getPath() + \"\\\" does not \" ", "+                    + \"represent a valid directory. JDepend would fail.\");", "-        log(\"Executing: \"+commandline.toString(), Project.MSG_VERBOSE);", "+        log(\"Executing: \" + commandline.toString(), Project.MSG_VERBOSE);"]}]}
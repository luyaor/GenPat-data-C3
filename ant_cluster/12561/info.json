{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fe671520b739b73aee0c0373743f8969", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42170989fc981b5101d1373d77f87960", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/ant1compat/org/apache/tools/ant/Task.java", "commitBeforeChange": "ead2fe108e54f2c4589a411de36391d596f00a9b", "commitAfterChange": "66d9400a3bd4573e47f17cf944c8e2d7c4a32043", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected void configure( Object target, Configuration configuration ) throws ConfigurationException", "signatureAfterChange": "     protected void configure( Object target, Configuration configuration ) throws ConfigurationException", "diff": ["-        IntrospectionHelper helper = IntrospectionHelper.getHelper( target.getClass() );", "-", "-        // Configure the id.", "-        String id = configuration.getAttribute( \"id\", null );", "-        if( id != null )", "-        {", "-            project.addReference( id, target );", "-        }", "-", "-        // Configure the attributes.", "-        final String[] attribs = configuration.getAttributeNames();", "-        for( int i = 0; i < attribs.length; i++ )", "-        {", "-            final String name = attribs[ i ];", "-            final String value =", "-                project.replaceProperties( configuration.getAttribute( name ) );", "-            try", "-            {", "-                helper.setAttribute( project, target,", "-                                     name.toLowerCase( Locale.US ), value );", "-            }", "-            catch( BuildException be )", "-            {", "-                // id attribute must be set externally", "-                if( !name.equals( \"id\" ) )", "-                {", "-                    throw be;", "-                }", "-            }", "-        }", "-", "-        // Configure the text content.", "-        String text = configuration.getValue( null );", "-        if( text != null )", "-        {", "-            helper.addText( project, target, text );", "-        }", "-", "-        // Configure the nested elements", "-        Configuration[] nestedConfigs = configuration.getChildren();", "-        for( int i = 0; i < nestedConfigs.length; i++ )", "-        {", "-            Configuration nestedConfig = nestedConfigs[ i ];", "-            String name = nestedConfig.getName();", "-            Object nestedElement = helper.createElement( project, target, name );", "-            configure( nestedElement, nestedConfig );", "-            helper.storeElement( project, target, nestedElement, name );", "-        }", "-", "+        //TODO Maybe provide different configuration order for tasks not in a target,", "+        // elements in a TaskContainer etc...", "+        Ant1CompatConfigurer configurer =", "+            new Ant1CompatConfigurer( target, configuration, project );", "+        configurer.createChildren();", "+        configurer.configure();", "+        this.init();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bc959ef973898e948e3228679c4c193", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "c4dee0afafcc57ede3e3d1e81d2d4a1455c484a4", "commitAfterChange": "f52a170159f6dc5beebe07bfb945cb5b3fa5290b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void setReference( final ObjectConfigurer configurer,                                final Object object,                                final String name,                                final String id,                                final Context context )         throws ConfigurationException", "signatureAfterChange": "     private void setReference( final ConfigurationState state,                                final String name,                                final String unresolvedId,                                final Context context )         throws CascadingException", "diff": ["-    private void setReference( final ObjectConfigurer configurer,", "-                               final Object object,", "+    private void setReference( final ConfigurationState state,", "-                               final String id,", "+                               final String unresolvedId,", "-        throws ConfigurationException", "+        throws CascadingException", "-        final PropertyConfigurer childConfigurer = configurer.getProperty( name );", "-        if( null == childConfigurer )", "-        {", "-            final String message = REZ.getString( \"unknown-property.error\", name );", "-            throw new ConfigurationException( message );", "-        }", "+        final PropertyConfigurer childConfigurer = state.getConfigurer().getProperty( name );", "-        // Check if the creator method must be used", "-        if( childConfigurer.useCreator() )", "-        {", "-            final String message = REZ.getString( \"must-be-element.error\" );", "-            throw new ConfigurationException( message );", "-        }", "+        // Resolve any props in the id", "+        Object id = PropertyUtil.resolveProperty( unresolvedId, context, false );", "-        catch( final ContextException ce )", "+        catch( final ContextException exc )", "-            final String message = REZ.getString( \"get-ref.error\", id, name );", "-            throw new ConfigurationException( message, ce );", "+            final String message = REZ.getString( \"get-ref.error\", id );", "+            throw new ConfigurationException( message, exc );", "-            final String message = REZ.getString( \"mismatch-ref-types.error\", id, name );", "+            final String message = REZ.getString( \"mismatch-ref-types.error\", id, type.getName(), ref.getClass().getName() );", "-        try", "-        {", "-            childConfigurer.setValue( object, ref );", "-        }", "-        catch( final ConfigurationException ce )", "-        {", "-            final String message =", "-                REZ.getString( \"bad-set-property.error\", name );", "-            throw new ConfigurationException( message, ce );", "-        }", "+        childConfigurer.addValue( state, ref );"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9c9778a599196c45b005fbf948695caa", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "838112d250a6a9ece07f2c5d7adba8b2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/RuntimeConfigurable.java", "commitBeforeChange": "d884406a09baca6c865a5281f08bb92000928541", "commitAfterChange": "84abb27b2f8c970557388bb60f09f1c3409d8f75", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public synchronized void maybeConfigure(Project p, boolean configureChildren)         throws BuildException", "signatureAfterChange": "     public synchronized void maybeConfigure(Project p, boolean configureChildren)         throws BuildException", "diff": ["-                Object attrValue = null;", "+                Object attrValue = PropertyHelper.getPropertyHelper(p).parseProperties(value);", "-                    attrValue = value;", "-                } else {", "-                    attrValue = PropertyHelper.getPropertyHelper(p).parseProperties(value);", "+                    for (Iterator attrs = ((MacroInstance) target).getMacroDef().getAttributes().iterator(); attrs.hasNext();) {", "+                        MacroDef.Attribute attr = (MacroDef.Attribute) attrs.next();", "+                        if (attr.getName().equals(name)) {", "+                            if (!attr.isDoubleExpanding()) {", "+                                attrValue = value;", "+                            }", "+                            break;", "+                        }", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e40dfd27c5ff2c2de2561bf27a505bac", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/UnknownElement.java", "commitBeforeChange": "8f488f0872a795638f9ebbc51517f85d801c1b67", "commitAfterChange": "28447bc7c09eb2a7210a267ca7a6fb2e54ee488f", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     private boolean handleChild(         String parentUri,         IntrospectionHelper ih,         Object parent, UnknownElement child,         RuntimeConfigurable childWrapper)", "signatureAfterChange": "     private boolean handleChild(         String parentUri,         IntrospectionHelper ih,         Object parent, UnknownElement child,         RuntimeConfigurable childWrapper)", "diff": ["-        if (ih.supportsNestedElement(parentUri, childName,", "-                                     getProject(), parent, child.getQName())) {", "-            IntrospectionHelper.Creator creator =", "-                ih.getElementCreator(", "-                    getProject(), parentUri, parent, childName, child);", "+        if (ih.supportsNestedElement(parentUri, childName, getProject(),", "+                                     parent)) {", "+            IntrospectionHelper.Creator creator = null;", "+            try {", "+                creator = ih.getElementCreator(getProject(), parentUri,", "+                                               parent, childName, child);", "+            } catch (UnsupportedElementException use) {", "+                if (!ih.isDynamic()) {", "+                    throw use;", "+                }", "+                // can't trust supportsNestedElement for dynamic elements", "+                return false;", "+            }"]}]}
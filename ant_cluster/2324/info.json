{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f08d7547e984cc40af4fb6205f5e8743", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81e9fd861e904bb01dfec110d0abd87e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Execute.java", "commitBeforeChange": "a28f64f5cf1b63d9342683d77d79a5cdf9e67f85", "commitAfterChange": "ff41336fc19f549bc995898f4543da6d7e9d9bf9", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 31, "signatureBeforeChange": "     private static Vector addVMSLogicals(Vector environment, BufferedReader in)         throws IOException", "signatureAfterChange": "     private static Map getVMSLogicals(BufferedReader in)         throws IOException", "diff": ["-    private static Vector addVMSLogicals(Vector environment, BufferedReader in)", "+    private static Map getVMSLogicals(BufferedReader in)", "-        for (Iterator i = logicals.keySet().iterator(); i.hasNext();) {", "-            String logical = (String) i.next();", "-            environment.add(logical + \"=\" + logicals.get(logical));", "-        }", "-        return environment;", "+        return logicals;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc712841d4a45bce4952b8503afe7409", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/Reflector.java", "commitBeforeChange": "2cf032e2ec39726aed4c77622b59eadd3828072e", "commitAfterChange": "2e31f97888f11646bebb8939fed00c37c4c863e2", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private void addConvertingSetter(final Method m, String propertyName,                                            final Converter converter,                                            final Class type)", "signatureAfterChange": "     private void addConvertingSetter(Method m, int depth,                                      String propertyName, Converter converter)", "diff": ["-    private void addConvertingSetter(final Method m, String propertyName,", "-                                           final Converter converter,", "-                                           final Class type) {", "-        attributeSetters.put(propertyName.toLowerCase(),", "-            new AttributeSetter() {", "-                public void set(Object obj, String value)", "-                     throws InvocationTargetException, ExecutionException,", "-                    IllegalAccessException {", "-                    Object convertedValue = converter.convert(value, type);", "-                    m.invoke(obj, new Object[]{convertedValue});", "-                }", "-            });", "+    private void addConvertingSetter(Method m, int depth,", "+                                     String propertyName, Converter converter) {", "+        addAttributeSetter(propertyName, ", "+            new AttributeSetter(m, depth, converter));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3a692bb00a4101c41a87ee4bf044347", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/antcore/org/apache/ant/antcore/execution/ExecutionFrame.java", "commitBeforeChange": "e0fef5cf64773a98734998b9736ded96fc8be2c7", "commitAfterChange": "81c17b6164451315e24ae774f1bed668cbca99ce", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 0, "signatureBeforeChange": "     protected ExecutionFrame(Map standardLibs, InitConfig initConfig,                              AntConfig config) throws ConfigException", "signatureAfterChange": "     protected ExecutionFrame(Map standardLibs, InitConfig initConfig,                              AntConfig config) throws ExecutionException", "diff": ["-                             AntConfig config) throws ConfigException {", "+                             AntConfig config) throws ExecutionException {", "-", "-        antLibraries = new HashMap(standardLibs);", "-", "-        try {", "-            // go through the libraries and import all standard ant libraries", "-            for (Iterator i = antLibraries.keySet().iterator(); i.hasNext(); ) {", "-                String libraryId = (String)i.next();", "-                if (libraryId.startsWith(ANT_LIB_PREFIX)) {", "-                    // standard library - import whole library", "-                    importLibrary(libraryId);", "-                }", "-            }", "-        } catch (ExecutionException e) {", "-            throw new ConfigException(e);", "-        }", "-", "+        componentManager.setStandardLibraries(standardLibs);"]}]}
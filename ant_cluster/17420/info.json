{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd55b08ddeff2fbe11fff02374dc6356", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bb8fe93fc5ad1823d6911958c2fe1d9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/optional/unix/Symlink.java", "commitBeforeChange": "1ecdefae95b15e2ed1c1978465ae6589c2eb1e5d", "commitAfterChange": "81ae3f744741f4e58135f7add16c1f732685d6f5", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private void doLink(String res, String lnk) throws BuildException", "signatureAfterChange": "     private void doLink(String res, String lnk) throws BuildException", "diff": ["-        if (overwrite && linkfil.exists()) {", "-            try {", "-                deleteSymlink(linkfil);", "-            } catch (FileNotFoundException fnfe) {", "-                handleError(\"Symlink disappeared before it was deleted: \" + lnk);", "-            } catch (IOException ioe) {", "-                handleError(\"Unable to overwrite preexisting link: \" + lnk);", "+        String options = \"-s\";", "+        if (overwrite) {", "+            options += \"f\";", "+            if (linkfil.exists()) {", "+                try {", "+                    deleteSymlink(linkfil);", "+                } catch (FileNotFoundException fnfe) {", "+                    log(\"Symlink disappeared before it was deleted: \" + lnk);", "+                } catch (IOException ioe) {", "+                    log(\"Unable to overwrite preexisting link or file: \" + lnk,ioe, Project.MSG_INFO);", "+                }", "-        String[] cmd = new String[] {\"ln\", \"-s\", res, lnk};", "-        log(Commandline.toString(cmd));", "+        String[] cmd = new String[] {\"ln\", options, res, lnk};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b7e310cf2c97df751b8f0c56fc559dc", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/Concat.java", "commitBeforeChange": "ec980be7345681968c93f0609e9a3fecb39b9753", "commitAfterChange": "fbb9886634198d8377104bef9ec697fadeb134df", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "     private void cat()", "signatureAfterChange": "     private void cat(ResourceCollection c)", "diff": ["-    private void cat() {", "+    private void cat(ResourceCollection c) {", "-        Reader       reader = null;", "-        char[]       buffer = new char[BUFFER_SIZE];", "+        char[] buffer = new char[BUFFER_SIZE];", "-", "-", "-", "-", "-", "-            if (textBuffer != null) {", "-                reader = new StringReader(", "-                    getProject().replaceProperties(textBuffer.substring(0)));", "-            } else {", "-                reader =  new MultiReader();", "+            if (c.size() > 0) {", "+                concatenate(buffer, writer, new MultiReader(c));", "-", "-            concatenate(buffer, writer, reader);", "-", "-", "-", "-            if (reader != null) {", "-                try {", "-                    reader.close();", "-                } catch (IOException ignore) {", "-                    // ignore", "-                }", "-            }", "-            if (os != null) {", "-                try {", "-                    os.close();", "-                } catch (IOException ignore) {", "-                    // ignore", "-                }", "-            }", "+            FILE_UTILS.close(os);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61ca8635613c7d87072ba86d3e888681", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/ant/configuration/DefaultConfigurer.java", "commitBeforeChange": "c6a798ef68e969311121bbe219367ffcc01bc621", "commitAfterChange": "bba92ec2234c85ea1ff3ec3e4e2bb45adaaf3197", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "      protected boolean setValue( final Object object,                                  Object value,                                  final Method method,                                 final Class sourceClass,                                 final String source )         throws ConfigurationException", "signatureAfterChange": "      protected boolean setValue( final Object object,                                  Object value,                                  final Method method,                                 final Class sourceClass,                                 final String source )         throws ConfigurationException", "diff": ["-        if( !parameterType.isAssignableFrom( sourceClass ) )", "+        try", "-            try", "+            value = m_converter.convert( parameterType, value );", "+        }", "+        catch( final ConverterException ce )", "+        {", "+            if( DEBUG )", "-                value = m_converter.convert( parameterType, object );", "+                m_logger.debug( \"Failed to find converter \", ce );", "-            catch( final ConverterException ce )", "-            {", "-                return false;", "-            }", "-            catch( final Exception e )", "-            {", "-                throw new ConfigurationException( \"Error converting attribute for \" + ", "-                                                  method.getName(),", "-                                                  e );", "-            }", "+", "+            return false;", "+        }", "+        catch( final Exception e )", "+        {", "+            throw new ConfigurationException( \"Error converting attribute for \" + ", "+                                              method.getName(),", "+                                              e );"]}]}
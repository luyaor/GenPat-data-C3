{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "40d7fb75913d85187ac16e98123cee67", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5afa7936fbe7cb3f24a5c13528beb9b2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/util/optional/ScriptRunner.java", "commitBeforeChange": "ebefa298a138aaf7088ad1af981a392b895eff85", "commitAfterChange": "c0b535098106a3b4549151960da251a6e78e627e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void addBeans(Map dictionary)", "signatureAfterChange": "     public boolean supportsLanguage()", "diff": ["-    public void addBeans(Map dictionary) {", "-        for (Iterator i = dictionary.keySet().iterator(); i.hasNext();) {", "-            String key = (String) i.next();", "-            try {", "-                Object val = dictionary.get(key);", "-                addBean(key, val);", "-            } catch (BuildException ex) {", "-                // The key is in the dictionary but cannot be retrieved", "-                // This is usually due references that refer to tasks", "-                // that have not been taskdefed in the current run.", "-                // Ignore", "-            }", "+    public boolean supportsLanguage() {", "+        if (manager != null) {", "+            return true;", "-    }", "+        checkLanguage();", "+        ClassLoader origLoader = replaceContextLoader();", "+        try {", "+            BSFManager m = createManager();", "+            BSFEngine e =", "+                engine != null", "+                ? engine", "+                : m.loadScriptingEngine(getLanguage());", "+            return e != null;", "+        } catch (Exception ex) {", "+            return false;", "+        } finally {", "+            restoreContextLoader(origLoader);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6ea44ca06ab43f03190f72fd430a5db", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/filters/ClassConstants.java", "commitBeforeChange": "01416df30317628b3eda7a26958cce0c2f987b26", "commitAfterChange": "d9d9e2f86fb156cc6e69af999f3ece4c10cbd2e0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public int read() throws IOException", "signatureAfterChange": "     public int read() throws IOException", "diff": ["-                final byte[] bytes = clazz.getBytes();", "+                final byte[] bytes = clazz.getBytes(\"ISO-8859-1\");", "-                } catch (ClassNotFoundException cnfe) {", "-                    throw new IOException(cnfe.getMessage());", "-                } catch (NoSuchMethodException nsme) {", "-                    throw new IOException(nsme.getMessage());", "-                } catch (IllegalAccessException iae) {", "-                    throw new IOException(iae.getMessage());", "-                } catch (IllegalArgumentException iarge) {", "-                    throw new IOException(iarge.getMessage());", "-                } catch (InvocationTargetException ite) {", "-                    throw new IOException(ite.getMessage());", "+                } catch (NoClassDefFoundError ex) {", "+                    throw ex;", "+                } catch (RuntimeException ex) {", "+                    throw ex;", "+                } catch (InvocationTargetException ex) {", "+                    Throwable t = ex.getTargetException();", "+                    if (t instanceof NoClassDefFoundError) {", "+                        throw (NoClassDefFoundError) t;", "+                    }", "+                    if (t instanceof RuntimeException) {", "+                        throw (RuntimeException) t;", "+                    }", "+                    throw new BuildException(t);", "+                } catch (Exception ex) {", "+                    throw new BuildException(ex);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "999a5d354d42556c1f020f7dab77b4b6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b8a169124dbaf78303a2a24d5817e8e", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/builder/DefaultProjectBuilder.java", "commitBeforeChange": "50fb7f5643cba98640e7d4ce2b00736e9d42cbab", "commitAfterChange": "6ff9bf50ad2e4fcda69911d207c8dfe93e7b4e0b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      private Project build( final File file, final HashMap projects )         throws ProjectException", "signatureAfterChange": "      private Project build( final File file, final HashMap projects )         throws ProjectException", "diff": ["-        final URL systemID = extractURL( file );", "-        final Project result = (Project)projects.get( systemID.toString() );", "-        if( null != result )", "+        try", "-            return result;", "+            // Check for cached project", "+            final String systemID = extractURL( file );", "+            final Project result = (Project)projects.get( systemID );", "+            if( null != result )", "+            {", "+                return result;", "+            }", "+", "+            // Parse the project file", "+            final Configuration configuration = parseProject( systemID );", "+", "+            // Build the project model and add to cache", "+            final DefaultProject project = buildProject( file, configuration );", "+            projects.put( systemID, project );", "+", "+            // Build using all top-level attributes", "+            buildTopLevelProject( project, configuration, projects );", "+", "+            return project;", "-", "-        // Parse the project file", "-        final Configuration configuration = parseProject( systemID );", "-", "-        // Build the project model", "-        final DefaultProject project = buildProject( file, configuration );", "-", "-        projects.put( systemID.toString(), project );", "-", "-        //build using all top-level attributes", "-        buildTopLevelProject( project, configuration, projects );", "-", "-        return project;", "+        catch( Exception e )", "+        {", "+            final String message = REZ.getString( \"ant.project-build.error\", file.getAbsolutePath() );", "+            throw new ProjectException( message, e );", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7769000dc9b4f54a33acbd891f74459", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/frontends/CLIMain.java", "commitBeforeChange": "c8ae289ddd72e9f5858612fba38393a3c8698c27", "commitAfterChange": "5b87919be6a8db15efe30f2de6e617aba31ef619", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private void execute( final String[] args )         throws Exception", "signatureAfterChange": "      private void execute( final String[] args )         throws Exception", "diff": ["-        final File homeDir = getHomeDir();", "+        checkHomeDir();", "-        final ProjectListener listener = prepareListener( embeddor );", "-        //create the project", "-        final Project project =", "-            embeddor.createProject( buildFile.toString(), null, m_builderParameters );", "-", "-        //loop over build if we are in incremental mode..", "-        final boolean incremental = m_parameters.getParameterAsBoolean( \"incremental\", false );", "-        if( !incremental )", "+        try", "-            executeBuild( embeddor, project, listener );", "-        }", "-        else", "-        {", "-            executeIncrementalBuild( embeddor, project, listener );", "-        }", "+            final ProjectListener listener = prepareListener( embeddor );", "-        shutdownEmbeddor( embeddor );", "+            //create the project", "+            final Project project =", "+                embeddor.createProject( buildFile.toString(), null, m_builderParameters );", "+", "+            //loop over build if we are in incremental mode..", "+            final boolean incremental = m_parameters.getParameterAsBoolean( \"incremental\", false );", "+            if( !incremental )", "+            {", "+                executeBuild( embeddor, project, listener );", "+            }", "+            else", "+            {", "+                executeIncrementalBuild( embeddor, project, listener );", "+            }", "+        }", "+        catch( final Exception e )", "+        {", "+            final String message = REZ.getString( \"build-failed.error\" );", "+            throw new CascadingException( message, e );", "+        }", "+        finally", "+        {", "+            shutdownEmbeddor( embeddor );", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f73a6446850306c292a3b313686312b9", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/myrmidon/src/java/org/apache/myrmidon/components/configurer/DefaultConfigurer.java", "commitBeforeChange": "99a9f194032b4185fc017d9bfe31e0419cc51f02", "commitAfterChange": "ced321c00be004a78c335295701169edf0dcb55f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void setAttribute( final ObjectConfigurer configurer,                                final Object object,                                final String name,                                final String value,                                final Context context )         throws ConfigurationException", "signatureAfterChange": "     private void setAttribute( final ObjectConfigurer configurer,                                final Object object,                                final String name,                                final String value,                                final Context context )         throws ConfigurationException", "diff": ["-        // Locate the setter for this attribute", "-        final AttributeSetter setter = configurer.getAttributeSetter( name );", "-        if( null == setter )", "+        if( name.endsWith( \"-ref\" ) )", "-            final String message = REZ.getString( \"unknown-attribute.error\", name );", "-            throw new ConfigurationException( message );", "+            // A reference", "+            final String refName = name.substring( 0, name.length() - 4 );", "+            setReference( configurer, object, refName, value, context );", "+        else", "+        {", "+            // Locate the configurer for this attribute", "+            final PropertyConfigurer propConfigurer = configurer.getProperty( name );", "+            if( null == propConfigurer )", "+            {", "+                final String message = REZ.getString( \"unknown-property.error\", name );", "+                throw new ConfigurationException( message );", "+            }", "-        // Set the value", "-        try", "-        {", "-            setValue( setter, object, value, context );", "-        }", "-        catch( final Exception e )", "-        {", "-            final String message = REZ.getString( \"bad-set-attribute.error\", name );", "-            throw new ConfigurationException( message, e );", "+            // Set the value", "+            try", "+            {", "+                setValue( propConfigurer, object, value, context );", "+            }", "+            catch( final Exception e )", "+            {", "+                final String message = REZ.getString( \"bad-set-property.error\", name );", "+                throw new ConfigurationException( message, e );", "+            }"]}]}
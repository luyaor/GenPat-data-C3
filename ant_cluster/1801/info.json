{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a088075e2741b2c18abde05e022caba", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6405c1bad582f55d8ae163005d4aa64", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/taskdefs/rmic/DefaultRmicAdapter.java", "commitBeforeChange": "aca10a1d12baef5b24d64906202659ffbdcf7e0f", "commitAfterChange": "6440b64b5a526e07d4457be2153642524cecc959", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "          public String[] mapFileName(String name)", "signatureAfterChange": "          public String[] mapFileName(String name)", "diff": ["-            if (!attributes.getIiop()) {", "+            /*", "+             * fallback in case we have trouble loading the class or", "+             * don't know how to handle it (there is no easy way to", "+             * know what IDL mode would generate.", "+             *", "+             * This is supposed to make Ant always recompile the", "+             * class, as a file of that name should not exist.", "+             */", "+            String[] target = new String[] {name+\".tmp.\"+rand.nextLong()};", "+", "+            if (!attributes.getIiop() && !attributes.getIdl()) {", "+                // JRMP with simple naming convention", "-                    return new String[] {", "+                    target = new String[] {", "-                    return new String[] {", "+                    target = new String[] {", "-            } else {", "-                int lastSlash = base.lastIndexOf(\"/\");", "+            } else if (!attributes.getIdl()) {", "+                int lastSlash = base.lastIndexOf(File.separatorChar);", "-                return new String[] {", "-                    dirname + \"_\" + filename + getStubClassSuffix() + \".class\",", "-                    dirname + \"_\" + filename + getTieClassSuffix() + \".class\"", "-                };", "+                try {", "+                    Class c = attributes.getLoader().loadClass(classname);", "+", "+                    if (c.isInterface()) {", "+                        // only stub, no tie", "+                        target = new String[] {", "+                            dirname + \"_\" + filename + getStubClassSuffix() ", "+                            + \".class\"", "+                        };", "+                    } else {", "+                        /*", "+                         * stub is derived from implementation, ", "+                         * tie from interface name.", "+                         */", "+                        Class interf = attributes.getRemoteInterface(c);", "+                        String iName = interf.getName();", "+                        String iDir = \"\";", "+                        int iIndex = -1;", "+                        int lastDot = iName.lastIndexOf(\".\");", "+                        if (lastDot == -1) {", "+                            // no package", "+                            iIndex = 0;", "+                        } else {", "+                            iIndex = lastDot + 1;", "+                            iDir = iName.substring(0, iIndex);", "+                            iDir = iDir.replace('.', File.separatorChar);", "+                        }", "+                        ", "+                        target = new String[] {", "+                            dirname + \"_\" + filename + getTieClassSuffix() ", "+                            + \".class\",", "+                            iDir + \"_\" + iName.substring(iIndex) ", "+                            + getStubClassSuffix() + \".class\"", "+                        };", "+                    }", "+                } catch (ClassNotFoundException e) {", "+                    attributes.log(\"Unable to verify class \" + classname", "+                                   + \". It could not be found.\", ", "+                                   Project.MSG_WARN);", "+                } catch (NoClassDefFoundError e) {", "+                    attributes.log(\"Unable to verify class \" + classname", "+                                   + \". It is not defined.\", Project.MSG_WARN);", "+                } catch (Throwable t) {", "+                    attributes.log(\"Unable to verify class \" + classname", "+                                   + \". Loading caused Exception: \"", "+                                   + t.getMessage(), Project.MSG_WARN);", "+                }", "+            return target;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb1d2bd77e94985570c915fbb1b54093", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/testcases/org/apache/tools/ant/DirectoryScannerTest.java", "commitBeforeChange": "59024a8a7b8cec05501e3c6b28a5bb5c8478addf", "commitAfterChange": "07b710cc96c363b69d4e7225c96ffc0296354597", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void testChildrenOfExcludedDirectory()", "signatureAfterChange": "     public void testChildrenOfExcludedDirectory()", "diff": ["+        haveZipPackage = false;", "+        Resource[] includedResources = ds.getIncludedDirectoryResources();", "+        for (int i=0; i<includedResources.length; i++) {", "+            if (includedResources[i].getName().equals(\"zip\")) {", "+                haveZipPackage = true;", "+            } else if (includedResources[i].getName().equals(\"ant\" ", "+                                                             + File.separator", "+                                                             + \"taskdefs\")) {", "+                haveTaskdefsPackage = true;", "+            }", "+        }", "+        assertTrue(\"(1b) zip package included\", haveZipPackage);", "+        assertTrue(\"(1b) taskdefs package not included\", !haveTaskdefsPackage);", "+", "+        haveZipPackage = false;", "+        haveTaskdefsPackage = false;", "+        includedResources = ds.getIncludedDirectoryResources();", "+        for (int i=0; i<includedResources.length; i++) {", "+            if (includedResources[i].getName().equals(\"zip\")) {", "+                haveZipPackage = true;", "+            } else if (includedResources[i].getName().equals(\"ant\"", "+                                                             + File.separator", "+                                                             + \"taskdefs\")) {", "+                haveTaskdefsPackage = true;", "+            }", "+        }", "+        assertTrue(\"(2b) zip package included\", haveZipPackage);", "+        assertTrue(\"(2b) taskdefs package included\", haveTaskdefsPackage);", "+"]}]}
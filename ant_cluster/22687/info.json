{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "263dd2ee53bcef58eb9eff13ab1ac214", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "334e8e53d074bd41227f741ac10b07bb", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/PropertyHelper.java", "commitBeforeChange": "d25488cbbb28cf25e1f91f714c70999fd105432d", "commitAfterChange": "3d706ab8188a674936880b6f4530b0cf3991758b", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "     public void add(Delegate delegate)", "signatureAfterChange": "     public void add(Delegate delegate)", "diff": ["-            for (Iterator iter = getDelegateInterfaces(delegate).iterator(); iter.hasNext();) {", "-                Object key = iter.next();", "-                List list = (List) delegates.get(key);", "+            for (Class<? extends Delegate> key : getDelegateInterfaces(delegate)) {", "+                List<Delegate> list = delegates.get(key);", "-                    list = new ArrayList();", "+                    list = new ArrayList<Delegate>();", "-                    list = new ArrayList(list);", "+                    //copy on write, top priority", "+                    list = new ArrayList<Delegate>(list);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed208b073ce23dd64d71a4ef27d84d57", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "src/main/org/apache/tools/ant/PropertyHelper.java", "commitBeforeChange": "979cf1d7ca80e0af7e3fb5bdb4dc1679ffd15219", "commitAfterChange": "4c4ad3483de60ef46e02f3b4f217e78422ac5ab4", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "     public void add(Delegate delegate)", "signatureAfterChange": "     public void add(Delegate delegate)", "diff": ["-        synchronized (Delegate.class) {", "-            Hashtable newDelegates = (Hashtable) delegates.clone();", "+        synchronized (delegates) {", "-                List list = (List) newDelegates.get(key);", "+                List list = (List) delegates.get(key);", "-                    newDelegates.put(key, list);", "-                }", "-                if (list.contains(delegate)) {", "+                } else {", "+                    list = new ArrayList(list);", "+                delegates.put(key, Collections.unmodifiableList(list));", "-            delegates = newDelegates;"]}]}
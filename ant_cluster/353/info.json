{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "32144d2f9cc2b46d6fabcb9134b3c9cd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1495a96efbc8b0917c4c5eb70f81cf32", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/frontend/org/apache/ant/cli/Commandline.java", "commitBeforeChange": "752f49d5b18f9743f8e4a6dbdc8065d240d9c97a", "commitAfterChange": "da4e1a3aa99899d6aecc6d14c2a7498fa51647aa", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void determineBuildFile() throws FrontendException", "signatureAfterChange": "     private URL determineBuildFile() throws FrontendException", "diff": ["-    private void determineBuildFile() throws FrontendException {", "-        if (buildFileURL == null) {", "-            File defaultBuildFile", "-                = new File(FrontendUtils.DEFAULT_BUILD_FILENAME);", "-            if (!defaultBuildFile.exists()) {", "-                File ant1BuildFile", "-                    = new File(FrontendUtils.DEFAULT_ANT1_FILENAME);", "-                if (ant1BuildFile.exists()) {", "-                    defaultBuildFile = ant1BuildFile;", "+    private URL determineBuildFile() throws FrontendException {", "+", "+        URL buildSourceURL = null;", "+        try {", "+            if (buildSource == null) {", "+                buildSource = FrontendUtils.DEFAULT_BUILD_FILENAME;", "+                File defaultBuildFile = new File(buildSource);", "+                if (!defaultBuildFile.exists()) {", "+                    String ant1File = FrontendUtils.DEFAULT_ANT1_FILENAME;", "+                    File ant1BuildFile = new File(ant1File);", "+                    if (ant1BuildFile.exists()) {", "+                        buildSource = ant1File;", "+                        defaultBuildFile = ant1BuildFile;", "+                    } else {", "+                        throw new FrontendException(\"No build file \"", "+                             + FrontendUtils.DEFAULT_BUILD_FILENAME + \" or \"", "+                             + FrontendUtils.DEFAULT_ANT1_FILENAME + \" found.\");", "+                    }", "+                }", "+                buildSourceURL = InitUtils.getFileURL(defaultBuildFile);", "+            } else {", "+                // we have been given a file as a string - try to figure out if", "+                // it is a URL or just a file", "+                try {", "+                    buildSourceURL = new URL(buildSource);", "+                } catch (MalformedURLException e) {", "+                    // must be a file", "+                    File buildFile = new File(buildSource);", "+                    if (!buildFile.exists()) {", "+                        throw new FrontendException(\"Cannot find build: \"", "+                             + buildSource);", "+                    }", "+                    buildSourceURL = InitUtils.getFileURL(buildFile);", "-            try {", "-                buildFileURL = InitUtils.getFileURL(defaultBuildFile);", "-            } catch (MalformedURLException e) {", "-                throw new FrontendException(\"Build file is not valid\", e);", "-            }", "+            return buildSourceURL;", "+        } catch (MalformedURLException e) {", "+            throw new FrontendException(\"Build file \" + buildSource", "+                 + \" is not valid\", e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0015a19c867adbae2f43e451bad6fb2", "repository": "https://git-wip-us.apache.org/repos/asf/ant.git", "fileName": "proposal/mutant/src/java/cli/org/apache/ant/cli/Commandline.java", "commitBeforeChange": "7499c443d67445ea8fd0b8f4bd56c72251b18bf4", "commitAfterChange": "b7e43ad8c5906ae2b6d6b42f8b2715dc7d2e7a16", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void process(String[] args, InitConfig config)", "signatureAfterChange": "     private void process(String[] args, InitConfig initConfig)", "diff": ["-    private void process(String[] args, InitConfig config) {", "-        this.config = config;", "+    private void process(String[] args, InitConfig initConfig) {", "+        this.config = initConfig;", "+        System.out.println(\"Ant Home is \" + initConfig.getAntHome());", "+", "+            AntConfig userConfig = getAntConfig(initConfig.getUserConfigArea());", "+            AntConfig systemConfig", "+                 = getAntConfig(initConfig.getSystemConfigArea());", "+", "+            AntConfig config = systemConfig;", "+            if (config == null) {", "+                config = userConfig;", "+            } else if (userConfig != null) {", "+                config.merge(userConfig);", "+            }", "+", "+            if (!buildFileURL.getProtocol().equals(\"file\")", "+                 && !config.isRemoteProjectAllowed()) {", "+                throw new ConfigException(\"Remote Projects are not allowed: \"", "+                     + buildFileURL);", "+            }", "+", "-            ExecutionManager executionManager = new ExecutionManager(config);", "+            ExecutionManager executionManager", "+                 = new ExecutionManager(initConfig, config);", "-        } catch (AntException e) {", "-            Location location = e.getLocation();", "-            Throwable cause = e.getCause();", "-            System.out.println(e.getMessage());", "-", "-            if (cause != null) {", "-                System.out.print(\"Root cause: \" + cause.getClass().getName());", "-                if (!cause.getMessage().equals(e.getMessage())) {", "-                    System.out.print(\": \" + cause.getMessage());", "+        } catch (Throwable t) {", "+            if (t instanceof AntException) {", "+                AntException e = (AntException)t;", "+                Location location = e.getLocation();", "+                Throwable cause = e.getCause();", "+                if (location != null && location != Location.UNKNOWN_LOCATION) {", "+                    System.out.print(location);", "-                System.out.println();", "+                System.out.println(e.getMessage());", "+", "+                if (messageOutputLevel >= MessageLevel.MSG_VERBOSE) {", "+                    t.printStackTrace();", "+                }", "+", "+                if (cause != null) {", "+                    System.out.println(\"Root cause: \" + cause.toString());", "+                }", "+            } else {", "+                t.printStackTrace(System.err);", "-            e.printStackTrace();", "-", "-            System.exit(1);", "-        } catch (Throwable t) {", "-            t.printStackTrace();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf8bb898982ac8d4c1a251498bc739eb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "529b2e111ac02bdbdbe4c1a210b3ae99", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/generate/SimpleWeightedGraphMatrixGenerator.java", "commitBeforeChange": "cc219b560ec6d79a360e71173ccfd2e8553dab90", "commitAfterChange": "de23bafdc6358b26e47caffc7213086ee16fe67d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public SimpleWeightedGraph<V, E> build()", "signatureAfterChange": "    @Override   public void generateGraph(Graph<V, E> target, VertexFactory<V> vertexFactory, Map<String, V> resultMap)", "diff": ["-    @Override", "-    public SimpleWeightedGraph<V, E> build() {", "-", "-        if (weights == null)", "-            throw new IllegalArgumentException(\"Graph may not be constructed without weight-matrix specified\");", "-", "-        SimpleWeightedGraph<V, E> target;", "-", "-        if (edgeFactory != null)", "-            target = new SimpleWeightedGraph<V, E>(edgeFactory);", "-        else if (edgeClass != null)", "-            target = new SimpleWeightedGraph<V, E>(edgeClass);", "-        else", "-            throw new IllegalArgumentException(\"Graph may not be constructed only with edge-factory or edge-class specified\");", "-", "-        if (vertices == null)", "-            throw new IllegalArgumentException(\"Graph may not be constructed without vertex-set specified\");", "-", "-        assert vertices.size() == weights.length;", "-", "-        for (V vertex : vertices) {", "-            target.addVertex(vertex);", "-        }", "-", "-        for (int i=0; i < vertices.size(); ++i) {", "-", "-            assert vertices.size() == weights[i].length;", "-", "-            for (int j=0; j < vertices.size(); ++j) {", "-                if (i != j) {", "-                    target.setEdgeWeight(", "-                        target.addEdge(vertices.get(i), vertices.get(j)),", "-                        weights[i][j]", "-                    );", "-                }", "-            }", "-        }", "-", "-        return target;", "-", "-    }", "+  @Override", "+  public void generateGraph(Graph<V, E> target, VertexFactory<V> vertexFactory, Map<String, V> resultMap) {", "+", "+    if (weights == null)", "+      throw new IllegalArgumentException(\"Graph may not be constructed without weight-matrix specified\");", "+", "+    if (edgeFactory != null)", "+      target = new SimpleWeightedGraph<V, E>(edgeFactory);", "+    else if (edgeClass != null)", "+      target = new SimpleWeightedGraph<V, E>(edgeClass);", "+    else", "+      throw new IllegalArgumentException(\"Graph may not be constructed only with edge-factory or edge-class specified\");", "+", "+    if (vertices == null)", "+      throw new IllegalArgumentException(\"Graph may not be constructed without vertex-set specified\");", "+", "+    assert vertices.size() == weights.length;", "+", "+    for (V vertex : vertices) {", "+      target.addVertex(vertex);", "+    }", "+", "+    for (int i=0; i < vertices.size(); ++i) {", "+", "+      assert vertices.size() == weights[i].length;", "+", "+      for (int j=0; j < vertices.size(); ++j) {", "+        if (i != j) {", "+          target.setEdgeWeight(", "+            target.addEdge(vertices.get(i), vertices.get(j)),", "+            weights[i][j]", "+          );", "+        }", "+      }", "+    }", "+", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "820f9dd345f077bfb6cdb319ede9b7d2", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/generate/SimpleWeightedBipartiteGraphMatrixGenerator.java", "commitBeforeChange": "cc219b560ec6d79a360e71173ccfd2e8553dab90", "commitAfterChange": "de23bafdc6358b26e47caffc7213086ee16fe67d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public SimpleWeightedGraph<V, E> build()", "signatureAfterChange": "    @Override   public void generateGraph(Graph<V, E> target, VertexFactory<V> vertexFactory, Map<String, V> resultMap)", "diff": ["-", "-    @Override", "-    public SimpleWeightedGraph<V, E> build() {", "-", "-        if (weights == null)", "-            throw new IllegalArgumentException(\"Graph may not be constructed without weight-matrix specified\");", "-", "-        SimpleWeightedGraph<V, E> target;", "-", "-        if (edgeFactory != null)", "-            target = new SimpleWeightedGraph<V, E>(edgeFactory);", "-        else if (edgeClass != null)", "-            target = new SimpleWeightedGraph<V, E>(edgeClass);", "-        else", "-            throw new IllegalArgumentException(\"Graph may not be constructed only with edge-factory or edge-class specified\");", "-", "-        if (first == null || second == null)", "-            throw new IllegalArgumentException(\"Graph may not be constructed without either of vertex-set partitions specified\");", "-", "-        assert second.size() == weights.length;", "-", "-        for (V vertex : first) {", "-            target.addVertex(vertex);", "-        }", "-", "-        for (V vertex : second) {", "-            target.addVertex(vertex);", "-        }", "-", "-        for (int i=0; i < first.size(); ++i) {", "-", "-            assert first.size() == weights[i].length;", "-", "-            for (int j=0; j < second.size(); ++j) {", "-                target.setEdgeWeight(", "-                    target.addEdge(first.get(i), second.get(j)),", "-                    weights[i][j]", "-                );", "-            }", "-        }", "-", "-        return target;", "-", "-    }", "+  @Override", "+  public void generateGraph(Graph<V, E> target, VertexFactory<V> vertexFactory, Map<String, V> resultMap) {", "+", "+    if (weights == null)", "+      throw new IllegalArgumentException(\"Graph may not be constructed without weight-matrix specified\");", "+", "+    if (edgeFactory != null)", "+      target = new SimpleWeightedGraph<V, E>(edgeFactory);", "+    else if (edgeClass != null)", "+      target = new SimpleWeightedGraph<V, E>(edgeClass);", "+    else", "+      throw new IllegalArgumentException(\"Graph may not be constructed only with edge-factory or edge-class specified\");", "+", "+    if (first == null || second == null)", "+      throw new IllegalArgumentException(\"Graph may not be constructed without either of vertex-set partitions specified\");", "+", "+    assert second.size() == weights.length;", "+", "+    for (V vertex : first) {", "+      target.addVertex(vertex);", "+    }", "+", "+    for (V vertex : second) {", "+      target.addVertex(vertex);", "+    }", "+", "+    for (int i=0; i < first.size(); ++i) {", "+", "+      assert first.size() == weights[i].length;", "+", "+      for (int j=0; j < second.size(); ++j) {", "+        target.setEdgeWeight(", "+          target.addEdge(first.get(i), second.get(j)),", "+          weights[i][j]", "+        );", "+      }", "+    }", "+", "+  }"]}]}
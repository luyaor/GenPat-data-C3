{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da802b16727cc4626ae1608bec2e948e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06c6edc11f492705504d7fcfba365c21", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/GraphOrdering.java", "commitBeforeChange": "aa92fe16c7852c9f9d1bf3a60c5718fcffd0ae0a", "commitAfterChange": "cb1cae1f97dd9ffd761a89cc949eb78f64d8e9dc", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic V getVertex(int vertexOrder)", "signatureAfterChange": " \t@SuppressWarnings(\"unchecked\") \tpublic V getVertex(int vertexOrder)", "diff": ["+\t// be careful: there's no check for NULL_NODE", "+\t@SuppressWarnings(\"unchecked\")", "-\t\treturn mapOrderToVertex.get(new Integer(vertexOrder));", "+\t\treturn (V) mapOrderToVertex[vertexOrder];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "161bcee680011946f2fa10e28a6b274d", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/experimental/ProximityIterator.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     protected final Object provideNextVertex()", "signatureAfterChange": "     protected final V provideNextVertex()", "diff": ["-    protected final Object provideNextVertex()", "+    protected final V provideNextVertex()", "-        return ((HeapVertex) m_heap.extractTop()).getVertex();", "+        return (V)((HeapVertex<E>) m_heap.extractTop()).getVertex();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18f66af900fdc7e6d2fcb81ab060a5c4", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/experimental/ProximityIterator.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     protected final void encounterVertexAgain(Object vertex, Edge edge)", "signatureAfterChange": "     protected final void encounterVertexAgain(V vertex, E edge)", "diff": ["-    protected final void encounterVertexAgain(Object vertex, Edge edge)", "+    protected final void encounterVertexAgain(V vertex, E edge)", "-        HeapVertex heapV = getHeapVertex(vertex);", "+        HeapVertex<E> heapV = getHeapVertex(vertex);", "-        HeapVertex heapPre = getHeapVertex(edge.oppositeVertex(vertex));", "+        HeapVertex<E> heapPre = getHeapVertex(edge.oppositeVertex(vertex));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "294d9c20c4547516245e0740084c3b14", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/GraphHelper.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public static <V, E extends Edge<V>> UndirectedGraph<V, E> undirectedGraph(         Graph<V, E> g)", "signatureAfterChange": "     @SuppressWarnings(\"unchecked\") \tpublic static <V, E extends DirEdge<V>> UndirectedGraph<V, Edge<V>> undirectedGraph(         Graph<V, E> g)", "diff": ["-    public static <V, E extends Edge<V>> UndirectedGraph<V, E> undirectedGraph(", "+    @SuppressWarnings(\"unchecked\")", "+\tpublic static <V, E extends DirEdge<V>> UndirectedGraph<V, Edge<V>> undirectedGraph(", "-            return new AsUndirectedGraph((DirectedGraph) g);", "+            return new AsUndirectedGraph<V,Edge<V>>((DirectedGraph)g);", "-            return (UndirectedGraph) g;", "+            return (UndirectedGraph<V,Edge<V>>) g;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4af3f0bfcc5ecdf6bcbd31515c8464e0", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/AsUndirectedGraph.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public List getAllEdges( Object sourceVertex, Object targetVertex )", "signatureAfterChange": "     public List<E> getAllEdges( V sourceVertex, V targetVertex )", "diff": ["-    public List getAllEdges( Object sourceVertex, Object targetVertex ) {", "-        List forwardList = super.getAllEdges( sourceVertex, targetVertex );", "+    public List<E> getAllEdges( V sourceVertex, V targetVertex ) {", "+        List<E> forwardList = super.getAllEdges( sourceVertex, targetVertex );", "-        List reverseList = super.getAllEdges( targetVertex, sourceVertex );", "-        List list =", "+        List<E> reverseList = super.getAllEdges( targetVertex, sourceVertex );", "+        List<E> list ="]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58a4263388ca923250c9087c3272b679", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/util/equivalence/EquivalenceSet.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public EquivalenceSet(         Object aElement,         EquivalenceComparator aEqComparator,         Object aComparatorContext)", "signatureAfterChange": "     public EquivalenceSet(         E aElement,         EquivalenceComparator<? super E,? super C> aEqComparator,         C aComparatorContext)", "diff": ["-        Object aElement,", "-        EquivalenceComparator aEqComparator,", "-        Object aComparatorContext)", "+        E aElement,", "+        EquivalenceComparator<? super E,? super C> aEqComparator,", "+        C aComparatorContext)", "-        this.elementsSet = new HashSet();", "+        this.elementsSet = new HashSet<E>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fee0e5e5ff493424aa7074df17dea47", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/experimental/ProximityIterator.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private final HeapVertex getHeapVertex(Object v)", "signatureAfterChange": "      private final HeapVertex<E> getHeapVertex(Object v)", "diff": ["-    private final HeapVertex getHeapVertex(Object v)", "+    private final HeapVertex<E> getHeapVertex(Object v)", "-            return (HeapVertex) v;", "+            return (HeapVertex<E>) v;", "-        return (HeapVertex) getSeenData(v);", "+        return getSeenData((V)v);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e656c4af63a0eb3d069cbf276ffbe4c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/experimental/ProximityIterator.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected final void encounterVertex(Object vertex, Edge edge)", "signatureAfterChange": "     protected final void encounterVertex(V vertex, E edge)", "diff": ["-    protected final void encounterVertex(Object vertex, Edge edge)", "+    protected final void encounterVertex(V vertex, E edge)", "-        HeapVertex heapV;", "+        HeapVertex<E> heapV;", "-            heapV = (HeapVertex) vertex;", "+            heapV = (HeapVertex<E>) vertex;", "-            heapV = new HeapVertex(vertex);", "+            heapV = new HeapVertex<E>(vertex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93a3f13fdb0aa8408694ce7b8d096226", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/util/equivalence/EquivalenceComparatorChainBase.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public int equivalenceHashcode(Object arg1, Object context)", "signatureAfterChange": "     public int equivalenceHashcode(E arg1, C context)", "diff": ["-    public int equivalenceHashcode(Object arg1, Object context)", "+    public int equivalenceHashcode(E arg1, C context)", "-        for (ListIterator iter = this.chain.listIterator(); iter.hasNext();) {", "-            EquivalenceComparator currentComparator =", "-                (EquivalenceComparator) iter.next();", "+        for (ListIterator<EquivalenceComparator<? super E, ? super C>> iter = this.chain.listIterator();", "+             iter.hasNext();) {", "+            EquivalenceComparator<? super E, ? super C> currentComparator =", "+                iter.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce4e2a1eeec9a462020b1643319fd888", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/ext/JGraphModelAdapter.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     void handleJGraphInsertedVertex(GraphCell jVertex)", "signatureAfterChange": "     @SuppressWarnings(\"unchecked\")     void handleJGraphInsertedVertex(GraphCell jVertex)", "diff": ["+    @SuppressWarnings(\"unchecked\")", "-        Object jtVertex;", "+        V jtVertex;", "-            jtVertex = ((DefaultGraphCell) jVertex).getUserObject();", "+        \t// FIXME hb 28-nov-05: waiting for jgraph to go generic", "+            jtVertex = (V)((DefaultGraphCell) jVertex).getUserObject();", "-            jtVertex = jVertex.toString();", "+            jtVertex = (V)jVertex.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e50a0632c1743efab497913691fa8927", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/traverse/CrossComponentIterator.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "       private void addUnseenChildrenOf( Object vertex )", "signatureAfterChange": "       private void addUnseenChildrenOf( V vertex )", "diff": ["-    private void addUnseenChildrenOf( Object vertex ) {", "-        List edges = m_specifics.edgesOf( vertex );", "+    private void addUnseenChildrenOf( V vertex ) {", "+        List<E> edges = m_specifics.edgesOf( vertex );", "-        for( Iterator i = edges.iterator(  ); i.hasNext(  ); ) {", "-            Edge e = (Edge) i.next(  );", "+        for( Iterator<E> i = edges.iterator(  ); i.hasNext(  ); ) {", "+            E e = i.next(  );", "-            Object v = e.oppositeVertex( vertex );", "+            V v = e.oppositeVertex( vertex );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f931512538ac02706d38004506fa6e3c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/util/equivalence/EquivalenceSet.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public boolean equals(Object other)", "signatureAfterChange": "          @SuppressWarnings(\"unchecked\")     public boolean equals(Object other)", "diff": ["+    ", "+    @SuppressWarnings(\"unchecked\")", "-        Object otherRepresentative = null;", "-        Object otherContext = null;", "+        E otherRepresentative = null;", "+        C otherContext = null;", "-            otherRepresentative = ((EquivalenceSet) other).getRepresentative();", "-            otherContext = ((EquivalenceSet) other).getContext();", "+            otherRepresentative = ((EquivalenceSet<E,C>) other).getRepresentative();", "+            otherContext = ((EquivalenceSet<E,C>) other).getContext();"]}]}
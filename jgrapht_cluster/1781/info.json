{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ec1e9b45e33c4340c4767fd7192d885", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d367f067e89d6c19137583a8d9fe825", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/util/permutation/CollectionPermutationIter.java", "commitBeforeChange": "857bf50cc4b146a4020c6dc6b730687dfcd7de35", "commitAfterChange": "3358959abc414f2281c71486c6c1a90935b1e909", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public String toString()", "signatureAfterChange": "      public String toString()", "diff": ["-        Object [] permutationResult = new Object [this.sourceArray.length];", "-", "-        // Example : this.sourceArray = [\"A\",\"B\",\"C\",\"D\"]", "-        // perOrder:                  = [ 1 , 0 , 3 , 2 ]", "-        // result  :                  = [\"B\",\"A\",\"D\",\"C\"]", "-        for (int i = 0; i < permutationResult.length; i++) {", "-            permutationResult[i] =", "-                this.sourceArray[this.currPermutationArray[i]];", "-        }", "+        List<E> permutationResult = applyPermutation();", "-        sb.append(ArrayUtil.toString(this.sourceArray));", "+        sb.append(this.sourceArray.toString());", "-        sb.append(ArrayUtil.toString(permutationResult));", "+        sb.append(permutationResult.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "524ec0dc23a3052837a07f8ce48f57dd", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/util/permutation/CollectionPermutationIter.java", "commitBeforeChange": "857bf50cc4b146a4020c6dc6b730687dfcd7de35", "commitAfterChange": "3358959abc414f2281c71486c6c1a90935b1e909", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public Object [] getNextArray()", "signatureAfterChange": "     public List<E> getNextArray()", "diff": ["-    public Object [] getNextArray()", "+    public List<E> getNextArray()", "-        Object [] permutationResult; // will hold the array result", "+        List<E> permutationResult; // will hold the array result", "-            permutationResult = new Object [this.sourceArray.length];", "-", "-            // Example : this.sourceArray = [\"A\",\"B\",\"C\",\"D\"]", "-            // perOrder:                  = [ 1 , 0 , 3 , 2 ]", "-            // result  :                  = [\"B\",\"A\",\"D\",\"C\"]", "-            for (int i = 0; i < permutationResult.length; i++) {", "-                permutationResult[i] =", "-                    this.sourceArray[this.currPermutationArray[i]];", "-            }", "+            permutationResult = applyPermutation();", "-            return permutationResult = null;", "+            permutationResult = null;", "+    }"]}]}
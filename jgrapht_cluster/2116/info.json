{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4500f7b569d923bbcaa7054ff4d278e0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fdeb640abe75b39089bf303bb055f2b", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/FloydWarshallShortestPaths.java", "commitBeforeChange": "96d44a9ae6e3d3923e0657aee3df5d8a34da488f", "commitAfterChange": "fd6ade3d5df69f4e95d0e8055a355f4e596aa63c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "            public FloydWarshallShortestPaths(Graph<V, E> graph)", "signatureAfterChange": "            public FloydWarshallShortestPaths(Graph<V, E> graph)", "diff": ["+        this.vertexIndices = new HashMap<V, Integer>(this.vertices.size());", "+        int i = 0;", "+        for (V vertex : vertices) {", "+            vertexIndices.put(vertex, i++);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba72d4c608b72dd9c24421a613c36879", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/graph/SimpleGraphPath.java", "commitBeforeChange": "f6aa0f82d152c39f6790bc8a988d199ddf8d6d5b", "commitAfterChange": "263cf8512df3d55c8ea6cb1ee1ce3007847d0416", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public SimpleGraphPath(SimpleGraph<V, E> simpleGraph, List<V> vertices)", "signatureAfterChange": "     public SimpleGraphPath(SimpleGraph<V, E> simpleGraph, List<V> vertices, double weight)", "diff": ["-    public SimpleGraphPath(SimpleGraph<V, E> simpleGraph, List<V> vertices)", "+    public SimpleGraphPath(SimpleGraph<V, E> simpleGraph, List<V> vertices, double weight)", "+        this.edges = new ArrayList<E>();", "+        this.weight = weight;", "-            if (getGraph().getEdge(", "+            E currentEdge = getGraph().getEdge(", "-                getVertexList().get(i + 1)) == null)", "+                getVertexList().get(i + 1));", "+            if (getGraph().containsEdge(currentEdge))", "+                edges.add(currentEdge);", "+            } else {"]}]}
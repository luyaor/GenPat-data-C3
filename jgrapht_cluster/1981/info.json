{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea0e71fdbd33bbf5fa3631b41d1dc251", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39e5610b0cf23241d1f75deaa3507404", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/StoerWagnerMinimumCut.java", "commitBeforeChange": "76399a5646342a12a99375b728ce65e0fef58fa7", "commitAfterChange": "836df798105be860e011cc4cc0ecf308ba811d44", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public StoerWagnerMinimumCut(WeightedGraph<V, E> graph)", "signatureAfterChange": "     public StoerWagnerMinimumCut(WeightedGraph<V, E> graph)", "diff": ["-    public StoerWagnerMinimumCut(WeightedGraph<V, E> graph){", "+    public StoerWagnerMinimumCut(WeightedGraph<V, E> graph)", "+    {", "-        workingGraph = new SimpleWeightedGraph<Set<V>, DefaultWeightedEdge>(", "-            DefaultWeightedEdge.class);", "+        workingGraph =", "+            new SimpleWeightedGraph<Set<V>, DefaultWeightedEdge>(", "+                DefaultWeightedEdge.class);", "-        ", "+", "-        while(workingGraph.vertexSet().size() > 2) minimumCutPhase(a);", "-        ", "+        while (workingGraph.vertexSet().size() > 2) {", "+            minimumCutPhase(a);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f27a08256ea9e20341d52496b0fce59", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/util/equivalence/EquivalenceGroupCreatorTest.java", "commitBeforeChange": "9a4730fe923a200a9ce0f4cf2dd7459ded43a3cc", "commitAfterChange": "73e96190e730d809ebfbbdace077df28c1f013ae", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void testOddEvenGroup()", "signatureAfterChange": "          public void testOddEvenGroup()", "diff": ["+    ", "+        //\" expecting two seperate groups , one with odd , one with even nubmers\");", "-            2,", "-            \" expecting two seperate groups , one with odd , one with even nubmers\");", "+            2);", "+        //  \" expecting 3 seperate groups , one for each mod3\");  ", "-            3,", "-            \" expecting 3 seperate groups , one for each mod3\");", "+            3);", "+          "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d5ffe8fedbf809ce996c4998836a5f3", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/demo/PerformanceDemo.java", "commitBeforeChange": "a1f23a3100510ec39002be3afaff305ba3ad818a", "commitAfterChange": "b76ad743469fbc5f4b71d3a57c1c2abdaeec2142", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String [] args)", "signatureAfterChange": "     public static void main(String [] args)", "diff": ["-        System.out.print(\"press any key to free memory and finish...\");", "+        System.out.print(\"press enter to free memory and finish...\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c580eceb23c8337d13cf7f7d978c3400", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/isomorphism/IsomorphismInspectorTest.java", "commitBeforeChange": "29379b02ebf0bdb164e7d101cabb2e10e1ad235d", "commitAfterChange": "365b81e853aa014a3b31dc574bf84d084e1d3a49", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void performanceTestOnRandomGraphs()         throws Exception", "signatureAfterChange": "     public void performanceTestOnRandomGraphs()         throws Exception", "diff": ["-            new String [] { // \"org._3pq.jgrapht.graph.SimpleGraph\" ,", "-                \"org._3pq.jgrapht.graph.SimpleDirectedGraph\",", "-                \"org._3pq.jgrapht.graph.DefaultDirectedGraph\",", "-                // \"org._3pq.jgrapht.graph.Multigraph\",", "-                // \"org._3pq.jgrapht.graph.Pseudograph\"", "+            new String [] { // \"org.jgrapht.graph.SimpleGraph\" ,", "+                \"org.jgrapht.graph.SimpleDirectedGraph\",", "+                \"org.jgrapht.graph.DefaultDirectedGraph\",", "+                // \"org.jgrapht.graph.Multigraph\",", "+                // \"org.jgrapht.graph.Pseudograph\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6356465f9a2e11aebfe7acdc28fa544", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/DijkstraShortestPath.java", "commitBeforeChange": "9925a64dfac7ab322a635b1bf982c0481a3c1421", "commitAfterChange": "b807c0433e272bfef62ba41e0db8e4bd3d8200de", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private static List createPath( ClosestFirstIterator iter, Object endVertex )", "signatureAfterChange": "     private static List createPath( ClosestFirstIterator iter, Object endVertex )", "diff": ["-        for( ;; ) {", "+        while( true ) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e794ab145829eef793f86be207793ab2", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/FloydWarshallShortestPaths.java", "commitBeforeChange": "b261cb99c92126b64c9129dbe772684f0da5e234", "commitAfterChange": "22927827f36ad9b2cef7c5f5670c4d2598840023", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void lazyCalculate()", "signatureAfterChange": "     private void lazyCalculate()", "diff": ["-    private void lazyCalculate() {", "-", "+    private void lazyCalculate()", "+    {", "-        for (int i = 0; i < n; i++)", "+        for (int i = 0; i < n; i++) {", "+        }", "-        for (int i = 0; i < n; i++)", "+        for (int i = 0; i < n; i++) {", "+        }", "-                        diameter = diameter > d[i][j] ? diameter : d[i][j];", "+                        diameter = (diameter > d[i][j]) ? diameter : d[i][j];"]}]}
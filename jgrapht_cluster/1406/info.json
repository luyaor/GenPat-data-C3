{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b68c890d38e9c5ffdcde22e7e4fae790", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea7a0eafd4bace1b5c01d20643eec3e7", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/EdmondsKarpMaximumFlow.java", "commitBeforeChange": "c9321cdd6f93b7e8e241f348de2e975bf226c350", "commitAfterChange": "96bea297cb6d79531586150eeb7ae5f6fce792c9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public MaximumFlow<V, E> buildMaximumFlow(V source, V sink)", "signatureAfterChange": "      @Override     public MaximumFlow<V, E> buildMaximumFlow(V source, V sink)", "diff": ["-    public MaximumFlow<V, E> buildMaximumFlow(V source, V sink)", "-        if (!network.containsVertex(source)) {", "-            throw new IllegalArgumentException(", "-                \"invalid source (null or not from this network)\");", "-        }", "-        if (!network.containsVertex(sink)) {", "-            throw new IllegalArgumentException(", "-                \"invalid sink (null or not from this network)\");", "-        }", "-        if (source.equals(sink)) {", "-            throw new IllegalArgumentException(\"source is equal to sink\");", "-        }", "-", "-        currentSource = indexer.get(source);", "-        currentSink = indexer.get(sink);", "-", "-        for (int i = 0; i < numNodes; i++) {", "-            for (Arc currentArc : nodes.get(i).outgoingArcs) {", "-                currentArc.flow = 0.0;", "-            }", "-        }", "-", "-        final Map<E, Double> maxFlow = new HashMap<E, Double>();", "-", "-        double maxFlowValue;", "-", "-        for (;;) {", "-            breadthFirstSearch();", "-", "-            if (!nodes.get(currentSink).visited) {", "-                maxFlowValue = 0.0;", "-                for (int i = 0; i < numNodes; i++) {", "-                    for (Arc currentArc : nodes.get(i).outgoingArcs) {", "-                        if (currentArc.head == currentSink)", "-                            maxFlowValue += currentArc.flow;", "-", "-                        if (currentArc.prototype != null) {", "-                            maxFlow.put(", "-                                currentArc.prototype,", "-                                currentArc.flow);", "-                        }", "-                    }", "-                }", "-                break;", "-            }", "-", "-            augmentFlow();", "-        }", "-", "-        return new VerbatimMaximumFlow<V, E>(maxFlowValue, maxFlow);", "+    @Override", "+    public MaximumFlow<V, E> buildMaximumFlow(V source, V sink) {", "+        currentSource   = source;", "+        currentSink     = sink;", "+        build();", "+        return maxFlow;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0f579666004eccf43213cfe45606eab", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/EdmondsKarpMaximumFlow.java", "commitBeforeChange": "c9321cdd6f93b7e8e241f348de2e975bf226c350", "commitAfterChange": "96bea297cb6d79531586150eeb7ae5f6fce792c9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void buildInternalNetwork()", "signatureAfterChange": "     public void calculateMaximumFlow(         V source,         V sink)", "diff": ["+    public void calculateMaximumFlow(", "+        V source,", "+        V sink)", "+        currentSource   = source;", "+        currentSink     = sink;", "+        build();", "-    // converting the original network into internal more convenient format", "-    private void buildInternalNetwork()", "-        numNodes = network.vertexSet().size();", "-        nodes = new ArrayList<Node>();", "-        Iterator<V> it = network.vertexSet().iterator();", "-        indexer = new HashMap<V, Integer>();", "-        for (int i = 0; i < numNodes; i++) {", "-            V currentNode = it.next();", "-            nodes.add(new Node(currentNode));", "-            indexer.put(currentNode, i);", "-        }", "-        for (int i = 0; i < numNodes; i++) {", "-            V we = nodes.get(i).prototype;", "-            for (E e : network.outgoingEdgesOf(we)) {", "-                V he = network.getEdgeTarget(e);", "-                int j = indexer.get(he);", "-                Arc e1 = new Arc(i, j, network.getEdgeWeight(e), e);", "-                Arc e2 = new Arc(j, i, 0.0, null);", "-                e1.reversed = e2;", "-                e2.reversed = e1;", "-                nodes.get(i).outgoingArcs.add(e1);", "-                nodes.get(j).outgoingArcs.add(e2);", "-            }", "-        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ba96decfc941e6c375d1f91eae424a83", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59ff10f760063850a372c22667af1f48", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/MaximumWeightBipartiteMatchingTest.java", "commitBeforeChange": "985760cbd642d0a5bdb9eca3c84e4565ecb8ceea", "commitAfterChange": "f79565a2a8d7f5186720bf4969b47a8431d60e9c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \t@Test \tpublic void maximumWeightBipartiteMatching4()", "signatureAfterChange": "  \t@Test \tpublic void maximumWeightBipartiteMatching4()", "diff": ["+\t\tgraph.setEdgeWeight(e2, 1);", "+\t\tDefaultWeightedEdge e3 = graph.addEdge(\"s2\", \"t2\");", "+\t\tgraph.setEdgeWeight(e3, 1);", "+\t\t", "+\t\tmatcher = new MaximumWeightBipartiteMatching<String, DefaultWeightedEdge>(graph, partition1, partition2);", "+\t\tSet<DefaultWeightedEdge> matchings = matcher.getMatching();", "+\t\tassertEquals(2, matchings.size());", "+\t\tassertTrue(matchings.contains(e1));", "+\t\tassertTrue(matchings.contains(e3));", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "758f4c9a7c82ad3996350cd5d50c2ef4", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/TarjanLowestCommonAncestorTest.java", "commitBeforeChange": "031459d6e58bfab7227c1f29575f466935e4a228", "commitAfterChange": "4f70257bd051e3e96df9996dad40065743a630ec", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testComplexDag()", "signatureAfterChange": "           @Test     public void testOneNode()", "diff": ["+    ", "-    public void testComplexDag() {", "+    public void testOneNode() {", "-\tg.addVertex(\"b\");", "-\tg.addVertex(\"c\");", "-\tg.addVertex(\"d\");", "-\tg.addVertex(\"e\");", "-\tg.addVertex(\"f\");", "-\tg.addVertex(\"g\");", "-\tg.addEdge(\"a\", \"b\");", "-\tg.addEdge(\"b\", \"c\");", "-\tg.addEdge(\"c\", \"d\");", "-\tg.addEdge(\"d\", \"f\");", "-\tg.addEdge(\"b\", \"e\");", "-\tg.addEdge(\"e\", \"f\");", "-\tg.addEdge(\"f\", \"g\");", "-\tg.addEdge(\"a\", \"f\");", "-", "-\tAssert.assertEquals(\"b\", new TarjanLowestCommonAncestor<String, DefaultEdge>(g).calculate(\"a\", \"e\", \"c\"));", "+\tAssert.assertEquals(\"a\", new TarjanLowestCommonAncestor<String, DefaultEdge>(g).calculate(\"a\", \"a\", \"a\"));"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "29b46c24e62354cb69d09e225e9003ea", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e6b698aaa67ef330acccdec4ab34d19", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/graph/SimpleDirectedGraphTest.java", "commitBeforeChange": "8cf8651db5de9405d7887b55b67fde1d9e01e224", "commitAfterChange": "9ac63fa5d348b319d01e5aef6fad2b1fa76f8f81", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void testEdgesOf(  )", "signatureAfterChange": "     public void testEdgesOf(  )", "diff": ["-        init(  ); //TODO Implement edgesOf().", "+        init(  );", "+", "+        assertEquals( m_g4.edgesOf( m_v1 ).size(  ), 2 );", "+        assertEquals( m_g3.edgesOf( m_v1 ).size(  ), 4 );", "+", "+        Iterator iter  = m_g3.edgesOf( m_v1 ).iterator(  );", "+        int      count = 0;", "+", "+        while( iter.hasNext(  ) ) {", "+            iter.next(  );", "+            count++;", "+        }", "+", "+        assertEquals( count, 4 );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5085b22ee71adf3d12af10728a7ad7d8", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/graph/SimpleDirectedGraphTest.java", "commitBeforeChange": "8cf8651db5de9405d7887b55b67fde1d9e01e224", "commitAfterChange": "9ac63fa5d348b319d01e5aef6fad2b1fa76f8f81", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void testRemoveEdgeEdge(  )", "signatureAfterChange": "     public void testRemoveEdgeEdge(  )", "diff": ["-        init(  ); //TODO Implement removeEdge().", "+        init(  );", "+", "+        assertEquals( m_g4.edgeSet(  ).size(  ), 4 );", "+        m_g4.removeEdge( m_v1, m_v2 );", "+        assertEquals( m_g4.edgeSet(  ).size(  ), 3 );", "+        assertFalse( m_g4.removeEdge( m_eLoop ) );", "+        assertTrue( m_g4.removeEdge( m_g4.getEdge( m_v2, m_v3 ) ) );", "+        assertEquals( m_g4.edgeSet(  ).size(  ), 2 );"]}]}
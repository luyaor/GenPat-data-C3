{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cf2ebd8d8e9926f193588b9a55e0af32", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d99a132d0635f3e845df3657a89c7d72", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/EdmondsKarpMaximumFlow.java", "commitBeforeChange": "2a4ee438a5228b57c798a805e93d64a050ce7112", "commitAfterChange": "ca153311ebb476220b5c58117cc53dc83fd78ea6", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      private void breadthFirstSearch()", "signatureAfterChange": "      private void breadthFirstSearch()", "diff": ["-            vertexExtended0(v).visited  = false;", "-            vertexExtended0(v).lastArcs = null;", "+            extendedVertex(v).visited  = false;", "+            extendedVertex(v).lastArcs = null;", "-            for (int i = 0; i < ux.outgoing.size(); ++i) {", "-                EdgeExtension ex = (EdgeExtension) ux.outgoing.get(i);", "+            for (EdgeExtension ex : ux.<EdgeExtension>getOutgoing()) {", "-                    VertexExtension vx = (VertexExtension) ex.target;", "+                    VertexExtension vx = ex.getTarget();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa100eed5f5af69bbbcd6afd51b5679e", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/EdmondsBlossomShrinking.java", "commitBeforeChange": "09f8c42369e19bad56b44493e9da23f84c9f33d0", "commitAfterChange": "8eb48033f951ffcc0a59543e123e6881cda6c1db", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private Set<E> findMatch()", "signatureAfterChange": "     private Set<E> findMatch()", "diff": ["-        p = new HashMap<V, V>();", "-        q = new ArrayDeque<V>();", "-        base = new HashMap<V, V>();", "-        used = new HashSet<V>();", "-        blossom = new HashSet<V>();", "+        path = new HashMap<V, V>();", "+        contracted = new HashMap<V, V>();", "+            // Any augmenting path should start with _exposed_ vertex", "+            // (vertex may not escape match-set being added once)", "+                // Match is maximal iff graph G contains no more augmenting paths", "-                    V pv = p.get(v);", "+                    V pv = path.get(v);"]}]}
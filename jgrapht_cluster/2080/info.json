{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8017ab7fbeb774bfdd6c28f6158f2ff4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "760146127e82f7c7b1fed74fdf8526f7", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/KShortestPathsIterator.java", "commitBeforeChange": "d11cabd1aabdc954107d901bc835dd46e2c5b915", "commitAfterChange": "695a606157d7ef974075682ce4ecc3e1dfdc85a4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public Set<V> next()", "signatureAfterChange": "     public Set<V> next()", "diff": ["-    public Set<V> next()", "-    {", "+    public Set<V> next() {", "-            for (", "-                Iterator<V> iter = this.prevImprovedVertices.iterator();", "-                iter.hasNext();)", "-            {", "+            for (Iterator<V> iter = this.prevImprovedVertices.iterator(); iter", "+                    .hasNext();) {", "-", "-                // updates outgoing vertices of the vertex.", "-                updateOutgoingVertices(vertex, improvedVertices);", "+                if (!vertex.equals(this.endVertex)) {", "+                    // updates outgoing vertices of the vertex.", "+                    updateOutgoingVertices(vertex, improvedVertices);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e771e9d72f2e194465d09d489ab9c6ee", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/KShortestPathsIterator.java", "commitBeforeChange": "94e0b9cdbd464a6b60ddbb8cd6d473a32e102eaf", "commitAfterChange": "90d794caa7b37ed092890eb859473902af3157bc", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void updateOutgoingVertices(V vertex, Set<V> improvedVertices)", "signatureAfterChange": "     private void updateOutgoingVertices(V vertex, Set<V> improvedVertices)", "diff": ["-        // of the vertex.", "-        for (Iterator<E> iter = edgesOf(vertex).iterator(); iter.hasNext();) {", "+        // of the vertex in argument.", "+        for (Iterator<E> iter = edgesOfIterator(vertex); iter.hasNext();) {", "-                    addFirstPath(vertexReachedByEdge, edge);", "-                    improvedVertices.add(vertexReachedByEdge);", "+                    boolean relaxed =", "+                        tryToAddFirstPaths(vertexReachedByEdge,", "+                            edge);", "+                    if (relaxed) {", "+                        improvedVertices.add(vertexReachedByEdge);", "+                    }"]}]}
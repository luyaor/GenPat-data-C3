{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cde7da953f5b661b474fcaca2330f9ec", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ab0262cce21f704af553e6a86aa3a43", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/AdaptiveIsomorphismInspectorFactory.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     protected static GraphIsomorphismInspector     createTopologicalExhaustiveInspector(         Graph graph1,         Graph graph2,         EquivalenceComparator vertexChecker,         EquivalenceComparator edgeChecker)", "signatureAfterChange": "     protected static <V,E extends Edge<V>> GraphIsomorphismInspector         createTopologicalExhaustiveInspector(                 Graph<V,E> graph1,                 Graph<V,E> graph2,                 EquivalenceComparator<? super V,? super Graph<V,E>> vertexChecker,                 EquivalenceComparator<? super E,? super Graph<V,E>> edgeChecker)", "diff": ["-    protected static GraphIsomorphismInspector", "-    createTopologicalExhaustiveInspector(", "-        Graph graph1,", "-        Graph graph2,", "-        EquivalenceComparator vertexChecker,", "-        EquivalenceComparator edgeChecker)", "+    protected static <V,E extends Edge<V>> GraphIsomorphismInspector", "+        createTopologicalExhaustiveInspector(", "+                Graph<V,E> graph1,", "+                Graph<V,E> graph2,", "+                EquivalenceComparator<? super V,? super Graph<V,E>> vertexChecker,", "+                EquivalenceComparator<? super E,? super Graph<V,E>> edgeChecker)", "-        VertexDegreeEquivalenceComparator degreeComparator =", "-            new VertexDegreeEquivalenceComparator();", "-        EquivalenceComparatorChain vertexChainedChecker =", "-            new EquivalenceComparatorChainBase(degreeComparator);", "+        VertexDegreeEquivalenceComparator<V,E> degreeComparator =", "+            new VertexDegreeEquivalenceComparator<V,E>();", "+        EquivalenceComparatorChain<V,Graph<V, E>> vertexChainedChecker =", "+            new EquivalenceComparatorChainBase<V,Graph<V,E>>(degreeComparator);", "+            // FIXME hb060208 I don't understand how to generify this, yet"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60bc51eb0e0e5bd881e0c3949b88500f", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/graph/DefaultGraphMapping.java", "commitBeforeChange": "857bf50cc4b146a4020c6dc6b730687dfcd7de35", "commitAfterChange": "3358959abc414f2281c71486c6c1a90935b1e909", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected Object getCorrespondenceVertex(         Object keyVertex,         boolean forward)", "signatureAfterChange": "      public V getVertexCorrespondence(         V keyVertex,         boolean forward)", "diff": ["-     */", "-    protected Object getCorrespondenceVertex(", "-        Object keyVertex,", "+    public V getVertexCorrespondence(", "+        V keyVertex,", "-        Graph sourceGraph;", "-        int direction;", "-        Object resultObject = null;", "-", "-        if (keyVertex == null) {", "-            throw new NullPointerException(", "-                \"keyVertex parameter may not be null!\");", "-        }", "+        Map<V,V> graphMapping;", "-            sourceGraph = this.graph1;", "-            direction = FORWARD;", "+            graphMapping = graphMappingForward;", "-            sourceGraph = this.graph2;", "-            direction = REVERSE;", "+            graphMapping = graphMappingReverse;", "-        if (!sourceGraph.containsVertex(keyVertex)) {", "-            throw new IllegalArgumentException(", "-                \"The vertex cannot be found in the source graph\");", "-        } else if (!this.graphMapping[direction].containsKey(keyVertex)) {", "-            throw new IllegalArgumentException(", "-                \"The vertex cannot be found in the mapping\");", "-        } else {", "-            resultObject = this.graphMapping[direction].get(keyVertex);", "-        }", "-        return resultObject;", "+        return graphMapping.get(keyVertex);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5263ba5b9618beda5e05e727b5d91e01", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "070602b5ae5211836207cac3dc0079de", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/CycleDetector.java", "commitBeforeChange": "2003496a80f483b98d40a459268e93d0fdaec76c", "commitAfterChange": "618193dfca3ac4de3a61698028cfd965351c74a1", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "         protected void encounterVertexAgain(V vertex, E edge)", "signatureAfterChange": "         protected void encounterVertexAgain(V vertex, E edge)", "diff": ["-            int i = path.indexOf(vertex);", "+            int i;", "+", "+            if (root != null) {", "+                // For rooted detection, the path must either", "+                // double back to the root, or to a node of a cycle", "+                // which has already been detected.", "+                if (vertex == root) {", "+                    i = 0;", "+                } else if ((cycleSet != null) && cycleSet.contains(vertex)) {", "+                    i = 0;", "+                } else {", "+                    return;", "+                }", "+            } else {", "+                i = path.indexOf(vertex);", "+            }", "-                }", "-", "-                for (; i < path.size(); ++i) {", "-                    cycleSet.add(path.get(i));", "+                } else {", "+                    for (; i < path.size(); ++i) {", "+                        cycleSet.add(path.get(i));", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f1c3564f2bb8879472ebeed92ea64dd", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/CycleDetector.java", "commitBeforeChange": "2003496a80f483b98d40a459268e93d0fdaec76c", "commitAfterChange": "618193dfca3ac4de3a61698028cfd965351c74a1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public Set<V> findCycles()", "signatureAfterChange": "     public Set<V> findCycles()", "diff": ["+        // ProbeIterator can't be used to handle this case,", "+        // so use StrongConnectivityInspector instead.", "+        StrongConnectivityInspector<V, E> inspector =", "+            new StrongConnectivityInspector<V, E>(graph);", "+        List<Set<V>> components = inspector.stronglyConnectedSets();", "+", "+        // A vertex participates in a cycle if either of the following is", "+        // true:  (a) it is in a component whose size is greater than 1", "+        // or (b) it is a self-loop", "+", "-        execute(set, null);", "+        for (Set<V> component : components) {", "+            if (component.size() > 1) {", "+                // cycle", "+                set.addAll(component);", "+            } else {", "+                V v = component.iterator().next();", "+                if (graph.containsEdge(v, v)) {", "+                    // self-loop", "+                    set.add(v);", "+                }", "+            }", "+        }"]}]}
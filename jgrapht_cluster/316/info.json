{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b513262f3068eea7fd66b9546142ff53", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d0c0d114efec7c25b1cfeeecb2945fb", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/isomorphism/VF2SubgraphIsomorphismInspectorTest.java", "commitBeforeChange": "b03329312d39e38d58a10d74df9818d4f67f9be5", "commitAfterChange": "cea7ef51f7b4c998dcf2f8f28d63aa057ca85c11", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testGraphTypes()", "signatureAfterChange": "     @Test     public void testGraphTypes()", "diff": ["-                new DefaultDirectedGraph<Integer, DefaultEdge>(DefaultEdge.class);", "+                new DefaultDirectedGraph<Integer, DefaultEdge>", "+                        (DefaultEdge.class);", "+", "+        /* labeled directed graph */", "+        /* DirectedGraph<Object, DefaultEdge> dgol1 =", "+                new DefaultDirectedGraph<Object, DefaultEdge>", "+                        (DefaultEdge.class);", "+", "+        dgol1.addVertex(\"v1\");", "+        dgol1.addVertex(\"v2\");", "+", "+        dgol1.addEdge(\"v1\", \"v2\"); */", "+", "+         /* labeled directed graph */", "+        /* DirectedGraph<Object, DefaultEdge> dgou1 =", "+                new DefaultDirectedGraph<Object, DefaultEdge>", "+                        (DefaultEdge.class);", "+", "+        dgou1.addVertex(1);", "+        dgou1.addVertex(2);", "+", "+        dgou1.addEdge(1, 2); */", "-        try {", "-            VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt1 =", "-                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(mg1,mg1);", "-            gt1.getMappings().next();", "-            Assert.fail(\"graphs with multiple \"", "-                    + \"edges are not supported\");", "-        } catch (UnsupportedOperationException ex) {", "-        }", "+        /* GT-1 */", "+        thrown.expect(UnsupportedOperationException.class);", "+        @SuppressWarnings(\"unused\")", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt1 =", "+                new VF2SubgraphIsomorphismInspector<Integer,DefaultEdge>", "+                        (mg1,mg1);", "+", "+        /* GT-2 */", "+        thrown.expect(UnsupportedOperationException.class);", "+        @SuppressWarnings(\"unused\")", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt2 =", "+                    new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                            (pg1,pg1);", "+", "+        /* GT-3 */", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt3 =", "+           new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                       (sg1,sg1);", "+        assertEquals(\"[1=1 2=2]\", gt3.getMappings().next().toString());", "+", "+        /* GT-4 */", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt4 =", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                        (dg1,dg1);", "+        assertEquals(\"[1=1 2=2]\", gt4.getMappings().next().toString());", "+", "+        /* GT-5 */", "+        thrown.expect(UnsupportedOperationException.class);", "+        @SuppressWarnings(\"unused\")", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt5 =", "+                    new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                            (sg1,mg1);", "+", "+        /* GT-6 */", "+        thrown.expect(UnsupportedOperationException.class);", "+        @SuppressWarnings(\"unused\")", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt6 =", "+                    new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                            (sg1,pg1);", "+", "+        /* GT-7 */", "+        thrown.expect(UnsupportedOperationException.class);", "+        @SuppressWarnings(\"unused\")", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt7 =", "+                    new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                            (dg1,mg1);", "+", "+        /* GT-8 */", "+        thrown.expect(UnsupportedOperationException.class);", "+        @SuppressWarnings(\"unused\")", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt8 =", "+                    new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                            (dg1,pg1);", "+", "+        /* GT-9 */", "+        thrown.expect(UnsupportedOperationException.class);", "+        @SuppressWarnings(\"unused\")", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt9 =", "+              new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                            (pg1,mg1);", "+", "+        /* GT-10 */", "+        thrown.expect(IllegalArgumentException.class);", "+        @SuppressWarnings(\"unused\")", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt10 =", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(sg1, dg1);", "+        /* try {", "+            VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt10 =", "+                    new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                            (sg1,dg1);", "+            Assert.fail(\"Expected IllegalArgumentException\");", "+        } catch (IllegalArgumentException ex) {", "+        }*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1504bb13b65632cfb2540f1cf75a08f2", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/isomorphism/VF2SubgraphIsomorphismInspectorTest.java", "commitBeforeChange": "3d942aa8341a7b21b0a2aed7fe990a3895f7cc26", "commitAfterChange": "d5ca1401dd353d6e45cdea97764ece72454f943b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testGraphTypes()", "signatureAfterChange": "     @Test     public void testGraphTypes()", "diff": ["-        DirectedGraph<Integer, DefaultEdge> dg0 ;", "-", "-                new DefaultDirectedGraph<Integer, DefaultEdge>", "-                        (DefaultEdge.class);", "+            new DefaultDirectedGraph<Integer, DefaultEdge>(DefaultEdge.class);", "-        SimpleGraph<Integer, DefaultEdge> sg0;", "-", "-                new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "+            new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "-                new Multigraph<Integer, DefaultEdge>(DefaultEdge.class);", "+            new Multigraph<Integer, DefaultEdge>(DefaultEdge.class);", "-                new Pseudograph<Integer, DefaultEdge>(DefaultEdge.class);", "+            new Pseudograph<Integer, DefaultEdge>(DefaultEdge.class);", "-        /* GT-0 */ /*test graph=NULL not possible because of compiler error */", "-        /*VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt0 =", "+", "+        /* GT-0 test graph=null */", "+", "+        try {", "+            @SuppressWarnings(\"unused\")", "+            VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt0 =", "-                        (sg0,sg1); */", "+                            (null, sg1);", "+            Assert.fail(\"Expected UnsupportedOperationException\");", "+        } catch (NullPointerException ex) { }", "+", "+", "+            @SuppressWarnings(\"unused\")", "-                    new VF2SubgraphIsomorphismInspector<Integer,DefaultEdge>", "-                            (mg1,mg1);", "+                new VF2SubgraphIsomorphismInspector<Integer,DefaultEdge>", "+                            (mg1, mg1);", "-        } catch (UnsupportedOperationException ex){", "-            /* Expected Exception found */", "-        }", "+        } catch (UnsupportedOperationException ex) { }", "+", "+", "+            @SuppressWarnings(\"unused\")", "-                    new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "-                            (pg1,pg1);", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                            (pg1, pg1);", "-        } catch (UnsupportedOperationException ex){", "-            /* Expected Exception found */", "-        }", "+        } catch (UnsupportedOperationException ex) { }", "+", "+", "-           new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "-                       (sg1,sg1);", "-        assertEquals(\"[1=1 2=2]\", gt3.getMappings().next().toString());", "+            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                            (sg1, sg1);", "+        assertEquals(true, gt3.getMappings().hasNext());", "+", "+", "-                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "-                        (dg1,dg1);", "+            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                            (dg1, dg1);", "+", "+", "+            @SuppressWarnings(\"unused\")", "-                    new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "-                            (sg1,mg1);", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                            (sg1, mg1);", "-        } catch (UnsupportedOperationException ex){", "-            /* Expected Exception found */", "-        }", "+        } catch (UnsupportedOperationException ex) { }", "+", "-        try {", "-            VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt6 =", "-                    new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "-                            (sg1,pg1);", "-            Assert.fail(\"Expected UnsupportedOperationException\");", "-        } catch (UnsupportedOperationException ex){", "-            /* Expected Exception found */", "-        }", "-        /* GT-7: directed graph + mulitgraph */", "-            VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt7 =", "-                    new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "-                            (dg1,mg1);", "+            @SuppressWarnings(\"unused\")", "+            VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt6 =", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                            (sg1, pg1);", "-        } catch (UnsupportedOperationException ex){", "-            /* Expected Exception found */", "-        }", "+        } catch (UnsupportedOperationException ex) { }", "+", "+", "+        /* GT-7: directed graph + multigraph */", "+", "+        try {", "+            @SuppressWarnings(\"unused\")", "+            VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt7 =", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                            (dg1, mg1);", "+            Assert.fail(\"Expected UnsupportedOperationException\");", "+        } catch (UnsupportedOperationException ex) { }", "+", "+", "+            @SuppressWarnings(\"unused\")", "-                    new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "-                            (dg1,pg1);", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                            (dg1, pg1);", "-        } catch (UnsupportedOperationException ex){", "-            /* Expected Exception found */", "-        }", "+        } catch (UnsupportedOperationException ex) { }", "+", "+", "+            @SuppressWarnings(\"unused\")", "-                    new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "-                            (pg1,mg1);", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                            (pg1, mg1);", "-        } catch (UnsupportedOperationException ex){", "-            /* Expected Exception found */", "-        }", "+        } catch (UnsupportedOperationException ex) { }", "+", "+", "+            @SuppressWarnings(\"unused\")", "-                    new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "-        } catch (IllegalArgumentException ex){", "-            /* Expected Exception found */", "-        }", "+        } catch (IllegalArgumentException ex) { }"]}]}
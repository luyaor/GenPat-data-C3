{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "790a71f6d97527c5559dec45ca41645d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5367cd206632a3992bac46ef9fc8202a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/EdmondsKarpMaximumFlowTest.java", "commitBeforeChange": "a35680f67c56e8fcc81e697983a084c86d356dae", "commitAfterChange": "b4e8f6742028ccb6628bd42dbfef197bf5f06148", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private void runTest(         int [] tails,         int [] heads,         double [] capacities,         int [] sources,         int [] sinks,         double [] expectedResults)", "signatureAfterChange": "      private void runTest(         int [] tails,         int [] heads,         double [] capacities,         int [] sources,         int [] sinks,         double [] expectedResults)", "diff": ["+", "-        assertTrue(solver.getMaximumFlowValue() == null);", "-        assertTrue(solver.getMaximumFlow() == null);", "-            solver.calculateMaximumFlow(sources[i], sinks[i]);", "+            MaximumFlow<Integer, DefaultWeightedEdge> maxFlow = solver.buildMaximumFlow(sources[i], sinks[i]);", "-            double flowValue = solver.getMaximumFlowValue();", "-            Map<DefaultWeightedEdge, Double> flow = solver.getMaximumFlow();", "-                flowValue,", "+                maxFlow.getValue(),", "+", "+            Double flowValue = maxFlow.getValue();", "+            Map<DefaultWeightedEdge, Double> flow = maxFlow.getFlow();", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8685de9676770d844a00f52c489d410a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/MinSourceSinkCut.java", "commitBeforeChange": "a35680f67c56e8fcc81e697983a084c86d356dae", "commitAfterChange": "b4e8f6742028ccb6628bd42dbfef197bf5f06148", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void computeMinCut(V source, V sink)", "signatureAfterChange": "     public void computeMinCut(V source, V sink)", "diff": ["-        ekMaxFlow.calculateMaximumFlow(source, sink);", "-        this.cutWeight = ekMaxFlow.getMaximumFlowValue();", "-        Map<E, Double> maxFlow = ekMaxFlow.getMaximumFlow();", "+        MaximumFlow<V, E> maxFlow = ekMaxFlow.buildMaximumFlow(source, sink);", "+", "+        this.cutWeight = maxFlow.getValue();", "-                double flowValue = maxFlow.get(edge);", "+                double flowValue = maxFlow.getFlow().get(edge);", "-                double flowValue = maxFlow.get(edge);", "+                double flowValue = maxFlow.getFlow().get(edge);"]}]}
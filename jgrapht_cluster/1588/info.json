{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9713087bd8a343e983fb228c15023cc6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c4156ad591d4b13092bea18db35d7b0", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/GraphOrdering.java", "commitBeforeChange": "dcd52f7fb7eeeadf66a7b8d39b5c500257a852b0", "commitAfterChange": "c2593980e98ffd3b0fd8713e1065362c591d271a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public GraphOrdering(Graph<V, E> graph, boolean orderByDegree)", "signatureAfterChange": "     public GraphOrdering(Graph<V, E> graph, boolean orderByDegree)", "diff": ["-        Set<V> vertexSet = graph.vertexSet();", "+        List<V> vertexSet = new ArrayList<V>(graph.vertexSet());", "+        if (orderByDegree)", "+            java.util.Collections.sort(vertexSet,", "+                            new GeneralVertexDegreeComparator<V>(graph));", "+        ", "-", "-        // TODO: orderByDegree"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a309e8cfd5a99877b4a3220f542e1dc5", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-ext/src/main/java/org/jgrapht/ext/DOTImporter.java", "commitBeforeChange": "2cba8aef2cc77a406de26760e4f816581f7adba7", "commitAfterChange": "915acf67bde336fce1aee298fe506b6a9a961b70", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void read(String input, Graph<V, E> graph) throws ImportException", "signatureAfterChange": "    public void read(String input, AbstractBaseGraph<V, E> graph)          throws ImportException", "diff": ["-   public void read(String input, Graph<V, E> graph) throws ImportException", "+    */", "+   public void read(String input, AbstractBaseGraph<V, E> graph)", "+         throws ImportException", "+   {", "-      validateLines(lines);", "+      validateLines(lines, graph);", "+         String line = lines[lineIndex].trim();", "+", "+         // trim off line comments.", "+         if (line.contains(\"//\")) {", "+            line = line.substring(line.indexOf(\"//\"), line.length());", "+         }", "-         if(lines[lineIndex].trim().isEmpty()) {", "+         if(line.isEmpty()) {", "-         String line = lines[lineIndex].trim();", "-         if (line.startsWith(\"//\") || line.startsWith(\"#\")) {", "+         if (line.startsWith(\"#\")) {", "-            throw new ImportException(\"graph level properties are not currently supported.\");", "+            throw new ImportException(", "+                  \"graph level properties are not currently supported.\"", "+            );", "-              throw new ImportException(\"out of order input\");", "+               if (vertexUpdater != null) {", "+                  vertexUpdater.updateVertex(existing, attributes);", "+               } else {", "+                  throw new ImportException(", "+                        \"Update required for vertex \"", "+                        + label", "+                        + \" but no vertexUpdater provided\"", "+                  );", "+               }", "-               E edge = edgeProvider.buildEdge(v1, v2, attributes.get(\"label\"), attributes);", "+               E edge = edgeProvider.buildEdge(v1,", "+                                               v2,", "+                                               attributes.get(\"label\"),", "+                                               attributes);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e27c6d8c6e1c04f18189f22323446f56", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b13ae2d769dcd6227963ab7c65f856b", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/experimental/dag/DirectedAcyclicGraphTest.java", "commitBeforeChange": "4c5b6aab4b3adff5cfc76ea4a4e59eeac27854b9", "commitAfterChange": "2a50d4601cf834f68db2342fedcb9088758b99ea", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void testIterationBehaviors()", "signatureAfterChange": "      public void testIterationBehaviors()", "diff": ["-            // assertTrue(dagIter.hasNext());", "-            Long val = dagIter.next();", "-            /*", "-            System.out.println(val); // scroll through all vertices", "-            */", "+            assertTrue(dagIter.hasNext());", "+            dagIter.next();", "+        assertFalse(dagIter.hasNext());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5e897a1bcfc949bbd58aa54819a573a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/traverse/AbstractGraphIteratorTest.java", "commitBeforeChange": "025405bd96caf64041d629592cdf353967e57edb", "commitAfterChange": "0eec89d7d76077b485851c80e8f4e78e2d1e8cbf", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void testDirectedGraph(  )", "signatureAfterChange": "     public void testDirectedGraph(  )", "diff": ["-        DirectedGraph graph = new DefaultDirectedGraph(  );", "+        DirectedGraph graph = new DefaultDirectedWeightedGraph(  );", "+        // NOTE:  set weights on some of the edges to test traversals like", "+        // ClosestFirstIterator where it matters.  For other traversals, it", "+        // will be ignored.  Rely on the default edge weight being 1.", "-        graph.addEdge( v1, v3 );", "-        graph.addEdge( v2, v4 );", "+        graph.addEdge( v1, v3 ).setWeight( 100 );", "+        graph.addEdge( v2, v4 ).setWeight( 1000 );", "-        graph.addEdge( v3, v6 );", "+        graph.addEdge( v3, v6 ).setWeight( 100 );", "-        graph.addEdge( v5, v7 );", "+        graph.addEdge( v5, v7 ).setWeight( 200 );", "-        graph.addEdge( v7, v8 );", "+        graph.addEdge( v7, v8 ).setWeight( 100 );"]}]}
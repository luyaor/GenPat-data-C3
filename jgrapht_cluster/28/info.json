{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "640b3a6be078c79e94a2408bb748916e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "241981649d99ed18019a4617ed996982", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/DijkstraShortestPath.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private void createEdgeList(ClosestFirstIterator<V, E> iter, V endVertex)", "signatureAfterChange": "      private void createEdgeList(         Graph<V, E> graph,         ClosestFirstIterator<V, E> iter,         V endVertex)", "diff": ["-    private void createEdgeList(ClosestFirstIterator<V, E> iter, V endVertex)", "+    private void createEdgeList(", "+        Graph<V, E> graph,", "+        ClosestFirstIterator<V, E> iter,", "+        V endVertex)", "-            endVertex = edge.oppositeVertex(endVertex);", "+            endVertex = Graphs.getOppositeVertex(graph, edge, endVertex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34a7701462fae388a5540acd154d115a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/AbstractPathElement.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     protected AbstractPathElement(         AbstractPathElement<V,E> pathElement, E edge)", "signatureAfterChange": "     protected AbstractPathElement(         Graph<V,E> graph,         AbstractPathElement<V,E> pathElement, E edge)", "diff": ["-        AbstractPathElement<V,E> pathElement, E edge) {", "-        this.vertex = edge.oppositeVertex(pathElement.getVertex());", "+        Graph<V,E> graph,", "+        AbstractPathElement<V,E> pathElement, E edge)", "+    {", "+        this.vertex = Graphs.getOppositeVertex(", "+            graph, edge, pathElement.getVertex());"]}]}
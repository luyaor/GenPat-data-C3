{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "572ee0809ec2eac8f76f916666701e18", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34e974e239e91bbfd6494580774d5375", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/FloydWarshallShortestPaths.java", "commitBeforeChange": "e5d892ea988755999c21c3831434c4fc251611da", "commitAfterChange": "60fae450bc7df1fe1188f2da01fd4eefb4912b4d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public FloydWarshallShortestPaths(Graph<V, E> g)", "signatureAfterChange": "      public FloydWarshallShortestPaths(Graph<V, E> graph)", "diff": ["+    public FloydWarshallShortestPaths(Graph<V, E> graph) {", "+        this.graph = graph;", "+        this.vertices = new ArrayList<V>(graph.vertexSet());", "+    }", "-    public FloydWarshallShortestPaths(Graph<V, E> g)", "-    {", "-        int sz = g.vertexSet().size();", "-        d = new double[sz][sz];", "-        indices = new HashMap<V, Integer>();", "-        //Initialise distance to infinity, or the neighbours weight, or 0 if", "-        //same", "-        for (V v1 : g.vertexSet()) {", "-            for (V v2 : g.vertexSet()) {", "-                if (v1 == v2) {", "-                    d[index(v1)][index(v2)] = 0;", "-                } else {", "-                    E e = g.getEdge(v1, v2);", "-                    if (e == null) {", "-                        d[index(v1)][index(v2)] = Double.POSITIVE_INFINITY;", "-                    } else {", "-                        d[index(v1)][index(v2)] = g.getEdgeWeight(e);", "-", "-        //now iterate k times", "-        for (int k = 0; k < sz; k++) {", "-            for (V v1 : g.vertexSet()) {", "-                for (V v2 : g.vertexSet()) {", "-                    d[index(v1)][index(v2)] =", "-                        Math.min(", "-                            d[index(v1)][index(v2)],", "-                            d[index(v1)][k] + d[k][index(v2)]);", "-                    diameter = Math.max(diameter, d[index(v1)][index(v2)]);", "-                }", "-            }", "-        }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50182b383fb1cea05eed571cd5c931cd", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/FloydWarshallShortestPaths.java", "commitBeforeChange": "f22d5340d3e5a85121314bf9c919e8bc029f4114", "commitAfterChange": "3c0ee1168b0aca54d591ff143b739fb03202fd37", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public FloydWarshallShortestPaths(Graph<V,E> g)", "signatureAfterChange": "     public FloydWarshallShortestPaths(Graph<V, E> g)", "diff": ["-    public FloydWarshallShortestPaths(Graph<V,E> g){", "+    public FloydWarshallShortestPaths(Graph<V, E> g)", "+    {", "-\t\t", "-        //Initialise distance to infinity, or the neighbours weight, or 0 if same", "-        for(V v1:g.vertexSet()){", "-            for(V v2:g.vertexSet()){", "-                if(v1 == v2) d[index(v1)][index(v2)]=0;", "-                else{", "-                    E e = g.getEdge(v1,v2);", "-\t\t\t\t\t", "-                    if(e == null){", "+", "+        //Initialise distance to infinity, or the neighbours weight, or 0 if", "+        //same", "+        for (V v1 : g.vertexSet()) {", "+            for (V v2 : g.vertexSet()) {", "+                if (v1 == v2) {", "+                    d[index(v1)][index(v2)] = 0;", "+                } else {", "+                    E e = g.getEdge(v1, v2);", "+", "+                    if (e == null) {", "-                    }else{", "+                    } else {", "-\t\t", "+", "-        for(int k=0; k<sz;k++){", "-            for(V v1:g.vertexSet()){", "-                for(V v2:g.vertexSet()){", "-                    d[index(v1)][index(v2)] = ", "+        for (int k = 0; k < sz; k++) {", "+            for (V v1 : g.vertexSet()) {", "+                for (V v2 : g.vertexSet()) {", "+                    d[index(v1)][index(v2)] =", "-                            d[index(v1)][index(v2)], ", "-                            d[index(v1)][k]+d[k][index(v2)]", "-                            );", "+                            d[index(v1)][index(v2)],", "+                            d[index(v1)][k] + d[k][index(v2)]);"]}]}
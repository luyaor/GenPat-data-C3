{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0159b358c886c28ff7fad4e25132a36f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ab0262cce21f704af553e6a86aa3a43", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/AdaptiveIsomorphismInspectorFactory.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     protected static GraphIsomorphismInspector     createTopologicalExhaustiveInspector(         Graph graph1,         Graph graph2,         EquivalenceComparator vertexChecker,         EquivalenceComparator edgeChecker)", "signatureAfterChange": "     protected static <V,E extends Edge<V>> GraphIsomorphismInspector         createTopologicalExhaustiveInspector(                 Graph<V,E> graph1,                 Graph<V,E> graph2,                 EquivalenceComparator<? super V,? super Graph<V,E>> vertexChecker,                 EquivalenceComparator<? super E,? super Graph<V,E>> edgeChecker)", "diff": ["-    protected static GraphIsomorphismInspector", "-    createTopologicalExhaustiveInspector(", "-        Graph graph1,", "-        Graph graph2,", "-        EquivalenceComparator vertexChecker,", "-        EquivalenceComparator edgeChecker)", "+    protected static <V,E extends Edge<V>> GraphIsomorphismInspector", "+        createTopologicalExhaustiveInspector(", "+                Graph<V,E> graph1,", "+                Graph<V,E> graph2,", "+                EquivalenceComparator<? super V,? super Graph<V,E>> vertexChecker,", "+                EquivalenceComparator<? super E,? super Graph<V,E>> edgeChecker)", "-        VertexDegreeEquivalenceComparator degreeComparator =", "-            new VertexDegreeEquivalenceComparator();", "-        EquivalenceComparatorChain vertexChainedChecker =", "-            new EquivalenceComparatorChainBase(degreeComparator);", "+        VertexDegreeEquivalenceComparator<V,E> degreeComparator =", "+            new VertexDegreeEquivalenceComparator<V,E>();", "+        EquivalenceComparatorChain<V,Graph<V, E>> vertexChainedChecker =", "+            new EquivalenceComparatorChainBase<V,Graph<V,E>>(degreeComparator);", "+            // FIXME hb060208 I don't understand how to generify this, yet"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1176480aa3a124d71dcb4e90906a91a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/generate/RingGraphGenerator.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void generateGraph(         Graph target,         VertexFactory vertexFactory,         Map resultMap)", "signatureAfterChange": "     public void generateGraph(         Graph<V,E> target,         VertexFactory<V> vertexFactory,         Map<String,V> resultMap)", "diff": ["-        Graph target,", "-        VertexFactory vertexFactory,", "-        Map resultMap)", "+        Graph<V,E> target,", "+        VertexFactory<V> vertexFactory,", "+        Map<String,V> resultMap)", "-        LinearGraphGenerator linearGenerator =", "-            new LinearGraphGenerator(m_size);", "-        Map privateMap = new HashMap();", "+        LinearGraphGenerator<V,E> linearGenerator =", "+            new LinearGraphGenerator<V,E>(m_size);", "+        Map<String,V> privateMap = new HashMap<String,V>();", "-        Object startVertex = privateMap.get(LinearGraphGenerator.START_VERTEX);", "-        Object endVertex = privateMap.get(LinearGraphGenerator.END_VERTEX);", "+        V startVertex = privateMap.get(LinearGraphGenerator.START_VERTEX);", "+        V endVertex = privateMap.get(LinearGraphGenerator.END_VERTEX);"]}]}
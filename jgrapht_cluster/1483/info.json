{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "616c4a4a08088fcaae4a950f6719d0de", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b6a03f6b8ce412679fb5b3b86d16c24", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/StoerWagnerMinimumCut.java", "commitBeforeChange": "76399a5646342a12a99375b728ce65e0fef58fa7", "commitAfterChange": "836df798105be860e011cc4cc0ecf308ba811d44", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected VertexAndWeight mergeVertices(Set<V> s, Set<V> t)", "signatureAfterChange": "     protected VertexAndWeight mergeVertices(Set<V> s, Set<V> t)", "diff": ["-    protected VertexAndWeight mergeVertices(Set<V> s, Set<V> t){", "-        ", "+     */", "+    protected VertexAndWeight mergeVertices(Set<V> s, Set<V> t)", "+    {", "-        for( V  v : s) set.add(v);", "-        for( V  v : t) set.add(v);", "+        for (V v : s) {", "+            set.add(v);", "+        }", "+        for (V v : t) {", "+            set.add(v);", "+        }", "-        ", "+", "-        for( Set<V> v : workingGraph.vertexSet() ){", "-            if(s != v  && t != v){", "+        for (Set<V> v : workingGraph.vertexSet()) {", "+            if ((s != v) && (t != v)) {", "-                double wtv = 0.0, wsv = 0.0; ", "-                if(etv != null)  wtv = workingGraph.getEdgeWeight(etv);", "-                if(esv != null)  wsv = workingGraph.getEdgeWeight(esv);", "+                double wtv = 0.0, wsv = 0.0;", "+                if (etv != null) {", "+                    wtv = workingGraph.getEdgeWeight(etv);", "+                }", "+                if (esv != null) {", "+                    wsv = workingGraph.getEdgeWeight(esv);", "+                }", "-                if(neww != 0.0) ", "-                    workingGraph.setEdgeWeight(workingGraph.addEdge(set, v), neww);", "+                if (neww != 0.0) {", "+                    workingGraph.setEdgeWeight(", "+                        workingGraph.addEdge(set, v),", "+                        neww);", "+                }", "-        ", "+", "-        ", "+", "-        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f85cefc1ad17c2de7bbd5877d0d74025", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/HopcroftKarpBipartiteMatching.java", "commitBeforeChange": "2368f894a5f86458e6220ed61039dad10454d9ab", "commitAfterChange": "8bbdd0b15ef2a408186085d20f1a6fb81ea81686", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate boolean checkInputData()", "signatureAfterChange": "     private boolean checkInputData()", "diff": ["-\t */", "-\tprivate boolean checkInputData(){", "-\t\tif(graph instanceof Multigraph)", "-\t\t\tthrow new IllegalArgumentException(\"Multi graphs are not allowed as input, only simple graphs!\");", "-\t\t//Test the bipartite-ness", "-\t\tSet<V> neighborsSet1=new HashSet<V>();", "-\t\tfor(V v: partition1)", "-\t\t\tneighborsSet1.addAll(Graphs.neighborListOf(graph, v));", "-\t\tif(interSectionNotEmpty(partition1, neighborsSet1))", "-\t\t\tthrow new IllegalArgumentException(\"There are edges within partition 1, i.e. not a bipartite graph\");", "-\t\tSet<V> neighborsSet2=new HashSet<V>();", "-\t\tfor(V v: partition2)", "-\t\t\tneighborsSet2.addAll(Graphs.neighborListOf(graph, v));", "-\t\tif(interSectionNotEmpty(partition2, neighborsSet2))", "-\t\t\tthrow new IllegalArgumentException(\"There are edges within partition 2, i.e. not a bipartite graph\");", "+     */", "+    private boolean checkInputData()", "+    {", "+        if (graph instanceof Multigraph) {", "+            throw new IllegalArgumentException(", "+                \"Multi graphs are not allowed as input, only simple graphs!\");", "+        }", "+", "+        //Test the bipartite-ness", "+        Set<V> neighborsSet1 = new HashSet<V>();", "+        for (V v : partition1) {", "+            neighborsSet1.addAll(Graphs.neighborListOf(graph, v));", "+        }", "+        if (interSectionNotEmpty(partition1, neighborsSet1)) {", "+            throw new IllegalArgumentException(", "+                \"There are edges within partition 1, i.e. not a bipartite graph\");", "+        }", "+        Set<V> neighborsSet2 = new HashSet<V>();", "+        for (V v : partition2) {", "+            neighborsSet2.addAll(Graphs.neighborListOf(graph, v));", "+        }", "+        if (interSectionNotEmpty(partition2, neighborsSet2)) {", "+            throw new IllegalArgumentException(", "+                \"There are edges within partition 2, i.e. not a bipartite graph\");", "+        }", "+        return true;", "+    }", "-\t}"]}]}
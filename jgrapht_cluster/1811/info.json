{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ecd0590513c454d21bcc2ee8e6cbd46a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bbde3fd8151d5ca1a8250a315c509a4", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/StoerWagnerMinimumCut.java", "commitBeforeChange": "a8056d6aafd19ddde3f88a7357d27b280fbbac76", "commitAfterChange": "8786155732723df083d81ecffc66379e7847e52a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected VertexAndWeight mergeVertices(Set<V> s, Set<V> t)", "signatureAfterChange": "     protected VertexAndWeight mergeVertices(Set<V> s, Set<V> t)", "diff": ["-        for (V v : s) {", "-            set.add(v);", "-        }", "-        for (V v : t) {", "-            set.add(v);", "-        }", "+        set.addAll(s);", "+        set.addAll(t);", "-            if ((s != v) && (t != v)) {", "+            if (s != v  &&  t != v) {", "+                double neww = 0.0;", "-                double wtv = 0.0, wsv = 0.0;", "-                    wtv = workingGraph.getEdgeWeight(etv);", "+                    neww += workingGraph.getEdgeWeight(etv);", "-                    wsv = workingGraph.getEdgeWeight(esv);", "+                    neww += workingGraph.getEdgeWeight(esv);", "-                double neww = wtv + wsv;", "-                wsum += neww;", "-                if (neww != 0.0) {", "+                if (etv != null  ||  esv != null) {", "+                    wsum += neww;", "-        return new VertexAndWeight(set, wsum);", "+        return new VertexAndWeight(set, wsum, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ba07b9f212f15c850c478754430c970", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/StrongConnectivityInspector.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void dfsVisit(DirectedGraph<V, E> graph,         VertexData<V> vertexData,         Set<V> vertices)", "signatureAfterChange": "     private void dfsVisit(DirectedGraph<V, E> graph,         VertexData<V> vertexData,         Set<V> vertices)", "diff": ["-            if (!data.m_discovered) {", "-                data.m_discovered = true;", "+            if (!data.discovered) {", "+                data.discovered = true;", "-                    vertices.add(data.m_vertex);", "+                    vertices.add(data.vertex);", "-                    graph.outgoingEdgesOf(data.m_vertex).iterator();", "+                    graph.outgoingEdgesOf(data.vertex).iterator();", "-                        m_vertexToVertexData.get(m_graph.getEdgeTarget(edge));", "+                        vertexToVertexData.get(this.graph.getEdgeTarget(edge));", "-                    if (!targetData.m_discovered) {", "+                    if (!targetData.discovered) {", "-            } else if (data.m_finished) {", "+            } else if (data.finished) {", "-                    m_orderedVertices.addFirst(data.m_finishedData);", "+                    orderedVertices.addFirst(data.finishedData);"]}]}
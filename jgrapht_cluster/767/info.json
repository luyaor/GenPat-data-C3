{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3a33cf743d0b52048480290c054cf3ff", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04066f7b92589153b23ad6fa8d6d3dd1", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/ext/JGraphModelAdapter.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public JGraphModelAdapter(         Graph jGraphTGraph,         AttributeMap defaultVertexAttributes,         AttributeMap defaultEdgeAttributes,         CellFactory cellFactory)", "signatureAfterChange": "     public JGraphModelAdapter(         Graph<V, E> jGraphTGraph,         AttributeMap defaultVertexAttributes,         AttributeMap defaultEdgeAttributes,         CellFactory<V,E> cellFactory)", "diff": ["-        Graph jGraphTGraph,", "+        Graph<V, E> jGraphTGraph,", "-        CellFactory cellFactory)", "+        CellFactory<V,E> cellFactory)", "-            ListenableGraph g = (ListenableGraph) jGraphTGraph;", "+            ListenableGraph<V, E> g = (ListenableGraph<V, E>) jGraphTGraph;", "-        for (Iterator i = jGraphTGraph.vertexSet().iterator(); i.hasNext();) {", "+        for (Iterator<V> i = jGraphTGraph.vertexSet().iterator(); i.hasNext();) {", "-        for (Iterator i = jGraphTGraph.edgeSet().iterator(); i.hasNext();) {", "-            handleJGraphTAddedEdge((org._3pq.jgrapht.Edge) i.next());", "+        for (Iterator<E> i = jGraphTGraph.edgeSet().iterator(); i.hasNext();) {", "+            handleJGraphTAddedEdge(i.next());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b8f117d06719e144c021fa3396aa676", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/graph/SubgraphTest.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void testSubgraph()", "signatureAfterChange": "     public void testSubgraph()", "diff": ["-        Graph g = init(false);", "-        Subgraph sub = new Subgraph(g, null, null);", "+        Graph<String, Edge<String>> g = init(false);", "+        Subgraph<String, Edge<String>> sub = new Subgraph<String, Edge<String>>(g, null, null);", "-        Set vset = new HashSet(g.vertexSet());", "+        Set<String> vset = new HashSet<String>(g.vertexSet());", "-        vset = new HashSet();", "+        vset = new HashSet<String>();", "-        sub = new Subgraph(g, vset, null);", "+        sub = new Subgraph<String, Edge<String>>(g, vset, null);", "-        sub = new Subgraph(g, vset, new HashSet(g.getAllEdges(_v1, _v2)));", "+        sub = new Subgraph<String, Edge<String>>(g, vset, new HashSet<Edge<String>>(g.getAllEdges(_v1, _v2)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0da9e5062f303f3a0be02d2415ee534b", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/generate/GraphGeneratorTest.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void testRingGraphGenerator()", "signatureAfterChange": "     public void testRingGraphGenerator()", "diff": ["-        GraphGenerator gen = new RingGraphGenerator(SIZE);", "-        DirectedGraph g = new DefaultDirectedGraph();", "-        Map resultMap = new HashMap();", "+        GraphGenerator<Object,DirectedEdge<Object>,Object> gen =", "+        \t\tnew RingGraphGenerator<Object,DirectedEdge<Object>>(SIZE);", "+        DirectedGraph<Object,DirectedEdge<Object>> g =", "+        \t\tnew DefaultDirectedGraph<Object,DirectedEdge<Object>>();", "+        Map<String,Object> resultMap = new HashMap<String,Object>();", "-        Set seen = new HashSet();", "+        Set<Object> seen = new HashSet<Object>();", "-            Edge nextEdge = (Edge) g.outgoingEdgesOf(nextVertex).get(0);", "+            Edge<Object> nextEdge = g.outgoingEdgesOf(nextVertex).get(0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1375c07572668e71d288d4dda780e308", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/generate/RandomGraphGeneratorTest.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private static Graph [] testGenerateDirectedGraph()", "signatureAfterChange": "     private static Graph [] testGenerateDirectedGraph()", "diff": ["-        RandomGraphGenerator randomGen =", "-            new RandomGraphGenerator(numOfVertex, numOfEdges);", "-        Graph directedGragh1 = new SimpleDirectedGraph();", "+        RandomGraphGenerator<Integer,DirectedEdge<Integer>>", "+        \trandomGen = new RandomGraphGenerator<Integer,DirectedEdge<Integer>>(numOfVertex, numOfEdges);", "+", "+        Graph<Integer,DirectedEdge<Integer>>", "+        \tdirectedGragh1 = new SimpleDirectedGraph<Integer,DirectedEdge<Integer>>();", "+", "+        ", "-        Graph directedGragh2 = new SimpleDirectedGraph();", "+        Graph<Integer,DirectedEdge<Integer>>", "+        \tdirectedGragh2 = new SimpleDirectedGraph<Integer,DirectedEdge<Integer>>();", "+", "+        ", "-        RandomGraphGenerator newRandomGen =", "-            new RandomGraphGenerator(numOfVertex, numOfEdges);", "-        Graph directedGragh3 = new SimpleDirectedGraph();", "+        RandomGraphGenerator<Integer,DirectedEdge<Integer>>", "+        \tnewRandomGen = new RandomGraphGenerator<Integer,DirectedEdge<Integer>>(numOfVertex, numOfEdges);", "+        ", "+        Graph<Integer,DirectedEdge<Integer>>", "+        \tdirectedGragh3 = new SimpleDirectedGraph<Integer,DirectedEdge<Integer>>();", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1549f97d0a4be78b20dfa4fe4359c50a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/traverse/IgnoreDirectionTest.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      AbstractGraphIterator createIterator(DirectedGraph g, Object vertex)", "signatureAfterChange": "      AbstractGraphIterator<String, DirectedEdge<String>> createIterator(DirectedGraph<String, DirectedEdge<String>> g, String vertex)", "diff": ["-    AbstractGraphIterator createIterator(DirectedGraph g, Object vertex)", "+    AbstractGraphIterator<String, DirectedEdge<String>> createIterator(DirectedGraph<String, DirectedEdge<String>> g, String vertex)", "-        UndirectedGraph undirectedView = new AsUndirectedGraph(g);", "-        AbstractGraphIterator i = new DepthFirstIterator(undirectedView, \"4\");", "+        UndirectedGraph<String, DirectedEdge<String>> undirectedView =", "+        \tnew AsUndirectedGraph<String, DirectedEdge<String>>(g);", "+        AbstractGraphIterator<String, DirectedEdge<String>> i = new DepthFirstIterator<String, DirectedEdge<String>,Object>(undirectedView, \"4\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ab0262cce21f704af553e6a86aa3a43", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/AdaptiveIsomorphismInspectorFactory.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     protected static GraphIsomorphismInspector     createTopologicalExhaustiveInspector(         Graph graph1,         Graph graph2,         EquivalenceComparator vertexChecker,         EquivalenceComparator edgeChecker)", "signatureAfterChange": "     protected static <V,E extends Edge<V>> GraphIsomorphismInspector         createTopologicalExhaustiveInspector(                 Graph<V,E> graph1,                 Graph<V,E> graph2,                 EquivalenceComparator<? super V,? super Graph<V,E>> vertexChecker,                 EquivalenceComparator<? super E,? super Graph<V,E>> edgeChecker)", "diff": ["-    protected static GraphIsomorphismInspector", "-    createTopologicalExhaustiveInspector(", "-        Graph graph1,", "-        Graph graph2,", "-        EquivalenceComparator vertexChecker,", "-        EquivalenceComparator edgeChecker)", "+    protected static <V,E extends Edge<V>> GraphIsomorphismInspector", "+        createTopologicalExhaustiveInspector(", "+                Graph<V,E> graph1,", "+                Graph<V,E> graph2,", "+                EquivalenceComparator<? super V,? super Graph<V,E>> vertexChecker,", "+                EquivalenceComparator<? super E,? super Graph<V,E>> edgeChecker)", "-        VertexDegreeEquivalenceComparator degreeComparator =", "-            new VertexDegreeEquivalenceComparator();", "-        EquivalenceComparatorChain vertexChainedChecker =", "-            new EquivalenceComparatorChainBase(degreeComparator);", "+        VertexDegreeEquivalenceComparator<V,E> degreeComparator =", "+            new VertexDegreeEquivalenceComparator<V,E>();", "+        EquivalenceComparatorChain<V,Graph<V, E>> vertexChainedChecker =", "+            new EquivalenceComparatorChainBase<V,Graph<V,E>>(degreeComparator);", "+            // FIXME hb060208 I don't understand how to generify this, yet"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20100dee00cf8a91869e07e3f7702754", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/generate/GraphGeneratorTest.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void testLinearGraphGenerator()", "signatureAfterChange": "     public void testLinearGraphGenerator()", "diff": ["-        GraphGenerator gen = new LinearGraphGenerator(SIZE);", "-        DirectedGraph g = new DefaultDirectedGraph();", "-        Map resultMap = new HashMap();", "+        GraphGenerator<Object,DirectedEdge<Object>,Object> gen =", "+        \t\tnew LinearGraphGenerator<Object,DirectedEdge<Object>>(SIZE);", "+        DirectedGraph<Object,DirectedEdge<Object>> g =", "+        \t\tnew DefaultDirectedGraph<Object,DirectedEdge<Object>>();", "+        Map<String,Object> resultMap = new HashMap<String,Object>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93925cf6f53e562c483f3e58a52c5ccf", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/alg/isomorphism/IsomorphismInspectorTest.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void testWheelGraphAddRemoveParts()", "signatureAfterChange": "      public void testWheelGraphAddRemoveParts()", "diff": ["-        Graph g1 = new DefaultDirectedGraph();", "-        Graph g2 = new DefaultDirectedGraph();", "-        WheelGraphGenerator gen1 =", "-            new WheelGraphGenerator(NUM_OF_VERTEXES_IN_WHEEL);", "+        Graph<Integer,DirectedEdge<Integer>> g1 = new DefaultDirectedGraph<Integer,DirectedEdge<Integer>>();", "+        Graph<Integer,DirectedEdge<Integer>> g2 = new DefaultDirectedGraph<Integer,DirectedEdge<Integer>>();", "+        WheelGraphGenerator<Integer,DirectedEdge<Integer>>  gen1 =", "+            new WheelGraphGenerator<Integer,DirectedEdge<Integer>> (NUM_OF_VERTEXES_IN_WHEEL);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad68e14a0f025e5d5ad06e5d7271f851", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/generate/GraphGeneratorTest.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testEmptyGraphGenerator()", "signatureAfterChange": "     public void testEmptyGraphGenerator()", "diff": ["-        GraphGenerator gen = new EmptyGraphGenerator(SIZE);", "-        DirectedGraph g = new DefaultDirectedGraph();", "-        Map resultMap = new HashMap();", "+        GraphGenerator<Object,DirectedEdge<Object>,Object> gen =", "+        \t\tnew EmptyGraphGenerator<Object,DirectedEdge<Object>>(SIZE);", "+        DirectedGraph<Object,DirectedEdge<Object>> g =", "+        \t\tnew DefaultDirectedGraph<Object,DirectedEdge<Object>>();", "+        Map<String,Object> resultMap = new HashMap<String,Object>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aed7848c162cf8e591129afadbac7a98", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/generate/RandomGraphGenerator.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void generateGraph(         Graph target,         VertexFactory vertexFactory,         Map resultMap)", "signatureAfterChange": "     public void generateGraph(         Graph<V,E> target,         VertexFactory<V> vertexFactory,         Map<String,V> resultMap)", "diff": ["-        Graph target,", "-        VertexFactory vertexFactory,", "-        Map resultMap)", "+        Graph<V,E> target,", "+        VertexFactory<V> vertexFactory,", "+        Map<String,V> resultMap)", "-        Map orderToVertexMap = new HashMap(this.numOfVertexes);", "+        Map<Integer,V> orderToVertexMap = new HashMap<Integer,V>(this.numOfVertexes);", "-            Object currVertex = vertexFactory.createVertex();", "+            V currVertex = vertexFactory.createVertex();", "-        EdgeTopologyFactory edgesFactory =", "+        EdgeTopologyFactory<V,E> edgesFactory ="]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1176480aa3a124d71dcb4e90906a91a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/generate/RingGraphGenerator.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void generateGraph(         Graph target,         VertexFactory vertexFactory,         Map resultMap)", "signatureAfterChange": "     public void generateGraph(         Graph<V,E> target,         VertexFactory<V> vertexFactory,         Map<String,V> resultMap)", "diff": ["-        Graph target,", "-        VertexFactory vertexFactory,", "-        Map resultMap)", "+        Graph<V,E> target,", "+        VertexFactory<V> vertexFactory,", "+        Map<String,V> resultMap)", "-        LinearGraphGenerator linearGenerator =", "-            new LinearGraphGenerator(m_size);", "-        Map privateMap = new HashMap();", "+        LinearGraphGenerator<V,E> linearGenerator =", "+            new LinearGraphGenerator<V,E>(m_size);", "+        Map<String,V> privateMap = new HashMap<String,V>();", "-        Object startVertex = privateMap.get(LinearGraphGenerator.START_VERTEX);", "-        Object endVertex = privateMap.get(LinearGraphGenerator.END_VERTEX);", "+        V startVertex = privateMap.get(LinearGraphGenerator.START_VERTEX);", "+        V endVertex = privateMap.get(LinearGraphGenerator.END_VERTEX);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4ad0154df5cca03ba578e67cecdac7d", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/experimental/GraphSquare.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public GraphSquare(final Graph g, final boolean createLoops)", "signatureAfterChange": "     public GraphSquare(final Graph<V,E> g, final boolean createLoops)", "diff": ["-    public GraphSquare(final Graph g, final boolean createLoops)", "+    public GraphSquare(final Graph<V,E> g, final boolean createLoops)", "-            ((ListenableGraph) g).addGraphListener(new GraphListener() {", "-                    public void edgeAdded(GraphEdgeChangeEvent e)", "+            ((ListenableGraph<V,E>) g).addGraphListener(new GraphListener<V,E>() {", "+                    public void edgeAdded(GraphEdgeChangeEvent<V,E> e)", "-                        Edge edge = e.getEdge();", "+                        E edge = e.getEdge();", "-                    public void edgeRemoved(GraphEdgeChangeEvent e)", "+                    public void edgeRemoved(GraphEdgeChangeEvent<V,E> e)", "-                    public void vertexAdded(GraphVertexChangeEvent e)", "+                    public void vertexAdded(GraphVertexChangeEvent<V> e)", "-                    public void vertexRemoved(GraphVertexChangeEvent e)", "+                    public void vertexRemoved(GraphVertexChangeEvent<V> e)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7a4f169480258d8f63dc5edb0d3068f", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/VertexDegreeEquivalenceComparator.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected InOutDegrees getInOutDegrees(         Graph aContextGraph,         Object vertex)", "signatureAfterChange": "     protected InOutDegrees getInOutDegrees(         Graph<V,E> aContextGraph,         V vertex)", "diff": ["-        Graph aContextGraph,", "-        Object vertex)", "+        Graph<V,E> aContextGraph,", "+        V vertex)", "-        int uniqueId = -1;", "-            UndirectedGraph undirectedGraph = (UndirectedGraph) aContextGraph;", "+            UndirectedGraph<V,E> undirectedGraph = (UndirectedGraph<V,E>) aContextGraph;", "-            DirectedGraph directedGraph = (DirectedGraph) aContextGraph;", "+            DirectedGraph<V,? extends E> directedGraph = (DirectedGraph<V,? extends E>) aContextGraph;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5ff6787a0ed7c4b69e36163f34cc2c1", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/alg/isomorphism/IsomorphismInspectorTest.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void testLinear4vertexNonIsomorphicCauseOfVertexEqGroup()", "signatureAfterChange": "     public void testLinear4vertexNonIsomorphicCauseOfVertexEqGroup()", "diff": ["-        LinearGraphGenerator gen4 = new LinearGraphGenerator(4);", "+        LinearGraphGenerator<Integer,DirectedEdge<Integer>>", "+        \tgen4 = new LinearGraphGenerator<Integer,DirectedEdge<Integer>>(4);", "-        Graph g1 = new DefaultDirectedGraph();", "+        Graph<Integer,DirectedEdge<Integer>>", "+        \tg1 = new DefaultDirectedGraph<Integer,DirectedEdge<Integer>>();", "-        Graph g2 = new DefaultDirectedGraph();", "+        Graph<Integer,DirectedEdge<Integer>>", "+        \tg2 = new DefaultDirectedGraph<Integer,DirectedEdge<Integer>>();", "-        Graph g3 = new DefaultDirectedGraph();", "+        Graph<Integer,DirectedEdge<Integer>>", "+        \tg3 = new DefaultDirectedGraph<Integer,DirectedEdge<Integer>>();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b7520c2ff4a55415ed89f18290f2222e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27b165bff3c24e22f5af725c664c8567", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/TarjanLowestCommonAncestor.java", "commitBeforeChange": "5e0a623da07f9a88365fbfbdcfe89366f3ec07c1", "commitAfterChange": "2bc963d635f1387003153797aed8f23b13ab7da1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public V calculate(V start, V a, V b)", "signatureAfterChange": "     public V calculate(V start, V a, V b)", "diff": ["-\treturn new Worker(a, b).calculate(start);", "+\tLcaRequestResponse<V> lrr = new LcaRequestResponse<V>(a, b);", "+\tnew Worker(lrr).calculate(start);", "+\treturn lrr.getLca();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bbbbb4d6b8870488cfa4b81e71087b2", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/BellmanFordShortestPath.java", "commitBeforeChange": "41540d6069074864616a1b8145b5f82327c8ca30", "commitAfterChange": "8262a3a0c02c409f150e557da1701ecf29695733", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public double getCost(V endVertex)", "signatureAfterChange": "     public double getCost(V endVertex)", "diff": ["-        lazyCalculate();", "-", "-        return this.iter.getPathElement(endVertex).getCost();", "+        lazyCalculate();", "+", "+        BellmanFordPathElement<V, E> pathElement =", "+            this.iter.getPathElement(endVertex);", "+", "+        if (pathElement == null) {", "+            return Double.POSITIVE_INFINITY;", "+        }", "+", "+        return pathElement.getCost();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd7679fad931295fb89265db3aac9e88", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/VF2SubgraphIsomorphismInspector.java", "commitBeforeChange": "cb1cae1f97dd9ffd761a89cc949eb78f64d8e9dc", "commitAfterChange": "955ac84ab8b9ea136f059b4838b3d33e4b6c7248", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \t@Override \tpublic SubgraphIsomorphismRelation<V,E> next()", "signatureAfterChange": "  \t@Override \tpublic SubgraphIsomorphismRelation<V,E> next()", "diff": ["-\t\t//todo: add \"throws ...\"", "-\t\treturn matchAndCheck();", "+\t\tSubgraphIsomorphismRelation<V,E> rel = matchAndCheck();", "+\t\tif (rel == null)", "+\t\t\tthrow new NoSuchElementException();", "+\t\treturn rel;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f589aec40ae5052db641d5179d04804d", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/cycle/DirectedSimpleCyclesTest.java", "commitBeforeChange": "4d60895d91679576d6be07f59cbe3780a48727d2", "commitAfterChange": "dbb4c94dd90f17f43176b57c7b088fe49292bb14", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      @Test     public void test()", "signatureAfterChange": "\r \r     @Test\r     public void test()", "diff": ["-", "-    @Test", "-    public void test()", "-    {", "-        TiernanSimpleCycles<Integer, DefaultEdge> tiernanFinder =", "-            new TiernanSimpleCycles<Integer, DefaultEdge>();", "-        TarjanSimpleCycles<Integer, DefaultEdge> tarjanFinder =", "-            new TarjanSimpleCycles<Integer, DefaultEdge>();", "-        JohnsonSimpleCycles<Integer, DefaultEdge> johnsonFinder =", "-            new JohnsonSimpleCycles<Integer, DefaultEdge>();", "-        SzwarcfiterLauerSimpleCycles<Integer, DefaultEdge> szwarcfiterLauerFinder =", "-            new SzwarcfiterLauerSimpleCycles<Integer, DefaultEdge>();", "-", "-        testAlgorithm(tiernanFinder);", "-        testAlgorithm(tarjanFinder);", "-        testAlgorithm(johnsonFinder);", "-        testAlgorithm(szwarcfiterLauerFinder);", "-    }", "+\r", "+    @Test\r", "+    public void test()\r", "+    {\r", "+        TiernanSimpleCycles<Integer, DefaultEdge> tiernanFinder =\r", "+            new TiernanSimpleCycles<Integer, DefaultEdge>();\r", "+        TarjanSimpleCycles<Integer, DefaultEdge> tarjanFinder =\r", "+            new TarjanSimpleCycles<Integer, DefaultEdge>();\r", "+        JohnsonSimpleCycles<Integer, DefaultEdge> johnsonFinder =\r", "+            new JohnsonSimpleCycles<Integer, DefaultEdge>();\r", "+        SzwarcfiterLauerSimpleCycles<Integer, DefaultEdge> szwarcfiterLauerFinder =\r", "+            new SzwarcfiterLauerSimpleCycles<Integer, DefaultEdge>();\r", "+        HawickJamesSimpleCycles<Integer, DefaultEdge> hawickJamesFinder =\r", "+                new HawickJamesSimpleCycles<Integer, DefaultEdge>();\r", "+\r", "+        testAlgorithm(tiernanFinder);\r", "+        testAlgorithm(tarjanFinder);\r", "+        testAlgorithm(johnsonFinder);\r", "+        testAlgorithm(szwarcfiterLauerFinder);\r", "+        testAlgorithm(hawickJamesFinder);\r", "+    }\r"]}]}
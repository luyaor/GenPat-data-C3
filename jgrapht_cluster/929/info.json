{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0efc164c9ca5cc67c3a1969f9a23e3b0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18f66af900fdc7e6d2fcb81ab060a5c4", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/experimental/ProximityIterator.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     protected final void encounterVertexAgain(Object vertex, Edge edge)", "signatureAfterChange": "     protected final void encounterVertexAgain(V vertex, E edge)", "diff": ["-    protected final void encounterVertexAgain(Object vertex, Edge edge)", "+    protected final void encounterVertexAgain(V vertex, E edge)", "-        HeapVertex heapV = getHeapVertex(vertex);", "+        HeapVertex<E> heapV = getHeapVertex(vertex);", "-        HeapVertex heapPre = getHeapVertex(edge.oppositeVertex(vertex));", "+        HeapVertex<E> heapPre = getHeapVertex(edge.oppositeVertex(vertex));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4af3f0bfcc5ecdf6bcbd31515c8464e0", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/AsUndirectedGraph.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public List getAllEdges( Object sourceVertex, Object targetVertex )", "signatureAfterChange": "     public List<E> getAllEdges( V sourceVertex, V targetVertex )", "diff": ["-    public List getAllEdges( Object sourceVertex, Object targetVertex ) {", "-        List forwardList = super.getAllEdges( sourceVertex, targetVertex );", "+    public List<E> getAllEdges( V sourceVertex, V targetVertex ) {", "+        List<E> forwardList = super.getAllEdges( sourceVertex, targetVertex );", "-        List reverseList = super.getAllEdges( targetVertex, sourceVertex );", "-        List list =", "+        List<E> reverseList = super.getAllEdges( targetVertex, sourceVertex );", "+        List<E> list ="]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4ae183b35fdbf885efe16d6f5670b090", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac87228df7c6c3e457a885a3ac7f3385", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/FloydWarshallShortestPaths.java", "commitBeforeChange": "bb3d0554d44bc9c9665912f8de77451452b3b6cf", "commitAfterChange": "8b23a5ff1277c7020e2ba7e733dafae09723a1b7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public double getDiameter()", "signatureAfterChange": "     public double getDiameter()", "diff": ["+", "+        if (Double.isNaN(diameter)) {", "+            diameter = 0.0;", "+            int n = vertices.size();", "+            for (int i = 0; i < n; i++) {", "+                for (int j = 0; j < n; j++) {", "+                    if (!Double.isInfinite(d[i][j]) && d[i][j] > diameter) {", "+                        diameter = d[i][j];", "+                    }", "+                }", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e667030a11b19821cd21c1fc3e9e9889", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/Subgraph.java", "commitBeforeChange": "1bf692b9303b369fdfe7554ce2df1fedf3288436", "commitAfterChange": "5471207353f24a9e52809a768cf32ffbeaf81076", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public int degreeOf( Object vertex )", "signatureAfterChange": "     public int degreeOf( Object vertex )", "diff": ["-        return ( (UndirectedGraph) m_base ).degreeOf( vertex );", "+        assertVertexExist( vertex );", "+        ", "+        // sophisticated way to check runtime class of base ;-)", "+        ((UndirectedGraph)m_base).degreeOf( vertex );", "+        ", "+        int degree = 0;", "+", "+        for( Iterator i = m_base.edgesOf( vertex ).iterator(  ); i.hasNext(  ); ) {", "+            Edge e = (Edge) i.next(  );", "+", "+            if( containsEdge( e ) ) {", "+                degree++;", "+                if (e.getSource().equals(e.getTarget())) {", "+                    degree++;", "+                }", "+            }", "+        }", "+        ", "+        return degree;"]}]}
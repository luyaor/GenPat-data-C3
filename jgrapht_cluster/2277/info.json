{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "36fcb9644785709b9f809667119ba5f5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51481cd88a802456e184149e9975e07a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/AdaptiveIsomorphismInspectorFactory.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     protected static void assertUnsupportedGraphTypes(         Graph graph1,         Graph graph2)         throws IllegalArgumentException", "signatureAfterChange": "     protected static void assertUnsupportedGraphTypes( Graph g )         throws IllegalArgumentException", "diff": ["-    protected static void assertUnsupportedGraphTypes(", "-        Graph graph1,", "-        Graph graph2)", "+    protected static void assertUnsupportedGraphTypes( Graph g )", "-        Graph [] graphArray = new Graph [] {", "-                graph1, graph2", "-            };", "-        for (int i = 0; i < graphArray.length; i++) {", "-            Graph g = graphArray[i];", "-            if ((g instanceof Multigraph)", "-                || (g instanceof DirectedMultigraph)", "-                || (g instanceof Pseudograph)) {", "-                throw new IllegalArgumentException(", "-                    \"graph type not supported for the graph\" + g);", "-            }", "+        if ((g instanceof Multigraph)", "+            || (g instanceof DirectedMultigraph)", "+            || (g instanceof Pseudograph)) {", "+            throw new IllegalArgumentException(", "+                \"graph type not supported for the graph\" + g);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69dbce76bcb8ed22dae6fa7cd6bbbd98", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/EdmondsKarpMaximumFlow.java", "commitBeforeChange": "c9321cdd6f93b7e8e241f348de2e975bf226c350", "commitAfterChange": "96bea297cb6d79531586150eeb7ae5f6fce792c9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public EdmondsKarpMaximumFlow(DirectedGraph<V, E> network,         double epsilon)", "signatureAfterChange": "     public EdmondsKarpMaximumFlow(DirectedGraph<V, E> network, double epsilon)", "diff": ["-    public EdmondsKarpMaximumFlow(DirectedGraph<V, E> network,", "-        double epsilon)", "+    public EdmondsKarpMaximumFlow(DirectedGraph<V, E> network, double epsilon)", "-        if (network == null) {", "-            throw new NullPointerException(\"network is null\");", "-        }", "-        if (epsilon <= 0) {", "-            throw new IllegalArgumentException(", "-                \"invalid epsilon (must be positive)\");", "-        }", "-        for (E e : network.edgeSet()) {", "-            if (network.getEdgeWeight(e) < -epsilon) {", "-                throw new IllegalArgumentException(", "-                    \"invalid capacity (must be non-negative)\");", "-            }", "-        }", "-", "-        this.network = network;", "-        this.epsilon = epsilon;", "-", "-        currentSource = -1;", "-        currentSink = -1;", "-", "-        buildInternalNetwork();", "+        engine = new org.jgrapht.alg.flow.EdmondsKarpMaximumFlow<V, E>(network, epsilon);"]}]}
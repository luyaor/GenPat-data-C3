{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2ccb24ae3e0985c048f94d4437f1c24c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "267076f44d4291cda81555dc18986f62", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/generate/RandomGraphGeneratorTest.java", "commitBeforeChange": "8fd381a0bfbe625ab067c8be5c035c3ff210da3b", "commitAfterChange": "5f7dd7f76e832179b37f17428736d98c6fd59348", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testGenerateDirectedGraph()", "signatureAfterChange": "      public void testGenerateDirectedGraph()", "diff": ["-        Graph [] graphArray = new Graph[3];", "+        List<Graph<Integer, DefaultEdge>> graphArray =", "+            new ArrayList<Graph<Integer, DefaultEdge>>();", "-            graphArray[i] =", "+            graphArray.add(", "-                    DefaultEdge.class);", "+                    DefaultEdge.class));", "-        assertTrue(EdgeTopologyCompare.compare(graphArray[0], graphArray[1]));", "+        assertTrue(", "+            EdgeTopologyCompare.compare(graphArray.get(0), graphArray.get(1)));", "-        // assertFalse(EdgeTopologyCompare.compare(graphArray[1],graphArray[2]));", "+        // assertFalse(EdgeTopologyCompare.compare(graphArray.get(1),graphArray.get(2)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9f615f177b436f74f2b8688ba2697e3", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/generate/RandomGraphGeneratorTest.java", "commitBeforeChange": "8fd381a0bfbe625ab067c8be5c035c3ff210da3b", "commitAfterChange": "5f7dd7f76e832179b37f17428736d98c6fd59348", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testGenerateListenableUndirectedGraph()", "signatureAfterChange": "      public void testGenerateListenableUndirectedGraph()", "diff": ["-        Graph [] graphArray = new Graph[3];", "+        List<Graph<Integer, DefaultEdge>> graphArray =", "+            new ArrayList<Graph<Integer, DefaultEdge>>();", "-            graphArray[i] =", "+            graphArray.add(", "-                    DefaultEdge.class);", "+                    DefaultEdge.class));", "-        assertTrue(EdgeTopologyCompare.compare(graphArray[0], graphArray[1]));", "+        assertTrue(", "+            EdgeTopologyCompare.compare(graphArray.get(0), graphArray.get(1)));"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "67ff378c828d37b775cb5a002d27533a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e7d0364bc0ea8d92f13c152a3225523", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-ext/src/main/java/org/jgrapht/ext/DOTImporter.java", "commitBeforeChange": "2cba8aef2cc77a406de26760e4f816581f7adba7", "commitAfterChange": "915acf67bde336fce1aee298fe506b6a9a961b70", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void validateLines(String[] lines) throws ImportException", "signatureAfterChange": "     private void validateLines(String[] lines,                               AbstractBaseGraph<V,E> graph)          throws ImportException", "diff": ["-   private void validateLines(String[] lines) throws ImportException", "+   private void validateLines(String[] lines,", "+                              AbstractBaseGraph<V,E> graph)", "+         throws ImportException", "-      String[] firstLine = lines[0].split(\" \", 3);", "-      if(firstLine.length != 3) {", "+      String[] firstLine = lines[0].split(\" \", 4);", "+      if(firstLine.length < 3) {", "-      if (!firstLine[0].equals(\"digraph\") && !firstLine[0].equals(\"graph\")) {", "+      int i = 0;", "+      if (graph.isAllowingMultipleEdges() && firstLine[i].equals(\"strict\")) {", "+         throw new ImportException(", "+               \"graph defines strict but Multigraph given.\"", "+         );", "+      } else if (firstLine[i].equals(\"strict\")) {", "+         i = i + 1;", "+      }", "+", "+      if (graph instanceof DirectedGraph && firstLine[i].equals(\"graph\") ) {", "+         throw new ImportException(", "+               \"input asks for undirected graph and directed graph provided.\"", "+         );", "+      } else if (!(graph instanceof DirectedGraph)", "+                 && firstLine[i].equals(\"digraph\")) {", "+         throw new ImportException(", "+               \"input asks for directed graph but undirected graph provided.\"", "+         );", "+      } else if(!firstLine[i].equals(\"graph\")", "+                && !firstLine[i].equals(\"digraph\")){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "992478a522df909617751c08b7d93481", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-ext/src/main/java/org/jgrapht/ext/DOTImporter.java", "commitBeforeChange": "583bedb628992418bdbd952ca092e65831d3b133", "commitAfterChange": "43aa0f5e11b9b56a524f92631cd31dc060fa1ca7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private void validateLines(String[] lines,                               AbstractBaseGraph<V,E> graph)          throws ImportException", "signatureAfterChange": "     private void processCompleteEdge(String edge, AbstractBaseGraph<V, E> graph, Map<String, V> vertexes)", "diff": ["-   private void validateLines(String[] lines,", "-                              AbstractBaseGraph<V,E> graph)", "-      if(lines.length < 2) {", "-         throw new ImportException(\"Dot string was invalid\");", "-      }", "-      // validate the first line", "-      String[] firstLine = lines[0].split(\" \", 4);", "-      if(firstLine.length < 3) {", "-         throw new ImportException(\"not enough parts on first line\");", "-      int i = 0;", "-      if (graph.isAllowingMultipleEdges() && firstLine[i].equals(\"strict\")) {", "-         throw new ImportException(", "-               \"graph defines strict but Multigraph given.\"", "-         );", "-      } else if (firstLine[i].equals(\"strict\")) {", "-         i = i + 1;", "-      if (graph instanceof DirectedGraph && firstLine[i].equals(\"graph\") ) {", "-         throw new ImportException(", "-               \"input asks for undirected graph and directed graph provided.\"", "-         );", "-      } else if (!(graph instanceof DirectedGraph)", "-                 && firstLine[i].equals(\"digraph\")) {", "-         throw new ImportException(", "-               \"input asks for directed graph but undirected graph provided.\"", "-         );", "-      } else if(!firstLine[i].equals(\"graph\")", "-                && !firstLine[i].equals(\"digraph\")){", "-         throw new ImportException(\"unknown graph type\");", "+", "+   private void processCompleteEdge(String edge, AbstractBaseGraph<V, E> graph, Map<String, V> vertexes) {", "+      Map<String, String> attributes = extractAttributes(edge);", "+", "+      List<String> ids = extractEdgeIds(edge);", "+", "+      // for each pair of ids in the list create an edge.", "+      for(int i = 0; i < ids.size() - 1; i++) {", "+         V v1 = getVertex(ids.get(i), vertexes, graph);", "+         V v2 = getVertex(ids.get(i+1), vertexes, graph);", "+", "+         E resultEdge = edgeProvider.buildEdge(v1,", "+                                         v2,", "+                                         attributes.get(\"label\"),", "+                                         attributes);", "+         graph.addEdge(v1, v2, resultEdge);"]}]}
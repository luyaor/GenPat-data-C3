{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "19777c2c0b2d831166d977ccb7fd5c59", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cac4077a33bb7bc50856da0f1b14889", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/BreadthFirstIterator.java", "commitBeforeChange": "1a139deda5ac7b2aaba241b3824c64caaee23fb6", "commitAfterChange": "ddcca677c21de372890c813874f294b371ec5648", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public Object next(  )", "signatureAfterChange": "     public Object next(  )", "diff": ["-            List edges = m_specifics.edgesOf( nextVertex );", "-", "-            for( Iterator iter = edges.iterator(  ); iter.hasNext(  ); ) {", "-                Edge e = (Edge) iter.next(  );", "-                fireEdgeVisited( e );", "-", "-                Object v = e.oppositeVertex( nextVertex );", "-", "-                if( m_seen.add( v ) ) { // means: if NOT seen", "-                    m_queue.add( v );", "-                }", "-            }", "+            enqueueUnseenChildrenOf( nextVertex );", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b6d3e9606d49f3096cdf539e983788c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/graph/AbstractGraph.java", "commitBeforeChange": "d31c0a461f002b1bbca978a729161e05d339538a", "commitAfterChange": "ee11f3bf4fcb52f92037c518ce52556a0f7dfbad", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public boolean equals(Object object)", "signatureAfterChange": "     public boolean equals(Object object)", "diff": ["-", "-        // TODO: maybe we should add class checking here:", "-        // for example: Undirected and Directed are different graphs, but could looks the same (have same hashCodes()) (VK)", "+        if (getClass() != object.getClass()) return false;", "-        if (vertexSet().size() != g.vertexSet().size() ", "-            || edgeSet().size() != g.edgeSet().size()) return false;", "-", "-        for (V v: vertexSet()) {", "-            if (!g.containsVertex(v)) return false;", "-        }", "-", "-        for (V v: g.vertexSet()) {", "-            if (!containsVertex(v)) return false;", "-        }", "+        if (!vertexSet().equals(g.vertexSet())) return false;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "09319945b1c76179066cb93a0a7f2a0d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95da60542edca05b1b429dc135d8958d", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/ext/JGraphModelAdapter.java", "commitBeforeChange": "9e56fea1a756c0e64243ea1194d826da9a86334d", "commitAfterChange": "e563caefefe8e6d5cb2cd3eeffbf9b668da138b1", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     void handleJGraphInsertedEdge( org.jgraph.graph.Edge jEdge )", "signatureAfterChange": "     void handleJGraphInsertedEdge( org.jgraph.graph.Edge jEdge )", "diff": ["-                    \"Warning: a parallel edge was deleted because \"", "-                    + \"the underlying JGraphT forbids parallel edges. \"", "-                    + \"If you need parallel edges, use a suitable \"", "-                    + \"underlying JGraphT instead.\" );", "+                    \"Warning: an edge was deleted because the underlying \"", "+                    + \"JGraphT graph refused to create it. \"", "+                    + \"This situation can happen when a constraint of the \"", "+                    + \"underlying graph is violated, e.g., an attempt to add \"", "+                    + \"a parallel edge or a self-loop to a graph that forbids \"", "+                    + \"them. To avoid this message, make sure to use a \"", "+                    + \"suitable underlying JGraphT graph.\" );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad86d65fbb1e6d243f0ef8295ff42e06", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/PushRelabelMaximumFlow.java", "commitBeforeChange": "c6d16a85d0c70dcdddd76fb3dff4d37d8c853806", "commitAfterChange": "dd89e42fc781adefe1438e7e9adcf43642b9086c", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "      @Override     public MaximumFlow<V, E> buildMaximumFlow(V source, V sink)", "signatureAfterChange": "      @Override     public MaximumFlow<V, E> buildMaximumFlow(V source, V sink)", "diff": ["-                if (LABEL_PRUNE_ENABLED) {", "-                    if (!flowBack && !labeling.containsKey(0) && !labeling.containsKey(1)) {", "-                        // This supposed to drastically improve performance", "-                        extendedVertex(source).label = Collections.max(labeling.keySet()) + 1;", "-                        flowBack = true;", "-                    }", "+                if (!flowBack && !labeling.containsKey(0) && !labeling.containsKey(1)) {", "+                    // This supposed to drastically improve performance", "+                    // cutting off the necessity to drive labels of all vertices", "+                    // up to value 'N' one-by-one not entailing eny effective discharge --", "+                    // at this point there is no vertex with the label <= 1 in the", "+                    // network & therefore no 'discharging-path' to the _sink_ also", "+                    // signalling that we're in the flow-back stage of the algorithm", "+                    extendedVertex(source).label = Collections.max(labeling.keySet()) + 1;", "+                    flowBack = true;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a7d20a8093581e3110a1fcfc91fdb252", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d2f04be95ff5bc08a195a4bedcc4a7a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/PushRelabelMaximumFlow.java", "commitBeforeChange": "7acd462dd9b27baaee05cd7cb1743331738444cd", "commitAfterChange": "77d3536281d5009f64d3969a18ec7d765c16f646", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Override     public MaximumFlow<V, E> buildMaximumFlow(V source, V sink)", "signatureAfterChange": "      @Override     public MaximumFlow<V, E> buildMaximumFlow(V source, V sink)", "diff": ["+", "+                // Check whether we still have any vertices with the label '1'", "+                if (LABEL_PRUNE_ENABLED) {", "+                    if (!flowBack && !labeling.containsKey(0) && !labeling.containsKey(1)) {", "+                        // This supposed to drastically improve performance", "+                        extendedVertex(source).label = Collections.max(labeling.keySet()) + 1;", "+                        flowBack = true;", "+                    }", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdda043494159952563902ac492533d9", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/experimental/permutation/CompoundPermutationIterTest.java", "commitBeforeChange": "16285fc735125684f525244baa1af05c7e3b89ee", "commitAfterChange": "ff54bec324648e52ae4dae6f81ce89c54758dce1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void testGetNext()", "signatureAfterChange": "     public void testGetNext()", "diff": ["-            // System.out.println(ArraysUtility.toString(resultArray));", "+            if (false) {", "+                System.out.println(ArrayUtil.toString(resultArray));", "+            }", "-            // System.out.println(ArraysUtility.toString(resultArray));", "+            if (false) {", "+                System.out.println(ArrayUtil.toString(resultArray));", "+            }"]}]}
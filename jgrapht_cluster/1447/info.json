{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7d4f0a2eb26d1e2962c3b04c0d3f806a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b5d6b8aeacb4b8d0d6e53773c623be1", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/GraphOrdering.java", "commitBeforeChange": "aa92fe16c7852c9f9d1bf3a60c5718fcffd0ae0a", "commitAfterChange": "cb1cae1f97dd9ffd761a89cc949eb78f64d8e9dc", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \t \tpublic GraphOrdering(Graph<V,E> graph)", "signatureAfterChange": " \t \t \tpublic GraphOrdering(Graph<V,E> graph, boolean orderByDegree)", "diff": ["-\tpublic GraphOrdering(Graph<V,E> graph)", "+\tpublic GraphOrdering(Graph<V,E> graph, boolean orderByDegree)", "+\t\tSet<V> vertexSet = graph.vertexSet();", "+\t\tvertexCount = vertexSet.size();", "-\t\tmapOrderToVertex = new HashMap<Integer, V>();", "+\t\tmapOrderToVertex = new Object[vertexCount];", "+\t\t", "+\t\toutgoingEdges    = new int[vertexCount][];", "+\t\tincomingEdges    = new int[vertexCount][];", "-\t\tfor(V vertex : graph.vertexSet())\t{", "+\t\tfor(V vertex : vertexSet)\t{", "-\t\t\tmapOrderToVertex.put(i++, vertex);\t", "+\t\t\tmapOrderToVertex[i] = vertex;", "+\t\t\t", "+\t\t\toutgoingEdges[i]   = null;", "+\t\t\tincomingEdges[i++] = null;", "-\t\tvertexCount = i.intValue();", "+\t\t// todo: orderByDegree", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b91f8d94890097ffccfb1e7a0005e105", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/GraphOrdering.java", "commitBeforeChange": "75da15a2ad53807aa34166dd4a934ee5a3114489", "commitAfterChange": "b6bf6e6f6f1e074aef6e900590753e33d9eeabab", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public boolean hasEdge(int v1Number, int v2Number)", "signatureAfterChange": "     public boolean hasEdge(int v1Number, int v2Number)", "diff": ["-        V v1 = getVertex(v1Number),", "-          v2 = getVertex(v2Number);", "+        V v1, v2;", "+        Boolean containsEdge = null;", "-        return graph.containsEdge(v1, v2);", "+        if (cacheEdges)", "+            containsEdge = adjMatrix[v1Number][v2Number];", "+", "+        if (!cacheEdges || containsEdge == null) {", "+            v1 = getVertex(v1Number);", "+            v2 = getVertex(v2Number);", "+            containsEdge = graph.containsEdge(v1, v2);", "+        }", "+        ", "+        if (cacheEdges && adjMatrix[v1Number][v2Number] == null)", "+            adjMatrix[v1Number][v2Number] = containsEdge;", "+", "+        return containsEdge;"]}]}
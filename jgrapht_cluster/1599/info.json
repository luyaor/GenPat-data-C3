{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2463e1933c7c59e1c81ee98996e9d3ed", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc21d7946d2ad99c602c8811182fb329", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/AbstractExhaustiveIsomorphismInspector.java", "commitBeforeChange": "bc0edf459db61509a8a89769f512605e140e204b", "commitAfterChange": "be762e0954643fc21a24645a8b9b6765fa5b12ef", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprotected boolean areAllEdgesEquivivalant(IsomorphismRelation resultRelation,EquivalenceComparator edgeComparator)", "signatureAfterChange": "     protected boolean areAllEdgesEquivalent(         IsomorphismRelation resultRelation,         EquivalenceComparator edgeComparator)", "diff": ["-\t */", "-\tprotected boolean areAllEdgesEquivivalant(IsomorphismRelation resultRelation,EquivalenceComparator edgeComparator)", "-\t{", "-\t\tboolean checkResult=true;", "-\t\t", "-\t\tif (edgeComparator==null)", "-\t\t{", "-\t\t\t//nothing to check", "-\t\t\treturn true;", "-\t\t}", "-\t\t", "-\t\t", "-\t\ttry", "-\t\t{", "-\t\t\tSet edgeSet = this.graph1.edgeSet();", "-\t\t", "-\t\t\tfor (Iterator iter = edgeSet.iterator(); iter.hasNext();) ", "-\t\t\t{", "-\t\t\t\tEdge currEdge = (Edge) iter.next();", "-\t\t\t\tEdge correspondingEdge = (Edge)resultRelation.getCorrespondence(currEdge,true);", "-\t\t\t\t\t", "-\t\t\t\t//if one edge test fail , fail the whole method", "-\t\t\t\tif (!edgeComparator.equivalenceCompare(\tcurrEdge,", "-\t\t\t\t\t\t\t\t\t\t\t\t\tcorrespondingEdge,", "-\t\t\t\t\t\t\t\t\t\t\t\t\tthis.graph1,", "-\t\t\t\t\t\t\t\t\t\t\t\t\tthis.graph2))", "-\t\t\t\t{", "-\t\t\t\t\tcheckResult=false;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tcatch (IllegalArgumentException illegal)", "-\t\t{", "-\t\t\tcheckResult=false;", "-\t\t}", "-\t\t", "-\t\t", "-\t\t", "-\t\t", "-\t\treturn checkResult;", "-\t}", "+     */", "+    protected boolean areAllEdgesEquivalent(", "+        IsomorphismRelation resultRelation,", "+        EquivalenceComparator edgeComparator)", "+    {", "+        boolean checkResult = true;", "+", "+        if (edgeComparator == null) {", "+            // nothing to check", "+            return true;", "+        }", "+", "+        try {", "+            Set edgeSet = this.graph1.edgeSet();", "+", "+            for (Iterator iter = edgeSet.iterator(); iter.hasNext();) {", "+                Edge currEdge = (Edge) iter.next();", "+                Edge correspondingEdge =", "+                    (Edge) resultRelation.getCorrespondence(currEdge, true);", "+", "+                // if one edge test fail , fail the whole method", "+                if (!edgeComparator.equivalenceCompare(", "+                        currEdge,", "+                        correspondingEdge,", "+                        this.graph1,", "+                        this.graph2)) {", "+                    checkResult = false;", "+                    break;", "+                }", "+            }", "+        } catch (IllegalArgumentException illegal) {", "+            checkResult = false;", "+        }", "+", "+        return checkResult;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e68d09a831f364a7dc597a5f29429565", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/ext/DOTExporter.java", "commitBeforeChange": "e601cce570393b1ad5c879b58ec483ca42a9532b", "commitAfterChange": "df9e52ba034eea98b94d0b6e1470ce50769bc1ce", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void export(Writer writer, Graph<V,E> g)", "signatureAfterChange": "     public void export(Writer writer, Graph<V, E> g)", "diff": ["-    public void export(Writer writer, Graph<V,E> g)", "+    public void export(Writer writer, Graph<V, E> g)", "-        ", "-        if (g instanceof DirectedGraph)", "-        {", "-    \t\tout.println(\"digraph G {\");", "-    \t\tconnector = \" -> \";", "+", "+        if (g instanceof DirectedGraph) {", "+            out.println(\"digraph G {\");", "+            connector = \" -> \";", "+        } else {", "+            out.println(\"graph G {\");", "+            connector = \" -- \";", "-        else", "-        {", "-    \t\tout.println(\"graph G {\");", "-    \t\tconnector = \" -- \";", "-    \t}", "-\t\tfor (V v : g.vertexSet())", "-\t\t{", "-\t\t    out.print(indent + vertexIDProvider.getVertexName(v));", "-\t\t    ", "-\t\t    if (vertexLabelProvider != null)", "-\t\t        out.print(\" [label = \\\"\" + vertexLabelProvider.getVertexName(v) + \"\\\"]\");", "-\t\t    ", "+        for (V v : g.vertexSet()) {", "+            out.print(indent + vertexIDProvider.getVertexName(v));", "+", "+            if (vertexLabelProvider != null) {", "+                out.print(", "+                    \" [label = \\\"\" + vertexLabelProvider.getVertexName(v)", "+                    + \"\\\"]\");", "+            }", "+", "-\t\t}", "+        }", "-        for (E e : g.edgeSet())", "-\t\t{", "-\t\t    String source = vertexIDProvider.getVertexName(g.getEdgeSource(e));", "-\t\t    String target = vertexIDProvider.getVertexName(g.getEdgeTarget(e));", "+        for (E e : g.edgeSet()) {", "+            String source = vertexIDProvider.getVertexName(g.getEdgeSource(e));", "+            String target = vertexIDProvider.getVertexName(g.getEdgeTarget(e));", "-\t\t\tout.print(indent + source + connector + target);", "-\t\t\t", "-\t\t\tif (edgeLabelProvider != null)", "-                out.print(\" [label = \\\"\" + edgeLabelProvider.getEdgeName(e) + \"\\\"]\");", "-                ", "+            out.print(indent + source + connector + target);", "+", "+            if (edgeLabelProvider != null) {", "+                out.print(", "+                    \" [label = \\\"\" + edgeLabelProvider.getEdgeName(e) + \"\\\"]\");", "+            }", "+", "-\t\t}", "+        }", "-\t\tout.println(\"}\");", "-\t\t", "-\t\tout.flush();", "+        out.println(\"}\");", "+", "+        out.flush();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7cf27992ef3d21d07600beaa2e1a352", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/experimental/alg/NearestNeighborTSPAlgorithm.java", "commitBeforeChange": "ede00ba6ca48a7a81231a62519a30fabb26ae338", "commitAfterChange": "f63e1142cae73862c9c4f7b6ce46225b40f3ef86", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public WeightedGraph tspTour() throws Exception", "signatureAfterChange": "     public WeightedGraph tspTour(  ) throws Exception", "diff": ["-    public WeightedGraph tspTour() throws Exception {", "+     */", "+    public WeightedGraph tspTour(  ) throws Exception {", "+        WeightedGraph tour      = new SimpleWeightedGraph(  );", "+        Set           used      = new HashSet(  );", "+        Object        posVertex = _wgraph.vertexSet(  ).iterator(  ).next(  );", "+        used.add( posVertex );", "-        WeightedGraph tour = new SimpleWeightedGraph();", "-        Set used = new HashSet();", "-        Object posVertex = _wgraph.vertexSet().iterator().next();", "-        used.add(posVertex);", "+        while( used.size(  ) < _wgraph.vertexSet(  ).size(  ) ) {", "+            double min  = Double.POSITIVE_INFINITY;", "+            Edge   next = null;", "-        while (used.size() < _wgraph.vertexSet().size()) {", "-            double min = Double.POSITIVE_INFINITY;", "-            Edge next = null;", "-            for (Iterator it = _wgraph.edgesOf(posVertex).iterator(); it.hasNext();) {", "-                Edge edge = (Edge)it.next();", "-                if (!used.contains(edge.oppositeVertex(posVertex)) &&", "-                    edge.getWeight() < min) {", "-                    min = edge.getWeight();", "-                    next = edge;", "+            for( Iterator it = _wgraph.edgesOf( posVertex ).iterator(  );", "+                    it.hasNext(  ); ) {", "+                Edge edge = (Edge) it.next(  );", "+", "+                if( !used.contains( edge.oppositeVertex( posVertex ) )", "+                        && edge.getWeight(  ) < min ) {", "+                    min      = edge.getWeight(  );", "+                    next     = edge;", "-            if (next == null) throw new Exception(\"NoTSPTour\");", "-            posVertex = next.oppositeVertex(posVertex);", "-            used.add(posVertex);", "-            tour.addEdge(next);", "+", "+            if( next == null ) {", "+                throw new Exception( \"NoTSPTour\" );", "+            }", "+", "+            posVertex = next.oppositeVertex( posVertex );", "+            used.add( posVertex );", "+            tour.addEdge( next );", "+"]}]}
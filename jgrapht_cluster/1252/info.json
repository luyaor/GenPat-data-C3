{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a526e6f78d43cd68ee85b486cf71a11", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66ed31445b07f4b7b597fa7a3b33b541", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/AbstractPathElementList.java", "commitBeforeChange": "94e0b9cdbd464a6b60ddbb8cd6d473a32e102eaf", "commitAfterChange": "90d794caa7b37ed092890eb859473902af3157bc", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected AbstractPathElementList(         Graph<V, E> graph,         int maxSize,         T pathElement)", "signatureAfterChange": "     protected AbstractPathElementList(         Graph<V, E> graph,         int maxSize,         T pathElement)", "diff": ["-     */", "-    protected AbstractPathElementList(", "-        Graph<V, E> graph,", "-        int maxSize,", "-        T pathElement)", "-    {", "-        if (maxSize <= 0) {", "-            throw new IllegalArgumentException(\"maxSize is negative or 0\");", "-        }", "-        if (pathElement == null) {", "-            throw new NullPointerException(\"pathElement is null\");", "-        }", "-", "-        this.graph = graph;", "-        this.maxSize = maxSize;", "-        this.vertex = pathElement.getVertex();", "-", "-        this.pathElements.add(pathElement);", "-    }", "+    protected AbstractPathElementList(", "+        Graph<V, E> graph,", "+        int maxSize,", "+        T pathElement)", "+        if (maxSize <= 0) {", "+            throw new IllegalArgumentException(\"maxSize is negative or 0\");", "+        }", "+        if (pathElement == null) {", "+            throw new NullPointerException(\"pathElement is null\");", "+        }", "+        if (pathElement.getPrevEdge() != null) {", "+            throw new IllegalArgumentException(\"path must be empty\");", "+        }", "+", "+        this.graph = graph;", "+        this.maxSize = maxSize;", "+        this.vertex = pathElement.getVertex();", "+", "+        this.pathElements.add(pathElement);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc72ed8862838a0d63c5d2e1a83082a3", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/KuhnMunkresMinimalWeightBipartitePerfectMatching.java", "commitBeforeChange": "2368f894a5f86458e6220ed61039dad10454d9ab", "commitAfterChange": "8bbdd0b15ef2a408186085d20f1a6fb81ea81686", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public KuhnMunkresMinimalWeightBipartitePerfectMatching(         final WeightedGraph<V, E> G,         List<? extends V> S,         List<? extends V> T)", "signatureAfterChange": "     public KuhnMunkresMinimalWeightBipartitePerfectMatching(         final WeightedGraph<V, E> G,         List<? extends V> S,         List<? extends V> T)", "diff": ["-        List<? extends V> T) {", "-", "+        List<? extends V> T)", "+    {", "-        if (S.size() != T.size())", "-          throw new IllegalArgumentException(\"Graph supplied isn't complete bipartite with equally sized partitions!\");", "+        if (S.size() != T.size()) {", "+            throw new IllegalArgumentException(", "+                \"Graph supplied isn't complete bipartite with equally sized partitions!\");", "+        }", "-        int partition   = S.size(),", "-            edges       = G.edgeSet().size();", "+        int partition = S.size(), edges = G.edgeSet().size();", "-        if (edges != partition * partition)", "-          throw new IllegalArgumentException(\"Graph supplied isn't complete bipartite with equally sized partitions!\");", "+        if (edges != (partition * partition)) {", "+            throw new IllegalArgumentException(", "+                \"Graph supplied isn't complete bipartite with equally sized partitions!\");", "+        }", "-        graph           = G;", "-        firstPartition  = S;", "+        graph = G;", "+        firstPartition = S;", "-        matching = new KuhnMunkresMatrixImplementation<V, E>(G, S, T).buildMatching();", "-", "+        matching =", "+            new KuhnMunkresMatrixImplementation<V, E>(G, S, T).buildMatching();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d7d29087f1bd22a55e24b179de8cb7fa", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bf913dbd2c2452b5d55df108cfaa9eb", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/ext/JGraphModelAdapter.java", "commitBeforeChange": "56c09b98e6df528eeef0b8df9f8d932a1ba40192", "commitAfterChange": "75098fa5c7281c0f169434b46722c0b4e66b3a8c", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 28, "signatureBeforeChange": "         public void graphChanged( GraphModelEvent e )", "signatureAfterChange": "         public void graphChanged( GraphModelEvent e )", "diff": ["-            GraphModelChange change    = e.getChange(  );", "-            Set              jEdges    = new HashSet(  );", "-            Set              jVertices = new HashSet(  );", "+            GraphModelChange change = e.getChange(  );", "+            ", "+            Object[] removedCells = change.getRemoved(  );", "-            Object[]         arrayToProcess = change.getRemoved(  );", "-", "-            if( arrayToProcess != null ) {", "-                filterEdgesAndVertices( arrayToProcess, jEdges, jVertices );", "-", "-                for( Iterator i = jEdges.iterator(  ); i.hasNext(  ); ) {", "-                    org.jgraph.graph.Edge jEdge =", "-                        (org.jgraph.graph.Edge) i.next(  );", "-", "-                    if( !m_jEdgesBeingRemoved.remove( jEdge ) ) {", "-                        removeJGraphEdge( jEdge );", "-                    }", "-                }", "-", "-                for( Iterator i = jVertices.iterator(  ); i.hasNext(  ); ) {", "-                    GraphCell jVertex = (GraphCell) i.next(  );", "-", "-                    if( !m_jVerticesBeingRemoved.remove( jVertex ) ) {", "-                        removeJGraphVertex( jVertex );", "-                    }", "-                }", "-", "-                jEdges.clear(  );", "-                jVertices.clear(  );", "+            if( removedCells != null ) {", "+                handleRemovedEdges( filterEdges( removedCells ) );", "+                handleRemovedVertices( filterVertices( removedCells ) );", "-            arrayToProcess = change.getInserted(  );", "+            Object[] insertedCells = change.getInserted(  );", "-            if( arrayToProcess != null ) {", "-                filterEdgesAndVertices( arrayToProcess, jEdges, jVertices );", "+            if( insertedCells != null ) {", "+                handleInsertedVertices( filterVertices( insertedCells ) );", "+                handleInsertedEdges( filterEdges( insertedCells ) );", "+            }", "+            ", "+            // Now handle edges that became 'dangling' or became connected.  ", "+            Object[] changedCells = change.getChanged(  );", "+            ", "+            if( changedCells != null ) {", "+                handleChangedEdges( filterEdges( changedCells ) );", "+            }", "+        }", "-                for( Iterator i = jVertices.iterator(  ); i.hasNext(  ); ) {", "-                    GraphCell jVertex = (GraphCell) i.next(  );", "-                    if( !m_jVerticesBeingAdded.remove( jVertex ) ) {", "-                        addJGraphVertex( jVertex );", "-                    }", "-                }", "-                for( Iterator i = jEdges.iterator(  ); i.hasNext(  ); ) {", "-                    org.jgraph.graph.Edge jEdge =", "-                        (org.jgraph.graph.Edge) i.next(  );", "-", "-                    if( !m_jEdgesBeingAdded.remove( jEdge ) ) {", "-                        addJGraphEdge( jEdge );", "-                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e516ef6944c87ade116b502739afc55", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/StoerWagnerMinimumCut.java", "commitBeforeChange": "a8056d6aafd19ddde3f88a7357d27b280fbbac76", "commitAfterChange": "8786155732723df083d81ecffc66379e7847e52a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected void minimumCutPhase(Set<V> a)", "signatureAfterChange": "     protected void minimumCutPhase(Set<V> a)", "diff": ["-        //construct sorted queue with vertices connected to vertex a", "+        // The last and before last vertices added to A.", "+        Set<V> last = a, beforelast = null;", "+        // queue contains vertices not in A ordered by max weight of edges to A.", "-            new PriorityQueue<VertexAndWeight>();", "+                new PriorityQueue<VertexAndWeight>();", "+        // Maps vertices to elements of queue", "-            new HashMap<Set<V>, VertexAndWeight>();", "+                new HashMap<Set<V>, VertexAndWeight>();", "+        ", "+        // Initialize queue", "-            if (v != a) {", "-                Double w =", "-                    -workingGraph.getEdgeWeight(workingGraph.getEdge(v, a));", "-                VertexAndWeight vandw = new VertexAndWeight(v, w);", "-                queue.add(vandw);", "-                dmap.put(v, vandw);", "-            }", "+            if (v == a)", "+                continue;", "+            DefaultWeightedEdge e = workingGraph.getEdge(v, a);", "+            Double w = e == null ? 0.0 : workingGraph.getEdgeWeight(e);", "+            VertexAndWeight vandw = new VertexAndWeight(v, w, e != null);", "+            queue.add(vandw);", "+            dmap.put(v, vandw);", "-        //now iteratatively update the queue to get the required vertex ordering", "-        List<Set<V>> list =", "-            new ArrayList<Set<V>>(workingGraph.vertexSet().size());", "-        list.add(a);", "+", "+        // Now iteratively update the queue to get the required vertex ordering", "+", "+            //System.out.println(\"Q:\"+ queue);", "-            list.add(v);", "+            //System.out.println(\"q:\"+ v);", "+", "+            beforelast = last;", "+            last = v;", "+", "-                Set<V> vc;", "-                if (v != workingGraph.getEdgeSource(e)) {", "-                    vc = workingGraph.getEdgeSource(e);", "-                } else {", "-                    vc = workingGraph.getEdgeTarget(e);", "-                }", "-                if (dmap.get(vc) != null) {", "-                    Double neww =", "-                        -workingGraph.getEdgeWeight(workingGraph.getEdge(v, vc))", "-                        + dmap.get(vc).weight;", "-                    queue.remove(dmap.get(vc)); //this is O(logn) but could be", "-                                                //O(1)?", "-                    dmap.get(vc).weight = neww;", "-                    queue.add(dmap.get(vc)); //this is O(logn) but could be", "-                                             //O(1)?", "+                Set<V> vc = Graphs.getOppositeVertex(workingGraph, e, v);", "+                VertexAndWeight vcandw = dmap.get(vc);", "+                if (vcandw != null) {", "+                    queue.remove(vcandw); //this is O(logn) but could be O(1)?", "+                    vcandw.active = true;", "+                    vcandw.weight += workingGraph.getEdgeWeight(e);", "+                    queue.add(vcandw); //this is O(logn) but could be O(1)?", "-        //if this is the first run we compute the weight of last vertex in the", "-        //list", "-        if (firstRun) {", "-            Set<V> v = list.get(list.size() - 1);", "-            double w = vertexWeight(v);", "-            if (w < bestcutweight) {", "-                bestcutweight = w;", "-                bestCut = v;", "-            }", "-            firstRun = false;", "+        // Update the best cut", "+        double w = vertexWeight(last);", "+        if (w < bestCutWeight) {", "+            bestCutWeight = w;", "+            bestCut = last;", "-        //the last two elements in list are the vertices we want to merge.", "-        Set<V> s = list.get(list.size() - 2);", "-        Set<V> t = list.get(list.size() - 1);", "+        //merge the last added vertices", "+        mergeVertices(beforelast, last);", "-        //merge these vertices and get the weight.", "-        VertexAndWeight vw = mergeVertices(s, t);", "-", "-        //If this is the best cut so far store it.", "-        if (vw.weight < bestcutweight) {", "-            bestcutweight = vw.weight;", "-            bestCut = vw.vertex;", "-        }", "+        //System.out.println(\"C:\"+ bestCut +\" \"+ bestCutWeight);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92c96b3765c6cb47cf1acf63252bdca8", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/graph/AsWeightedGraphTest.java", "commitBeforeChange": "5fd52feef7dfccbb0b591fde0bda240336fc10d1", "commitAfterChange": "c47aefcfe74648da036d5e9f46b58264738e055c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void test1()", "signatureAfterChange": "      public void testWeightedGraph(Graph<String, DefaultWeightedEdge> graph)", "diff": ["-    public void test1()", "-    {", "-        Map<DefaultEdge, Double> weightMap1 =", "-            new HashMap<DefaultEdge, Double>();", "-        Map<DefaultWeightedEdge, Double> weightMap2 =", "-            new HashMap<DefaultWeightedEdge, Double>();", "-        DefaultEdge e1 = unweightedGraph.getEdge(\"v1\", \"v2\");", "-        DefaultEdge e2 = unweightedGraph.getEdge(\"v2\", \"v3\");", "-        DefaultEdge e3 = unweightedGraph.getEdge(\"v3\", \"v1\");", "-        DefaultWeightedEdge e4 = weightedGraph.getEdge(\"v1\", \"v2\");", "-        DefaultWeightedEdge e5 = weightedGraph.getEdge(\"v2\", \"v3\");", "-        DefaultWeightedEdge e6 = weightedGraph.getEdge(\"v3\", \"v1\");", "-        weightMap1.put(e1, 9.0);", "-        weightMap2.put(e4, 9.0);", "-        weightMap2.put(e6, 8.0);", "-        assertEquals(", "-            unweightedGraph.getEdgeWeight(e1),", "-            WeightedGraph.DEFAULT_EDGE_WEIGHT);", "-        WeightedGraph<String, DefaultEdge> g1 =", "-            new AsWeightedGraph<String, DefaultEdge>(", "-                unweightedGraph,", "-                weightMap1);", "-        WeightedGraph<String, DefaultWeightedEdge> g2 =", "-            new AsWeightedGraph<String, DefaultWeightedEdge>(", "-                weightedGraph,", "-                weightMap2);", "-        assertEquals(g1.getEdgeWeight(e1), 9.0);", "-        assertEquals(g1.getEdgeWeight(e2), WeightedGraph.DEFAULT_EDGE_WEIGHT);", "-        assertEquals(g1.getEdgeWeight(e3), WeightedGraph.DEFAULT_EDGE_WEIGHT);", "-        assertEquals(g2.getEdgeWeight(e4), 9.0);", "-        assertEquals(g2.getEdgeWeight(e5), 2.0);", "-        assertEquals(g2.getEdgeWeight(e6), 8.0);", "-        g1.setEdgeWeight(e2, 5.0);", "-        g2.setEdgeWeight(e5, 5.0);", "-        assertEquals(g1.getEdgeWeight(e2), 5.0);", "-        assertEquals(", "-            unweightedGraph.getEdgeWeight(e2),", "-            WeightedGraph.DEFAULT_EDGE_WEIGHT);", "-        assertEquals(g2.getEdgeWeight(e5), 5.0);", "-        assertEquals(weightedGraph.getEdgeWeight(e5), 5.0);", "+", "+    public void testWeightedGraph(Graph<String, DefaultWeightedEdge> graph){", "+        DefaultWeightedEdge e1 = graph.getEdge(\"v1\", \"v2\");", "+        DefaultWeightedEdge e2 = graph.getEdge(\"v2\", \"v3\");", "+        DefaultWeightedEdge e3 = graph.getEdge(\"v3\", \"v1\");", "+", "+        Map<DefaultWeightedEdge, Double> weightMap = new HashMap<DefaultWeightedEdge, Double>();", "+        weightMap.put(e1, 9.0);", "+        weightMap.put(e3, 8.0);", "+", "+        WeightedGraph<String, DefaultWeightedEdge> graphView;", "+        if(graph instanceof DirectedGraph)", "+            graphView= new AsWeightedDirectedGraph<String, DefaultWeightedEdge>((DirectedGraph<String, DefaultWeightedEdge>)graph, weightMap);", "+        else", "+            graphView=new AsWeightedGraph<String, DefaultWeightedEdge>(graph,weightMap);", "+", "+        assertEquals(graphView.getEdgeWeight(e1), 9.0);", "+        assertEquals(graphView.getEdgeWeight(e2), 2.0);", "+        assertEquals(graphView.getEdgeWeight(e3), 8.0);", "+", "+        graphView.setEdgeWeight(e2, 5.0);", "+        assertEquals(graphView.getEdgeWeight(e2), 5.0);", "+        assertEquals(graph.getEdgeWeight(e2), 5.0);", "-            double d = weightedGraph.getEdgeWeight(null);", "+            double d = graphView.getEdgeWeight(null);"]}]}
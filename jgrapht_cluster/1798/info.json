{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0cb4d02006dbab183e070ed7648e42cc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f3f252eaa26e44f21c93817bb6fe26e", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/ext/JGraphModelAdapter.java", "commitBeforeChange": "215e752a693cedd4e948342c99e93722b6fbe26a", "commitAfterChange": "56c09b98e6df528eeef0b8df9f8d932a1ba40192", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 25, "signatureBeforeChange": "         private void filterEdgesAndVertices( Object[] allCells, Set jEdges,             Set jVertices )", "signatureAfterChange": "         private void filterEdgesAndVertices( Object[] allCells, Set jEdges,             Set jVertices )", "diff": ["-                else if( !( current instanceof Port ) ) {", "-                    if( current instanceof DefaultGraphCell ) {", "-                        DefaultGraphCell graphCell = (DefaultGraphCell) current;", "+                else if( current instanceof Port ) {", "+                    // ignore it -- we don't care about ports.", "+                }", "+                else if( current instanceof DefaultGraphCell ) {", "+                    DefaultGraphCell graphCell = (DefaultGraphCell) current;", "-                        if( graphCell.isLeaf(  ) // Note: do not change the order", "-                                || ", "-                            // of these conditions; the code uses the short-cutting of ||.", "-                            ( graphCell.getFirstChild(  ) instanceof Port ) ) {", "-                            jVertices.add( current );", "-                        }", "-", "-                        // If a DefaultGraphCell has a Port as a child, it is a", "-                    }", "-                    else if( current instanceof GraphCell ) {", "-                        // If it is not a DefaultGraphCell, it doesn't have", "-                        // children.", "+                    if( graphCell.isLeaf(  ) // Note: do not change the order", "+                            || ", "+                        // of these conditions; the code uses the short-cutting of ||.", "+                        ( graphCell.getFirstChild(  ) instanceof Port ) ) {", "-                    // Otherwise, this is neither an Edge nor a GraphCell; then we", "-                    // don't know what to do with it. So ignore.", "+                    // If a DefaultGraphCell has a Port as a child, it is a", "+                }", "+                else if( current instanceof GraphCell ) {", "+                    // If it is not a DefaultGraphCell, it doesn't have", "+                    // children.", "+                    jVertices.add( current );", "+                }", "+                else {", "+                    // Otherwise, this is neither an Edge nor a GraphCell; ", "+                    // we don't have any use for it -- ignore."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "107f4af5594c50ebe231de21379615a5", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/experimental/alg/color/GreedyColoring.java", "commitBeforeChange": "e601cce570393b1ad5c879b58ec483ca42a9532b", "commitAfterChange": "df9e52ba034eea98b94d0b6e1470ce50769bc1ce", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      int[] largestSaturationFirstOrder()", "signatureAfterChange": "      int [] largestSaturationFirstOrder()", "diff": ["-    int[] largestSaturationFirstOrder() {", "-        final int[] order = new int[_neighbors.length]; // could be removed since buckets contains order reversed", "-        final int[] satur = new int[_neighbors.length];", "-        final int[] buckets = new int[_neighbors.length];", "-        final int[] cumBucketSize = new int[_neighbors.length];", "-        final int[] bucketIndex = new int[_neighbors.length];", "+    int [] largestSaturationFirstOrder()", "+    {", "+        final int [] order = new int[_neighbors.length]; // could be removed", "+                                                         // since buckets", "+                                                         // contains order", "+                                                         // reversed", "+        final int [] satur = new int[_neighbors.length];", "+        final int [] buckets = new int[_neighbors.length];", "+        final int [] cumBucketSize = new int[_neighbors.length];", "+        final int [] bucketIndex = new int[_neighbors.length];", "-            while (maxSat > 0 && cumBucketSize[maxSat] == cumBucketSize[maxSat-1]) {", "+            while (", "+                (maxSat > 0)", "+                && (cumBucketSize[maxSat] == cumBucketSize[maxSat - 1]))", "+            {", "-                final int nb = (int)_neighbors[v][j];", "+                final int nb = (int) _neighbors[v][j];", "-                    if (bi != cumBucketSize[satur[nb]]-1) {", "-                        buckets[bi] = buckets[cumBucketSize[satur[nb]]-1];", "-                        buckets[cumBucketSize[satur[nb]]-1] = nb;", "-                        bucketIndex[nb] = cumBucketSize[satur[nb]]-1;", "+                    if (bi != (cumBucketSize[satur[nb]] - 1)) {", "+                        buckets[bi] = buckets[cumBucketSize[satur[nb]] - 1];", "+                        buckets[cumBucketSize[satur[nb]] - 1] = nb;", "+                        bucketIndex[nb] = cumBucketSize[satur[nb]] - 1;", "-                    if (cumBucketSize[satur[nb]] == 0) cumBucketSize[satur[nb]] = cumBucketSize[satur[nb]-1]+1;", "-                    if (satur[nb] > maxSat) maxSat = satur[nb];", "+                    if (cumBucketSize[satur[nb]] == 0) {", "+                        cumBucketSize[satur[nb]] =", "+                            cumBucketSize[satur[nb] - 1] + 1;", "+                    }", "+                    if (satur[nb] > maxSat) {", "+                        maxSat = satur[nb];", "+                    }"]}]}
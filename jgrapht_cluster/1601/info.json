{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b29649f1b46d68af355c0c67ad147587", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65d9f9c0d9cac1373532e747244f375f", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/NeighborIndex.java", "commitBeforeChange": "9aa77050b482cd35622f2b052f283cbdea563cf6", "commitAfterChange": "71029068583c81632b4d5180b7465932b933e753", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void edgeAdded(GraphEdgeChangeEvent<V, E> e)", "signatureAfterChange": "     public void edgeAdded(GraphEdgeChangeEvent<V, E> e)", "diff": ["-        getNeighbors(source).addNeighbor(target);", "-        getNeighbors(target).addNeighbor(source);", "+        ", "+        // if a map does not already contain an entry,", "+        // then skip addNeighbor, since instantiating the map", "+        // will take care of processing the edge (which has already", "+        // been added)", "+        ", "+        if (neighborMap.containsKey(source)) {", "+            getNeighbors(source).addNeighbor(target);", "+        } else {", "+            getNeighbors(source);", "+        }", "+        if (neighborMap.containsKey(target)) {", "+            getNeighbors(target).addNeighbor(source);", "+        } else {", "+            getNeighbors(target);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0a3516c94fbab8e1b289c1b2ec77ad3", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/DirectedNeighborIndex.java", "commitBeforeChange": "9aa77050b482cd35622f2b052f283cbdea563cf6", "commitAfterChange": "71029068583c81632b4d5180b7465932b933e753", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void edgeAdded(GraphEdgeChangeEvent<V, E> e)", "signatureAfterChange": "     public void edgeAdded(GraphEdgeChangeEvent<V, E> e)", "diff": ["-        getSuccessors(source).addNeighbor(target);", "-        getPredecessors(target).addNeighbor(source);", "+", "+        // if a map does not already contain an entry,", "+        // then skip addNeighbor, since instantiating the map", "+        // will take care of processing the edge (which has already", "+        // been added)", "+        ", "+        if (successorMap.containsKey(source)) {", "+            getSuccessors(source).addNeighbor(target);", "+        } else {", "+            getSuccessors(source);", "+        }", "+        if (predecessorMap.containsKey(target)) {", "+            getPredecessors(target).addNeighbor(source);", "+        } else {", "+            getPredecessors(target);", "+        }"]}]}
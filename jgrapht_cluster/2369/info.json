{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5fca1e3d8406760bb03cd74e59e59577", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00bfab6764ef8d87e1de23ce807fddb3", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/VertexCoversTest.java", "commitBeforeChange": "16285fc735125684f525244baa1af05c7e3b89ee", "commitAfterChange": "ff54bec324648e52ae4dae6f81ce89c54758dce1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testFindGreedyCover()", "signatureAfterChange": "     public void testFindGreedyCover()", "diff": ["-            Graph g = createRandomGraph();", "-            Set c =", "+            Graph<Integer,DefaultEdge> g = createRandomGraph();", "+            Set<Integer> c ="]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4740752f4a7c02ad97ce5e130b1198a2", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/traverse/TopologicalOrderIterator.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public TopologicalOrderIterator(DirectedGraph<V, E> dg)", "signatureAfterChange": "     public TopologicalOrderIterator(DirectedGraph<V, E> dg)", "diff": ["-        this(dg, new LinkedList(), new HashMap());", "+        this(dg, new LinkedList<V>(), new HashMap<V, ModifiableInteger>());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ff9a499d045961d7c34ce4ee6174449", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/CycleDetector.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public Set findCyclesContainingVertex(V v)", "signatureAfterChange": "     public Set<V> findCyclesContainingVertex(V v)", "diff": ["-    public Set findCyclesContainingVertex(V v)", "+    public Set<V> findCyclesContainingVertex(V v)", "-        Set set = new HashSet();", "+        Set<V> set = new HashSet<V>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "878c05222d97358313bfb26e279b03b5", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/GraphOrdering.java", "commitBeforeChange": "ae864cab55715cbe3ee2fa1a05734b4fcd4f3411", "commitAfterChange": "aa92fe16c7852c9f9d1bf3a60c5718fcffd0ae0a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic int[] getOutEdges(int vertexOrder)", "signatureAfterChange": " \t \tpublic int[] getOutEdges(int vertexOrder)", "diff": ["-\t\tSet<E> edgeSet = new HashSet();", "+\t\tSet<E> edgeSet = new HashSet<E>();", "-\t\t\tedgeSet = ((DirectedGraph) graph).outgoingEdgesOf(v);", "+\t\t\tedgeSet = ((DirectedGraph<V,E>) graph).outgoingEdgesOf(v);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a51ab1fae389f33888036a0296da7b9", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/util/equivalence/EquivalenceComparatorChainBase.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public EquivalenceComparatorChainBase(         EquivalenceComparator firstComaparator)", "signatureAfterChange": "     public EquivalenceComparatorChainBase(         EquivalenceComparator<E,C> firstComaparator)", "diff": ["-        EquivalenceComparator firstComaparator)", "+        EquivalenceComparator<E,C> firstComaparator)", "-        this.chain = new LinkedList();", "+        this.chain = new LinkedList<EquivalenceComparator<? super E, ? super C>>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d5df312eefed9d273073fe759151899", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/Subgraph.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public Subgraph( Graph base, Set vertexSubset )", "signatureAfterChange": "     public Subgraph( Graph<V, E> base, Set<V> vertexSubset )", "diff": ["-    public Subgraph( Graph base, Set vertexSubset ) {", "+    public Subgraph( Graph<V, E> base, Set<V> vertexSubset ) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae2e25b655104075f8384a59c9a3056c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/DefaultListenableGraph.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public DefaultListenableGraph(Graph<V, E> g, boolean reuseEvents)", "signatureAfterChange": "     public DefaultListenableGraph(Graph<V, E> g, boolean reuseEvents)", "diff": ["-        m_reuseableEdgeEvent = new FlyweightEdgeEvent(this, -1, null);", "-        m_reuseableVertexEvent = new FlyweightVertexEvent(this, -1, null);", "+        m_reuseableEdgeEvent = new FlyweightEdgeEvent<V,E>(this, -1, null);", "+        m_reuseableVertexEvent = new FlyweightVertexEvent<V>(this, -1, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be6ce87af24be8958b15a7da6966ac02", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/GraphOrdering.java", "commitBeforeChange": "ae864cab55715cbe3ee2fa1a05734b4fcd4f3411", "commitAfterChange": "aa92fe16c7852c9f9d1bf3a60c5718fcffd0ae0a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic int[] getInEdges(int vertexOrder)", "signatureAfterChange": " \t \tpublic int[] getInEdges(int vertexOrder)", "diff": ["-\t\tSet<E> edgeSet = new HashSet();", "+\t\tSet<E> edgeSet = new HashSet<E>();", "-\t\t\tedgeSet = ((DirectedGraph) graph).incomingEdgesOf(v);", "+\t\t\tedgeSet = ((DirectedGraph<V,E>) graph).incomingEdgesOf(v);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfc31d741e7516371b9562e38aa7c3da", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/graph/DefaultDirectedGraphTest.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void testGetAllEdges()", "signatureAfterChange": "     public void testGetAllEdges()", "diff": ["-        DirectedGraph g = createMultiTriangleWithMultiLoop();", "+        DirectedGraph<String, DirEdge<String>> g = createMultiTriangleWithMultiLoop();", "-        List loops = g.getAllEdges(m_v1, m_v1);", "+        List<DirEdge<String>> loops = g.getAllEdges(m_v1, m_v1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4cb511e7965c72b80cde0ed68f6f579", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/traverse/TopologicalOrderIterator.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private TopologicalOrderIterator( DirectedGraph dg, LinkedList queue,         Map inDegreeMap )", "signatureAfterChange": "     private TopologicalOrderIterator( DirectedGraph<V, E> dg, LinkedList<V> queue,         Map inDegreeMap )", "diff": ["-    private TopologicalOrderIterator( DirectedGraph dg, LinkedList queue,", "+    private TopologicalOrderIterator( DirectedGraph<V, E> dg, LinkedList<V> queue,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ece48518e5ed1f063ec7098dad6286ff", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/ext/JGraphModelAdapter.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "         private List filterEdges(Object [] cells)", "signatureAfterChange": "         private List<Object> filterEdges(Object [] cells)", "diff": ["-        private List filterEdges(Object [] cells)", "+        private List<Object> filterEdges(Object [] cells)", "-            List jEdges = new ArrayList();", "+            List<Object> jEdges = new ArrayList<Object>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f321dbc6054f3c12dfed9e1e716cf1b7", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/ext/JGraphModelAdapter.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "         private List filterVertices(Object [] cells)", "signatureAfterChange": "         private List<Object> filterVertices(Object [] cells)", "diff": ["-        private List filterVertices(Object [] cells)", "+        private List<Object> filterVertices(Object [] cells)", "-            List jVertices = new ArrayList();", "+            List<Object> jVertices = new ArrayList<Object>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff33c0cf163ac29b3a20993d595cf1c9", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/graph/DefaultDirectedGraphTest.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void testVertexOrderDeterminism()", "signatureAfterChange": "     public void testVertexOrderDeterminism()", "diff": ["-        DirectedGraph g = createMultiTriangleWithMultiLoop();", "-        Iterator iter = g.vertexSet().iterator();", "+        DirectedGraph<String, DirEdge<String>> g = createMultiTriangleWithMultiLoop();", "+        Iterator<String> iter = g.vertexSet().iterator();"]}]}
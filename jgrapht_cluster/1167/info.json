{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "38356038f457b70a18801ddd1fc6ee14", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04387b5192ebde21e2436dca82900f54", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/graph/DefaultDirectedGraphTest.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testEdgeOrderDeterminism()", "signatureAfterChange": "     public void testEdgeOrderDeterminism()", "diff": ["-        g.addVertex(m_v1);", "-        g.addVertex(m_v2);", "-        g.addVertex(m_v3);", "+        g.addVertex(v1);", "+        g.addVertex(v2);", "+        g.addVertex(v3);", "-        DefaultEdge e1 = g.addEdge(m_v1, m_v2);", "-        DefaultEdge e2 = g.addEdge(m_v2, m_v3);", "-        DefaultEdge e3 = g.addEdge(m_v3, m_v1);", "+        DefaultEdge e1 = g.addEdge(v1, v2);", "+        DefaultEdge e2 = g.addEdge(v2, v3);", "+        DefaultEdge e3 = g.addEdge(v3, v1);", "-        assertTrue(Graphs.testIncidence(g, e1, m_v1));", "-        assertTrue(Graphs.testIncidence(g, e1, m_v2));", "-        assertFalse(Graphs.testIncidence(g, e1, m_v3));", "-        assertEquals(m_v2, Graphs.getOppositeVertex(g, e1, m_v1));", "-        assertEquals(m_v1, Graphs.getOppositeVertex(g, e1, m_v2));", "+        assertTrue(Graphs.testIncidence(g, e1, v1));", "+        assertTrue(Graphs.testIncidence(g, e1, v2));", "+        assertFalse(Graphs.testIncidence(g, e1, v3));", "+        assertEquals(v2, Graphs.getOppositeVertex(g, e1, v1));", "+        assertEquals(v1, Graphs.getOppositeVertex(g, e1, v2));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c403bc829691e2f6cf772247cc3d1bc6", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/graph/SerializationTest.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     @SuppressWarnings(\"unchecked\")     public void testDirectedMultigraph()         throws Exception", "signatureAfterChange": "     @SuppressWarnings(\"unchecked\")     public void testDirectedMultigraph()         throws Exception", "diff": ["-        graph.addVertex(m_v1);", "-        graph.addVertex(m_v2);", "-        graph.addVertex(m_v3);", "-        graph.addEdge(m_v1, m_v2);", "-        graph.addEdge(m_v2, m_v3);", "-        graph.addEdge(m_v2, m_v3);", "+        graph.addVertex(v1);", "+        graph.addVertex(v2);", "+        graph.addVertex(v3);", "+        graph.addEdge(v1, v2);", "+        graph.addEdge(v2, v3);", "+        graph.addEdge(v2, v3);", "-        assertTrue(graph.containsVertex(m_v1));", "-        assertTrue(graph.containsVertex(m_v2));", "-        assertTrue(graph.containsVertex(m_v3));", "-        assertTrue(graph.containsEdge(m_v1, m_v2));", "-        assertTrue(graph.containsEdge(m_v2, m_v3));", "-        assertEquals(1, graph.edgesOf(m_v1).size());", "-        assertEquals(3, graph.edgesOf(m_v2).size());", "-        assertEquals(2, graph.edgesOf(m_v3).size());", "+        assertTrue(graph.containsVertex(v1));", "+        assertTrue(graph.containsVertex(v2));", "+        assertTrue(graph.containsVertex(v3));", "+        assertTrue(graph.containsEdge(v1, v2));", "+        assertTrue(graph.containsEdge(v2, v3));", "+        assertEquals(1, graph.edgesOf(v1).size());", "+        assertEquals(3, graph.edgesOf(v2).size());", "+        assertEquals(2, graph.edgesOf(v3).size());"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "720bba0242a76e2a8691cbc2c97f07ea", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0defa9ea26d91d978ba98a8687bcd4cb", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/GraphOrdering.java", "commitBeforeChange": "7518fda5e34fbd0d30800f00a7bcae8e402c0396", "commitAfterChange": "b0ffaa521363d5faf1bf5b397f78265b9ab95ae6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic int[] getInEdges(int vertexOrder)", "signatureAfterChange": "     public int[] getInEdges(int vertexNumber)", "diff": ["-\t", "-\tpublic int[] getInEdges(int vertexOrder)\t{", "-\t\tif (incomingEdges[vertexOrder] != null)", "-\t\t\treturn incomingEdges[vertexOrder];", "-\t\t", "-\t\tV v            = getVertex(vertexOrder);", "-\t\tSet<E> edgeSet = null;", "-\t\t", "-\t\tif (graph instanceof DirectedGraph<?,?>)", "-\t\t\tedgeSet = ((DirectedGraph<V,E>) graph).incomingEdgesOf(v);", "-\t\telse", "-\t\t\tedgeSet = graph.edgesOf(v);", "-\t\t", "-\t\tint[] vertexArray = new int[edgeSet.size()];", "-\t\tint i = 0;", "-\t\t", "-\t\tfor(E edge : edgeSet)\t{", "-\t\t\tV source = graph.getEdgeSource(edge),", "-\t\t\t  target = graph.getEdgeTarget(edge);", "-\t\t\tvertexArray[i++] = mapVertexToOrder.get(", "-\t\t\t\t\tsource == v ? target : source);", "-\t\t}", "-\t\t", "-\t\treturn incomingEdges[vertexOrder] = vertexArray;", "-\t}", "+     */", "+    public int[] getInEdges(int vertexNumber) {", "+        if (incomingEdges[vertexNumber] != null)", "+            return incomingEdges[vertexNumber];", "+", "+        V v            = getVertex(vertexNumber);", "+        Set<E> edgeSet = null;", "+", "+        if (graph instanceof DirectedGraph<?, ?>)", "+            edgeSet = ((DirectedGraph<V, E>) graph).incomingEdgesOf(v);", "+        else", "+            edgeSet = graph.edgesOf(v);", "+", "+        int[] vertexArray = new int[edgeSet.size()];", "+        int i             = 0;", "+", "+        for (E edge : edgeSet) {", "+            V source = graph.getEdgeSource(edge),", "+              target = graph.getEdgeTarget(edge);", "+            vertexArray[i++] =", "+                mapVertexToOrder.get(source == v ? target : source);", "+        }", "+", "+        return incomingEdges[vertexNumber] = vertexArray;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7aad24209290a05b0ec4bcb00c55091c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/GraphOrdering.java", "commitBeforeChange": "7518fda5e34fbd0d30800f00a7bcae8e402c0396", "commitAfterChange": "b0ffaa521363d5faf1bf5b397f78265b9ab95ae6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic int[] getOutEdges(int vertexOrder)", "signatureAfterChange": "     public int[] getOutEdges(int vertexNumber)", "diff": ["-\t", "-\tpublic int[] getOutEdges(int vertexOrder)\t{", "-\t\tif (outgoingEdges[vertexOrder] != null)", "-\t\t\treturn outgoingEdges[vertexOrder];", "-\t\t", "-\t\tV v            = getVertex(vertexOrder);", "-\t\tSet<E> edgeSet = null;", "-\t\t", "-\t\tif (graph instanceof DirectedGraph<?,?>)", "-\t\t\tedgeSet = ((DirectedGraph<V,E>) graph).outgoingEdgesOf(v);", "-\t\telse", "-\t\t\tedgeSet = graph.edgesOf(v);", "-\t\t", "-\t\tint[] vertexArray = new int[edgeSet.size()];", "-\t\tint i = 0;", "-\t\t", "-\t\tfor(E edge : edgeSet)\t{", "-\t\t\tV source = graph.getEdgeSource(edge),", "-\t\t\t  target = graph.getEdgeTarget(edge);", "-\t\t\tvertexArray[i++] = mapVertexToOrder.get(", "-\t\t\t\t\tsource == v ? target : source);", "-\t\t}", "-\t\t", "-\t\treturn outgoingEdges[vertexOrder] = vertexArray;", "-\t}", "+     */", "+    public int[] getOutEdges(int vertexNumber) {", "+        if (outgoingEdges[vertexNumber] != null)", "+            return outgoingEdges[vertexNumber];", "+", "+        V v = getVertex(vertexNumber);", "+        Set<E> edgeSet = null;", "+", "+        if (graph instanceof DirectedGraph<?, ?>)", "+            edgeSet = ((DirectedGraph<V, E>) graph).outgoingEdgesOf(v);", "+        else", "+            edgeSet = graph.edgesOf(v);", "+", "+        int[] vertexArray = new int[edgeSet.size()];", "+        int i = 0;", "+", "+        for (E edge : edgeSet) {", "+            V source = graph.getEdgeSource(edge),", "+              target = graph.getEdgeTarget(edge);", "+            vertexArray[i++] =", "+                mapVertexToOrder.get(source == v ? target : source);", "+        }", "+", "+        return outgoingEdges[vertexNumber] = vertexArray;", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3bc1257e3c9376d5aa5485160f7a5624", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65ed010bb80983ae731ac9ad56a7ad94", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/EdmondsKarpMaximumFlowTest.java", "commitBeforeChange": "a35680f67c56e8fcc81e697983a084c86d356dae", "commitAfterChange": "b4e8f6742028ccb6628bd42dbfef197bf5f06148", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void testCornerCases()", "signatureAfterChange": "     public void testCornerCases()", "diff": ["-            solver.calculateMaximumFlow(0, 1);", "-            Map<DefaultWeightedEdge, Double> flow = solver.getMaximumFlow();", "+            Map<DefaultWeightedEdge, Double> flow = solver.buildMaximumFlow(0, 1).getFlow();", "-            solver.calculateMaximumFlow(2, 0);", "+            solver.buildMaximumFlow(2, 0);", "-            solver.calculateMaximumFlow(1, 2);", "+            solver.buildMaximumFlow(1, 2);", "-            solver.calculateMaximumFlow(0, 0);", "+            solver.buildMaximumFlow(0, 0);", "-            solver.calculateMaximumFlow(null, 0);", "+            solver.buildMaximumFlow(null, 0);", "-            solver.calculateMaximumFlow(0, null);", "+            solver.buildMaximumFlow(0, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab9d6ff4cdc8e71ed7d42b3b671f79a5", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/ShortestPathTestCase.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void testPathBetween()", "signatureAfterChange": "     public void testPathBetween()", "diff": ["-        assertEquals(Arrays.asList(new DefaultEdge [] { m_e12 }), path);", "+        assertEquals(Arrays.asList(new DefaultEdge [] { e12 }), path);", "-                    m_e12, m_e24", "+                    e12, e24", "-                    m_e12, m_e24, m_e45", "+                    e12, e24, e45", "-                    m_e13, m_e12, m_e24", "+                    e13, e12, e24"]}]}
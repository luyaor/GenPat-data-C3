{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ff7db6021899698e67adec2ce3ad15e7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "027d37b89416e67eb7cee412add786ed", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/util/FibonacciHeap.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void insert(FibonacciHeapNode<T> node, double key)", "signatureAfterChange": "     public void insert(FibonacciHeapNode<T> node, double key)", "diff": ["-        node.m_key = key;", "+        node.key = key;", "-        if (m_min != null) {", "-            node.m_left = m_min;", "-            node.m_right = m_min.m_right;", "-            m_min.m_right = node;", "-            node.m_right.m_left = node;", "+        if (minNode != null) {", "+            node.left = minNode;", "+            node.right = minNode.right;", "+            minNode.right = node;", "+            node.right.left = node;", "-            if (key < m_min.m_key) {", "-                m_min = node;", "+            if (key < minNode.key) {", "+                minNode = node;", "-            m_min = node;", "+            minNode = node;", "-        m_n++;", "+        nNodes++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79055b35d4564db555ab6066358d8fb5", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/util/FibonacciHeapNode.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public String toString()", "signatureAfterChange": "     public String toString()", "diff": ["-            return Double.toString(m_key);", "+            return Double.toString(key);", "-            if (m_parent != null) {", "-                buf.append(Double.toString(m_parent.m_key));", "+            if (parent != null) {", "+                buf.append(Double.toString(parent.key));", "-            buf.append(Double.toString(m_key));", "+            buf.append(Double.toString(key));", "-            buf.append(Integer.toString(m_degree));", "+            buf.append(Integer.toString(degree));", "-            if (m_right != null) {", "-                buf.append(Double.toString(m_right.m_key));", "+            if (right != null) {", "+                buf.append(Double.toString(right.key));", "-            if (m_left != null) {", "-                buf.append(Double.toString(m_left.m_key));", "+            if (left != null) {", "+                buf.append(Double.toString(left.key));", "-            if (m_child != null) {", "-                buf.append(Double.toString(m_child.m_key));", "+            if (child != null) {", "+                buf.append(Double.toString(child.key));"]}]}
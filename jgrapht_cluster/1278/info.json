{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "99b0af903f13425d476079f13c6448af", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54d0bdb8c052558bbf3bbc46f3b30e4a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/alg/CycleDetectorTest.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private void runTest(DirectedGraph g, Set cyclicSet, Set acyclicSet)", "signatureAfterChange": "      private void runTest( DirectedGraph<String,DirEdge<String>> g,                           Set<String> cyclicSet,                           Set<String> acyclicSet )", "diff": ["-    private void runTest(DirectedGraph g, Set cyclicSet, Set acyclicSet)", "+    private void runTest( DirectedGraph<String,DirEdge<String>> g,", "+                          Set<String> cyclicSet,", "+                          Set<String> acyclicSet )", "-        CycleDetector detector = new CycleDetector(g);", "+        CycleDetector<String,DirEdge<String>> detector =", "+            new CycleDetector<String,DirEdge<String>>(g);", "-        Iterator iter = cyclicSet.iterator();", "-", "-        while (iter.hasNext()) {", "-            Object v = iter.next();", "+        for ( String v : cyclicSet ) {", "-        iter = acyclicSet.iterator();", "-", "-        while (iter.hasNext()) {", "-            Object v = iter.next();", "+        for ( String v : acyclicSet ) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d9fa6ae339c0fb7cb84e96dce083831", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/PermutationIsomorphismInspector.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected boolean areVertexSetsOfTheSameEqualityGroup(         Set vertexSet1,         Set vertexSet2)", "signatureAfterChange": "     protected boolean areVertexSetsOfTheSameEqualityGroup(         Set<V> vertexSet1,         Set<V> vertexSet2)", "diff": ["-        Set vertexSet1,", "-        Set vertexSet2)", "+        Set<V> vertexSet1,", "+        Set<V> vertexSet2)", "-        Iterator iter2 = vertexSet2.iterator();", "+        Iterator<V> iter2 = vertexSet2.iterator();", "-        for (Iterator iter1 = vertexSet1.iterator(); iter1.hasNext();) {", "-            Object vertex1 = (Object) iter1.next();", "-            Object vertex2 = (Object) iter2.next();", "+        for (Iterator<V> iter1 = vertexSet1.iterator(); iter1.hasNext();) {", "+            V vertex1 = iter1.next();", "+            V vertex2 = iter2.next();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d39bb67bbb202c78746d50607e8d61c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f4a5d0ad8f076ae7e3e7e9aa99c0d8b", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/GraphHelper.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public static <V, E extends Edge<V>> List<V> predecessorListOf(DirectedGraph<V, E> g,         V vertex)", "signatureAfterChange": "     public static <V, E extends DirEdge<V>> List<V> predecessorListOf(DirectedGraph<V, E> g,         V vertex)", "diff": ["-    public static <V, E extends Edge<V>> List<V> predecessorListOf(DirectedGraph<V, E> g,", "+    public static <V, E extends DirEdge<V>> List<V> predecessorListOf(DirectedGraph<V, E> g,", "-        List predecessors = new ArrayList();", "-        List edges = g.incomingEdgesOf(vertex);", "+        List<V> predecessors = new ArrayList<V>();", "+        List<? extends E> edges = g.incomingEdgesOf(vertex);", "-        for (Iterator i = edges.iterator(); i.hasNext();) {", "-            Edge e = (Edge) i.next();", "-            predecessors.add(e.oppositeVertex(vertex));", "+        for( E e : edges ) {", "+        \tpredecessors.add(e.oppositeVertex(vertex));        \t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "864b9f423911f20aad7e8954143a02e0", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/AbstractExhaustiveIsomorphismInspector.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     protected boolean areAllEdgesEquivalent(         IsomorphismRelation resultRelation,         EquivalenceComparator edgeComparator)", "signatureAfterChange": "     protected boolean areAllEdgesEquivalent(         IsomorphismRelation resultRelation,         EquivalenceComparator<? super E,? super Graph<V,E>> edgeComparator)", "diff": ["-        EquivalenceComparator edgeComparator)", "+        EquivalenceComparator<? super E,? super Graph<V,E>> edgeComparator)", "-            Set edgeSet = this.graph1.edgeSet();", "+            Set<E> edgeSet = this.graph1.edgeSet();", "-            for (Iterator iter = edgeSet.iterator(); iter.hasNext();) {", "-                Edge currEdge = (Edge) iter.next();", "-                Edge correspondingEdge =", "-                    (Edge) resultRelation.getCorrespondence(currEdge, true);", "+            for ( E currEdge : edgeSet ) {", "+                E correspondingEdge =", "+                    // XXX hb 060128: Waiting for GraphMapping to go generic", "+                    (E) resultRelation.getCorrespondence(currEdge, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d96642d82f473fe922a55fbd3d03521b", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/GraphHelper.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public static <V, E extends Edge<V>> List<V> successorListOf(DirectedGraph<V, E> g,         V vertex)", "signatureAfterChange": "     public static <V, E extends DirEdge<V>> List<V> successorListOf(DirectedGraph<V, E> g,         V vertex)", "diff": ["-    public static <V, E extends Edge<V>> List<V> successorListOf(DirectedGraph<V, E> g,", "+    public static <V, E extends DirEdge<V>> List<V> successorListOf(DirectedGraph<V, E> g,", "-        List successors = new ArrayList();", "-        List edges = g.outgoingEdgesOf(vertex);", "+        List<V> successors = new ArrayList<V>();", "+        List<? extends E> edges = g.outgoingEdgesOf(vertex);", "-        for (Iterator i = edges.iterator(); i.hasNext();) {", "-            Edge e = (Edge) i.next();", "-            successors.add(e.oppositeVertex(vertex));", "+        for( E e : edges ) {", "+        \tsuccessors.add(e.oppositeVertex(vertex));", "-", "+        "]}]}
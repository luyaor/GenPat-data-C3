{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c8d1fd150678a9e541f71dec40e25c1b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb835b0ed988a9447bbd91fa2b41a3de", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/util/equivalence/EquivalenceSetCreator.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static EquivalenceSet [] createEqualityGroupOrderedArray(         Object [] aElementsArray,         EquivalenceComparator aEqComparator,         Object aContext)", "signatureAfterChange": "     public static <EE, CC> EquivalenceSet [] createEqualityGroupOrderedArray(         Collection<EE> elements,         EquivalenceComparator<? super EE,? super CC> aEqComparator,         CC aContext)", "diff": ["-    public static EquivalenceSet [] createEqualityGroupOrderedArray(", "-        Object [] aElementsArray,", "-        EquivalenceComparator aEqComparator,", "-        Object aContext)", "-        ArrayList arrayList = new ArrayList();", "-        HashMap map =", "-            createEqualityGroupMap(aElementsArray, aEqComparator, aContext);", "-        // each of the map value is a list with one or more groups in it.", "+     */", "+    public static <EE, CC> EquivalenceSet [] createEqualityGroupOrderedArray(", "+        Collection<EE> elements,", "+        EquivalenceComparator<? super EE,? super CC> aEqComparator,", "+        CC aContext)", "+    {", "+        ArrayList<EquivalenceSet<? super EE,? super CC>> arrayList =", "+            new ArrayList<EquivalenceSet<? super EE,? super CC>>();", "+", "+        HashMap<Integer,List<EquivalenceSet<? super EE,? super CC>>> map =", "+            createEqualityGroupMap(elements, aEqComparator, aContext);", "+        // each of the map values is a list with one or more groups in it.", "-        for (Iterator collectionIter = map.values().iterator();", "-            collectionIter.hasNext();) {", "-            List list = (List) collectionIter.next();", "-            for (Iterator listIter = list.iterator(); listIter.hasNext();) {", "-                arrayList.add(listIter.next());", "+        for (List<EquivalenceSet<? super EE,? super CC>> list : map.values() ) {", "+            for (EquivalenceSet<? super EE,? super CC> eSet : list ) {", "+                arrayList.add( eSet );", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd2c2f751160584b7313464e81420066", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/util/equivalence/EquivalenceSetCreator.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static EquivalenceSet [] createEqualityGroupOrderedArray(         Object [] aElementsArray,         EquivalenceComparator aEqComparator,         Object aContext)", "signatureAfterChange": "     public static <EE, CC> EquivalenceSet [] createEqualityGroupOrderedArray(         EE [] aElementsArray,         EquivalenceComparator<? super EE,? super CC> aEqComparator,         CC aContext)", "diff": ["-    public static EquivalenceSet [] createEqualityGroupOrderedArray(", "-        Object [] aElementsArray,", "-        EquivalenceComparator aEqComparator,", "-        Object aContext)", "+    public static <EE, CC> EquivalenceSet [] createEqualityGroupOrderedArray(", "+        EE [] aElementsArray,", "+        EquivalenceComparator<? super EE,? super CC> aEqComparator,", "+        CC aContext)", "-        ArrayList arrayList = new ArrayList();", "+        return(", "+            createEqualityGroupOrderedArray( Arrays.asList(aElementsArray),", "+                                             aEqComparator,", "+                                             aContext )", "+            );", "+//        ArrayList<EquivalenceSet<? super EE,? super CC>> arrayList =", "+//            new ArrayList<EquivalenceSet<? super EE,? super CC>>();", "+//", "+//        HashMap<Integer,List<EquivalenceSet<? super EE,? super CC>>> map =", "+//            createEqualityGroupMap(aElementsArray, aEqComparator, aContext);", "+//        // each of the map values is a list with one or more groups in it.", "+//        // Object[] array = map.values().toArray();", "+//        // for (int i = 0; i < array.length; i++)", "+//        // {", "+//        // List list = (List)array[i];", "+//", "+//        for (List<EquivalenceSet<? super EE,? super CC>> list : map.values() ) {", "+//            for (EquivalenceSet<? super EE,? super CC> eSet : list ) {", "+//                arrayList.add( eSet );", "+//            }", "+//        }", "+//", "+//        ", "+//        // now we got all the eq. groups  in an array list. we need to sort", "+//        // them", "+//        EquivalenceSet [] resultArray = new EquivalenceSet [arrayList.size()];", "+//        arrayList.toArray(resultArray);", "+//        Arrays.sort(resultArray, groupSizeComparator);", "+//        return resultArray;", "+    }", "-        HashMap map =", "-            createEqualityGroupMap(aElementsArray, aEqComparator, aContext);", "-        // each of the map value is a list with one or more groups in it.", "-        for (Iterator collectionIter = map.values().iterator();", "-            collectionIter.hasNext();) {", "-            List list = (List) collectionIter.next();", "-            for (Iterator listIter = list.iterator(); listIter.hasNext();) {", "-                arrayList.add(listIter.next());"]}]}
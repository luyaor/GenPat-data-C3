{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4835456759b39572f63ee2bfc86f5e27", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "280e3c4a1d110b6b474934223dfb1498", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/StoerWagnerMinimumCut.java", "commitBeforeChange": "a8056d6aafd19ddde3f88a7357d27b280fbbac76", "commitAfterChange": "8786155732723df083d81ecffc66379e7847e52a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public StoerWagnerMinimumCut(WeightedGraph<V, E> graph)", "signatureAfterChange": "     public StoerWagnerMinimumCut(UndirectedGraph<V, E> graph)", "diff": ["-    public StoerWagnerMinimumCut(WeightedGraph<V, E> graph)", "+    public StoerWagnerMinimumCut(UndirectedGraph<V, E> graph)", "+        if (graph.vertexSet().size() < 2)", "+            throw new IllegalArgumentException(", "+                    \"Graph has less than 2 vertices\");", "+        ", "+            if (graph.getEdgeWeight(e) < 0.0)", "+                throw new IllegalArgumentException(", "+                        \"Negative edge weights not allowed\");", "+", "-            DefaultWeightedEdge eNew = workingGraph.addEdge(sNew, tNew);", "-            workingGraph.setEdgeWeight(eNew, graph.getEdgeWeight(e));", "+", "+            // For multigraphs, we sum the edge weights (either all are", "+            // contained in a cut, or none)", "+            DefaultWeightedEdge eNew = workingGraph.getEdge(sNew, tNew);", "+            if (eNew == null) {", "+                eNew = workingGraph.addEdge(sNew, tNew);", "+                workingGraph.setEdgeWeight(eNew, graph.getEdgeWeight(e));", "+            } else", "+                workingGraph.setEdgeWeight(", "+                    eNew,", "+                    workingGraph.getEdgeWeight(eNew) + graph.getEdgeWeight(e));", "-        while (workingGraph.vertexSet().size() > 2) {", "+", "+        while (workingGraph.vertexSet().size() > 1) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f19dfeff5f90b19b199d686cdac2ac4", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/DepthFirstIterator.java", "commitBeforeChange": "3cf8c5a89937c13e56521bf120df93d38d5c84ee", "commitAfterChange": "992268c2ef72b87aa653335246e4876213a0071b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public boolean hasNext(  )", "signatureAfterChange": "     public boolean hasNext(  )", "diff": ["-        return !m_stack.isEmpty(  ) && isCrossComponentTraversal(  );", "+        if( m_stack.isEmpty(  ) ) {", "+            if( isCrossComponentTraversal(  ) ) {", "+                while( m_vertexIterator.hasNext(  ) ) {", "+                    Object v = m_vertexIterator.next(  );", "+", "+                    if( !m_seen.contains( v ) ) {", "+                        m_seen.add( v );", "+                        m_stack.add( v );", "+", "+                        return true;", "+                    }", "+                }", "+", "+                return false;", "+            }", "+            else {", "+                return false;", "+            }", "+        }", "+        else {", "+            return true;", "+        }"]}]}
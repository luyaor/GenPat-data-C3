{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9f0656f0ff20ff53b8db33387b575d29", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6d7299bff1da10941bb00b2e7a8bbd6", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/traverse/TopologicalOrderIterator.java", "commitBeforeChange": "b7ec9c8cf1ee99b3f7f4494555f5785da1d21313", "commitAfterChange": "08b08c0b2822724e2601b4cdd3ab551e67b1d9bc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private TopologicalOrderIterator(         DirectedGraph<V, E> dg,         Queue<V> queue,         Map<V, ModifiableInteger> inDegreeMap)", "signatureAfterChange": "     private TopologicalOrderIterator(         DirectedGraph<V, E> dg,         Queue<V> queue,         Map<V, ModifiableInteger> inDegreeMap)", "diff": ["-        if (!dg.vertexSet().isEmpty()) {", "-            // empty queue for non-empty graph would indicate presence of", "-            // cycles (no roots found)", "-            assert (!queue.isEmpty());", "-        }", "+        // empty queue for non-empty graph would indicate presence of", "+        // cycles (no roots found)", "+        assert dg.vertexSet().isEmpty() || !queue.isEmpty();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9cb0c88caf6345cc5bc6957d76dcd35", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/RankingPathElementList.java", "commitBeforeChange": "9891701e497d82d53bd2f7288493ff266ebc25b7", "commitAfterChange": "d3ef70f973371a0a14daeb6ea1ebefb2fcfefa11", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     RankingPathElementList(         Graph<V, E> graph,         int maxSize,         RankingPathElementList<V, E> elementList,         E edge,         V guardVertexToNotDisconnect)", "signatureAfterChange": "     RankingPathElementList(         Graph<V, E> graph,         int maxSize,         RankingPathElementList<V, E> elementList,         E edge,         V guardVertexToNotDisconnect)", "diff": ["-        for (int i = 0; i < elementList.size(); i++) {", "+        for (int i = 0;", "+             (i < elementList.size()) && (size() < maxSize); i++)", "+        {", "+                // go to the next path element in the loop", "-            if (size() < this.maxSize) {", "-                double weight = calculatePathWeight(prevPathElement, edge);", "-                RankingPathElement<V, E> newPathElement =", "-                    new RankingPathElement<V, E>(", "-                        this.graph,", "-                        prevPathElement,", "-                        edge,", "-                        weight);", "+            double weight = calculatePathWeight(prevPathElement, edge);", "+            RankingPathElement<V, E> newPathElement =", "+                new RankingPathElement<V, E>(", "+                    this.graph,", "+                    prevPathElement,", "+                    edge,", "+                    weight);", "-                // the new path is inserted at the end of the list.", "-                this.pathElements.add(newPathElement);", "-            }", "+            // the new path is inserted at the end of the list.", "+            this.pathElements.add(newPathElement);"]}]}
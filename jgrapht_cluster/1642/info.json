{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f746de1dd60fea7b84b81034224fa90a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3df2116bee5b72525477f4c6fe548b3a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/VF2State.java", "commitBeforeChange": "6245588ef354746c5c3ae9a477b956068a878121", "commitAfterChange": "7c92324c62793ccd32781d7e3f1ebd3ed525f69b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public boolean nextPair()", "signatureAfterChange": "     public boolean nextPair()", "diff": ["-    public boolean nextPair() {", "-        if (addVertex2 == NULL_NODE)", "+    public boolean nextPair()", "+    {", "+        if (addVertex2 == NULL_NODE) {", "+        }", "-        if (addVertex1 == NULL_NODE)", "+        if (addVertex1 == NULL_NODE) {", "-        else", "+        } else {", "+        }", "-        if (t1BothLen > coreLen && t2BothLen > coreLen) {", "-", "+        if ((t1BothLen > coreLen) && (t2BothLen > coreLen)) {", "-            while (addVertex2 < n2 &&", "-                    (core2[addVertex2] != NULL_NODE ||", "-                     out2[addVertex2] == 0 ||", "-                     in2[addVertex2] == 0)) {", "+            while (", "+                (addVertex2 < n2)", "+                && ((core2[addVertex2] != NULL_NODE)", "+                    || (out2[addVertex2] == 0)", "+                    || (in2[addVertex2] == 0)))", "+            {", "-            while (addVertex1 < n1 &&", "-                    (core1[addVertex1] != NULL_NODE ||", "-                     out1[addVertex1] == 0 ||", "-                     in1[addVertex1] == 0)) {", "+            while (", "+                (addVertex1 < n1)", "+                && ((core1[addVertex1] != NULL_NODE)", "+                    || (out1[addVertex1] == 0)", "+                    || (in1[addVertex1] == 0)))", "+            {", "-        else if (t1OutLen > coreLen && t2OutLen > coreLen) {", "-            while (addVertex2 < n2 &&", "-                    (core2[addVertex2] != NULL_NODE ||", "-                     out2[addVertex2] == 0)) {", "+        else if ((t1OutLen > coreLen) && (t2OutLen > coreLen)) {", "+            while (", "+                (addVertex2 < n2)", "+                && ((core2[addVertex2] != NULL_NODE)", "+                    || (out2[addVertex2] == 0)))", "+            {", "-            while (addVertex1 < n1 &&", "-                    (core1[addVertex1] != NULL_NODE ||", "-                     out1[addVertex1] == 0)) {", "+            while (", "+                (addVertex1 < n1)", "+                && ((core1[addVertex1] != NULL_NODE)", "+                    || (out1[addVertex1] == 0)))", "+            {", "-        else if (t1InLen > coreLen && t2InLen > coreLen) {", "-            while (addVertex2 < n2 &&", "-                    (core2[addVertex2] != NULL_NODE ||", "-                     in2[addVertex2] == 0)) {", "+        else if ((t1InLen > coreLen) && (t2InLen > coreLen)) {", "+            while (", "+                (addVertex2 < n2)", "+                && ((core2[addVertex2] != NULL_NODE)", "+                    || (in2[addVertex2] == 0)))", "+            {", "-            while (addVertex1 < n1 &&", "-                    (core1[addVertex1] != NULL_NODE ||", "-                     in1[addVertex1] == 0)) {", "+            while (", "+                (addVertex1 < n1)", "+                && ((core1[addVertex1] != NULL_NODE)", "+                    || (in1[addVertex1] == 0)))", "+            {", "-            while (addVertex2 < n2 && core2[addVertex2] != NULL_NODE) {", "+            while ((addVertex2 < n2) && (core2[addVertex2] != NULL_NODE)) {", "-            while (addVertex1 < n1 && core1[addVertex1] != NULL_NODE) {", "+            while ((addVertex1 < n1) && (core1[addVertex1] != NULL_NODE)) {", "-        if (addVertex1 < n1 && addVertex2 < n2) {", "-            showLog(\"nextPair\", \"next candidate pair: (\" +", "-                            g1.getVertex(addVertex1) + \", \" +", "-                            g2.getVertex(addVertex2) + \")\");", "+        if ((addVertex1 < n1) && (addVertex2 < n2)) {", "+            showLog(", "+                \"nextPair\",", "+                \"next candidate pair: (\"", "+                + g1.getVertex(addVertex1) + \", \"", "+                + g2.getVertex(addVertex2) + \")\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a76d52d7d61d11c82ff2e7d42b7ff74", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/VF2SubState.java", "commitBeforeChange": "0f84a6eb9a8e82fa212601f7200f9180f90ead45", "commitAfterChange": "896719167544e845d0c05f24d4c6f4e7be2d6624", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public boolean isFeasiblePair()", "signatureAfterChange": "     public boolean isFeasiblePair()", "diff": ["-               abortmsg = indent + \"isFeasiblePair> \" + pairstr + \" passt nicht ins aktuelle Matching\";", "+               abortmsg = pairstr + \" does not fit in the current matching\";", "-                    System.out.println(abortmsg + \": Kante von \" + g2.getVertex(addVertex2) +", "-                                    \" nach \" + g2.getVertex(other2) + \" fehlt im 2. Graph\");", "+                    showLog(\"isFeasiblePair\", abortmsg + \": edge from \" +", "+                                    g2.getVertex(addVertex2) + \" to \" +", "+                                    g2.getVertex(other2) +", "+                                    \" is missing in the 2nd graph\");", "-                    System.out.println(abortmsg + \": Kante von \" + g2.getVertex(other2) +", "-                                    \" nach \" + g2.getVertex(addVertex2) + \" fehlt im 2. Graph\");", "+                    showLog(\"isFeasbilePair\", abortmsg + \": edge from \" +", "+                                    g2.getVertex(other2) + \" to \" +", "+                                    g2.getVertex(addVertex2) +", "+                                    \" is missing in the 2nd graph\");", "-                    System.out.println(abortmsg + \": Kante von \" + g1.getVertex(addVertex1) +", "-                                    \" nach \" + g1.getVertex(other1) + \" fehlt im 1. Graph\");", "+                    showLog(\"isFeasbilePair\", abortmsg + \": edge from \" +", "+                                    g1.getVertex(addVertex1) + \" to \" +", "+                                    g1.getVertex(other1) +", "+                                    \" is missing in the 1st graph\");", "-                    System.out.println(abortmsg + \": Kante von \" + g1.getVertex(other1) +", "-                                    \" nach \" + g1.getVertex(addVertex1) + \" fehlt im 1. Graph\");", "+                    showLog(\"isFeasiblePair\", abortmsg + \": edge from \" +", "+                                    g1.getVertex(other1) + \" to \" +", "+                                    g1.getVertex(addVertex1) +", "+                                    \" is missing in the 1st graph\");", "-            System.out.println(indent + \"isFeasiblePair> \" + pairstr + \" passt\");", "+            showLog(\"isFeasiblePair\", pairstr + \" fits\");", "-                cause = \"|Tin2 \u2229 Pred(Graph2, \" + v2 + \")| > |Tin1 \u2229 Pred(Graph1, \" + v1 + \")|\";", "+                cause = \"|Tin2 \u2229 Pred(Graph2, \" + v2 +", "+                    \")| > |Tin1 \u2229 Pred(Graph1, \" + v1 + \")|\";", "-                cause = \"|Tout2 \u2229 Pred(Graph2, \" + v2 + \")| > |Tout1 \u2229 Pred(Graph1, \" + v1 + \")|\";", "+                cause = \"|Tout2 \u2229 Pred(Graph2, \" + v2 +", "+                    \")| > |Tout1 \u2229 Pred(Graph1, \" + v1 + \")|\";", "-                cause = \"|N\u203e \u2229 Pred(Graph2, \" + v2 + \")| > |N\u203e \u2229 Pred(Graph1, \" + v1 + \")|\";", "+                cause = \"|N\u203e \u2229 Pred(Graph2, \" + v2 +", "+                    \")| > |N\u203e \u2229 Pred(Graph1, \" + v1 + \")|\";", "-                cause = \"|Tin2 \u2229 Succ(Graph2, \" + v2 + \")| > |Tin1 \u2229 Succ(Graph1, \" + v1 + \")|\";", "+                cause = \"|Tin2 \u2229 Succ(Graph2, \" + v2 +", "+                    \")| > |Tin1 \u2229 Succ(Graph1, \" + v1 + \")|\";", "-                cause = \"|Tout2 \u2229 Succ(Graph2, \" + v2 + \")| > |Tout1 \u2229 Succ(Graph1, \" + v1 + \")|\";", "+                cause = \"|Tout2 \u2229 Succ(Graph2, \" + v2 +", "+                    \")| > |Tout1 \u2229 Succ(Graph1, \" + v1 + \")|\";", "-                cause = \"|N\u203e \u2229 Succ(Graph2, \" + v2 + \")| > |N\u203e \u2229 Succ(Graph1, \" + v1 + \")|\";", "+                cause = \"|N\u203e \u2229 Succ(Graph2, \" + v2 +", "+                    \")| > |N\u203e \u2229 Succ(Graph1, \" + v1 + \")|\";", "-            System.out.println(abortmsg + \": \" + cause);", "+            showLog(\"isFeasbilePair\", abortmsg + \": \" + cause);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d68efe3850448635017e3422ee0890de", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/VF2SubState.java", "commitBeforeChange": "7e936137877a73e8b9c1b2921fc4174c64f683c0", "commitAfterChange": "9d6fedc5ffc354b2230877ddc85b0e6834412bd1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public boolean isFeasiblePair()", "signatureAfterChange": "     public boolean isFeasiblePair()", "diff": ["+        // check outgoing edges of addVertex2", "+        for (int other2 : g2.getOutEdges(addVertex2)) {", "+            if (core2[other2] != NULL_NODE) {", "+                int other1 = core2[other2];", "+                if (!g1.hasEdge(addVertex1, other1))    {", "+                    showLog(\"isFeasbilePair\", abortmsg + \": edge from \" +", "+                                    g1.getVertex(addVertex1) + \" to \" +", "+                                    g1.getVertex(other1) +", "+                                    \" is missing in the 1st graph\");", "+                    return false;", "+                }", "+            } else {", "+                if (in2[other2] > 0)", "+                    termInSucc2++;", "+                if (out2[other2] > 0)", "+                    termOutSucc2++;", "+                if (in2[other2] == 0 && out2[other2] == 0)", "+                    newSucc2++;", "+            }", "+        }", "+        ", "+        if (termInSucc1 < termInSucc2 ||", "+            termOutSucc1 < termOutSucc2 ||", "+            newSucc1 < newSucc2)", "+        {", "+            String cause = \"\",", "+                      v1 = g1.getVertex(addVertex1).toString(),", "+                      v2 = g2.getVertex(addVertex2).toString();", "+     ", "+            if (termInSucc2 > termInSucc1)", "+                cause = \"|Tin2 \u2229 Succ(Graph2, \" + v2 +", "+                    \")| > |Tin1 \u2229 Succ(Graph1, \" + v1 + \")|\";", "+            else if (termOutSucc2 > termOutSucc1)", "+                cause = \"|Tout2 \u2229 Succ(Graph2, \" + v2 +", "+                    \")| > |Tout1 \u2229 Succ(Graph1, \" + v1 + \")|\";", "+            else if (newSucc2 > newSucc1)", "+                cause = \"|N\u203e \u2229 Succ(Graph2, \" + v2 +", "+                    \")| > |N\u203e \u2229 Succ(Graph1, \" + v1 + \")|\";", "+", "+            showLog(\"isFeasbilePair\", abortmsg + \": \" + cause);", "+            return false;", "+        }", "+", "-            }", "-        }", "-", "-        // check outgoing edges of addVertex2", "-        for (int other2 : g2.getOutEdges(addVertex2)) {", "-            if (core2[other2] != NULL_NODE) {", "-                int other1 = core2[other2];", "-                if (!g1.hasEdge(addVertex1, other1))    {", "-                    showLog(\"isFeasbilePair\", abortmsg + \": edge from \" +", "-                                    g1.getVertex(addVertex1) + \" to \" +", "-                                    g1.getVertex(other1) +", "-                                    \" is missing in the 1st graph\");", "-                    return false;", "-                }", "-            } else {", "-                if (in2[other2] > 0)", "-                    termInSucc2++;", "-                if (out2[other2] > 0)", "-                    termOutSucc2++;", "-                if (in2[other2] == 0 && out2[other2] == 0)", "-                    newSucc2++;", "-            newPred1 >= newPred2 &&", "-            termInSucc1 >= termInSucc2 &&", "-            termOutSucc1 >= termOutSucc2 &&", "-            newSucc1 >= newSucc2)", "+            newPred1 >= newPred2)", "-                   v1 = g1.getVertex(addVertex1).toString(),", "-                   v2 = g2.getVertex(addVertex2).toString();", "+                      v1 = g1.getVertex(addVertex1).toString(),", "+                      v2 = g2.getVertex(addVertex2).toString();", "-            else if (newPred2 > newPred2)", "+            else if (newPred2 > newPred1)", "-            else if (termInPred2 > termInPred1)", "-                cause = \"|Tin2 \u2229 Succ(Graph2, \" + v2 +", "-                    \")| > |Tin1 \u2229 Succ(Graph1, \" + v1 + \")|\";", "-            else if (termOutSucc2 > termOutSucc1)", "-                cause = \"|Tout2 \u2229 Succ(Graph2, \" + v2 +", "-                    \")| > |Tout1 \u2229 Succ(Graph1, \" + v1 + \")|\";", "-            else if (newSucc2 > newSucc2)", "-                cause = \"|N\u203e \u2229 Succ(Graph2, \" + v2 +", "-                    \")| > |N\u203e \u2229 Succ(Graph1, \" + v1 + \")|\";"]}]}
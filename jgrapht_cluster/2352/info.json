{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1cd7a147fe413f9d0c0627f8c53db640", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5522e8d93b1feda76145aeef58fae266", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/experimental/alg/VertexCoverAlgorithmTest.java", "commitBeforeChange": "a61c430f2ac7af9e4b0519b792fa90091fa0462d", "commitAfterChange": "3dfe7bd3c3baf72541946589aad20525c29233c0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate void create()", "signatureAfterChange": "     private Pseudograph createRandomGraph(  )", "diff": ["-\t */", "-\tprivate void create() {", "-\t\tgraph = new Pseudograph();", "-\t\tfor (int i = 0; i < TEST_GRAPH_SIZE; i++) {", "-\t\t\tgraph.addVertex(new Integer(i));", "-\t\t}", "-\t\tVector vertices = new Vector(graph.vertexSet());", "-\t\t// join every vertex with a random number of other vertices", "-\t\tfor (int sourceVertexIndex = 0; sourceVertexIndex < TEST_GRAPH_SIZE; sourceVertexIndex++) {", "-\t\t\tint numEdgesToCreate = (int) Math.random()*TEST_GRAPH_SIZE/2 + 1;", "-\t\t\tfor (int j = 0; j < numEdgesToCreate; j++) {", "-\t\t\t\t// find a random vertex to join to", "-\t\t\t\tint destVertexIndex = (int) Math.floor(Math.random()*TEST_GRAPH_SIZE);", "-\t\t\t\tgraph.addEdge(vertices.get(sourceVertexIndex), vertices.get(destVertexIndex));", "-\t\t\t}", "-\t\t}", "-\t}", "+     */", "+    private Pseudograph createRandomGraph(  ) {", "+        Pseudograph g = new Pseudograph(  );", "+", "+        for( int i = 0; i < TEST_GRAPH_SIZE; i++ ) {", "+            g.addVertex( new Integer( i ) );", "+        }", "+", "+        Vector vertices = new Vector( g.vertexSet(  ) );", "+", "+        // join every vertex with a random number of other vertices", "+        for( int source = 0; source < TEST_GRAPH_SIZE; source++ ) {", "+            int numEdgesToCreate =", "+                (int) Math.random(  ) * TEST_GRAPH_SIZE / 2 + 1;", "+", "+            for( int j = 0; j < numEdgesToCreate; j++ ) {", "+                // find a random vertex to join to", "+                int target =", "+                    (int) Math.floor( Math.random(  ) * TEST_GRAPH_SIZE );", "+                g.addEdge( vertices.get( source ), vertices.get( target ) );", "+            }", "+        }", "+", "+        return g;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71b0422e576a77d779ad618949036656", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/experimental/alg/VertexCoverAlgorithmTest.java", "commitBeforeChange": "a61c430f2ac7af9e4b0519b792fa90091fa0462d", "commitAfterChange": "3dfe7bd3c3baf72541946589aad20525c29233c0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate boolean isSolution(Collection possibleSolution)", "signatureAfterChange": "     private boolean isCover( Set vertexSet, Pseudograph g )", "diff": ["-\t */", "-\tprivate boolean isSolution(Collection possibleSolution) {", "-\t\tSet edgesToCover = new HashSet(graph.edgeSet());", "-\t\tfor (Iterator iVertices = possibleSolution.iterator();", "-\t\t\t iVertices.hasNext();", "-\t\t\t ) {", "-\t\t\tedgesToCover.removeAll(new ArrayList(graph.edgesOf(iVertices.next())));", "-\t\t}", "-\t\tif (edgesToCover.size() == 0) {", "-\t\t\treturn true;", "-\t\t}", "-\t\telse {", "-\t\t\treturn false;", "-\t\t}", "-\t}", "+     */", "+    private boolean isCover( Set vertexSet, Pseudograph g ) {", "+        Set uncoveredEdges = new HashSet( g.edgeSet(  ) );", "+", "+        for( Iterator i = vertexSet.iterator(  ); i.hasNext(  ); ) {", "+            uncoveredEdges.removeAll( g.edgesOf( i.next(  ) ) );", "+        }", "+", "+        return uncoveredEdges.size(  ) == 0;", "+    }"]}]}
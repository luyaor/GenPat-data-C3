{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "059dafff1f07213a663187aa0c7b6609", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a9738b64b06aeac916c77975f1214a8", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/VF2SubState.java", "commitBeforeChange": "3f8899078adfe5315dc0aeb978ba35bda0df1615", "commitAfterChange": "323f50ff50f0763160c18603b341aaf64f3f86fa", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public boolean isFeasiblePair()", "signatureAfterChange": "     public boolean isFeasiblePair()", "diff": ["-        int termOut1 = 0,", "-            termOut2 = 0,", "-            termIn1 = 0,", "-            termIn2 = 0,", "-            new1 = 0,", "-            new2 = 0;", "+        int termOutPred1 = 0,", "+            termOutPred2 = 0,", "+            termInPred1 = 0,", "+            termInPred2 = 0,", "+            newPred1 = 0,", "+            newPred2 = 0,", "+            termOutSucc1 = 0,", "+            termOutSucc2 = 0,", "+            termInSucc1 = 0,", "+            termInSucc2 = 0,", "+            newSucc1 = 0,", "+            newSucc2 = 0;", "-                    termIn1++;", "+                    termInSucc1++;", "-                    termOut1++;", "+                    termOutSucc1++;", "-                    new1++;", "+                    newSucc1++;", "-                    termIn1++;", "+                    termInPred1++;", "-                    termOut1++;", "+                    termOutPred1++;", "-                    new1++;", "+                    newPred1++;", "-                    termIn2++;", "+                    termInSucc2++;", "-                    termOut2++;", "+                    termOutSucc2++;", "-                    new2++;", "+                    newSucc2++;", "-                    termIn2++;", "+                    termInPred2++;", "-                    termOut2++;", "+                    termOutPred2++;", "-                    new2++;", "+                    newPred2++;", "-        if (termIn1 >= termIn2 && termOut1 >= termOut2 && new1 >= new2) {", "+        if (termInPred1 >= termInPred2 && termOutPred1 >= termOutPred2 && newPred1 >= newPred2 && termInSucc1 >= termInSucc2 && termOutSucc1 >= termOutSucc2 && newSucc1 >= newSucc2) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35dca7e4721473d9443d153ef9f83d74", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/EdmondsKarpMaximumFlow.java", "commitBeforeChange": "5f0104ac684044809cb315b79d4a999c5e1da731", "commitAfterChange": "a35680f67c56e8fcc81e697983a084c86d356dae", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private void augmentFlow()", "signatureAfterChange": "      private void augmentFlow()", "diff": ["-        double deltaFlow = nodes.get(currentSink).flowAmount;", "-        maximumFlowValue += deltaFlow;", "-        int currentNode = currentSink;", "-        while (currentNode != currentSource) {", "-            nodes.get(currentNode).lastArc.flow += deltaFlow;", "-            nodes.get(currentNode).lastArc.reversed.flow -= deltaFlow;", "-            currentNode = nodes.get(currentNode).lastArc.tail;", "+        boolean[] seen = new boolean[nodes.size()];", "+", "+        for (Arc lastArc : nodes.get(currentSink).lastArcs) {", "+            double deltaFlow =", "+                Math.min(", "+                    nodes.get(lastArc.tail).flowAmount,", "+                    lastArc.capacity - lastArc.flow);", "+", "+            if (augmentFlowAlongInternal(deltaFlow, lastArc.tail, seen)) {", "+                lastArc.flow += deltaFlow;", "+                lastArc.reversed.flow -= deltaFlow;", "+            }", "+", "+            // _DBG", "+            assert (lastArc.flow + DEFAULT_EPSILON <= lastArc.capacity);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d68efe3850448635017e3422ee0890de", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/VF2SubState.java", "commitBeforeChange": "7e936137877a73e8b9c1b2921fc4174c64f683c0", "commitAfterChange": "9d6fedc5ffc354b2230877ddc85b0e6834412bd1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public boolean isFeasiblePair()", "signatureAfterChange": "     public boolean isFeasiblePair()", "diff": ["+        // check outgoing edges of addVertex2", "+        for (int other2 : g2.getOutEdges(addVertex2)) {", "+            if (core2[other2] != NULL_NODE) {", "+                int other1 = core2[other2];", "+                if (!g1.hasEdge(addVertex1, other1))    {", "+                    showLog(\"isFeasbilePair\", abortmsg + \": edge from \" +", "+                                    g1.getVertex(addVertex1) + \" to \" +", "+                                    g1.getVertex(other1) +", "+                                    \" is missing in the 1st graph\");", "+                    return false;", "+                }", "+            } else {", "+                if (in2[other2] > 0)", "+                    termInSucc2++;", "+                if (out2[other2] > 0)", "+                    termOutSucc2++;", "+                if (in2[other2] == 0 && out2[other2] == 0)", "+                    newSucc2++;", "+            }", "+        }", "+        ", "+        if (termInSucc1 < termInSucc2 ||", "+            termOutSucc1 < termOutSucc2 ||", "+            newSucc1 < newSucc2)", "+        {", "+            String cause = \"\",", "+                      v1 = g1.getVertex(addVertex1).toString(),", "+                      v2 = g2.getVertex(addVertex2).toString();", "+     ", "+            if (termInSucc2 > termInSucc1)", "+                cause = \"|Tin2 \u2229 Succ(Graph2, \" + v2 +", "+                    \")| > |Tin1 \u2229 Succ(Graph1, \" + v1 + \")|\";", "+            else if (termOutSucc2 > termOutSucc1)", "+                cause = \"|Tout2 \u2229 Succ(Graph2, \" + v2 +", "+                    \")| > |Tout1 \u2229 Succ(Graph1, \" + v1 + \")|\";", "+            else if (newSucc2 > newSucc1)", "+                cause = \"|N\u203e \u2229 Succ(Graph2, \" + v2 +", "+                    \")| > |N\u203e \u2229 Succ(Graph1, \" + v1 + \")|\";", "+", "+            showLog(\"isFeasbilePair\", abortmsg + \": \" + cause);", "+            return false;", "+        }", "+", "-            }", "-        }", "-", "-        // check outgoing edges of addVertex2", "-        for (int other2 : g2.getOutEdges(addVertex2)) {", "-            if (core2[other2] != NULL_NODE) {", "-                int other1 = core2[other2];", "-                if (!g1.hasEdge(addVertex1, other1))    {", "-                    showLog(\"isFeasbilePair\", abortmsg + \": edge from \" +", "-                                    g1.getVertex(addVertex1) + \" to \" +", "-                                    g1.getVertex(other1) +", "-                                    \" is missing in the 1st graph\");", "-                    return false;", "-                }", "-            } else {", "-                if (in2[other2] > 0)", "-                    termInSucc2++;", "-                if (out2[other2] > 0)", "-                    termOutSucc2++;", "-                if (in2[other2] == 0 && out2[other2] == 0)", "-                    newSucc2++;", "-            newPred1 >= newPred2 &&", "-            termInSucc1 >= termInSucc2 &&", "-            termOutSucc1 >= termOutSucc2 &&", "-            newSucc1 >= newSucc2)", "+            newPred1 >= newPred2)", "-                   v1 = g1.getVertex(addVertex1).toString(),", "-                   v2 = g2.getVertex(addVertex2).toString();", "+                      v1 = g1.getVertex(addVertex1).toString(),", "+                      v2 = g2.getVertex(addVertex2).toString();", "-            else if (newPred2 > newPred2)", "+            else if (newPred2 > newPred1)", "-            else if (termInPred2 > termInPred1)", "-                cause = \"|Tin2 \u2229 Succ(Graph2, \" + v2 +", "-                    \")| > |Tin1 \u2229 Succ(Graph1, \" + v1 + \")|\";", "-            else if (termOutSucc2 > termOutSucc1)", "-                cause = \"|Tout2 \u2229 Succ(Graph2, \" + v2 +", "-                    \")| > |Tout1 \u2229 Succ(Graph1, \" + v1 + \")|\";", "-            else if (newSucc2 > newSucc2)", "-                cause = \"|N\u203e \u2229 Succ(Graph2, \" + v2 +", "-                    \")| > |N\u203e \u2229 Succ(Graph1, \" + v1 + \")|\";"]}]}
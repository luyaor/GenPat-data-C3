{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e40455b97239f0b2591d0187f571a71f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38ba5dc4a4f950d411f8caa0ecaf0729", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/AStarShortestPathTest.java", "commitBeforeChange": "c27f483bdad6d4ec96ed0606f813dcca6b6ce1a2", "commitAfterChange": "4ee6363d16ec94e3a6b30f018103c358e2e6080f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "         @Override         public double getCostEstimate(Node start, Node goal)", "signatureAfterChange": "         @Override         public double getCostEstimate(Node sourceVertex, Node targetVertex)", "diff": ["-        public double getCostEstimate(Node start, Node goal) {", "-            return Math.abs(start.x-goal.x)+Math.abs(start.y-goal.y);", "+        public double getCostEstimate(Node sourceVertex, Node targetVertex) {", "+            return Math.abs(sourceVertex.x- targetVertex.x)+Math.abs(sourceVertex.y- targetVertex.y);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "986518c9d5c193facd2cea77209d9ed3", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/AStarShortestPathTest.java", "commitBeforeChange": "c27f483bdad6d4ec96ed0606f813dcca6b6ce1a2", "commitAfterChange": "4ee6363d16ec94e3a6b30f018103c358e2e6080f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "         @Override         public double getCostEstimate(Node start, Node goal)", "signatureAfterChange": "         @Override         public double getCostEstimate(Node sourceVertex, Node targetVertex)", "diff": ["-        public double getCostEstimate(Node start, Node goal) {", "-            return Math.sqrt(Math.pow(start.x-goal.x,2)+Math.pow(start.y-goal.y,2));", "+        public double getCostEstimate(Node sourceVertex, Node targetVertex) {", "+            return Math.sqrt(Math.pow(sourceVertex.x- targetVertex.x,2)+Math.pow(sourceVertex.y- targetVertex.y,2));"]}]}
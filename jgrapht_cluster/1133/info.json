{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a15d2ade30fc599faebe2f0e571f47f4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bb4104662e7a95ce43196e5ba795364", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/SubgraphIsomorphismRelation.java", "commitBeforeChange": "aa92fe16c7852c9f9d1bf3a60c5718fcffd0ae0a", "commitAfterChange": "cb1cae1f97dd9ffd761a89cc949eb78f64d8e9dc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t@Override \tpublic E getEdgeCorrespondence(E e, boolean forward)", "signatureAfterChange": "  \t@Override \tpublic E getEdgeCorrespondence(E e, boolean forward)", "diff": ["-\t\tE e2;", "+\t\tGraphOrdering<V,E> firstGraph, secondGraph;", "+\t\tint[] core;", "-\t\t\tint[] eOrder = g1.getEdgeOrder(e);", "-\t\t\te2 = g2.getEdge(core1[eOrder[0]], core1[eOrder[1]]);", "+\t\t\tfirstGraph  = g1;", "+\t\t\tsecondGraph = g2;", "+\t\t\tcore        = core1;", "-\t\t\tint[] eOrder = g2.getEdgeOrder(e);", "-\t\t\te2 = g1.getEdge(core2[eOrder[0]], core2[eOrder[1]]);", "+\t\t\tfirstGraph  = g2;", "+\t\t\tsecondGraph = g1;", "+\t\t\tcore        = core2;", "-\t\treturn e2;", "+\t\tint[] eOrder = firstGraph.getEdgeOrder(e);", "+\t\tif (core[eOrder[0]] == NULL_NODE || core[eOrder[1]] == NULL_NODE)", "+\t\t\treturn null;", "+\t\t", "+\t\treturn secondGraph.getEdge(core[eOrder[0]], core[eOrder[1]]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "744380f528e0f95b8070f271f728a888", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/SubgraphIsomorphismRelation.java", "commitBeforeChange": "aa92fe16c7852c9f9d1bf3a60c5718fcffd0ae0a", "commitAfterChange": "cb1cae1f97dd9ffd761a89cc949eb78f64d8e9dc", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t \t@Override \tpublic V getVertexCorrespondence(V v, boolean forward)", "signatureAfterChange": " \t \t \t@Override \tpublic V getVertexCorrespondence(V v, boolean forward)", "diff": ["-\t\tint vOrdering, uOrdering;", "-\t\tV u;", "+\t\tGraphOrdering<V,E> firstGraph, secondGraph;", "+\t\tint[] core;", "-\t\t\tvOrdering = g1.getVertexOrder(v);", "-\t\t\tuOrdering = core1[vOrdering];", "-\t\t\tu = g2.getVertex(uOrdering);", "+\t\t\tfirstGraph  = g1;", "+\t\t\tsecondGraph = g2;", "+\t\t\tcore        = core1;", "-\t\t\tvOrdering = g2.getVertexOrder(v);", "-\t\t\tuOrdering = core2[vOrdering];", "-\t\t\tu = g1.getVertex(uOrdering);", "+\t\t\tfirstGraph  = g2;", "+\t\t\tsecondGraph = g1;", "+\t\t\tcore        = core2;", "-\t\treturn u;", "+\t\tint vOrdering = firstGraph.getVertexOrder(v),", "+\t\t\tuOrdering = core[vOrdering];", "+\t\t", "+\t\tif (uOrdering == NULL_NODE)", "+\t\t\treturn null;", "+\t\t", "+\t\treturn secondGraph.getVertex(uOrdering);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c00f662b6aca41f33afc4b527d96b9e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f322af61c0f49824d75e14a19f0aa3b", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/graph/SimpleGraphPath.java", "commitBeforeChange": "b5404750cc623a978978783f4ef48335685c8703", "commitAfterChange": "f1d857c1f9c2cfee0332801a7f0c41e4781f3280", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public SimpleGraphPath(SimpleGraph<V, E> simpleGraph, List<V> vertices, double weight)", "signatureAfterChange": "     public SimpleGraphPath(SimpleGraph<V, E> simpleGraph, List<V> vertices, double weight)", "diff": ["+        if (vertices.size() < 2) {", "+            throw new IllegalArgumentException(", "+                \"At least two vertices are required to form a path\");", "+        }", "+        ", "-            if (getGraph().containsEdge(currentEdge))", "+            if (currentEdge != null)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66ed31445b07f4b7b597fa7a3b33b541", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/AbstractPathElementList.java", "commitBeforeChange": "94e0b9cdbd464a6b60ddbb8cd6d473a32e102eaf", "commitAfterChange": "90d794caa7b37ed092890eb859473902af3157bc", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected AbstractPathElementList(         Graph<V, E> graph,         int maxSize,         T pathElement)", "signatureAfterChange": "     protected AbstractPathElementList(         Graph<V, E> graph,         int maxSize,         T pathElement)", "diff": ["-     */", "-    protected AbstractPathElementList(", "-        Graph<V, E> graph,", "-        int maxSize,", "-        T pathElement)", "-    {", "-        if (maxSize <= 0) {", "-            throw new IllegalArgumentException(\"maxSize is negative or 0\");", "-        }", "-        if (pathElement == null) {", "-            throw new NullPointerException(\"pathElement is null\");", "-        }", "-", "-        this.graph = graph;", "-        this.maxSize = maxSize;", "-        this.vertex = pathElement.getVertex();", "-", "-        this.pathElements.add(pathElement);", "-    }", "+    protected AbstractPathElementList(", "+        Graph<V, E> graph,", "+        int maxSize,", "+        T pathElement)", "+        if (maxSize <= 0) {", "+            throw new IllegalArgumentException(\"maxSize is negative or 0\");", "+        }", "+        if (pathElement == null) {", "+            throw new NullPointerException(\"pathElement is null\");", "+        }", "+        if (pathElement.getPrevEdge() != null) {", "+            throw new IllegalArgumentException(\"path must be empty\");", "+        }", "+", "+        this.graph = graph;", "+        this.maxSize = maxSize;", "+        this.vertex = pathElement.getVertex();", "+", "+        this.pathElements.add(pathElement);", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "969cf59c984626b8c05ef25ac11b5eb9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b812f6f4dba8ce11512ab00337c1ba8c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/AdaptiveIsomorphismInspectorFactory.java", "commitBeforeChange": "7bbdcf37663f36f80ef1f366555eafdbd618736a", "commitAfterChange": "9a4730fe923a200a9ce0f4cf2dd7459ded43a3cc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected static GraphIsomorphismInspector     createAppropriateConcreteInspector(         int graphType,         Graph graph1,         Graph graph2,         EquivalenceComparator vertexChecker,         EquivalenceComparator edgeChecker)", "signatureAfterChange": "     protected static GraphIsomorphismInspector     createAppropriateConcreteInspector(         int graphType,         Graph graph1,         Graph graph2,         EquivalenceComparator vertexChecker,         EquivalenceComparator edgeChecker)", "diff": ["-        case GRAPH_TYPE_REGULAR:", "+        case GRAPH_TYPE_ARBITRARY:", "-        // REVIEW jvs 5-Sept-2005:  Why is this commented out?  Shouldn't", "-        // it be returning something instead of null?", "-        // currentInspector = new", "-        // EquivalenceIsomorphismInspector(graph1,graph2,vertexChecker,edgeChecker);", "+        \tthrow new IllegalArgumentException(\"The type was not one of the supported types.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe8682005bca60cd5908bb8ca0ec017a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/graph/SimpleGraphPath.java", "commitBeforeChange": "4c943d362622d305ac3ffd82365c8d7977e559f3", "commitAfterChange": "4cc84f1833081f548c22a81d0a3b67bd3072a3d7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public SimpleGraphPath(SimpleGraph<V, E> simpleGraph, List<V> vertices)", "signatureAfterChange": "      public SimpleGraphPath(SimpleGraph<V, E> simpleGraph, List<V> vertices)", "diff": ["-        this.vertices = vertices;       ", "+        this.vertices = vertices;", "+        ", "+        // Ensure the vertices form a path in the graph", "+        for (int i = 0; i < getVertexList().size() - 1; i++) {", "+            if (getGraph().getEdge(getVertexList().get(i), getVertexList().get(i + 1)) == null) {", "+                throw new IllegalArgumentException(\"The specified vertices do not form a path\");", "+            }", "+        }", "+        "]}]}
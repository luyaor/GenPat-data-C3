{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5eb2dab642446492e67912f4d606854c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "014ed4ec2aa057808a60e4e6ec11fecf", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/VF2IsomorphismInspector.java", "commitBeforeChange": "b45791c7d62f6d8e55334421984e95ff59806210", "commitAfterChange": "6439f444116cb1d103ecea1e31327eb85544da99", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public VF2IsomorphismInspector(                     Graph<V, E> graph1,                     Graph<V, E> graph2,                     Comparator<V> vertexComparator,                     Comparator<E> edgeComparator)", "signatureAfterChange": "     public VF2IsomorphismInspector(                     Graph<V, E> graph1,                     Graph<V, E> graph2,                     Comparator<V> vertexComparator,                     Comparator<E> edgeComparator,                     boolean cacheEdges)", "diff": ["-                    Comparator<E> edgeComparator)", "+                    Comparator<E> edgeComparator,", "+                    boolean cacheEdges)", "-        this.ordering1        = new GraphOrdering<V, E>(graph1, true);", "-        this.ordering2        = new GraphOrdering<V, E>(graph2, true);", "+        this.ordering1        = new GraphOrdering<V, E>(graph1, true,", "+                                                        cacheEdges);", "+        this.ordering2        = new GraphOrdering<V, E>(graph2, true,", "+                                                        cacheEdges);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1571b78544cd43b9a98ef035f6b27216", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/BellmanFordIterator.java", "commitBeforeChange": "695a606157d7ef974075682ce4ecc3e1dfdc85a4", "commitAfterChange": "d3d69b995e320be4efee74fa98136f4ec17e79cc", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     protected BellmanFordIterator(Graph<V, E> graph, V startVertex)", "signatureAfterChange": "     protected BellmanFordIterator(Graph<V, E> graph, V startVertex,         double epsilon)", "diff": ["-    protected BellmanFordIterator(Graph<V, E> graph, V startVertex)", "+    protected BellmanFordIterator(Graph<V, E> graph, V startVertex,", "+        double epsilon)", "+        this.epsilon = epsilon;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a07bd81907beaebd17e62e10a7c4038", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/GraphOrdering.java", "commitBeforeChange": "b45791c7d62f6d8e55334421984e95ff59806210", "commitAfterChange": "6439f444116cb1d103ecea1e31327eb85544da99", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public GraphOrdering(Graph<V, E> graph, boolean orderByDegree)", "signatureAfterChange": "     public GraphOrdering(Graph<V, E> graph,                          boolean orderByDegree,                          boolean cacheEdges)", "diff": ["-    public GraphOrdering(Graph<V, E> graph, boolean orderByDegree) {", "-        this.graph = graph;", "+    public GraphOrdering(Graph<V, E> graph,", "+                         boolean orderByDegree,", "+                         boolean cacheEdges) {", "+        this.graph      = graph;", "+        this.cacheEdges = cacheEdges;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b47dd08f8379a2311de1c03295e543d", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/graph/GraphUnion.java", "commitBeforeChange": "51364417691421b046a3518ca4b006f616254eda", "commitAfterChange": "408658ccffc992cefc062e77040a069f74fdf9a3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public GraphUnion(G g1, G g2)", "signatureAfterChange": "      public GraphUnion(G g1, G g2, BinaryOperator<Double> operator)", "diff": ["-    public GraphUnion(G g1, G g2) {", "+    public GraphUnion(G g1, G g2, BinaryOperator<Double> operator) {", "+        this.operator = operator;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67966139d16084a149f50f76078a3448", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/BellmanFordPathElement.java", "commitBeforeChange": "695a606157d7ef974075682ce4ecc3e1dfdc85a4", "commitAfterChange": "d3d69b995e320be4efee74fa98136f4ec17e79cc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected BellmanFordPathElement(V vertex)", "signatureAfterChange": "     protected BellmanFordPathElement(V vertex, double epsilon)", "diff": ["-    protected BellmanFordPathElement(V vertex)", "+    protected BellmanFordPathElement(V vertex, double epsilon)", "+        this.epsilon = epsilon;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "787d77ffbd4ff6a5a7ce78fc8e963b88", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/VF2SubgraphIsomorphismInspector.java", "commitBeforeChange": "eb1fecbe7cdb26f3840d4ae1d93a0ed46d41cf6c", "commitAfterChange": "087c49217068f95514e5b6052b0271c9392cf80f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public VF2SubgraphIsomorphismInspector(                     Graph<V,E> graph1,                     Graph<V,E> graph2,                     Comparator<V> vertexComparator,                     Comparator<E> edgeComparator)", "signatureAfterChange": "     public VF2SubgraphIsomorphismInspector(             Graph<V, E> graph1,             Graph<V, E> graph2,             Comparator<V> vertexComparator,             Comparator<E> edgeComparator,             boolean cacheEdges)", "diff": ["+     */", "-                    Graph<V,E> graph1,", "-                    Graph<V,E> graph2,", "-                    Comparator<V> vertexComparator,", "-                    Comparator<E> edgeComparator)", "+            Graph<V, E> graph1,", "+            Graph<V, E> graph2,", "+            Comparator<V> vertexComparator,", "+            Comparator<E> edgeComparator,", "+            boolean cacheEdges)", "-        super(graph1, graph2, vertexComparator, edgeComparator);", "+        super(graph1,", "+              graph2,", "+              vertexComparator,", "+              edgeComparator,", "+              cacheEdges);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "932306b770ff71c7f13aa930cfa0a893", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/BellmanFordPathElement.java", "commitBeforeChange": "695a606157d7ef974075682ce4ecc3e1dfdc85a4", "commitAfterChange": "d3d69b995e320be4efee74fa98136f4ec17e79cc", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     protected BellmanFordPathElement(         Graph<V, E> graph,         BellmanFordPathElement<V, E> pathElement,         E edge,         double cost)", "signatureAfterChange": "     protected BellmanFordPathElement(         Graph<V, E> graph,         BellmanFordPathElement<V, E> pathElement,         E edge,         double cost,         double epsilon)", "diff": ["-        double cost)", "+        double cost,", "+        double epsilon)", "+        this.epsilon = epsilon;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eebc10d43aa590e4c4d3b407777f2782", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/VF2GraphIsomorphismInspector.java", "commitBeforeChange": "eb1fecbe7cdb26f3840d4ae1d93a0ed46d41cf6c", "commitAfterChange": "087c49217068f95514e5b6052b0271c9392cf80f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public VF2GraphIsomorphismInspector(                     Graph<V,E> graph1,                     Graph<V,E> graph2,                     Comparator<V> vertexComparator,                     Comparator<E> edgeComparator)", "signatureAfterChange": "     public VF2GraphIsomorphismInspector(             Graph<V, E> graph1,             Graph<V, E> graph2,             Comparator<V> vertexComparator,             Comparator<E> edgeComparator,             boolean cacheEdges)", "diff": ["+     */", "-                    Graph<V,E> graph1,", "-                    Graph<V,E> graph2,", "-                    Comparator<V> vertexComparator,", "-                    Comparator<E> edgeComparator)", "+            Graph<V, E> graph1,", "+            Graph<V, E> graph2,", "+            Comparator<V> vertexComparator,", "+            Comparator<E> edgeComparator,", "+            boolean cacheEdges)", "-        super(graph1, graph2, vertexComparator, edgeComparator);", "+        super(graph1,", "+              graph2,", "+              vertexComparator,", "+              edgeComparator,", "+              cacheEdges);"]}]}
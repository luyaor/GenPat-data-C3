{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "19b302397176b978641eda8dea03f9b3", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18ebae9777576143df1554e1ae067f68", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/experimental/alg/VertexCoverApproximationAlgorithm.java", "commitBeforeChange": "a61c430f2ac7af9e4b0519b792fa90091fa0462d", "commitAfterChange": "3dfe7bd3c3baf72541946589aad20525c29233c0", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\t \tpublic VertexCoverApproximationAlgorithm(Pseudograph graph)", "signatureAfterChange": "     public VertexCoverApproximationAlgorithm( Graph g )", "diff": ["-\t */\t", "-\tpublic VertexCoverApproximationAlgorithm(Pseudograph graph) {", "-\t\tthis.graph = graph;", "-\t}", "+     */", "+    public VertexCoverApproximationAlgorithm( Graph g ) {", "+        if( g instanceof DirectedGraph ) {", "+            m_graph = new AsUndirectedGraph( (DirectedGraph) g );", "+        }", "+        else if( g instanceof UndirectedGraph ) {", "+            m_graph = (UndirectedGraph) g;", "+        }", "+        else {", "+            throw new IllegalArgumentException( \"Unrecognized graph\" );", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62a8e73475aca1d2549ec4d6e9af4d6f", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/experimental/alg/VertexCoverGreedyAlgorithm.java", "commitBeforeChange": "a61c430f2ac7af9e4b0519b792fa90091fa0462d", "commitAfterChange": "3dfe7bd3c3baf72541946589aad20525c29233c0", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\t \tpublic VertexCoverGreedyAlgorithm(Pseudograph graph)", "signatureAfterChange": "     public VertexCoverGreedyAlgorithm( Graph g )", "diff": ["-\t */\t", "-\tpublic VertexCoverGreedyAlgorithm(Pseudograph graph) {", "-\t\tthis.graph = graph;", "-\t}", "+     */", "+    public VertexCoverGreedyAlgorithm( Graph g ) {", "+        if( g instanceof DirectedGraph ) {", "+            m_graph = new AsUndirectedGraph( (DirectedGraph) g );", "+        }", "+        else if( g instanceof UndirectedGraph ) {", "+            m_graph = (UndirectedGraph) g;", "+        }", "+        else {", "+            throw new IllegalArgumentException( \"Unrecognized graph\" );", "+        }", "+    }"]}]}
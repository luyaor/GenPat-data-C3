{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1e6ecd972bb36317b27c2ee0d8a00721", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "251d858c29fb37356b0df559356bf6dc", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/AbstractBaseGraph.java", "commitBeforeChange": "31acef0c10b04a4d9507bb33a011a766c870c766", "commitAfterChange": "28851ba6f18793b718275deebcab4e40c016a084", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public Edge addEdge( Object sourceVertex, Object targetVertex, double weight )", "signatureAfterChange": "     public boolean addEdge( Edge e )", "diff": ["-     */", "-    public Edge addEdge( Object sourceVertex, Object targetVertex, double weight ) {", "-        Edge e = addEdge( sourceVertex, targetVertex );", "-", "-        if( e != null ) {", "-            ( (WeightedElement) e ).setWeight( weight );", "-        }", "-", "-        return e;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaaea7726468e4d7cf9ad76438a9ae32", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/MaximumFlowAlgorithmBase.java", "commitBeforeChange": "024fc7b86a9ced21b7444077ac5895f2b6a50bf9", "commitAfterChange": "54d7e11e1ecaccdb80a1aeb9ea081aac7e5d3e46", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private EdgeExtensionBase createInverse(EdgeExtensionBase ex)", "signatureAfterChange": "      private EdgeExtensionBase createInverse(EdgeExtensionBase ex, DirectedGraph<V, E> n)", "diff": ["-    private EdgeExtensionBase createInverse(EdgeExtensionBase ex) {", "-        EdgeExtensionBase iex = null;", "-        try {", "+", "+    private EdgeExtensionBase createInverse(EdgeExtensionBase ex, DirectedGraph<V, E> n) {", "+        EdgeExtensionBase iex;", "+", "+        if (n.containsEdge(ex.target.prototype, ex.source.prototype)) {", "+            E ie = n.getEdge(ex.target.prototype, ex.source.prototype);", "+            iex = createEdge(ex.target, ex.source, ie, n.getEdgeWeight(ie));", "+        } else {", "-", "-            ex.inverse  = iex;", "-            iex.inverse = ex;", "-", "-        } catch (IllegalAccessException e) {", "-            e.printStackTrace();", "-        } catch (InstantiationException e) {", "-            e.printStackTrace();", "+        ex.inverse  = iex;", "+        iex.inverse = ex;", "+"]}]}
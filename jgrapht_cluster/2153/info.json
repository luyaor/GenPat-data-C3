{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fc0b8fdd8afad815559d00c712fb3d1f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29506fd6201a368ef5ae90f6119ee853", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/dag/DirectedAcyclicGraph.java", "commitBeforeChange": "adaca642347b80042a0673a76d5c684c0cd29f4a", "commitAfterChange": "bfd68dc5cac3c6660f66170c69193fd7d58dd38b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public E addDagEdge(V fromVertex, V toVertex)         throws CycleFoundException", "signatureAfterChange": "     public E addDagEdge(V fromVertex, V toVertex)         throws CycleFoundException", "diff": ["-        Integer lb = topoOrderMap.getTopologicalIndex(toVertex);", "-        Integer ub = topoOrderMap.getTopologicalIndex(fromVertex);", "-", "-        if ((lb == null) || (ub == null)) {", "-            throw new IllegalArgumentException(", "-                \"vertices must be in the graph already!\");", "-        }", "-", "-        if (lb < ub) {", "-            Set<V> df = new HashSet<V>();", "-            Set<V> db = new HashSet<V>();", "-", "-            // Discovery", "-            Region affectedRegion = new Region(lb, ub);", "-            Visited visited = visitedFactory.getInstance(affectedRegion);", "-", "-            // throws CycleFoundException if there is a cycle", "-            dfsF(toVertex, df, visited, affectedRegion);", "-", "-            dfsB(fromVertex, db, visited, affectedRegion);", "-            reorder(df, db, visited);", "-            ++topologyUpdateCount; // if we do a reorder, than the topology has", "-                                   // been updated", "-        }", "+        updateDag(fromVertex, toVertex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69dbce76bcb8ed22dae6fa7cd6bbbd98", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/EdmondsKarpMaximumFlow.java", "commitBeforeChange": "c9321cdd6f93b7e8e241f348de2e975bf226c350", "commitAfterChange": "96bea297cb6d79531586150eeb7ae5f6fce792c9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public EdmondsKarpMaximumFlow(DirectedGraph<V, E> network,         double epsilon)", "signatureAfterChange": "     public EdmondsKarpMaximumFlow(DirectedGraph<V, E> network, double epsilon)", "diff": ["-    public EdmondsKarpMaximumFlow(DirectedGraph<V, E> network,", "-        double epsilon)", "+    public EdmondsKarpMaximumFlow(DirectedGraph<V, E> network, double epsilon)", "-        if (network == null) {", "-            throw new NullPointerException(\"network is null\");", "-        }", "-        if (epsilon <= 0) {", "-            throw new IllegalArgumentException(", "-                \"invalid epsilon (must be positive)\");", "-        }", "-        for (E e : network.edgeSet()) {", "-            if (network.getEdgeWeight(e) < -epsilon) {", "-                throw new IllegalArgumentException(", "-                    \"invalid capacity (must be non-negative)\");", "-            }", "-        }", "-", "-        this.network = network;", "-        this.epsilon = epsilon;", "-", "-        currentSource = -1;", "-        currentSink = -1;", "-", "-        buildInternalNetwork();", "+        engine = new org.jgrapht.alg.flow.EdmondsKarpMaximumFlow<V, E>(network, epsilon);"]}]}
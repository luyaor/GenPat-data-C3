{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "74ffab8c44187a85f26e4513f5d8db73", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a5c7bede9fa581be8100917210ed44f", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/MaximumWeightBipartiteMatching.java", "commitBeforeChange": "985760cbd642d0a5bdb9eca3c84e4565ecb8ceea", "commitAfterChange": "f79565a2a8d7f5186720bf4969b47a8431d60e9c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic MaximumWeightBipartiteMatching(final WeightedGraph<V,E> graph, Set<V> vertexPartition1, Set<V> vertexPartition2)", "signatureAfterChange": " \tpublic MaximumWeightBipartiteMatching(final WeightedGraph<V,E> graph, Set<V> vertexPartition1, Set<V> vertexPartition2)", "diff": ["+         */", "-\t\tinitializeVerticiesAndEdges();", "+\t\tinitializeVerticesAndEdges();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e0533bc27c2d6772fd1508c299d0475", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/RankingPathElementList.java", "commitBeforeChange": "32e726693126564b2b12d598445f88f10331d28b", "commitAfterChange": "329f725d890bc8909ea0cc963e9073bf1a9f56aa", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public boolean addPathElements(         RankingPathElementList<V, E> elementList,         E edge)", "signatureAfterChange": "     public boolean addPathElements(         RankingPathElementList<V, E> elementList,         E edge)", "diff": ["-            if (isAlreadyImprovedBythisEdge(edge, prevPathElement)", "+            if (isAlreadyImprovedByThisEdge(edge, prevPathElement)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf84fda25a901ce00d0e9a7e7bf7cd4f", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/AbstractExhaustiveIsomorphismInspector.java", "commitBeforeChange": "bc0edf459db61509a8a89769f512605e140e204b", "commitAfterChange": "be762e0954643fc21a24645a8b9b6765fa5b12ef", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate IsomorphismRelation findNextIsomorphicGraph()", "signatureAfterChange": "     private IsomorphismRelation findNextIsomorphicGraph()", "diff": ["-\t */", "-\tprivate IsomorphismRelation findNextIsomorphicGraph()", "-\t{", "-\t\tboolean result=false;", "-\t\tIsomorphismRelation resultRelation=null;", "-\t\tif (this.vertexPermuteIter!=null)", "-\t\t{", "-\t\t\t//System.out.println(\"Souce  LabelsGraph=\"+this.lableGraph1);", "-\t\t\twhile (this.vertexPermuteIter.hasNext())", "-\t\t\t{", "-\t\t\t\tcurrVertexPermutation = this.vertexPermuteIter.getNextSet();", "-\t\t\t\t//comapre vertexes", "-\t\t\t\tif (!areVertexSetsOfTheSameEqualityGroup(this.graph1VertexSet,currVertexPermutation))", "-\t\t\t\t{", "-\t\t\t\t\tcontinue;\t//this one is not iso, so try the next one", "-\t\t\t\t}", "-\t\t\t\t//compare edges", "-\t\t\t\tGraphOrdering currPermuteGraph = new GraphOrdering(currVertexPermutation,this.graph2EdgeSet);", "-\t\t\t\t//System.out.println(\"target LablesGraph=\"+currPermuteGraph);", "-\t\t\t\tif (this.lableGraph1.equalsByEdgeOrder(currPermuteGraph))", "-\t\t\t\t{", "-\t\t\t\t\t", "-\t\t\t\t\t//create result object .", "-\t\t\t\t\tresultRelation= new IsomorphismRelation(", "-\t\t\t\t\t\t\tgraph1VertexSet.toArray(),", "-\t\t\t\t\t\t\tcurrVertexPermutation.toArray(),", "-\t\t\t\t\t\t\t(Graph)graph1,", "-\t\t\t\t\t\t\t(Graph)graph2", "-\t\t\t\t\t\t\t);", "-\t\t\t\t\t//if the edge comparator exist , check euqivalce by it", "-\t\t\t\t\tboolean edgeEq = areAllEdgesEquivivalant(resultRelation,this.edgeComparator);", "-\t\t\t\t\tif (edgeEq) //only if euqivalant", "-\t\t\t\t\t{", "-\t\t\t\t\t\tresult=true;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\tif (result==true)", "-\t\t{", "-\t\t\treturn resultRelation;", "-\t\t}", "-\t\telse", "-\t\t{", "-\t\t\treturn null;", "-\t\t}", "-\t}", "+     */", "+    private IsomorphismRelation findNextIsomorphicGraph()", "+    {", "+        boolean result = false;", "+        IsomorphismRelation resultRelation = null;", "+        if (this.vertexPermuteIter != null) {", "+            // System.out.println(\"Souce  LabelsGraph=\"+this.lableGraph1);", "+            while (this.vertexPermuteIter.hasNext()) {", "+                currVertexPermutation = this.vertexPermuteIter.getNextSet();", "+", "+                // compare vertexes", "+                if (!areVertexSetsOfTheSameEqualityGroup(", "+                        this.graph1VertexSet,", "+                        currVertexPermutation)) {", "+                    continue; // this one is not iso, so try the next one", "+                }", "+", "+                // compare edges", "+                GraphOrdering currPermuteGraph =", "+                    new GraphOrdering(", "+                        currVertexPermutation,", "+                        this.graph2EdgeSet);", "+", "+                // System.out.println(\"target LablesGraph=\"+currPermuteGraph);", "+                if (this.lableGraph1.equalsByEdgeOrder(currPermuteGraph)) {", "+                    // create result object.", "+                    resultRelation =", "+                        new IsomorphismRelation(", "+                            graph1VertexSet.toArray(),", "+                            currVertexPermutation.toArray(),", "+                            (Graph) graph1,", "+                            (Graph) graph2);", "+", "+                    // if the edge comparator exists, check equivalence by it", "+                    boolean edgeEq =", "+                        areAllEdgesEquivalent(", "+                            resultRelation,", "+                            this.edgeComparator);", "+                    if (edgeEq) // only if equivalent", "+                    {", "+                        result = true;", "+                        break;", "+                    }", "+                }", "+            }", "+        }", "+", "+        if (result == true) {", "+            return resultRelation;", "+        } else {", "+            return null;", "+        }", "+    }"]}]}
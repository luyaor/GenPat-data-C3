{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "421b5b5800b0d62deb775ad168f43dbc", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b78fce60a9e9ebcc266a97e2ea5bcf4", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/graph/DefaultDirectedGraphTest.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testEdgeOrderDeterminism()", "signatureAfterChange": "     public void testEdgeOrderDeterminism()", "diff": ["-        DirectedGraph<String, DirEdge<String>> g = new DirectedMultigraph<String, DirEdge<String>>();", "+        DirectedGraph<String, DefaultEdge> g =", "+            new DirectedMultigraph<String, DefaultEdge>(", "+                DefaultEdge.class);", "-        Edge e1 = g.addEdge(m_v1, m_v2);", "-        Edge e2 = g.addEdge(m_v2, m_v3);", "-        Edge e3 = g.addEdge(m_v3, m_v1);", "+        DefaultEdge e1 = g.addEdge(m_v1, m_v2);", "+        DefaultEdge e2 = g.addEdge(m_v2, m_v3);", "+        DefaultEdge e3 = g.addEdge(m_v3, m_v1);", "-        Iterator<DirEdge<String>> iter = g.edgeSet().iterator();", "+        Iterator<DefaultEdge> iter = g.edgeSet().iterator();", "+", "+        // some bonus tests", "+        assertTrue(Graphs.testIncidence(g, e1, m_v1));", "+        assertTrue(Graphs.testIncidence(g, e1, m_v2));", "+        assertFalse(Graphs.testIncidence(g, e1, m_v3));", "+        assertEquals(m_v2, Graphs.getOppositeVertex(g, e1, m_v1));", "+        assertEquals(m_v1, Graphs.getOppositeVertex(g, e1, m_v2));", "+", "+        assertEquals(", "+            \"([v1, v2, v3], [(v1,v2), (v2,v3), (v3,v1)])\",", "+            g.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15183def82eaf97e3e184243fbeb0553", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/EdmondsKarpMaximumFlowTest.java", "commitBeforeChange": "45fdf2d06b2f697f414a6dba7b5708e895f3889b", "commitAfterChange": "9288cc6f229c6d1aa15398231bc75a90896d4262", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \t\r \tprivate void runTest(\r \t\t\tint[] tails,\r \t\t\tint[] heads,\r \t\t\tdouble[] capacities,\r \t\t\tint[] sources,\r \t\t\tint[] sinks,\r \t\t\tdouble[] expectedResults)", "signatureAfterChange": "\r \t\r \tprivate void runTest(\r \t\t\tint[] tails,\r \t\t\tint[] heads,\r \t\t\tdouble[] capacities,\r \t\t\tint[] sources,\r \t\t\tint[] sinks,\r \t\t\tdouble[] expectedResults)", "diff": ["+\t\tassertTrue(solver.getMaximumFlowValue() == null);\r", "+\t\tassertTrue(solver.getMaximumFlow() == null);\r", "+\t\t\t\tassertTrue(flow.get(e) >= -EdmondsKarpMaximumFlow.DEFAULT_EPSILON);\r", "+\t\t\t\tassertTrue(flow.get(e) <= network.getEdgeWeight(e) + EdmondsKarpMaximumFlow.DEFAULT_EPSILON);\r", "+\t\t\t}\r", "+\t\t\tfor (Integer v: network.vertexSet())\r", "+\t\t\t{\r", "+\t\t\t\tdouble balance = 0.0;\r", "+\t\t\t\tfor (DefaultWeightedEdge e: network.outgoingEdgesOf(v))\r", "+\t\t\t\t{\r", "+\t\t\t\t\tbalance -= flow.get(e);\r", "+\t\t\t\t}\r", "+\t\t\t\tfor (DefaultWeightedEdge e: network.incomingEdgesOf(v))\r", "+\t\t\t\t{\r", "+\t\t\t\t\tbalance += flow.get(e);\r", "+\t\t\t\t}\r", "+\t\t\t\tif (v.equals(sources[i]))\r", "+\t\t\t\t{\r", "+\t\t\t\t\tassertEquals(-flowValue, balance, EdmondsKarpMaximumFlow.DEFAULT_EPSILON);\r", "+\t\t\t\t}\r", "+\t\t\t\telse if (v.equals(sinks[i]))\r", "+\t\t\t\t{\r", "+\t\t\t\t\tassertEquals(flowValue, balance, EdmondsKarpMaximumFlow.DEFAULT_EPSILON);\r", "+\t\t\t\t}\r", "+\t\t\t\telse\r", "+\t\t\t\t{\r", "+\t\t\t\t\tassertEquals(0.0, balance, EdmondsKarpMaximumFlow.DEFAULT_EPSILON);\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25c6e7ac946c39ae4846312f8b32eaa6", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/graph/AbstractGraph.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 8, "signatureBeforeChange": "     protected String toStringFromSets(Collection<? extends V> vertexSet,         Collection<? extends Edge<V>> edgeSet)", "signatureAfterChange": "     protected String toStringFromSets(         Collection<? extends V> vertexSet,         Collection<? extends E> edgeSet,         boolean directed)", "diff": ["-    protected String toStringFromSets(Collection<? extends V> vertexSet,", "-        Collection<? extends Edge<V>> edgeSet)", "+    protected String toStringFromSets(", "+        Collection<? extends V> vertexSet,", "+        Collection<? extends E> edgeSet,", "+        boolean directed)", "-        return \"(\" + vertexSet.toString() + \", \" + edgeSet.toString() + \")\";", "+        List<String> renderedEdges = new ArrayList<String>();", "+", "+        StringBuffer sb = new StringBuffer();", "+        for (E e : edgeSet) {", "+            if ((e.getClass() != DefaultEdge.class)", "+                && (e.getClass() != DefaultWeightedEdge.class))", "+            {", "+                sb.append(e.toString());", "+                sb.append(\"=\");", "+            }", "+            if (directed) {", "+                sb.append(\"(\");", "+            } else {", "+                sb.append(\"{\");", "+            }", "+            sb.append(getEdgeSource(e));", "+            sb.append(\",\");", "+            sb.append(getEdgeTarget(e));", "+            if (directed) {", "+                sb.append(\")\");", "+            } else {", "+                sb.append(\"}\");", "+            }", "+            // REVIEW jvs 29-May-2006:  dump weight somewhere?", "+            renderedEdges.add(sb.toString());", "+            sb.setLength(0);", "+        }", "+        ", "+        return \"(\" + vertexSet + \", \" + renderedEdges + \")\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ef9e3b8c332851575928af72673b1e6", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/TransitiveReduction.java", "commitBeforeChange": "dc598aeea99bdfe17df08d02612a83157bf58529", "commitAfterChange": "8c43a5a1403dca2041b43ee00856b56c5e3d4dc0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void reduce()", "signatureAfterChange": "     public void reduce(final DirectedGraph<V, E> directedGraph)", "diff": ["-    public void reduce() {", "-        ", "-        int n = pathMatrix.length;", "-        int[][] transitivelyReducedMatrix = new int[n][n];", "-        System.arraycopy(pathMatrix, 0, transitivelyReducedMatrix, 0, pathMatrix.length);", "+     */", "+    public void reduce(final DirectedGraph<V, E> directedGraph) {", "+", "+        final List<V> vertices = new ArrayList<V>(directedGraph.vertexSet());", "+", "+        final int n = vertices.size();", "+", "+        BitSet[] originalMatrix = new BitSet[n];", "+        for (int i = 0; i < originalMatrix.length; i++) {", "+            originalMatrix[i] = new BitSet(n);", "+        }", "+", "+        // initialize matrix with zeros", "+        // 'By default, all bits in the set initially have the value false.'", "+        // cf. http://docs.oracle.com/javase/7/docs/api/java/util/BitSet.html", "+", "+        // initialize matrix with edges", "+        final Set<E> edges = directedGraph.edgeSet();", "+        for (final E edge : edges) {", "+            final V v1 = directedGraph.getEdgeSource(edge);", "+            final V v2 = directedGraph.getEdgeTarget(edge);", "+", "+            final int v_1 = vertices.indexOf(v1);", "+            final int v_2 = vertices.indexOf(v2);", "+", "+            originalMatrix[v_1].set(v_2);", "+        }", "+", "+        // create path matrix from original matrix", "+        final BitSet[] pathMatrix = originalMatrix;", "+", "+        transformToPathMatrix(pathMatrix);", "+", "+        // create reduced matrix from path matrix", "+        final BitSet[] transitivelyReducedMatrix = pathMatrix;", "+", "-        ", "-        for (int i = 0; i <n; i++) {", "-            for (int j = 0; j < n; j++) { ", "-                if (transitivelyReducedMatrix[i][j] == 0) {", "-                    // System.out.println(\"removing \"+vertices.get(i)+\" -> \"+vertices.get(j));", "-                    graph.removeEdge(graph.getEdge(vertices.get(i), vertices.get(j)));", "+", "+        // remove edges from the DirectedGraph which are not in the reduced", "+        // matrix", "+        for (int i = 0; i < n; i++) {", "+            for (int j = 0; j < n; j++) {", "+                if (!transitivelyReducedMatrix[i].get(j)) {", "+                    directedGraph.removeEdge(directedGraph.getEdge(vertices.get(i), vertices.get(j)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9136b46cca95a08197352c3397b51134", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/experimental/dag/DirectedAcyclicGraphTest.java", "commitBeforeChange": "49a0a0bda948a6b45a26ee9d253b12740a7bab2d", "commitAfterChange": "284fc7ad45b4c7b1575a67370ea974687b46d21f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void _testVisitedImplementationPerformance()", "signatureAfterChange": "     public void _testVisitedImplementationPerformance()", "diff": ["+                long bitSetDagTime = 0;", "+                            null);", "+                    DirectedAcyclicGraph<Long, DefaultEdge> bitSetDag =", "+                        new DirectedAcyclicGraph<Long, DefaultEdge>(", "+                            DefaultEdge.class,", "+                            new DirectedAcyclicGraph.VisitedBitSetImpl(),", "+                    ", "+                    long bitSetStart = System.nanoTime();", "+", "+                    for (Long vertex : sourceGraph.vertexSet()) {", "+                        bitSetDag.addVertex(vertex);", "+                    }", "+", "+                    for (DefaultEdge edge : sourceGraph.edgeSet()) {", "+                        Long edgeSource = sourceGraph.getEdgeSource(edge);", "+                        Long edgeTarget = sourceGraph.getEdgeTarget(edge);", "+", "+                        try {", "+                            bitSetDag.addDagEdge(edgeSource, edgeTarget);", "+                        } catch (DirectedAcyclicGraph.CycleFoundException e) {", "+                            // okay", "+                        }", "+                    }", "+", "+                    bitSetDagTime += System.nanoTime() - bitSetStart;", "+                System.out.println(", "+                    \"total BitSet time     =  \" + bitSetDagTime + \" ns\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3bd89b912163e1fa3b039759be05e59", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/VF2SubState.java", "commitBeforeChange": "b0ffaa521363d5faf1bf5b397f78265b9ab95ae6", "commitAfterChange": "3f8899078adfe5315dc0aeb978ba35bda0df1615", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public boolean isFeasiblePair()", "signatureAfterChange": "     public boolean isFeasiblePair()", "diff": ["+        String pairstr  = \"(\" + g1.getVertex(addVertex1) + \", \" +", "+                        g2.getVertex(addVertex2) + \")\",", "+               abortmsg = indent + \"isFeasiblePair> \" + pairstr + \" passt nicht ins aktuelle Matching\";", "-                                                    addVertex2, other2))", "+                                                    addVertex2, other2))    {", "+                    System.out.println(abortmsg);", "+                }", "-                                                    other2, addVertex2))", "+                                                    other2, addVertex2))    {", "+                    System.out.println(abortmsg);", "+                }", "-                if (!g1.hasEdge(addVertex1, other1))", "+                if (!g1.hasEdge(addVertex1, other1))    {", "+                    System.out.println(abortmsg);", "+                }", "-                if (!g1.hasEdge(other1, addVertex1))", "+                if (!g1.hasEdge(other1, addVertex1))    {", "+                    System.out.println(abortmsg);", "+                }", "-        return termIn1 >= termIn2 && termOut1 >= termOut2 && new1 >= new2;", "+        if (termIn1 >= termIn2 && termOut1 >= termOut2 && new1 >= new2) {", "+            System.out.println(indent + \"isFeasiblePair> \" + pairstr + \" passt\");", "+            return true;", "+        } else {", "+            System.out.println(abortmsg);", "+            return false;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6c759f0c408f9a9dfe607e0b0d128dc", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/graph/SimpleDirectedGraphTest.java", "commitBeforeChange": "8cf8651db5de9405d7887b55b67fde1d9e01e224", "commitAfterChange": "9ac63fa5d348b319d01e5aef6fad2b1fa76f8f81", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     public void testRemoveVertex(  )", "signatureAfterChange": "     public void testRemoveVertex(  )", "diff": ["-        init(  ); //TODO Implement removeVertex().", "+        init(  );", "+        assertEquals( 4, m_g4.vertexSet(  ).size(  ) );", "+        assertTrue( m_g4.removeVertex( m_v1 ) );", "+        assertEquals( 3, m_g4.vertexSet(  ).size(  ) );", "+", "+        assertEquals( 2, m_g4.edgeSet(  ).size(  ) );", "+        assertFalse( m_g4.removeVertex( m_v1 ) );", "+        assertTrue( m_g4.removeVertex( m_v2 ) );", "+        assertEquals( 1, m_g4.edgeSet(  ).size(  ) );", "+        assertTrue( m_g4.removeVertex( m_v3 ) );", "+        assertEquals( 0, m_g4.edgeSet(  ).size(  ) );", "+        assertEquals( 1, m_g4.vertexSet(  ).size(  ) );", "+        assertTrue( m_g4.removeVertex( m_v4 ) );", "+        assertEquals( 0, m_g4.vertexSet(  ).size(  ) );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3ff8e07b6928389cd1f083b12ef111b", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/ext/JGraphModelAdapter.java", "commitBeforeChange": "215e752a693cedd4e948342c99e93722b6fbe26a", "commitAfterChange": "56c09b98e6df528eeef0b8df9f8d932a1ba40192", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public JGraphModelAdapter( Graph jGraphTGraph,         AttributeMap defaultVertexAttributes,         AttributeMap defaultEdgeAttributes, CellFactory cellFactory )", "signatureAfterChange": "     public JGraphModelAdapter( Graph jGraphTGraph,         AttributeMap defaultVertexAttributes,         AttributeMap defaultEdgeAttributes, CellFactory cellFactory )", "diff": ["-        // call the deprecated constructor during transition period. ", "-        // when the deprecated constructor is delete, code will move here.", "-        this( jGraphTGraph, (Map) defaultVertexAttributes,", "-            (Map) defaultEdgeAttributes, cellFactory );", "-    }", "+        if( jGraphTGraph == null || defaultVertexAttributes == null ", "+                || defaultEdgeAttributes == null || cellFactory == null) {", "+            throw new IllegalArgumentException(\"null is NOT permitted\");", "+        }", "+        ", "+        m_defaultVertexAttributes = defaultVertexAttributes;", "+        m_defaultEdgeAttributes = defaultEdgeAttributes;", "+        m_cellFactory = cellFactory;", "+            ListenableGraph g = (ListenableGraph) jGraphTGraph;", "+            g.addGraphListener( new JGraphTListener(  ) );"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "555a411f3dc760df2caedeea1d11f05b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a12691d75a9bdfd54ac5dd34a0b9f4f", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/experimental/heap/AbstractHeap.java", "commitBeforeChange": "ede00ba6ca48a7a81231a62519a30fabb26ae338", "commitAfterChange": "f63e1142cae73862c9c4f7b6ce46225b40f3ef86", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public abstract void add(Object x);", "signatureAfterChange": "     public final void add( Object x )", "diff": ["-    public abstract void add(Object x);", "+     */", "+    public final void add( Object x ) {", "+        ElementPeer peer = createPeer( x );", "+        if( x instanceof HeapElement ) {", "+            ( (HeapElement) x ).setPeer( peer );", "+        else {", "+            if( _peerMap == null ) {", "+                _peerMap = new HashMap(  );", "+", "+            _peerMap.put( x, peer );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2005ea7e1caa918e2054aa7ff499a4cb", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/traverse/DepthFirstIterator.java", "commitBeforeChange": "618193dfca3ac4de3a61698028cfd965351c74a1", "commitAfterChange": "fff40bd4cd855e6b017814afe0a8444e1360aae0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected void encounterVertexAgain(V vertex, E edge)", "signatureAfterChange": "     protected void encounterVertexAgain(V vertex, E edge)", "diff": ["+        VisitColor color = getSeenData(vertex);", "+        if (color != VisitColor.WHITE) {", "+            // We've already visited this vertex; no need to mess with the", "+            // stack (either it's BLACK and not there at all, or it's GRAY", "+            // and therefore just a sentinel).", "+            return;", "+        }", "+        int i = stack.indexOf(vertex);", "+        // Since we've encountered it before, and it's still WHITE, it", "+        // *must* be on the stack.", "+        assert(i > -1);", "+        stack.remove(i);", "+        stack.add(vertex);"]}]}
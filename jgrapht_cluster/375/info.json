{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4762ffb3efdc24de459ccd537e9e18ad", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "630f9164466194c848bbafe2b136a41f", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/TarjanLowestCommonAncestor.java", "commitBeforeChange": "5b90c14876e7dae9d968e0fa6bf0f9d94c76d2b4", "commitAfterChange": "1ecfb8da9bf06c3b9397099246c9f12f1e4e9bca", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate List<V> calculate(final V u)", "signatureAfterChange": " \tprivate List<V> calculate(final V u)", "diff": ["-            if (g.getEdgeSource(vEdge).equals(u)) {", "-                V v = g.getEdgeTarget(vEdge);", "-                calculate(v);", "-                uf.union(u, v);", "-                ancestors.put(uf.find(u), u);", "-            }", "-            black.add(u);", "+\t\tif (g.getEdgeSource(vEdge).equals(u)) {", "+\t\t    V v = g.getEdgeTarget(vEdge);", "+\t\t    calculate(v);", "+\t\t    uf.union(u, v);", "+\t\t    ancestors.put(uf.find(u), u);", "+\t\t}", "+\t\tblack.add(u);", "-            Set<LcaRequestResponse<V>> uLRR = LRRMap.get(u);", "-            if (uLRR != null)", "-            {", "-                for (Iterator<LcaRequestResponse<V>> irr = uLRR.iterator(); irr.hasNext(); )", "-                {", "-                    LcaRequestResponse<V> rr = irr.next();", "-", "-                    if (black.contains(rr.getB()) && rr.getA().equals(u)) {", "-                        rr.setLca(ancestors.get(uf.find(rr.getB())));", "-                    }", "-                    if (black.contains(rr.getA()) && rr.getB().equals(u)) {", "-                        rr.setLca(ancestors.get(uf.find(rr.getA())));", "-                    }", "-", "-                    irr.remove();", "-                }", "-            }", "-        }", "+\t\tSet<LcaRequestResponse<V>> requestsForNodeU = lrrMap.get(u);", "+\t\tif (requestsForNodeU != null) {", "+\t\t    for (LcaRequestResponse<V> rr : requestsForNodeU) {", "+\t\t\tif (black.contains(rr.getB()) && rr.getA().equals(u)) {", "+\t\t\t    rr.setLca(ancestors.get(uf.find(rr.getB())));", "+\t\t\t}", "+\t\t\tif (black.contains(rr.getA()) && rr.getB().equals(u)) {", "+\t\t\t    rr.setLca(ancestors.get(uf.find(rr.getA())));", "+\t\t\t}", "+\t\t    }", "+\t\t    // once we've dealt with it - remove it (to save memory?)", "+\t\t    lrrMap.remove(u);", "+\t\t}", "+\t    }", "-\t    for (LcaRequestResponse<V> current : LRR) {", "-\t\t    result.add(current.getLca());", "+\t    for (LcaRequestResponse<V> current : lrr) {", "+\t\tresult.add(current.getLca());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c4eac31017eabdca198c1fb95d84f34", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/TarjanLowestCommonAncestor.java", "commitBeforeChange": "845e2456c1fa20cb74282fa3134fa19f26c97fba", "commitAfterChange": "f194f6c0d4d2ddad695900dd9fe0e34f5eaad70f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate List<V> calculate(final V u)", "signatureAfterChange": " \tprivate List<V> calculate(final V u)", "diff": ["-\t\tif (g.getEdgeSource(vEdge).equals(u)) {", "-\t\t    V v = g.getEdgeTarget(vEdge);", "-\t\t    calculate(v);", "-\t\t    uf.union(u, v);", "-\t\t    ancestors.put(uf.find(u), u);", "-\t\t}", "-\t\tblack.add(u);", "-\t\tfor (LcaRequestResponse<V> current : lrr)", "-\t\t    if (current.getLca() == null) {", "-\t\t\tif (black.contains(current.getA()) && current.getB().equals(u)) {", "-\t\t\t    current.setLca(ancestors.get(uf.find(current.getA())));", "-\t\t\t}", "-\t\t\tif (black.contains(current.getB()) && current.getA().equals(u)) {", "-\t\t\t    current.setLca(ancestors.get(uf.find(current.getB())));", "-\t\t\t}", "-\t\t    }", "-\t    }", "+            if (g.getEdgeSource(vEdge).equals(u)) {", "+                V v = g.getEdgeTarget(vEdge);", "+                calculate(v);", "+                uf.union(u, v);", "+                ancestors.put(uf.find(u), u);", "+            }", "+            black.add(u);", "+", "+            Set<LcaRequestResponse<V>> uLRR = LRRMap.get(u);", "+            if (uLRR != null)", "+            {", "+                for (Iterator<LcaRequestResponse<V>> irr = uLRR.iterator(); irr.hasNext(); )", "+                {", "+                    LcaRequestResponse<V> rr = irr.next();", "+", "+                    if (black.contains(rr.getB()) && rr.getA().equals(u)) {", "+                        rr.setLca(ancestors.get(uf.find(rr.getB())));", "+                    }", "+                    if (black.contains(rr.getA()) && rr.getB().equals(u)) {", "+                        rr.setLca(ancestors.get(uf.find(rr.getA())));", "+                    }", "+", "+                    irr.remove();", "+                }", "+            }", "+        }", "+", "-\t    for (LcaRequestResponse<V> current : lrr) {", "-\t\tresult.add(current.getLca());", "+\t    for (LcaRequestResponse<V> current : LRR) {", "+\t\t    result.add(current.getLca());"]}]}
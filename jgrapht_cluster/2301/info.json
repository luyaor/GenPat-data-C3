{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c7c3f269fb7ed9aa3415c67ebf445ed3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac834db538c8c555dbeacb7f6569a300", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/ext/JGraphModelAdapter.java", "commitBeforeChange": "a4491f801ff4eba32d8029dda18c582844b268e3", "commitAfterChange": "dca8f0b0b2b997b3562b349da681aa495eb852bf", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public JGraphModelAdapter( Graph g, Map defaultVertexAttributes,         Map defaultEdgeAttributes, CellFactory cellFactory )", "signatureAfterChange": "     public JGraphModelAdapter( Graph jGraphTGraph, Map defaultVertexAttributes,         Map defaultEdgeAttributes, CellFactory cellFactory )", "diff": ["-    public JGraphModelAdapter( Graph g, Map defaultVertexAttributes,", "+    public JGraphModelAdapter( Graph jGraphTGraph, Map defaultVertexAttributes,", "+", "+        m_jtGraph = jGraphTGraph;", "-            m_defaultEdgeAttributes = createDefaultEdgeAttributes( g );", "+            m_defaultEdgeAttributes =", "+                createDefaultEdgeAttributes( jGraphTGraph );", "-        if( g instanceof ListenableGraph ) {", "-            m_graphListener = new MyGraphListener(  );", "-            ( (ListenableGraph) g ).addGraphListener( m_graphListener );", "+        if( jGraphTGraph instanceof ListenableGraph ) {", "+            m_jtGraphListener = new JGraphTListener(  );", "+            ( (ListenableGraph) jGraphTGraph ).addGraphListener( m_jtGraphListener );", "-        for( Iterator i = g.vertexSet(  ).iterator(  ); i.hasNext(  ); ) {", "+        this.addGraphModelListener( new JGraphListener(  ) );", "+", "+        for( Iterator i = jGraphTGraph.vertexSet(  ).iterator(  );", "+                i.hasNext(  ); ) {", "-        for( Iterator i = g.edgeSet(  ).iterator(  ); i.hasNext(  ); ) {", "-            addJGraphTEdge( (Edge) i.next(  ) );", "+        for( Iterator i = jGraphTGraph.edgeSet(  ).iterator(  ); i.hasNext(  ); ) {", "+            addJGraphTEdge( (org._3pq.jgrapht.Edge) i.next(  ) );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d10bfec3b43ae2e66c00967bcc6f81fe", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/GraphOrdering.java", "commitBeforeChange": "7518fda5e34fbd0d30800f00a7bcae8e402c0396", "commitAfterChange": "b0ffaa521363d5faf1bf5b397f78265b9ab95ae6", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tpublic int[] getEdgeOrder(E e)", "signatureAfterChange": "      public int[] getEdgeNumbers(E e)", "diff": ["-\t", "-\tpublic int[] getEdgeOrder(E e)\t{", "-\t\tV v1 = graph.getEdgeSource(e),", "-\t\t  v2 = graph.getEdgeTarget(e);", "-\t\t", "-\t\tint[] edge = new int[2];", "-\t\tedge[0] = mapVertexToOrder.get(v1);", "-\t\tedge[1] = mapVertexToOrder.get(v2);", "-\t\t", "-\t\treturn edge;", "-\t}", "+", "+    public int[] getEdgeNumbers(E e) {", "+        V v1 = graph.getEdgeSource(e), v2 = graph.getEdgeTarget(e);", "+", "+        int[] edge = new int[2];", "+        edge[0] = mapVertexToOrder.get(v1);", "+        edge[1] = mapVertexToOrder.get(v2);", "+", "+        return edge;", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b6ee4cfce8c1e76385b87e4cb5358e7a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b78fce60a9e9ebcc266a97e2ea5bcf4", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/graph/DefaultDirectedGraphTest.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testEdgeOrderDeterminism()", "signatureAfterChange": "     public void testEdgeOrderDeterminism()", "diff": ["-        DirectedGraph<String, DirEdge<String>> g = new DirectedMultigraph<String, DirEdge<String>>();", "+        DirectedGraph<String, DefaultEdge> g =", "+            new DirectedMultigraph<String, DefaultEdge>(", "+                DefaultEdge.class);", "-        Edge e1 = g.addEdge(m_v1, m_v2);", "-        Edge e2 = g.addEdge(m_v2, m_v3);", "-        Edge e3 = g.addEdge(m_v3, m_v1);", "+        DefaultEdge e1 = g.addEdge(m_v1, m_v2);", "+        DefaultEdge e2 = g.addEdge(m_v2, m_v3);", "+        DefaultEdge e3 = g.addEdge(m_v3, m_v1);", "-        Iterator<DirEdge<String>> iter = g.edgeSet().iterator();", "+        Iterator<DefaultEdge> iter = g.edgeSet().iterator();", "+", "+        // some bonus tests", "+        assertTrue(Graphs.testIncidence(g, e1, m_v1));", "+        assertTrue(Graphs.testIncidence(g, e1, m_v2));", "+        assertFalse(Graphs.testIncidence(g, e1, m_v3));", "+        assertEquals(m_v2, Graphs.getOppositeVertex(g, e1, m_v1));", "+        assertEquals(m_v1, Graphs.getOppositeVertex(g, e1, m_v2));", "+", "+        assertEquals(", "+            \"([v1, v2, v3], [(v1,v2), (v2,v3), (v3,v1)])\",", "+            g.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6cc73e364ba7ff23c3d42dd79d68c71", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/FloydWarshallShortestPathsTest.java", "commitBeforeChange": "c10692c8825bd6a23a80be695fc74f32cb5058c3", "commitAfterChange": "c164d5ff2c90e3264f68d1cabaf47b148cefd48c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "          public void testWeightedEdges()", "signatureAfterChange": "          public void testWeightedEdges()", "diff": ["-    \tSimpleGraph<String, DefaultWeightedEdge> weighted = ", "-    \t\tnew SimpleGraph<String, DefaultWeightedEdge>(DefaultWeightedEdge.class);", "+    \tSimpleDirectedGraph<String, DefaultWeightedEdge> weighted =", "+    \t\tnew SimpleDirectedGraph<String, DefaultWeightedEdge>(DefaultWeightedEdge.class);", "-    \tweighted.setEdgeWeight(weighted.addEdge(\"a\", \"b\"), 5.0);", "-    \tFloydWarshallShortestPaths<String, DefaultWeightedEdge> fw =", "-                new FloydWarshallShortestPaths<String, DefaultWeightedEdge>(weighted);", "+        DefaultWeightedEdge edge=weighted.addEdge(\"a\", \"b\");", "+    \tweighted.setEdgeWeight(edge, 5.0);", "+    \tFloydWarshallShortestPaths<String, DefaultWeightedEdge> fw =new FloydWarshallShortestPaths<String, DefaultWeightedEdge>(weighted);", "+        GraphPath<String, DefaultWeightedEdge> path=fw.getShortestPath(\"a\", \"b\");", "+        assertNotNull(path);", "+        assertEquals(Arrays.asList(edge), path.getEdgeList());", "+        assertEquals(\"a\", path.getStartVertex());", "+        assertEquals(\"b\", path.getEndVertex());", "+        assertEquals(5.0, path.getWeight());", "+        assertEquals(weighted, path.getGraph());", "+        assertNull(fw.getShortestPath(\"b\", \"a\"));"]}]}
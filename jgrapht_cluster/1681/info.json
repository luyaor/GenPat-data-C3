{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "46a06616b51c78279239f82993fef8ef", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b2ced5b7b39f424d341c78a661bc7c2", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/alg/ConnectivityInspectorTest.java", "commitBeforeChange": "e13230e0f77fc038e089d77cd6f28783ffa1581b", "commitAfterChange": "1697a09983092630eaecc24fb423d2a519f7c71e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public Pseudograph create(  )", "signatureAfterChange": "     public Pseudograph create(  )", "diff": ["-        assertEquals( g.edgeSet(  ).size(  ), 3 );", "-        assertEquals( m_e3_b, null );", "+        assertEquals( g.edgeSet(  ).size(  ), 4 );", "+        assertNotNull( m_e3_b );", "-        assertEquals( g.edgeSet(  ).size(  ), 4 );", "+        assertEquals( g.edgeSet(  ).size(  ), 5 );", "+        m_u = g.addEdge( m_v1, m_v1 );", "+        assertEquals( g.edgeSet(  ).size(  ), 6 );", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c060ba6be4717c4d5d19b684d41994b1", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/graph/SimpleDirectedGraphTest.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testAddEdgeEdge()", "signatureAfterChange": "     public void testAddEdgeEdge()", "diff": ["-            m_g1.addEdge(m_eLoop); // loops not allowed", "+            m_g1.addEdge(m_v1, m_v1, m_eLoop); // loops not allowed", "-            m_g3.addEdge(null);", "+            m_g3.addEdge(m_v1, m_v1, null);", "-        DirectedEdge<String> e = m_eFactory.createEdge(m_v2, m_v1);", "+        DefaultEdge e = m_eFactory.createEdge(m_v2, m_v1);", "-            m_g1.addEdge(e); // no such vertex in graph", "+            m_g1.addEdge(\"ya\", \"ya\", e); // no such vertex in graph", "-        assertEquals(false, m_g2.addEdge(e));", "-        assertEquals(false, m_g3.addEdge(e));", "-        assertEquals(true, m_g4.addEdge(e));", "+        assertEquals(false, m_g2.addEdge(m_v2, m_v1, e));", "+        assertEquals(false, m_g3.addEdge(m_v2, m_v1, e));", "+        assertEquals(true, m_g4.addEdge(m_v2, m_v1, e));"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d46ce11bcb855d87197d86dbfd112ea5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24bdb78b147ae035753c394389c018d1", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/KruskalMinimumSpanningTree.java", "commitBeforeChange": "b5348f8a80e818c9b0dd566a68eb23f3eca4389b", "commitAfterChange": "29039f1f20cd2b1397eba3afdb9fc72182dd2062", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public KruskalMinimumSpanningTree(final Graph<V,E> graph)", "signatureAfterChange": "     public KruskalMinimumSpanningTree(final Graph<V, E> graph)", "diff": ["-    public KruskalMinimumSpanningTree(final Graph<V,E> graph)", "+    public KruskalMinimumSpanningTree(final Graph<V, E> graph)", "-        Collections.sort(allEdges, new Comparator<E>(){", "-            @Override", "-            public int compare(E edge1, E edge2)", "-            {", "-                return Double.valueOf(graph.getEdgeWeight(edge1)).compareTo(graph.getEdgeWeight(edge2));", "-            }", "-        });", "-        ", "+        Collections.sort(", "+            allEdges,", "+            new Comparator<E>() {", "+                @Override public int compare(E edge1, E edge2)", "+                {", "+                    return Double.valueOf(graph.getEdgeWeight(edge1)).compareTo(", "+                        graph.getEdgeWeight(edge2));", "+                }", "+            });", "+", "-        ", "-        for(E edge:allEdges)", "-        {", "+", "+        for (E edge : allEdges) {", "-            if(forest.find(source).equals(forest.find(target)))", "+            if (forest.find(source).equals(forest.find(target))) {", "-            ", "-            forest.union(source,target);", "+            }", "+", "+            forest.union(source, target);", "-        }        ", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55369ed1c3af14a07f46b89d808589d1", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/EdmondsBlossomShrinking.java", "commitBeforeChange": "9681504586e103d7dc5a4670b6f76ddb37e3977b", "commitAfterChange": "544318759e8ef143a1f7ce54d385b8bb1d1e42ef", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private V findPath(UndirectedGraph<V, E> g, V root)", "signatureAfterChange": "      private V findPath(V root)", "diff": ["-    private V findPath(UndirectedGraph<V, E> g, V root)", "+    private V findPath(V root)", "-        for (V i : g.vertexSet()) {", "+        for (V i : graph.vertexSet()) {", "-            for (V to : g.vertexSet()) {", "-                if (!g.containsEdge(v, to)) {", "-                    continue;", "-                }", "-", "+            for (E e : graph.edgesOf(v)) {", "+                V to = graph.getEdgeSource(e);", "+                if (to == v)", "+                    to = graph.getEdgeTarget(e);", "+//            for (V to : graph.vertexSet()) {", "+//                if (!graph.containsEdge(v, to)) {", "+//                    continue;", "+//                }", "-                    V curbase = lca(g, v, to);", "+                    V curbase = lca(graph, v, to);", "-                    markPath(g, v, curbase, to);", "-                    markPath(g, to, curbase, v);", "+                    markPath(v, curbase, to);", "+                    markPath(to, curbase, v);", "-                    for (V i : g.vertexSet()) {", "+                    for (V i : graph.vertexSet()) {"]}]}
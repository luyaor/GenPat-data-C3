{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "840e6c4c6ae600411934fd03a9c75426", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b78fce60a9e9ebcc266a97e2ea5bcf4", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/graph/DefaultDirectedGraphTest.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testEdgeOrderDeterminism()", "signatureAfterChange": "     public void testEdgeOrderDeterminism()", "diff": ["-        DirectedGraph<String, DirEdge<String>> g = new DirectedMultigraph<String, DirEdge<String>>();", "+        DirectedGraph<String, DefaultEdge> g =", "+            new DirectedMultigraph<String, DefaultEdge>(", "+                DefaultEdge.class);", "-        Edge e1 = g.addEdge(m_v1, m_v2);", "-        Edge e2 = g.addEdge(m_v2, m_v3);", "-        Edge e3 = g.addEdge(m_v3, m_v1);", "+        DefaultEdge e1 = g.addEdge(m_v1, m_v2);", "+        DefaultEdge e2 = g.addEdge(m_v2, m_v3);", "+        DefaultEdge e3 = g.addEdge(m_v3, m_v1);", "-        Iterator<DirEdge<String>> iter = g.edgeSet().iterator();", "+        Iterator<DefaultEdge> iter = g.edgeSet().iterator();", "+", "+        // some bonus tests", "+        assertTrue(Graphs.testIncidence(g, e1, m_v1));", "+        assertTrue(Graphs.testIncidence(g, e1, m_v2));", "+        assertFalse(Graphs.testIncidence(g, e1, m_v3));", "+        assertEquals(m_v2, Graphs.getOppositeVertex(g, e1, m_v1));", "+        assertEquals(m_v1, Graphs.getOppositeVertex(g, e1, m_v2));", "+", "+        assertEquals(", "+            \"([v1, v2, v3], [(v1,v2), (v2,v3), (v3,v1)])\",", "+            g.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3bd89b912163e1fa3b039759be05e59", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/VF2SubState.java", "commitBeforeChange": "b0ffaa521363d5faf1bf5b397f78265b9ab95ae6", "commitAfterChange": "3f8899078adfe5315dc0aeb978ba35bda0df1615", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public boolean isFeasiblePair()", "signatureAfterChange": "     public boolean isFeasiblePair()", "diff": ["+        String pairstr  = \"(\" + g1.getVertex(addVertex1) + \", \" +", "+                        g2.getVertex(addVertex2) + \")\",", "+               abortmsg = indent + \"isFeasiblePair> \" + pairstr + \" passt nicht ins aktuelle Matching\";", "-                                                    addVertex2, other2))", "+                                                    addVertex2, other2))    {", "+                    System.out.println(abortmsg);", "+                }", "-                                                    other2, addVertex2))", "+                                                    other2, addVertex2))    {", "+                    System.out.println(abortmsg);", "+                }", "-                if (!g1.hasEdge(addVertex1, other1))", "+                if (!g1.hasEdge(addVertex1, other1))    {", "+                    System.out.println(abortmsg);", "+                }", "-                if (!g1.hasEdge(other1, addVertex1))", "+                if (!g1.hasEdge(other1, addVertex1))    {", "+                    System.out.println(abortmsg);", "+                }", "-        return termIn1 >= termIn2 && termOut1 >= termOut2 && new1 >= new2;", "+        if (termIn1 >= termIn2 && termOut1 >= termOut2 && new1 >= new2) {", "+            System.out.println(indent + \"isFeasiblePair> \" + pairstr + \" passt\");", "+            return true;", "+        } else {", "+            System.out.println(abortmsg);", "+            return false;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3ff8e07b6928389cd1f083b12ef111b", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/ext/JGraphModelAdapter.java", "commitBeforeChange": "215e752a693cedd4e948342c99e93722b6fbe26a", "commitAfterChange": "56c09b98e6df528eeef0b8df9f8d932a1ba40192", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public JGraphModelAdapter( Graph jGraphTGraph,         AttributeMap defaultVertexAttributes,         AttributeMap defaultEdgeAttributes, CellFactory cellFactory )", "signatureAfterChange": "     public JGraphModelAdapter( Graph jGraphTGraph,         AttributeMap defaultVertexAttributes,         AttributeMap defaultEdgeAttributes, CellFactory cellFactory )", "diff": ["-        // call the deprecated constructor during transition period. ", "-        // when the deprecated constructor is delete, code will move here.", "-        this( jGraphTGraph, (Map) defaultVertexAttributes,", "-            (Map) defaultEdgeAttributes, cellFactory );", "-    }", "+        if( jGraphTGraph == null || defaultVertexAttributes == null ", "+                || defaultEdgeAttributes == null || cellFactory == null) {", "+            throw new IllegalArgumentException(\"null is NOT permitted\");", "+        }", "+        ", "+        m_defaultVertexAttributes = defaultVertexAttributes;", "+        m_defaultEdgeAttributes = defaultEdgeAttributes;", "+        m_cellFactory = cellFactory;", "+            ListenableGraph g = (ListenableGraph) jGraphTGraph;", "+            g.addGraphListener( new JGraphTListener(  ) );"]}]}
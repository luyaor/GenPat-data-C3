{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea2b5da34cb607d0979349bc2ee214ea", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d804614a2bf6661827f3f85afcf9e35", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/graph/AbstractGraph.java", "commitBeforeChange": "2cb98d0c1094fff00a22763c10d4fd59f71eaae5", "commitAfterChange": "4efd29b14c87e09927591be73abc578e10bee63c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public int hashCode()", "signatureAfterChange": "     public int hashCode()", "diff": ["-            int part = 27;", "-", "-            if (!(e instanceof IntrusiveEdge)) {", "-               part = 27 * part + e.hashCode();", "-            } else {", "-                // we should check if there is any overridden hashCode() method in hierarchy", "-                // so, users can write their own edge classes as subclasses of DefaultEdge", "-                // with custom implementation of hashCode() method (VK);", "-                try {", "-                    Method hashCode = e.getClass().getMethod(\"hashCode\", new Class<?>[0]);", "-                    if (hashCode.getDeclaringClass() != Object.class) {", "-                        part = 27 * part + e.hashCode();", "-                    }", "-                } catch (NoSuchMethodException ignored) {", "-                    // should never happens, we always have hashCode() method (VK);", "-                }", "-            }", "+            int part = e.hashCode();", "-            // this is a \"pairing function\" (see details here: http://en.wikipedia.org/wiki/Pairing_function) (VK);", "-            int pairing = ((source + target) * (source + target + 1) / 2) + target;", "+            // see http://en.wikipedia.org/wiki/Pairing_function (VK);", "+            int pairing = ((source + target) * ", "+                (source + target + 1) / 2) + target;", "-            // we also should add hash code of weighted edge to result (VK);", "-            if (e instanceof DefaultWeightedEdge) {", "-                long weight = (long) getEdgeWeight(e);", "-                part = 27 * part + (int) (weight ^ (weight >>> 32));", "-            }", "+            long weight = (long) getEdgeWeight(e);", "+            part = 27 * part + (int) (weight ^ (weight >>> 32));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aaff4bd8c3dcd61799f8ef50a091f39a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/graph/AbstractGraph.java", "commitBeforeChange": "8413c0621739087aaa2597f10b6a867735224f2d", "commitAfterChange": "39b789d7e41c82b46b5b0099b4e021514410c6a5", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public int hashCode()", "signatureAfterChange": "     public int hashCode()", "diff": ["-        int result = vertexSet().hashCode();", "+        int hash = vertexSet().hashCode();", "-            int source = getEdgeSource(e).hashCode();", "-            int target = getEdgeTarget(e).hashCode();", "-                part = 27 * part + e.hashCode(); ", "+               part = 27 * part + e.hashCode();", "+            } else {", "+                // we should check if there is any overridden hashCode() method in hierarchy", "+                // so, users can write their own edge classes as subclasses of DefaultEdge", "+                // with custom implementation of hashCode() method (VK);", "+                try {", "+                    Method hashCode = e.getClass().getMethod(\"hashCode\", new Class<?>[0]);", "+                    if (hashCode.getDeclaringClass() != Object.class) {", "+                        part = 27 * part + e.hashCode();", "+                    }", "+                } catch (NoSuchMethodException ignored) {", "+                    // should never happens, we always have hashCode() method (VK);", "+                }", "-            // this is a \"pairing function\" (see details here: http://en.wikipedia.org/wiki/Pairing_function) (VK)", "+            int source = getEdgeSource(e).hashCode();", "+            int target = getEdgeTarget(e).hashCode();", "+", "+            // this is a \"pairing function\" (see details here: http://en.wikipedia.org/wiki/Pairing_function) (VK);", "-            long weight = (long) getEdgeWeight(e);", "-            part = 27 * part + (int) (weight ^ (weight >>> 32));", "+            // we also should add hash code of weighted edge to result (VK);", "+            if (e instanceof DefaultWeightedEdge) {", "+                long weight = (long) getEdgeWeight(e);", "+                part = 27 * part + (int) (weight ^ (weight >>> 32));", "+            }", "-            result += part;", "+            hash += part;", "-        return result;", "+        return hash;"]}]}
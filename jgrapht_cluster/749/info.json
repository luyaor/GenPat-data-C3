{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a15d56bd0b4cb1a25f628ef1cd80eb0d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17e2ccc47bfa0fdabe04ac2bef22f72c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/RankingPathElementList.java", "commitBeforeChange": "9891701e497d82d53bd2f7288493ff266ebc25b7", "commitAfterChange": "d3ef70f973371a0a14daeb6ea1ebefb2fcfefa11", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private boolean isSimplePath(         RankingPathElement<V, E> prevPathElement,         E edge)", "signatureAfterChange": "     private boolean isSimplePath(         RankingPathElement<V, E> prevPathElement,         E edge)", "diff": ["+        V endVertex = Graphs.getOppositeVertex(this.graph, edge,", "+            prevPathElement.getVertex());", "+        assert (endVertex.equals(this.vertex));", "+", "-        while (pathElementToTest.getPrevEdge() != null) {", "-            if (pathElementToTest.getVertex() == this.vertex) {", "+        do {", "+            if (pathElementToTest.getVertex().equals(endVertex)) {", "-        }", "+        } while (pathElementToTest != null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe243997991ab08716055fcc3ec20f10", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/NeighborIndexTest.java", "commitBeforeChange": "9aa77050b482cd35622f2b052f283cbdea563cf6", "commitAfterChange": "71029068583c81632b4d5180b7465932b933e753", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testDirectedNeighborSet()", "signatureAfterChange": "      public void testDirectedNeighborSet()", "diff": ["+        Set q = index.successorsOf(V3);", "+        ", "+        assertEquals(1, q.size());", "+        assertEquals(true, q.contains(V1));", "+        ", "+        assertEquals(0, q.size());"]}]}
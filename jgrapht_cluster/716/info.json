{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2df6b9290f7c247b8a83ab95be19e46e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac88d8b48cd5c0da6e49a294ec6a5252", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/KShortestPaths.java", "commitBeforeChange": "af61e5d97b8783c377d8616e4786a4542c35b8a3", "commitAfterChange": "f9d1a7195d2b619df2846dc654b2682aee4bacc5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public List<RankingPathElement<V, E>> getPathElements(V endVertex)", "signatureAfterChange": "     public List<GraphPath<V, E>> getPaths(V endVertex)", "diff": ["-    public List<RankingPathElement<V, E>> getPathElements(V endVertex)", "+    public List<GraphPath<V, E>> getPaths(V endVertex)", "-        return iter.getPathElements(endVertex);", "+        List<RankingPathElement<V, E>> list = iter.getPathElements(endVertex);", "+", "+        if (list == null) {", "+            return null;", "+        }", "+", "+        List<GraphPath<V, E>> pathList = new ArrayList<GraphPath<V, E>>();", "+", "+        for (RankingPathElement<V, E> element : list) {", "+            pathList.add(new PathWrapper(element));", "+        }", "+", "+        return pathList;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0385d27315ceb4adb1e6657d04e52c8", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/FloydWarshallShortestPaths.java", "commitBeforeChange": "e5d892ea988755999c21c3831434c4fc251611da", "commitAfterChange": "60fae450bc7df1fe1188f2da01fd4eefb4912b4d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private int index(V vertex)", "signatureAfterChange": "     public List<GraphPath<V, E>> getShortestPaths(V v)", "diff": ["-    private int index(V vertex)", "-    {", "-        Integer index = indices.get(vertex);", "-        if (index == null) {", "-            indices.put(vertex, nextIndex);", "-            index = nextIndex++;", "-        return index;", "+     */", "+    public List<GraphPath<V, E>> getShortestPaths(V v) {", "+        if (v == null)", "+            return null;", "+", "+        List<GraphPath<V, E>> found = new ArrayList<GraphPath<V, E>>();", "+        for (VertexPair<V> pair : paths.keySet()) {", "+            if (pair.hasVertex(v)) {", "+                found.add(paths.get(pair));", "+            }", "+        }", "+", "+        return found;"]}]}
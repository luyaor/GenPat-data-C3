{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b8ed1fd4cf88903f93ab171662fb65b4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40f897dac3d18891cddbaec151936582", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/alg/isomorphism/IsomorphismInspectorTest.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void testLinear4vertexIsomorphicGraph()", "signatureAfterChange": "      public void testLinear4vertexIsomorphicGraph()", "diff": ["-        Graph g1 = new DefaultDirectedGraph();", "+        Graph<Integer,DirectedEdge<Integer>>", "+        \tg1 = new DefaultDirectedGraph<Integer,DirectedEdge<Integer>>();", "-        Graph g2 = new DefaultDirectedGraph();", "+        Graph<Integer,DirectedEdge<Integer>>", "+        \tg2 = new DefaultDirectedGraph<Integer,DirectedEdge<Integer>>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ec0c4e9e83e5eac442d889b63f15c2f", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/EquivalenceIsomorphismInspector.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public EquivalenceIsomorphismInspector(         Graph graph1,         Graph graph2,         EquivalenceComparator vertexChecker,         EquivalenceComparator edgeChecker)", "signatureAfterChange": "     public EquivalenceIsomorphismInspector(         Graph<V,E> graph1,         Graph<V,E> graph2,         EquivalenceComparator<? super V,? super Graph<? super V,? super E>> vertexChecker,         EquivalenceComparator<? super E,? super Graph<? super V,? super E>> edgeChecker)", "diff": ["-        Graph graph1,", "-        Graph graph2,", "-        EquivalenceComparator vertexChecker,", "-        EquivalenceComparator edgeChecker)", "+        Graph<V,E> graph1,", "+        Graph<V,E> graph2,", "+        // XXX hb 060128: FOllowing parameter may need Graph<? super V,? super E>", "+        EquivalenceComparator<? super V,? super Graph<? super V,? super E>> vertexChecker,", "+        EquivalenceComparator<? super E,? super Graph<? super V,? super E>> edgeChecker)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6cd228ac1d95c1d15c601c061b502952", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/DijkstraShortestPathTest.java", "commitBeforeChange": "16285fc735125684f525244baa1af05c7e3b89ee", "commitAfterChange": "ff54bec324648e52ae4dae6f81ce89c54758dce1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void testConstructor()", "signatureAfterChange": "     public void testConstructor()", "diff": ["-        DijkstraShortestPath path;", "-        Graph g = create();", "+        DijkstraShortestPath<String,DefaultWeightedEdge> path;", "+        Graph<String,DefaultWeightedEdge> g = create();", "-        path = new DijkstraShortestPath(g, V3, V4, Double.POSITIVE_INFINITY);", "+        path = new DijkstraShortestPath<String,DefaultWeightedEdge>(", "+            g, V3, V4, Double.POSITIVE_INFINITY);", "-        path = new DijkstraShortestPath(g, V3, V4, 7);", "+        path = new DijkstraShortestPath<String,DefaultWeightedEdge>(", "+            g, V3, V4, 7);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8347959b967fa4d13ffea2d6b614c79e", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/PermutationIsomorphismInspector.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public PermutationIsomorphismInspector(         Graph graph1,         Graph graph2,         EquivalenceComparator vertexChecker,         EquivalenceComparator edgeChecker)", "signatureAfterChange": "     public PermutationIsomorphismInspector(         Graph<V,E> graph1,         Graph<V,E> graph2,         EquivalenceComparator<? super V,? super Graph<? super V,? super E>> vertexChecker,         EquivalenceComparator<? super E,? super Graph<? super V,? super E>> edgeChecker)", "diff": ["-        Graph graph1,", "-        Graph graph2,", "-        EquivalenceComparator vertexChecker,", "-        EquivalenceComparator edgeChecker)", "+        Graph<V,E> graph1,", "+        Graph<V,E> graph2,", "+        // XXX hb 060128: FOllowing parameter may need Graph<? super V,? super E>", "+        EquivalenceComparator<? super V,? super Graph<? super V,? super E>> vertexChecker,", "+        EquivalenceComparator<? super E,? super Graph<? super V,? super E>> edgeChecker)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a35f801d651fd254f9af948e6e38be4", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/AbstractExhaustiveIsomorphismInspector.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public AbstractExhaustiveIsomorphismInspector(         Graph graph1,         Graph graph2,         EquivalenceComparator vertexChecker,         EquivalenceComparator edgeChecker)", "signatureAfterChange": "     public AbstractExhaustiveIsomorphismInspector(         Graph<V,E> graph1,         Graph<V,E> graph2,         EquivalenceComparator<? super V,? super Graph<? super V,? super E>> vertexChecker,         EquivalenceComparator<? super E,? super Graph<? super V,? super E>> edgeChecker)", "diff": ["-        Graph graph1,", "-        Graph graph2,", "-        EquivalenceComparator vertexChecker,", "-        EquivalenceComparator edgeChecker)", "+        Graph<V,E> graph1,", "+        Graph<V,E> graph2,", "+        // XXX hb 060128: FOllowing parameter may need Graph<? super V,? super E>", "+        EquivalenceComparator<? super V,? super Graph<? super V,? super E>> vertexChecker,", "+        EquivalenceComparator<? super E,? super Graph<? super V,? super E>> edgeChecker)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8d3924aa8cce4ff4aa369f910908d3d", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/StrongConnectivityInspector.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public List<Set<V>> stronglyConnectedSets()", "signatureAfterChange": "     public List<Set<V>> stronglyConnectedSets()", "diff": ["-            m_orderedVertices = new LinkedList();", "-            m_stronglyConnectedSets = new Vector();", "+            m_orderedVertices = new LinkedList<VertexData>();", "+            m_stronglyConnectedSets = new Vector<Set<V>>();", "-            DirectedGraph inverseGraph = new DefaultDirectedGraph();", "+            DirectedGraph<V, E> inverseGraph = new DefaultDirectedGraph<V, E>();", "-                    Set set = new HashSet();", "+                    Set<V> set = new HashSet<V>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8ffc60789476d57a3405d6a3756215d", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/traverse/TopologicalOrderIteratorTest.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void testRecipe()", "signatureAfterChange": "     public void testRecipe()", "diff": ["-        DirectedGraph graph = new DefaultDirectedGraph();", "+        DirectedGraph<String, DirectedEdge<String>> graph =", "+        \tnew DefaultDirectedGraph<String, DirectedEdge<String>>();", "-        Iterator iter = new TopologicalOrderIterator(graph);", "+        Iterator<String> iter =", "+        \tnew TopologicalOrderIterator<String, DirectedEdge<String>,Object>(graph);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4521c5221afe819e268b75c63e34601", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/experimental/alg/DijkstraShortestPathAlgorithmTest.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void testShortestPath()", "signatureAfterChange": "     public void testShortestPath()", "diff": ["-        WeightedGraph g = create();", "-        ShortestPathAlgorithm alg = new DijkstraShortestPathAlgorithm(g);", "-        WeightedGraph pathTree = alg.shortestPathTree(V1);", "+        WeightedGraph<String,DirectedEdge<String>> g = create();", "+        ShortestPathAlgorithm<String,DirectedEdge<String>>", "+        \talg = new DijkstraShortestPathAlgorithm<String,DirectedEdge<String>>(g);", "+        WeightedGraph<String,DirectedEdge<String>> pathTree = alg.shortestPathTree(V1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df7b60f38414b17e9d4fa9e04e497b88", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/graph/SubgraphTest.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private Graph init(boolean listenable)", "signatureAfterChange": "      private Graph<String, Edge<String>> init(boolean listenable)", "diff": ["-    private Graph init(boolean listenable)", "+    private Graph<String, Edge<String>> init(boolean listenable)", "-        Graph g;", "+        Graph<String,Edge<String>> g;", "-            g = new ListenableUndirectedGraph();", "+            g = new ListenableUndirectedGraph<String, Edge<String>>();", "-            g = new SimpleGraph();", "+            g = new SimpleGraph<String, Edge<String>>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef0a5a3788f8788e93cda422dcf2ee9a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/alg/CycleDetectorTest.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testDirectedWithCycle()", "signatureAfterChange": "     public void testDirectedWithCycle()", "diff": ["-        DirectedGraph g = new DefaultDirectedGraph();", "+        DirectedGraph<String,DirEdge<String>> g =", "+            new DefaultDirectedGraph<String,DirEdge<String>>();", "-        Set cyclicSet = new HashSet();", "+        Set<String> cyclicSet = new HashSet<String>();", "-        Set acyclicSet = new HashSet();", "+        Set<String> acyclicSet = new HashSet<String>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1959ad8834dd6df6aba9b85826fa90d", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/alg/ConnectivityInspectorTest.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testDirectedGraph()", "signatureAfterChange": "     public void testDirectedGraph()", "diff": ["-        ListenableDirectedGraph g = new ListenableDirectedGraph();", "+        ListenableDirectedGraph<String,DirEdge<String>>", "+                g = new ListenableDirectedGraph<String,DirEdge<String>>();", "-        ConnectivityInspector inspector = new ConnectivityInspector(g);", "+        ConnectivityInspector<String,DirEdge<String>>", "+                inspector = new ConnectivityInspector<String,DirEdge<String>>(g);"]}]}
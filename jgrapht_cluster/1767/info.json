{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0c1aa3ca7e677363c939cbd66c1df7eb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ad58784f590e54c58a8ec0f92171eef", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/ext/JGraphModelAdapter.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "          E addEdge(V jtSource, V jtTarget)", "signatureAfterChange": "          E addEdge(V jtSource, V jtTarget)", "diff": ["-            E jtEdge = m_graph.getEdgeFactory().createEdge(jtSource, jtTarget);", "-            m_jtElementsBeingAdded.add(jtEdge);", "+            E jtEdge = graph.getEdgeFactory().createEdge(jtSource, jtTarget);", "+            jtElementsBeingAdded.add(jtEdge);", "-            boolean added = m_graph.addEdge(jtSource, jtTarget, jtEdge);", "-            m_jtElementsBeingAdded.remove(jtEdge);", "+            boolean added = graph.addEdge(jtSource, jtTarget, jtEdge);", "+            jtElementsBeingAdded.remove(jtEdge);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3d68ab022eb3a337cbecf5efd1f9f66", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/ConnectivityInspector.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      private List<Set<V>> lazyFindConnectedSets()", "signatureAfterChange": "      private List<Set<V>> lazyFindConnectedSets()", "diff": ["-        if (m_connectedSets == null) {", "-            m_connectedSets = new ArrayList<Set<V>>();", "+        if (connectedSets == null) {", "+            connectedSets = new ArrayList<Set<V>>();", "-            Set vertexSet = m_graph.vertexSet();", "+            Set vertexSet = graph.vertexSet();", "-                    new BreadthFirstIterator<V,E>(m_graph, null);", "+                    new BreadthFirstIterator<V,E>(graph, null);", "-        return m_connectedSets;", "+        return connectedSets;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dab39b287edf7f1ee5e3a0cf1c9e0a01", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/graph/AsUndirectedGraphTest.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void testRemoveVertex()", "signatureAfterChange": "     public void testRemoveVertex()", "diff": ["-        m_undirected.removeVertex(m_v4);", "-        assertEquals(false, m_undirected.containsVertex(m_v4));", "-        assertEquals(false, m_directed.containsVertex(m_v4));", "+        undirected.removeVertex(v4);", "+        assertEquals(false, undirected.containsVertex(v4));", "+        assertEquals(false, directed.containsVertex(v4));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db910834bc3c65c9e089486b3aae7b21", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/StrongConnectivityInspector.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public List<DirectedSubgraph<V,E>> stronglyConnectedSubgraphs()", "signatureAfterChange": "     public List<DirectedSubgraph<V,E>> stronglyConnectedSubgraphs()", "diff": ["-        if (m_stronglyConnectedSubgraphs == null) {", "+        if (stronglyConnectedSubgraphs == null) {", "-            m_stronglyConnectedSubgraphs = new Vector<DirectedSubgraph<V, E>>(sets.size());", "+            stronglyConnectedSubgraphs = new Vector<DirectedSubgraph<V, E>>(sets.size());", "-                m_stronglyConnectedSubgraphs.add(new DirectedSubgraph<V, E>(", "-                        m_graph,", "+                stronglyConnectedSubgraphs.add(new DirectedSubgraph<V, E>(", "+                        graph,", "-        return m_stronglyConnectedSubgraphs;", "+        return stronglyConnectedSubgraphs;"]}]}
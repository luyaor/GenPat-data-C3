{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ce61373fcb1fe73ef107078786763921", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c1f5656b6b76af8f27b54eaa89216a6", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/isomorphism/VF2SubgraphIsomorphismInspectorTest.java", "commitBeforeChange": "b03329312d39e38d58a10d74df9818d4f67f9be5", "commitAfterChange": "cea7ef51f7b4c998dcf2f8f28d63aa057ca85c11", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": "     @Test     public void testEdgeCasesSimpleGraph()", "signatureAfterChange": "     @Test     public void testEdgeCasesSimpleGraph()", "diff": ["-        /* graph and subgraph empty */", "-        SimpleGraph<Integer, DefaultEdge> sg1 =", "+        /* ECS-1: graph and subgraph empty */", "+", "+        SimpleGraph<Integer, DefaultEdge> sg0v =", "-                                          sg2 =", "+                                          sg0v2 =", "+", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vfs1 =", "+            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                    (sg0v, sg0v2);", "+", "+        assertEquals(\"[]\", vfs1.getMappings().next().toString());", "+", "+", "+        /* ECS-2: graph non-empty, subgraph empty */", "+", "+        SimpleGraph<Integer, DefaultEdge> sg4v3e =", "+            new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "+", "+        sg4v3e.addVertex(1);", "+        sg4v3e.addVertex(2);", "+        sg4v3e.addVertex(3);", "+        sg4v3e.addVertex(4);", "+", "+        sg4v3e.addEdge(1, 2);", "+        sg4v3e.addEdge(3, 2);", "+        sg4v3e.addEdge(3, 4);", "-            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(sg1, sg2);", "-", "-        assertEquals(\"[]\", vfs2.getMappings().next().toString());", "-", "-", "-        /* graph non-empty, subgraph empty */", "-", "-        SimpleGraph<Integer, DefaultEdge> sg3 =", "-            new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class),", "-                                          sg4 =", "-            new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "-", "-        sg3.addVertex(1);", "-        sg3.addVertex(2);", "-        sg3.addVertex(3);", "-        sg3.addVertex(4);", "-", "-        sg3.addEdge(1, 2);", "-        sg3.addEdge(3, 2);", "-        sg3.addEdge(3, 4);", "-", "-        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vfs3 =", "-            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(sg3, sg4);", "+            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                    (sg4v3e, sg0v);", "-                        vfs3.getMappings().next().toString());", "+                        vfs2.getMappings().next().toString());", "-        /* graph empty, subgraph non-empty */", "+        /* ECS-3: graph empty, subgraph non-empty */", "-        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vfs4 =", "-            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(sg4, sg3);", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vfs3 =", "+            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                    (sg0v, sg4v3e);", "-        assertEquals(false, vfs4.isomorphismExists());", "+        assertEquals(false, vfs3.isomorphismExists());", "-        /* graph non-empty, subgraph single vertex */", "+        /* ECS-4: graph non-empty, subgraph single vertex */", "-        SimpleGraph<Integer, DefaultEdge> sg5 =", "+        SimpleGraph<Integer, DefaultEdge> sg1v =", "-        sg5.addVertex(5);", "+        sg1v.addVertex(5);", "-        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vfs5 =", "-            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(sg3, sg5);", "-        ", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vfs4 =", "+            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                    (sg4v3e, sg1v);", "+", "-            vfs5.getMappings();", "+            vfs4.getMappings();", "-        /* graph empty, subgraph single vertex */", "+        /* ECS-5: graph empty, subgraph single vertex */", "-        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vfs5b =", "-            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(sg4, sg5);", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vfs5 =", "+            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                    (sg0v, sg1v);", "-        assertEquals(false, vfs5b.isomorphismExists());", "+        assertEquals(false, vfs5.isomorphismExists());", "-        /* subgraph with vertices, but no edges */", "+        /* ECS-6: subgraph with vertices, but no edges */", "-        SimpleGraph<Integer, DefaultEdge> sg6 =", "+        SimpleGraph<Integer, DefaultEdge> sg3v0e =", "-        sg6.addVertex(5);", "-        sg6.addVertex(6);", "-        sg6.addVertex(7);", "+        sg3v0e.addVertex(5);", "+        sg3v0e.addVertex(6);", "+        sg3v0e.addVertex(7);", "-            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(sg4, sg6);", "+            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                    (sg4v3e, sg3v0e);", "-        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vfs6b =", "-            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(sg3, sg6);", "+        /* ECS-7: graph and subgraph with vertices, but no edges */", "-        assertEquals(false, vfs6.isomorphismExists());", "-", "-", "-        /* graph no edges, subgraph contains edge */", "-", "-        SimpleGraph<Integer, DefaultEdge> sg7 =", "-            new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "-", "-        sg7.addVertex(5);", "-        sg7.addVertex(6);", "-", "-        sg7.addEdge(5, 6);", "-", "-        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vfs7 =", "-            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(sg6, sg7);", "-", "-        assertEquals(false, vfs7.isomorphismExists());", "-", "-", "-        /* complete graphs of different size */", "-", "-        SimpleGraph<Integer, DefaultEdge> sg8 =", "-                    new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "-", "-        sg8.addVertex(0);", "-        sg8.addVertex(1);", "-        sg8.addVertex(2);", "-        sg8.addVertex(3);", "-        sg8.addVertex(4);", "-", "-        sg8.addEdge(0,1);", "-        sg8.addEdge(0,2);", "-        sg8.addEdge(0,3);", "-        sg8.addEdge(0,4);", "-        sg8.addEdge(1,2);", "-        sg8.addEdge(1,3);", "-        sg8.addEdge(1,4);", "-        sg8.addEdge(2,3);", "-        sg8.addEdge(2,4);", "-        sg8.addEdge(3,4);", "-", "-        SimpleGraph<Integer, DefaultEdge> sg9 =", "+        SimpleGraph<Integer, DefaultEdge> sg2v0e =", "-        sg9.addVertex(0);", "-        sg9.addVertex(1);", "-        sg9.addVertex(2);", "-        sg9.addVertex(3);", "+        sg2v0e.addVertex(1);", "+        sg2v0e.addVertex(2);", "-        sg9.addEdge(0,1);", "-        sg9.addEdge(0,2);", "-        sg9.addEdge(0,3);", "-        sg9.addEdge(1,2);", "-        sg9.addEdge(1,3);", "-        sg9.addEdge(2,3);", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vfs7 =", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                        (sg3v0e, sg2v0e);", "+", "+        Iterator<IsomorphicGraphMapping<Integer, DefaultEdge>> iter7 =", "+                vfs7.getMappings();", "+", "+        Set<String> mappings7 =", "+                new HashSet<String>(Arrays.asList(\"[5=1 6=2 7=~~]\",", "+                        \"[5=1 6=~~ 7=2]\",", "+                        \"[5=2 6=1 7=~~]\",", "+                        \"[5=~~ 6=1 7=2]\",", "+                        \"[5=2 6=~~ 7=1]\",", "+                        \"[5=~~ 6=2 7=1]\"));", "+        assertEquals(true, mappings7.remove(iter7.next().toString()));", "+        assertEquals(true, mappings7.remove(iter7.next().toString()));", "+        assertEquals(true, mappings7.remove(iter7.next().toString()));", "+        assertEquals(true, mappings7.remove(iter7.next().toString()));", "+        assertEquals(true, mappings7.remove(iter7.next().toString()));", "+        assertEquals(true, mappings7.remove(iter7.next().toString()));", "+        assertEquals(false, iter7.hasNext());", "+", "+", "+        /* ECS-8: graph no edges, subgraph contains single edge */", "+", "+        SimpleGraph<Integer, DefaultEdge> sg2v1e =", "+            new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "+", "+        sg2v1e.addVertex(5);", "+        sg2v1e.addVertex(6);", "+", "+        sg2v1e.addEdge(5, 6);", "-            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(sg8, sg9);", "+            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                    (sg3v0e, sg2v1e);", "-        assertEquals(true, ", "-            SubgraphIsomorphismTestUtils.containsAllMatchings(vfs8, sg8, sg9));", "+        assertEquals(false, vfs8.isomorphismExists());", "+", "+        /* ECS-9: complete graphs of different size,", "+        * graph smaller than subgraph*/", "+", "+        SimpleGraph<Integer, DefaultEdge> sg5c =", "+                    new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "+", "+        sg5c.addVertex(0);", "+        sg5c.addVertex(1);", "+        sg5c.addVertex(2);", "+        sg5c.addVertex(3);", "+        sg5c.addVertex(4);", "+", "+        sg5c.addEdge(0, 1);", "+        sg5c.addEdge(0, 2);", "+        sg5c.addEdge(0, 3);", "+        sg5c.addEdge(0, 4);", "+        sg5c.addEdge(1, 2);", "+        sg5c.addEdge(1, 3);", "+        sg5c.addEdge(1, 4);", "+        sg5c.addEdge(2, 3);", "+        sg5c.addEdge(2, 4);", "+        sg5c.addEdge(3, 4);", "+", "+        SimpleGraph<Integer, DefaultEdge> sg4c =", "+                new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "+", "+        sg4c.addVertex(0);", "+        sg4c.addVertex(1);", "+        sg4c.addVertex(2);", "+        sg4c.addVertex(3);", "+", "+        sg4c.addEdge(0, 1);", "+        sg4c.addEdge(0, 2);", "+        sg4c.addEdge(0, 3);", "+        sg4c.addEdge(1, 2);", "+        sg4c.addEdge(1, 3);", "+        sg4c.addEdge(2, 3);", "-            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(sg9, sg8);", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                        (sg4c, sg5c);", "-", "-        /* complete graphs of same size */", "+        /* ECS-10: complete graphs of different size,", "+        * graph bigger than subgraph*/", "-            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(sg8, sg8);", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                    (sg5c, sg4c);", "-        assertEquals(true,", "-            SubgraphIsomorphismTestUtils.containsAllMatchings(vfs10, sg8, sg8));", "+        // first mapping found", "+        assertEquals(\"[0=0 1=1 2=2 3=3 4=~~]\",", "+        vfs10.getMappings().next().toString());", "+", "+        /* assertEquals(true,", "+            SubgraphIsomorphismTestUtils.containsAllMatchings(vfs10,", "+                    sg5c, sg4c));*/", "+", "+", "+        /* ECS-11: isomorphic graphs */", "+", "+        /* VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vfs11b =", "+            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                               (sg4c, sg4c);", "+", "+        // first mapping found", "+        assertEquals(\"[0=0 1=1 2=2 3=3]\",", "+                vfs11b.getMappings().next().toString()); */", "+", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vfs11 =", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                        (sg4v3e, sg4v3e);", "+", "+        // first mapping found", "+        assertEquals(\"[1=1 2=2 3=3 4=4]\",", "+                vfs11.getMappings().next().toString());", "+        /* assertEquals(true,", "+            SubgraphIsomorphismTestUtils.containsAllMatchings(vfs11,", "+                    sg4v3e, sg4v3e)); */", "+", "+        /* ECS-12: not connected graphs of different size */", "+        SimpleGraph<Integer, DefaultEdge> sg6v4enc =", "+                new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "+", "+        sg6v4enc.addVertex(0);", "+        sg6v4enc.addVertex(1);", "+        sg6v4enc.addVertex(2);", "+        sg6v4enc.addVertex(3);", "+        sg6v4enc.addVertex(4);", "+        sg6v4enc.addVertex(5);", "+", "+        sg6v4enc.addEdge(1, 2);", "+        sg6v4enc.addEdge(2, 3);", "+        sg6v4enc.addEdge(3, 1);", "+        sg6v4enc.addEdge(4, 5);", "+", "+        SimpleGraph<Integer, DefaultEdge> sg5v4enc =", "+                new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "+", "+        sg5v4enc.addVertex(6);", "+        sg5v4enc.addVertex(7);", "+        sg5v4enc.addVertex(8);", "+        sg5v4enc.addVertex(9);", "+        sg5v4enc.addVertex(10);", "+", "+        sg5v4enc.addEdge(7, 6);", "+        sg5v4enc.addEdge(9, 8);", "+        sg5v4enc.addEdge(10, 9);", "+        sg5v4enc.addEdge(8, 10);", "+", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vfs12 =", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                        (sg6v4enc, sg5v4enc);", "+", "+        // first mapping found", "+        assertEquals(\"[0=~~ 1=8 2=9 3=10 4=6 5=7]\",", "+                vfs12.getMappings().next().toString());", "+", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "910b6e63a151bcab29bffde444cdc296", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/experimental/subgraphisomorphism/VF2SubgraphIsomorphismInspectorTest.java", "commitBeforeChange": "f67e9197d81c666622112a20391d80767fa4beb3", "commitAfterChange": "af1b824446ff484516d50232b001351d46878322", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tprivate SubgraphWithString randomSubgraph( \t\t\t\tDirectedGraph<String, DefaultEdge> g1, \t\t\t\tint vertexCount, \t\t\t\tlong seed)", "signatureAfterChange": "      @Test     public void testExhaustive()", "diff": ["-\t", "-\tprivate SubgraphWithString randomSubgraph(", "-\t\t\t\tDirectedGraph<String, DefaultEdge> g1,", "-\t\t\t\tint vertexCount,", "-\t\t\t\tlong seed)", "-\t{", "-\t\tMap<String, String> map = new HashMap<String, String>();", "-\t\tDirectedGraph<String, DefaultEdge> g2 =", "-\t\t\t\tnew DefaultDirectedGraph<String, DefaultEdge>(DefaultEdge.class);", "-\t\tSet<String> vertexSet = g1.vertexSet();", "-\t\tint n = vertexSet.size();", "-\t\t", "-\t\tRandom rnd = new Random();", "-\t\trnd.setSeed(seed);", "-\t\t", "-\t\tfor (int i = 0; i < vertexCount;)\t{", "-\t\t\tfor (String v : vertexSet)\t{", "-\t\t\t\tif (rnd.nextInt(n) == 0 && !map.containsKey(v))\t{", "-\t\t\t\t\tString u = \"u\" + (i++);", "-\t\t\t\t\tg2.addVertex(u);", "-\t\t\t\t\tmap.put(v, u);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\tfor (DefaultEdge e : g1.edgeSet())\t{", "-\t\t\tString v1 = g1.getEdgeSource(e),", "-\t\t\t\t   v2 = g1.getEdgeTarget(e);", "-\t\t\tif (map.containsKey(v1) && map.containsKey(v2))\t{", "-\t\t\t\tString u1 = map.get(v1),", "-\t\t\t\t\t   u2 = map.get(v2);", "-\t\t\t\tg2.addEdge(u1, u2);", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\t", "-\t\tString str = \"[\";", "-\t\t", "-\t\tTreeSet<String> vertexTree = new TreeSet<String>(vertexSet);", "-\t\tfor (String v : vertexTree)\t{", "-\t\t\tstr += v.toString() + \"=\";", "-\t\t\tif (map.containsKey(v))\t{", "-\t\t\t\tstr += map.get(v);", "-\t\t\t} else {", "-\t\t\t\tstr += \"~~\";", "-\t\t\t}", "-\t\t\tstr += \" \";", "-\t\t}", "-\t\t", "-\t\tstr = str.substring(0, str.length()-1) + \"]\";\t", "-\t\t", "-\t\t", "-\t\treturn new SubgraphWithString(g2, str);", "-\t}", "+    @Test", "+    public void testExhaustive() {", "+        ", "+        /*", "+         * ", "+         *      0   3", "+         *      |  /|        0 2", "+         * g1 = | 2 |   g2 = |/", "+         *      |/  |        1", "+         *      1   4", "+         */", "+        ", "+        SimpleGraph<Integer, DefaultEdge> g1 =", "+                new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class),", "+                                         g2 = ", "+                new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "+", "+        g1.addVertex(0);", "+        g1.addVertex(1);", "+        g1.addVertex(2);", "+        g1.addVertex(3);", "+        g1.addVertex(4);", "+        ", "+        g2.addVertex(0);", "+        g2.addVertex(1);", "+        g2.addVertex(2);", "+        ", "+        g1.addEdge(0, 1);", "+        g1.addEdge(1, 2);", "+        g1.addEdge(2, 3);", "+        g1.addEdge(3, 4);", "+", "+        g2.addEdge(0, 1);", "+        g2.addEdge(1, 2);", "+        ", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf2 =", "+            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(g1, g2);", "+        ", "+        assertEquals(true,", "+            SubgraphIsomorphismTestUtils.containsAllMatchings(vf2, g1, g2));", "+", "+        ", "+        ", "+        /*", "+         * g3 = ...   g4 = ...", "+         * ", "+         */", "+        ", "+        DirectedGraph<Integer, DefaultEdge> g3 =", "+            new DefaultDirectedGraph<Integer, DefaultEdge>(DefaultEdge.class),", "+                                            g4 =", "+            new DefaultDirectedGraph<Integer, DefaultEdge>(DefaultEdge.class);", "+", "+        g3.addVertex(0);", "+        g3.addVertex(1);", "+        g3.addVertex(2);", "+        g3.addVertex(3);", "+        g3.addVertex(4);", "+        g3.addVertex(5);", "+        ", "+        g4.addVertex(0);", "+        g4.addVertex(1);", "+        g4.addVertex(2);", "+        g4.addVertex(3);", "+        ", "+        g3.addEdge(0, 1);", "+        g3.addEdge(0, 5);", "+        g3.addEdge(1, 4);", "+        g3.addEdge(2, 1);", "+        g3.addEdge(2, 4);", "+        g3.addEdge(3, 1);", "+        g3.addEdge(4, 0);", "+        g3.addEdge(5, 2);", "+        g3.addEdge(5, 4);", "+        ", "+        g4.addEdge(0, 3);", "+        g4.addEdge(1, 2);", "+        g4.addEdge(1, 3);", "+        g4.addEdge(2, 3);", "+        g4.addEdge(2, 0);", "+        ", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf3 =", "+            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(g3, g4);", "+        ", "+        assertEquals(true,", "+            SubgraphIsomorphismTestUtils.containsAllMatchings(vf3, g3, g4));", "+        ", "+        ", "+        /*", "+         *      1----0        0---2", "+         *      |             |  /", "+         * g5 = |        g6 = | /", "+         *      |             |/", "+         *      2----3        1", "+         */", "+        ", "+        SimpleGraph<Integer, DefaultEdge> g5 =", "+            new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class),", "+                                          g6 =", "+            new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "+        ", "+        g5.addVertex(0);", "+        g5.addVertex(1);", "+        g5.addVertex(2);", "+        g5.addVertex(3);", "+        ", "+        g6.addVertex(0);", "+        g6.addVertex(1);", "+        g6.addVertex(2);", "+", "+        g5.addEdge(0, 1);", "+        g5.addEdge(1, 2);", "+        g5.addEdge(2, 3);", "+", "+        g6.addEdge(0, 1);", "+        g6.addEdge(1, 2);", "+        g6.addEdge(2, 0);", "+        ", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf4 =", "+            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(g5, g6);", "+        ", "+        assertEquals(true,", "+            SubgraphIsomorphismTestUtils.containsAllMatchings(vf4, g5, g6));", "+    }"]}]}
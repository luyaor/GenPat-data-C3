{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "302a12473db8d377256da183315de415", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66c1e3805d2d8a0452cb7cb75c1aa1d3", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/KShortestPathCostTest.java", "commitBeforeChange": "94e0b9cdbd464a6b60ddbb8cd6d473a32e102eaf", "commitAfterChange": "90d794caa7b37ed092890eb859473902af3157bc", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void testKShortestPathCosts(Graph graph)", "signatureAfterChange": "      private void verifyShortestPathsInIncreasingOrderOfWeight(Graph graph)", "diff": ["-    public void testKShortestPathCosts(Graph graph)", "+", "+    private void verifyShortestPathsInIncreasingOrderOfWeight(Graph graph)", "+                    if (pathElements == null) {", "+                        // no path exists between the start vertex and the end", "+                        // vertex", "+                        continue;", "+                    }", "-                    double lastCost = pathElement.getWeight();", "+                    double lastWeight = pathElement.getWeight();", "-                        double cost = pathElement.getWeight();", "-                        assertTrue(lastCost <= cost);", "-                        lastCost = cost;", "+                        double weight = pathElement.getWeight();", "+                        assertTrue(lastWeight <= weight);", "+                        lastWeight = weight;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68efe9346696f40c307c7d1c8adf2853", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/ext/DOTExporter.java", "commitBeforeChange": "2df76efae5761332b2fd89dfd99b2e46f18f618f", "commitAfterChange": "08bc15b822e783aa4c3aef9526bb1e8b285a6357", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private void renderAttributes(         PrintWriter out,         String labelName,         Map<String, String> attributes)", "signatureAfterChange": "      private void renderAttributes(         PrintWriter out,         String labelName,         Map<String, String> attributes)", "diff": ["-        if (labelName == null) {", "+        if ((labelName == null) && (attributes != null)) {", "-        for (Map.Entry<String, String> entry : attributes.entrySet()) {", "-            String name = entry.getKey();", "-            if (name.equals(\"label\")) {", "-                // already handled by special case above", "-                continue;", "+        if (attributes != null) {", "+            for (Map.Entry<String, String> entry : attributes.entrySet()) {", "+                String name = entry.getKey();", "+                if (name.equals(\"label\")) {", "+                    // already handled by special case above", "+                    continue;", "+                }", "+                out.print(name + \"=\\\"\" + entry.getValue() + \"\\\" \");", "-            out.print(name + \"=\\\"\" + entry.getValue() + \"\\\" \");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f40dc0dec4ebf5bbf5eb7079fcd06e61", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/experimental/GraphReader.java", "commitBeforeChange": "47ce261ef10be427a6a84aeeebb0d71750a4e26b", "commitAfterChange": "5b8b2def419b220aa57ca346f586e7cc6eacdd0e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void generateGraph(         Graph<V, E> target,         VertexFactory<V> vertexFactory,         Map<String, V> resultMap)", "signatureAfterChange": "     public void generateGraph(         Graph<V, E> target,         VertexFactory<V> vertexFactory,         Map<String, V> resultMap)", "diff": ["-        List<String> cols = skipComments();", "+        String[] cols = skipComments();", "-            if (cols.get(0).equals(\"e\")) {", "-                target.addEdge(", "-                    resultMap.get(cols.get(1)),", "-                    resultMap.get(cols.get(2)));", "+            if (cols[0].equals(\"e\")) {", "+                E edge = target.addEdge(", "+                    resultMap.get(cols[1]),", "+                    resultMap.get(cols[2]));", "+                if (_isWeighted && edge != null) {", "+                    double weight = _defaultWeight;", "+                    if (cols.length > 3) {", "+                        weight = Double.parseDouble(cols[3]);", "+                    }", "+                    ((WeightedGraph<V,E>)target).setEdgeWeight(edge, weight);", "+                }", "-        }", "-    }"]}]}
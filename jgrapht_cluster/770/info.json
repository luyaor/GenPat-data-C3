{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c46692f201e2b9dbd573a4e665862520", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "194c79d21c186c89bdf593601547c85e", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/StoerWagnerMinimumCut.java", "commitBeforeChange": "2368f894a5f86458e6220ed61039dad10454d9ab", "commitAfterChange": "8bbdd0b15ef2a408186085d20f1a6fb81ea81686", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public StoerWagnerMinimumCut(UndirectedGraph<V, E> graph)", "signatureAfterChange": "     public StoerWagnerMinimumCut(UndirectedGraph<V, E> graph)", "diff": ["-        if (graph.vertexSet().size() < 2)", "+        if (graph.vertexSet().size() < 2) {", "-                    \"Graph has less than 2 vertices\");", "-        ", "+                \"Graph has less than 2 vertices\");", "+        }", "+", "-            if (graph.getEdgeWeight(e) < 0.0)", "+            if (graph.getEdgeWeight(e) < 0.0) {", "-                        \"Negative edge weights not allowed\");", "+                    \"Negative edge weights not allowed\");", "+            }", "-            } else", "+            } else {", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cdfba9fccd6a110392d20ff25a32cfd", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/PushRelabelMaximumFlow.java", "commitBeforeChange": "6a8a4c15d51c52101d91cd979c3d30cc12195d89", "commitAfterChange": "1df4f6ec05a16b739e7739b1310c6980095dbcdd", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "      private void pushFlowThrough(EdgeExtension ex, double f)", "signatureAfterChange": "      protected void pushFlowThrough(EdgeExtension ex, double f)", "diff": ["-    private void pushFlowThrough(EdgeExtension ex, double f) {", "+    protected void pushFlowThrough(EdgeExtension ex, double f) {", "-        EdgeExtension iex = ex.getInverse();", "-", "-        // _DBG", "-        assert(compareFlowTo(ex.flow, 0.0) == 0 || compareFlowTo(iex.flow, 0.0) == 0);", "-", "-        if (compareFlowTo(iex.flow, f) == -1) {", "-            double d = f - iex.flow;", "-", "-            ex.flow      += d;", "-            ex.capacity  -= iex.flow;", "-", "-            iex.flow      = 0;", "-            iex.capacity += d;", "-        } else {", "-            ex.capacity -= f;", "-            iex.flow    -= f;", "-        }", "-    }", "+        super.pushFlowThrough(ex, f);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d2f04be95ff5bc08a195a4bedcc4a7a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/PushRelabelMaximumFlow.java", "commitBeforeChange": "7acd462dd9b27baaee05cd7cb1743331738444cd", "commitAfterChange": "77d3536281d5009f64d3969a18ec7d765c16f646", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Override     public MaximumFlow<V, E> buildMaximumFlow(V source, V sink)", "signatureAfterChange": "      @Override     public MaximumFlow<V, E> buildMaximumFlow(V source, V sink)", "diff": ["+", "+                // Check whether we still have any vertices with the label '1'", "+                if (LABEL_PRUNE_ENABLED) {", "+                    if (!flowBack && !labeling.containsKey(0) && !labeling.containsKey(1)) {", "+                        // This supposed to drastically improve performance", "+                        extendedVertex(source).label = Collections.max(labeling.keySet()) + 1;", "+                        flowBack = true;", "+                    }", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2326815f24cfc6ff4db28633fcc7a9d0", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/experimental/GraphReader.java", "commitBeforeChange": "706aa3597ecf30c14c3a4ac469519dd45ef4dc50", "commitAfterChange": "55241662127745f1a473298706f974517b39b392", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void readGraph( Graph g ) throws IOException", "signatureAfterChange": "     public void readGraph( Graph g ) throws IOException", "diff": ["-                        GraphHelper.addEdgeWithVertices( g, new Integer( x ),", "-                            new Integer( y ) );", "+                        if (cols.length > 3) {", "+                            GraphHelper.addEdgeWithVertices( g, new Integer( x ),", "+                                new Integer( y ), Double.parseDouble(cols[ 3 ]) );", "+                        } else {", "+                            GraphHelper.addEdgeWithVertices( g, new Integer( x ),", "+                                new Integer( y ) );", "+                        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61b6ce1f064a2cb43860eafcd3bf41f8", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/TransitiveReductionTest.java", "commitBeforeChange": "011f1e4ed007e20ef02e12c898f369abbf15f340", "commitAfterChange": "67db11694f065b26fa72ab0bf7b3e7d5624c591c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void test()", "signatureAfterChange": "          @Test     public void testInternals()", "diff": ["+    ", "-    public void test() {", "+    public void testInternals() {", "-        final int[][] matrix = new int[][] {", "-            {0, 1, 1, 0, 0},", "-            {0, 0, 0, 0, 0},", "-            {0, 0, 0, 1, 1},", "-            {0, 0, 0, 0, 1},", "-            {0, 1, 0, 0, 0}", "-        };", "-        ", "-        final int[][] expected_transitively_reduced_matrix = new int[][] {", "-            {0, 0, 1, 0, 0},", "-            {0, 0, 0, 0, 0},", "-            {0, 0, 0, 1, 0},", "-            {0, 0, 0, 0, 1},", "-            {0, 1, 0, 0, 0}", "-        };", "-                        matrix.length);", "+                        path_matrix.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c640d104b6bbc053ee8879c2407bd49", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/experimental/GraphSquare.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public GraphSquare(final Graph<V,E> g, final boolean createLoops)", "signatureAfterChange": "     public GraphSquare(final Graph<V,E> g, final boolean createLoops)", "diff": ["-        super.addAllVertices(g.vertexSet());", "+        Graphs.addAllVertices(this, g.vertexSet());", "-                            edge.getSource(),", "-                            edge.getTarget(),", "+                            g.getEdgeSource(edge),", "+                            g.getEdgeTarget(edge),", "-                            edge.getTarget(),", "-                            edge.getSource(),", "+                            g.getEdgeTarget(edge),", "+                            g.getEdgeSource(edge),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b77829670b1d849c5e2a0461d2990c58", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/MaximumFlowAlgorithmBase.java", "commitBeforeChange": "2a4ee438a5228b57c798a805e93d64a050ce7112", "commitAfterChange": "ca153311ebb476220b5c58117cc53dc83fd78ea6", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "          EdgeExtensionBase(VertexExtensionBase source,                           VertexExtensionBase target,                           double capacity,                           E prototype)", "signatureAfterChange": "          public void setTarget(VertexExtensionBase target)", "diff": ["+", "+        public void setTarget(VertexExtensionBase target) {", "+            this.target = target;", "+        }", "-", "-        EdgeExtensionBase(VertexExtensionBase source,", "-                          VertexExtensionBase target,", "-                          double capacity,", "-                          E prototype)", "-        {", "-            this.source     = source;", "-            this.target     = target;", "-            this.capacity   = capacity;", "-            this.prototype  = prototype;", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b932834caecce593b4d5e8ec297e76d0", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/IsomorphicGraphMapping.java", "commitBeforeChange": "6245588ef354746c5c3ae9a477b956068a878121", "commitAfterChange": "7c92324c62793ccd32781d7e3f1ebd3ed525f69b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Override     public String toString()", "signatureAfterChange": "      @Override public String toString()", "diff": ["-    @Override", "-    public String toString() {", "+    @Override public String toString()", "+    {", "-        for (V v : vertexSet)", "+        for (V v : vertexSet) {", "+        }", "-        for (Map.Entry<String, V> entry : vertexMap.entrySet())   {", "+        for (Map.Entry<String, V> entry : vertexMap.entrySet()) {", "-            str += (i++ == 0 ? \"\" : \" \") + entry.getKey() + \"=\" +", "-                            (u == null ? \"~~\" : u);", "+            str +=", "+                ((i++ == 0) ? \"\" : \" \") + entry.getKey() + \"=\"", "+                + ((u == null) ? \"~~\" : u);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d361c22080d903f60fd285aa0cda365e", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/PushRelabelMaximumFlow.java", "commitBeforeChange": "7aed39a1af86a04f66007baa8f1c62673d4be780", "commitAfterChange": "fa439ca86ad5484e4f0d6132cc374b67035ff8e3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      private void pushFlowThrough(EdgeExtension ex, double f)", "signatureAfterChange": "      private void pushFlowThrough(EdgeExtension ex, double f)", "diff": ["+        // _DBG", "+        assert(ex.getSource().excess >= 0.0 && ex.getTarget().excess >= 0);", "+", "+", "+        // _DBG", "+//        System.out.println(\"{ \" + (ex.prototype == null ? \"\" : ex.prototype)  + \" } F/CAP \" + ex.flow + \" / \" + ex.capacity +", "+//                                                                                \" IF/ICAP \" + ex.getInverse().flow + \" / \" + ex.getInverse().capacity+ \" SUR \" + f);", "-            ex.flow += d;", "+            ex.flow      += d;", "+            ex.capacity  -= iex.flow;", "-            iex.flow -= f;", "+            ex.capacity -= f;", "+            iex.flow    -= f;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "daefbd44b5d20acb14aee2afd59eb743", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/EdmondsBlossomShrinking.java", "commitBeforeChange": "2368f894a5f86458e6220ed61039dad10454d9ab", "commitAfterChange": "8bbdd0b15ef2a408186085d20f1a6fb81ea81686", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private V findPath(V root)", "signatureAfterChange": "      private V findPath(V root)", "diff": ["-                if (to == v)", "+                if (to == v) {", "+                }", "-                if (to == root || (match.containsKey(to))", "-                        && (p.containsKey(match.get(to)))) {", "+                if ((to == root)", "+                    || ((match.containsKey(to))", "+                        && (p.containsKey(match.get(to)))))", "+                {", "-                                && blossom.contains(base.get(i)))", "+                            && blossom.contains(base.get(i)))"]}]}
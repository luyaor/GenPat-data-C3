{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "979a83d039232ba80e0fe570d0aea6b1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "464e616b64be83b0b6f6f67130beec3b", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/StrongConnectivityInspector.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void dfsVisit( DirectedGraph graph, VertexData vertexData,         Set vertices )", "signatureAfterChange": "     private void dfsVisit( DirectedGraph<V, E> graph, VertexData vertexData,         Set<V> vertices )", "diff": ["-    private void dfsVisit( DirectedGraph graph, VertexData vertexData,", "-        Set vertices ) {", "-        Stack stack = new Stack(  );", "+    private void dfsVisit( DirectedGraph<V, E> graph, VertexData vertexData,", "+        Set<V> vertices ) {", "+        Stack<VertexData> stack = new Stack(  );", "-            VertexData data = (VertexData) stack.pop(  );", "+            VertexData data = stack.pop(  );", "-                    vertices.add( data.m_vertex );", "+                    vertices.add( (V) data.m_vertex );", "-                Iterator iter =", "-                    graph.outgoingEdgesOf( data.m_vertex ).iterator(  );", "+                Iterator<E> iter =", "+                    graph.outgoingEdgesOf( (V) data.m_vertex ).iterator(  );", "-                    DirectedEdge edge       = (DirectedEdge) iter.next(  );", "+                    DirectedEdge edge       = iter.next(  );", "-                        (VertexData) m_vertexToVertexData.get( edge.getTarget(  ) );", "+                        m_vertexToVertexData.get( edge.getTarget(  ) );", "-                    m_orderedVertices.addFirst( data.m_vertex );", "+                    m_orderedVertices.addFirst( (VertexData) data.m_vertex );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc4db2b2711997f35de1e45625bbee9c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/AbstractBaseGraph.java", "commitBeforeChange": "e13230e0f77fc038e089d77cd6f28783ffa1581b", "commitAfterChange": "1697a09983092630eaecc24fb423d2a519f7c71e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public AbstractBaseGraph( EdgeFactory ef, boolean multipleEdgesAllowed,         boolean loopsAllowed )", "signatureAfterChange": "     public AbstractBaseGraph( EdgeFactory ef, boolean allowMultipleEdges,         boolean allowLoops )", "diff": ["-    public AbstractBaseGraph( EdgeFactory ef, boolean multipleEdgesAllowed,", "-        boolean loopsAllowed ) {", "+    public AbstractBaseGraph( EdgeFactory ef, boolean allowMultipleEdges,", "+        boolean allowLoops ) {", "-        m_vertexMap                = new HashMap(  );", "-        m_edgeSet                  = new HashSet(  );", "-        m_edgeFactory              = ef;", "-        m_loopsAllowed             = loopsAllowed;", "-        m_multipleEdgesAllowed     = multipleEdgesAllowed;", "+        m_vertexMap                 = new HashMap(  );", "+        m_edgeSet                   = new HashSet(  );", "+        m_edgeFactory               = ef;", "+        m_allowingLoops             = allowLoops;", "+        m_allowingMultipleEdges     = allowMultipleEdges;", "-        //", "-        Edge e = ef.createEdge( new Object(  ), new Object(  ) );", "-", "-        if( e instanceof DirectedEdge && this instanceof DirectedGraph ) {", "+        if( this instanceof DirectedGraph ) {", "-        else if( e instanceof UndirectedEdge && this instanceof UndirectedGraph ) {", "+        else if( this instanceof UndirectedGraph ) {", "+        Edge e = ef.createEdge( new Object(  ), new Object(  ) );"]}]}
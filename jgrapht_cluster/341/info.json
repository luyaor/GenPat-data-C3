{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f3683f86140064ce7b5a252a09071ca4", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "645b68df7bb5e596ea5a9d0f49ce2138", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/MaximumFlowAlgorithmBase.java", "commitBeforeChange": "024fc7b86a9ced21b7444077ac5895f2b6a50bf9", "commitAfterChange": "54d7e11e1ecaccdb80a1aeb9ea081aac7e5d3e46", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      protected void buildInternal()", "signatureAfterChange": "      protected void buildInternal()", "diff": ["-                EdgeExtensionBase   ex = extendedEdge(e);", "-                ex.source    = ux;", "-                ex.target    = vx;", "-                ex.capacity  = n.getEdgeWeight(e);", "-                ex.prototype = e;", "-", "-                EdgeExtensionBase iex = createInverse(ex);", "+                EdgeExtensionBase ex    = createEdge(ux, vx, e, n.getEdgeWeight(e));", "+                EdgeExtensionBase iex   = createInverse(ex, n);", "-                vx.getOutgoing().add(iex);", "+", "+                // NB: Any better?", "+                if (iex.prototype == null)", "+                    vx.getOutgoing().add(iex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6ebe9800766d0bf044833127520654c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/traverse/TopologicalOrderIterator.java", "commitBeforeChange": "4d7b735198ee2f6b968179206989dbb86fc679e1", "commitAfterChange": "78884be0de3af7915e782067f1b82ecce38ca128", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private TopologicalOrderIterator(         DirectedGraph<V, E> dg,         LinkedList<V> queue,         Map<V, ModifiableInteger> inDegreeMap)", "signatureAfterChange": "     public TopologicalOrderIterator(DirectedGraph<V, E> dg, Queue<V> queue)", "diff": ["+     */", "+    public TopologicalOrderIterator(DirectedGraph<V, E> dg, Queue<V> queue)", "+    {", "+        this(dg, queue, new HashMap<V, ModifiableInteger>());", "-        LinkedList<V> queue,"]}]}
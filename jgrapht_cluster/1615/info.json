{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b149b6ba57f55cff78aec87fd57bcda0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ae8569677b7ffd59ca6c9a122555867", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/graph/SimpleDirectedGraphTest.java", "commitBeforeChange": "c0b16b6556c96539006185d958b0f5e843675e68", "commitAfterChange": "b1382aa25544721cf9f8cd8ebbac3a2da4113463", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testAddEdgeEdge(  )", "signatureAfterChange": "     public void testAddEdgeEdge(  )", "diff": ["-            g1.addEdge( eLoop ); // loops not allowed", "+            m_g1.addEdge( m_eLoop ); // loops not allowed", "-            g3.addEdge( null );", "+            m_g3.addEdge( null );", "-        Edge e = eFactory.createEdge( v2, v1 );", "+        Edge e = m_eFactory.createEdge( m_v2, m_v1 );", "-            g1.addEdge( e ); // no such vertex in graph", "+            m_g1.addEdge( e ); // no such vertex in graph", "-        assertEquals( false, g2.addEdge( e ) );", "-        assertEquals( false, g3.addEdge( e ) );", "-        assertEquals( true, g4.addEdge( e ) );", "+        assertEquals( false, m_g2.addEdge( e ) );", "+        assertEquals( false, m_g3.addEdge( e ) );", "+        assertEquals( true, m_g4.addEdge( e ) );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa853e871849419571d74f26d9b78e66", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/graph/SimpleDirectedGraphTest.java", "commitBeforeChange": "c0b16b6556c96539006185d958b0f5e843675e68", "commitAfterChange": "b1382aa25544721cf9f8cd8ebbac3a2da4113463", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void testAddVertex(  )", "signatureAfterChange": "     public void testAddVertex(  )", "diff": ["-        assertEquals( 1, g1.vertexSet(  ).size(  ) );", "-        assertEquals( 2, g2.vertexSet(  ).size(  ) );", "-        assertEquals( 3, g3.vertexSet(  ).size(  ) );", "-        assertEquals( 4, g4.vertexSet(  ).size(  ) );", "+        assertEquals( 1, m_g1.vertexSet(  ).size(  ) );", "+        assertEquals( 2, m_g2.vertexSet(  ).size(  ) );", "+        assertEquals( 3, m_g3.vertexSet(  ).size(  ) );", "+        assertEquals( 4, m_g4.vertexSet(  ).size(  ) );", "-        assertFalse( g1.addVertex( v1 ) );", "-        assertTrue( g1.addVertex( v2 ) );", "+        assertFalse( m_g1.addVertex( m_v1 ) );", "+        assertTrue( m_g1.addVertex( m_v2 ) );"]}]}
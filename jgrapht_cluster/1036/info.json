{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e12e994a12552199c9090da275b15e91", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "079399b297cc1889ec2666aced4d7dc2", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/CliqueMinimalSeparatorDecomposition.java", "commitBeforeChange": "75bb7fff0bef1beed23710a8eaf7c22f02662da2", "commitAfterChange": "1852d2744de03b9218bb1f8c6e65dc81c980d59b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r     public void computeAtoms()", "signatureAfterChange": "\r     private void computeAtoms()", "diff": ["-    public void computeAtoms()\r", "+    private void computeAtoms()\r", "-        @SuppressWarnings(\"unchecked\")\r", "-        SimpleGraph<V, E> gprime = (SimpleGraph<V, E>) graph.clone();\r", "+        UndirectedGraph<V, E> gprime = copyAsSimpleGraph(graph);\r", "-        @SuppressWarnings(\"unchecked\")\r", "-        SimpleGraph<V, E> hprime = (SimpleGraph<V, E>) chordalGraph.clone();\r", "+        UndirectedGraph<V, E> hprime = copyAsSimpleGraph(chordalGraph);\r", "-                    @SuppressWarnings(\"unchecked\")\r", "-                    SimpleGraph<V, E> tmpGraph = \r", "-                        (SimpleGraph<V, E>) gprime.clone();\r", "+                    UndirectedGraph<V, E> tmpGraph = copyAsSimpleGraph(gprime);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2be575cd02b052cddf4d6ce92278e0b4", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/traverse/CrossComponentIterator.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      private void addUnseenChildrenOf(V vertex)", "signatureAfterChange": "      private void addUnseenChildrenOf(V vertex)", "diff": ["-        List<E> edges = m_specifics.edgesOf(vertex);", "-", "-        for (Iterator<E> i = edges.iterator(); i.hasNext();) {", "-            E e = i.next();", "-            fireEdgeTraversed(createEdgeTraversalEvent(e));", "-", "-            V v = e.oppositeVertex(vertex);", "-", "-            if (isSeenVertex(v)) {", "-                encounterVertexAgain(v, e);", "-            } else {", "-                encounterVertex(v, e);", "-            }", "-        }", "+    \tfor (E edge : m_specifics.edgesOf(vertex)) {", "+    \t\tfireEdgeTraversed(createEdgeTraversalEvent(edge));", "+    \t\t", "+    \t\tV oppositeV = edge.oppositeVertex(vertex);", "+    \t\t", "+    \t\tif (isSeenVertex(oppositeV)) {", "+    \t\t\tencounterVertexAgain(oppositeV, edge);", "+    \t\t} else {", "+    \t\t\tencounterVertex(oppositeV, edge);", "+    \t\t}", "+    \t}"]}]}
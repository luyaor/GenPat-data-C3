{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a2b6e83a77368a49d3188646cd84e46b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea192240476cd35439b416cf5b2926d2", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/DepthFirstIterator.java", "commitBeforeChange": "3cf8c5a89937c13e56521bf120df93d38d5c84ee", "commitAfterChange": "992268c2ef72b87aa653335246e4876213a0071b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "       private void collectChildren( Object nextVertex, List edges )", "signatureAfterChange": "       private void pushChildrenOf( Object vertex )", "diff": ["-", "-    private void collectChildren( Object nextVertex, List edges ) {", "-        for( Iterator iter = edges.iterator(  ); iter.hasNext(  ); ) {", "-            Edge e = (Edge) iter.next(  );", "-            fireEdgeVisited( e );", "-", "-            Object v = e.oppositeVertex( nextVertex );", "-", "-            if( !m_visited.contains( v ) ) {", "-                m_stack.add( v );", "-            }", "+", "+    private void pushChildrenOf( Object vertex ) {", "+        List edges = m_specifics.edgesOf( vertex );", "+", "+        for( Iterator iter = edges.iterator(  ); iter.hasNext(  ); ) {", "+            Edge e = (Edge) iter.next(  );", "+            fireEdgeVisited( e );", "+", "+            Object v = e.oppositeVertex( vertex );", "+", "+            if( !m_seen.contains( v ) ) {", "+                m_seen.add( v );", "+                m_stack.add( v );", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa366203c22d0d33ddf807c4da3724ed", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/ext/JGraphModelAdapter.java", "commitBeforeChange": "a4491f801ff4eba32d8029dda18c582844b268e3", "commitAfterChange": "dca8f0b0b2b997b3562b349da681aa495eb852bf", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     protected void removeJGraphTVertex( Object v )", "signatureAfterChange": "     protected void removeJGraphTVertex( Object jtVertex )", "diff": ["-    protected void removeJGraphTVertex( Object v ) {", "+    protected void removeJGraphTVertex( Object jtVertex ) {", "-            (DefaultGraphCell) m_vertexCells.remove( v );", "+            (DefaultGraphCell) m_vertexToCell.remove( jtVertex );", "+        m_cellToVertex.remove( vertexCell );", "-        Object[]         cells = { vertexCell, vertexCell.getChildAt( 0 ) };", "+        Object[] cells = { vertexCell, vertexCell.getChildAt( 0 ) };", "+        m_jVerticesBeingRemoved.add( vertexCell );", "+    }"]}]}
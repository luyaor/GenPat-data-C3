{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c7462791ebc05252122782f6867636ad", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac200ba4cfe0ae2b0c7403351332114e", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java", "commitBeforeChange": "6245588ef354746c5c3ae9a477b956068a878121", "commitAfterChange": "7c92324c62793ccd32781d7e3f1ebd3ed525f69b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \r \tprivate void unblock(Integer u)", "signatureAfterChange": "      private void unblock(Integer u)", "diff": ["-\r", "-\tprivate void unblock(Integer u) {\r", "-\t\tblocked[u] = false;\r", "-\r", "-\t\tfor (int wPos = 0; wPos < B[u].size(); wPos++) {\r", "-\t\t\tInteger w = B[u].get(wPos);\r", "-\r", "-\t\t\twPos -= removeFromList(B[u], w);\r", "-\r", "-\t\t\tif (blocked[w])\r", "-\t\t\t\tunblock(w);\r", "-\t\t}\r", "-\t}\r", "+", "+    private void unblock(Integer u)", "+    {", "+        blocked[u] = false;", "+", "+        for (int wPos = 0; wPos < B[u].size(); wPos++) {", "+            Integer w = B[u].get(wPos);", "+", "+            wPos -= removeFromList(B[u], w);", "+", "+            if (blocked[w]) {", "+                unblock(w);", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e50a0632c1743efab497913691fa8927", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/traverse/CrossComponentIterator.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "       private void addUnseenChildrenOf( Object vertex )", "signatureAfterChange": "       private void addUnseenChildrenOf( V vertex )", "diff": ["-    private void addUnseenChildrenOf( Object vertex ) {", "-        List edges = m_specifics.edgesOf( vertex );", "+    private void addUnseenChildrenOf( V vertex ) {", "+        List<E> edges = m_specifics.edgesOf( vertex );", "-        for( Iterator i = edges.iterator(  ); i.hasNext(  ); ) {", "-            Edge e = (Edge) i.next(  );", "+        for( Iterator<E> i = edges.iterator(  ); i.hasNext(  ); ) {", "+            E e = i.next(  );", "-            Object v = e.oppositeVertex( vertex );", "+            V v = e.oppositeVertex( vertex );"]}]}
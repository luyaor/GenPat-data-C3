{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "36491aec23fe6ff51365b73424c88137", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "070602b5ae5211836207cac3dc0079de", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/CycleDetector.java", "commitBeforeChange": "2003496a80f483b98d40a459268e93d0fdaec76c", "commitAfterChange": "618193dfca3ac4de3a61698028cfd965351c74a1", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "         protected void encounterVertexAgain(V vertex, E edge)", "signatureAfterChange": "         protected void encounterVertexAgain(V vertex, E edge)", "diff": ["-            int i = path.indexOf(vertex);", "+            int i;", "+", "+            if (root != null) {", "+                // For rooted detection, the path must either", "+                // double back to the root, or to a node of a cycle", "+                // which has already been detected.", "+                if (vertex == root) {", "+                    i = 0;", "+                } else if ((cycleSet != null) && cycleSet.contains(vertex)) {", "+                    i = 0;", "+                } else {", "+                    return;", "+                }", "+            } else {", "+                i = path.indexOf(vertex);", "+            }", "-                }", "-", "-                for (; i < path.size(); ++i) {", "-                    cycleSet.add(path.get(i));", "+                } else {", "+                    for (; i < path.size(); ++i) {", "+                        cycleSet.add(path.get(i));", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e01d9c1655d4066001a9655747b2b501", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/ext/DOTExporterTest.java", "commitBeforeChange": "58ffe75d7011b97e5d82e9b962f083efeda5131c", "commitAfterChange": "e161419b51eb823c1e9daf9244639d8ff587282c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testUndirected()", "signatureAfterChange": "      public void testUndirected()", "diff": ["+        ComponentAttributeProvider<String> vertexAttributeProvider =", "+            new ComponentAttributeProvider<String>() ", "+            {", "+                public Map<String, String> getComponentAttributes(String v)", "+                {", "+                    Map<String, String> map =", "+                        new LinkedHashMap<String, String>();", "+                    if (v.equals(V1)) {", "+                        map.put(\"label\", \"a\");", "+                    } else if (v.equals(V2)) {", "+                        map.put(\"x\", \"y\");", "+                    } else {", "+                        map = null;", "+                    }", "+                    return map;", "+                }", "+            };", "+        DOTExporter<String, DefaultEdge> exporter =", "+            new DOTExporter<String, DefaultEdge>(", "+                new IntegerNameProvider<String>(),", "+                null,", "+                null,", "+                vertexAttributeProvider,", "+                null);"]}]}
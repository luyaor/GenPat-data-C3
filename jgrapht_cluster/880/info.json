{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a43357258a54f96b2dd051608d191cd7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "731c847511df634bb2b930e23f966f87", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/traverse/TopologicalOrderIterator.java", "commitBeforeChange": "e07df8411d2d5660415c7539e838f795b02777b5", "commitAfterChange": "0ad4e7aa4cfa8aa6a1084840647777d1fbca3d33", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void initialize( DirectedGraph dg )", "signatureAfterChange": "     private static Object initialize( DirectedGraph dg, LinkedList queue,         Map inDegreeMap )", "diff": ["-    private void initialize( DirectedGraph dg ) {", "+    private static Object initialize( DirectedGraph dg, LinkedList queue,", "+        Map inDegreeMap ) {", "-            m_inDegreeMap.put( vertex, new ModifiableInteger( inDegree ) );", "+            inDegreeMap.put( vertex, new ModifiableInteger( inDegree ) );", "-                m_queue.add( vertex );", "+                queue.add( vertex );", "+", "+        if( queue.isEmpty(  ) ) {", "+            return null;", "+        }", "+        else {", "+            return queue.getFirst(  );", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98817b73dc3d14fedb4c9a2a9b73fafd", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/graph/AbstractBaseGraph.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 29, "signatureBeforeChange": "      private boolean assertCompatibleWithEdgeFactory(E e)", "signatureAfterChange": "     public void setEdgeWeight(E e, double weight)", "diff": ["-    private boolean assertCompatibleWithEdgeFactory(E e)", "-        /*if( e == null ) {", "-         *  throw new NullPointerException(  );", "-         * }", "-         * else if( !m_factoryEdgeClass.isInstance( e ) ) {", "-         *  throw new ClassCastException( \"incompatible edge class\" );", "-         * }", "-         */", "-        return true;", "+     */", "+    public void setEdgeWeight(E e, double weight)", "+    {", "+        assert(e instanceof DefaultWeightedEdge) : e.getClass();", "+        ((DefaultWeightedEdge) e).weight = weight;", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fa306a33963832c56a92610158707cf3", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e08398be1a12ac08df51ea7d1ea4488", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/ChromaticNumberTest.java", "commitBeforeChange": "fc11048fde6fa30641d7d466b45a9729e009006e", "commitAfterChange": "35064f430d4e0e68437adc8dfeec218c416ffbd3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void testChromaticNumber()", "signatureAfterChange": "     public void testChromaticNumber()", "diff": ["-        // A complete graph has a chromatic number equal it it's order", "+        // A complete graph has a chromatic number equal to its order", "-            ChromaticNumber.findGreedyChromaticNumber(completeGraph),", "-            7);", "+            7,", "+            ChromaticNumber.findGreedyChromaticNumber(completeGraph));", "-        assertEquals(ChromaticNumber.findGreedyChromaticNumber(linearGraph), 2);", "+        assertEquals(2, ChromaticNumber.findGreedyChromaticNumber(linearGraph));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfc07f7cfd3a1c9186c3b214b638b31a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/alg/ConnectivityInspectorTest.java", "commitBeforeChange": "e13230e0f77fc038e089d77cd6f28783ffa1581b", "commitAfterChange": "1697a09983092630eaecc24fb423d2a519f7c71e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testDirectedGraph( )", "signatureAfterChange": "     public void testDirectedGraph(  )", "diff": ["+     */", "+    public void testDirectedGraph(  ) {", "+        ListenableDirectedGraph g = new ListenableDirectedGraph(  );", "+        g.addVertex( m_v1 );", "+        g.addVertex( m_v2 );", "+        g.addVertex( m_v3 );", "+", "+        g.addEdge( m_v1, m_v2 );", "+", "+        ConnectivityInspector inspector = new ConnectivityInspector( g );", "+        g.addGraphListener( inspector );", "+", "+        assertEquals( false, inspector.isGraphConnected(  ) );", "+", "+        g.addEdge( m_v1, m_v3 );", "+", "+        assertEquals( true, inspector.isGraphConnected(  ) );", "-", "-    public void testDirectedGraph( ) {", "-        ListenableDirectedGraph g = new ListenableDirectedGraph( );", "-        g.addVertex( m_v1 );", "-        g.addVertex( m_v2 );", "-        g.addVertex( m_v3 );", "-", "-        g.addEdge( m_v1, m_v2 );", "-        ", "-        ConnectivityInspector inspector = new ConnectivityInspector( g );", "-        g.addGraphListener(inspector);", "-", "-        assertEquals( inspector.isGraphConnected(), false);", "-", "-        g.addEdge( m_v1, m_v3 );", "-", "-        assertEquals( inspector.isGraphConnected(), true);", "-    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dfbae485b9a2266ff5738f6cd5b582df", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "598709fa51b56db37020a25c6d87294a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/graph/DefaultGraphMapping.java", "commitBeforeChange": "857bf50cc4b146a4020c6dc6b730687dfcd7de35", "commitAfterChange": "3358959abc414f2281c71486c6c1a90935b1e909", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public DefaultGraphMapping(Map g1ToG2, Map g2ToG1, Graph g1, Graph g2)", "signatureAfterChange": "     public DefaultGraphMapping(         Map<V,V> g1ToG2, Map<V,V> g2ToG1, Graph<V,E> g1, Graph<V,E> g2)", "diff": ["-    public DefaultGraphMapping(Map g1ToG2, Map g2ToG1, Graph g1, Graph g2)", "+    public DefaultGraphMapping(", "+        Map<V,V> g1ToG2, Map<V,V> g2ToG1, Graph<V,E> g1, Graph<V,E> g2)", "-        this.graphMapping = new Map [2];", "-        this.graphMapping[FORWARD] = g1ToG2;", "-        this.graphMapping[REVERSE] = g2ToG1;", "+        this.graphMappingForward = g1ToG2;", "+        this.graphMappingReverse = g2ToG1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70d6686b91befcad8dde26922a13daa5", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/isomorphism/IsomorphismInspectorTest.java", "commitBeforeChange": "857bf50cc4b146a4020c6dc6b730687dfcd7de35", "commitAfterChange": "3358959abc414f2281c71486c6c1a90935b1e909", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private void checkRelation(         Graph<Integer,DefaultEdge> [] graphs,         EquivalenceComparator vertexChecker,         EquivalenceComparator edgeChecker)", "signatureAfterChange": "      private void checkRelation(         Graph<Integer,DefaultEdge> [] graphs,         EquivalenceComparator vertexChecker,         EquivalenceComparator edgeChecker)", "diff": ["-        IsomorphismRelation isoResult;", "+        IsomorphismRelation<Integer,DefaultEdge> isoResult;", "-            Set vertexSet = g1.vertexSet();", "-            for (Iterator iter = vertexSet.iterator(); iter.hasNext();) {", "-                Object v1 = iter.next();", "-                Object v2 = isoResult.getCorrespondence(v1, true);", "+            Set<Integer> vertexSet = g1.vertexSet();", "+            for (Iterator<Integer> iter =", "+                     vertexSet.iterator(); iter.hasNext();)", "+            {", "+                Integer v1 = iter.next();", "+                Integer v2 = isoResult.getVertexCorrespondence(v1, true);", "-            Set edgeSet = g1.edgeSet();", "-            for (Iterator iter = edgeSet.iterator(); iter.hasNext();) {", "-                DefaultEdge e1 = (DefaultEdge) iter.next();", "-                DefaultEdge e2 = (DefaultEdge) isoResult.getCorrespondence(e1, true);", "+            Set<DefaultEdge> edgeSet = g1.edgeSet();", "+            for (Iterator<DefaultEdge> iter = edgeSet.iterator();", "+                 iter.hasNext();)", "+            {", "+                DefaultEdge e1 = iter.next();", "+                DefaultEdge e2 = isoResult.getEdgeCorrespondence(e1, true);"]}]}
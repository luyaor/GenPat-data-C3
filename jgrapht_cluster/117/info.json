{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e547e78af73c2473ffefde3579b9e70d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d2f04be95ff5bc08a195a4bedcc4a7a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/PushRelabelMaximumFlow.java", "commitBeforeChange": "7acd462dd9b27baaee05cd7cb1743331738444cd", "commitAfterChange": "77d3536281d5009f64d3969a18ec7d765c16f646", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Override     public MaximumFlow<V, E> buildMaximumFlow(V source, V sink)", "signatureAfterChange": "      @Override     public MaximumFlow<V, E> buildMaximumFlow(V source, V sink)", "diff": ["+", "+                // Check whether we still have any vertices with the label '1'", "+                if (LABEL_PRUNE_ENABLED) {", "+                    if (!flowBack && !labeling.containsKey(0) && !labeling.containsKey(1)) {", "+                        // This supposed to drastically improve performance", "+                        extendedVertex(source).label = Collections.max(labeling.keySet()) + 1;", "+                        flowBack = true;", "+                    }", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "daefbd44b5d20acb14aee2afd59eb743", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/EdmondsBlossomShrinking.java", "commitBeforeChange": "2368f894a5f86458e6220ed61039dad10454d9ab", "commitAfterChange": "8bbdd0b15ef2a408186085d20f1a6fb81ea81686", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private V findPath(V root)", "signatureAfterChange": "      private V findPath(V root)", "diff": ["-                if (to == v)", "+                if (to == v) {", "+                }", "-                if (to == root || (match.containsKey(to))", "-                        && (p.containsKey(match.get(to)))) {", "+                if ((to == root)", "+                    || ((match.containsKey(to))", "+                        && (p.containsKey(match.get(to)))))", "+                {", "-                                && blossom.contains(base.get(i)))", "+                            && blossom.contains(base.get(i)))"]}]}
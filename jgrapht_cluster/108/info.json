{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "652131205dcc9f99f8fbdecca22a6797", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af273c4ba069b9828b6f73245b5c898a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/traverse/TraverseUtils.java", "commitBeforeChange": "0997a58f5471f09bb9fdcb21da80e929c7b2bb23", "commitAfterChange": "9350cdef6b0d2c87575b39e1606fd2378047d04a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      static Specifics createGraphSpecifics( Graph g )", "signatureAfterChange": "      static Specifics createGraphSpecifics(         Graph g, boolean ignoreEdgeDirection )", "diff": ["-    static Specifics createGraphSpecifics( Graph g ) {", "-        if( g instanceof DirectedGraph ) {", "+    static Specifics createGraphSpecifics(", "+        Graph g, boolean ignoreEdgeDirection ) {", "+        if( !ignoreEdgeDirection && ( g instanceof DirectedGraph ) ) {", "-        else if( g instanceof UndirectedGraph ) {", "-            return new UndirectedSpecifics( (UndirectedGraph) g );", "-        }", "-            throw new IllegalArgumentException( \"Unsupported graph type\" );", "+            return new UndirectedSpecifics( g );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc4db2b2711997f35de1e45625bbee9c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/AbstractBaseGraph.java", "commitBeforeChange": "e13230e0f77fc038e089d77cd6f28783ffa1581b", "commitAfterChange": "1697a09983092630eaecc24fb423d2a519f7c71e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public AbstractBaseGraph( EdgeFactory ef, boolean multipleEdgesAllowed,         boolean loopsAllowed )", "signatureAfterChange": "     public AbstractBaseGraph( EdgeFactory ef, boolean allowMultipleEdges,         boolean allowLoops )", "diff": ["-    public AbstractBaseGraph( EdgeFactory ef, boolean multipleEdgesAllowed,", "-        boolean loopsAllowed ) {", "+    public AbstractBaseGraph( EdgeFactory ef, boolean allowMultipleEdges,", "+        boolean allowLoops ) {", "-        m_vertexMap                = new HashMap(  );", "-        m_edgeSet                  = new HashSet(  );", "-        m_edgeFactory              = ef;", "-        m_loopsAllowed             = loopsAllowed;", "-        m_multipleEdgesAllowed     = multipleEdgesAllowed;", "+        m_vertexMap                 = new HashMap(  );", "+        m_edgeSet                   = new HashSet(  );", "+        m_edgeFactory               = ef;", "+        m_allowingLoops             = allowLoops;", "+        m_allowingMultipleEdges     = allowMultipleEdges;", "-        //", "-        Edge e = ef.createEdge( new Object(  ), new Object(  ) );", "-", "-        if( e instanceof DirectedEdge && this instanceof DirectedGraph ) {", "+        if( this instanceof DirectedGraph ) {", "-        else if( e instanceof UndirectedEdge && this instanceof UndirectedGraph ) {", "+        else if( this instanceof UndirectedGraph ) {", "+        Edge e = ef.createEdge( new Object(  ), new Object(  ) );"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9434d2e47fd95da4781be3569364ff7d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "216de536e0ea6922d5bc66880b0c36a8", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/AbstractBaseGraph.java", "commitBeforeChange": "df6534447cdde73776a245095fd843a922cc109b", "commitAfterChange": "c4deb6f8f2405c66e906c126a4ee98558987e853", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public AbstractBaseGraph( EdgeFactory ef, boolean allowMultipleEdges,         boolean allowLoops )", "signatureAfterChange": "     public AbstractBaseGraph( EdgeFactory ef, boolean allowMultipleEdges,         boolean allowLoops )", "diff": ["-        if( this instanceof DirectedGraph ) {", "-            m_specifics = new DirectedSpecifics(  );", "-        }", "-        else if( this instanceof UndirectedGraph ) {", "-            m_specifics = new UndirectedSpecifics(  );", "-        }", "-        else {", "-            throw new IllegalArgumentException( ", "-                \"graph is incompatible with edge factory\" );", "-        }", "+        setSpecifics(  );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af273c4ba069b9828b6f73245b5c898a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/traverse/TraverseUtils.java", "commitBeforeChange": "0997a58f5471f09bb9fdcb21da80e929c7b2bb23", "commitAfterChange": "9350cdef6b0d2c87575b39e1606fd2378047d04a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      static Specifics createGraphSpecifics( Graph g )", "signatureAfterChange": "      static Specifics createGraphSpecifics(         Graph g, boolean ignoreEdgeDirection )", "diff": ["-    static Specifics createGraphSpecifics( Graph g ) {", "-        if( g instanceof DirectedGraph ) {", "+    static Specifics createGraphSpecifics(", "+        Graph g, boolean ignoreEdgeDirection ) {", "+        if( !ignoreEdgeDirection && ( g instanceof DirectedGraph ) ) {", "-        else if( g instanceof UndirectedGraph ) {", "-            return new UndirectedSpecifics( (UndirectedGraph) g );", "-        }", "-            throw new IllegalArgumentException( \"Unsupported graph type\" );", "+            return new UndirectedSpecifics( g );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f39b357b1d385113aadc3ba4788f0491", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/util/VertexDegreeComparator.java", "commitBeforeChange": "e7ee93188d586bd5ab1949179c701faba108c0b1", "commitAfterChange": "bebf827ee740e58a33cc631cc3a312208e3261b6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public VertexDegreeComparator( Graph g, boolean ascendingOrder )", "signatureAfterChange": "     public VertexDegreeComparator( UndirectedGraph g, boolean ascendingOrder )", "diff": ["-    public VertexDegreeComparator( Graph g, boolean ascendingOrder ) {", "-        if( g instanceof DirectedGraph ) {", "-            m_graph = new AsUndirectedGraph( (DirectedGraph) g );", "-        }", "-        else if( g instanceof UndirectedGraph ) {", "-            m_graph = (UndirectedGraph) g;", "-        }", "-        else {", "-            throw new IllegalArgumentException( \"Unrecognized graph\" );", "-        }", "-", "-        m_ascendingOrder = ascendingOrder;", "+    public VertexDegreeComparator( UndirectedGraph g, boolean ascendingOrder ) {", "+        m_graph              = g;", "+        m_ascendingOrder     = ascendingOrder;"]}]}
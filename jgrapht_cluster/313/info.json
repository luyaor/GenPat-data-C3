{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec7d17c7cf20f88d2a66402b7df35120", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a39cb4b5daf8f6019a8237fd83aa6a9", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/StrongConnectivityInspector.java", "commitBeforeChange": "f9fe1a9b0c0422b26e26b94edd9001801984e770", "commitAfterChange": "04b4adb9d61a0a7a990979c19fd44e55accd860f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "         protected void encounterVertexAgain( Object vertex, Edge edge )", "signatureAfterChange": "     private void dfsVisit( DirectedGraph graph, VertexData vertexData,         Set vertices )", "diff": ["+     */", "+    private void dfsVisit( DirectedGraph graph, VertexData vertexData,", "+        Set vertices ) {", "+        Stack stack = new Stack(  );", "+        stack.push( vertexData );", "+        while( !stack.isEmpty(  ) ) {", "+            VertexData data = (VertexData) stack.pop(  );", "+            if( !data.m_discovered ) {", "+                data.m_discovered = true;", "+                if( vertices != null ) {", "+                    vertices.add( data.m_vertex );", "+                // TODO: other way to identify when this vertex is finished!?", "+                stack.push( new VertexData( data, true, true ) );", "+", "+                // follow all edges", "+                Iterator iter =", "+                    graph.outgoingEdgesOf( data.m_vertex ).iterator(  );", "+", "+                while( iter.hasNext(  ) ) {", "+                    DirectedEdge edge       = (DirectedEdge) iter.next(  );", "+                    VertexData   targetData =", "+                        (VertexData) m_verticesToVerticesData.get( edge", "+                            .getTarget(  ) );", "+", "+                    if( !targetData.m_discovered ) {", "+                        // the \"recursion\"", "+                        stack.push( targetData );", "+                    }", "+                }", "-         */", "-        protected void encounterVertexAgain( Object vertex, Edge edge ) {", "-            super.encounterVertexAgain( vertex, edge );", "-", "-            VertexData data = (VertexData) m_vertices.get( vertex );", "-            data.visit( m_time );", "-            m_time++;", "-        }", "+            else if( data.m_finished ) {", "+                if( vertices == null ) {", "+                    // see TODO above", "+                    m_orderedVertices.addFirst( data.m_vertex );", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8848baa151415d3ecccebba49fa6e3db", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/StrongConnectivityInspector.java", "commitBeforeChange": "04b4adb9d61a0a7a990979c19fd44e55accd860f", "commitAfterChange": "ccbda858621a3d1beb6a9381a0fc81c3673ee66c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void dfsVisit( DirectedGraph graph, VertexData vertexData,         Set vertices )", "signatureAfterChange": "     private void dfsVisit(DirectedGraph graph, VertexData vertexData,             Set vertices)", "diff": ["-    private void dfsVisit( DirectedGraph graph, VertexData vertexData,", "-        Set vertices ) {", "-        Stack stack = new Stack(  );", "-        stack.push( vertexData );", "+    private void dfsVisit(DirectedGraph graph, VertexData vertexData,", "+            Set vertices) {", "+        Stack stack = new Stack();", "+        stack.push(vertexData);", "-        while( !stack.isEmpty(  ) ) {", "-            VertexData data = (VertexData) stack.pop(  );", "+        while (!stack.isEmpty()) {", "+            VertexData data = (VertexData) stack.pop();", "-            if( !data.m_discovered ) {", "+            if (!data.m_discovered) {", "-                if( vertices != null ) {", "-                    vertices.add( data.m_vertex );", "+                if (vertices != null) {", "+                    vertices.add(data.m_vertex);", "-                stack.push( new VertexData( data, true, true ) );", "+                stack.push(new VertexData(data, true, true));", "-                Iterator iter =", "-                    graph.outgoingEdgesOf( data.m_vertex ).iterator(  );", "+                Iterator iter = graph.outgoingEdgesOf(data.m_vertex).iterator();", "-                while( iter.hasNext(  ) ) {", "-                    DirectedEdge edge       = (DirectedEdge) iter.next(  );", "-                    VertexData   targetData =", "-                        (VertexData) m_verticesToVerticesData.get( edge", "-                            .getTarget(  ) );", "+                while (iter.hasNext()) {", "+                    DirectedEdge edge = (DirectedEdge) iter.next();", "+                    VertexData targetData = (VertexData) m_vertexToVertexData", "+                            .get(edge.getTarget());", "-                    if( !targetData.m_discovered ) {", "+                    if (!targetData.m_discovered) {", "-                        stack.push( targetData );", "+                        stack.push(targetData);", "-            }", "-            else if( data.m_finished ) {", "-                if( vertices == null ) {", "+            } else if (data.m_finished) {", "+                if (vertices == null) {", "-                    m_orderedVertices.addFirst( data.m_vertex );", "+                    m_orderedVertices.addFirst(data.m_vertex);"]}]}
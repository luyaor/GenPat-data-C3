{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e28e689af3502d3b2e81dac2143ca057", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bbde3fd8151d5ca1a8250a315c509a4", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/StoerWagnerMinimumCut.java", "commitBeforeChange": "a8056d6aafd19ddde3f88a7357d27b280fbbac76", "commitAfterChange": "8786155732723df083d81ecffc66379e7847e52a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected VertexAndWeight mergeVertices(Set<V> s, Set<V> t)", "signatureAfterChange": "     protected VertexAndWeight mergeVertices(Set<V> s, Set<V> t)", "diff": ["-        for (V v : s) {", "-            set.add(v);", "-        }", "-        for (V v : t) {", "-            set.add(v);", "-        }", "+        set.addAll(s);", "+        set.addAll(t);", "-            if ((s != v) && (t != v)) {", "+            if (s != v  &&  t != v) {", "+                double neww = 0.0;", "-                double wtv = 0.0, wsv = 0.0;", "-                    wtv = workingGraph.getEdgeWeight(etv);", "+                    neww += workingGraph.getEdgeWeight(etv);", "-                    wsv = workingGraph.getEdgeWeight(esv);", "+                    neww += workingGraph.getEdgeWeight(esv);", "-                double neww = wtv + wsv;", "-                wsum += neww;", "-                if (neww != 0.0) {", "+                if (etv != null  ||  esv != null) {", "+                    wsum += neww;", "-        return new VertexAndWeight(set, wsum);", "+        return new VertexAndWeight(set, wsum, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f73974b194b81f8f0afd5e5fcb77bc8c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/FloydWarshallShortestPaths.java", "commitBeforeChange": "7c92324c62793ccd32781d7e3f1ebd3ed525f69b", "commitAfterChange": "82f01404dfe36eb0f878e007bce7de6e76c70836", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void lazyCalculatePaths()", "signatureAfterChange": "     private void lazyCalculatePaths()", "diff": ["-     */", "-    private void lazyCalculatePaths()", "-    {", "-        // already we have calculated it once.", "-        if (paths != null) {", "-            return;", "-        }", "-", "-        lazyCalculateMatrix();", "-", "-        Map<VertexPair<V>, GraphPath<V, E>> sps =", "-            new HashMap<VertexPair<V>, GraphPath<V, E>>();", "-        int n = vertices.size();", "-", "-        nShortestPaths = 0;", "-        for (int i = 0; i < n; i++) {", "-            V v_i = vertices.get(i);", "-            for (int j = 0; j < n; j++) {", "-                // don't count this.", "-                if (i == j) {", "-                    continue;", "-                }", "-", "-                V v_j = vertices.get(j);", "-", "-                GraphPath<V, E> path = getShortestPathImpl(v_i, v_j);", "-", "-                // we got a path", "-                if (path != null) {", "-                    sps.put(new VertexPair<V>(v_i, v_j), path);", "-                    nShortestPaths++;", "-                }", "-            }", "-        }", "-", "-        this.paths = sps;", "+     */", "+    private void lazyCalculatePaths()", "+    {", "+        // already we have calculated it once.", "+        if (paths != null)", "+            return;", "+", "+        lazyCalculateMatrix();", "+", "+        paths=new LinkedHashMap<V, List<GraphPath<V, E>>>();", "+        int n = vertices.size();", "+        for (int i = 0; i < n; i++) {", "+            V v_i = vertices.get(i);", "+            paths.put(v_i, new ArrayList<GraphPath<V, E>>());", "+            for (int j = 0; j < n; j++) {", "+                if (i == j)", "+                    continue;", "+", "+                V v_j = vertices.get(j);", "+", "+                GraphPath<V, E> path = getShortestPath(v_i, v_j);", "+", "+                if (path != null) {", "+                    paths.get(v_i).add(path);", "+                    nShortestPaths++;", "+                }", "+            }", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df42716d8542bcefcc18d751e3c7a0d3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63f9439b4718e19d7a029f1086e67a97", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/ext/JGraphModelAdapter.java", "commitBeforeChange": "a4491f801ff4eba32d8029dda18c582844b268e3", "commitAfterChange": "dca8f0b0b2b997b3562b349da681aa495eb852bf", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 8, "signatureBeforeChange": "     protected void addJGraphTEdge( Edge e )", "signatureAfterChange": "     protected void addJGraphTEdge( org._3pq.jgrapht.Edge jtEdge )", "diff": ["-     */", "-    protected void addJGraphTEdge( Edge e ) {", "-        DefaultEdge edgeCell = m_cellFactory.createEdgeCell( e );", "-        m_edgeCells.put( e, edgeCell );", "+    protected void addJGraphTEdge( org._3pq.jgrapht.Edge jtEdge ) {", "+        DefaultEdge edgeCell = m_cellFactory.createEdgeCell( jtEdge );", "+        m_edgeToCell.put( jtEdge, edgeCell );", "+        m_cellToEdge.put( edgeCell, jtEdge );", "-        cs.connect( edgeCell, getVertexPort( e.getSource(  ) ),", "-            getVertexPort( e.getTarget(  ) ) );", "+        cs.connect( edgeCell, getVertexPort( jtEdge.getSource(  ) ),", "+            getVertexPort( jtEdge.getTarget(  ) ) );", "+        m_jEdgesBeingAdded.add( edgeCell );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac834db538c8c555dbeacb7f6569a300", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/ext/JGraphModelAdapter.java", "commitBeforeChange": "a4491f801ff4eba32d8029dda18c582844b268e3", "commitAfterChange": "dca8f0b0b2b997b3562b349da681aa495eb852bf", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public JGraphModelAdapter( Graph g, Map defaultVertexAttributes,         Map defaultEdgeAttributes, CellFactory cellFactory )", "signatureAfterChange": "     public JGraphModelAdapter( Graph jGraphTGraph, Map defaultVertexAttributes,         Map defaultEdgeAttributes, CellFactory cellFactory )", "diff": ["-    public JGraphModelAdapter( Graph g, Map defaultVertexAttributes,", "+    public JGraphModelAdapter( Graph jGraphTGraph, Map defaultVertexAttributes,", "+", "+        m_jtGraph = jGraphTGraph;", "-            m_defaultEdgeAttributes = createDefaultEdgeAttributes( g );", "+            m_defaultEdgeAttributes =", "+                createDefaultEdgeAttributes( jGraphTGraph );", "-        if( g instanceof ListenableGraph ) {", "-            m_graphListener = new MyGraphListener(  );", "-            ( (ListenableGraph) g ).addGraphListener( m_graphListener );", "+        if( jGraphTGraph instanceof ListenableGraph ) {", "+            m_jtGraphListener = new JGraphTListener(  );", "+            ( (ListenableGraph) jGraphTGraph ).addGraphListener( m_jtGraphListener );", "-        for( Iterator i = g.vertexSet(  ).iterator(  ); i.hasNext(  ); ) {", "+        this.addGraphModelListener( new JGraphListener(  ) );", "+", "+        for( Iterator i = jGraphTGraph.vertexSet(  ).iterator(  );", "+                i.hasNext(  ); ) {", "-        for( Iterator i = g.edgeSet(  ).iterator(  ); i.hasNext(  ); ) {", "-            addJGraphTEdge( (Edge) i.next(  ) );", "+        for( Iterator i = jGraphTGraph.edgeSet(  ).iterator(  ); i.hasNext(  ); ) {", "+            addJGraphTEdge( (org._3pq.jgrapht.Edge) i.next(  ) );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d98fe7bd9765b3a9b3435ee71e5fe165", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/traverse/DepthFirstIterator.java", "commitBeforeChange": "a1f23a3100510ec39002be3afaff305ba3ad818a", "commitAfterChange": "b76ad743469fbc5f4b71d3a57c1c2abdaeec2142", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     protected V provideNextVertex()", "signatureAfterChange": "     protected V provideNextVertex()", "diff": ["-            v = popStack();", "-            if (v == null) {", "+            Object o = stack.removeLast();", "+            if (o == SENTINEL) {", "+                v = TypeUtil.uncheckedCast(o, vertexTypeDecl);", "-        stack.add(v);", "-        stack.add(null);", "+        stack.addLast(v);", "+        stack.addLast(SENTINEL);"]}]}
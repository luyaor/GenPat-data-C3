{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "50d6fb6e3e7457861ccf735d7379ee9f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f179429d4ad60a425412e308ca61a375", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/KShortestPathsIterator.java", "commitBeforeChange": "94e0b9cdbd464a6b60ddbb8cd6d473a32e102eaf", "commitAfterChange": "90d794caa7b37ed092890eb859473902af3157bc", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private void savePassData(Set<V> improvedVertices)", "signatureAfterChange": "      private void savePassData(Set<V> improvedVertices)", "diff": ["-            RankingPathElementList<V, E> clonedData =", "+            RankingPathElementList<V, E> pathElementList =", "+                this.seenDataContainer.get(vertex);", "+", "+            RankingPathElementList<V, E> improvedPaths =", "-                    this.seenDataContainer.get(vertex));", "-            this.prevSeenDataContainer.put(vertex, clonedData);", "+                    this.graph,", "+                    pathElementList.maxSize,", "+                    vertex);", "+", "+            for (", "+                Iterator<RankingPathElement<V, E>> pathIter =", "+                    pathElementList.iterator();", "+                pathIter.hasNext();)", "+            {", "+                RankingPathElement<V, E> path = pathIter.next();", "+                if (path.getHopCount() == this.passNumber) {", "+                    // the path has just been computed.", "+                    improvedPaths.pathElements.add(path);", "+                }", "+            }", "+", "+            this.prevSeenDataContainer.put(vertex, improvedPaths);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9cb0c88caf6345cc5bc6957d76dcd35", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/RankingPathElementList.java", "commitBeforeChange": "9891701e497d82d53bd2f7288493ff266ebc25b7", "commitAfterChange": "d3ef70f973371a0a14daeb6ea1ebefb2fcfefa11", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     RankingPathElementList(         Graph<V, E> graph,         int maxSize,         RankingPathElementList<V, E> elementList,         E edge,         V guardVertexToNotDisconnect)", "signatureAfterChange": "     RankingPathElementList(         Graph<V, E> graph,         int maxSize,         RankingPathElementList<V, E> elementList,         E edge,         V guardVertexToNotDisconnect)", "diff": ["-        for (int i = 0; i < elementList.size(); i++) {", "+        for (int i = 0;", "+             (i < elementList.size()) && (size() < maxSize); i++)", "+        {", "+                // go to the next path element in the loop", "-            if (size() < this.maxSize) {", "-                double weight = calculatePathWeight(prevPathElement, edge);", "-                RankingPathElement<V, E> newPathElement =", "-                    new RankingPathElement<V, E>(", "-                        this.graph,", "-                        prevPathElement,", "-                        edge,", "-                        weight);", "+            double weight = calculatePathWeight(prevPathElement, edge);", "+            RankingPathElement<V, E> newPathElement =", "+                new RankingPathElement<V, E>(", "+                    this.graph,", "+                    prevPathElement,", "+                    edge,", "+                    weight);", "-                // the new path is inserted at the end of the list.", "-                this.pathElements.add(newPathElement);", "-            }", "+            // the new path is inserted at the end of the list.", "+            this.pathElements.add(newPathElement);"]}]}
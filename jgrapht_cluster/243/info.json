{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a0a3d04bb93986e93ae5c4f47c043fb3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f2780212b542baffc9732b7f815ba81", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/util/ExtensionManager.java", "commitBeforeChange": "866eb12fc5aea5605a3a4d6d43a44dad4c6846ab", "commitAfterChange": "e34eae8f4301dab1040d53c72d503b349095137d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public E get(T t)", "signatureAfterChange": "      public E get(T t)", "diff": ["-        try {", "+        if (extensions.containsKey(t))", "+            return extensions.get(t);", "-            if (extensions.containsKey(t))", "-                return extensions.get(t);", "-", "-            E x = createInstance();", "-", "-            extensions.put(t, x);", "-", "-            return x;", "-", "-        } catch (IllegalAccessException e) {", "-            throw new ExtensionManagerInstantiationException(e);", "-        } catch (InstantiationException e) {", "-            throw new ExtensionManagerInstantiationException(e);", "-        }", "+        E x = createInstance();", "+        extensions.put(t, x);", "+        return x;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaaea7726468e4d7cf9ad76438a9ae32", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/MaximumFlowAlgorithmBase.java", "commitBeforeChange": "024fc7b86a9ced21b7444077ac5895f2b6a50bf9", "commitAfterChange": "54d7e11e1ecaccdb80a1aeb9ea081aac7e5d3e46", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private EdgeExtensionBase createInverse(EdgeExtensionBase ex)", "signatureAfterChange": "      private EdgeExtensionBase createInverse(EdgeExtensionBase ex, DirectedGraph<V, E> n)", "diff": ["-    private EdgeExtensionBase createInverse(EdgeExtensionBase ex) {", "-        EdgeExtensionBase iex = null;", "-        try {", "+", "+    private EdgeExtensionBase createInverse(EdgeExtensionBase ex, DirectedGraph<V, E> n) {", "+        EdgeExtensionBase iex;", "+", "+        if (n.containsEdge(ex.target.prototype, ex.source.prototype)) {", "+            E ie = n.getEdge(ex.target.prototype, ex.source.prototype);", "+            iex = createEdge(ex.target, ex.source, ie, n.getEdgeWeight(ie));", "+        } else {", "-", "-            ex.inverse  = iex;", "-            iex.inverse = ex;", "-", "-        } catch (IllegalAccessException e) {", "-            e.printStackTrace();", "-        } catch (InstantiationException e) {", "-            e.printStackTrace();", "+        ex.inverse  = iex;", "+        iex.inverse = ex;", "+"]}]}
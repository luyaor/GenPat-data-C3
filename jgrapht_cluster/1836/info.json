{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "04d238322859ad3d4f99da73fdc9dc36", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c280815582ff5f4e8ff580c9cd82492", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/graph/SimpleDirectedGraphTest.java", "commitBeforeChange": "c0b16b6556c96539006185d958b0f5e843675e68", "commitAfterChange": "b1382aa25544721cf9f8cd8ebbac3a2da4113463", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void testInDegreeOf(  )", "signatureAfterChange": "     public void testInDegreeOf(  )", "diff": ["-        assertEquals( 0, g1.inDegreeOf( v1 ) );", "+        assertEquals( 0, m_g1.inDegreeOf( m_v1 ) );", "-        assertEquals( 1, g2.inDegreeOf( v1 ) );", "-        assertEquals( 1, g2.inDegreeOf( v2 ) );", "+        assertEquals( 1, m_g2.inDegreeOf( m_v1 ) );", "+        assertEquals( 1, m_g2.inDegreeOf( m_v2 ) );", "-        assertEquals( 2, g3.inDegreeOf( v1 ) );", "-        assertEquals( 2, g3.inDegreeOf( v2 ) );", "-        assertEquals( 2, g3.inDegreeOf( v3 ) );", "+        assertEquals( 2, m_g3.inDegreeOf( m_v1 ) );", "+        assertEquals( 2, m_g3.inDegreeOf( m_v2 ) );", "+        assertEquals( 2, m_g3.inDegreeOf( m_v3 ) );", "-        assertEquals( 1, g4.inDegreeOf( v1 ) );", "-        assertEquals( 1, g4.inDegreeOf( v2 ) );", "-        assertEquals( 1, g4.inDegreeOf( v3 ) );", "-        assertEquals( 1, g4.inDegreeOf( v4 ) );", "+        assertEquals( 1, m_g4.inDegreeOf( m_v1 ) );", "+        assertEquals( 1, m_g4.inDegreeOf( m_v2 ) );", "+        assertEquals( 1, m_g4.inDegreeOf( m_v3 ) );", "+        assertEquals( 1, m_g4.inDegreeOf( m_v4 ) );", "-            g3.inDegreeOf( new Object(  ) );", "+            m_g3.inDegreeOf( new Object(  ) );", "-            g3.inDegreeOf( null );", "+            m_g3.inDegreeOf( null );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67a8739621c236434565dc7c1d97ac76", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/NeighborIndexTest.java", "commitBeforeChange": "9aa77050b482cd35622f2b052f283cbdea563cf6", "commitAfterChange": "71029068583c81632b4d5180b7465932b933e753", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testNeighborSet()", "signatureAfterChange": "      public void testNeighborSet()", "diff": ["-        Set neighbors = index.neighborsOf(V1);", "+        Set neighbors1 = index.neighborsOf(V1);", "-        assertEquals(1, neighbors.size());", "-        assertEquals(true, neighbors.contains(V2));", "+        assertEquals(1, neighbors1.size());", "+        assertEquals(true, neighbors1.contains(V2));", "-        assertEquals(2, neighbors.size());", "-        assertEquals(true, neighbors.contains(V3));", "+        Set neighbors3 = index.neighborsOf(V3);", "+        ", "+        assertEquals(2, neighbors1.size());", "+        assertEquals(true, neighbors1.contains(V3));", "+", "+        assertEquals(1, neighbors3.size());", "+        assertEquals(true, neighbors3.contains(V1));", "-        assertEquals(1, neighbors.size());", "-        assertEquals(false, neighbors.contains(V3));", "+        assertEquals(1, neighbors1.size());", "+        assertEquals(false, neighbors1.contains(V3));", "+        assertEquals(0, neighbors3.size());", "+        ", "-        assertEquals(0, neighbors.size());", "+        assertEquals(0, neighbors1.size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e27c82c4902b441290bd77c32a75c9cf", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/graph/SimpleDirectedGraphTest.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void testInDegreeOf()", "signatureAfterChange": "     public void testInDegreeOf()", "diff": ["-        assertEquals(0, m_g1.inDegreeOf(m_v1));", "+        assertEquals(0, g1.inDegreeOf(v1));", "-        assertEquals(1, m_g2.inDegreeOf(m_v1));", "-        assertEquals(1, m_g2.inDegreeOf(m_v2));", "+        assertEquals(1, g2.inDegreeOf(v1));", "+        assertEquals(1, g2.inDegreeOf(v2));", "-        assertEquals(2, m_g3.inDegreeOf(m_v1));", "-        assertEquals(2, m_g3.inDegreeOf(m_v2));", "-        assertEquals(2, m_g3.inDegreeOf(m_v3));", "+        assertEquals(2, g3.inDegreeOf(v1));", "+        assertEquals(2, g3.inDegreeOf(v2));", "+        assertEquals(2, g3.inDegreeOf(v3));", "-        assertEquals(1, m_g4.inDegreeOf(m_v1));", "-        assertEquals(1, m_g4.inDegreeOf(m_v2));", "-        assertEquals(1, m_g4.inDegreeOf(m_v3));", "-        assertEquals(1, m_g4.inDegreeOf(m_v4));", "+        assertEquals(1, g4.inDegreeOf(v1));", "+        assertEquals(1, g4.inDegreeOf(v2));", "+        assertEquals(1, g4.inDegreeOf(v3));", "+        assertEquals(1, g4.inDegreeOf(v4));", "-            m_g3.inDegreeOf(new String());", "+            g3.inDegreeOf(new String());", "-            m_g3.inDegreeOf(null);", "+            g3.inDegreeOf(null);"]}]}
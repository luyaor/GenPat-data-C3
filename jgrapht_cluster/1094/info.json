{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7a02a576cb9198b5a77b449f29644e70", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6547c71716450a177beee268fbdcef1b", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/experimental/alg/DijkstraAlgorithm.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public final WeightedGraph<V,E> optimumPathTree(V from)", "signatureAfterChange": "     public final WeightedGraph<V,E> optimumPathTree(V from)", "diff": ["-            optimumPathTree = (WeightedGraph<V,E>)new SimpleDirectedWeightedGraph<V,DirEdge<V>>();", "+            optimumPathTree = (WeightedGraph<V,E>)new SimpleDirectedWeightedGraph<V,E>();", "-                GraphHelper.addEdgeWithVertices(optimumPathTree, treeEdge);", "+                Graphs.addEdgeWithVertices(optimumPathTree, treeEdge);", "-            Iterator<? extends Edge<V>> edges;", "+            Iterator<E> edges;", "-                    ((DirectedGraph<V,DirEdge<V>>) _wgraph).outgoingEdgesOf(v).iterator();", "+                    ((DirectedGraph<V,E>) _wgraph).outgoingEdgesOf(v).iterator();", "-                Edge<V> e = edges.next();", "+                E e = edges.next();", "-                    priorityFunction(hv.getPriority(), e.getWeight());", "+                    priorityFunction(hv.getPriority(), _wgraph.getWeight(e));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa100eed5f5af69bbbcd6afd51b5679e", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/EdmondsBlossomShrinking.java", "commitBeforeChange": "09f8c42369e19bad56b44493e9da23f84c9f33d0", "commitAfterChange": "8eb48033f951ffcc0a59543e123e6881cda6c1db", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private Set<E> findMatch()", "signatureAfterChange": "     private Set<E> findMatch()", "diff": ["-        p = new HashMap<V, V>();", "-        q = new ArrayDeque<V>();", "-        base = new HashMap<V, V>();", "-        used = new HashSet<V>();", "-        blossom = new HashSet<V>();", "+        path = new HashMap<V, V>();", "+        contracted = new HashMap<V, V>();", "+            // Any augmenting path should start with _exposed_ vertex", "+            // (vertex may not escape match-set being added once)", "+                // Match is maximal iff graph G contains no more augmenting paths", "-                    V pv = p.get(v);", "+                    V pv = path.get(v);"]}]}
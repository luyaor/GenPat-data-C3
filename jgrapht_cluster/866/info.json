{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c8bccea42791c749e3f3f11672ae58c6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43f6526261b63973fcffe5e7eb787a96", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/StrongConnectivityInspector.java", "commitBeforeChange": "61dbb1af6c224986e7d12029f65eb7b3fce4e12a", "commitAfterChange": "5dfb58e41ca1578202f9d451a90e9b653291ef83", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void dfsVisit(         DirectedGraph<V, E> visitedGraph,         VertexData<V> vertexData,         Set<V> vertices)", "signatureAfterChange": "     private void dfsVisit(         DirectedGraph<V, E> visitedGraph,         VertexData<V> vertexData,         Set<V> vertices)", "diff": ["-        Stack<VertexData<V>> stack = new Stack<VertexData<V>>();", "-        stack.push(vertexData);", "+        Deque<VertexData<V>> stack = new ArrayDeque<VertexData<V>>();", "+        stack.add(vertexData);", "-            VertexData<V> data = stack.pop();", "+            VertexData<V> data = stack.removeLast();", "-                stack.push(new VertexData1<V>(data, true, true));", "+                stack.add(new VertexData1<V>(data, true, true));", "-                        stack.push(targetData);", "+                        stack.add(targetData);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e342516ad493e90c455d866416b5903c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/StrongConnectivityInspector.java", "commitBeforeChange": "3917888b7641aba5a84e6cc425eecb8d127fd2c5", "commitAfterChange": "61dbb1af6c224986e7d12029f65eb7b3fce4e12a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void dfsVisit(         DirectedGraph<V, E> visitedGraph,         VertexData<V> vertexData,         Set<V> vertices)", "signatureAfterChange": "     private void dfsVisit(         DirectedGraph<V, E> visitedGraph,         VertexData<V> vertexData,         Set<V> vertices)", "diff": ["-                    vertices.add(data.vertex);", "+                    vertices.add(data.getVertex());", "-                stack.push(new VertexData<V>(data, null, true, true));", "+                stack.push(new VertexData1<V>(data, true, true));", "-                for (E edge : visitedGraph.outgoingEdgesOf(data.vertex)) {", "+                for (E edge : visitedGraph.outgoingEdgesOf(data.getVertex())) {", "-                    orderedVertices.addFirst(data.finishedData);", "+                    orderedVertices.addFirst(data.getFinishedData());"]}]}
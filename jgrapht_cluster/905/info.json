{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "65b122618381af3cfb30a79087a2824f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1544c450973395490b3bbd97eaef5870", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/alg/ConnectivityInspectorTest.java", "commitBeforeChange": "04b4adb9d61a0a7a990979c19fd44e55accd860f", "commitAfterChange": "ccbda858621a3d1beb6a9381a0fc81c3673ee66c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void testStronglyConnected1(  )", "signatureAfterChange": "     public void testStronglyConnected1()", "diff": ["-    public void testStronglyConnected1(  ) {", "-        DirectedGraph g = new DefaultDirectedGraph(  );", "-        g.addVertex( V1 );", "-        g.addVertex( V2 );", "-        g.addVertex( V3 );", "-        g.addVertex( V4 );", "+    public void testStronglyConnected1() {", "+        DirectedGraph g = new DefaultDirectedGraph();", "+        g.addVertex(V1);", "+        g.addVertex(V2);", "+        g.addVertex(V3);", "+        g.addVertex(V4);", "-        g.addEdge( V1, V2 );", "-        g.addEdge( V2, V1 ); // strongly connected", "+        g.addEdge(V1, V2);", "+        g.addEdge(V2, V1); // strongly connected", "-        g.addEdge( V3, V4 ); // only weakly connected", "+        g.addEdge(V3, V4); // only weakly connected", "-        StrongConnectivityInspector inspector =", "-            new StrongConnectivityInspector( g );", "+        StrongConnectivityInspector inspector = new StrongConnectivityInspector(", "+                g);", "-        Set actualSets = new HashSet( inspector.stronglyConnectedSets(  ) );", "+        Set actualSets = new HashSet(inspector.stronglyConnectedSets());", "-        Set expectedSets = new HashSet(  );", "-        Set set = new HashSet(  );", "-        set.add( V1 );", "-        set.add( V2 );", "-        expectedSets.add( set );", "-        set = new HashSet(  );", "-        set.add( V3 );", "-        expectedSets.add( set );", "-        set = new HashSet(  );", "-        set.add( V4 );", "-        expectedSets.add( set );", "+        Set expectedSets = new HashSet();", "+        Set set = new HashSet();", "+        set.add(V1);", "+        set.add(V2);", "+        expectedSets.add(set);", "+        set = new HashSet();", "+        set.add(V3);", "+        expectedSets.add(set);", "+        set = new HashSet();", "+        set.add(V4);", "+        expectedSets.add(set);", "-        assertEquals( expectedSets, actualSets );", "+        assertEquals(expectedSets, actualSets);", "+", "+        actualSets.clear();", "+        List subgraphs = inspector.stronglyConnectedSubgraphs();", "+        Iterator iter = subgraphs.iterator();", "+        while (iter.hasNext()) {", "+            DirectedSubgraph sg = (DirectedSubgraph) iter.next();", "+            actualSets.add(sg.vertexSet());", "+", "+            StrongConnectivityInspector ci = new StrongConnectivityInspector(sg);", "+            assertTrue(ci.isStronglyConnected());", "+        }", "+        assertEquals(expectedSets, actualSets);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9492d4e20fd3570d6ff322eee70698da", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/alg/ConnectivityInspectorTest.java", "commitBeforeChange": "04b4adb9d61a0a7a990979c19fd44e55accd860f", "commitAfterChange": "ccbda858621a3d1beb6a9381a0fc81c3673ee66c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void testStronglyConnected2(  )", "signatureAfterChange": "     public void testStronglyConnected2()", "diff": ["-    public void testStronglyConnected2(  ) {", "-        DirectedGraph g = new DefaultDirectedGraph(  );", "-        g.addVertex( V1 );", "-        g.addVertex( V2 );", "-        g.addVertex( V3 );", "-        g.addVertex( V4 );", "+    public void testStronglyConnected2() {", "+        DirectedGraph g = new DefaultDirectedGraph();", "+        g.addVertex(V1);", "+        g.addVertex(V2);", "+        g.addVertex(V3);", "+        g.addVertex(V4);", "-        g.addEdge( V1, V2 );", "-        g.addEdge( V2, V1 ); // strongly connected", "+        g.addEdge(V1, V2);", "+        g.addEdge(V2, V1); // strongly connected", "-        g.addEdge( V4, V3 ); // only weakly connected", "-        g.addEdge( V3, V2 ); // only weakly connected", "+        g.addEdge(V4, V3); // only weakly connected", "+        g.addEdge(V3, V2); // only weakly connected", "-        StrongConnectivityInspector inspector =", "-            new StrongConnectivityInspector( g );", "+        StrongConnectivityInspector inspector = new StrongConnectivityInspector(", "+                g);", "-        Set actualSets = new HashSet( inspector.stronglyConnectedSets(  ) );", "+        Set actualSets = new HashSet(inspector.stronglyConnectedSets());", "-        Set expectedSets = new HashSet(  );", "-        Set set = new HashSet(  );", "-        set.add( V1 );", "-        set.add( V2 );", "-        expectedSets.add( set );", "-        set = new HashSet(  );", "-        set.add( V3 );", "-        expectedSets.add( set );", "-        set = new HashSet(  );", "-        set.add( V4 );", "-        expectedSets.add( set );", "+        Set expectedSets = new HashSet();", "+        Set set = new HashSet();", "+        set.add(V1);", "+        set.add(V2);", "+        expectedSets.add(set);", "+        set = new HashSet();", "+        set.add(V3);", "+        expectedSets.add(set);", "+        set = new HashSet();", "+        set.add(V4);", "+        expectedSets.add(set);", "-        assertEquals( expectedSets, actualSets );", "+        assertEquals(expectedSets, actualSets);", "+", "+        actualSets.clear();", "+        List subgraphs = inspector.stronglyConnectedSubgraphs();", "+        Iterator iter = subgraphs.iterator();", "+        while (iter.hasNext()) {", "+            DirectedSubgraph sg = (DirectedSubgraph) iter.next();", "+            actualSets.add(sg.vertexSet());", "+", "+            StrongConnectivityInspector ci = new StrongConnectivityInspector(sg);", "+            assertTrue(ci.isStronglyConnected());", "+        }", "+        assertEquals(expectedSets, actualSets);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef97dfbe88721510ea789ef515e4aea1", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/alg/ConnectivityInspectorTest.java", "commitBeforeChange": "04b4adb9d61a0a7a990979c19fd44e55accd860f", "commitAfterChange": "ccbda858621a3d1beb6a9381a0fc81c3673ee66c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void testStronglyConnected3(  )", "signatureAfterChange": "     public void testStronglyConnected3()", "diff": ["-    public void testStronglyConnected3(  ) {", "-        DirectedGraph g = new DefaultDirectedGraph(  );", "-        g.addVertex( V1 );", "-        g.addVertex( V2 );", "-        g.addVertex( V3 );", "-        g.addVertex( V4 );", "+    public void testStronglyConnected3() {", "+        DirectedGraph g = new DefaultDirectedGraph();", "+        g.addVertex(V1);", "+        g.addVertex(V2);", "+        g.addVertex(V3);", "+        g.addVertex(V4);", "-        g.addEdge( V1, V2 );", "-        g.addEdge( V2, V3 );", "-        g.addEdge( V3, V1 ); // strongly connected", "+        g.addEdge(V1, V2);", "+        g.addEdge(V2, V3);", "+        g.addEdge(V3, V1); // strongly connected", "-        g.addEdge( V1, V4 );", "-        g.addEdge( V2, V4 );", "-        g.addEdge( V3, V4 ); // weakly connected", "+        g.addEdge(V1, V4);", "+        g.addEdge(V2, V4);", "+        g.addEdge(V3, V4); // weakly connected", "-        StrongConnectivityInspector inspector =", "-            new StrongConnectivityInspector( g );", "+        StrongConnectivityInspector inspector = new StrongConnectivityInspector(", "+                g);", "-        Set actualSets = new HashSet( inspector.stronglyConnectedSets(  ) );", "+        Set actualSets = new HashSet(inspector.stronglyConnectedSets());", "-        Set expectedSets = new HashSet(  );", "-        Set set = new HashSet(  );", "-        set.add( V1 );", "-        set.add( V2 );", "-        set.add( V3 );", "-        expectedSets.add( set );", "-        set = new HashSet(  );", "-        set.add( V4 );", "-        expectedSets.add( set );", "+        Set expectedSets = new HashSet();", "+        Set set = new HashSet();", "+        set.add(V1);", "+        set.add(V2);", "+        set.add(V3);", "+        expectedSets.add(set);", "+        set = new HashSet();", "+        set.add(V4);", "+        expectedSets.add(set);", "-        assertEquals( expectedSets, actualSets );", "+        assertEquals(expectedSets, actualSets);", "+", "+        actualSets.clear();", "+        List subgraphs = inspector.stronglyConnectedSubgraphs();", "+        Iterator iter = subgraphs.iterator();", "+        while (iter.hasNext()) {", "+            DirectedSubgraph sg = (DirectedSubgraph) iter.next();", "+            actualSets.add(sg.vertexSet());", "+", "+            StrongConnectivityInspector ci = new StrongConnectivityInspector(sg);", "+            assertTrue(ci.isStronglyConnected());", "+        }", "+        assertEquals(expectedSets, actualSets);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a8711b98485e08ad469f979b58cc2ec2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54a4461e3672c3be7c01a6a7a3b7b590", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/experimental/subgraphisomorphism/VF2SubgraphIsomorphismInspectorTest.java", "commitBeforeChange": "f67e9197d81c666622112a20391d80767fa4beb3", "commitAfterChange": "af1b824446ff484516d50232b001351d46878322", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \t@Test \tpublic void test2()", "signatureAfterChange": "          @Test     public void testRandomGraphs()", "diff": ["-\tpublic void test2() {", "-\t\tRandom rnd = new Random();", "-\t\trnd.setSeed(99999);", "-\t\t", "-\t\tfor (int i = 1; i < 50; i++)\t{", "-\t\t\tint vertexCount = 2 + rnd.nextInt(i),", "-\t\t\t\tedgeCount = rnd.nextInt(vertexCount * (vertexCount - 1)),", "-\t\t\t\tsubVertexCount = 1 + rnd.nextInt(vertexCount);", "-\t\t\tSystem.out.print(i + \": \" + vertexCount + \"v, \" + edgeCount + \"e \");", "-\t\t\tassertEquals(true, singleTest(vertexCount, edgeCount, subVertexCount, i));", "-\t\t}", "-\t}", "+    ", "+    @Test", "+    public void testRandomGraphs() {", "+        Random rnd = new Random();", "+        rnd.setSeed(54321);", "+        ", "+        for (int i = 1; i < 50; i++)    {", "+            int vertexCount    = 2 + rnd.nextInt(i),", "+                edgeCount      = vertexCount + ", "+                    rnd.nextInt(vertexCount * (vertexCount - 1)) / 2,", "+                subVertexCount = 1 + rnd.nextInt(vertexCount);", "+            ", "+            DirectedGraph<Integer, DefaultEdge> g1 =", "+                SubgraphIsomorphismTestUtils.randomGraph(vertexCount,", "+                                edgeCount, i),", "+                                                g2 =", "+                SubgraphIsomorphismTestUtils.randomSubgraph(g1, subVertexCount,", "+                                i);", "+            ", "+            VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf2 =", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(g1,", "+                                g2);", "+", "+            SubgraphIsomorphismTestUtils.showLog(i + \": \" + vertexCount +", "+                            \"v, \" + edgeCount + \"e \");", "+            ", "+            while (vf2.hasNext())   {", "+                assertEquals(true,", "+                    SubgraphIsomorphismTestUtils.isCorrectMatching(vf2.next(),", "+                                    g1, g2));", "+                SubgraphIsomorphismTestUtils.showLog(\".\");", "+            }", "+            SubgraphIsomorphismTestUtils.showLog(\"\\n\");", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cd13049dc95d4c16254f33eb3ed9ac3", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/experimental/subgraphisomorphism/VF2SubgraphIsomorphismInspectorTest.java", "commitBeforeChange": "f67e9197d81c666622112a20391d80767fa4beb3", "commitAfterChange": "af1b824446ff484516d50232b001351d46878322", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t\t \t\tpublic SubgraphWithString( \t\t\t\tDirectedGraph<String, DefaultEdge> graph, \t\t\t\tString str)", "signatureAfterChange": "          @Test     public void testRandomGraphsExhaustive()", "diff": ["-\t\t", "-\t\tpublic SubgraphWithString(", "-\t\t\t\tDirectedGraph<String, DefaultEdge> graph,", "-\t\t\t\tString str)", "-\t\t{", "-\t\t\tthis.graph = graph;", "-\t\t\tthis.str = str;", "-\t\t}", "+    ", "+    @Test", "+    public void testRandomGraphsExhaustive() {", "+        Random rnd = new Random();", "+        rnd.setSeed(12345);", "+        ", "+        for (int i = 1; i < 100; i++)    {", "+            int vertexCount    = 3 + rnd.nextInt(5),", "+                edgeCount      = rnd.nextInt(vertexCount * (vertexCount - 1)),", "+                subVertexCount = 2 + rnd.nextInt(vertexCount),", "+                subEdgeCount   = rnd.nextInt(subVertexCount * ", "+                                    (subVertexCount - 1));", "+            ", "+            DirectedGraph<Integer, DefaultEdge> g1 =", "+                SubgraphIsomorphismTestUtils.randomGraph(vertexCount,", "+                                edgeCount, i),", "+                                                g2 =", "+                SubgraphIsomorphismTestUtils.randomGraph(subVertexCount,", "+                                subEdgeCount, i);", "+            ", "+            VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf2 =", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(g1,", "+                                g2);", "+", "+            SubgraphIsomorphismTestUtils.showLog(i + \": \" + vertexCount +", "+                            \"v, \" + edgeCount + \"e ....\\n\");", "+", "+            assertEquals(true,", "+                SubgraphIsomorphismTestUtils.containsAllMatchings(vf2, g1, g2));", "+        }", "+    }"]}]}
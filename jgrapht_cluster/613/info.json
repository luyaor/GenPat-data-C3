{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "45b25e516244e12fa54f7b4a38b15f46", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "630f9164466194c848bbafe2b136a41f", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/TarjanLowestCommonAncestor.java", "commitBeforeChange": "5b90c14876e7dae9d968e0fa6bf0f9d94c76d2b4", "commitAfterChange": "1ecfb8da9bf06c3b9397099246c9f12f1e4e9bca", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate List<V> calculate(final V u)", "signatureAfterChange": " \tprivate List<V> calculate(final V u)", "diff": ["-            if (g.getEdgeSource(vEdge).equals(u)) {", "-                V v = g.getEdgeTarget(vEdge);", "-                calculate(v);", "-                uf.union(u, v);", "-                ancestors.put(uf.find(u), u);", "-            }", "-            black.add(u);", "+\t\tif (g.getEdgeSource(vEdge).equals(u)) {", "+\t\t    V v = g.getEdgeTarget(vEdge);", "+\t\t    calculate(v);", "+\t\t    uf.union(u, v);", "+\t\t    ancestors.put(uf.find(u), u);", "+\t\t}", "+\t\tblack.add(u);", "-            Set<LcaRequestResponse<V>> uLRR = LRRMap.get(u);", "-            if (uLRR != null)", "-            {", "-                for (Iterator<LcaRequestResponse<V>> irr = uLRR.iterator(); irr.hasNext(); )", "-                {", "-                    LcaRequestResponse<V> rr = irr.next();", "-", "-                    if (black.contains(rr.getB()) && rr.getA().equals(u)) {", "-                        rr.setLca(ancestors.get(uf.find(rr.getB())));", "-                    }", "-                    if (black.contains(rr.getA()) && rr.getB().equals(u)) {", "-                        rr.setLca(ancestors.get(uf.find(rr.getA())));", "-                    }", "-", "-                    irr.remove();", "-                }", "-            }", "-        }", "+\t\tSet<LcaRequestResponse<V>> requestsForNodeU = lrrMap.get(u);", "+\t\tif (requestsForNodeU != null) {", "+\t\t    for (LcaRequestResponse<V> rr : requestsForNodeU) {", "+\t\t\tif (black.contains(rr.getB()) && rr.getA().equals(u)) {", "+\t\t\t    rr.setLca(ancestors.get(uf.find(rr.getB())));", "+\t\t\t}", "+\t\t\tif (black.contains(rr.getA()) && rr.getB().equals(u)) {", "+\t\t\t    rr.setLca(ancestors.get(uf.find(rr.getA())));", "+\t\t\t}", "+\t\t    }", "+\t\t    // once we've dealt with it - remove it (to save memory?)", "+\t\t    lrrMap.remove(u);", "+\t\t}", "+\t    }", "-\t    for (LcaRequestResponse<V> current : LRR) {", "-\t\t    result.add(current.getLca());", "+\t    for (LcaRequestResponse<V> current : lrr) {", "+\t\tresult.add(current.getLca());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "988145ccfe201f6056463916e8e56558", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/StrongConnectivityInspector.java", "commitBeforeChange": "a1594c7a8cf14f3607828e0c2206c8cb46973c14", "commitAfterChange": "7c2fd4236ba8ec0b0b36e4596ee2ead1af54cf2d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public List<Set<V>> stronglyConnectedSets()", "signatureAfterChange": "     public List<Set<V>> stronglyConnectedSets()", "diff": ["-            Iterator<VertexData<V>> iter =", "-                vertexToVertexData.values().iterator();", "-", "-            while (iter.hasNext()) {", "-                VertexData<V> data = iter.next();", "-", "+            for (VertexData<V> data : vertexToVertexData.values()) {", "-            iter = orderedVertices.iterator();", "-", "-            while (iter.hasNext()) {", "-                VertexData<V> data = iter.next();", "-", "+            for (VertexData<V> data : orderedVertices) {"]}]}
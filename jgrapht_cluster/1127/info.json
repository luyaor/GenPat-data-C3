{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4dbbd0358c05c2a7018a5bd5d14e3060", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2326815f24cfc6ff4db28633fcc7a9d0", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/experimental/GraphReader.java", "commitBeforeChange": "706aa3597ecf30c14c3a4ac469519dd45ef4dc50", "commitAfterChange": "55241662127745f1a473298706f974517b39b392", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void readGraph( Graph g ) throws IOException", "signatureAfterChange": "     public void readGraph( Graph g ) throws IOException", "diff": ["-                        GraphHelper.addEdgeWithVertices( g, new Integer( x ),", "-                            new Integer( y ) );", "+                        if (cols.length > 3) {", "+                            GraphHelper.addEdgeWithVertices( g, new Integer( x ),", "+                                new Integer( y ), Double.parseDouble(cols[ 3 ]) );", "+                        } else {", "+                            GraphHelper.addEdgeWithVertices( g, new Integer( x ),", "+                                new Integer( y ) );", "+                        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c4156ad591d4b13092bea18db35d7b0", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/GraphOrdering.java", "commitBeforeChange": "dcd52f7fb7eeeadf66a7b8d39b5c500257a852b0", "commitAfterChange": "c2593980e98ffd3b0fd8713e1065362c591d271a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public GraphOrdering(Graph<V, E> graph, boolean orderByDegree)", "signatureAfterChange": "     public GraphOrdering(Graph<V, E> graph, boolean orderByDegree)", "diff": ["-        Set<V> vertexSet = graph.vertexSet();", "+        List<V> vertexSet = new ArrayList<V>(graph.vertexSet());", "+        if (orderByDegree)", "+            java.util.Collections.sort(vertexSet,", "+                            new GeneralVertexDegreeComparator<V>(graph));", "+        ", "-", "-        // TODO: orderByDegree"]}]}
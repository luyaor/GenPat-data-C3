{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "28b0c1eabc23cfb223af847768eeaf62", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07a8e0b6e2f09de48833128f1ca6baf1", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/EdmondsKarpMaximumFlowTest.java", "commitBeforeChange": "45fdf2d06b2f697f414a6dba7b5708e895f3889b", "commitAfterChange": "9288cc6f229c6d1aa15398231bc75a90896d4262", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \tpublic void testLogic()", "signatureAfterChange": "\r \tpublic void testLogic()", "diff": ["+\t\t\t\tnew int[]{},\r", "+\t\t\t\tnew int[]{},\r", "+\t\t\t\tnew double[]{},\r", "+\t\t\t\tnew int[]{1},\r", "+\t\t\t\tnew int[]{4057218},\r", "+\t\t\t\tnew double[]{0.0});\r", "+\t\trunTest(\r", "+\t\trunTest(\r", "+\t\t\t\tnew int[]{5, 5, 5, 1, 1, 4, 2, 7, 8, 3},\r", "+\t\t\t\tnew int[]{1, 4, 2, 7, 8, 3, 8, 6, 6, 6},\r", "+\t\t\t\tnew double[]{7, 8, 573146, 31337, 1, 1, 1, 1, 2391717, 170239},\r", "+\t\t\t\tnew int[]{5},\r", "+\t\t\t\tnew int[]{6},\r", "+\t\t\t\tnew double[]{4.0});\r", "+\t\trunTest(\r", "+\t\t\t\tnew int[]{1, 1, 2, 2, 3},\r", "+\t\t\t\tnew int[]{2, 3, 3, 4, 4},\r", "+\t\t\t\tnew double[]{1000000000.0, 1000000000.0, 1.0, 1000000000.0, 1000000000.0},\r", "+\t\t\t\tnew int[]{1},\r", "+\t\t\t\tnew int[]{4},\r", "+\t\t\t\tnew double[]{2000000000.0});\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e6b698aaa67ef330acccdec4ab34d19", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/graph/SimpleDirectedGraphTest.java", "commitBeforeChange": "8cf8651db5de9405d7887b55b67fde1d9e01e224", "commitAfterChange": "9ac63fa5d348b319d01e5aef6fad2b1fa76f8f81", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void testEdgesOf(  )", "signatureAfterChange": "     public void testEdgesOf(  )", "diff": ["-        init(  ); //TODO Implement edgesOf().", "+        init(  );", "+", "+        assertEquals( m_g4.edgesOf( m_v1 ).size(  ), 2 );", "+        assertEquals( m_g3.edgesOf( m_v1 ).size(  ), 4 );", "+", "+        Iterator iter  = m_g3.edgesOf( m_v1 ).iterator(  );", "+        int      count = 0;", "+", "+        while( iter.hasNext(  ) ) {", "+            iter.next(  );", "+            count++;", "+        }", "+", "+        assertEquals( count, 4 );"]}]}
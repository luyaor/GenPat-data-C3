{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "05655989c1c68ba6d1d68baca0e35f54", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "241981649d99ed18019a4617ed996982", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/DijkstraShortestPath.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private void createEdgeList(ClosestFirstIterator<V, E> iter, V endVertex)", "signatureAfterChange": "      private void createEdgeList(         Graph<V, E> graph,         ClosestFirstIterator<V, E> iter,         V endVertex)", "diff": ["-    private void createEdgeList(ClosestFirstIterator<V, E> iter, V endVertex)", "+    private void createEdgeList(", "+        Graph<V, E> graph,", "+        ClosestFirstIterator<V, E> iter,", "+        V endVertex)", "-            endVertex = edge.oppositeVertex(endVertex);", "+            endVertex = Graphs.getOppositeVertex(graph, edge, endVertex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56d93994c6b4e355d92de19ae2b9ea23", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/DijkstraShortestPath.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "       private void createEdgeList( ClosestFirstIterator iter, Object endVertex )", "signatureAfterChange": "       private void createEdgeList( ClosestFirstIterator<V, E> iter, V endVertex )", "diff": ["-    private void createEdgeList( ClosestFirstIterator iter, Object endVertex ) {", "+    private void createEdgeList( ClosestFirstIterator<V, E> iter, V endVertex ) {", "-            Edge edge = iter.getSpanningTreeEdge( endVertex );", "+            E edge = iter.getSpanningTreeEdge( endVertex );"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea3f85c67c3c5c303315c1eceffe04a4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a41754db679dc00a0bf6f8e20ba1051", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/generate/RandomGraphGeneratorTest.java", "commitBeforeChange": "afc074a42fcdf2d18274969fe6ef749a97e714ba", "commitAfterChange": "6fa151aa74c63b595990d43e787300c5ccc0ca2e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void testGenerateGraph2()", "signatureAfterChange": "     private static void generateGraphs(         Graph [] graphs, int numOfVertex, int numOfEdges)", "diff": ["-    public void testGenerateGraph2()", "-        Graph [] graphArray = testGenerateDirectedGraph();", "+     */", "+    private static void generateGraphs(", "+        Graph [] graphs, int numOfVertex, int numOfEdges)", "+    {", "+            graphs[0],", "+            graphs[1],", "+            graphs[2],"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54a4461e3672c3be7c01a6a7a3b7b590", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/experimental/subgraphisomorphism/VF2SubgraphIsomorphismInspectorTest.java", "commitBeforeChange": "f67e9197d81c666622112a20391d80767fa4beb3", "commitAfterChange": "af1b824446ff484516d50232b001351d46878322", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \t@Test \tpublic void test2()", "signatureAfterChange": "          @Test     public void testRandomGraphs()", "diff": ["-\tpublic void test2() {", "-\t\tRandom rnd = new Random();", "-\t\trnd.setSeed(99999);", "-\t\t", "-\t\tfor (int i = 1; i < 50; i++)\t{", "-\t\t\tint vertexCount = 2 + rnd.nextInt(i),", "-\t\t\t\tedgeCount = rnd.nextInt(vertexCount * (vertexCount - 1)),", "-\t\t\t\tsubVertexCount = 1 + rnd.nextInt(vertexCount);", "-\t\t\tSystem.out.print(i + \": \" + vertexCount + \"v, \" + edgeCount + \"e \");", "-\t\t\tassertEquals(true, singleTest(vertexCount, edgeCount, subVertexCount, i));", "-\t\t}", "-\t}", "+    ", "+    @Test", "+    public void testRandomGraphs() {", "+        Random rnd = new Random();", "+        rnd.setSeed(54321);", "+        ", "+        for (int i = 1; i < 50; i++)    {", "+            int vertexCount    = 2 + rnd.nextInt(i),", "+                edgeCount      = vertexCount + ", "+                    rnd.nextInt(vertexCount * (vertexCount - 1)) / 2,", "+                subVertexCount = 1 + rnd.nextInt(vertexCount);", "+            ", "+            DirectedGraph<Integer, DefaultEdge> g1 =", "+                SubgraphIsomorphismTestUtils.randomGraph(vertexCount,", "+                                edgeCount, i),", "+                                                g2 =", "+                SubgraphIsomorphismTestUtils.randomSubgraph(g1, subVertexCount,", "+                                i);", "+            ", "+            VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf2 =", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(g1,", "+                                g2);", "+", "+            SubgraphIsomorphismTestUtils.showLog(i + \": \" + vertexCount +", "+                            \"v, \" + edgeCount + \"e \");", "+            ", "+            while (vf2.hasNext())   {", "+                assertEquals(true,", "+                    SubgraphIsomorphismTestUtils.isCorrectMatching(vf2.next(),", "+                                    g1, g2));", "+                SubgraphIsomorphismTestUtils.showLog(\".\");", "+            }", "+            SubgraphIsomorphismTestUtils.showLog(\"\\n\");", "+        }", "+    }"]}]}
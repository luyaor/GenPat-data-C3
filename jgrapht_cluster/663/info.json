{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a6b26cf48f80ccfd56f12f019caff2c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69b1fe65feff4508722c7d23f9893d12", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/KShortestPaths.java", "commitBeforeChange": "d11cabd1aabdc954107d901bc835dd46e2c5b915", "commitAfterChange": "695a606157d7ef974075682ce4ecc3e1dfdc85a4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public List<RankingPathElement<V, E>> getPathElements(V endVertex)", "signatureAfterChange": "     public List<RankingPathElement<V, E>> getPathElements(V endVertex)", "diff": ["-    public List<RankingPathElement<V, E>> getPathElements(V endVertex)", "-    {", "+    public List<RankingPathElement<V, E>> getPathElements(V endVertex) {", "-        lazyCalculate();", "+        KShortestPathsIterator<V, E> iter = new KShortestPathsIterator<V, E>(", "+                this.graph, this.startVertex, endVertex, this.nPaths);", "-        return this.iter.getPathElements(endVertex);", "+        // at the i-th pass the shortest paths with less (or equal) than i edges", "+        // are calculated.", "+        for (int passNumber = 1; (passNumber <= this.nMaxHops)", "+                && iter.hasNext(); passNumber++) {", "+            iter.next();", "+        }", "+", "+        return iter.getPathElements(endVertex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b4c2e5749bbae79009ca05d2e1da26c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/TarjanLowestCommonAncestorTest.java", "commitBeforeChange": "031459d6e58bfab7227c1f29575f466935e4a228", "commitAfterChange": "4f70257bd051e3e96df9996dad40065743a630ec", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testDag()", "signatureAfterChange": "      @Test     public void testNonBinaryTree()", "diff": ["-    public void testDag() {", "+    public void testNonBinaryTree() {", "+\tg.addVertex(\"h\");", "+\tg.addVertex(\"i\");", "+\tg.addVertex(\"j\");", "-\tg.addEdge(\"d\", \"f\");", "-\tg.addEdge(\"b\", \"e\");", "-\tg.addEdge(\"e\", \"f\");", "-\tg.addEdge(\"f\", \"g\");", "+\tg.addEdge(\"d\", \"e\");", "+\tg.addEdge(\"b\", \"f\");", "+\tg.addEdge(\"b\", \"g\");", "+\tg.addEdge(\"c\", \"h\");", "+\tg.addEdge(\"c\", \"i\");", "+\tg.addEdge(\"i\", \"j\");", "-\tAssert.assertEquals(\"b\", new TarjanLowestCommonAncestor<String, DefaultEdge>(g).calculate(\"a\", \"b\", \"g\"));", "-\tAssert.assertEquals(\"b\", new TarjanLowestCommonAncestor<String, DefaultEdge>(g).calculate(\"a\", \"e\", \"d\"));", "-\tAssert.assertEquals(\"d\", new TarjanLowestCommonAncestor<String, DefaultEdge>(g).calculate(\"a\", \"f\", \"d\"));", "+\tAssert.assertEquals(\"b\", new TarjanLowestCommonAncestor<String, DefaultEdge>(g).calculate(\"a\", \"b\", \"h\"));", "+\tAssert.assertEquals(\"b\", new TarjanLowestCommonAncestor<String, DefaultEdge>(g).calculate(\"a\", \"j\", \"f\"));", "+\tAssert.assertEquals(\"c\", new TarjanLowestCommonAncestor<String, DefaultEdge>(g).calculate(\"a\", \"j\", \"h\"));", "-\tLcaRequestResponse<String> bg = new LcaRequestResponse<String>(\"b\", \"g\");", "-\tLcaRequestResponse<String> ed = new LcaRequestResponse<String>(\"e\", \"d\");", "-\tLcaRequestResponse<String> fd = new LcaRequestResponse<String>(\"f\", \"d\");", "+\tLcaRequestResponse<String> bg = new LcaRequestResponse<String>(\"b\", \"h\");", "+\tLcaRequestResponse<String> ed = new LcaRequestResponse<String>(\"j\", \"f\");", "+\tLcaRequestResponse<String> fd = new LcaRequestResponse<String>(\"j\", \"h\");", "-\t", "-\tAssert.assertEquals(\"d\",fd.getLca());", "+\tAssert.assertEquals(\"c\",fd.getLca());", "-\tAssert.assertEquals(Arrays.asList(new String[]{\"b\",\"b\",\"d\"}),result);", "+\tAssert.assertEquals(Arrays.asList(new String[]{\"b\",\"b\",\"c\"}),result);", "-\t", "-\t// test it the other way around", "-\tAssert.assertEquals(\"d\", new TarjanLowestCommonAncestor<String, DefaultEdge>(g).calculate(\"a\", \"d\", \"f\"));", "+\t// test it the other way around and starting from b", "+\tAssert.assertEquals(\"b\", new TarjanLowestCommonAncestor<String, DefaultEdge>(g).calculate(\"b\", \"h\", \"b\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f782fa3e79e86e55683bd754808be49", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/TarjanLowestCommonAncestorTest.java", "commitBeforeChange": "2bc963d635f1387003153797aed8f23b13ab7da1", "commitAfterChange": "a4290d9c2b951f2351aab06bfad84c59bf804b25", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void dagTest()", "signatureAfterChange": "      @Test     public void dagTest()", "diff": ["-\tnew TarjanLowestCommonAncestor<String, DefaultEdge>(g).calculate(\"a\", bg, ed, fd);", "+\tList<LcaRequestResponse<String>> list = new LinkedList<LcaRequestResponse<String>> ();", "+\tlist.add(bg);", "+\tlist.add(ed);", "+\tlist.add(fd);", "+\t", "+\tList<String> result = new TarjanLowestCommonAncestor<String, DefaultEdge>(g).calculate(\"a\", list);", "+\t// check that the mutable input parameters have changed", "+\t// check the returned result is correct", "+\tAssert.assertEquals(Arrays.asList(new String[]{\"b\",\"b\",\"d\"}),result);", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b62881abe29831b2a2866fe09651b218", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/traverse/TopologicalOrderIteratorTest.java", "commitBeforeChange": "c1e98e457a2adb044205f41f69a1d82302d01f95", "commitAfterChange": "8316f7f6925a27a68144a29e786f635edd8065d2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void testRecipe()", "signatureAfterChange": "     public void testRecipe()", "diff": ["+", "+        // Test with a reversed view", "+        DirectedGraph<String, DefaultEdge> reversed =", "+            new EdgeReversedGraph<String, DefaultEdge>(graph);", "+        ", "+        iter =", "+            new TopologicalOrderIterator<String, DefaultEdge>(reversed);", "+        i = v.length - 1;", "+", "+        while (iter.hasNext()) {", "+            assertEquals(v[i], iter.next());", "+            --i;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e037456083d047f4c2b8cc7a52c8ed09", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/graph/EqualsTest.java", "commitBeforeChange": "d31c0a461f002b1bbca978a729161e05d339538a", "commitAfterChange": "ee11f3bf4fcb52f92037c518ce52556a0f7dfbad", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testDefaultDirectedGraph()", "signatureAfterChange": "     public void testDefaultDirectedGraph()", "diff": ["+        DirectedGraph<String, DefaultEdge> g3 = ", "+            new DefaultDirectedGraph<String, DefaultEdge>(", "+                DefaultEdge.class);", "+       g3.addVertex(v4);", "+       g3.addVertex(v3);", "+       g3.addVertex(v2);", "+       g3.addVertex(v1);", "+       g3.addEdge(v3, v1);", "+       g3.addEdge(v2, v3);", "+", "+        assertTrue(!g3.equals(g2));"]}]}
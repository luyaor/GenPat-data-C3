{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a96023b69c13967f0e65fc151226a88b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04387b5192ebde21e2436dca82900f54", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/graph/DefaultDirectedGraphTest.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testEdgeOrderDeterminism()", "signatureAfterChange": "     public void testEdgeOrderDeterminism()", "diff": ["-        g.addVertex(m_v1);", "-        g.addVertex(m_v2);", "-        g.addVertex(m_v3);", "+        g.addVertex(v1);", "+        g.addVertex(v2);", "+        g.addVertex(v3);", "-        DefaultEdge e1 = g.addEdge(m_v1, m_v2);", "-        DefaultEdge e2 = g.addEdge(m_v2, m_v3);", "-        DefaultEdge e3 = g.addEdge(m_v3, m_v1);", "+        DefaultEdge e1 = g.addEdge(v1, v2);", "+        DefaultEdge e2 = g.addEdge(v2, v3);", "+        DefaultEdge e3 = g.addEdge(v3, v1);", "-        assertTrue(Graphs.testIncidence(g, e1, m_v1));", "-        assertTrue(Graphs.testIncidence(g, e1, m_v2));", "-        assertFalse(Graphs.testIncidence(g, e1, m_v3));", "-        assertEquals(m_v2, Graphs.getOppositeVertex(g, e1, m_v1));", "-        assertEquals(m_v1, Graphs.getOppositeVertex(g, e1, m_v2));", "+        assertTrue(Graphs.testIncidence(g, e1, v1));", "+        assertTrue(Graphs.testIncidence(g, e1, v2));", "+        assertFalse(Graphs.testIncidence(g, e1, v3));", "+        assertEquals(v2, Graphs.getOppositeVertex(g, e1, v1));", "+        assertEquals(v1, Graphs.getOppositeVertex(g, e1, v2));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c280815582ff5f4e8ff580c9cd82492", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/graph/SimpleDirectedGraphTest.java", "commitBeforeChange": "c0b16b6556c96539006185d958b0f5e843675e68", "commitAfterChange": "b1382aa25544721cf9f8cd8ebbac3a2da4113463", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void testInDegreeOf(  )", "signatureAfterChange": "     public void testInDegreeOf(  )", "diff": ["-        assertEquals( 0, g1.inDegreeOf( v1 ) );", "+        assertEquals( 0, m_g1.inDegreeOf( m_v1 ) );", "-        assertEquals( 1, g2.inDegreeOf( v1 ) );", "-        assertEquals( 1, g2.inDegreeOf( v2 ) );", "+        assertEquals( 1, m_g2.inDegreeOf( m_v1 ) );", "+        assertEquals( 1, m_g2.inDegreeOf( m_v2 ) );", "-        assertEquals( 2, g3.inDegreeOf( v1 ) );", "-        assertEquals( 2, g3.inDegreeOf( v2 ) );", "-        assertEquals( 2, g3.inDegreeOf( v3 ) );", "+        assertEquals( 2, m_g3.inDegreeOf( m_v1 ) );", "+        assertEquals( 2, m_g3.inDegreeOf( m_v2 ) );", "+        assertEquals( 2, m_g3.inDegreeOf( m_v3 ) );", "-        assertEquals( 1, g4.inDegreeOf( v1 ) );", "-        assertEquals( 1, g4.inDegreeOf( v2 ) );", "-        assertEquals( 1, g4.inDegreeOf( v3 ) );", "-        assertEquals( 1, g4.inDegreeOf( v4 ) );", "+        assertEquals( 1, m_g4.inDegreeOf( m_v1 ) );", "+        assertEquals( 1, m_g4.inDegreeOf( m_v2 ) );", "+        assertEquals( 1, m_g4.inDegreeOf( m_v3 ) );", "+        assertEquals( 1, m_g4.inDegreeOf( m_v4 ) );", "-            g3.inDegreeOf( new Object(  ) );", "+            m_g3.inDegreeOf( new Object(  ) );", "-            g3.inDegreeOf( null );", "+            m_g3.inDegreeOf( null );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9113776d8eed56dbf3b4a1362039abd8", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/graph/AsUndirectedGraphTest.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void testGetEdge()", "signatureAfterChange": "     public void testGetEdge()", "diff": ["-            m_directed.getEdge(m_v1, m_v2),", "-            m_undirected.getEdge(m_v1, m_v2));", "+            directed.getEdge(v1, v2),", "+            undirected.getEdge(v1, v2));", "-            m_directed.getEdge(m_v1, m_v2),", "-            m_undirected.getEdge(m_v2, m_v1));", "+            directed.getEdge(v1, v2),", "+            undirected.getEdge(v2, v1));", "-            m_directed.getEdge(m_v4, m_v4),", "-            m_undirected.getEdge(m_v4, m_v4));", "+            directed.getEdge(v4, v4),", "+            undirected.getEdge(v4, v4));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97639a70f607a05127799b084b8e028d", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/graph/AsUndirectedGraphTest.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     protected void setUp()", "signatureAfterChange": "     protected void setUp()", "diff": ["-        m_directed = new DefaultDirectedGraph<String, DefaultEdge>(", "+        directed = new DefaultDirectedGraph<String, DefaultEdge>(", "-        m_undirected = new AsUndirectedGraph<String, DefaultEdge>(m_directed);", "+        undirected = new AsUndirectedGraph<String, DefaultEdge>(directed);", "-        m_directed.addVertex(m_v1);", "-        m_directed.addVertex(m_v2);", "-        m_directed.addVertex(m_v3);", "-        m_directed.addVertex(m_v4);", "-        m_directed.addEdge(m_v1, m_v2);", "-        m_directed.addEdge(m_v2, m_v3);", "-        m_directed.addEdge(m_v2, m_v4);", "-        m_loop = m_directed.addEdge(m_v4, m_v4);", "+        directed.addVertex(v1);", "+        directed.addVertex(v2);", "+        directed.addVertex(v3);", "+        directed.addVertex(v4);", "+        directed.addEdge(v1, v2);", "+        directed.addEdge(v2, v3);", "+        directed.addEdge(v2, v4);", "+        loop = directed.addEdge(v4, v4);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c403bc829691e2f6cf772247cc3d1bc6", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/graph/SerializationTest.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     @SuppressWarnings(\"unchecked\")     public void testDirectedMultigraph()         throws Exception", "signatureAfterChange": "     @SuppressWarnings(\"unchecked\")     public void testDirectedMultigraph()         throws Exception", "diff": ["-        graph.addVertex(m_v1);", "-        graph.addVertex(m_v2);", "-        graph.addVertex(m_v3);", "-        graph.addEdge(m_v1, m_v2);", "-        graph.addEdge(m_v2, m_v3);", "-        graph.addEdge(m_v2, m_v3);", "+        graph.addVertex(v1);", "+        graph.addVertex(v2);", "+        graph.addVertex(v3);", "+        graph.addEdge(v1, v2);", "+        graph.addEdge(v2, v3);", "+        graph.addEdge(v2, v3);", "-        assertTrue(graph.containsVertex(m_v1));", "-        assertTrue(graph.containsVertex(m_v2));", "-        assertTrue(graph.containsVertex(m_v3));", "-        assertTrue(graph.containsEdge(m_v1, m_v2));", "-        assertTrue(graph.containsEdge(m_v2, m_v3));", "-        assertEquals(1, graph.edgesOf(m_v1).size());", "-        assertEquals(3, graph.edgesOf(m_v2).size());", "-        assertEquals(2, graph.edgesOf(m_v3).size());", "+        assertTrue(graph.containsVertex(v1));", "+        assertTrue(graph.containsVertex(v2));", "+        assertTrue(graph.containsVertex(v3));", "+        assertTrue(graph.containsEdge(v1, v2));", "+        assertTrue(graph.containsEdge(v2, v3));", "+        assertEquals(1, graph.edgesOf(v1).size());", "+        assertEquals(3, graph.edgesOf(v2).size());", "+        assertEquals(2, graph.edgesOf(v3).size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e27c82c4902b441290bd77c32a75c9cf", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/graph/SimpleDirectedGraphTest.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void testInDegreeOf()", "signatureAfterChange": "     public void testInDegreeOf()", "diff": ["-        assertEquals(0, m_g1.inDegreeOf(m_v1));", "+        assertEquals(0, g1.inDegreeOf(v1));", "-        assertEquals(1, m_g2.inDegreeOf(m_v1));", "-        assertEquals(1, m_g2.inDegreeOf(m_v2));", "+        assertEquals(1, g2.inDegreeOf(v1));", "+        assertEquals(1, g2.inDegreeOf(v2));", "-        assertEquals(2, m_g3.inDegreeOf(m_v1));", "-        assertEquals(2, m_g3.inDegreeOf(m_v2));", "-        assertEquals(2, m_g3.inDegreeOf(m_v3));", "+        assertEquals(2, g3.inDegreeOf(v1));", "+        assertEquals(2, g3.inDegreeOf(v2));", "+        assertEquals(2, g3.inDegreeOf(v3));", "-        assertEquals(1, m_g4.inDegreeOf(m_v1));", "-        assertEquals(1, m_g4.inDegreeOf(m_v2));", "-        assertEquals(1, m_g4.inDegreeOf(m_v3));", "-        assertEquals(1, m_g4.inDegreeOf(m_v4));", "+        assertEquals(1, g4.inDegreeOf(v1));", "+        assertEquals(1, g4.inDegreeOf(v2));", "+        assertEquals(1, g4.inDegreeOf(v3));", "+        assertEquals(1, g4.inDegreeOf(v4));", "-            m_g3.inDegreeOf(new String());", "+            g3.inDegreeOf(new String());", "-            m_g3.inDegreeOf(null);", "+            g3.inDegreeOf(null);"]}]}
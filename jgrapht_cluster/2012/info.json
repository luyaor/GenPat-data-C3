{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "95ecce7bbc9d01db302504e8a3a95092", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54d0bdb8c052558bbf3bbc46f3b30e4a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/alg/CycleDetectorTest.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private void runTest(DirectedGraph g, Set cyclicSet, Set acyclicSet)", "signatureAfterChange": "      private void runTest( DirectedGraph<String,DirEdge<String>> g,                           Set<String> cyclicSet,                           Set<String> acyclicSet )", "diff": ["-    private void runTest(DirectedGraph g, Set cyclicSet, Set acyclicSet)", "+    private void runTest( DirectedGraph<String,DirEdge<String>> g,", "+                          Set<String> cyclicSet,", "+                          Set<String> acyclicSet )", "-        CycleDetector detector = new CycleDetector(g);", "+        CycleDetector<String,DirEdge<String>> detector =", "+            new CycleDetector<String,DirEdge<String>>(g);", "-        Iterator iter = cyclicSet.iterator();", "-", "-        while (iter.hasNext()) {", "-            Object v = iter.next();", "+        for ( String v : cyclicSet ) {", "-        iter = acyclicSet.iterator();", "-", "-        while (iter.hasNext()) {", "-            Object v = iter.next();", "+        for ( String v : acyclicSet ) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7376529c823fd7385e1ba50d972f3a0e", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/GraphOrdering.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private void init(Set vertexSet, Set edgeSet)", "signatureAfterChange": "      private void init(Set<V> vertexSet, Set<E> edgeSet)", "diff": ["-    private void init(Set vertexSet, Set edgeSet)", "+    private void init(Set<V> vertexSet, Set<E> edgeSet)", "-        this.mapVertexToOrder = new HashMap(vertexSet.size());", "+        this.mapVertexToOrder = new HashMap<V, Integer>(vertexSet.size());", "-        for (Iterator iter = vertexSet.iterator(); iter.hasNext();) {", "-            Object vertex = iter.next();", "+        for (V vertex : vertexSet) {", "-        this.labelsEdgesSet = new HashSet(edgeSet.size());", "-        for (Iterator iter = edgeSet.iterator(); iter.hasNext();) {", "-            Edge edge = (Edge) iter.next();", "-", "-            Object sourceVertex = edge.getSource();", "-            Integer sourceOrder = (Integer) mapVertexToOrder.get(sourceVertex);", "+        this.labelsEdgesSet = new HashSet<LabelsEdge>(edgeSet.size());", "+        for (E edge : edgeSet) {", "+            V sourceVertex = edge.getSource();", "+            Integer sourceOrder = mapVertexToOrder.get(sourceVertex);", "-                ((Integer) (mapVertexToOrder.get(edge.getTarget())))", "+                (mapVertexToOrder.get(edge.getTarget()))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a16326a335acb00173dcfeb6b7940a0e", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/GraphHelper.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public static void addGraphReversed(         DirectedGraph destination,         DirectedGraph source)", "signatureAfterChange": "     @SuppressWarnings(\"unchecked\" \tpublic static <V, E extends DirEdge<V>> void addGraphReversed(         DirectedGraph<V,E> destination,         DirectedGraph<V,E> source)", "diff": ["-    public static void addGraphReversed(", "-        DirectedGraph destination,", "-        DirectedGraph source)", "+    @SuppressWarnings(\"unchecked\")\t// FIXME hb 28-nov-05: See below", "+\tpublic static <V, E extends DirEdge<V>> void addGraphReversed(", "+        DirectedGraph<V,E> destination,", "+        DirectedGraph<V,E> source)", "-        Iterator edgesIter = source.edgeSet().iterator();", "-", "-        while (edgesIter.hasNext()) {", "-            DirectedEdge edge = (DirectedEdge) edgesIter.next();", "-            DirectedEdge reversedEdge =", "-                new DirectedEdge(edge.getTarget(), edge.getSource());", "-            destination.addEdge(reversedEdge);", "+        for (E edge : source.edgeSet()) {", "+        \t//FIXME hb 26-Nov-05: Use the edge factory of src, dst, or passed as a parameter to create edges", "+        \tE reversedEdge =", "+        \t\t(E)new DirectedEdge<V>(edge.getTarget(), edge.getSource());", "+        \tdestination.addEdge(reversedEdge);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8f8ec907e719b87cff284fb223a23c0", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/experimental/alg/DijkstraAlgorithm.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public final WeightedGraph optimumPathTree(Object from)", "signatureAfterChange": "     public final WeightedGraph<V,E> optimumPathTree(V from)", "diff": ["-    public final WeightedGraph optimumPathTree(Object from)", "+    public final WeightedGraph<V,E> optimumPathTree(V from)", "-        WeightedGraph optimumPathTree;", "+        WeightedGraph<V,E> optimumPathTree;", "-            optimumPathTree = new SimpleDirectedWeightedGraph();", "+        \t//FIXME hb 051124: I would like to pass Edge<V> instead of DirectedEdge and remove the cast", "+            optimumPathTree = (WeightedGraph<V,E>)new SimpleDirectedWeightedGraph<V,DirEdge<V>>();", "-            optimumPathTree = new SimpleWeightedGraph();", "+            optimumPathTree = new SimpleWeightedGraph<V,E>();", "-        for (Iterator it = _wgraph.vertexSet().iterator(); it.hasNext();) {", "+        for (Iterator<V> it = _wgraph.vertexSet().iterator(); it.hasNext();) {", "-            Object v = hv.getVertex();", "-            Edge treeEdge = (Edge) hv.getAdditional();", "+            V v = (V)hv.getVertex();\t\t\t\t//FIXME hb 051124: Remove cast", "+            E treeEdge = (E) hv.getAdditional();\t//FIXME hb 051124: Remove cast", "-            Iterator edges;", "+            Iterator<? extends Edge<V>> edges;", "-                    ((DirectedGraph) _wgraph).outgoingEdgesOf(v).iterator();", "+                    ((DirectedGraph<V,DirEdge<V>>) _wgraph).outgoingEdgesOf(v).iterator();", "-                Edge e = (Edge) edges.next();", "+                Edge<V> e = edges.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea421eba9b404babf40307956ef72954", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/generate/WheelGraphGenerator.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void generateGraph(         Graph target,         final VertexFactory vertexFactory,         Map resultMap)", "signatureAfterChange": "     public void generateGraph(         Graph<V,E> target,         final VertexFactory<V> vertexFactory,         Map<String,V> resultMap)", "diff": ["-        Graph target,", "-        final VertexFactory vertexFactory,", "-        Map resultMap)", "+        Graph<V,E> target,", "+        final VertexFactory<V> vertexFactory,", "+        Map<String,V> resultMap)", "-        final Collection rim = new ArrayList();", "-        VertexFactory rimVertexFactory =", "-            new VertexFactory() {", "-                public Object createVertex()", "+        final Collection<V> rim = new ArrayList<V>();", "+        VertexFactory<V> rimVertexFactory =", "+            new VertexFactory<V>() {", "+                public V createVertex()", "-                    Object vertex = vertexFactory.createVertex();", "+                    V vertex = vertexFactory.createVertex();", "-        RingGraphGenerator ringGenerator = new RingGraphGenerator(m_size - 1);", "+        RingGraphGenerator<V,E> ringGenerator = new RingGraphGenerator<V,E>(m_size - 1);", "-        Object hubVertex = vertexFactory.createVertex();", "+        V hubVertex = vertexFactory.createVertex();", "-        Iterator rimIter = rim.iterator();", "-", "-        while (rimIter.hasNext()) {", "-            Object rimVertex = rimIter.next();", "-", "-            if (m_inwardSpokes) {", "-                target.addEdge(rimVertex, hubVertex);", "-            } else {", "-                target.addEdge(hubVertex, rimVertex);", "-            }", "+        for( V rimVertex : rim ) {", "+        \tif (m_inwardSpokes) {", "+        \t\ttarget.addEdge(rimVertex, hubVertex);", "+        \t} else {", "+        \t\ttarget.addEdge(hubVertex, rimVertex);", "+        \t}"]}]}
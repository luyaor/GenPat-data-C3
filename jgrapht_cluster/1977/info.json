{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9ff991a5779db301669c15b6581c5aca", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1504bb13b65632cfb2540f1cf75a08f2", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/isomorphism/VF2SubgraphIsomorphismInspectorTest.java", "commitBeforeChange": "3d942aa8341a7b21b0a2aed7fe990a3895f7cc26", "commitAfterChange": "d5ca1401dd353d6e45cdea97764ece72454f943b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testGraphTypes()", "signatureAfterChange": "     @Test     public void testGraphTypes()", "diff": ["-        DirectedGraph<Integer, DefaultEdge> dg0 ;", "-", "-                new DefaultDirectedGraph<Integer, DefaultEdge>", "-                        (DefaultEdge.class);", "+            new DefaultDirectedGraph<Integer, DefaultEdge>(DefaultEdge.class);", "-        SimpleGraph<Integer, DefaultEdge> sg0;", "-", "-                new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "+            new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "-                new Multigraph<Integer, DefaultEdge>(DefaultEdge.class);", "+            new Multigraph<Integer, DefaultEdge>(DefaultEdge.class);", "-                new Pseudograph<Integer, DefaultEdge>(DefaultEdge.class);", "+            new Pseudograph<Integer, DefaultEdge>(DefaultEdge.class);", "-        /* GT-0 */ /*test graph=NULL not possible because of compiler error */", "-        /*VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt0 =", "+", "+        /* GT-0 test graph=null */", "+", "+        try {", "+            @SuppressWarnings(\"unused\")", "+            VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt0 =", "-                        (sg0,sg1); */", "+                            (null, sg1);", "+            Assert.fail(\"Expected UnsupportedOperationException\");", "+        } catch (NullPointerException ex) { }", "+", "+", "+            @SuppressWarnings(\"unused\")", "-                    new VF2SubgraphIsomorphismInspector<Integer,DefaultEdge>", "-                            (mg1,mg1);", "+                new VF2SubgraphIsomorphismInspector<Integer,DefaultEdge>", "+                            (mg1, mg1);", "-        } catch (UnsupportedOperationException ex){", "-            /* Expected Exception found */", "-        }", "+        } catch (UnsupportedOperationException ex) { }", "+", "+", "+            @SuppressWarnings(\"unused\")", "-                    new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "-                            (pg1,pg1);", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                            (pg1, pg1);", "-        } catch (UnsupportedOperationException ex){", "-            /* Expected Exception found */", "-        }", "+        } catch (UnsupportedOperationException ex) { }", "+", "+", "-           new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "-                       (sg1,sg1);", "-        assertEquals(\"[1=1 2=2]\", gt3.getMappings().next().toString());", "+            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                            (sg1, sg1);", "+        assertEquals(true, gt3.getMappings().hasNext());", "+", "+", "-                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "-                        (dg1,dg1);", "+            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                            (dg1, dg1);", "+", "+", "+            @SuppressWarnings(\"unused\")", "-                    new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "-                            (sg1,mg1);", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                            (sg1, mg1);", "-        } catch (UnsupportedOperationException ex){", "-            /* Expected Exception found */", "-        }", "+        } catch (UnsupportedOperationException ex) { }", "+", "-        try {", "-            VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt6 =", "-                    new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "-                            (sg1,pg1);", "-            Assert.fail(\"Expected UnsupportedOperationException\");", "-        } catch (UnsupportedOperationException ex){", "-            /* Expected Exception found */", "-        }", "-        /* GT-7: directed graph + mulitgraph */", "-            VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt7 =", "-                    new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "-                            (dg1,mg1);", "+            @SuppressWarnings(\"unused\")", "+            VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt6 =", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                            (sg1, pg1);", "-        } catch (UnsupportedOperationException ex){", "-            /* Expected Exception found */", "-        }", "+        } catch (UnsupportedOperationException ex) { }", "+", "+", "+        /* GT-7: directed graph + multigraph */", "+", "+        try {", "+            @SuppressWarnings(\"unused\")", "+            VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt7 =", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                            (dg1, mg1);", "+            Assert.fail(\"Expected UnsupportedOperationException\");", "+        } catch (UnsupportedOperationException ex) { }", "+", "+", "+            @SuppressWarnings(\"unused\")", "-                    new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "-                            (dg1,pg1);", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                            (dg1, pg1);", "-        } catch (UnsupportedOperationException ex){", "-            /* Expected Exception found */", "-        }", "+        } catch (UnsupportedOperationException ex) { }", "+", "+", "+            @SuppressWarnings(\"unused\")", "-                    new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "-                            (pg1,mg1);", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                            (pg1, mg1);", "-        } catch (UnsupportedOperationException ex){", "-            /* Expected Exception found */", "-        }", "+        } catch (UnsupportedOperationException ex) { }", "+", "+", "+            @SuppressWarnings(\"unused\")", "-                    new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "-        } catch (IllegalArgumentException ex){", "-            /* Expected Exception found */", "-        }", "+        } catch (IllegalArgumentException ex) { }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5085b22ee71adf3d12af10728a7ad7d8", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/graph/SimpleDirectedGraphTest.java", "commitBeforeChange": "8cf8651db5de9405d7887b55b67fde1d9e01e224", "commitAfterChange": "9ac63fa5d348b319d01e5aef6fad2b1fa76f8f81", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void testRemoveEdgeEdge(  )", "signatureAfterChange": "     public void testRemoveEdgeEdge(  )", "diff": ["-        init(  ); //TODO Implement removeEdge().", "+        init(  );", "+", "+        assertEquals( m_g4.edgeSet(  ).size(  ), 4 );", "+        m_g4.removeEdge( m_v1, m_v2 );", "+        assertEquals( m_g4.edgeSet(  ).size(  ), 3 );", "+        assertFalse( m_g4.removeEdge( m_eLoop ) );", "+        assertTrue( m_g4.removeEdge( m_g4.getEdge( m_v2, m_v3 ) ) );", "+        assertEquals( m_g4.edgeSet(  ).size(  ), 2 );"]}]}
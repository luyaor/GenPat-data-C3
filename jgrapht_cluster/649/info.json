{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e01362d2d75d8d53b588f294966d8b11", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "097acc515cbe91dbd3126eb4b9164c7a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/GraphHelper.java", "commitBeforeChange": "31acef0c10b04a4d9507bb33a011a766c870c766", "commitAfterChange": "28851ba6f18793b718275deebcab4e40c016a084", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public static boolean addEdgeWithVertics( Graph g, Edge e )", "signatureAfterChange": "     public static boolean addEdgeWithVertices( Graph g, Edge e )", "diff": ["-    public static boolean addEdgeWithVertics( Graph g, Edge e ) {", "+    public static boolean addEdgeWithVertices( Graph g, Edge e ) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28dbd50f1cd323e93c43c592dce141ef", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/GraphOrdering.java", "commitBeforeChange": "7518fda5e34fbd0d30800f00a7bcae8e402c0396", "commitAfterChange": "b0ffaa521363d5faf1bf5b397f78265b9ab95ae6", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic int getVertexOrder(V v)", "signatureAfterChange": "      public int getVertexNumber(V v)", "diff": ["-\t", "-\tpublic int getVertexOrder(V v)\t{", "-\t\treturn mapVertexToOrder.get(v).intValue();", "-\t}", "+", "+    public int getVertexNumber(V v) {", "+        return mapVertexToOrder.get(v).intValue();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "419eb1bf88898923e4434869281bebfc", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/TarjanLowestCommonAncestorTest.java", "commitBeforeChange": "fb87419b8dc96e08a9a084847be43d0b4412606c", "commitAfterChange": "9c304d58c2a3ebb2444bab73d9552866b4440af5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void complexDagTest()", "signatureAfterChange": "      @Test     public void testComplexDag()", "diff": ["-    public void complexDagTest() {", "+    public void testComplexDag() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45bb2f00ac4ca9f227ebc8e94e14222c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/IsomorphicGraphMapping.java", "commitBeforeChange": "60b7d019273a541fe1adce1909b0933596c136ca", "commitAfterChange": "3d8e60a330e5cbc114704b3e8df3088d958dfef8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public boolean equals(GraphMapping<V, E> rel)", "signatureAfterChange": "     public boolean isEqualMapping(GraphMapping<V, E> rel)", "diff": ["-    public boolean equals(GraphMapping<V, E> rel) {", "+    public boolean isEqualMapping(GraphMapping<V, E> rel) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c01faa1163b73c27fdef4142e330bc7", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/Graphs.java", "commitBeforeChange": "561cd891c2def49eb3edd19d7e032dbce3f41987", "commitAfterChange": "9fdc08e28dc51bf9bd452a20ddf6cf5cb91ab3d8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 2, "signatureBeforeChange": "         public PlainDirectedGraph( EdgeFactory ef )", "signatureAfterChange": "         public DefaultDirectedGraph( EdgeFactory ef )", "diff": ["+         */", "+        public DefaultDirectedGraph( EdgeFactory ef ) {", "+            super( ef, false, true );", "+        }", "-         */", "-        public PlainDirectedGraph( EdgeFactory ef ) {", "-            super( ef, false, true );", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a25dc19b41afc07693cf39224afeef8", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/Graphs.java", "commitBeforeChange": "561cd891c2def49eb3edd19d7e032dbce3f41987", "commitAfterChange": "9fdc08e28dc51bf9bd452a20ddf6cf5cb91ab3d8", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 4, "signatureBeforeChange": "         public PlainDirectedWeightedGraph( EdgeFactory ef )", "signatureAfterChange": "         public DefaultDirectedWeightedGraph( EdgeFactory ef )", "diff": ["+         */", "+        public DefaultDirectedWeightedGraph( EdgeFactory ef ) {", "+            super( ef );", "+        }", "-         */", "-        public PlainDirectedWeightedGraph( EdgeFactory ef ) {", "-            super( ef );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98218a844761f39f7862d9ec7000aeac", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/TarjanLowestCommonAncestorTest.java", "commitBeforeChange": "fb87419b8dc96e08a9a084847be43d0b4412606c", "commitAfterChange": "9c304d58c2a3ebb2444bab73d9552866b4440af5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      @Test     public void binaryTreeTest()", "signatureAfterChange": "      @Test     public void testBinaryTree()", "diff": ["-    public void binaryTreeTest() {", "+    public void testBinaryTree() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a403619ce3a8f3258da6e2453c19309e", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/experimental/subgraphisomorphism/VF2SubgraphIsomorphismInspectorTest.java", "commitBeforeChange": "f67e9197d81c666622112a20391d80767fa4beb3", "commitAfterChange": "af1b824446ff484516d50232b001351d46878322", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \t@Test \tpublic void test1()", "signatureAfterChange": "  \t@Test \tpublic void testSingleMatching()", "diff": ["-\tpublic void test1() {", "+\tpublic void testSingleMatching() {", "-\t\t\t\tnew DefaultDirectedGraph<String, DefaultEdge>(DefaultEdge.class);", "+            new DefaultDirectedGraph<String, DefaultEdge>(DefaultEdge.class);", "-\t\t\t\tnew DefaultDirectedGraph<String, DefaultEdge>(DefaultEdge.class);", "+\t\t\tnew DefaultDirectedGraph<String, DefaultEdge>(DefaultEdge.class);", "-\t\t\t\tnew VF2SubgraphIsomorphismInspector<String, DefaultEdge>(g1, g2);", "+\t\t\tnew VF2SubgraphIsomorphismInspector<String, DefaultEdge>(g1, g2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d10bfec3b43ae2e66c00967bcc6f81fe", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/GraphOrdering.java", "commitBeforeChange": "7518fda5e34fbd0d30800f00a7bcae8e402c0396", "commitAfterChange": "b0ffaa521363d5faf1bf5b397f78265b9ab95ae6", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tpublic int[] getEdgeOrder(E e)", "signatureAfterChange": "      public int[] getEdgeNumbers(E e)", "diff": ["-\t", "-\tpublic int[] getEdgeOrder(E e)\t{", "-\t\tV v1 = graph.getEdgeSource(e),", "-\t\t  v2 = graph.getEdgeTarget(e);", "-\t\t", "-\t\tint[] edge = new int[2];", "-\t\tedge[0] = mapVertexToOrder.get(v1);", "-\t\tedge[1] = mapVertexToOrder.get(v2);", "-\t\t", "-\t\treturn edge;", "-\t}", "+", "+    public int[] getEdgeNumbers(E e) {", "+        V v1 = graph.getEdgeSource(e), v2 = graph.getEdgeTarget(e);", "+", "+        int[] edge = new int[2];", "+        edge[0] = mapVertexToOrder.get(v1);", "+        edge[1] = mapVertexToOrder.get(v2);", "+", "+        return edge;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaa38e1954c320f33a679453ae8da597", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/MaximumWeightBipartiteMatchingTest.java", "commitBeforeChange": "985760cbd642d0a5bdb9eca3c84e4565ecb8ceea", "commitAfterChange": "f79565a2a8d7f5186720bf4969b47a8431d60e9c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \t@Test \tpublic void maximumWeightBipartiteMatching4()", "signatureAfterChange": "  \t@Test \tpublic void maximumWeightBipartiteMatching5()", "diff": ["+", "+\t@Test", "+\tpublic void maximumWeightBipartiteMatching5() {", "+\t\tDefaultWeightedEdge e1 = graph.addEdge(\"s1\", \"t1\");", "+\t\tgraph.setEdgeWeight(e1, 1);", "+\t\tDefaultWeightedEdge e2 = graph.addEdge(\"s1\", \"t2\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0563dfbec6c857f981de04844a01bd2", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/KShortestPathKValuesTest.java", "commitBeforeChange": "94e0b9cdbd464a6b60ddbb8cd6d473a32e102eaf", "commitAfterChange": "90d794caa7b37ed092890eb859473902af3157bc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testMaxSizeValue()", "signatureAfterChange": "      public void testMaxSizeValueCompleteGraph6()", "diff": ["-    public void testMaxSizeValue()", "+    public void testMaxSizeValueCompleteGraph6()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4377a7349225c7c6495126b1b089e1a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/alg/ConnectivityInspectorTest.java", "commitBeforeChange": "f9fe1a9b0c0422b26e26b94edd9001801984e770", "commitAfterChange": "04b4adb9d61a0a7a990979c19fd44e55accd860f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void testStronglyConnected(  )", "signatureAfterChange": "     public void testStronglyConnected1(  )", "diff": ["-    public void testStronglyConnected(  ) {", "+    public void testStronglyConnected1(  ) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fec1875dfc83d7f5897e41de61786c5c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/TarjanLowestCommonAncestorTest.java", "commitBeforeChange": "fb87419b8dc96e08a9a084847be43d0b4412606c", "commitAfterChange": "9c304d58c2a3ebb2444bab73d9552866b4440af5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void dagTest()", "signatureAfterChange": "      @Test     public void testDag()", "diff": ["-    public void dagTest() {", "+    public void testDag() {"]}]}
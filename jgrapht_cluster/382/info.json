{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f71a3573f182c1ca54337e818108e340", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ffc117edf0c98784151d85cd0a54a93", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/RankingPathElementList.java", "commitBeforeChange": "94e0b9cdbd464a6b60ddbb8cd6d473a32e102eaf", "commitAfterChange": "90d794caa7b37ed092890eb859473902af3157bc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public boolean addPathElements(         RankingPathElementList<V, E> elementList,         E edge)", "signatureAfterChange": "     public boolean addPathElements(         RankingPathElementList<V, E> elementList,         E edge)", "diff": ["-            if (isAlreadyImprovedByThisEdge(edge, prevPathElement)", "-                || containsTargetPreviously(prevPathElement))", "-            {", "-                // checks if path is simple.", "+", "+            if (isNotValidPath(prevPathElement, edge)) {", "+                // checks if path is simple and if guard-vertex is not", "+                // disconnected.", "-            double weight = calculatePathWeight(prevPathElement, edge);", "+            double newPathWeight = calculatePathWeight(prevPathElement, edge);", "+            RankingPathElement<V, E> newPathElement =", "+                new RankingPathElement<V, E>(", "+                    this.graph,", "+                    prevPathElement,", "+                    edge,", "+                    newPathWeight);", "-            // loop over the paths elements of the list at vertex y from yIndex", "-            // to the end.", "+            // loop over the paths of the list at vertex y from yIndex to the", "+            // end.", "+            RankingPathElement<V, E> yPathElement = null;", "-                RankingPathElement<V, E> yPathElement = get(yIndex);", "-                RankingPathElement<V, E> newPathElement =", "-                    new RankingPathElement<V, E>(", "-                        this.graph,", "-                        prevPathElement,", "-                        edge,", "-                        weight);", "+                yPathElement = get(yIndex);", "-                if (weight < yPathElement.getWeight()) {", "+                // case when the new path is shorter than the path Py stored at", "+                // index y", "+                if (newPathWeight < yPathElement.getWeight()) {", "+                    pathAdded = true;", "+", "+                    // ensures max size limit is not exceeded.", "-                    pathAdded = true;", "-                if (weight == yPathElement.getWeight()) {", "-                    // checks if newPathElement is not already in the list.", "-                    if (isAlreadyAdded(newPathElement)) {", "-                        break;", "-                    }", "-                    if (size() <= (this.maxSize - 1)) {", "-                        this.pathElements.add(yIndex + 1, newPathElement);", "-                        if (size() > this.maxSize) {", "-                            this.pathElements.remove(this.maxSize);", "-                        }", "-                        pathAdded = true;", "-                        break;", "+                // case when the new path is of the same length as the path Py", "+                // stored at index y", "+                if (newPathWeight == yPathElement.getWeight()) {", "+                    this.pathElements.add(yIndex + 1, newPathElement);", "+                    pathAdded = true;", "+", "+                    // ensures max size limit is not exceeded.", "+                    if (size() > this.maxSize) {", "+                        this.pathElements.remove(this.maxSize);", "+                    break;", "+            }", "-                if ((weight > yPathElement.getWeight())", "-                    && (yIndex == (size() - 1)))", "-                {", "-                    if (size() <= (this.maxSize - 1)) {", "-                        this.pathElements.add(newPathElement);", "-                        pathAdded = true;", "-                        break;", "-                    }", "+            // case when the new path is longer than the longest path in the", "+            // list (Py stored at the last index y)", "+            if (newPathWeight > yPathElement.getWeight()) {", "+                // ensures max size limit is not exceeded.", "+                if (size() < this.maxSize) {", "+                    // the new path is inserted at the end of the list.", "+                    this.pathElements.add(newPathElement);", "+                    pathAdded = true;", "+                } else {", "+                    // max size limit is reached -> end of the loop over the", "+                    // paths elements of the list at vertex v.", "+                    break;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1600beb143b73fe1aaccaf81adfda42", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/KShortestPathCostTest.java", "commitBeforeChange": "94e0b9cdbd464a6b60ddbb8cd6d473a32e102eaf", "commitAfterChange": "90d794caa7b37ed092890eb859473902af3157bc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testPicture1Graph()", "signatureAfterChange": "      public void testPicture1Graph()", "diff": ["+    public void testPicture1Graph()", "+    {", "+        Picture1Graph picture1Graph = new Picture1Graph();", "+", "+        int maxSize = 10;", "+", "+        KShortestPaths pathFinder =", "+            new KShortestPaths(picture1Graph, \"vS\",", "+                maxSize);", "+", "+        //      assertEquals(2, pathFinder.getPaths(\"v5\").size());", "+", "+        List pathElements = pathFinder.getPaths(\"v5\");", "+        GraphPath pathElement = (GraphPath) pathElements.get(0);", "+        assertEquals(", "+            Arrays.asList(", "+                new Object[] {", "+                    picture1Graph.eS1,", "+                    picture1Graph.e15", "+                }),", "+            pathElement.getEdgeList());", "+", "+        List vertices = Graphs.getPathVertexList(pathElement);", "+        assertEquals(", "+            Arrays.asList(new Object[] { \"vS\", \"v1\", \"v5\" }),", "+            vertices);", "+", "+        pathElement = (GraphPath) pathElements.get(1);", "+        assertEquals(", "+            Arrays.asList(", "+                new Object[] {", "+                    picture1Graph.eS2,", "+                    picture1Graph.e25", "+                }),", "+            pathElement.getEdgeList());", "+", "+        vertices = Graphs.getPathVertexList(pathElement);", "+        assertEquals(", "+            Arrays.asList(new Object[] { \"vS\", \"v2\", \"v5\" }),", "+            vertices);", "+", "+        pathElements = pathFinder.getPaths(\"v7\");", "+        pathElement = (GraphPath) pathElements.get(0);", "+        double lastCost = pathElement.getWeight();", "+        for (int i = 0; i < pathElements.size(); i++) {", "+            pathElement = (GraphPath) pathElements.get(i);", "+            double cost = pathElement.getWeight();", "+", "+            assertTrue(lastCost <= cost);", "+            lastCost = cost;", "+        }", "+    }", "-    public void testPicture1Graph()", "-        Picture1Graph picture1Graph = new Picture1Graph();", "-        int maxSize = 10;", "-        KShortestPaths pathFinder =", "-            new KShortestPaths(picture1Graph, \"vS\",", "-                maxSize);", "-        assertEquals(2, pathFinder.getPaths(\"v5\").size());", "-        List pathElements = pathFinder.getPaths(\"v5\");", "-        GraphPath pathElement = (GraphPath) pathElements.get(0);", "-        assertEquals(", "-            Arrays.asList(", "-                new Object[] {", "-                    picture1Graph.eS1,", "-                    picture1Graph.e15", "-                }),", "-            pathElement.getEdgeList());", "-        List vertices = Graphs.getPathVertexList(pathElement);", "-        assertEquals(", "-            Arrays.asList(", "-                new Object[] {", "-                    \"vS\",", "-                    \"v1\",", "-                    \"v5\"", "-                }),", "-            vertices);", "-        pathElement = (GraphPath) pathElements.get(1);", "-        assertEquals(", "-            Arrays.asList(", "-                new Object[] {", "-                    picture1Graph.eS2,", "-                    picture1Graph.e25", "-                }),", "-            pathElement.getEdgeList());", "-        vertices = Graphs.getPathVertexList(pathElement);", "-        assertEquals(", "-            Arrays.asList(", "-                new Object[] {", "-                    \"vS\",", "-                    \"v2\",", "-                    \"v5\"", "-                }),", "-            vertices);", "-", "-        pathElements = pathFinder.getPaths(\"v7\");", "-        pathElement = (GraphPath) pathElements.get(0);", "-        double lastCost = pathElement.getWeight();", "-        for (int i = 0; i < pathElements.size(); i++) {", "-            pathElement = (GraphPath) pathElements.get(i);", "-            double cost = pathElement.getWeight();", "-", "-            assertTrue(lastCost <= cost);", "-            lastCost = cost;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f3ea1116372d4ce24a4806e168e0a4a9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "965e96e29067df075ff309a3e01021b0", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/util/UnionFind.java", "commitBeforeChange": "b5348f8a80e818c9b0dd566a68eb23f3eca4389b", "commitAfterChange": "29039f1f20cd2b1397eba3afdb9fc72182dd2062", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public V find(V element)", "signatureAfterChange": "     public V find(V element)", "diff": ["-        if(!parentMap.containsKey(element))", "-            throw new IllegalArgumentException(\"elements must be contained in given set\");", "-        ", "+        if (!parentMap.containsKey(element)) {", "+            throw new IllegalArgumentException(", "+                \"elements must be contained in given set\");", "+        }", "+", "-        if(parent.equals(element))", "+        if (parent.equals(element)) {", "-        ", "+        }", "+", "-        parentMap.put(element,newParent);", "+        parentMap.put(element, newParent);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2d1af1e1bdcb841e5816cfde1b01b32", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/util/UnionFind.java", "commitBeforeChange": "b5348f8a80e818c9b0dd566a68eb23f3eca4389b", "commitAfterChange": "29039f1f20cd2b1397eba3afdb9fc72182dd2062", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void union(V element1, V element2)", "signatureAfterChange": "     public void union(V element1, V element2)", "diff": ["-        if(!parentMap.containsKey(element1) || !parentMap.containsKey(element2))", "-            throw new IllegalArgumentException(\"elements must be contained in given set\");", "-        ", "+        if (!parentMap.containsKey(element1)", "+            || !parentMap.containsKey(element2))", "+        {", "+            throw new IllegalArgumentException(", "+                \"elements must be contained in given set\");", "+        }", "+", "-        ", "+", "-        if(parent1.equals(parent2))", "+        if (parent1.equals(parent2)) {", "-        ", "+        }", "+", "-        if(rank1 > rank2)", "+        if (rank1 > rank2) {", "-        else if(rank1 < rank2)", "+        } else if (rank1 < rank2) {", "-        else", "-        {", "-            parentMap.put(parent2,parent1);", "-            rankMap.put(parent1, rank1+1);", "+        } else {", "+            parentMap.put(parent2, parent1);", "+            rankMap.put(parent1, rank1 + 1);"]}]}
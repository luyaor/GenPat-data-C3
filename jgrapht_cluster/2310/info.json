{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b711ca6b086e9992e677b8c0d1b4b2a6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35fbff8be0e44836e3227d8a8a1685db", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/util/equivalence/EquivalenceSetCreator.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private static HashMap createEqualityGroupMap(         Object [] aElementsArray,         EquivalenceComparator aEqComparator,         Object aComparatorContext)", "signatureAfterChange": "     private static <EE, CC> HashMap<Integer,List<EquivalenceSet<? super EE,? super CC>>> createEqualityGroupMap(         Collection<EE> elements,         EquivalenceComparator<? super EE,? super CC> aEqComparator,         CC aComparatorContext)", "diff": ["-    private static HashMap createEqualityGroupMap(", "-        Object [] aElementsArray,", "-        EquivalenceComparator aEqComparator,", "-        Object aComparatorContext)", "+    private static <EE, CC> HashMap<Integer,List<EquivalenceSet<? super EE,? super CC>>> createEqualityGroupMap(", "+        Collection<EE> elements,", "+        EquivalenceComparator<? super EE,? super CC> aEqComparator,", "+        CC aComparatorContext)", "-        HashMap equalityGroupMap = new HashMap(aElementsArray.length);", "+        HashMap<Integer,List<EquivalenceSet<? super EE,? super CC>>> equalityGroupMap =", "+            new HashMap<Integer,List<EquivalenceSet<? super EE,? super CC>>>(elements.size());", "-        for (int i = 0; i < aElementsArray.length; i++) {", "+        for( EE curentElement : elements ) {", "-                aEqComparator.equivalenceHashcode(", "-                    aElementsArray[i],", "-                    aComparatorContext);", "-            Object mapValue = equalityGroupMap.get(Integer.valueOf(hashcode));", "+                aEqComparator.equivalenceHashcode( curentElement,", "+                                                   aComparatorContext);", "+            List<EquivalenceSet<? super EE,? super CC>> list =", "+                equalityGroupMap.get(Integer.valueOf(hashcode));", "-            // EquivalenceSet(there", "-            // is one already with that hash) , or a list of EquivalenceSet", "-            if (mapValue == null) {", "-                // create list with one elemnt in it", "-                List list = new LinkedList();", "-                list.add(new EquivalenceSet(", "-                        aElementsArray[i],", "+            // or a list of EquivalenceSet", "+", "+            if (list == null) {", "+                // create list with one element in it", "+                list = new LinkedList<EquivalenceSet<? super EE,? super CC>>();", "+                list.add(new EquivalenceSet<EE,CC>(", "+                        curentElement,", "-            } else if (mapValue instanceof List) {", "-                List list = (List) mapValue;", "+            } else {", "-                for (Iterator iter = list.iterator(); iter.hasNext();) {", "-                    EquivalenceSet eqGroup = (EquivalenceSet) iter.next();", "+                for (EquivalenceSet<? super EE,? super CC> eqGroup : list) {", "-                            aElementsArray[i],", "+                            curentElement,", "-                        eqGroup.add(aElementsArray[i]);", "+                        eqGroup.add(curentElement);", "-                    list.add(new EquivalenceSet(", "-                            aElementsArray[i],", "+                    list.add(new EquivalenceSet<EE,CC>(", "+                            curentElement,", "-            } else {", "-                throw new RuntimeException(", "-                    \"The equalityGroupMap value may only be null or List\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb835b0ed988a9447bbd91fa2b41a3de", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/util/equivalence/EquivalenceSetCreator.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static EquivalenceSet [] createEqualityGroupOrderedArray(         Object [] aElementsArray,         EquivalenceComparator aEqComparator,         Object aContext)", "signatureAfterChange": "     public static <EE, CC> EquivalenceSet [] createEqualityGroupOrderedArray(         Collection<EE> elements,         EquivalenceComparator<? super EE,? super CC> aEqComparator,         CC aContext)", "diff": ["-    public static EquivalenceSet [] createEqualityGroupOrderedArray(", "-        Object [] aElementsArray,", "-        EquivalenceComparator aEqComparator,", "-        Object aContext)", "-        ArrayList arrayList = new ArrayList();", "-        HashMap map =", "-            createEqualityGroupMap(aElementsArray, aEqComparator, aContext);", "-        // each of the map value is a list with one or more groups in it.", "+     */", "+    public static <EE, CC> EquivalenceSet [] createEqualityGroupOrderedArray(", "+        Collection<EE> elements,", "+        EquivalenceComparator<? super EE,? super CC> aEqComparator,", "+        CC aContext)", "+    {", "+        ArrayList<EquivalenceSet<? super EE,? super CC>> arrayList =", "+            new ArrayList<EquivalenceSet<? super EE,? super CC>>();", "+", "+        HashMap<Integer,List<EquivalenceSet<? super EE,? super CC>>> map =", "+            createEqualityGroupMap(elements, aEqComparator, aContext);", "+        // each of the map values is a list with one or more groups in it.", "-        for (Iterator collectionIter = map.values().iterator();", "-            collectionIter.hasNext();) {", "-            List list = (List) collectionIter.next();", "-            for (Iterator listIter = list.iterator(); listIter.hasNext();) {", "-                arrayList.add(listIter.next());", "+        for (List<EquivalenceSet<? super EE,? super CC>> list : map.values() ) {", "+            for (EquivalenceSet<? super EE,? super CC> eSet : list ) {", "+                arrayList.add( eSet );", "+        "]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7f6b808355dc5a5dd558bdd85b093b69", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8da0c62447a0e1f36a214e5fe5d8649", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/isomorphism/VF2SubgraphIsomorphismInspectorTest.java", "commitBeforeChange": "7311f3ddb2ec71dc0af1e1a2446d2101c7876729", "commitAfterChange": "54838b87558eb9d3e44052fabd8af33ef9bf26b7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     @Test     public void testEdgeCasesDirectedGraph()", "signatureAfterChange": "     @Test     public void testEdgeCasesDirectedGraph()", "diff": ["-        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf6b =", "-            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(g3, g6);", "-", "-        assertEquals(\"[1=5 2=6 3=7 4=~~]\",", "-                        vf6b.getMappings().next().toString());", "+//        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf6b =", "+//            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(g3, g6);", "+//", "+//        assertEquals(\"[1=5 2=6 3=7 4=~~]\",", "+//                        vf6b.getMappings().next().toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f619bd77583c312bea74e5928c97c349", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/FloydWarshallShortestPaths.java", "commitBeforeChange": "7c92324c62793ccd32781d7e3f1ebd3ed525f69b", "commitAfterChange": "82f01404dfe36eb0f878e007bce7de6e76c70836", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public List<GraphPath<V, E>> getShortestPaths(V v)", "signatureAfterChange": "     public List<GraphPath<V, E>> getShortestPaths()", "diff": ["-        List<GraphPath<V, E>> found = new ArrayList<GraphPath<V, E>>();", "-", "-        // TODO:  two-level map for paths so that we don't have to", "-        // iterate over all paths here!", "-        for (VertexPair<V> pair : paths.keySet()) {", "-            if (pair.getFirst().equals(v)) {", "-                found.add(paths.get(pair));", "-            }", "-        }", "-", "-        return found;", "+    public List<GraphPath<V, E>> getShortestPaths()", "+        List<GraphPath<V, E>> allPaths=new ArrayList<GraphPath<V, E>>();", "+        for(List<GraphPath<V, E>> pathSubset : paths.values())", "+            allPaths.addAll(pathSubset);", "+", "+        return allPaths;", "+    }"]}]}
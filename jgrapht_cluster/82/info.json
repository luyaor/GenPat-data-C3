{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b67cd6968beab144bace33a0e38d0ab6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "066aad5c52966e8236c5b826a2870b32", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/isomorphism/AbstractExhaustiveIsomorphismInspector.java", "commitBeforeChange": "857bf50cc4b146a4020c6dc6b730687dfcd7de35", "commitAfterChange": "3358959abc414f2281c71486c6c1a90935b1e909", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private IsomorphismRelation findNextIsomorphicGraph()", "signatureAfterChange": "     private IsomorphismRelation<V,E> findNextIsomorphicGraph()", "diff": ["-    private IsomorphismRelation findNextIsomorphicGraph()", "+    private IsomorphismRelation<V,E> findNextIsomorphicGraph()", "-        IsomorphismRelation resultRelation = null;", "+        IsomorphismRelation<V,E> resultRelation = null;", "-                        new IsomorphismRelation(", "-                            graph1VertexSet.toArray(),", "-                            currVertexPermutation.toArray(),", "+                        new IsomorphismRelation<V,E>(", "+                            new ArrayList<V>(graph1VertexSet),", "+                            new ArrayList<V>(currVertexPermutation),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad242d5ce8eb546ff47865ba5f7c3ab3", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/StrongConnectivityInspector.java", "commitBeforeChange": "857bf50cc4b146a4020c6dc6b730687dfcd7de35", "commitAfterChange": "3358959abc414f2281c71486c6c1a90935b1e909", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     @SuppressWarnings(\"unchecked\"     private void dfsVisit(DirectedGraph<V, E> graph,         VertexData vertexData,         Set<V> vertices)", "signatureAfterChange": "     private void dfsVisit(DirectedGraph<V, E> graph,         VertexData<V> vertexData,         Set<V> vertices)", "diff": ["-    @SuppressWarnings(\"unchecked\")    // FIXME hb 28-nov-05: See FIXME's below", "-        VertexData vertexData,", "+        VertexData<V> vertexData,", "-        Stack<VertexData> stack = new Stack<VertexData>();", "+        Stack<VertexData<V>> stack = new Stack<VertexData<V>>();", "-            VertexData data = stack.pop();", "+            VertexData<V> data = stack.pop();", "-                    // FIXME hb 28-Nov-05: Clean after the fixme in VertexData below is solved", "-                    vertices.add((V) data.m_vertex);", "+                    vertices.add(data.m_vertex);", "-                // TODO: other way to identify when this vertex is finished!?", "-                // TODO: until only vertices are used as 1st parameter, type-saftey is difficult to realize (i.e, VertexData<V>", "-                stack.push(new VertexData(data, true, true));", "+                stack.push(new VertexData<V>(data, null, true, true));", "-                // FIXME hb 28-Nov-05: Clean after the fixme in VertexData below is solved", "-                    graph.outgoingEdgesOf((V) data.m_vertex).iterator();", "+                    graph.outgoingEdgesOf(data.m_vertex).iterator();", "-                    VertexData targetData =", "+                    VertexData<V> targetData =", "-                    // see TODO above", "-                    m_orderedVertices.addFirst((VertexData) data.m_vertex);", "+                    m_orderedVertices.addFirst(data.m_finishedData);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f55d5a4a92f4adfc7ddeb30683a2883f", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/EquivalenceIsomorphismInspector.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected CollectionPermutationIter createPermutationIterator(         Set vertexSet1,         Set vertexSet2)", "signatureAfterChange": "     protected CollectionPermutationIter<V> createPermutationIterator(         Set<V> vertexSet1,         Set<V> vertexSet2)", "diff": ["-    protected CollectionPermutationIter createPermutationIterator(", "-        Set vertexSet1,", "-        Set vertexSet2)", "+    protected CollectionPermutationIter<V> createPermutationIterator(", "+        Set<V> vertexSet1,", "+        Set<V> vertexSet2)", "-                vertexSet1.toArray(),", "+                vertexSet1,", "-                vertexSet2.toArray(),", "+                vertexSet2,", "-        // reorder set1 (source) , so when we work with the flat array of the", "+        // reorder set1 (source), so when we work with the flat array of the", "-        Object [] reorderingVertexSet1Temp = new Object [vertexSet1.size()];", "+        ", "+        // TODO hb 060208: REVIEW: Should the array be changed to an arrayList?", "+        V [] reorderingVertexSet1Temp = (V[])new Object [vertexSet1.size()];", "-        CollectionPermutationIter vertexPermIter =", "-            new CollectionPermutationIter(flatVertexArray, arrayPermIter);", "+        CollectionPermutationIter<V> vertexPermIter =", "+            new CollectionPermutationIter<V>(flatVertexArray, arrayPermIter);"]}]}
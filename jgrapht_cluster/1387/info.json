{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "376965c8a4f154ee2f786d7d017f4e59", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5367cd206632a3992bac46ef9fc8202a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/EdmondsKarpMaximumFlowTest.java", "commitBeforeChange": "a35680f67c56e8fcc81e697983a084c86d356dae", "commitAfterChange": "b4e8f6742028ccb6628bd42dbfef197bf5f06148", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private void runTest(         int [] tails,         int [] heads,         double [] capacities,         int [] sources,         int [] sinks,         double [] expectedResults)", "signatureAfterChange": "      private void runTest(         int [] tails,         int [] heads,         double [] capacities,         int [] sources,         int [] sinks,         double [] expectedResults)", "diff": ["+", "-        assertTrue(solver.getMaximumFlowValue() == null);", "-        assertTrue(solver.getMaximumFlow() == null);", "-            solver.calculateMaximumFlow(sources[i], sinks[i]);", "+            MaximumFlow<Integer, DefaultWeightedEdge> maxFlow = solver.buildMaximumFlow(sources[i], sinks[i]);", "-            double flowValue = solver.getMaximumFlowValue();", "-            Map<DefaultWeightedEdge, Double> flow = solver.getMaximumFlow();", "-                flowValue,", "+                maxFlow.getValue(),", "+", "+            Double flowValue = maxFlow.getValue();", "+            Map<DefaultWeightedEdge, Double> flow = maxFlow.getFlow();", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ada1fb215a802ac7c83090c0d4b33123", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/flow/MaximumFlowAlgorithmTestBase.java", "commitBeforeChange": "62325cdd7548d0cf930d478a885b2a08e669b9bb", "commitAfterChange": "6a8a4c15d51c52101d91cd979c3d30cc12195d89", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public void testRandomGraph()", "signatureAfterChange": "      public void testRandomGraph()", "diff": ["-        System.out.println(\"== GENERATED ==\");", "+        System.out.println(\"\\n=== GENERATED ===\\n\");", "-        checkPushRelabel(network, source, sink);", "-        checkEdmondsKarp(network, source, sink);", "+        MaximumFlow<Integer, DefaultWeightedEdge> maxFlow = createSolver(network).buildMaximumFlow(source, sink);", "+        check(maxFlow, source, sink, network);", "+", "+        // _DBG", "-//        dumpGraph(network, source, sink);", "+        // _DBG", "+        //dumpGraph(network, source, sink);"]}]}
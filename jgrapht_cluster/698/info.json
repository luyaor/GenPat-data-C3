{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc3e7a7161c06b30a0d76e46fcc59a39", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfb86d884f216487204f4c4566b9ce22", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/StrongConnectivityInspector.java", "commitBeforeChange": "04b4adb9d61a0a7a990979c19fd44e55accd860f", "commitAfterChange": "ccbda858621a3d1beb6a9381a0fc81c3673ee66c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void resetVertexData(  )", "signatureAfterChange": "     private void resetVertexData()", "diff": ["-    private void resetVertexData(  ) {", "-        Iterator iter = m_orderedVertices.iterator(  );", "+    private void resetVertexData() {", "+        Iterator iter = m_vertexToVertexData.values().iterator();", "-        while( iter.hasNext(  ) ) {", "-            VertexData data = (VertexData) iter.next(  );", "-            data.m_discovered     = false;", "-            data.m_finished       = false;", "+        while (iter.hasNext()) {", "+            VertexData data = (VertexData) iter.next();", "+            data.m_discovered = false;", "+            data.m_finished = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f136ebdd3ba5198f92422631accadf11", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/StrongConnectivityInspector.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public List<Set<V>> stronglyConnectedSets()", "signatureAfterChange": "     public List<Set<V>> stronglyConnectedSets()", "diff": ["-            DirectedGraph<V, E> inverseGraph = new DefaultDirectedGraph<V, E>();", "-            GraphHelper.addGraphReversed(inverseGraph, m_graph);", "+            DirectedGraph<V, E> inverseGraph =", "+                new DefaultDirectedGraph<V, E>(m_graph.getEdgeFactory());", "+            Graphs.addGraphReversed(inverseGraph, m_graph);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f9dae951caf7a63ea0a364ac5333eff5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e7d0364bc0ea8d92f13c152a3225523", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-ext/src/main/java/org/jgrapht/ext/DOTImporter.java", "commitBeforeChange": "2cba8aef2cc77a406de26760e4f816581f7adba7", "commitAfterChange": "915acf67bde336fce1aee298fe506b6a9a961b70", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void validateLines(String[] lines) throws ImportException", "signatureAfterChange": "     private void validateLines(String[] lines,                               AbstractBaseGraph<V,E> graph)          throws ImportException", "diff": ["-   private void validateLines(String[] lines) throws ImportException", "+   private void validateLines(String[] lines,", "+                              AbstractBaseGraph<V,E> graph)", "+         throws ImportException", "-      String[] firstLine = lines[0].split(\" \", 3);", "-      if(firstLine.length != 3) {", "+      String[] firstLine = lines[0].split(\" \", 4);", "+      if(firstLine.length < 3) {", "-      if (!firstLine[0].equals(\"digraph\") && !firstLine[0].equals(\"graph\")) {", "+      int i = 0;", "+      if (graph.isAllowingMultipleEdges() && firstLine[i].equals(\"strict\")) {", "+         throw new ImportException(", "+               \"graph defines strict but Multigraph given.\"", "+         );", "+      } else if (firstLine[i].equals(\"strict\")) {", "+         i = i + 1;", "+      }", "+", "+      if (graph instanceof DirectedGraph && firstLine[i].equals(\"graph\") ) {", "+         throw new ImportException(", "+               \"input asks for undirected graph and directed graph provided.\"", "+         );", "+      } else if (!(graph instanceof DirectedGraph)", "+                 && firstLine[i].equals(\"digraph\")) {", "+         throw new ImportException(", "+               \"input asks for directed graph but undirected graph provided.\"", "+         );", "+      } else if(!firstLine[i].equals(\"graph\")", "+                && !firstLine[i].equals(\"digraph\")){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a89128eaa2d36c684076757f5e414267", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/FloydWarshallShortestPaths.java", "commitBeforeChange": "7c92324c62793ccd32781d7e3f1ebd3ed525f69b", "commitAfterChange": "82f01404dfe36eb0f878e007bce7de6e76c70836", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void lazyCalculateMatrix()", "signatureAfterChange": "     private void lazyCalculateMatrix()", "diff": ["-        boolean directed = graph instanceof DirectedGraph<?, ?>;", "-        Set<E> edges = graph.edgeSet();", "-        for (E edge : edges) {", "-            V v1 = graph.getEdgeSource(edge);", "-            V v2 = graph.getEdgeTarget(edge);", "-", "-            int v_1 = vertexIndices.get(v1);", "-            int v_2 = vertexIndices.get(v2);", "-", "-            d[v_1][v_2] = graph.getEdgeWeight(edge);", "-            if (!directed) {", "-                d[v_2][v_1] = graph.getEdgeWeight(edge);", "+        if(graph instanceof  UndirectedGraph<?, ?>){", "+            for (E edge : graph.edgeSet()) {", "+                int v_1 = vertexIndices.get(graph.getEdgeSource(edge));", "+                int v_2 = vertexIndices.get(graph.getEdgeTarget(edge));", "+                d[v_1][v_2] =d[v_2][v_1] =graph.getEdgeWeight(edge);", "+            }", "+        }else{ //This works for both Directed and Mixed graphs! Iterating over the arcs and querying source/sink does not suffice for graphs which contain both edges and arcs", "+            DirectedGraph<V,E> directedGraph=(DirectedGraph<V,E>)graph;", "+            for(V v1 : directedGraph.vertexSet()){", "+                for(V v2 : Graphs.successorListOf(directedGraph, v1)){", "+                    int v_1 = vertexIndices.get(v1);", "+                    int v_2 = vertexIndices.get(v2);", "+                    d[v_1][v_2] =directedGraph.getEdgeWeight(directedGraph.getEdge(v1, v2));", "+                }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3d1ce5544b2569dd924e9e2545caa109", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18ebae9777576143df1554e1ae067f68", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/experimental/alg/VertexCoverApproximationAlgorithm.java", "commitBeforeChange": "a61c430f2ac7af9e4b0519b792fa90091fa0462d", "commitAfterChange": "3dfe7bd3c3baf72541946589aad20525c29233c0", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\t \tpublic VertexCoverApproximationAlgorithm(Pseudograph graph)", "signatureAfterChange": "     public VertexCoverApproximationAlgorithm( Graph g )", "diff": ["-\t */\t", "-\tpublic VertexCoverApproximationAlgorithm(Pseudograph graph) {", "-\t\tthis.graph = graph;", "-\t}", "+     */", "+    public VertexCoverApproximationAlgorithm( Graph g ) {", "+        if( g instanceof DirectedGraph ) {", "+            m_graph = new AsUndirectedGraph( (DirectedGraph) g );", "+        }", "+        else if( g instanceof UndirectedGraph ) {", "+            m_graph = (UndirectedGraph) g;", "+        }", "+        else {", "+            throw new IllegalArgumentException( \"Unrecognized graph\" );", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af273c4ba069b9828b6f73245b5c898a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/traverse/TraverseUtils.java", "commitBeforeChange": "0997a58f5471f09bb9fdcb21da80e929c7b2bb23", "commitAfterChange": "9350cdef6b0d2c87575b39e1606fd2378047d04a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      static Specifics createGraphSpecifics( Graph g )", "signatureAfterChange": "      static Specifics createGraphSpecifics(         Graph g, boolean ignoreEdgeDirection )", "diff": ["-    static Specifics createGraphSpecifics( Graph g ) {", "-        if( g instanceof DirectedGraph ) {", "+    static Specifics createGraphSpecifics(", "+        Graph g, boolean ignoreEdgeDirection ) {", "+        if( !ignoreEdgeDirection && ( g instanceof DirectedGraph ) ) {", "-        else if( g instanceof UndirectedGraph ) {", "-            return new UndirectedSpecifics( (UndirectedGraph) g );", "-        }", "-            throw new IllegalArgumentException( \"Unsupported graph type\" );", "+            return new UndirectedSpecifics( g );"]}]}
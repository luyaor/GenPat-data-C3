{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a86fad94ec8caf90c413635aec213ff8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d4fab4f959a220e3462837e769be2a4", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/ext/VisioExporter.java", "commitBeforeChange": "857bf50cc4b146a4020c6dc6b730687dfcd7de35", "commitAfterChange": "3358959abc414f2281c71486c6c1a90935b1e909", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void export(OutputStream output, Graph g)", "signatureAfterChange": "     public void export(OutputStream output, Graph<V,E> g)", "diff": ["-    public void export(OutputStream output, Graph g)", "+    public void export(OutputStream output, Graph<V,E> g)", "-        for (Iterator i = g.vertexSet().iterator(); i.hasNext();) {", "+        for (Iterator<V> i = g.vertexSet().iterator(); i.hasNext();) {", "-        for (Iterator i = g.edgeSet().iterator(); i.hasNext();) {", "+        for (Iterator<E> i = g.edgeSet().iterator(); i.hasNext();) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "944c2276b1f7f413b3ce4f8b918beda6", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/VertexCoversTest.java", "commitBeforeChange": "16285fc735125684f525244baa1af05c7e3b89ee", "commitAfterChange": "ff54bec324648e52ae4dae6f81ce89c54758dce1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private boolean isCover(Set vertexSet, Graph g)", "signatureAfterChange": "     private boolean isCover(         Set<Integer> vertexSet, Graph<Integer,DefaultEdge> g)", "diff": ["-    private boolean isCover(Set vertexSet, Graph g)", "+    private boolean isCover(", "+        Set<Integer> vertexSet, Graph<Integer,DefaultEdge> g)", "-        Set uncoveredEdges = new HashSet(g.edgeSet());", "+        Set<DefaultEdge> uncoveredEdges = new HashSet<DefaultEdge>(g.edgeSet());", "-        for (Iterator i = vertexSet.iterator(); i.hasNext();) {", "+        for (Iterator<Integer> i = vertexSet.iterator(); i.hasNext();) {"]}]}
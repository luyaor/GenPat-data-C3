{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c23a35b9216efbb364d52045b6df541d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "070602b5ae5211836207cac3dc0079de", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/CycleDetector.java", "commitBeforeChange": "2003496a80f483b98d40a459268e93d0fdaec76c", "commitAfterChange": "618193dfca3ac4de3a61698028cfd965351c74a1", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "         protected void encounterVertexAgain(V vertex, E edge)", "signatureAfterChange": "         protected void encounterVertexAgain(V vertex, E edge)", "diff": ["-            int i = path.indexOf(vertex);", "+            int i;", "+", "+            if (root != null) {", "+                // For rooted detection, the path must either", "+                // double back to the root, or to a node of a cycle", "+                // which has already been detected.", "+                if (vertex == root) {", "+                    i = 0;", "+                } else if ((cycleSet != null) && cycleSet.contains(vertex)) {", "+                    i = 0;", "+                } else {", "+                    return;", "+                }", "+            } else {", "+                i = path.indexOf(vertex);", "+            }", "-                }", "-", "-                for (; i < path.size(); ++i) {", "-                    cycleSet.add(path.get(i));", "+                } else {", "+                    for (; i < path.size(); ++i) {", "+                        cycleSet.add(path.get(i));", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79f295436e48abd67c09c898eda46708", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/experimental/isomorphism/IsomorphismInspectorTest.java", "commitBeforeChange": "16285fc735125684f525244baa1af05c7e3b89ee", "commitAfterChange": "ff54bec324648e52ae4dae6f81ce89c54758dce1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private void assertIsomorphic(         Graph<Integer,DefaultEdge> [] graphs,         boolean shouldTheyBeIsomorphic,         EquivalenceComparator vertexChecker,         EquivalenceComparator edgeChecker)", "signatureAfterChange": "      @SuppressWarnings(\"unchecked\") \tprivate void assertIsomorphic(         Graph<Integer,DefaultEdge> [] graphs,         boolean shouldTheyBeIsomorphic,         EquivalenceComparator vertexChecker,         EquivalenceComparator edgeChecker)", "diff": ["-    private void assertIsomorphic(", "+    @SuppressWarnings(\"unchecked\")", "+\tprivate void assertIsomorphic(", "-        IsomorphismRelation isioResult;", "-            isioResult = (IsomorphismRelation) iso.next();", "+            IsomorphismRelation isioResult = (IsomorphismRelation) iso.next();", "-            // if (counter==0)", "-            // {", "-            // System.out.println(\"Graphs are isomorphic. Iterating over all", "-            // options:\");", "-            // }", "-            // System.out.println(counter+\" : \"+isioResult);", "+            if (false) {", "+                if (counter==0)", "+                {", "+                    System.out.println(\"Graphs are isomorphic. Iterating over all options:\");", "+                }", "+                System.out.println(counter+\" : \"+isioResult);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4f5eddc9b6cca571dbef49f84bede84", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/experimental/isomorphism/IsomorphismInspectorTest.java", "commitBeforeChange": "16285fc735125684f525244baa1af05c7e3b89ee", "commitAfterChange": "ff54bec324648e52ae4dae6f81ce89c54758dce1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private void checkRelation(         Graph<Integer,DefaultEdge> [] graphs,         EquivalenceComparator vertexChecker,         EquivalenceComparator edgeChecker)", "signatureAfterChange": "      @SuppressWarnings(\"unchecked\") \tprivate void checkRelation(         Graph<Integer,DefaultEdge> [] graphs,         EquivalenceComparator vertexChecker,         EquivalenceComparator edgeChecker)", "diff": ["-    private void checkRelation(", "+    @SuppressWarnings(\"unchecked\")", "+\tprivate void checkRelation(", "-        int counter = 0;", "-                // System.out.println(\"Vertex relation \"+v1+\" to \" +v2);", "+                if (false) {", "+                    System.out.println(\"Vertex relation \"+v1+\" to \" +v2);", "+                }", "-                // System.out.println(\"Vertex relation \"+e1+\" to \" +e2);", "+                if (false) {", "+                    System.out.println(\"Vertex relation \"+e1+\" to \" +e2);", "+                }"]}]}
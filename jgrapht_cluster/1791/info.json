{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e49836836ca5f7353ee0e57549f0c4cc", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e838479a1883e823c8cbc2bc652956c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/util/FibonacciHeap.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void decreaseKey(FibonacciHeapNode<T> x, double k)", "signatureAfterChange": "     public void decreaseKey(FibonacciHeapNode<T> x, double k)", "diff": ["-        if (k > x.m_key) {", "+        if (k > x.key) {", "-        x.m_key = k;", "+        x.key = k;", "-        FibonacciHeapNode<T> y = x.m_parent;", "+        FibonacciHeapNode<T> y = x.parent;", "-        if ((y != null) && (x.m_key < y.m_key)) {", "+        if ((y != null) && (x.key < y.key)) {", "-        if (x.m_key < m_min.m_key) {", "-            m_min = x;", "+        if (x.key < minNode.key) {", "+            minNode = x;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab9d6ff4cdc8e71ed7d42b3b671f79a5", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/ShortestPathTestCase.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void testPathBetween()", "signatureAfterChange": "     public void testPathBetween()", "diff": ["-        assertEquals(Arrays.asList(new DefaultEdge [] { m_e12 }), path);", "+        assertEquals(Arrays.asList(new DefaultEdge [] { e12 }), path);", "-                    m_e12, m_e24", "+                    e12, e24", "-                    m_e12, m_e24, m_e45", "+                    e12, e24, e45", "-                    m_e13, m_e12, m_e24", "+                    e13, e12, e24"]}]}
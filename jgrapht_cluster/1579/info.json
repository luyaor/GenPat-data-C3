{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5cd8baf51b4a96806c3b7ca85e4e3e98", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b607e1f2bb8076c5336e7f9ab597870", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/EulerianCircuit.java", "commitBeforeChange": "ee432b2d260ae5197884a4bde7ebfd8fbc425567", "commitAfterChange": "fc11048fde6fa30641d7d466b45a9729e009006e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static <V, E> boolean isEulerian(UndirectedGraph<V, E> g)", "signatureAfterChange": "     public static <V, E> boolean isEulerian(UndirectedGraph<V, E> g)", "diff": ["-\t */", "-\tpublic static <V, E> boolean isEulerian(UndirectedGraph<V, E> g) {", "-\t\t", "-\t\t// If the graph is not connected, then no Eulerian circuit exists", "-\t\tif (!(new ConnectivityInspector<V, E>(g)).isGraphConnected())", "-\t\t\treturn false;", "-\t\t", "-\t\t// A graph is Eulerian if and only if all vertices have even degree", "-\t\t// So, this code will check for that", "-\t\tIterator<V> iter = g.vertexSet().iterator();", "-\t\twhile (iter.hasNext()) {", "-\t\t\tV v = iter.next();", "-\t\t\tif (g.degreeOf(v) % 2 == 1) {", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t}", "-\t\treturn true;", "-\t}", "+     */", "+    public static <V, E> boolean isEulerian(UndirectedGraph<V, E> g)", "+    {", "+        // If the graph is not connected, then no Eulerian circuit exists", "+        if (!(new ConnectivityInspector<V, E>(g)).isGraphConnected()) {", "+            return false;", "+        }", "+        // A graph is Eulerian if and only if all vertices have even degree", "+        // So, this code will check for that", "+        Iterator<V> iter = g.vertexSet().iterator();", "+        while (iter.hasNext()) {", "+            V v = iter.next();", "+            if ((g.degreeOf(v) % 2) == 1) {", "+                return false;", "+            }", "+        }", "+        return true;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8f8ec907e719b87cff284fb223a23c0", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/experimental/alg/DijkstraAlgorithm.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public final WeightedGraph optimumPathTree(Object from)", "signatureAfterChange": "     public final WeightedGraph<V,E> optimumPathTree(V from)", "diff": ["-    public final WeightedGraph optimumPathTree(Object from)", "+    public final WeightedGraph<V,E> optimumPathTree(V from)", "-        WeightedGraph optimumPathTree;", "+        WeightedGraph<V,E> optimumPathTree;", "-            optimumPathTree = new SimpleDirectedWeightedGraph();", "+        \t//FIXME hb 051124: I would like to pass Edge<V> instead of DirectedEdge and remove the cast", "+            optimumPathTree = (WeightedGraph<V,E>)new SimpleDirectedWeightedGraph<V,DirEdge<V>>();", "-            optimumPathTree = new SimpleWeightedGraph();", "+            optimumPathTree = new SimpleWeightedGraph<V,E>();", "-        for (Iterator it = _wgraph.vertexSet().iterator(); it.hasNext();) {", "+        for (Iterator<V> it = _wgraph.vertexSet().iterator(); it.hasNext();) {", "-            Object v = hv.getVertex();", "-            Edge treeEdge = (Edge) hv.getAdditional();", "+            V v = (V)hv.getVertex();\t\t\t\t//FIXME hb 051124: Remove cast", "+            E treeEdge = (E) hv.getAdditional();\t//FIXME hb 051124: Remove cast", "-            Iterator edges;", "+            Iterator<? extends Edge<V>> edges;", "-                    ((DirectedGraph) _wgraph).outgoingEdgesOf(v).iterator();", "+                    ((DirectedGraph<V,DirEdge<V>>) _wgraph).outgoingEdgesOf(v).iterator();", "-                Edge e = (Edge) edges.next();", "+                Edge<V> e = edges.next();"]}]}
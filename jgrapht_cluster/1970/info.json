{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3f58dfda7f74d45ff75d665a3f0575ce", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74f498c43a91d654791d94f2dd16407b", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/traverse/ClosestFirstIterator.java", "commitBeforeChange": "76c63a3cd39a7c1d6d3b03fda1124fe4b9e92d94", "commitAfterChange": "2447c7c931ae9699c64dac201be5f02bf4dc6f03", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private FibonacciHeapNode<QueueEntry<V, E>> createSeenData(         V vertex,         E edge)", "signatureAfterChange": "     private FibonacciHeapNode<QueueEntry<V, E>> createSeenData(         V vertex,         E edge)", "diff": ["-        double shortestPathLength;", "-", "-        if (edge == null) {", "-            shortestPathLength = 0;", "-        } else {", "-            shortestPathLength = calculatePathLength(vertex, edge);", "-        }", "-", "-        return new FibonacciHeapNode<QueueEntry<V, E>>(", "-            entry,", "-            shortestPathLength);", "+        return new FibonacciHeapNode<QueueEntry<V, E>>(entry);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b957f66f6f1d256097be78e64dfd11f1", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/traverse/ClosestFirstIterator.java", "commitBeforeChange": "76c63a3cd39a7c1d6d3b03fda1124fe4b9e92d94", "commitAfterChange": "2447c7c931ae9699c64dac201be5f02bf4dc6f03", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     protected void encounterVertex(V vertex, E edge)", "signatureAfterChange": "     protected void encounterVertex(V vertex, E edge)", "diff": ["+        double shortestPathLength;", "+        if (edge == null) {", "+            shortestPathLength = 0;", "+        } else {", "+            shortestPathLength = calculatePathLength(vertex, edge);", "+        }", "-        heap.insert(node, node.getKey());", "+        heap.insert(node, shortestPathLength);"]}]}
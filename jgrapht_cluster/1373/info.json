{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bc60edfba167841e59b82737217870d4", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "864b9f423911f20aad7e8954143a02e0", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/AbstractExhaustiveIsomorphismInspector.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     protected boolean areAllEdgesEquivalent(         IsomorphismRelation resultRelation,         EquivalenceComparator edgeComparator)", "signatureAfterChange": "     protected boolean areAllEdgesEquivalent(         IsomorphismRelation resultRelation,         EquivalenceComparator<? super E,? super Graph<V,E>> edgeComparator)", "diff": ["-        EquivalenceComparator edgeComparator)", "+        EquivalenceComparator<? super E,? super Graph<V,E>> edgeComparator)", "-            Set edgeSet = this.graph1.edgeSet();", "+            Set<E> edgeSet = this.graph1.edgeSet();", "-            for (Iterator iter = edgeSet.iterator(); iter.hasNext();) {", "-                Edge currEdge = (Edge) iter.next();", "-                Edge correspondingEdge =", "-                    (Edge) resultRelation.getCorrespondence(currEdge, true);", "+            for ( E currEdge : edgeSet ) {", "+                E correspondingEdge =", "+                    // XXX hb 060128: Waiting for GraphMapping to go generic", "+                    (E) resultRelation.getCorrespondence(currEdge, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e667030a11b19821cd21c1fc3e9e9889", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/Subgraph.java", "commitBeforeChange": "1bf692b9303b369fdfe7554ce2df1fedf3288436", "commitAfterChange": "5471207353f24a9e52809a768cf32ffbeaf81076", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public int degreeOf( Object vertex )", "signatureAfterChange": "     public int degreeOf( Object vertex )", "diff": ["-        return ( (UndirectedGraph) m_base ).degreeOf( vertex );", "+        assertVertexExist( vertex );", "+        ", "+        // sophisticated way to check runtime class of base ;-)", "+        ((UndirectedGraph)m_base).degreeOf( vertex );", "+        ", "+        int degree = 0;", "+", "+        for( Iterator i = m_base.edgesOf( vertex ).iterator(  ); i.hasNext(  ); ) {", "+            Edge e = (Edge) i.next(  );", "+", "+            if( containsEdge( e ) ) {", "+                degree++;", "+                if (e.getSource().equals(e.getTarget())) {", "+                    degree++;", "+                }", "+            }", "+        }", "+        ", "+        return degree;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d9c270f6a04c278c2a83500b17fb7e2b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f19dfeff5f90b19b199d686cdac2ac4", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/DepthFirstIterator.java", "commitBeforeChange": "3cf8c5a89937c13e56521bf120df93d38d5c84ee", "commitAfterChange": "992268c2ef72b87aa653335246e4876213a0071b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public boolean hasNext(  )", "signatureAfterChange": "     public boolean hasNext(  )", "diff": ["-        return !m_stack.isEmpty(  ) && isCrossComponentTraversal(  );", "+        if( m_stack.isEmpty(  ) ) {", "+            if( isCrossComponentTraversal(  ) ) {", "+                while( m_vertexIterator.hasNext(  ) ) {", "+                    Object v = m_vertexIterator.next(  );", "+", "+                    if( !m_seen.contains( v ) ) {", "+                        m_seen.add( v );", "+                        m_stack.add( v );", "+", "+                        return true;", "+                    }", "+                }", "+", "+                return false;", "+            }", "+            else {", "+                return false;", "+            }", "+        }", "+        else {", "+            return true;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f869a2721b15247374734141cdb0609c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/traverse/DepthFirstIterator.java", "commitBeforeChange": "618193dfca3ac4de3a61698028cfd965351c74a1", "commitAfterChange": "fff40bd4cd855e6b017814afe0a8444e1360aae0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected boolean isConnectedComponentExhausted()", "signatureAfterChange": "     protected boolean isConnectedComponentExhausted()", "diff": ["-        return stack.isEmpty();", "+        for (;;) {", "+            if (stack.isEmpty()) {", "+                return true;", "+            }", "+            if (peekStack() != null) {", "+                // Found a non-sentinel.", "+                return false;", "+            }", "+            ", "+            // Found a sentinel:  pop it, record the finish time,", "+            // and then loop to check the rest of the stack.", "+            ", "+            // Pop null we peeked at above.", "+            popStack();", "+", "+            // This will pop corresponding vertex to be recorded as finished.", "+            recordFinish();", "+        }"]}]}
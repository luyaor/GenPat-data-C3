{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b890e901df27180e6830cf4119992570", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dedb6285151aeed5fb2ccc11675f38e3", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/traverse/DepthFirstIteratorTest.java", "commitBeforeChange": "0997a58f5471f09bb9fdcb21da80e929c7b2bb23", "commitAfterChange": "9350cdef6b0d2c87575b39e1606fd2378047d04a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "       AbstractGraphIterator createIterator( Graph g, Object vertex,         boolean crossComponent )", "signatureAfterChange": "       AbstractGraphIterator createIterator( Graph g, Object vertex,         boolean crossComponent )", "diff": ["-        return new DepthFirstIterator( g, vertex, crossComponent );", "+        return new DepthFirstIterator( g, vertex, crossComponent, false );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb99ee894326a335fc386c2045977c85", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/VF2SubgraphIsomorphismInspector.java", "commitBeforeChange": "dcd52f7fb7eeeadf66a7b8d39b5c500257a852b0", "commitAfterChange": "c2593980e98ffd3b0fd8713e1065362c591d271a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public VF2SubgraphIsomorphismInspector(                     Graph<V, E> graph1,                     Graph<V, E> graph2,                     Comparator<V> vertexComparator,                     Comparator<E> edgeComparator)", "signatureAfterChange": "     public VF2SubgraphIsomorphismInspector(                     Graph<V, E> graph1,                     Graph<V, E> graph2,                     Comparator<V> vertexComparator,                     Comparator<E> edgeComparator)", "diff": ["-        this.ordering1        = new GraphOrdering<V, E>(graph1);", "-        this.ordering2        = new GraphOrdering<V, E>(graph2);", "+        this.ordering1        = new GraphOrdering<V, E>(graph1, true);", "+        this.ordering2        = new GraphOrdering<V, E>(graph2, true);"]}]}
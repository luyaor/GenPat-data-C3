{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "447e15c14a0ef71efe0bddd31aa79b22", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6105a38ce626b5ff0bb7bb6d27647282", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/isomorphism/VF2SubgraphIsomorphismInspectorTest.java", "commitBeforeChange": "5ad133ca974bee3f583f3037c1c5c902d0c89ecf", "commitAfterChange": "674a0a942965578d6c9d23a87f5c2c2d55185248", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     @Test     public void testEdgeCasesDirectedGraph()", "signatureAfterChange": "     @Test     public void testEdgeCasesDirectedGraph()", "diff": ["-        /* expected result is the mapping that is usually first found,", "-         * it is possible that a different matching is found first", "-         * (false result), though the algorithm works correctly,", "-         * especially if an ordering of the vertices is applied", "-         */", "-        assertEquals(\"[0=0 1=1 2=2 3=3 4=~~]\",", "-                vf10.getMappings().next().toString());", "+        Iterator<IsomorphicGraphMapping<Integer, DefaultEdge>> iter10 =", "+                vf10.getMappings();", "+", "+        Set<String> mappings10 =", "+                new HashSet<String>(Arrays.asList(\"[0=0 1=1 2=2 3=3 4=~~]\",", "+                        \"[0=0 1=1 2=2 3=~~ 4=3]\",", "+                        \"[0=0 1=1 2=~~ 3=2 4=3]\",", "+                        \"[0=0 1=~~ 2=1 3=2 4=3]\",", "+                        \"[0=~~ 1=0 2=1 3=2 4=3]\"));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(false, iter10.hasNext());", "-        /* expected result is the mapping that is usually first found,", "-         * it is possible that a different matching is found first", "-         * (false result), though the algorithm works correctly,", "-         * especially if an ordering of the vertices is applied", "-         */", "-        assertEquals(\"[1=1 2=2 3=3 4=4]\",", "-                vf11.getMappings().next().toString());", "-        /* assertEquals(true,", "-            SubgraphIsomorphismTestUtils.containsAllMatchings(vfs11,", "-                    sg4v3e, sg4v3e)); */", "+        Iterator<IsomorphicGraphMapping<Integer, DefaultEdge>> iter11 =", "+                vf11.getMappings();", "+", "+        Set<String> mappings11 =", "+                new HashSet<String>(Arrays.asList(\"[1=1 2=2 3=3 4=4]\"));", "+        assertEquals(true, mappings11.remove(iter11.next().toString()));", "+        assertEquals(false, iter11.hasNext());", "+", "-        /* expected result is the mapping that is usually first found,", "-         * it is possible that a different matching is found first", "-         * (false result), though the algorithm works correctly,", "-         * especially if an ordering of the vertices is applied", "-         */", "-        assertEquals(\"[0=~~ 1=8 2=10 3=9 4=7 5=6]\",", "-                vf12.getMappings().next().toString());", "+        Iterator<IsomorphicGraphMapping<Integer, DefaultEdge>> iter12 =", "+                vf12.getMappings();", "+        Set<String> mappings12 =", "+                new HashSet<String>(Arrays.asList(\"[0=~~ 1=8 2=10 3=9 4=7 5=6]\",", "+                        \"[0=~~ 1=9 2=8 3=10 4=7 5=6]\",", "+                        \"[0=~~ 1=10 2=9 3=8 4=7 5=6]\"));", "+        assertEquals(true, mappings12.remove(iter12.next().toString()));", "+        assertEquals(true, mappings12.remove(iter12.next().toString()));", "+        assertEquals(true, mappings12.remove(iter12.next().toString()));", "+        assertEquals(false, iter12.hasNext());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92c96b3765c6cb47cf1acf63252bdca8", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/graph/AsWeightedGraphTest.java", "commitBeforeChange": "5fd52feef7dfccbb0b591fde0bda240336fc10d1", "commitAfterChange": "c47aefcfe74648da036d5e9f46b58264738e055c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void test1()", "signatureAfterChange": "      public void testWeightedGraph(Graph<String, DefaultWeightedEdge> graph)", "diff": ["-    public void test1()", "-    {", "-        Map<DefaultEdge, Double> weightMap1 =", "-            new HashMap<DefaultEdge, Double>();", "-        Map<DefaultWeightedEdge, Double> weightMap2 =", "-            new HashMap<DefaultWeightedEdge, Double>();", "-        DefaultEdge e1 = unweightedGraph.getEdge(\"v1\", \"v2\");", "-        DefaultEdge e2 = unweightedGraph.getEdge(\"v2\", \"v3\");", "-        DefaultEdge e3 = unweightedGraph.getEdge(\"v3\", \"v1\");", "-        DefaultWeightedEdge e4 = weightedGraph.getEdge(\"v1\", \"v2\");", "-        DefaultWeightedEdge e5 = weightedGraph.getEdge(\"v2\", \"v3\");", "-        DefaultWeightedEdge e6 = weightedGraph.getEdge(\"v3\", \"v1\");", "-        weightMap1.put(e1, 9.0);", "-        weightMap2.put(e4, 9.0);", "-        weightMap2.put(e6, 8.0);", "-        assertEquals(", "-            unweightedGraph.getEdgeWeight(e1),", "-            WeightedGraph.DEFAULT_EDGE_WEIGHT);", "-        WeightedGraph<String, DefaultEdge> g1 =", "-            new AsWeightedGraph<String, DefaultEdge>(", "-                unweightedGraph,", "-                weightMap1);", "-        WeightedGraph<String, DefaultWeightedEdge> g2 =", "-            new AsWeightedGraph<String, DefaultWeightedEdge>(", "-                weightedGraph,", "-                weightMap2);", "-        assertEquals(g1.getEdgeWeight(e1), 9.0);", "-        assertEquals(g1.getEdgeWeight(e2), WeightedGraph.DEFAULT_EDGE_WEIGHT);", "-        assertEquals(g1.getEdgeWeight(e3), WeightedGraph.DEFAULT_EDGE_WEIGHT);", "-        assertEquals(g2.getEdgeWeight(e4), 9.0);", "-        assertEquals(g2.getEdgeWeight(e5), 2.0);", "-        assertEquals(g2.getEdgeWeight(e6), 8.0);", "-        g1.setEdgeWeight(e2, 5.0);", "-        g2.setEdgeWeight(e5, 5.0);", "-        assertEquals(g1.getEdgeWeight(e2), 5.0);", "-        assertEquals(", "-            unweightedGraph.getEdgeWeight(e2),", "-            WeightedGraph.DEFAULT_EDGE_WEIGHT);", "-        assertEquals(g2.getEdgeWeight(e5), 5.0);", "-        assertEquals(weightedGraph.getEdgeWeight(e5), 5.0);", "+", "+    public void testWeightedGraph(Graph<String, DefaultWeightedEdge> graph){", "+        DefaultWeightedEdge e1 = graph.getEdge(\"v1\", \"v2\");", "+        DefaultWeightedEdge e2 = graph.getEdge(\"v2\", \"v3\");", "+        DefaultWeightedEdge e3 = graph.getEdge(\"v3\", \"v1\");", "+", "+        Map<DefaultWeightedEdge, Double> weightMap = new HashMap<DefaultWeightedEdge, Double>();", "+        weightMap.put(e1, 9.0);", "+        weightMap.put(e3, 8.0);", "+", "+        WeightedGraph<String, DefaultWeightedEdge> graphView;", "+        if(graph instanceof DirectedGraph)", "+            graphView= new AsWeightedDirectedGraph<String, DefaultWeightedEdge>((DirectedGraph<String, DefaultWeightedEdge>)graph, weightMap);", "+        else", "+            graphView=new AsWeightedGraph<String, DefaultWeightedEdge>(graph,weightMap);", "+", "+        assertEquals(graphView.getEdgeWeight(e1), 9.0);", "+        assertEquals(graphView.getEdgeWeight(e2), 2.0);", "+        assertEquals(graphView.getEdgeWeight(e3), 8.0);", "+", "+        graphView.setEdgeWeight(e2, 5.0);", "+        assertEquals(graphView.getEdgeWeight(e2), 5.0);", "+        assertEquals(graph.getEdgeWeight(e2), 5.0);", "-            double d = weightedGraph.getEdgeWeight(null);", "+            double d = graphView.getEdgeWeight(null);"]}]}
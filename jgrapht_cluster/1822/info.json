{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "62ea07a8169016cf9f1a6a2081551fbe", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15183def82eaf97e3e184243fbeb0553", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/EdmondsKarpMaximumFlowTest.java", "commitBeforeChange": "45fdf2d06b2f697f414a6dba7b5708e895f3889b", "commitAfterChange": "9288cc6f229c6d1aa15398231bc75a90896d4262", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \t\r \tprivate void runTest(\r \t\t\tint[] tails,\r \t\t\tint[] heads,\r \t\t\tdouble[] capacities,\r \t\t\tint[] sources,\r \t\t\tint[] sinks,\r \t\t\tdouble[] expectedResults)", "signatureAfterChange": "\r \t\r \tprivate void runTest(\r \t\t\tint[] tails,\r \t\t\tint[] heads,\r \t\t\tdouble[] capacities,\r \t\t\tint[] sources,\r \t\t\tint[] sinks,\r \t\t\tdouble[] expectedResults)", "diff": ["+\t\tassertTrue(solver.getMaximumFlowValue() == null);\r", "+\t\tassertTrue(solver.getMaximumFlow() == null);\r", "+\t\t\t\tassertTrue(flow.get(e) >= -EdmondsKarpMaximumFlow.DEFAULT_EPSILON);\r", "+\t\t\t\tassertTrue(flow.get(e) <= network.getEdgeWeight(e) + EdmondsKarpMaximumFlow.DEFAULT_EPSILON);\r", "+\t\t\t}\r", "+\t\t\tfor (Integer v: network.vertexSet())\r", "+\t\t\t{\r", "+\t\t\t\tdouble balance = 0.0;\r", "+\t\t\t\tfor (DefaultWeightedEdge e: network.outgoingEdgesOf(v))\r", "+\t\t\t\t{\r", "+\t\t\t\t\tbalance -= flow.get(e);\r", "+\t\t\t\t}\r", "+\t\t\t\tfor (DefaultWeightedEdge e: network.incomingEdgesOf(v))\r", "+\t\t\t\t{\r", "+\t\t\t\t\tbalance += flow.get(e);\r", "+\t\t\t\t}\r", "+\t\t\t\tif (v.equals(sources[i]))\r", "+\t\t\t\t{\r", "+\t\t\t\t\tassertEquals(-flowValue, balance, EdmondsKarpMaximumFlow.DEFAULT_EPSILON);\r", "+\t\t\t\t}\r", "+\t\t\t\telse if (v.equals(sinks[i]))\r", "+\t\t\t\t{\r", "+\t\t\t\t\tassertEquals(flowValue, balance, EdmondsKarpMaximumFlow.DEFAULT_EPSILON);\r", "+\t\t\t\t}\r", "+\t\t\t\telse\r", "+\t\t\t\t{\r", "+\t\t\t\t\tassertEquals(0.0, balance, EdmondsKarpMaximumFlow.DEFAULT_EPSILON);\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6c759f0c408f9a9dfe607e0b0d128dc", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/graph/SimpleDirectedGraphTest.java", "commitBeforeChange": "8cf8651db5de9405d7887b55b67fde1d9e01e224", "commitAfterChange": "9ac63fa5d348b319d01e5aef6fad2b1fa76f8f81", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     public void testRemoveVertex(  )", "signatureAfterChange": "     public void testRemoveVertex(  )", "diff": ["-        init(  ); //TODO Implement removeVertex().", "+        init(  );", "+        assertEquals( 4, m_g4.vertexSet(  ).size(  ) );", "+        assertTrue( m_g4.removeVertex( m_v1 ) );", "+        assertEquals( 3, m_g4.vertexSet(  ).size(  ) );", "+", "+        assertEquals( 2, m_g4.edgeSet(  ).size(  ) );", "+        assertFalse( m_g4.removeVertex( m_v1 ) );", "+        assertTrue( m_g4.removeVertex( m_v2 ) );", "+        assertEquals( 1, m_g4.edgeSet(  ).size(  ) );", "+        assertTrue( m_g4.removeVertex( m_v3 ) );", "+        assertEquals( 0, m_g4.edgeSet(  ).size(  ) );", "+        assertEquals( 1, m_g4.vertexSet(  ).size(  ) );", "+        assertTrue( m_g4.removeVertex( m_v4 ) );", "+        assertEquals( 0, m_g4.vertexSet(  ).size(  ) );"]}]}
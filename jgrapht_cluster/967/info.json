{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1811041fea75a083bfc71d0ed1a7b823", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b8cd2245e5c5dc41279d2bb12a9d88f", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/demo/PerformanceDemo.java", "commitBeforeChange": "0363545e8290260126e9c13c52724dd67b796b7e", "commitAfterChange": "d7b11005f4a4271e0f5137bcf7a8bb639ef393f0", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main( String[] args )", "signatureAfterChange": "     public static void main( String[] args )", "diff": ["-        System.out.println( ", "-            \"allocating graph with 3M elements (may take a few tens of seconds)...\" );", "+        long time = System.currentTimeMillis(  );", "+        ", "+        reportPerformanceFor( \"starting at\", time );", "-        long   time = System.currentTimeMillis(  );", "-        for( int i = 0; i < 500000; i++ ) {", "+        int numVertices       = 10000;", "+        int numEdgesPerVertex = 200;", "+        int numElements       = numVertices * ( 1 + numEdgesPerVertex );", "+", "+        System.out.println( \"\\n\" + \"allocating graph with \" + numElements", "+            + \" elements (may take a few tens of seconds)...\" );", "+", "+        for( int i = 0; i < numVertices; i++ ) {", "-            g.addEdge( prev, curr );", "-            g.addEdge( prev, curr );", "-            g.addEdge( prev, curr );", "-            g.addEdge( prev, curr );", "-            g.addEdge( prev, curr );", "+", "+            for( int j = 0; j < numEdgesPerVertex; j++ ) {", "+                g.addEdge( prev, curr );", "+            }", "+", "-        reportElapsedFor( \"graph allocation\", time );", "+        reportPerformanceFor( \"graph allocation\", time );", "-        time = System.currentTimeMillis(  );", "+        time     = System.currentTimeMillis(  );", "-        reportElapsedFor( \"breadth traversal\", time );", "+        reportPerformanceFor( \"breadth traversal\", time );", "-        time = System.currentTimeMillis(  );", "+        time     = System.currentTimeMillis(  );", "-        reportElapsedFor( \"depth traversal\", time );", "+        reportPerformanceFor( \"depth traversal\", time );", "-        System.out.println(  );", "-        System.out.println( ", "-            \"Paused: graph is still in memory (to check mem consumption).\" );", "-        System.out.print( \"press any key to finish...\" );", "+        System.out.println( \"\\n\"", "+            + \"Paused: graph is still in memory (to check mem consumption).\" );", "+        System.out.print( \"press any key to free memory and finish...\" );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adf334855782de8d65ed45f3b946c406", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/graph/AsWeightedGraphTest.java", "commitBeforeChange": "5fd52feef7dfccbb0b591fde0bda240336fc10d1", "commitAfterChange": "c47aefcfe74648da036d5e9f46b58264738e055c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      @Override     public void setUp()", "signatureAfterChange": "      @Override     public void setUp()", "diff": ["-        weightedGraph =", "-            new SimpleWeightedGraph<String, DefaultWeightedEdge>(", "-                DefaultWeightedEdge.class);", "-        unweightedGraph =", "-            new SimpleGraph<String, DefaultEdge>(DefaultEdge.class);", "+        // Create a weighted, undirected graph", "+        weightedGraph = new SimpleWeightedGraph<String, DefaultWeightedEdge>(DefaultWeightedEdge.class);", "+        this.createdWeightedGraph(weightedGraph);", "-        // Create a very simple graph", "-        weightedGraph.addVertex(\"v1\");", "-        weightedGraph.addVertex(\"v2\");", "-        weightedGraph.addVertex(\"v3\");", "+        //Create an undirected graph without weights", "+        unweightedGraph = new SimpleGraph<String, DefaultEdge>(DefaultEdge.class);", "+        this.createdUnweightedGraph(unweightedGraph);", "-        unweightedGraph.addVertex(\"v1\");", "-        unweightedGraph.addVertex(\"v2\");", "-        unweightedGraph.addVertex(\"v3\");", "+        //Create a weighted, directed graph", "+        directedWeightedGraph=new SimpleDirectedWeightedGraph<String, DefaultWeightedEdge>(DefaultWeightedEdge.class);", "+        this.createdWeightedGraph(directedWeightedGraph);", "-        weightedGraph.setEdgeWeight(weightedGraph.addEdge(\"v1\", \"v2\"), 1.);", "-        weightedGraph.setEdgeWeight(weightedGraph.addEdge(\"v2\", \"v3\"), 2.);", "-        weightedGraph.setEdgeWeight(weightedGraph.addEdge(\"v3\", \"v1\"), 3.);", "-", "-        unweightedGraph.addEdge(\"v1\", \"v2\");", "-        unweightedGraph.addEdge(\"v2\", \"v3\");", "-        unweightedGraph.addEdge(\"v3\", \"v1\");", "+        //Create a directed graph without weights", "+        directedUnweightedGraph =new SimpleDirectedGraph<String, DefaultEdge>(DefaultEdge.class);", "+        this.createdUnweightedGraph(directedUnweightedGraph);"]}]}
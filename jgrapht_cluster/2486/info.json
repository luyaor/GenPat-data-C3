{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b6343e1bc351024fdc77672ba7cc1e8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "774f1063b2693b986b0afaa6eceb91ef", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/traverse/ClosestFirstIterator.java", "commitBeforeChange": "d79ec6041acc8bda7fb9ae9661101612bc9e3f76", "commitAfterChange": "50de6e6216fe4b60dd232640e1cfa249a213c47c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 9, "signatureBeforeChange": "     protected Object newSeenData( Object vertex, Edge edge )", "signatureAfterChange": "     private QueueEntry createSeenData( Object vertex, Edge edge )", "diff": ["-    protected Object newSeenData( Object vertex, Edge edge ) {", "-        double shortestPathLength;", "-        if( edge == null ) {", "-            shortestPathLength = 0;", "-        }", "-        else {", "-            shortestPathLength = calculatePathLength( vertex, edge );", "-        }", "-", "-        QueueEntry entry = new QueueEntry( shortestPathLength );", "-        entry.m_vertex               = vertex;", "-        entry.m_spanningTreeEdge     = edge;", "-", "-        return entry;", "+    private QueueEntry createSeenData( Object vertex, Edge edge ) {", "+        double shortestPathLength;", "+        if( edge == null ) {", "+            shortestPathLength = 0;", "+        }", "+        else {", "+            shortestPathLength = calculatePathLength( vertex, edge );", "+        QueueEntry entry = new QueueEntry( shortestPathLength );", "+        entry.m_vertex               = vertex;", "+        entry.m_spanningTreeEdge     = edge;", "+        return entry;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea192240476cd35439b416cf5b2926d2", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/DepthFirstIterator.java", "commitBeforeChange": "3cf8c5a89937c13e56521bf120df93d38d5c84ee", "commitAfterChange": "992268c2ef72b87aa653335246e4876213a0071b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "       private void collectChildren( Object nextVertex, List edges )", "signatureAfterChange": "       private void pushChildrenOf( Object vertex )", "diff": ["-", "-    private void collectChildren( Object nextVertex, List edges ) {", "-        for( Iterator iter = edges.iterator(  ); iter.hasNext(  ); ) {", "-            Edge e = (Edge) iter.next(  );", "-            fireEdgeVisited( e );", "-", "-            Object v = e.oppositeVertex( nextVertex );", "-", "-            if( !m_visited.contains( v ) ) {", "-                m_stack.add( v );", "-            }", "+", "+    private void pushChildrenOf( Object vertex ) {", "+        List edges = m_specifics.edgesOf( vertex );", "+", "+        for( Iterator iter = edges.iterator(  ); iter.hasNext(  ); ) {", "+            Edge e = (Edge) iter.next(  );", "+            fireEdgeVisited( e );", "+", "+            Object v = e.oppositeVertex( vertex );", "+", "+            if( !m_seen.contains( v ) ) {", "+                m_seen.add( v );", "+                m_stack.add( v );", "+            }", "+        }"]}]}
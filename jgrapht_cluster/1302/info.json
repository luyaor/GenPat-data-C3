{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "980670ed192b3960cb50246e567ba525", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c591c75818066623173f277358f9a09", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/graph/DefaultGraphMapping.java", "commitBeforeChange": "857bf50cc4b146a4020c6dc6b730687dfcd7de35", "commitAfterChange": "3358959abc414f2281c71486c6c1a90935b1e909", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public Object getCorrespondence(Object vertexOrEdge, boolean forward)", "signatureAfterChange": "      public E getEdgeCorrespondence(E currEdge, boolean forward)", "diff": ["-     */", "-    public Object getCorrespondence(Object vertexOrEdge, boolean forward)", "+    public E getEdgeCorrespondence(E currEdge, boolean forward)", "-        Graph sourceGraph, targetGraph;", "-        int direction;", "+        Graph<V,E> sourceGraph, targetGraph;", "-            direction = FORWARD;", "-            direction = REVERSE;", "-        Object resultObject = null;", "-", "-        if (sourceGraph.containsEdge(vertexOrEdge)) {", "-            Object currEdge = vertexOrEdge;", "-            Object mappedSourceVertex =", "-                getCorrespondenceVertex(", "-                    sourceGraph.getEdgeSource(currEdge), forward);", "-            Object mappedTargetVertex =", "-                getCorrespondenceVertex(", "-                    sourceGraph.getEdgeTarget(currEdge), forward);", "-            if ((mappedSourceVertex == null) || (mappedTargetVertex == null)) {", "-                resultObject = null;", "-            } else {", "-                resultObject =", "-                    targetGraph.getEdge(", "-                        mappedSourceVertex,", "-                        mappedTargetVertex);", "-            }", "+        V mappedSourceVertex =", "+            getVertexCorrespondence(", "+                sourceGraph.getEdgeSource(currEdge), forward);", "+        V mappedTargetVertex =", "+            getVertexCorrespondence(", "+                sourceGraph.getEdgeTarget(currEdge), forward);", "+        if ((mappedSourceVertex == null) || (mappedTargetVertex == null)) {", "+            return null;", "-            resultObject = getCorrespondenceVertex(vertexOrEdge, forward);", "+            return", "+                targetGraph.getEdge(", "+                    mappedSourceVertex,", "+                    mappedTargetVertex);", "-        return resultObject;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7376529c823fd7385e1ba50d972f3a0e", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/GraphOrdering.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private void init(Set vertexSet, Set edgeSet)", "signatureAfterChange": "      private void init(Set<V> vertexSet, Set<E> edgeSet)", "diff": ["-    private void init(Set vertexSet, Set edgeSet)", "+    private void init(Set<V> vertexSet, Set<E> edgeSet)", "-        this.mapVertexToOrder = new HashMap(vertexSet.size());", "+        this.mapVertexToOrder = new HashMap<V, Integer>(vertexSet.size());", "-        for (Iterator iter = vertexSet.iterator(); iter.hasNext();) {", "-            Object vertex = iter.next();", "+        for (V vertex : vertexSet) {", "-        this.labelsEdgesSet = new HashSet(edgeSet.size());", "-        for (Iterator iter = edgeSet.iterator(); iter.hasNext();) {", "-            Edge edge = (Edge) iter.next();", "-", "-            Object sourceVertex = edge.getSource();", "-            Integer sourceOrder = (Integer) mapVertexToOrder.get(sourceVertex);", "+        this.labelsEdgesSet = new HashSet<LabelsEdge>(edgeSet.size());", "+        for (E edge : edgeSet) {", "+            V sourceVertex = edge.getSource();", "+            Integer sourceOrder = mapVertexToOrder.get(sourceVertex);", "-                ((Integer) (mapVertexToOrder.get(edge.getTarget())))", "+                (mapVertexToOrder.get(edge.getTarget()))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb835b0ed988a9447bbd91fa2b41a3de", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/util/equivalence/EquivalenceSetCreator.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static EquivalenceSet [] createEqualityGroupOrderedArray(         Object [] aElementsArray,         EquivalenceComparator aEqComparator,         Object aContext)", "signatureAfterChange": "     public static <EE, CC> EquivalenceSet [] createEqualityGroupOrderedArray(         Collection<EE> elements,         EquivalenceComparator<? super EE,? super CC> aEqComparator,         CC aContext)", "diff": ["-    public static EquivalenceSet [] createEqualityGroupOrderedArray(", "-        Object [] aElementsArray,", "-        EquivalenceComparator aEqComparator,", "-        Object aContext)", "-        ArrayList arrayList = new ArrayList();", "-        HashMap map =", "-            createEqualityGroupMap(aElementsArray, aEqComparator, aContext);", "-        // each of the map value is a list with one or more groups in it.", "+     */", "+    public static <EE, CC> EquivalenceSet [] createEqualityGroupOrderedArray(", "+        Collection<EE> elements,", "+        EquivalenceComparator<? super EE,? super CC> aEqComparator,", "+        CC aContext)", "+    {", "+        ArrayList<EquivalenceSet<? super EE,? super CC>> arrayList =", "+            new ArrayList<EquivalenceSet<? super EE,? super CC>>();", "+", "+        HashMap<Integer,List<EquivalenceSet<? super EE,? super CC>>> map =", "+            createEqualityGroupMap(elements, aEqComparator, aContext);", "+        // each of the map values is a list with one or more groups in it.", "-        for (Iterator collectionIter = map.values().iterator();", "-            collectionIter.hasNext();) {", "-            List list = (List) collectionIter.next();", "-            for (Iterator listIter = list.iterator(); listIter.hasNext();) {", "-                arrayList.add(listIter.next());", "+        for (List<EquivalenceSet<? super EE,? super CC>> list : map.values() ) {", "+            for (EquivalenceSet<? super EE,? super CC> eSet : list ) {", "+                arrayList.add( eSet );", "+        "]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "16e62e10f41fc7ed28e0368782e78526", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10e42b755d8e655175d2c316873547c2", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/flow/MaximumFlowAlgorithmTestBase.java", "commitBeforeChange": "16877ce18b6445d7238b8a78693c87c95971617b", "commitAfterChange": "024fc7b86a9ced21b7444077ac5895f2b6a50bf9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private void runTest(         int [] tails,         int [] heads,         double [] capacities,         int [] sources,         int [] sinks,         double [] expectedResults)", "signatureAfterChange": "      private void runTest(         int [] tails,         int [] heads,         double [] capacities,         int [] sources,         int [] sinks,         double [] expectedResults)", "diff": ["+", "-            MaximumFlowAlgorithm.MaximumFlow<Integer, DefaultWeightedEdge> maxFlow = solver.buildMaximumFlow(sources[i], sinks[i]);", "+            verify(sources[i], sinks[i], expectedResults[i], network, solver.buildMaximumFlow(sources[i], sinks[i]));", "+        }", "+    }", "-            assertEquals(", "-                expectedResults[i],", "-                maxFlow.getValue(),", "-                EdmondsKarpMaximumFlow.DEFAULT_EPSILON);", "-            Double flowValue = maxFlow.getValue();", "-            Map<DefaultWeightedEdge, Double> flow = maxFlow.getFlow();", "-            for (DefaultWeightedEdge e : network.edgeSet()) {", "-                assertTrue(flow.containsKey(e));", "-", "-            for (DefaultWeightedEdge e : flow.keySet()) {", "-                assertTrue(network.containsEdge(e));", "-                assertTrue(", "-                    flow.get(e) >= -EdmondsKarpMaximumFlow.DEFAULT_EPSILON);", "-                assertTrue(", "-                    flow.get(e)", "-                        <= (network.getEdgeWeight(e)", "-                        + EdmondsKarpMaximumFlow.DEFAULT_EPSILON));", "-", "-            for (Integer v : network.vertexSet()) {", "-                double balance = 0.0;", "-                for (DefaultWeightedEdge e : network.outgoingEdgesOf(v)) {", "-                    balance -= flow.get(e);", "-                }", "-                for (DefaultWeightedEdge e : network.incomingEdgesOf(v)) {", "-                    balance += flow.get(e);", "-                }", "-                if (v.equals(sources[i])) {", "-                    assertEquals(", "-                        -flowValue,", "-                        balance,", "-                        MaximumFlowAlgorithmBase.DEFAULT_EPSILON);", "-                } else if (v.equals(sinks[i])) {", "-                    assertEquals(", "-                        flowValue,", "-                        balance,", "-                        MaximumFlowAlgorithmBase.DEFAULT_EPSILON);", "-                } else {", "-                    assertEquals(", "-                        0.0,", "-                        balance,", "-                        MaximumFlowAlgorithmBase.DEFAULT_EPSILON);", "-                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15183def82eaf97e3e184243fbeb0553", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/EdmondsKarpMaximumFlowTest.java", "commitBeforeChange": "45fdf2d06b2f697f414a6dba7b5708e895f3889b", "commitAfterChange": "9288cc6f229c6d1aa15398231bc75a90896d4262", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \t\r \tprivate void runTest(\r \t\t\tint[] tails,\r \t\t\tint[] heads,\r \t\t\tdouble[] capacities,\r \t\t\tint[] sources,\r \t\t\tint[] sinks,\r \t\t\tdouble[] expectedResults)", "signatureAfterChange": "\r \t\r \tprivate void runTest(\r \t\t\tint[] tails,\r \t\t\tint[] heads,\r \t\t\tdouble[] capacities,\r \t\t\tint[] sources,\r \t\t\tint[] sinks,\r \t\t\tdouble[] expectedResults)", "diff": ["+\t\tassertTrue(solver.getMaximumFlowValue() == null);\r", "+\t\tassertTrue(solver.getMaximumFlow() == null);\r", "+\t\t\t\tassertTrue(flow.get(e) >= -EdmondsKarpMaximumFlow.DEFAULT_EPSILON);\r", "+\t\t\t\tassertTrue(flow.get(e) <= network.getEdgeWeight(e) + EdmondsKarpMaximumFlow.DEFAULT_EPSILON);\r", "+\t\t\t}\r", "+\t\t\tfor (Integer v: network.vertexSet())\r", "+\t\t\t{\r", "+\t\t\t\tdouble balance = 0.0;\r", "+\t\t\t\tfor (DefaultWeightedEdge e: network.outgoingEdgesOf(v))\r", "+\t\t\t\t{\r", "+\t\t\t\t\tbalance -= flow.get(e);\r", "+\t\t\t\t}\r", "+\t\t\t\tfor (DefaultWeightedEdge e: network.incomingEdgesOf(v))\r", "+\t\t\t\t{\r", "+\t\t\t\t\tbalance += flow.get(e);\r", "+\t\t\t\t}\r", "+\t\t\t\tif (v.equals(sources[i]))\r", "+\t\t\t\t{\r", "+\t\t\t\t\tassertEquals(-flowValue, balance, EdmondsKarpMaximumFlow.DEFAULT_EPSILON);\r", "+\t\t\t\t}\r", "+\t\t\t\telse if (v.equals(sinks[i]))\r", "+\t\t\t\t{\r", "+\t\t\t\t\tassertEquals(flowValue, balance, EdmondsKarpMaximumFlow.DEFAULT_EPSILON);\r", "+\t\t\t\t}\r", "+\t\t\t\telse\r", "+\t\t\t\t{\r", "+\t\t\t\t\tassertEquals(0.0, balance, EdmondsKarpMaximumFlow.DEFAULT_EPSILON);\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bf0a98ea648c857eba59a694c9c749d", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/FloydWarshallShortestPathsTest.java", "commitBeforeChange": "c10692c8825bd6a23a80be695fc74f32cb5058c3", "commitAfterChange": "c164d5ff2c90e3264f68d1cabaf47b148cefd48c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testCompareWithDijkstra()", "signatureAfterChange": "      public void testCompareWithDijkstra()", "diff": ["-            SimpleDirectedGraph<Integer, DefaultWeightedEdge> directed =", "-                new SimpleDirectedGraph<Integer, DefaultWeightedEdge>(", "-                    DefaultWeightedEdge.class);", "-", "+            //Generate directed graph", "+            SimpleDirectedGraph<Integer, DefaultWeightedEdge> directed =new SimpleDirectedGraph<Integer, DefaultWeightedEdge>(DefaultWeightedEdge.class);", "-            FloydWarshallShortestPaths<Integer, DefaultWeightedEdge> fw =", "-                new FloydWarshallShortestPaths<Integer, DefaultWeightedEdge>(", "-                    directed);", "+            FloydWarshallShortestPaths<Integer, DefaultWeightedEdge> fw =new FloydWarshallShortestPaths<Integer, DefaultWeightedEdge>(directed);", "-                    assertTrue(", "-                        (Math.abs(dijSp - fwSp) < .01)", "-                        || (Double.isInfinite(fwSp)", "-                            && Double.isInfinite(dijSp)));", "+                    assertTrue( (Math.abs(dijSp - fwSp) < .01) || (Double.isInfinite(fwSp) && Double.isInfinite(dijSp)));", "+                    GraphPath<Integer, DefaultWeightedEdge> path=fw.getShortestPath(v1, v2);", "+                    if(path != null)", "+                        this.verifyPath(directed, path, fw.shortestDistance(v1, v2));", "-            SimpleGraph<Integer, DefaultWeightedEdge> undirected =", "-                new SimpleGraph<Integer, DefaultWeightedEdge>(", "-                    DefaultWeightedEdge.class);", "-", "+            //Generate Undirected graph", "+            SimpleGraph<Integer, DefaultWeightedEdge> undirected =new SimpleGraph<Integer, DefaultWeightedEdge>(DefaultWeightedEdge.class);", "-                    assertTrue(", "-                        (Math.abs(dijSp - fwSp) < .01)", "-                        || (Double.isInfinite(fwSp)", "-                            && Double.isInfinite(dijSp)));", "+                    assertTrue((Math.abs(dijSp - fwSp) < .01) || (Double.isInfinite(fwSp) && Double.isInfinite(dijSp)));", "+                    GraphPath<Integer, DefaultWeightedEdge> path=fw.getShortestPath(v1, v2);", "+                    if(path != null)", "+                        this.verifyPath(undirected, path, fw.shortestDistance(v1, v2));", "+        }", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d57845195872330ef745b02ec4789d5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04fed775d6a22f1c8ea8d188ac1cea8a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/AbstractBaseGraph.java", "commitBeforeChange": "586ba218cf358bfb0f3dd47d0f9d956d6b2fd235", "commitAfterChange": "6050c0cafee8f989220adf0f89822b2e772ed175", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": "       private void setSpecifics(  )", "signatureAfterChange": "       private Specifics createSpecifics(  )", "diff": ["-    private void setSpecifics(  ) {", "-        if( this instanceof DirectedGraph ) {", "-            m_specifics = new DirectedSpecifics(  );", "-        }", "-        else if( this instanceof UndirectedGraph ) {", "-            m_specifics = new UndirectedSpecifics(  );", "-        }", "-        else {", "-            throw new IllegalArgumentException( ", "-                \"graph is incompatible with edge factory\" );", "-        }", "-    }", "+    private Specifics createSpecifics(  ) {", "+        if( this instanceof DirectedGraph ) {", "+            return new DirectedSpecifics(  );", "+        else if( this instanceof UndirectedGraph ) {", "+            return new UndirectedSpecifics(  );", "+        }", "+        else {", "+            throw new IllegalArgumentException( ", "+                \"must be instance of either DirectedGraph or UndirectedGraph\" );", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29506fd6201a368ef5ae90f6119ee853", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/dag/DirectedAcyclicGraph.java", "commitBeforeChange": "adaca642347b80042a0673a76d5c684c0cd29f4a", "commitAfterChange": "bfd68dc5cac3c6660f66170c69193fd7d58dd38b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public E addDagEdge(V fromVertex, V toVertex)         throws CycleFoundException", "signatureAfterChange": "     public E addDagEdge(V fromVertex, V toVertex)         throws CycleFoundException", "diff": ["-        Integer lb = topoOrderMap.getTopologicalIndex(toVertex);", "-        Integer ub = topoOrderMap.getTopologicalIndex(fromVertex);", "-", "-        if ((lb == null) || (ub == null)) {", "-            throw new IllegalArgumentException(", "-                \"vertices must be in the graph already!\");", "-        }", "-", "-        if (lb < ub) {", "-            Set<V> df = new HashSet<V>();", "-            Set<V> db = new HashSet<V>();", "-", "-            // Discovery", "-            Region affectedRegion = new Region(lb, ub);", "-            Visited visited = visitedFactory.getInstance(affectedRegion);", "-", "-            // throws CycleFoundException if there is a cycle", "-            dfsF(toVertex, df, visited, affectedRegion);", "-", "-            dfsB(fromVertex, db, visited, affectedRegion);", "-            reorder(df, db, visited);", "-            ++topologyUpdateCount; // if we do a reorder, than the topology has", "-                                   // been updated", "-        }", "+        updateDag(fromVertex, toVertex);"]}]}
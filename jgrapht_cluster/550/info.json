{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f4eee6fddad7a668433b2968e2bf9ca0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d0c0d114efec7c25b1cfeeecb2945fb", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/isomorphism/VF2SubgraphIsomorphismInspectorTest.java", "commitBeforeChange": "b03329312d39e38d58a10d74df9818d4f67f9be5", "commitAfterChange": "cea7ef51f7b4c998dcf2f8f28d63aa057ca85c11", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testGraphTypes()", "signatureAfterChange": "     @Test     public void testGraphTypes()", "diff": ["-                new DefaultDirectedGraph<Integer, DefaultEdge>(DefaultEdge.class);", "+                new DefaultDirectedGraph<Integer, DefaultEdge>", "+                        (DefaultEdge.class);", "+", "+        /* labeled directed graph */", "+        /* DirectedGraph<Object, DefaultEdge> dgol1 =", "+                new DefaultDirectedGraph<Object, DefaultEdge>", "+                        (DefaultEdge.class);", "+", "+        dgol1.addVertex(\"v1\");", "+        dgol1.addVertex(\"v2\");", "+", "+        dgol1.addEdge(\"v1\", \"v2\"); */", "+", "+         /* labeled directed graph */", "+        /* DirectedGraph<Object, DefaultEdge> dgou1 =", "+                new DefaultDirectedGraph<Object, DefaultEdge>", "+                        (DefaultEdge.class);", "+", "+        dgou1.addVertex(1);", "+        dgou1.addVertex(2);", "+", "+        dgou1.addEdge(1, 2); */", "-        try {", "-            VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt1 =", "-                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(mg1,mg1);", "-            gt1.getMappings().next();", "-            Assert.fail(\"graphs with multiple \"", "-                    + \"edges are not supported\");", "-        } catch (UnsupportedOperationException ex) {", "-        }", "+        /* GT-1 */", "+        thrown.expect(UnsupportedOperationException.class);", "+        @SuppressWarnings(\"unused\")", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt1 =", "+                new VF2SubgraphIsomorphismInspector<Integer,DefaultEdge>", "+                        (mg1,mg1);", "+", "+        /* GT-2 */", "+        thrown.expect(UnsupportedOperationException.class);", "+        @SuppressWarnings(\"unused\")", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt2 =", "+                    new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                            (pg1,pg1);", "+", "+        /* GT-3 */", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt3 =", "+           new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                       (sg1,sg1);", "+        assertEquals(\"[1=1 2=2]\", gt3.getMappings().next().toString());", "+", "+        /* GT-4 */", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt4 =", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                        (dg1,dg1);", "+        assertEquals(\"[1=1 2=2]\", gt4.getMappings().next().toString());", "+", "+        /* GT-5 */", "+        thrown.expect(UnsupportedOperationException.class);", "+        @SuppressWarnings(\"unused\")", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt5 =", "+                    new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                            (sg1,mg1);", "+", "+        /* GT-6 */", "+        thrown.expect(UnsupportedOperationException.class);", "+        @SuppressWarnings(\"unused\")", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt6 =", "+                    new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                            (sg1,pg1);", "+", "+        /* GT-7 */", "+        thrown.expect(UnsupportedOperationException.class);", "+        @SuppressWarnings(\"unused\")", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt7 =", "+                    new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                            (dg1,mg1);", "+", "+        /* GT-8 */", "+        thrown.expect(UnsupportedOperationException.class);", "+        @SuppressWarnings(\"unused\")", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt8 =", "+                    new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                            (dg1,pg1);", "+", "+        /* GT-9 */", "+        thrown.expect(UnsupportedOperationException.class);", "+        @SuppressWarnings(\"unused\")", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt9 =", "+              new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                            (pg1,mg1);", "+", "+        /* GT-10 */", "+        thrown.expect(IllegalArgumentException.class);", "+        @SuppressWarnings(\"unused\")", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt10 =", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(sg1, dg1);", "+        /* try {", "+            VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> gt10 =", "+                    new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                            (sg1,dg1);", "+            Assert.fail(\"Expected IllegalArgumentException\");", "+        } catch (IllegalArgumentException ex) {", "+        }*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d771c7ac0911ee975345eda5ce825c37", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/experimental/subgraphisomorphism/VF2SubgraphIsomorphismInspectorTest.java", "commitBeforeChange": "f67e9197d81c666622112a20391d80767fa4beb3", "commitAfterChange": "af1b824446ff484516d50232b001351d46878322", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t \tprivate boolean singleTest( \t\t\tint vertexCount, \t\t\tint edgeCount, \t\t\tint subVertexCount, \t\t\tlong seed)", "signatureAfterChange": " \t \t@Test \tpublic void testEdgeCases()", "diff": ["+\tpublic void testEdgeCases()    {", "+\t    /*", "+\t     * Tests with empty graphs", "+\t     */", "+\t    ", "+\t    DirectedGraph<String, DefaultEdge> g1 =", "+            new DefaultDirectedGraph<String, DefaultEdge>(DefaultEdge.class),", "+                                           g2 =", "+            new DefaultDirectedGraph<String, DefaultEdge>(DefaultEdge.class);", "+\t    ", "+\t    VF2SubgraphIsomorphismInspector<String, DefaultEdge> vf2 =", "+            new VF2SubgraphIsomorphismInspector<String, DefaultEdge>(g1, g2);", "+\t    ", "+\t    assertEquals(\"[]\", vf2.next().toString());", "-\t", "-\tprivate boolean singleTest(", "-\t\t\tint vertexCount,", "-\t\t\tint edgeCount,", "-\t\t\tint subVertexCount,", "-\t\t\tlong seed)", "-\t{", "-\t\tSystem.out.print(\".\");", "-\t\tDirectedGraph<String, DefaultEdge> g1 = randomGraph(vertexCount, edgeCount, seed);", "-\t\tSubgraphWithString sgws = randomSubgraph(g1, subVertexCount, seed);", "-\t\t", "-\t\tVF2SubgraphIsomorphismInspector<String, DefaultEdge> vf2 =", "-\t\t\t\tnew VF2SubgraphIsomorphismInspector<String, DefaultEdge>(g1, sgws.graph);", "-\t\t", "-\t\tSystem.out.print(\".\");", "-\t\tboolean isCorrect = vf2.hasNext();", "-\t\t", "-\t\tfor (;vf2.hasNext();)", "-\t\t{", "-\t\t\tisCorrect = isCorrect && isCorrectMatching(g1, sgws.graph, vf2.next());", "-\t\t\tSystem.out.print(\".\");", "-\t\t}", "-\t\tSystem.out.println(\"\");", "-\t\t", "-\t\treturn isCorrect;", "-\t}", "+\t    ", "+        ", "+        DirectedGraph<Integer, DefaultEdge> g3 =", "+            new DefaultDirectedGraph<Integer, DefaultEdge>(DefaultEdge.class),", "+                                           g4 =", "+            new DefaultDirectedGraph<Integer, DefaultEdge>(DefaultEdge.class);", "+        ", "+        g3.addVertex(1);", "+        g3.addVertex(2);", "+        g3.addVertex(3);", "+        g3.addVertex(4);", "+        ", "+        g3.addEdge(1, 2);", "+        g3.addEdge(2, 3);", "+        g3.addEdge(3, 4);", "+        ", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf3 =", "+            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(g3, g4);", "+        ", "+        assertEquals(\"[1=~~ 2=~~ 3=~~ 4=~~]\", vf3.next().toString());", "+", "+        ", "+        ", "+        DirectedGraph<Integer, DefaultEdge> g5 =", "+            new DefaultDirectedGraph<Integer, DefaultEdge>(DefaultEdge.class),", "+                                           g6 =", "+            new DefaultDirectedGraph<Integer, DefaultEdge>(DefaultEdge.class);", "+        ", "+        g6.addVertex(1);", "+        g6.addVertex(2);", "+        g6.addVertex(3);", "+        g6.addVertex(4);", "+        ", "+        g6.addEdge(1, 2);", "+        g6.addEdge(2, 3);", "+        g6.addEdge(3, 4);", "+        ", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf4 =", "+            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(g5, g6);", "+        ", "+        assertEquals(false, vf4.hasNext());"]}]}
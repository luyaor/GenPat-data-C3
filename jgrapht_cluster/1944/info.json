{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a221e5f9d7fd83cb42a997b9e3690d61", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03481c0460d5fb70deb1e951f992c002", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/RankingPathElementList.java", "commitBeforeChange": "94e0b9cdbd464a6b60ddbb8cd6d473a32e102eaf", "commitAfterChange": "90d794caa7b37ed092890eb859473902af3157bc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected RankingPathElementList(RankingPathElementList<V, E> original)", "signatureAfterChange": "     RankingPathElementList(         Graph<V, E> graph,         int maxSize,         RankingPathElementList<V, E> elementList,         E edge,         V guardVertexToNotDisconnect)", "diff": ["+     */", "+    RankingPathElementList(", "+        Graph<V, E> graph,", "+        int maxSize,", "+        RankingPathElementList<V, E> elementList,", "+        E edge,", "+        V guardVertexToNotDisconnect)", "+    {", "+        this.guardVertexToNotDisconnect = guardVertexToNotDisconnect;", "+", "+            if (isNotValidPath(prevPathElement, edge)) {", "+                continue;", "+            }", "+", "+            if (size() < this.maxSize) {", "-    protected RankingPathElementList(RankingPathElementList<V, E> original)", "-        super(original);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d43ee0c7524414800375e1c7cebd8493", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/TarjanLowestCommonAncestor.java", "commitBeforeChange": "845e2456c1fa20cb74282fa3134fa19f26c97fba", "commitAfterChange": "f194f6c0d4d2ddad695900dd9fe0e34f5eaad70f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate Worker(List<LcaRequestResponse<V>> lrr)", "signatureAfterChange": "  \tprivate Worker(List<LcaRequestResponse<V>> LRR)", "diff": ["-\tprivate Worker(List<LcaRequestResponse<V>> lrr) {", "-\t    this.lrr = lrr;", "+\tprivate Worker(List<LcaRequestResponse<V>> LRR) {", "+        this.LRR    = LRR;", "+        this.LRRMap = new HashMap<V, Set<LcaRequestResponse<V>>>();", "+", "+        for (LcaRequestResponse<V> r : LRR)", "+        {", "+            // Populate A's response-set", "+            Set<LcaRequestResponse<V>> ars = LRRMap.get(r.getA());", "+            if (ars == null)", "+                LRRMap.put(r.getA(), ars = new HashSet<LcaRequestResponse<V>>());", "+", "+            ars.add(r);", "+", "+            // Populate B's response-set", "+            Set<LcaRequestResponse<V>> brs = LRRMap.get(r.getB());", "+            if (brs == null)", "+                LRRMap.put(r.getB(), brs = new HashSet<LcaRequestResponse<V>>());", "+", "+            brs.add(r);", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "588d9218ef66086da2f8eefefd12ba19", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66c1e3805d2d8a0452cb7cb75c1aa1d3", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/KShortestPathCostTest.java", "commitBeforeChange": "94e0b9cdbd464a6b60ddbb8cd6d473a32e102eaf", "commitAfterChange": "90d794caa7b37ed092890eb859473902af3157bc", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void testKShortestPathCosts(Graph graph)", "signatureAfterChange": "      private void verifyShortestPathsInIncreasingOrderOfWeight(Graph graph)", "diff": ["-    public void testKShortestPathCosts(Graph graph)", "+", "+    private void verifyShortestPathsInIncreasingOrderOfWeight(Graph graph)", "+                    if (pathElements == null) {", "+                        // no path exists between the start vertex and the end", "+                        // vertex", "+                        continue;", "+                    }", "-                    double lastCost = pathElement.getWeight();", "+                    double lastWeight = pathElement.getWeight();", "-                        double cost = pathElement.getWeight();", "-                        assertTrue(lastCost <= cost);", "-                        lastCost = cost;", "+                        double weight = pathElement.getWeight();", "+                        assertTrue(lastWeight <= weight);", "+                        lastWeight = weight;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83c3f9d84e386064725fd6cf9decf184", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/FloydWarshallShortestPaths.java", "commitBeforeChange": "22927827f36ad9b2cef7c5f5670c4d2598840023", "commitAfterChange": "0c62b9bea6ac0caeb6bc520d87708bceca0054dc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void lazyCalculate()", "signatureAfterChange": "     private void lazyCalculateMatrix()", "diff": ["-    private void lazyCalculate()", "+    private void lazyCalculateMatrix()", "+        if (d != null) {", "+            // already done", "+            return;", "+        }", "+"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "461dcfeb14721551f4cd29764e7fa14e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "640f940e967d8f56289e25ab5d216865", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/GraphOrdering.java", "commitBeforeChange": "689cbcc6d13f9b38252e7029be35f19942c29f8c", "commitAfterChange": "60b7d019273a541fe1adce1909b0933596c136ca", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public GraphOrdering(Graph<V, E> graph,                          boolean orderByDegree,                          boolean cacheEdges)", "signatureAfterChange": "     public GraphOrdering(Graph<V, E> graph,                          boolean orderByDegree,                          boolean cacheEdges)", "diff": ["-        mapOrderToVertex = new Object[vertexCount];", "+        mapOrderToVertex = new ArrayList<V>(vertexCount);", "-        outgoingEdges    = new int[vertexCount][];", "-        incomingEdges    = new int[vertexCount][];", "-        adjMatrix        = new Boolean[vertexCount][vertexCount];", "+        if (cacheEdges) {", "+            outgoingEdges = new int[vertexCount][];", "+            incomingEdges = new int[vertexCount][];", "+            adjMatrix = new Boolean[vertexCount][vertexCount];", "+        }", "-            mapVertexToOrder.put(vertex, i);", "-            mapOrderToVertex[i] = vertex;", "-", "-            outgoingEdges[i]   = null;", "-            incomingEdges[i++] = null;", "+            mapVertexToOrder.put(vertex, i++);", "+            mapOrderToVertex.add(vertex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b5d6b8aeacb4b8d0d6e53773c623be1", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/GraphOrdering.java", "commitBeforeChange": "aa92fe16c7852c9f9d1bf3a60c5718fcffd0ae0a", "commitAfterChange": "cb1cae1f97dd9ffd761a89cc949eb78f64d8e9dc", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \t \tpublic GraphOrdering(Graph<V,E> graph)", "signatureAfterChange": " \t \t \tpublic GraphOrdering(Graph<V,E> graph, boolean orderByDegree)", "diff": ["-\tpublic GraphOrdering(Graph<V,E> graph)", "+\tpublic GraphOrdering(Graph<V,E> graph, boolean orderByDegree)", "+\t\tSet<V> vertexSet = graph.vertexSet();", "+\t\tvertexCount = vertexSet.size();", "-\t\tmapOrderToVertex = new HashMap<Integer, V>();", "+\t\tmapOrderToVertex = new Object[vertexCount];", "+\t\t", "+\t\toutgoingEdges    = new int[vertexCount][];", "+\t\tincomingEdges    = new int[vertexCount][];", "-\t\tfor(V vertex : graph.vertexSet())\t{", "+\t\tfor(V vertex : vertexSet)\t{", "-\t\t\tmapOrderToVertex.put(i++, vertex);\t", "+\t\t\tmapOrderToVertex[i] = vertex;", "+\t\t\t", "+\t\t\toutgoingEdges[i]   = null;", "+\t\t\tincomingEdges[i++] = null;", "-\t\tvertexCount = i.intValue();", "+\t\t// todo: orderByDegree", "+\t}"]}]}
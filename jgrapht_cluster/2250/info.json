{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "edc66858965d69351ea3be41d771c460", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b60079b60aed2197ebc54cbb39eac84", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/MaximumWeightBipartiteMatching.java", "commitBeforeChange": "985760cbd642d0a5bdb9eca3c84e4565ecb8ceea", "commitAfterChange": "f79565a2a8d7f5186720bf4969b47a8431d60e9c", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t \tprivate void adjustVertexWeights(Map<V, List<E>> reachableVerticies)", "signatureAfterChange": " \t \tprivate void adjustVertexWeights(Map<V, List<E>> reachableVerticies)", "diff": ["-\t\t\t\tif (hasVertexBeenProcessed.get(adjacentVertex(edge, vertex)) && !reachableVerticies.keySet().contains(adjacentVertex(edge, vertex)) && reducedWeight(edge) < beta)", "+\t\t\t\tif (hasVertexBeenProcessed.get(Graphs.getOppositeVertex(graph, edge, vertex)) && !reachableVerticies.keySet().contains(Graphs.getOppositeVertex(graph, edge, vertex)) && reducedWeight(edge) < beta)", "-\t\tif (alpha == 0 || beta == 0)", "-\t\t\tthrow new RuntimeException(\"Something went wrong: invalid alpha / beta values\");", "+\t\tassert (alpha > 0 && beta > 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9456219df010c2b5b2ae13a1dc418aef", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/graph/DefaultGraphMapping.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public Object getCorrespondence(Object vertexOrEdge, boolean forward)", "signatureAfterChange": "     public Object getCorrespondence(Object vertexOrEdge, boolean forward)", "diff": ["-        if (vertexOrEdge instanceof Edge) {", "-            Edge currEdge = (Edge) vertexOrEdge;", "+        if (sourceGraph.containsEdge(vertexOrEdge)) {", "+            Object currEdge = vertexOrEdge;", "-                getCorrespondenceVertex(currEdge.getSource(), forward);", "+                getCorrespondenceVertex(", "+                    sourceGraph.getEdgeSource(currEdge), forward);", "-                getCorrespondenceVertex(currEdge.getTarget(), forward);", "+                getCorrespondenceVertex(", "+                    sourceGraph.getEdgeTarget(currEdge), forward);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8e193bfe574eafc742ebbe4d4b8d486d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9de91e8cf98b458fa990588949eea3be", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/FloydWarshallShortestPaths.java", "commitBeforeChange": "22927827f36ad9b2cef7c5f5670c4d2598840023", "commitAfterChange": "0c62b9bea6ac0caeb6bc520d87708bceca0054dc", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public int lazyCalculatePaths()", "signatureAfterChange": "     private void lazyCalculatePaths()", "diff": ["-    public int lazyCalculatePaths()", "+    private void lazyCalculatePaths()", "-            return countShortestPaths;", "+            return;", "-        // we don't have shortest paths.. lazyCalculate it.", "-        if (d == null) {", "-            lazyCalculate();", "-        }", "+        lazyCalculateMatrix();", "-        countShortestPaths = 0;", "+        nShortestPaths = 0;", "-                GraphPath<V, E> path = shortestPath(v_i, v_j);", "+                GraphPath<V, E> path = getShortestPathImpl(v_i, v_j);", "-                    countShortestPaths++;", "+                    nShortestPaths++;", "-        return countShortestPaths;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f619bd77583c312bea74e5928c97c349", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/FloydWarshallShortestPaths.java", "commitBeforeChange": "7c92324c62793ccd32781d7e3f1ebd3ed525f69b", "commitAfterChange": "82f01404dfe36eb0f878e007bce7de6e76c70836", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public List<GraphPath<V, E>> getShortestPaths(V v)", "signatureAfterChange": "     public List<GraphPath<V, E>> getShortestPaths()", "diff": ["-        List<GraphPath<V, E>> found = new ArrayList<GraphPath<V, E>>();", "-", "-        // TODO:  two-level map for paths so that we don't have to", "-        // iterate over all paths here!", "-        for (VertexPair<V> pair : paths.keySet()) {", "-            if (pair.getFirst().equals(v)) {", "-                found.add(paths.get(pair));", "-            }", "-        }", "-", "-        return found;", "+    public List<GraphPath<V, E>> getShortestPaths()", "+        List<GraphPath<V, E>> allPaths=new ArrayList<GraphPath<V, E>>();", "+        for(List<GraphPath<V, E>> pathSubset : paths.values())", "+            allPaths.addAll(pathSubset);", "+", "+        return allPaths;", "+    }"]}]}
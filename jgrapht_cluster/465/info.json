{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2e2c560e0ed3bdb1bbb6dc3e60e19581", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a9738b64b06aeac916c77975f1214a8", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/VF2SubState.java", "commitBeforeChange": "3f8899078adfe5315dc0aeb978ba35bda0df1615", "commitAfterChange": "323f50ff50f0763160c18603b341aaf64f3f86fa", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public boolean isFeasiblePair()", "signatureAfterChange": "     public boolean isFeasiblePair()", "diff": ["-        int termOut1 = 0,", "-            termOut2 = 0,", "-            termIn1 = 0,", "-            termIn2 = 0,", "-            new1 = 0,", "-            new2 = 0;", "+        int termOutPred1 = 0,", "+            termOutPred2 = 0,", "+            termInPred1 = 0,", "+            termInPred2 = 0,", "+            newPred1 = 0,", "+            newPred2 = 0,", "+            termOutSucc1 = 0,", "+            termOutSucc2 = 0,", "+            termInSucc1 = 0,", "+            termInSucc2 = 0,", "+            newSucc1 = 0,", "+            newSucc2 = 0;", "-                    termIn1++;", "+                    termInSucc1++;", "-                    termOut1++;", "+                    termOutSucc1++;", "-                    new1++;", "+                    newSucc1++;", "-                    termIn1++;", "+                    termInPred1++;", "-                    termOut1++;", "+                    termOutPred1++;", "-                    new1++;", "+                    newPred1++;", "-                    termIn2++;", "+                    termInSucc2++;", "-                    termOut2++;", "+                    termOutSucc2++;", "-                    new2++;", "+                    newSucc2++;", "-                    termIn2++;", "+                    termInPred2++;", "-                    termOut2++;", "+                    termOutPred2++;", "-                    new2++;", "+                    newPred2++;", "-        if (termIn1 >= termIn2 && termOut1 >= termOut2 && new1 >= new2) {", "+        if (termInPred1 >= termInPred2 && termOutPred1 >= termOutPred2 && newPred1 >= newPred2 && termInSucc1 >= termInSucc2 && termOutSucc1 >= termOutSucc2 && newSucc1 >= newSucc2) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90c4bf49027c6c9fbc829c4982ed6a63", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/experimental/heap/BinaryHeap.java", "commitBeforeChange": "ede00ba6ca48a7a81231a62519a30fabb26ae338", "commitAfterChange": "f63e1142cae73862c9c4f7b6ce46225b40f3ef86", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private void percolateDown(int pos)", "signatureAfterChange": "       private void percolateDown( int pos )", "diff": ["-    private void percolateDown(int pos) {", "-        Elem h = (Elem)_elems.get(pos);", "-        while (2 * pos + 1 < size()) {", "-            int i = 1;", "-            Elem c = (Elem)_elems.get(2 * pos + i);", "-            if (2 * pos + 2 < size() &&", "-                isSmaller(((Elem)_elems.get(2 * pos + 2)).x, c.x)) {", "-                i++;", "-                c = (Elem)_elems.get(2 * pos + i);", "-            }", "-            if (isSmaller(h.x, c.x)) break;", "-            _elems.set(pos, c);", "-            c.pos = pos;", "-            pos = 2 * pos + i;", "-        }", "-        _elems.set(pos, h);", "-        h.pos = pos;", "-    }", "+", "+    private void percolateDown( int pos ) {", "+        Elem h = (Elem) _elems.get( pos );", "+", "+        while( 2 * pos + 1 < size(  ) ) {", "+            int  i = 1;", "+            Elem c = (Elem) _elems.get( 2 * pos + i );", "+", "+            if( 2 * pos + 2 < size(  )", "+                    && isSmaller( ( (Elem) _elems.get( 2 * pos + 2 ) ).x, c.x ) ) {", "+                i++;", "+                c = (Elem) _elems.get( 2 * pos + i );", "+            }", "+", "+            if( isSmaller( h.x, c.x ) ) {", "+                break;", "+            }", "+", "+            _elems.set( pos, c );", "+            c.pos     = pos;", "+            pos       = 2 * pos + i;", "+        }", "+", "+        _elems.set( pos, h );", "+        h.pos = pos;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9136b46cca95a08197352c3397b51134", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/experimental/dag/DirectedAcyclicGraphTest.java", "commitBeforeChange": "49a0a0bda948a6b45a26ee9d253b12740a7bab2d", "commitAfterChange": "284fc7ad45b4c7b1575a67370ea974687b46d21f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void _testVisitedImplementationPerformance()", "signatureAfterChange": "     public void _testVisitedImplementationPerformance()", "diff": ["+                long bitSetDagTime = 0;", "+                            null);", "+                    DirectedAcyclicGraph<Long, DefaultEdge> bitSetDag =", "+                        new DirectedAcyclicGraph<Long, DefaultEdge>(", "+                            DefaultEdge.class,", "+                            new DirectedAcyclicGraph.VisitedBitSetImpl(),", "+                    ", "+                    long bitSetStart = System.nanoTime();", "+", "+                    for (Long vertex : sourceGraph.vertexSet()) {", "+                        bitSetDag.addVertex(vertex);", "+                    }", "+", "+                    for (DefaultEdge edge : sourceGraph.edgeSet()) {", "+                        Long edgeSource = sourceGraph.getEdgeSource(edge);", "+                        Long edgeTarget = sourceGraph.getEdgeTarget(edge);", "+", "+                        try {", "+                            bitSetDag.addDagEdge(edgeSource, edgeTarget);", "+                        } catch (DirectedAcyclicGraph.CycleFoundException e) {", "+                            // okay", "+                        }", "+                    }", "+", "+                    bitSetDagTime += System.nanoTime() - bitSetStart;", "+                System.out.println(", "+                    \"total BitSet time     =  \" + bitSetDagTime + \" ns\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3bd89b912163e1fa3b039759be05e59", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/VF2SubState.java", "commitBeforeChange": "b0ffaa521363d5faf1bf5b397f78265b9ab95ae6", "commitAfterChange": "3f8899078adfe5315dc0aeb978ba35bda0df1615", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public boolean isFeasiblePair()", "signatureAfterChange": "     public boolean isFeasiblePair()", "diff": ["+        String pairstr  = \"(\" + g1.getVertex(addVertex1) + \", \" +", "+                        g2.getVertex(addVertex2) + \")\",", "+               abortmsg = indent + \"isFeasiblePair> \" + pairstr + \" passt nicht ins aktuelle Matching\";", "-                                                    addVertex2, other2))", "+                                                    addVertex2, other2))    {", "+                    System.out.println(abortmsg);", "+                }", "-                                                    other2, addVertex2))", "+                                                    other2, addVertex2))    {", "+                    System.out.println(abortmsg);", "+                }", "-                if (!g1.hasEdge(addVertex1, other1))", "+                if (!g1.hasEdge(addVertex1, other1))    {", "+                    System.out.println(abortmsg);", "+                }", "-                if (!g1.hasEdge(other1, addVertex1))", "+                if (!g1.hasEdge(other1, addVertex1))    {", "+                    System.out.println(abortmsg);", "+                }", "-        return termIn1 >= termIn2 && termOut1 >= termOut2 && new1 >= new2;", "+        if (termIn1 >= termIn2 && termOut1 >= termOut2 && new1 >= new2) {", "+            System.out.println(indent + \"isFeasiblePair> \" + pairstr + \" passt\");", "+            return true;", "+        } else {", "+            System.out.println(abortmsg);", "+            return false;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b600cbf8992f1c6ee74dff25bc920589", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/experimental/heap/FibonacciHeap.java", "commitBeforeChange": "ede00ba6ca48a7a81231a62519a30fabb26ae338", "commitAfterChange": "f63e1142cae73862c9c4f7b6ce46225b40f3ef86", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private void consolidate()", "signatureAfterChange": "       private void consolidate(  )", "diff": ["-", "-    private void consolidate() {", "-", "-        int l = (int)Math.round(Math.log(_size) / Math.log(1.5) + 0.5);", "-        Elem[] a = new Elem[l];", "-        Elem x, y, h;", "-        int i;", "+    private void consolidate(  ) {", "+        int    l =", "+            (int) Math.round( Math.log( _size ) / Math.log( 1.5 ) + 0.5 );", "+        Elem[] a = new Elem[ l ];", "+        Elem   x;", "+        Elem   y;", "+        Elem   h;", "+        int    i;", "-            removeFromRoot(x);", "-            while (a[x.rank] != null) {", "-                y = a[x.rank];", "-                a[x.rank] = null;", "-                if (isSmaller(y.x, x.x)) {", "-                    h = x;", "-                    x = y;", "-                    y = h;", "+            removeFromRoot( x );", "+", "+            while( a[ x.rank ] != null ) {", "+                y               = a[ x.rank ];", "+                a[ x.rank ]     = null;", "+", "+                if( isSmaller( y.x, x.x ) ) {", "+                    h     = x;", "+                    x     = y;", "+                    y     = h;", "-                x.addChild(y);", "+", "+                x.addChild( y );", "-            a[x.rank] = x;", "-        } while (_min != null);", "-        for (i = 0; i < l; i++) {", "-            if (a[i] != null) {", "-                addToRoot(a[i]);", "+", "+            a[ x.rank ] = x;", "+        }", "+         while( _min != null );", "+", "+        for( i = 0; i < l; i++ ) {", "+            if( a[ i ] != null ) {", "+                addToRoot( a[ i ] );"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8908b5c7d3397524a072090872a4ed38", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44f201ae9e38d48c5e0b98f7f6636e9c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/traverse/ClosestFirstIterator.java", "commitBeforeChange": "857bf50cc4b146a4020c6dc6b730687dfcd7de35", "commitAfterChange": "3358959abc414f2281c71486c6c1a90935b1e909", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     protected void encounterVertexAgain(V vertex, E edge)", "signatureAfterChange": "     protected void encounterVertexAgain(V vertex, E edge)", "diff": ["-        QueueEntry<V,E> entry = getSeenData(vertex);", "+        FibonacciHeapNode<QueueEntry<V,E>> node = getSeenData(vertex);", "-        if (entry.m_frozen) {", "+        if (node.getData().m_frozen) {", "-        if (candidatePathLength < entry.getShortestPathLength()) {", "-            entry.m_spanningTreeEdge = edge;", "-            m_heap.decreaseKey(entry, candidatePathLength);", "+        if (candidatePathLength < node.getKey()) {", "+            node.getData().m_spanningTreeEdge = edge;", "+            m_heap.decreaseKey(node, candidatePathLength);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96d8ee2e12e8938bda9457ad934e6101", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/traverse/ClosestFirstIterator.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     protected void encounterVertexAgain(V vertex, E edge)", "signatureAfterChange": "     protected void encounterVertexAgain(V vertex, E edge)", "diff": ["-        if (node.getData().m_frozen) {", "+        if (node.getData().frozen) {", "-            node.getData().m_spanningTreeEdge = edge;", "-            m_heap.decreaseKey(node, candidatePathLength);", "+            node.getData().spanningTreeEdge = edge;", "+            heap.decreaseKey(node, candidatePathLength);"]}]}
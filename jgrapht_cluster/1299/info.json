{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3974fe09224aa92bce9656edcc2d17c3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44f201ae9e38d48c5e0b98f7f6636e9c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/traverse/ClosestFirstIterator.java", "commitBeforeChange": "857bf50cc4b146a4020c6dc6b730687dfcd7de35", "commitAfterChange": "3358959abc414f2281c71486c6c1a90935b1e909", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     protected void encounterVertexAgain(V vertex, E edge)", "signatureAfterChange": "     protected void encounterVertexAgain(V vertex, E edge)", "diff": ["-        QueueEntry<V,E> entry = getSeenData(vertex);", "+        FibonacciHeapNode<QueueEntry<V,E>> node = getSeenData(vertex);", "-        if (entry.m_frozen) {", "+        if (node.getData().m_frozen) {", "-        if (candidatePathLength < entry.getShortestPathLength()) {", "-            entry.m_spanningTreeEdge = edge;", "-            m_heap.decreaseKey(entry, candidatePathLength);", "+        if (candidatePathLength < node.getKey()) {", "+            node.getData().m_spanningTreeEdge = edge;", "+            m_heap.decreaseKey(node, candidatePathLength);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0309ba7db403c2cc5b7a57c304f4587", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/traverse/ClosestFirstIterator.java", "commitBeforeChange": "857bf50cc4b146a4020c6dc6b730687dfcd7de35", "commitAfterChange": "3358959abc414f2281c71486c6c1a90935b1e909", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     protected V provideNextVertex()", "signatureAfterChange": "     protected V provideNextVertex()", "diff": ["-        QueueEntry<V, E> entry = (QueueEntry<V,E>) m_heap.removeMin();", "-        entry.m_frozen = true;", "+        FibonacciHeapNode<QueueEntry<V, E>> node = m_heap.removeMin();", "+        node.getData().m_frozen = true;", "-        return entry.m_vertex;", "+        return node.getData().m_vertex;"]}]}
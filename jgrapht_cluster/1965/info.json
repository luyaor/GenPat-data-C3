{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3579966449259b842664b57c1c8528cb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2175ca88f7dc0b7ab3f2da480ea788cd", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/VF2SubgraphIsomorphismState.java", "commitBeforeChange": "6245588ef354746c5c3ae9a477b956068a878121", "commitAfterChange": "7c92324c62793ccd32781d7e3f1ebd3ed525f69b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     @Override     public boolean isFeasiblePair()", "signatureAfterChange": "     @Override public boolean isFeasiblePair()", "diff": ["-    @Override", "-    public boolean isFeasiblePair() {", "-        String pairstr  = \"(\" + g1.getVertex(addVertex1) + \", \" +", "-                                g2.getVertex(addVertex2) + \")\",", "-               abortmsg = pairstr + \" does not fit in the current matching\";", "+    @Override public boolean isFeasiblePair()", "+    {", "+        String pairstr =", "+            \"(\" + g1.getVertex(addVertex1) + \", \"", "+            + g2.getVertex(addVertex2) + \")\",", "+            abortmsg = pairstr + \" does not fit in the current matching\";", "-        if (!areCompatibleVertexes(addVertex1, addVertex2))", "+        if (!areCompatibleVertexes(addVertex1, addVertex2)) {", "+        }", "-        int termOutPred1 = 0,", "-            termOutPred2 = 0,", "-            termInPred1  = 0,", "-            termInPred2  = 0,", "-            newPred1     = 0,", "-            newPred2     = 0,", "-            termOutSucc1 = 0,", "-            termOutSucc2 = 0,", "-            termInSucc1  = 0,", "-            termInSucc2  = 0,", "-            newSucc1     = 0,", "-            newSucc2     = 0;", "+        int termOutPred1 = 0, termOutPred2 = 0, termInPred1 = 0,", "+            termInPred2 = 0, newPred1 = 0, newPred2 = 0, termOutSucc1 = 0,", "+            termOutSucc2 = 0, termInSucc1 = 0, termInSucc2 = 0, newSucc1 = 0,", "+            newSucc2 = 0;", "-                if (!g2.hasEdge(addVertex2, other2) ||", "-                                !areCompatibleEdges(addVertex1, other1,", "-                                                    addVertex2, other2))    {", "-                    showLog(\"isFeasiblePair\", abortmsg + \": edge from \" +", "-                                    g2.getVertex(addVertex2) + \" to \" +", "-                                    g2.getVertex(other2) +", "-                                    \" is missing in the 2nd graph\");", "+                if (!g2.hasEdge(addVertex2, other2)", "+                    || !areCompatibleEdges(", "+                        addVertex1,", "+                        other1,", "+                        addVertex2,", "+                        other2))", "+                {", "+                    showLog(", "+                        \"isFeasiblePair\",", "+                        abortmsg + \": edge from \"", "+                        + g2.getVertex(addVertex2) + \" to \"", "+                        + g2.getVertex(other2)", "+                        + \" is missing in the 2nd graph\");", "-                if (in1[other1] > 0)", "+                if (in1[other1] > 0) {", "-                if (out1[other1] > 0)", "+                }", "+                if (out1[other1] > 0) {", "-                if (in1[other1] == 0 && out1[other1] == 0)", "+                }", "+                if ((in1[other1] == 0) && (out1[other1] == 0)) {", "+                }", "-                if (!g1.hasEdge(addVertex1, other1))    {", "-                    showLog(\"isFeasbilePair\", abortmsg + \": edge from \" +", "-                                    g1.getVertex(addVertex1) + \" to \" +", "-                                    g1.getVertex(other1) +", "-                                    \" is missing in the 1st graph\");", "+                if (!g1.hasEdge(addVertex1, other1)) {", "+                    showLog(", "+                        \"isFeasbilePair\",", "+                        abortmsg + \": edge from \"", "+                        + g1.getVertex(addVertex1) + \" to \"", "+                        + g1.getVertex(other1)", "+                        + \" is missing in the 1st graph\");", "-                if (in2[other2] > 0)", "+                if (in2[other2] > 0) {", "-                if (out2[other2] > 0)", "+                }", "+                if (out2[other2] > 0) {", "-                if (in2[other2] == 0 && out2[other2] == 0)", "+                }", "+                if ((in2[other2] == 0) && (out2[other2] == 0)) {", "+                }", "-        if (termInSucc1 < termInSucc2 ||", "-            termOutSucc1 < termOutSucc2 ||", "-            newSucc1 < newSucc2)", "+        if ((termInSucc1 < termInSucc2)", "+            || (termOutSucc1 < termOutSucc2)", "+            || (newSucc1 < newSucc2))", "-            if (DEBUG)  {", "-                String cause = \"\",", "-                          v1 = g1.getVertex(addVertex1).toString(),", "-                          v2 = g2.getVertex(addVertex2).toString();", "+            if (DEBUG) {", "+                String cause = \"\", v1 = g1.getVertex(addVertex1).toString(),", "+                    v2 = g2.getVertex(addVertex2).toString();", "-                if (termInSucc2 > termInSucc1)", "-                    cause = \"|Tin2 \u2229 Succ(Graph2, \" + v2 +", "-                        \")| > |Tin1 \u2229 Succ(Graph1, \" + v1 + \")|\";", "-                else if (termOutSucc2 > termOutSucc1)", "-                    cause = \"|Tout2 \u2229 Succ(Graph2, \" + v2 +", "-                        \")| > |Tout1 \u2229 Succ(Graph1, \" + v1 + \")|\";", "-                else if (newSucc2 > newSucc1)", "-                    cause = \"|N\u203e \u2229 Succ(Graph2, \" + v2 +", "-                        \")| > |N\u203e \u2229 Succ(Graph1, \" + v1 + \")|\";", "+                if (termInSucc2 > termInSucc1) {", "+                    cause =", "+                        \"|Tin2 \u2229 Succ(Graph2, \" + v2", "+                        + \")| > |Tin1 \u2229 Succ(Graph1, \" + v1 + \")|\";", "+                } else if (termOutSucc2 > termOutSucc1) {", "+                    cause =", "+                        \"|Tout2 \u2229 Succ(Graph2, \" + v2", "+                        + \")| > |Tout1 \u2229 Succ(Graph1, \" + v1 + \")|\";", "+                } else if (newSucc2 > newSucc1) {", "+                    cause =", "+                        \"|N\u203e \u2229 Succ(Graph2, \" + v2", "+                        + \")| > |N\u203e \u2229 Succ(Graph1, \" + v1 + \")|\";", "+                }", "-                if (!g2.hasEdge(other2, addVertex2) ||", "-                                !areCompatibleEdges(other1, addVertex1,", "-                                                    other2, addVertex2))    {", "-                    showLog(\"isFeasbilePair\", abortmsg + \": edge from \" +", "-                                    g2.getVertex(other2) + \" to \" +", "-                                    g2.getVertex(addVertex2) +", "-                                    \" is missing in the 2nd graph\");", "+                if (!g2.hasEdge(other2, addVertex2)", "+                    || !areCompatibleEdges(", "+                        other1,", "+                        addVertex1,", "+                        other2,", "+                        addVertex2))", "+                {", "+                    showLog(", "+                        \"isFeasbilePair\",", "+                        abortmsg + \": edge from \"", "+                        + g2.getVertex(other2) + \" to \"", "+                        + g2.getVertex(addVertex2)", "+                        + \" is missing in the 2nd graph\");", "-                if (in1[other1] > 0)", "+                if (in1[other1] > 0) {", "-                if (out1[other1] > 0)", "+                }", "+                if (out1[other1] > 0) {", "-                if (in1[other1] == 0 && out1[other1] == 0)", "+                }", "+                if ((in1[other1] == 0) && (out1[other1] == 0)) {", "+                }", "-                if (!g1.hasEdge(other1, addVertex1))    {", "-                    showLog(\"isFeasiblePair\", abortmsg + \": edge from \" +", "-                                    g1.getVertex(other1) + \" to \" +", "-                                    g1.getVertex(addVertex1) +", "-                                    \" is missing in the 1st graph\");", "+                if (!g1.hasEdge(other1, addVertex1)) {", "+                    showLog(", "+                        \"isFeasiblePair\",", "+                        abortmsg + \": edge from \"", "+                        + g1.getVertex(other1) + \" to \"", "+                        + g1.getVertex(addVertex1)", "+                        + \" is missing in the 1st graph\");", "-                if (in2[other2] > 0)", "+                if (in2[other2] > 0) {", "-                if (out2[other2] > 0)", "+                }", "+                if (out2[other2] > 0) {", "-                if (in2[other2] == 0 && out2[other2] == 0)", "+                }", "+                if ((in2[other2] == 0) && (out2[other2] == 0)) {", "+                }", "-        if (termInPred1 >= termInPred2 &&", "-            termOutPred1 >= termOutPred2 &&", "-            newPred1 >= newPred2)", "+        if ((termInPred1 >= termInPred2)", "+            && (termOutPred1 >= termOutPred2)", "+            && (newPred1 >= newPred2))", "-        }", "-        else", "-        {", "-            if (DEBUG)  {", "-                String cause = \"\",", "-                          v1 = g1.getVertex(addVertex1).toString(),", "-                          v2 = g2.getVertex(addVertex2).toString();", "+        } else {", "+            if (DEBUG) {", "+                String cause = \"\", v1 = g1.getVertex(addVertex1).toString(),", "+                    v2 = g2.getVertex(addVertex2).toString();", "-                if (termInPred2 > termInPred1)", "-                    cause = \"|Tin2 \u2229 Pred(Graph2, \" + v2 +", "-                        \")| > |Tin1 \u2229 Pred(Graph1, \" + v1 + \")|\";", "-                else if (termOutPred2 > termOutPred1)", "-                    cause = \"|Tout2 \u2229 Pred(Graph2, \" + v2 +", "-                        \")| > |Tout1 \u2229 Pred(Graph1, \" + v1 + \")|\";", "-                else if (newPred2 > newPred1)", "-                    cause = \"|N\u203e \u2229 Pred(Graph2, \" + v2 +", "-                        \")| > |N\u203e \u2229 Pred(Graph1, \" + v1 + \")|\";", "+                if (termInPred2 > termInPred1) {", "+                    cause =", "+                        \"|Tin2 \u2229 Pred(Graph2, \" + v2", "+                        + \")| > |Tin1 \u2229 Pred(Graph1, \" + v1 + \")|\";", "+                } else if (termOutPred2 > termOutPred1) {", "+                    cause =", "+                        \"|Tout2 \u2229 Pred(Graph2, \" + v2", "+                        + \")| > |Tout1 \u2229 Pred(Graph1, \" + v1 + \")|\";", "+                } else if (newPred2 > newPred1) {", "+                    cause =", "+                        \"|N\u203e \u2229 Pred(Graph2, \" + v2", "+                        + \")| > |N\u203e \u2229 Pred(Graph1, \" + v1 + \")|\";", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58f7412165711f1df1999588863c5ae5", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/VF2GraphIsomorphismState.java", "commitBeforeChange": "6245588ef354746c5c3ae9a477b956068a878121", "commitAfterChange": "7c92324c62793ccd32781d7e3f1ebd3ed525f69b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     @Override     public boolean isFeasiblePair()", "signatureAfterChange": "     @Override public boolean isFeasiblePair()", "diff": ["-    @Override", "-    public boolean isFeasiblePair() {", "-        String pairstr  = \"(\" + g1.getVertex(addVertex1) + \", \" +", "-                        g2.getVertex(addVertex2) + \")\",", "-               abortmsg = pairstr + \" does not fit in the current matching\";", "-        // check for semantic equality of both vertexes", "-        if (!areCompatibleVertexes(addVertex1, addVertex2))", "-            return false;", "+    @Override public boolean isFeasiblePair()", "+    {", "+        String pairstr =", "+            \"(\" + g1.getVertex(addVertex1) + \", \"", "+            + g2.getVertex(addVertex2) + \")\",", "+            abortmsg = pairstr + \" does not fit in the current matching\";", "-        int termOutPred1 = 0,", "-            termOutPred2 = 0,", "-            termInPred1  = 0,", "-            termInPred2  = 0,", "-            newPred1     = 0,", "-            newPred2     = 0,", "-            termOutSucc1 = 0,", "-            termOutSucc2 = 0,", "-            termInSucc1  = 0,", "-            termInSucc2  = 0,", "-            newSucc1     = 0,", "-            newSucc2     = 0;", "+        // check for semantic equality of both vertexes", "+        if (!areCompatibleVertexes(addVertex1, addVertex2)) {", "+            return false;", "+        }", "+", "+        int termOutPred1 = 0, termOutPred2 = 0, termInPred1 = 0,", "+            termInPred2 = 0, newPred1 = 0, newPred2 = 0, termOutSucc1 = 0,", "+            termOutSucc2 = 0, termInSucc1 = 0, termInSucc2 = 0, newSucc1 = 0,", "+            newSucc2 = 0;", "-                if (!g2.hasEdge(addVertex2, other2) ||", "-                                !areCompatibleEdges(addVertex1, other1,", "-                                                    addVertex2, other2))    {", "-                    showLog(\"isFeasiblePair\", abortmsg + \": edge from \" +", "-                                    g2.getVertex(addVertex2) + \" to \" +", "-                                    g2.getVertex(other2) +", "-                                    \" is missing in the 2nd graph\");", "+                if (!g2.hasEdge(addVertex2, other2)", "+                    || !areCompatibleEdges(", "+                        addVertex1,", "+                        other1,", "+                        addVertex2,", "+                        other2))", "+                {", "+                    showLog(", "+                        \"isFeasiblePair\",", "+                        abortmsg + \": edge from \"", "+                        + g2.getVertex(addVertex2) + \" to \"", "+                        + g2.getVertex(other2)", "+                        + \" is missing in the 2nd graph\");", "-                if (in1[other1] > 0)", "+                if (in1[other1] > 0) {", "-                if (out1[other1] > 0)", "+                }", "+                if (out1[other1] > 0) {", "-                if (in1[other1] == 0 && out1[other1] == 0)", "+                }", "+                if ((in1[other1] == 0) && (out1[other1] == 0)) {", "+                }", "-                if (!g1.hasEdge(addVertex1, other1))    {", "-                    showLog(\"isFeasbilePair\", abortmsg + \": edge from \" +", "-                                    g1.getVertex(addVertex1) + \" to \" +", "-                                    g1.getVertex(other1) +", "-                                    \" is missing in the 1st graph\");", "+                if (!g1.hasEdge(addVertex1, other1)) {", "+                    showLog(", "+                        \"isFeasbilePair\",", "+                        abortmsg + \": edge from \"", "+                        + g1.getVertex(addVertex1) + \" to \"", "+                        + g1.getVertex(other1)", "+                        + \" is missing in the 1st graph\");", "-                if (in2[other2] > 0)", "+                if (in2[other2] > 0) {", "-                if (out2[other2] > 0)", "+                }", "+                if (out2[other2] > 0) {", "-                if (in2[other2] == 0 && out2[other2] == 0)", "+                }", "+                if ((in2[other2] == 0) && (out2[other2] == 0)) {", "+                }", "-        if (termInSucc1 != termInSucc2 ||", "-            termOutSucc1 != termOutSucc2 ||", "-            newSucc1 != newSucc2)", "+        if ((termInSucc1 != termInSucc2)", "+            || (termOutSucc1 != termOutSucc2)", "+            || (newSucc1 != newSucc2))", "-            if (DEBUG)  {", "-                String cause = \"\",", "-                          v1 = g1.getVertex(addVertex1).toString(),", "-                          v2 = g2.getVertex(addVertex2).toString();", "+            if (DEBUG) {", "+                String cause = \"\", v1 = g1.getVertex(addVertex1).toString(),", "+                    v2 = g2.getVertex(addVertex2).toString();", "-                if (termInSucc2 > termInSucc1)", "-                    cause = \"|Tin2 \u2229 Succ(Graph2, \" + v2 +", "-                        \")| != |Tin1 \u2229 Succ(Graph1, \" + v1 + \")|\";", "-                else if (termOutSucc2 > termOutSucc1)", "-                    cause = \"|Tout2 \u2229 Succ(Graph2, \" + v2 +", "-                        \")| != |Tout1 \u2229 Succ(Graph1, \" + v1 + \")|\";", "-                else if (newSucc2 > newSucc1)", "-                    cause = \"|N\u203e \u2229 Succ(Graph2, \" + v2 +", "-                        \")| != |N\u203e \u2229 Succ(Graph1, \" + v1 + \")|\";", "+                if (termInSucc2 > termInSucc1) {", "+                    cause =", "+                        \"|Tin2 \u2229 Succ(Graph2, \" + v2", "+                        + \")| != |Tin1 \u2229 Succ(Graph1, \" + v1 + \")|\";", "+                } else if (termOutSucc2 > termOutSucc1) {", "+                    cause =", "+                        \"|Tout2 \u2229 Succ(Graph2, \" + v2", "+                        + \")| != |Tout1 \u2229 Succ(Graph1, \" + v1 + \")|\";", "+                } else if (newSucc2 > newSucc1) {", "+                    cause =", "+                        \"|N\u203e \u2229 Succ(Graph2, \" + v2", "+                        + \")| != |N\u203e \u2229 Succ(Graph1, \" + v1 + \")|\";", "+                }", "-                if (!g2.hasEdge(other2, addVertex2) ||", "-                                !areCompatibleEdges(other1, addVertex1,", "-                                                    other2, addVertex2))    {", "-                    showLog(\"isFeasbilePair\", abortmsg + \": edge from \" +", "-                                    g2.getVertex(other2) + \" to \" +", "-                                    g2.getVertex(addVertex2) +", "-                                    \" is missing in the 2nd graph\");", "+                if (!g2.hasEdge(other2, addVertex2)", "+                    || !areCompatibleEdges(", "+                        other1,", "+                        addVertex1,", "+                        other2,", "+                        addVertex2))", "+                {", "+                    showLog(", "+                        \"isFeasbilePair\",", "+                        abortmsg + \": edge from \"", "+                        + g2.getVertex(other2) + \" to \"", "+                        + g2.getVertex(addVertex2)", "+                        + \" is missing in the 2nd graph\");", "-                if (in1[other1] > 0)", "+                if (in1[other1] > 0) {", "-                if (out1[other1] > 0)", "+                }", "+                if (out1[other1] > 0) {", "-                if (in1[other1] == 0 && out1[other1] == 0)", "+                }", "+                if ((in1[other1] == 0) && (out1[other1] == 0)) {", "+                }", "-                if (!g1.hasEdge(other1, addVertex1))    {", "-                    showLog(\"isFeasiblePair\", abortmsg + \": edge from \" +", "-                                    g1.getVertex(other1) + \" to \" +", "-                                    g1.getVertex(addVertex1) +", "-                                    \" is missing in the 1st graph\");", "+                if (!g1.hasEdge(other1, addVertex1)) {", "+                    showLog(", "+                        \"isFeasiblePair\",", "+                        abortmsg + \": edge from \"", "+                        + g1.getVertex(other1) + \" to \"", "+                        + g1.getVertex(addVertex1)", "+                        + \" is missing in the 1st graph\");", "-                if (in2[other2] > 0)", "+                if (in2[other2] > 0) {", "-                if (out2[other2] > 0)", "+                }", "+                if (out2[other2] > 0) {", "-                if (in2[other2] == 0 && out2[other2] == 0)", "+                }", "+                if ((in2[other2] == 0) && (out2[other2] == 0)) {", "+                }", "-        if (termInPred1 == termInPred2 &&", "-            termOutPred1 == termOutPred2 &&", "-            newPred1 == newPred2)", "+        if ((termInPred1 == termInPred2)", "+            && (termOutPred1 == termOutPred2)", "+            && (newPred1 == newPred2))", "-        }", "-        else", "-        {", "-            if (DEBUG)  {", "-                String cause = \"\",", "-                          v1 = g1.getVertex(addVertex1).toString(),", "-                          v2 = g2.getVertex(addVertex2).toString();", "+        } else {", "+            if (DEBUG) {", "+                String cause = \"\", v1 = g1.getVertex(addVertex1).toString(),", "+                    v2 = g2.getVertex(addVertex2).toString();", "-                if (termInPred2 > termInPred1)", "-                    cause = \"|Tin2 \u2229 Pred(Graph2, \" + v2 +", "-                        \")| != |Tin1 \u2229 Pred(Graph1, \" + v1 + \")|\";", "-                else if (termOutPred2 > termOutPred1)", "-                    cause = \"|Tout2 \u2229 Pred(Graph2, \" + v2 +", "-                        \")| != |Tout1 \u2229 Pred(Graph1, \" + v1 + \")|\";", "-                else if (newPred2 > newPred1)", "-                    cause = \"|N\u203e \u2229 Pred(Graph2, \" + v2 +", "-                        \")| != |N\u203e \u2229 Pred(Graph1, \" + v1 + \")|\";", "+                if (termInPred2 > termInPred1) {", "+                    cause =", "+                        \"|Tin2 \u2229 Pred(Graph2, \" + v2", "+                        + \")| != |Tin1 \u2229 Pred(Graph1, \" + v1 + \")|\";", "+                } else if (termOutPred2 > termOutPred1) {", "+                    cause =", "+                        \"|Tout2 \u2229 Pred(Graph2, \" + v2", "+                        + \")| != |Tout1 \u2229 Pred(Graph1, \" + v1 + \")|\";", "+                } else if (newPred2 > newPred1) {", "+                    cause =", "+                        \"|N\u203e \u2229 Pred(Graph2, \" + v2", "+                        + \")| != |N\u203e \u2229 Pred(Graph1, \" + v1 + \")|\";", "+                }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3e114a9936ba5f6241fe5e8a12faba7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c4349ab949368984062ea6d9ca9b996", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/ext/JGraphModelAdapter.java", "commitBeforeChange": "56c09b98e6df528eeef0b8df9f8d932a1ba40192", "commitAfterChange": "75098fa5c7281c0f169434b46722c0b4e66b3a8c", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 45, "signatureBeforeChange": "     protected boolean addJGraphVertex( GraphCell jVertex )", "signatureAfterChange": "          void addVertex( Object jtVertex )", "diff": ["-    protected boolean addJGraphVertex( GraphCell jVertex ) {", "-            // duplicate vertices. We can't use removeJGraphTVertex for", "-            Object[] cells = { jVertex };", "-            remove( cells );", "-", "-            return false;", "-", "-        m_jtVerticesBeingAdded.add( jtVertex );", "-", "-        boolean result = m_jtGraph.addVertex( jtVertex );", "-", "-        m_cellToVertex.put( jVertex, jtVertex );", "-        m_vertexToCell.put( jtVertex, jVertex );", "-", "-        return result;", "-    }", "+", "+        void addVertex( Object jtVertex ) {", "+            m_jtElementsBeingAdded.add( jtVertex );", "+            m_graph.addVertex( jtVertex );", "+            m_jtElementsBeingAdded.remove( jtVertex );", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ee46c13506d82cbe66953940104dced", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/ext/JGraphModelAdapter.java", "commitBeforeChange": "56c09b98e6df528eeef0b8df9f8d932a1ba40192", "commitAfterChange": "75098fa5c7281c0f169434b46722c0b4e66b3a8c", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 23, "signatureBeforeChange": "     protected boolean removeJGraphVertex( GraphCell jVertex )", "signatureAfterChange": "     void handleJGraphRemovedVertex( GraphCell jVertex )", "diff": ["-    protected boolean removeJGraphVertex( GraphCell jVertex ) {", "-        if( !m_cellToVertex.containsKey( jVertex ) ) {", "-            return false;", "-        }", "-", "-        Object jtVertex      = m_cellToVertex.get( jVertex );", "-        List   incidentEdges = m_jtGraph.edgesOf( jtVertex );", "-", "-        if( incidentEdges != null ) {", "-            // We can't just call removeAllEdges with this list: that", "-            // would throw a ConcurrentModificationException. So we create", "-            // a shallow copy.", "-            Iterator iterator = incidentEdges.iterator(  );", "-            incidentEdges = new ArrayList( incidentEdges.size(  ) );", "-", "-            while( iterator.hasNext(  ) ) {", "-                incidentEdges.add( iterator.next(  ) );", "+    void handleJGraphRemovedVertex( GraphCell jVertex ) {", "+        if( m_cellToVertex.containsKey( jVertex ) ) {", "+            Object jtVertex      = m_cellToVertex.get( jVertex );", "+            List   jtIncidentEdges = m_jtGraph.edgesOf( jtVertex );", "+    ", "+            if( !jtIncidentEdges.isEmpty(  ) ) {", "+                // We can't just call removeAllEdges with this list: that", "+                // would throw a ConcurrentModificationException. So we create", "+                // a shallow copy.", "+                // This also triggers removal of the corresponding JGraph edges.", "+                m_jtGraph.removeAllEdges( new ArrayList( jtIncidentEdges ) );", "-", "-            m_jtGraph.removeAllEdges( incidentEdges );", "-", "-            // This also triggers removal of the corresponding JGraph", "-            // edges.", "+    ", "+            m_jtGraph.removeVertex( jtVertex );", "+    ", "+            m_cellToVertex.remove( jVertex );", "+            m_vertexToCell.remove( jtVertex );", "-", "-        m_jtVerticesBeingRemoved.add( jtVertex );", "-", "-        boolean result = m_jtGraph.removeVertex( jtVertex );", "-", "-        m_cellToVertex.remove( jVertex );", "-        m_vertexToCell.remove( jtVertex );", "-", "-        return result;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b7d780e82125dd1b6609f24365a736fa", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fd869b052da822177b70f970e06c149", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/experimental/GraphTests.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public static boolean isBipartite(Graph g)", "signatureAfterChange": "      public static <V, E extends Edge<V>> boolean isBipartite(Graph<V,E> g)", "diff": ["-    public static boolean isBipartite(Graph g)", "+    public static <V, E extends Edge<V>> boolean isBipartite(Graph<V,E> g)", "-        Set unknown = new HashSet(g.vertexSet());", "-        LinkedList queue = new LinkedList();", "-        Object v = unknown.iterator().next();", "-        Set odd = new HashSet();", "+        Set<V> unknown = new HashSet<V>(g.vertexSet());", "+        LinkedList<V> queue = new LinkedList<V>();", "+        V v = unknown.iterator().next();", "+        Set<V> odd = new HashSet<V>();", "-            for (Iterator it = GraphHelper.neighborListOf(g, v).iterator();", "+            for (Iterator<V> it = GraphHelper.neighborListOf(g, v).iterator();", "-                Object n = it.next();", "+                V n = it.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aed8c327df09fd034dc7b32db876939a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/AdaptiveIsomorphismInspectorFactory.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected static GraphIsomorphismInspector     createAppropriateConcreteInspector(         int graphType,         Graph graph1,         Graph graph2,         EquivalenceComparator vertexChecker,         EquivalenceComparator edgeChecker)", "signatureAfterChange": "     protected static <V,E extends Edge<V>> GraphIsomorphismInspector     createAppropriateConcreteInspector(         int graphType,         Graph<V,E> graph1,         Graph<V,E> graph2,         EquivalenceComparator<? super V,? super Graph<V,E>> vertexChecker,         EquivalenceComparator<? super E,? super Graph<V,E>> edgeChecker)", "diff": ["-    protected static GraphIsomorphismInspector", "+    protected static <V,E extends Edge<V>> GraphIsomorphismInspector", "-        Graph graph1,", "-        Graph graph2,", "-        EquivalenceComparator vertexChecker,", "-        EquivalenceComparator edgeChecker)", "+        Graph<V,E> graph1,", "+        Graph<V,E> graph2,", "+        EquivalenceComparator<? super V,? super Graph<V,E>> vertexChecker,", "+        EquivalenceComparator<? super E,? super Graph<V,E>> edgeChecker)", "-        assertUnsupportedGraphTypes(graph1, graph2);", "+        assertUnsupportedGraphTypes(graph1);", "+        assertUnsupportedGraphTypes(graph2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4647e03c3fd515b05a1f1b85f03c6ce", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/VertexCovers.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public Set findGreedyCover( UndirectedGraph g )", "signatureAfterChange": "     public static <V, E extends Edge<V>> Set<V> findGreedyCover( UndirectedGraph<V,E> g )", "diff": ["-    public Set findGreedyCover( UndirectedGraph g ) {", "+    public static <V, E extends Edge<V>> Set<V> findGreedyCover( UndirectedGraph<V,E> g ) {", "-        Set cover = new HashSet(  );", "+        Set<V> cover = new HashSet(  );", "-        UndirectedGraph sg = new UndirectedSubgraph( g, null, null );", "+        UndirectedGraph<V,E> sg = new UndirectedSubgraph( g, null, null );", "-        VertexDegreeComparator comp = new VertexDegreeComparator( sg );", "+        VertexDegreeComparator<V, E> comp = new VertexDegreeComparator( sg );", "-            Object v = Collections.max( sg.vertexSet(  ), comp );", "+            V v = Collections.max( sg.vertexSet(  ), comp );"]}]}
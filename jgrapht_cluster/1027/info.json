{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "04b5df80aa38432fefedf79306063dfa", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "796cedf98b7911be13c2dc07461b4a8b", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/ext/JGraphModelAdapter.java", "commitBeforeChange": "a4491f801ff4eba32d8029dda18c582844b268e3", "commitAfterChange": "dca8f0b0b2b997b3562b349da681aa495eb852bf", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public void insert( Object[] theRoots, Map attributes, ConnectionSet cs,         ParentMap pm, UndoableEdit[] edits )", "signatureAfterChange": "         private void filterEdgesAndVertices( Object[] allCells, Set jEdges,             Set jVertices )", "diff": ["-    public void insert( Object[] theRoots, Map attributes, ConnectionSet cs,", "-        ParentMap pm, UndoableEdit[] edits ) {", "-        throw new UnsupportedOperationException( ", "-            \"Insert only via the JGraphT graph.\" );", "+         */", "+        private void filterEdgesAndVertices( Object[] allCells, Set jEdges,", "+            Set jVertices ) {", "+            for( int i = 0; i < allCells.length; i++ ) {", "+                Object current = allCells[ i ];", "+", "+                if( current instanceof org.jgraph.graph.Edge ) {", "+                    jEdges.add( current );", "+                }", "+                else if( !( current instanceof Port ) ) {", "+                    if( current instanceof DefaultGraphCell ) {", "+                        DefaultGraphCell graphCell = (DefaultGraphCell) current;", "+", "+                        if( graphCell.isLeaf(  ) // Note: do not change the order", "+                                || ", "+                            // of these conditions; the code uses the short-cutting of ||.", "+                            ( graphCell.getFirstChild(  ) instanceof Port ) ) {", "+                            jVertices.add( current );", "+                        }", "+", "+                        // If a DefaultGraphCell has a Port as a child, it is a", "+                    }", "+                    else if( current instanceof GraphCell ) {", "+                        // If it is not a DefaultGraphCell, it doesn't have", "+                        // children.", "+                        jVertices.add( current );", "+                    }", "+", "+                    // Otherwise, this is neither an Edge nor a GraphCell; then we", "+                    // don't know what to do with it. So ignore.", "+                }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a309e8cfd5a99877b4a3220f542e1dc5", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-ext/src/main/java/org/jgrapht/ext/DOTImporter.java", "commitBeforeChange": "2cba8aef2cc77a406de26760e4f816581f7adba7", "commitAfterChange": "915acf67bde336fce1aee298fe506b6a9a961b70", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void read(String input, Graph<V, E> graph) throws ImportException", "signatureAfterChange": "    public void read(String input, AbstractBaseGraph<V, E> graph)          throws ImportException", "diff": ["-   public void read(String input, Graph<V, E> graph) throws ImportException", "+    */", "+   public void read(String input, AbstractBaseGraph<V, E> graph)", "+         throws ImportException", "+   {", "-      validateLines(lines);", "+      validateLines(lines, graph);", "+         String line = lines[lineIndex].trim();", "+", "+         // trim off line comments.", "+         if (line.contains(\"//\")) {", "+            line = line.substring(line.indexOf(\"//\"), line.length());", "+         }", "-         if(lines[lineIndex].trim().isEmpty()) {", "+         if(line.isEmpty()) {", "-         String line = lines[lineIndex].trim();", "-         if (line.startsWith(\"//\") || line.startsWith(\"#\")) {", "+         if (line.startsWith(\"#\")) {", "-            throw new ImportException(\"graph level properties are not currently supported.\");", "+            throw new ImportException(", "+                  \"graph level properties are not currently supported.\"", "+            );", "-              throw new ImportException(\"out of order input\");", "+               if (vertexUpdater != null) {", "+                  vertexUpdater.updateVertex(existing, attributes);", "+               } else {", "+                  throw new ImportException(", "+                        \"Update required for vertex \"", "+                        + label", "+                        + \" but no vertexUpdater provided\"", "+                  );", "+               }", "-               E edge = edgeProvider.buildEdge(v1, v2, attributes.get(\"label\"), attributes);", "+               E edge = edgeProvider.buildEdge(v1,", "+                                               v2,", "+                                               attributes.get(\"label\"),", "+                                               attributes);"]}]}
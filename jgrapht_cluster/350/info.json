{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "812a3c820e789e652063c888cb5b730d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45db40daba353f12fa772595d3cc0a54", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/graph/Subgraph.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public boolean addEdge(E e)", "signatureAfterChange": "     public boolean addEdge(V sourceVertex, V targetVertex, E e)", "diff": ["-    public boolean addEdge(E e)", "+    public boolean addEdge(V sourceVertex, V targetVertex, E e)", "-        assertVertexExist(e.getSource());", "-        assertVertexExist(e.getTarget());", "+        assertVertexExist(sourceVertex);", "+        assertVertexExist(targetVertex);", "+", "+        assert(m_base.getEdgeSource(e) == sourceVertex);", "+        assert(m_base.getEdgeTarget(e) == targetVertex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62f34685bdba4c787dd5942890054c6e", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/graph/AbstractBaseGraph.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public boolean addEdge(E e)", "signatureAfterChange": "     public boolean addEdge(V sourceVertex, V targetVertex, E e)", "diff": ["-    public boolean addEdge(E e)", "+    public boolean addEdge(V sourceVertex, V targetVertex, E e)", "-        V sourceVertex = e.getSource();", "-        V targetVertex = e.getTarget();", "-", "-", "-        assertCompatibleWithEdgeFactory(e);", "-", "+        ", "-        m_edgeSet.add(e);", "+        IntrusiveEdge intrusiveEdge =", "+            createIntrusiveEdge(e, sourceVertex, targetVertex);", "+", "+        m_edgeMap.put(e, intrusiveEdge);", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "edae50954ac1fa93ba36871a4371a1df", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2005ea7e1caa918e2054aa7ff499a4cb", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/traverse/DepthFirstIterator.java", "commitBeforeChange": "618193dfca3ac4de3a61698028cfd965351c74a1", "commitAfterChange": "fff40bd4cd855e6b017814afe0a8444e1360aae0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected void encounterVertexAgain(V vertex, E edge)", "signatureAfterChange": "     protected void encounterVertexAgain(V vertex, E edge)", "diff": ["+        VisitColor color = getSeenData(vertex);", "+        if (color != VisitColor.WHITE) {", "+            // We've already visited this vertex; no need to mess with the", "+            // stack (either it's BLACK and not there at all, or it's GRAY", "+            // and therefore just a sentinel).", "+            return;", "+        }", "+        int i = stack.indexOf(vertex);", "+        // Since we've encountered it before, and it's still WHITE, it", "+        // *must* be on the stack.", "+        assert(i > -1);", "+        stack.remove(i);", "+        stack.add(vertex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c93695f7b1c7557d5288e039ea1d6e5", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/traverse/DepthFirstIterator.java", "commitBeforeChange": "a1f23a3100510ec39002be3afaff305ba3ad818a", "commitAfterChange": "b76ad743469fbc5f4b71d3a57c1c2abdaeec2142", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected void encounterVertexAgain(V vertex, E edge)", "signatureAfterChange": "     protected void encounterVertexAgain(V vertex, E edge)", "diff": ["-        int i = stack.indexOf(vertex);", "-        // *must* be on the stack.", "-        assert (i > -1);", "-        stack.remove(i);", "-        stack.add(vertex);", "+        // *must* be on the stack.  Use removeLastOccurrence on the", "+        // assumption that for typical topologies and traversals,", "+        // it's likely to be nearer the top of the stack than", "+        // the bottom of the stack.", "+        boolean found = stack.removeLastOccurrence(vertex);", "+        assert(found);", "+        stack.addLast(vertex);"]}]}
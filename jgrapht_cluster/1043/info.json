{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6fcf3d093353d9552af1b801fc57ed87", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59ff10f760063850a372c22667af1f48", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/MaximumWeightBipartiteMatchingTest.java", "commitBeforeChange": "985760cbd642d0a5bdb9eca3c84e4565ecb8ceea", "commitAfterChange": "f79565a2a8d7f5186720bf4969b47a8431d60e9c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \t@Test \tpublic void maximumWeightBipartiteMatching4()", "signatureAfterChange": "  \t@Test \tpublic void maximumWeightBipartiteMatching4()", "diff": ["+\t\tgraph.setEdgeWeight(e2, 1);", "+\t\tDefaultWeightedEdge e3 = graph.addEdge(\"s2\", \"t2\");", "+\t\tgraph.setEdgeWeight(e3, 1);", "+\t\t", "+\t\tmatcher = new MaximumWeightBipartiteMatching<String, DefaultWeightedEdge>(graph, partition1, partition2);", "+\t\tSet<DefaultWeightedEdge> matchings = matcher.getMatching();", "+\t\tassertEquals(2, matchings.size());", "+\t\tassertTrue(matchings.contains(e1));", "+\t\tassertTrue(matchings.contains(e3));", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6809414f9ab451c4b9dbbb56849fcc3b", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/alg/DijkstraShortestPathTest.java", "commitBeforeChange": "e3d152c903d64a55a394899016d3b983c6acef7f", "commitAfterChange": "07571b88304723826e2edaac1a71e187c5b1dbe3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testPathBetween()", "signatureAfterChange": "      protected List findPathBetween(Graph g, String src, String dest)", "diff": ["-     */", "-    public void testPathBetween()", "+    protected List findPathBetween(Graph g, String src, String dest)", "-        List path;", "-        Graph g = create();", "-", "-        path = DijkstraShortestPath.findPathBetween(g, V1, V2);", "-        assertEquals(Arrays.asList(new Edge [] { m_e12 }), path);", "-", "-        path = DijkstraShortestPath.findPathBetween(g, V1, V4);", "-        assertEquals(Arrays.asList(new Edge [] {", "-                    m_e12, m_e24", "-                }), path);", "-", "-        path = DijkstraShortestPath.findPathBetween(g, V1, V5);", "-        assertEquals(Arrays.asList(new Edge [] {", "-                    m_e12, m_e24, m_e45", "-                }), path);", "-", "-        path = DijkstraShortestPath.findPathBetween(g, V3, V4);", "-        assertEquals(Arrays.asList(new Edge [] {", "-                    m_e13, m_e12, m_e24", "-                }), path);", "-    }", "+        return DijkstraShortestPath.findPathBetween(g, src, dest);"]}]}
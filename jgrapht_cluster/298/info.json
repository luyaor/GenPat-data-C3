{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4ef72e999b80a9d9c026ec6f0b4d954b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "421043798aff53619b093f9f670e3648", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/experimental/GraphReader.java", "commitBeforeChange": "47ce261ef10be427a6a84aeeebb0d71750a4e26b", "commitAfterChange": "5b8b2def419b220aa57ca346f586e7cc6eacdd0e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private List<String> split(String src)", "signatureAfterChange": "      private String[] split(final String src)", "diff": ["-    private List<String> split(String src)", "+    private String[] split(final String src)", "-        final List<String> l = new ArrayList<String>();", "-        final StringTokenizer tok = new StringTokenizer(src);", "-        while (tok.hasMoreTokens()) {", "-            l.add(tok.nextToken());", "+        if (src == null) {", "+            return null;", "-        return l;", "+        return src.split(\"\\\\s+\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d2e192a4e17ee2993732f71a2965a29", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/experimental/GraphReader.java", "commitBeforeChange": "47ce261ef10be427a6a84aeeebb0d71750a4e26b", "commitAfterChange": "5b8b2def419b220aa57ca346f586e7cc6eacdd0e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private List<String> skipComments()", "signatureAfterChange": "      private String[] skipComments()", "diff": ["-    private List<String> skipComments()", "+    private String[] skipComments()", "+        String[] cols = null;", "-            if (_in.ready()) {", "-                List<String> cols = split(_in.readLine());", "-                while (", "-                    cols.isEmpty()", "-                    || cols.get(0).equals(\"c\")", "-                    || cols.get(0).startsWith(\"%\"))", "-                {", "-                    cols = split(_in.readLine());", "-                }", "-                return cols;", "+            cols = split(_in.readLine());", "+            while (cols != null &&", "+                (cols.length == 0", "+                || cols[0].equals(\"c\")", "+                || cols[0].startsWith(\"%\")))", "+            {", "+                cols = split(_in.readLine());", "-        return null;", "+        return cols;"]}]}
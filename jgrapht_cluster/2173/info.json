{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bb64bfa8c3d29b5be18b1c96e712d92c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c57a66b50961b737826dc3b16904cfa", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/FloydWarshallShortestPaths.java", "commitBeforeChange": "d7f7cbbfd0143e6a9086c076c1104a053d15c62a", "commitAfterChange": "7b97b6d936026ab3119fdc6b39b41308364e04ca", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private GraphPath<V, E> getShortestPathImpl(V a, V b)", "signatureAfterChange": "      private GraphPath<V, E> getShortestPathImpl(V a, V b)", "diff": ["-", "+        ", "+        double weight = 0.;", "+        for (E e : edges) {", "+        \tweight += graph.getEdgeWeight(e);", "+        }", "+        ", "-            new GraphPathImpl<V, E>(graph, a, b, edges, edges.size());", "+            new GraphPathImpl<V, E>(graph, a, b, edges, weight);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb99ee894326a335fc386c2045977c85", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/VF2SubgraphIsomorphismInspector.java", "commitBeforeChange": "dcd52f7fb7eeeadf66a7b8d39b5c500257a852b0", "commitAfterChange": "c2593980e98ffd3b0fd8713e1065362c591d271a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public VF2SubgraphIsomorphismInspector(                     Graph<V, E> graph1,                     Graph<V, E> graph2,                     Comparator<V> vertexComparator,                     Comparator<E> edgeComparator)", "signatureAfterChange": "     public VF2SubgraphIsomorphismInspector(                     Graph<V, E> graph1,                     Graph<V, E> graph2,                     Comparator<V> vertexComparator,                     Comparator<E> edgeComparator)", "diff": ["-        this.ordering1        = new GraphOrdering<V, E>(graph1);", "-        this.ordering2        = new GraphOrdering<V, E>(graph2);", "+        this.ordering1        = new GraphOrdering<V, E>(graph1, true);", "+        this.ordering2        = new GraphOrdering<V, E>(graph2, true);"]}]}
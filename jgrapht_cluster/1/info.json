{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9b0a9aac00b0491089a1b61fd32b97aa", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74c053811239aa6011693000e6d770fe", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/experimental/PartiteRandomGraphGenerator.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void generateGraph(             Graph<V,E> target,             VertexFactory<V> vertexFactory,             Map<String,Object[]> resultMap)", "signatureAfterChange": "     public void generateGraph(             Graph<V,E> target,             VertexFactory<V> vertexFactory,             Map<String,Object[]> resultMap)", "diff": ["-        Object [][] vertices = new Object [m_numVertices.length][];", "+        Object [][] vertices = new Object [numVertices.length][];", "-        for (int i = 0; i < m_numVertices.length; i++) {", "+        for (int i = 0; i < numVertices.length; i++) {", "-                    m_numVertices[i]);", "+                    numVertices[i]);", "-                    m_numEdges);", "+                    numEdges);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac87228df7c6c3e457a885a3ac7f3385", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/FloydWarshallShortestPaths.java", "commitBeforeChange": "bb3d0554d44bc9c9665912f8de77451452b3b6cf", "commitAfterChange": "8b23a5ff1277c7020e2ba7e733dafae09723a1b7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public double getDiameter()", "signatureAfterChange": "     public double getDiameter()", "diff": ["+", "+        if (Double.isNaN(diameter)) {", "+            diameter = 0.0;", "+            int n = vertices.size();", "+            for (int i = 0; i < n; i++) {", "+                for (int j = 0; j < n; j++) {", "+                    if (!Double.isInfinite(d[i][j]) && d[i][j] > diameter) {", "+                        diameter = d[i][j];", "+                    }", "+                }", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e794ab145829eef793f86be207793ab2", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/FloydWarshallShortestPaths.java", "commitBeforeChange": "b261cb99c92126b64c9129dbe772684f0da5e234", "commitAfterChange": "22927827f36ad9b2cef7c5f5670c4d2598840023", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void lazyCalculate()", "signatureAfterChange": "     private void lazyCalculate()", "diff": ["-    private void lazyCalculate() {", "-", "+    private void lazyCalculate()", "+    {", "-        for (int i = 0; i < n; i++)", "+        for (int i = 0; i < n; i++) {", "+        }", "-        for (int i = 0; i < n; i++)", "+        for (int i = 0; i < n; i++) {", "+        }", "-                        diameter = diameter > d[i][j] ? diameter : d[i][j];", "+                        diameter = (diameter > d[i][j]) ? diameter : d[i][j];"]}]}
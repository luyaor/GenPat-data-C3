{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e8b4075e845ccb76c2a1a49d13f541a1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62a8e73475aca1d2549ec4d6e9af4d6f", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/experimental/alg/VertexCoverGreedyAlgorithm.java", "commitBeforeChange": "a61c430f2ac7af9e4b0519b792fa90091fa0462d", "commitAfterChange": "3dfe7bd3c3baf72541946589aad20525c29233c0", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\t \tpublic VertexCoverGreedyAlgorithm(Pseudograph graph)", "signatureAfterChange": "     public VertexCoverGreedyAlgorithm( Graph g )", "diff": ["-\t */\t", "-\tpublic VertexCoverGreedyAlgorithm(Pseudograph graph) {", "-\t\tthis.graph = graph;", "-\t}", "+     */", "+    public VertexCoverGreedyAlgorithm( Graph g ) {", "+        if( g instanceof DirectedGraph ) {", "+            m_graph = new AsUndirectedGraph( (DirectedGraph) g );", "+        }", "+        else if( g instanceof UndirectedGraph ) {", "+            m_graph = (UndirectedGraph) g;", "+        }", "+        else {", "+            throw new IllegalArgumentException( \"Unrecognized graph\" );", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f39b357b1d385113aadc3ba4788f0491", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/util/VertexDegreeComparator.java", "commitBeforeChange": "e7ee93188d586bd5ab1949179c701faba108c0b1", "commitAfterChange": "bebf827ee740e58a33cc631cc3a312208e3261b6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public VertexDegreeComparator( Graph g, boolean ascendingOrder )", "signatureAfterChange": "     public VertexDegreeComparator( UndirectedGraph g, boolean ascendingOrder )", "diff": ["-    public VertexDegreeComparator( Graph g, boolean ascendingOrder ) {", "-        if( g instanceof DirectedGraph ) {", "-            m_graph = new AsUndirectedGraph( (DirectedGraph) g );", "-        }", "-        else if( g instanceof UndirectedGraph ) {", "-            m_graph = (UndirectedGraph) g;", "-        }", "-        else {", "-            throw new IllegalArgumentException( \"Unrecognized graph\" );", "-        }", "-", "-        m_ascendingOrder = ascendingOrder;", "+    public VertexDegreeComparator( UndirectedGraph g, boolean ascendingOrder ) {", "+        m_graph              = g;", "+        m_ascendingOrder     = ascendingOrder;"]}]}
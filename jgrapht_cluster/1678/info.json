{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d626730f628cc54a3b966be89206fd8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ada1fb215a802ac7c83090c0d4b33123", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/flow/MaximumFlowAlgorithmTestBase.java", "commitBeforeChange": "62325cdd7548d0cf930d478a885b2a08e669b9bb", "commitAfterChange": "6a8a4c15d51c52101d91cd979c3d30cc12195d89", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public void testRandomGraph()", "signatureAfterChange": "      public void testRandomGraph()", "diff": ["-        System.out.println(\"== GENERATED ==\");", "+        System.out.println(\"\\n=== GENERATED ===\\n\");", "-        checkPushRelabel(network, source, sink);", "-        checkEdmondsKarp(network, source, sink);", "+        MaximumFlow<Integer, DefaultWeightedEdge> maxFlow = createSolver(network).buildMaximumFlow(source, sink);", "+        check(maxFlow, source, sink, network);", "+", "+        // _DBG", "-//        dumpGraph(network, source, sink);", "+        // _DBG", "+        //dumpGraph(network, source, sink);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c415dc89ed47760cad198d68e64866e9", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/flow/MaximumFlowAlgorithmTestBase.java", "commitBeforeChange": "9782c283bdcce76cc2595665a8632849f2558e9e", "commitAfterChange": "92d03807c71690a78bba118dfc95207663fee68a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public void testRandomGraph()", "signatureAfterChange": "      public void testRandomGraph()", "diff": ["-        System.out.println(\"\\n=== GENERATED ===\\n\");", "-", "-        check(maxFlow, source, sink, network);", "-", "-        // _DBG", "-        System.out.println(rgg.getRandomSeed());", "-", "-        // _DBG", "-        //dumpGraph(network, source, sink);", "+        if (false) {", "+            check(maxFlow, source, sink, network);", "+        }"]}]}
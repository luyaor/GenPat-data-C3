{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd6e2b460c5b88517a991c55f1d4aec5", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82b2dcdb5988711cb585834634398e4c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/isomorphism/VF2SubgraphIsomorphismInspectorTest.java", "commitBeforeChange": "3d942aa8341a7b21b0a2aed7fe990a3895f7cc26", "commitAfterChange": "d5ca1401dd353d6e45cdea97764ece72454f943b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     @Test     public void testEdgeCasesSimpleGraph()", "signatureAfterChange": "     @Test     public void testEdgeCasesSimpleGraph()", "diff": ["-    */", "+     */", "-                    (sg0v, sg0v2);", "+                        (sg0v, sg0v2);", "-                    (sg4v3e, sg0v);", "+                        (sg4v3e, sg0v);", "-                    (sg0v, sg4v3e);", "+                        (sg0v, sg4v3e);", "-                new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "+            new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "-                    (sg4v3e, sg1v);", "+                        (sg4v3e, sg1v);", "-            vfs4.getMappings();", "+                        vfs4.getMappings();", "-        Set<String> mappings = ", "+        Set<String> mappings =", "-                    (sg0v, sg1v);", "+                        (sg0v, sg1v);", "-                new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "+            new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "-                    (sg4v3e, sg3v0e);", "+                        (sg4v3e, sg3v0e);", "+", "-                new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "+            new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "-                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "-                vfs7.getMappings();", "+                        vfs7.getMappings();", "-                new HashSet<String>(Arrays.asList(\"[5=1 6=2 7=~~]\",", "-                        \"[5=1 6=~~ 7=2]\",", "-                        \"[5=2 6=1 7=~~]\",", "-                        \"[5=~~ 6=1 7=2]\",", "-                        \"[5=2 6=~~ 7=1]\",", "-                        \"[5=~~ 6=2 7=1]\"));", "+            new HashSet<String>(Arrays.asList(\"[5=1 6=2 7=~~]\",", "+                                              \"[5=1 6=~~ 7=2]\",", "+                                              \"[5=2 6=1 7=~~]\",", "+                                              \"[5=~~ 6=1 7=2]\",", "+                                              \"[5=2 6=~~ 7=1]\",", "+                                              \"[5=~~ 6=2 7=1]\"));", "-                    (sg3v0e, sg2v1e);", "+                        (sg3v0e, sg2v1e);", "-        * graph smaller than subgraph*/", "+         * graph smaller than subgraph */", "-                    new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "+            new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "-                new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "+            new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "-                new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "+            new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "-                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+", "-        * graph bigger than subgraph*/", "+         * graph bigger than subgraph */", "-                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "-                    (sg4k, sg3k);", "+            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                        (sg4k, sg3k);", "-                vfs10.getMappings();", "+                        vfs10.getMappings();", "-                new HashSet<String>(Arrays.asList(", "-                        \"[0=0 1=1 2=2 3=~~]\",", "-                        \"[0=0 1=1 2=~~ 3=2]\",", "-                        \"[0=0 1=~~ 2=1 3=2]\",", "-                        \"[0=~~ 1=0 2=1 3=2]\",", "-                        \"[0=1 1=0 2=2 3=~~]\",", "-                        \"[0=1 1=0 2=~~ 3=2]\",", "-                        \"[0=1 1=~~ 2=0 3=2]\",", "-                        \"[0=~~ 1=1 2=0 3=2]\",", "-                        \"[0=2 1=1 2=0 3=~~]\",", "-                        \"[0=2 1=1 2=~~ 3=0]\",", "-                        \"[0=2 1=~~ 2=1 3=0]\",", "-                        \"[0=~~ 1=2 2=1 3=0]\",", "-                        \"[0=0 1=2 2=1 3=~~]\",", "-                        \"[0=0 1=2 2=~~ 3=1]\",", "-                        \"[0=0 1=~~ 2=2 3=1]\",", "-                        \"[0=~~ 1=0 2=2 3=1]\",", "-                        \"[0=1 1=2 2=0 3=~~]\",", "-                        \"[0=1 1=2 2=~~ 3=0]\",", "-                        \"[0=1 1=~~ 2=2 3=0]\",", "-                        \"[0=~~ 1=1 2=2 3=0]\",", "-                        \"[0=2 1=0 2=1 3=~~]\",", "-                        \"[0=2 1=0 2=~~ 3=1]\",", "-                        \"[0=2 1=~~ 2=0 3=1]\",", "-                        \"[0=~~ 1=2 2=0 3=1]\"", "-                ));", "-        assertEquals(true, mappings10.remove(iter10.next().toString()));", "-        assertEquals(true, mappings10.remove(iter10.next().toString()));", "-        assertEquals(true, mappings10.remove(iter10.next().toString()));", "-        assertEquals(true, mappings10.remove(iter10.next().toString()));", "-        assertEquals(true, mappings10.remove(iter10.next().toString()));", "-        assertEquals(true, mappings10.remove(iter10.next().toString()));", "-        assertEquals(true, mappings10.remove(iter10.next().toString()));", "-        assertEquals(true, mappings10.remove(iter10.next().toString()));", "-        assertEquals(true, mappings10.remove(iter10.next().toString()));", "-        assertEquals(true, mappings10.remove(iter10.next().toString()));", "-        assertEquals(true, mappings10.remove(iter10.next().toString()));", "-        assertEquals(true, mappings10.remove(iter10.next().toString()));", "-        assertEquals(true, mappings10.remove(iter10.next().toString()));", "-        assertEquals(true, mappings10.remove(iter10.next().toString()));", "-        assertEquals(true, mappings10.remove(iter10.next().toString()));", "-        assertEquals(true, mappings10.remove(iter10.next().toString()));", "-        assertEquals(true, mappings10.remove(iter10.next().toString()));", "-        assertEquals(true, mappings10.remove(iter10.next().toString()));", "-        assertEquals(true, mappings10.remove(iter10.next().toString()));", "-        assertEquals(true, mappings10.remove(iter10.next().toString()));", "-        assertEquals(true, mappings10.remove(iter10.next().toString()));", "-        assertEquals(true, mappings10.remove(iter10.next().toString()));", "-        assertEquals(true, mappings10.remove(iter10.next().toString()));", "-        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+            new HashSet<String>(Arrays.asList(\"[0=0 1=1 2=2 3=~~]\",", "+                                              \"[0=0 1=1 2=~~ 3=2]\",", "+                                              \"[0=0 1=~~ 2=1 3=2]\",", "+                                              \"[0=~~ 1=0 2=1 3=2]\",", "+                                              \"[0=1 1=0 2=2 3=~~]\",", "+                                              \"[0=1 1=0 2=~~ 3=2]\",", "+                                              \"[0=1 1=~~ 2=0 3=2]\",", "+                                              \"[0=~~ 1=1 2=0 3=2]\",", "+                                              \"[0=2 1=1 2=0 3=~~]\",", "+                                              \"[0=2 1=1 2=~~ 3=0]\",", "+                                              \"[0=2 1=~~ 2=1 3=0]\",", "+                                              \"[0=~~ 1=2 2=1 3=0]\",", "+                                              \"[0=0 1=2 2=1 3=~~]\",", "+                                              \"[0=0 1=2 2=~~ 3=1]\",", "+                                              \"[0=0 1=~~ 2=2 3=1]\",", "+                                              \"[0=~~ 1=0 2=2 3=1]\",", "+                                              \"[0=1 1=2 2=0 3=~~]\",", "+                                              \"[0=1 1=2 2=~~ 3=0]\",", "+                                              \"[0=1 1=~~ 2=2 3=0]\",", "+                                              \"[0=~~ 1=1 2=2 3=0]\",", "+                                              \"[0=2 1=0 2=1 3=~~]\",", "+                                              \"[0=2 1=0 2=~~ 3=1]\",", "+                                              \"[0=2 1=~~ 2=0 3=1]\",", "+                                              \"[0=~~ 1=2 2=0 3=1]\"));", "+        for (int i = 0; i < 24; i++)", "+            assertEquals(true, mappings10.remove(iter10.next().toString()));", "-                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "-                vfs11.getMappings();", "+                        vfs11.getMappings();", "-                new HashSet<String>(Arrays.asList(\"[1=1 2=2 3=3 4=4]\",", "-                        \"[1=4 2=3 3=2 4=1]\"));", "+            new HashSet<String>(Arrays.asList(\"[1=1 2=2 3=3 4=4]\",", "+                                              \"[1=4 2=3 3=2 4=1]\"));", "+", "-                new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "+            new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "-                new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "+            new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "-                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "-                vfs12.getMappings();", "+                        vfs12.getMappings();", "-                new HashSet<String>(Arrays.asList(", "-                        \"[0=~~ 1=8 2=10 3=9 4=7 5=6]\",", "-                        \"[0=~~ 1=9 2=8 3=10 4=7 5=6]\",", "-                        \"[0=~~ 1=10 2=9 3=8 4=7 5=6]\",", "-                        \"[0=~~ 1=8 2=10 3=9 4=6 5=7]\",", "-                        \"[0=~~ 1=9 2=8 3=10 4=6 5=7]\",", "-                        \"[0=~~ 1=10 2=9 3=8 4=6 5=7]\",", "-                        \"[0=~~ 1=10 2=8 3=9 4=7 5=6]\",", "-                        \"[0=~~ 1=8 2=9 3=10 4=7 5=6]\",", "-                        \"[0=~~ 1=9 2=10 3=8 4=7 5=6]\",", "-                        \"[0=~~ 1=10 2=8 3=9 4=6 5=7]\",", "-                        \"[0=~~ 1=8 2=9 3=10 4=6 5=7]\",", "-                        \"[0=~~ 1=9 2=10 3=8 4=6 5=7]\"));", "-        assertEquals(true, mappings12.remove(iter12.next().toString()));", "-        assertEquals(true, mappings12.remove(iter12.next().toString()));", "-        assertEquals(true, mappings12.remove(iter12.next().toString()));", "-        assertEquals(true, mappings12.remove(iter12.next().toString()));", "-        assertEquals(true, mappings12.remove(iter12.next().toString()));", "-        assertEquals(true, mappings12.remove(iter12.next().toString()));", "-        assertEquals(true, mappings12.remove(iter12.next().toString()));", "-        assertEquals(true, mappings12.remove(iter12.next().toString()));", "-        assertEquals(true, mappings12.remove(iter12.next().toString()));", "-        assertEquals(true, mappings12.remove(iter12.next().toString()));", "-        assertEquals(true, mappings12.remove(iter12.next().toString()));", "-        assertEquals(true, mappings12.remove(iter12.next().toString()));", "+            new HashSet<String>(Arrays.asList(\"[0=~~ 1=8 2=10 3=9 4=7 5=6]\",", "+                                              \"[0=~~ 1=9 2=8 3=10 4=7 5=6]\",", "+                                              \"[0=~~ 1=10 2=9 3=8 4=7 5=6]\",", "+                                              \"[0=~~ 1=8 2=10 3=9 4=6 5=7]\",", "+                                              \"[0=~~ 1=9 2=8 3=10 4=6 5=7]\",", "+                                              \"[0=~~ 1=10 2=9 3=8 4=6 5=7]\",", "+                                              \"[0=~~ 1=10 2=8 3=9 4=7 5=6]\",", "+                                              \"[0=~~ 1=8 2=9 3=10 4=7 5=6]\",", "+                                              \"[0=~~ 1=9 2=10 3=8 4=7 5=6]\",", "+                                              \"[0=~~ 1=10 2=8 3=9 4=6 5=7]\",", "+                                              \"[0=~~ 1=8 2=9 3=10 4=6 5=7]\",", "+                                              \"[0=~~ 1=9 2=10 3=8 4=6 5=7]\"));", "+        for (int i = 0; i < 12; i++)", "+            assertEquals(true, mappings12.remove(iter12.next().toString()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9d9dffb813f4e0e846f0c697395c5bc", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/isomorphism/VF2SubgraphIsomorphismInspectorTest.java", "commitBeforeChange": "5ad133ca974bee3f583f3037c1c5c902d0c89ecf", "commitAfterChange": "674a0a942965578d6c9d23a87f5c2c2d55185248", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     @Test     public void testEdgeCasesSimpleGraph()", "signatureAfterChange": "     @Test     public void testEdgeCasesSimpleGraph()", "diff": ["-        SimpleGraph<Integer, DefaultEdge> sg5c =", "+        SimpleGraph<Integer, DefaultEdge> sg5k =", "-        sg5c.addVertex(0);", "-        sg5c.addVertex(1);", "-        sg5c.addVertex(2);", "-        sg5c.addVertex(3);", "-        sg5c.addVertex(4);", "+        sg5k.addVertex(0);", "+        sg5k.addVertex(1);", "+        sg5k.addVertex(2);", "+        sg5k.addVertex(3);", "+        sg5k.addVertex(4);", "-        sg5c.addEdge(0, 1);", "-        sg5c.addEdge(0, 2);", "-        sg5c.addEdge(0, 3);", "-        sg5c.addEdge(0, 4);", "-        sg5c.addEdge(1, 2);", "-        sg5c.addEdge(1, 3);", "-        sg5c.addEdge(1, 4);", "-        sg5c.addEdge(2, 3);", "-        sg5c.addEdge(2, 4);", "-        sg5c.addEdge(3, 4);", "+        sg5k.addEdge(0, 1);", "+        sg5k.addEdge(0, 2);", "+        sg5k.addEdge(0, 3);", "+        sg5k.addEdge(0, 4);", "+        sg5k.addEdge(1, 2);", "+        sg5k.addEdge(1, 3);", "+        sg5k.addEdge(1, 4);", "+        sg5k.addEdge(2, 3);", "+        sg5k.addEdge(2, 4);", "+        sg5k.addEdge(3, 4);", "-        SimpleGraph<Integer, DefaultEdge> sg4c =", "+        SimpleGraph<Integer, DefaultEdge> sg4k =", "-        sg4c.addVertex(0);", "-        sg4c.addVertex(1);", "-        sg4c.addVertex(2);", "-        sg4c.addVertex(3);", "+        sg4k.addVertex(0);", "+        sg4k.addVertex(1);", "+        sg4k.addVertex(2);", "+        sg4k.addVertex(3);", "-        sg4c.addEdge(0, 1);", "-        sg4c.addEdge(0, 2);", "-        sg4c.addEdge(0, 3);", "-        sg4c.addEdge(1, 2);", "-        sg4c.addEdge(1, 3);", "-        sg4c.addEdge(2, 3);", "+        sg4k.addEdge(0, 1);", "+        sg4k.addEdge(0, 2);", "+        sg4k.addEdge(0, 3);", "+        sg4k.addEdge(1, 2);", "+        sg4k.addEdge(1, 3);", "+        sg4k.addEdge(2, 3);", "+", "+        SimpleGraph<Integer, DefaultEdge> sg3k =", "+                new SimpleGraph<Integer, DefaultEdge>(DefaultEdge.class);", "+", "+        sg3k.addVertex(0);", "+        sg3k.addVertex(1);", "+        sg3k.addVertex(2);", "+", "+        sg3k.addEdge(0, 1);", "+        sg3k.addEdge(0, 2);", "+        sg3k.addEdge(1, 2);", "-                        (sg4c, sg5c);", "+                        (sg4k, sg5k);", "-                    (sg5c, sg4c);", "+                    (sg4k, sg3k);", "+        Iterator<IsomorphicGraphMapping<Integer, DefaultEdge>> iter10 =", "+                vfs10.getMappings();", "-        /* expected result is the mapping that is usually first found,", "-         * it is possible that a different matching is found first", "-         * (false result), though the algorithm works correctly,", "-         * especially if an ordering of the vertices is applied", "-         */", "-        assertEquals(\"[0=0 1=1 2=2 3=3 4=~~]\",", "-        vfs10.getMappings().next().toString());", "+        Set<String> mappings10 =", "+                new HashSet<String>(Arrays.asList(", "+                        \"[0=0 1=1 2=2 3=~~]\",", "+                        \"[0=0 1=1 2=~~ 4=2]\",", "+                        \"[0=0 1=~~ 3=1 4=2]\",", "+                        \"[0=~~ 2=0 3=1 4=2]\",", "+                        \"[0=1 1=0 2=2 3=~~]\",", "+                        \"[0=1 1=0 2=~~ 4=2]\",", "+                        \"[0=1 1=~~ 3=0 4=2]\",", "+                        \"[0=~~ 2=1 3=0 4=2]\",", "+                        \"[0=2 1=1 2=0 3=~~]\",", "+                        \"[0=2 1=1 2=~~ 4=0]\",", "+                        \"[0=2 1=~~ 3=1 4=0]\",", "+                        \"[0=~~ 2=2 3=1 4=0]\",", "+                        \"[0=0 1=2 2=1 3=~~]\",", "+                        \"[0=0 1=2 2=~~ 4=1]\",", "+                        \"[0=0 1=~~ 3=2 4=1]\",", "+                        \"[0=~~ 2=0 3=2 4=1]\",", "+                        \"[0=1 1=2 2=0 3=~~]\",", "+                        \"[0=1 1=2 2=~~ 4=0]\",", "+                        \"[0=1 1=~~ 3=2 4=0]\",", "+                        \"[0=~~ 2=1 3=2 4=0]\",", "+                        \"[0=2 1=1 2=0 3=~~]\",", "+                        \"[0=2 1=1 2=~~ 4=0]\",", "+                        \"[0=2 1=~~ 3=1 4=0]\",", "+                        \"[0=~~ 2=2 3=1 4=0]\"", "+                ));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(false, iter10.hasNext());", "-        /* expected result is the mapping that is usually first found,", "-         * it is possible that a different matching is found first", "-         * (false result), though the algorithm works correctly,", "-         * especially if an ordering of the vertices is applied", "-         */", "-        assertEquals(\"[1=1 2=2 3=3 4=4]\",", "-                vfs11.getMappings().next().toString());", "+        Iterator<IsomorphicGraphMapping<Integer, DefaultEdge>> iter11 =", "+                vfs11.getMappings();", "+", "+        Set<String> mappings11 =", "+                new HashSet<String>(Arrays.asList(\"[1=1 2=2 3=3 4=4]\",", "+                        \"[1=4 2=3 3=2 4=1]\"));", "+        assertEquals(true, mappings11.remove(iter11.next().toString()));", "+        assertEquals(true, mappings11.remove(iter11.next().toString()));", "+        assertEquals(false, iter11.hasNext());", "-        /* expected result is the mapping that is usually first found,", "-         * it is possible that a different matching is found first", "-         * (false result), though the algorithm works correctly,", "-         * especially if an ordering of the vertices is applied", "-         */", "-        assertEquals(\"[0=~~ 1=8 2=9 3=10 4=6 5=7]\",", "-                vfs12.getMappings().next().toString());", "-    }", "+        Iterator<IsomorphicGraphMapping<Integer, DefaultEdge>> iter12 =", "+                vfs12.getMappings();", "+", "+        Set<String> mappings12 =", "+                new HashSet<String>(Arrays.asList(", "+                        \"[0=~~ 1=8 2=10 3=9 4=7 5=6]\",", "+                        \"[0=~~ 1=9 2=8 3=10 4=7 5=6]\",", "+                        \"[0=~~ 1=10 2=9 3=8 4=7 5=6]\",", "+                        \"[0=~~ 1=8 2=10 3=9 4=6 5=7]\",", "+                        \"[0=~~ 1=9 2=8 3=10 4=6 5=7]\",", "+                        \"[0=~~ 1=10 2=9 3=8 4=6 5=7]\",", "+                        \"[0=~~ 1=10 2=8 3=9 4=7 5=6]\",", "+                        \"[0=~~ 1=8 2=9 3=10 4=7 5=6]\",", "+                        \"[0=~~ 1=9 2=10 3=8 4=7 5=6]\",", "+                        \"[0=~~ 1=10 2=8 3=9 4=6 5=7]\",", "+                        \"[0=~~ 1=8 2=9 3=10 4=6 5=7]\",", "+                        \"[0=~~ 1=9 2=10 3=8 4=6 5=7]\"));", "+        assertEquals(true, mappings12.remove(iter12.next().toString()));", "+        assertEquals(true, mappings12.remove(iter12.next().toString()));", "+        assertEquals(true, mappings12.remove(iter12.next().toString()));", "+        assertEquals(true, mappings12.remove(iter12.next().toString()));", "+        assertEquals(true, mappings12.remove(iter12.next().toString()));", "+        assertEquals(true, mappings12.remove(iter12.next().toString()));", "+        assertEquals(true, mappings12.remove(iter12.next().toString()));", "+        assertEquals(true, mappings12.remove(iter12.next().toString()));", "+        assertEquals(true, mappings12.remove(iter12.next().toString()));", "+        assertEquals(true, mappings12.remove(iter12.next().toString()));", "+        assertEquals(true, mappings12.remove(iter12.next().toString()));", "+        assertEquals(true, mappings12.remove(iter12.next().toString()));", "+        assertEquals(false, iter12.hasNext());", "+   }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4fe8a84f294f269d66c5f5878de55e69", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcfa351c9bcdb92237f1d23f0bc51413", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/SubgraphIsomorphismRelation.java", "commitBeforeChange": "7518fda5e34fbd0d30800f00a7bcae8e402c0396", "commitAfterChange": "b0ffaa521363d5faf1bf5b397f78265b9ab95ae6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t@Override \tpublic E getEdgeCorrespondence(E e, boolean forward)", "signatureAfterChange": "      @Override     public E getEdgeCorrespondence(E e, boolean forward)", "diff": ["-\t@Override", "-\tpublic E getEdgeCorrespondence(E e, boolean forward) {", "-\t\tGraphOrdering<V,E> firstGraph, secondGraph;", "-\t\tint[] core;", "-\t\t", "-\t\tif (forward)\t{", "-\t\t\tfirstGraph  = g1;", "-\t\t\tsecondGraph = g2;", "-\t\t\tcore        = core1;", "-\t\t} else {", "-\t\t\tfirstGraph  = g2;", "-\t\t\tsecondGraph = g1;", "-\t\t\tcore        = core2;", "-\t\t}", "-\t\t", "-\t\tint[] eOrder = firstGraph.getEdgeOrder(e);", "-\t\tif (core[eOrder[0]] == NULL_NODE || core[eOrder[1]] == NULL_NODE)", "-\t\t\treturn null;", "-\t\t", "-\t\treturn secondGraph.getEdge(core[eOrder[0]], core[eOrder[1]]);", "-\t}", "+", "+    @Override", "+    public E getEdgeCorrespondence(E e, boolean forward) {", "+        GraphOrdering<V, E> firstGraph, secondGraph;", "+        int[] core;", "+", "+        if (forward) {", "+            firstGraph  = g1;", "+            secondGraph = g2;", "+            core        = core1;", "+        } else {", "+            firstGraph  = g2;", "+            secondGraph = g1;", "+            core        = core2;", "+        }", "+", "+        int[] eNumbers = firstGraph.getEdgeNumbers(e);", "+        if (core[eNumbers[0]] == VF2SubState.NULL_NODE ||", "+                        core[eNumbers[1]] == VF2SubState.NULL_NODE)", "+            return null;", "+", "+        return secondGraph.getEdge(core[eNumbers[0]], core[eNumbers[1]]);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd78ba8652f6260a45e73d9089419e47", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/SubgraphIsomorphismRelation.java", "commitBeforeChange": "7518fda5e34fbd0d30800f00a7bcae8e402c0396", "commitAfterChange": "b0ffaa521363d5faf1bf5b397f78265b9ab95ae6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t \t@Override \tpublic V getVertexCorrespondence(V v, boolean forward)", "signatureAfterChange": "      @Override     public V getVertexCorrespondence(V v, boolean forward)", "diff": ["-\t", "-\t@Override", "-\tpublic V getVertexCorrespondence(V v, boolean forward) {", "-\t\tGraphOrdering<V,E> firstGraph, secondGraph;", "-\t\tint[] core;", "-\t\t", "-\t\tif (forward)\t{", "-\t\t\tfirstGraph  = g1;", "-\t\t\tsecondGraph = g2;", "-\t\t\tcore        = core1;", "-\t\t} else {", "-\t\t\tfirstGraph  = g2;", "-\t\t\tsecondGraph = g1;", "-\t\t\tcore        = core2;", "-\t\t}", "-\t\t", "-\t\tint vOrdering = firstGraph.getVertexOrder(v),", "-\t\t\tuOrdering = core[vOrdering];", "-\t\t", "-\t\tif (uOrdering == NULL_NODE)", "-\t\t\treturn null;", "-\t\t", "-\t\treturn secondGraph.getVertex(uOrdering);", "-\t}", "+", "+    @Override", "+    public V getVertexCorrespondence(V v, boolean forward) {", "+        GraphOrdering<V, E> firstGraph, secondGraph;", "+        int[] core;", "+", "+        if (forward) {", "+            firstGraph  = g1;", "+            secondGraph = g2;", "+            core        = core1;", "+        } else {", "+            firstGraph  = g2;", "+            secondGraph = g1;", "+            core        = core2;", "+        }", "+", "+        int vNumber = firstGraph.getVertexNumber(v),", "+            uNumber = core[vNumber];", "+", "+        if (uNumber == VF2SubState.NULL_NODE)", "+            return null;", "+", "+        return secondGraph.getVertex(uNumber);", "+    }"]}]}